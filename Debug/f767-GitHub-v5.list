
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001789c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  08017aa0  08017aa0  00027aa0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ab8  08019ab8  00031610  2**0
                  CONTENTS
  4 .ARM          00000008  08019ab8  08019ab8  00029ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ac0  08019ac0  00031610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019ac0  08019ac0  00029ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ac4  08019ac4  00029ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001610  20000000  08019ac8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20001610  0801b0d8  00031610  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001b50  0801b0d8  00031b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031610  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdb1  00000000  00000000  0003163e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8c  00000000  00000000  0004e3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00052380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  000537c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8a3  00000000  00000000  00054a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc40  00000000  00000000  00081313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e407  00000000  00000000  0009df53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac35a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f4  00000000  00000000  001ac3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001b28a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001b296c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001610 	.word	0x20001610
 800021c:	00000000 	.word	0x00000000
 8000220:	08017a84 	.word	0x08017a84

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001614 	.word	0x20001614
 800023c:	08017a84 	.word	0x08017a84

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b9a8 	b.w	8000658 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f83a 	bl	8000388 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__aeabi_f2lz>:
 8000320:	ee07 0a90 	vmov	s15, r0
 8000324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032c:	d401      	bmi.n	8000332 <__aeabi_f2lz+0x12>
 800032e:	f000 b80b 	b.w	8000348 <__aeabi_f2ulz>
 8000332:	eef1 7a67 	vneg.f32	s15, s15
 8000336:	b508      	push	{r3, lr}
 8000338:	ee17 0a90 	vmov	r0, s15
 800033c:	f000 f804 	bl	8000348 <__aeabi_f2ulz>
 8000340:	4240      	negs	r0, r0
 8000342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000346:	bd08      	pop	{r3, pc}

08000348 <__aeabi_f2ulz>:
 8000348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000378 <__aeabi_f2ulz+0x30>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000380 <__aeabi_f2ulz+0x38>
 8000354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800035c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000360:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000364:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000368:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800036c:	ee16 1a10 	vmov	r1, s12
 8000370:	ee17 0a90 	vmov	r0, s15
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	00000000 	.word	0x00000000
 800037c:	3df00000 	.word	0x3df00000
 8000380:	00000000 	.word	0x00000000
 8000384:	41f00000 	.word	0x41f00000

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CRC_Init+0x3c>)
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <MX_CRC_Init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CRC_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CRC_Init+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CRC_Init+0x3c>)
 8000686:	f004 f849 	bl	800471c <HAL_CRC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000690:	f001 f90c 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000162c 	.word	0x2000162c
 800069c:	40023000 	.word	0x40023000

080006a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_CRC_MspInit+0x38>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023000 	.word	0x40023000
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2044      	movs	r0, #68	; 0x44
 8000704:	f003 ffd3 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000708:	2044      	movs	r0, #68	; 0x44
 800070a:	f003 ffec 	bl	80046e6 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a43      	ldr	r2, [pc, #268]	; (8000844 <MX_GPIO_Init+0x128>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <MX_GPIO_Init+0x128>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0x128>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_GPIO_Init+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <MX_GPIO_Init+0x128>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <MX_GPIO_Init+0x128>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0x128>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007c2:	2200      	movs	r2, #0
 80007c4:	f647 0110 	movw	r1, #30736	; 0x7810
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007ca:	f004 fdb9 	bl	8005340 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_GPIO_Init+0x130>)
 80007d4:	f004 fdb4 	bl	8005340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80007de:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_GPIO_Init+0x134>)
 80007e0:	f004 fdae 	bl	8005340 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007e4:	f647 0310 	movw	r3, #30736	; 0x7810
 80007e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007fe:	f004 fbf3 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000802:	2310      	movs	r3, #16
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0x130>)
 800081a:	f004 fbe5 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800081e:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_GPIO_Init+0x134>)
 8000838:	f004 fbd6 	bl	8004fe8 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40021000 	.word	0x40021000
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400

08000854 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
}
 8000862:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <SCB_EnableICache+0x48>)
 8000866:	2200      	movs	r2, #0
 8000868:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000872:	f3bf 8f6f 	isb	sy
}
 8000876:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <SCB_EnableICache+0x48>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <SCB_EnableICache+0x48>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
}
 800088e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SCB_EnableDCache+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <SCB_EnableDCache+0x84>)
 80008b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0b5b      	lsrs	r3, r3, #13
 80008c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008de:	4911      	ldr	r1, [pc, #68]	; (8000924 <SCB_EnableDCache+0x84>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ef      	bne.n	80008d0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	60fa      	str	r2, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e5      	bne.n	80008c6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SCB_EnableDCache+0x84>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SCB_EnableDCache+0x84>)
 8000906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d027      	beq.n	8000992 <in_func+0x6a>
//    	read_bulk_4ByteAdd_SharedFM(dev->fp, buff, nbyte);
//    	read_bulk_4ByteAdd_LocalFM(dev->fp, buff, nbyte);
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f002 f826 	bl	800299c <W25qxx_ReadBytes>

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	3b01      	subs	r3, #1
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4911      	ldr	r1, [pc, #68]	; (80009a8 <in_func+0x80>)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <in_func+0x84>)
 8000966:	f014 fd3f 	bl	80153e8 <siprintf>
 800096a:	4603      	mov	r3, r0
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <in_func+0x88>)
 8000970:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <in_func+0x88>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	490c      	ldr	r1, [pc, #48]	; (80009ac <in_func+0x84>)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <in_func+0x8c>)
 800097e:	f006 ff5d 	bl	800783c <HAL_UART_Transmit>

    	dev->fp += nbyte;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	441a      	add	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

        return nbyte;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	e006      	b.n	80009a0 <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	441a      	add	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]
        return nbyte;
 800099e:	88fb      	ldrh	r3, [r7, #6]
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08017aa0 	.word	0x08017aa0
 80009ac:	20001658 	.word	0x20001658
 80009b0:	20001654 	.word	0x20001654
 80009b4:	20001860 	.word	0x20001860

080009b8 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c8:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4611      	mov	r1, r2
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	8912      	ldrh	r2, [r2, #8]
 80009dc:	fb01 f202 	mul.w	r2, r1, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	8809      	ldrh	r1, [r1, #0]
 80009e4:	440a      	add	r2, r1
 80009e6:	4413      	add	r3, r2
 80009e8:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	885a      	ldrh	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	83fb      	strh	r3, [r7, #30]
 8000a06:	e010      	b.n	8000a2a <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0e:	6a38      	ldr	r0, [r7, #32]
 8000a10:	f013 fef8 	bl	8014804 <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	8abb      	ldrh	r3, [r7, #20]
 8000a1e:	6a3a      	ldr	r2, [r7, #32]
 8000a20:	4413      	add	r3, r2
 8000a22:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a24:	8bfb      	ldrh	r3, [r7, #30]
 8000a26:	3301      	adds	r3, #1
 8000a28:	83fb      	strh	r3, [r7, #30]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	8bfa      	ldrh	r2, [r7, #30]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d9e9      	bls.n	8000a08 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	f5ad 3da2 	sub.w	sp, sp, #82944	; 0x14400
 8000a46:	b0e3      	sub	sp, #396	; 0x18c
 8000a48:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4ac0      	ldr	r2, [pc, #768]	; (8000d50 <main+0x310>)
 8000a4e:	443a      	add	r2, r7
 8000a50:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x24;
 8000a52:	2324      	movs	r3, #36	; 0x24
 8000a54:	4abf      	ldr	r2, [pc, #764]	; (8000d54 <main+0x314>)
 8000a56:	443a      	add	r2, r7
 8000a58:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 5100;
 8000a5a:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8000a5e:	4abe      	ldr	r2, [pc, #760]	; (8000d58 <main+0x318>)
 8000a60:	443a      	add	r2, r7
 8000a62:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	4abd      	ldr	r2, [pc, #756]	; (8000d5c <main+0x31c>)
 8000a68:	443a      	add	r2, r7
 8000a6a:	6013      	str	r3, [r2, #0]
	  ai_i32 nbatch_ICU;

	  uint32_t timestamp;
	  uint32_t timestamp_ICU;

	  uint8_t prediction = 0xFF;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	4abc      	ldr	r2, [pc, #752]	; (8000d60 <main+0x320>)
 8000a70:	443a      	add	r2, r7
 8000a72:	7013      	strb	r3, [r2, #0]
	  // Buffers used to store input and output tensors
	  AI_ALIGNED(4)	  ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  AI_ALIGNED(4)	  ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 8000a74:	4bbb      	ldr	r3, [pc, #748]	; (8000d64 <main+0x324>)
 8000a76:	443b      	add	r3, r7
 8000a78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000a80:	4bb8      	ldr	r3, [pc, #736]	; (8000d64 <main+0x324>)
 8000a82:	443b      	add	r3, r7
 8000a84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000a88:	4ab7      	ldr	r2, [pc, #732]	; (8000d68 <main+0x328>)
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	4bb5      	ldr	r3, [pc, #724]	; (8000d64 <main+0x324>)
 8000a8e:	443b      	add	r3, r7
 8000a90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	4bb2      	ldr	r3, [pc, #712]	; (8000d64 <main+0x324>)
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <main+0x324>)
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	4bac      	ldr	r3, [pc, #688]	; (8000d64 <main+0x324>)
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	4ba9      	ldr	r3, [pc, #676]	; (8000d64 <main+0x324>)
 8000abe:	443b      	add	r3, r7
 8000ac0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	751a      	strb	r2, [r3, #20]
 8000ac8:	4ba6      	ldr	r3, [pc, #664]	; (8000d64 <main+0x324>)
 8000aca:	443b      	add	r3, r7
 8000acc:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	f361 231f 	bfi	r3, r1, #8, #24
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4ba2      	ldr	r3, [pc, #648]	; (8000d64 <main+0x324>)
 8000adc:	443b      	add	r3, r7
 8000ade:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8000ae2:	4aa2      	ldr	r2, [pc, #648]	; (8000d6c <main+0x32c>)
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aee:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <main+0x324>)
 8000af0:	443b      	add	r3, r7
 8000af2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000af6:	4a9e      	ldr	r2, [pc, #632]	; (8000d70 <main+0x330>)
 8000af8:	443a      	add	r2, r7
 8000afa:	619a      	str	r2, [r3, #24]
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000afc:	4b99      	ldr	r3, [pc, #612]	; (8000d64 <main+0x324>)
 8000afe:	443b      	add	r3, r7
 8000b00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b04:	4a98      	ldr	r2, [pc, #608]	; (8000d68 <main+0x328>)
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	4b96      	ldr	r3, [pc, #600]	; (8000d64 <main+0x324>)
 8000b0a:	443b      	add	r3, r7
 8000b0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	4b93      	ldr	r3, [pc, #588]	; (8000d64 <main+0x324>)
 8000b16:	443b      	add	r3, r7
 8000b18:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	4b90      	ldr	r3, [pc, #576]	; (8000d64 <main+0x324>)
 8000b22:	443b      	add	r3, r7
 8000b24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <main+0x324>)
 8000b2e:	443b      	add	r3, r7
 8000b30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b34:	2201      	movs	r2, #1
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <main+0x324>)
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b40:	2201      	movs	r2, #1
 8000b42:	751a      	strb	r2, [r3, #20]
 8000b44:	4b87      	ldr	r3, [pc, #540]	; (8000d64 <main+0x324>)
 8000b46:	443b      	add	r3, r7
 8000b48:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8000b4c:	6953      	ldr	r3, [r2, #20]
 8000b4e:	2104      	movs	r1, #4
 8000b50:	f361 231f 	bfi	r3, r1, #8, #24
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b83      	ldr	r3, [pc, #524]	; (8000d64 <main+0x324>)
 8000b58:	443b      	add	r3, r7
 8000b5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000b5e:	4a83      	ldr	r2, [pc, #524]	; (8000d6c <main+0x32c>)
 8000b60:	461c      	mov	r4, r3
 8000b62:	4613      	mov	r3, r2
 8000b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b6a:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <main+0x324>)
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000b72:	4a80      	ldr	r2, [pc, #512]	; (8000d74 <main+0x334>)
 8000b74:	443a      	add	r2, r7
 8000b76:	619a      	str	r2, [r3, #24]


	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000b78:	f008 fa56 	bl	8009028 <ai_sine_model_data_weights_get>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b79      	ldr	r3, [pc, #484]	; (8000d64 <main+0x324>)
 8000b80:	443b      	add	r3, r7
 8000b82:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 fa19 	bl	8008fc0 <ai_sine_model_data_weights_buffer_get>
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000b8e:	4b75      	ldr	r3, [pc, #468]	; (8000d64 <main+0x324>)
 8000b90:	443b      	add	r3, r7
 8000b92:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000b96:	331c      	adds	r3, #28
 8000b98:	4a77      	ldr	r2, [pc, #476]	; (8000d78 <main+0x338>)
 8000b9a:	443a      	add	r2, r7
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f008 f9da 	bl	8008f58 <ai_sine_model_data_activations_buffer_get>

	  // Chunk of memory used to hold intermediate values for neural network
	  AI_ALIGNED(4) ai_u8 activations_ICU[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

	  // Buffers used to store input and output tensors
	  uint8_t image[AI_NETWORK_IN_1_SIZE_BYTES] = {0};
 8000ba4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000ba8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	f644 22fc 	movw	r2, #19196	; 0x4afc
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f013 fe4b 	bl	8014854 <memset>
	  AI_ALIGNED(4) ai_i8 out_data_ICU[AI_NETWORK_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle icu_tflite = AI_HANDLE_NULL;
 8000bbe:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input_ICU[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8000bca:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000bd2:	4a6a      	ldr	r2, [pc, #424]	; (8000d7c <main+0x33c>)
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000be6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bf2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000c02:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000c10:	2201      	movs	r2, #1
 8000c12:	751a      	strb	r2, [r3, #20]
 8000c14:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c18:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8000c1c:	6953      	ldr	r3, [r2, #20]
 8000c1e:	2104      	movs	r1, #4
 8000c20:	f361 231f 	bfi	r3, r1, #8, #24
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000c2e:	4a54      	ldr	r2, [pc, #336]	; (8000d80 <main+0x340>)
 8000c30:	461c      	mov	r4, r3
 8000c32:	4613      	mov	r3, r2
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c3e:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <main+0x344>)
 8000c44:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000c48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c4c:	443b      	add	r3, r7
 8000c4e:	6193      	str	r3, [r2, #24]
	  ai_buffer ai_output_ICU[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8000c50:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c58:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <main+0x33c>)
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c88:	2202      	movs	r2, #2
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000c94:	2201      	movs	r2, #1
 8000c96:	751a      	strb	r2, [r3, #20]
 8000c98:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c9c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000ca0:	6953      	ldr	r3, [r2, #20]
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	f361 231f 	bfi	r3, r1, #8, #24
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000cb2:	4a35      	ldr	r2, [pc, #212]	; (8000d88 <main+0x348>)
 8000cb4:	461c      	mov	r4, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cbe:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cc2:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <main+0x34c>)
 8000cc8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000ccc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cd0:	443b      	add	r3, r7
 8000cd2:	6193      	str	r3, [r2, #24]

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params_ICU = AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations_ICU));
 8000cd4:	f007 ffe8 	bl	8008ca8 <ai_network_data_weights_get>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cde:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f007 ffab 	bl	8008c40 <ai_network_data_weights_buffer_get>
 8000cea:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000cf2:	f103 021c 	add.w	r2, r3, #28
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <main+0x350>)
 8000cf8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000cfc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d00:	443b      	add	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4610      	mov	r0, r2
 8000d06:	f007 ff67 	bl	8008bd8 <ai_network_data_activations_buffer_get>

	  //		ai_input_ICU[0].n_batches = 1;
	  		ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 8000d0a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000d0e:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <main+0x354>)
 8000d14:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000d18:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d1c:	443b      	add	r3, r7
 8000d1e:	6053      	str	r3, [r2, #4]
	  //		ai_output_ICU[0].n_batches = 1;
	  		ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 8000d20:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000d24:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <main+0x358>)
 8000d2a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000d2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d32:	443b      	add	r3, r7
 8000d34:	6053      	str	r3, [r2, #4]
	  		//End of ICU part 2


	  	  // Set pointers wrapper structs to our data buffers
	  //	  ai_input[0].n_batches = 1;
	  	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <main+0x324>)
 8000d38:	443b      	add	r3, r7
 8000d3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <main+0x35c>)
 8000d40:	443a      	add	r2, r7
 8000d42:	605a      	str	r2, [r3, #4]
	  //	  ai_output[0].n_batches = 1;
	  	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <main+0x324>)
 8000d46:	443b      	add	r3, r7
 8000d48:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8000d4c:	e028      	b.n	8000da0 <main+0x360>
 8000d4e:	bf00      	nop
 8000d50:	00014564 	.word	0x00014564
 8000d54:	00014563 	.word	0x00014563
 8000d58:	0001455c 	.word	0x0001455c
 8000d5c:	0001457c 	.word	0x0001457c
 8000d60:	0001457b 	.word	0x0001457b
 8000d64:	00014580 	.word	0x00014580
 8000d68:	01821040 	.word	0x01821040
 8000d6c:	08017d94 	.word	0x08017d94
 8000d70:	000143c4 	.word	0x000143c4
 8000d74:	00014398 	.word	0x00014398
 8000d78:	000143fc 	.word	0x000143fc
 8000d7c:	00840440 	.word	0x00840440
 8000d80:	08017da4 	.word	0x08017da4
 8000d84:	fffece6c 	.word	0xfffece6c
 8000d88:	08017db4 	.word	0x08017db4
 8000d8c:	fffece40 	.word	0xfffece40
 8000d90:	ffff19a0 	.word	0xffff19a0
 8000d94:	fffecea0 	.word	0xfffecea0
 8000d98:	fffece9c 	.word	0xfffece9c
 8000d9c:	000143f8 	.word	0x000143f8
 8000da0:	4a96      	ldr	r2, [pc, #600]	; (8000ffc <main+0x5bc>)
 8000da2:	443a      	add	r2, r7
 8000da4:	605a      	str	r2, [r3, #4]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000da6:	f7ff fd55 	bl	8000854 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000daa:	f7ff fd79 	bl	80008a0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f003 fb22 	bl	80043f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 fd13 	bl	80017dc <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f7ff fcb1 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dba:	f7ff fc91 	bl	80006e0 <MX_DMA_Init>
  MX_SPI4_Init();
 8000dbe:	f000 fea1 	bl	8001b04 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000dc2:	f001 f899 	bl	8001ef8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000dc6:	f000 fe27 	bl	8001a18 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000dca:	f000 fe63 	bl	8001a94 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 8000dce:	f000 fd75 	bl	80018bc <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000dd2:	f001 f8c1 	bl	8001f58 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000dd6:	f001 f84b 	bl	8001e70 <MX_TIM14_Init>
  MX_CRC_Init();
 8000dda:	f7ff fc3f 	bl	800065c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000dde:	f001 facf 	bl	8002380 <W25qxx_Init>

  HAL_Delay(5000);
 8000de2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000de6:	f003 fb63 	bl	80044b0 <HAL_Delay>

  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 8000dea:	4885      	ldr	r0, [pc, #532]	; (8001000 <main+0x5c0>)
 8000dec:	f014 fae4 	bl	80153b8 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4883      	ldr	r0, [pc, #524]	; (8001004 <main+0x5c4>)
 8000df8:	f004 faa2 	bl	8005340 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000dfc:	2064      	movs	r0, #100	; 0x64
 8000dfe:	f003 fb57 	bl	80044b0 <HAL_Delay>

  char readBytes[5000]="ABC";
 8000e02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8000e06:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8000e0a:	4a7f      	ldr	r2, [pc, #508]	; (8001008 <main+0x5c8>)
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	f241 3284 	movw	r2, #4996	; 0x1384
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f013 fd1c 	bl	8014854 <memset>
////  for ( i=0; i<200; i++) {if(i%16==0) {printf("\r\n");} printf("%X ",readBytes[i]);}

//	uint8_t* Target;
#define Target  Space

	HAL_Delay(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f003 fb46 	bl	80044b0 <HAL_Delay>
	W25qxx_EraseBlock(0);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 fbf3 	bl	8002610 <W25qxx_EraseBlock>

	HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f003 fb3f 	bl	80044b0 <HAL_Delay>
	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <main+0x5cc>)
 8000e34:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000e38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e3c:	443b      	add	r3, r7
 8000e3e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fda9 	bl	800299c <W25qxx_ReadBytes>

	HAL_Delay(1000);
 8000e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4e:	f003 fb2f 	bl	80044b0 <HAL_Delay>
//	saveImage_LocalFM(0x00000000, Space); //Space or Earth
	W25qxx_WriteBlock(Target, 0, 0, sizeof(Target));
 8000e52:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	486d      	ldr	r0, [pc, #436]	; (8001010 <main+0x5d0>)
 8000e5c:	f001 fd22 	bl	80028a4 <W25qxx_WriteBlock>

	StringLength=sprintf(txString,"\r\nTarget size=%d,Space size=%d, Earth size=%d\r\n",sizeof(Target),sizeof(Space),sizeof(Earth));
 8000e60:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000e6a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e6e:	4969      	ldr	r1, [pc, #420]	; (8001014 <main+0x5d4>)
 8000e70:	4869      	ldr	r0, [pc, #420]	; (8001018 <main+0x5d8>)
 8000e72:	f014 fab9 	bl	80153e8 <siprintf>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b68      	ldr	r3, [pc, #416]	; (800101c <main+0x5dc>)
 8000e7c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000e7e:	4b67      	ldr	r3, [pc, #412]	; (800101c <main+0x5dc>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	2364      	movs	r3, #100	; 0x64
 8000e86:	4964      	ldr	r1, [pc, #400]	; (8001018 <main+0x5d8>)
 8000e88:	4865      	ldr	r0, [pc, #404]	; (8001020 <main+0x5e0>)
 8000e8a:	f006 fcd7 	bl	800783c <HAL_UART_Transmit>


	compression_ratio = 3;
 8000e8e:	4b65      	ldr	r3, [pc, #404]	; (8001024 <main+0x5e4>)
 8000e90:	2203      	movs	r2, #3
 8000e92:	601a      	str	r2, [r3, #0]


	uint8_t emptyLoop=0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	4a64      	ldr	r2, [pc, #400]	; (8001028 <main+0x5e8>)
 8000e98:	443a      	add	r2, r7
 8000e9a:	7013      	strb	r3, [r2, #0]


	  // Greetings!
	  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI\r\n");
 8000e9c:	4b63      	ldr	r3, [pc, #396]	; (800102c <main+0x5ec>)
 8000e9e:	443b      	add	r3, r7
 8000ea0:	4963      	ldr	r1, [pc, #396]	; (8001030 <main+0x5f0>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f014 faa0 	bl	80153e8 <siprintf>
 8000ea8:	4b62      	ldr	r3, [pc, #392]	; (8001034 <main+0x5f4>)
 8000eaa:	443b      	add	r3, r7
 8000eac:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000eae:	4b61      	ldr	r3, [pc, #388]	; (8001034 <main+0x5f4>)
 8000eb0:	443b      	add	r3, r7
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	495d      	ldr	r1, [pc, #372]	; (800102c <main+0x5ec>)
 8000eb8:	4439      	add	r1, r7
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	4858      	ldr	r0, [pc, #352]	; (8001020 <main+0x5e0>)
 8000ebe:	f006 fcbd 	bl	800783c <HAL_UART_Transmit>


	  // Create instance of neural network
	  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <main+0x5f8>)
 8000ec4:	443b      	add	r3, r7
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f007 ffe3 	bl	8008e94 <ai_sine_model_create>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b5a      	ldr	r3, [pc, #360]	; (800103c <main+0x5fc>)
 8000ed2:	443b      	add	r3, r7
 8000ed4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ed8:	601a      	str	r2, [r3, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 8000eda:	4b58      	ldr	r3, [pc, #352]	; (800103c <main+0x5fc>)
 8000edc:	443b      	add	r3, r7
 8000ede:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <main+0x4d0>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000ee8:	4b50      	ldr	r3, [pc, #320]	; (800102c <main+0x5ec>)
 8000eea:	443b      	add	r3, r7
 8000eec:	4954      	ldr	r1, [pc, #336]	; (8001040 <main+0x600>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f014 fa7a 	bl	80153e8 <siprintf>
 8000ef4:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <main+0x5f4>)
 8000ef6:	443b      	add	r3, r7
 8000ef8:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000efa:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <main+0x5f4>)
 8000efc:	443b      	add	r3, r7
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	494a      	ldr	r1, [pc, #296]	; (800102c <main+0x5ec>)
 8000f04:	4439      	add	r1, r7
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	4845      	ldr	r0, [pc, #276]	; (8001020 <main+0x5e0>)
 8000f0a:	f006 fc97 	bl	800783c <HAL_UART_Transmit>
	    while(1);
 8000f0e:	e7fe      	b.n	8000f0e <main+0x4ce>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <main+0x5ec>)
 8000f12:	443b      	add	r3, r7
 8000f14:	494b      	ldr	r1, [pc, #300]	; (8001044 <main+0x604>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f014 fa66 	bl	80153e8 <siprintf>
 8000f1c:	4b45      	ldr	r3, [pc, #276]	; (8001034 <main+0x5f4>)
 8000f1e:	443b      	add	r3, r7
 8000f20:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <main+0x5f4>)
 8000f24:	443b      	add	r3, r7
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4940      	ldr	r1, [pc, #256]	; (800102c <main+0x5ec>)
 8000f2c:	4439      	add	r1, r7
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	483b      	ldr	r0, [pc, #236]	; (8001020 <main+0x5e0>)
 8000f32:	f006 fc83 	bl	800783c <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_sine_model_init(sine_model, &ai_params))
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <main+0x5fc>)
 8000f38:	443b      	add	r3, r7
 8000f3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a41      	ldr	r2, [pc, #260]	; (8001048 <main+0x608>)
 8000f42:	443a      	add	r2, r7
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 ffba 	bl	8008ec0 <ai_sine_model_init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <main+0x540>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <main+0x5ec>)
 8000f5a:	443b      	add	r3, r7
 8000f5c:	493b      	ldr	r1, [pc, #236]	; (800104c <main+0x60c>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f014 fa42 	bl	80153e8 <siprintf>
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <main+0x5f4>)
 8000f66:	443b      	add	r3, r7
 8000f68:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <main+0x5f4>)
 8000f6c:	443b      	add	r3, r7
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	492e      	ldr	r1, [pc, #184]	; (800102c <main+0x5ec>)
 8000f74:	4439      	add	r1, r7
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	4829      	ldr	r0, [pc, #164]	; (8001020 <main+0x5e0>)
 8000f7a:	f006 fc5f 	bl	800783c <HAL_UART_Transmit>
	    while(1);
 8000f7e:	e7fe      	b.n	8000f7e <main+0x53e>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <main+0x5ec>)
 8000f82:	443b      	add	r3, r7
 8000f84:	4932      	ldr	r1, [pc, #200]	; (8001050 <main+0x610>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f014 fa2e 	bl	80153e8 <siprintf>
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <main+0x5f4>)
 8000f8e:	443b      	add	r3, r7
 8000f90:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <main+0x5f4>)
 8000f94:	443b      	add	r3, r7
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4924      	ldr	r1, [pc, #144]	; (800102c <main+0x5ec>)
 8000f9c:	4439      	add	r1, r7
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	481f      	ldr	r0, [pc, #124]	; (8001020 <main+0x5e0>)
 8000fa2:	f006 fc4b 	bl	800783c <HAL_UART_Transmit>
	  }


	  // Create instance of neural network
	  ai_err_ICU = ai_network_create(&icu_tflite, AI_NETWORK_DATA_CONFIG);
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <main+0x614>)
 8000fa8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000fac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000fb0:	443b      	add	r3, r7
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fdad 	bl	8008b14 <ai_network_create>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <main+0x5fc>)
 8000fbe:	443b      	add	r3, r7
 8000fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fc4:	601a      	str	r2, [r3, #0]
	  if (ai_err_ICU.type != AI_ERROR_NONE)
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <main+0x5fc>)
 8000fc8:	443b      	add	r3, r7
 8000fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d041      	beq.n	8001058 <main+0x618>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <main+0x5ec>)
 8000fd6:	443b      	add	r3, r7
 8000fd8:	4919      	ldr	r1, [pc, #100]	; (8001040 <main+0x600>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f014 fa04 	bl	80153e8 <siprintf>
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <main+0x5f4>)
 8000fe2:	443b      	add	r3, r7
 8000fe4:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <main+0x5f4>)
 8000fe8:	443b      	add	r3, r7
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	490f      	ldr	r1, [pc, #60]	; (800102c <main+0x5ec>)
 8000ff0:	4439      	add	r1, r7
 8000ff2:	2364      	movs	r3, #100	; 0x64
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <main+0x5e0>)
 8000ff6:	f006 fc21 	bl	800783c <HAL_UART_Transmit>
	    while(1);
 8000ffa:	e7fe      	b.n	8000ffa <main+0x5ba>
 8000ffc:	000143f4 	.word	0x000143f4
 8001000:	08017ac8 	.word	0x08017ac8
 8001004:	40020400 	.word	0x40020400
 8001008:	00434241 	.word	0x00434241
 800100c:	fffeba80 	.word	0xfffeba80
 8001010:	20000000 	.word	0x20000000
 8001014:	08017b04 	.word	0x08017b04
 8001018:	20001658 	.word	0x20001658
 800101c:	20001654 	.word	0x20001654
 8001020:	20001860 	.word	0x20001860
 8001024:	20001650 	.word	0x20001650
 8001028:	0001455b 	.word	0x0001455b
 800102c:	00014484 	.word	0x00014484
 8001030:	08017b34 	.word	0x08017b34
 8001034:	0001457c 	.word	0x0001457c
 8001038:	000143f0 	.word	0x000143f0
 800103c:	00014580 	.word	0x00014580
 8001040:	08017b4c 	.word	0x08017b4c
 8001044:	08017b74 	.word	0x08017b74
 8001048:	00014360 	.word	0x00014360
 800104c:	08017b8c 	.word	0x08017b8c
 8001050:	08017bb0 	.word	0x08017bb0
 8001054:	fffece98 	.word	0xfffece98
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <main+0x6fc>)
 800105a:	443b      	add	r3, r7
 800105c:	4938      	ldr	r1, [pc, #224]	; (8001140 <main+0x700>)
 800105e:	4618      	mov	r0, r3
 8001060:	f014 f9c2 	bl	80153e8 <siprintf>
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <main+0x704>)
 8001066:	443b      	add	r3, r7
 8001068:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <main+0x704>)
 800106c:	443b      	add	r3, r7
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	b29a      	uxth	r2, r3
 8001072:	4932      	ldr	r1, [pc, #200]	; (800113c <main+0x6fc>)
 8001074:	4439      	add	r1, r7
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	4833      	ldr	r0, [pc, #204]	; (8001148 <main+0x708>)
 800107a:	f006 fbdf 	bl	800783c <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_network_init(icu_tflite, &ai_params_ICU))
 800107e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001082:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <main+0x70c>)
 800108a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 800108e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001092:	443b      	add	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f007 fd52 	bl	8008b40 <ai_network_init>
 800109c:	4603      	mov	r3, r0
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <main+0x690>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <main+0x6fc>)
 80010aa:	443b      	add	r3, r7
 80010ac:	4928      	ldr	r1, [pc, #160]	; (8001150 <main+0x710>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f014 f99a 	bl	80153e8 <siprintf>
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <main+0x704>)
 80010b6:	443b      	add	r3, r7
 80010b8:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <main+0x704>)
 80010bc:	443b      	add	r3, r7
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	491e      	ldr	r1, [pc, #120]	; (800113c <main+0x6fc>)
 80010c4:	4439      	add	r1, r7
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <main+0x708>)
 80010ca:	f006 fbb7 	bl	800783c <HAL_UART_Transmit>
	    while(1);
 80010ce:	e7fe      	b.n	80010ce <main+0x68e>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <main+0x6fc>)
 80010d2:	443b      	add	r3, r7
 80010d4:	491f      	ldr	r1, [pc, #124]	; (8001154 <main+0x714>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f014 f986 	bl	80153e8 <siprintf>
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <main+0x704>)
 80010de:	443b      	add	r3, r7
 80010e0:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <main+0x704>)
 80010e4:	443b      	add	r3, r7
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4914      	ldr	r1, [pc, #80]	; (800113c <main+0x6fc>)
 80010ec:	4439      	add	r1, r7
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	4815      	ldr	r0, [pc, #84]	; (8001148 <main+0x708>)
 80010f2:	f006 fba3 	bl	800783c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		work = (void*)malloc(sz_work);
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <main+0x718>)
 80010f8:	443b      	add	r3, r7
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f013 fb72 	bl	80147e4 <malloc>
 8001100:	4603      	mov	r3, r0
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <main+0x71c>)
 8001104:	443a      	add	r2, r7
 8001106:	6013      	str	r3, [r2, #0]
	  	count++;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <main+0x720>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <main+0x720>)
 8001110:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <main+0x720>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10b      	bne.n	8001132 <main+0x6f2>
	  		W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <main+0x724>)
 800111c:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8001120:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001124:	443b      	add	r3, r7
 8001126:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fc35 	bl	800299c <W25qxx_ReadBytes>
	  	}

		  // Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <main+0x728>)
 8001136:	443a      	add	r2, r7
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e028      	b.n	800118e <main+0x74e>
 800113c:	00014484 	.word	0x00014484
 8001140:	08017b74 	.word	0x08017b74
 8001144:	0001457c 	.word	0x0001457c
 8001148:	20001860 	.word	0x20001860
 800114c:	fffece08 	.word	0xfffece08
 8001150:	08017b8c 	.word	0x08017b8c
 8001154:	08017bb0 	.word	0x08017bb0
 8001158:	0001455c 	.word	0x0001455c
 800115c:	00014554 	.word	0x00014554
 8001160:	20001694 	.word	0x20001694
 8001164:	fffeba80 	.word	0xfffeba80
 8001168:	00014574 	.word	0x00014574
			{
			  ((ai_float *)in_data)[i] = (ai_float)1.0f;
 800116c:	4b96      	ldr	r3, [pc, #600]	; (80013c8 <main+0x988>)
 800116e:	443b      	add	r3, r7
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4a95      	ldr	r2, [pc, #596]	; (80013cc <main+0x98c>)
 8001176:	443a      	add	r2, r7
 8001178:	4413      	add	r3, r2
 800117a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800117e:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001180:	4b91      	ldr	r3, [pc, #580]	; (80013c8 <main+0x988>)
 8001182:	443b      	add	r3, r7
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a8f      	ldr	r2, [pc, #572]	; (80013c8 <main+0x988>)
 800118a:	443a      	add	r2, r7
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b8e      	ldr	r3, [pc, #568]	; (80013c8 <main+0x988>)
 8001190:	443b      	add	r3, r7
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0e9      	beq.n	800116c <main+0x72c>
			}

			// Get current timestamp
			timestamp = htim14.Instance->CNT;
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <main+0x990>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	4a8d      	ldr	r2, [pc, #564]	; (80013d4 <main+0x994>)
 80011a0:	443a      	add	r2, r7
 80011a2:	6013      	str	r3, [r2, #0]

			// Perform inference
			nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <main+0x998>)
 80011a6:	443b      	add	r3, r7
 80011a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a8b      	ldr	r2, [pc, #556]	; (80013dc <main+0x99c>)
 80011b0:	443a      	add	r2, r7
 80011b2:	498b      	ldr	r1, [pc, #556]	; (80013e0 <main+0x9a0>)
 80011b4:	4439      	add	r1, r7
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 febe 	bl	8008f38 <ai_sine_model_run>
 80011bc:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <main+0x9a4>)
 80011be:	443b      	add	r3, r7
 80011c0:	6018      	str	r0, [r3, #0]
			if (nbatch != 1) {
 80011c2:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <main+0x9a4>)
 80011c4:	443b      	add	r3, r7
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d012      	beq.n	80011f2 <main+0x7b2>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80011cc:	4b86      	ldr	r3, [pc, #536]	; (80013e8 <main+0x9a8>)
 80011ce:	443b      	add	r3, r7
 80011d0:	4986      	ldr	r1, [pc, #536]	; (80013ec <main+0x9ac>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f014 f908 	bl	80153e8 <siprintf>
 80011d8:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <main+0x9b0>)
 80011da:	443b      	add	r3, r7
 80011dc:	6018      	str	r0, [r3, #0]
			  HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <main+0x9b0>)
 80011e0:	443b      	add	r3, r7
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4980      	ldr	r1, [pc, #512]	; (80013e8 <main+0x9a8>)
 80011e8:	4439      	add	r1, r7
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	4881      	ldr	r0, [pc, #516]	; (80013f4 <main+0x9b4>)
 80011ee:	f006 fb25 	bl	800783c <HAL_UART_Transmit>
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <main+0x9b8>)
 80011f4:	443b      	add	r3, r7
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a80      	ldr	r2, [pc, #512]	; (80013fc <main+0x9bc>)
 80011fa:	443a      	add	r2, r7
 80011fc:	6013      	str	r3, [r2, #0]

			// Print output of neural network along with inference time (microseconds)
			buf_len = sprintf(buf,
 80011fe:	4b7f      	ldr	r3, [pc, #508]	; (80013fc <main+0x9bc>)
 8001200:	443b      	add	r3, r7
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
							  "Output: %f | Duration: %lu\r\n",
							  y_val,
							  htim14.Instance->CNT - timestamp);
 800120a:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <main+0x990>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			buf_len = sprintf(buf,
 8001210:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <main+0x994>)
 8001212:	443b      	add	r3, r7
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4873      	ldr	r0, [pc, #460]	; (80013e8 <main+0x9a8>)
 800121a:	4438      	add	r0, r7
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	ec53 2b17 	vmov	r2, r3, d7
 8001222:	4977      	ldr	r1, [pc, #476]	; (8001400 <main+0x9c0>)
 8001224:	f014 f8e0 	bl	80153e8 <siprintf>
 8001228:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <main+0x9b0>)
 800122a:	443b      	add	r3, r7
 800122c:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <main+0x9b0>)
 8001230:	443b      	add	r3, r7
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b29a      	uxth	r2, r3
 8001236:	496c      	ldr	r1, [pc, #432]	; (80013e8 <main+0x9a8>)
 8001238:	4439      	add	r1, r7
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	486d      	ldr	r0, [pc, #436]	; (80013f4 <main+0x9b4>)
 800123e:	f006 fafd 	bl	800783c <HAL_UART_Transmit>

			// Wait before doing it again
			HAL_Delay(500);
 8001242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001246:	f003 f933 	bl	80044b0 <HAL_Delay>


	  	handshakeCAM = 0;
 800124a:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <main+0x9c4>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	  	 // 	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
	  	  //		HAL_UART_Receive(&huart3, (uint8_t *) &handshakeCAM, 1, 1000);												/* Wait for CAM to command ICU, expects 0x29*/
	  	  //		__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_RXNE);

	  	  		//if (handshakeCAM == 0x29) {
	  	  			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 8001250:	496d      	ldr	r1, [pc, #436]	; (8001408 <main+0x9c8>)
 8001252:	486e      	ldr	r0, [pc, #440]	; (800140c <main+0x9cc>)
 8001254:	f014 f8c8 	bl	80153e8 <siprintf>
 8001258:	4603      	mov	r3, r0
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <main+0x9d0>)
 800125e:	701a      	strb	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001260:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <main+0x9d0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	2364      	movs	r3, #100	; 0x64
 8001268:	4968      	ldr	r1, [pc, #416]	; (800140c <main+0x9cc>)
 800126a:	4862      	ldr	r0, [pc, #392]	; (80013f4 <main+0x9b4>)
 800126c:	f006 fae6 	bl	800783c <HAL_UART_Transmit>

	  	  			HAL_Delay(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f003 f91c 	bl	80044b0 <HAL_Delay>
	  	  			devid.fp=0;
 8001278:	2300      	movs	r3, #0
 800127a:	4a66      	ldr	r2, [pc, #408]	; (8001414 <main+0x9d4>)
 800127c:	443a      	add	r2, r7
 800127e:	6013      	str	r3, [r2, #0]
//	  	  			devid.fp= Space;

	  				StringLength=sprintf(txString,"\r\n");
 8001280:	4965      	ldr	r1, [pc, #404]	; (8001418 <main+0x9d8>)
 8001282:	4862      	ldr	r0, [pc, #392]	; (800140c <main+0x9cc>)
 8001284:	f014 f8b0 	bl	80153e8 <siprintf>
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b60      	ldr	r3, [pc, #384]	; (8001410 <main+0x9d0>)
 800128e:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001290:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <main+0x9d0>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b29a      	uxth	r2, r3
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	495c      	ldr	r1, [pc, #368]	; (800140c <main+0x9cc>)
 800129a:	4856      	ldr	r0, [pc, #344]	; (80013f4 <main+0x9b4>)
 800129c:	f006 face 	bl	800783c <HAL_UART_Transmit>

	  	//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

	  	  			res = jd_prepare(&jdec, in_func, work, 3100, &devid);													/* Prepare to decompress */
 80012a0:	485e      	ldr	r0, [pc, #376]	; (800141c <main+0x9dc>)
 80012a2:	4438      	add	r0, r7
 80012a4:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <main+0x9d4>)
 80012a6:	443b      	add	r3, r7
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f640 431c 	movw	r3, #3100	; 0xc1c
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <main+0x9e0>)
 80012b0:	443a      	add	r2, r7
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	495b      	ldr	r1, [pc, #364]	; (8001424 <main+0x9e4>)
 80012b6:	f002 fd6d 	bl	8003d94 <jd_prepare>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <main+0x9e8>)
 80012be:	443a      	add	r2, r7
 80012c0:	7013      	strb	r3, [r2, #0]
	  	  			if (res == JDR_OK)
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <main+0x9e8>)
 80012c4:	443b      	add	r3, r7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f040 80e0 	bne.w	800148e <main+0xa4e>
	  	  			{																					/* Ready to decompress. Image info is available here. */
	  	  				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <main+0x9ec>)
 80012d0:	443b      	add	r3, r7
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <main+0x9f0>)
 80012d8:	443b      	add	r3, r7
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <main+0x9f4>)
 80012e0:	443b      	add	r3, r7
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b54      	ldr	r3, [pc, #336]	; (8001438 <main+0x9f8>)
 80012e8:	443b      	add	r3, r7
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	4951      	ldr	r1, [pc, #324]	; (800143c <main+0x9fc>)
 80012f6:	4845      	ldr	r0, [pc, #276]	; (800140c <main+0x9cc>)
 80012f8:	f014 f876 	bl	80153e8 <siprintf>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <main+0x9d0>)
 8001302:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <main+0x9d0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b29a      	uxth	r2, r3
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	493f      	ldr	r1, [pc, #252]	; (800140c <main+0x9cc>)
 800130e:	4839      	ldr	r0, [pc, #228]	; (80013f4 <main+0x9b4>)
 8001310:	f006 fa94 	bl	800783c <HAL_UART_Transmit>

	  	  				image_size = N_BPP  * jdec.width * jdec.height;
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <main+0x9ec>)
 8001316:	443b      	add	r3, r7
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	4a45      	ldr	r2, [pc, #276]	; (8001430 <main+0x9f0>)
 800131c:	443a      	add	r2, r7
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4a46      	ldr	r2, [pc, #280]	; (8001440 <main+0xa00>)
 8001326:	443a      	add	r2, r7
 8001328:	6013      	str	r3, [r2, #0]
	  	  				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 800132a:	4b45      	ldr	r3, [pc, #276]	; (8001440 <main+0xa00>)
 800132c:	443b      	add	r3, r7
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f013 fa57 	bl	80147e4 <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <main+0xa04>)
 800133a:	443a      	add	r2, r7
 800133c:	6013      	str	r3, [r2, #0]
	  	  		        devid.wfbuf = jdec.width;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <main+0x9ec>)
 8001340:	443b      	add	r3, r7
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4a40      	ldr	r2, [pc, #256]	; (8001448 <main+0xa08>)
 8001346:	443a      	add	r2, r7
 8001348:	8013      	strh	r3, [r2, #0]

	  					Width = jdec.width;
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <main+0x9ec>)
 800134c:	443b      	add	r3, r7
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <main+0xa0c>)
 8001354:	601a      	str	r2, [r3, #0]
	  					Height = jdec.height;
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <main+0x9f0>)
 8001358:	443b      	add	r3, r7
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <main+0xa10>)
 8001360:	601a      	str	r2, [r3, #0]

	  	  				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 8001362:	493c      	ldr	r1, [pc, #240]	; (8001454 <main+0xa14>)
 8001364:	4829      	ldr	r0, [pc, #164]	; (800140c <main+0x9cc>)
 8001366:	f014 f83f 	bl	80153e8 <siprintf>
 800136a:	4603      	mov	r3, r0
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <main+0x9d0>)
 8001370:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <main+0x9d0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b29a      	uxth	r2, r3
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	4924      	ldr	r1, [pc, #144]	; (800140c <main+0x9cc>)
 800137c:	481d      	ldr	r0, [pc, #116]	; (80013f4 <main+0x9b4>)
 800137e:	f006 fa5d 	bl	800783c <HAL_UART_Transmit>

	  	  				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <main+0xa18>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <main+0x9dc>)
 800138a:	443b      	add	r3, r7
 800138c:	4933      	ldr	r1, [pc, #204]	; (800145c <main+0xa1c>)
 800138e:	4618      	mov	r0, r3
 8001390:	f002 ffb6 	bl	8004300 <jd_decomp>
 8001394:	4603      	mov	r3, r0
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <main+0x9e8>)
 8001398:	443a      	add	r2, r7
 800139a:	7013      	strb	r3, [r2, #0]
	  	  				if (res == JDR_OK) {
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <main+0x9e8>)
 800139e:	443b      	add	r3, r7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d15e      	bne.n	8001464 <main+0xa24>
	  	  					StringLength=sprintf(txString,"Decompression - Success\r\n");
 80013a6:	492e      	ldr	r1, [pc, #184]	; (8001460 <main+0xa20>)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <main+0x9cc>)
 80013aa:	f014 f81d 	bl	80153e8 <siprintf>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <main+0x9d0>)
 80013b4:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <main+0x9d0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	4913      	ldr	r1, [pc, #76]	; (800140c <main+0x9cc>)
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <main+0x9b4>)
 80013c2:	f006 fa3b 	bl	800783c <HAL_UART_Transmit>
 80013c6:	e076      	b.n	80014b6 <main+0xa76>
 80013c8:	00014574 	.word	0x00014574
 80013cc:	000143f8 	.word	0x000143f8
 80013d0:	20001814 	.word	0x20001814
 80013d4:	00014550 	.word	0x00014550
 80013d8:	00014580 	.word	0x00014580
 80013dc:	000143a8 	.word	0x000143a8
 80013e0:	000143d4 	.word	0x000143d4
 80013e4:	0001454c 	.word	0x0001454c
 80013e8:	00014484 	.word	0x00014484
 80013ec:	08017bc4 	.word	0x08017bc4
 80013f0:	0001457c 	.word	0x0001457c
 80013f4:	20001860 	.word	0x20001860
 80013f8:	000143f4 	.word	0x000143f4
 80013fc:	00014548 	.word	0x00014548
 8001400:	08017be8 	.word	0x08017be8
 8001404:	2000168a 	.word	0x2000168a
 8001408:	08017c08 	.word	0x08017c08
 800140c:	20001658 	.word	0x20001658
 8001410:	20001654 	.word	0x20001654
 8001414:	000144b8 	.word	0x000144b8
 8001418:	08017c2c 	.word	0x08017c2c
 800141c:	000144c4 	.word	0x000144c4
 8001420:	00014554 	.word	0x00014554
 8001424:	08000929 	.word	0x08000929
 8001428:	00014547 	.word	0x00014547
 800142c:	000144e0 	.word	0x000144e0
 8001430:	000144e2 	.word	0x000144e2
 8001434:	00014530 	.word	0x00014530
 8001438:	0001455c 	.word	0x0001455c
 800143c:	08017c30 	.word	0x08017c30
 8001440:	00014564 	.word	0x00014564
 8001444:	000144bc 	.word	0x000144bc
 8001448:	000144c0 	.word	0x000144c0
 800144c:	2000168c 	.word	0x2000168c
 8001450:	20001690 	.word	0x20001690
 8001454:	08017c7c 	.word	0x08017c7c
 8001458:	20001650 	.word	0x20001650
 800145c:	080009b9 	.word	0x080009b9
 8001460:	08017cac 	.word	0x08017cac
	  	  				}
	  	  				else{
	  	  					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 8001464:	4b9b      	ldr	r3, [pc, #620]	; (80016d4 <main+0xc94>)
 8001466:	443b      	add	r3, r7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	499a      	ldr	r1, [pc, #616]	; (80016d8 <main+0xc98>)
 800146e:	489b      	ldr	r0, [pc, #620]	; (80016dc <main+0xc9c>)
 8001470:	f013 ffba 	bl	80153e8 <siprintf>
 8001474:	4603      	mov	r3, r0
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b99      	ldr	r3, [pc, #612]	; (80016e0 <main+0xca0>)
 800147a:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800147c:	4b98      	ldr	r3, [pc, #608]	; (80016e0 <main+0xca0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
 8001482:	2364      	movs	r3, #100	; 0x64
 8001484:	4995      	ldr	r1, [pc, #596]	; (80016dc <main+0xc9c>)
 8001486:	4897      	ldr	r0, [pc, #604]	; (80016e4 <main+0xca4>)
 8001488:	f006 f9d8 	bl	800783c <HAL_UART_Transmit>
 800148c:	e013      	b.n	80014b6 <main+0xa76>
	  	  				}
	  	  			}
	  	  			else{
	  	  			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <main+0xc94>)
 8001490:	443b      	add	r3, r7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4994      	ldr	r1, [pc, #592]	; (80016e8 <main+0xca8>)
 8001498:	4890      	ldr	r0, [pc, #576]	; (80016dc <main+0xc9c>)
 800149a:	f013 ffa5 	bl	80153e8 <siprintf>
 800149e:	4603      	mov	r3, r0
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b8f      	ldr	r3, [pc, #572]	; (80016e0 <main+0xca0>)
 80014a4:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80014a6:	4b8e      	ldr	r3, [pc, #568]	; (80016e0 <main+0xca0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	498b      	ldr	r1, [pc, #556]	; (80016dc <main+0xc9c>)
 80014b0:	488c      	ldr	r0, [pc, #560]	; (80016e4 <main+0xca4>)
 80014b2:	f006 f9c3 	bl	800783c <HAL_UART_Transmit>
	  	  			}

	  	  			HAL_Delay(1000);
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	f002 fff9 	bl	80044b0 <HAL_Delay>

					ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 80014be:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80014c2:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80014c6:	4b89      	ldr	r3, [pc, #548]	; (80016ec <main+0xcac>)
 80014c8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80014cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014d0:	443b      	add	r3, r7
 80014d2:	6053      	str	r3, [r2, #4]
//	  				ai_output_ICU[0].n_batches = 1;
					ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 80014d4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80014d8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80014dc:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <main+0xcb0>)
 80014de:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80014e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014e6:	443b      	add	r3, r7
 80014e8:	6053      	str	r3, [r2, #4]

	  	  			// Image Classification Section
	  	  		    for (int  i = 0; i < 19200; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	4a81      	ldr	r2, [pc, #516]	; (80016f4 <main+0xcb4>)
 80014ee:	443a      	add	r2, r7
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e018      	b.n	8001526 <main+0xae6>
	  	  		    {
	  	  		    	image[i] = *(devid.fbuf + i);
 80014f4:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <main+0xcb8>)
 80014f6:	443b      	add	r3, r7
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <main+0xcb4>)
 80014fc:	443b      	add	r3, r7
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4413      	add	r3, r2
 8001502:	7819      	ldrb	r1, [r3, #0]
 8001504:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001508:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800150c:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <main+0xcb4>)
 800150e:	443b      	add	r3, r7
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	460a      	mov	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
	  	  		    for (int  i = 0; i < 19200; i++)
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <main+0xcb4>)
 800151a:	443b      	add	r3, r7
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a74      	ldr	r2, [pc, #464]	; (80016f4 <main+0xcb4>)
 8001522:	443a      	add	r2, r7
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <main+0xcb4>)
 8001528:	443b      	add	r3, r7
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001530:	dbe0      	blt.n	80014f4 <main+0xab4>
	  	  		    }


	  	  		// Get current timestamp
	  	  		timestamp_ICU = htim14.Instance->CNT;
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <main+0xcbc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	4a71      	ldr	r2, [pc, #452]	; (8001700 <main+0xcc0>)
 800153a:	443a      	add	r2, r7
 800153c:	6013      	str	r3, [r2, #0]




	  	  		    // Perform inference
	  	  		    nbatch_ICU = ai_network_run(icu_tflite, &ai_input_ICU[0], &ai_output_ICU[0]);
 800153e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001542:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <main+0xcc4>)
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <main+0xcc8>)
 800154c:	4413      	add	r3, r2
 800154e:	19da      	adds	r2, r3, r7
 8001550:	4b6e      	ldr	r3, [pc, #440]	; (800170c <main+0xccc>)
 8001552:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8001556:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800155a:	443b      	add	r3, r7
 800155c:	4619      	mov	r1, r3
 800155e:	f007 fb2b 	bl	8008bb8 <ai_network_run>
 8001562:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <main+0xcd0>)
 8001564:	443b      	add	r3, r7
 8001566:	6018      	str	r0, [r3, #0]

	  	  		    if (nbatch_ICU != 1) {
 8001568:	4b69      	ldr	r3, [pc, #420]	; (8001710 <main+0xcd0>)
 800156a:	443b      	add	r3, r7
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d013      	beq.n	800159a <main+0xb5a>
	  	  		      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001572:	4b68      	ldr	r3, [pc, #416]	; (8001714 <main+0xcd4>)
 8001574:	443b      	add	r3, r7
 8001576:	4968      	ldr	r1, [pc, #416]	; (8001718 <main+0xcd8>)
 8001578:	4618      	mov	r0, r3
 800157a:	f013 ff35 	bl	80153e8 <siprintf>
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <main+0xcdc>)
 8001580:	443b      	add	r3, r7
 8001582:	6018      	str	r0, [r3, #0]
	  	  		      HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001584:	4b65      	ldr	r3, [pc, #404]	; (800171c <main+0xcdc>)
 8001586:	443b      	add	r3, r7
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4961      	ldr	r1, [pc, #388]	; (8001714 <main+0xcd4>)
 800158e:	4439      	add	r1, r7
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	4854      	ldr	r0, [pc, #336]	; (80016e4 <main+0xca4>)
 8001594:	f006 f952 	bl	800783c <HAL_UART_Transmit>
 8001598:	e012      	b.n	80015c0 <main+0xb80>
	  	  		    }
	  	  		    else
	  	  		    {
	  	  		  	    buf_len = sprintf(buf, "\r\nRunning ICU tflite done!\r\n");
 800159a:	4b5e      	ldr	r3, [pc, #376]	; (8001714 <main+0xcd4>)
 800159c:	443b      	add	r3, r7
 800159e:	4960      	ldr	r1, [pc, #384]	; (8001720 <main+0xce0>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f013 ff21 	bl	80153e8 <siprintf>
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <main+0xcdc>)
 80015a8:	443b      	add	r3, r7
 80015aa:	6018      	str	r0, [r3, #0]
	  	  		  	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80015ac:	4b5b      	ldr	r3, [pc, #364]	; (800171c <main+0xcdc>)
 80015ae:	443b      	add	r3, r7
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4957      	ldr	r1, [pc, #348]	; (8001714 <main+0xcd4>)
 80015b6:	4439      	add	r1, r7
 80015b8:	2364      	movs	r3, #100	; 0x64
 80015ba:	484a      	ldr	r0, [pc, #296]	; (80016e4 <main+0xca4>)
 80015bc:	f006 f93e 	bl	800783c <HAL_UART_Transmit>
	  	  		    }

	  	  		    float max_val = -1;
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <main+0xce4>)
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <main+0xce8>)
 80015c4:	443a      	add	r2, r7
 80015c6:	6013      	str	r3, [r2, #0]

	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <main+0xcec>)
 80015cc:	443a      	add	r2, r7
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e049      	b.n	8001666 <main+0xc26>
	  	  		    {
	  	  		        if(max_val < out_data_ICU[i])
 80015d2:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80015d6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <main+0xcec>)
 80015dc:	443b      	add	r3, r7
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	f993 3000 	ldrsb.w	r3, [r3]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <main+0xce8>)
 80015f0:	443b      	add	r3, r7
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	d52b      	bpl.n	8001658 <main+0xc18>
	  	  		        {
	  	  		            max_val = out_data_ICU[i];
 8001600:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001604:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <main+0xcec>)
 800160a:	443b      	add	r3, r7
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <main+0xce8>)
 800161e:	443b      	add	r3, r7
 8001620:	edc3 7a00 	vstr	s15, [r3]
	  	  		            prediction = i;
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <main+0xcec>)
 8001626:	443b      	add	r3, r7
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <main+0xcf0>)
 800162c:	443a      	add	r2, r7
 800162e:	7013      	strb	r3, [r2, #0]

	  						StringLength=sprintf(txString,"\r\n\nIndex:  %ld ", (long)prediction);
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <main+0xcf0>)
 8001632:	443b      	add	r3, r7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	493e      	ldr	r1, [pc, #248]	; (8001734 <main+0xcf4>)
 800163a:	4828      	ldr	r0, [pc, #160]	; (80016dc <main+0xc9c>)
 800163c:	f013 fed4 	bl	80153e8 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <main+0xca0>)
 8001646:	701a      	strb	r2, [r3, #0]
	  						HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <main+0xca0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	4922      	ldr	r1, [pc, #136]	; (80016dc <main+0xc9c>)
 8001652:	4824      	ldr	r0, [pc, #144]	; (80016e4 <main+0xca4>)
 8001654:	f006 f8f2 	bl	800783c <HAL_UART_Transmit>
	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <main+0xcec>)
 800165a:	443b      	add	r3, r7
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a32      	ldr	r2, [pc, #200]	; (800172c <main+0xcec>)
 8001662:	443a      	add	r2, r7
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <main+0xcec>)
 8001668:	443b      	add	r3, r7
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	ddb0      	ble.n	80015d2 <main+0xb92>
	  	  		    }

	  	  		    prediction = prediction;

	  	  		// Print output of neural network along with inference time (microseconds)
	  	  		StringLength = sprintf(txString,"Output: %f | Duration: %lu\r\n", prediction, htim14.Instance->CNT - timestamp_ICU);
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <main+0xcf0>)
 8001672:	443b      	add	r3, r7
 8001674:	7819      	ldrb	r1, [r3, #0]
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <main+0xcbc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <main+0xcc0>)
 800167e:	443b      	add	r3, r7
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	460a      	mov	r2, r1
 8001686:	492c      	ldr	r1, [pc, #176]	; (8001738 <main+0xcf8>)
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <main+0xc9c>)
 800168a:	f013 fead 	bl	80153e8 <siprintf>
 800168e:	4603      	mov	r3, r0
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <main+0xca0>)
 8001694:	701a      	strb	r2, [r3, #0]
	  	  		HAL_UART_Transmit(&debugPort, (uint8_t *)txString, buf_len, 100);
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <main+0xcdc>)
 8001698:	443b      	add	r3, r7
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29a      	uxth	r2, r3
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <main+0xc9c>)
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <main+0xca4>)
 80016a4:	f006 f8ca 	bl	800783c <HAL_UART_Transmit>


	  	  		    if (prediction == 1)
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <main+0xcf0>)
 80016aa:	443b      	add	r3, r7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d146      	bne.n	8001740 <main+0xd00>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Space \r\n");
 80016b2:	4922      	ldr	r1, [pc, #136]	; (800173c <main+0xcfc>)
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <main+0xc9c>)
 80016b6:	f013 fe97 	bl	80153e8 <siprintf>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <main+0xca0>)
 80016c0:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <main+0xca0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	2364      	movs	r3, #100	; 0x64
 80016ca:	4904      	ldr	r1, [pc, #16]	; (80016dc <main+0xc9c>)
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <main+0xca4>)
 80016ce:	f006 f8b5 	bl	800783c <HAL_UART_Transmit>
 80016d2:	e05b      	b.n	800178c <main+0xd4c>
 80016d4:	00014547 	.word	0x00014547
 80016d8:	08017cc8 	.word	0x08017cc8
 80016dc:	20001658 	.word	0x20001658
 80016e0:	20001654 	.word	0x20001654
 80016e4:	20001860 	.word	0x20001860
 80016e8:	08017ce8 	.word	0x08017ce8
 80016ec:	fffecea0 	.word	0xfffecea0
 80016f0:	fffece9c 	.word	0xfffece9c
 80016f4:	00014570 	.word	0x00014570
 80016f8:	000144bc 	.word	0x000144bc
 80016fc:	20001814 	.word	0x20001814
 8001700:	00014540 	.word	0x00014540
 8001704:	fffece50 	.word	0xfffece50
 8001708:	00014580 	.word	0x00014580
 800170c:	fffece7c 	.word	0xfffece7c
 8001710:	0001453c 	.word	0x0001453c
 8001714:	00014484 	.word	0x00014484
 8001718:	08017bc4 	.word	0x08017bc4
 800171c:	0001457c 	.word	0x0001457c
 8001720:	08017d1c 	.word	0x08017d1c
 8001724:	bf800000 	.word	0xbf800000
 8001728:	0001456c 	.word	0x0001456c
 800172c:	00014568 	.word	0x00014568
 8001730:	0001457b 	.word	0x0001457b
 8001734:	08017d3c 	.word	0x08017d3c
 8001738:	08017be8 	.word	0x08017be8
 800173c:	08017d4c 	.word	0x08017d4c
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Space_ICU, 1, 100);
	  	  		    }
	  	  		    else if (prediction == 0)
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <main+0xd78>)
 8001742:	443b      	add	r3, r7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d110      	bne.n	800176c <main+0xd2c>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Earth \r\n");
 800174a:	491c      	ldr	r1, [pc, #112]	; (80017bc <main+0xd7c>)
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <main+0xd80>)
 800174e:	f013 fe4b 	bl	80153e8 <siprintf>
 8001752:	4603      	mov	r3, r0
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <main+0xd84>)
 8001758:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <main+0xd84>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	4917      	ldr	r1, [pc, #92]	; (80017c0 <main+0xd80>)
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <main+0xd88>)
 8001766:	f006 f869 	bl	800783c <HAL_UART_Transmit>
 800176a:	e00f      	b.n	800178c <main+0xd4c>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Earth_ICU, 1, 100);
	  	  		    }
	  	  		    else
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nError Prediction \r\n");
 800176c:	4917      	ldr	r1, [pc, #92]	; (80017cc <main+0xd8c>)
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <main+0xd80>)
 8001770:	f013 fe3a 	bl	80153e8 <siprintf>
 8001774:	4603      	mov	r3, r0
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <main+0xd84>)
 800177a:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <main+0xd84>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <main+0xd80>)
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <main+0xd88>)
 8001788:	f006 f858 	bl	800783c <HAL_UART_Transmit>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Error_ICU, 1, 100);
	  	  		    }



	  	  	  	if (count == 10000) {
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <main+0xd90>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f242 7210 	movw	r2, #10000	; 0x2710
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <main+0xd5e>
	  	  	  		count = 0;																									/* Reset to zero to prevent overflowing bugs */
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <main+0xd90>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
	  	  	  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  		free(work);   /* Discard work area */
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <main+0xd94>)
 80017a0:	443b      	add	r3, r7
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	f013 f826 	bl	80147f4 <free>
	  	  		free(devid.fbuf);
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <main+0xd98>)
 80017aa:	443b      	add	r3, r7
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f013 f820 	bl	80147f4 <free>
  {
 80017b4:	e49f      	b.n	80010f6 <main+0x6b6>
 80017b6:	bf00      	nop
 80017b8:	0001457b 	.word	0x0001457b
 80017bc:	08017d64 	.word	0x08017d64
 80017c0:	20001658 	.word	0x20001658
 80017c4:	20001654 	.word	0x20001654
 80017c8:	20001860 	.word	0x20001860
 80017cc:	08017d7c 	.word	0x08017d7c
 80017d0:	20001694 	.word	0x20001694
 80017d4:	00014554 	.word	0x00014554
 80017d8:	000144bc 	.word	0x000144bc

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f013 f832 	bl	8014854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <SystemClock_Config+0xc8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <SystemClock_Config+0xc8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <SystemClock_Config+0xc8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <SystemClock_Config+0xcc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <SystemClock_Config+0xcc>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <SystemClock_Config+0xcc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2310      	movs	r3, #16
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001854:	2302      	movs	r3, #2
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001858:	2302      	movs	r3, #2
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4618      	mov	r0, r3
 8001862:	f003 fe49 	bl	80054f8 <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800186c:	f000 f81e 	bl	80018ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f8e1 	bl	8005a54 <HAL_RCC_ClockConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001898:	f000 f808 	bl	80018ac <Error_Handler>
  }
}
 800189c:	bf00      	nop
 800189e:	3750      	adds	r7, #80	; 0x50
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <MX_QUADSPI_Init+0x54>)
 80018c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018c8:	22ff      	movs	r2, #255	; 0xff
 80018ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018da:	2201      	movs	r2, #1
 80018dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_QUADSPI_Init+0x50>)
 80018f8:	f003 fd3c 	bl	8005374 <HAL_QSPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001902:	f7ff ffd3 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20001698 	.word	0x20001698
 8001910:	a0001000 	.word	0xa0001000

08001914 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <HAL_QSPI_MspInit+0xf4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d164      	bne.n	8001a00 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6393      	str	r3, [r2, #56]	; 0x38
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a2e      	ldr	r2, [pc, #184]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001954:	f043 0320 	orr.w	r3, r3, #32
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_QSPI_MspInit+0xf8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800198e:	2309      	movs	r3, #9
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	481d      	ldr	r0, [pc, #116]	; (8001a10 <HAL_QSPI_MspInit+0xfc>)
 800199a:	f003 fb25 	bl	8004fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019b0:	230a      	movs	r3, #10
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <HAL_QSPI_MspInit+0xfc>)
 80019bc:	f003 fb14 	bl	8004fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c0:	2304      	movs	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019d0:	2309      	movs	r3, #9
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <HAL_QSPI_MspInit+0x100>)
 80019dc:	f003 fb04 	bl	8004fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f0:	230a      	movs	r3, #10
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <HAL_QSPI_MspInit+0x100>)
 80019fc:	f003 faf4 	bl	8004fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	a0001000 	.word	0xa0001000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40020400 	.word	0x40020400

08001a18 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <MX_SPI1_Init+0x78>)
 8001a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a4e:	2210      	movs	r2, #16
 8001a50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a66:	2207      	movs	r2, #7
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a72:	2208      	movs	r2, #8
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_SPI1_Init+0x74>)
 8001a78:	f004 fe3a 	bl	80066f0 <HAL_SPI_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a82:	f7ff ff13 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200016e4 	.word	0x200016e4
 8001a90:	40013000 	.word	0x40013000

08001a94 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_SPI3_Init+0x68>)
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <MX_SPI3_Init+0x6c>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_SPI3_Init+0x68>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_SPI3_Init+0x68>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_SPI3_Init+0x68>)
 8001aac:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ab0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_SPI3_Init+0x68>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_SPI3_Init+0x68>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_SPI3_Init+0x68>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_SPI3_Init+0x68>)
 8001aea:	f004 fe01 	bl	80066f0 <HAL_SPI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001af4:	f7ff feda 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20001748 	.word	0x20001748
 8001b00:	40003c00 	.word	0x40003c00

08001b04 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <MX_SPI4_Init+0x78>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b14:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b22:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b36:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b3a:	2228      	movs	r2, #40	; 0x28
 8001b3c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b52:	2207      	movs	r2, #7
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b5e:	2208      	movs	r2, #8
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_SPI4_Init+0x74>)
 8001b64:	f004 fdc4 	bl	80066f0 <HAL_SPI_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001b6e:	f7ff fe9d 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200017ac 	.word	0x200017ac
 8001b7c:	40013400 	.word	0x40013400

08001b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <HAL_SPI_MspInit+0x170>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d128      	bne.n	8001bf4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a53      	ldr	r2, [pc, #332]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23e0      	movs	r3, #224	; 0xe0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be2:	2305      	movs	r3, #5
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4842      	ldr	r0, [pc, #264]	; (8001cf8 <HAL_SPI_MspInit+0x178>)
 8001bee:	f003 f9fb 	bl	8004fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001bf2:	e078      	b.n	8001ce6 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <HAL_SPI_MspInit+0x17c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d146      	bne.n	8001c8c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	4825      	ldr	r0, [pc, #148]	; (8001cf8 <HAL_SPI_MspInit+0x178>)
 8001c64:	f003 f9c0 	bl	8004fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	481e      	ldr	r0, [pc, #120]	; (8001d00 <HAL_SPI_MspInit+0x180>)
 8001c86:	f003 f9af 	bl	8004fe8 <HAL_GPIO_Init>
}
 8001c8a:	e02c      	b.n	8001ce6 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_SPI_MspInit+0x184>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d127      	bne.n	8001ce6 <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_SPI_MspInit+0x174>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <HAL_SPI_MspInit+0x188>)
 8001ce2:	f003 f981 	bl	8004fe8 <HAL_GPIO_Init>
}
 8001ce6:	bf00      	nop
 8001ce8:	3738      	adds	r7, #56	; 0x38
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40003c00 	.word	0x40003c00
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40013400 	.word	0x40013400
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x44>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_MspInit+0x44>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_MspInit+0x44>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x44>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x44>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x44>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f002 fb62 	bl	8004470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART1_IRQHandler+0x10>)
 8001db6:	f005 fdc5 	bl	8007944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20001860 	.word	0x20001860

08001dc4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Stream5_IRQHandler+0x10>)
 8001dca:	f002 fed1 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20001970 	.word	0x20001970

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f012 fcc2 	bl	8014790 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20080000 	.word	0x20080000
 8001e38:	00000800 	.word	0x00000800
 8001e3c:	20001810 	.word	0x20001810
 8001e40:	20001b50 	.word	0x20001b50

08001e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <SystemInit+0x28>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <SystemInit+0x28>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SystemInit+0x28>)
 8001e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <MX_TIM14_Init+0x44>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80;
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e7c:	2250      	movs	r2, #80	; 0x50
 8001e7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e9c:	f005 fb88 	bl	80075b0 <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001ea6:	f7ff fd01 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20001814 	.word	0x20001814
 8001eb4:	40002000 	.word	0x40002000

08001eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_TIM_Base_MspInit+0x38>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40002000 	.word	0x40002000
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <MX_USART1_UART_Init+0x5c>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART1_UART_Init+0x58>)
 8001f3c:	f005 fc30 	bl	80077a0 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f46:	f7ff fcb1 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20001860 	.word	0x20001860
 8001f54:	40011000 	.word	0x40011000

08001f58 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f5e:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <MX_USART2_UART_Init+0x5c>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x58>)
 8001f9c:	f005 fc00 	bl	80077a0 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fa6:	f7ff fc81 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200018e8 	.word	0x200018e8
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0b0      	sub	sp, #192	; 0xc0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2290      	movs	r2, #144	; 0x90
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f012 fc3b 	bl	8014854 <memset>
  if(uartHandle->Instance==USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a5d      	ldr	r2, [pc, #372]	; (8002158 <HAL_UART_MspInit+0x1a0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d173      	bne.n	80020d0 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe8:	2340      	movs	r3, #64	; 0x40
 8001fea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fec:	2300      	movs	r3, #0
 8001fee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 ff53 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff fc54 	bl	80018ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_UART_MspInit+0x1a4>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6453      	str	r3, [r2, #68]	; 0x44
 8002010:	4b52      	ldr	r3, [pc, #328]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_UART_MspInit+0x1a4>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_UART_MspInit+0x1a4>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002034:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800204e:	2307      	movs	r3, #7
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002058:	4619      	mov	r1, r3
 800205a:	4841      	ldr	r0, [pc, #260]	; (8002160 <HAL_UART_MspInit+0x1a8>)
 800205c:	f002 ffc4 	bl	8004fe8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002060:	4b40      	ldr	r3, [pc, #256]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002062:	4a41      	ldr	r2, [pc, #260]	; (8002168 <HAL_UART_MspInit+0x1b0>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800206c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800208e:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020a2:	4830      	ldr	r0, [pc, #192]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 80020a4:	f002 fc24 	bl	80048f0 <HAL_DMA_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80020ae:	f7ff fbfd 	bl	80018ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 80020b6:	675a      	str	r2, [r3, #116]	; 0x74
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HAL_UART_MspInit+0x1ac>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2025      	movs	r0, #37	; 0x25
 80020c4:	f002 faf3 	bl	80046ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f002 fb0c 	bl	80046e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020ce:	e03f      	b.n	8002150 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_UART_MspInit+0x1b4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d13a      	bne.n	8002150 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020de:	2300      	movs	r3, #0
 80020e0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 feda 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 80020f2:	f7ff fbdb 	bl	80018ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_UART_MspInit+0x1a4>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_UART_MspInit+0x1a4>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_UART_MspInit+0x1a4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_UART_MspInit+0x1a4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002126:	230c      	movs	r3, #12
 8002128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0x1a8>)
 800214c:	f002 ff4c 	bl	8004fe8 <HAL_GPIO_Init>
}
 8002150:	bf00      	nop
 8002152:	37c0      	adds	r7, #192	; 0xc0
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40011000 	.word	0x40011000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	20001970 	.word	0x20001970
 8002168:	40026488 	.word	0x40026488
 800216c:	40004400 	.word	0x40004400

08002170 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 800217a:	f107 020f 	add.w	r2, r7, #15
 800217e:	1df9      	adds	r1, r7, #7
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <W25qxx_Spi+0x28>)
 8002188:	f004 fdfb 	bl	8006d82 <HAL_SPI_TransmitReceive>
	return ret;	
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200017ac 	.word	0x200017ac

0800219c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2110      	movs	r1, #16
 80021b6:	4813      	ldr	r0, [pc, #76]	; (8002204 <W25qxx_ReadID+0x68>)
 80021b8:	f003 f8c2 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80021bc:	209f      	movs	r0, #159	; 0x9f
 80021be:	f7ff ffd7 	bl	8002170 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021c2:	20a5      	movs	r0, #165	; 0xa5
 80021c4:	f7ff ffd4 	bl	8002170 <W25qxx_Spi>
 80021c8:	4603      	mov	r3, r0
 80021ca:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021cc:	20a5      	movs	r0, #165	; 0xa5
 80021ce:	f7ff ffcf 	bl	8002170 <W25qxx_Spi>
 80021d2:	4603      	mov	r3, r0
 80021d4:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021d6:	20a5      	movs	r0, #165	; 0xa5
 80021d8:	f7ff ffca 	bl	8002170 <W25qxx_Spi>
 80021dc:	4603      	mov	r3, r0
 80021de:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2110      	movs	r1, #16
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <W25qxx_ReadID+0x68>)
 80021e6:	f003 f8ab 	bl	8005340 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4313      	orrs	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  return Temp;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	2110      	movs	r1, #16
 8002212:	4816      	ldr	r0, [pc, #88]	; (800226c <W25qxx_ReadUniqID+0x64>)
 8002214:	f003 f894 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002218:	204b      	movs	r0, #75	; 0x4b
 800221a:	f7ff ffa9 	bl	8002170 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	e005      	b.n	8002230 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002224:	20a5      	movs	r0, #165	; 0xa5
 8002226:	f7ff ffa3 	bl	8002170 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	3301      	adds	r3, #1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d9f6      	bls.n	8002224 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8002236:	2300      	movs	r3, #0
 8002238:	71bb      	strb	r3, [r7, #6]
 800223a:	e00b      	b.n	8002254 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800223c:	79bc      	ldrb	r4, [r7, #6]
 800223e:	20a5      	movs	r0, #165	; 0xa5
 8002240:	f7ff ff96 	bl	8002170 <W25qxx_Spi>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <W25qxx_ReadUniqID+0x68>)
 800224a:	4423      	add	r3, r4
 800224c:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	3301      	adds	r3, #1
 8002252:	71bb      	strb	r3, [r7, #6]
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	2b07      	cmp	r3, #7
 8002258:	d9f0      	bls.n	800223c <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	2110      	movs	r1, #16
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <W25qxx_ReadUniqID+0x64>)
 8002260:	f003 f86e 	bl	8005340 <HAL_GPIO_WritePin>
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	200019d0 	.word	0x200019d0

08002274 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	2110      	movs	r1, #16
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <W25qxx_WriteEnable+0x28>)
 800227e:	f003 f85f 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8002282:	2006      	movs	r0, #6
 8002284:	f7ff ff74 	bl	8002170 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	2110      	movs	r1, #16
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <W25qxx_WriteEnable+0x28>)
 800228e:	f003 f857 	bl	8005340 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f002 f90c 	bl	80044b0 <HAL_Delay>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2110      	movs	r1, #16
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <W25qxx_ReadStatusRegister+0x84>)
 80022b4:	f003 f844 	bl	8005340 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10c      	bne.n	80022d8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80022be:	2005      	movs	r0, #5
 80022c0:	f7ff ff56 	bl	8002170 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022c4:	20a5      	movs	r0, #165	; 0xa5
 80022c6:	f7ff ff53 	bl	8002170 <W25qxx_Spi>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <W25qxx_ReadStatusRegister+0x88>)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80022d6:	e01b      	b.n	8002310 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d10c      	bne.n	80022f8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80022de:	2035      	movs	r0, #53	; 0x35
 80022e0:	f7ff ff46 	bl	8002170 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022e4:	20a5      	movs	r0, #165	; 0xa5
 80022e6:	f7ff ff43 	bl	8002170 <W25qxx_Spi>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <W25qxx_ReadStatusRegister+0x88>)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80022f6:	e00b      	b.n	8002310 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80022f8:	2015      	movs	r0, #21
 80022fa:	f7ff ff39 	bl	8002170 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022fe:	20a5      	movs	r0, #165	; 0xa5
 8002300:	f7ff ff36 	bl	8002170 <W25qxx_Spi>
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <W25qxx_ReadStatusRegister+0x88>)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2110      	movs	r1, #16
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <W25qxx_ReadStatusRegister+0x84>)
 8002316:	f003 f813 	bl	8005340 <HAL_GPIO_WritePin>
	return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	200019d0 	.word	0x200019d0

0800232c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f002 f8bd 	bl	80044b0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	2110      	movs	r1, #16
 800233a:	480f      	ldr	r0, [pc, #60]	; (8002378 <W25qxx_WaitForWriteEnd+0x4c>)
 800233c:	f003 f800 	bl	8005340 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002340:	2005      	movs	r0, #5
 8002342:	f7ff ff15 	bl	8002170 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002346:	20a5      	movs	r0, #165	; 0xa5
 8002348:	f7ff ff12 	bl	8002170 <W25qxx_Spi>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <W25qxx_WaitForWriteEnd+0x50>)
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f002 f8aa 	bl	80044b0 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <W25qxx_WaitForWriteEnd+0x50>)
 800235e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1ed      	bne.n	8002346 <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	2110      	movs	r1, #16
 800236e:	4802      	ldr	r0, [pc, #8]	; (8002378 <W25qxx_WaitForWriteEnd+0x4c>)
 8002370:	f002 ffe6 	bl	8005340 <HAL_GPIO_WritePin>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	200019d0 	.word	0x200019d0

08002380 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8002386:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <W25qxx_Init+0x230>)
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800238e:	e002      	b.n	8002396 <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8002390:	2064      	movs	r0, #100	; 0x64
 8002392:	f002 f88d 	bl	80044b0 <HAL_Delay>
	while(HAL_GetTick()<100)
 8002396:	f002 f87f 	bl	8004498 <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	2b63      	cmp	r3, #99	; 0x63
 800239e:	d9f7      	bls.n	8002390 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2110      	movs	r1, #16
 80023a4:	4883      	ldr	r0, [pc, #524]	; (80025b4 <W25qxx_Init+0x234>)
 80023a6:	f002 ffcb 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f002 f880 	bl	80044b0 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 80023b0:	4881      	ldr	r0, [pc, #516]	; (80025b8 <W25qxx_Init+0x238>)
 80023b2:	f013 f801 	bl	80153b8 <puts>
	#endif
	id=W25qxx_ReadID();
 80023b6:	f7ff fef1 	bl	800219c <W25qxx_ReadID>
 80023ba:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	487f      	ldr	r0, [pc, #508]	; (80025bc <W25qxx_Init+0x23c>)
 80023c0:	f012 ff74 	bl	80152ac <iprintf>
	#endif
	switch(id&0x0000FFFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <W25qxx_Init+0x240>)
 80023ca:	4413      	add	r3, r2
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d87e      	bhi.n	80024ce <W25qxx_Init+0x14e>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <W25qxx_Init+0x58>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080024bb 	.word	0x080024bb
 80023dc:	080024a7 	.word	0x080024a7
 80023e0:	08002493 	.word	0x08002493
 80023e4:	0800247f 	.word	0x0800247f
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	08002457 	.word	0x08002457
 80023f0:	08002443 	.word	0x08002443
 80023f4:	0800242d 	.word	0x0800242d
 80023f8:	08002417 	.word	0x08002417
 80023fc:	08002401 	.word	0x08002401
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002400:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <W25qxx_Init+0x230>)
 8002402:	220a      	movs	r2, #10
 8002404:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <W25qxx_Init+0x230>)
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 800240e:	486d      	ldr	r0, [pc, #436]	; (80025c4 <W25qxx_Init+0x244>)
 8002410:	f012 ffd2 	bl	80153b8 <puts>
			#endif
		break;
 8002414:	e064      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <W25qxx_Init+0x230>)
 8002418:	2209      	movs	r2, #9
 800241a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <W25qxx_Init+0x230>)
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 8002424:	4868      	ldr	r0, [pc, #416]	; (80025c8 <W25qxx_Init+0x248>)
 8002426:	f012 ffc7 	bl	80153b8 <puts>
			#endif
		break;
 800242a:	e059      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 800242c:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <W25qxx_Init+0x230>)
 800242e:	2208      	movs	r2, #8
 8002430:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <W25qxx_Init+0x230>)
 8002434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002438:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 800243a:	4864      	ldr	r0, [pc, #400]	; (80025cc <W25qxx_Init+0x24c>)
 800243c:	f012 ffbc 	bl	80153b8 <puts>
			#endif
		break;
 8002440:	e04e      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <W25qxx_Init+0x230>)
 8002444:	2207      	movs	r2, #7
 8002446:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <W25qxx_Init+0x230>)
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 800244e:	4860      	ldr	r0, [pc, #384]	; (80025d0 <W25qxx_Init+0x250>)
 8002450:	f012 ffb2 	bl	80153b8 <puts>
			#endif
		break;
 8002454:	e044      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <W25qxx_Init+0x230>)
 8002458:	2206      	movs	r2, #6
 800245a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <W25qxx_Init+0x230>)
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 8002462:	485c      	ldr	r0, [pc, #368]	; (80025d4 <W25qxx_Init+0x254>)
 8002464:	f012 ffa8 	bl	80153b8 <puts>
			#endif
		break;
 8002468:	e03a      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <W25qxx_Init+0x230>)
 800246c:	2205      	movs	r2, #5
 800246e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <W25qxx_Init+0x230>)
 8002472:	2220      	movs	r2, #32
 8002474:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 8002476:	4858      	ldr	r0, [pc, #352]	; (80025d8 <W25qxx_Init+0x258>)
 8002478:	f012 ff9e 	bl	80153b8 <puts>
			#endif
		break;
 800247c:	e030      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <W25qxx_Init+0x230>)
 8002480:	2204      	movs	r2, #4
 8002482:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <W25qxx_Init+0x230>)
 8002486:	2210      	movs	r2, #16
 8002488:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 800248a:	4854      	ldr	r0, [pc, #336]	; (80025dc <W25qxx_Init+0x25c>)
 800248c:	f012 ff94 	bl	80153b8 <puts>
			#endif
		break;
 8002490:	e026      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <W25qxx_Init+0x230>)
 8002494:	2203      	movs	r2, #3
 8002496:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <W25qxx_Init+0x230>)
 800249a:	2208      	movs	r2, #8
 800249c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 800249e:	4850      	ldr	r0, [pc, #320]	; (80025e0 <W25qxx_Init+0x260>)
 80024a0:	f012 ff8a 	bl	80153b8 <puts>
			#endif
		break;
 80024a4:	e01c      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <W25qxx_Init+0x230>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <W25qxx_Init+0x230>)
 80024ae:	2204      	movs	r2, #4
 80024b0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 80024b2:	484c      	ldr	r0, [pc, #304]	; (80025e4 <W25qxx_Init+0x264>)
 80024b4:	f012 ff80 	bl	80153b8 <puts>
			#endif
		break;
 80024b8:	e012      	b.n	80024e0 <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <W25qxx_Init+0x230>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <W25qxx_Init+0x230>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 80024c6:	4848      	ldr	r0, [pc, #288]	; (80025e8 <W25qxx_Init+0x268>)
 80024c8:	f012 ff76 	bl	80153b8 <puts>
			#endif
		break;
 80024cc:	e008      	b.n	80024e0 <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 80024ce:	4847      	ldr	r0, [pc, #284]	; (80025ec <W25qxx_Init+0x26c>)
 80024d0:	f012 ff72 	bl	80153b8 <puts>
				#endif
			w25qxx.Lock=0;	
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <W25qxx_Init+0x230>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80024dc:	2300      	movs	r3, #0
 80024de:	e063      	b.n	80025a8 <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <W25qxx_Init+0x230>)
 80024e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <W25qxx_Init+0x230>)
 80024ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ee:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <W25qxx_Init+0x230>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <W25qxx_Init+0x230>)
 80024f8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <W25qxx_Init+0x230>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <W25qxx_Init+0x230>)
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <W25qxx_Init+0x230>)
 8002508:	8952      	ldrh	r2, [r2, #10]
 800250a:	fbb3 f3f2 	udiv	r3, r3, r2
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <W25qxx_Init+0x230>)
 8002510:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <W25qxx_Init+0x230>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <W25qxx_Init+0x230>)
 800251a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <W25qxx_Init+0x230>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <W25qxx_Init+0x230>)
 8002522:	6912      	ldr	r2, [r2, #16]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	0a9b      	lsrs	r3, r3, #10
 800252a:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <W25qxx_Init+0x230>)
 800252c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800252e:	f7ff fe6b 	bl	8002208 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff feb4 	bl	80022a0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002538:	2002      	movs	r0, #2
 800253a:	f7ff feb1 	bl	80022a0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800253e:	2003      	movs	r0, #3
 8002540:	f7ff feae 	bl	80022a0 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <W25qxx_Init+0x230>)
 8002546:	895b      	ldrh	r3, [r3, #10]
 8002548:	4619      	mov	r1, r3
 800254a:	4829      	ldr	r0, [pc, #164]	; (80025f0 <W25qxx_Init+0x270>)
 800254c:	f012 feae 	bl	80152ac <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <W25qxx_Init+0x230>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4619      	mov	r1, r3
 8002556:	4827      	ldr	r0, [pc, #156]	; (80025f4 <W25qxx_Init+0x274>)
 8002558:	f012 fea8 	bl	80152ac <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <W25qxx_Init+0x230>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4619      	mov	r1, r3
 8002562:	4825      	ldr	r0, [pc, #148]	; (80025f8 <W25qxx_Init+0x278>)
 8002564:	f012 fea2 	bl	80152ac <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <W25qxx_Init+0x230>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4619      	mov	r1, r3
 800256e:	4823      	ldr	r0, [pc, #140]	; (80025fc <W25qxx_Init+0x27c>)
 8002570:	f012 fe9c 	bl	80152ac <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <W25qxx_Init+0x230>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4619      	mov	r1, r3
 800257a:	4821      	ldr	r0, [pc, #132]	; (8002600 <W25qxx_Init+0x280>)
 800257c:	f012 fe96 	bl	80152ac <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <W25qxx_Init+0x230>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4619      	mov	r1, r3
 8002586:	481f      	ldr	r0, [pc, #124]	; (8002604 <W25qxx_Init+0x284>)
 8002588:	f012 fe90 	bl	80152ac <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <W25qxx_Init+0x230>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4619      	mov	r1, r3
 8002592:	481d      	ldr	r0, [pc, #116]	; (8002608 <W25qxx_Init+0x288>)
 8002594:	f012 fe8a 	bl	80152ac <iprintf>
	printf("w25qxx Init Done\r\n");
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <W25qxx_Init+0x28c>)
 800259a:	f012 ff0d 	bl	80153b8 <puts>
	#endif
	w25qxx.Lock=0;	
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <W25qxx_Init+0x230>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80025a6:	2301      	movs	r3, #1
}	
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200019d0 	.word	0x200019d0
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08017fa8 	.word	0x08017fa8
 80025bc:	08017fc0 	.word	0x08017fc0
 80025c0:	ffffbfef 	.word	0xffffbfef
 80025c4:	08017fd4 	.word	0x08017fd4
 80025c8:	08017fec 	.word	0x08017fec
 80025cc:	08018004 	.word	0x08018004
 80025d0:	0801801c 	.word	0x0801801c
 80025d4:	08018034 	.word	0x08018034
 80025d8:	0801804c 	.word	0x0801804c
 80025dc:	08018064 	.word	0x08018064
 80025e0:	0801807c 	.word	0x0801807c
 80025e4:	08018094 	.word	0x08018094
 80025e8:	080180ac 	.word	0x080180ac
 80025ec:	080180c4 	.word	0x080180c4
 80025f0:	080180d8 	.word	0x080180d8
 80025f4:	080180f8 	.word	0x080180f8
 80025f8:	08018110 	.word	0x08018110
 80025fc:	08018130 	.word	0x08018130
 8002600:	0801814c 	.word	0x0801814c
 8002604:	0801816c 	.word	0x0801816c
 8002608:	08018188 	.word	0x08018188
 800260c:	080181a8 	.word	0x080181a8

08002610 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8002618:	e002      	b.n	8002620 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 800261a:	2001      	movs	r0, #1
 800261c:	f001 ff48 	bl	80044b0 <HAL_Delay>
	while(w25qxx.Lock==1)
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <W25qxx_EraseBlock+0xd0>)
 8002622:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002626:	2b01      	cmp	r3, #1
 8002628:	d0f7      	beq.n	800261a <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <W25qxx_EraseBlock+0xd0>)
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	482b      	ldr	r0, [pc, #172]	; (80026e4 <W25qxx_EraseBlock+0xd4>)
 8002636:	f012 fe39 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	f001 ff38 	bl	80044b0 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8002640:	f001 ff2a 	bl	8004498 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 8002646:	f7ff fe71 	bl	800232c <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <W25qxx_EraseBlock+0xd0>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8002658:	f7ff fe0c 	bl	8002274 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	2110      	movs	r1, #16
 8002660:	4821      	ldr	r0, [pc, #132]	; (80026e8 <W25qxx_EraseBlock+0xd8>)
 8002662:	f002 fe6d 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8002666:	20d8      	movs	r0, #216	; 0xd8
 8002668:	f7ff fd82 	bl	8002170 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <W25qxx_EraseBlock+0xd0>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d905      	bls.n	8002680 <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0e1b      	lsrs	r3, r3, #24
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd78 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fd72 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd6c 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fd67 	bl	8002170 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80026a2:	2201      	movs	r2, #1
 80026a4:	2110      	movs	r1, #16
 80026a6:	4810      	ldr	r0, [pc, #64]	; (80026e8 <W25qxx_EraseBlock+0xd8>)
 80026a8:	f002 fe4a 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80026ac:	f7ff fe3e 	bl	800232c <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 80026b0:	f001 fef2 	bl	8004498 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <W25qxx_EraseBlock+0xdc>)
 80026be:	f012 fdf5 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 80026c2:	2064      	movs	r0, #100	; 0x64
 80026c4:	f001 fef4 	bl	80044b0 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f001 fef1 	bl	80044b0 <HAL_Delay>
	w25qxx.Lock=0;
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <W25qxx_EraseBlock+0xd0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200019d0 	.word	0x200019d0
 80026e4:	0801824c 	.word	0x0801824c
 80026e8:	40021000 	.word	0x40021000
 80026ec:	0801826c 	.word	0x0801826c

080026f0 <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <W25qxx_BlockToPage+0x28>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <W25qxx_BlockToPage+0x28>)
 8002704:	8952      	ldrh	r2, [r2, #10]
 8002706:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200019d0 	.word	0x200019d0

0800271c <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800272a:	e002      	b.n	8002732 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f001 febf 	bl	80044b0 <HAL_Delay>
	while(w25qxx.Lock==1)
 8002732:	4b55      	ldr	r3, [pc, #340]	; (8002888 <W25qxx_WritePage+0x16c>)
 8002734:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002738:	2b01      	cmp	r3, #1
 800273a:	d0f7      	beq.n	800272c <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 800273c:	4b52      	ldr	r3, [pc, #328]	; (8002888 <W25qxx_WritePage+0x16c>)
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <W25qxx_WritePage+0x16c>)
 800274c:	8952      	ldrh	r2, [r2, #10]
 800274e:	4293      	cmp	r3, r2
 8002750:	d802      	bhi.n	8002758 <W25qxx_WritePage+0x3c>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <W25qxx_WritePage+0x16c>)
 800275a:	895b      	ldrh	r3, [r3, #10]
 800275c:	461a      	mov	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	4a47      	ldr	r2, [pc, #284]	; (8002888 <W25qxx_WritePage+0x16c>)
 800276c:	8952      	ldrh	r2, [r2, #10]
 800276e:	4293      	cmp	r3, r2
 8002770:	d905      	bls.n	800277e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8002772:	4b45      	ldr	r3, [pc, #276]	; (8002888 <W25qxx_WritePage+0x16c>)
 8002774:	895b      	ldrh	r3, [r3, #10]
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	4841      	ldr	r0, [pc, #260]	; (800288c <W25qxx_WritePage+0x170>)
 8002786:	f012 fd91 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 800278a:	2064      	movs	r0, #100	; 0x64
 800278c:	f001 fe90 	bl	80044b0 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 8002790:	f001 fe82 	bl	8004498 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 8002796:	f7ff fdc9 	bl	800232c <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800279a:	f7ff fd6b 	bl	8002274 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	2110      	movs	r1, #16
 80027a2:	483b      	ldr	r0, [pc, #236]	; (8002890 <W25qxx_WritePage+0x174>)
 80027a4:	f002 fdcc 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80027a8:	2002      	movs	r0, #2
 80027aa:	f7ff fce1 	bl	8002170 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <W25qxx_WritePage+0x16c>)
 80027b0:	895b      	ldrh	r3, [r3, #10]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <W25qxx_WritePage+0x16c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d905      	bls.n	80027d4 <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0e1b      	lsrs	r3, r3, #24
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fcce 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fcc8 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fcc2 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fcbd 	bl	8002170 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	2364      	movs	r3, #100	; 0x64
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	4825      	ldr	r0, [pc, #148]	; (8002894 <W25qxx_WritePage+0x178>)
 8002800:	f004 f821 	bl	8006846 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	2110      	movs	r1, #16
 8002808:	4821      	ldr	r0, [pc, #132]	; (8002890 <W25qxx_WritePage+0x174>)
 800280a:	f002 fd99 	bl	8005340 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800280e:	f7ff fd8d 	bl	800232c <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8002812:	f001 fe41 	bl	8004498 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e018      	b.n	8002856 <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <W25qxx_WritePage+0x124>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d905      	bls.n	8002840 <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 8002834:	4818      	ldr	r0, [pc, #96]	; (8002898 <W25qxx_WritePage+0x17c>)
 8002836:	f012 fdbf 	bl	80153b8 <puts>
			W25qxx_Delay(10);			
 800283a:	200a      	movs	r0, #10
 800283c:	f001 fe38 	bl	80044b0 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	4814      	ldr	r0, [pc, #80]	; (800289c <W25qxx_WritePage+0x180>)
 800284c:	f012 fd2e 	bl	80152ac <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3e2      	bcc.n	8002824 <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <W25qxx_WritePage+0x17c>)
 8002860:	f012 fdaa 	bl	80153b8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	480e      	ldr	r0, [pc, #56]	; (80028a0 <W25qxx_WritePage+0x184>)
 8002868:	f012 fd20 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	f001 fe1f 	bl	80044b0 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8002872:	2001      	movs	r0, #1
 8002874:	f001 fe1c 	bl	80044b0 <HAL_Delay>
	w25qxx.Lock=0;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <W25qxx_WritePage+0x16c>)
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002880:	bf00      	nop
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200019d0 	.word	0x200019d0
 800288c:	08018488 	.word	0x08018488
 8002890:	40021000 	.word	0x40021000
 8002894:	200017ac 	.word	0x200017ac
 8002898:	080184c4 	.word	0x080184c4
 800289c:	080184c8 	.word	0x080184c8
 80028a0:	080184d0 	.word	0x080184d0

080028a4 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <W25qxx_WriteBlock+0xe8>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d802      	bhi.n	80028c2 <W25qxx_WriteBlock+0x1e>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <W25qxx_WriteBlock+0xe8>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	4830      	ldr	r0, [pc, #192]	; (8002990 <W25qxx_WriteBlock+0xec>)
 80028d0:	f012 fcec 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	f001 fdeb 	bl	80044b0 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <W25qxx_WriteBlock+0xe8>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d306      	bcc.n	80028f2 <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 80028e4:	482b      	ldr	r0, [pc, #172]	; (8002994 <W25qxx_WriteBlock+0xf0>)
 80028e6:	f012 fd67 	bl	80153b8 <puts>
		W25qxx_Delay(100);
 80028ea:	2064      	movs	r0, #100	; 0x64
 80028ec:	f001 fde0 	bl	80044b0 <HAL_Delay>
		#endif	
		return;
 80028f0:	e048      	b.n	8002984 <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	441a      	add	r2, r3
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <W25qxx_WriteBlock+0xe8>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d905      	bls.n	800290c <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <W25qxx_WriteBlock+0xe8>)
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e001      	b.n	8002910 <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	f7ff feed 	bl	80026f0 <W25qxx_BlockToPage>
 8002916:	4602      	mov	r2, r0
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <W25qxx_WriteBlock+0xe8>)
 800291a:	895b      	ldrh	r3, [r3, #10]
 800291c:	4619      	mov	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	fbb3 f3f1 	udiv	r3, r3, r1
 8002924:	4413      	add	r3, r2
 8002926:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <W25qxx_WriteBlock+0xe8>)
 800292a:	895b      	ldrh	r3, [r3, #10]
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	fbb3 f1f2 	udiv	r1, r3, r2
 8002934:	fb01 f202 	mul.w	r2, r1, r2
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	69f9      	ldr	r1, [r7, #28]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff feea 	bl	800271c <W25qxx_WritePage>
		StartPage++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <W25qxx_WriteBlock+0xe8>)
 8002950:	895b      	ldrh	r3, [r3, #10]
 8002952:	461a      	mov	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	1a9a      	subs	r2, r3, r2
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <W25qxx_WriteBlock+0xe8>)
 8002960:	895b      	ldrh	r3, [r3, #10]
 8002962:	461a      	mov	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dce1      	bgt.n	800293c <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <W25qxx_WriteBlock+0xf4>)
 800297a:	f012 fd1d 	bl	80153b8 <puts>
	W25qxx_Delay(100);
 800297e:	2064      	movs	r0, #100	; 0x64
 8002980:	f001 fd96 	bl	80044b0 <HAL_Delay>
	#endif	
}
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200019d0 	.word	0x200019d0
 8002990:	08018570 	.word	0x08018570
 8002994:	080185b0 	.word	0x080185b0
 8002998:	080185d0 	.word	0x080185d0

0800299c <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80029a8:	e002      	b.n	80029b0 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f001 fd80 	bl	80044b0 <HAL_Delay>
	while(w25qxx.Lock==1)
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <W25qxx_ReadBytes+0x114>)
 80029b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d0f7      	beq.n	80029aa <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <W25qxx_ReadBytes+0x114>)
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 80029c2:	f001 fd69 	bl	8004498 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <W25qxx_ReadBytes+0x118>)
 80029ce:	f012 fc6d 	bl	80152ac <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2110      	movs	r1, #16
 80029d6:	4838      	ldr	r0, [pc, #224]	; (8002ab8 <W25qxx_ReadBytes+0x11c>)
 80029d8:	f002 fcb2 	bl	8005340 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80029dc:	200b      	movs	r0, #11
 80029de:	f7ff fbc7 	bl	8002170 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <W25qxx_ReadBytes+0x114>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d905      	bls.n	80029f6 <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0e1b      	lsrs	r3, r3, #24
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fbbd 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fbb7 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fbb1 	bl	8002170 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fbac 	bl	8002170 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fba9 	bl	8002170 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	4824      	ldr	r0, [pc, #144]	; (8002abc <W25qxx_ReadBytes+0x120>)
 8002a2a:	f004 f87a 	bl	8006b22 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2110      	movs	r1, #16
 8002a32:	4821      	ldr	r0, [pc, #132]	; (8002ab8 <W25qxx_ReadBytes+0x11c>)
 8002a34:	f002 fc84 	bl	8005340 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8002a38:	f001 fd2e 	bl	8004498 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e018      	b.n	8002a7c <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d108      	bne.n	8002a66 <W25qxx_ReadBytes+0xca>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d905      	bls.n	8002a66 <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 8002a5a:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <W25qxx_ReadBytes+0x124>)
 8002a5c:	f012 fcac 	bl	80153b8 <puts>
			W25qxx_Delay(10);
 8002a60:	200a      	movs	r0, #10
 8002a62:	f001 fd25 	bl	80044b0 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <W25qxx_ReadBytes+0x128>)
 8002a72:	f012 fc1b 	bl	80152ac <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3e2      	bcc.n	8002a4a <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 8002a84:	480e      	ldr	r0, [pc, #56]	; (8002ac0 <W25qxx_ReadBytes+0x124>)
 8002a86:	f012 fc97 	bl	80153b8 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 8002a8a:	6939      	ldr	r1, [r7, #16]
 8002a8c:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <W25qxx_ReadBytes+0x12c>)
 8002a8e:	f012 fc0d 	bl	80152ac <iprintf>
	W25qxx_Delay(100);
 8002a92:	2064      	movs	r0, #100	; 0x64
 8002a94:	f001 fd0c 	bl	80044b0 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f001 fd09 	bl	80044b0 <HAL_Delay>
	w25qxx.Lock=0;
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <W25qxx_ReadBytes+0x114>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200019d0 	.word	0x200019d0
 8002ab4:	08018644 	.word	0x08018644
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	200017ac 	.word	0x200017ac
 8002ac0:	080184c4 	.word	0x080184c4
 8002ac4:	080184c8 	.word	0x080184c8
 8002ac8:	0801867c 	.word	0x0801867c

08002acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ad2:	e003      	b.n	8002adc <LoopCopyDataInit>

08002ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ada:	3104      	adds	r1, #4

08002adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ae4:	d3f6      	bcc.n	8002ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ae8:	e002      	b.n	8002af0 <LoopFillZerobss>

08002aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002aec:	f842 3b04 	str.w	r3, [r2], #4

08002af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002af4:	d3f9      	bcc.n	8002aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002af6:	f7ff f9a5 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afa:	f011 fe4f 	bl	801479c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afe:	f7fd ff9f 	bl	8000a40 <main>
  bx  lr    
 8002b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b08:	08019ac8 	.word	0x08019ac8
  ldr  r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b10:	20001610 	.word	0x20001610
  ldr  r2, =_sbss
 8002b14:	20001610 	.word	0x20001610
  ldr  r3, = _ebss
 8002b18:	20001b50 	.word	0x20001b50

08002b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC_IRQHandler>

08002b1e <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	3303      	adds	r3, #3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f023 0303 	bic.w	r3, r3, #3
 8002b38:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d810      	bhi.n	8002b68 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5c:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 8002b86:	e047      	b.n	8002c18 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d801      	bhi.n	8002b92 <create_qt_tbl+0x1a>
 8002b8e:	2306      	movs	r3, #6
 8002b90:	e046      	b.n	8002c20 <create_qt_tbl+0xa8>
		ndata -= 65;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	3b41      	subs	r3, #65	; 0x41
 8002b96:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	60ba      	str	r2, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 8002ba2:	7f7b      	ldrb	r3, [r7, #29]
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <create_qt_tbl+0x38>
 8002bac:	2306      	movs	r3, #6
 8002bae:	e037      	b.n	8002c20 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 8002bb0:	7f7b      	ldrb	r3, [r7, #29]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 8002bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ffad 	bl	8002b1e <alloc_pool>
 8002bc4:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <create_qt_tbl+0x58>
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e027      	b.n	8002c20 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 8002bd0:	8bfa      	ldrh	r2, [r7, #30]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3214      	adds	r2, #20
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002bdc:	2300      	movs	r3, #0
 8002bde:	83fb      	strh	r3, [r7, #30]
 8002be0:	e017      	b.n	8002c12 <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 8002be2:	8bfb      	ldrh	r3, [r7, #30]
 8002be4:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <create_qt_tbl+0xb0>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	60ba      	str	r2, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <create_qt_tbl+0xb4>)
 8002bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bfc:	fb03 f101 	mul.w	r1, r3, r1
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4413      	add	r3, r2
 8002c08:	460a      	mov	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002c0c:	8bfb      	ldrh	r3, [r7, #30]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	83fb      	strh	r3, [r7, #30]
 8002c12:	8bfb      	ldrh	r3, [r7, #30]
 8002c14:	2b3f      	cmp	r3, #63	; 0x3f
 8002c16:	d9e4      	bls.n	8002be2 <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b4      	bne.n	8002b88 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0801886c 	.word	0x0801886c
 8002c2c:	080188ac 	.word	0x080188ac

08002c30 <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 8002c3e:	e0c3      	b.n	8002dc8 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d801      	bhi.n	8002c4a <create_huffman_tbl+0x1a>
 8002c46:	2306      	movs	r3, #6
 8002c48:	e0c3      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		ndata -= 17;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	3b11      	subs	r3, #17
 8002c4e:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 8002c5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c60:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <create_huffman_tbl+0x3c>
 8002c68:	2306      	movs	r3, #6
 8002c6a:	e0b2      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 8002c6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	83fb      	strh	r3, [r7, #30]
 8002c76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 8002c82:	2110      	movs	r1, #16
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff ff4a 	bl	8002b1e <alloc_pool>
 8002c8a:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <create_huffman_tbl+0x66>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e09d      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 8002c96:	8bb9      	ldrh	r1, [r7, #28]
 8002c98:	8bfa      	ldrh	r2, [r7, #30]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0049      	lsls	r1, r1, #1
 8002c9e:	440a      	add	r2, r1
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cae:	853b      	strh	r3, [r7, #40]	; 0x28
 8002cb0:	e00f      	b.n	8002cd2 <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	1c53      	adds	r3, r2, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	440b      	add	r3, r1
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cc8:	4413      	add	r3, r2
 8002cca:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cce:	3301      	adds	r3, #1
 8002cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cd4:	2b0f      	cmp	r3, #15
 8002cd6:	d9ec      	bls.n	8002cb2 <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff ff1c 	bl	8002b1e <alloc_pool>
 8002ce6:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <create_huffman_tbl+0xc2>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e06f      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 8002cf2:	8bb9      	ldrh	r1, [r7, #28]
 8002cf4:	8bfa      	ldrh	r2, [r7, #30]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	0049      	lsls	r1, r1, #1
 8002cfa:	440a      	add	r2, r1
 8002cfc:	320c      	adds	r2, #12
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002d08:	2300      	movs	r3, #0
 8002d0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002d10:	e01a      	b.n	8002d48 <create_huffman_tbl+0x118>
			b = pb[i];
 8002d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002d1c:	e009      	b.n	8002d32 <create_huffman_tbl+0x102>
 8002d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	847a      	strh	r2, [r7, #34]	; 0x22
 8002d24:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002d26:	1c51      	adds	r1, r2, #1
 8002d28:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002d2a:	0052      	lsls	r2, r2, #1
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	440a      	add	r2, r1
 8002d30:	8013      	strh	r3, [r2, #0]
 8002d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	857a      	strh	r2, [r7, #42]	; 0x2a
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <create_huffman_tbl+0xee>
			hc <<= 1;
 8002d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d44:	3301      	adds	r3, #1
 8002d46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	d9e1      	bls.n	8002d12 <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d201      	bcs.n	8002d5a <create_huffman_tbl+0x12a>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e03b      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		ndata -= np;
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 8002d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d64:	4619      	mov	r1, r3
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fed9 	bl	8002b1e <alloc_pool>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <create_huffman_tbl+0x148>
 8002d74:	2303      	movs	r3, #3
 8002d76:	e02c      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 8002d78:	8bb9      	ldrh	r1, [r7, #28]
 8002d7a:	8bfa      	ldrh	r2, [r7, #30]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	440a      	add	r2, r1
 8002d82:	3210      	adds	r2, #16
 8002d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d8e:	e017      	b.n	8002dc0 <create_huffman_tbl+0x190>
			d = *data++;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	60ba      	str	r2, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 8002d9c:	8bfb      	ldrh	r3, [r7, #30]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <create_huffman_tbl+0x17e>
 8002da2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002da6:	2b0b      	cmp	r3, #11
 8002da8:	d901      	bls.n	8002dae <create_huffman_tbl+0x17e>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e011      	b.n	8002dd2 <create_huffman_tbl+0x1a2>
			*pd++ = d;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	627a      	str	r2, [r7, #36]	; 0x24
 8002db4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002db8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002dc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3e3      	bcc.n	8002d90 <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f af38 	bne.w	8002c40 <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3730      	adds	r7, #48	; 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7b1b      	ldrb	r3, [r3, #12]
 8002de8:	75fb      	strb	r3, [r7, #23]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	81fb      	strh	r3, [r7, #14]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	75bb      	strb	r3, [r7, #22]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	817b      	strh	r3, [r7, #10]
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d137      	bne.n	8002e7a <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1e:	6939      	ldr	r1, [r7, #16]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <bitext+0x60>
 8002e2e:	f06f 0301 	mvn.w	r3, #1
 8002e32:	e041      	b.n	8002eb8 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	3301      	adds	r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 8002e40:	897b      	ldrh	r3, [r7, #10]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 8002e46:	2300      	movs	r3, #0
 8002e48:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <bitext+0x7e>
 8002e52:	f06f 0305 	mvn.w	r3, #5
 8002e56:	e02f      	b.n	8002eb8 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002e58:	23ff      	movs	r3, #255	; 0xff
 8002e5a:	75bb      	strb	r3, [r7, #22]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	7dba      	ldrb	r2, [r7, #22]
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e008      	b.n	8002e76 <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002e6a:	7dbb      	ldrb	r3, [r7, #22]
 8002e6c:	2bff      	cmp	r3, #255	; 0xff
 8002e6e:	d102      	bne.n	8002e76 <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 8002e70:	2301      	movs	r3, #1
 8002e72:	817b      	strh	r3, [r7, #10]
 8002e74:	e013      	b.n	8002e9e <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 8002e7a:	89bb      	ldrh	r3, [r7, #12]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 8002e80:	7dba      	ldrb	r2, [r7, #22]
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <bitext+0xb8>
 8002e8c:	89bb      	ldrh	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1af      	bne.n	8002e04 <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7dfa      	ldrb	r2, [r7, #23]
 8002ea8:	731a      	strb	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	89fa      	ldrh	r2, [r7, #14]
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]

	return (int)v;
 8002eb6:	89bb      	ldrh	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	83fb      	strh	r3, [r7, #30]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002eea:	2300      	movs	r3, #0
 8002eec:	837b      	strh	r3, [r7, #26]
 8002eee:	8b7b      	ldrh	r3, [r7, #26]
 8002ef0:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 8002ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d13c      	bne.n	8002f78 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 8002efe:	8bfb      	ldrh	r3, [r7, #30]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	6a39      	ldr	r1, [r7, #32]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	4798      	blx	r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002f1c:	8bfb      	ldrh	r3, [r7, #30]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <huffext+0x6e>
 8002f22:	f06f 0301 	mvn.w	r3, #1
 8002f26:	e066      	b.n	8002ff6 <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 8002f2e:	8bfb      	ldrh	r3, [r7, #30]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <huffext+0x8c>
 8002f46:	f06f 0305 	mvn.w	r3, #5
 8002f4a:	e054      	b.n	8002ff6 <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002f4c:	23ff      	movs	r3, #255	; 0xff
 8002f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e00a      	b.n	8002f72 <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d102      	bne.n	8002f72 <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	837b      	strh	r3, [r7, #26]
 8002f70:	e03c      	b.n	8002fec <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 8002f78:	8bbb      	ldrh	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 8002f7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f86:	4013      	ands	r3, r2
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <huffext+0xd4>
 8002f8e:	8bbb      	ldrh	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 8002f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	60ba      	str	r2, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	82fb      	strh	r3, [r7, #22]
 8002fa8:	e01a      	b.n	8002fe0 <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	8bba      	ldrh	r2, [r7, #28]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d10d      	bne.n	8002fd4 <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fbe:	731a      	strb	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8bfa      	ldrh	r2, [r7, #30]
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	e010      	b.n	8002ff6 <huffext+0x136>
			}
			hdata++;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	82fb      	strh	r3, [r7, #22]
 8002fe0:	8afb      	ldrh	r3, [r7, #22]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e1      	bne.n	8002faa <huffext+0xea>
		}
		bl--;
 8002fe6:	8b3b      	ldrh	r3, [r7, #24]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8002fec:	8b3b      	ldrh	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d181      	bne.n	8002ef6 <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 8002ff2:	f06f 0305 	mvn.w	r3, #5
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8003000:	b480      	push	{r7}
 8003002:	b095      	sub	sp, #84	; 0x54
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 800300a:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003010:	f241 1351 	movw	r3, #4433	; 0x1151
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
 8003016:	f642 13cf 	movw	r3, #10703	; 0x29cf
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
 800301c:	f641 5390 	movw	r3, #7568	; 0x1d90
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 8003022:	2300      	movs	r3, #0
 8003024:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003028:	e0b8      	b.n	800319c <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 8003046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	4413      	add	r3, r2
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 800304e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8003056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	131b      	asrs	r3, r3, #12
 8003064:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8003066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	4413      	add	r3, r2
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8003076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	4413      	add	r3, r2
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 800307e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	4413      	add	r3, r2
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309c:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030aa:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4413      	add	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	131b      	asrs	r3, r3, #12
 80030e0:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	4413      	add	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 80030ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	4413      	add	r3, r2
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	131b      	asrs	r3, r3, #12
 80030f8:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	131b      	asrs	r3, r3, #12
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	131b      	asrs	r3, r3, #12
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 800312e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	441a      	add	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	33e0      	adds	r3, #224	; 0xe0
 800313c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	1a8a      	subs	r2, r1, r2
 8003142:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3320      	adds	r3, #32
 8003148:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	440a      	add	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	33c0      	adds	r3, #192	; 0xc0
 8003154:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	1a8a      	subs	r2, r1, r2
 800315a:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3340      	adds	r3, #64	; 0x40
 8003160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	440a      	add	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	33a0      	adds	r3, #160	; 0xa0
 800316c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	1a8a      	subs	r2, r1, r2
 8003172:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	440a      	add	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3380      	adds	r3, #128	; 0x80
 8003184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	1a8a      	subs	r2, r1, r2
 800318a:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8003192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003196:	3301      	adds	r3, #1
 8003198:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800319c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a0:	2b07      	cmp	r3, #7
 80031a2:	f67f af42 	bls.w	800302a <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3b20      	subs	r3, #32
 80031aa:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031b2:	e0e9      	b.n	8003388 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 80031d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	4413      	add	r3, r2
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 80031d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 80031e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	131b      	asrs	r3, r3, #12
 80031ee:	623b      	str	r3, [r7, #32]
		v3 += v1;
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	4413      	add	r3, r2
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8003200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	4413      	add	r3, r2
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8003208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	4413      	add	r3, r2
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4413      	add	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	131b      	asrs	r3, r3, #12
 8003266:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	4413      	add	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8003270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	4413      	add	r3, r2
 8003276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	131b      	asrs	r3, r3, #12
 800327e:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	131b      	asrs	r3, r3, #12
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	131b      	asrs	r3, r3, #12
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	1ad2      	subs	r2, r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 80032b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	121b      	asrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c2:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <block_idct+0x3a0>)
 80032c4:	5cd2      	ldrb	r2, [r2, r3]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 80032ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	121b      	asrs	r3, r3, #8
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3307      	adds	r3, #7
 80032dc:	4930      	ldr	r1, [pc, #192]	; (80033a0 <block_idct+0x3a0>)
 80032de:	5c8a      	ldrb	r2, [r1, r2]
 80032e0:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 80032e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	121b      	asrs	r3, r3, #8
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	492a      	ldr	r1, [pc, #168]	; (80033a0 <block_idct+0x3a0>)
 80032f6:	5c8a      	ldrb	r2, [r1, r2]
 80032f8:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	121b      	asrs	r3, r3, #8
 8003302:	b29b      	uxth	r3, r3
 8003304:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3306      	adds	r3, #6
 800330c:	4924      	ldr	r1, [pc, #144]	; (80033a0 <block_idct+0x3a0>)
 800330e:	5c8a      	ldrb	r2, [r1, r2]
 8003310:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 8003312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	121b      	asrs	r3, r3, #8
 800331a:	b29b      	uxth	r3, r3
 800331c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3302      	adds	r3, #2
 8003324:	491e      	ldr	r1, [pc, #120]	; (80033a0 <block_idct+0x3a0>)
 8003326:	5c8a      	ldrb	r2, [r1, r2]
 8003328:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 800332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	121b      	asrs	r3, r3, #8
 8003332:	b29b      	uxth	r3, r3
 8003334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	3305      	adds	r3, #5
 800333c:	4918      	ldr	r1, [pc, #96]	; (80033a0 <block_idct+0x3a0>)
 800333e:	5c8a      	ldrb	r2, [r1, r2]
 8003340:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 8003342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	121b      	asrs	r3, r3, #8
 800334a:	b29b      	uxth	r3, r3
 800334c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3303      	adds	r3, #3
 8003354:	4912      	ldr	r1, [pc, #72]	; (80033a0 <block_idct+0x3a0>)
 8003356:	5c8a      	ldrb	r2, [r1, r2]
 8003358:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 800335a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	121b      	asrs	r3, r3, #8
 8003362:	b29b      	uxth	r3, r3
 8003364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	3304      	adds	r3, #4
 800336c:	490c      	ldr	r1, [pc, #48]	; (80033a0 <block_idct+0x3a0>)
 800336e:	5c8a      	ldrb	r2, [r1, r2]
 8003370:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3320      	adds	r3, #32
 800337c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 800337e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003382:	3301      	adds	r3, #1
 8003384:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338c:	2b07      	cmp	r3, #7
 800338e:	f67f af11 	bls.w	80031b4 <block_idct+0x1b4>
	}
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3754      	adds	r7, #84	; 0x54
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	0801892c 	.word	0x0801892c

080033a4 <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b090      	sub	sp, #64	; 0x40
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7b9b      	ldrb	r3, [r3, #14]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7bdb      	ldrb	r3, [r3, #15]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	fb12 f303 	smulbb	r3, r2, r3
 80033c2:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 80033c4:	2302      	movs	r3, #2
 80033c6:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 80033ce:	2300      	movs	r3, #0
 80033d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033d2:	e11b      	b.n	800360c <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 80033d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033d8:	429a      	cmp	r2, r3
 80033da:	d306      	bcc.n	80033ea <mcu_load+0x46>
 80033dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	e000      	b.n	80033ec <mcu_load+0x48>
 80033ea:	2300      	movs	r3, #0
 80033ec:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 80033ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 80033fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3204      	adds	r2, #4
 8003402:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003406:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8003408:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3206      	adds	r2, #6
 800340e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003412:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 8003414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3208      	adds	r2, #8
 800341a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800341e:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fd4a 	bl	8002ec0 <huffext>
 800342c:	4603      	mov	r3, r0
 800342e:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	da04      	bge.n	8003440 <mcu_load+0x9c>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	425b      	negs	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e0ed      	b.n	800361c <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8003440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	3308      	adds	r3, #8
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02a      	beq.n	80034ac <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 8003456:	6979      	ldr	r1, [r7, #20]
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fcbe 	bl	8002dda <bitext>
 800345e:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	da04      	bge.n	8003470 <mcu_load+0xcc>
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	b2db      	uxtb	r3, r3
 800346a:	425b      	negs	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e0d5      	b.n	800361c <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3b01      	subs	r3, #1
 8003474:	2201      	movs	r2, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 800347c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <mcu_load+0xee>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 8003492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	4413      	add	r3, r2
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 800349a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800349c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349e:	b211      	sxth	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	3308      	adds	r3, #8
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	460a      	mov	r2, r1
 80034aa:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 80034ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	7c1b      	ldrb	r3, [r3, #16]
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3214      	adds	r2, #20
 80034ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034be:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	121a      	asrs	r2, r3, #8
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 80034d0:	2301      	movs	r3, #1
 80034d2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034d4:	e007      	b.n	80034e6 <mcu_load+0x142>
 80034d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	86ba      	strh	r2, [r7, #52]	; 0x34
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e0:	4413      	add	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034e8:	2b3f      	cmp	r3, #63	; 0x3f
 80034ea:	d9f4      	bls.n	80034d6 <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 80034ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 80034f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 8003504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8003510:	2301      	movs	r3, #1
 8003512:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fcd0 	bl	8002ec0 <huffext>
 8003520:	4603      	mov	r3, r0
 8003522:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d055      	beq.n	80035d6 <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da04      	bge.n	800353a <mcu_load+0x196>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	425b      	negs	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e070      	b.n	800361c <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	b29b      	uxth	r3, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	81fb      	strh	r3, [r7, #14]
			if (z) {
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8003548:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800354a:	89fb      	ldrh	r3, [r7, #14]
 800354c:	4413      	add	r3, r2
 800354e:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8003550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003552:	2b3f      	cmp	r3, #63	; 0x3f
 8003554:	d901      	bls.n	800355a <mcu_load+0x1b6>
 8003556:	2306      	movs	r3, #6
 8003558:	e060      	b.n	800361c <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02f      	beq.n	80035c8 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 8003568:	6979      	ldr	r1, [r7, #20]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fc35 	bl	8002dda <bitext>
 8003570:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	da04      	bge.n	8003582 <mcu_load+0x1de>
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	b2db      	uxtb	r3, r3
 800357c:	425b      	negs	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e04c      	b.n	800361c <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3b01      	subs	r3, #1
 8003586:	2201      	movs	r2, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 800358e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <mcu_load+0x200>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 80035a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <mcu_load+0x280>)
 80035a8:	5cd3      	ldrb	r3, [r2, r3]
 80035aa:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b8:	fb03 f202 	mul.w	r2, r3, r2
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c2:	440b      	add	r3, r1
 80035c4:	1212      	asrs	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 80035c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035ca:	3301      	adds	r3, #1
 80035cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035d0:	2b3f      	cmp	r3, #63	; 0x3f
 80035d2:	d99f      	bls.n	8003514 <mcu_load+0x170>
 80035d4:	e000      	b.n	80035d8 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 80035d6:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7b5b      	ldrb	r3, [r3, #13]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d10b      	bne.n	80035f8 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da00      	bge.n	80035ea <mcu_load+0x246>
 80035e8:	33ff      	adds	r3, #255	; 0xff
 80035ea:	121b      	asrs	r3, r3, #8
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3b80      	subs	r3, #128	; 0x80
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e003      	b.n	8003600 <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 80035f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035fc:	f7ff fd00 	bl	8003000 <block_idct>
		}

		bp += 64;				/* Next block */
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	3340      	adds	r3, #64	; 0x40
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 8003606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003608:	3301      	adds	r3, #1
 800360a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800360c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800360e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003612:	440b      	add	r3, r1
 8003614:	429a      	cmp	r2, r3
 8003616:	f6ff aedd 	blt.w	80033d4 <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3740      	adds	r7, #64	; 0x40
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	0801886c 	.word	0x0801886c

08003628 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b098      	sub	sp, #96	; 0x60
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	460b      	mov	r3, r1
 8003638:	80fb      	strh	r3, [r7, #6]
 800363a:	4613      	mov	r3, r2
 800363c:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	7b9b      	ldrb	r3, [r3, #14]
 8003646:	b29b      	uxth	r3, r3
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	863b      	strh	r3, [r7, #48]	; 0x30
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	7bdb      	ldrb	r3, [r3, #15]
 8003650:	b29b      	uxth	r3, r3
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800365a:	4413      	add	r3, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	8b92      	ldrh	r2, [r2, #28]
 8003660:	4293      	cmp	r3, r2
 8003662:	dd05      	ble.n	8003670 <mcu_output+0x48>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8b9a      	ldrh	r2, [r3, #28]
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	b29b      	uxth	r3, r3
 800366e:	e000      	b.n	8003672 <mcu_output+0x4a>
 8003670:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003672:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8003674:	88ba      	ldrh	r2, [r7, #4]
 8003676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003678:	4413      	add	r3, r2
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	8bd2      	ldrh	r2, [r2, #30]
 800367e:	4293      	cmp	r3, r2
 8003680:	dd05      	ble.n	800368e <mcu_output+0x66>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8bda      	ldrh	r2, [r3, #30]
 8003686:	88bb      	ldrh	r3, [r7, #4]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	e000      	b.n	8003690 <mcu_output+0x68>
 800368e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003690:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 8003692:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	7b52      	ldrb	r2, [r2, #13]
 8003698:	4113      	asrs	r3, r2
 800369a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800369c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	7b52      	ldrb	r2, [r2, #13]
 80036a2:	4113      	asrs	r3, r2
 80036a4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 80036a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <mcu_output+0x8a>
 80036ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <mcu_output+0x8e>
 80036b2:	2300      	movs	r3, #0
 80036b4:	e2f0      	b.n	8003c98 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	7b52      	ldrb	r2, [r2, #13]
 80036bc:	4113      	asrs	r3, r2
 80036be:	80fb      	strh	r3, [r7, #6]
 80036c0:	88bb      	ldrh	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	7b52      	ldrb	r2, [r2, #13]
 80036c6:	4113      	asrs	r3, r2
 80036c8:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	82bb      	strh	r3, [r7, #20]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036d2:	4413      	add	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 80036dc:	88bb      	ldrh	r3, [r7, #4]
 80036de:	833b      	strh	r3, [r7, #24]
 80036e0:	88ba      	ldrh	r2, [r7, #4]
 80036e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036e4:	4413      	add	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	7b5b      	ldrb	r3, [r3, #13]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	f000 81a3 	beq.w	8003a3e <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 80036fe:	2300      	movs	r3, #0
 8003700:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003704:	e0e3      	b.n	80038ce <mcu_output+0x2a6>
			pc = jd->mcubuf;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370a:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 800370c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	461a      	mov	r2, r3
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	4413      	add	r3, r2
 8003718:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 800371a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800371c:	2b10      	cmp	r3, #16
 800371e:	d111      	bne.n	8003744 <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8003720:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	3320      	adds	r3, #32
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	461a      	mov	r2, r3
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	4413      	add	r3, r2
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 8003734:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003738:	2b07      	cmp	r3, #7
 800373a:	d90c      	bls.n	8003756 <mcu_output+0x12e>
 800373c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373e:	3340      	adds	r3, #64	; 0x40
 8003740:	65bb      	str	r3, [r7, #88]	; 0x58
 8003742:	e008      	b.n	8003756 <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 8003744:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003746:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	461a      	mov	r2, r3
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	4413      	add	r3, r2
 8003754:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 8003756:	2300      	movs	r3, #0
 8003758:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800375c:	e0ac      	b.n	80038b8 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 800375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b80      	subs	r3, #128	; 0x80
 8003766:	b29b      	uxth	r3, r3
 8003768:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b80      	subs	r3, #128	; 0x80
 8003774:	b29b      	uxth	r3, r3
 8003776:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 8003778:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800377a:	2b10      	cmp	r3, #16
 800377c:	d10e      	bne.n	800379c <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 800377e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003782:	2b08      	cmp	r3, #8
 8003784:	d102      	bne.n	800378c <mcu_output+0x164>
 8003786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003788:	3338      	adds	r3, #56	; 0x38
 800378a:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 800378c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003796:	4413      	add	r3, r2
 8003798:	657b      	str	r3, [r7, #84]	; 0x54
 800379a:	e002      	b.n	80037a2 <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	3301      	adds	r3, #1
 80037a0:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 80037a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 80037ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037b8:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8003a98 <mcu_output+0x470>
 80037bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037c4:	ee17 3a90 	vmov	r3, s15
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80037d0:	fb03 f202 	mul.w	r2, r3, r2
 80037d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80037dc:	b29a      	uxth	r2, r3
 80037de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037e0:	4413      	add	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	6539      	str	r1, [r7, #80]	; 0x50
 80037ee:	49b2      	ldr	r1, [pc, #712]	; (8003ab8 <mcu_output+0x490>)
 80037f0:	5c8a      	ldrb	r2, [r1, r2]
 80037f2:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 80037f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003802:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003aa0 <mcu_output+0x478>
 8003806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800380a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800380e:	ee17 3a90 	vmov	r3, s15
 8003812:	b21b      	sxth	r3, r3
 8003814:	4619      	mov	r1, r3
 8003816:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800381a:	fb03 f101 	mul.w	r1, r3, r1
 800381e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800382a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003aa8 <mcu_output+0x480>
 800382e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003832:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003836:	ee17 3a90 	vmov	r3, s15
 800383a:	b21b      	sxth	r3, r3
 800383c:	4618      	mov	r0, r3
 800383e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	4419      	add	r1, r3
 8003848:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800384c:	fb91 f3f3 	sdiv	r3, r1, r3
 8003850:	b29b      	uxth	r3, r3
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800385a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385c:	1c59      	adds	r1, r3, #1
 800385e:	6539      	str	r1, [r7, #80]	; 0x50
 8003860:	4995      	ldr	r1, [pc, #596]	; (8003ab8 <mcu_output+0x490>)
 8003862:	5c8a      	ldrb	r2, [r1, r2]
 8003864:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 8003866:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003872:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8003ab0 <mcu_output+0x488>
 8003876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800387a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800387e:	ee17 3a90 	vmov	r3, s15
 8003882:	b21b      	sxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800388a:	fb03 f202 	mul.w	r2, r3, r2
 800388e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003892:	fb92 f3f3 	sdiv	r3, r2, r3
 8003896:	b29a      	uxth	r2, r3
 8003898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800389a:	4413      	add	r3, r2
 800389c:	b29b      	uxth	r3, r3
 800389e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	6539      	str	r1, [r7, #80]	; 0x50
 80038a8:	4983      	ldr	r1, [pc, #524]	; (8003ab8 <mcu_output+0x490>)
 80038aa:	5c8a      	ldrb	r2, [r1, r2]
 80038ac:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 80038ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038b2:	3301      	adds	r3, #1
 80038b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038b8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038be:	429a      	cmp	r2, r3
 80038c0:	f4ff af4d 	bcc.w	800375e <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 80038c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038c8:	3301      	adds	r3, #1
 80038ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038ce:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80038d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f4ff af16 	bcc.w	8003706 <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	7b5b      	ldrb	r3, [r3, #13]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8189 	beq.w	8003bf6 <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	7b5b      	ldrb	r3, [r3, #13]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	7b5b      	ldrb	r3, [r3, #13]
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	4093      	lsls	r3, r2
 80038f8:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 80038fa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80038fc:	8c3b      	ldrh	r3, [r7, #32]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	4413      	add	r3, r2
 8003908:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8003910:	2300      	movs	r3, #0
 8003912:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003916:	e08b      	b.n	8003a30 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8003918:	2300      	movs	r3, #0
 800391a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800391e:	e07b      	b.n	8003a18 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003924:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003928:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800392a:	fb03 f202 	mul.w	r2, r3, r2
 800392e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003932:	441a      	add	r2, r3
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	440b      	add	r3, r1
 800393c:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003944:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003948:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800394c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003950:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 8003954:	2300      	movs	r3, #0
 8003956:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800395a:	e034      	b.n	80039c6 <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 800395c:	2300      	movs	r3, #0
 800395e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003962:	e022      	b.n	80039aa <mcu_output+0x382>
							r += *rgb24++;
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	653a      	str	r2, [r7, #80]	; 0x50
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
 800396e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003972:	4413      	add	r3, r2
 8003974:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 8003978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	653a      	str	r2, [r7, #80]	; 0x50
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b29a      	uxth	r2, r3
 8003982:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003986:	4413      	add	r3, r2
 8003988:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	653a      	str	r2, [r7, #80]	; 0x50
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800399a:	4413      	add	r3, r2
 800399c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 80039a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039a4:	3301      	adds	r3, #1
 80039a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80039aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80039ae:	8c3b      	ldrh	r3, [r7, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3d7      	bcc.n	8003964 <mcu_output+0x33c>
						}
						rgb24 += a;
 80039b4:	8bfb      	ldrh	r3, [r7, #30]
 80039b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039b8:	4413      	add	r3, r2
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 80039bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039c0:	3301      	adds	r3, #1
 80039c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80039c6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80039ca:	8c3b      	ldrh	r3, [r7, #32]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3c5      	bcc.n	800395c <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 80039d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80039d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039d6:	fa42 f103 	asr.w	r1, r2, r3
 80039da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	643a      	str	r2, [r7, #64]	; 0x40
 80039e0:	b2ca      	uxtb	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 80039e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039ea:	fa42 f103 	asr.w	r1, r2, r3
 80039ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	643a      	str	r2, [r7, #64]	; 0x40
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 80039f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80039fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039fe:	fa42 f103 	asr.w	r1, r2, r3
 8003a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	643a      	str	r2, [r7, #64]	; 0x40
 8003a08:	b2ca      	uxtb	r2, r1
 8003a0a:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 8003a0c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a10:	8c3b      	ldrh	r3, [r7, #32]
 8003a12:	4413      	add	r3, r2
 8003a14:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a18:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	f4ff af7e 	bcc.w	8003920 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 8003a24:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003a28:	8c3b      	ldrh	r3, [r7, #32]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a30:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003a34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f4ff af6e 	bcc.w	8003918 <mcu_output+0x2f0>
 8003a3c:	e0db      	b.n	8003bf6 <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a48:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003a4a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003a4c:	fb01 f202 	mul.w	r2, r1, r2
 8003a50:	4413      	add	r3, r2
 8003a52:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b80      	subs	r3, #128	; 0x80
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 8003a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a62:	3340      	adds	r3, #64	; 0x40
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b80      	subs	r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a74:	e0b9      	b.n	8003bea <mcu_output+0x5c2>
			py = jd->mcubuf;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7a:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 8003a7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d102      	bne.n	8003a8a <mcu_output+0x462>
 8003a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a86:	3380      	adds	r3, #128	; 0x80
 8003a88:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a90:	e0a0      	b.n	8003bd4 <mcu_output+0x5ac>
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
 8003a98:	8d4fdf3b 	.word	0x8d4fdf3b
 8003a9c:	3ff66e97 	.word	0x3ff66e97
 8003aa0:	9374bc6a 	.word	0x9374bc6a
 8003aa4:	3fd60418 	.word	0x3fd60418
 8003aa8:	872b020c 	.word	0x872b020c
 8003aac:	3fe6d916 	.word	0x3fe6d916
 8003ab0:	ac083127 	.word	0xac083127
 8003ab4:	3ffc5a1c 	.word	0x3ffc5a1c
 8003ab8:	0801892c 	.word	0x0801892c
				yy = *py;	/* Get Y component */
 8003abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 8003ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac4:	3340      	adds	r3, #64	; 0x40
 8003ac6:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 8003ac8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ad4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003ca0 <mcu_output+0x678>
 8003ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003adc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003ae0:	ee17 3a90 	vmov	r3, s15
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003aec:	fb03 f202 	mul.w	r2, r3, r2
 8003af0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003af4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003afc:	4413      	add	r3, r2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	6539      	str	r1, [r7, #80]	; 0x50
 8003b0a:	496d      	ldr	r1, [pc, #436]	; (8003cc0 <mcu_output+0x698>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
 8003b0e:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003b10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b1e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003ca8 <mcu_output+0x680>
 8003b22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b2a:	ee17 3a90 	vmov	r3, s15
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003b36:	fb03 f101 	mul.w	r1, r3, r1
 8003b3a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b46:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003cb0 <mcu_output+0x688>
 8003b4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b52:	ee17 3a90 	vmov	r3, s15
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	4419      	add	r1, r3
 8003b64:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b68:	fb91 f3f3 	sdiv	r3, r1, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	1c59      	adds	r1, r3, #1
 8003b7a:	6539      	str	r1, [r7, #80]	; 0x50
 8003b7c:	4950      	ldr	r1, [pc, #320]	; (8003cc0 <mcu_output+0x698>)
 8003b7e:	5c8a      	ldrb	r2, [r1, r2]
 8003b80:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 8003b82:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b8e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003cb8 <mcu_output+0x690>
 8003b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b9a:	ee17 3a90 	vmov	r3, s15
 8003b9e:	b21b      	sxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bb6:	4413      	add	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	1c59      	adds	r1, r3, #1
 8003bc2:	6539      	str	r1, [r7, #80]	; 0x50
 8003bc4:	493e      	ldr	r1, [pc, #248]	; (8003cc0 <mcu_output+0x698>)
 8003bc6:	5c8a      	ldrb	r2, [r1, r2]
 8003bc8:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 8003bca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003bce:	3308      	adds	r3, #8
 8003bd0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003bd4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003bd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	f4ff af6e 	bcc.w	8003abc <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003be0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003be4:	3308      	adds	r3, #8
 8003be6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003bea:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	f4ff af40 	bcc.w	8003a76 <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 8003bf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	7b52      	ldrb	r2, [r2, #13]
 8003bfc:	4113      	asrs	r3, r2
 8003bfe:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003c00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003c02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d23a      	bcs.n	8003c7e <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003c12:	2300      	movs	r3, #0
 8003c14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c16:	e02e      	b.n	8003c76 <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c1c:	e01a      	b.n	8003c54 <mcu_output+0x62c>
				*d++ = *s++;
 8003c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c20:	1c53      	adds	r3, r2, #1
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c30:	1c53      	adds	r3, r2, #1
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c40:	1c53      	adds	r3, r2, #1
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c50:	3301      	adds	r3, #1
 8003c52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3e0      	bcc.n	8003c1e <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8003c5c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003c5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	4413      	add	r3, r2
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003c70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c72:	3301      	adds	r3, #1
 8003c74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d3cc      	bcc.n	8003c18 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003c82:	f107 0214 	add.w	r2, r7, #20
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	4798      	blx	r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3760      	adds	r7, #96	; 0x60
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	8d4fdf3b 	.word	0x8d4fdf3b
 8003ca4:	3ff66e97 	.word	0x3ff66e97
 8003ca8:	9374bc6a 	.word	0x9374bc6a
 8003cac:	3fd60418 	.word	0x3fd60418
 8003cb0:	872b020c 	.word	0x872b020c
 8003cb4:	3fe6d916 	.word	0x3fe6d916
 8003cb8:	ac083127 	.word	0xac083127
 8003cbc:	3ffc5a1c 	.word	0x3ffc5a1c
 8003cc0:	0801892c 	.word	0x0801892c

08003cc4 <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	82bb      	strh	r3, [r7, #20]
	d = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	82fb      	strh	r3, [r7, #22]
 8003ce4:	e025      	b.n	8003d32 <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 8003ce6:	8abb      	ldrh	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d110      	bne.n	8003d0e <restart+0x4a>
			dp = jd->inbuf;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 8003d04:	8abb      	ldrh	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <restart+0x50>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e03d      	b.n	8003d8a <restart+0xc6>
		} else {
			dp++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 8003d14:	8abb      	ldrh	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 8003d1a:	8a7b      	ldrh	r3, [r7, #18]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b21b      	sxth	r3, r3
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003d2c:	8afb      	ldrh	r3, [r7, #22]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	82fb      	strh	r3, [r7, #22]
 8003d32:	8afb      	ldrh	r3, [r7, #22]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d9d6      	bls.n	8003ce6 <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8aba      	ldrh	r2, [r7, #20]
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 8003d4a:	8a7a      	ldrh	r2, [r7, #18]
 8003d4c:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8003d50:	4013      	ands	r3, r2
 8003d52:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d107      	bne.n	8003d6a <restart+0xa6>
 8003d5a:	8a7a      	ldrh	r2, [r7, #18]
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	4053      	eors	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	e00d      	b.n	8003d8a <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	829a      	strh	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	82da      	strh	r2, [r3, #22]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <jd_prepare+0x18>
 8003da8:	2305      	movs	r3, #5
 8003daa:	e2a4      	b.n	80042f6 <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003dcc:	2300      	movs	r3, #0
 8003dce:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dd0:	e026      	b.n	8003e20 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	843b      	strh	r3, [r7, #32]
 8003dd6:	e01d      	b.n	8003e14 <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003dd8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003dda:	8c3a      	ldrh	r2, [r7, #32]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0049      	lsls	r1, r1, #1
 8003de0:	440a      	add	r2, r1
 8003de2:	3208      	adds	r2, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 8003dea:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003dec:	8c3a      	ldrh	r2, [r7, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0049      	lsls	r1, r1, #1
 8003df2:	440a      	add	r2, r1
 8003df4:	320c      	adds	r2, #12
 8003df6:	2100      	movs	r1, #0
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 8003dfc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003dfe:	8c3a      	ldrh	r2, [r7, #32]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	0049      	lsls	r1, r1, #1
 8003e04:	440a      	add	r2, r1
 8003e06:	3210      	adds	r2, #16
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 8003e0e:	8c3b      	ldrh	r3, [r7, #32]
 8003e10:	3301      	adds	r3, #1
 8003e12:	843b      	strh	r3, [r7, #32]
 8003e14:	8c3b      	ldrh	r3, [r7, #32]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d9de      	bls.n	8003dd8 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d9d5      	bls.n	8003dd2 <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 8003e26:	2300      	movs	r3, #0
 8003e28:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e2a:	e008      	b.n	8003e3e <jd_prepare+0xaa>
 8003e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	847a      	strh	r2, [r7, #34]	; 0x22
 8003e32:	461a      	mov	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3214      	adds	r2, #20
 8003e38:	2100      	movs	r1, #0
 8003e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d9f3      	bls.n	8003e2c <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 8003e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7fe fe68 	bl	8002b1e <alloc_pool>
 8003e4e:	61b8      	str	r0, [r7, #24]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <jd_prepare+0xcc>
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e24a      	b.n	80042f6 <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	2202      	movs	r2, #2
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	4798      	blx	r3
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d001      	beq.n	8003e76 <jd_prepare+0xe2>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e23f      	b.n	80042f6 <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	3301      	adds	r3, #1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003e8e:	d001      	beq.n	8003e94 <jd_prepare+0x100>
 8003e90:	2306      	movs	r3, #6
 8003e92:	e230      	b.n	80042f6 <jd_prepare+0x562>
	ofs = 2;
 8003e94:	2302      	movs	r3, #2
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	4798      	blx	r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d001      	beq.n	8003eae <jd_prepare+0x11a>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e223      	b.n	80042f6 <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	b21a      	sxth	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3303      	adds	r3, #3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8003edc:	8bfb      	ldrh	r3, [r7, #30]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d904      	bls.n	8003eec <jd_prepare+0x158>
 8003ee2:	8afb      	ldrh	r3, [r7, #22]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2bff      	cmp	r3, #255	; 0xff
 8003eea:	d001      	beq.n	8003ef0 <jd_prepare+0x15c>
 8003eec:	2306      	movs	r3, #6
 8003eee:	e202      	b.n	80042f6 <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003ef0:	8bfb      	ldrh	r3, [r7, #30]
 8003ef2:	3b02      	subs	r3, #2
 8003ef4:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003ef6:	8bfa      	ldrh	r2, [r7, #30]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	4413      	add	r3, r2
 8003efc:	3304      	adds	r3, #4
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003f00:	8afb      	ldrh	r3, [r7, #22]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3bc0      	subs	r3, #192	; 0xc0
 8003f06:	2b1d      	cmp	r3, #29
 8003f08:	f200 81e3 	bhi.w	80042d2 <jd_prepare+0x53e>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <jd_prepare+0x180>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f8d 	.word	0x08003f8d
 8003f18:	080042cf 	.word	0x080042cf
 8003f1c:	080042cf 	.word	0x080042cf
 8003f20:	080042cf 	.word	0x080042cf
 8003f24:	080040c9 	.word	0x080040c9
 8003f28:	080042cf 	.word	0x080042cf
 8003f2c:	080042cf 	.word	0x080042cf
 8003f30:	080042cf 	.word	0x080042cf
 8003f34:	080042d3 	.word	0x080042d3
 8003f38:	080042cf 	.word	0x080042cf
 8003f3c:	080042cf 	.word	0x080042cf
 8003f40:	080042cf 	.word	0x080042cf
 8003f44:	080042d3 	.word	0x080042d3
 8003f48:	080042cf 	.word	0x080042cf
 8003f4c:	080042cf 	.word	0x080042cf
 8003f50:	080042cf 	.word	0x080042cf
 8003f54:	080042d3 	.word	0x080042d3
 8003f58:	080042d3 	.word	0x080042d3
 8003f5c:	080042d3 	.word	0x080042d3
 8003f60:	080042d3 	.word	0x080042d3
 8003f64:	080042d3 	.word	0x080042d3
 8003f68:	080042d3 	.word	0x080042d3
 8003f6c:	080042d3 	.word	0x080042d3
 8003f70:	080042d3 	.word	0x080042d3
 8003f74:	080042d3 	.word	0x080042d3
 8003f78:	080042cf 	.word	0x080042cf
 8003f7c:	0800414d 	.word	0x0800414d
 8003f80:	0800410b 	.word	0x0800410b
 8003f84:	080042d3 	.word	0x080042d3
 8003f88:	08004087 	.word	0x08004087
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003f8c:	8bfb      	ldrh	r3, [r7, #30]
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f92:	d901      	bls.n	8003f98 <jd_prepare+0x204>
 8003f94:	2304      	movs	r3, #4
 8003f96:	e1ae      	b.n	80042f6 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	8bfa      	ldrh	r2, [r7, #30]
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	4798      	blx	r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	8bfb      	ldrh	r3, [r7, #30]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d001      	beq.n	8003fb2 <jd_prepare+0x21e>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e1a1      	b.n	80042f6 <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	b21a      	sxth	r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	b21a      	sxth	r2, r3
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	3302      	adds	r3, #2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b21b      	sxth	r3, r3
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	3305      	adds	r3, #5
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d001      	beq.n	8003ff8 <jd_prepare+0x264>
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	e17e      	b.n	80042f6 <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ffc:	e03f      	b.n	800407e <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8003ffe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	3307      	adds	r3, #7
 8004008:	461a      	mov	r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 8004012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004014:	2b00      	cmp	r3, #0
 8004016:	d116      	bne.n	8004046 <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8004018:	7c7b      	ldrb	r3, [r7, #17]
 800401a:	2b11      	cmp	r3, #17
 800401c:	d007      	beq.n	800402e <jd_prepare+0x29a>
 800401e:	7c7b      	ldrb	r3, [r7, #17]
 8004020:	2b22      	cmp	r3, #34	; 0x22
 8004022:	d004      	beq.n	800402e <jd_prepare+0x29a>
 8004024:	7c7b      	ldrb	r3, [r7, #17]
 8004026:	2b21      	cmp	r3, #33	; 0x21
 8004028:	d001      	beq.n	800402e <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 800402a:	2308      	movs	r3, #8
 800402c:	e163      	b.n	80042f6 <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 800402e:	7c7b      	ldrb	r3, [r7, #17]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	739a      	strb	r2, [r3, #14]
 8004038:	7c7b      	ldrb	r3, [r7, #17]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	73da      	strb	r2, [r3, #15]
 8004044:	e004      	b.n	8004050 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 8004046:	7c7b      	ldrb	r3, [r7, #17]
 8004048:	2b11      	cmp	r3, #17
 800404a:	d001      	beq.n	8004050 <jd_prepare+0x2bc>
 800404c:	2308      	movs	r3, #8
 800404e:	e152      	b.n	80042f6 <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8004050:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	3308      	adds	r3, #8
 800405a:	461a      	mov	r2, r3
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 8004064:	7c7b      	ldrb	r3, [r7, #17]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d901      	bls.n	800406e <jd_prepare+0x2da>
 800406a:	2308      	movs	r3, #8
 800406c:	e143      	b.n	80042f6 <jd_prepare+0x562>
				jd->qtid[i] = b;
 800406e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	7c7a      	ldrb	r2, [r7, #17]
 8004076:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 8004078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800407a:	3301      	adds	r3, #1
 800407c:	847b      	strh	r3, [r7, #34]	; 0x22
 800407e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004080:	2b02      	cmp	r3, #2
 8004082:	d9bc      	bls.n	8003ffe <jd_prepare+0x26a>
			}
			break;
 8004084:	e136      	b.n	80042f4 <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8004086:	8bfb      	ldrh	r3, [r7, #30]
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	d901      	bls.n	8004092 <jd_prepare+0x2fe>
 800408e:	2304      	movs	r3, #4
 8004090:	e131      	b.n	80042f6 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	8bfa      	ldrh	r2, [r7, #30]
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	4798      	blx	r3
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	8bfb      	ldrh	r3, [r7, #30]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d001      	beq.n	80040ac <jd_prepare+0x318>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e124      	b.n	80042f6 <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3301      	adds	r3, #1
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b21b      	sxth	r3, r3
 80040bc:	4313      	orrs	r3, r2
 80040be:	b21b      	sxth	r3, r3
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	835a      	strh	r2, [r3, #26]
			break;
 80040c6:	e115      	b.n	80042f4 <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80040c8:	8bfb      	ldrh	r3, [r7, #30]
 80040ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ce:	d901      	bls.n	80040d4 <jd_prepare+0x340>
 80040d0:	2304      	movs	r3, #4
 80040d2:	e110      	b.n	80042f6 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	8bfa      	ldrh	r2, [r7, #30]
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	4798      	blx	r3
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	8bfb      	ldrh	r3, [r7, #30]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d001      	beq.n	80040ee <jd_prepare+0x35a>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e103      	b.n	80042f6 <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 80040ee:	8bfb      	ldrh	r3, [r7, #30]
 80040f0:	461a      	mov	r2, r3
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7fe fd9b 	bl	8002c30 <create_huffman_tbl>
 80040fa:	4603      	mov	r3, r0
 80040fc:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 80040fe:	7d7b      	ldrb	r3, [r7, #21]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80f4 	beq.w	80042ee <jd_prepare+0x55a>
 8004106:	7d7b      	ldrb	r3, [r7, #21]
 8004108:	e0f5      	b.n	80042f6 <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 800410a:	8bfb      	ldrh	r3, [r7, #30]
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d901      	bls.n	8004116 <jd_prepare+0x382>
 8004112:	2304      	movs	r3, #4
 8004114:	e0ef      	b.n	80042f6 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	8bfa      	ldrh	r2, [r7, #30]
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	4798      	blx	r3
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	8bfb      	ldrh	r3, [r7, #30]
 8004128:	4293      	cmp	r3, r2
 800412a:	d001      	beq.n	8004130 <jd_prepare+0x39c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0e2      	b.n	80042f6 <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8004130:	8bfb      	ldrh	r3, [r7, #30]
 8004132:	461a      	mov	r2, r3
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7fe fd1e 	bl	8002b78 <create_qt_tbl>
 800413c:	4603      	mov	r3, r0
 800413e:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8004140:	7d7b      	ldrb	r3, [r7, #21]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80d5 	beq.w	80042f2 <jd_prepare+0x55e>
 8004148:	7d7b      	ldrb	r3, [r7, #21]
 800414a:	e0d4      	b.n	80042f6 <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 800414c:	8bfb      	ldrh	r3, [r7, #30]
 800414e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004152:	d901      	bls.n	8004158 <jd_prepare+0x3c4>
 8004154:	2304      	movs	r3, #4
 8004156:	e0ce      	b.n	80042f6 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	8bfa      	ldrh	r2, [r7, #30]
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	4798      	blx	r3
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	8bfb      	ldrh	r3, [r7, #30]
 800416a:	4293      	cmp	r3, r2
 800416c:	d001      	beq.n	8004172 <jd_prepare+0x3de>
 800416e:	2302      	movs	r3, #2
 8004170:	e0c1      	b.n	80042f6 <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8b9b      	ldrh	r3, [r3, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <jd_prepare+0x3ee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8bdb      	ldrh	r3, [r3, #30]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <jd_prepare+0x3f2>
 8004182:	2306      	movs	r3, #6
 8004184:	e0b7      	b.n	80042f6 <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d001      	beq.n	8004192 <jd_prepare+0x3fe>
 800418e:	2308      	movs	r3, #8
 8004190:	e0b1      	b.n	80042f6 <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 8004192:	2300      	movs	r3, #0
 8004194:	847b      	strh	r3, [r7, #34]	; 0x22
 8004196:	e036      	b.n	8004206 <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8004198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	461a      	mov	r2, r3
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 80041a8:	7c7b      	ldrb	r3, [r7, #17]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <jd_prepare+0x424>
 80041ae:	7c7b      	ldrb	r3, [r7, #17]
 80041b0:	2b11      	cmp	r3, #17
 80041b2:	d001      	beq.n	80041b8 <jd_prepare+0x424>
 80041b4:	2308      	movs	r3, #8
 80041b6:	e09e      	b.n	80042f6 <jd_prepare+0x562>
				b = i ? 1 : 0;
 80041b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bf14      	ite	ne
 80041be:	2301      	movne	r3, #1
 80041c0:	2300      	moveq	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 80041c6:	7c7a      	ldrb	r2, [r7, #17]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3204      	adds	r2, #4
 80041cc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <jd_prepare+0x44e>
 80041d4:	7c7b      	ldrb	r3, [r7, #17]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 80041e2:	2306      	movs	r3, #6
 80041e4:	e087      	b.n	80042f6 <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 80041e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	7c1b      	ldrb	r3, [r3, #16]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3214      	adds	r2, #20
 80041f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 80041fc:	2306      	movs	r3, #6
 80041fe:	e07a      	b.n	80042f6 <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8004200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004202:	3301      	adds	r3, #1
 8004204:	847b      	strh	r3, [r7, #34]	; 0x22
 8004206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004208:	2b02      	cmp	r3, #2
 800420a:	d9c5      	bls.n	8004198 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	7bdb      	ldrb	r3, [r3, #15]
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	7b9b      	ldrb	r3, [r3, #14]
 8004216:	b29b      	uxth	r3, r3
 8004218:	fb12 f303 	smulbb	r3, r2, r3
 800421c:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 800421e:	8a7b      	ldrh	r3, [r7, #18]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <jd_prepare+0x494>
 8004224:	2306      	movs	r3, #6
 8004226:	e066      	b.n	80042f6 <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8004228:	8a7b      	ldrh	r3, [r7, #18]
 800422a:	01db      	lsls	r3, r3, #7
 800422c:	b29b      	uxth	r3, r3
 800422e:	3340      	adds	r3, #64	; 0x40
 8004230:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 8004232:	8bfb      	ldrh	r3, [r7, #30]
 8004234:	2bff      	cmp	r3, #255	; 0xff
 8004236:	d802      	bhi.n	800423e <jd_prepare+0x4aa>
 8004238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423c:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 800423e:	8bfb      	ldrh	r3, [r7, #30]
 8004240:	4619      	mov	r1, r3
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7fe fc6b 	bl	8002b1e <alloc_pool>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <jd_prepare+0x4c6>
 8004256:	2303      	movs	r3, #3
 8004258:	e04d      	b.n	80042f6 <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 800425a:	8a7b      	ldrh	r3, [r7, #18]
 800425c:	3302      	adds	r3, #2
 800425e:	b29b      	uxth	r3, r3
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	b29b      	uxth	r3, r3
 8004264:	4619      	mov	r1, r3
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7fe fc59 	bl	8002b1e <alloc_pool>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <jd_prepare+0x4ea>
 800427a:	2303      	movs	r3, #3
 800427c:	e03b      	b.n	80042f6 <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	4411      	add	r1, r2
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	b292      	uxth	r2, r2
 80042ac:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80042b0:	b292      	uxth	r2, r2
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	4798      	blx	r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	3b01      	subs	r3, #1
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 80042ca:	2300      	movs	r3, #0
 80042cc:	e013      	b.n	80042f6 <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 80042ce:	2308      	movs	r3, #8
 80042d0:	e011      	b.n	80042f6 <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	8bfa      	ldrh	r2, [r7, #30]
 80042d8:	2100      	movs	r1, #0
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	4798      	blx	r3
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	8bfb      	ldrh	r3, [r7, #30]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f43f add7 	beq.w	8003e98 <jd_prepare+0x104>
				return JDR_INP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	e003      	b.n	80042f6 <jd_prepare+0x562>
			break;
 80042ee:	bf00      	nop
 80042f0:	e5d2      	b.n	8003e98 <jd_prepare+0x104>
			break;
 80042f2:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 80042f4:	e5d0      	b.n	8003e98 <jd_prepare+0x104>
			}
		}
	}
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop

08004300 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d901      	bls.n	8004318 <jd_decomp+0x18>
 8004314:	2305      	movs	r3, #5
 8004316:	e06a      	b.n	80043ee <jd_decomp+0xee>
	jd->scale = scale;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	79fa      	ldrb	r2, [r7, #7]
 800431c:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	7b9b      	ldrb	r3, [r3, #14]
 8004322:	b29b      	uxth	r3, r3
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	82bb      	strh	r3, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	7bdb      	ldrb	r3, [r3, #15]
 800432c:	b29b      	uxth	r3, r3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	829a      	strh	r2, [r3, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	82da      	strh	r2, [r3, #22]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	833b      	strh	r3, [r7, #24]
 8004350:	8b3b      	ldrh	r3, [r7, #24]
 8004352:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8004358:	2300      	movs	r3, #0
 800435a:	83bb      	strh	r3, [r7, #28]
 800435c:	e041      	b.n	80043e2 <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 800435e:	2300      	movs	r3, #0
 8004360:	83fb      	strh	r3, [r7, #30]
 8004362:	e035      	b.n	80043d0 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8b5b      	ldrh	r3, [r3, #26]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <jd_decomp+0x9a>
 800436c:	8b7b      	ldrh	r3, [r7, #26]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	837a      	strh	r2, [r7, #26]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	8b52      	ldrh	r2, [r2, #26]
 8004376:	4293      	cmp	r3, r2
 8004378:	d10f      	bne.n	800439a <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 800437a:	8b3b      	ldrh	r3, [r7, #24]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	833a      	strh	r2, [r7, #24]
 8004380:	4619      	mov	r1, r3
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff fc9e 	bl	8003cc4 <restart>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <jd_decomp+0x96>
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	e02b      	b.n	80043ee <jd_decomp+0xee>
				rst = 1;
 8004396:	2301      	movs	r3, #1
 8004398:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff f802 	bl	80033a4 <mcu_load>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <jd_decomp+0xae>
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	e01f      	b.n	80043ee <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 80043ae:	8bbb      	ldrh	r3, [r7, #28]
 80043b0:	8bfa      	ldrh	r2, [r7, #30]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff f937 	bl	8003628 <mcu_output>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <jd_decomp+0xc8>
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	e012      	b.n	80043ee <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 80043c8:	8bfa      	ldrh	r2, [r7, #30]
 80043ca:	8abb      	ldrh	r3, [r7, #20]
 80043cc:	4413      	add	r3, r2
 80043ce:	83fb      	strh	r3, [r7, #30]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8b9b      	ldrh	r3, [r3, #28]
 80043d4:	8bfa      	ldrh	r2, [r7, #30]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3c4      	bcc.n	8004364 <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 80043da:	8bba      	ldrh	r2, [r7, #28]
 80043dc:	8a7b      	ldrh	r3, [r7, #18]
 80043de:	4413      	add	r3, r2
 80043e0:	83bb      	strh	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8bdb      	ldrh	r3, [r3, #30]
 80043e6:	8bba      	ldrh	r2, [r7, #28]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3b8      	bcc.n	800435e <jd_decomp+0x5e>
		}
	}

	return rc;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fa:	2003      	movs	r0, #3
 80043fc:	f000 f94c 	bl	8004698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004400:	2000      	movs	r0, #0
 8004402:	f000 f805 	bl	8004410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004406:	f7fd fc81 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_InitTick+0x54>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_InitTick+0x58>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	4619      	mov	r1, r3
 8004422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004426:	fbb3 f3f1 	udiv	r3, r3, r1
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f967 	bl	8004702 <HAL_SYSTICK_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e00e      	b.n	800445c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d80a      	bhi.n	800445a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004444:	2200      	movs	r2, #0
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	f000 f92f 	bl	80046ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004450:	4a06      	ldr	r2, [pc, #24]	; (800446c <HAL_InitTick+0x5c>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	200004c0 	.word	0x200004c0
 8004468:	200004c8 	.word	0x200004c8
 800446c:	200004c4 	.word	0x200004c4

08004470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_IncTick+0x20>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_IncTick+0x24>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4413      	add	r3, r2
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_IncTick+0x24>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	200004c8 	.word	0x200004c8
 8004494:	200019f8 	.word	0x200019f8

08004498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return uwTick;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_GetTick+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	200019f8 	.word	0x200019f8

080044b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b8:	f7ff ffee 	bl	8004498 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d005      	beq.n	80044d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_Delay+0x44>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044d6:	bf00      	nop
 80044d8:	f7ff ffde 	bl	8004498 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d8f7      	bhi.n	80044d8 <HAL_Delay+0x28>
  {
  }
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200004c8 	.word	0x200004c8

080044f8 <__NVIC_SetPriorityGrouping>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <__NVIC_SetPriorityGrouping+0x40>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 8004522:	4313      	orrs	r3, r2
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x40>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	05fa0000 	.word	0x05fa0000

08004540 <__NVIC_GetPriorityGrouping>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <__NVIC_GetPriorityGrouping+0x18>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 0307 	and.w	r3, r3, #7
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_EnableIRQ>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db0b      	blt.n	8004586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	4907      	ldr	r1, [pc, #28]	; (8004594 <__NVIC_EnableIRQ+0x38>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2001      	movs	r0, #1
 800457e:	fa00 f202 	lsl.w	r2, r0, r2
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_SetPriority>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db0a      	blt.n	80045c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	490c      	ldr	r1, [pc, #48]	; (80045e4 <__NVIC_SetPriority+0x4c>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	440b      	add	r3, r1
 80045bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045c0:	e00a      	b.n	80045d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4908      	ldr	r1, [pc, #32]	; (80045e8 <__NVIC_SetPriority+0x50>)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3b04      	subs	r3, #4
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	440b      	add	r3, r1
 80045d6:	761a      	strb	r2, [r3, #24]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <NVIC_EncodePriority>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf28      	it	cs
 800460a:	2304      	movcs	r3, #4
 800460c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3304      	adds	r3, #4
 8004612:	2b06      	cmp	r3, #6
 8004614:	d902      	bls.n	800461c <NVIC_EncodePriority+0x30>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3b03      	subs	r3, #3
 800461a:	e000      	b.n	800461e <NVIC_EncodePriority+0x32>
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	401a      	ands	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004634:	f04f 31ff 	mov.w	r1, #4294967295
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	43d9      	mvns	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	4313      	orrs	r3, r2
}
 8004646:	4618      	mov	r0, r3
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3b01      	subs	r3, #1
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004664:	d301      	bcc.n	800466a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004666:	2301      	movs	r3, #1
 8004668:	e00f      	b.n	800468a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <SysTick_Config+0x40>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004672:	210f      	movs	r1, #15
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	f7ff ff8e 	bl	8004598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <SysTick_Config+0x40>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <SysTick_Config+0x40>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	e000e010 	.word	0xe000e010

08004698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ff29 	bl	80044f8 <__NVIC_SetPriorityGrouping>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	4603      	mov	r3, r0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c0:	f7ff ff3e 	bl	8004540 <__NVIC_GetPriorityGrouping>
 80046c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff ff8e 	bl	80045ec <NVIC_EncodePriority>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff5d 	bl	8004598 <__NVIC_SetPriority>
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff31 	bl	800455c <__NVIC_EnableIRQ>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ffa2 	bl	8004654 <SysTick_Config>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e054      	b.n	80047d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7f5b      	ldrb	r3, [r3, #29]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fb ffae 	bl	80006a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a22      	ldr	r2, [pc, #136]	; (80047e0 <HAL_CRC_Init+0xc4>)
 8004758:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0218 	bic.w	r2, r2, #24
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	e00c      	b.n	8004786 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	461a      	mov	r2, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f834 	bl	80047e4 <HAL_CRCEx_Polynomial_Set>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e028      	b.n	80047d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	795b      	ldrb	r3, [r3, #5]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	611a      	str	r2, [r3, #16]
 8004798:	e004      	b.n	80047a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6912      	ldr	r2, [r2, #16]
 80047a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	04c11db7 	.word	0x04c11db7

080047e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047f4:	231f      	movs	r3, #31
 80047f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047f8:	bf00      	nop
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1e5a      	subs	r2, r3, #1
 80047fe:	613a      	str	r2, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_CRCEx_Polynomial_Set+0x34>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b18      	cmp	r3, #24
 800481c:	d846      	bhi.n	80048ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	080048b3 	.word	0x080048b3
 8004828:	080048ad 	.word	0x080048ad
 800482c:	080048ad 	.word	0x080048ad
 8004830:	080048ad 	.word	0x080048ad
 8004834:	080048ad 	.word	0x080048ad
 8004838:	080048ad 	.word	0x080048ad
 800483c:	080048ad 	.word	0x080048ad
 8004840:	080048ad 	.word	0x080048ad
 8004844:	080048a1 	.word	0x080048a1
 8004848:	080048ad 	.word	0x080048ad
 800484c:	080048ad 	.word	0x080048ad
 8004850:	080048ad 	.word	0x080048ad
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080048ad 	.word	0x080048ad
 8004860:	080048ad 	.word	0x080048ad
 8004864:	08004895 	.word	0x08004895
 8004868:	080048ad 	.word	0x080048ad
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048ad 	.word	0x080048ad
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048ad 	.word	0x080048ad
 8004880:	080048ad 	.word	0x080048ad
 8004884:	08004889 	.word	0x08004889
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d913      	bls.n	80048b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004892:	e010      	b.n	80048b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d90f      	bls.n	80048ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800489e:	e00c      	b.n	80048ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d90b      	bls.n	80048be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048aa:	e008      	b.n	80048be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	e006      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048be:	bf00      	nop
  }
  if (status == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 0118 	bic.w	r1, r3, #24
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7ff fdcc 	bl	8004498 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e099      	b.n	8004a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800492c:	e00f      	b.n	800494e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800492e:	f7ff fdb3 	bl	8004498 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b05      	cmp	r3, #5
 800493a:	d908      	bls.n	800494e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2203      	movs	r2, #3
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e078      	b.n	8004a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e8      	bne.n	800492e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_DMA_Init+0x158>)
 8004968:	4013      	ands	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d107      	bne.n	80049b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	4313      	orrs	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d117      	bne.n	8004a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00e      	beq.n	8004a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa7b 	bl	8004ef0 <DMA_CheckFifoParam>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e016      	b.n	8004a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa32 	bl	8004e84 <DMA_CalcBaseAndBitshift>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	223f      	movs	r2, #63	; 0x3f
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	e010803f 	.word	0xe010803f

08004a4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a5a:	f7ff fd1d 	bl	8004498 <HAL_GetTick>
 8004a5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d008      	beq.n	8004a7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e052      	b.n	8004b24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0216 	bic.w	r2, r2, #22
 8004a8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <HAL_DMA_Abort+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0208 	bic.w	r2, r2, #8
 8004abc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ace:	e013      	b.n	8004af8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad0:	f7ff fce2 	bl	8004498 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d90c      	bls.n	8004af8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e015      	b.n	8004b24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e4      	bne.n	8004ad0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0a:	223f      	movs	r2, #63	; 0x3f
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d004      	beq.n	8004b4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e00c      	b.n	8004b64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004b7c:	4b8e      	ldr	r3, [pc, #568]	; (8004db8 <HAL_DMA_IRQHandler+0x248>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a8e      	ldr	r2, [pc, #568]	; (8004dbc <HAL_DMA_IRQHandler+0x24c>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a9b      	lsrs	r3, r3, #10
 8004b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01a      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	2208      	movs	r2, #8
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2201      	movs	r2, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	f043 0202 	orr.w	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2204      	movs	r2, #4
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d012      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	2204      	movs	r2, #4
 8004c36:	409a      	lsls	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d043      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03c      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d024      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
 8004c9e:	e01f      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
 8004cb0:	e016      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0208 	bic.w	r2, r2, #8
 8004cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 808f 	beq.w	8004e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8087 	beq.w	8004e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	2220      	movs	r2, #32
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d136      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0216 	bic.w	r2, r2, #22
 8004d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x1da>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0208 	bic.w	r2, r2, #8
 8004d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5e:	223f      	movs	r2, #63	; 0x3f
 8004d60:	409a      	lsls	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d07e      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
        }
        return;
 8004d86:	e079      	b.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01d      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d031      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e02c      	b.n	8004e10 <HAL_DMA_IRQHandler+0x2a0>
 8004db6:	bf00      	nop
 8004db8:	200004c0 	.word	0x200004c0
 8004dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d023      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e01e      	b.n	8004e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0210 	bic.w	r2, r2, #16
 8004dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d032      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2205      	movs	r2, #5
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d307      	bcc.n	8004e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f2      	bne.n	8004e3c <HAL_DMA_IRQHandler+0x2cc>
 8004e56:	e000      	b.n	8004e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 8004e7a:	e000      	b.n	8004e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e7c:	bf00      	nop
    }
  }
}
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3b10      	subs	r3, #16
 8004e94:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <DMA_CalcBaseAndBitshift+0x60>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d908      	bls.n	8004ec4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <DMA_CalcBaseAndBitshift+0x68>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	1d1a      	adds	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ec2:	e006      	b.n	8004ed2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <DMA_CalcBaseAndBitshift+0x68>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	aaaaaaab 	.word	0xaaaaaaab
 8004ee8:	08018d2c 	.word	0x08018d2c
 8004eec:	fffffc00 	.word	0xfffffc00

08004ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11f      	bne.n	8004f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d856      	bhi.n	8004fbe <DMA_CheckFifoParam+0xce>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <DMA_CheckFifoParam+0x28>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f29 	.word	0x08004f29
 8004f1c:	08004f3b 	.word	0x08004f3b
 8004f20:	08004f29 	.word	0x08004f29
 8004f24:	08004fbf 	.word	0x08004fbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d046      	beq.n	8004fc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e043      	b.n	8004fc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f42:	d140      	bne.n	8004fc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f48:	e03d      	b.n	8004fc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d121      	bne.n	8004f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d837      	bhi.n	8004fca <DMA_CheckFifoParam+0xda>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <DMA_CheckFifoParam+0x70>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f77 	.word	0x08004f77
 8004f68:	08004f71 	.word	0x08004f71
 8004f6c:	08004f89 	.word	0x08004f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e030      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d025      	beq.n	8004fce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f86:	e022      	b.n	8004fce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f90:	d11f      	bne.n	8004fd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f96:	e01c      	b.n	8004fd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d903      	bls.n	8004fa6 <DMA_CheckFifoParam+0xb6>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d003      	beq.n	8004fac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fa4:	e018      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8004faa:	e015      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00e      	beq.n	8004fd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e00b      	b.n	8004fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e00a      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e008      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e006      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e004      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop

08004fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e175      	b.n	80052f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005008:	2201      	movs	r2, #1
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4013      	ands	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	429a      	cmp	r2, r3
 8005022:	f040 8164 	bne.w	80052ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b01      	cmp	r3, #1
 8005030:	d005      	beq.n	800503e <HAL_GPIO_Init+0x56>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d130      	bne.n	80050a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005074:	2201      	movs	r2, #1
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 0201 	and.w	r2, r3, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d017      	beq.n	80050dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	2203      	movs	r2, #3
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d123      	bne.n	8005130 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	08da      	lsrs	r2, r3, #3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3208      	adds	r2, #8
 80050f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	220f      	movs	r2, #15
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	08da      	lsrs	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3208      	adds	r2, #8
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0203 	and.w	r2, r3, #3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80be 	beq.w	80052ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005172:	4b66      	ldr	r3, [pc, #408]	; (800530c <HAL_GPIO_Init+0x324>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a65      	ldr	r2, [pc, #404]	; (800530c <HAL_GPIO_Init+0x324>)
 8005178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b63      	ldr	r3, [pc, #396]	; (800530c <HAL_GPIO_Init+0x324>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800518a:	4a61      	ldr	r2, [pc, #388]	; (8005310 <HAL_GPIO_Init+0x328>)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	3302      	adds	r3, #2
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	220f      	movs	r2, #15
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a58      	ldr	r2, [pc, #352]	; (8005314 <HAL_GPIO_Init+0x32c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d037      	beq.n	8005226 <HAL_GPIO_Init+0x23e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_GPIO_Init+0x330>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d031      	beq.n	8005222 <HAL_GPIO_Init+0x23a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a56      	ldr	r2, [pc, #344]	; (800531c <HAL_GPIO_Init+0x334>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <HAL_GPIO_Init+0x236>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a55      	ldr	r2, [pc, #340]	; (8005320 <HAL_GPIO_Init+0x338>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d025      	beq.n	800521a <HAL_GPIO_Init+0x232>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a54      	ldr	r2, [pc, #336]	; (8005324 <HAL_GPIO_Init+0x33c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d01f      	beq.n	8005216 <HAL_GPIO_Init+0x22e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a53      	ldr	r2, [pc, #332]	; (8005328 <HAL_GPIO_Init+0x340>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d019      	beq.n	8005212 <HAL_GPIO_Init+0x22a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a52      	ldr	r2, [pc, #328]	; (800532c <HAL_GPIO_Init+0x344>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_GPIO_Init+0x226>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a51      	ldr	r2, [pc, #324]	; (8005330 <HAL_GPIO_Init+0x348>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00d      	beq.n	800520a <HAL_GPIO_Init+0x222>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a50      	ldr	r2, [pc, #320]	; (8005334 <HAL_GPIO_Init+0x34c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <HAL_GPIO_Init+0x21e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a4f      	ldr	r2, [pc, #316]	; (8005338 <HAL_GPIO_Init+0x350>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_GPIO_Init+0x21a>
 80051fe:	2309      	movs	r3, #9
 8005200:	e012      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005202:	230a      	movs	r3, #10
 8005204:	e010      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005206:	2308      	movs	r3, #8
 8005208:	e00e      	b.n	8005228 <HAL_GPIO_Init+0x240>
 800520a:	2307      	movs	r3, #7
 800520c:	e00c      	b.n	8005228 <HAL_GPIO_Init+0x240>
 800520e:	2306      	movs	r3, #6
 8005210:	e00a      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005212:	2305      	movs	r3, #5
 8005214:	e008      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005216:	2304      	movs	r3, #4
 8005218:	e006      	b.n	8005228 <HAL_GPIO_Init+0x240>
 800521a:	2303      	movs	r3, #3
 800521c:	e004      	b.n	8005228 <HAL_GPIO_Init+0x240>
 800521e:	2302      	movs	r3, #2
 8005220:	e002      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_GPIO_Init+0x240>
 8005226:	2300      	movs	r3, #0
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	f002 0203 	and.w	r2, r2, #3
 800522e:	0092      	lsls	r2, r2, #2
 8005230:	4093      	lsls	r3, r2
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005238:	4935      	ldr	r1, [pc, #212]	; (8005310 <HAL_GPIO_Init+0x328>)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	3302      	adds	r3, #2
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <HAL_GPIO_Init+0x354>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800526a:	4a34      	ldr	r2, [pc, #208]	; (800533c <HAL_GPIO_Init+0x354>)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <HAL_GPIO_Init+0x354>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005294:	4a29      	ldr	r2, [pc, #164]	; (800533c <HAL_GPIO_Init+0x354>)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_GPIO_Init+0x354>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_GPIO_Init+0x354>)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <HAL_GPIO_Init+0x354>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_GPIO_Init+0x354>)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	f67f ae86 	bls.w	8005008 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40013800 	.word	0x40013800
 8005314:	40020000 	.word	0x40020000
 8005318:	40020400 	.word	0x40020400
 800531c:	40020800 	.word	0x40020800
 8005320:	40020c00 	.word	0x40020c00
 8005324:	40021000 	.word	0x40021000
 8005328:	40021400 	.word	0x40021400
 800532c:	40021800 	.word	0x40021800
 8005330:	40021c00 	.word	0x40021c00
 8005334:	40022000 	.word	0x40022000
 8005338:	40022400 	.word	0x40022400
 800533c:	40013c00 	.word	0x40013c00

08005340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	807b      	strh	r3, [r7, #2]
 800534c:	4613      	mov	r3, r2
 800534e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005350:	787b      	ldrb	r3, [r7, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800535c:	e003      	b.n	8005366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800535e:	887b      	ldrh	r3, [r7, #2]
 8005360:	041a      	lsls	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800537c:	f7ff f88c 	bl	8004498 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e067      	b.n	800545c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fc fab7 	bl	8001914 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80053a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f85e 	bl	800546c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	3b01      	subs	r3, #1
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2120      	movs	r1, #32
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f856 	bl	8005488 <QSPI_WaitFlagStateUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80053e0:	7afb      	ldrb	r3, [r7, #11]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d135      	bne.n	8005452 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <HAL_QSPI_Init+0xf0>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6852      	ldr	r2, [r2, #4]
 80053f4:	0611      	lsls	r1, r2, #24
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68d2      	ldr	r2, [r2, #12]
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	69d2      	ldr	r2, [r2, #28]
 8005400:	4311      	orrs	r1, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6a12      	ldr	r2, [r2, #32]
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	430b      	orrs	r3, r1
 800540e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_QSPI_Init+0xf4>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6912      	ldr	r2, [r2, #16]
 800541e:	0411      	lsls	r1, r2, #16
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6952      	ldr	r2, [r2, #20]
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6992      	ldr	r2, [r2, #24]
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	430b      	orrs	r3, r1
 8005432:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800545a:	7afb      	ldrb	r3, [r7, #11]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	00ffff2f 	.word	0x00ffff2f
 8005468:	ffe0f8fe 	.word	0xffe0f8fe

0800546c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005498:	e01a      	b.n	80054d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d016      	beq.n	80054d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fe fff9 	bl	8004498 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f043 0201 	orr.w	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e00e      	b.n	80054ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1d6      	bne.n	800549a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e29b      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8087 	beq.w	800562a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800551c:	4b96      	ldr	r3, [pc, #600]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b04      	cmp	r3, #4
 8005526:	d00c      	beq.n	8005542 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005528:	4b93      	ldr	r3, [pc, #588]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d112      	bne.n	800555a <HAL_RCC_OscConfig+0x62>
 8005534:	4b90      	ldr	r3, [pc, #576]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005540:	d10b      	bne.n	800555a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005542:	4b8d      	ldr	r3, [pc, #564]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d06c      	beq.n	8005628 <HAL_RCC_OscConfig+0x130>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d168      	bne.n	8005628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e275      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x7a>
 8005564:	4b84      	ldr	r3, [pc, #528]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a83      	ldr	r2, [pc, #524]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e02e      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x9c>
 800557a:	4b7f      	ldr	r3, [pc, #508]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a7e      	ldr	r2, [pc, #504]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b7c      	ldr	r3, [pc, #496]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a7b      	ldr	r2, [pc, #492]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800558c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0xc0>
 800559e:	4b76      	ldr	r3, [pc, #472]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a75      	ldr	r2, [pc, #468]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b73      	ldr	r3, [pc, #460]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a72      	ldr	r2, [pc, #456]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 80055b8:	4b6f      	ldr	r3, [pc, #444]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a6e      	ldr	r2, [pc, #440]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b6c      	ldr	r3, [pc, #432]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a6b      	ldr	r2, [pc, #428]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fe ff5e 	bl	8004498 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fe ff5a 	bl	8004498 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e229      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0xe8>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fe ff4a 	bl	8004498 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005608:	f7fe ff46 	bl	8004498 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e215      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561a:	4b57      	ldr	r3, [pc, #348]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x110>
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d069      	beq.n	800570a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005636:	4b50      	ldr	r3, [pc, #320]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005642:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b08      	cmp	r3, #8
 800564c:	d11c      	bne.n	8005688 <HAL_RCC_OscConfig+0x190>
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d116      	bne.n	8005688 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_RCC_OscConfig+0x17a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e1e9      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005672:	4b41      	ldr	r3, [pc, #260]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	493d      	ldr	r1, [pc, #244]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005686:	e040      	b.n	800570a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d023      	beq.n	80056d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005690:	4b39      	ldr	r3, [pc, #228]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a38      	ldr	r2, [pc, #224]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fe fefc 	bl	8004498 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a4:	f7fe fef8 	bl	8004498 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1c7      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b6:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c2:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4929      	ldr	r1, [pc, #164]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
 80056d6:	e018      	b.n	800570a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a26      	ldr	r2, [pc, #152]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fe fed8 	bl	8004498 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ec:	f7fe fed4 	bl	8004498 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1a3      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d038      	beq.n	8005788 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fe feb5 	bl	8004498 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005732:	f7fe feb1 	bl	8004498 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e180      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x23a>
 8005750:	e01a      	b.n	8005788 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575e:	f7fe fe9b 	bl	8004498 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005766:	f7fe fe97 	bl	8004498 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d903      	bls.n	800577c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e166      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
 8005778:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ee      	bne.n	8005766 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a4 	beq.w	80058de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005796:	4b8c      	ldr	r3, [pc, #560]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a88      	ldr	r2, [pc, #544]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
 80057ae:	4b86      	ldr	r3, [pc, #536]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057be:	4b83      	ldr	r3, [pc, #524]	; (80059cc <HAL_RCC_OscConfig+0x4d4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d118      	bne.n	80057fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057ca:	4b80      	ldr	r3, [pc, #512]	; (80059cc <HAL_RCC_OscConfig+0x4d4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a7f      	ldr	r2, [pc, #508]	; (80059cc <HAL_RCC_OscConfig+0x4d4>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d6:	f7fe fe5f 	bl	8004498 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057de:	f7fe fe5b 	bl	8004498 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	; 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e12a      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057f0:	4b76      	ldr	r3, [pc, #472]	; (80059cc <HAL_RCC_OscConfig+0x4d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d106      	bne.n	8005812 <HAL_RCC_OscConfig+0x31a>
 8005804:	4b70      	ldr	r3, [pc, #448]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	4a6f      	ldr	r2, [pc, #444]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6713      	str	r3, [r2, #112]	; 0x70
 8005810:	e02d      	b.n	800586e <HAL_RCC_OscConfig+0x376>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10c      	bne.n	8005834 <HAL_RCC_OscConfig+0x33c>
 800581a:	4b6b      	ldr	r3, [pc, #428]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a6a      	ldr	r2, [pc, #424]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
 8005826:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
 8005832:	e01c      	b.n	800586e <HAL_RCC_OscConfig+0x376>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b05      	cmp	r3, #5
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_OscConfig+0x35e>
 800583c:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4a61      	ldr	r2, [pc, #388]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	6713      	str	r3, [r2, #112]	; 0x70
 8005848:	4b5f      	ldr	r3, [pc, #380]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	4a5e      	ldr	r2, [pc, #376]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6713      	str	r3, [r2, #112]	; 0x70
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0x376>
 8005856:	4b5c      	ldr	r3, [pc, #368]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a5b      	ldr	r2, [pc, #364]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
 8005862:	4b59      	ldr	r3, [pc, #356]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a58      	ldr	r2, [pc, #352]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d015      	beq.n	80058a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fe fe0f 	bl	8004498 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587e:	f7fe fe0b 	bl	8004498 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	; 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e0d8      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005894:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ee      	beq.n	800587e <HAL_RCC_OscConfig+0x386>
 80058a0:	e014      	b.n	80058cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a2:	f7fe fdf9 	bl	8004498 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a8:	e00a      	b.n	80058c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058aa:	f7fe fdf5 	bl	8004498 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e0c2      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c0:	4b41      	ldr	r3, [pc, #260]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1ee      	bne.n	80058aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a3c      	ldr	r2, [pc, #240]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80ae 	beq.w	8005a44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e8:	4b37      	ldr	r3, [pc, #220]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d06d      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d14b      	bne.n	8005994 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a31      	ldr	r2, [pc, #196]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fe fdc6 	bl	8004498 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005910:	f7fe fdc2 	bl	8004498 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e091      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	019b      	lsls	r3, r3, #6
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	3b01      	subs	r3, #1
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	071b      	lsls	r3, r3, #28
 800595a:	491b      	ldr	r1, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fe fd94 	bl	8004498 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fe fd90 	bl	8004498 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e05f      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <HAL_RCC_OscConfig+0x47c>
 8005992:	e057      	b.n	8005a44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a0b      	ldr	r2, [pc, #44]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 800599a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fe fd7a 	bl	8004498 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fe fd76 	bl	8004498 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e045      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <HAL_RCC_OscConfig+0x4d0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x4b0>
 80059c6:	e03d      	b.n	8005a44 <HAL_RCC_OscConfig+0x54c>
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059d0:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <HAL_RCC_OscConfig+0x558>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d030      	beq.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d129      	bne.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d122      	bne.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a00:	4013      	ands	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d119      	bne.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d10f      	bne.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800

08005a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0d0      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b6a      	ldr	r3, [pc, #424]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d910      	bls.n	8005a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b67      	ldr	r3, [pc, #412]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020f 	bic.w	r2, r3, #15
 8005a82:	4965      	ldr	r1, [pc, #404]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b63      	ldr	r3, [pc, #396]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0b8      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d020      	beq.n	8005aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ab4:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4a58      	ldr	r2, [pc, #352]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005acc:	4b53      	ldr	r3, [pc, #332]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4a52      	ldr	r2, [pc, #328]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad8:	4b50      	ldr	r3, [pc, #320]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	494d      	ldr	r1, [pc, #308]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d040      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d115      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e07f      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b16:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e073      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e06b      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b36:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4936      	ldr	r1, [pc, #216]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b48:	f7fe fca6 	bl	8004498 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fe fca2 	bl	8004498 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e053      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 020c 	and.w	r2, r3, #12
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d1eb      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d210      	bcs.n	8005ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 020f 	bic.w	r2, r3, #15
 8005b8e:	4922      	ldr	r1, [pc, #136]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e032      	b.n	8005c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4916      	ldr	r1, [pc, #88]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	490e      	ldr	r1, [pc, #56]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005be6:	f000 f821 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8005bea:	4602      	mov	r2, r0
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	490a      	ldr	r1, [pc, #40]	; (8005c20 <HAL_RCC_ClockConfig+0x1cc>)
 8005bf8:	5ccb      	ldrb	r3, [r1, r3]
 8005bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <HAL_RCC_ClockConfig+0x1d0>)
 8005c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_RCC_ClockConfig+0x1d4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fc02 	bl	8004410 <HAL_InitTick>

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40023c00 	.word	0x40023c00
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	08018854 	.word	0x08018854
 8005c24:	200004c0 	.word	0x200004c0
 8005c28:	200004c4 	.word	0x200004c4

08005c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b094      	sub	sp, #80	; 0x50
 8005c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44
 8005c38:	2300      	movs	r3, #0
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c44:	4b79      	ldr	r3, [pc, #484]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d00d      	beq.n	8005c6c <HAL_RCC_GetSysClockFreq+0x40>
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	f200 80e1 	bhi.w	8005e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x34>
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c5e:	e0db      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c60:	4b73      	ldr	r3, [pc, #460]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c64:	e0db      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c66:	4b73      	ldr	r3, [pc, #460]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c6a:	e0d8      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c6c:	4b6f      	ldr	r3, [pc, #444]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c76:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d063      	beq.n	8005d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c82:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	2200      	movs	r2, #0
 8005c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c94:	633b      	str	r3, [r7, #48]	; 0x30
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	0159      	lsls	r1, r3, #5
 8005cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb0:	0150      	lsls	r0, r2, #5
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	1a51      	subs	r1, r2, r1
 8005cba:	6139      	str	r1, [r7, #16]
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	018b      	lsls	r3, r1, #6
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cda:	4651      	mov	r1, sl
 8005cdc:	018a      	lsls	r2, r1, #6
 8005cde:	4651      	mov	r1, sl
 8005ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cfe:	4690      	mov	r8, r2
 8005d00:	4699      	mov	r9, r3
 8005d02:	4623      	mov	r3, r4
 8005d04:	eb18 0303 	adds.w	r3, r8, r3
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	eb49 0303 	adc.w	r3, r9, r3
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d1e:	4629      	mov	r1, r5
 8005d20:	024b      	lsls	r3, r1, #9
 8005d22:	4621      	mov	r1, r4
 8005d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d28:	4621      	mov	r1, r4
 8005d2a:	024a      	lsls	r2, r1, #9
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d32:	2200      	movs	r2, #0
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d3c:	f7fa fad8 	bl	80002f0 <__aeabi_uldivmod>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4613      	mov	r3, r2
 8005d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d48:	e058      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	099b      	lsrs	r3, r3, #6
 8005d50:	2200      	movs	r2, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	4611      	mov	r1, r2
 8005d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	f04f 0000 	mov.w	r0, #0
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	0159      	lsls	r1, r3, #5
 8005d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d76:	0150      	lsls	r0, r2, #5
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d82:	4649      	mov	r1, r9
 8005d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005da0:	eb63 050b 	sbc.w	r5, r3, fp
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	00eb      	lsls	r3, r5, #3
 8005dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db2:	00e2      	lsls	r2, r4, #3
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	603b      	str	r3, [r7, #0]
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	eb45 0303 	adc.w	r3, r5, r3
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	028b      	lsls	r3, r1, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ddc:	4621      	mov	r1, r4
 8005dde:	028a      	lsls	r2, r1, #10
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	2200      	movs	r2, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	61fa      	str	r2, [r7, #28]
 8005dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df0:	f7fa fa7e 	bl	80002f0 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	3301      	adds	r3, #1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e16:	e002      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3750      	adds	r7, #80	; 0x50
 8005e24:	46bd      	mov	sp, r7
 8005e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	007a1200 	.word	0x007a1200

08005e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	200004c0 	.word	0x200004c0

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a9b      	lsrs	r3, r3, #10
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4903      	ldr	r1, [pc, #12]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	08018864 	.word	0x08018864

08005e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e7c:	f7ff ffdc 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e80:	4602      	mov	r2, r0
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0b5b      	lsrs	r3, r3, #13
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	4903      	ldr	r1, [pc, #12]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	08018864 	.word	0x08018864

08005ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ec8:	4b69      	ldr	r3, [pc, #420]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a68      	ldr	r2, [pc, #416]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ece:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	4b66      	ldr	r3, [pc, #408]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	4964      	ldr	r1, [pc, #400]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005eea:	2301      	movs	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005efa:	4b5d      	ldr	r3, [pc, #372]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	4959      	ldr	r1, [pc, #356]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f18:	d101      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f26:	2301      	movs	r3, #1
 8005f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d017      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f36:	4b4e      	ldr	r3, [pc, #312]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	494a      	ldr	r1, [pc, #296]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 808b 	beq.w	800609a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f84:	4b3a      	ldr	r3, [pc, #232]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	4a39      	ldr	r2, [pc, #228]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f90:	4b37      	ldr	r3, [pc, #220]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f9c:	4b35      	ldr	r3, [pc, #212]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa8:	f7fe fa76 	bl	8004498 <HAL_GetTick>
 8005fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb0:	f7fe fa72 	bl	8004498 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e38f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d035      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d02e      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fec:	4b20      	ldr	r3, [pc, #128]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006014:	4b16      	ldr	r3, [pc, #88]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d114      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fe fa3a 	bl	8004498 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006026:	e00a      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006028:	f7fe fa36 	bl	8004498 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	f241 3288 	movw	r2, #5000	; 0x1388
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e351      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0ee      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006056:	d111      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006066:	400b      	ands	r3, r1
 8006068:	4901      	ldr	r1, [pc, #4]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
 800606e:	e00b      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006070:	40023800 	.word	0x40023800
 8006074:	40007000 	.word	0x40007000
 8006078:	0ffffcff 	.word	0x0ffffcff
 800607c:	4bac      	ldr	r3, [pc, #688]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4aab      	ldr	r2, [pc, #684]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006082:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006086:	6093      	str	r3, [r2, #8]
 8006088:	4ba9      	ldr	r3, [pc, #676]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800608a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006094:	49a6      	ldr	r1, [pc, #664]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006096:	4313      	orrs	r3, r2
 8006098:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d010      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060a6:	4ba2      	ldr	r3, [pc, #648]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ac:	4aa0      	ldr	r2, [pc, #640]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060b6:	4b9e      	ldr	r3, [pc, #632]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	499b      	ldr	r1, [pc, #620]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060d4:	4b96      	ldr	r3, [pc, #600]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e2:	4993      	ldr	r1, [pc, #588]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060f6:	4b8e      	ldr	r3, [pc, #568]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006104:	498a      	ldr	r1, [pc, #552]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006118:	4b85      	ldr	r3, [pc, #532]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006126:	4982      	ldr	r1, [pc, #520]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800613a:	4b7d      	ldr	r3, [pc, #500]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	4979      	ldr	r1, [pc, #484]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800615c:	4b74      	ldr	r3, [pc, #464]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	4971      	ldr	r1, [pc, #452]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800617e:	4b6c      	ldr	r3, [pc, #432]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f023 020c 	bic.w	r2, r3, #12
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618c:	4968      	ldr	r1, [pc, #416]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061a0:	4b63      	ldr	r3, [pc, #396]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ae:	4960      	ldr	r1, [pc, #384]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061c2:	4b5b      	ldr	r3, [pc, #364]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	4957      	ldr	r1, [pc, #348]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061e4:	4b52      	ldr	r3, [pc, #328]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	494f      	ldr	r1, [pc, #316]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006206:	4b4a      	ldr	r3, [pc, #296]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	4946      	ldr	r1, [pc, #280]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	493e      	ldr	r1, [pc, #248]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800624a:	4b39      	ldr	r3, [pc, #228]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006258:	4935      	ldr	r1, [pc, #212]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800626c:	4b30      	ldr	r3, [pc, #192]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627a:	492d      	ldr	r1, [pc, #180]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d011      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800628e:	4b28      	ldr	r3, [pc, #160]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	4924      	ldr	r1, [pc, #144]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ac:	d101      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062ce:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062dc:	4914      	ldr	r1, [pc, #80]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006300:	490b      	ldr	r1, [pc, #44]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00f      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006324:	4902      	ldr	r1, [pc, #8]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006340:	4b8a      	ldr	r3, [pc, #552]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	4986      	ldr	r1, [pc, #536]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006364:	4b81      	ldr	r3, [pc, #516]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006374:	497d      	ldr	r1, [pc, #500]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d006      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80d6 	beq.w	800653c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006390:	4b76      	ldr	r3, [pc, #472]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a75      	ldr	r2, [pc, #468]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800639a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639c:	f7fe f87c 	bl	8004498 <HAL_GetTick>
 80063a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063a4:	f7fe f878 	bl	8004498 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b64      	cmp	r3, #100	; 0x64
 80063b0:	d901      	bls.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e195      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063b6:	4b6d      	ldr	r3, [pc, #436]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d021      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063d6:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063e4:	4b61      	ldr	r3, [pc, #388]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ea:	0e1b      	lsrs	r3, r3, #24
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	019a      	lsls	r2, r3, #6
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	071b      	lsls	r3, r3, #28
 800640a:	4958      	ldr	r1, [pc, #352]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006426:	d00a      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d129      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800643e:	4b4b      	ldr	r3, [pc, #300]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800644c:	4b47      	ldr	r3, [pc, #284]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800644e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006452:	0f1b      	lsrs	r3, r3, #28
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	019a      	lsls	r2, r3, #6
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	061b      	lsls	r3, r3, #24
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	071b      	lsls	r3, r3, #28
 8006472:	493e      	ldr	r1, [pc, #248]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800647a:	4b3c      	ldr	r3, [pc, #240]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800647c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006480:	f023 021f 	bic.w	r2, r3, #31
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	3b01      	subs	r3, #1
 800648a:	4938      	ldr	r1, [pc, #224]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01d      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800649e:	4b33      	ldr	r3, [pc, #204]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a4:	0e1b      	lsrs	r3, r3, #24
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064ac:	4b2f      	ldr	r3, [pc, #188]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b2:	0f1b      	lsrs	r3, r3, #28
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	019a      	lsls	r2, r3, #6
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	431a      	orrs	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	061b      	lsls	r3, r3, #24
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	071b      	lsls	r3, r3, #28
 80064d2:	4926      	ldr	r1, [pc, #152]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d011      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	019a      	lsls	r2, r3, #6
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	071b      	lsls	r3, r3, #28
 8006502:	491a      	ldr	r1, [pc, #104]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800650a:	4b18      	ldr	r3, [pc, #96]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a17      	ldr	r2, [pc, #92]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006510:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fd ffbf 	bl	8004498 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800651e:	f7fd ffbb 	bl	8004498 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b64      	cmp	r3, #100	; 0x64
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0d8      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	f040 80ce 	bne.w	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006544:	4b09      	ldr	r3, [pc, #36]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a08      	ldr	r2, [pc, #32]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800654e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fd ffa2 	bl	8004498 <HAL_GetTick>
 8006554:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006556:	e00b      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006558:	f7fd ff9e 	bl	8004498 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	; 0x64
 8006564:	d904      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0bb      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006570:	4b5e      	ldr	r3, [pc, #376]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657c:	d0ec      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02e      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d12a      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065a6:	4b51      	ldr	r3, [pc, #324]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065b4:	4b4d      	ldr	r3, [pc, #308]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	0f1b      	lsrs	r3, r3, #28
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	019a      	lsls	r2, r3, #6
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	041b      	lsls	r3, r3, #16
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	071b      	lsls	r3, r3, #28
 80065da:	4944      	ldr	r1, [pc, #272]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065e2:	4b42      	ldr	r3, [pc, #264]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	3b01      	subs	r3, #1
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	493d      	ldr	r1, [pc, #244]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d022      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006610:	d11d      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006612:	4b36      	ldr	r3, [pc, #216]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006620:	4b32      	ldr	r3, [pc, #200]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	0f1b      	lsrs	r3, r3, #28
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	019a      	lsls	r2, r3, #6
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	431a      	orrs	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	061b      	lsls	r3, r3, #24
 8006640:	431a      	orrs	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	071b      	lsls	r3, r3, #28
 8006646:	4929      	ldr	r1, [pc, #164]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d028      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800665a:	4b24      	ldr	r3, [pc, #144]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	0e1b      	lsrs	r3, r3, #24
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	0c1b      	lsrs	r3, r3, #16
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	019a      	lsls	r2, r3, #6
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	431a      	orrs	r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	071b      	lsls	r3, r3, #28
 800668e:	4917      	ldr	r1, [pc, #92]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006696:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800669c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4911      	ldr	r1, [pc, #68]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0e      	ldr	r2, [pc, #56]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b8:	f7fd feee 	bl	8004498 <HAL_GetTick>
 80066bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066c0:	f7fd feea 	bl	8004498 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	; 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e007      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066de:	d1ef      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e09d      	b.n	800683e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006712:	d009      	beq.n	8006728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	61da      	str	r2, [r3, #28]
 800671a:	e005      	b.n	8006728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fa1c 	bl	8001b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006768:	d902      	bls.n	8006770 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e002      	b.n	8006776 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006774:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800677e:	d007      	beq.n	8006790 <HAL_SPI_Init+0xa0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006788:	d002      	beq.n	8006790 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	ea42 0103 	orr.w	r1, r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	f003 0204 	and.w	r2, r3, #4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800680c:	ea42 0103 	orr.w	r1, r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800682c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b088      	sub	sp, #32
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_SPI_Transmit+0x22>
 8006864:	2302      	movs	r3, #2
 8006866:	e158      	b.n	8006b1a <HAL_SPI_Transmit+0x2d4>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006870:	f7fd fe12 	bl	8004498 <HAL_GetTick>
 8006874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006886:	2302      	movs	r3, #2
 8006888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800688a:	e13d      	b.n	8006b08 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_SPI_Transmit+0x52>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800689c:	e134      	b.n	8006b08 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2203      	movs	r2, #3
 80068a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e8:	d10f      	bne.n	800690a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d007      	beq.n	8006928 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006930:	d94b      	bls.n	80069ca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Transmit+0xfa>
 800693a:	8afb      	ldrh	r3, [r7, #22]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d13e      	bne.n	80069be <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	881a      	ldrh	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006964:	e02b      	b.n	80069be <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d112      	bne.n	800699a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	1c9a      	adds	r2, r3, #2
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006998:	e011      	b.n	80069be <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800699a:	f7fd fd7d 	bl	8004498 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d803      	bhi.n	80069b2 <HAL_SPI_Transmit+0x16c>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d102      	bne.n	80069b8 <HAL_SPI_Transmit+0x172>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069bc:	e0a4      	b.n	8006b08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ce      	bne.n	8006966 <HAL_SPI_Transmit+0x120>
 80069c8:	e07c      	b.n	8006ac4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_SPI_Transmit+0x192>
 80069d2:	8afb      	ldrh	r3, [r7, #22]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d170      	bne.n	8006aba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d912      	bls.n	8006a08 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b02      	subs	r3, #2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a06:	e058      	b.n	8006aba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	7812      	ldrb	r2, [r2, #0]
 8006a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a2e:	e044      	b.n	8006aba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d12b      	bne.n	8006a96 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d912      	bls.n	8006a6e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	1c9a      	adds	r2, r3, #2
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b02      	subs	r3, #2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a6c:	e025      	b.n	8006aba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a94:	e011      	b.n	8006aba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a96:	f7fd fcff 	bl	8004498 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d803      	bhi.n	8006aae <HAL_SPI_Transmit+0x268>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d102      	bne.n	8006ab4 <HAL_SPI_Transmit+0x26e>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ab8:	e026      	b.n	8006b08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1b5      	bne.n	8006a30 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fd07 	bl	80074dc <SPI_EndRxTxTransaction>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e000      	b.n	8006b08 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006b06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b088      	sub	sp, #32
 8006b26:	af02      	add	r7, sp, #8
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3e:	d112      	bne.n	8006b66 <HAL_SPI_Receive+0x44>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10e      	bne.n	8006b66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b50:	88fa      	ldrh	r2, [r7, #6]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4613      	mov	r3, r2
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f910 	bl	8006d82 <HAL_SPI_TransmitReceive>
 8006b62:	4603      	mov	r3, r0
 8006b64:	e109      	b.n	8006d7a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_SPI_Receive+0x52>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e102      	b.n	8006d7a <HAL_SPI_Receive+0x258>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b7c:	f7fd fc8c 	bl	8004498 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d002      	beq.n	8006b94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b92:	e0e9      	b.n	8006d68 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_Receive+0x7e>
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ba4:	e0e0      	b.n	8006d68 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bf0:	d908      	bls.n	8006c04 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	e007      	b.n	8006c14 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c12:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1c:	d10f      	bne.n	8006c3e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	d007      	beq.n	8006c5c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c64:	d867      	bhi.n	8006d36 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c66:	e030      	b.n	8006cca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d117      	bne.n	8006ca6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f103 020c 	add.w	r2, r3, #12
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ca4:	e011      	b.n	8006cca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca6:	f7fd fbf7 	bl	8004498 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d803      	bhi.n	8006cbe <HAL_SPI_Receive+0x19c>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d102      	bne.n	8006cc4 <HAL_SPI_Receive+0x1a2>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006cc8:	e04e      	b.n	8006d68 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1c8      	bne.n	8006c68 <HAL_SPI_Receive+0x146>
 8006cd6:	e034      	b.n	8006d42 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d115      	bne.n	8006d12 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d10:	e011      	b.n	8006d36 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d12:	f7fd fbc1 	bl	8004498 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d803      	bhi.n	8006d2a <HAL_SPI_Receive+0x208>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d102      	bne.n	8006d30 <HAL_SPI_Receive+0x20e>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d34:	e018      	b.n	8006d68 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1ca      	bne.n	8006cd8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fb4c 	bl	80073e4 <SPI_EndRxTransaction>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
 8006d64:	e000      	b.n	8006d68 <HAL_SPI_Receive+0x246>
  }

error :
 8006d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08a      	sub	sp, #40	; 0x28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d90:	2301      	movs	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_SPI_TransmitReceive+0x26>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e1fb      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x41e>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db0:	f7fd fb72 	bl	8004498 <HAL_GetTick>
 8006db4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006dc4:	887b      	ldrh	r3, [r7, #2]
 8006dc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006dc8:	887b      	ldrh	r3, [r7, #2]
 8006dca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dcc:	7efb      	ldrb	r3, [r7, #27]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d00e      	beq.n	8006df0 <HAL_SPI_TransmitReceive+0x6e>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd8:	d106      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x66>
 8006de2:	7efb      	ldrb	r3, [r7, #27]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d003      	beq.n	8006df0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006dee:	e1cd      	b.n	800718c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x80>
 8006dfc:	887b      	ldrh	r3, [r7, #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e08:	e1c0      	b.n	800718c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d003      	beq.n	8006e1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2205      	movs	r2, #5
 8006e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	887a      	ldrh	r2, [r7, #2]
 8006e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	887a      	ldrh	r2, [r7, #2]
 8006e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	887a      	ldrh	r2, [r7, #2]
 8006e44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	887a      	ldrh	r2, [r7, #2]
 8006e4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e60:	d802      	bhi.n	8006e68 <HAL_SPI_TransmitReceive+0xe6>
 8006e62:	8a3b      	ldrh	r3, [r7, #16]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d908      	bls.n	8006e7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e76:	605a      	str	r2, [r3, #4]
 8006e78:	e007      	b.n	8006e8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d007      	beq.n	8006ea8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eb0:	d97c      	bls.n	8006fac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x13e>
 8006eba:	8a7b      	ldrh	r3, [r7, #18]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d169      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	881a      	ldrh	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	1c9a      	adds	r2, r3, #2
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee4:	e056      	b.n	8006f94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d11b      	bne.n	8006f2c <HAL_SPI_TransmitReceive+0x1aa>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x1aa>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d113      	bne.n	8006f2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	881a      	ldrh	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	1c9a      	adds	r2, r3, #2
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d11c      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x1f2>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d016      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	b292      	uxth	r2, r2
 8006f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f70:	2301      	movs	r3, #1
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f74:	f7fd fa90 	bl	8004498 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d807      	bhi.n	8006f94 <HAL_SPI_TransmitReceive+0x212>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d003      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f92:	e0fb      	b.n	800718c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1a3      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x164>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d19d      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x164>
 8006faa:	e0df      	b.n	800716c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x23a>
 8006fb4:	8a7b      	ldrh	r3, [r7, #18]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	f040 80cb 	bne.w	8007152 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d912      	bls.n	8006fec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b02      	subs	r3, #2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fea:	e0b2      	b.n	8007152 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	7812      	ldrb	r2, [r2, #0]
 8006ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007012:	e09e      	b.n	8007152 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d134      	bne.n	800708c <HAL_SPI_TransmitReceive+0x30a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02f      	beq.n	800708c <HAL_SPI_TransmitReceive+0x30a>
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	2b01      	cmp	r3, #1
 8007030:	d12c      	bne.n	800708c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d912      	bls.n	8007062 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	881a      	ldrh	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b02      	subs	r3, #2
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007060:	e012      	b.n	8007088 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d148      	bne.n	800712c <HAL_SPI_TransmitReceive+0x3aa>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d042      	beq.n	800712c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d923      	bls.n	80070fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	b292      	uxth	r2, r2
 80070be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	1c9a      	adds	r2, r3, #2
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b02      	subs	r3, #2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d81f      	bhi.n	8007128 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070f6:	605a      	str	r2, [r3, #4]
 80070f8:	e016      	b.n	8007128 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f103 020c 	add.w	r2, r3, #12
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007128:	2301      	movs	r3, #1
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800712c:	f7fd f9b4 	bl	8004498 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007138:	429a      	cmp	r2, r3
 800713a:	d803      	bhi.n	8007144 <HAL_SPI_TransmitReceive+0x3c2>
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d102      	bne.n	800714a <HAL_SPI_TransmitReceive+0x3c8>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007150:	e01c      	b.n	800718c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f af5b 	bne.w	8007014 <HAL_SPI_TransmitReceive+0x292>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f af54 	bne.w	8007014 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f9b3 	bl	80074dc <SPI_EndRxTxTransaction>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d006      	beq.n	800718a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	661a      	str	r2, [r3, #96]	; 0x60
 8007188:	e000      	b.n	800718c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800718a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800719c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3728      	adds	r7, #40	; 0x28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071b8:	f7fd f96e 	bl	8004498 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071c8:	f7fd f966 	bl	8004498 <HAL_GetTick>
 80071cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ce:	4b39      	ldr	r3, [pc, #228]	; (80072b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	015b      	lsls	r3, r3, #5
 80071d4:	0d1b      	lsrs	r3, r3, #20
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071de:	e054      	b.n	800728a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d050      	beq.n	800728a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e8:	f7fd f956 	bl	8004498 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d902      	bls.n	80071fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d13d      	bne.n	800727a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800720c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007216:	d111      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007220:	d004      	beq.n	800722c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722a:	d107      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007244:	d10f      	bne.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e017      	b.n	80072aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	3b01      	subs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4013      	ands	r3, r2
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	bf0c      	ite	eq
 800729a:	2301      	moveq	r3, #1
 800729c:	2300      	movne	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d19b      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200004c0 	.word	0x200004c0

080072b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	; 0x28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072ca:	f7fd f8e5 	bl	8004498 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	4413      	add	r3, r2
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80072da:	f7fd f8dd 	bl	8004498 <HAL_GetTick>
 80072de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072e8:	4b3d      	ldr	r3, [pc, #244]	; (80073e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	00da      	lsls	r2, r3, #3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	0d1b      	lsrs	r3, r3, #20
 80072f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007300:	e060      	b.n	80073c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007308:	d107      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0x62>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007318:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007320:	d050      	beq.n	80073c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007322:	f7fd f8b9 	bl	8004498 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	429a      	cmp	r2, r3
 8007330:	d902      	bls.n	8007338 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	d13d      	bne.n	80073b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007346:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007350:	d111      	bne.n	8007376 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735a:	d004      	beq.n	8007366 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d107      	bne.n	8007376 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737e:	d10f      	bne.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800739e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e010      	b.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	4013      	ands	r3, r2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d196      	bne.n	8007302 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3728      	adds	r7, #40	; 0x28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200004c0 	.word	0x200004c0

080073e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f8:	d111      	bne.n	800741e <SPI_EndRxTransaction+0x3a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007402:	d004      	beq.n	800740e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d107      	bne.n	800741e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800741c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007426:	d112      	bne.n	800744e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	2180      	movs	r1, #128	; 0x80
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff feb8 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d021      	beq.n	8007482 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007442:	f043 0220 	orr.w	r2, r3, #32
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e03d      	b.n	80074ca <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <SPI_EndRxTransaction+0xf0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <SPI_EndRxTransaction+0xf4>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	0d5b      	lsrs	r3, r3, #21
 800745a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	3b01      	subs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d0f2      	beq.n	8007464 <SPI_EndRxTransaction+0x80>
 800747e:	e000      	b.n	8007482 <SPI_EndRxTransaction+0x9e>
        break;
 8007480:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748a:	d11d      	bne.n	80074c8 <SPI_EndRxTransaction+0xe4>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007494:	d004      	beq.n	80074a0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749e:	d113      	bne.n	80074c8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ff03 	bl	80072b8 <SPI_WaitFifoStateUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074bc:	f043 0220 	orr.w	r2, r3, #32
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e000      	b.n	80074ca <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200004c0 	.word	0x200004c0
 80074d8:	165e9f81 	.word	0x165e9f81

080074dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fedf 	bl	80072b8 <SPI_WaitFifoStateUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e046      	b.n	800759e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <SPI_EndRxTxTransaction+0xcc>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a25      	ldr	r2, [pc, #148]	; (80075ac <SPI_EndRxTxTransaction+0xd0>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0d5b      	lsrs	r3, r3, #21
 800751c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007520:	fb02 f303 	mul.w	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d112      	bne.n	8007556 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fe34 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e023      	b.n	800759e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d0f2      	beq.n	8007556 <SPI_EndRxTxTransaction+0x7a>
 8007570:	e000      	b.n	8007574 <SPI_EndRxTxTransaction+0x98>
        break;
 8007572:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff fe99 	bl	80072b8 <SPI_WaitFifoStateUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e000      	b.n	800759e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200004c0 	.word	0x200004c0
 80075ac:	165e9f81 	.word	0x165e9f81

080075b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e049      	b.n	8007656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fa fc6e 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f000 f836 	bl	8007660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a40      	ldr	r2, [pc, #256]	; (8007774 <TIM_Base_SetConfig+0x114>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d00f      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a3d      	ldr	r2, [pc, #244]	; (8007778 <TIM_Base_SetConfig+0x118>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a3c      	ldr	r2, [pc, #240]	; (800777c <TIM_Base_SetConfig+0x11c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a3b      	ldr	r2, [pc, #236]	; (8007780 <TIM_Base_SetConfig+0x120>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3a      	ldr	r2, [pc, #232]	; (8007784 <TIM_Base_SetConfig+0x124>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d108      	bne.n	80076b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2f      	ldr	r2, [pc, #188]	; (8007774 <TIM_Base_SetConfig+0x114>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d02b      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d027      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2c      	ldr	r2, [pc, #176]	; (8007778 <TIM_Base_SetConfig+0x118>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d023      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2b      	ldr	r2, [pc, #172]	; (800777c <TIM_Base_SetConfig+0x11c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d01f      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2a      	ldr	r2, [pc, #168]	; (8007780 <TIM_Base_SetConfig+0x120>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d01b      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a29      	ldr	r2, [pc, #164]	; (8007784 <TIM_Base_SetConfig+0x124>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d017      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a28      	ldr	r2, [pc, #160]	; (8007788 <TIM_Base_SetConfig+0x128>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a27      	ldr	r2, [pc, #156]	; (800778c <TIM_Base_SetConfig+0x12c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00f      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a26      	ldr	r2, [pc, #152]	; (8007790 <TIM_Base_SetConfig+0x130>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00b      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a25      	ldr	r2, [pc, #148]	; (8007794 <TIM_Base_SetConfig+0x134>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d007      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a24      	ldr	r2, [pc, #144]	; (8007798 <TIM_Base_SetConfig+0x138>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a23      	ldr	r2, [pc, #140]	; (800779c <TIM_Base_SetConfig+0x13c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d108      	bne.n	8007724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <TIM_Base_SetConfig+0x114>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0xf8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a0c      	ldr	r2, [pc, #48]	; (8007784 <TIM_Base_SetConfig+0x124>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d103      	bne.n	8007760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	615a      	str	r2, [r3, #20]
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40010000 	.word	0x40010000
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40000c00 	.word	0x40000c00
 8007784:	40010400 	.word	0x40010400
 8007788:	40014000 	.word	0x40014000
 800778c:	40014400 	.word	0x40014400
 8007790:	40014800 	.word	0x40014800
 8007794:	40001800 	.word	0x40001800
 8007798:	40001c00 	.word	0x40001c00
 800779c:	40002000 	.word	0x40002000

080077a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e040      	b.n	8007834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa fbf8 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fbc2 	bl	8007f68 <UART_SetConfig>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e022      	b.n	8007834 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fe1a 	bl	8008430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800780a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800781a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fea1 	bl	8008574 <UART_CheckIdleState>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007850:	2b20      	cmp	r3, #32
 8007852:	d171      	bne.n	8007938 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_UART_Transmit+0x24>
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e06a      	b.n	800793a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2221      	movs	r2, #33	; 0x21
 8007870:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007872:	f7fc fe11 	bl	8004498 <HAL_GetTick>
 8007876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007890:	d108      	bne.n	80078a4 <HAL_UART_Transmit+0x68>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e003      	b.n	80078ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078ac:	e02c      	b.n	8007908 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	2180      	movs	r1, #128	; 0x80
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fea8 	bl	800860e <UART_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e038      	b.n	800793a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	3302      	adds	r3, #2
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e007      	b.n	80078f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1cc      	bne.n	80078ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2200      	movs	r2, #0
 800791c:	2140      	movs	r1, #64	; 0x40
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fe75 	bl	800860e <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e005      	b.n	800793a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0ba      	sub	sp, #232	; 0xe8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800796a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800796e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007972:	4013      	ands	r3, r2
 8007974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d115      	bne.n	80079ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00f      	beq.n	80079ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 82ac 	beq.w	8007efa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      }
      return;
 80079aa:	e2a6      	b.n	8007efa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8117 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079c6:	4b85      	ldr	r3, [pc, #532]	; (8007bdc <HAL_UART_IRQHandler+0x298>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 810a 	beq.w	8007be4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <HAL_UART_IRQHandler+0xbc>
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2201      	movs	r2, #1
 80079ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f6:	f043 0201 	orr.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_UART_IRQHandler+0xec>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a26:	f043 0204 	orr.w	r2, r3, #4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d011      	beq.n	8007a60 <HAL_UART_IRQHandler+0x11c>
 8007a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d017      	beq.n	8007a9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a92:	f043 0208 	orr.w	r2, r3, #8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_UART_IRQHandler+0x18a>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac4:	f043 0220 	orr.w	r2, r3, #32
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8212 	beq.w	8007efe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d04f      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fe37 	bl	800879a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d141      	bne.n	8007bbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d9      	bne.n	8007b3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d013      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <HAL_UART_IRQHandler+0x29c>)
 8007b94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fc ffc6 	bl	8004b2c <HAL_DMA_Abort_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d017      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e00f      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9b6 	bl	8007f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	e00b      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9b2 	bl	8007f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	e007      	b.n	8007bd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9ae 	bl	8007f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007bd4:	e193      	b.n	8007efe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd6:	bf00      	nop
    return;
 8007bd8:	e191      	b.n	8007efe <HAL_UART_IRQHandler+0x5ba>
 8007bda:	bf00      	nop
 8007bdc:	04000120 	.word	0x04000120
 8007be0:	08008863 	.word	0x08008863

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 814c 	bne.w	8007e86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8145 	beq.w	8007e86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 813e 	beq.w	8007e86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	f040 80b6 	bne.w	8007d8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8165 	beq.w	8007f02 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	429a      	cmp	r2, r3
 8007c44:	f080 815d 	bcs.w	8007f02 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5c:	f000 8086 	beq.w	8007d6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1da      	bne.n	8007c60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e1      	bne.n	8007caa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e3      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	f023 0310 	bic.w	r3, r3, #16
 8007d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e4      	bne.n	8007d2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc fe70 	bl	8004a4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8d8 	bl	8007f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d8c:	e0b9      	b.n	8007f02 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80ab 	beq.w	8007f06 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80a6 	beq.w	8007f06 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e4      	bne.n	8007dba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e14:	633a      	str	r2, [r7, #48]	; 0x30
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e3      	bne.n	8007df0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69b9      	ldr	r1, [r7, #24]
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e4      	bne.n	8007e3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f85c 	bl	8007f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e84:	e03f      	b.n	8007f06 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x56c>
 8007e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f853 	bl	8007f54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eae:	e02d      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00e      	beq.n	8007eda <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01c      	beq.n	8007f0a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
    }
    return;
 8007ed8:	e017      	b.n	8007f0a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d012      	beq.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00c      	beq.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fccb 	bl	800888e <UART_EndTransmit_IT>
    return;
 8007ef8:	e008      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007efa:	bf00      	nop
 8007efc:	e006      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007efe:	bf00      	nop
 8007f00:	e004      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007f0a:	bf00      	nop
  }

}
 8007f0c:	37e8      	adds	r7, #232	; 0xe8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4ba6      	ldr	r3, [pc, #664]	; (800822c <UART_SetConfig+0x2c4>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a94      	ldr	r2, [pc, #592]	; (8008230 <UART_SetConfig+0x2c8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d120      	bne.n	8008026 <UART_SetConfig+0xbe>
 8007fe4:	4b93      	ldr	r3, [pc, #588]	; (8008234 <UART_SetConfig+0x2cc>)
 8007fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d816      	bhi.n	8008020 <UART_SetConfig+0xb8>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0x90>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008015 	.word	0x08008015
 8008000:	0800800f 	.word	0x0800800f
 8008004:	0800801b 	.word	0x0800801b
 8008008:	2301      	movs	r3, #1
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e150      	b.n	80082b0 <UART_SetConfig+0x348>
 800800e:	2302      	movs	r3, #2
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e14d      	b.n	80082b0 <UART_SetConfig+0x348>
 8008014:	2304      	movs	r3, #4
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e14a      	b.n	80082b0 <UART_SetConfig+0x348>
 800801a:	2308      	movs	r3, #8
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e147      	b.n	80082b0 <UART_SetConfig+0x348>
 8008020:	2310      	movs	r3, #16
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	e144      	b.n	80082b0 <UART_SetConfig+0x348>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a83      	ldr	r2, [pc, #524]	; (8008238 <UART_SetConfig+0x2d0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d132      	bne.n	8008096 <UART_SetConfig+0x12e>
 8008030:	4b80      	ldr	r3, [pc, #512]	; (8008234 <UART_SetConfig+0x2cc>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f003 030c 	and.w	r3, r3, #12
 800803a:	2b0c      	cmp	r3, #12
 800803c:	d828      	bhi.n	8008090 <UART_SetConfig+0x128>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0xdc>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008079 	.word	0x08008079
 8008048:	08008091 	.word	0x08008091
 800804c:	08008091 	.word	0x08008091
 8008050:	08008091 	.word	0x08008091
 8008054:	08008085 	.word	0x08008085
 8008058:	08008091 	.word	0x08008091
 800805c:	08008091 	.word	0x08008091
 8008060:	08008091 	.word	0x08008091
 8008064:	0800807f 	.word	0x0800807f
 8008068:	08008091 	.word	0x08008091
 800806c:	08008091 	.word	0x08008091
 8008070:	08008091 	.word	0x08008091
 8008074:	0800808b 	.word	0x0800808b
 8008078:	2300      	movs	r3, #0
 800807a:	77fb      	strb	r3, [r7, #31]
 800807c:	e118      	b.n	80082b0 <UART_SetConfig+0x348>
 800807e:	2302      	movs	r3, #2
 8008080:	77fb      	strb	r3, [r7, #31]
 8008082:	e115      	b.n	80082b0 <UART_SetConfig+0x348>
 8008084:	2304      	movs	r3, #4
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e112      	b.n	80082b0 <UART_SetConfig+0x348>
 800808a:	2308      	movs	r3, #8
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e10f      	b.n	80082b0 <UART_SetConfig+0x348>
 8008090:	2310      	movs	r3, #16
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e10c      	b.n	80082b0 <UART_SetConfig+0x348>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a68      	ldr	r2, [pc, #416]	; (800823c <UART_SetConfig+0x2d4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d120      	bne.n	80080e2 <UART_SetConfig+0x17a>
 80080a0:	4b64      	ldr	r3, [pc, #400]	; (8008234 <UART_SetConfig+0x2cc>)
 80080a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080aa:	2b30      	cmp	r3, #48	; 0x30
 80080ac:	d013      	beq.n	80080d6 <UART_SetConfig+0x16e>
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d814      	bhi.n	80080dc <UART_SetConfig+0x174>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d009      	beq.n	80080ca <UART_SetConfig+0x162>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d810      	bhi.n	80080dc <UART_SetConfig+0x174>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <UART_SetConfig+0x15c>
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d006      	beq.n	80080d0 <UART_SetConfig+0x168>
 80080c2:	e00b      	b.n	80080dc <UART_SetConfig+0x174>
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e0f2      	b.n	80082b0 <UART_SetConfig+0x348>
 80080ca:	2302      	movs	r3, #2
 80080cc:	77fb      	strb	r3, [r7, #31]
 80080ce:	e0ef      	b.n	80082b0 <UART_SetConfig+0x348>
 80080d0:	2304      	movs	r3, #4
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e0ec      	b.n	80082b0 <UART_SetConfig+0x348>
 80080d6:	2308      	movs	r3, #8
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e0e9      	b.n	80082b0 <UART_SetConfig+0x348>
 80080dc:	2310      	movs	r3, #16
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e0e6      	b.n	80082b0 <UART_SetConfig+0x348>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a56      	ldr	r2, [pc, #344]	; (8008240 <UART_SetConfig+0x2d8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d120      	bne.n	800812e <UART_SetConfig+0x1c6>
 80080ec:	4b51      	ldr	r3, [pc, #324]	; (8008234 <UART_SetConfig+0x2cc>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080f6:	2bc0      	cmp	r3, #192	; 0xc0
 80080f8:	d013      	beq.n	8008122 <UART_SetConfig+0x1ba>
 80080fa:	2bc0      	cmp	r3, #192	; 0xc0
 80080fc:	d814      	bhi.n	8008128 <UART_SetConfig+0x1c0>
 80080fe:	2b80      	cmp	r3, #128	; 0x80
 8008100:	d009      	beq.n	8008116 <UART_SetConfig+0x1ae>
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d810      	bhi.n	8008128 <UART_SetConfig+0x1c0>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <UART_SetConfig+0x1a8>
 800810a:	2b40      	cmp	r3, #64	; 0x40
 800810c:	d006      	beq.n	800811c <UART_SetConfig+0x1b4>
 800810e:	e00b      	b.n	8008128 <UART_SetConfig+0x1c0>
 8008110:	2300      	movs	r3, #0
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e0cc      	b.n	80082b0 <UART_SetConfig+0x348>
 8008116:	2302      	movs	r3, #2
 8008118:	77fb      	strb	r3, [r7, #31]
 800811a:	e0c9      	b.n	80082b0 <UART_SetConfig+0x348>
 800811c:	2304      	movs	r3, #4
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e0c6      	b.n	80082b0 <UART_SetConfig+0x348>
 8008122:	2308      	movs	r3, #8
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e0c3      	b.n	80082b0 <UART_SetConfig+0x348>
 8008128:	2310      	movs	r3, #16
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e0c0      	b.n	80082b0 <UART_SetConfig+0x348>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a44      	ldr	r2, [pc, #272]	; (8008244 <UART_SetConfig+0x2dc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d125      	bne.n	8008184 <UART_SetConfig+0x21c>
 8008138:	4b3e      	ldr	r3, [pc, #248]	; (8008234 <UART_SetConfig+0x2cc>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008146:	d017      	beq.n	8008178 <UART_SetConfig+0x210>
 8008148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814c:	d817      	bhi.n	800817e <UART_SetConfig+0x216>
 800814e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x204>
 8008154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008158:	d811      	bhi.n	800817e <UART_SetConfig+0x216>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <UART_SetConfig+0x1fe>
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d006      	beq.n	8008172 <UART_SetConfig+0x20a>
 8008164:	e00b      	b.n	800817e <UART_SetConfig+0x216>
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e0a1      	b.n	80082b0 <UART_SetConfig+0x348>
 800816c:	2302      	movs	r3, #2
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e09e      	b.n	80082b0 <UART_SetConfig+0x348>
 8008172:	2304      	movs	r3, #4
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e09b      	b.n	80082b0 <UART_SetConfig+0x348>
 8008178:	2308      	movs	r3, #8
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e098      	b.n	80082b0 <UART_SetConfig+0x348>
 800817e:	2310      	movs	r3, #16
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e095      	b.n	80082b0 <UART_SetConfig+0x348>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a2f      	ldr	r2, [pc, #188]	; (8008248 <UART_SetConfig+0x2e0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d125      	bne.n	80081da <UART_SetConfig+0x272>
 800818e:	4b29      	ldr	r3, [pc, #164]	; (8008234 <UART_SetConfig+0x2cc>)
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800819c:	d017      	beq.n	80081ce <UART_SetConfig+0x266>
 800819e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081a2:	d817      	bhi.n	80081d4 <UART_SetConfig+0x26c>
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a8:	d00b      	beq.n	80081c2 <UART_SetConfig+0x25a>
 80081aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ae:	d811      	bhi.n	80081d4 <UART_SetConfig+0x26c>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <UART_SetConfig+0x254>
 80081b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b8:	d006      	beq.n	80081c8 <UART_SetConfig+0x260>
 80081ba:	e00b      	b.n	80081d4 <UART_SetConfig+0x26c>
 80081bc:	2301      	movs	r3, #1
 80081be:	77fb      	strb	r3, [r7, #31]
 80081c0:	e076      	b.n	80082b0 <UART_SetConfig+0x348>
 80081c2:	2302      	movs	r3, #2
 80081c4:	77fb      	strb	r3, [r7, #31]
 80081c6:	e073      	b.n	80082b0 <UART_SetConfig+0x348>
 80081c8:	2304      	movs	r3, #4
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e070      	b.n	80082b0 <UART_SetConfig+0x348>
 80081ce:	2308      	movs	r3, #8
 80081d0:	77fb      	strb	r3, [r7, #31]
 80081d2:	e06d      	b.n	80082b0 <UART_SetConfig+0x348>
 80081d4:	2310      	movs	r3, #16
 80081d6:	77fb      	strb	r3, [r7, #31]
 80081d8:	e06a      	b.n	80082b0 <UART_SetConfig+0x348>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <UART_SetConfig+0x2e4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d138      	bne.n	8008256 <UART_SetConfig+0x2ee>
 80081e4:	4b13      	ldr	r3, [pc, #76]	; (8008234 <UART_SetConfig+0x2cc>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80081ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f2:	d017      	beq.n	8008224 <UART_SetConfig+0x2bc>
 80081f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f8:	d82a      	bhi.n	8008250 <UART_SetConfig+0x2e8>
 80081fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fe:	d00b      	beq.n	8008218 <UART_SetConfig+0x2b0>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008204:	d824      	bhi.n	8008250 <UART_SetConfig+0x2e8>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <UART_SetConfig+0x2aa>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	d006      	beq.n	800821e <UART_SetConfig+0x2b6>
 8008210:	e01e      	b.n	8008250 <UART_SetConfig+0x2e8>
 8008212:	2300      	movs	r3, #0
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e04b      	b.n	80082b0 <UART_SetConfig+0x348>
 8008218:	2302      	movs	r3, #2
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e048      	b.n	80082b0 <UART_SetConfig+0x348>
 800821e:	2304      	movs	r3, #4
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e045      	b.n	80082b0 <UART_SetConfig+0x348>
 8008224:	2308      	movs	r3, #8
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	e042      	b.n	80082b0 <UART_SetConfig+0x348>
 800822a:	bf00      	nop
 800822c:	efff69f3 	.word	0xefff69f3
 8008230:	40011000 	.word	0x40011000
 8008234:	40023800 	.word	0x40023800
 8008238:	40004400 	.word	0x40004400
 800823c:	40004800 	.word	0x40004800
 8008240:	40004c00 	.word	0x40004c00
 8008244:	40005000 	.word	0x40005000
 8008248:	40011400 	.word	0x40011400
 800824c:	40007800 	.word	0x40007800
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e02c      	b.n	80082b0 <UART_SetConfig+0x348>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a72      	ldr	r2, [pc, #456]	; (8008424 <UART_SetConfig+0x4bc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d125      	bne.n	80082ac <UART_SetConfig+0x344>
 8008260:	4b71      	ldr	r3, [pc, #452]	; (8008428 <UART_SetConfig+0x4c0>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800826a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800826e:	d017      	beq.n	80082a0 <UART_SetConfig+0x338>
 8008270:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008274:	d817      	bhi.n	80082a6 <UART_SetConfig+0x33e>
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827a:	d00b      	beq.n	8008294 <UART_SetConfig+0x32c>
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008280:	d811      	bhi.n	80082a6 <UART_SetConfig+0x33e>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <UART_SetConfig+0x326>
 8008286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800828a:	d006      	beq.n	800829a <UART_SetConfig+0x332>
 800828c:	e00b      	b.n	80082a6 <UART_SetConfig+0x33e>
 800828e:	2300      	movs	r3, #0
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e00d      	b.n	80082b0 <UART_SetConfig+0x348>
 8008294:	2302      	movs	r3, #2
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e00a      	b.n	80082b0 <UART_SetConfig+0x348>
 800829a:	2304      	movs	r3, #4
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	e007      	b.n	80082b0 <UART_SetConfig+0x348>
 80082a0:	2308      	movs	r3, #8
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e004      	b.n	80082b0 <UART_SetConfig+0x348>
 80082a6:	2310      	movs	r3, #16
 80082a8:	77fb      	strb	r3, [r7, #31]
 80082aa:	e001      	b.n	80082b0 <UART_SetConfig+0x348>
 80082ac:	2310      	movs	r3, #16
 80082ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b8:	d15b      	bne.n	8008372 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80082ba:	7ffb      	ldrb	r3, [r7, #31]
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d828      	bhi.n	8008312 <UART_SetConfig+0x3aa>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0x360>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	08008313 	.word	0x08008313
 80082d8:	08008303 	.word	0x08008303
 80082dc:	08008313 	.word	0x08008313
 80082e0:	08008313 	.word	0x08008313
 80082e4:	08008313 	.word	0x08008313
 80082e8:	0800830b 	.word	0x0800830b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ec:	f7fd fdb0 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 80082f0:	61b8      	str	r0, [r7, #24]
        break;
 80082f2:	e013      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f4:	f7fd fdc0 	bl	8005e78 <HAL_RCC_GetPCLK2Freq>
 80082f8:	61b8      	str	r0, [r7, #24]
        break;
 80082fa:	e00f      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b4b      	ldr	r3, [pc, #300]	; (800842c <UART_SetConfig+0x4c4>)
 80082fe:	61bb      	str	r3, [r7, #24]
        break;
 8008300:	e00c      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7fd fc93 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 8008306:	61b8      	str	r0, [r7, #24]
        break;
 8008308:	e008      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	61bb      	str	r3, [r7, #24]
        break;
 8008310:	e004      	b.n	800831c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	77bb      	strb	r3, [r7, #30]
        break;
 800831a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d074      	beq.n	800840c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	005a      	lsls	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d916      	bls.n	800836c <UART_SetConfig+0x404>
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008344:	d212      	bcs.n	800836c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f023 030f 	bic.w	r3, r3, #15
 800834e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	b29b      	uxth	r3, r3
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	b29a      	uxth	r2, r3
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	4313      	orrs	r3, r2
 8008360:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	e04f      	b.n	800840c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	77bb      	strb	r3, [r7, #30]
 8008370:	e04c      	b.n	800840c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d828      	bhi.n	80083ca <UART_SetConfig+0x462>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <UART_SetConfig+0x418>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	080083cb 	.word	0x080083cb
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083cb 	.word	0x080083cb
 8008398:	080083cb 	.word	0x080083cb
 800839c:	080083cb 	.word	0x080083cb
 80083a0:	080083c3 	.word	0x080083c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a4:	f7fd fd54 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 80083a8:	61b8      	str	r0, [r7, #24]
        break;
 80083aa:	e013      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fd fd64 	bl	8005e78 <HAL_RCC_GetPCLK2Freq>
 80083b0:	61b8      	str	r0, [r7, #24]
        break;
 80083b2:	e00f      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <UART_SetConfig+0x4c4>)
 80083b6:	61bb      	str	r3, [r7, #24]
        break;
 80083b8:	e00c      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ba:	f7fd fc37 	bl	8005c2c <HAL_RCC_GetSysClockFreq>
 80083be:	61b8      	str	r0, [r7, #24]
        break;
 80083c0:	e008      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c6:	61bb      	str	r3, [r7, #24]
        break;
 80083c8:	e004      	b.n	80083d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	77bb      	strb	r3, [r7, #30]
        break;
 80083d2:	bf00      	nop
    }

    if (pclk != 0U)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d018      	beq.n	800840c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	085a      	lsrs	r2, r3, #1
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	441a      	add	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b0f      	cmp	r3, #15
 80083f2:	d909      	bls.n	8008408 <UART_SetConfig+0x4a0>
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fa:	d205      	bcs.n	8008408 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	e001      	b.n	800840c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008418:	7fbb      	ldrb	r3, [r7, #30]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40007c00 	.word	0x40007c00
 8008428:	40023800 	.word	0x40023800
 800842c:	00f42400 	.word	0x00f42400

08008430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01a      	beq.n	8008546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800852e:	d10a      	bne.n	8008546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	605a      	str	r2, [r3, #4]
  }
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af02      	add	r7, sp, #8
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008584:	f7fb ff88 	bl	8004498 <HAL_GetTick>
 8008588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b08      	cmp	r3, #8
 8008596:	d10e      	bne.n	80085b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f831 	bl	800860e <UART_WaitOnFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e027      	b.n	8008606 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d10e      	bne.n	80085e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f81b 	bl	800860e <UART_WaitOnFlagUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e011      	b.n	8008606 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b09c      	sub	sp, #112	; 0x70
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800861e:	e0a7      	b.n	8008770 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008626:	f000 80a3 	beq.w	8008770 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800862a:	f7fb ff35 	bl	8004498 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008636:	429a      	cmp	r2, r3
 8008638:	d302      	bcc.n	8008640 <UART_WaitOnFlagUntilTimeout+0x32>
 800863a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800863c:	2b00      	cmp	r3, #0
 800863e:	d13f      	bne.n	80086c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800864e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008654:	667b      	str	r3, [r7, #100]	; 0x64
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008660:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800866c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	663b      	str	r3, [r7, #96]	; 0x60
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008692:	64ba      	str	r2, [r7, #72]	; 0x48
 8008694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e068      	b.n	8008792 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d050      	beq.n	8008770 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086dc:	d148      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
 8008708:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800870c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e6      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	613b      	str	r3, [r7, #16]
   return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	66bb      	str	r3, [r7, #104]	; 0x68
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800873a:	623a      	str	r2, [r7, #32]
 800873c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	69f9      	ldr	r1, [r7, #28]
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	61bb      	str	r3, [r7, #24]
   return(result);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e5      	bne.n	800871a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e010      	b.n	8008792 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4013      	ands	r3, r2
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	429a      	cmp	r2, r3
 800878c:	f43f af48 	beq.w	8008620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3770      	adds	r7, #112	; 0x70
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800879a:	b480      	push	{r7}
 800879c:	b095      	sub	sp, #84	; 0x54
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c0:	643b      	str	r3, [r7, #64]	; 0x40
 80087c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3308      	adds	r3, #8
 80087f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e5      	bne.n	80087d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880c:	2b01      	cmp	r3, #1
 800880e:	d118      	bne.n	8008842 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	60bb      	str	r3, [r7, #8]
   return(result);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	647b      	str	r3, [r7, #68]	; 0x44
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6979      	ldr	r1, [r7, #20]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	613b      	str	r3, [r7, #16]
   return(result);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008856:	bf00      	nop
 8008858:	3754      	adds	r7, #84	; 0x54
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7ff fb51 	bl	8007f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b088      	sub	sp, #32
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	613b      	str	r3, [r7, #16]
   return(result);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e6      	bne.n	8008896 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fb1d 	bl	8007f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3720      	adds	r7, #32
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	2101      	movs	r1, #1
 80088f2:	484a      	ldr	r0, [pc, #296]	; (8008a1c <network_configure_activations+0x138>)
 80088f4:	f000 fc3c 	bl	8009170 <ai_platform_get_activations_map>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8084 	beq.w	8008a08 <network_configure_activations+0x124>
    /* Updating activations (byte) offsets */
    
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 8008900:	4b46      	ldr	r3, [pc, #280]	; (8008a1c <network_configure_activations+0x138>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008908:	4a45      	ldr	r2, [pc, #276]	; (8008a20 <network_configure_activations+0x13c>)
 800890a:	6093      	str	r3, [r2, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 800890c:	4b43      	ldr	r3, [pc, #268]	; (8008a1c <network_configure_activations+0x138>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008914:	4a42      	ldr	r2, [pc, #264]	; (8008a20 <network_configure_activations+0x13c>)
 8008916:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 8008918:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <network_configure_activations+0x138>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008920:	4a40      	ldr	r2, [pc, #256]	; (8008a24 <network_configure_activations+0x140>)
 8008922:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 8008924:	4b3d      	ldr	r3, [pc, #244]	; (8008a1c <network_configure_activations+0x138>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800892c:	4a3d      	ldr	r2, [pc, #244]	; (8008a24 <network_configure_activations+0x140>)
 800892e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8008930:	4b3a      	ldr	r3, [pc, #232]	; (8008a1c <network_configure_activations+0x138>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	4a3c      	ldr	r2, [pc, #240]	; (8008a28 <network_configure_activations+0x144>)
 8008938:	6093      	str	r3, [r2, #8]
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 800893a:	4b38      	ldr	r3, [pc, #224]	; (8008a1c <network_configure_activations+0x138>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	4a39      	ldr	r2, [pc, #228]	; (8008a28 <network_configure_activations+0x144>)
 8008942:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 19772);
 8008944:	4b35      	ldr	r3, [pc, #212]	; (8008a1c <network_configure_activations+0x138>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	f644 533c 	movw	r3, #19772	; 0x4d3c
 800894c:	4413      	add	r3, r2
 800894e:	4a37      	ldr	r2, [pc, #220]	; (8008a2c <network_configure_activations+0x148>)
 8008950:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 19772);
 8008952:	4b32      	ldr	r3, [pc, #200]	; (8008a1c <network_configure_activations+0x138>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	f644 533c 	movw	r3, #19772	; 0x4d3c
 800895a:	4413      	add	r3, r2
 800895c:	4a33      	ldr	r2, [pc, #204]	; (8008a2c <network_configure_activations+0x148>)
 800895e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 8008960:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <network_configure_activations+0x138>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008968:	4413      	add	r3, r2
 800896a:	4a31      	ldr	r2, [pc, #196]	; (8008a30 <network_configure_activations+0x14c>)
 800896c:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 800896e:	4b2b      	ldr	r3, [pc, #172]	; (8008a1c <network_configure_activations+0x138>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008976:	4413      	add	r3, r2
 8008978:	4a2d      	ldr	r2, [pc, #180]	; (8008a30 <network_configure_activations+0x14c>)
 800897a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch2_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 800897c:	4b27      	ldr	r3, [pc, #156]	; (8008a1c <network_configure_activations+0x138>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008984:	4413      	add	r3, r2
 8008986:	4a2b      	ldr	r2, [pc, #172]	; (8008a34 <network_configure_activations+0x150>)
 8008988:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch2_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 800898a:	4b24      	ldr	r3, [pc, #144]	; (8008a1c <network_configure_activations+0x138>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008992:	4413      	add	r3, r2
 8008994:	4a27      	ldr	r2, [pc, #156]	; (8008a34 <network_configure_activations+0x150>)
 8008996:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008998:	4b20      	ldr	r3, [pc, #128]	; (8008a1c <network_configure_activations+0x138>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <network_configure_activations+0x154>)
 800899e:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80089a0:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <network_configure_activations+0x138>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <network_configure_activations+0x154>)
 80089a6:	60d3      	str	r3, [r2, #12]
    
    dense_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80089a8:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <network_configure_activations+0x138>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <network_configure_activations+0x158>)
 80089b0:	6093      	str	r3, [r2, #8]
    dense_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80089b2:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <network_configure_activations+0x138>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3308      	adds	r3, #8
 80089b8:	4a20      	ldr	r2, [pc, #128]	; (8008a3c <network_configure_activations+0x158>)
 80089ba:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 80089bc:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <network_configure_activations+0x138>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3318      	adds	r3, #24
 80089c2:	4a1f      	ldr	r2, [pc, #124]	; (8008a40 <network_configure_activations+0x15c>)
 80089c4:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 80089c6:	4b15      	ldr	r3, [pc, #84]	; (8008a1c <network_configure_activations+0x138>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <network_configure_activations+0x15c>)
 80089ce:	60d3      	str	r3, [r2, #12]
    
    dense_3_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80089d0:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <network_configure_activations+0x138>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1b      	ldr	r2, [pc, #108]	; (8008a44 <network_configure_activations+0x160>)
 80089d6:	6093      	str	r3, [r2, #8]
    dense_3_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80089d8:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <network_configure_activations+0x138>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a19      	ldr	r2, [pc, #100]	; (8008a44 <network_configure_activations+0x160>)
 80089de:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80089e0:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <network_configure_activations+0x138>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3308      	adds	r3, #8
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <network_configure_activations+0x164>)
 80089e8:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <network_configure_activations+0x138>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	4a15      	ldr	r2, [pc, #84]	; (8008a48 <network_configure_activations+0x164>)
 80089f2:	60d3      	str	r3, [r2, #12]
    
    nl_4_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <network_configure_activations+0x138>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a14      	ldr	r2, [pc, #80]	; (8008a4c <network_configure_activations+0x168>)
 80089fa:	6093      	str	r3, [r2, #8]
    nl_4_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <network_configure_activations+0x138>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a12      	ldr	r2, [pc, #72]	; (8008a4c <network_configure_activations+0x168>)
 8008a02:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e005      	b.n	8008a14 <network_configure_activations+0x130>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008a08:	2213      	movs	r2, #19
 8008a0a:	2130      	movs	r1, #48	; 0x30
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc07 	bl	8009220 <ai_platform_network_set_error>
  return false;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200019fc 	.word	0x200019fc
 8008a20:	200004cc 	.word	0x200004cc
 8008a24:	200004dc 	.word	0x200004dc
 8008a28:	200004ec 	.word	0x200004ec
 8008a2c:	2000058c 	.word	0x2000058c
 8008a30:	2000059c 	.word	0x2000059c
 8008a34:	200005ac 	.word	0x200005ac
 8008a38:	200004fc 	.word	0x200004fc
 8008a3c:	200005bc 	.word	0x200005bc
 8008a40:	2000050c 	.word	0x2000050c
 8008a44:	2000051c 	.word	0x2000051c
 8008a48:	2000052c 	.word	0x2000052c
 8008a4c:	2000053c 	.word	0x2000053c

08008a50 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	4828      	ldr	r0, [pc, #160]	; (8008b00 <network_configure_weights+0xb0>)
 8008a60:	f000 fb2e 	bl	80090c0 <ai_platform_get_weights_map>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d03f      	beq.n	8008aea <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a6a:	4b26      	ldr	r3, [pc, #152]	; (8008b04 <network_configure_weights+0xb4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a72:	4a24      	ldr	r2, [pc, #144]	; (8008b04 <network_configure_weights+0xb4>)
 8008a74:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <network_configure_weights+0xb0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a22      	ldr	r2, [pc, #136]	; (8008b04 <network_configure_weights+0xb4>)
 8008a7c:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8008a7e:	4b20      	ldr	r3, [pc, #128]	; (8008b00 <network_configure_weights+0xb0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a20      	ldr	r2, [pc, #128]	; (8008b04 <network_configure_weights+0xb4>)
 8008a84:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a86:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <network_configure_weights+0xb8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <network_configure_weights+0xb8>)
 8008a90:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 72);
 8008a92:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <network_configure_weights+0xb0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3348      	adds	r3, #72	; 0x48
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <network_configure_weights+0xb8>)
 8008a9a:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 72);
 8008a9c:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <network_configure_weights+0xb0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3348      	adds	r3, #72	; 0x48
 8008aa2:	4a19      	ldr	r2, [pc, #100]	; (8008b08 <network_configure_weights+0xb8>)
 8008aa4:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <network_configure_weights+0xbc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aae:	4a17      	ldr	r2, [pc, #92]	; (8008b0c <network_configure_weights+0xbc>)
 8008ab0:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 104);
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <network_configure_weights+0xb0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3368      	adds	r3, #104	; 0x68
 8008ab8:	4a14      	ldr	r2, [pc, #80]	; (8008b0c <network_configure_weights+0xbc>)
 8008aba:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 104);
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <network_configure_weights+0xb0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3368      	adds	r3, #104	; 0x68
 8008ac2:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <network_configure_weights+0xbc>)
 8008ac4:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <network_configure_weights+0xc0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <network_configure_weights+0xc0>)
 8008ad0:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <network_configure_weights+0xb0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3378      	adds	r3, #120	; 0x78
 8008ad8:	4a0d      	ldr	r2, [pc, #52]	; (8008b10 <network_configure_weights+0xc0>)
 8008ada:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8008adc:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <network_configure_weights+0xb0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3378      	adds	r3, #120	; 0x78
 8008ae2:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <network_configure_weights+0xc0>)
 8008ae4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e005      	b.n	8008af6 <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008aea:	2212      	movs	r2, #18
 8008aec:	2130      	movs	r1, #48	; 0x30
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb96 	bl	8009220 <ai_platform_network_set_error>
  return false;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20001a00 	.word	0x20001a00
 8008b04:	2000054c 	.word	0x2000054c
 8008b08:	2000055c 	.word	0x2000055c
 8008b0c:	2000056c 	.word	0x2000056c
 8008b10:	2000057c 	.word	0x2000057c

08008b14 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	2305      	movs	r3, #5
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2301      	movs	r3, #1
 8008b28:	4a04      	ldr	r2, [pc, #16]	; (8008b3c <ai_network_create+0x28>)
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb7d 	bl	800922c <ai_platform_network_create>
 8008b32:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000cfc 	.word	0x20000cfc

08008b40 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd21 	bl	8009594 <ai_platform_network_init>
 8008b52:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <ai_network_init+0x1e>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e028      	b.n	8008bb0 <ai_network_init+0x70>

  ai_bool ok = true;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff ff73 	bl	8008a50 <network_configure_weights>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bf14      	ite	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	2300      	moveq	r3, #0
 8008b7a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff feb0 	bl	80088e4 <network_configure_activations>
 8008b84:	4603      	mov	r3, r0
 8008b86:	461a      	mov	r2, r3
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bf14      	ite	ne
 8008b90:	2301      	movne	r3, #1
 8008b92:	2300      	moveq	r3, #0
 8008b94:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fe78 	bl	800988c <ai_platform_network_post_init>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bf14      	ite	ne
 8008ba8:	2301      	movne	r3, #1
 8008baa:	2300      	moveq	r3, #0
 8008bac:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008bae:	7afb      	ldrb	r3, [r7, #11]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 ff6b 	bl	8009aa4 <ai_platform_network_process>
 8008bce:	4603      	mov	r3, r0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8008bd8:	b4b0      	push	{r4, r5, r7}
 8008bda:	b08f      	sub	sp, #60	; 0x3c
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <ai_network_data_activations_buffer_get+0x60>)
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	623b      	str	r3, [r7, #32]
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
 8008bee:	2300      	movs	r3, #0
 8008bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bf2:	f24e 4340 	movw	r3, #58432	; 0xe440
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	2204      	movs	r2, #4
 8008c02:	f362 231f 	bfi	r3, r2, #8, #24
 8008c06:	633b      	str	r3, [r7, #48]	; 0x30
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <ai_network_data_activations_buffer_get+0x64>)
 8008c0a:	f107 040c 	add.w	r4, r7, #12
 8008c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008c14:	f107 030c 	add.w	r3, r7, #12
 8008c18:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	461d      	mov	r5, r3
 8008c1e:	f107 041c 	add.w	r4, r7, #28
 8008c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008c2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	373c      	adds	r7, #60	; 0x3c
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bcb0      	pop	{r4, r5, r7}
 8008c36:	4770      	bx	lr
 8008c38:	00040440 	.word	0x00040440
 8008c3c:	080187f4 	.word	0x080187f4

08008c40 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8008c40:	b4b0      	push	{r4, r5, r7}
 8008c42:	b08f      	sub	sp, #60	; 0x3c
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008c4a:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <ai_network_data_weights_buffer_get+0x60>)
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	623b      	str	r3, [r7, #32]
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
 8008c56:	2300      	movs	r3, #0
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c5a:	2380      	movs	r3, #128	; 0x80
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2204      	movs	r2, #4
 8008c68:	f362 231f 	bfi	r3, r2, #8, #24
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <ai_network_data_weights_buffer_get+0x64>)
 8008c70:	f107 040c 	add.w	r4, r7, #12
 8008c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	461d      	mov	r5, r3
 8008c84:	f107 041c 	add.w	r4, r7, #28
 8008c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008c90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	373c      	adds	r7, #60	; 0x3c
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bcb0      	pop	{r4, r5, r7}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40040440 	.word	0x40040440
 8008ca4:	08018804 	.word	0x08018804

08008ca8 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <ai_network_data_weights_get+0x10>)

}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	20000da0 	.word	0x20000da0

08008cbc <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	2101      	movs	r1, #1
 8008cca:	4825      	ldr	r0, [pc, #148]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008ccc:	f000 fa50 	bl	8009170 <ai_platform_get_activations_map>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d039      	beq.n	8008d4a <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    dense_input_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	333c      	adds	r3, #60	; 0x3c
 8008cdc:	4a21      	ldr	r2, [pc, #132]	; (8008d64 <sine_model_configure_activations+0xa8>)
 8008cde:	6093      	str	r3, [r2, #8]
    dense_input_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8008ce0:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	333c      	adds	r3, #60	; 0x3c
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <sine_model_configure_activations+0xa8>)
 8008ce8:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3340      	adds	r3, #64	; 0x40
 8008cf0:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <sine_model_configure_activations+0xac>)
 8008cf2:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3340      	adds	r3, #64	; 0x40
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <sine_model_configure_activations+0xac>)
 8008cfc:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008cfe:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3340      	adds	r3, #64	; 0x40
 8008d04:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <sine_model_configure_activations+0xb0>)
 8008d06:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3340      	adds	r3, #64	; 0x40
 8008d0e:	4a17      	ldr	r2, [pc, #92]	; (8008d6c <sine_model_configure_activations+0xb0>)
 8008d10:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <sine_model_configure_activations+0xb4>)
 8008d18:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <sine_model_configure_activations+0xb4>)
 8008d20:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3340      	adds	r3, #64	; 0x40
 8008d28:	4a12      	ldr	r2, [pc, #72]	; (8008d74 <sine_model_configure_activations+0xb8>)
 8008d2a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3340      	adds	r3, #64	; 0x40
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <sine_model_configure_activations+0xb8>)
 8008d34:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008d36:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a0f      	ldr	r2, [pc, #60]	; (8008d78 <sine_model_configure_activations+0xbc>)
 8008d3c:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <sine_model_configure_activations+0xa4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a0d      	ldr	r2, [pc, #52]	; (8008d78 <sine_model_configure_activations+0xbc>)
 8008d44:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e005      	b.n	8008d56 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008d4a:	2213      	movs	r2, #19
 8008d4c:	2130      	movs	r1, #48	; 0x30
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa66 	bl	8009220 <ai_platform_network_set_error>
  return false;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20001ab4 	.word	0x20001ab4
 8008d64:	20000dac 	.word	0x20000dac
 8008d68:	20000dbc 	.word	0x20000dbc
 8008d6c:	20000dcc 	.word	0x20000dcc
 8008d70:	20000ddc 	.word	0x20000ddc
 8008d74:	20000dec 	.word	0x20000dec
 8008d78:	20000dfc 	.word	0x20000dfc

08008d7c <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	2101      	movs	r1, #1
 8008d8a:	483b      	ldr	r0, [pc, #236]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008d8c:	f000 f998 	bl	80090c0 <ai_platform_get_weights_map>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d065      	beq.n	8008e62 <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <sine_model_configure_weights+0x100>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <sine_model_configure_weights+0x100>)
 8008da0:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8008da2:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a35      	ldr	r2, [pc, #212]	; (8008e7c <sine_model_configure_weights+0x100>)
 8008da8:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8008daa:	4b33      	ldr	r3, [pc, #204]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <sine_model_configure_weights+0x100>)
 8008db0:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008db2:	4b33      	ldr	r3, [pc, #204]	; (8008e80 <sine_model_configure_weights+0x104>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dba:	4a31      	ldr	r2, [pc, #196]	; (8008e80 <sine_model_configure_weights+0x104>)
 8008dbc:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8008dbe:	4b2e      	ldr	r3, [pc, #184]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3340      	adds	r3, #64	; 0x40
 8008dc4:	4a2e      	ldr	r2, [pc, #184]	; (8008e80 <sine_model_configure_weights+0x104>)
 8008dc6:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8008dc8:	4b2b      	ldr	r3, [pc, #172]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3340      	adds	r3, #64	; 0x40
 8008dce:	4a2c      	ldr	r2, [pc, #176]	; (8008e80 <sine_model_configure_weights+0x104>)
 8008dd0:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008dd2:	4b2c      	ldr	r3, [pc, #176]	; (8008e84 <sine_model_configure_weights+0x108>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dda:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <sine_model_configure_weights+0x108>)
 8008ddc:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8008dde:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3380      	adds	r3, #128	; 0x80
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <sine_model_configure_weights+0x108>)
 8008de6:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8008de8:	4b23      	ldr	r3, [pc, #140]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3380      	adds	r3, #128	; 0x80
 8008dee:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <sine_model_configure_weights+0x108>)
 8008df0:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008df2:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <sine_model_configure_weights+0x10c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dfa:	4a23      	ldr	r2, [pc, #140]	; (8008e88 <sine_model_configure_weights+0x10c>)
 8008dfc:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008e06:	4a20      	ldr	r2, [pc, #128]	; (8008e88 <sine_model_configure_weights+0x10c>)
 8008e08:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008e12:	4a1d      	ldr	r2, [pc, #116]	; (8008e88 <sine_model_configure_weights+0x10c>)
 8008e14:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e16:	4b1d      	ldr	r3, [pc, #116]	; (8008e8c <sine_model_configure_weights+0x110>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e1e:	4a1b      	ldr	r2, [pc, #108]	; (8008e8c <sine_model_configure_weights+0x110>)
 8008e20:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8008e22:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008e2a:	4a18      	ldr	r2, [pc, #96]	; (8008e8c <sine_model_configure_weights+0x110>)
 8008e2c:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8008e2e:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <sine_model_configure_weights+0x110>)
 8008e38:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <sine_model_configure_weights+0x114>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e42:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <sine_model_configure_weights+0x114>)
 8008e44:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	4a10      	ldr	r2, [pc, #64]	; (8008e90 <sine_model_configure_weights+0x114>)
 8008e50:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <sine_model_configure_weights+0xfc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5a:	4a0d      	ldr	r2, [pc, #52]	; (8008e90 <sine_model_configure_weights+0x114>)
 8008e5c:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e005      	b.n	8008e6e <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008e62:	2212      	movs	r2, #18
 8008e64:	2130      	movs	r1, #48	; 0x30
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f9da 	bl	8009220 <ai_platform_network_set_error>
  return false;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20001ab8 	.word	0x20001ab8
 8008e7c:	20000e0c 	.word	0x20000e0c
 8008e80:	20000e1c 	.word	0x20000e1c
 8008e84:	20000e2c 	.word	0x20000e2c
 8008e88:	20000e3c 	.word	0x20000e3c
 8008e8c:	20000e4c 	.word	0x20000e4c
 8008e90:	20000e5c 	.word	0x20000e5c

08008e94 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	2305      	movs	r3, #5
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4a04      	ldr	r2, [pc, #16]	; (8008ebc <ai_sine_model_create+0x28>)
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9bd 	bl	800922c <ai_platform_network_create>
 8008eb2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20001390 	.word	0x20001390

08008ec0 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fb61 	bl	8009594 <ai_platform_network_init>
 8008ed2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <ai_sine_model_init+0x1e>
 8008eda:	2300      	movs	r3, #0
 8008edc:	e028      	b.n	8008f30 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff ff49 	bl	8008d7c <sine_model_configure_weights>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2301      	movne	r3, #1
 8008ef8:	2300      	moveq	r3, #0
 8008efa:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fedc 	bl	8008cbc <sine_model_configure_activations>
 8008f04:	4603      	mov	r3, r0
 8008f06:	461a      	mov	r2, r3
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bf14      	ite	ne
 8008f10:	2301      	movne	r3, #1
 8008f12:	2300      	moveq	r3, #0
 8008f14:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcb8 	bl	800988c <ai_platform_network_post_init>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	4013      	ands	r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fdab 	bl	8009aa4 <ai_platform_network_process>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8008f58:	b4b0      	push	{r4, r5, r7}
 8008f5a:	b08f      	sub	sp, #60	; 0x3c
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008f62:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <ai_sine_model_data_activations_buffer_get+0x60>)
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6e:	2300      	movs	r3, #0
 8008f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f72:	2380      	movs	r3, #128	; 0x80
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f76:	2301      	movs	r3, #1
 8008f78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	2204      	movs	r2, #4
 8008f80:	f362 231f 	bfi	r3, r2, #8, #24
 8008f84:	633b      	str	r3, [r7, #48]	; 0x30
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <ai_sine_model_data_activations_buffer_get+0x64>)
 8008f88:	f107 040c 	add.w	r4, r7, #12
 8008f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f92:	f107 030c 	add.w	r3, r7, #12
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	461d      	mov	r5, r3
 8008f9c:	f107 041c 	add.w	r4, r7, #28
 8008fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fa4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008fa8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	373c      	adds	r7, #60	; 0x3c
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bcb0      	pop	{r4, r5, r7}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	00040440 	.word	0x00040440
 8008fbc:	08018824 	.word	0x08018824

08008fc0 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8008fc0:	b4b0      	push	{r4, r5, r7}
 8008fc2:	b08f      	sub	sp, #60	; 0x3c
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008fca:	4b15      	ldr	r3, [pc, #84]	; (8009020 <ai_sine_model_data_weights_buffer_get+0x60>)
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fda:	f240 5304 	movw	r3, #1284	; 0x504
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	2204      	movs	r2, #4
 8008fea:	f362 231f 	bfi	r3, r2, #8, #24
 8008fee:	633b      	str	r3, [r7, #48]	; 0x30
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <ai_sine_model_data_weights_buffer_get+0x64>)
 8008ff2:	f107 040c 	add.w	r4, r7, #12
 8008ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	461d      	mov	r5, r3
 8009006:	f107 041c 	add.w	r4, r7, #28
 800900a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800900c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800900e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009012:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	373c      	adds	r7, #60	; 0x3c
 800901a:	46bd      	mov	sp, r7
 800901c:	bcb0      	pop	{r4, r5, r7}
 800901e:	4770      	bx	lr
 8009020:	40040440 	.word	0x40040440
 8009024:	08018834 	.word	0x08018834

08009028 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <ai_sine_model_data_weights_get+0x10>)

}
 800902e:	4618      	mov	r0, r3
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20001434 	.word	0x20001434

0800903c <ai_buffer_get_size>:
 800903c:	b368      	cbz	r0, 800909a <ai_buffer_get_size+0x5e>
 800903e:	4b17      	ldr	r3, [pc, #92]	; (800909c <ai_buffer_get_size+0x60>)
 8009040:	4a17      	ldr	r2, [pc, #92]	; (80090a0 <ai_buffer_get_size+0x64>)
 8009042:	b410      	push	{r4}
 8009044:	6804      	ldr	r4, [r0, #0]
 8009046:	4023      	ands	r3, r4
 8009048:	4293      	cmp	r3, r2
 800904a:	d123      	bne.n	8009094 <ai_buffer_get_size+0x58>
 800904c:	b311      	cbz	r1, 8009094 <ai_buffer_get_size+0x58>
 800904e:	6984      	ldr	r4, [r0, #24]
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	321f      	adds	r2, #31
 8009054:	f022 021f 	bic.w	r2, r2, #31
 8009058:	7d03      	ldrb	r3, [r0, #20]
 800905a:	6941      	ldr	r1, [r0, #20]
 800905c:	f1a3 0301 	sub.w	r3, r3, #1
 8009060:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009064:	fab3 f383 	clz	r3, r3
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800906e:	da0c      	bge.n	800908a <ai_buffer_get_size+0x4e>
 8009070:	2b01      	cmp	r3, #1
 8009072:	d103      	bne.n	800907c <ai_buffer_get_size+0x40>
 8009074:	2802      	cmp	r0, #2
 8009076:	f04f 0302 	mov.w	r3, #2
 800907a:	d006      	beq.n	800908a <ai_buffer_get_size+0x4e>
 800907c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009080:	3301      	adds	r3, #1
 8009082:	4298      	cmp	r0, r3
 8009084:	fb01 f202 	mul.w	r2, r1, r2
 8009088:	d1f2      	bne.n	8009070 <ai_buffer_get_size+0x34>
 800908a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800908e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	6984      	ldr	r4, [r0, #24]
 8009096:	6862      	ldr	r2, [r4, #4]
 8009098:	e7de      	b.n	8009058 <ai_buffer_get_size+0x1c>
 800909a:	4770      	bx	lr
 800909c:	017fffff 	.word	0x017fffff
 80090a0:	000400c0 	.word	0x000400c0

080090a4 <ai_buffer_array_sane>:
 80090a4:	b138      	cbz	r0, 80090b6 <ai_buffer_array_sane+0x12>
 80090a6:	6843      	ldr	r3, [r0, #4]
 80090a8:	b123      	cbz	r3, 80090b4 <ai_buffer_array_sane+0x10>
 80090aa:	8840      	ldrh	r0, [r0, #2]
 80090ac:	3800      	subs	r0, #0
 80090ae:	bf18      	it	ne
 80090b0:	2001      	movne	r0, #1
 80090b2:	4770      	bx	lr
 80090b4:	4618      	mov	r0, r3
 80090b6:	4770      	bx	lr

080090b8 <_ai_platform_acquire_crc>:
 80090b8:	2001      	movs	r0, #1
 80090ba:	4770      	bx	lr

080090bc <_ai_platform_release_crc>:
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <ai_platform_get_weights_map>:
 80090c0:	2900      	cmp	r1, #0
 80090c2:	bf18      	it	ne
 80090c4:	2800      	cmpne	r0, #0
 80090c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c8:	bf0c      	ite	eq
 80090ca:	2401      	moveq	r4, #1
 80090cc:	2400      	movne	r4, #0
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	bf08      	it	eq
 80090d2:	f044 0401 	orreq.w	r4, r4, #1
 80090d6:	b114      	cbz	r4, 80090de <ai_platform_get_weights_map+0x1e>
 80090d8:	2400      	movs	r4, #0
 80090da:	4620      	mov	r0, r4
 80090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090de:	4616      	mov	r6, r2
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <ai_platform_get_weights_map+0xac>)
 80090e2:	6812      	ldr	r2, [r2, #0]
 80090e4:	4605      	mov	r5, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d022      	beq.n	8009132 <ai_platform_get_weights_map+0x72>
 80090ec:	6870      	ldr	r0, [r6, #4]
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d0f2      	beq.n	80090d8 <ai_platform_get_weights_map+0x18>
 80090f2:	6806      	ldr	r6, [r0, #0]
 80090f4:	429e      	cmp	r6, r3
 80090f6:	d006      	beq.n	8009106 <ai_platform_get_weights_map+0x46>
 80090f8:	f1a1 0401 	sub.w	r4, r1, #1
 80090fc:	6028      	str	r0, [r5, #0]
 80090fe:	fab4 f484 	clz	r4, r4
 8009102:	0964      	lsrs	r4, r4, #5
 8009104:	e7e9      	b.n	80090da <ai_platform_get_weights_map+0x1a>
 8009106:	3d04      	subs	r5, #4
 8009108:	4602      	mov	r2, r0
 800910a:	4621      	mov	r1, r4
 800910c:	e000      	b.n	8009110 <ai_platform_get_weights_map+0x50>
 800910e:	4619      	mov	r1, r3
 8009110:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009114:	42b3      	cmp	r3, r6
 8009116:	d025      	beq.n	8009164 <ai_platform_get_weights_map+0xa4>
 8009118:	f845 3f04 	str.w	r3, [r5, #4]!
 800911c:	1c4b      	adds	r3, r1, #1
 800911e:	429f      	cmp	r7, r3
 8009120:	d8f5      	bhi.n	800910e <ai_platform_get_weights_map+0x4e>
 8009122:	d1da      	bne.n	80090da <ai_platform_get_weights_map+0x1a>
 8009124:	3102      	adds	r1, #2
 8009126:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800912a:	42b3      	cmp	r3, r6
 800912c:	d1d5      	bne.n	80090da <ai_platform_get_weights_map+0x1a>
 800912e:	2401      	movs	r4, #1
 8009130:	e7d3      	b.n	80090da <ai_platform_get_weights_map+0x1a>
 8009132:	1d30      	adds	r0, r6, #4
 8009134:	f7ff ffb6 	bl	80090a4 <ai_buffer_array_sane>
 8009138:	2800      	cmp	r0, #0
 800913a:	d0cd      	beq.n	80090d8 <ai_platform_get_weights_map+0x18>
 800913c:	88f3      	ldrh	r3, [r6, #6]
 800913e:	429f      	cmp	r7, r3
 8009140:	d1ca      	bne.n	80090d8 <ai_platform_get_weights_map+0x18>
 8009142:	3d04      	subs	r5, #4
 8009144:	4622      	mov	r2, r4
 8009146:	68b3      	ldr	r3, [r6, #8]
 8009148:	4423      	add	r3, r4
 800914a:	341c      	adds	r4, #28
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	b123      	cbz	r3, 800915a <ai_platform_get_weights_map+0x9a>
 8009150:	3201      	adds	r2, #1
 8009152:	f845 3f04 	str.w	r3, [r5, #4]!
 8009156:	4297      	cmp	r7, r2
 8009158:	d8f5      	bhi.n	8009146 <ai_platform_get_weights_map+0x86>
 800915a:	1abc      	subs	r4, r7, r2
 800915c:	fab4 f484 	clz	r4, r4
 8009160:	0964      	lsrs	r4, r4, #5
 8009162:	e7ba      	b.n	80090da <ai_platform_get_weights_map+0x1a>
 8009164:	428f      	cmp	r7, r1
 8009166:	d1b8      	bne.n	80090da <ai_platform_get_weights_map+0x1a>
 8009168:	e7e1      	b.n	800912e <ai_platform_get_weights_map+0x6e>
 800916a:	bf00      	nop
 800916c:	a1facade 	.word	0xa1facade

08009170 <ai_platform_get_activations_map>:
 8009170:	2900      	cmp	r1, #0
 8009172:	bf18      	it	ne
 8009174:	2800      	cmpne	r0, #0
 8009176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009178:	bf0c      	ite	eq
 800917a:	2401      	moveq	r4, #1
 800917c:	2400      	movne	r4, #0
 800917e:	2a00      	cmp	r2, #0
 8009180:	bf08      	it	eq
 8009182:	f044 0401 	orreq.w	r4, r4, #1
 8009186:	b114      	cbz	r4, 800918e <ai_platform_get_activations_map+0x1e>
 8009188:	2400      	movs	r4, #0
 800918a:	4620      	mov	r0, r4
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918e:	4616      	mov	r6, r2
 8009190:	4b22      	ldr	r3, [pc, #136]	; (800921c <ai_platform_get_activations_map+0xac>)
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	4605      	mov	r5, r0
 8009196:	460f      	mov	r7, r1
 8009198:	429a      	cmp	r2, r3
 800919a:	d022      	beq.n	80091e2 <ai_platform_get_activations_map+0x72>
 800919c:	6a30      	ldr	r0, [r6, #32]
 800919e:	2800      	cmp	r0, #0
 80091a0:	d0f2      	beq.n	8009188 <ai_platform_get_activations_map+0x18>
 80091a2:	6806      	ldr	r6, [r0, #0]
 80091a4:	429e      	cmp	r6, r3
 80091a6:	d006      	beq.n	80091b6 <ai_platform_get_activations_map+0x46>
 80091a8:	f1a1 0401 	sub.w	r4, r1, #1
 80091ac:	6028      	str	r0, [r5, #0]
 80091ae:	fab4 f484 	clz	r4, r4
 80091b2:	0964      	lsrs	r4, r4, #5
 80091b4:	e7e9      	b.n	800918a <ai_platform_get_activations_map+0x1a>
 80091b6:	3d04      	subs	r5, #4
 80091b8:	4602      	mov	r2, r0
 80091ba:	4621      	mov	r1, r4
 80091bc:	e000      	b.n	80091c0 <ai_platform_get_activations_map+0x50>
 80091be:	4619      	mov	r1, r3
 80091c0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80091c4:	42b3      	cmp	r3, r6
 80091c6:	d026      	beq.n	8009216 <ai_platform_get_activations_map+0xa6>
 80091c8:	f845 3f04 	str.w	r3, [r5, #4]!
 80091cc:	1c4b      	adds	r3, r1, #1
 80091ce:	429f      	cmp	r7, r3
 80091d0:	d8f5      	bhi.n	80091be <ai_platform_get_activations_map+0x4e>
 80091d2:	d1da      	bne.n	800918a <ai_platform_get_activations_map+0x1a>
 80091d4:	3102      	adds	r1, #2
 80091d6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80091da:	42b3      	cmp	r3, r6
 80091dc:	d1d5      	bne.n	800918a <ai_platform_get_activations_map+0x1a>
 80091de:	2401      	movs	r4, #1
 80091e0:	e7d3      	b.n	800918a <ai_platform_get_activations_map+0x1a>
 80091e2:	f106 000c 	add.w	r0, r6, #12
 80091e6:	f7ff ff5d 	bl	80090a4 <ai_buffer_array_sane>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0cc      	beq.n	8009188 <ai_platform_get_activations_map+0x18>
 80091ee:	89f3      	ldrh	r3, [r6, #14]
 80091f0:	429f      	cmp	r7, r3
 80091f2:	d1c9      	bne.n	8009188 <ai_platform_get_activations_map+0x18>
 80091f4:	3d04      	subs	r5, #4
 80091f6:	4622      	mov	r2, r4
 80091f8:	6933      	ldr	r3, [r6, #16]
 80091fa:	4423      	add	r3, r4
 80091fc:	341c      	adds	r4, #28
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b123      	cbz	r3, 800920c <ai_platform_get_activations_map+0x9c>
 8009202:	3201      	adds	r2, #1
 8009204:	f845 3f04 	str.w	r3, [r5, #4]!
 8009208:	4297      	cmp	r7, r2
 800920a:	d8f5      	bhi.n	80091f8 <ai_platform_get_activations_map+0x88>
 800920c:	1abc      	subs	r4, r7, r2
 800920e:	fab4 f484 	clz	r4, r4
 8009212:	0964      	lsrs	r4, r4, #5
 8009214:	e7b9      	b.n	800918a <ai_platform_get_activations_map+0x1a>
 8009216:	428f      	cmp	r7, r1
 8009218:	d1b7      	bne.n	800918a <ai_platform_get_activations_map+0x1a>
 800921a:	e7e0      	b.n	80091de <ai_platform_get_activations_map+0x6e>
 800921c:	a1facade 	.word	0xa1facade

08009220 <ai_platform_network_set_error>:
 8009220:	b110      	cbz	r0, 8009228 <ai_platform_network_set_error+0x8>
 8009222:	3010      	adds	r0, #16
 8009224:	f001 b978 	b.w	800a518 <core_set_error>
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <ai_platform_network_create>:
 800922c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009230:	b083      	sub	sp, #12
 8009232:	4604      	mov	r4, r0
 8009234:	4615      	mov	r5, r2
 8009236:	461e      	mov	r6, r3
 8009238:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800923c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8009240:	f7ff ff3a 	bl	80090b8 <_ai_platform_acquire_crc>
 8009244:	2800      	cmp	r0, #0
 8009246:	f000 80ba 	beq.w	80093be <ai_platform_network_create+0x192>
 800924a:	4bb3      	ldr	r3, [pc, #716]	; (8009518 <ai_platform_network_create+0x2ec>)
 800924c:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8009250:	4601      	mov	r1, r0
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009258:	eb03 020c 	add.w	r2, r3, ip
 800925c:	2a01      	cmp	r2, #1
 800925e:	f240 80a5 	bls.w	80093ac <ai_platform_network_create+0x180>
 8009262:	f240 4249 	movw	r2, #1097	; 0x449
 8009266:	4293      	cmp	r3, r2
 8009268:	f000 80a0 	beq.w	80093ac <ai_platform_network_create+0x180>
 800926c:	4aab      	ldr	r2, [pc, #684]	; (800951c <ai_platform_network_create+0x2f0>)
 800926e:	6813      	ldr	r3, [r2, #0]
 8009270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009274:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009278:	f000 80b7 	beq.w	80093ea <ai_platform_network_create+0x1be>
 800927c:	6813      	ldr	r3, [r2, #0]
 800927e:	f240 4c83 	movw	ip, #1155	; 0x483
 8009282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009286:	4563      	cmp	r3, ip
 8009288:	f000 809f 	beq.w	80093ca <ai_platform_network_create+0x19e>
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009292:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009296:	f040 8090 	bne.w	80093ba <ai_platform_network_create+0x18e>
 800929a:	4ba1      	ldr	r3, [pc, #644]	; (8009520 <ai_platform_network_create+0x2f4>)
 800929c:	2218      	movs	r2, #24
 800929e:	609a      	str	r2, [r3, #8]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	2a18      	cmp	r2, #24
 80092a4:	f040 8089 	bne.w	80093ba <ai_platform_network_create+0x18e>
 80092a8:	2201      	movs	r2, #1
 80092aa:	609a      	str	r2, [r3, #8]
 80092ac:	689a      	ldr	r2, [r3, #8]
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	d1fc      	bne.n	80092ac <ai_platform_network_create+0x80>
 80092b2:	4608      	mov	r0, r1
 80092b4:	f7ff ff02 	bl	80090bc <_ai_platform_release_crc>
 80092b8:	4a9a      	ldr	r2, [pc, #616]	; (8009524 <ai_platform_network_create+0x2f8>)
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	f023 0301 	bic.w	r3, r3, #1
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	f7ff fef9 	bl	80090b8 <_ai_platform_acquire_crc>
 80092c6:	4b94      	ldr	r3, [pc, #592]	; (8009518 <ai_platform_network_create+0x2ec>)
 80092c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092d2:	189a      	adds	r2, r3, r2
 80092d4:	2a01      	cmp	r2, #1
 80092d6:	f240 809e 	bls.w	8009416 <ai_platform_network_create+0x1ea>
 80092da:	f240 4249 	movw	r2, #1097	; 0x449
 80092de:	4293      	cmp	r3, r2
 80092e0:	f000 8099 	beq.w	8009416 <ai_platform_network_create+0x1ea>
 80092e4:	4a8d      	ldr	r2, [pc, #564]	; (800951c <ai_platform_network_create+0x2f0>)
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80092f0:	f000 809f 	beq.w	8009432 <ai_platform_network_create+0x206>
 80092f4:	6813      	ldr	r3, [r2, #0]
 80092f6:	f240 4183 	movw	r1, #1155	; 0x483
 80092fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092fe:	428b      	cmp	r3, r1
 8009300:	f000 80c0 	beq.w	8009484 <ai_platform_network_create+0x258>
 8009304:	6813      	ldr	r3, [r2, #0]
 8009306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800930a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800930e:	f000 80d9 	beq.w	80094c4 <ai_platform_network_create+0x298>
 8009312:	f7ff fed3 	bl	80090bc <_ai_platform_release_crc>
 8009316:	2c00      	cmp	r4, #0
 8009318:	f000 80b1 	beq.w	800947e <ai_platform_network_create+0x252>
 800931c:	4b82      	ldr	r3, [pc, #520]	; (8009528 <ai_platform_network_create+0x2fc>)
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	6025      	str	r5, [r4, #0]
 8009322:	f001 f8f7 	bl	800a514 <core_init>
 8009326:	2800      	cmp	r0, #0
 8009328:	f000 8095 	beq.w	8009456 <ai_platform_network_create+0x22a>
 800932c:	4a7d      	ldr	r2, [pc, #500]	; (8009524 <ai_platform_network_create+0x2f8>)
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	f7ff febf 	bl	80090b8 <_ai_platform_acquire_crc>
 800933a:	4b77      	ldr	r3, [pc, #476]	; (8009518 <ai_platform_network_create+0x2ec>)
 800933c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009346:	185a      	adds	r2, r3, r1
 8009348:	2a01      	cmp	r2, #1
 800934a:	f240 80ad 	bls.w	80094a8 <ai_platform_network_create+0x27c>
 800934e:	f240 4249 	movw	r2, #1097	; 0x449
 8009352:	4293      	cmp	r3, r2
 8009354:	f000 80a8 	beq.w	80094a8 <ai_platform_network_create+0x27c>
 8009358:	4a70      	ldr	r2, [pc, #448]	; (800951c <ai_platform_network_create+0x2f0>)
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009360:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009364:	f000 80bc 	beq.w	80094e0 <ai_platform_network_create+0x2b4>
 8009368:	6813      	ldr	r3, [r2, #0]
 800936a:	f240 4183 	movw	r1, #1155	; 0x483
 800936e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009372:	428b      	cmp	r3, r1
 8009374:	f000 80e2 	beq.w	800953c <ai_platform_network_create+0x310>
 8009378:	6813      	ldr	r3, [r2, #0]
 800937a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800937e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009382:	f000 80ed 	beq.w	8009560 <ai_platform_network_create+0x334>
 8009386:	f7ff fe99 	bl	80090bc <_ai_platform_release_crc>
 800938a:	2200      	movs	r2, #0
 800938c:	4639      	mov	r1, r7
 800938e:	4630      	mov	r0, r6
 8009390:	f00b f906 	bl	80145a0 <ai_version_get>
 8009394:	4681      	mov	r9, r0
 8009396:	2200      	movs	r2, #0
 8009398:	2105      	movs	r1, #5
 800939a:	2001      	movs	r0, #1
 800939c:	f00b f900 	bl	80145a0 <ai_version_get>
 80093a0:	4581      	cmp	r9, r0
 80093a2:	f000 80af 	beq.w	8009504 <ai_platform_network_create+0x2d8>
 80093a6:	f04f 0901 	mov.w	r9, #1
 80093aa:	e056      	b.n	800945a <ai_platform_network_create+0x22e>
 80093ac:	4b5c      	ldr	r3, [pc, #368]	; (8009520 <ai_platform_network_create+0x2f4>)
 80093ae:	2218      	movs	r2, #24
 80093b0:	609a      	str	r2, [r3, #8]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	2a18      	cmp	r2, #24
 80093b6:	d028      	beq.n	800940a <ai_platform_network_create+0x1de>
 80093b8:	4608      	mov	r0, r1
 80093ba:	f7ff fe7f 	bl	80090bc <_ai_platform_release_crc>
 80093be:	f244 1333 	movw	r3, #16691	; 0x4133
 80093c2:	4618      	mov	r0, r3
 80093c4:	b003      	add	sp, #12
 80093c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ca:	4a58      	ldr	r2, [pc, #352]	; (800952c <ai_platform_network_create+0x300>)
 80093cc:	2318      	movs	r3, #24
 80093ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80093d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80093d6:	2b18      	cmp	r3, #24
 80093d8:	d1ef      	bne.n	80093ba <ai_platform_network_create+0x18e>
 80093da:	2301      	movs	r3, #1
 80093dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80093e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1fb      	bne.n	80093e0 <ai_platform_network_create+0x1b4>
 80093e8:	e763      	b.n	80092b2 <ai_platform_network_create+0x86>
 80093ea:	4a50      	ldr	r2, [pc, #320]	; (800952c <ai_platform_network_create+0x300>)
 80093ec:	2318      	movs	r3, #24
 80093ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80093f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80093f6:	2b18      	cmp	r3, #24
 80093f8:	d1df      	bne.n	80093ba <ai_platform_network_create+0x18e>
 80093fa:	2301      	movs	r3, #1
 80093fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009400:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1fb      	bne.n	8009400 <ai_platform_network_create+0x1d4>
 8009408:	e753      	b.n	80092b2 <ai_platform_network_create+0x86>
 800940a:	2201      	movs	r2, #1
 800940c:	609a      	str	r2, [r3, #8]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	2a00      	cmp	r2, #0
 8009412:	d1fc      	bne.n	800940e <ai_platform_network_create+0x1e2>
 8009414:	e74d      	b.n	80092b2 <ai_platform_network_create+0x86>
 8009416:	4a42      	ldr	r2, [pc, #264]	; (8009520 <ai_platform_network_create+0x2f4>)
 8009418:	2301      	movs	r3, #1
 800941a:	6093      	str	r3, [r2, #8]
 800941c:	6891      	ldr	r1, [r2, #8]
 800941e:	2900      	cmp	r1, #0
 8009420:	d1fc      	bne.n	800941c <ai_platform_network_create+0x1f0>
 8009422:	4b43      	ldr	r3, [pc, #268]	; (8009530 <ai_platform_network_create+0x304>)
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	4b43      	ldr	r3, [pc, #268]	; (8009534 <ai_platform_network_create+0x308>)
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	f43f af71 	beq.w	8009312 <ai_platform_network_create+0xe6>
 8009430:	e7fe      	b.n	8009430 <ai_platform_network_create+0x204>
 8009432:	4a3e      	ldr	r2, [pc, #248]	; (800952c <ai_platform_network_create+0x300>)
 8009434:	2301      	movs	r3, #1
 8009436:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800943a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1fb      	bne.n	800943a <ai_platform_network_create+0x20e>
 8009442:	4b3b      	ldr	r3, [pc, #236]	; (8009530 <ai_platform_network_create+0x304>)
 8009444:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009448:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <ai_platform_network_create+0x308>)
 800944a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800944e:	429a      	cmp	r2, r3
 8009450:	f43f af5f 	beq.w	8009312 <ai_platform_network_create+0xe6>
 8009454:	e7fe      	b.n	8009454 <ai_platform_network_create+0x228>
 8009456:	f04f 0930 	mov.w	r9, #48	; 0x30
 800945a:	2300      	movs	r3, #0
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	2410      	movs	r4, #16
 8009460:	4642      	mov	r2, r8
 8009462:	4639      	mov	r1, r7
 8009464:	4630      	mov	r0, r6
 8009466:	f00b f89b 	bl	80145a0 <ai_version_get>
 800946a:	2300      	movs	r3, #0
 800946c:	64a8      	str	r0, [r5, #72]	; 0x48
 800946e:	f369 0307 	bfi	r3, r9, #0, #8
 8009472:	f364 231f 	bfi	r3, r4, #8, #24
 8009476:	4618      	mov	r0, r3
 8009478:	b003      	add	sp, #12
 800947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947e:	f241 0310 	movw	r3, #4112	; 0x1010
 8009482:	e79e      	b.n	80093c2 <ai_platform_network_create+0x196>
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <ai_platform_network_create+0x300>)
 8009486:	2301      	movs	r3, #1
 8009488:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800948c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1fb      	bne.n	800948c <ai_platform_network_create+0x260>
 8009494:	4b26      	ldr	r3, [pc, #152]	; (8009530 <ai_platform_network_create+0x304>)
 8009496:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800949a:	4b26      	ldr	r3, [pc, #152]	; (8009534 <ai_platform_network_create+0x308>)
 800949c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094a0:	429a      	cmp	r2, r3
 80094a2:	f43f af36 	beq.w	8009312 <ai_platform_network_create+0xe6>
 80094a6:	e7fe      	b.n	80094a6 <ai_platform_network_create+0x27a>
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <ai_platform_network_create+0x2f4>)
 80094aa:	2301      	movs	r3, #1
 80094ac:	6093      	str	r3, [r2, #8]
 80094ae:	6893      	ldr	r3, [r2, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1fc      	bne.n	80094ae <ai_platform_network_create+0x282>
 80094b4:	4b1e      	ldr	r3, [pc, #120]	; (8009530 <ai_platform_network_create+0x304>)
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <ai_platform_network_create+0x308>)
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	f43f af62 	beq.w	8009386 <ai_platform_network_create+0x15a>
 80094c2:	e7fe      	b.n	80094c2 <ai_platform_network_create+0x296>
 80094c4:	4a16      	ldr	r2, [pc, #88]	; (8009520 <ai_platform_network_create+0x2f4>)
 80094c6:	2301      	movs	r3, #1
 80094c8:	6093      	str	r3, [r2, #8]
 80094ca:	6893      	ldr	r3, [r2, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1fc      	bne.n	80094ca <ai_platform_network_create+0x29e>
 80094d0:	4b17      	ldr	r3, [pc, #92]	; (8009530 <ai_platform_network_create+0x304>)
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	4b17      	ldr	r3, [pc, #92]	; (8009534 <ai_platform_network_create+0x308>)
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	f43f af1a 	beq.w	8009312 <ai_platform_network_create+0xe6>
 80094de:	e7fe      	b.n	80094de <ai_platform_network_create+0x2b2>
 80094e0:	4a12      	ldr	r2, [pc, #72]	; (800952c <ai_platform_network_create+0x300>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80094e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1fb      	bne.n	80094e8 <ai_platform_network_create+0x2bc>
 80094f0:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <ai_platform_network_create+0x304>)
 80094f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <ai_platform_network_create+0x308>)
 80094f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094fc:	429a      	cmp	r2, r3
 80094fe:	f43f af42 	beq.w	8009386 <ai_platform_network_create+0x15a>
 8009502:	e7fe      	b.n	8009502 <ai_platform_network_create+0x2d6>
 8009504:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <ai_platform_network_create+0x30c>)
 8009506:	a801      	add	r0, sp, #4
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	f002 fe1d 	bl	800c148 <ai_check_custom_types>
 800950e:	2800      	cmp	r0, #0
 8009510:	d034      	beq.n	800957c <ai_platform_network_create+0x350>
 8009512:	2400      	movs	r4, #0
 8009514:	46a1      	mov	r9, r4
 8009516:	e7a3      	b.n	8009460 <ai_platform_network_create+0x234>
 8009518:	e0042000 	.word	0xe0042000
 800951c:	5c001000 	.word	0x5c001000
 8009520:	40023000 	.word	0x40023000
 8009524:	e0002000 	.word	0xe0002000
 8009528:	a1c00100 	.word	0xa1c00100
 800952c:	58024000 	.word	0x58024000
 8009530:	f407a5c2 	.word	0xf407a5c2
 8009534:	b5e8b5cd 	.word	0xb5e8b5cd
 8009538:	84048403 	.word	0x84048403
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <ai_platform_network_create+0x358>)
 800953e:	2201      	movs	r2, #1
 8009540:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009544:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009548:	2a00      	cmp	r2, #0
 800954a:	d1fb      	bne.n	8009544 <ai_platform_network_create+0x318>
 800954c:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <ai_platform_network_create+0x35c>)
 800954e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009552:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <ai_platform_network_create+0x360>)
 8009558:	429a      	cmp	r2, r3
 800955a:	f43f af14 	beq.w	8009386 <ai_platform_network_create+0x15a>
 800955e:	e7fe      	b.n	800955e <ai_platform_network_create+0x332>
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <ai_platform_network_create+0x364>)
 8009562:	2201      	movs	r2, #1
 8009564:	609a      	str	r2, [r3, #8]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	2a00      	cmp	r2, #0
 800956a:	d1fc      	bne.n	8009566 <ai_platform_network_create+0x33a>
 800956c:	4a06      	ldr	r2, [pc, #24]	; (8009588 <ai_platform_network_create+0x35c>)
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b06      	ldr	r3, [pc, #24]	; (800958c <ai_platform_network_create+0x360>)
 8009574:	429a      	cmp	r2, r3
 8009576:	f43f af06 	beq.w	8009386 <ai_platform_network_create+0x15a>
 800957a:	e7fe      	b.n	800957a <ai_platform_network_create+0x34e>
 800957c:	f04f 0902 	mov.w	r9, #2
 8009580:	e76b      	b.n	800945a <ai_platform_network_create+0x22e>
 8009582:	bf00      	nop
 8009584:	58024000 	.word	0x58024000
 8009588:	f407a5c2 	.word	0xf407a5c2
 800958c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009590:	40023000 	.word	0x40023000

08009594 <ai_platform_network_init>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	2800      	cmp	r0, #0
 800959a:	d04f      	beq.n	800963c <ai_platform_network_init+0xa8>
 800959c:	4bad      	ldr	r3, [pc, #692]	; (8009854 <ai_platform_network_init+0x2c0>)
 800959e:	4604      	mov	r4, r0
 80095a0:	6802      	ldr	r2, [r0, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d14a      	bne.n	800963c <ai_platform_network_init+0xa8>
 80095a6:	4aac      	ldr	r2, [pc, #688]	; (8009858 <ai_platform_network_init+0x2c4>)
 80095a8:	460d      	mov	r5, r1
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	f7ff fd81 	bl	80090b8 <_ai_platform_acquire_crc>
 80095b6:	4ba9      	ldr	r3, [pc, #676]	; (800985c <ai_platform_network_init+0x2c8>)
 80095b8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095c2:	189a      	adds	r2, r3, r2
 80095c4:	2a01      	cmp	r2, #1
 80095c6:	d975      	bls.n	80096b4 <ai_platform_network_init+0x120>
 80095c8:	f240 4249 	movw	r2, #1097	; 0x449
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d071      	beq.n	80096b4 <ai_platform_network_init+0x120>
 80095d0:	4aa3      	ldr	r2, [pc, #652]	; (8009860 <ai_platform_network_init+0x2cc>)
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80095dc:	f000 8088 	beq.w	80096f0 <ai_platform_network_init+0x15c>
 80095e0:	6813      	ldr	r3, [r2, #0]
 80095e2:	f240 4183 	movw	r1, #1155	; 0x483
 80095e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ea:	428b      	cmp	r3, r1
 80095ec:	f000 80cc 	beq.w	8009788 <ai_platform_network_init+0x1f4>
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095f6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80095fa:	f000 80f5 	beq.w	80097e8 <ai_platform_network_init+0x254>
 80095fe:	f7ff fd5d 	bl	80090bc <_ai_platform_release_crc>
 8009602:	2d00      	cmp	r5, #0
 8009604:	f000 80fe 	beq.w	8009804 <ai_platform_network_init+0x270>
 8009608:	4b96      	ldr	r3, [pc, #600]	; (8009864 <ai_platform_network_init+0x2d0>)
 800960a:	682a      	ldr	r2, [r5, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	f040 8081 	bne.w	8009714 <ai_platform_network_init+0x180>
 8009612:	692b      	ldr	r3, [r5, #16]
 8009614:	89ae      	ldrh	r6, [r5, #12]
 8009616:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800961a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800961e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009620:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8009624:	2303      	movs	r3, #3
 8009626:	84a6      	strh	r6, [r4, #36]	; 0x24
 8009628:	4626      	mov	r6, r4
 800962a:	4620      	mov	r0, r4
 800962c:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8009630:	60e3      	str	r3, [r4, #12]
 8009632:	f002 fdb1 	bl	800c198 <ai_layers_init_all>
 8009636:	4630      	mov	r0, r6
 8009638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963c:	4a86      	ldr	r2, [pc, #536]	; (8009858 <ai_platform_network_init+0x2c4>)
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	f7ff fd37 	bl	80090b8 <_ai_platform_acquire_crc>
 800964a:	4b84      	ldr	r3, [pc, #528]	; (800985c <ai_platform_network_init+0x2c8>)
 800964c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009656:	185a      	adds	r2, r3, r1
 8009658:	2a01      	cmp	r2, #1
 800965a:	d91e      	bls.n	800969a <ai_platform_network_init+0x106>
 800965c:	f240 4249 	movw	r2, #1097	; 0x449
 8009660:	4293      	cmp	r3, r2
 8009662:	d01a      	beq.n	800969a <ai_platform_network_init+0x106>
 8009664:	4a7e      	ldr	r2, [pc, #504]	; (8009860 <ai_platform_network_init+0x2cc>)
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800966c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009670:	d02d      	beq.n	80096ce <ai_platform_network_init+0x13a>
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	f240 4183 	movw	r1, #1155	; 0x483
 8009678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800967c:	428b      	cmp	r3, r1
 800967e:	d072      	beq.n	8009766 <ai_platform_network_init+0x1d2>
 8009680:	6813      	ldr	r3, [r2, #0]
 8009682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009686:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800968a:	f000 809f 	beq.w	80097cc <ai_platform_network_init+0x238>
 800968e:	2600      	movs	r6, #0
 8009690:	f7ff fd14 	bl	80090bc <_ai_platform_release_crc>
 8009694:	4630      	mov	r0, r6
 8009696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969a:	4a73      	ldr	r2, [pc, #460]	; (8009868 <ai_platform_network_init+0x2d4>)
 800969c:	2301      	movs	r3, #1
 800969e:	6093      	str	r3, [r2, #8]
 80096a0:	6893      	ldr	r3, [r2, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1fc      	bne.n	80096a0 <ai_platform_network_init+0x10c>
 80096a6:	4971      	ldr	r1, [pc, #452]	; (800986c <ai_platform_network_init+0x2d8>)
 80096a8:	4b71      	ldr	r3, [pc, #452]	; (8009870 <ai_platform_network_init+0x2dc>)
 80096aa:	6011      	str	r1, [r2, #0]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d0ed      	beq.n	800968e <ai_platform_network_init+0xfa>
 80096b2:	e7fe      	b.n	80096b2 <ai_platform_network_init+0x11e>
 80096b4:	4a6c      	ldr	r2, [pc, #432]	; (8009868 <ai_platform_network_init+0x2d4>)
 80096b6:	2301      	movs	r3, #1
 80096b8:	6093      	str	r3, [r2, #8]
 80096ba:	6893      	ldr	r3, [r2, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1fc      	bne.n	80096ba <ai_platform_network_init+0x126>
 80096c0:	4b6a      	ldr	r3, [pc, #424]	; (800986c <ai_platform_network_init+0x2d8>)
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	4b6a      	ldr	r3, [pc, #424]	; (8009870 <ai_platform_network_init+0x2dc>)
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d098      	beq.n	80095fe <ai_platform_network_init+0x6a>
 80096cc:	e7fe      	b.n	80096cc <ai_platform_network_init+0x138>
 80096ce:	4a69      	ldr	r2, [pc, #420]	; (8009874 <ai_platform_network_init+0x2e0>)
 80096d0:	2301      	movs	r3, #1
 80096d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1fb      	bne.n	80096d6 <ai_platform_network_init+0x142>
 80096de:	4963      	ldr	r1, [pc, #396]	; (800986c <ai_platform_network_init+0x2d8>)
 80096e0:	4b63      	ldr	r3, [pc, #396]	; (8009870 <ai_platform_network_init+0x2dc>)
 80096e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80096e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d0cf      	beq.n	800968e <ai_platform_network_init+0xfa>
 80096ee:	e7fe      	b.n	80096ee <ai_platform_network_init+0x15a>
 80096f0:	4a60      	ldr	r2, [pc, #384]	; (8009874 <ai_platform_network_init+0x2e0>)
 80096f2:	2301      	movs	r3, #1
 80096f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1fb      	bne.n	80096f8 <ai_platform_network_init+0x164>
 8009700:	4b5a      	ldr	r3, [pc, #360]	; (800986c <ai_platform_network_init+0x2d8>)
 8009702:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009706:	4b5a      	ldr	r3, [pc, #360]	; (8009870 <ai_platform_network_init+0x2dc>)
 8009708:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800970c:	429a      	cmp	r2, r3
 800970e:	f43f af76 	beq.w	80095fe <ai_platform_network_init+0x6a>
 8009712:	e7fe      	b.n	8009712 <ai_platform_network_init+0x17e>
 8009714:	2101      	movs	r1, #1
 8009716:	4628      	mov	r0, r5
 8009718:	f105 081c 	add.w	r8, r5, #28
 800971c:	686e      	ldr	r6, [r5, #4]
 800971e:	f7ff fc8d 	bl	800903c <ai_buffer_get_size>
 8009722:	4607      	mov	r7, r0
 8009724:	2101      	movs	r1, #1
 8009726:	4640      	mov	r0, r8
 8009728:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800972c:	f7ff fc86 	bl	800903c <ai_buffer_get_size>
 8009730:	2f00      	cmp	r7, #0
 8009732:	d13b      	bne.n	80097ac <ai_platform_network_init+0x218>
 8009734:	2800      	cmp	r0, #0
 8009736:	d079      	beq.n	800982c <ai_platform_network_init+0x298>
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	d07a      	beq.n	8009834 <ai_platform_network_init+0x2a0>
 800973e:	f04f 0c01 	mov.w	ip, #1
 8009742:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009744:	2600      	movs	r6, #0
 8009746:	83e7      	strh	r7, [r4, #30]
 8009748:	4563      	cmp	r3, ip
 800974a:	83a6      	strh	r6, [r4, #28]
 800974c:	d361      	bcc.n	8009812 <ai_platform_network_init+0x27e>
 800974e:	f1bc 0f00 	cmp.w	ip, #0
 8009752:	d07c      	beq.n	800984e <ai_platform_network_init+0x2ba>
 8009754:	4647      	mov	r7, r8
 8009756:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009758:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800975a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800975c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009760:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009764:	e75e      	b.n	8009624 <ai_platform_network_init+0x90>
 8009766:	4a43      	ldr	r2, [pc, #268]	; (8009874 <ai_platform_network_init+0x2e0>)
 8009768:	2301      	movs	r3, #1
 800976a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800976e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1fb      	bne.n	800976e <ai_platform_network_init+0x1da>
 8009776:	493d      	ldr	r1, [pc, #244]	; (800986c <ai_platform_network_init+0x2d8>)
 8009778:	4b3d      	ldr	r3, [pc, #244]	; (8009870 <ai_platform_network_init+0x2dc>)
 800977a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800977e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009782:	429a      	cmp	r2, r3
 8009784:	d083      	beq.n	800968e <ai_platform_network_init+0xfa>
 8009786:	e7fe      	b.n	8009786 <ai_platform_network_init+0x1f2>
 8009788:	4a3a      	ldr	r2, [pc, #232]	; (8009874 <ai_platform_network_init+0x2e0>)
 800978a:	2301      	movs	r3, #1
 800978c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009790:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1fb      	bne.n	8009790 <ai_platform_network_init+0x1fc>
 8009798:	4b34      	ldr	r3, [pc, #208]	; (800986c <ai_platform_network_init+0x2d8>)
 800979a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800979e:	4b34      	ldr	r3, [pc, #208]	; (8009870 <ai_platform_network_init+0x2dc>)
 80097a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097a4:	429a      	cmp	r2, r3
 80097a6:	f43f af2a 	beq.w	80095fe <ai_platform_network_init+0x6a>
 80097aa:	e7fe      	b.n	80097aa <ai_platform_network_init+0x216>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d137      	bne.n	8009820 <ai_platform_network_init+0x28c>
 80097b0:	4680      	mov	r8, r0
 80097b2:	4684      	mov	ip, r0
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	d044      	beq.n	8009842 <ai_platform_network_init+0x2ae>
 80097b8:	8be6      	ldrh	r6, [r4, #30]
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	d15c      	bne.n	8009878 <ai_platform_network_init+0x2e4>
 80097be:	2212      	movs	r2, #18
 80097c0:	2116      	movs	r1, #22
 80097c2:	f104 0010 	add.w	r0, r4, #16
 80097c6:	f000 fea7 	bl	800a518 <core_set_error>
 80097ca:	e763      	b.n	8009694 <ai_platform_network_init+0x100>
 80097cc:	4a26      	ldr	r2, [pc, #152]	; (8009868 <ai_platform_network_init+0x2d4>)
 80097ce:	2301      	movs	r3, #1
 80097d0:	6093      	str	r3, [r2, #8]
 80097d2:	6893      	ldr	r3, [r2, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1fc      	bne.n	80097d2 <ai_platform_network_init+0x23e>
 80097d8:	4924      	ldr	r1, [pc, #144]	; (800986c <ai_platform_network_init+0x2d8>)
 80097da:	4b25      	ldr	r3, [pc, #148]	; (8009870 <ai_platform_network_init+0x2dc>)
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	6812      	ldr	r2, [r2, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	f43f af54 	beq.w	800968e <ai_platform_network_init+0xfa>
 80097e6:	e7fe      	b.n	80097e6 <ai_platform_network_init+0x252>
 80097e8:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <ai_platform_network_init+0x2d4>)
 80097ea:	2301      	movs	r3, #1
 80097ec:	6093      	str	r3, [r2, #8]
 80097ee:	6893      	ldr	r3, [r2, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1fc      	bne.n	80097ee <ai_platform_network_init+0x25a>
 80097f4:	4b1d      	ldr	r3, [pc, #116]	; (800986c <ai_platform_network_init+0x2d8>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <ai_platform_network_init+0x2dc>)
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	f43f aefe 	beq.w	80095fe <ai_platform_network_init+0x6a>
 8009802:	e7fe      	b.n	8009802 <ai_platform_network_init+0x26e>
 8009804:	2110      	movs	r1, #16
 8009806:	2211      	movs	r2, #17
 8009808:	462e      	mov	r6, r5
 800980a:	1860      	adds	r0, r4, r1
 800980c:	f000 fe84 	bl	800a518 <core_set_error>
 8009810:	e740      	b.n	8009694 <ai_platform_network_init+0x100>
 8009812:	2213      	movs	r2, #19
 8009814:	2116      	movs	r1, #22
 8009816:	f104 0010 	add.w	r0, r4, #16
 800981a:	f000 fe7d 	bl	800a518 <core_set_error>
 800981e:	e739      	b.n	8009694 <ai_platform_network_init+0x100>
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	d006      	beq.n	8009834 <ai_platform_network_init+0x2a0>
 8009826:	f04f 0c01 	mov.w	ip, #1
 800982a:	e7c3      	b.n	80097b4 <ai_platform_network_init+0x220>
 800982c:	4607      	mov	r7, r0
 800982e:	4680      	mov	r8, r0
 8009830:	4684      	mov	ip, r0
 8009832:	e786      	b.n	8009742 <ai_platform_network_init+0x1ae>
 8009834:	2110      	movs	r1, #16
 8009836:	2213      	movs	r2, #19
 8009838:	2600      	movs	r6, #0
 800983a:	1860      	adds	r0, r4, r1
 800983c:	f000 fe6c 	bl	800a518 <core_set_error>
 8009840:	e728      	b.n	8009694 <ai_platform_network_init+0x100>
 8009842:	2110      	movs	r1, #16
 8009844:	2212      	movs	r2, #18
 8009846:	1860      	adds	r0, r4, r1
 8009848:	f000 fe66 	bl	800a518 <core_set_error>
 800984c:	e722      	b.n	8009694 <ai_platform_network_init+0x100>
 800984e:	4666      	mov	r6, ip
 8009850:	e6e8      	b.n	8009624 <ai_platform_network_init+0x90>
 8009852:	bf00      	nop
 8009854:	a1c00100 	.word	0xa1c00100
 8009858:	e0002000 	.word	0xe0002000
 800985c:	e0042000 	.word	0xe0042000
 8009860:	5c001000 	.word	0x5c001000
 8009864:	a1facade 	.word	0xa1facade
 8009868:	40023000 	.word	0x40023000
 800986c:	f407a5c2 	.word	0xf407a5c2
 8009870:	b5e8b5cd 	.word	0xb5e8b5cd
 8009874:	58024000 	.word	0x58024000
 8009878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800987a:	6a26      	ldr	r6, [r4, #32]
 800987c:	2701      	movs	r7, #1
 800987e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009884:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009888:	e75b      	b.n	8009742 <ai_platform_network_init+0x1ae>
 800988a:	bf00      	nop

0800988c <ai_platform_network_post_init>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	2800      	cmp	r0, #0
 8009890:	d04a      	beq.n	8009928 <ai_platform_network_post_init+0x9c>
 8009892:	4b7c      	ldr	r3, [pc, #496]	; (8009a84 <ai_platform_network_post_init+0x1f8>)
 8009894:	4604      	mov	r4, r0
 8009896:	6802      	ldr	r2, [r0, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d145      	bne.n	8009928 <ai_platform_network_post_init+0x9c>
 800989c:	4a7a      	ldr	r2, [pc, #488]	; (8009a88 <ai_platform_network_post_init+0x1fc>)
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	f023 0301 	bic.w	r3, r3, #1
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	f7ff fc07 	bl	80090b8 <_ai_platform_acquire_crc>
 80098aa:	4b78      	ldr	r3, [pc, #480]	; (8009a8c <ai_platform_network_post_init+0x200>)
 80098ac:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098b6:	189a      	adds	r2, r3, r2
 80098b8:	2a01      	cmp	r2, #1
 80098ba:	d96e      	bls.n	800999a <ai_platform_network_post_init+0x10e>
 80098bc:	f240 4249 	movw	r2, #1097	; 0x449
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d06a      	beq.n	800999a <ai_platform_network_post_init+0x10e>
 80098c4:	4a72      	ldr	r2, [pc, #456]	; (8009a90 <ai_platform_network_post_init+0x204>)
 80098c6:	6813      	ldr	r3, [r2, #0]
 80098c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098cc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80098d0:	f000 8081 	beq.w	80099d6 <ai_platform_network_post_init+0x14a>
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	f240 4183 	movw	r1, #1155	; 0x483
 80098da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098de:	428b      	cmp	r3, r1
 80098e0:	f000 80a3 	beq.w	8009a2a <ai_platform_network_post_init+0x19e>
 80098e4:	6813      	ldr	r3, [r2, #0]
 80098e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098ea:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80098ee:	f000 80bb 	beq.w	8009a68 <ai_platform_network_post_init+0x1dc>
 80098f2:	f7ff fbe3 	bl	80090bc <_ai_platform_release_crc>
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	f013 0502 	ands.w	r5, r3, #2
 80098fc:	d07d      	beq.n	80099fa <ai_platform_network_post_init+0x16e>
 80098fe:	4620      	mov	r0, r4
 8009900:	f002 fc58 	bl	800c1b4 <ai_layers_post_init_all>
 8009904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009906:	b16b      	cbz	r3, 8009924 <ai_platform_network_post_init+0x98>
 8009908:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800990a:	e007      	b.n	800991c <ai_platform_network_post_init+0x90>
 800990c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009910:	4798      	blx	r3
 8009912:	692b      	ldr	r3, [r5, #16]
 8009914:	b133      	cbz	r3, 8009924 <ai_platform_network_post_init+0x98>
 8009916:	42ab      	cmp	r3, r5
 8009918:	461d      	mov	r5, r3
 800991a:	d003      	beq.n	8009924 <ai_platform_network_post_init+0x98>
 800991c:	4629      	mov	r1, r5
 800991e:	2000      	movs	r0, #0
 8009920:	2d00      	cmp	r5, #0
 8009922:	d1f3      	bne.n	800990c <ai_platform_network_post_init+0x80>
 8009924:	2001      	movs	r0, #1
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	4a57      	ldr	r2, [pc, #348]	; (8009a88 <ai_platform_network_post_init+0x1fc>)
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	f7ff fbc1 	bl	80090b8 <_ai_platform_acquire_crc>
 8009936:	4b55      	ldr	r3, [pc, #340]	; (8009a8c <ai_platform_network_post_init+0x200>)
 8009938:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009942:	185a      	adds	r2, r3, r1
 8009944:	2a01      	cmp	r2, #1
 8009946:	d91b      	bls.n	8009980 <ai_platform_network_post_init+0xf4>
 8009948:	f240 4249 	movw	r2, #1097	; 0x449
 800994c:	4293      	cmp	r3, r2
 800994e:	d017      	beq.n	8009980 <ai_platform_network_post_init+0xf4>
 8009950:	4a4f      	ldr	r2, [pc, #316]	; (8009a90 <ai_platform_network_post_init+0x204>)
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009958:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800995c:	d02a      	beq.n	80099b4 <ai_platform_network_post_init+0x128>
 800995e:	6813      	ldr	r3, [r2, #0]
 8009960:	f240 4183 	movw	r1, #1155	; 0x483
 8009964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009968:	428b      	cmp	r3, r1
 800996a:	d04d      	beq.n	8009a08 <ai_platform_network_post_init+0x17c>
 800996c:	6813      	ldr	r3, [r2, #0]
 800996e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009972:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009976:	d06a      	beq.n	8009a4e <ai_platform_network_post_init+0x1c2>
 8009978:	f7ff fba0 	bl	80090bc <_ai_platform_release_crc>
 800997c:	2000      	movs	r0, #0
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	4a44      	ldr	r2, [pc, #272]	; (8009a94 <ai_platform_network_post_init+0x208>)
 8009982:	2301      	movs	r3, #1
 8009984:	6093      	str	r3, [r2, #8]
 8009986:	6893      	ldr	r3, [r2, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1fc      	bne.n	8009986 <ai_platform_network_post_init+0xfa>
 800998c:	4942      	ldr	r1, [pc, #264]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 800998e:	4b43      	ldr	r3, [pc, #268]	; (8009a9c <ai_platform_network_post_init+0x210>)
 8009990:	6011      	str	r1, [r2, #0]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d0ef      	beq.n	8009978 <ai_platform_network_post_init+0xec>
 8009998:	e7fe      	b.n	8009998 <ai_platform_network_post_init+0x10c>
 800999a:	4a3e      	ldr	r2, [pc, #248]	; (8009a94 <ai_platform_network_post_init+0x208>)
 800999c:	2301      	movs	r3, #1
 800999e:	6093      	str	r3, [r2, #8]
 80099a0:	6893      	ldr	r3, [r2, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1fc      	bne.n	80099a0 <ai_platform_network_post_init+0x114>
 80099a6:	493c      	ldr	r1, [pc, #240]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 80099a8:	4b3c      	ldr	r3, [pc, #240]	; (8009a9c <ai_platform_network_post_init+0x210>)
 80099aa:	6011      	str	r1, [r2, #0]
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d09f      	beq.n	80098f2 <ai_platform_network_post_init+0x66>
 80099b2:	e7fe      	b.n	80099b2 <ai_platform_network_post_init+0x126>
 80099b4:	4a3a      	ldr	r2, [pc, #232]	; (8009aa0 <ai_platform_network_post_init+0x214>)
 80099b6:	2301      	movs	r3, #1
 80099b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80099bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1fb      	bne.n	80099bc <ai_platform_network_post_init+0x130>
 80099c4:	4934      	ldr	r1, [pc, #208]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 80099c6:	4b35      	ldr	r3, [pc, #212]	; (8009a9c <ai_platform_network_post_init+0x210>)
 80099c8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80099cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d0d1      	beq.n	8009978 <ai_platform_network_post_init+0xec>
 80099d4:	e7fe      	b.n	80099d4 <ai_platform_network_post_init+0x148>
 80099d6:	4a32      	ldr	r2, [pc, #200]	; (8009aa0 <ai_platform_network_post_init+0x214>)
 80099d8:	2301      	movs	r3, #1
 80099da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80099de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1fb      	bne.n	80099de <ai_platform_network_post_init+0x152>
 80099e6:	492c      	ldr	r1, [pc, #176]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 80099e8:	4b2c      	ldr	r3, [pc, #176]	; (8009a9c <ai_platform_network_post_init+0x210>)
 80099ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80099ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80099f2:	429a      	cmp	r2, r3
 80099f4:	f43f af7d 	beq.w	80098f2 <ai_platform_network_post_init+0x66>
 80099f8:	e7fe      	b.n	80099f8 <ai_platform_network_post_init+0x16c>
 80099fa:	2210      	movs	r2, #16
 80099fc:	2111      	movs	r1, #17
 80099fe:	18a0      	adds	r0, r4, r2
 8009a00:	f000 fd8a 	bl	800a518 <core_set_error>
 8009a04:	4628      	mov	r0, r5
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	4a25      	ldr	r2, [pc, #148]	; (8009aa0 <ai_platform_network_post_init+0x214>)
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1fb      	bne.n	8009a10 <ai_platform_network_post_init+0x184>
 8009a18:	491f      	ldr	r1, [pc, #124]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 8009a1a:	4b20      	ldr	r3, [pc, #128]	; (8009a9c <ai_platform_network_post_init+0x210>)
 8009a1c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009a20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d0a7      	beq.n	8009978 <ai_platform_network_post_init+0xec>
 8009a28:	e7fe      	b.n	8009a28 <ai_platform_network_post_init+0x19c>
 8009a2a:	4a1d      	ldr	r2, [pc, #116]	; (8009aa0 <ai_platform_network_post_init+0x214>)
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1fb      	bne.n	8009a32 <ai_platform_network_post_init+0x1a6>
 8009a3a:	4917      	ldr	r1, [pc, #92]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 8009a3c:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <ai_platform_network_post_init+0x210>)
 8009a3e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009a42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a46:	429a      	cmp	r2, r3
 8009a48:	f43f af53 	beq.w	80098f2 <ai_platform_network_post_init+0x66>
 8009a4c:	e7fe      	b.n	8009a4c <ai_platform_network_post_init+0x1c0>
 8009a4e:	4a11      	ldr	r2, [pc, #68]	; (8009a94 <ai_platform_network_post_init+0x208>)
 8009a50:	2301      	movs	r3, #1
 8009a52:	6093      	str	r3, [r2, #8]
 8009a54:	6893      	ldr	r3, [r2, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1fc      	bne.n	8009a54 <ai_platform_network_post_init+0x1c8>
 8009a5a:	490f      	ldr	r1, [pc, #60]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <ai_platform_network_post_init+0x210>)
 8009a5e:	6011      	str	r1, [r2, #0]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d088      	beq.n	8009978 <ai_platform_network_post_init+0xec>
 8009a66:	e7fe      	b.n	8009a66 <ai_platform_network_post_init+0x1da>
 8009a68:	4a0a      	ldr	r2, [pc, #40]	; (8009a94 <ai_platform_network_post_init+0x208>)
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	6093      	str	r3, [r2, #8]
 8009a6e:	6893      	ldr	r3, [r2, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1fc      	bne.n	8009a6e <ai_platform_network_post_init+0x1e2>
 8009a74:	4908      	ldr	r1, [pc, #32]	; (8009a98 <ai_platform_network_post_init+0x20c>)
 8009a76:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <ai_platform_network_post_init+0x210>)
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	f43f af38 	beq.w	80098f2 <ai_platform_network_post_init+0x66>
 8009a82:	e7fe      	b.n	8009a82 <ai_platform_network_post_init+0x1f6>
 8009a84:	a1c00100 	.word	0xa1c00100
 8009a88:	e0002000 	.word	0xe0002000
 8009a8c:	e0042000 	.word	0xe0042000
 8009a90:	5c001000 	.word	0x5c001000
 8009a94:	40023000 	.word	0x40023000
 8009a98:	f407a5c2 	.word	0xf407a5c2
 8009a9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009aa0:	58024000 	.word	0x58024000

08009aa4 <ai_platform_network_process>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	460e      	mov	r6, r1
 8009aac:	4605      	mov	r5, r0
 8009aae:	9202      	str	r2, [sp, #8]
 8009ab0:	b120      	cbz	r0, 8009abc <ai_platform_network_process+0x18>
 8009ab2:	4bb5      	ldr	r3, [pc, #724]	; (8009d88 <ai_platform_network_process+0x2e4>)
 8009ab4:	6802      	ldr	r2, [r0, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	bf18      	it	ne
 8009aba:	2500      	movne	r5, #0
 8009abc:	4ab3      	ldr	r2, [pc, #716]	; (8009d8c <ai_platform_network_process+0x2e8>)
 8009abe:	6813      	ldr	r3, [r2, #0]
 8009ac0:	f023 0301 	bic.w	r3, r3, #1
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	f7ff faf7 	bl	80090b8 <_ai_platform_acquire_crc>
 8009aca:	4bb1      	ldr	r3, [pc, #708]	; (8009d90 <ai_platform_network_process+0x2ec>)
 8009acc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ad6:	185a      	adds	r2, r3, r1
 8009ad8:	2a01      	cmp	r2, #1
 8009ada:	f240 8147 	bls.w	8009d6c <ai_platform_network_process+0x2c8>
 8009ade:	f240 4249 	movw	r2, #1097	; 0x449
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	f000 8142 	beq.w	8009d6c <ai_platform_network_process+0x2c8>
 8009ae8:	4aaa      	ldr	r2, [pc, #680]	; (8009d94 <ai_platform_network_process+0x2f0>)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009af4:	f000 8167 	beq.w	8009dc6 <ai_platform_network_process+0x322>
 8009af8:	6813      	ldr	r3, [r2, #0]
 8009afa:	f240 4183 	movw	r1, #1155	; 0x483
 8009afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b02:	428b      	cmp	r3, r1
 8009b04:	f000 8191 	beq.w	8009e2a <ai_platform_network_process+0x386>
 8009b08:	6813      	ldr	r3, [r2, #0]
 8009b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b0e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009b12:	f000 816a 	beq.w	8009dea <ai_platform_network_process+0x346>
 8009b16:	f7ff fad1 	bl	80090bc <_ai_platform_release_crc>
 8009b1a:	2d00      	cmp	r5, #0
 8009b1c:	f000 8197 	beq.w	8009e4e <ai_platform_network_process+0x3aa>
 8009b20:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 813e 	beq.w	8009da4 <ai_platform_network_process+0x300>
 8009b28:	68eb      	ldr	r3, [r5, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	616a      	str	r2, [r5, #20]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	f040 813a 	bne.w	8009db0 <ai_platform_network_process+0x30c>
 8009b3c:	2e00      	cmp	r6, #0
 8009b3e:	f000 8169 	beq.w	8009e14 <ai_platform_network_process+0x370>
 8009b42:	fab8 f788 	clz	r7, r8
 8009b46:	097f      	lsrs	r7, r7, #5
 8009b48:	f1b8 0f00 	cmp.w	r8, #0
 8009b4c:	f000 8162 	beq.w	8009e14 <ai_platform_network_process+0x370>
 8009b50:	f8b8 3000 	ldrh.w	r3, [r8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 815d 	beq.w	8009e14 <ai_platform_network_process+0x370>
 8009b5a:	69b3      	ldr	r3, [r6, #24]
 8009b5c:	9503      	str	r5, [sp, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d072      	beq.n	8009c50 <ai_platform_network_process+0x1ac>
 8009b6a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	d06e      	beq.n	8009c50 <ai_platform_network_process+0x1ac>
 8009b72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b76:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009b7a:	f8d3 a000 	ldr.w	sl, [r3]
 8009b7e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8009b82:	f000 8146 	beq.w	8009e12 <ai_platform_network_process+0x36e>
 8009b86:	69a3      	ldr	r3, [r4, #24]
 8009b88:	2101      	movs	r1, #1
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	685d      	ldr	r5, [r3, #4]
 8009b8e:	f7ff fa55 	bl	800903c <ai_buffer_get_size>
 8009b92:	4285      	cmp	r5, r0
 8009b94:	f0c0 815d 	bcc.w	8009e52 <ai_platform_network_process+0x3ae>
 8009b98:	68e0      	ldr	r0, [r4, #12]
 8009b9a:	69b1      	ldr	r1, [r6, #24]
 8009b9c:	68c2      	ldr	r2, [r0, #12]
 8009b9e:	68cb      	ldr	r3, [r1, #12]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	f040 8156 	bne.w	8009e52 <ai_platform_network_process+0x3ae>
 8009ba6:	6882      	ldr	r2, [r0, #8]
 8009ba8:	688b      	ldr	r3, [r1, #8]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	f040 8151 	bne.w	8009e52 <ai_platform_network_process+0x3ae>
 8009bb0:	6842      	ldr	r2, [r0, #4]
 8009bb2:	684b      	ldr	r3, [r1, #4]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	f040 814c 	bne.w	8009e52 <ai_platform_network_process+0x3ae>
 8009bba:	69a3      	ldr	r3, [r4, #24]
 8009bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bc0:	f00a fd9e 	bl	8014700 <ai_array_get_data_byte_size>
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f00a fcf0 	bl	80145ac <get_tensor_byte_size>
 8009bcc:	4285      	cmp	r5, r0
 8009bce:	f0c0 8140 	bcc.w	8009e52 <ai_platform_network_process+0x3ae>
 8009bd2:	69a3      	ldr	r3, [r4, #24]
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f00a fcff 	bl	80145d8 <ai_array_to_buffer_fmt>
 8009bda:	6833      	ldr	r3, [r6, #0]
 8009bdc:	4058      	eors	r0, r3
 8009bde:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009be2:	f040 81fa 	bne.w	8009fda <ai_platform_network_process+0x536>
 8009be6:	6873      	ldr	r3, [r6, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 81ed 	beq.w	8009fc8 <ai_platform_network_process+0x524>
 8009bee:	69b3      	ldr	r3, [r6, #24]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 81df 	beq.w	8009fb6 <ai_platform_network_process+0x512>
 8009bf8:	9a01      	ldr	r2, [sp, #4]
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	3701      	adds	r7, #1
 8009bfe:	361c      	adds	r6, #28
 8009c00:	429a      	cmp	r2, r3
 8009c02:	bf38      	it	cc
 8009c04:	461a      	movcc	r2, r3
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	f00a fcd0 	bl	80145ac <get_tensor_byte_size>
 8009c0c:	f8c9 0008 	str.w	r0, [r9, #8]
 8009c10:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	fb00 f303 	mul.w	r3, r0, r3
 8009c1a:	f8c9 300c 	str.w	r3, [r9, #12]
 8009c1e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8009c22:	440b      	add	r3, r1
 8009c24:	f8c9 1004 	str.w	r1, [r9, #4]
 8009c28:	f84a 300b 	str.w	r3, [sl, fp]
 8009c2c:	69a0      	ldr	r0, [r4, #24]
 8009c2e:	6803      	ldr	r3, [r0, #0]
 8009c30:	009a      	lsls	r2, r3, #2
 8009c32:	f100 80e8 	bmi.w	8009e06 <ai_platform_network_process+0x362>
 8009c36:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	4419      	add	r1, r3
 8009c3e:	6081      	str	r1, [r0, #8]
 8009c40:	69a3      	ldr	r3, [r4, #24]
 8009c42:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009c46:	60da      	str	r2, [r3, #12]
 8009c48:	f8b8 3000 	ldrh.w	r3, [r8]
 8009c4c:	42bb      	cmp	r3, r7
 8009c4e:	d888      	bhi.n	8009b62 <ai_platform_network_process+0xbe>
 8009c50:	9d03      	ldr	r5, [sp, #12]
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 81c8 	beq.w	8009fec <ai_platform_network_process+0x548>
 8009c5c:	2a01      	cmp	r2, #1
 8009c5e:	f240 81a2 	bls.w	8009fa6 <ai_platform_network_process+0x502>
 8009c62:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009c66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 819b 	beq.w	8009fa6 <ai_platform_network_process+0x502>
 8009c70:	2600      	movs	r6, #0
 8009c72:	9f02      	ldr	r7, [sp, #8]
 8009c74:	9502      	str	r5, [sp, #8]
 8009c76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 80f7 	beq.w	8009e6e <ai_platform_network_process+0x3ca>
 8009c80:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	f000 80f2 	beq.w	8009e6e <ai_platform_network_process+0x3ca>
 8009c8a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009c8e:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 8009c92:	f8d3 8000 	ldr.w	r8, [r3]
 8009c96:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 8009c9a:	f000 81b4 	beq.w	800a006 <ai_platform_network_process+0x562>
 8009c9e:	69a3      	ldr	r3, [r4, #24]
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	685d      	ldr	r5, [r3, #4]
 8009ca6:	f7ff f9c9 	bl	800903c <ai_buffer_get_size>
 8009caa:	4285      	cmp	r5, r0
 8009cac:	f0c0 817a 	bcc.w	8009fa4 <ai_platform_network_process+0x500>
 8009cb0:	68e0      	ldr	r0, [r4, #12]
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	68c2      	ldr	r2, [r0, #12]
 8009cb6:	68cb      	ldr	r3, [r1, #12]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	f040 8173 	bne.w	8009fa4 <ai_platform_network_process+0x500>
 8009cbe:	6882      	ldr	r2, [r0, #8]
 8009cc0:	688b      	ldr	r3, [r1, #8]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	f040 816e 	bne.w	8009fa4 <ai_platform_network_process+0x500>
 8009cc8:	6842      	ldr	r2, [r0, #4]
 8009cca:	684b      	ldr	r3, [r1, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	f040 8169 	bne.w	8009fa4 <ai_platform_network_process+0x500>
 8009cd2:	69a3      	ldr	r3, [r4, #24]
 8009cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cd8:	f00a fd12 	bl	8014700 <ai_array_get_data_byte_size>
 8009cdc:	9003      	str	r0, [sp, #12]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f00a fc64 	bl	80145ac <get_tensor_byte_size>
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	f0c0 815c 	bcc.w	8009fa4 <ai_platform_network_process+0x500>
 8009cec:	69a3      	ldr	r3, [r4, #24]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	f00a fc72 	bl	80145d8 <ai_array_to_buffer_fmt>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	4058      	eors	r0, r3
 8009cf8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009cfc:	f040 817a 	bne.w	8009ff4 <ai_platform_network_process+0x550>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 8193 	beq.w	800a02e <ai_platform_network_process+0x58a>
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 8185 	beq.w	800a01c <ai_platform_network_process+0x578>
 8009d12:	9a01      	ldr	r2, [sp, #4]
 8009d14:	4620      	mov	r0, r4
 8009d16:	3601      	adds	r6, #1
 8009d18:	371c      	adds	r7, #28
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	bf38      	it	cc
 8009d1e:	461a      	movcc	r2, r3
 8009d20:	9201      	str	r2, [sp, #4]
 8009d22:	f00a fc43 	bl	80145ac <get_tensor_byte_size>
 8009d26:	f8ca 0008 	str.w	r0, [sl, #8]
 8009d2a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	fb00 f303 	mul.w	r3, r0, r3
 8009d34:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d38:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8009d3c:	440b      	add	r3, r1
 8009d3e:	f8ca 1004 	str.w	r1, [sl, #4]
 8009d42:	f848 300b 	str.w	r3, [r8, fp]
 8009d46:	69a0      	ldr	r0, [r4, #24]
 8009d48:	6803      	ldr	r3, [r0, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	f100 808a 	bmi.w	8009e64 <ai_platform_network_process+0x3c0>
 8009d50:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	4419      	add	r1, r3
 8009d58:	6081      	str	r1, [r0, #8]
 8009d5a:	69a3      	ldr	r3, [r4, #24]
 8009d5c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009d60:	60da      	str	r2, [r3, #12]
 8009d62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009d66:	429e      	cmp	r6, r3
 8009d68:	d385      	bcc.n	8009c76 <ai_platform_network_process+0x1d2>
 8009d6a:	e080      	b.n	8009e6e <ai_platform_network_process+0x3ca>
 8009d6c:	4a0a      	ldr	r2, [pc, #40]	; (8009d98 <ai_platform_network_process+0x2f4>)
 8009d6e:	2301      	movs	r3, #1
 8009d70:	6093      	str	r3, [r2, #8]
 8009d72:	6893      	ldr	r3, [r2, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1fc      	bne.n	8009d72 <ai_platform_network_process+0x2ce>
 8009d78:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <ai_platform_network_process+0x2f8>)
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <ai_platform_network_process+0x2fc>)
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	f43f aec8 	beq.w	8009b16 <ai_platform_network_process+0x72>
 8009d86:	e7fe      	b.n	8009d86 <ai_platform_network_process+0x2e2>
 8009d88:	a1c00100 	.word	0xa1c00100
 8009d8c:	e0002000 	.word	0xe0002000
 8009d90:	e0042000 	.word	0xe0042000
 8009d94:	5c001000 	.word	0x5c001000
 8009d98:	40023000 	.word	0x40023000
 8009d9c:	f407a5c2 	.word	0xf407a5c2
 8009da0:	b5e8b5cd 	.word	0xb5e8b5cd
 8009da4:	68ea      	ldr	r2, [r5, #12]
 8009da6:	616b      	str	r3, [r5, #20]
 8009da8:	f002 0203 	and.w	r2, r2, #3
 8009dac:	2a03      	cmp	r2, #3
 8009dae:	d031      	beq.n	8009e14 <ai_platform_network_process+0x370>
 8009db0:	2230      	movs	r2, #48	; 0x30
 8009db2:	2111      	movs	r1, #17
 8009db4:	f105 0010 	add.w	r0, r5, #16
 8009db8:	2400      	movs	r4, #0
 8009dba:	f000 fbad 	bl	800a518 <core_set_error>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	b005      	add	sp, #20
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	4a9e      	ldr	r2, [pc, #632]	; (800a040 <ai_platform_network_process+0x59c>)
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009dce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1fb      	bne.n	8009dce <ai_platform_network_process+0x32a>
 8009dd6:	4b9b      	ldr	r3, [pc, #620]	; (800a044 <ai_platform_network_process+0x5a0>)
 8009dd8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009ddc:	4b9a      	ldr	r3, [pc, #616]	; (800a048 <ai_platform_network_process+0x5a4>)
 8009dde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f43f ae97 	beq.w	8009b16 <ai_platform_network_process+0x72>
 8009de8:	e7fe      	b.n	8009de8 <ai_platform_network_process+0x344>
 8009dea:	4a98      	ldr	r2, [pc, #608]	; (800a04c <ai_platform_network_process+0x5a8>)
 8009dec:	2301      	movs	r3, #1
 8009dee:	6093      	str	r3, [r2, #8]
 8009df0:	6893      	ldr	r3, [r2, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1fc      	bne.n	8009df0 <ai_platform_network_process+0x34c>
 8009df6:	4b93      	ldr	r3, [pc, #588]	; (800a044 <ai_platform_network_process+0x5a0>)
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	4b93      	ldr	r3, [pc, #588]	; (800a048 <ai_platform_network_process+0x5a4>)
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	f43f ae89 	beq.w	8009b16 <ai_platform_network_process+0x72>
 8009e04:	e7fe      	b.n	8009e04 <ai_platform_network_process+0x360>
 8009e06:	f8b8 3000 	ldrh.w	r3, [r8]
 8009e0a:	429f      	cmp	r7, r3
 8009e0c:	f4ff aea9 	bcc.w	8009b62 <ai_platform_network_process+0xbe>
 8009e10:	e71e      	b.n	8009c50 <ai_platform_network_process+0x1ac>
 8009e12:	9d03      	ldr	r5, [sp, #12]
 8009e14:	2400      	movs	r4, #0
 8009e16:	2217      	movs	r2, #23
 8009e18:	2112      	movs	r1, #18
 8009e1a:	f105 0010 	add.w	r0, r5, #16
 8009e1e:	f000 fb7b 	bl	800a518 <core_set_error>
 8009e22:	4620      	mov	r0, r4
 8009e24:	b005      	add	sp, #20
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2a:	4a85      	ldr	r2, [pc, #532]	; (800a040 <ai_platform_network_process+0x59c>)
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1fb      	bne.n	8009e32 <ai_platform_network_process+0x38e>
 8009e3a:	4b82      	ldr	r3, [pc, #520]	; (800a044 <ai_platform_network_process+0x5a0>)
 8009e3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009e40:	4b81      	ldr	r3, [pc, #516]	; (800a048 <ai_platform_network_process+0x5a4>)
 8009e42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e46:	429a      	cmp	r2, r3
 8009e48:	f43f ae65 	beq.w	8009b16 <ai_platform_network_process+0x72>
 8009e4c:	e7fe      	b.n	8009e4c <ai_platform_network_process+0x3a8>
 8009e4e:	462c      	mov	r4, r5
 8009e50:	e7b5      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009e52:	9d03      	ldr	r5, [sp, #12]
 8009e54:	2218      	movs	r2, #24
 8009e56:	2112      	movs	r1, #18
 8009e58:	2400      	movs	r4, #0
 8009e5a:	f105 0010 	add.w	r0, r5, #16
 8009e5e:	f000 fb5b 	bl	800a518 <core_set_error>
 8009e62:	e7ac      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009e64:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009e68:	429e      	cmp	r6, r3
 8009e6a:	f4ff af04 	bcc.w	8009c76 <ai_platform_network_process+0x1d2>
 8009e6e:	9d02      	ldr	r5, [sp, #8]
 8009e70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009e74:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009e76:	82ab      	strh	r3, [r5, #20]
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	f040 808d 	bne.w	8009f98 <ai_platform_network_process+0x4f4>
 8009e7e:	4616      	mov	r6, r2
 8009e80:	4617      	mov	r7, r2
 8009e82:	8aec      	ldrh	r4, [r5, #22]
 8009e84:	429c      	cmp	r4, r3
 8009e86:	d29a      	bcs.n	8009dbe <ai_platform_network_process+0x31a>
 8009e88:	46ab      	mov	fp, r5
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d030      	beq.n	8009ef0 <ai_platform_network_process+0x44c>
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	e014      	b.n	8009ebe <ai_platform_network_process+0x41a>
 8009e94:	6882      	ldr	r2, [r0, #8]
 8009e96:	68c5      	ldr	r5, [r0, #12]
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	1b52      	subs	r2, r2, r5
 8009e9c:	4413      	add	r3, r2
 8009e9e:	6083      	str	r3, [r0, #8]
 8009ea0:	698b      	ldr	r3, [r1, #24]
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	f859 200a 	ldr.w	r2, [r9, sl]
 8009eaa:	f108 0801 	add.w	r8, r8, #1
 8009eae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009eb2:	440b      	add	r3, r1
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d301      	bcc.n	8009ebc <ai_platform_network_process+0x418>
 8009eb8:	68e3      	ldr	r3, [r4, #12]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	6063      	str	r3, [r4, #4]
 8009ebe:	8833      	ldrh	r3, [r6, #0]
 8009ec0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009ec4:	4543      	cmp	r3, r8
 8009ec6:	d913      	bls.n	8009ef0 <ai_platform_network_process+0x44c>
 8009ec8:	6873      	ldr	r3, [r6, #4]
 8009eca:	b18b      	cbz	r3, 8009ef0 <ai_platform_network_process+0x44c>
 8009ecc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009ed0:	b171      	cbz	r1, 8009ef0 <ai_platform_network_process+0x44c>
 8009ed2:	6988      	ldr	r0, [r1, #24]
 8009ed4:	68b2      	ldr	r2, [r6, #8]
 8009ed6:	6803      	ldr	r3, [r0, #0]
 8009ed8:	f8d2 9000 	ldr.w	r9, [r2]
 8009edc:	009d      	lsls	r5, r3, #2
 8009ede:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009ee2:	d5d7      	bpl.n	8009e94 <ai_platform_network_process+0x3f0>
 8009ee4:	6880      	ldr	r0, [r0, #8]
 8009ee6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009eea:	f00a fc8b 	bl	8014804 <memcpy>
 8009eee:	e7da      	b.n	8009ea6 <ai_platform_network_process+0x402>
 8009ef0:	4658      	mov	r0, fp
 8009ef2:	f002 f973 	bl	800c1dc <ai_layers_forward_all>
 8009ef6:	2f00      	cmp	r7, #0
 8009ef8:	d03f      	beq.n	8009f7a <ai_platform_network_process+0x4d6>
 8009efa:	2400      	movs	r4, #0
 8009efc:	e016      	b.n	8009f2c <ai_platform_network_process+0x488>
 8009efe:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009f02:	f859 100a 	ldr.w	r1, [r9, sl]
 8009f06:	4413      	add	r3, r2
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	d302      	bcc.n	8009f12 <ai_platform_network_process+0x46e>
 8009f0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f10:	1acb      	subs	r3, r1, r3
 8009f12:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f16:	6981      	ldr	r1, [r0, #24]
 8009f18:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	4413      	add	r3, r2
 8009f20:	608b      	str	r3, [r1, #8]
 8009f22:	6983      	ldr	r3, [r0, #24]
 8009f24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	883b      	ldrh	r3, [r7, #0]
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	d923      	bls.n	8009f7a <ai_platform_network_process+0x4d6>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	b30b      	cbz	r3, 8009f7a <ai_platform_network_process+0x4d6>
 8009f36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009f3a:	b1f0      	cbz	r0, 8009f7a <ai_platform_network_process+0x4d6>
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009f42:	6983      	ldr	r3, [r0, #24]
 8009f44:	f8d2 9000 	ldr.w	r9, [r2]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	d5d5      	bpl.n	8009efe <ai_platform_network_process+0x45a>
 8009f52:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009f56:	6899      	ldr	r1, [r3, #8]
 8009f58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f5c:	f00a fc52 	bl	8014804 <memcpy>
 8009f60:	f859 200a 	ldr.w	r2, [r9, sl]
 8009f64:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009f68:	440b      	add	r3, r1
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d302      	bcc.n	8009f74 <ai_platform_network_process+0x4d0>
 8009f6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f78:	e7d7      	b.n	8009f2a <ai_platform_network_process+0x486>
 8009f7a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009f7e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009f82:	3401      	adds	r4, #1
 8009f84:	b2a4      	uxth	r4, r4
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009f8c:	f63f af7d 	bhi.w	8009e8a <ai_platform_network_process+0x3e6>
 8009f90:	4620      	mov	r0, r4
 8009f92:	b005      	add	sp, #20
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	2a01      	cmp	r2, #1
 8009f9a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009f9c:	d03c      	beq.n	800a018 <ai_platform_network_process+0x574>
 8009f9e:	f106 070c 	add.w	r7, r6, #12
 8009fa2:	e76e      	b.n	8009e82 <ai_platform_network_process+0x3de>
 8009fa4:	9d02      	ldr	r5, [sp, #8]
 8009fa6:	2218      	movs	r2, #24
 8009fa8:	2113      	movs	r1, #19
 8009faa:	f105 0010 	add.w	r0, r5, #16
 8009fae:	2400      	movs	r4, #0
 8009fb0:	f000 fab2 	bl	800a518 <core_set_error>
 8009fb4:	e703      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009fb6:	9d03      	ldr	r5, [sp, #12]
 8009fb8:	4604      	mov	r4, r0
 8009fba:	2221      	movs	r2, #33	; 0x21
 8009fbc:	2112      	movs	r1, #18
 8009fbe:	f105 0010 	add.w	r0, r5, #16
 8009fc2:	f000 faa9 	bl	800a518 <core_set_error>
 8009fc6:	e6fa      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009fc8:	9d03      	ldr	r5, [sp, #12]
 8009fca:	4604      	mov	r4, r0
 8009fcc:	2217      	movs	r2, #23
 8009fce:	2112      	movs	r1, #18
 8009fd0:	f105 0010 	add.w	r0, r5, #16
 8009fd4:	f000 faa0 	bl	800a518 <core_set_error>
 8009fd8:	e6f1      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009fda:	9d03      	ldr	r5, [sp, #12]
 8009fdc:	2219      	movs	r2, #25
 8009fde:	2112      	movs	r1, #18
 8009fe0:	2400      	movs	r4, #0
 8009fe2:	f105 0010 	add.w	r0, r5, #16
 8009fe6:	f000 fa97 	bl	800a518 <core_set_error>
 8009fea:	e6e8      	b.n	8009dbe <ai_platform_network_process+0x31a>
 8009fec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009ff0:	82ab      	strh	r3, [r5, #20]
 8009ff2:	e741      	b.n	8009e78 <ai_platform_network_process+0x3d4>
 8009ff4:	9d02      	ldr	r5, [sp, #8]
 8009ff6:	2219      	movs	r2, #25
 8009ff8:	2113      	movs	r1, #19
 8009ffa:	2400      	movs	r4, #0
 8009ffc:	f105 0010 	add.w	r0, r5, #16
 800a000:	f000 fa8a 	bl	800a518 <core_set_error>
 800a004:	e6db      	b.n	8009dbe <ai_platform_network_process+0x31a>
 800a006:	9d02      	ldr	r5, [sp, #8]
 800a008:	2217      	movs	r2, #23
 800a00a:	2113      	movs	r1, #19
 800a00c:	4654      	mov	r4, sl
 800a00e:	f105 0010 	add.w	r0, r5, #16
 800a012:	f000 fa81 	bl	800a518 <core_set_error>
 800a016:	e6d2      	b.n	8009dbe <ai_platform_network_process+0x31a>
 800a018:	2700      	movs	r7, #0
 800a01a:	e732      	b.n	8009e82 <ai_platform_network_process+0x3de>
 800a01c:	9d02      	ldr	r5, [sp, #8]
 800a01e:	4604      	mov	r4, r0
 800a020:	2221      	movs	r2, #33	; 0x21
 800a022:	2113      	movs	r1, #19
 800a024:	f105 0010 	add.w	r0, r5, #16
 800a028:	f000 fa76 	bl	800a518 <core_set_error>
 800a02c:	e6c7      	b.n	8009dbe <ai_platform_network_process+0x31a>
 800a02e:	9d02      	ldr	r5, [sp, #8]
 800a030:	4604      	mov	r4, r0
 800a032:	2217      	movs	r2, #23
 800a034:	2113      	movs	r1, #19
 800a036:	f105 0010 	add.w	r0, r5, #16
 800a03a:	f000 fa6d 	bl	800a518 <core_set_error>
 800a03e:	e6be      	b.n	8009dbe <ai_platform_network_process+0x31a>
 800a040:	58024000 	.word	0x58024000
 800a044:	f407a5c2 	.word	0xf407a5c2
 800a048:	b5e8b5cd 	.word	0xb5e8b5cd
 800a04c:	40023000 	.word	0x40023000

0800a050 <node_convert>:
 800a050:	6982      	ldr	r2, [r0, #24]
 800a052:	8813      	ldrh	r3, [r2, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d049      	beq.n	800a0ec <node_convert+0x9c>
 800a058:	6852      	ldr	r2, [r2, #4]
 800a05a:	6850      	ldr	r0, [r2, #4]
 800a05c:	b100      	cbz	r0, 800a060 <node_convert+0x10>
 800a05e:	6800      	ldr	r0, [r0, #0]
 800a060:	2b01      	cmp	r3, #1
 800a062:	f000 813b 	beq.w	800a2dc <node_convert+0x28c>
 800a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	6915      	ldr	r5, [r2, #16]
 800a06c:	b105      	cbz	r5, 800a070 <node_convert+0x20>
 800a06e:	682d      	ldr	r5, [r5, #0]
 800a070:	6883      	ldr	r3, [r0, #8]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	f000 80ec 	beq.w	800a250 <node_convert+0x200>
 800a078:	68c1      	ldr	r1, [r0, #12]
 800a07a:	2401      	movs	r4, #1
 800a07c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a080:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a084:	428b      	cmp	r3, r1
 800a086:	fb02 f404 	mul.w	r4, r2, r4
 800a08a:	d1f9      	bne.n	800a080 <node_convert+0x30>
 800a08c:	6982      	ldr	r2, [r0, #24]
 800a08e:	69af      	ldr	r7, [r5, #24]
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800a096:	2901      	cmp	r1, #1
 800a098:	d02a      	beq.n	800a0f0 <node_convert+0xa0>
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	68bd      	ldr	r5, [r7, #8]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d068      	beq.n	800a174 <node_convert+0x124>
 800a0a2:	6846      	ldr	r6, [r0, #4]
 800a0a4:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 800a0a8:	6892      	ldr	r2, [r2, #8]
 800a0aa:	2e00      	cmp	r6, #0
 800a0ac:	f000 80b7 	beq.w	800a21e <node_convert+0x1ce>
 800a0b0:	8843      	ldrh	r3, [r0, #2]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 8088 	beq.w	800a1c8 <node_convert+0x178>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	ed93 7a00 	vldr	s14, [r3]
 800a0be:	6873      	ldr	r3, [r6, #4]
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	f000 80c3 	beq.w	800a24c <node_convert+0x1fc>
 800a0c6:	f993 1000 	ldrsb.w	r1, [r3]
 800a0ca:	b16c      	cbz	r4, 800a0e8 <node_convert+0x98>
 800a0cc:	4414      	add	r4, r2
 800a0ce:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800a0d2:	1a5b      	subs	r3, r3, r1
 800a0d4:	4294      	cmp	r4, r2
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0e2:	ece5 7a01 	vstmia	r5!, {s15}
 800a0e6:	d1f2      	bne.n	800a0ce <node_convert+0x7e>
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	deff      	udf	#255	; 0xff
 800a0f0:	682e      	ldr	r6, [r5, #0]
 800a0f2:	6895      	ldr	r5, [r2, #8]
 800a0f4:	2e00      	cmp	r6, #0
 800a0f6:	f000 80ad 	beq.w	800a254 <node_convert+0x204>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6871      	ldr	r1, [r6, #4]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800a104:	2900      	cmp	r1, #0
 800a106:	d064      	beq.n	800a1d2 <node_convert+0x182>
 800a108:	8870      	ldrh	r0, [r6, #2]
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d067      	beq.n	800a1de <node_convert+0x18e>
 800a10e:	6808      	ldr	r0, [r1, #0]
 800a110:	edd0 7a00 	vldr	s15, [r0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 80d6 	beq.w	800a2c6 <node_convert+0x276>
 800a11a:	684b      	ldr	r3, [r1, #4]
 800a11c:	f993 3000 	ldrsb.w	r3, [r3]
 800a120:	ee06 3a90 	vmov	s13, r3
 800a124:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a128:	2c00      	cmp	r4, #0
 800a12a:	d0dd      	beq.n	800a0e8 <node_convert+0x98>
 800a12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a130:	4414      	add	r4, r2
 800a132:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a136:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 800a2e4 <node_convert+0x294>
 800a13a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a13e:	ecb5 7a01 	vldmia	r5!, {s14}
 800a142:	eef0 7a66 	vmov.f32	s15, s13
 800a146:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a14a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a152:	bfac      	ite	ge
 800a154:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 800a158:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 800a15c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a160:	ee17 3a90 	vmov	r3, s15
 800a164:	f303 0307 	ssat	r3, #8, r3
 800a168:	f802 3b01 	strb.w	r3, [r2], #1
 800a16c:	42a2      	cmp	r2, r4
 800a16e:	d1e6      	bne.n	800a13e <node_convert+0xee>
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800a178:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800a17c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 800a180:	6890      	ldr	r0, [r2, #8]
 800a182:	1b8e      	subs	r6, r1, r6
 800a184:	2908      	cmp	r1, #8
 800a186:	4622      	mov	r2, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f106 0640 	add.w	r6, r6, #64	; 0x40
 800a18e:	eba6 0603 	sub.w	r6, r6, r3
 800a192:	f000 808a 	beq.w	800a2aa <node_convert+0x25a>
 800a196:	f00a f939 	bl	801440c <st_dsp_arm_q15_to_float>
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	d0a4      	beq.n	800a0e8 <node_convert+0x98>
 800a19e:	ee07 6a90 	vmov	s15, r6
 800a1a2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a1a6:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800a1aa:	f00d fac9 	bl	8017740 <powf>
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	d09a      	beq.n	800a0e8 <node_convert+0x98>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	ecf5 7a01 	vldmia	r5!, {s15}
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a1c4:	d1f6      	bne.n	800a1b4 <node_convert+0x164>
 800a1c6:	e78f      	b.n	800a0e8 <node_convert+0x98>
 800a1c8:	b359      	cbz	r1, 800a222 <node_convert+0x1d2>
 800a1ca:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a2e8 <node_convert+0x298>
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	e77b      	b.n	800a0ca <node_convert+0x7a>
 800a1d2:	b133      	cbz	r3, 800a1e2 <node_convert+0x192>
 800a1d4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a2e8 <node_convert+0x298>
 800a1d8:	eef0 7a66 	vmov.f32	s15, s13
 800a1dc:	e7a4      	b.n	800a128 <node_convert+0xd8>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f8      	bne.n	800a1d4 <node_convert+0x184>
 800a1e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a1e6:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a2e8 <node_convert+0x298>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	f43f af7c 	beq.w	800a0e8 <node_convert+0x98>
 800a1f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f4:	4414      	add	r4, r2
 800a1f6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a1fa:	ecb5 7a01 	vldmia	r5!, {s14}
 800a1fe:	eef0 7a66 	vmov.f32	s15, s13
 800a202:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a20a:	ee17 3a90 	vmov	r3, s15
 800a20e:	f383 0308 	usat	r3, #8, r3
 800a212:	f802 3b01 	strb.w	r3, [r2], #1
 800a216:	42a2      	cmp	r2, r4
 800a218:	d1ef      	bne.n	800a1fa <node_convert+0x1aa>
 800a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21e:	2900      	cmp	r1, #0
 800a220:	d146      	bne.n	800a2b0 <node_convert+0x260>
 800a222:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a2e8 <node_convert+0x298>
 800a226:	2c00      	cmp	r4, #0
 800a228:	f43f af5e 	beq.w	800a0e8 <node_convert+0x98>
 800a22c:	4414      	add	r4, r2
 800a22e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a232:	1a5b      	subs	r3, r3, r1
 800a234:	42a2      	cmp	r2, r4
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a23e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a242:	ece5 7a01 	vstmia	r5!, {s15}
 800a246:	d1f2      	bne.n	800a22e <node_convert+0x1de>
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	7819      	ldrb	r1, [r3, #0]
 800a24e:	e7ea      	b.n	800a226 <node_convert+0x1d6>
 800a250:	2401      	movs	r4, #1
 800a252:	e71b      	b.n	800a08c <node_convert+0x3c>
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 800a25a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a25e:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 800a262:	eba8 0303 	sub.w	r3, r8, r3
 800a266:	3340      	adds	r3, #64	; 0x40
 800a268:	1a9b      	subs	r3, r3, r2
 800a26a:	d014      	beq.n	800a296 <node_convert+0x246>
 800a26c:	425b      	negs	r3, r3
 800a26e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a272:	ee00 3a90 	vmov	s1, r3
 800a276:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800a27a:	f00d fa61 	bl	8017740 <powf>
 800a27e:	b154      	cbz	r4, 800a296 <node_convert+0x246>
 800a280:	4633      	mov	r3, r6
 800a282:	462a      	mov	r2, r5
 800a284:	ecf2 7a01 	vldmia	r2!, {s15}
 800a288:	3301      	adds	r3, #1
 800a28a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a28e:	42a3      	cmp	r3, r4
 800a290:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a294:	d1f6      	bne.n	800a284 <node_convert+0x234>
 800a296:	f1b8 0f08 	cmp.w	r8, #8
 800a29a:	d00d      	beq.n	800a2b8 <node_convert+0x268>
 800a29c:	4622      	mov	r2, r4
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	f009 bf2f 	b.w	8014108 <st_dsp_arm_float_to_q15>
 800a2aa:	f00a f915 	bl	80144d8 <st_dsp_arm_q7_to_float>
 800a2ae:	e774      	b.n	800a19a <node_convert+0x14a>
 800a2b0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a2e8 <node_convert+0x298>
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	e708      	b.n	800a0ca <node_convert+0x7a>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	f009 bfd7 	b.w	8014274 <st_dsp_arm_float_to_q7>
 800a2c6:	684b      	ldr	r3, [r1, #4]
 800a2c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	ee06 3a90 	vmov	s13, r3
 800a2d2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a2d6:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a2da:	e786      	b.n	800a1ea <node_convert+0x19a>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	deff      	udf	#255	; 0xff
 800a2e2:	bf00      	nop
 800a2e4:	3efffffc 	.word	0x3efffffc
 800a2e8:	00000000 	.word	0x00000000

0800a2ec <node_convert_integer>:
 800a2ec:	6982      	ldr	r2, [r0, #24]
 800a2ee:	8813      	ldrh	r3, [r2, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d058      	beq.n	800a3a6 <node_convert_integer+0xba>
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	6852      	ldr	r2, [r2, #4]
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	6856      	ldr	r6, [r2, #4]
 800a2fc:	b106      	cbz	r6, 800a300 <node_convert_integer+0x14>
 800a2fe:	6836      	ldr	r6, [r6, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	f000 8100 	beq.w	800a506 <node_convert_integer+0x21a>
 800a306:	6915      	ldr	r5, [r2, #16]
 800a308:	b105      	cbz	r5, 800a30c <node_convert_integer+0x20>
 800a30a:	682d      	ldr	r5, [r5, #0]
 800a30c:	68b3      	ldr	r3, [r6, #8]
 800a30e:	0a1b      	lsrs	r3, r3, #8
 800a310:	f000 80d3 	beq.w	800a4ba <node_convert_integer+0x1ce>
 800a314:	68f0      	ldr	r0, [r6, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a31c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a320:	4298      	cmp	r0, r3
 800a322:	fb01 f202 	mul.w	r2, r1, r2
 800a326:	d1f9      	bne.n	800a31c <node_convert_integer+0x30>
 800a328:	6833      	ldr	r3, [r6, #0]
 800a32a:	682c      	ldr	r4, [r5, #0]
 800a32c:	b17b      	cbz	r3, 800a34e <node_convert_integer+0x62>
 800a32e:	6859      	ldr	r1, [r3, #4]
 800a330:	b169      	cbz	r1, 800a34e <node_convert_integer+0x62>
 800a332:	8858      	ldrh	r0, [r3, #2]
 800a334:	b158      	cbz	r0, 800a34e <node_convert_integer+0x62>
 800a336:	6809      	ldr	r1, [r1, #0]
 800a338:	ed91 7a00 	vldr	s14, [r1]
 800a33c:	b15c      	cbz	r4, 800a356 <node_convert_integer+0x6a>
 800a33e:	6861      	ldr	r1, [r4, #4]
 800a340:	b149      	cbz	r1, 800a356 <node_convert_integer+0x6a>
 800a342:	8860      	ldrh	r0, [r4, #2]
 800a344:	b138      	cbz	r0, 800a356 <node_convert_integer+0x6a>
 800a346:	6809      	ldr	r1, [r1, #0]
 800a348:	edd1 7a00 	vldr	s15, [r1]
 800a34c:	e005      	b.n	800a35a <node_convert_integer+0x6e>
 800a34e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a50c <node_convert_integer+0x220>
 800a352:	2c00      	cmp	r4, #0
 800a354:	d1f3      	bne.n	800a33e <node_convert_integer+0x52>
 800a356:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800a50c <node_convert_integer+0x220>
 800a35a:	69b0      	ldr	r0, [r6, #24]
 800a35c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a360:	69ad      	ldr	r5, [r5, #24]
 800a362:	6806      	ldr	r6, [r0, #0]
 800a364:	6829      	ldr	r1, [r5, #0]
 800a366:	0236      	lsls	r6, r6, #8
 800a368:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 800a36c:	d41d      	bmi.n	800a3aa <node_convert_integer+0xbe>
 800a36e:	2900      	cmp	r1, #0
 800a370:	f040 8081 	bne.w	800a476 <node_convert_integer+0x18a>
 800a374:	6880      	ldr	r0, [r0, #8]
 800a376:	68a9      	ldr	r1, [r5, #8]
 800a378:	b13b      	cbz	r3, 800a38a <node_convert_integer+0x9e>
 800a37a:	685d      	ldr	r5, [r3, #4]
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	f000 80a7 	beq.w	800a4d0 <node_convert_integer+0x1e4>
 800a382:	885b      	ldrh	r3, [r3, #2]
 800a384:	b10b      	cbz	r3, 800a38a <node_convert_integer+0x9e>
 800a386:	686b      	ldr	r3, [r5, #4]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b13c      	cbz	r4, 800a39c <node_convert_integer+0xb0>
 800a38c:	6865      	ldr	r5, [r4, #4]
 800a38e:	2d00      	cmp	r5, #0
 800a390:	f000 80ad 	beq.w	800a4ee <node_convert_integer+0x202>
 800a394:	8864      	ldrh	r4, [r4, #2]
 800a396:	b10c      	cbz	r4, 800a39c <node_convert_integer+0xb0>
 800a398:	686c      	ldr	r4, [r5, #4]
 800a39a:	7824      	ldrb	r4, [r4, #0]
 800a39c:	9400      	str	r4, [sp, #0]
 800a39e:	f002 f83b 	bl	800c418 <forward_lite_node_convert_integer_iu8ou8>
 800a3a2:	b002      	add	sp, #8
 800a3a4:	bd70      	pop	{r4, r5, r6, pc}
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	deff      	udf	#255	; 0xff
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	d042      	beq.n	800a434 <node_convert_integer+0x148>
 800a3ae:	6886      	ldr	r6, [r0, #8]
 800a3b0:	68a9      	ldr	r1, [r5, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d07f      	beq.n	800a4b6 <node_convert_integer+0x1ca>
 800a3b6:	6858      	ldr	r0, [r3, #4]
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	f000 8092 	beq.w	800a4e2 <node_convert_integer+0x1f6>
 800a3be:	885d      	ldrh	r5, [r3, #2]
 800a3c0:	b115      	cbz	r5, 800a3c8 <node_convert_integer+0xdc>
 800a3c2:	6843      	ldr	r3, [r0, #4]
 800a3c4:	f993 5000 	ldrsb.w	r5, [r3]
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d078      	beq.n	800a4be <node_convert_integer+0x1d2>
 800a3cc:	6863      	ldr	r3, [r4, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d07b      	beq.n	800a4ca <node_convert_integer+0x1de>
 800a3d2:	8860      	ldrh	r0, [r4, #2]
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d075      	beq.n	800a4c4 <node_convert_integer+0x1d8>
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f993 3000 	ldrsb.w	r3, [r3]
 800a3de:	ee06 3a90 	vmov	s13, r3
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	d0dd      	beq.n	800a3a2 <node_convert_integer+0xb6>
 800a3e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a3ea:	4432      	add	r2, r6
 800a3ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a3f0:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a510 <node_convert_integer+0x224>
 800a3f4:	f916 3b01 	ldrsb.w	r3, [r6], #1
 800a3f8:	1b5b      	subs	r3, r3, r5
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a402:	eef0 7a66 	vmov.f32	s15, s13
 800a406:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a40a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	bfcc      	ite	gt
 800a414:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 800a418:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 800a41c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a420:	ee17 3a90 	vmov	r3, s15
 800a424:	f303 0307 	ssat	r3, #8, r3
 800a428:	4296      	cmp	r6, r2
 800a42a:	f801 3b01 	strb.w	r3, [r1], #1
 800a42e:	d1e1      	bne.n	800a3f4 <node_convert_integer+0x108>
 800a430:	b002      	add	sp, #8
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	6880      	ldr	r0, [r0, #8]
 800a436:	68a9      	ldr	r1, [r5, #8]
 800a438:	b13b      	cbz	r3, 800a44a <node_convert_integer+0x15e>
 800a43a:	685d      	ldr	r5, [r3, #4]
 800a43c:	2d00      	cmp	r5, #0
 800a43e:	d04c      	beq.n	800a4da <node_convert_integer+0x1ee>
 800a440:	885b      	ldrh	r3, [r3, #2]
 800a442:	b113      	cbz	r3, 800a44a <node_convert_integer+0x15e>
 800a444:	686b      	ldr	r3, [r5, #4]
 800a446:	f993 3000 	ldrsb.w	r3, [r3]
 800a44a:	b134      	cbz	r4, 800a45a <node_convert_integer+0x16e>
 800a44c:	6865      	ldr	r5, [r4, #4]
 800a44e:	2d00      	cmp	r5, #0
 800a450:	d04b      	beq.n	800a4ea <node_convert_integer+0x1fe>
 800a452:	8864      	ldrh	r4, [r4, #2]
 800a454:	b10c      	cbz	r4, 800a45a <node_convert_integer+0x16e>
 800a456:	686c      	ldr	r4, [r5, #4]
 800a458:	7824      	ldrb	r4, [r4, #0]
 800a45a:	eeb4 7a67 	vcmp.f32	s14, s15
 800a45e:	9400      	str	r4, [sp, #0]
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	d103      	bne.n	800a46e <node_convert_integer+0x182>
 800a466:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800a46a:	42a5      	cmp	r5, r4
 800a46c:	d048      	beq.n	800a500 <node_convert_integer+0x214>
 800a46e:	f002 f875 	bl	800c55c <forward_lite_node_convert_integer_is8ou8>
 800a472:	b002      	add	sp, #8
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	b133      	cbz	r3, 800a486 <node_convert_integer+0x19a>
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	2900      	cmp	r1, #0
 800a47c:	d039      	beq.n	800a4f2 <node_convert_integer+0x206>
 800a47e:	885b      	ldrh	r3, [r3, #2]
 800a480:	b10b      	cbz	r3, 800a486 <node_convert_integer+0x19a>
 800a482:	684b      	ldr	r3, [r1, #4]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b134      	cbz	r4, 800a496 <node_convert_integer+0x1aa>
 800a488:	6861      	ldr	r1, [r4, #4]
 800a48a:	b361      	cbz	r1, 800a4e6 <node_convert_integer+0x1fa>
 800a48c:	8864      	ldrh	r4, [r4, #2]
 800a48e:	b114      	cbz	r4, 800a496 <node_convert_integer+0x1aa>
 800a490:	6849      	ldr	r1, [r1, #4]
 800a492:	f991 4000 	ldrsb.w	r4, [r1]
 800a496:	eeb4 7a67 	vcmp.f32	s14, s15
 800a49a:	6880      	ldr	r0, [r0, #8]
 800a49c:	68a9      	ldr	r1, [r5, #8]
 800a49e:	9400      	str	r4, [sp, #0]
 800a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a4:	d103      	bne.n	800a4ae <node_convert_integer+0x1c2>
 800a4a6:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800a4aa:	42ab      	cmp	r3, r5
 800a4ac:	d025      	beq.n	800a4fa <node_convert_integer+0x20e>
 800a4ae:	f001 ffdd 	bl	800c46c <forward_lite_node_convert_integer_iu8os8>
 800a4b2:	b002      	add	sp, #8
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	461d      	mov	r5, r3
 800a4b8:	e786      	b.n	800a3c8 <node_convert_integer+0xdc>
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	e734      	b.n	800a328 <node_convert_integer+0x3c>
 800a4be:	ee06 4a90 	vmov	s13, r4
 800a4c2:	e78e      	b.n	800a3e2 <node_convert_integer+0xf6>
 800a4c4:	ee06 0a90 	vmov	s13, r0
 800a4c8:	e78b      	b.n	800a3e2 <node_convert_integer+0xf6>
 800a4ca:	ee06 3a90 	vmov	s13, r3
 800a4ce:	e788      	b.n	800a3e2 <node_convert_integer+0xf6>
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	f47f af5a 	bne.w	800a38c <node_convert_integer+0xa0>
 800a4d8:	e760      	b.n	800a39c <node_convert_integer+0xb0>
 800a4da:	462b      	mov	r3, r5
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d1b5      	bne.n	800a44c <node_convert_integer+0x160>
 800a4e0:	e7bb      	b.n	800a45a <node_convert_integer+0x16e>
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	e770      	b.n	800a3c8 <node_convert_integer+0xdc>
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	e7d5      	b.n	800a496 <node_convert_integer+0x1aa>
 800a4ea:	462c      	mov	r4, r5
 800a4ec:	e7b5      	b.n	800a45a <node_convert_integer+0x16e>
 800a4ee:	462c      	mov	r4, r5
 800a4f0:	e754      	b.n	800a39c <node_convert_integer+0xb0>
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	d1c7      	bne.n	800a488 <node_convert_integer+0x19c>
 800a4f8:	e7cd      	b.n	800a496 <node_convert_integer+0x1aa>
 800a4fa:	f001 fff7 	bl	800c4ec <forward_lite_node_convert_integer_iu8os8_fast>
 800a4fe:	e750      	b.n	800a3a2 <node_convert_integer+0xb6>
 800a500:	f002 f856 	bl	800c5b0 <forward_lite_node_convert_integer_is8ou8_fast>
 800a504:	e74d      	b.n	800a3a2 <node_convert_integer+0xb6>
 800a506:	2300      	movs	r3, #0
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	deff      	udf	#255	; 0xff
 800a50c:	00000000 	.word	0x00000000
 800a510:	3efffffc 	.word	0x3efffffc

0800a514 <core_init>:
 800a514:	2001      	movs	r0, #1
 800a516:	4770      	bx	lr

0800a518 <core_set_error>:
 800a518:	4603      	mov	r3, r0
 800a51a:	7800      	ldrb	r0, [r0, #0]
 800a51c:	b108      	cbz	r0, 800a522 <core_set_error+0xa>
 800a51e:	2000      	movs	r0, #0
 800a520:	4770      	bx	lr
 800a522:	7019      	strb	r1, [r3, #0]
 800a524:	2001      	movs	r0, #1
 800a526:	6819      	ldr	r1, [r3, #0]
 800a528:	f362 211f 	bfi	r1, r2, #8, #24
 800a52c:	6019      	str	r1, [r3, #0]
 800a52e:	4770      	bx	lr

0800a530 <forward_dense>:
 800a530:	6983      	ldr	r3, [r0, #24]
 800a532:	881a      	ldrh	r2, [r3, #0]
 800a534:	2a00      	cmp	r2, #0
 800a536:	f000 80f7 	beq.w	800a728 <forward_dense+0x1f8>
 800a53a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53e:	ed2d 8b0e 	vpush	{d8-d14}
 800a542:	6858      	ldr	r0, [r3, #4]
 800a544:	b09b      	sub	sp, #108	; 0x6c
 800a546:	6847      	ldr	r7, [r0, #4]
 800a548:	b107      	cbz	r7, 800a54c <forward_dense+0x1c>
 800a54a:	683f      	ldr	r7, [r7, #0]
 800a54c:	2a01      	cmp	r2, #1
 800a54e:	f000 8523 	beq.w	800af98 <forward_dense+0xa68>
 800a552:	6905      	ldr	r5, [r0, #16]
 800a554:	b105      	cbz	r5, 800a558 <forward_dense+0x28>
 800a556:	682d      	ldr	r5, [r5, #0]
 800a558:	2a02      	cmp	r2, #2
 800a55a:	f000 80e7 	beq.w	800a72c <forward_dense+0x1fc>
 800a55e:	69c3      	ldr	r3, [r0, #28]
 800a560:	930b      	str	r3, [sp, #44]	; 0x2c
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8509 	beq.w	800af7a <forward_dense+0xa4a>
 800a568:	4619      	mov	r1, r3
 800a56a:	8b03      	ldrh	r3, [r0, #24]
 800a56c:	6809      	ldr	r1, [r1, #0]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	910c      	str	r1, [sp, #48]	; 0x30
 800a572:	f240 8505 	bls.w	800af80 <forward_dense+0xa50>
 800a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a57c:	460b      	mov	r3, r1
 800a57e:	6999      	ldr	r1, [r3, #24]
 800a580:	2a03      	cmp	r2, #3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	68ec      	ldr	r4, [r5, #12]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800a58c:	9314      	str	r3, [sp, #80]	; 0x50
 800a58e:	680b      	ldr	r3, [r1, #0]
 800a590:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 800a594:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800a598:	fb0c fb06 	mul.w	fp, ip, r6
 800a59c:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800a5a0:	fa4e f40c 	asr.w	r4, lr, ip
 800a5a4:	9413      	str	r4, [sp, #76]	; 0x4c
 800a5a6:	f000 84f4 	beq.w	800af92 <forward_dense+0xa62>
 800a5aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a5ac:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	f000 84dc 	beq.w	800af6e <forward_dense+0xa3e>
 800a5b6:	6812      	ldr	r2, [r2, #0]
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	f000 84d8 	beq.w	800af6e <forward_dense+0xa3e>
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800a5c4:	f000 84bf 	beq.w	800af46 <forward_dense+0xa16>
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	f000 84bc 	beq.w	800af46 <forward_dense+0xa16>
 800a5ce:	f04f 0a00 	mov.w	sl, #0
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	fb0b f408 	mul.w	r4, fp, r8
 800a5d8:	69aa      	ldr	r2, [r5, #24]
 800a5da:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800a5de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5e0:	6892      	ldr	r2, [r2, #8]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800a5e8:	9204      	str	r2, [sp, #16]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	428a      	cmp	r2, r1
 800a5ee:	910f      	str	r1, [sp, #60]	; 0x3c
 800a5f0:	9302      	str	r3, [sp, #8]
 800a5f2:	ea4f 0386 	mov.w	r3, r6, lsl #2
 800a5f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a5f8:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f080 849a 	bcs.w	800af36 <forward_dense+0xa06>
 800a602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a604:	4bbf      	ldr	r3, [pc, #764]	; (800a904 <forward_dense+0x3d4>)
 800a606:	08d0      	lsrs	r0, r2, #3
 800a608:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a908 <forward_dense+0x3d8>
 800a60c:	4413      	add	r3, r2
 800a60e:	9007      	str	r0, [sp, #28]
 800a610:	0099      	lsls	r1, r3, #2
 800a612:	f1a2 0310 	sub.w	r3, r2, #16
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f101 0420 	add.w	r4, r1, #32
 800a61c:	9115      	str	r1, [sp, #84]	; 0x54
 800a61e:	0949      	lsrs	r1, r1, #5
 800a620:	3301      	adds	r3, #1
 800a622:	940e      	str	r4, [sp, #56]	; 0x38
 800a624:	445c      	add	r4, fp
 800a626:	9116      	str	r1, [sp, #88]	; 0x58
 800a628:	019b      	lsls	r3, r3, #6
 800a62a:	46a1      	mov	r9, r4
 800a62c:	940a      	str	r4, [sp, #40]	; 0x28
 800a62e:	9319      	str	r3, [sp, #100]	; 0x64
 800a630:	f022 0301 	bic.w	r3, r2, #1
 800a634:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800a638:	9303      	str	r3, [sp, #12]
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	9318      	str	r3, [sp, #96]	; 0x60
 800a640:	00cb      	lsls	r3, r1, #3
 800a642:	3310      	adds	r3, #16
 800a644:	9317      	str	r3, [sp, #92]	; 0x5c
 800a646:	f002 0301 	and.w	r3, r2, #1
 800a64a:	9308      	str	r3, [sp, #32]
 800a64c:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 800a650:	9305      	str	r3, [sp, #20]
 800a652:	4653      	mov	r3, sl
 800a654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a656:	6992      	ldr	r2, [r2, #24]
 800a658:	6897      	ldr	r7, [r2, #8]
 800a65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	f000 8270 	beq.w	800ab42 <forward_dense+0x612>
 800a662:	6992      	ldr	r2, [r2, #24]
 800a664:	6895      	ldr	r5, [r2, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 826f 	beq.w	800ab4a <forward_dense+0x61a>
 800a66c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a66e:	2a04      	cmp	r2, #4
 800a670:	f000 837a 	beq.w	800ad68 <forward_dense+0x838>
 800a674:	9a01      	ldr	r2, [sp, #4]
 800a676:	9904      	ldr	r1, [sp, #16]
 800a678:	428a      	cmp	r2, r1
 800a67a:	d93f      	bls.n	800a6fc <forward_dense+0x1cc>
 800a67c:	468e      	mov	lr, r1
 800a67e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a680:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a682:	3201      	adds	r2, #1
 800a684:	eb01 0a0b 	add.w	sl, r1, fp
 800a688:	f10b 0104 	add.w	r1, fp, #4
 800a68c:	9110      	str	r1, [sp, #64]	; 0x40
 800a68e:	00d1      	lsls	r1, r2, #3
 800a690:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 800a694:	f8cd a018 	str.w	sl, [sp, #24]
 800a698:	9111      	str	r1, [sp, #68]	; 0x44
 800a69a:	9212      	str	r2, [sp, #72]	; 0x48
 800a69c:	f1aa 0204 	sub.w	r2, sl, #4
 800a6a0:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	f000 8128 	beq.w	800a8fc <forward_dense+0x3cc>
 800a6ac:	ecf5 4a01 	vldmia	r5!, {s9}
 800a6b0:	f1ba 0f07 	cmp.w	sl, #7
 800a6b4:	d83d      	bhi.n	800a732 <forward_dense+0x202>
 800a6b6:	45cb      	cmp	fp, r9
 800a6b8:	d211      	bcs.n	800a6de <forward_dense+0x1ae>
 800a6ba:	eddf 7a93 	vldr	s15, [pc, #588]	; 800a908 <forward_dense+0x3d8>
 800a6be:	4659      	mov	r1, fp
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c6:	ecf1 6a01 	vldmia	r1!, {s13}
 800a6ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a6ce:	4549      	cmp	r1, r9
 800a6d0:	ed92 6a00 	vldr	s12, [r2]
 800a6d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a6d8:	d3f3      	bcc.n	800a6c2 <forward_dense+0x192>
 800a6da:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a6de:	9a02      	ldr	r2, [sp, #8]
 800a6e0:	ecee 4a01 	vstmia	lr!, {s9}
 800a6e4:	4417      	add	r7, r2
 800a6e6:	9a01      	ldr	r2, [sp, #4]
 800a6e8:	4596      	cmp	lr, r2
 800a6ea:	d3dc      	bcc.n	800a6a6 <forward_dense+0x176>
 800a6ec:	9904      	ldr	r1, [sp, #16]
 800a6ee:	1a52      	subs	r2, r2, r1
 800a6f0:	3a01      	subs	r2, #1
 800a6f2:	f022 0203 	bic.w	r2, r2, #3
 800a6f6:	3204      	adds	r2, #4
 800a6f8:	188a      	adds	r2, r1, r2
 800a6fa:	9204      	str	r2, [sp, #16]
 800a6fc:	9a01      	ldr	r2, [sp, #4]
 800a6fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a700:	9804      	ldr	r0, [sp, #16]
 800a702:	440a      	add	r2, r1
 800a704:	9905      	ldr	r1, [sp, #20]
 800a706:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a708:	9201      	str	r2, [sp, #4]
 800a70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a70c:	42a0      	cmp	r0, r4
 800a70e:	4411      	add	r1, r2
 800a710:	4491      	add	r9, r2
 800a712:	9105      	str	r1, [sp, #20]
 800a714:	9903      	ldr	r1, [sp, #12]
 800a716:	4411      	add	r1, r2
 800a718:	9103      	str	r1, [sp, #12]
 800a71a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a71c:	468b      	mov	fp, r1
 800a71e:	f080 840a 	bcs.w	800af36 <forward_dense+0xa06>
 800a722:	4411      	add	r1, r2
 800a724:	910a      	str	r1, [sp, #40]	; 0x28
 800a726:	e795      	b.n	800a654 <forward_dense+0x124>
 800a728:	6853      	ldr	r3, [r2, #4]
 800a72a:	deff      	udf	#255	; 0xff
 800a72c:	2300      	movs	r3, #0
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	deff      	udf	#255	; 0xff
 800a732:	f007 0203 	and.w	r2, r7, #3
 800a736:	2a02      	cmp	r2, #2
 800a738:	f000 81e7 	beq.w	800ab0a <forward_dense+0x5da>
 800a73c:	2a03      	cmp	r2, #3
 800a73e:	f000 80e5 	beq.w	800a90c <forward_dense+0x3dc>
 800a742:	2a01      	cmp	r2, #1
 800a744:	f000 81f0 	beq.w	800ab28 <forward_dense+0x5f8>
 800a748:	9a06      	ldr	r2, [sp, #24]
 800a74a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a908 <forward_dense+0x3d8>
 800a74e:	4593      	cmp	fp, r2
 800a750:	f200 83f6 	bhi.w	800af40 <forward_dense+0xa10>
 800a754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a756:	f107 0208 	add.w	r2, r7, #8
 800a75a:	f10b 0120 	add.w	r1, fp, #32
 800a75e:	19c4      	adds	r4, r0, r7
 800a760:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a764:	3208      	adds	r2, #8
 800a766:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a76a:	3120      	adds	r1, #32
 800a76c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a770:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800a774:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800a778:	edd0 7a00 	vldr	s15, [r0]
 800a77c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a780:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a784:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a78c:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800a790:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800a794:	ed90 2a00 	vldr	s4, [r0]
 800a798:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a79c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a7a0:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a7a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7a8:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800a7ac:	edd0 2a00 	vldr	s5, [r0]
 800a7b0:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a7b4:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a7b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7bc:	ed90 3a00 	vldr	s6, [r0]
 800a7c0:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a7c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7c8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a7cc:	edd0 3a00 	vldr	s7, [r0]
 800a7d0:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a7d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a7dc:	ed90 4a00 	vldr	s8, [r0]
 800a7e0:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a7e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7e8:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a7ec:	ed90 5a00 	vldr	s10, [r0]
 800a7f0:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a7f4:	4294      	cmp	r4, r2
 800a7f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7fa:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a7fe:	edd0 5a00 	vldr	s11, [r0]
 800a802:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a806:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a80a:	d1a9      	bne.n	800a760 <forward_dense+0x230>
 800a80c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a80e:	18b9      	adds	r1, r7, r2
 800a810:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a812:	454a      	cmp	r2, r9
 800a814:	d26f      	bcs.n	800a8f6 <forward_dense+0x3c6>
 800a816:	7808      	ldrb	r0, [r1, #0]
 800a818:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a81c:	edd0 7a00 	vldr	s15, [r0]
 800a820:	4610      	mov	r0, r2
 800a822:	ecb0 6a01 	vldmia	r0!, {s12}
 800a826:	4581      	cmp	r9, r0
 800a828:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a82c:	d963      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a82e:	7848      	ldrb	r0, [r1, #1]
 800a830:	ed92 6a01 	vldr	s12, [r2, #4]
 800a834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a838:	edd0 7a00 	vldr	s15, [r0]
 800a83c:	f102 0008 	add.w	r0, r2, #8
 800a840:	4581      	cmp	r9, r0
 800a842:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a846:	d956      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a848:	7888      	ldrb	r0, [r1, #2]
 800a84a:	ed92 6a02 	vldr	s12, [r2, #8]
 800a84e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a852:	edd0 7a00 	vldr	s15, [r0]
 800a856:	f102 000c 	add.w	r0, r2, #12
 800a85a:	4581      	cmp	r9, r0
 800a85c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a860:	d949      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a862:	78c8      	ldrb	r0, [r1, #3]
 800a864:	ed92 6a03 	vldr	s12, [r2, #12]
 800a868:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a86c:	edd0 7a00 	vldr	s15, [r0]
 800a870:	f102 0010 	add.w	r0, r2, #16
 800a874:	4581      	cmp	r9, r0
 800a876:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a87a:	d93c      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a87c:	7908      	ldrb	r0, [r1, #4]
 800a87e:	ed92 6a04 	vldr	s12, [r2, #16]
 800a882:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a886:	edd0 7a00 	vldr	s15, [r0]
 800a88a:	f102 0014 	add.w	r0, r2, #20
 800a88e:	4581      	cmp	r9, r0
 800a890:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a894:	d92f      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a896:	7948      	ldrb	r0, [r1, #5]
 800a898:	ed92 6a05 	vldr	s12, [r2, #20]
 800a89c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8a0:	edd0 7a00 	vldr	s15, [r0]
 800a8a4:	f102 0018 	add.w	r0, r2, #24
 800a8a8:	4581      	cmp	r9, r0
 800a8aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8ae:	d922      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a8b0:	7988      	ldrb	r0, [r1, #6]
 800a8b2:	ed92 6a06 	vldr	s12, [r2, #24]
 800a8b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8ba:	edd0 7a00 	vldr	s15, [r0]
 800a8be:	f102 001c 	add.w	r0, r2, #28
 800a8c2:	4581      	cmp	r9, r0
 800a8c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8c8:	d915      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a8ca:	79c8      	ldrb	r0, [r1, #7]
 800a8cc:	ed92 6a07 	vldr	s12, [r2, #28]
 800a8d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8d4:	edd0 7a00 	vldr	s15, [r0]
 800a8d8:	f102 0020 	add.w	r0, r2, #32
 800a8dc:	4581      	cmp	r9, r0
 800a8de:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8e2:	d908      	bls.n	800a8f6 <forward_dense+0x3c6>
 800a8e4:	edd2 7a08 	vldr	s15, [r2, #32]
 800a8e8:	7a0a      	ldrb	r2, [r1, #8]
 800a8ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a8ee:	ed92 6a00 	vldr	s12, [r2]
 800a8f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8f6:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800a8fa:	e6f0      	b.n	800a6de <forward_dense+0x1ae>
 800a8fc:	eddf 4a02 	vldr	s9, [pc, #8]	; 800a908 <forward_dense+0x3d8>
 800a900:	e6d6      	b.n	800a6b0 <forward_dense+0x180>
 800a902:	bf00      	nop
 800a904:	3ffffff8 	.word	0x3ffffff8
 800a908:	00000000 	.word	0x00000000
 800a90c:	eef0 6a47 	vmov.f32	s13, s14
 800a910:	4659      	mov	r1, fp
 800a912:	463a      	mov	r2, r7
 800a914:	4694      	mov	ip, r2
 800a916:	460c      	mov	r4, r1
 800a918:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800a91c:	ecf4 7a01 	vldmia	r4!, {s15}
 800a920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a924:	ed90 6a00 	vldr	s12, [r0]
 800a928:	9806      	ldr	r0, [sp, #24]
 800a92a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a92e:	4284      	cmp	r4, r0
 800a930:	d866      	bhi.n	800aa00 <forward_dense+0x4d0>
 800a932:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a934:	f102 0611 	add.w	r6, r2, #17
 800a938:	3209      	adds	r2, #9
 800a93a:	eba0 0801 	sub.w	r8, r0, r1
 800a93e:	3124      	adds	r1, #36	; 0x24
 800a940:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800a944:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800a948:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a94c:	3208      	adds	r2, #8
 800a94e:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a952:	3120      	adds	r1, #32
 800a954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a958:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800a95c:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800a960:	edd0 7a00 	vldr	s15, [r0]
 800a964:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a968:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a96c:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a974:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800a978:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800a97c:	ed90 2a00 	vldr	s4, [r0]
 800a980:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a984:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a988:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a98c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a990:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800a994:	edd0 2a00 	vldr	s5, [r0]
 800a998:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a99c:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a9a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9a4:	ed90 3a00 	vldr	s6, [r0]
 800a9a8:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a9ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a9b4:	edd0 3a00 	vldr	s7, [r0]
 800a9b8:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a9bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9c0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a9c4:	ed90 4a00 	vldr	s8, [r0]
 800a9c8:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a9cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9d0:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a9d4:	ed90 5a00 	vldr	s10, [r0]
 800a9d8:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a9dc:	4296      	cmp	r6, r2
 800a9de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9e2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a9e6:	edd0 5a00 	vldr	s11, [r0]
 800a9ea:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a9ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a9f2:	d1a9      	bne.n	800a948 <forward_dense+0x418>
 800a9f4:	f108 0801 	add.w	r8, r8, #1
 800a9f8:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800a9fc:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 800aa00:	454c      	cmp	r4, r9
 800aa02:	f4bf af78 	bcs.w	800a8f6 <forward_dense+0x3c6>
 800aa06:	f89c 2000 	ldrb.w	r2, [ip]
 800aa0a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aa0e:	edd2 7a00 	vldr	s15, [r2]
 800aa12:	4622      	mov	r2, r4
 800aa14:	ecb2 6a01 	vldmia	r2!, {s12}
 800aa18:	4591      	cmp	r9, r2
 800aa1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa1e:	f67f af6a 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aa22:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800aa26:	ed94 6a01 	vldr	s12, [r4, #4]
 800aa2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aa2e:	edd2 7a00 	vldr	s15, [r2]
 800aa32:	f104 0208 	add.w	r2, r4, #8
 800aa36:	4591      	cmp	r9, r2
 800aa38:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa3c:	f67f af5b 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aa40:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800aa44:	ed94 6a02 	vldr	s12, [r4, #8]
 800aa48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aa4c:	edd2 7a00 	vldr	s15, [r2]
 800aa50:	f104 020c 	add.w	r2, r4, #12
 800aa54:	4591      	cmp	r9, r2
 800aa56:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa5a:	f67f af4c 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aa5e:	f89c 2003 	ldrb.w	r2, [ip, #3]
 800aa62:	ed94 6a03 	vldr	s12, [r4, #12]
 800aa66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aa6a:	edd2 7a00 	vldr	s15, [r2]
 800aa6e:	f104 0210 	add.w	r2, r4, #16
 800aa72:	4591      	cmp	r9, r2
 800aa74:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa78:	f67f af3d 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aa7c:	f89c 2004 	ldrb.w	r2, [ip, #4]
 800aa80:	ed94 6a04 	vldr	s12, [r4, #16]
 800aa84:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aa88:	edd2 7a00 	vldr	s15, [r2]
 800aa8c:	f104 0214 	add.w	r2, r4, #20
 800aa90:	4591      	cmp	r9, r2
 800aa92:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa96:	f67f af2e 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aa9a:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800aa9e:	ed94 6a05 	vldr	s12, [r4, #20]
 800aaa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aaa6:	edd2 7a00 	vldr	s15, [r2]
 800aaaa:	f104 0218 	add.w	r2, r4, #24
 800aaae:	4591      	cmp	r9, r2
 800aab0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aab4:	f67f af1f 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aab8:	f89c 2006 	ldrb.w	r2, [ip, #6]
 800aabc:	ed94 6a06 	vldr	s12, [r4, #24]
 800aac0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aac4:	edd2 7a00 	vldr	s15, [r2]
 800aac8:	f104 021c 	add.w	r2, r4, #28
 800aacc:	4591      	cmp	r9, r2
 800aace:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aad2:	f67f af10 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aad6:	f89c 2007 	ldrb.w	r2, [ip, #7]
 800aada:	ed94 6a07 	vldr	s12, [r4, #28]
 800aade:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aae2:	edd2 7a00 	vldr	s15, [r2]
 800aae6:	f104 0220 	add.w	r2, r4, #32
 800aaea:	4591      	cmp	r9, r2
 800aaec:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aaf0:	f67f af01 	bls.w	800a8f6 <forward_dense+0x3c6>
 800aaf4:	f89c 2008 	ldrb.w	r2, [ip, #8]
 800aaf8:	edd4 7a08 	vldr	s15, [r4, #32]
 800aafc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ab00:	ed92 6a00 	vldr	s12, [r2]
 800ab04:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab08:	e6f5      	b.n	800a8f6 <forward_dense+0x3c6>
 800ab0a:	eef0 6a47 	vmov.f32	s13, s14
 800ab0e:	4659      	mov	r1, fp
 800ab10:	463a      	mov	r2, r7
 800ab12:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ab16:	ecf1 7a01 	vldmia	r1!, {s15}
 800ab1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab1e:	ed90 6a00 	vldr	s12, [r0]
 800ab22:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab26:	e6f5      	b.n	800a914 <forward_dense+0x3e4>
 800ab28:	463a      	mov	r2, r7
 800ab2a:	eddb 7a00 	vldr	s15, [fp]
 800ab2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab30:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ab34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab38:	edd0 6a00 	vldr	s13, [r0]
 800ab3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ab40:	e7e7      	b.n	800ab12 <forward_dense+0x5e2>
 800ab42:	4615      	mov	r5, r2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f47f ad91 	bne.w	800a66c <forward_dense+0x13c>
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	9904      	ldr	r1, [sp, #16]
 800ab4e:	428a      	cmp	r2, r1
 800ab50:	f67f add4 	bls.w	800a6fc <forward_dense+0x1cc>
 800ab54:	4690      	mov	r8, r2
 800ab56:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ab58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	f000 0c0f 	and.w	ip, r0, #15
 800ab60:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ab64:	eb0b 0602 	add.w	r6, fp, r2
 800ab68:	4692      	mov	sl, r2
 800ab6a:	9306      	str	r3, [sp, #24]
 800ab6c:	2d00      	cmp	r5, #0
 800ab6e:	f000 81d7 	beq.w	800af20 <forward_dense+0x9f0>
 800ab72:	280f      	cmp	r0, #15
 800ab74:	ecb5 0a01 	vldmia	r5!, {s0}
 800ab78:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 800a908 <forward_dense+0x3d8>
 800ab7c:	f240 81d7 	bls.w	800af2e <forward_dense+0x9fe>
 800ab80:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800ab84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab88:	4601      	mov	r1, r0
 800ab8a:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800ab8e:	3910      	subs	r1, #16
 800ab90:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800ab94:	3340      	adds	r3, #64	; 0x40
 800ab96:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 800ab9a:	290f      	cmp	r1, #15
 800ab9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aba0:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800aba4:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800aba8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800abac:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800abb0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800abb4:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 800abb8:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800abbc:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800abc0:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800abc4:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800abc8:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800abcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800abd0:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800abd4:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800abd8:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800abdc:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800abe0:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800abe4:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800abe8:	eeee 7a06 	vfma.f32	s15, s28, s12
 800abec:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 800abf0:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 800abf4:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800abf8:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 800abfc:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800ac00:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 800ac04:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ac08:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 800ac0c:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800ac10:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800ac14:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800ac18:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800ac1c:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800ac20:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ac24:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800ac28:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800ac2c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ac30:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ac34:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ac38:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ac3c:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ac40:	eee1 7a82 	vfma.f32	s15, s3, s4
 800ac44:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ac48:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ac4c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ac50:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ac54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ac58:	d897      	bhi.n	800ab8a <forward_dense+0x65a>
 800ac5a:	eb07 010a 	add.w	r1, r7, sl
 800ac5e:	4663      	mov	r3, ip
 800ac60:	4632      	mov	r2, r6
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d075      	beq.n	800ad52 <forward_dense+0x822>
 800ac66:	ed92 6a00 	vldr	s12, [r2]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	edd1 7a00 	vldr	s15, [r1]
 800ac70:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ac74:	d06d      	beq.n	800ad52 <forward_dense+0x822>
 800ac76:	ed92 6a01 	vldr	s12, [r2, #4]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	edd1 7a01 	vldr	s15, [r1, #4]
 800ac80:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ac84:	d065      	beq.n	800ad52 <forward_dense+0x822>
 800ac86:	ed92 6a02 	vldr	s12, [r2, #8]
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	edd1 7a02 	vldr	s15, [r1, #8]
 800ac90:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ac94:	d05d      	beq.n	800ad52 <forward_dense+0x822>
 800ac96:	ed92 6a03 	vldr	s12, [r2, #12]
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	edd1 7a03 	vldr	s15, [r1, #12]
 800aca0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aca4:	d055      	beq.n	800ad52 <forward_dense+0x822>
 800aca6:	ed92 6a04 	vldr	s12, [r2, #16]
 800acaa:	2b05      	cmp	r3, #5
 800acac:	edd1 7a04 	vldr	s15, [r1, #16]
 800acb0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800acb4:	d04d      	beq.n	800ad52 <forward_dense+0x822>
 800acb6:	ed92 6a05 	vldr	s12, [r2, #20]
 800acba:	2b06      	cmp	r3, #6
 800acbc:	edd1 7a05 	vldr	s15, [r1, #20]
 800acc0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800acc4:	d045      	beq.n	800ad52 <forward_dense+0x822>
 800acc6:	ed92 6a06 	vldr	s12, [r2, #24]
 800acca:	2b07      	cmp	r3, #7
 800accc:	edd1 7a06 	vldr	s15, [r1, #24]
 800acd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800acd4:	d03d      	beq.n	800ad52 <forward_dense+0x822>
 800acd6:	ed92 6a07 	vldr	s12, [r2, #28]
 800acda:	2b08      	cmp	r3, #8
 800acdc:	edd1 7a07 	vldr	s15, [r1, #28]
 800ace0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ace4:	d035      	beq.n	800ad52 <forward_dense+0x822>
 800ace6:	ed92 6a08 	vldr	s12, [r2, #32]
 800acea:	2b09      	cmp	r3, #9
 800acec:	edd1 7a08 	vldr	s15, [r1, #32]
 800acf0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800acf4:	d02d      	beq.n	800ad52 <forward_dense+0x822>
 800acf6:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800acfa:	2b0a      	cmp	r3, #10
 800acfc:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800ad00:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad04:	d025      	beq.n	800ad52 <forward_dense+0x822>
 800ad06:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 800ad0a:	2b0b      	cmp	r3, #11
 800ad0c:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800ad10:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad14:	d01d      	beq.n	800ad52 <forward_dense+0x822>
 800ad16:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800ad1a:	2b0c      	cmp	r3, #12
 800ad1c:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800ad20:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad24:	d015      	beq.n	800ad52 <forward_dense+0x822>
 800ad26:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 800ad2a:	3b0d      	subs	r3, #13
 800ad2c:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800ad30:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad34:	d00d      	beq.n	800ad52 <forward_dense+0x822>
 800ad36:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800ad40:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad44:	d005      	beq.n	800ad52 <forward_dense+0x822>
 800ad46:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800ad4a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ad4e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad52:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ad56:	4477      	add	r7, lr
 800ad58:	ece4 6a01 	vstmia	r4!, {s13}
 800ad5c:	4544      	cmp	r4, r8
 800ad5e:	f4ff af05 	bcc.w	800ab6c <forward_dense+0x63c>
 800ad62:	9b06      	ldr	r3, [sp, #24]
 800ad64:	9a01      	ldr	r2, [sp, #4]
 800ad66:	e4c1      	b.n	800a6ec <forward_dense+0x1bc>
 800ad68:	9901      	ldr	r1, [sp, #4]
 800ad6a:	9a04      	ldr	r2, [sp, #16]
 800ad6c:	4291      	cmp	r1, r2
 800ad6e:	f67f acc5 	bls.w	800a6fc <forward_dense+0x1cc>
 800ad72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad74:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ad78:	4691      	mov	r9, r2
 800ad7a:	eb07 0c01 	add.w	ip, r7, r1
 800ad7e:	9903      	ldr	r1, [sp, #12]
 800ad80:	3901      	subs	r1, #1
 800ad82:	9106      	str	r1, [sp, #24]
 800ad84:	2d00      	cmp	r5, #0
 800ad86:	f000 80c0 	beq.w	800af0a <forward_dense+0x9da>
 800ad8a:	9a07      	ldr	r2, [sp, #28]
 800ad8c:	ecb5 2a01 	vldmia	r5!, {s4}
 800ad90:	eddf 6a83 	vldr	s13, [pc, #524]	; 800afa0 <forward_dense+0xa70>
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	f000 80c0 	beq.w	800af1a <forward_dense+0x9ea>
 800ad9a:	1d39      	adds	r1, r7, #4
 800ad9c:	f10b 0220 	add.w	r2, fp, #32
 800ada0:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800ada4:	3104      	adds	r1, #4
 800ada6:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800adaa:	3220      	adds	r2, #32
 800adac:	f006 0e0f 	and.w	lr, r6, #15
 800adb0:	0936      	lsrs	r6, r6, #4
 800adb2:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 800adb6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800adba:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 800adbe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800adc2:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 800adc6:	edde 7a00 	vldr	s15, [lr]
 800adca:	edd6 2a00 	vldr	s5, [r6]
 800adce:	0926      	lsrs	r6, r4, #4
 800add0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800add4:	f004 040f 	and.w	r4, r4, #15
 800add8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800addc:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 800ade0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ade4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800ade8:	eee2 7aa3 	vfma.f32	s15, s5, s7
 800adec:	edd6 2a00 	vldr	s5, [r6]
 800adf0:	edd4 3a00 	vldr	s7, [r4]
 800adf4:	0904      	lsrs	r4, r0, #4
 800adf6:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 800adfa:	f000 000f 	and.w	r0, r0, #15
 800adfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae02:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800ae06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae0a:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 800ae0e:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 800ae12:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ae16:	eee3 7aa4 	vfma.f32	s15, s7, s9
 800ae1a:	edd4 3a00 	vldr	s7, [r4]
 800ae1e:	edd0 4a00 	vldr	s9, [r0]
 800ae22:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 800ae26:	4561      	cmp	r1, ip
 800ae28:	ea4f 1410 	mov.w	r4, r0, lsr #4
 800ae2c:	f000 000f 	and.w	r0, r0, #15
 800ae30:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ae34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae3c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800ae40:	edd4 4a00 	vldr	s9, [r4]
 800ae44:	edd0 5a00 	vldr	s11, [r0]
 800ae48:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ae4c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ae50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ae54:	d1a4      	bne.n	800ada0 <forward_dense+0x870>
 800ae56:	f1ac 0804 	sub.w	r8, ip, #4
 800ae5a:	f8dd e014 	ldr.w	lr, [sp, #20]
 800ae5e:	9a03      	ldr	r2, [sp, #12]
 800ae60:	4596      	cmp	lr, r2
 800ae62:	d229      	bcs.n	800aeb8 <forward_dense+0x988>
 800ae64:	9a06      	ldr	r2, [sp, #24]
 800ae66:	f10e 0108 	add.w	r1, lr, #8
 800ae6a:	f108 34ff 	add.w	r4, r8, #4294967295
 800ae6e:	eba2 060e 	sub.w	r6, r2, lr
 800ae72:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 800ae76:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800ae7a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800ae7e:	3108      	adds	r1, #8
 800ae80:	ed11 5a03 	vldr	s10, [r1, #-12]
 800ae84:	f002 000f 	and.w	r0, r2, #15
 800ae88:	0912      	lsrs	r2, r2, #4
 800ae8a:	ed11 6a04 	vldr	s12, [r1, #-16]
 800ae8e:	42a6      	cmp	r6, r4
 800ae90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae94:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ae98:	edd0 7a00 	vldr	s15, [r0]
 800ae9c:	edd2 5a00 	vldr	s11, [r2]
 800aea0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800aea4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aea8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aeac:	d1e5      	bne.n	800ae7a <forward_dense+0x94a>
 800aeae:	f10a 0a01 	add.w	sl, sl, #1
 800aeb2:	44d0      	add	r8, sl
 800aeb4:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800aeb8:	9a08      	ldr	r2, [sp, #32]
 800aeba:	b1ca      	cbz	r2, 800aef0 <forward_dense+0x9c0>
 800aebc:	f898 2000 	ldrb.w	r2, [r8]
 800aec0:	edde 7a00 	vldr	s15, [lr]
 800aec4:	0912      	lsrs	r2, r2, #4
 800aec6:	9902      	ldr	r1, [sp, #8]
 800aec8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800aecc:	440f      	add	r7, r1
 800aece:	448c      	add	ip, r1
 800aed0:	ed92 6a00 	vldr	s12, [r2]
 800aed4:	9a01      	ldr	r2, [sp, #4]
 800aed6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aeda:	ee32 2a26 	vadd.f32	s4, s4, s13
 800aede:	eca9 2a01 	vstmia	r9!, {s4}
 800aee2:	454a      	cmp	r2, r9
 800aee4:	f63f af4e 	bhi.w	800ad84 <forward_dense+0x854>
 800aee8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aeec:	f7ff bbfe 	b.w	800a6ec <forward_dense+0x1bc>
 800aef0:	9a02      	ldr	r2, [sp, #8]
 800aef2:	ee72 6a26 	vadd.f32	s13, s4, s13
 800aef6:	4417      	add	r7, r2
 800aef8:	4494      	add	ip, r2
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	ece9 6a01 	vstmia	r9!, {s13}
 800af00:	4591      	cmp	r9, r2
 800af02:	d2f1      	bcs.n	800aee8 <forward_dense+0x9b8>
 800af04:	2d00      	cmp	r5, #0
 800af06:	f47f af40 	bne.w	800ad8a <forward_dense+0x85a>
 800af0a:	9a07      	ldr	r2, [sp, #28]
 800af0c:	eeb0 2a47 	vmov.f32	s4, s14
 800af10:	eddf 6a23 	vldr	s13, [pc, #140]	; 800afa0 <forward_dense+0xa70>
 800af14:	2a00      	cmp	r2, #0
 800af16:	f47f af40 	bne.w	800ad9a <forward_dense+0x86a>
 800af1a:	46de      	mov	lr, fp
 800af1c:	46b8      	mov	r8, r7
 800af1e:	e79e      	b.n	800ae5e <forward_dense+0x92e>
 800af20:	280f      	cmp	r0, #15
 800af22:	eeb0 0a47 	vmov.f32	s0, s14
 800af26:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800afa0 <forward_dense+0xa70>
 800af2a:	f63f ae29 	bhi.w	800ab80 <forward_dense+0x650>
 800af2e:	4603      	mov	r3, r0
 800af30:	4639      	mov	r1, r7
 800af32:	465a      	mov	r2, fp
 800af34:	e695      	b.n	800ac62 <forward_dense+0x732>
 800af36:	b01b      	add	sp, #108	; 0x6c
 800af38:	ecbd 8b0e 	vpop	{d8-d14}
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	465a      	mov	r2, fp
 800af42:	4639      	mov	r1, r7
 800af44:	e465      	b.n	800a812 <forward_dense+0x2e2>
 800af46:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	f43f ab40 	beq.w	800a5d2 <forward_dense+0xa2>
 800af52:	e9d9 0100 	ldrd	r0, r1, [r9]
 800af56:	f009 fbab 	bl	80146b0 <ai_array_get_byte_size>
 800af5a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af5e:	4602      	mov	r2, r0
 800af60:	4651      	mov	r1, sl
 800af62:	4618      	mov	r0, r3
 800af64:	f009 fc4e 	bl	8014804 <memcpy>
 800af68:	4682      	mov	sl, r0
 800af6a:	f7ff bb32 	b.w	800a5d2 <forward_dense+0xa2>
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d00b      	beq.n	800af8a <forward_dense+0xa5a>
 800af72:	f04f 0900 	mov.w	r9, #0
 800af76:	f7ff bb27 	b.w	800a5c8 <forward_dense+0x98>
 800af7a:	930c      	str	r3, [sp, #48]	; 0x30
 800af7c:	f7ff baff 	b.w	800a57e <forward_dense+0x4e>
 800af80:	2300      	movs	r3, #0
 800af82:	930b      	str	r3, [sp, #44]	; 0x2c
 800af84:	460b      	mov	r3, r1
 800af86:	f7ff bafa 	b.w	800a57e <forward_dense+0x4e>
 800af8a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800af8e:	f7ff bb20 	b.w	800a5d2 <forward_dense+0xa2>
 800af92:	2300      	movs	r3, #0
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	deff      	udf	#255	; 0xff
 800af98:	2300      	movs	r3, #0
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	deff      	udf	#255	; 0xff
 800af9e:	bf00      	nop
 800afa0:	00000000 	.word	0x00000000

0800afa4 <func_dummy>:
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop

0800afa8 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800afa8:	6982      	ldr	r2, [r0, #24]
 800afaa:	8813      	ldrh	r3, [r2, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 81a3 	beq.w	800b2f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 800afb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb6:	ed2d 8b04 	vpush	{d8-d9}
 800afba:	6851      	ldr	r1, [r2, #4]
 800afbc:	b0d9      	sub	sp, #356	; 0x164
 800afbe:	4680      	mov	r8, r0
 800afc0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800afc4:	f1ba 0f00 	cmp.w	sl, #0
 800afc8:	d001      	beq.n	800afce <forward_conv2d_nl_pool_integer_SSSA_ch+0x26>
 800afca:	f8da a000 	ldr.w	sl, [sl]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	f000 8369 	beq.w	800b6a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fe>
 800afd4:	690a      	ldr	r2, [r1, #16]
 800afd6:	9218      	str	r2, [sp, #96]	; 0x60
 800afd8:	b10a      	cbz	r2, 800afde <forward_conv2d_nl_pool_integer_SSSA_ch+0x36>
 800afda:	6812      	ldr	r2, [r2, #0]
 800afdc:	9218      	str	r2, [sp, #96]	; 0x60
 800afde:	2b02      	cmp	r3, #2
 800afe0:	f000 8187 	beq.w	800b2f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x34a>
 800afe4:	69ca      	ldr	r2, [r1, #28]
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	f000 82f4 	beq.w	800b5d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x62c>
 800afec:	8b08      	ldrh	r0, [r1, #24]
 800afee:	f8d2 b000 	ldr.w	fp, [r2]
 800aff2:	2801      	cmp	r0, #1
 800aff4:	f200 8182 	bhi.w	800b2fc <forward_conv2d_nl_pool_integer_SSSA_ch+0x354>
 800aff8:	2000      	movs	r0, #0
 800affa:	901d      	str	r0, [sp, #116]	; 0x74
 800affc:	2b03      	cmp	r3, #3
 800affe:	f000 8355 	beq.w	800b6ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x704>
 800b002:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 834c 	beq.w	800b6a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fa>
 800b00a:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b014:	9133      	str	r1, [sp, #204]	; 0xcc
 800b016:	901a      	str	r0, [sp, #104]	; 0x68
 800b018:	2900      	cmp	r1, #0
 800b01a:	f000 82d6 	beq.w	800b5ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x622>
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	9319      	str	r3, [sp, #100]	; 0x64
 800b022:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b026:	f8da 000c 	ldr.w	r0, [sl, #12]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	6845      	ldr	r5, [r0, #4]
 800b02e:	461e      	mov	r6, r3
 800b030:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b032:	9516      	str	r5, [sp, #88]	; 0x58
 800b034:	b2b6      	uxth	r6, r6
 800b036:	68e4      	ldr	r4, [r4, #12]
 800b038:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 800b03c:	ee08 6a90 	vmov	s17, r6
 800b040:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800b044:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 800b048:	ee08 6a10 	vmov	s16, r6
 800b04c:	68e6      	ldr	r6, [r4, #12]
 800b04e:	68a4      	ldr	r4, [r4, #8]
 800b050:	9322      	str	r3, [sp, #136]	; 0x88
 800b052:	9439      	str	r4, [sp, #228]	; 0xe4
 800b054:	680b      	ldr	r3, [r1, #0]
 800b056:	f8db c00c 	ldr.w	ip, [fp, #12]
 800b05a:	f8d8 7054 	ldr.w	r7, [r8, #84]	; 0x54
 800b05e:	961e      	str	r6, [sp, #120]	; 0x78
 800b060:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800b064:	903d      	str	r0, [sp, #244]	; 0xf4
 800b066:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 800b06a:	9037      	str	r0, [sp, #220]	; 0xdc
 800b06c:	b2a8      	uxth	r0, r5
 800b06e:	9038      	str	r0, [sp, #224]	; 0xe0
 800b070:	b298      	uxth	r0, r3
 800b072:	9017      	str	r0, [sp, #92]	; 0x5c
 800b074:	8888      	ldrh	r0, [r1, #4]
 800b076:	6889      	ldr	r1, [r1, #8]
 800b078:	902e      	str	r0, [sp, #184]	; 0xb8
 800b07a:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
 800b07e:	902f      	str	r0, [sp, #188]	; 0xbc
 800b080:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
 800b084:	9030      	str	r0, [sp, #192]	; 0xc0
 800b086:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800b08a:	9020      	str	r0, [sp, #128]	; 0x80
 800b08c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b090:	9029      	str	r0, [sp, #164]	; 0xa4
 800b092:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800b096:	901b      	str	r0, [sp, #108]	; 0x6c
 800b098:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 800b09c:	903a      	str	r0, [sp, #232]	; 0xe8
 800b09e:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800b0a2:	903b      	str	r0, [sp, #236]	; 0xec
 800b0a4:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800b0a8:	9026      	str	r0, [sp, #152]	; 0x98
 800b0aa:	6838      	ldr	r0, [r7, #0]
 800b0ac:	902b      	str	r0, [sp, #172]	; 0xac
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	903c      	str	r0, [sp, #240]	; 0xf0
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	f000 8264 	beq.w	800b580 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800b0b8:	6892      	ldr	r2, [r2, #8]
 800b0ba:	2a00      	cmp	r2, #0
 800b0bc:	f000 8260 	beq.w	800b580 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800b0c0:	6990      	ldr	r0, [r2, #24]
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	bf08      	it	eq
 800b0c6:	4602      	moveq	r2, r0
 800b0c8:	922a      	str	r2, [sp, #168]	; 0xa8
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b0ce:	b2aa      	uxth	r2, r5
 800b0d0:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800b0d4:	fa13 f181 	uxtah	r1, r3, r1
 800b0d8:	4423      	add	r3, r4
 800b0da:	9223      	str	r2, [sp, #140]	; 0x8c
 800b0dc:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 800b0e0:	4421      	add	r1, r4
 800b0e2:	9321      	str	r3, [sp, #132]	; 0x84
 800b0e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b0e6:	ac4d      	add	r4, sp, #308	; 0x134
 800b0e8:	6987      	ldr	r7, [r0, #24]
 800b0ea:	1acd      	subs	r5, r1, r3
 800b0ec:	f240 4101 	movw	r1, #1025	; 0x401
 800b0f0:	f8cd c150 	str.w	ip, [sp, #336]	; 0x150
 800b0f4:	fbb5 f3f2 	udiv	r3, r5, r2
 800b0f8:	aa49      	add	r2, sp, #292	; 0x124
 800b0fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b0fc:	9315      	str	r3, [sp, #84]	; 0x54
 800b0fe:	2300      	movs	r3, #0
 800b100:	9256      	str	r2, [sp, #344]	; 0x158
 800b102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b106:	69ad      	ldr	r5, [r5, #24]
 800b108:	9351      	str	r3, [sp, #324]	; 0x144
 800b10a:	9345      	str	r3, [sp, #276]	; 0x114
 800b10c:	9349      	str	r3, [sp, #292]	; 0x124
 800b10e:	9348      	str	r3, [sp, #288]	; 0x120
 800b110:	934c      	str	r3, [sp, #304]	; 0x130
 800b112:	9357      	str	r3, [sp, #348]	; 0x15c
 800b114:	952c      	str	r5, [sp, #176]	; 0xb0
 800b116:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 800b11a:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 800b11e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800b122:	e9cd 2152 	strd	r2, r1, [sp, #328]	; 0x148
 800b126:	f240 4102 	movw	r1, #1026	; 0x402
 800b12a:	931f      	str	r3, [sp, #124]	; 0x7c
 800b12c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800b130:	9155      	str	r1, [sp, #340]	; 0x154
 800b132:	4601      	mov	r1, r0
 800b134:	a851      	add	r0, sp, #324	; 0x144
 800b136:	9331      	str	r3, [sp, #196]	; 0xc4
 800b138:	f009 faf2 	bl	8014720 <core_tensor_clone>
 800b13c:	4620      	mov	r0, r4
 800b13e:	4639      	mov	r1, r7
 800b140:	f009 fb20 	bl	8014784 <core_array_clone>
 800b144:	9457      	str	r4, [sp, #348]	; 0x15c
 800b146:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b14a:	f8da 2000 	ldr.w	r2, [sl]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f9bd 40ac 	ldrsh.w	r4, [sp, #172]	; 0xac
 800b154:	931c      	str	r3, [sp, #112]	; 0x70
 800b156:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b158:	f8db 0000 	ldr.w	r0, [fp]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	9327      	str	r3, [sp, #156]	; 0x9c
 800b162:	f8d9 3000 	ldr.w	r3, [r9]
 800b166:	2a00      	cmp	r2, #0
 800b168:	f000 81c9 	beq.w	800b4fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800b16c:	6851      	ldr	r1, [r2, #4]
 800b16e:	2900      	cmp	r1, #0
 800b170:	f000 81c5 	beq.w	800b4fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800b174:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800b178:	f1bc 0f00 	cmp.w	ip, #0
 800b17c:	f000 81bf 	beq.w	800b4fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800b180:	6809      	ldr	r1, [r1, #0]
 800b182:	ed91 0a00 	vldr	s0, [r1]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 81b6 	beq.w	800b4f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800b18c:	6859      	ldr	r1, [r3, #4]
 800b18e:	2900      	cmp	r1, #0
 800b190:	f000 81b2 	beq.w	800b4f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800b194:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800b198:	f1bc 0f00 	cmp.w	ip, #0
 800b19c:	f000 81ac 	beq.w	800b4f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800b1a0:	6809      	ldr	r1, [r1, #0]
 800b1a2:	edd1 0a00 	vldr	s1, [r1]
 800b1a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800b1a8:	2901      	cmp	r1, #1
 800b1aa:	f040 81a2 	bne.w	800b4f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800b1ae:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b1b0:	2901      	cmp	r1, #1
 800b1b2:	f040 819e 	bne.w	800b4f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800b1b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b1b8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800b1ba:	4329      	orrs	r1, r5
 800b1bc:	f040 8199 	bne.w	800b4f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800b1c0:	e9dd 1537 	ldrd	r1, r5, [sp, #220]	; 0xdc
 800b1c4:	2901      	cmp	r1, #1
 800b1c6:	bf08      	it	eq
 800b1c8:	2d01      	cmpeq	r5, #1
 800b1ca:	bf0c      	ite	eq
 800b1cc:	2101      	moveq	r1, #1
 800b1ce:	2100      	movne	r1, #0
 800b1d0:	9124      	str	r1, [sp, #144]	; 0x90
 800b1d2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b1d4:	f8da c018 	ldr.w	ip, [sl, #24]
 800b1d8:	f8db e018 	ldr.w	lr, [fp, #24]
 800b1dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800b1e0:	6989      	ldr	r1, [r1, #24]
 800b1e2:	951d      	str	r5, [sp, #116]	; 0x74
 800b1e4:	6889      	ldr	r1, [r1, #8]
 800b1e6:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b1ea:	9132      	str	r1, [sp, #200]	; 0xc8
 800b1ec:	952d      	str	r5, [sp, #180]	; 0xb4
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	f000 81c0 	beq.w	800b574 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800b1f4:	6851      	ldr	r1, [r2, #4]
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	f000 81e5 	beq.w	800b5c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x61e>
 800b1fc:	8852      	ldrh	r2, [r2, #2]
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	f000 81b8 	beq.w	800b574 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800b204:	684a      	ldr	r2, [r1, #4]
 800b206:	f992 2000 	ldrsb.w	r2, [r2]
 800b20a:	9234      	str	r2, [sp, #208]	; 0xd0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 81b5 	beq.w	800b57c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	2a00      	cmp	r2, #0
 800b216:	f000 81d4 	beq.w	800b5c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x61a>
 800b21a:	885b      	ldrh	r3, [r3, #2]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 81ad 	beq.w	800b57c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800b222:	6853      	ldr	r3, [r2, #4]
 800b224:	f993 3000 	ldrsb.w	r3, [r3]
 800b228:	9336      	str	r3, [sp, #216]	; 0xd8
 800b22a:	b110      	cbz	r0, 800b232 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800b22c:	6840      	ldr	r0, [r0, #4]
 800b22e:	b100      	cbz	r0, 800b232 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800b230:	6800      	ldr	r0, [r0, #0]
 800b232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b234:	2b01      	cmp	r3, #1
 800b236:	f000 81bd 	beq.w	800b5b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800b23a:	461a      	mov	r2, r3
 800b23c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800b240:	429a      	cmp	r2, r3
 800b242:	bf0c      	ite	eq
 800b244:	2317      	moveq	r3, #23
 800b246:	2300      	movne	r3, #0
 800b248:	9328      	str	r3, [sp, #160]	; 0xa0
 800b24a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b24c:	ee18 1a90 	vmov	r1, s17
 800b250:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
 800b254:	462a      	mov	r2, r5
 800b256:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800b25a:	9335      	str	r3, [sp, #212]	; 0xd4
 800b25c:	f001 fa2e 	bl	800c6bc <align_factor_ch>
 800b260:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b262:	9543      	str	r5, [sp, #268]	; 0x10c
 800b264:	698b      	ldr	r3, [r1, #24]
 800b266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b26a:	f009 fa21 	bl	80146b0 <ai_array_get_byte_size>
 800b26e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b270:	9044      	str	r0, [sp, #272]	; 0x110
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8106 	beq.w	800b484 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4dc>
 800b278:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b27a:	f04f 0b00 	mov.w	fp, #0
 800b27e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800b282:	fb02 f10a 	mul.w	r1, r2, sl
 800b286:	b292      	uxth	r2, r2
 800b288:	9422      	str	r4, [sp, #136]	; 0x88
 800b28a:	9125      	str	r1, [sp, #148]	; 0x94
 800b28c:	9224      	str	r2, [sp, #144]	; 0x90
 800b28e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800b292:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
 800b296:	2901      	cmp	r1, #1
 800b298:	bf08      	it	eq
 800b29a:	2a01      	cmpeq	r2, #1
 800b29c:	ee18 1a10 	vmov	r1, s16
 800b2a0:	bf14      	ite	ne
 800b2a2:	2201      	movne	r2, #1
 800b2a4:	2200      	moveq	r2, #0
 800b2a6:	2907      	cmp	r1, #7
 800b2a8:	bf88      	it	hi
 800b2aa:	f042 0201 	orrhi.w	r2, r2, #1
 800b2ae:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800b2b0:	923e      	str	r2, [sp, #248]	; 0xf8
 800b2b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b2b4:	fb01 f202 	mul.w	r2, r1, r2
 800b2b8:	fb03 f202 	mul.w	r2, r3, r2
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	923d      	str	r2, [sp, #244]	; 0xf4
 800b2c2:	933f      	str	r3, [sp, #252]	; 0xfc
 800b2c4:	b28b      	uxth	r3, r1
 800b2c6:	ee09 3a10 	vmov	s18, r3
 800b2ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2cc:	e9cd 3b1a 	strd	r3, fp, [sp, #104]	; 0x68
 800b2d0:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800b2d4:	931c      	str	r3, [sp, #112]	; 0x70
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	3301      	adds	r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f340 80de 	ble.w	800b49c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4f4>
 800b2e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b2e2:	2b17      	cmp	r3, #23
 800b2e4:	f000 8112 	beq.w	800b50c <forward_conv2d_nl_pool_integer_SSSA_ch+0x564>
 800b2e8:	2b18      	cmp	r3, #24
 800b2ea:	d00a      	beq.n	800b302 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 800b2ec:	2b16      	cmp	r3, #22
 800b2ee:	d00c      	beq.n	800b30a <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 800b2f0:	e7fe      	b.n	800b2f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x348>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	deff      	udf	#255	; 0xff
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	deff      	udf	#255	; 0xff
 800b2fc:	6850      	ldr	r0, [r2, #4]
 800b2fe:	901d      	str	r0, [sp, #116]	; 0x74
 800b300:	e67c      	b.n	800affc <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800b302:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8168 	beq.w	800b5da <forward_conv2d_nl_pool_integer_SSSA_ch+0x632>
 800b30a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b30c:	429c      	cmp	r4, r3
 800b30e:	d103      	bne.n	800b318 <forward_conv2d_nl_pool_integer_SSSA_ch+0x370>
 800b310:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 819d 	beq.w	800b652 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6aa>
 800b318:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800b31c:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800b320:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800b324:	2201      	movs	r2, #1
 800b326:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800b32a:	ee19 1a10 	vmov	r1, s18
 800b32e:	9211      	str	r2, [sp, #68]	; 0x44
 800b330:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b332:	9210      	str	r2, [sp, #64]	; 0x40
 800b334:	68b2      	ldr	r2, [r6, #8]
 800b336:	edcd 8a01 	vstr	s17, [sp, #4]
 800b33a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b33c:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 800b340:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b342:	930b      	str	r3, [sp, #44]	; 0x2c
 800b344:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b346:	930a      	str	r3, [sp, #40]	; 0x28
 800b348:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b34a:	9309      	str	r3, [sp, #36]	; 0x24
 800b34c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800b34e:	9308      	str	r3, [sp, #32]
 800b350:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b352:	9307      	str	r3, [sp, #28]
 800b354:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b356:	9306      	str	r3, [sp, #24]
 800b358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b35a:	9305      	str	r3, [sp, #20]
 800b35c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b35e:	9304      	str	r3, [sp, #16]
 800b360:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b366:	930e      	str	r3, [sp, #56]	; 0x38
 800b368:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b36a:	930d      	str	r3, [sp, #52]	; 0x34
 800b36c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b36e:	930c      	str	r3, [sp, #48]	; 0x30
 800b370:	ee18 3a10 	vmov	r3, s16
 800b374:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b378:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b37a:	f003 f8dd 	bl	800e538 <st_sssa8_ch_convolve>
 800b37e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b382:	4293      	cmp	r3, r2
 800b384:	f000 80be 	beq.w	800b504 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55c>
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b38c:	429a      	cmp	r2, r3
 800b38e:	9321      	str	r3, [sp, #132]	; 0x84
 800b390:	bf28      	it	cs
 800b392:	461a      	movcs	r2, r3
 800b394:	921a      	str	r2, [sp, #104]	; 0x68
 800b396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 809b 	bne.w	800b4d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52c>
 800b39e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3a0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800b3a2:	4413      	add	r3, r2
 800b3a4:	931d      	str	r3, [sp, #116]	; 0x74
 800b3a6:	3401      	adds	r4, #1
 800b3a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b3aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	b224      	sxth	r4, r4
 800b3b0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b3b2:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800b3b4:	47a8      	blx	r5
 800b3b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b3b8:	429c      	cmp	r4, r3
 800b3ba:	db39      	blt.n	800b430 <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800b3bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800b3c4:	a851      	add	r0, sp, #324	; 0x144
 800b3c6:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800b3ca:	9308      	str	r3, [sp, #32]
 800b3cc:	fa1f f38b 	uxth.w	r3, fp
 800b3d0:	9207      	str	r2, [sp, #28]
 800b3d2:	1ae4      	subs	r4, r4, r3
 800b3d4:	9305      	str	r3, [sp, #20]
 800b3d6:	fa1f f38a 	uxth.w	r3, sl
 800b3da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b3de:	b224      	sxth	r4, r4
 800b3e0:	9303      	str	r3, [sp, #12]
 800b3e2:	3201      	adds	r2, #1
 800b3e4:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 800b3e8:	9216      	str	r2, [sp, #88]	; 0x58
 800b3ea:	9306      	str	r3, [sp, #24]
 800b3ec:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800b3f0:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
 800b3fa:	9201      	str	r2, [sp, #4]
 800b3fc:	1a52      	subs	r2, r2, r1
 800b3fe:	9302      	str	r3, [sp, #8]
 800b400:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800b404:	b292      	uxth	r2, r2
 800b406:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	ee18 3a90 	vmov	r3, s17
 800b40e:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 800b410:	47a8      	blx	r5
 800b412:	4652      	mov	r2, sl
 800b414:	fa0f f38b 	sxth.w	r3, fp
 800b418:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b420:	b21a      	sxth	r2, r3
 800b422:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	9222      	str	r2, [sp, #136]	; 0x88
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	688b      	ldr	r3, [r1, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	608b      	str	r3, [r1, #8]
 800b430:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b434:	68b2      	ldr	r2, [r6, #8]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	eb02 0a03 	add.w	sl, r2, r3
 800b43c:	f8c6 a008 	str.w	sl, [r6, #8]
 800b440:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b444:	b13b      	cbz	r3, 800b456 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4ae>
 800b446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	68da      	ldr	r2, [r3, #12]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	4413      	add	r3, r2
 800b450:	60bb      	str	r3, [r7, #8]
 800b452:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800b456:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800b45a:	4648      	mov	r0, r9
 800b45c:	f009 f8a6 	bl	80145ac <get_tensor_byte_size>
 800b460:	4458      	add	r0, fp
 800b462:	4582      	cmp	sl, r0
 800b464:	d306      	bcc.n	800b474 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800b466:	68f3      	ldr	r3, [r6, #12]
 800b468:	60b3      	str	r3, [r6, #8]
 800b46a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b46e:	b10b      	cbz	r3, 800b474 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	60bb      	str	r3, [r7, #8]
 800b474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b476:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b478:	3b01      	subs	r3, #1
 800b47a:	9315      	str	r3, [sp, #84]	; 0x54
 800b47c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b47e:	4293      	cmp	r3, r2
 800b480:	f4ff af29 	bcc.w	800b2d6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x32e>
 800b484:	68f3      	ldr	r3, [r6, #12]
 800b486:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b488:	60b3      	str	r3, [r6, #8]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	60bb      	str	r3, [r7, #8]
 800b48e:	68d3      	ldr	r3, [r2, #12]
 800b490:	6093      	str	r3, [r2, #8]
 800b492:	b059      	add	sp, #356	; 0x164
 800b494:	ecbd 8b04 	vpop	{d8-d9}
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da89      	bge.n	800b3b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800b4a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b4a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b4a8:	fb03 1314 	mls	r3, r3, r4, r1
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d901      	bls.n	800b4b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	4403      	add	r3, r0
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d202      	bcs.n	800b4be <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b4b8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b4ba:	42a0      	cmp	r0, r4
 800b4bc:	d169      	bne.n	800b592 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 800b4be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4c0:	b2a4      	uxth	r4, r4
 800b4c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b4c4:	4413      	add	r3, r2
 800b4c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b4c8:	1b1b      	subs	r3, r3, r4
 800b4ca:	4414      	add	r4, r2
 800b4cc:	b21b      	sxth	r3, r3
 800b4ce:	b224      	sxth	r4, r4
 800b4d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4d2:	e770      	b.n	800b3b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800b4d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	1a5b      	subs	r3, r3, r1
 800b4da:	d505      	bpl.n	800b4e8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x540>
 800b4dc:	1a8a      	subs	r2, r1, r2
 800b4de:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800b4e0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b4e2:	fb00 1202 	mla	r2, r0, r2, r1
 800b4e6:	921d      	str	r2, [sp, #116]	; 0x74
 800b4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4f0:	e759      	b.n	800b3a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3fe>
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	9124      	str	r1, [sp, #144]	; 0x90
 800b4f6:	e66c      	b.n	800b1d2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x22a>
 800b4f8:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b6b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800b4fc:	e653      	b.n	800b1a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1fe>
 800b4fe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b6b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800b502:	e640      	b.n	800b186 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1de>
 800b504:	2300      	movs	r3, #0
 800b506:	931a      	str	r3, [sp, #104]	; 0x68
 800b508:	9321      	str	r3, [sp, #132]	; 0x84
 800b50a:	e744      	b.n	800b396 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ee>
 800b50c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b50e:	429c      	cmp	r4, r3
 800b510:	d103      	bne.n	800b51a <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 800b512:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80b4 	beq.w	800b682 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 800b51a:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800b51e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800b522:	2101      	movs	r1, #1
 800b524:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800b526:	910f      	str	r1, [sp, #60]	; 0x3c
 800b528:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b52a:	9010      	str	r0, [sp, #64]	; 0x40
 800b52c:	910e      	str	r1, [sp, #56]	; 0x38
 800b52e:	68b1      	ldr	r1, [r6, #8]
 800b530:	edcd 8a01 	vstr	s17, [sp, #4]
 800b534:	910d      	str	r1, [sp, #52]	; 0x34
 800b536:	ee19 1a10 	vmov	r1, s18
 800b53a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b53e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b540:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b544:	930c      	str	r3, [sp, #48]	; 0x30
 800b546:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b548:	930b      	str	r3, [sp, #44]	; 0x2c
 800b54a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b54c:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 800b550:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b552:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b554:	9308      	str	r3, [sp, #32]
 800b556:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b558:	9307      	str	r3, [sp, #28]
 800b55a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b55c:	9306      	str	r3, [sp, #24]
 800b55e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b560:	9305      	str	r3, [sp, #20]
 800b562:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	ee18 3a10 	vmov	r3, s16
 800b56e:	f001 f9d1 	bl	800c914 <st_sssa8_ch_convolve_dw>
 800b572:	e704      	b.n	800b37e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800b574:	9234      	str	r2, [sp, #208]	; 0xd0
 800b576:	2b00      	cmp	r3, #0
 800b578:	f47f ae4b 	bne.w	800b212 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 800b57c:	9336      	str	r3, [sp, #216]	; 0xd8
 800b57e:	e654      	b.n	800b22a <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800b580:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b584:	922a      	str	r2, [sp, #168]	; 0xa8
 800b586:	2a00      	cmp	r2, #0
 800b588:	f43f ad9f 	beq.w	800b0ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800b58c:	6892      	ldr	r2, [r2, #8]
 800b58e:	922a      	str	r2, [sp, #168]	; 0xa8
 800b590:	e59b      	b.n	800b0ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4402      	add	r2, r0
 800b596:	4293      	cmp	r3, r2
 800b598:	d291      	bcs.n	800b4be <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b59a:	3901      	subs	r1, #1
 800b59c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b59e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a2:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	4402      	add	r2, r0
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d3f6      	bcc.n	800b59e <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800b5b0:	9515      	str	r5, [sp, #84]	; 0x54
 800b5b2:	e784      	b.n	800b4be <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b5b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf0c      	ite	eq
 800b5ba:	2318      	moveq	r3, #24
 800b5bc:	2316      	movne	r3, #22
 800b5be:	9328      	str	r3, [sp, #160]	; 0xa0
 800b5c0:	e643      	b.n	800b24a <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a2>
 800b5c2:	9236      	str	r2, [sp, #216]	; 0xd8
 800b5c4:	e631      	b.n	800b22a <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800b5c6:	9134      	str	r1, [sp, #208]	; 0xd0
 800b5c8:	e620      	b.n	800b20c <forward_conv2d_nl_pool_integer_SSSA_ch+0x264>
 800b5ca:	4b3b      	ldr	r3, [pc, #236]	; (800b6b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x710>)
 800b5cc:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800b5d0:	9333      	str	r3, [sp, #204]	; 0xcc
 800b5d2:	e526      	b.n	800b022 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 800b5d4:	4693      	mov	fp, r2
 800b5d6:	921d      	str	r2, [sp, #116]	; 0x74
 800b5d8:	e510      	b.n	800affc <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800b5da:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b5dc:	ee18 0a10 	vmov	r0, s16
 800b5e0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b5e2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b5e4:	f8bd b0a4 	ldrh.w	fp, [sp, #164]	; 0xa4
 800b5e8:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800b5ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b5ee:	9503      	str	r5, [sp, #12]
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	465b      	mov	r3, fp
 800b5f4:	9201      	str	r2, [sp, #4]
 800b5f6:	ee18 2a90 	vmov	r2, s17
 800b5fa:	f8cd a000 	str.w	sl, [sp]
 800b5fe:	f002 fed5 	bl	800e3ac <st_sssa8_ch_convolve_rank1upd>
 800b602:	2101      	movs	r1, #1
 800b604:	9510      	str	r5, [sp, #64]	; 0x40
 800b606:	910f      	str	r1, [sp, #60]	; 0x3c
 800b608:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b60a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b60c:	910e      	str	r1, [sp, #56]	; 0x38
 800b60e:	68b3      	ldr	r3, [r6, #8]
 800b610:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800b612:	930d      	str	r3, [sp, #52]	; 0x34
 800b614:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b616:	9208      	str	r2, [sp, #32]
 800b618:	930b      	str	r3, [sp, #44]	; 0x2c
 800b61a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b61c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b61e:	910c      	str	r1, [sp, #48]	; 0x30
 800b620:	ee19 1a10 	vmov	r1, s18
 800b624:	9200      	str	r2, [sp, #0]
 800b626:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b628:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b62c:	edcd 8a01 	vstr	s17, [sp, #4]
 800b630:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 800b634:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800b636:	ee18 3a10 	vmov	r3, s16
 800b63a:	9507      	str	r5, [sp, #28]
 800b63c:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800b63e:	9506      	str	r5, [sp, #24]
 800b640:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800b642:	9505      	str	r5, [sp, #20]
 800b644:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800b646:	e9cd ba02 	strd	fp, sl, [sp, #8]
 800b64a:	9504      	str	r5, [sp, #16]
 800b64c:	f003 f854 	bl	800e6f8 <st_sssa8_ch_convolve_startNN>
 800b650:	e695      	b.n	800b37e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800b652:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b654:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800b658:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800b65c:	ee18 2a10 	vmov	r2, s16
 800b660:	9302      	str	r3, [sp, #8]
 800b662:	ee18 1a90 	vmov	r1, s17
 800b666:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800b668:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800b670:	f8cd b000 	str.w	fp, [sp]
 800b674:	f8cd a00c 	str.w	sl, [sp, #12]
 800b678:	9340      	str	r3, [sp, #256]	; 0x100
 800b67a:	f002 ff27 	bl	800e4cc <st_sssa8_ch_convolve_WeightsPrefetch>
 800b67e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800b680:	e650      	b.n	800b324 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800b682:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b684:	ee18 1a90 	vmov	r1, s17
 800b688:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800b692:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800b694:	9241      	str	r2, [sp, #260]	; 0x104
 800b696:	9340      	str	r3, [sp, #256]	; 0x100
 800b698:	f001 f874 	bl	800c784 <st_sssa8_ch_conv_dw_Wadapt>
 800b69c:	e9dd 3240 	ldrd	r3, r2, [sp, #256]	; 0x100
 800b6a0:	e73f      	b.n	800b522 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	deff      	udf	#255	; 0xff
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	deff      	udf	#255	; 0xff
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	deff      	udf	#255	; 0xff
 800b6b2:	bf00      	nop
 800b6b4:	00000000 	.word	0x00000000
 800b6b8:	0800afa5 	.word	0x0800afa5

0800b6bc <forward_dense_integer_SSSA>:
 800b6bc:	6982      	ldr	r2, [r0, #24]
 800b6be:	8813      	ldrh	r3, [r2, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 80c8 	beq.w	800b856 <forward_dense_integer_SSSA+0x19a>
 800b6c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	6852      	ldr	r2, [r2, #4]
 800b6cc:	b093      	sub	sp, #76	; 0x4c
 800b6ce:	6854      	ldr	r4, [r2, #4]
 800b6d0:	b104      	cbz	r4, 800b6d4 <forward_dense_integer_SSSA+0x18>
 800b6d2:	6824      	ldr	r4, [r4, #0]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	f000 8161 	beq.w	800b99c <forward_dense_integer_SSSA+0x2e0>
 800b6da:	6911      	ldr	r1, [r2, #16]
 800b6dc:	b101      	cbz	r1, 800b6e0 <forward_dense_integer_SSSA+0x24>
 800b6de:	6809      	ldr	r1, [r1, #0]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	f000 815e 	beq.w	800b9a2 <forward_dense_integer_SSSA+0x2e6>
 800b6e6:	69d5      	ldr	r5, [r2, #28]
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	f000 8108 	beq.w	800b8fe <forward_dense_integer_SSSA+0x242>
 800b6ee:	8b16      	ldrh	r6, [r2, #24]
 800b6f0:	6828      	ldr	r0, [r5, #0]
 800b6f2:	2e01      	cmp	r6, #1
 800b6f4:	f240 812d 	bls.w	800b952 <forward_dense_integer_SSSA+0x296>
 800b6f8:	686d      	ldr	r5, [r5, #4]
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	f000 8154 	beq.w	800b9a8 <forward_dense_integer_SSSA+0x2ec>
 800b700:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800b704:	69ab      	ldr	r3, [r5, #24]
 800b706:	f1b9 0f00 	cmp.w	r9, #0
 800b70a:	f000 810f 	beq.w	800b92c <forward_dense_integer_SSSA+0x270>
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	68e2      	ldr	r2, [r4, #12]
 800b712:	930b      	str	r3, [sp, #44]	; 0x2c
 800b714:	68cb      	ldr	r3, [r1, #12]
 800b716:	6856      	ldr	r6, [r2, #4]
 800b718:	f8d9 9000 	ldr.w	r9, [r9]
 800b71c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b720:	698d      	ldr	r5, [r1, #24]
 800b722:	960f      	str	r6, [sp, #60]	; 0x3c
 800b724:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	fb03 f302 	mul.w	r3, r3, r2
 800b72e:	b2b2      	uxth	r2, r6
 800b730:	930c      	str	r3, [sp, #48]	; 0x30
 800b732:	fa1f f38a 	uxth.w	r3, sl
 800b736:	f1b9 0f00 	cmp.w	r9, #0
 800b73a:	d003      	beq.n	800b744 <forward_dense_integer_SSSA+0x88>
 800b73c:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800b740:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800b744:	6827      	ldr	r7, [r4, #0]
 800b746:	f8d0 b000 	ldr.w	fp, [r0]
 800b74a:	680c      	ldr	r4, [r1, #0]
 800b74c:	6981      	ldr	r1, [r0, #24]
 800b74e:	2f00      	cmp	r7, #0
 800b750:	f000 8083 	beq.w	800b85a <forward_dense_integer_SSSA+0x19e>
 800b754:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b758:	f1bc 0f00 	cmp.w	ip, #0
 800b75c:	f000 80b1 	beq.w	800b8c2 <forward_dense_integer_SSSA+0x206>
 800b760:	8878      	ldrh	r0, [r7, #2]
 800b762:	2800      	cmp	r0, #0
 800b764:	f000 809c 	beq.w	800b8a0 <forward_dense_integer_SSSA+0x1e4>
 800b768:	f8dc 6000 	ldr.w	r6, [ip]
 800b76c:	edd6 7a00 	vldr	s15, [r6]
 800b770:	2c00      	cmp	r4, #0
 800b772:	f000 809a 	beq.w	800b8aa <forward_dense_integer_SSSA+0x1ee>
 800b776:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b77a:	f1b8 0f00 	cmp.w	r8, #0
 800b77e:	f000 80a9 	beq.w	800b8d4 <forward_dense_integer_SSSA+0x218>
 800b782:	8860      	ldrh	r0, [r4, #2]
 800b784:	2800      	cmp	r0, #0
 800b786:	d074      	beq.n	800b872 <forward_dense_integer_SSSA+0x1b6>
 800b788:	68ae      	ldr	r6, [r5, #8]
 800b78a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b78e:	6889      	ldr	r1, [r1, #8]
 800b790:	950d      	str	r5, [sp, #52]	; 0x34
 800b792:	f8d8 5000 	ldr.w	r5, [r8]
 800b796:	ed95 0a00 	vldr	s0, [r5]
 800b79a:	f1bc 0f00 	cmp.w	ip, #0
 800b79e:	d076      	beq.n	800b88e <forward_dense_integer_SSSA+0x1d2>
 800b7a0:	8878      	ldrh	r0, [r7, #2]
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	f000 80a3 	beq.w	800b8ee <forward_dense_integer_SSSA+0x232>
 800b7a8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b7ac:	f990 7000 	ldrsb.w	r7, [r0]
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	f000 80eb 	beq.w	800b98c <forward_dense_integer_SSSA+0x2d0>
 800b7b6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ba:	f000 809d 	beq.w	800b8f8 <forward_dense_integer_SSSA+0x23c>
 800b7be:	8860      	ldrh	r0, [r4, #2]
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d167      	bne.n	800b894 <forward_dense_integer_SSSA+0x1d8>
 800b7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800b7c6:	910e      	str	r1, [sp, #56]	; 0x38
 800b7c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7cc:	f1bb 0f00 	cmp.w	fp, #0
 800b7d0:	f000 80de 	beq.w	800b990 <forward_dense_integer_SSSA+0x2d4>
 800b7d4:	f8db 0004 	ldr.w	r0, [fp, #4]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f000 80d9 	beq.w	800b990 <forward_dense_integer_SSSA+0x2d4>
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	2400      	movs	r4, #0
 800b7e2:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800b7e6:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800b7ea:	9411      	str	r4, [sp, #68]	; 0x44
 800b7ec:	ed90 7a00 	vldr	s14, [r0]
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7f6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b7fa:	f000 ff0d 	bl	800c618 <align_factor>
 800b7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b800:	9011      	str	r0, [sp, #68]	; 0x44
 800b802:	b32b      	cbz	r3, 800b850 <forward_dense_integer_SSSA+0x194>
 800b804:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b808:	4699      	mov	r9, r3
 800b80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80c:	fa1f fa8a 	uxth.w	sl, sl
 800b810:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b812:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800b816:	970d      	str	r7, [sp, #52]	; 0x34
 800b818:	461f      	mov	r7, r3
 800b81a:	9a08      	ldr	r2, [sp, #32]
 800b81c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b820:	3401      	adds	r4, #1
 800b822:	4628      	mov	r0, r5
 800b824:	9605      	str	r6, [sp, #20]
 800b826:	9306      	str	r3, [sp, #24]
 800b828:	4456      	add	r6, sl
 800b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82c:	445d      	add	r5, fp
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b836:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800b83a:	ab11      	add	r3, sp, #68	; 0x44
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	463b      	mov	r3, r7
 800b840:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800b844:	f003 fe14 	bl	800f470 <st_sssa8_fully_connected>
 800b848:	454c      	cmp	r4, r9
 800b84a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b84e:	d1e6      	bne.n	800b81e <forward_dense_integer_SSSA+0x162>
 800b850:	b013      	add	sp, #76	; 0x4c
 800b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	deff      	udf	#255	; 0xff
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	d056      	beq.n	800b90c <forward_dense_integer_SSSA+0x250>
 800b85e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b862:	f1b8 0f00 	cmp.w	r8, #0
 800b866:	d05d      	beq.n	800b924 <forward_dense_integer_SSSA+0x268>
 800b868:	8860      	ldrh	r0, [r4, #2]
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d173      	bne.n	800b956 <forward_dense_integer_SSSA+0x29a>
 800b86e:	eddf 7a50 	vldr	s15, [pc, #320]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b872:	68ae      	ldr	r6, [r5, #8]
 800b874:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b878:	6889      	ldr	r1, [r1, #8]
 800b87a:	950d      	str	r5, [sp, #52]	; 0x34
 800b87c:	2f00      	cmp	r7, #0
 800b87e:	d041      	beq.n	800b904 <forward_dense_integer_SSSA+0x248>
 800b880:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b884:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b888:	f1bc 0f00 	cmp.w	ip, #0
 800b88c:	d188      	bne.n	800b7a0 <forward_dense_integer_SSSA+0xe4>
 800b88e:	4667      	mov	r7, ip
 800b890:	2800      	cmp	r0, #0
 800b892:	d097      	beq.n	800b7c4 <forward_dense_integer_SSSA+0x108>
 800b894:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b898:	f990 0000 	ldrsb.w	r0, [r0]
 800b89c:	900a      	str	r0, [sp, #40]	; 0x28
 800b89e:	e792      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b8a0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	f47f af66 	bne.w	800b776 <forward_dense_integer_SSSA+0xba>
 800b8aa:	68ae      	ldr	r6, [r5, #8]
 800b8ac:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b8b0:	6889      	ldr	r1, [r1, #8]
 800b8b2:	950d      	str	r5, [sp, #52]	; 0x34
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d15a      	bne.n	800b96e <forward_dense_integer_SSSA+0x2b2>
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b8be:	900a      	str	r0, [sp, #40]	; 0x28
 800b8c0:	e781      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b8c2:	b31c      	cbz	r4, 800b90c <forward_dense_integer_SSSA+0x250>
 800b8c4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b8c8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b8cc:	f1b8 0f00 	cmp.w	r8, #0
 800b8d0:	f47f af57 	bne.w	800b782 <forward_dense_integer_SSSA+0xc6>
 800b8d4:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b8d8:	68ae      	ldr	r6, [r5, #8]
 800b8da:	6889      	ldr	r1, [r1, #8]
 800b8dc:	900d      	str	r0, [sp, #52]	; 0x34
 800b8de:	f1bc 0f00 	cmp.w	ip, #0
 800b8e2:	d00e      	beq.n	800b902 <forward_dense_integer_SSSA+0x246>
 800b8e4:	8878      	ldrh	r0, [r7, #2]
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d149      	bne.n	800b97e <forward_dense_integer_SSSA+0x2c2>
 800b8ea:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b8ee:	2700      	movs	r7, #0
 800b8f0:	f1b8 0f00 	cmp.w	r8, #0
 800b8f4:	f47f af63 	bne.w	800b7be <forward_dense_integer_SSSA+0x102>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	900a      	str	r0, [sp, #40]	; 0x28
 800b8fc:	e763      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b8fe:	4628      	mov	r0, r5
 800b900:	e6fb      	b.n	800b6fa <forward_dense_integer_SSSA+0x3e>
 800b902:	4667      	mov	r7, ip
 800b904:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b908:	970a      	str	r7, [sp, #40]	; 0x28
 800b90a:	e75c      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b90c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b910:	4627      	mov	r7, r4
 800b912:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b916:	eeb0 0a67 	vmov.f32	s0, s15
 800b91a:	68ae      	ldr	r6, [r5, #8]
 800b91c:	6889      	ldr	r1, [r1, #8]
 800b91e:	900d      	str	r0, [sp, #52]	; 0x34
 800b920:	970a      	str	r7, [sp, #40]	; 0x28
 800b922:	e750      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b924:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b928:	4647      	mov	r7, r8
 800b92a:	e7f2      	b.n	800b912 <forward_dense_integer_SSSA+0x256>
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	68e2      	ldr	r2, [r4, #12]
 800b930:	930b      	str	r3, [sp, #44]	; 0x2c
 800b932:	68cb      	ldr	r3, [r1, #12]
 800b934:	6856      	ldr	r6, [r2, #4]
 800b936:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b93a:	698d      	ldr	r5, [r1, #24]
 800b93c:	960f      	str	r6, [sp, #60]	; 0x3c
 800b93e:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	fb03 f302 	mul.w	r3, r3, r2
 800b948:	b2b2      	uxth	r2, r6
 800b94a:	930c      	str	r3, [sp, #48]	; 0x30
 800b94c:	fa1f f38a 	uxth.w	r3, sl
 800b950:	e6f8      	b.n	800b744 <forward_dense_integer_SSSA+0x88>
 800b952:	2500      	movs	r5, #0
 800b954:	e6d1      	b.n	800b6fa <forward_dense_integer_SSSA+0x3e>
 800b956:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b95a:	68ae      	ldr	r6, [r5, #8]
 800b95c:	900d      	str	r0, [sp, #52]	; 0x34
 800b95e:	f8d8 0000 	ldr.w	r0, [r8]
 800b962:	6889      	ldr	r1, [r1, #8]
 800b964:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b968:	ed90 0a00 	vldr	s0, [r0]
 800b96c:	e792      	b.n	800b894 <forward_dense_integer_SSSA+0x1d8>
 800b96e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b972:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b976:	f990 7000 	ldrsb.w	r7, [r0]
 800b97a:	940a      	str	r4, [sp, #40]	; 0x28
 800b97c:	e723      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b97e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b982:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800b9b0 <forward_dense_integer_SSSA+0x2f4>
 800b986:	f990 7000 	ldrsb.w	r7, [r0]
 800b98a:	e7b5      	b.n	800b8f8 <forward_dense_integer_SSSA+0x23c>
 800b98c:	940a      	str	r4, [sp, #40]	; 0x28
 800b98e:	e71a      	b.n	800b7c6 <forward_dense_integer_SSSA+0x10a>
 800b990:	2300      	movs	r3, #0
 800b992:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800b996:	9311      	str	r3, [sp, #68]	; 0x44
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	deff      	udf	#255	; 0xff
 800b99c:	2300      	movs	r3, #0
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	deff      	udf	#255	; 0xff
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	deff      	udf	#255	; 0xff
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	deff      	udf	#255	; 0xff
 800b9ae:	bf00      	nop
 800b9b0:	00000000 	.word	0x00000000

0800b9b4 <nl_func_sm_channel_f32>:
 800b9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b8:	ed2d 8b02 	vpush	{d8}
 800b9bc:	6989      	ldr	r1, [r1, #24]
 800b9be:	2a01      	cmp	r2, #1
 800b9c0:	6983      	ldr	r3, [r0, #24]
 800b9c2:	4617      	mov	r7, r2
 800b9c4:	688d      	ldr	r5, [r1, #8]
 800b9c6:	689e      	ldr	r6, [r3, #8]
 800b9c8:	ed95 8a00 	vldr	s16, [r5]
 800b9cc:	d930      	bls.n	800ba30 <nl_func_sm_channel_f32+0x7c>
 800b9ce:	1d2b      	adds	r3, r5, #4
 800b9d0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800b9d4:	ecf3 7a01 	vldmia	r3!, {s15}
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800b9de:	d1f9      	bne.n	800b9d4 <nl_func_sm_channel_f32+0x20>
 800b9e0:	2400      	movs	r4, #0
 800b9e2:	eddf 8a16 	vldr	s17, [pc, #88]	; 800ba3c <nl_func_sm_channel_f32+0x88>
 800b9e6:	46b0      	mov	r8, r6
 800b9e8:	ecb5 0a01 	vldmia	r5!, {s0}
 800b9ec:	3401      	adds	r4, #1
 800b9ee:	ee30 0a48 	vsub.f32	s0, s0, s16
 800b9f2:	f00b fe17 	bl	8017624 <expf>
 800b9f6:	42a7      	cmp	r7, r4
 800b9f8:	ee78 8a80 	vadd.f32	s17, s17, s0
 800b9fc:	eca8 0a01 	vstmia	r8!, {s0}
 800ba00:	d8f2      	bhi.n	800b9e8 <nl_func_sm_channel_f32+0x34>
 800ba02:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	d00d      	beq.n	800ba28 <nl_func_sm_channel_f32+0x74>
 800ba0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba10:	2300      	movs	r3, #0
 800ba12:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ba16:	edd6 7a00 	vldr	s15, [r6]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	429f      	cmp	r7, r3
 800ba1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba22:	ece6 7a01 	vstmia	r6!, {s15}
 800ba26:	d8f6      	bhi.n	800ba16 <nl_func_sm_channel_f32+0x62>
 800ba28:	ecbd 8b02 	vpop	{d8}
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	d1d5      	bne.n	800b9e0 <nl_func_sm_channel_f32+0x2c>
 800ba34:	ecbd 8b02 	vpop	{d8}
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	00000000 	.word	0x00000000

0800ba40 <nl_func_relu_generic_array_f32>:
 800ba40:	b430      	push	{r4, r5}
 800ba42:	edd3 6a02 	vldr	s13, [r3, #8]
 800ba46:	ed93 7a00 	vldr	s14, [r3]
 800ba4a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ba4e:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba56:	d430      	bmi.n	800baba <nl_func_relu_generic_array_f32+0x7a>
 800ba58:	698c      	ldr	r4, [r1, #24]
 800ba5a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ba5e:	6981      	ldr	r1, [r0, #24]
 800ba60:	4413      	add	r3, r2
 800ba62:	68a0      	ldr	r0, [r4, #8]
 800ba64:	6889      	ldr	r1, [r1, #8]
 800ba66:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4290      	cmp	r0, r2
 800ba6e:	d822      	bhi.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800ba70:	3304      	adds	r3, #4
 800ba72:	3204      	adds	r2, #4
 800ba74:	4419      	add	r1, r3
 800ba76:	e00e      	b.n	800ba96 <nl_func_relu_generic_array_f32+0x56>
 800ba78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba7c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	db01      	blt.n	800ba8a <nl_func_relu_generic_array_f32+0x4a>
 800ba86:	ee65 7a86 	vmul.f32	s15, s11, s12
 800ba8a:	3b08      	subs	r3, #8
 800ba8c:	ed61 7a01 	vstmdb	r1!, {s15}
 800ba90:	68a0      	ldr	r0, [r4, #8]
 800ba92:	4298      	cmp	r0, r3
 800ba94:	d80f      	bhi.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800ba96:	4613      	mov	r3, r2
 800ba98:	ed72 7a01 	vldmdb	r2!, {s15}
 800ba9c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800baa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa4:	dae8      	bge.n	800ba78 <nl_func_relu_generic_array_f32+0x38>
 800baa6:	eef0 7a66 	vmov.f32	s15, s13
 800baaa:	3b08      	subs	r3, #8
 800baac:	ed61 7a01 	vstmdb	r1!, {s15}
 800bab0:	68a0      	ldr	r0, [r4, #8]
 800bab2:	4298      	cmp	r0, r3
 800bab4:	d9ef      	bls.n	800ba96 <nl_func_relu_generic_array_f32+0x56>
 800bab6:	bc30      	pop	{r4, r5}
 800bab8:	4770      	bx	lr
 800baba:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800babe:	698d      	ldr	r5, [r1, #24]
 800bac0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800bac4:	6983      	ldr	r3, [r0, #24]
 800bac6:	68a8      	ldr	r0, [r5, #8]
 800bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bacc:	4411      	add	r1, r2
 800bace:	689a      	ldr	r2, [r3, #8]
 800bad0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800bad4:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800bad8:	d019      	beq.n	800bb0e <nl_func_relu_generic_array_f32+0xce>
 800bada:	4298      	cmp	r0, r3
 800badc:	d8eb      	bhi.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bade:	3104      	adds	r1, #4
 800bae0:	3304      	adds	r3, #4
 800bae2:	440a      	add	r2, r1
 800bae4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bae8:	1f19      	subs	r1, r3, #4
 800baea:	f1a3 0408 	sub.w	r4, r3, #8
 800baee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baf2:	460b      	mov	r3, r1
 800baf4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800baf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bb00:	d823      	bhi.n	800bb4a <nl_func_relu_generic_array_f32+0x10a>
 800bb02:	ed62 6a01 	vstmdb	r2!, {s13}
 800bb06:	68a9      	ldr	r1, [r5, #8]
 800bb08:	42a1      	cmp	r1, r4
 800bb0a:	d9eb      	bls.n	800bae4 <nl_func_relu_generic_array_f32+0xa4>
 800bb0c:	e7d3      	b.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bb0e:	4298      	cmp	r0, r3
 800bb10:	d8d1      	bhi.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bb12:	3104      	adds	r1, #4
 800bb14:	3304      	adds	r3, #4
 800bb16:	f04f 0c00 	mov.w	ip, #0
 800bb1a:	440a      	add	r2, r1
 800bb1c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bb20:	1f19      	subs	r1, r3, #4
 800bb22:	f1a3 0408 	sub.w	r4, r3, #8
 800bb26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	dc05      	bgt.n	800bb3e <nl_func_relu_generic_array_f32+0xfe>
 800bb32:	f842 cd04 	str.w	ip, [r2, #-4]!
 800bb36:	68a9      	ldr	r1, [r5, #8]
 800bb38:	42a1      	cmp	r1, r4
 800bb3a:	d9ef      	bls.n	800bb1c <nl_func_relu_generic_array_f32+0xdc>
 800bb3c:	e7bb      	b.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bb3e:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb42:	68a9      	ldr	r1, [r5, #8]
 800bb44:	42a1      	cmp	r1, r4
 800bb46:	d9e9      	bls.n	800bb1c <nl_func_relu_generic_array_f32+0xdc>
 800bb48:	e7b5      	b.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bb4a:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb4e:	68a9      	ldr	r1, [r5, #8]
 800bb50:	42a1      	cmp	r1, r4
 800bb52:	d9c7      	bls.n	800bae4 <nl_func_relu_generic_array_f32+0xa4>
 800bb54:	e7af      	b.n	800bab6 <nl_func_relu_generic_array_f32+0x76>
 800bb56:	bf00      	nop

0800bb58 <forward_relu>:
 800bb58:	6982      	ldr	r2, [r0, #24]
 800bb5a:	8813      	ldrh	r3, [r2, #0]
 800bb5c:	b30b      	cbz	r3, 800bba2 <forward_relu+0x4a>
 800bb5e:	6852      	ldr	r2, [r2, #4]
 800bb60:	6851      	ldr	r1, [r2, #4]
 800bb62:	b101      	cbz	r1, 800bb66 <forward_relu+0xe>
 800bb64:	6809      	ldr	r1, [r1, #0]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	f000 808d 	beq.w	800bc86 <forward_relu+0x12e>
 800bb6c:	b470      	push	{r4, r5, r6}
 800bb6e:	6916      	ldr	r6, [r2, #16]
 800bb70:	b106      	cbz	r6, 800bb74 <forward_relu+0x1c>
 800bb72:	6836      	ldr	r6, [r6, #0]
 800bb74:	69c0      	ldr	r0, [r0, #28]
 800bb76:	b1b0      	cbz	r0, 800bba6 <forward_relu+0x4e>
 800bb78:	6842      	ldr	r2, [r0, #4]
 800bb7a:	688b      	ldr	r3, [r1, #8]
 800bb7c:	2a01      	cmp	r2, #1
 800bb7e:	d03d      	beq.n	800bbfc <forward_relu+0xa4>
 800bb80:	0a1b      	lsrs	r3, r3, #8
 800bb82:	d071      	beq.n	800bc68 <forward_relu+0x110>
 800bb84:	68cd      	ldr	r5, [r1, #12]
 800bb86:	2201      	movs	r2, #1
 800bb88:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bb8c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800bb90:	42ab      	cmp	r3, r5
 800bb92:	fb04 f202 	mul.w	r2, r4, r2
 800bb96:	d1f9      	bne.n	800bb8c <forward_relu+0x34>
 800bb98:	6883      	ldr	r3, [r0, #8]
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	bc70      	pop	{r4, r5, r6}
 800bb9e:	f7ff bf4f 	b.w	800ba40 <nl_func_relu_generic_array_f32>
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	deff      	udf	#255	; 0xff
 800bba6:	688b      	ldr	r3, [r1, #8]
 800bba8:	0a1b      	lsrs	r3, r3, #8
 800bbaa:	d05f      	beq.n	800bc6c <forward_relu+0x114>
 800bbac:	68cc      	ldr	r4, [r1, #12]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbb4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800bbb8:	429c      	cmp	r4, r3
 800bbba:	fb00 f202 	mul.w	r2, r0, r2
 800bbbe:	d1f9      	bne.n	800bbb4 <forward_relu+0x5c>
 800bbc0:	698c      	ldr	r4, [r1, #24]
 800bbc2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bbc6:	69b1      	ldr	r1, [r6, #24]
 800bbc8:	4413      	add	r3, r2
 800bbca:	68a0      	ldr	r0, [r4, #8]
 800bbcc:	6889      	ldr	r1, [r1, #8]
 800bbce:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800bbd2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800bbd6:	4290      	cmp	r0, r2
 800bbd8:	d80e      	bhi.n	800bbf8 <forward_relu+0xa0>
 800bbda:	3204      	adds	r2, #4
 800bbdc:	3104      	adds	r1, #4
 800bbde:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800bc8c <forward_relu+0x134>
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	ed72 7a01 	vldmdb	r2!, {s15}
 800bbe8:	3b08      	subs	r3, #8
 800bbea:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800bbee:	ed61 7a01 	vstmdb	r1!, {s15}
 800bbf2:	68a0      	ldr	r0, [r4, #8]
 800bbf4:	4298      	cmp	r0, r3
 800bbf6:	d9f4      	bls.n	800bbe2 <forward_relu+0x8a>
 800bbf8:	bc70      	pop	{r4, r5, r6}
 800bbfa:	4770      	bx	lr
 800bbfc:	0a1b      	lsrs	r3, r3, #8
 800bbfe:	d03a      	beq.n	800bc76 <forward_relu+0x11e>
 800bc00:	68cd      	ldr	r5, [r1, #12]
 800bc02:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bc06:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800bc0a:	429d      	cmp	r5, r3
 800bc0c:	fb04 f202 	mul.w	r2, r4, r2
 800bc10:	d1f9      	bne.n	800bc06 <forward_relu+0xae>
 800bc12:	698c      	ldr	r4, [r1, #24]
 800bc14:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800bc18:	6883      	ldr	r3, [r0, #8]
 800bc1a:	4411      	add	r1, r2
 800bc1c:	68a0      	ldr	r0, [r4, #8]
 800bc1e:	69b5      	ldr	r5, [r6, #24]
 800bc20:	ed93 7a00 	vldr	s14, [r3]
 800bc24:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800bc28:	68aa      	ldr	r2, [r5, #8]
 800bc2a:	4298      	cmp	r0, r3
 800bc2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bc30:	d8e2      	bhi.n	800bbf8 <forward_relu+0xa0>
 800bc32:	3304      	adds	r3, #4
 800bc34:	3204      	adds	r2, #4
 800bc36:	2500      	movs	r5, #0
 800bc38:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bc3c:	1f19      	subs	r1, r3, #4
 800bc3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc46:	d507      	bpl.n	800bc58 <forward_relu+0x100>
 800bc48:	3b08      	subs	r3, #8
 800bc4a:	ed62 7a01 	vstmdb	r2!, {s15}
 800bc4e:	68a0      	ldr	r0, [r4, #8]
 800bc50:	4298      	cmp	r0, r3
 800bc52:	d8d1      	bhi.n	800bbf8 <forward_relu+0xa0>
 800bc54:	460b      	mov	r3, r1
 800bc56:	e7ef      	b.n	800bc38 <forward_relu+0xe0>
 800bc58:	3b08      	subs	r3, #8
 800bc5a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800bc5e:	68a0      	ldr	r0, [r4, #8]
 800bc60:	4298      	cmp	r0, r3
 800bc62:	d8c9      	bhi.n	800bbf8 <forward_relu+0xa0>
 800bc64:	460b      	mov	r3, r1
 800bc66:	e7e7      	b.n	800bc38 <forward_relu+0xe0>
 800bc68:	2201      	movs	r2, #1
 800bc6a:	e795      	b.n	800bb98 <forward_relu+0x40>
 800bc6c:	698c      	ldr	r4, [r1, #24]
 800bc6e:	69b3      	ldr	r3, [r6, #24]
 800bc70:	68a2      	ldr	r2, [r4, #8]
 800bc72:	6899      	ldr	r1, [r3, #8]
 800bc74:	e7b1      	b.n	800bbda <forward_relu+0x82>
 800bc76:	6883      	ldr	r3, [r0, #8]
 800bc78:	698c      	ldr	r4, [r1, #24]
 800bc7a:	69b2      	ldr	r2, [r6, #24]
 800bc7c:	ed93 7a00 	vldr	s14, [r3]
 800bc80:	6892      	ldr	r2, [r2, #8]
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	e7d5      	b.n	800bc32 <forward_relu+0xda>
 800bc86:	2300      	movs	r3, #0
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	deff      	udf	#255	; 0xff
 800bc8c:	00000000 	.word	0x00000000

0800bc90 <forward_sm>:
 800bc90:	6982      	ldr	r2, [r0, #24]
 800bc92:	8813      	ldrh	r3, [r2, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d054      	beq.n	800bd42 <forward_sm+0xb2>
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	6852      	ldr	r2, [r2, #4]
 800bc9e:	b083      	sub	sp, #12
 800bca0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800bca4:	f1b8 0f00 	cmp.w	r8, #0
 800bca8:	d001      	beq.n	800bcae <forward_sm+0x1e>
 800bcaa:	f8d8 8000 	ldr.w	r8, [r8]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d04b      	beq.n	800bd4a <forward_sm+0xba>
 800bcb2:	6913      	ldr	r3, [r2, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d04b      	beq.n	800bd50 <forward_sm+0xc0>
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcbe:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bcc2:	68c2      	ldr	r2, [r0, #12]
 800bcc4:	0a1b      	lsrs	r3, r3, #8
 800bcc6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800bcca:	6857      	ldr	r7, [r2, #4]
 800bccc:	d03b      	beq.n	800bd46 <forward_sm+0xb6>
 800bcce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bcd2:	2501      	movs	r5, #1
 800bcd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcd8:	4299      	cmp	r1, r3
 800bcda:	fb02 f505 	mul.w	r5, r2, r5
 800bcde:	d1f9      	bne.n	800bcd4 <forward_sm+0x44>
 800bce0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800bce4:	eba5 030a 	sub.w	r3, r5, sl
 800bce8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800bcec:	1bed      	subs	r5, r5, r7
 800bcee:	68b4      	ldr	r4, [r6, #8]
 800bcf0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bcf4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bcf8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bcfc:	68f3      	ldr	r3, [r6, #12]
 800bcfe:	429c      	cmp	r4, r3
 800bd00:	d317      	bcc.n	800bd32 <forward_sm+0xa2>
 800bd02:	00bf      	lsls	r7, r7, #2
 800bd04:	4652      	mov	r2, sl
 800bd06:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800bd0a:	427f      	negs	r7, r7
 800bd0c:	f1cb 0b00 	rsb	fp, fp, #0
 800bd10:	46ba      	mov	sl, r7
 800bd12:	4607      	mov	r7, r0
 800bd14:	60b4      	str	r4, [r6, #8]
 800bd16:	2300      	movs	r3, #0
 800bd18:	f8c9 5008 	str.w	r5, [r9, #8]
 800bd1c:	4641      	mov	r1, r8
 800bd1e:	4638      	mov	r0, r7
 800bd20:	9201      	str	r2, [sp, #4]
 800bd22:	445c      	add	r4, fp
 800bd24:	f7ff fe46 	bl	800b9b4 <nl_func_sm_channel_f32>
 800bd28:	68f3      	ldr	r3, [r6, #12]
 800bd2a:	4455      	add	r5, sl
 800bd2c:	9a01      	ldr	r2, [sp, #4]
 800bd2e:	429c      	cmp	r4, r3
 800bd30:	d2f0      	bcs.n	800bd14 <forward_sm+0x84>
 800bd32:	60b3      	str	r3, [r6, #8]
 800bd34:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bd38:	f8c9 3008 	str.w	r3, [r9, #8]
 800bd3c:	b003      	add	sp, #12
 800bd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	deff      	udf	#255	; 0xff
 800bd46:	2501      	movs	r5, #1
 800bd48:	e7ca      	b.n	800bce0 <forward_sm+0x50>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	deff      	udf	#255	; 0xff
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	deff      	udf	#255	; 0xff

0800bd54 <forward_pad>:
 800bd54:	6982      	ldr	r2, [r0, #24]
 800bd56:	8813      	ldrh	r3, [r2, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d052      	beq.n	800be02 <forward_pad+0xae>
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	ed2d 8b02 	vpush	{d8}
 800bd64:	6852      	ldr	r2, [r2, #4]
 800bd66:	b091      	sub	sp, #68	; 0x44
 800bd68:	6857      	ldr	r7, [r2, #4]
 800bd6a:	b107      	cbz	r7, 800bd6e <forward_pad+0x1a>
 800bd6c:	683f      	ldr	r7, [r7, #0]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	f000 81e7 	beq.w	800c142 <forward_pad+0x3ee>
 800bd74:	6913      	ldr	r3, [r2, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 81e1 	beq.w	800c13e <forward_pad+0x3ea>
 800bd7c:	681d      	ldr	r5, [r3, #0]
 800bd7e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800bd82:	68aa      	ldr	r2, [r5, #8]
 800bd84:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd86:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800bd8a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800bd8e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bd92:	bf38      	it	cc
 800bd94:	2201      	movcc	r2, #1
 800bd96:	9102      	str	r1, [sp, #8]
 800bd98:	bf28      	it	cs
 800bd9a:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 800bd9e:	f9b6 1000 	ldrsh.w	r1, [r6]
 800bda2:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800bda6:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800bdaa:	9103      	str	r1, [sp, #12]
 800bdac:	9201      	str	r2, [sp, #4]
 800bdae:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800bdb2:	7f03      	ldrb	r3, [r0, #28]
 800bdb4:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	6895      	ldr	r5, [r2, #8]
 800bdbc:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800bdc0:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 800bdc4:	68f7      	ldr	r7, [r6, #12]
 800bdc6:	f8dc 8008 	ldr.w	r8, [ip, #8]
 800bdca:	fb07 f404 	mul.w	r4, r7, r4
 800bdce:	463e      	mov	r6, r7
 800bdd0:	9708      	str	r7, [sp, #32]
 800bdd2:	9f03      	ldr	r7, [sp, #12]
 800bdd4:	940d      	str	r4, [sp, #52]	; 0x34
 800bdd6:	fb06 f607 	mul.w	r6, r6, r7
 800bdda:	68d4      	ldr	r4, [r2, #12]
 800bddc:	fb0b f709 	mul.w	r7, fp, r9
 800bde0:	9405      	str	r4, [sp, #20]
 800bde2:	960c      	str	r6, [sp, #48]	; 0x30
 800bde4:	6894      	ldr	r4, [r2, #8]
 800bde6:	fb0b f601 	mul.w	r6, fp, r1
 800bdea:	d00c      	beq.n	800be06 <forward_pad+0xb2>
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	f000 8106 	beq.w	800bffe <forward_pad+0x2aa>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 80a8 	beq.w	800bf48 <forward_pad+0x1f4>
 800bdf8:	b011      	add	sp, #68	; 0x44
 800bdfa:	ecbd 8b02 	vpop	{d8}
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	deff      	udf	#255	; 0xff
 800be06:	f8da 300c 	ldr.w	r3, [sl, #12]
 800be0a:	930e      	str	r3, [sp, #56]	; 0x38
 800be0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be0e:	eb05 0903 	add.w	r9, r5, r3
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd6a      	ble.n	800beee <forward_pad+0x19a>
 800be18:	f8de 3008 	ldr.w	r3, [lr, #8]
 800be1c:	ee08 8a10 	vmov	s16, r8
 800be20:	9805      	ldr	r0, [sp, #20]
 800be22:	4419      	add	r1, r3
 800be24:	f8da 2008 	ldr.w	r2, [sl, #8]
 800be28:	4407      	add	r7, r0
 800be2a:	9801      	ldr	r0, [sp, #4]
 800be2c:	950f      	str	r5, [sp, #60]	; 0x3c
 800be2e:	fb01 f000 	mul.w	r0, r1, r0
 800be32:	4601      	mov	r1, r0
 800be34:	9007      	str	r0, [sp, #28]
 800be36:	19b8      	adds	r0, r7, r6
 800be38:	900a      	str	r0, [sp, #40]	; 0x28
 800be3a:	eb09 0006 	add.w	r0, r9, r6
 800be3e:	9e03      	ldr	r6, [sp, #12]
 800be40:	9001      	str	r0, [sp, #4]
 800be42:	4608      	mov	r0, r1
 800be44:	4611      	mov	r1, r2
 800be46:	fb02 0206 	mla	r2, r2, r6, r0
 800be4a:	460f      	mov	r7, r1
 800be4c:	fb0b 5202 	mla	r2, fp, r2, r5
 800be50:	9204      	str	r2, [sp, #16]
 800be52:	1e9a      	subs	r2, r3, #2
 800be54:	fb04 f303 	mul.w	r3, r4, r3
 800be58:	930b      	str	r3, [sp, #44]	; 0x2c
 800be5a:	fb04 8302 	mla	r3, r4, r2, r8
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	fb0b f301 	mul.w	r3, fp, r1
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	2300      	movs	r3, #0
 800be68:	9306      	str	r3, [sp, #24]
 800be6a:	f1cb 0300 	rsb	r3, fp, #0
 800be6e:	4698      	mov	r8, r3
 800be70:	9b01      	ldr	r3, [sp, #4]
 800be72:	454b      	cmp	r3, r9
 800be74:	d00b      	beq.n	800be8e <forward_pad+0x13a>
 800be76:	ee18 5a10 	vmov	r5, s16
 800be7a:	4443      	add	r3, r8
 800be7c:	4425      	add	r5, r4
 800be7e:	4622      	mov	r2, r4
 800be80:	4618      	mov	r0, r3
 800be82:	4629      	mov	r1, r5
 800be84:	f008 fcbe 	bl	8014804 <memcpy>
 800be88:	4548      	cmp	r0, r9
 800be8a:	4603      	mov	r3, r0
 800be8c:	d1f5      	bne.n	800be7a <forward_pad+0x126>
 800be8e:	ee18 3a10 	vmov	r3, s16
 800be92:	9a05      	ldr	r2, [sp, #20]
 800be94:	ee18 1a10 	vmov	r1, s16
 800be98:	9801      	ldr	r0, [sp, #4]
 800be9a:	4413      	add	r3, r2
 800be9c:	ee08 3a10 	vmov	s16, r3
 800bea0:	f008 fcb0 	bl	8014804 <memcpy>
 800bea4:	9b07      	ldr	r3, [sp, #28]
 800bea6:	429f      	cmp	r7, r3
 800bea8:	dd0d      	ble.n	800bec6 <forward_pad+0x172>
 800beaa:	461d      	mov	r5, r3
 800beac:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 800beb0:	3501      	adds	r5, #1
 800beb2:	4651      	mov	r1, sl
 800beb4:	4630      	mov	r0, r6
 800beb6:	4622      	mov	r2, r4
 800beb8:	f008 fca4 	bl	8014804 <memcpy>
 800bebc:	42af      	cmp	r7, r5
 800bebe:	ebaa 0a04 	sub.w	sl, sl, r4
 800bec2:	445e      	add	r6, fp
 800bec4:	d1f4      	bne.n	800beb0 <forward_pad+0x15c>
 800bec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	4491      	add	r9, r2
 800becc:	9b06      	ldr	r3, [sp, #24]
 800bece:	4411      	add	r1, r2
 800bed0:	9a04      	ldr	r2, [sp, #16]
 800bed2:	3301      	adds	r3, #1
 800bed4:	9101      	str	r1, [sp, #4]
 800bed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bed8:	9306      	str	r3, [sp, #24]
 800beda:	440a      	add	r2, r1
 800bedc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bede:	9204      	str	r2, [sp, #16]
 800bee0:	9a03      	ldr	r2, [sp, #12]
 800bee2:	440a      	add	r2, r1
 800bee4:	9203      	str	r2, [sp, #12]
 800bee6:	9a02      	ldr	r2, [sp, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d1c1      	bne.n	800be70 <forward_pad+0x11c>
 800beec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800beee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bef0:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800bef4:	42a5      	cmp	r5, r4
 800bef6:	d00c      	beq.n	800bf12 <forward_pad+0x1be>
 800bef8:	9b08      	ldr	r3, [sp, #32]
 800befa:	462e      	mov	r6, r5
 800befc:	425f      	negs	r7, r3
 800befe:	4698      	mov	r8, r3
 800bf00:	4621      	mov	r1, r4
 800bf02:	4630      	mov	r0, r6
 800bf04:	443c      	add	r4, r7
 800bf06:	4446      	add	r6, r8
 800bf08:	4642      	mov	r2, r8
 800bf0a:	f008 fc7b 	bl	8014804 <memcpy>
 800bf0e:	42a6      	cmp	r6, r4
 800bf10:	d1f6      	bne.n	800bf00 <forward_pad+0x1ac>
 800bf12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf14:	9a08      	ldr	r2, [sp, #32]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	fb02 5503 	mla	r5, r2, r3, r5
 800bf1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf1e:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 800bf22:	42a5      	cmp	r5, r4
 800bf24:	f43f af68 	beq.w	800bdf8 <forward_pad+0xa4>
 800bf28:	4617      	mov	r7, r2
 800bf2a:	4256      	negs	r6, r2
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	4628      	mov	r0, r5
 800bf30:	443c      	add	r4, r7
 800bf32:	4435      	add	r5, r6
 800bf34:	463a      	mov	r2, r7
 800bf36:	f008 fc65 	bl	8014804 <memcpy>
 800bf3a:	42a5      	cmp	r5, r4
 800bf3c:	d1f6      	bne.n	800bf2c <forward_pad+0x1d8>
 800bf3e:	b011      	add	sp, #68	; 0x44
 800bf40:	ecbd 8b02 	vpop	{d8}
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	f8dc 1000 	ldr.w	r1, [ip]
 800bf4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bf4e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800bf52:	2908      	cmp	r1, #8
 800bf54:	f000 80b5 	beq.w	800c0c2 <forward_pad+0x36e>
 800bf58:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800bf5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	dd0a      	ble.n	800bf78 <forward_pad+0x224>
 800bf62:	4693      	mov	fp, r2
 800bf64:	469a      	mov	sl, r3
 800bf66:	44ca      	add	sl, r9
 800bf68:	4628      	mov	r0, r5
 800bf6a:	464a      	mov	r2, r9
 800bf6c:	68a1      	ldr	r1, [r4, #8]
 800bf6e:	f008 fc49 	bl	8014804 <memcpy>
 800bf72:	45d3      	cmp	fp, sl
 800bf74:	444d      	add	r5, r9
 800bf76:	dcf6      	bgt.n	800bf66 <forward_pad+0x212>
 800bf78:	9b02      	ldr	r3, [sp, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd2c      	ble.n	800bfd8 <forward_pad+0x284>
 800bf7e:	f04f 0a00 	mov.w	sl, #0
 800bf82:	f8dd b014 	ldr.w	fp, [sp, #20]
 800bf86:	f8cd a004 	str.w	sl, [sp, #4]
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	dd0a      	ble.n	800bfa4 <forward_pad+0x250>
 800bf8e:	f04f 0a00 	mov.w	sl, #0
 800bf92:	44ca      	add	sl, r9
 800bf94:	4628      	mov	r0, r5
 800bf96:	464a      	mov	r2, r9
 800bf98:	68a1      	ldr	r1, [r4, #8]
 800bf9a:	f008 fc33 	bl	8014804 <memcpy>
 800bf9e:	4556      	cmp	r6, sl
 800bfa0:	444d      	add	r5, r9
 800bfa2:	dcf6      	bgt.n	800bf92 <forward_pad+0x23e>
 800bfa4:	4641      	mov	r1, r8
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	465a      	mov	r2, fp
 800bfaa:	44d8      	add	r8, fp
 800bfac:	f008 fc2a 	bl	8014804 <memcpy>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	445d      	add	r5, fp
 800bfb4:	dd0a      	ble.n	800bfcc <forward_pad+0x278>
 800bfb6:	f04f 0a00 	mov.w	sl, #0
 800bfba:	44ca      	add	sl, r9
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	464a      	mov	r2, r9
 800bfc0:	68a1      	ldr	r1, [r4, #8]
 800bfc2:	f008 fc1f 	bl	8014804 <memcpy>
 800bfc6:	4557      	cmp	r7, sl
 800bfc8:	444d      	add	r5, r9
 800bfca:	dcf6      	bgt.n	800bfba <forward_pad+0x266>
 800bfcc:	9b01      	ldr	r3, [sp, #4]
 800bfce:	9a02      	ldr	r2, [sp, #8]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	d1d8      	bne.n	800bf8a <forward_pad+0x236>
 800bfd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bfda:	2f00      	cmp	r7, #0
 800bfdc:	f77f af0c 	ble.w	800bdf8 <forward_pad+0xa4>
 800bfe0:	2600      	movs	r6, #0
 800bfe2:	444e      	add	r6, r9
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	464a      	mov	r2, r9
 800bfe8:	68a1      	ldr	r1, [r4, #8]
 800bfea:	f008 fc0b 	bl	8014804 <memcpy>
 800bfee:	42b7      	cmp	r7, r6
 800bff0:	444d      	add	r5, r9
 800bff2:	dcf6      	bgt.n	800bfe2 <forward_pad+0x28e>
 800bff4:	b011      	add	sp, #68	; 0x44
 800bff6:	ecbd 8b02 	vpop	{d8}
 800bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	442f      	add	r7, r5
 800c004:	2b00      	cmp	r3, #0
 800c006:	9706      	str	r7, [sp, #24]
 800c008:	dd32      	ble.n	800c070 <forward_pad+0x31c>
 800c00a:	fb04 f309 	mul.w	r3, r4, r9
 800c00e:	9507      	str	r5, [sp, #28]
 800c010:	9304      	str	r3, [sp, #16]
 800c012:	2300      	movs	r3, #0
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	2e00      	cmp	r6, #0
 800c018:	dd09      	ble.n	800c02e <forward_pad+0x2da>
 800c01a:	2500      	movs	r5, #0
 800c01c:	4425      	add	r5, r4
 800c01e:	4638      	mov	r0, r7
 800c020:	4622      	mov	r2, r4
 800c022:	4641      	mov	r1, r8
 800c024:	f008 fbee 	bl	8014804 <memcpy>
 800c028:	42ae      	cmp	r6, r5
 800c02a:	4427      	add	r7, r4
 800c02c:	dcf6      	bgt.n	800c01c <forward_pad+0x2c8>
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	4641      	mov	r1, r8
 800c032:	4638      	mov	r0, r7
 800c034:	461a      	mov	r2, r3
 800c036:	4498      	add	r8, r3
 800c038:	441f      	add	r7, r3
 800c03a:	f008 fbe3 	bl	8014804 <memcpy>
 800c03e:	f1b9 0f00 	cmp.w	r9, #0
 800c042:	eba8 0a04 	sub.w	sl, r8, r4
 800c046:	dd0c      	ble.n	800c062 <forward_pad+0x30e>
 800c048:	46bb      	mov	fp, r7
 800c04a:	2500      	movs	r5, #0
 800c04c:	3501      	adds	r5, #1
 800c04e:	4658      	mov	r0, fp
 800c050:	4622      	mov	r2, r4
 800c052:	4651      	mov	r1, sl
 800c054:	f008 fbd6 	bl	8014804 <memcpy>
 800c058:	45a9      	cmp	r9, r5
 800c05a:	44a3      	add	fp, r4
 800c05c:	d1f6      	bne.n	800c04c <forward_pad+0x2f8>
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	441f      	add	r7, r3
 800c062:	9b01      	ldr	r3, [sp, #4]
 800c064:	9a02      	ldr	r2, [sp, #8]
 800c066:	3301      	adds	r3, #1
 800c068:	429a      	cmp	r2, r3
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	d1d3      	bne.n	800c016 <forward_pad+0x2c2>
 800c06e:	9d07      	ldr	r5, [sp, #28]
 800c070:	9b06      	ldr	r3, [sp, #24]
 800c072:	429d      	cmp	r5, r3
 800c074:	d00a      	beq.n	800c08c <forward_pad+0x338>
 800c076:	461f      	mov	r7, r3
 800c078:	462c      	mov	r4, r5
 800c07a:	9e08      	ldr	r6, [sp, #32]
 800c07c:	4620      	mov	r0, r4
 800c07e:	4434      	add	r4, r6
 800c080:	4632      	mov	r2, r6
 800c082:	4639      	mov	r1, r7
 800c084:	f008 fbbe 	bl	8014804 <memcpy>
 800c088:	42a7      	cmp	r7, r4
 800c08a:	d1f7      	bne.n	800c07c <forward_pad+0x328>
 800c08c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c08e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c092:	4413      	add	r3, r2
 800c094:	9a08      	ldr	r2, [sp, #32]
 800c096:	3b01      	subs	r3, #1
 800c098:	fb02 5503 	mla	r5, r2, r3, r5
 800c09c:	442c      	add	r4, r5
 800c09e:	42a5      	cmp	r5, r4
 800c0a0:	f43f aeaa 	beq.w	800bdf8 <forward_pad+0xa4>
 800c0a4:	4617      	mov	r7, r2
 800c0a6:	4256      	negs	r6, r2
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	4434      	add	r4, r6
 800c0ac:	463a      	mov	r2, r7
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f008 fba8 	bl	8014804 <memcpy>
 800c0b4:	42a5      	cmp	r5, r4
 800c0b6:	d1f7      	bne.n	800c0a8 <forward_pad+0x354>
 800c0b8:	b011      	add	sp, #68	; 0x44
 800c0ba:	ecbd 8b02 	vpop	{d8}
 800c0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c2:	68a2      	ldr	r2, [r4, #8]
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	f992 9000 	ldrsb.w	r9, [r2]
 800c0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	18ac      	adds	r4, r5, r2
 800c0d2:	9403      	str	r4, [sp, #12]
 800c0d4:	f006 ffc0 	bl	8013058 <st_int8_fill>
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dd25      	ble.n	800c12a <forward_pad+0x3d6>
 800c0de:	9b01      	ldr	r3, [sp, #4]
 800c0e0:	eb06 0a07 	add.w	sl, r6, r7
 800c0e4:	4625      	mov	r5, r4
 800c0e6:	9601      	str	r6, [sp, #4]
 800c0e8:	469b      	mov	fp, r3
 800c0ea:	9b05      	ldr	r3, [sp, #20]
 800c0ec:	4434      	add	r4, r6
 800c0ee:	449a      	add	sl, r3
 800c0f0:	461e      	mov	r6, r3
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	9a01      	ldr	r2, [sp, #4]
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f10b 0b01 	add.w	fp, fp, #1
 800c0fc:	f006 ffac 	bl	8013058 <st_int8_fill>
 800c100:	4621      	mov	r1, r4
 800c102:	4640      	mov	r0, r8
 800c104:	4632      	mov	r2, r6
 800c106:	f007 f80f 	bl	8013128 <st_int8_copy>
 800c10a:	19a1      	adds	r1, r4, r6
 800c10c:	463a      	mov	r2, r7
 800c10e:	4648      	mov	r0, r9
 800c110:	f006 ffa2 	bl	8013058 <st_int8_fill>
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	4455      	add	r5, sl
 800c118:	44b0      	add	r8, r6
 800c11a:	455b      	cmp	r3, fp
 800c11c:	4454      	add	r4, sl
 800c11e:	d1e8      	bne.n	800c0f2 <forward_pad+0x39e>
 800c120:	461a      	mov	r2, r3
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	fb0a 3302 	mla	r3, sl, r2, r3
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c12c:	4648      	mov	r0, r9
 800c12e:	9903      	ldr	r1, [sp, #12]
 800c130:	b011      	add	sp, #68	; 0x44
 800c132:	ecbd 8b02 	vpop	{d8}
 800c136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	f006 bf8d 	b.w	8013058 <st_int8_fill>
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	deff      	udf	#255	; 0xff
 800c142:	2300      	movs	r3, #0
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	deff      	udf	#255	; 0xff

0800c148 <ai_check_custom_types>:
 800c148:	b082      	sub	sp, #8
 800c14a:	4b12      	ldr	r3, [pc, #72]	; (800c194 <ai_check_custom_types+0x4c>)
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	b118      	cbz	r0, 800c158 <ai_check_custom_types+0x10>
 800c150:	7803      	ldrb	r3, [r0, #0]
 800c152:	2b03      	cmp	r3, #3
 800c154:	d002      	beq.n	800c15c <ai_check_custom_types+0x14>
 800c156:	2000      	movs	r0, #0
 800c158:	b002      	add	sp, #8
 800c15a:	4770      	bx	lr
 800c15c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c160:	4293      	cmp	r3, r2
 800c162:	d004      	beq.n	800c16e <ai_check_custom_types+0x26>
 800c164:	2001      	movs	r0, #1
 800c166:	f080 0001 	eor.w	r0, r0, #1
 800c16a:	b002      	add	sp, #8
 800c16c:	4770      	bx	lr
 800c16e:	7842      	ldrb	r2, [r0, #1]
 800c170:	3001      	adds	r0, #1
 800c172:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c176:	429a      	cmp	r2, r3
 800c178:	d1f4      	bne.n	800c164 <ai_check_custom_types+0x1c>
 800c17a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c17e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c182:	429a      	cmp	r2, r3
 800c184:	d1ee      	bne.n	800c164 <ai_check_custom_types+0x1c>
 800c186:	7842      	ldrb	r2, [r0, #1]
 800c188:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d1e9      	bne.n	800c164 <ai_check_custom_types+0x1c>
 800c190:	2000      	movs	r0, #0
 800c192:	e7e8      	b.n	800c166 <ai_check_custom_types+0x1e>
 800c194:	84048403 	.word	0x84048403

0800c198 <ai_layers_init_all>:
 800c198:	2100      	movs	r1, #0
 800c19a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c19c:	b13b      	cbz	r3, 800c1ae <ai_layers_init_all+0x16>
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	3101      	adds	r1, #1
 800c1a2:	60d8      	str	r0, [r3, #12]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	d001      	beq.n	800c1ae <ai_layers_init_all+0x16>
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	d1f6      	bne.n	800c19c <ai_layers_init_all+0x4>
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop

0800c1b4 <ai_layers_post_init_all>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	2500      	movs	r5, #0
 800c1b8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c1ba:	b16c      	cbz	r4, 800c1d8 <ai_layers_post_init_all+0x24>
 800c1bc:	6863      	ldr	r3, [r4, #4]
 800c1be:	07db      	lsls	r3, r3, #31
 800c1c0:	d504      	bpl.n	800c1cc <ai_layers_post_init_all+0x18>
 800c1c2:	6a23      	ldr	r3, [r4, #32]
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	b10b      	cbz	r3, 800c1cc <ai_layers_post_init_all+0x18>
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	4798      	blx	r3
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	42a3      	cmp	r3, r4
 800c1d0:	461c      	mov	r4, r3
 800c1d2:	d001      	beq.n	800c1d8 <ai_layers_post_init_all+0x24>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1f0      	bne.n	800c1ba <ai_layers_post_init_all+0x6>
 800c1d8:	4628      	mov	r0, r5
 800c1da:	bd38      	pop	{r3, r4, r5, pc}

0800c1dc <ai_layers_forward_all>:
 800c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	2f00      	cmp	r7, #0
 800c1e6:	d02c      	beq.n	800c242 <ai_layers_forward_all+0x66>
 800c1e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800c1ea:	b1e1      	cbz	r1, 800c226 <ai_layers_forward_all+0x4a>
 800c1ec:	2600      	movs	r6, #0
 800c1ee:	6381      	str	r1, [r0, #56]	; 0x38
 800c1f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	47b8      	blx	r7
 800c1f6:	46b0      	mov	r8, r6
 800c1f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c1fc:	2002      	movs	r0, #2
 800c1fe:	47b8      	blx	r7
 800c200:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800c202:	4628      	mov	r0, r5
 800c204:	696b      	ldr	r3, [r5, #20]
 800c206:	4798      	blx	r3
 800c208:	692b      	ldr	r3, [r5, #16]
 800c20a:	2003      	movs	r0, #3
 800c20c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c20e:	429d      	cmp	r5, r3
 800c210:	4619      	mov	r1, r3
 800c212:	d00c      	beq.n	800c22e <ai_layers_forward_all+0x52>
 800c214:	63a3      	str	r3, [r4, #56]	; 0x38
 800c216:	3601      	adds	r6, #1
 800c218:	47b8      	blx	r7
 800c21a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d1ec      	bne.n	800c1fa <ai_layers_forward_all+0x1e>
 800c220:	4630      	mov	r0, r6
 800c222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c226:	460e      	mov	r6, r1
 800c228:	4630      	mov	r0, r6
 800c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22e:	2100      	movs	r1, #0
 800c230:	2003      	movs	r0, #3
 800c232:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800c236:	3601      	adds	r6, #1
 800c238:	47b8      	blx	r7
 800c23a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c23c:	2900      	cmp	r1, #0
 800c23e:	d1dc      	bne.n	800c1fa <ai_layers_forward_all+0x1e>
 800c240:	e7ee      	b.n	800c220 <ai_layers_forward_all+0x44>
 800c242:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c244:	b19d      	cbz	r5, 800c26e <ai_layers_forward_all+0x92>
 800c246:	463e      	mov	r6, r7
 800c248:	6385      	str	r5, [r0, #56]	; 0x38
 800c24a:	e003      	b.n	800c254 <ai_layers_forward_all+0x78>
 800c24c:	3601      	adds	r6, #1
 800c24e:	63a5      	str	r5, [r4, #56]	; 0x38
 800c250:	2d00      	cmp	r5, #0
 800c252:	d0e5      	beq.n	800c220 <ai_layers_forward_all+0x44>
 800c254:	696b      	ldr	r3, [r5, #20]
 800c256:	4628      	mov	r0, r5
 800c258:	4798      	blx	r3
 800c25a:	462b      	mov	r3, r5
 800c25c:	692d      	ldr	r5, [r5, #16]
 800c25e:	429d      	cmp	r5, r3
 800c260:	d1f4      	bne.n	800c24c <ai_layers_forward_all+0x70>
 800c262:	2300      	movs	r3, #0
 800c264:	3601      	adds	r6, #1
 800c266:	63a3      	str	r3, [r4, #56]	; 0x38
 800c268:	4630      	mov	r0, r6
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	462e      	mov	r6, r5
 800c270:	e7d6      	b.n	800c220 <ai_layers_forward_all+0x44>
 800c272:	bf00      	nop

0800c274 <pool_func_ap_array_integer_INT8>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	b093      	sub	sp, #76	; 0x4c
 800c27a:	468c      	mov	ip, r1
 800c27c:	469a      	mov	sl, r3
 800c27e:	6804      	ldr	r4, [r0, #0]
 800c280:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800c284:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800c288:	910e      	str	r1, [sp, #56]	; 0x38
 800c28a:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800c28e:	930d      	str	r3, [sp, #52]	; 0x34
 800c290:	910f      	str	r1, [sp, #60]	; 0x3c
 800c292:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c294:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800c298:	6980      	ldr	r0, [r0, #24]
 800c29a:	9110      	str	r1, [sp, #64]	; 0x40
 800c29c:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800c2a0:	6999      	ldr	r1, [r3, #24]
 800c2a2:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 800c2a6:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 800c2aa:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2c00      	cmp	r4, #0
 800c2b2:	d05c      	beq.n	800c36e <pool_func_ap_array_integer_INT8+0xfa>
 800c2b4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2b8:	f1b9 0f00 	cmp.w	r9, #0
 800c2bc:	d041      	beq.n	800c342 <pool_func_ap_array_integer_INT8+0xce>
 800c2be:	8865      	ldrh	r5, [r4, #2]
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	d06d      	beq.n	800c3a0 <pool_func_ap_array_integer_INT8+0x12c>
 800c2c4:	f8d9 6000 	ldr.w	r6, [r9]
 800c2c8:	ed96 0a00 	vldr	s0, [r6]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d06b      	beq.n	800c3a8 <pool_func_ap_array_integer_INT8+0x134>
 800c2d0:	685e      	ldr	r6, [r3, #4]
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	d03c      	beq.n	800c350 <pool_func_ap_array_integer_INT8+0xdc>
 800c2d6:	885d      	ldrh	r5, [r3, #2]
 800c2d8:	9511      	str	r5, [sp, #68]	; 0x44
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	d050      	beq.n	800c380 <pool_func_ap_array_integer_INT8+0x10c>
 800c2de:	6835      	ldr	r5, [r6, #0]
 800c2e0:	6880      	ldr	r0, [r0, #8]
 800c2e2:	6889      	ldr	r1, [r1, #8]
 800c2e4:	edd5 0a00 	vldr	s1, [r5]
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	d052      	beq.n	800c394 <pool_func_ap_array_integer_INT8+0x120>
 800c2ee:	8864      	ldrh	r4, [r4, #2]
 800c2f0:	2c00      	cmp	r4, #0
 800c2f2:	d037      	beq.n	800c364 <pool_func_ap_array_integer_INT8+0xf0>
 800c2f4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800c2f8:	f994 4000 	ldrsb.w	r4, [r4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d04d      	beq.n	800c39c <pool_func_ap_array_integer_INT8+0x128>
 800c300:	2e00      	cmp	r6, #0
 800c302:	d032      	beq.n	800c36a <pool_func_ap_array_integer_INT8+0xf6>
 800c304:	885b      	ldrh	r3, [r3, #2]
 800c306:	9311      	str	r3, [sp, #68]	; 0x44
 800c308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d046      	beq.n	800c39c <pool_func_ap_array_integer_INT8+0x128>
 800c30e:	6873      	ldr	r3, [r6, #4]
 800c310:	f993 5000 	ldrsb.w	r5, [r3]
 800c314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c316:	f8cd a000 	str.w	sl, [sp]
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31e:	9303      	str	r3, [sp, #12]
 800c320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	4613      	mov	r3, r2
 800c32a:	4662      	mov	r2, ip
 800c32c:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800c330:	e9cd e807 	strd	lr, r8, [sp, #28]
 800c334:	e9cd b705 	strd	fp, r7, [sp, #20]
 800c338:	f007 fcdc 	bl	8013cf4 <st_int8_avepool>
 800c33c:	b013      	add	sp, #76	; 0x4c
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	2b00      	cmp	r3, #0
 800c344:	d03c      	beq.n	800c3c0 <pool_func_ap_array_integer_INT8+0x14c>
 800c346:	685e      	ldr	r6, [r3, #4]
 800c348:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c34c:	2e00      	cmp	r6, #0
 800c34e:	d1c2      	bne.n	800c2d6 <pool_func_ap_array_integer_INT8+0x62>
 800c350:	6880      	ldr	r0, [r0, #8]
 800c352:	6889      	ldr	r1, [r1, #8]
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	d02d      	beq.n	800c3b6 <pool_func_ap_array_integer_INT8+0x142>
 800c35a:	8864      	ldrh	r4, [r4, #2]
 800c35c:	2c00      	cmp	r4, #0
 800c35e:	d151      	bne.n	800c404 <pool_func_ap_array_integer_INT8+0x190>
 800c360:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c364:	2400      	movs	r4, #0
 800c366:	2e00      	cmp	r6, #0
 800c368:	d1cc      	bne.n	800c304 <pool_func_ap_array_integer_INT8+0x90>
 800c36a:	2500      	movs	r5, #0
 800c36c:	e7d2      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c36e:	b33b      	cbz	r3, 800c3c0 <pool_func_ap_array_integer_INT8+0x14c>
 800c370:	685e      	ldr	r6, [r3, #4]
 800c372:	b376      	cbz	r6, 800c3d2 <pool_func_ap_array_integer_INT8+0x15e>
 800c374:	885d      	ldrh	r5, [r3, #2]
 800c376:	9511      	str	r5, [sp, #68]	; 0x44
 800c378:	2d00      	cmp	r5, #0
 800c37a:	d133      	bne.n	800c3e4 <pool_func_ap_array_integer_INT8+0x170>
 800c37c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c380:	6880      	ldr	r0, [r0, #8]
 800c382:	6889      	ldr	r1, [r1, #8]
 800c384:	b1c4      	cbz	r4, 800c3b8 <pool_func_ap_array_integer_INT8+0x144>
 800c386:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c38a:	eddf 0a22 	vldr	s1, [pc, #136]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c38e:	f1b9 0f00 	cmp.w	r9, #0
 800c392:	d1ac      	bne.n	800c2ee <pool_func_ap_array_integer_INT8+0x7a>
 800c394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c396:	464c      	mov	r4, r9
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1b8      	bne.n	800c30e <pool_func_ap_array_integer_INT8+0x9a>
 800c39c:	461d      	mov	r5, r3
 800c39e:	e7b9      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c3a0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d193      	bne.n	800c2d0 <pool_func_ap_array_integer_INT8+0x5c>
 800c3a8:	6880      	ldr	r0, [r0, #8]
 800c3aa:	6889      	ldr	r1, [r1, #8]
 800c3ac:	bb15      	cbnz	r5, 800c3f4 <pool_func_ap_array_integer_INT8+0x180>
 800c3ae:	462c      	mov	r4, r5
 800c3b0:	eddf 0a18 	vldr	s1, [pc, #96]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3b4:	e7ae      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c3b6:	464c      	mov	r4, r9
 800c3b8:	eddf 0a16 	vldr	s1, [pc, #88]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3bc:	4625      	mov	r5, r4
 800c3be:	e7a9      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c3c0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3c4:	461c      	mov	r4, r3
 800c3c6:	6880      	ldr	r0, [r0, #8]
 800c3c8:	461d      	mov	r5, r3
 800c3ca:	eef0 0a40 	vmov.f32	s1, s0
 800c3ce:	6889      	ldr	r1, [r1, #8]
 800c3d0:	e7a0      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c3d2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3d6:	4634      	mov	r4, r6
 800c3d8:	6880      	ldr	r0, [r0, #8]
 800c3da:	4635      	mov	r5, r6
 800c3dc:	eef0 0a40 	vmov.f32	s1, s0
 800c3e0:	6889      	ldr	r1, [r1, #8]
 800c3e2:	e797      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c3e4:	6833      	ldr	r3, [r6, #0]
 800c3e6:	6880      	ldr	r0, [r0, #8]
 800c3e8:	6889      	ldr	r1, [r1, #8]
 800c3ea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3ee:	edd3 0a00 	vldr	s1, [r3]
 800c3f2:	e78c      	b.n	800c30e <pool_func_ap_array_integer_INT8+0x9a>
 800c3f4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800c3f8:	461d      	mov	r5, r3
 800c3fa:	eddf 0a06 	vldr	s1, [pc, #24]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c3fe:	f994 4000 	ldrsb.w	r4, [r4]
 800c402:	e787      	b.n	800c314 <pool_func_ap_array_integer_INT8+0xa0>
 800c404:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c408:	eddf 0a02 	vldr	s1, [pc, #8]	; 800c414 <pool_func_ap_array_integer_INT8+0x1a0>
 800c40c:	f993 4000 	ldrsb.w	r4, [r3]
 800c410:	e7ab      	b.n	800c36a <pool_func_ap_array_integer_INT8+0xf6>
 800c412:	bf00      	nop
 800c414:	00000000 	.word	0x00000000

0800c418 <forward_lite_node_convert_integer_iu8ou8>:
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	f89d 3000 	ldrb.w	r3, [sp]
 800c420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c424:	ee06 3a90 	vmov	s13, r3
 800c428:	1883      	adds	r3, r0, r2
 800c42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c432:	4298      	cmp	r0, r3
 800c434:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c438:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c43c:	d215      	bcs.n	800c46a <forward_lite_node_convert_integer_iu8ou8+0x52>
 800c43e:	3801      	subs	r0, #1
 800c440:	440a      	add	r2, r1
 800c442:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c446:	eef0 7a66 	vmov.f32	s15, s13
 800c44a:	ee07 3a10 	vmov	s14, r3
 800c44e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c452:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c45a:	ee17 3a90 	vmov	r3, s15
 800c45e:	f383 0308 	usat	r3, #8, r3
 800c462:	f801 3b01 	strb.w	r3, [r1], #1
 800c466:	4291      	cmp	r1, r2
 800c468:	d1eb      	bne.n	800c442 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 800c46a:	4770      	bx	lr

0800c46c <forward_lite_node_convert_integer_iu8os8>:
 800c46c:	ee07 3a90 	vmov	s15, r3
 800c470:	f99d 3000 	ldrsb.w	r3, [sp]
 800c474:	ee06 3a90 	vmov	s13, r3
 800c478:	1883      	adds	r3, r0, r2
 800c47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c482:	4298      	cmp	r0, r3
 800c484:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c488:	d22d      	bcs.n	800c4e6 <forward_lite_node_convert_integer_iu8os8+0x7a>
 800c48a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c48e:	3801      	subs	r0, #1
 800c490:	440a      	add	r2, r1
 800c492:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c4e8 <forward_lite_node_convert_integer_iu8os8+0x7c>
 800c496:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c49a:	eef0 7a66 	vmov.f32	s15, s13
 800c49e:	ee07 3a10 	vmov	s14, r3
 800c4a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4a6:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c4aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4ae:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800c4b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c4be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4c2:	dd08      	ble.n	800c4d6 <forward_lite_node_convert_integer_iu8os8+0x6a>
 800c4c4:	ee17 3a10 	vmov	r3, s14
 800c4c8:	f303 0307 	ssat	r3, #8, r3
 800c4cc:	f801 3b01 	strb.w	r3, [r1], #1
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	d1e0      	bne.n	800c496 <forward_lite_node_convert_integer_iu8os8+0x2a>
 800c4d4:	4770      	bx	lr
 800c4d6:	ee17 3a90 	vmov	r3, s15
 800c4da:	f303 0307 	ssat	r3, #8, r3
 800c4de:	f801 3b01 	strb.w	r3, [r1], #1
 800c4e2:	4291      	cmp	r1, r2
 800c4e4:	d1d7      	bne.n	800c496 <forward_lite_node_convert_integer_iu8os8+0x2a>
 800c4e6:	4770      	bx	lr
 800c4e8:	3efffffc 	.word	0x3efffffc

0800c4ec <forward_lite_node_convert_integer_iu8os8_fast>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	1095      	asrs	r5, r2, #2
 800c4f0:	2d00      	cmp	r5, #0
 800c4f2:	dd31      	ble.n	800c558 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800c4f4:	00ae      	lsls	r6, r5, #2
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c4fc:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800c500:	f850 3b04 	ldr.w	r3, [r0], #4
 800c504:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800c508:	fa3f fc8c 	uxtb16	ip, ip
 800c50c:	fadc fc0e 	ssub16	ip, ip, lr
 800c510:	fa3f f383 	uxtb16	r3, r3
 800c514:	fad3 f30e 	ssub16	r3, r3, lr
 800c518:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800c51c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c520:	42a8      	cmp	r0, r5
 800c522:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800c526:	ea43 030c 	orr.w	r3, r3, ip
 800c52a:	f844 3b04 	str.w	r3, [r4], #4
 800c52e:	d1e7      	bne.n	800c500 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800c530:	4431      	add	r1, r6
 800c532:	f012 0203 	ands.w	r2, r2, #3
 800c536:	d00e      	beq.n	800c556 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c538:	782b      	ldrb	r3, [r5, #0]
 800c53a:	3a01      	subs	r2, #1
 800c53c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c540:	700b      	strb	r3, [r1, #0]
 800c542:	d008      	beq.n	800c556 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c544:	786b      	ldrb	r3, [r5, #1]
 800c546:	2a01      	cmp	r2, #1
 800c548:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c54c:	704b      	strb	r3, [r1, #1]
 800c54e:	d002      	beq.n	800c556 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c550:	78ab      	ldrb	r3, [r5, #2]
 800c552:	3b80      	subs	r3, #128	; 0x80
 800c554:	708b      	strb	r3, [r1, #2]
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	4605      	mov	r5, r0
 800c55a:	e7ea      	b.n	800c532 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800c55c <forward_lite_node_convert_integer_is8ou8>:
 800c55c:	ee07 3a90 	vmov	s15, r3
 800c560:	f89d 3000 	ldrb.w	r3, [sp]
 800c564:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c568:	ee06 3a90 	vmov	s13, r3
 800c56c:	1883      	adds	r3, r0, r2
 800c56e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c572:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c576:	4298      	cmp	r0, r3
 800c578:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c57c:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c580:	d215      	bcs.n	800c5ae <forward_lite_node_convert_integer_is8ou8+0x52>
 800c582:	3801      	subs	r0, #1
 800c584:	440a      	add	r2, r1
 800c586:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800c58a:	eef0 7a66 	vmov.f32	s15, s13
 800c58e:	ee07 3a10 	vmov	s14, r3
 800c592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c596:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c59a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c59e:	ee17 3a90 	vmov	r3, s15
 800c5a2:	f383 0308 	usat	r3, #8, r3
 800c5a6:	f801 3b01 	strb.w	r3, [r1], #1
 800c5aa:	4291      	cmp	r1, r2
 800c5ac:	d1eb      	bne.n	800c586 <forward_lite_node_convert_integer_is8ou8+0x2a>
 800c5ae:	4770      	bx	lr

0800c5b0 <forward_lite_node_convert_integer_is8ou8_fast>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	1095      	asrs	r5, r2, #2
 800c5b4:	2d00      	cmp	r5, #0
 800c5b6:	dd2d      	ble.n	800c614 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800c5b8:	00ae      	lsls	r6, r5, #2
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c5c0:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800c5c4:	f850 3b04 	ldr.w	r3, [r0], #4
 800c5c8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800c5cc:	fa2f fc8c 	sxtb16	ip, ip
 800c5d0:	fa9c fc0e 	sadd16	ip, ip, lr
 800c5d4:	fa2f f383 	sxtb16	r3, r3
 800c5d8:	fa93 f30e 	sadd16	r3, r3, lr
 800c5dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c5e0:	42a8      	cmp	r0, r5
 800c5e2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c5e6:	f844 3b04 	str.w	r3, [r4], #4
 800c5ea:	d1eb      	bne.n	800c5c4 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800c5ec:	4431      	add	r1, r6
 800c5ee:	f012 0203 	ands.w	r2, r2, #3
 800c5f2:	d00e      	beq.n	800c612 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c5f4:	782b      	ldrb	r3, [r5, #0]
 800c5f6:	3a01      	subs	r2, #1
 800c5f8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c5fc:	700b      	strb	r3, [r1, #0]
 800c5fe:	d008      	beq.n	800c612 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c600:	786b      	ldrb	r3, [r5, #1]
 800c602:	2a01      	cmp	r2, #1
 800c604:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c608:	704b      	strb	r3, [r1, #1]
 800c60a:	d002      	beq.n	800c612 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c60c:	78ab      	ldrb	r3, [r5, #2]
 800c60e:	3b80      	subs	r3, #128	; 0x80
 800c610:	708b      	strb	r3, [r1, #2]
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	4605      	mov	r5, r0
 800c616:	e7ea      	b.n	800c5ee <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800c618 <align_factor>:
 800c618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c61c:	4602      	mov	r2, r0
 800c61e:	b508      	push	{r3, lr}
 800c620:	eeb4 0a67 	vcmp.f32	s0, s15
 800c624:	2300      	movs	r3, #0
 800c626:	8003      	strh	r3, [r0, #0]
 800c628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62c:	d524      	bpl.n	800c678 <align_factor+0x60>
 800c62e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c636:	dd1f      	ble.n	800c678 <align_factor+0x60>
 800c638:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c63c:	2301      	movs	r3, #1
 800c63e:	e005      	b.n	800c64c <align_factor+0x34>
 800c640:	8013      	strh	r3, [r2, #0]
 800c642:	b28b      	uxth	r3, r1
 800c644:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c648:	2b21      	cmp	r3, #33	; 0x21
 800c64a:	d02b      	beq.n	800c6a4 <align_factor+0x8c>
 800c64c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c650:	1c59      	adds	r1, r3, #1
 800c652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c656:	d4f3      	bmi.n	800c640 <align_factor+0x28>
 800c658:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c6b8 <align_factor+0xa0>
 800c65c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c660:	ee17 0a90 	vmov	r0, s15
 800c664:	f7f3 fe5c 	bl	8000320 <__aeabi_f2lz>
 800c668:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c66c:	d003      	beq.n	800c676 <align_factor+0x5e>
 800c66e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800c672:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800c676:	bd08      	pop	{r3, pc}
 800c678:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c684:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800c688:	e005      	b.n	800c696 <align_factor+0x7e>
 800c68a:	8013      	strh	r3, [r2, #0]
 800c68c:	b28b      	uxth	r3, r1
 800c68e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c692:	4283      	cmp	r3, r0
 800c694:	d00a      	beq.n	800c6ac <align_factor+0x94>
 800c696:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c69a:	1e59      	subs	r1, r3, #1
 800c69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a0:	dcf3      	bgt.n	800c68a <align_factor+0x72>
 800c6a2:	e7d9      	b.n	800c658 <align_factor+0x40>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	8013      	strh	r3, [r2, #0]
 800c6aa:	bd08      	pop	{r3, pc}
 800c6ac:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800c6b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6b4:	8013      	strh	r3, [r2, #0]
 800c6b6:	e7cf      	b.n	800c658 <align_factor+0x40>
 800c6b8:	4f000000 	.word	0x4f000000

0800c6bc <align_factor_ch>:
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d05d      	beq.n	800c77c <align_factor_ch+0xc0>
 800c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	ed2d 8b04 	vpush	{d8-d9}
 800c6c8:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4691      	mov	r9, r2
 800c6d0:	4698      	mov	r8, r3
 800c6d2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800c6d6:	eddf 9a2a 	vldr	s19, [pc, #168]	; 800c780 <align_factor_ch+0xc4>
 800c6da:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800c6de:	2700      	movs	r7, #0
 800c6e0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c6e4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c6e8:	ecf4 7a01 	vldmia	r4!, {s15}
 800c6ec:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c6f0:	eef4 7a68 	vcmp.f32	s15, s17
 800c6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f8:	d528      	bpl.n	800c74c <align_factor_ch+0x90>
 800c6fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	dd23      	ble.n	800c74c <align_factor_ch+0x90>
 800c704:	2200      	movs	r2, #0
 800c706:	e003      	b.n	800c710 <align_factor_ch+0x54>
 800c708:	2a20      	cmp	r2, #32
 800c70a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c70e:	d031      	beq.n	800c774 <align_factor_ch+0xb8>
 800c710:	eef4 7ac8 	vcmpe.f32	s15, s16
 800c714:	b213      	sxth	r3, r2
 800c716:	3201      	adds	r2, #1
 800c718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71c:	d4f4      	bmi.n	800c708 <align_factor_ch+0x4c>
 800c71e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c722:	f8a8 3000 	strh.w	r3, [r8]
 800c726:	ee17 0a90 	vmov	r0, s15
 800c72a:	f7f3 fdf9 	bl	8000320 <__aeabi_f2lz>
 800c72e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c732:	bf18      	it	ne
 800c734:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800c738:	42a5      	cmp	r5, r4
 800c73a:	f108 0802 	add.w	r8, r8, #2
 800c73e:	f849 0b04 	str.w	r0, [r9], #4
 800c742:	d1d1      	bne.n	800c6e8 <align_factor_ch+0x2c>
 800c744:	ecbd 8b04 	vpop	{d8-d9}
 800c748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74c:	2300      	movs	r3, #0
 800c74e:	e005      	b.n	800c75c <align_factor_ch+0xa0>
 800c750:	b213      	sxth	r3, r2
 800c752:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c756:	f113 0f1f 	cmn.w	r3, #31
 800c75a:	d006      	beq.n	800c76a <align_factor_ch+0xae>
 800c75c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c760:	1e5a      	subs	r2, r3, #1
 800c762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c766:	dcf3      	bgt.n	800c750 <align_factor_ch+0x94>
 800c768:	e7d9      	b.n	800c71e <align_factor_ch+0x62>
 800c76a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c76e:	f06f 031d 	mvn.w	r3, #29
 800c772:	e7d4      	b.n	800c71e <align_factor_ch+0x62>
 800c774:	2000      	movs	r0, #0
 800c776:	f8a8 7000 	strh.w	r7, [r8]
 800c77a:	e7dd      	b.n	800c738 <align_factor_ch+0x7c>
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	4f000000 	.word	0x4f000000

0800c784 <st_sssa8_ch_conv_dw_Wadapt>:
 800c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	b089      	sub	sp, #36	; 0x24
 800c78a:	461e      	mov	r6, r3
 800c78c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800c78e:	9304      	str	r3, [sp, #16]
 800c790:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c794:	9005      	str	r0, [sp, #20]
 800c796:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c79a:	9203      	str	r2, [sp, #12]
 800c79c:	088c      	lsrs	r4, r1, #2
 800c79e:	9402      	str	r4, [sp, #8]
 800c7a0:	d05a      	beq.n	800c858 <st_sssa8_ch_conv_dw_Wadapt+0xd4>
 800c7a2:	fb06 f902 	mul.w	r9, r6, r2
 800c7a6:	4615      	mov	r5, r2
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	1e60      	subs	r0, r4, #1
 800c7ac:	f3c9 094f 	ubfx	r9, r9, #1, #16
 800c7b0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800c7b4:	f107 0a04 	add.w	sl, r7, #4
 800c7b8:	b280      	uxth	r0, r0
 800c7ba:	f109 32ff 	add.w	r2, r9, #4294967295
 800c7be:	46b8      	mov	r8, r7
 800c7c0:	fb15 fb06 	smulbb	fp, r5, r6
 800c7c4:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 800c7c8:	b292      	uxth	r2, r2
 800c7ca:	4f51      	ldr	r7, [pc, #324]	; (800c910 <st_sssa8_ch_conv_dw_Wadapt+0x18c>)
 800c7cc:	f00b 0b01 	and.w	fp, fp, #1
 800c7d0:	468c      	mov	ip, r1
 800c7d2:	fb02 1201 	mla	r2, r2, r1, r1
 800c7d6:	0054      	lsls	r4, r2, #1
 800c7d8:	9401      	str	r4, [sp, #4]
 800c7da:	4644      	mov	r4, r8
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	f1b9 0f00 	cmp.w	r9, #0
 800c7e2:	d02b      	beq.n	800c83c <st_sssa8_ch_conv_dw_Wadapt+0xb8>
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	9907      	ldr	r1, [sp, #28]
 800c7e8:	3801      	subs	r0, #1
 800c7ea:	f854 500c 	ldr.w	r5, [r4, ip]
 800c7ee:	1d0a      	adds	r2, r1, #4
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	b280      	uxth	r0, r0
 800c7f4:	4474      	add	r4, lr
 800c7f6:	9207      	str	r2, [sp, #28]
 800c7f8:	ea05 0207 	and.w	r2, r5, r7
 800c7fc:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 800c800:	b29b      	uxth	r3, r3
 800c802:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800c806:	9d07      	ldr	r5, [sp, #28]
 800c808:	fa2f f683 	sxtb16	r6, r3
 800c80c:	600e      	str	r6, [r1, #0]
 800c80e:	1d29      	adds	r1, r5, #4
 800c810:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c814:	9107      	str	r1, [sp, #28]
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	9b07      	ldr	r3, [sp, #28]
 800c81a:	fa2f f182 	sxtb16	r1, r2
 800c81e:	3304      	adds	r3, #4
 800c820:	f843 1c04 	str.w	r1, [r3, #-4]
 800c824:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c828:	9307      	str	r3, [sp, #28]
 800c82a:	9b07      	ldr	r3, [sp, #28]
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	3304      	adds	r3, #4
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	2800      	cmp	r0, #0
 800c834:	d1d7      	bne.n	800c7e6 <st_sssa8_ch_conv_dw_Wadapt+0x62>
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	eb03 0408 	add.w	r4, r3, r8
 800c83c:	9907      	ldr	r1, [sp, #28]
 800c83e:	f1bb 0f00 	cmp.w	fp, #0
 800c842:	d12e      	bne.n	800c8a2 <st_sssa8_ch_conv_dw_Wadapt+0x11e>
 800c844:	460b      	mov	r3, r1
 800c846:	f108 0804 	add.w	r8, r8, #4
 800c84a:	45d0      	cmp	r8, sl
 800c84c:	d1c5      	bne.n	800c7da <st_sssa8_ch_conv_dw_Wadapt+0x56>
 800c84e:	9a02      	ldr	r2, [sp, #8]
 800c850:	4661      	mov	r1, ip
 800c852:	0092      	lsls	r2, r2, #2
 800c854:	b292      	uxth	r2, r2
 800c856:	9202      	str	r2, [sp, #8]
 800c858:	f011 0203 	ands.w	r2, r1, #3
 800c85c:	d037      	beq.n	800c8ce <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c85e:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800c862:	fb10 f404 	smulbb	r4, r0, r4
 800c866:	b2a4      	uxth	r4, r4
 800c868:	b38c      	cbz	r4, 800c8ce <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c86a:	2901      	cmp	r1, #1
 800c86c:	d132      	bne.n	800c8d4 <st_sssa8_ch_conv_dw_Wadapt+0x150>
 800c86e:	0067      	lsls	r7, r4, #1
 800c870:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c874:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800c878:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c87c:	4665      	mov	r5, ip
 800c87e:	4620      	mov	r0, r4
 800c880:	1c69      	adds	r1, r5, #1
 800c882:	eb0e 0205 	add.w	r2, lr, r5
 800c886:	462e      	mov	r6, r5
 800c888:	b28d      	uxth	r5, r1
 800c88a:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800c88e:	f823 1b02 	strh.w	r1, [r3], #2
 800c892:	4283      	cmp	r3, r0
 800c894:	d1f9      	bne.n	800c88a <st_sssa8_ch_conv_dw_Wadapt+0x106>
 800c896:	4566      	cmp	r6, ip
 800c898:	4623      	mov	r3, r4
 800c89a:	4438      	add	r0, r7
 800c89c:	d017      	beq.n	800c8ce <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c89e:	443c      	add	r4, r7
 800c8a0:	e7ee      	b.n	800c880 <st_sssa8_ch_conv_dw_Wadapt+0xfc>
 800c8a2:	6824      	ldr	r4, [r4, #0]
 800c8a4:	f101 0308 	add.w	r3, r1, #8
 800c8a8:	b2a2      	uxth	r2, r4
 800c8aa:	ea07 2004 	and.w	r0, r7, r4, lsl #8
 800c8ae:	4310      	orrs	r0, r2
 800c8b0:	ea04 0207 	and.w	r2, r4, r7
 800c8b4:	fa2f f080 	sxtb16	r0, r0
 800c8b8:	ea42 6214 	orr.w	r2, r2, r4, lsr #24
 800c8bc:	8008      	strh	r0, [r1, #0]
 800c8be:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 800c8c2:	0c00      	lsrs	r0, r0, #16
 800c8c4:	808a      	strh	r2, [r1, #4]
 800c8c6:	0c12      	lsrs	r2, r2, #16
 800c8c8:	8048      	strh	r0, [r1, #2]
 800c8ca:	80ca      	strh	r2, [r1, #6]
 800c8cc:	e7bb      	b.n	800c846 <st_sssa8_ch_conv_dw_Wadapt+0xc2>
 800c8ce:	b009      	add	sp, #36	; 0x24
 800c8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d4:	9802      	ldr	r0, [sp, #8]
 800c8d6:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 800c8da:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c8de:	0064      	lsls	r4, r4, #1
 800c8e0:	4402      	add	r2, r0
 800c8e2:	463d      	mov	r5, r7
 800c8e4:	4684      	mov	ip, r0
 800c8e6:	b296      	uxth	r6, r2
 800c8e8:	f10c 0001 	add.w	r0, ip, #1
 800c8ec:	eb0e 020c 	add.w	r2, lr, ip
 800c8f0:	fa1f fc80 	uxth.w	ip, r0
 800c8f4:	f992 0000 	ldrsb.w	r0, [r2]
 800c8f8:	440a      	add	r2, r1
 800c8fa:	f823 0b02 	strh.w	r0, [r3], #2
 800c8fe:	42ab      	cmp	r3, r5
 800c900:	d1f8      	bne.n	800c8f4 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800c902:	45b4      	cmp	ip, r6
 800c904:	4425      	add	r5, r4
 800c906:	463b      	mov	r3, r7
 800c908:	d0e1      	beq.n	800c8ce <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c90a:	4427      	add	r7, r4
 800c90c:	e7ec      	b.n	800c8e8 <st_sssa8_ch_conv_dw_Wadapt+0x164>
 800c90e:	bf00      	nop
 800c910:	ffff0000 	.word	0xffff0000

0800c914 <st_sssa8_ch_convolve_dw>:
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	ed2d 8b02 	vpush	{d8}
 800c91c:	b0eb      	sub	sp, #428	; 0x1ac
 800c91e:	9211      	str	r2, [sp, #68]	; 0x44
 800c920:	9322      	str	r3, [sp, #136]	; 0x88
 800c922:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	; 0x1e4
 800c926:	f8bd 31e0 	ldrh.w	r3, [sp, #480]	; 0x1e0
 800c92a:	f8bd 41dc 	ldrh.w	r4, [sp, #476]	; 0x1dc
 800c92e:	fb02 f803 	mul.w	r8, r2, r3
 800c932:	f99d 6208 	ldrsb.w	r6, [sp, #520]	; 0x208
 800c936:	9238      	str	r2, [sp, #224]	; 0xe0
 800c938:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800c93c:	f8bd 21e8 	ldrh.w	r2, [sp, #488]	; 0x1e8
 800c940:	9023      	str	r0, [sp, #140]	; 0x8c
 800c942:	9237      	str	r2, [sp, #220]	; 0xdc
 800c944:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
 800c948:	9886      	ldr	r0, [sp, #536]	; 0x218
 800c94a:	923c      	str	r2, [sp, #240]	; 0xf0
 800c94c:	fb04 5208 	mla	r2, r4, r8, r5
 800c950:	910d      	str	r1, [sp, #52]	; 0x34
 800c952:	4621      	mov	r1, r4
 800c954:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c958:	9335      	str	r3, [sp, #212]	; 0xd4
 800c95a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c95e:	9434      	str	r4, [sp, #208]	; 0xd0
 800c960:	920c      	str	r2, [sp, #48]	; 0x30
 800c962:	00a4      	lsls	r4, r4, #2
 800c964:	f8bd 21f0 	ldrh.w	r2, [sp, #496]	; 0x1f0
 800c968:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800c96c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c970:	922a      	str	r2, [sp, #168]	; 0xa8
 800c972:	f8bd 21f4 	ldrh.w	r2, [sp, #500]	; 0x1f4
 800c976:	930e      	str	r3, [sp, #56]	; 0x38
 800c978:	923d      	str	r2, [sp, #244]	; 0xf4
 800c97a:	f99d 2204 	ldrsb.w	r2, [sp, #516]	; 0x204
 800c97e:	ee08 2a10 	vmov	s16, r2
 800c982:	f8bd 2210 	ldrh.w	r2, [sp, #528]	; 0x210
 800c986:	922d      	str	r2, [sp, #180]	; 0xb4
 800c988:	f8bd 2214 	ldrh.w	r2, [sp, #532]	; 0x214
 800c98c:	9239      	str	r2, [sp, #228]	; 0xe4
 800c98e:	004a      	lsls	r2, r1, #1
 800c990:	9214      	str	r2, [sp, #80]	; 0x50
 800c992:	b1d1      	cbz	r1, 800c9ca <st_sssa8_ch_convolve_dw+0xb6>
 800c994:	461a      	mov	r2, r3
 800c996:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800c998:	f04f 0e01 	mov.w	lr, #1
 800c99c:	1d11      	adds	r1, r2, #4
 800c99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9a0:	eb03 0c02 	add.w	ip, r3, r2
 800c9a4:	f933 2b02 	ldrsh.w	r2, [r3], #2
 800c9a8:	1e50      	subs	r0, r2, #1
 800c9aa:	fa0e f702 	lsl.w	r7, lr, r2
 800c9ae:	fa06 f202 	lsl.w	r2, r6, r2
 800c9b2:	b280      	uxth	r0, r0
 800c9b4:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800c9b8:	2814      	cmp	r0, #20
 800c9ba:	f200 827e 	bhi.w	800ceba <st_sssa8_ch_convolve_dw+0x5a6>
 800c9be:	4563      	cmp	r3, ip
 800c9c0:	f841 2c04 	str.w	r2, [r1, #-4]
 800c9c4:	f101 0104 	add.w	r1, r1, #4
 800c9c8:	d1ec      	bne.n	800c9a4 <st_sssa8_ch_convolve_dw+0x90>
 800c9ca:	ee18 3a10 	vmov	r3, s16
 800c9ce:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c9d0:	425b      	negs	r3, r3
 800c9d2:	1b16      	subs	r6, r2, r4
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	0076      	lsls	r6, r6, #1
 800c9d8:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800c9dc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c9de:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c9e0:	ea53 0c02 	orrs.w	ip, r3, r2
 800c9e4:	d10a      	bne.n	800c9fc <st_sssa8_ch_convolve_dw+0xe8>
 800c9e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c9e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c9ea:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	bf08      	it	eq
 800c9f0:	2903      	cmpeq	r1, #3
 800c9f2:	d103      	bne.n	800c9fc <st_sssa8_ch_convolve_dw+0xe8>
 800c9f4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	f001 804f 	beq.w	800da9a <st_sssa8_ch_convolve_dw+0x1186>
 800c9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9fe:	aa4a      	add	r2, sp, #296	; 0x128
 800ca00:	a960      	add	r1, sp, #384	; 0x180
 800ca02:	a856      	add	r0, sp, #344	; 0x158
 800ca04:	934c      	str	r3, [sp, #304]	; 0x130
 800ca06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca08:	934b      	str	r3, [sp, #300]	; 0x12c
 800ca0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ca0c:	9350      	str	r3, [sp, #320]	; 0x140
 800ca0e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800ca10:	934f      	str	r3, [sp, #316]	; 0x13c
 800ca12:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800ca14:	9354      	str	r3, [sp, #336]	; 0x150
 800ca16:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800ca18:	9353      	str	r3, [sp, #332]	; 0x14c
 800ca1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ca1c:	9362      	str	r3, [sp, #392]	; 0x188
 800ca1e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800ca20:	9363      	str	r3, [sp, #396]	; 0x18c
 800ca22:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ca24:	9364      	str	r3, [sp, #400]	; 0x190
 800ca26:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800ca28:	9365      	str	r3, [sp, #404]	; 0x194
 800ca2a:	ab52      	add	r3, sp, #328	; 0x148
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	ab4e      	add	r3, sp, #312	; 0x138
 800ca30:	f003 f818 	bl	800fa64 <ai_padding_opt_init>
 800ca34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ca36:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800ca38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca3c:	079a      	lsls	r2, r3, #30
 800ca3e:	9327      	str	r3, [sp, #156]	; 0x9c
 800ca40:	f000 8243 	beq.w	800ceca <st_sssa8_ch_convolve_dw+0x5b6>
 800ca44:	2301      	movs	r3, #1
 800ca46:	933e      	str	r3, [sp, #248]	; 0xf8
 800ca48:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 822f 	beq.w	800ceae <st_sssa8_ch_convolve_dw+0x59a>
 800ca50:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca52:	f3c8 004f 	ubfx	r0, r8, #1, #16
 800ca56:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800ca58:	186b      	adds	r3, r5, r1
 800ca5a:	9015      	str	r0, [sp, #84]	; 0x54
 800ca5c:	460d      	mov	r5, r1
 800ca5e:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800ca60:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca62:	eb01 0309 	add.w	r3, r1, r9
 800ca66:	08b9      	lsrs	r1, r7, #2
 800ca68:	931a      	str	r3, [sp, #104]	; 0x68
 800ca6a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800ca6c:	9136      	str	r1, [sp, #216]	; 0xd8
 800ca6e:	3901      	subs	r1, #1
 800ca70:	fb12 f303 	smulbb	r3, r2, r3
 800ca74:	1e42      	subs	r2, r0, #1
 800ca76:	b289      	uxth	r1, r1
 800ca78:	b298      	uxth	r0, r3
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	b292      	uxth	r2, r2
 800ca80:	9316      	str	r3, [sp, #88]	; 0x58
 800ca82:	1e43      	subs	r3, r0, #1
 800ca84:	9031      	str	r0, [sp, #196]	; 0xc4
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3301      	adds	r3, #1
 800ca8a:	0058      	lsls	r0, r3, #1
 800ca8c:	1c4b      	adds	r3, r1, #1
 800ca8e:	9026      	str	r0, [sp, #152]	; 0x98
 800ca90:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca92:	4420      	add	r0, r4
 800ca94:	192c      	adds	r4, r5, r4
 800ca96:	1986      	adds	r6, r0, r6
 800ca98:	9024      	str	r0, [sp, #144]	; 0x90
 800ca9a:	941c      	str	r4, [sp, #112]	; 0x70
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	962b      	str	r6, [sp, #172]	; 0xac
 800caa0:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800caa2:	4270      	negs	r0, r6
 800caa4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800caa6:	fa1f fc80 	uxth.w	ip, r0
 800caaa:	08b0      	lsrs	r0, r6, #2
 800caac:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 800cab0:	f106 3cff 	add.w	ip, r6, #4294967295
 800cab4:	0080      	lsls	r0, r0, #2
 800cab6:	f026 0603 	bic.w	r6, r6, #3
 800caba:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800cabe:	9030      	str	r0, [sp, #192]	; 0xc0
 800cac0:	1c50      	adds	r0, r2, #1
 800cac2:	9633      	str	r6, [sp, #204]	; 0xcc
 800cac4:	0100      	lsls	r0, r0, #4
 800cac6:	9021      	str	r0, [sp, #132]	; 0x84
 800cac8:	fb02 7007 	mla	r0, r2, r7, r7
 800cacc:	0112      	lsls	r2, r2, #4
 800cace:	923a      	str	r2, [sp, #232]	; 0xe8
 800cad0:	eb05 0c40 	add.w	ip, r5, r0, lsl #1
 800cad4:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800cad6:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800cada:	3220      	adds	r2, #32
 800cadc:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
 800cae0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cae2:	19ca      	adds	r2, r1, r7
 800cae4:	4629      	mov	r1, r5
 800cae6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800caea:	442a      	add	r2, r5
 800caec:	921d      	str	r2, [sp, #116]	; 0x74
 800caee:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 800caf2:	1955      	adds	r5, r2, r5
 800caf4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800caf8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800cafc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800cafe:	9519      	str	r5, [sp, #100]	; 0x64
 800cb00:	2500      	movs	r5, #0
 800cb02:	943b      	str	r4, [sp, #236]	; 0xec
 800cb04:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800cb06:	fb04 f402 	mul.w	r4, r4, r2
 800cb0a:	9443      	str	r4, [sp, #268]	; 0x10c
 800cb0c:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800cb0e:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
 800cb12:	2a03      	cmp	r2, #3
 800cb14:	bf08      	it	eq
 800cb16:	2803      	cmpeq	r0, #3
 800cb18:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800cb1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb1c:	eba2 0206 	sub.w	r2, r2, r6
 800cb20:	bf0c      	ite	eq
 800cb22:	2401      	moveq	r4, #1
 800cb24:	2400      	movne	r4, #0
 800cb26:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800cb28:	9232      	str	r2, [sp, #200]	; 0xc8
 800cb2a:	942c      	str	r4, [sp, #176]	; 0xb0
 800cb2c:	f007 0403 	and.w	r4, r7, #3
 800cb30:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800cb32:	9429      	str	r4, [sp, #164]	; 0xa4
 800cb34:	0094      	lsls	r4, r2, #2
 800cb36:	3a01      	subs	r2, #1
 800cb38:	9241      	str	r2, [sp, #260]	; 0x104
 800cb3a:	009a      	lsls	r2, r3, #2
 800cb3c:	943f      	str	r4, [sp, #252]	; 0xfc
 800cb3e:	462c      	mov	r4, r5
 800cb40:	9212      	str	r2, [sp, #72]	; 0x48
 800cb42:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800cb44:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800cb48:	9244      	str	r2, [sp, #272]	; 0x110
 800cb4a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800cb4e:	9245      	str	r2, [sp, #276]	; 0x114
 800cb50:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800cb54:	9248      	str	r2, [sp, #288]	; 0x120
 800cb56:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800cb58:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800cb5c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800cb5e:	9247      	str	r2, [sp, #284]	; 0x11c
 800cb60:	009a      	lsls	r2, r3, #2
 800cb62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb64:	9246      	str	r2, [sp, #280]	; 0x118
 800cb66:	18cb      	adds	r3, r1, r3
 800cb68:	931e      	str	r3, [sp, #120]	; 0x78
 800cb6a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
 800cb6e:	9318      	str	r3, [sp, #96]	; 0x60
 800cb70:	a856      	add	r0, sp, #344	; 0x158
 800cb72:	f002 ffd1 	bl	800fb18 <ai_padding_opt_phase1>
 800cb76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 878a 	beq.w	800da92 <st_sssa8_ch_convolve_dw+0x117e>
 800cb7e:	b2ab      	uxth	r3, r5
 800cb80:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800cb82:	f8dd b124 	ldr.w	fp, [sp, #292]	; 0x124
 800cb86:	9342      	str	r3, [sp, #264]	; 0x108
 800cb88:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800cb8a:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 800cb8e:	1a9b      	subs	r3, r3, r2
 800cb90:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800cb92:	fb02 3304 	mla	r3, r2, r4, r3
 800cb96:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 800cb9a:	9310      	str	r3, [sp, #64]	; 0x40
 800cb9c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800cb9e:	922e      	str	r2, [sp, #184]	; 0xb8
 800cba0:	425b      	negs	r3, r3
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	9325      	str	r3, [sp, #148]	; 0x94
 800cba6:	2300      	movs	r3, #0
 800cba8:	4619      	mov	r1, r3
 800cbaa:	9a56      	ldr	r2, [sp, #344]	; 0x158
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	f000 82c8 	beq.w	800d142 <st_sssa8_ch_convolve_dw+0x82e>
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	9256      	str	r2, [sp, #344]	; 0x158
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800cbbc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cbbe:	2a01      	cmp	r2, #1
 800cbc0:	f000 8583 	beq.w	800d6ca <st_sssa8_ch_convolve_dw+0xdb6>
 800cbc4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cbc6:	2a04      	cmp	r2, #4
 800cbc8:	f000 86ae 	beq.w	800d928 <st_sssa8_ch_convolve_dw+0x1014>
 800cbcc:	2a02      	cmp	r2, #2
 800cbce:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800cbd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbd2:	f000 85c6 	beq.w	800d762 <st_sssa8_ch_convolve_dw+0xe4e>
 800cbd6:	4282      	cmp	r2, r0
 800cbd8:	f340 8755 	ble.w	800da86 <st_sssa8_ch_convolve_dw+0x1172>
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800cbe0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800cbe2:	9328      	str	r3, [sp, #160]	; 0xa0
 800cbe4:	fb01 2100 	mla	r1, r1, r0, r2
 800cbe8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800cbea:	1acd      	subs	r5, r1, r3
 800cbec:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800cbf0:	429d      	cmp	r5, r3
 800cbf2:	9307      	str	r3, [sp, #28]
 800cbf4:	dd3c      	ble.n	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800cbf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cbf8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cbfc:	46d3      	mov	fp, sl
 800cbfe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cc02:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800cc06:	9503      	str	r5, [sp, #12]
 800cc08:	9305      	str	r3, [sp, #20]
 800cc0a:	9a05      	ldr	r2, [sp, #20]
 800cc0c:	46da      	mov	sl, fp
 800cc0e:	ee18 0a10 	vmov	r0, s16
 800cc12:	0fd1      	lsrs	r1, r2, #31
 800cc14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc16:	429a      	cmp	r2, r3
 800cc18:	bfd8      	it	le
 800cc1a:	f041 0101 	orrle.w	r1, r1, #1
 800cc1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc20:	9104      	str	r1, [sp, #16]
 800cc22:	4693      	mov	fp, r2
 800cc24:	9907      	ldr	r1, [sp, #28]
 800cc26:	fb03 f302 	mul.w	r3, r3, r2
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	9306      	str	r3, [sp, #24]
 800cc2e:	0fe3      	lsrs	r3, r4, #31
 800cc30:	458b      	cmp	fp, r1
 800cc32:	bfd8      	it	le
 800cc34:	f043 0301 	orrle.w	r3, r3, #1
 800cc38:	b91b      	cbnz	r3, 800cc42 <st_sssa8_ch_convolve_dw+0x32e>
 800cc3a:	9b04      	ldr	r3, [sp, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f000 81c8 	beq.w	800cfd2 <st_sssa8_ch_convolve_dw+0x6be>
 800cc42:	4652      	mov	r2, sl
 800cc44:	4641      	mov	r1, r8
 800cc46:	9002      	str	r0, [sp, #8]
 800cc48:	f006 fa06 	bl	8013058 <st_int8_fill>
 800cc4c:	9802      	ldr	r0, [sp, #8]
 800cc4e:	3401      	adds	r4, #1
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	44d0      	add	r8, sl
 800cc54:	b224      	sxth	r4, r4
 800cc56:	429c      	cmp	r4, r3
 800cc58:	4621      	mov	r1, r4
 800cc5a:	dbe8      	blt.n	800cc2e <st_sssa8_ch_convolve_dw+0x31a>
 800cc5c:	9b05      	ldr	r3, [sp, #20]
 800cc5e:	46d3      	mov	fp, sl
 800cc60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc62:	3301      	adds	r3, #1
 800cc64:	b21b      	sxth	r3, r3
 800cc66:	429a      	cmp	r2, r3
 800cc68:	9305      	str	r3, [sp, #20]
 800cc6a:	dcce      	bgt.n	800cc0a <st_sssa8_ch_convolve_dw+0x2f6>
 800cc6c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800cc70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f040 82a2 	bne.w	800d1bc <st_sssa8_ch_convolve_dw+0x8a8>
 800cc78:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 85f8 	beq.w	800d870 <st_sssa8_ch_convolve_dw+0xf5c>
 800cc80:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800cc82:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800cc86:	3310      	adds	r3, #16
 800cc88:	9305      	str	r3, [sp, #20]
 800cc8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cc8c:	9302      	str	r3, [sp, #8]
 800cc8e:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cc90:	9303      	str	r3, [sp, #12]
 800cc92:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800cc94:	330c      	adds	r3, #12
 800cc96:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc9a:	f103 020c 	add.w	r2, r3, #12
 800cc9e:	920a      	str	r2, [sp, #40]	; 0x28
 800cca0:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800cca2:	3208      	adds	r2, #8
 800cca4:	9209      	str	r2, [sp, #36]	; 0x24
 800cca6:	f103 0208 	add.w	r2, r3, #8
 800ccaa:	3304      	adds	r3, #4
 800ccac:	9208      	str	r2, [sp, #32]
 800ccae:	9306      	str	r3, [sp, #24]
 800ccb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ccb2:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800ccb4:	9304      	str	r3, [sp, #16]
 800ccb6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ccb8:	3204      	adds	r2, #4
 800ccba:	3320      	adds	r3, #32
 800ccbc:	9207      	str	r2, [sp, #28]
 800ccbe:	931f      	str	r3, [sp, #124]	; 0x7c
 800ccc0:	ee18 3a10 	vmov	r3, s16
 800ccc4:	b21b      	sxth	r3, r3
 800ccc6:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	9e04      	ldr	r6, [sp, #16]
 800cccc:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 800ccd0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ccd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccd6:	eb03 020c 	add.w	r2, r3, ip
 800ccda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccdc:	b3cb      	cbz	r3, 800cd52 <st_sssa8_ch_convolve_dw+0x43e>
 800ccde:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800cce0:	f106 0310 	add.w	r3, r6, #16
 800cce4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cce8:	19f7      	adds	r7, r6, r7
 800ccea:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800ccee:	f852 900a 	ldr.w	r9, [r2, sl]
 800ccf2:	f8df e910 	ldr.w	lr, [pc, #2320]	; 800d604 <st_sssa8_ch_convolve_dw+0xcf0>
 800ccf6:	f8d2 8000 	ldr.w	r8, [r2]
 800ccfa:	4462      	add	r2, ip
 800ccfc:	ea09 0e0e 	and.w	lr, r9, lr
 800cd00:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800cd04:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800cd08:	fa1f f888 	uxth.w	r8, r8
 800cd0c:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
 800cd10:	fa2b f988 	sxtab16	r9, fp, r8
 800cd14:	fb26 5509 	smlad	r5, r6, r9, r5
 800cd18:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800cd1c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800cd20:	fb26 4408 	smlad	r4, r6, r8, r4
 800cd24:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800cd28:	fa2b f88e 	sxtab16	r8, fp, lr
 800cd2c:	fb26 0008 	smlad	r0, r6, r8, r0
 800cd30:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800cd34:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800cd38:	fb26 110e 	smlad	r1, r6, lr, r1
 800cd3c:	3310      	adds	r3, #16
 800cd3e:	429f      	cmp	r7, r3
 800cd40:	d1d5      	bne.n	800ccee <st_sssa8_ch_convolve_dw+0x3da>
 800cd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd44:	9e04      	ldr	r6, [sp, #16]
 800cd46:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800cd4a:	441e      	add	r6, r3
 800cd4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd4e:	eb0c 0203 	add.w	r2, ip, r3
 800cd52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f040 80bd 	bne.w	800ced4 <st_sssa8_ch_convolve_dw+0x5c0>
 800cd5a:	9604      	str	r6, [sp, #16]
 800cd5c:	9e02      	ldr	r6, [sp, #8]
 800cd5e:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cd62:	2f15      	cmp	r7, #21
 800cd64:	f340 80da 	ble.w	800cf1c <st_sssa8_ch_convolve_dw+0x608>
 800cd68:	1eba      	subs	r2, r7, #2
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	3f01      	subs	r7, #1
 800cd6e:	3602      	adds	r6, #2
 800cd70:	fa03 f202 	lsl.w	r2, r3, r2
 800cd74:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800cd76:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cd7a:	fb55 2203 	smmla	r2, r5, r3, r2
 800cd7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd80:	fa42 f707 	asr.w	r7, r2, r7
 800cd84:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800cd88:	443a      	add	r2, r7
 800cd8a:	f302 0207 	ssat	r2, #8, r2
 800cd8e:	9d03      	ldr	r5, [sp, #12]
 800cd90:	f805 2b01 	strb.w	r2, [r5], #1
 800cd94:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cd98:	2f15      	cmp	r7, #21
 800cd9a:	f340 80d8 	ble.w	800cf4e <st_sssa8_ch_convolve_dw+0x63a>
 800cd9e:	1eba      	subs	r2, r7, #2
 800cda0:	2301      	movs	r3, #1
 800cda2:	3f01      	subs	r7, #1
 800cda4:	fa03 f202 	lsl.w	r2, r3, r2
 800cda8:	9b07      	ldr	r3, [sp, #28]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	fb54 2203 	smmla	r2, r4, r3, r2
 800cdb0:	9b06      	ldr	r3, [sp, #24]
 800cdb2:	fa42 f707 	asr.w	r7, r2, r7
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	9b02      	ldr	r3, [sp, #8]
 800cdba:	443a      	add	r2, r7
 800cdbc:	1d1e      	adds	r6, r3, #4
 800cdbe:	f302 0207 	ssat	r2, #8, r2
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	702a      	strb	r2, [r5, #0]
 800cdc6:	1c9c      	adds	r4, r3, #2
 800cdc8:	f9b6 6000 	ldrsh.w	r6, [r6]
 800cdcc:	2e15      	cmp	r6, #21
 800cdce:	f340 80d7 	ble.w	800cf80 <st_sssa8_ch_convolve_dw+0x66c>
 800cdd2:	1eb2      	subs	r2, r6, #2
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	3e01      	subs	r6, #1
 800cdd8:	fa03 f202 	lsl.w	r2, r3, r2
 800cddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	fb50 2203 	smmla	r2, r0, r3, r2
 800cde4:	9b08      	ldr	r3, [sp, #32]
 800cde6:	fa42 f606 	asr.w	r6, r2, r6
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	9b02      	ldr	r3, [sp, #8]
 800cdee:	4432      	add	r2, r6
 800cdf0:	1d9d      	adds	r5, r3, #6
 800cdf2:	f302 0207 	ssat	r2, #8, r2
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	7022      	strb	r2, [r4, #0]
 800cdfa:	1cd8      	adds	r0, r3, #3
 800cdfc:	f9b5 4000 	ldrsh.w	r4, [r5]
 800ce00:	2c15      	cmp	r4, #21
 800ce02:	f340 80d6 	ble.w	800cfb2 <st_sssa8_ch_convolve_dw+0x69e>
 800ce06:	1ea2      	subs	r2, r4, #2
 800ce08:	2301      	movs	r3, #1
 800ce0a:	3c01      	subs	r4, #1
 800ce0c:	fa03 f202 	lsl.w	r2, r3, r2
 800ce10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	fb51 2303 	smmla	r3, r1, r3, r2
 800ce18:	fa43 f404 	asr.w	r4, r3, r4
 800ce1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	4414      	add	r4, r2
 800ce22:	f304 0407 	ssat	r4, #8, r4
 800ce26:	7004      	strb	r4, [r0, #0]
 800ce28:	9b05      	ldr	r3, [sp, #20]
 800ce2a:	f10c 0c04 	add.w	ip, ip, #4
 800ce2e:	3310      	adds	r3, #16
 800ce30:	9305      	str	r3, [sp, #20]
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	3308      	adds	r3, #8
 800ce36:	9302      	str	r3, [sp, #8]
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	9303      	str	r3, [sp, #12]
 800ce3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce40:	3310      	adds	r3, #16
 800ce42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce46:	3310      	adds	r3, #16
 800ce48:	930a      	str	r3, [sp, #40]	; 0x28
 800ce4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4c:	3310      	adds	r3, #16
 800ce4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce50:	9b08      	ldr	r3, [sp, #32]
 800ce52:	3310      	adds	r3, #16
 800ce54:	9308      	str	r3, [sp, #32]
 800ce56:	9b07      	ldr	r3, [sp, #28]
 800ce58:	3310      	adds	r3, #16
 800ce5a:	9307      	str	r3, [sp, #28]
 800ce5c:	9b06      	ldr	r3, [sp, #24]
 800ce5e:	3310      	adds	r3, #16
 800ce60:	9306      	str	r3, [sp, #24]
 800ce62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce64:	4563      	cmp	r3, ip
 800ce66:	f47f af2f 	bne.w	800ccc8 <st_sssa8_ch_convolve_dw+0x3b4>
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800ce6e:	4413      	add	r3, r2
 800ce70:	9383      	str	r3, [sp, #524]	; 0x20c
 800ce72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f040 83d3 	bne.w	800d620 <st_sssa8_ch_convolve_dw+0xd0c>
 800ce7a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ce7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ce7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ce80:	440a      	add	r2, r1
 800ce82:	3301      	adds	r3, #1
 800ce84:	b292      	uxth	r2, r2
 800ce86:	b21b      	sxth	r3, r3
 800ce88:	9225      	str	r2, [sp, #148]	; 0x94
 800ce8a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	f73f ae8b 	bgt.w	800cbaa <st_sssa8_ch_convolve_dw+0x296>
 800ce94:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800ce96:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800ce98:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3501      	adds	r5, #1
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	b22d      	sxth	r5, r5
 800cea2:	9340      	str	r3, [sp, #256]	; 0x100
 800cea4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800cea6:	462c      	mov	r4, r5
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	f73f ae61 	bgt.w	800cb70 <st_sssa8_ch_convolve_dw+0x25c>
 800ceae:	2000      	movs	r0, #0
 800ceb0:	b06b      	add	sp, #428	; 0x1ac
 800ceb2:	ecbd 8b02 	vpop	{d8}
 800ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	4563      	cmp	r3, ip
 800cebc:	f841 6c04 	str.w	r6, [r1, #-4]
 800cec0:	f101 0104 	add.w	r1, r1, #4
 800cec4:	f47f ad6e 	bne.w	800c9a4 <st_sssa8_ch_convolve_dw+0x90>
 800cec8:	e57f      	b.n	800c9ca <st_sssa8_ch_convolve_dw+0xb6>
 800ceca:	109b      	asrs	r3, r3, #2
 800cecc:	933e      	str	r3, [sp, #248]	; 0xf8
 800cece:	2304      	movs	r3, #4
 800ced0:	9327      	str	r3, [sp, #156]	; 0x9c
 800ced2:	e5b9      	b.n	800ca48 <st_sssa8_ch_convolve_dw+0x134>
 800ced4:	6813      	ldr	r3, [r2, #0]
 800ced6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ced8:	b25a      	sxtb	r2, r3
 800ceda:	f8b6 9000 	ldrh.w	r9, [r6]
 800cede:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800cee2:	1bd2      	subs	r2, r2, r7
 800cee4:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800cee8:	fb19 5502 	smlabb	r5, r9, r2, r5
 800ceec:	f343 2207 	sbfx	r2, r3, #8, #8
 800cef0:	1bd2      	subs	r2, r2, r7
 800cef2:	fb1e 4402 	smlabb	r4, lr, r2, r4
 800cef6:	f343 4207 	sbfx	r2, r3, #16, #8
 800cefa:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800cefe:	1bd2      	subs	r2, r2, r7
 800cf00:	fb18 0002 	smlabb	r0, r8, r2, r0
 800cf04:	88f2      	ldrh	r2, [r6, #6]
 800cf06:	fb12 1103 	smlabb	r1, r2, r3, r1
 800cf0a:	f106 0308 	add.w	r3, r6, #8
 800cf0e:	9e02      	ldr	r6, [sp, #8]
 800cf10:	9304      	str	r3, [sp, #16]
 800cf12:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cf16:	2f15      	cmp	r7, #21
 800cf18:	f73f af26 	bgt.w	800cd68 <st_sssa8_ch_convolve_dw+0x454>
 800cf1c:	2f00      	cmp	r7, #0
 800cf1e:	f340 80bf 	ble.w	800d0a0 <st_sssa8_ch_convolve_dw+0x78c>
 800cf22:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800cf24:	006d      	lsls	r5, r5, #1
 800cf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf28:	3602      	adds	r6, #2
 800cf2a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cf2e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cf32:	fb55 2503 	smmla	r5, r5, r3, r2
 800cf36:	fa45 f307 	asr.w	r3, r5, r7
 800cf3a:	f303 0307 	ssat	r3, #8, r3
 800cf3e:	9d03      	ldr	r5, [sp, #12]
 800cf40:	f805 3b01 	strb.w	r3, [r5], #1
 800cf44:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cf48:	2f15      	cmp	r7, #21
 800cf4a:	f73f af28 	bgt.w	800cd9e <st_sssa8_ch_convolve_dw+0x48a>
 800cf4e:	2f00      	cmp	r7, #0
 800cf50:	f340 80e2 	ble.w	800d118 <st_sssa8_ch_convolve_dw+0x804>
 800cf54:	9b07      	ldr	r3, [sp, #28]
 800cf56:	0064      	lsls	r4, r4, #1
 800cf58:	9a06      	ldr	r2, [sp, #24]
 800cf5a:	9e02      	ldr	r6, [sp, #8]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6812      	ldr	r2, [r2, #0]
 800cf60:	3604      	adds	r6, #4
 800cf62:	fb54 2403 	smmla	r4, r4, r3, r2
 800cf66:	fa44 f307 	asr.w	r3, r4, r7
 800cf6a:	f303 0307 	ssat	r3, #8, r3
 800cf6e:	702b      	strb	r3, [r5, #0]
 800cf70:	f9b6 6000 	ldrsh.w	r6, [r6]
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	2e15      	cmp	r6, #21
 800cf78:	f103 0402 	add.w	r4, r3, #2
 800cf7c:	f73f af29 	bgt.w	800cdd2 <st_sssa8_ch_convolve_dw+0x4be>
 800cf80:	2e00      	cmp	r6, #0
 800cf82:	f340 80a3 	ble.w	800d0cc <st_sssa8_ch_convolve_dw+0x7b8>
 800cf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf88:	0040      	lsls	r0, r0, #1
 800cf8a:	9a08      	ldr	r2, [sp, #32]
 800cf8c:	9d02      	ldr	r5, [sp, #8]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6812      	ldr	r2, [r2, #0]
 800cf92:	3506      	adds	r5, #6
 800cf94:	fb50 2003 	smmla	r0, r0, r3, r2
 800cf98:	fa40 f306 	asr.w	r3, r0, r6
 800cf9c:	f303 0307 	ssat	r3, #8, r3
 800cfa0:	7023      	strb	r3, [r4, #0]
 800cfa2:	f9b5 4000 	ldrsh.w	r4, [r5]
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	2c15      	cmp	r4, #21
 800cfaa:	f103 0003 	add.w	r0, r3, #3
 800cfae:	f73f af2a 	bgt.w	800ce06 <st_sssa8_ch_convolve_dw+0x4f2>
 800cfb2:	2c00      	cmp	r4, #0
 800cfb4:	f340 809f 	ble.w	800d0f6 <st_sssa8_ch_convolve_dw+0x7e2>
 800cfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfba:	0049      	lsls	r1, r1, #1
 800cfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6812      	ldr	r2, [r2, #0]
 800cfc2:	fb51 2103 	smmla	r1, r1, r3, r2
 800cfc6:	fa41 f304 	asr.w	r3, r1, r4
 800cfca:	f303 0307 	ssat	r3, #8, r3
 800cfce:	7003      	strb	r3, [r0, #0]
 800cfd0:	e72a      	b.n	800ce28 <st_sssa8_ch_convolve_dw+0x514>
 800cfd2:	9b06      	ldr	r3, [sp, #24]
 800cfd4:	4419      	add	r1, r3
 800cfd6:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800cfda:	fb03 2501 	mla	r5, r3, r1, r2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f43f ae35 	beq.w	800cc4e <st_sssa8_ch_convolve_dw+0x33a>
 800cfe4:	f1b9 0f00 	cmp.w	r9, #0
 800cfe8:	f43f ae31 	beq.w	800cc4e <st_sssa8_ch_convolve_dw+0x33a>
 800cfec:	46c4      	mov	ip, r8
 800cfee:	4642      	mov	r2, r8
 800cff0:	ee07 0a90 	vmov	s15, r0
 800cff4:	f8cd 8020 	str.w	r8, [sp, #32]
 800cff8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cffc:	eb05 0e03 	add.w	lr, r5, r3
 800d000:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 800d004:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800d006:	9402      	str	r4, [sp, #8]
 800d008:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 800d00c:	3501      	adds	r5, #1
 800d00e:	4614      	mov	r4, r2
 800d010:	42aa      	cmp	r2, r5
 800d012:	f105 31ff 	add.w	r1, r5, #4294967295
 800d016:	444a      	add	r2, r9
 800d018:	bf34      	ite	cc
 800d01a:	2300      	movcc	r3, #0
 800d01c:	2301      	movcs	r3, #1
 800d01e:	428a      	cmp	r2, r1
 800d020:	bf98      	it	ls
 800d022:	f043 0301 	orrls.w	r3, r3, #1
 800d026:	b373      	cbz	r3, 800d086 <st_sssa8_ch_convolve_dw+0x772>
 800d028:	f1ba 0f07 	cmp.w	sl, #7
 800d02c:	d92b      	bls.n	800d086 <st_sssa8_ch_convolve_dw+0x772>
 800d02e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d032:	2100      	movs	r1, #0
 800d034:	eb00 060c 	add.w	r6, r0, ip
 800d038:	f363 0107 	bfi	r1, r3, #0, #8
 800d03c:	f363 210f 	bfi	r1, r3, #8, #8
 800d040:	f363 4117 	bfi	r1, r3, #16, #8
 800d044:	f363 611f 	bfi	r1, r3, #24, #8
 800d048:	4663      	mov	r3, ip
 800d04a:	f843 1b04 	str.w	r1, [r3], #4
 800d04e:	42b3      	cmp	r3, r6
 800d050:	d1fb      	bne.n	800d04a <st_sssa8_ch_convolve_dw+0x736>
 800d052:	45b9      	cmp	r9, r7
 800d054:	eb04 0307 	add.w	r3, r4, r7
 800d058:	d00c      	beq.n	800d074 <st_sssa8_ch_convolve_dw+0x760>
 800d05a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d05e:	55e1      	strb	r1, [r4, r7]
 800d060:	f1b8 0f00 	cmp.w	r8, #0
 800d064:	d006      	beq.n	800d074 <st_sssa8_ch_convolve_dw+0x760>
 800d066:	f1b8 0f01 	cmp.w	r8, #1
 800d06a:	7059      	strb	r1, [r3, #1]
 800d06c:	d002      	beq.n	800d074 <st_sssa8_ch_convolve_dw+0x760>
 800d06e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d072:	7099      	strb	r1, [r3, #2]
 800d074:	45ae      	cmp	lr, r5
 800d076:	44cc      	add	ip, r9
 800d078:	d1c8      	bne.n	800d00c <st_sssa8_ch_convolve_dw+0x6f8>
 800d07a:	9c02      	ldr	r4, [sp, #8]
 800d07c:	ee17 0a90 	vmov	r0, s15
 800d080:	e9dd 8a08 	ldrd	r8, sl, [sp, #32]
 800d084:	e5e3      	b.n	800cc4e <st_sssa8_ch_convolve_dw+0x33a>
 800d086:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d08a:	f804 3b01 	strb.w	r3, [r4], #1
 800d08e:	4294      	cmp	r4, r2
 800d090:	d0f0      	beq.n	800d074 <st_sssa8_ch_convolve_dw+0x760>
 800d092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d096:	f804 3b01 	strb.w	r3, [r4], #1
 800d09a:	4294      	cmp	r4, r2
 800d09c:	d1f3      	bne.n	800d086 <st_sssa8_ch_convolve_dw+0x772>
 800d09e:	e7e9      	b.n	800d074 <st_sssa8_ch_convolve_dw+0x760>
 800d0a0:	f1c7 0201 	rsb	r2, r7, #1
 800d0a4:	3602      	adds	r6, #2
 800d0a6:	fa05 f202 	lsl.w	r2, r5, r2
 800d0aa:	f302 021f 	ssat	r2, #32, r2
 800d0ae:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d0b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d0b4:	fb52 f213 	smmulr	r2, r2, r3
 800d0b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ba:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d0be:	4413      	add	r3, r2
 800d0c0:	f303 0307 	ssat	r3, #8, r3
 800d0c4:	9d03      	ldr	r5, [sp, #12]
 800d0c6:	f805 3b01 	strb.w	r3, [r5], #1
 800d0ca:	e663      	b.n	800cd94 <st_sssa8_ch_convolve_dw+0x480>
 800d0cc:	f1c6 0201 	rsb	r2, r6, #1
 800d0d0:	9b02      	ldr	r3, [sp, #8]
 800d0d2:	fa00 f202 	lsl.w	r2, r0, r2
 800d0d6:	1d9d      	adds	r5, r3, #6
 800d0d8:	f302 021f 	ssat	r2, #32, r2
 800d0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	fb52 f213 	smmulr	r2, r2, r3
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f303 0307 	ssat	r3, #8, r3
 800d0ee:	7023      	strb	r3, [r4, #0]
 800d0f0:	9b03      	ldr	r3, [sp, #12]
 800d0f2:	1cd8      	adds	r0, r3, #3
 800d0f4:	e682      	b.n	800cdfc <st_sssa8_ch_convolve_dw+0x4e8>
 800d0f6:	f1c4 0401 	rsb	r4, r4, #1
 800d0fa:	fa01 f204 	lsl.w	r2, r1, r4
 800d0fe:	f302 021f 	ssat	r2, #32, r2
 800d102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	fb52 f213 	smmulr	r2, r2, r3
 800d10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4413      	add	r3, r2
 800d110:	f303 0307 	ssat	r3, #8, r3
 800d114:	7003      	strb	r3, [r0, #0]
 800d116:	e687      	b.n	800ce28 <st_sssa8_ch_convolve_dw+0x514>
 800d118:	f1c7 0201 	rsb	r2, r7, #1
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	fa04 f202 	lsl.w	r2, r4, r2
 800d122:	1d1e      	adds	r6, r3, #4
 800d124:	f302 021f 	ssat	r2, #32, r2
 800d128:	9b07      	ldr	r3, [sp, #28]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	fb52 f213 	smmulr	r2, r2, r3
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4413      	add	r3, r2
 800d136:	f303 0307 	ssat	r3, #8, r3
 800d13a:	702b      	strb	r3, [r5, #0]
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	1c9c      	adds	r4, r3, #2
 800d140:	e642      	b.n	800cdc8 <st_sssa8_ch_convolve_dw+0x4b4>
 800d142:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800d144:	2a00      	cmp	r2, #0
 800d146:	f000 82b6 	beq.w	800d6b6 <st_sssa8_ch_convolve_dw+0xda2>
 800d14a:	3a01      	subs	r2, #1
 800d14c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800d14e:	9257      	str	r2, [sp, #348]	; 0x15c
 800d150:	2801      	cmp	r0, #1
 800d152:	f8bd 217c 	ldrh.w	r2, [sp, #380]	; 0x17c
 800d156:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800d15a:	f47f ad33 	bne.w	800cbc4 <st_sssa8_ch_convolve_dw+0x2b0>
 800d15e:	2a01      	cmp	r2, #1
 800d160:	f000 82b3 	beq.w	800d6ca <st_sssa8_ch_convolve_dw+0xdb6>
 800d164:	b29b      	uxth	r3, r3
 800d166:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d168:	f9bd 5094 	ldrsh.w	r5, [sp, #148]	; 0x94
 800d16c:	9328      	str	r3, [sp, #160]	; 0xa0
 800d16e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d170:	429f      	cmp	r7, r3
 800d172:	f77f ad7d 	ble.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d176:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d178:	461c      	mov	r4, r3
 800d17a:	f8cd b008 	str.w	fp, [sp, #8]
 800d17e:	4618      	mov	r0, r3
 800d180:	46b3      	mov	fp, r6
 800d182:	f8cd a00c 	str.w	sl, [sp, #12]
 800d186:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800d18a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800d18e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800d190:	f8dd a10c 	ldr.w	sl, [sp, #268]	; 0x10c
 800d194:	3401      	adds	r4, #1
 800d196:	fb00 5009 	mla	r0, r0, r9, r5
 800d19a:	4659      	mov	r1, fp
 800d19c:	4652      	mov	r2, sl
 800d19e:	b224      	sxth	r4, r4
 800d1a0:	fb06 8000 	mla	r0, r6, r0, r8
 800d1a4:	f005 ffc0 	bl	8013128 <st_int8_copy>
 800d1a8:	44d3      	add	fp, sl
 800d1aa:	42a7      	cmp	r7, r4
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	dcf1      	bgt.n	800d194 <st_sssa8_ch_convolve_dw+0x880>
 800d1b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d1b2:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f43f ad5e 	beq.w	800cc78 <st_sssa8_ch_convolve_dw+0x364>
 800d1bc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 8356 	beq.w	800d870 <st_sssa8_ch_convolve_dw+0xf5c>
 800d1c4:	ee18 3a10 	vmov	r3, s16
 800d1c8:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800d1ca:	9d86      	ldr	r5, [sp, #536]	; 0x218
 800d1cc:	f04f 0900 	mov.w	r9, #0
 800d1d0:	b21b      	sxth	r3, r3
 800d1d2:	9203      	str	r2, [sp, #12]
 800d1d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1d6:	9308      	str	r3, [sp, #32]
 800d1d8:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d1da:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d1dc:	f103 0610 	add.w	r6, r3, #16
 800d1e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d1e2:	9202      	str	r2, [sp, #8]
 800d1e4:	3348      	adds	r3, #72	; 0x48
 800d1e6:	9504      	str	r5, [sp, #16]
 800d1e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800d1ec:	e081      	b.n	800d2f2 <st_sssa8_ch_convolve_dw+0x9de>
 800d1ee:	f1a2 0a02 	sub.w	sl, r2, #2
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	9f04      	ldr	r7, [sp, #16]
 800d1f6:	3a01      	subs	r2, #1
 800d1f8:	fa00 fa0a 	lsl.w	sl, r0, sl
 800d1fc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d200:	f857 0b04 	ldr.w	r0, [r7], #4
 800d204:	f101 0802 	add.w	r8, r1, #2
 800d208:	fb5c ac00 	smmla	ip, ip, r0, sl
 800d20c:	fa4c f202 	asr.w	r2, ip, r2
 800d210:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d214:	4402      	add	r2, r0
 800d216:	f302 0207 	ssat	r2, #8, r2
 800d21a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d21e:	f80c 2b01 	strb.w	r2, [ip], #1
 800d222:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d226:	2a15      	cmp	r2, #21
 800d228:	f340 814d 	ble.w	800d4c6 <st_sssa8_ch_convolve_dw+0xbb2>
 800d22c:	6838      	ldr	r0, [r7, #0]
 800d22e:	2501      	movs	r5, #1
 800d230:	1e97      	subs	r7, r2, #2
 800d232:	3a01      	subs	r2, #1
 800d234:	f8de e000 	ldr.w	lr, [lr]
 800d238:	fa05 f707 	lsl.w	r7, r5, r7
 800d23c:	9d04      	ldr	r5, [sp, #16]
 800d23e:	fb54 7400 	smmla	r4, r4, r0, r7
 800d242:	4114      	asrs	r4, r2
 800d244:	9a02      	ldr	r2, [sp, #8]
 800d246:	f105 0808 	add.w	r8, r5, #8
 800d24a:	1d08      	adds	r0, r1, #4
 800d24c:	44a6      	add	lr, r4
 800d24e:	f102 0408 	add.w	r4, r2, #8
 800d252:	f30e 0e07 	ssat	lr, #8, lr
 800d256:	9a03      	ldr	r2, [sp, #12]
 800d258:	f88c e000 	strb.w	lr, [ip]
 800d25c:	f102 0c02 	add.w	ip, r2, #2
 800d260:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d264:	2a15      	cmp	r2, #21
 800d266:	f340 814c 	ble.w	800d502 <st_sssa8_ch_convolve_dw+0xbee>
 800d26a:	f8d4 e000 	ldr.w	lr, [r4]
 800d26e:	2501      	movs	r5, #1
 800d270:	1e94      	subs	r4, r2, #2
 800d272:	3a01      	subs	r2, #1
 800d274:	f8d8 0000 	ldr.w	r0, [r8]
 800d278:	fa05 f404 	lsl.w	r4, r5, r4
 800d27c:	9d04      	ldr	r5, [sp, #16]
 800d27e:	f105 070c 	add.w	r7, r5, #12
 800d282:	9d05      	ldr	r5, [sp, #20]
 800d284:	fb55 4000 	smmla	r0, r5, r0, r4
 800d288:	fa40 f202 	asr.w	r2, r0, r2
 800d28c:	1d88      	adds	r0, r1, #6
 800d28e:	4496      	add	lr, r2
 800d290:	9a02      	ldr	r2, [sp, #8]
 800d292:	f102 040c 	add.w	r4, r2, #12
 800d296:	f30e 0e07 	ssat	lr, #8, lr
 800d29a:	9a03      	ldr	r2, [sp, #12]
 800d29c:	f88c e000 	strb.w	lr, [ip]
 800d2a0:	f102 0c03 	add.w	ip, r2, #3
 800d2a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d2a8:	2a15      	cmp	r2, #21
 800d2aa:	f340 8148 	ble.w	800d53e <st_sssa8_ch_convolve_dw+0xc2a>
 800d2ae:	6838      	ldr	r0, [r7, #0]
 800d2b0:	2501      	movs	r5, #1
 800d2b2:	6827      	ldr	r7, [r4, #0]
 800d2b4:	1e94      	subs	r4, r2, #2
 800d2b6:	3a01      	subs	r2, #1
 800d2b8:	fa05 f404 	lsl.w	r4, r5, r4
 800d2bc:	9d06      	ldr	r5, [sp, #24]
 800d2be:	fb55 4000 	smmla	r0, r5, r0, r4
 800d2c2:	4110      	asrs	r0, r2
 800d2c4:	4438      	add	r0, r7
 800d2c6:	f300 0007 	ssat	r0, #8, r0
 800d2ca:	f88c 0000 	strb.w	r0, [ip]
 800d2ce:	9a04      	ldr	r2, [sp, #16]
 800d2d0:	3610      	adds	r6, #16
 800d2d2:	3348      	adds	r3, #72	; 0x48
 800d2d4:	f109 0904 	add.w	r9, r9, #4
 800d2d8:	3210      	adds	r2, #16
 800d2da:	3108      	adds	r1, #8
 800d2dc:	9204      	str	r2, [sp, #16]
 800d2de:	9a03      	ldr	r2, [sp, #12]
 800d2e0:	3204      	adds	r2, #4
 800d2e2:	9203      	str	r2, [sp, #12]
 800d2e4:	9a02      	ldr	r2, [sp, #8]
 800d2e6:	3210      	adds	r2, #16
 800d2e8:	9202      	str	r2, [sp, #8]
 800d2ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2ec:	42b2      	cmp	r2, r6
 800d2ee:	f000 818b 	beq.w	800d608 <st_sssa8_ch_convolve_dw+0xcf4>
 800d2f2:	9a07      	ldr	r2, [sp, #28]
 800d2f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d2f6:	444a      	add	r2, r9
 800d2f8:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800d2fc:	f850 7009 	ldr.w	r7, [r0, r9]
 800d300:	f850 c002 	ldr.w	ip, [r0, r2]
 800d304:	4abf      	ldr	r2, [pc, #764]	; (800d604 <st_sssa8_ch_convolve_dw+0xcf0>)
 800d306:	fa1f fe87 	uxth.w	lr, r7
 800d30a:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800d30e:	ea0c 0202 	and.w	r2, ip, r2
 800d312:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800d316:	fa2b fc8e 	sxtab16	ip, fp, lr
 800d31a:	ea42 4217 	orr.w	r2, r2, r7, lsr #16
 800d31e:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800d322:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800d326:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800d32a:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 800d32e:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800d332:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800d336:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800d33a:	fa2b f782 	sxtab16	r7, fp, r2
 800d33e:	fb20 4007 	smlad	r0, r0, r7, r4
 800d342:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d346:	f853 7c3c 	ldr.w	r7, [r3, #-60]
 800d34a:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800d34e:	fb27 4702 	smlad	r7, r7, r2, r4
 800d352:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d354:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d356:	f854 4009 	ldr.w	r4, [r4, r9]
 800d35a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800d604 <st_sssa8_ch_convolve_dw+0xcf0>
 800d35e:	f852 2009 	ldr.w	r2, [r2, r9]
 800d362:	ea04 0808 	and.w	r8, r4, r8
 800d366:	f853 5c38 	ldr.w	r5, [r3, #-56]
 800d36a:	ea48 4812 	orr.w	r8, r8, r2, lsr #16
 800d36e:	b292      	uxth	r2, r2
 800d370:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d374:	fa2b f482 	sxtab16	r4, fp, r2
 800d378:	fb25 cc04 	smlad	ip, r5, r4, ip
 800d37c:	fa2b f492 	sxtab16	r4, fp, r2, ror #8
 800d380:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800d384:	fb22 e404 	smlad	r4, r2, r4, lr
 800d388:	f853 5c30 	ldr.w	r5, [r3, #-48]
 800d38c:	fa2b f288 	sxtab16	r2, fp, r8
 800d390:	fb25 0002 	smlad	r0, r5, r2, r0
 800d394:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800d398:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800d39c:	fb22 7708 	smlad	r7, r2, r8, r7
 800d3a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d3a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3a4:	f855 e009 	ldr.w	lr, [r5, r9]
 800d3a8:	f8df a258 	ldr.w	sl, [pc, #600]	; 800d604 <st_sssa8_ch_convolve_dw+0xcf0>
 800d3ac:	f852 2009 	ldr.w	r2, [r2, r9]
 800d3b0:	ea0e 0a0a 	and.w	sl, lr, sl
 800d3b4:	f853 5c28 	ldr.w	r5, [r3, #-40]
 800d3b8:	ea4a 4a12 	orr.w	sl, sl, r2, lsr #16
 800d3bc:	b292      	uxth	r2, r2
 800d3be:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800d3c2:	fa2b fe82 	sxtab16	lr, fp, r2
 800d3c6:	fb25 cc0e 	smlad	ip, r5, lr, ip
 800d3ca:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d3ce:	f853 5c24 	ldr.w	r5, [r3, #-36]
 800d3d2:	fb25 4402 	smlad	r4, r5, r2, r4
 800d3d6:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800d3da:	fa2b f28a 	sxtab16	r2, fp, sl
 800d3de:	fb25 0002 	smlad	r0, r5, r2, r0
 800d3e2:	fa2b fa9a 	sxtab16	sl, fp, sl, ror #8
 800d3e6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800d3ea:	fb22 770a 	smlad	r7, r2, sl, r7
 800d3ee:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d3f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3f2:	f855 8009 	ldr.w	r8, [r5, r9]
 800d3f6:	f8df e20c 	ldr.w	lr, [pc, #524]	; 800d604 <st_sssa8_ch_convolve_dw+0xcf0>
 800d3fa:	f852 2009 	ldr.w	r2, [r2, r9]
 800d3fe:	ea08 0e0e 	and.w	lr, r8, lr
 800d402:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800d406:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800d40a:	b292      	uxth	r2, r2
 800d40c:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800d410:	fa2b f882 	sxtab16	r8, fp, r2
 800d414:	fb25 cc08 	smlad	ip, r5, r8, ip
 800d418:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d41c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800d420:	fb25 4402 	smlad	r4, r5, r2, r4
 800d424:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800d428:	fa2b f28e 	sxtab16	r2, fp, lr
 800d42c:	fb25 0002 	smlad	r0, r5, r2, r0
 800d430:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800d434:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800d438:	fb22 720e 	smlad	r2, r2, lr, r7
 800d43c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d43e:	f833 8c08 	ldrh.w	r8, [r3, #-8]
 800d442:	f855 7009 	ldr.w	r7, [r5, r9]
 800d446:	9d08      	ldr	r5, [sp, #32]
 800d448:	fa4f fe87 	sxtb.w	lr, r7
 800d44c:	f833 ac06 	ldrh.w	sl, [r3, #-6]
 800d450:	ebae 0e05 	sub.w	lr, lr, r5
 800d454:	fb18 cc0e 	smlabb	ip, r8, lr, ip
 800d458:	f347 2e07 	sbfx	lr, r7, #8, #8
 800d45c:	ebae 0e05 	sub.w	lr, lr, r5
 800d460:	fb1a 440e 	smlabb	r4, sl, lr, r4
 800d464:	f347 4e07 	sbfx	lr, r7, #16, #8
 800d468:	ebc5 6727 	rsb	r7, r5, r7, asr #24
 800d46c:	ebae 0e05 	sub.w	lr, lr, r5
 800d470:	f833 5c04 	ldrh.w	r5, [r3, #-4]
 800d474:	fb15 000e 	smlabb	r0, r5, lr, r0
 800d478:	9005      	str	r0, [sp, #20]
 800d47a:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800d47e:	fb10 2207 	smlabb	r2, r0, r7, r2
 800d482:	9206      	str	r2, [sp, #24]
 800d484:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d488:	2a15      	cmp	r2, #21
 800d48a:	f73f aeb0 	bgt.w	800d1ee <st_sssa8_ch_convolve_dw+0x8da>
 800d48e:	2a00      	cmp	r2, #0
 800d490:	dd64      	ble.n	800d55c <st_sssa8_ch_convolve_dw+0xc48>
 800d492:	9f04      	ldr	r7, [sp, #16]
 800d494:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d498:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d49c:	f101 0802 	add.w	r8, r1, #2
 800d4a0:	f857 0b04 	ldr.w	r0, [r7], #4
 800d4a4:	f85e ab04 	ldr.w	sl, [lr], #4
 800d4a8:	fb5c ac00 	smmla	ip, ip, r0, sl
 800d4ac:	fa4c f202 	asr.w	r2, ip, r2
 800d4b0:	f302 0207 	ssat	r2, #8, r2
 800d4b4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d4b8:	f80c 2b01 	strb.w	r2, [ip], #1
 800d4bc:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d4c0:	2a15      	cmp	r2, #21
 800d4c2:	f73f aeb3 	bgt.w	800d22c <st_sssa8_ch_convolve_dw+0x918>
 800d4c6:	2a00      	cmp	r2, #0
 800d4c8:	f340 8083 	ble.w	800d5d2 <st_sssa8_ch_convolve_dw+0xcbe>
 800d4cc:	6838      	ldr	r0, [r7, #0]
 800d4ce:	0064      	lsls	r4, r4, #1
 800d4d0:	f8de 7000 	ldr.w	r7, [lr]
 800d4d4:	9d04      	ldr	r5, [sp, #16]
 800d4d6:	fb54 7400 	smmla	r4, r4, r0, r7
 800d4da:	9802      	ldr	r0, [sp, #8]
 800d4dc:	fa44 f202 	asr.w	r2, r4, r2
 800d4e0:	f105 0808 	add.w	r8, r5, #8
 800d4e4:	f100 0408 	add.w	r4, r0, #8
 800d4e8:	1d08      	adds	r0, r1, #4
 800d4ea:	f302 0207 	ssat	r2, #8, r2
 800d4ee:	f88c 2000 	strb.w	r2, [ip]
 800d4f2:	9a03      	ldr	r2, [sp, #12]
 800d4f4:	f102 0c02 	add.w	ip, r2, #2
 800d4f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d4fc:	2a15      	cmp	r2, #21
 800d4fe:	f73f aeb4 	bgt.w	800d26a <st_sssa8_ch_convolve_dw+0x956>
 800d502:	2a00      	cmp	r2, #0
 800d504:	dd4a      	ble.n	800d59c <st_sssa8_ch_convolve_dw+0xc88>
 800d506:	9805      	ldr	r0, [sp, #20]
 800d508:	6824      	ldr	r4, [r4, #0]
 800d50a:	f8d8 e000 	ldr.w	lr, [r8]
 800d50e:	0040      	lsls	r0, r0, #1
 800d510:	9d04      	ldr	r5, [sp, #16]
 800d512:	fb50 400e 	smmla	r0, r0, lr, r4
 800d516:	fa40 f202 	asr.w	r2, r0, r2
 800d51a:	9802      	ldr	r0, [sp, #8]
 800d51c:	f105 070c 	add.w	r7, r5, #12
 800d520:	f100 040c 	add.w	r4, r0, #12
 800d524:	1d88      	adds	r0, r1, #6
 800d526:	f302 0207 	ssat	r2, #8, r2
 800d52a:	f88c 2000 	strb.w	r2, [ip]
 800d52e:	9a03      	ldr	r2, [sp, #12]
 800d530:	f102 0c03 	add.w	ip, r2, #3
 800d534:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d538:	2a15      	cmp	r2, #21
 800d53a:	f73f aeb8 	bgt.w	800d2ae <st_sssa8_ch_convolve_dw+0x99a>
 800d53e:	2a00      	cmp	r2, #0
 800d540:	dd1c      	ble.n	800d57c <st_sssa8_ch_convolve_dw+0xc68>
 800d542:	9806      	ldr	r0, [sp, #24]
 800d544:	683f      	ldr	r7, [r7, #0]
 800d546:	6824      	ldr	r4, [r4, #0]
 800d548:	0040      	lsls	r0, r0, #1
 800d54a:	fb50 4007 	smmla	r0, r0, r7, r4
 800d54e:	fa40 f202 	asr.w	r2, r0, r2
 800d552:	f302 0207 	ssat	r2, #8, r2
 800d556:	f88c 2000 	strb.w	r2, [ip]
 800d55a:	e6b8      	b.n	800d2ce <st_sssa8_ch_convolve_dw+0x9ba>
 800d55c:	f1c2 0201 	rsb	r2, r2, #1
 800d560:	f101 0802 	add.w	r8, r1, #2
 800d564:	fa0c f202 	lsl.w	r2, ip, r2
 800d568:	f302 021f 	ssat	r2, #32, r2
 800d56c:	9f04      	ldr	r7, [sp, #16]
 800d56e:	f857 0b04 	ldr.w	r0, [r7], #4
 800d572:	fb52 f210 	smmulr	r2, r2, r0
 800d576:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d57a:	e649      	b.n	800d210 <st_sssa8_ch_convolve_dw+0x8fc>
 800d57c:	f1c2 0201 	rsb	r2, r2, #1
 800d580:	9806      	ldr	r0, [sp, #24]
 800d582:	4090      	lsls	r0, r2
 800d584:	f300 021f 	ssat	r2, #32, r0
 800d588:	6838      	ldr	r0, [r7, #0]
 800d58a:	fb52 f210 	smmulr	r2, r2, r0
 800d58e:	6820      	ldr	r0, [r4, #0]
 800d590:	4402      	add	r2, r0
 800d592:	f302 0207 	ssat	r2, #8, r2
 800d596:	f88c 2000 	strb.w	r2, [ip]
 800d59a:	e698      	b.n	800d2ce <st_sssa8_ch_convolve_dw+0x9ba>
 800d59c:	f1c2 0201 	rsb	r2, r2, #1
 800d5a0:	9805      	ldr	r0, [sp, #20]
 800d5a2:	4090      	lsls	r0, r2
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	1d88      	adds	r0, r1, #6
 800d5a8:	f302 021f 	ssat	r2, #32, r2
 800d5ac:	9d04      	ldr	r5, [sp, #16]
 800d5ae:	f8d8 e000 	ldr.w	lr, [r8]
 800d5b2:	f105 070c 	add.w	r7, r5, #12
 800d5b6:	fb52 f21e 	smmulr	r2, r2, lr
 800d5ba:	6824      	ldr	r4, [r4, #0]
 800d5bc:	4422      	add	r2, r4
 800d5be:	9c02      	ldr	r4, [sp, #8]
 800d5c0:	340c      	adds	r4, #12
 800d5c2:	f302 0207 	ssat	r2, #8, r2
 800d5c6:	f88c 2000 	strb.w	r2, [ip]
 800d5ca:	9a03      	ldr	r2, [sp, #12]
 800d5cc:	f102 0c03 	add.w	ip, r2, #3
 800d5d0:	e668      	b.n	800d2a4 <st_sssa8_ch_convolve_dw+0x990>
 800d5d2:	f1c2 0201 	rsb	r2, r2, #1
 800d5d6:	1d08      	adds	r0, r1, #4
 800d5d8:	4094      	lsls	r4, r2
 800d5da:	f304 021f 	ssat	r2, #32, r4
 800d5de:	9d04      	ldr	r5, [sp, #16]
 800d5e0:	683c      	ldr	r4, [r7, #0]
 800d5e2:	f105 0808 	add.w	r8, r5, #8
 800d5e6:	fb52 f214 	smmulr	r2, r2, r4
 800d5ea:	f8de 4000 	ldr.w	r4, [lr]
 800d5ee:	4422      	add	r2, r4
 800d5f0:	9c02      	ldr	r4, [sp, #8]
 800d5f2:	3408      	adds	r4, #8
 800d5f4:	f302 0207 	ssat	r2, #8, r2
 800d5f8:	f88c 2000 	strb.w	r2, [ip]
 800d5fc:	9a03      	ldr	r2, [sp, #12]
 800d5fe:	f102 0c02 	add.w	ip, r2, #2
 800d602:	e62d      	b.n	800d260 <st_sssa8_ch_convolve_dw+0x94c>
 800d604:	ffff0000 	.word	0xffff0000
 800d608:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d60a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d60c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d610:	4413      	add	r3, r2
 800d612:	9383      	str	r3, [sp, #524]	; 0x20c
 800d614:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800d616:	9304      	str	r3, [sp, #16]
 800d618:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f43f ac2d 	beq.w	800ce7a <st_sssa8_ch_convolve_dw+0x566>
 800d620:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800d622:	e9dd 8c47 	ldrd	r8, ip, [sp, #284]	; 0x11c
 800d626:	e9dd 3445 	ldrd	r3, r4, [sp, #276]	; 0x114
 800d62a:	f1a3 0902 	sub.w	r9, r3, #2
 800d62e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d630:	9904      	ldr	r1, [sp, #16]
 800d632:	4423      	add	r3, r4
 800d634:	f8cd b00c 	str.w	fp, [sp, #12]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	9302      	str	r3, [sp, #8]
 800d63c:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d63e:	f103 0e01 	add.w	lr, r3, #1
 800d642:	ee18 3a10 	vmov	r3, s16
 800d646:	b218      	sxth	r0, r3
 800d648:	1c63      	adds	r3, r4, #1
 800d64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d64c:	f858 6b04 	ldr.w	r6, [r8], #4
 800d650:	1915      	adds	r5, r2, r4
 800d652:	b29c      	uxth	r4, r3
 800d654:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 8219 	beq.w	800da8e <st_sssa8_ch_convolve_dw+0x117a>
 800d65c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d65e:	18cb      	adds	r3, r1, r3
 800d660:	f995 2000 	ldrsb.w	r2, [r5]
 800d664:	4455      	add	r5, sl
 800d666:	f831 bb02 	ldrh.w	fp, [r1], #2
 800d66a:	1a12      	subs	r2, r2, r0
 800d66c:	4299      	cmp	r1, r3
 800d66e:	fb1b 6602 	smlabb	r6, fp, r2, r6
 800d672:	d1f5      	bne.n	800d660 <st_sssa8_ch_convolve_dw+0xd4c>
 800d674:	f939 5f02 	ldrsh.w	r5, [r9, #2]!
 800d678:	2d15      	cmp	r5, #21
 800d67a:	f340 80d1 	ble.w	800d820 <st_sssa8_ch_convolve_dw+0xf0c>
 800d67e:	1ea9      	subs	r1, r5, #2
 800d680:	2201      	movs	r2, #1
 800d682:	3d01      	subs	r5, #1
 800d684:	fa02 f101 	lsl.w	r1, r2, r1
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	fb56 1202 	smmla	r2, r6, r2, r1
 800d68e:	fa42 f505 	asr.w	r5, r2, r5
 800d692:	f8dc 2000 	ldr.w	r2, [ip]
 800d696:	442a      	add	r2, r5
 800d698:	f302 0207 	ssat	r2, #8, r2
 800d69c:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d6a0:	9a02      	ldr	r2, [sp, #8]
 800d6a2:	3704      	adds	r7, #4
 800d6a4:	f10c 0c04 	add.w	ip, ip, #4
 800d6a8:	f10e 0e01 	add.w	lr, lr, #1
 800d6ac:	4294      	cmp	r4, r2
 800d6ae:	f000 80c6 	beq.w	800d83e <st_sssa8_ch_convolve_dw+0xf2a>
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	e7c8      	b.n	800d648 <st_sssa8_ch_convolve_dw+0xd34>
 800d6b6:	9a58      	ldr	r2, [sp, #352]	; 0x160
 800d6b8:	3a01      	subs	r2, #1
 800d6ba:	9258      	str	r2, [sp, #352]	; 0x160
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800d6c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d6c4:	2a01      	cmp	r2, #1
 800d6c6:	f47f aa7d 	bne.w	800cbc4 <st_sssa8_ch_convolve_dw+0x2b0>
 800d6ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d6cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d6ce:	4290      	cmp	r0, r2
 800d6d0:	f340 81d9 	ble.w	800da86 <st_sssa8_ch_convolve_dw+0x1172>
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800d6d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800d6da:	9328      	str	r3, [sp, #160]	; 0xa0
 800d6dc:	fb01 0104 	mla	r1, r1, r4, r0
 800d6e0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d6e2:	1acd      	subs	r5, r1, r3
 800d6e4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	9304      	str	r3, [sp, #16]
 800d6ec:	f6bf aac0 	bge.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d6f0:	f8cd b014 	str.w	fp, [sp, #20]
 800d6f4:	4617      	mov	r7, r2
 800d6f6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d6fa:	4690      	mov	r8, r2
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d700:	ee18 ba10 	vmov	fp, s16
 800d704:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d706:	f8dd e010 	ldr.w	lr, [sp, #16]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	fb03 f306 	mul.w	r3, r3, r6
 800d710:	4674      	mov	r4, lr
 800d712:	bfcc      	ite	gt
 800d714:	2700      	movgt	r7, #0
 800d716:	2701      	movle	r7, #1
 800d718:	9303      	str	r3, [sp, #12]
 800d71a:	ea47 77d8 	orr.w	r7, r7, r8, lsr #31
 800d71e:	9702      	str	r7, [sp, #8]
 800d720:	0fe3      	lsrs	r3, r4, #31
 800d722:	4652      	mov	r2, sl
 800d724:	4649      	mov	r1, r9
 800d726:	4658      	mov	r0, fp
 800d728:	4576      	cmp	r6, lr
 800d72a:	bfd8      	it	le
 800d72c:	f043 0301 	orrle.w	r3, r3, #1
 800d730:	b91b      	cbnz	r3, 800d73a <st_sssa8_ch_convolve_dw+0xe26>
 800d732:	9b02      	ldr	r3, [sp, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 80ec 	beq.w	800d912 <st_sssa8_ch_convolve_dw+0xffe>
 800d73a:	f005 fc8d 	bl	8013058 <st_int8_fill>
 800d73e:	3401      	adds	r4, #1
 800d740:	44d1      	add	r9, sl
 800d742:	b224      	sxth	r4, r4
 800d744:	42ac      	cmp	r4, r5
 800d746:	46a6      	mov	lr, r4
 800d748:	dbea      	blt.n	800d720 <st_sssa8_ch_convolve_dw+0xe0c>
 800d74a:	f108 0801 	add.w	r8, r8, #1
 800d74e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d750:	fa0f f888 	sxth.w	r8, r8
 800d754:	4542      	cmp	r2, r8
 800d756:	4643      	mov	r3, r8
 800d758:	dcd4      	bgt.n	800d704 <st_sssa8_ch_convolve_dw+0xdf0>
 800d75a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800d75e:	f7ff ba87 	b.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d762:	4282      	cmp	r2, r0
 800d764:	f340 818f 	ble.w	800da86 <st_sssa8_ch_convolve_dw+0x1172>
 800d768:	b29b      	uxth	r3, r3
 800d76a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800d76c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d76e:	9328      	str	r3, [sp, #160]	; 0xa0
 800d770:	fb01 2100 	mla	r1, r1, r0, r2
 800d774:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d776:	1acd      	subs	r5, r1, r3
 800d778:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d77c:	429d      	cmp	r5, r3
 800d77e:	9303      	str	r3, [sp, #12]
 800d780:	f77f aa76 	ble.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d784:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 800d788:	f8cd b010 	str.w	fp, [sp, #16]
 800d78c:	4647      	mov	r7, r8
 800d78e:	4643      	mov	r3, r8
 800d790:	46c3      	mov	fp, r8
 800d792:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d796:	46d0      	mov	r8, sl
 800d798:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d79a:	ee18 aa10 	vmov	sl, s16
 800d79e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7a0:	9903      	ldr	r1, [sp, #12]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	fb03 f306 	mul.w	r3, r3, r6
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	bfcc      	ite	gt
 800d7ac:	2700      	movgt	r7, #0
 800d7ae:	2701      	movle	r7, #1
 800d7b0:	9302      	str	r3, [sp, #8]
 800d7b2:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 800d7b6:	0fe3      	lsrs	r3, r4, #31
 800d7b8:	428e      	cmp	r6, r1
 800d7ba:	bfd8      	it	le
 800d7bc:	f043 0301 	orrle.w	r3, r3, #1
 800d7c0:	b903      	cbnz	r3, 800d7c4 <st_sssa8_ch_convolve_dw+0xeb0>
 800d7c2:	b1bf      	cbz	r7, 800d7f4 <st_sssa8_ch_convolve_dw+0xee0>
 800d7c4:	4642      	mov	r2, r8
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	f005 fc45 	bl	8013058 <st_int8_fill>
 800d7ce:	3401      	adds	r4, #1
 800d7d0:	44c1      	add	r9, r8
 800d7d2:	b224      	sxth	r4, r4
 800d7d4:	42ac      	cmp	r4, r5
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	dbed      	blt.n	800d7b6 <st_sssa8_ch_convolve_dw+0xea2>
 800d7da:	f10b 0b01 	add.w	fp, fp, #1
 800d7de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d7e0:	fa0f fb8b 	sxth.w	fp, fp
 800d7e4:	455a      	cmp	r2, fp
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	dcd9      	bgt.n	800d79e <st_sssa8_ch_convolve_dw+0xe8a>
 800d7ea:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d7ee:	46c2      	mov	sl, r8
 800d7f0:	f7ff ba3e 	b.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d7f4:	9b02      	ldr	r3, [sp, #8]
 800d7f6:	440b      	add	r3, r1
 800d7f8:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 800d7fc:	fb02 1303 	mla	r3, r2, r3, r1
 800d800:	2a00      	cmp	r2, #0
 800d802:	d0e4      	beq.n	800d7ce <st_sssa8_ch_convolve_dw+0xeba>
 800d804:	eb03 0c02 	add.w	ip, r3, r2
 800d808:	4648      	mov	r0, r9
 800d80a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d80e:	459c      	cmp	ip, r3
 800d810:	ea4f 2201 	mov.w	r2, r1, lsl #8
 800d814:	fa32 f281 	uxtab16	r2, r2, r1
 800d818:	f820 2b02 	strh.w	r2, [r0], #2
 800d81c:	d1f5      	bne.n	800d80a <st_sssa8_ch_convolve_dw+0xef6>
 800d81e:	e7d6      	b.n	800d7ce <st_sssa8_ch_convolve_dw+0xeba>
 800d820:	2d00      	cmp	r5, #0
 800d822:	dd14      	ble.n	800d84e <st_sssa8_ch_convolve_dw+0xf3a>
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	0076      	lsls	r6, r6, #1
 800d828:	f8dc 1000 	ldr.w	r1, [ip]
 800d82c:	fb56 1602 	smmla	r6, r6, r2, r1
 800d830:	fa46 f205 	asr.w	r2, r6, r5
 800d834:	f302 0207 	ssat	r2, #8, r2
 800d838:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d83c:	e730      	b.n	800d6a0 <st_sssa8_ch_convolve_dw+0xd8c>
 800d83e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d842:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d844:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d846:	4413      	add	r3, r2
 800d848:	9383      	str	r3, [sp, #524]	; 0x20c
 800d84a:	f7ff bb16 	b.w	800ce7a <st_sssa8_ch_convolve_dw+0x566>
 800d84e:	f1c5 0501 	rsb	r5, r5, #1
 800d852:	fa06 f105 	lsl.w	r1, r6, r5
 800d856:	f301 011f 	ssat	r1, #32, r1
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	fb51 f112 	smmulr	r1, r1, r2
 800d860:	f8dc 2000 	ldr.w	r2, [ip]
 800d864:	440a      	add	r2, r1
 800d866:	f302 0207 	ssat	r2, #8, r2
 800d86a:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d86e:	e717      	b.n	800d6a0 <st_sssa8_ch_convolve_dw+0xd8c>
 800d870:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d872:	2b00      	cmp	r3, #0
 800d874:	f43f ab01 	beq.w	800ce7a <st_sssa8_ch_convolve_dw+0x566>
 800d878:	f1ba 0f01 	cmp.w	sl, #1
 800d87c:	f040 858a 	bne.w	800e394 <st_sssa8_ch_convolve_dw+0x1a80>
 800d880:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d882:	f103 0c01 	add.w	ip, r3, #1
 800d886:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d888:	1e9f      	subs	r7, r3, #2
 800d88a:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d890:	b183      	cbz	r3, 800d8b4 <st_sssa8_ch_convolve_dw+0xfa0>
 800d892:	ee18 3a10 	vmov	r3, s16
 800d896:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d898:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d89a:	b21e      	sxth	r6, r3
 800d89c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d89e:	18d5      	adds	r5, r2, r3
 800d8a0:	f832 4b02 	ldrh.w	r4, [r2], #2
 800d8a4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d8a8:	4295      	cmp	r5, r2
 800d8aa:	eba3 0306 	sub.w	r3, r3, r6
 800d8ae:	fb13 1104 	smlabb	r1, r3, r4, r1
 800d8b2:	d1f5      	bne.n	800d8a0 <st_sssa8_ch_convolve_dw+0xf8c>
 800d8b4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800d8b8:	2815      	cmp	r0, #21
 800d8ba:	dd10      	ble.n	800d8de <st_sssa8_ch_convolve_dw+0xfca>
 800d8bc:	1e83      	subs	r3, r0, #2
 800d8be:	2201      	movs	r2, #1
 800d8c0:	3801      	subs	r0, #1
 800d8c2:	409a      	lsls	r2, r3
 800d8c4:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	fb51 2303 	smmla	r3, r1, r3, r2
 800d8cc:	4103      	asrs	r3, r0
 800d8ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8d0:	6812      	ldr	r2, [r2, #0]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f303 0307 	ssat	r3, #8, r3
 800d8d8:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d8dc:	e7b1      	b.n	800d842 <st_sssa8_ch_convolve_dw+0xf2e>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	dd0c      	ble.n	800d8fc <st_sssa8_ch_convolve_dw+0xfe8>
 800d8e2:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d8e4:	0049      	lsls	r1, r1, #1
 800d8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6812      	ldr	r2, [r2, #0]
 800d8ec:	fb51 2303 	smmla	r3, r1, r3, r2
 800d8f0:	4103      	asrs	r3, r0
 800d8f2:	f303 0307 	ssat	r3, #8, r3
 800d8f6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d8fa:	e7a2      	b.n	800d842 <st_sssa8_ch_convolve_dw+0xf2e>
 800d8fc:	f1c0 0301 	rsb	r3, r0, #1
 800d900:	fa01 f303 	lsl.w	r3, r1, r3
 800d904:	f303 031f 	ssat	r3, #32, r3
 800d908:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800d90a:	6812      	ldr	r2, [r2, #0]
 800d90c:	fb53 f312 	smmulr	r3, r3, r2
 800d910:	e7dd      	b.n	800d8ce <st_sssa8_ch_convolve_dw+0xfba>
 800d912:	9b03      	ldr	r3, [sp, #12]
 800d914:	eb03 000e 	add.w	r0, r3, lr
 800d918:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800d91c:	fb02 3000 	mla	r0, r2, r0, r3
 800d920:	4617      	mov	r7, r2
 800d922:	f005 fc01 	bl	8013128 <st_int8_copy>
 800d926:	e70a      	b.n	800d73e <st_sssa8_ch_convolve_dw+0xe2a>
 800d928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d92a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800d92c:	4282      	cmp	r2, r0
 800d92e:	f340 80aa 	ble.w	800da86 <st_sssa8_ch_convolve_dw+0x1172>
 800d932:	b29b      	uxth	r3, r3
 800d934:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800d936:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d938:	9328      	str	r3, [sp, #160]	; 0xa0
 800d93a:	fb01 2100 	mla	r1, r1, r0, r2
 800d93e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d940:	eba1 0803 	sub.w	r8, r1, r3
 800d944:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d948:	4598      	cmp	r8, r3
 800d94a:	9306      	str	r3, [sp, #24]
 800d94c:	f77f a990 	ble.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800d950:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d952:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d956:	f8cd 8008 	str.w	r8, [sp, #8]
 800d95a:	ee18 8a10 	vmov	r8, s16
 800d95e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d960:	f8dd b0f8 	ldr.w	fp, [sp, #248]	; 0xf8
 800d964:	9304      	str	r3, [sp, #16]
 800d966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d968:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d96a:	429a      	cmp	r2, r3
 800d96c:	fb03 f301 	mul.w	r3, r3, r1
 800d970:	bfcc      	ite	gt
 800d972:	2200      	movgt	r2, #0
 800d974:	2201      	movle	r2, #1
 800d976:	9305      	str	r3, [sp, #20]
 800d978:	9b04      	ldr	r3, [sp, #16]
 800d97a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d97e:	9a06      	ldr	r2, [sp, #24]
 800d980:	4615      	mov	r5, r2
 800d982:	9303      	str	r3, [sp, #12]
 800d984:	0feb      	lsrs	r3, r5, #31
 800d986:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d988:	4291      	cmp	r1, r2
 800d98a:	bfd8      	it	le
 800d98c:	f043 0301 	orrle.w	r3, r3, #1
 800d990:	b90b      	cbnz	r3, 800d996 <st_sssa8_ch_convolve_dw+0x1082>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	b1a3      	cbz	r3, 800d9c0 <st_sssa8_ch_convolve_dw+0x10ac>
 800d996:	4652      	mov	r2, sl
 800d998:	4631      	mov	r1, r6
 800d99a:	4640      	mov	r0, r8
 800d99c:	f005 fb5c 	bl	8013058 <st_int8_fill>
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	9b02      	ldr	r3, [sp, #8]
 800d9a4:	4456      	add	r6, sl
 800d9a6:	b22d      	sxth	r5, r5
 800d9a8:	429d      	cmp	r5, r3
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	dbea      	blt.n	800d984 <st_sssa8_ch_convolve_dw+0x1070>
 800d9ae:	9b04      	ldr	r3, [sp, #16]
 800d9b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	b21b      	sxth	r3, r3
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	dcd4      	bgt.n	800d966 <st_sssa8_ch_convolve_dw+0x1052>
 800d9bc:	f7ff b956 	b.w	800cc6c <st_sssa8_ch_convolve_dw+0x358>
 800d9c0:	9b05      	ldr	r3, [sp, #20]
 800d9c2:	441a      	add	r2, r3
 800d9c4:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 800d9c8:	fb03 1702 	mla	r7, r3, r2, r1
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0e7      	beq.n	800d9a0 <st_sssa8_ch_convolve_dw+0x108c>
 800d9d0:	f1bb 0f00 	cmp.w	fp, #0
 800d9d4:	d0e4      	beq.n	800d9a0 <st_sssa8_ch_convolve_dw+0x108c>
 800d9d6:	18fb      	adds	r3, r7, r3
 800d9d8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d9dc:	f106 0904 	add.w	r9, r6, #4
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	469e      	mov	lr, r3
 800d9e4:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
 800d9e8:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
 800d9ec:	e9cd 5607 	strd	r5, r6, [sp, #28]
 800d9f0:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9f4:	f1ba 0f05 	cmp.w	sl, #5
 800d9f8:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800d9fc:	ea4f 6201 	mov.w	r2, r1, lsl #24
 800da00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800da04:	ea4f 2132 	mov.w	r1, r2, ror #8
 800da08:	fa32 f281 	uxtab16	r2, r2, r1
 800da0c:	d938      	bls.n	800da80 <st_sssa8_ch_convolve_dw+0x116c>
 800da0e:	b3a3      	cbz	r3, 800da7a <st_sssa8_ch_convolve_dw+0x1166>
 800da10:	464d      	mov	r5, r9
 800da12:	2401      	movs	r4, #1
 800da14:	f849 2c04 	str.w	r2, [r9, #-4]
 800da18:	ebab 0603 	sub.w	r6, fp, r3
 800da1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800da20:	0871      	lsrs	r1, r6, #1
 800da22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800da26:	e9c3 2200 	strd	r2, r2, [r3]
 800da2a:	3308      	adds	r3, #8
 800da2c:	4299      	cmp	r1, r3
 800da2e:	d1fa      	bne.n	800da26 <st_sssa8_ch_convolve_dw+0x1112>
 800da30:	f026 0301 	bic.w	r3, r6, #1
 800da34:	42b3      	cmp	r3, r6
 800da36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800da3a:	441c      	add	r4, r3
 800da3c:	d014      	beq.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da3e:	1c63      	adds	r3, r4, #1
 800da40:	602a      	str	r2, [r5, #0]
 800da42:	459b      	cmp	fp, r3
 800da44:	dd10      	ble.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da46:	1ca3      	adds	r3, r4, #2
 800da48:	606a      	str	r2, [r5, #4]
 800da4a:	459b      	cmp	fp, r3
 800da4c:	dd0c      	ble.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da4e:	1ce3      	adds	r3, r4, #3
 800da50:	60aa      	str	r2, [r5, #8]
 800da52:	459b      	cmp	fp, r3
 800da54:	dd08      	ble.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da56:	1d23      	adds	r3, r4, #4
 800da58:	60ea      	str	r2, [r5, #12]
 800da5a:	459b      	cmp	fp, r3
 800da5c:	dd04      	ble.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da5e:	3405      	adds	r4, #5
 800da60:	612a      	str	r2, [r5, #16]
 800da62:	45a3      	cmp	fp, r4
 800da64:	dd00      	ble.n	800da68 <st_sssa8_ch_convolve_dw+0x1154>
 800da66:	616a      	str	r2, [r5, #20]
 800da68:	45be      	cmp	lr, r7
 800da6a:	4460      	add	r0, ip
 800da6c:	44e1      	add	r9, ip
 800da6e:	d1bf      	bne.n	800d9f0 <st_sssa8_ch_convolve_dw+0x10dc>
 800da70:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800da74:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 800da78:	e792      	b.n	800d9a0 <st_sssa8_ch_convolve_dw+0x108c>
 800da7a:	4605      	mov	r5, r0
 800da7c:	461c      	mov	r4, r3
 800da7e:	e7cb      	b.n	800da18 <st_sssa8_ch_convolve_dw+0x1104>
 800da80:	4605      	mov	r5, r0
 800da82:	2400      	movs	r4, #0
 800da84:	e7db      	b.n	800da3e <st_sssa8_ch_convolve_dw+0x112a>
 800da86:	b29b      	uxth	r3, r3
 800da88:	9328      	str	r3, [sp, #160]	; 0xa0
 800da8a:	f7ff b8f1 	b.w	800cc70 <st_sssa8_ch_convolve_dw+0x35c>
 800da8e:	460b      	mov	r3, r1
 800da90:	e5f0      	b.n	800d674 <st_sssa8_ch_convolve_dw+0xd60>
 800da92:	b2ab      	uxth	r3, r5
 800da94:	9342      	str	r3, [sp, #264]	; 0x108
 800da96:	f7ff b9fd 	b.w	800ce94 <st_sssa8_ch_convolve_dw+0x580>
 800da9a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800da9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da9e:	fb02 f000 	mul.w	r0, r2, r0
 800daa2:	fb02 f303 	mul.w	r3, r2, r3
 800daa6:	901c      	str	r0, [sp, #112]	; 0x70
 800daa8:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800daaa:	fb03 f000 	mul.w	r0, r3, r0
 800daae:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800dab2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800dab4:	901b      	str	r0, [sp, #108]	; 0x6c
 800dab6:	2a00      	cmp	r2, #0
 800dab8:	f43f a9f9 	beq.w	800ceae <st_sssa8_ch_convolve_dw+0x59a>
 800dabc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800dabe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800dac0:	f001 0203 	and.w	r2, r1, #3
 800dac4:	0888      	lsrs	r0, r1, #2
 800dac6:	4427      	add	r7, r4
 800dac8:	9213      	str	r2, [sp, #76]	; 0x4c
 800daca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dacc:	9015      	str	r0, [sp, #84]	; 0x54
 800dace:	9716      	str	r7, [sp, #88]	; 0x58
 800dad0:	2a00      	cmp	r2, #0
 800dad2:	f43f a9ec 	beq.w	800ceae <st_sssa8_ch_convolve_dw+0x59a>
 800dad6:	441c      	add	r4, r3
 800dad8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800dadc:	1e42      	subs	r2, r0, #1
 800dade:	19be      	adds	r6, r7, r6
 800dae0:	942a      	str	r4, [sp, #168]	; 0xa8
 800dae2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800dae4:	b292      	uxth	r2, r2
 800dae6:	9520      	str	r5, [sp, #128]	; 0x80
 800dae8:	1861      	adds	r1, r4, r1
 800daea:	191c      	adds	r4, r3, r4
 800daec:	9619      	str	r6, [sp, #100]	; 0x64
 800daee:	18cd      	adds	r5, r1, r3
 800daf0:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800daf2:	1c53      	adds	r3, r2, #1
 800daf4:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800daf8:	3120      	adds	r1, #32
 800dafa:	951f      	str	r5, [sp, #124]	; 0x7c
 800dafc:	9422      	str	r4, [sp, #136]	; 0x88
 800dafe:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800db02:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800db06:	9112      	str	r1, [sp, #72]	; 0x48
 800db08:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800db0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db0e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800db10:	3a01      	subs	r2, #1
 800db12:	9126      	str	r1, [sp, #152]	; 0x98
 800db14:	b291      	uxth	r1, r2
 800db16:	9124      	str	r1, [sp, #144]	; 0x90
 800db18:	0061      	lsls	r1, r4, #1
 800db1a:	9121      	str	r1, [sp, #132]	; 0x84
 800db1c:	0069      	lsls	r1, r5, #1
 800db1e:	465d      	mov	r5, fp
 800db20:	911e      	str	r1, [sp, #120]	; 0x78
 800db22:	9986      	ldr	r1, [sp, #536]	; 0x218
 800db24:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800db28:	911a      	str	r1, [sp, #104]	; 0x68
 800db2a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800db2e:	911d      	str	r1, [sp, #116]	; 0x74
 800db30:	0099      	lsls	r1, r3, #2
 800db32:	9125      	str	r1, [sp, #148]	; 0x94
 800db34:	eb07 1103 	add.w	r1, r7, r3, lsl #4
 800db38:	9129      	str	r1, [sp, #164]	; 0xa4
 800db3a:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800db3c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800db40:	4663      	mov	r3, ip
 800db42:	9128      	str	r1, [sp, #160]	; 0xa0
 800db44:	0081      	lsls	r1, r0, #2
 800db46:	9127      	str	r1, [sp, #156]	; 0x9c
 800db48:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800db4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800db4c:	9504      	str	r5, [sp, #16]
 800db4e:	fb03 2301 	mla	r3, r3, r1, r2
 800db52:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800db54:	2200      	movs	r2, #0
 800db56:	1859      	adds	r1, r3, r1
 800db58:	9307      	str	r3, [sp, #28]
 800db5a:	9218      	str	r2, [sp, #96]	; 0x60
 800db5c:	ee18 2a10 	vmov	r2, s16
 800db60:	9110      	str	r1, [sp, #64]	; 0x40
 800db62:	9914      	ldr	r1, [sp, #80]	; 0x50
 800db64:	b212      	sxth	r2, r2
 800db66:	1859      	adds	r1, r3, r1
 800db68:	4693      	mov	fp, r2
 800db6a:	910f      	str	r1, [sp, #60]	; 0x3c
 800db6c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800db6e:	4419      	add	r1, r3
 800db70:	910d      	str	r1, [sp, #52]	; 0x34
 800db72:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800db74:	4419      	add	r1, r3
 800db76:	910c      	str	r1, [sp, #48]	; 0x30
 800db78:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800db7a:	1859      	adds	r1, r3, r1
 800db7c:	910b      	str	r1, [sp, #44]	; 0x2c
 800db7e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800db80:	4419      	add	r1, r3
 800db82:	910a      	str	r1, [sp, #40]	; 0x28
 800db84:	9920      	ldr	r1, [sp, #128]	; 0x80
 800db86:	4419      	add	r1, r3
 800db88:	9109      	str	r1, [sp, #36]	; 0x24
 800db8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db8c:	18cb      	adds	r3, r1, r3
 800db8e:	9308      	str	r3, [sp, #32]
 800db90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 83d7 	beq.w	800e346 <st_sssa8_ch_convolve_dw+0x1a32>
 800db98:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800db9a:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800db9c:	f103 0710 	add.w	r7, r3, #16
 800dba0:	9e86      	ldr	r6, [sp, #536]	; 0x218
 800dba2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dba4:	9203      	str	r2, [sp, #12]
 800dba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dba8:	3348      	adds	r3, #72	; 0x48
 800dbaa:	9d04      	ldr	r5, [sp, #16]
 800dbac:	9202      	str	r2, [sp, #8]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800dbb4:	9604      	str	r6, [sp, #16]
 800dbb6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800dbba:	e083      	b.n	800dcc4 <st_sssa8_ch_convolve_dw+0x13b0>
 800dbbc:	f1a1 0902 	sub.w	r9, r1, #2
 800dbc0:	2401      	movs	r4, #1
 800dbc2:	9804      	ldr	r0, [sp, #16]
 800dbc4:	3901      	subs	r1, #1
 800dbc6:	fa04 f909 	lsl.w	r9, r4, r9
 800dbca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dbce:	f850 4b04 	ldr.w	r4, [r0], #4
 800dbd2:	f10a 0b02 	add.w	fp, sl, #2
 800dbd6:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800dbda:	fa4c f101 	asr.w	r1, ip, r1
 800dbde:	f858 4b04 	ldr.w	r4, [r8], #4
 800dbe2:	4421      	add	r1, r4
 800dbe4:	f301 0107 	ssat	r1, #8, r1
 800dbe8:	9c03      	ldr	r4, [sp, #12]
 800dbea:	f804 1b01 	strb.w	r1, [r4], #1
 800dbee:	f9bb 1000 	ldrsh.w	r1, [fp]
 800dbf2:	2915      	cmp	r1, #21
 800dbf4:	f340 8149 	ble.w	800de8a <st_sssa8_ch_convolve_dw+0x1576>
 800dbf8:	f1a1 0c02 	sub.w	ip, r1, #2
 800dbfc:	2601      	movs	r6, #1
 800dbfe:	3901      	subs	r1, #1
 800dc00:	6800      	ldr	r0, [r0, #0]
 800dc02:	fa06 fc0c 	lsl.w	ip, r6, ip
 800dc06:	f8d8 8000 	ldr.w	r8, [r8]
 800dc0a:	9e04      	ldr	r6, [sp, #16]
 800dc0c:	fb5e ce00 	smmla	lr, lr, r0, ip
 800dc10:	fa4e f001 	asr.w	r0, lr, r1
 800dc14:	f106 0908 	add.w	r9, r6, #8
 800dc18:	f10a 0104 	add.w	r1, sl, #4
 800dc1c:	4440      	add	r0, r8
 800dc1e:	9e02      	ldr	r6, [sp, #8]
 800dc20:	f106 0c08 	add.w	ip, r6, #8
 800dc24:	f300 0007 	ssat	r0, #8, r0
 800dc28:	7020      	strb	r0, [r4, #0]
 800dc2a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800dc2e:	9803      	ldr	r0, [sp, #12]
 800dc30:	2915      	cmp	r1, #21
 800dc32:	f100 0402 	add.w	r4, r0, #2
 800dc36:	f340 8145 	ble.w	800dec4 <st_sssa8_ch_convolve_dw+0x15b0>
 800dc3a:	f8dc 8000 	ldr.w	r8, [ip]
 800dc3e:	2001      	movs	r0, #1
 800dc40:	f1a1 0c02 	sub.w	ip, r1, #2
 800dc44:	3901      	subs	r1, #1
 800dc46:	f8d9 e000 	ldr.w	lr, [r9]
 800dc4a:	fa00 fc0c 	lsl.w	ip, r0, ip
 800dc4e:	9e05      	ldr	r6, [sp, #20]
 800dc50:	9804      	ldr	r0, [sp, #16]
 800dc52:	fb56 ce0e 	smmla	lr, r6, lr, ip
 800dc56:	fa4e f101 	asr.w	r1, lr, r1
 800dc5a:	300c      	adds	r0, #12
 800dc5c:	f10a 0e06 	add.w	lr, sl, #6
 800dc60:	4441      	add	r1, r8
 800dc62:	9e02      	ldr	r6, [sp, #8]
 800dc64:	f106 0c0c 	add.w	ip, r6, #12
 800dc68:	f301 0107 	ssat	r1, #8, r1
 800dc6c:	7021      	strb	r1, [r4, #0]
 800dc6e:	9903      	ldr	r1, [sp, #12]
 800dc70:	1ccc      	adds	r4, r1, #3
 800dc72:	f9be 1000 	ldrsh.w	r1, [lr]
 800dc76:	2915      	cmp	r1, #21
 800dc78:	f340 8142 	ble.w	800df00 <st_sssa8_ch_convolve_dw+0x15ec>
 800dc7c:	f8dc e000 	ldr.w	lr, [ip]
 800dc80:	2601      	movs	r6, #1
 800dc82:	f1a1 0c02 	sub.w	ip, r1, #2
 800dc86:	3901      	subs	r1, #1
 800dc88:	6800      	ldr	r0, [r0, #0]
 800dc8a:	fa06 fc0c 	lsl.w	ip, r6, ip
 800dc8e:	9e06      	ldr	r6, [sp, #24]
 800dc90:	fb56 c000 	smmla	r0, r6, r0, ip
 800dc94:	fa40 f101 	asr.w	r1, r0, r1
 800dc98:	4471      	add	r1, lr
 800dc9a:	f301 0107 	ssat	r1, #8, r1
 800dc9e:	7021      	strb	r1, [r4, #0]
 800dca0:	9904      	ldr	r1, [sp, #16]
 800dca2:	3710      	adds	r7, #16
 800dca4:	3348      	adds	r3, #72	; 0x48
 800dca6:	3204      	adds	r2, #4
 800dca8:	3110      	adds	r1, #16
 800dcaa:	f10a 0a08 	add.w	sl, sl, #8
 800dcae:	9104      	str	r1, [sp, #16]
 800dcb0:	9903      	ldr	r1, [sp, #12]
 800dcb2:	3104      	adds	r1, #4
 800dcb4:	9103      	str	r1, [sp, #12]
 800dcb6:	9902      	ldr	r1, [sp, #8]
 800dcb8:	3110      	adds	r1, #16
 800dcba:	9102      	str	r1, [sp, #8]
 800dcbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dcbe:	428f      	cmp	r7, r1
 800dcc0:	f000 8174 	beq.w	800dfac <st_sssa8_ch_convolve_dw+0x1698>
 800dcc4:	9907      	ldr	r1, [sp, #28]
 800dcc6:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800dcca:	f851 c002 	ldr.w	ip, [r1, r2]
 800dcce:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dcd0:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800dcd4:	f852 e001 	ldr.w	lr, [r2, r1]
 800dcd8:	49b3      	ldr	r1, [pc, #716]	; (800dfa8 <st_sssa8_ch_convolve_dw+0x1694>)
 800dcda:	ea0e 0101 	and.w	r1, lr, r1
 800dcde:	ea41 411c 	orr.w	r1, r1, ip, lsr #16
 800dce2:	fa1f fc8c 	uxth.w	ip, ip
 800dce6:	ea4c 4e0e 	orr.w	lr, ip, lr, lsl #16
 800dcea:	fa25 fc8e 	sxtab16	ip, r5, lr
 800dcee:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800dcf2:	fa25 fe9e 	sxtab16	lr, r5, lr, ror #8
 800dcf6:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800dcfa:	f857 4c0c 	ldr.w	r4, [r7, #-12]
 800dcfe:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800dd02:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800dd06:	f857 4c08 	ldr.w	r4, [r7, #-8]
 800dd0a:	fa25 f881 	sxtab16	r8, r5, r1
 800dd0e:	fb20 4808 	smlad	r8, r0, r8, r4
 800dd12:	fa25 f191 	sxtab16	r1, r5, r1, ror #8
 800dd16:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800dd1a:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800dd1e:	fb20 4401 	smlad	r4, r0, r1, r4
 800dd22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd24:	48a0      	ldr	r0, [pc, #640]	; (800dfa8 <st_sssa8_ch_convolve_dw+0x1694>)
 800dd26:	f852 9001 	ldr.w	r9, [r2, r1]
 800dd2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dd2c:	f852 b001 	ldr.w	fp, [r2, r1]
 800dd30:	f853 1c38 	ldr.w	r1, [r3, #-56]
 800dd34:	ea0b 0000 	and.w	r0, fp, r0
 800dd38:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800dd3c:	fa1f f989 	uxth.w	r9, r9
 800dd40:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800dd44:	fa25 fb89 	sxtab16	fp, r5, r9
 800dd48:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800dd4c:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800dd50:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800dd54:	fb21 ee09 	smlad	lr, r1, r9, lr
 800dd58:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800dd5c:	fa25 f980 	sxtab16	r9, r5, r0
 800dd60:	fb21 8809 	smlad	r8, r1, r9, r8
 800dd64:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800dd68:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800dd6c:	fb21 4400 	smlad	r4, r1, r0, r4
 800dd70:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd72:	488d      	ldr	r0, [pc, #564]	; (800dfa8 <st_sssa8_ch_convolve_dw+0x1694>)
 800dd74:	f852 9001 	ldr.w	r9, [r2, r1]
 800dd78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd7a:	f852 b001 	ldr.w	fp, [r2, r1]
 800dd7e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800dd82:	ea0b 0000 	and.w	r0, fp, r0
 800dd86:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800dd8a:	fa1f f989 	uxth.w	r9, r9
 800dd8e:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800dd92:	fa25 fb89 	sxtab16	fp, r5, r9
 800dd96:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800dd9a:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800dd9e:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800dda2:	fb21 ee09 	smlad	lr, r1, r9, lr
 800dda6:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800ddaa:	fa25 f980 	sxtab16	r9, r5, r0
 800ddae:	fb21 8809 	smlad	r8, r1, r9, r8
 800ddb2:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800ddb6:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800ddba:	fb21 4400 	smlad	r4, r1, r0, r4
 800ddbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ddc0:	4879      	ldr	r0, [pc, #484]	; (800dfa8 <st_sssa8_ch_convolve_dw+0x1694>)
 800ddc2:	f852 9001 	ldr.w	r9, [r2, r1]
 800ddc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddc8:	f852 b001 	ldr.w	fp, [r2, r1]
 800ddcc:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800ddd0:	ea0b 0000 	and.w	r0, fp, r0
 800ddd4:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800ddd8:	fa1f f989 	uxth.w	r9, r9
 800dddc:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800dde0:	fa25 fb89 	sxtab16	fp, r5, r9
 800dde4:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800dde8:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800ddec:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800ddf0:	fb21 ee09 	smlad	lr, r1, r9, lr
 800ddf4:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800ddf8:	fa25 f980 	sxtab16	r9, r5, r0
 800ddfc:	fb21 8809 	smlad	r8, r1, r9, r8
 800de00:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800de04:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800de08:	fb21 4100 	smlad	r1, r1, r0, r4
 800de0c:	9808      	ldr	r0, [sp, #32]
 800de0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800de10:	5810      	ldr	r0, [r2, r0]
 800de12:	f833 9c08 	ldrh.w	r9, [r3, #-8]
 800de16:	b244      	sxtb	r4, r0
 800de18:	f833 bc06 	ldrh.w	fp, [r3, #-6]
 800de1c:	1ba4      	subs	r4, r4, r6
 800de1e:	fb19 cc04 	smlabb	ip, r9, r4, ip
 800de22:	f340 2407 	sbfx	r4, r0, #8, #8
 800de26:	1ba4      	subs	r4, r4, r6
 800de28:	fb1b ee04 	smlabb	lr, fp, r4, lr
 800de2c:	f340 4407 	sbfx	r4, r0, #16, #8
 800de30:	ebc6 6020 	rsb	r0, r6, r0, asr #24
 800de34:	1ba4      	subs	r4, r4, r6
 800de36:	f833 6c04 	ldrh.w	r6, [r3, #-4]
 800de3a:	fb16 8404 	smlabb	r4, r6, r4, r8
 800de3e:	9405      	str	r4, [sp, #20]
 800de40:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 800de44:	fb14 1100 	smlabb	r1, r4, r0, r1
 800de48:	9106      	str	r1, [sp, #24]
 800de4a:	f9ba 1000 	ldrsh.w	r1, [sl]
 800de4e:	2915      	cmp	r1, #21
 800de50:	f73f aeb4 	bgt.w	800dbbc <st_sssa8_ch_convolve_dw+0x12a8>
 800de54:	2900      	cmp	r1, #0
 800de56:	dd63      	ble.n	800df20 <st_sssa8_ch_convolve_dw+0x160c>
 800de58:	9804      	ldr	r0, [sp, #16]
 800de5a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800de5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800de62:	f10a 0b02 	add.w	fp, sl, #2
 800de66:	f850 4b04 	ldr.w	r4, [r0], #4
 800de6a:	f858 9b04 	ldr.w	r9, [r8], #4
 800de6e:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800de72:	fa4c f101 	asr.w	r1, ip, r1
 800de76:	f301 0107 	ssat	r1, #8, r1
 800de7a:	9c03      	ldr	r4, [sp, #12]
 800de7c:	f804 1b01 	strb.w	r1, [r4], #1
 800de80:	f9bb 1000 	ldrsh.w	r1, [fp]
 800de84:	2915      	cmp	r1, #21
 800de86:	f73f aeb7 	bgt.w	800dbf8 <st_sssa8_ch_convolve_dw+0x12e4>
 800de8a:	2900      	cmp	r1, #0
 800de8c:	dd7a      	ble.n	800df84 <st_sssa8_ch_convolve_dw+0x1670>
 800de8e:	f8d8 c000 	ldr.w	ip, [r8]
 800de92:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800de96:	6800      	ldr	r0, [r0, #0]
 800de98:	9e04      	ldr	r6, [sp, #16]
 800de9a:	fb5e c000 	smmla	r0, lr, r0, ip
 800de9e:	4108      	asrs	r0, r1
 800dea0:	9902      	ldr	r1, [sp, #8]
 800dea2:	f106 0908 	add.w	r9, r6, #8
 800dea6:	f101 0c08 	add.w	ip, r1, #8
 800deaa:	f10a 0104 	add.w	r1, sl, #4
 800deae:	f300 0007 	ssat	r0, #8, r0
 800deb2:	7020      	strb	r0, [r4, #0]
 800deb4:	f9b1 1000 	ldrsh.w	r1, [r1]
 800deb8:	9803      	ldr	r0, [sp, #12]
 800deba:	2915      	cmp	r1, #21
 800debc:	f100 0402 	add.w	r4, r0, #2
 800dec0:	f73f aebb 	bgt.w	800dc3a <st_sssa8_ch_convolve_dw+0x1326>
 800dec4:	2900      	cmp	r1, #0
 800dec6:	dd4b      	ble.n	800df60 <st_sssa8_ch_convolve_dw+0x164c>
 800dec8:	9805      	ldr	r0, [sp, #20]
 800deca:	9e02      	ldr	r6, [sp, #8]
 800decc:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800ded0:	9804      	ldr	r0, [sp, #16]
 800ded2:	f8d9 8000 	ldr.w	r8, [r9]
 800ded6:	f8dc c000 	ldr.w	ip, [ip]
 800deda:	300c      	adds	r0, #12
 800dedc:	fb5e cc08 	smmla	ip, lr, r8, ip
 800dee0:	f10a 0e06 	add.w	lr, sl, #6
 800dee4:	fa4c f101 	asr.w	r1, ip, r1
 800dee8:	f106 0c0c 	add.w	ip, r6, #12
 800deec:	f301 0107 	ssat	r1, #8, r1
 800def0:	7021      	strb	r1, [r4, #0]
 800def2:	9903      	ldr	r1, [sp, #12]
 800def4:	1ccc      	adds	r4, r1, #3
 800def6:	f9be 1000 	ldrsh.w	r1, [lr]
 800defa:	2915      	cmp	r1, #21
 800defc:	f73f aebe 	bgt.w	800dc7c <st_sssa8_ch_convolve_dw+0x1368>
 800df00:	2900      	cmp	r1, #0
 800df02:	dd1d      	ble.n	800df40 <st_sssa8_ch_convolve_dw+0x162c>
 800df04:	9e06      	ldr	r6, [sp, #24]
 800df06:	6800      	ldr	r0, [r0, #0]
 800df08:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800df0c:	f8dc c000 	ldr.w	ip, [ip]
 800df10:	fb5e c000 	smmla	r0, lr, r0, ip
 800df14:	fa40 f101 	asr.w	r1, r0, r1
 800df18:	f301 0107 	ssat	r1, #8, r1
 800df1c:	7021      	strb	r1, [r4, #0]
 800df1e:	e6bf      	b.n	800dca0 <st_sssa8_ch_convolve_dw+0x138c>
 800df20:	f1c1 0101 	rsb	r1, r1, #1
 800df24:	f10a 0b02 	add.w	fp, sl, #2
 800df28:	fa0c f101 	lsl.w	r1, ip, r1
 800df2c:	f301 011f 	ssat	r1, #32, r1
 800df30:	9804      	ldr	r0, [sp, #16]
 800df32:	f850 4b04 	ldr.w	r4, [r0], #4
 800df36:	fb51 f114 	smmulr	r1, r1, r4
 800df3a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800df3e:	e64e      	b.n	800dbde <st_sssa8_ch_convolve_dw+0x12ca>
 800df40:	f1c1 0101 	rsb	r1, r1, #1
 800df44:	9e06      	ldr	r6, [sp, #24]
 800df46:	408e      	lsls	r6, r1
 800df48:	f306 011f 	ssat	r1, #32, r6
 800df4c:	6800      	ldr	r0, [r0, #0]
 800df4e:	fb51 f110 	smmulr	r1, r1, r0
 800df52:	f8dc 0000 	ldr.w	r0, [ip]
 800df56:	4401      	add	r1, r0
 800df58:	f301 0107 	ssat	r1, #8, r1
 800df5c:	7021      	strb	r1, [r4, #0]
 800df5e:	e69f      	b.n	800dca0 <st_sssa8_ch_convolve_dw+0x138c>
 800df60:	f1c1 0101 	rsb	r1, r1, #1
 800df64:	9805      	ldr	r0, [sp, #20]
 800df66:	f10a 0e06 	add.w	lr, sl, #6
 800df6a:	4088      	lsls	r0, r1
 800df6c:	f300 011f 	ssat	r1, #32, r0
 800df70:	9804      	ldr	r0, [sp, #16]
 800df72:	f8d9 8000 	ldr.w	r8, [r9]
 800df76:	300c      	adds	r0, #12
 800df78:	fb51 f118 	smmulr	r1, r1, r8
 800df7c:	f8dc c000 	ldr.w	ip, [ip]
 800df80:	4461      	add	r1, ip
 800df82:	e66e      	b.n	800dc62 <st_sssa8_ch_convolve_dw+0x134e>
 800df84:	f1c1 0101 	rsb	r1, r1, #1
 800df88:	fa0e fe01 	lsl.w	lr, lr, r1
 800df8c:	f10a 0104 	add.w	r1, sl, #4
 800df90:	f30e 0c1f 	ssat	ip, #32, lr
 800df94:	9e04      	ldr	r6, [sp, #16]
 800df96:	6800      	ldr	r0, [r0, #0]
 800df98:	f106 0908 	add.w	r9, r6, #8
 800df9c:	fb5c f010 	smmulr	r0, ip, r0
 800dfa0:	f8d8 c000 	ldr.w	ip, [r8]
 800dfa4:	4460      	add	r0, ip
 800dfa6:	e63a      	b.n	800dc1e <st_sssa8_ch_convolve_dw+0x130a>
 800dfa8:	ffff0000 	.word	0xffff0000
 800dfac:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800dfae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dfb0:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800dfba:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dfbc:	9383      	str	r3, [sp, #524]	; 0x20c
 800dfbe:	9504      	str	r5, [sp, #16]
 800dfc0:	e9dd 7228 	ldrd	r7, r2, [sp, #160]	; 0xa0
 800dfc4:	e9dd 3826 	ldrd	r3, r8, [sp, #152]	; 0x98
 800dfc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f000 8147 	beq.w	800e25e <st_sssa8_ch_convolve_dw+0x194a>
 800dfd0:	9807      	ldr	r0, [sp, #28]
 800dfd2:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800dfd4:	f910 4008 	ldrsb.w	r4, [r0, r8]
 800dfd8:	eb00 0608 	add.w	r6, r0, r8
 800dfdc:	f8b3 c000 	ldrh.w	ip, [r3]
 800dfe0:	6838      	ldr	r0, [r7, #0]
 800dfe2:	eba4 040b 	sub.w	r4, r4, fp
 800dfe6:	fb1c 0404 	smlabb	r4, ip, r4, r0
 800dfea:	4630      	mov	r0, r6
 800dfec:	f916 c005 	ldrsb.w	ip, [r6, r5]
 800dff0:	442e      	add	r6, r5
 800dff2:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800dff6:	ebac 0c0b 	sub.w	ip, ip, fp
 800dffa:	eba6 0e0b 	sub.w	lr, r6, fp
 800dffe:	885e      	ldrh	r6, [r3, #2]
 800e000:	fb1c 4c06 	smlabb	ip, ip, r6, r4
 800e004:	f910 4015 	ldrsb.w	r4, [r0, r5, lsl #1]
 800e008:	889e      	ldrh	r6, [r3, #4]
 800e00a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800e00e:	eba4 040b 	sub.w	r4, r4, fp
 800e012:	fb16 c404 	smlabb	r4, r6, r4, ip
 800e016:	1946      	adds	r6, r0, r5
 800e018:	f910 c015 	ldrsb.w	ip, [r0, r5, lsl #1]
 800e01c:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800e020:	ebac 0c0b 	sub.w	ip, ip, fp
 800e024:	eba6 0a0b 	sub.w	sl, r6, fp
 800e028:	88de      	ldrh	r6, [r3, #6]
 800e02a:	fb1e 4406 	smlabb	r4, lr, r6, r4
 800e02e:	eb00 0645 	add.w	r6, r0, r5, lsl #1
 800e032:	8918      	ldrh	r0, [r3, #8]
 800e034:	fb1c 4000 	smlabb	r0, ip, r0, r4
 800e038:	1974      	adds	r4, r6, r5
 800e03a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800e03e:	f914 4015 	ldrsb.w	r4, [r4, r5, lsl #1]
 800e042:	eba4 0e0b 	sub.w	lr, r4, fp
 800e046:	895c      	ldrh	r4, [r3, #10]
 800e048:	fb1a 0404 	smlabb	r4, sl, r4, r0
 800e04c:	f916 0015 	ldrsb.w	r0, [r6, r5, lsl #1]
 800e050:	f916 6025 	ldrsb.w	r6, [r6, r5, lsl #2]
 800e054:	eba0 000b 	sub.w	r0, r0, fp
 800e058:	eba6 060b 	sub.w	r6, r6, fp
 800e05c:	fb10 400c 	smlabb	r0, r0, ip, r4
 800e060:	89dc      	ldrh	r4, [r3, #14]
 800e062:	f9b9 c000 	ldrsh.w	ip, [r9]
 800e066:	fb1e 0004 	smlabb	r0, lr, r4, r0
 800e06a:	f108 0401 	add.w	r4, r8, #1
 800e06e:	f1bc 0f15 	cmp.w	ip, #21
 800e072:	fa1f fa84 	uxth.w	sl, r4
 800e076:	8a1c      	ldrh	r4, [r3, #16]
 800e078:	fb16 0604 	smlabb	r6, r6, r4, r0
 800e07c:	f300 811e 	bgt.w	800e2bc <st_sssa8_ch_convolve_dw+0x19a8>
 800e080:	f1bc 0f00 	cmp.w	ip, #0
 800e084:	f340 814e 	ble.w	800e324 <st_sssa8_ch_convolve_dw+0x1a10>
 800e088:	6808      	ldr	r0, [r1, #0]
 800e08a:	0076      	lsls	r6, r6, #1
 800e08c:	6814      	ldr	r4, [r2, #0]
 800e08e:	fb56 4600 	smmla	r6, r6, r0, r4
 800e092:	fa46 f00c 	asr.w	r0, r6, ip
 800e096:	f300 0007 	ssat	r0, #8, r0
 800e09a:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800e09c:	f806 0b01 	strb.w	r0, [r6], #1
 800e0a0:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	f000 80d7 	beq.w	800e256 <st_sssa8_ch_convolve_dw+0x1942>
 800e0a8:	f108 0002 	add.w	r0, r8, #2
 800e0ac:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800e0ae:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800e0b2:	b280      	uxth	r0, r0
 800e0b4:	9002      	str	r0, [sp, #8]
 800e0b6:	9807      	ldr	r0, [sp, #28]
 800e0b8:	eb00 040a 	add.w	r4, r0, sl
 800e0bc:	f910 000a 	ldrsb.w	r0, [r0, sl]
 800e0c0:	eba0 0c0b 	sub.w	ip, r0, fp
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800e0ca:	eb04 0e05 	add.w	lr, r4, r5
 800e0ce:	f914 c005 	ldrsb.w	ip, [r4, r5]
 800e0d2:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800e0d6:	ebac 0c0b 	sub.w	ip, ip, fp
 800e0da:	ebae 080b 	sub.w	r8, lr, fp
 800e0de:	f8b3 e014 	ldrh.w	lr, [r3, #20]
 800e0e2:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800e0e6:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800e0ea:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800e0ee:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e0f2:	ebae 0e0b 	sub.w	lr, lr, fp
 800e0f6:	fb1e 000c 	smlabb	r0, lr, ip, r0
 800e0fa:	eb04 0c05 	add.w	ip, r4, r5
 800e0fe:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800e102:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e106:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800e10a:	ebae 0e0b 	sub.w	lr, lr, fp
 800e10e:	ebac 0a0b 	sub.w	sl, ip, fp
 800e112:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800e116:	fb18 0c0c 	smlabb	ip, r8, ip, r0
 800e11a:	8b58      	ldrh	r0, [r3, #26]
 800e11c:	fb1e c000 	smlabb	r0, lr, r0, ip
 800e120:	eb04 0c05 	add.w	ip, r4, r5
 800e124:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
 800e128:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800e12c:	fb1a 0e0e 	smlabb	lr, sl, lr, r0
 800e130:	f914 0015 	ldrsb.w	r0, [r4, r5, lsl #1]
 800e134:	ebac 080b 	sub.w	r8, ip, fp
 800e138:	f914 c025 	ldrsb.w	ip, [r4, r5, lsl #2]
 800e13c:	eba0 000b 	sub.w	r0, r0, fp
 800e140:	8bdc      	ldrh	r4, [r3, #30]
 800e142:	ebac 0c0b 	sub.w	ip, ip, fp
 800e146:	fb10 e004 	smlabb	r0, r0, r4, lr
 800e14a:	8c1c      	ldrh	r4, [r3, #32]
 800e14c:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
 800e150:	fb18 0004 	smlabb	r0, r8, r4, r0
 800e154:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 800e156:	f1be 0f15 	cmp.w	lr, #21
 800e15a:	fb1c 0c04 	smlabb	ip, ip, r4, r0
 800e15e:	f300 80ce 	bgt.w	800e2fe <st_sssa8_ch_convolve_dw+0x19ea>
 800e162:	f1be 0f00 	cmp.w	lr, #0
 800e166:	f340 80f6 	ble.w	800e356 <st_sssa8_ch_convolve_dw+0x1a42>
 800e16a:	6848      	ldr	r0, [r1, #4]
 800e16c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e170:	6854      	ldr	r4, [r2, #4]
 800e172:	fb5c 4c00 	smmla	ip, ip, r0, r4
 800e176:	fa4c f00e 	asr.w	r0, ip, lr
 800e17a:	f300 0007 	ssat	r0, #8, r0
 800e17e:	f806 0b01 	strb.w	r0, [r6], #1
 800e182:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e184:	2802      	cmp	r0, #2
 800e186:	d066      	beq.n	800e256 <st_sssa8_ch_convolve_dw+0x1942>
 800e188:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800e18c:	9d07      	ldr	r5, [sp, #28]
 800e18e:	9f02      	ldr	r7, [sp, #8]
 800e190:	f8b3 e024 	ldrh.w	lr, [r3, #36]	; 0x24
 800e194:	19e8      	adds	r0, r5, r7
 800e196:	57ef      	ldrsb	r7, [r5, r7]
 800e198:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800e19a:	eba7 070b 	sub.w	r7, r7, fp
 800e19e:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
 800e1a2:	fb1e c707 	smlabb	r7, lr, r7, ip
 800e1a6:	eb00 0e05 	add.w	lr, r0, r5
 800e1aa:	f910 c005 	ldrsb.w	ip, [r0, r5]
 800e1ae:	2c15      	cmp	r4, #21
 800e1b0:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800e1b4:	ebac 0c0b 	sub.w	ip, ip, fp
 800e1b8:	ebae 080b 	sub.w	r8, lr, fp
 800e1bc:	f8b3 e026 	ldrh.w	lr, [r3, #38]	; 0x26
 800e1c0:	fb1e 7c0c 	smlabb	ip, lr, ip, r7
 800e1c4:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800e1c8:	f8b3 e028 	ldrh.w	lr, [r3, #40]	; 0x28
 800e1cc:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800e1d0:	eba7 070b 	sub.w	r7, r7, fp
 800e1d4:	fb1e c707 	smlabb	r7, lr, r7, ip
 800e1d8:	eb00 0c05 	add.w	ip, r0, r5
 800e1dc:	f8b3 e02c 	ldrh.w	lr, [r3, #44]	; 0x2c
 800e1e0:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800e1e4:	ebac 090b 	sub.w	r9, ip, fp
 800e1e8:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800e1ec:	fb1c 7c08 	smlabb	ip, ip, r8, r7
 800e1f0:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800e1f4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800e1f8:	eba7 070b 	sub.w	r7, r7, fp
 800e1fc:	fb1e c707 	smlabb	r7, lr, r7, ip
 800e200:	eb00 0c05 	add.w	ip, r0, r5
 800e204:	f910 e015 	ldrsb.w	lr, [r0, r5, lsl #1]
 800e208:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800e20c:	ebae 0e0b 	sub.w	lr, lr, fp
 800e210:	ebac 080b 	sub.w	r8, ip, fp
 800e214:	f8b3 c02e 	ldrh.w	ip, [r3, #46]	; 0x2e
 800e218:	fb1c 7c09 	smlabb	ip, ip, r9, r7
 800e21c:	f910 7025 	ldrsb.w	r7, [r0, r5, lsl #2]
 800e220:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800e222:	eba7 070b 	sub.w	r7, r7, fp
 800e226:	fb10 c00e 	smlabb	r0, r0, lr, ip
 800e22a:	f8b3 c032 	ldrh.w	ip, [r3, #50]	; 0x32
 800e22e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e230:	fb1c 0008 	smlabb	r0, ip, r8, r0
 800e234:	fb13 0007 	smlabb	r0, r3, r7, r0
 800e238:	dd54      	ble.n	800e2e4 <st_sssa8_ch_convolve_dw+0x19d0>
 800e23a:	688b      	ldr	r3, [r1, #8]
 800e23c:	2501      	movs	r5, #1
 800e23e:	6891      	ldr	r1, [r2, #8]
 800e240:	1ea2      	subs	r2, r4, #2
 800e242:	3c01      	subs	r4, #1
 800e244:	fa05 f202 	lsl.w	r2, r5, r2
 800e248:	fb50 2303 	smmla	r3, r0, r3, r2
 800e24c:	4123      	asrs	r3, r4
 800e24e:	440b      	add	r3, r1
 800e250:	f303 0307 	ssat	r3, #8, r3
 800e254:	7033      	strb	r3, [r6, #0]
 800e256:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800e258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e25a:	4413      	add	r3, r2
 800e25c:	9383      	str	r3, [sp, #524]	; 0x20c
 800e25e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e260:	9907      	ldr	r1, [sp, #28]
 800e262:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e264:	4411      	add	r1, r2
 800e266:	3301      	adds	r3, #1
 800e268:	9107      	str	r1, [sp, #28]
 800e26a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e26c:	b21b      	sxth	r3, r3
 800e26e:	4411      	add	r1, r2
 800e270:	9318      	str	r3, [sp, #96]	; 0x60
 800e272:	9110      	str	r1, [sp, #64]	; 0x40
 800e274:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e276:	4411      	add	r1, r2
 800e278:	910f      	str	r1, [sp, #60]	; 0x3c
 800e27a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e27c:	4411      	add	r1, r2
 800e27e:	910d      	str	r1, [sp, #52]	; 0x34
 800e280:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e282:	4411      	add	r1, r2
 800e284:	910c      	str	r1, [sp, #48]	; 0x30
 800e286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e288:	4411      	add	r1, r2
 800e28a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e28c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e28e:	4411      	add	r1, r2
 800e290:	910a      	str	r1, [sp, #40]	; 0x28
 800e292:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e294:	4411      	add	r1, r2
 800e296:	9109      	str	r1, [sp, #36]	; 0x24
 800e298:	9908      	ldr	r1, [sp, #32]
 800e29a:	4411      	add	r1, r2
 800e29c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	9108      	str	r1, [sp, #32]
 800e2a2:	f6ff ac75 	blt.w	800db90 <st_sssa8_ch_convolve_dw+0x127c>
 800e2a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2a8:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	9d04      	ldr	r5, [sp, #16]
 800e2ae:	b21b      	sxth	r3, r3
 800e2b0:	428b      	cmp	r3, r1
 800e2b2:	9317      	str	r3, [sp, #92]	; 0x5c
 800e2b4:	f6ff ac48 	blt.w	800db48 <st_sssa8_ch_convolve_dw+0x1234>
 800e2b8:	f7fe bdf9 	b.w	800ceae <st_sssa8_ch_convolve_dw+0x59a>
 800e2bc:	f1ac 0e02 	sub.w	lr, ip, #2
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e2c6:	680c      	ldr	r4, [r1, #0]
 800e2c8:	fa00 fe0e 	lsl.w	lr, r0, lr
 800e2cc:	6810      	ldr	r0, [r2, #0]
 800e2ce:	fb56 e404 	smmla	r4, r6, r4, lr
 800e2d2:	fa44 f40c 	asr.w	r4, r4, ip
 800e2d6:	4420      	add	r0, r4
 800e2d8:	f300 0007 	ssat	r0, #8, r0
 800e2dc:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800e2de:	f806 0b01 	strb.w	r0, [r6], #1
 800e2e2:	e6dd      	b.n	800e0a0 <st_sssa8_ch_convolve_dw+0x178c>
 800e2e4:	2c00      	cmp	r4, #0
 800e2e6:	dd46      	ble.n	800e376 <st_sssa8_ch_convolve_dw+0x1a62>
 800e2e8:	688b      	ldr	r3, [r1, #8]
 800e2ea:	0040      	lsls	r0, r0, #1
 800e2ec:	6892      	ldr	r2, [r2, #8]
 800e2ee:	fb50 2003 	smmla	r0, r0, r3, r2
 800e2f2:	fa40 f304 	asr.w	r3, r0, r4
 800e2f6:	f303 0307 	ssat	r3, #8, r3
 800e2fa:	7033      	strb	r3, [r6, #0]
 800e2fc:	e7ab      	b.n	800e256 <st_sssa8_ch_convolve_dw+0x1942>
 800e2fe:	f1ae 0802 	sub.w	r8, lr, #2
 800e302:	2001      	movs	r0, #1
 800e304:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e308:	684c      	ldr	r4, [r1, #4]
 800e30a:	fa00 f808 	lsl.w	r8, r0, r8
 800e30e:	6850      	ldr	r0, [r2, #4]
 800e310:	fb5c 8404 	smmla	r4, ip, r4, r8
 800e314:	fa44 f40e 	asr.w	r4, r4, lr
 800e318:	4420      	add	r0, r4
 800e31a:	f300 0007 	ssat	r0, #8, r0
 800e31e:	f806 0b01 	strb.w	r0, [r6], #1
 800e322:	e72e      	b.n	800e182 <st_sssa8_ch_convolve_dw+0x186e>
 800e324:	f1cc 0c01 	rsb	ip, ip, #1
 800e328:	fa06 f40c 	lsl.w	r4, r6, ip
 800e32c:	f304 041f 	ssat	r4, #32, r4
 800e330:	6808      	ldr	r0, [r1, #0]
 800e332:	fb54 f410 	smmulr	r4, r4, r0
 800e336:	6810      	ldr	r0, [r2, #0]
 800e338:	4420      	add	r0, r4
 800e33a:	f300 0007 	ssat	r0, #8, r0
 800e33e:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800e340:	f806 0b01 	strb.w	r0, [r6], #1
 800e344:	e6ac      	b.n	800e0a0 <st_sssa8_ch_convolve_dw+0x178c>
 800e346:	4698      	mov	r8, r3
 800e348:	9f7e      	ldr	r7, [sp, #504]	; 0x1f8
 800e34a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e34e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800e352:	9986      	ldr	r1, [sp, #536]	; 0x218
 800e354:	e638      	b.n	800dfc8 <st_sssa8_ch_convolve_dw+0x16b4>
 800e356:	f1ce 0e01 	rsb	lr, lr, #1
 800e35a:	fa0c f40e 	lsl.w	r4, ip, lr
 800e35e:	f304 041f 	ssat	r4, #32, r4
 800e362:	6848      	ldr	r0, [r1, #4]
 800e364:	fb54 f410 	smmulr	r4, r4, r0
 800e368:	6850      	ldr	r0, [r2, #4]
 800e36a:	4420      	add	r0, r4
 800e36c:	f300 0007 	ssat	r0, #8, r0
 800e370:	f806 0b01 	strb.w	r0, [r6], #1
 800e374:	e705      	b.n	800e182 <st_sssa8_ch_convolve_dw+0x186e>
 800e376:	f1c4 0401 	rsb	r4, r4, #1
 800e37a:	fa00 f304 	lsl.w	r3, r0, r4
 800e37e:	f303 031f 	ssat	r3, #32, r3
 800e382:	6889      	ldr	r1, [r1, #8]
 800e384:	fb53 f311 	smmulr	r3, r3, r1
 800e388:	6892      	ldr	r2, [r2, #8]
 800e38a:	4413      	add	r3, r2
 800e38c:	f303 0307 	ssat	r3, #8, r3
 800e390:	7033      	strb	r3, [r6, #0]
 800e392:	e760      	b.n	800e256 <st_sssa8_ch_convolve_dw+0x1942>
 800e394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e396:	2400      	movs	r4, #0
 800e398:	f8dd 81f8 	ldr.w	r8, [sp, #504]	; 0x1f8
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800e3a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e3a4:	9f86      	ldr	r7, [sp, #536]	; 0x218
 800e3a6:	f7ff b940 	b.w	800d62a <st_sssa8_ch_convolve_dw+0xd16>
 800e3aa:	bf00      	nop

0800e3ac <st_sssa8_ch_convolve_rank1upd>:
 800e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	b085      	sub	sp, #20
 800e3b2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800e3b6:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800e3ba:	fb13 f304 	smulbb	r3, r3, r4
 800e3be:	fb13 f500 	smulbb	r5, r3, r0
 800e3c2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e3c6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800e3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3cc:	2a00      	cmp	r2, #0
 800e3ce:	d074      	beq.n	800e4ba <st_sssa8_ch_convolve_rank1upd+0x10e>
 800e3d0:	b2ad      	uxth	r5, r5
 800e3d2:	f1aa 0a04 	sub.w	sl, sl, #4
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800e3dc:	ea4f 0995 	mov.w	r9, r5, lsr #2
 800e3e0:	f005 0503 	and.w	r5, r5, #3
 800e3e4:	449a      	add	sl, r3
 800e3e6:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 800e3ea:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 800e3ee:	1e69      	subs	r1, r5, #1
 800e3f0:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800e3f4:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800e3f8:	b289      	uxth	r1, r1
 800e3fa:	9100      	str	r1, [sp, #0]
 800e3fc:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800e400:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800e404:	b292      	uxth	r2, r2
 800e406:	9202      	str	r2, [sp, #8]
 800e408:	025a      	lsls	r2, r3, #9
 800e40a:	3301      	adds	r3, #1
 800e40c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e410:	025b      	lsls	r3, r3, #9
 800e412:	9203      	str	r2, [sp, #12]
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800e41a:	d953      	bls.n	800e4c4 <st_sssa8_ch_convolve_rank1upd+0x118>
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800e422:	2600      	movs	r6, #0
 800e424:	eb04 0c03 	add.w	ip, r4, r3
 800e428:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800e42c:	2200      	movs	r2, #0
 800e42e:	f851 3b04 	ldr.w	r3, [r1], #4
 800e432:	fa2f fe83 	sxtb16	lr, r3
 800e436:	4281      	cmp	r1, r0
 800e438:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e43c:	fa92 f21e 	qadd16	r2, r2, lr
 800e440:	fa2f f383 	sxtb16	r3, r3
 800e444:	fa92 f213 	qadd16	r2, r2, r3
 800e448:	d1f1      	bne.n	800e42e <st_sssa8_ch_convolve_rank1upd+0x82>
 800e44a:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800e44e:	b213      	sxth	r3, r2
 800e450:	4560      	cmp	r0, ip
 800e452:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800e456:	4416      	add	r6, r2
 800e458:	d1e6      	bne.n	800e428 <st_sssa8_ch_convolve_rank1upd+0x7c>
 800e45a:	9b01      	ldr	r3, [sp, #4]
 800e45c:	18e1      	adds	r1, r4, r3
 800e45e:	9c02      	ldr	r4, [sp, #8]
 800e460:	b374      	cbz	r4, 800e4c0 <st_sssa8_ch_convolve_rank1upd+0x114>
 800e462:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800e466:	2200      	movs	r2, #0
 800e468:	f851 3b04 	ldr.w	r3, [r1], #4
 800e46c:	fa2f f083 	sxtb16	r0, r3
 800e470:	428c      	cmp	r4, r1
 800e472:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e476:	fa92 f210 	qadd16	r2, r2, r0
 800e47a:	fa2f f383 	sxtb16	r3, r3
 800e47e:	fa92 f213 	qadd16	r2, r2, r3
 800e482:	d1f1      	bne.n	800e468 <st_sssa8_ch_convolve_rank1upd+0xbc>
 800e484:	b213      	sxth	r3, r2
 800e486:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800e48a:	441e      	add	r6, r3
 800e48c:	b16d      	cbz	r5, 800e4aa <st_sssa8_ch_convolve_rank1upd+0xfe>
 800e48e:	f994 3000 	ldrsb.w	r3, [r4]
 800e492:	441e      	add	r6, r3
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	b13b      	cbz	r3, 800e4a8 <st_sssa8_ch_convolve_rank1upd+0xfc>
 800e498:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e49c:	2d02      	cmp	r5, #2
 800e49e:	441e      	add	r6, r3
 800e4a0:	d002      	beq.n	800e4a8 <st_sssa8_ch_convolve_rank1upd+0xfc>
 800e4a2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800e4a6:	441e      	add	r6, r3
 800e4a8:	442c      	add	r4, r5
 800e4aa:	f858 3b04 	ldr.w	r3, [r8], #4
 800e4ae:	fb0b 3616 	mls	r6, fp, r6, r3
 800e4b2:	45b8      	cmp	r8, r7
 800e4b4:	f84a 6f04 	str.w	r6, [sl, #4]!
 800e4b8:	d1ad      	bne.n	800e416 <st_sssa8_ch_convolve_rank1upd+0x6a>
 800e4ba:	b005      	add	sp, #20
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	e7e3      	b.n	800e48c <st_sssa8_ch_convolve_rank1upd+0xe0>
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	464c      	mov	r4, r9
 800e4ca:	e7c9      	b.n	800e460 <st_sssa8_ch_convolve_rank1upd+0xb4>

0800e4cc <st_sssa8_ch_convolve_WeightsPrefetch>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	b082      	sub	sp, #8
 800e4d2:	fb02 fc01 	mul.w	ip, r2, r1
 800e4d6:	f06f 0e09 	mvn.w	lr, #9
 800e4da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e4dc:	fb03 fc0c 	mul.w	ip, r3, ip
 800e4e0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800e4e4:	686e      	ldr	r6, [r5, #4]
 800e4e6:	fb04 fc0c 	mul.w	ip, r4, ip
 800e4ea:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800e4ee:	fb0e 6e01 	mla	lr, lr, r1, r6
 800e4f2:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 800e4f6:	ebbe 0f4c 	cmp.w	lr, ip, lsl #1
 800e4fa:	db15      	blt.n	800e528 <st_sssa8_ch_convolve_WeightsPrefetch+0x5c>
 800e4fc:	fb02 fc03 	mul.w	ip, r2, r3
 800e500:	2f01      	cmp	r7, #1
 800e502:	fb0c fe04 	mul.w	lr, ip, r4
 800e506:	d113      	bne.n	800e530 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800e508:	f1b8 0f01 	cmp.w	r8, #1
 800e50c:	4626      	mov	r6, r4
 800e50e:	d10f      	bne.n	800e530 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800e510:	f8cd e000 	str.w	lr, [sp]
 800e514:	4663      	mov	r3, ip
 800e516:	682c      	ldr	r4, [r5, #0]
 800e518:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800e51c:	4632      	mov	r2, r6
 800e51e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e522:	9401      	str	r4, [sp, #4]
 800e524:	f002 fb18 	bl	8010b58 <st_sssa8_ch_fullW_prefetch>
 800e528:	2000      	movs	r0, #0
 800e52a:	b002      	add	sp, #8
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	fb03 f604 	mul.w	r6, r3, r4
 800e534:	4694      	mov	ip, r2
 800e536:	e7eb      	b.n	800e510 <st_sssa8_ch_convolve_WeightsPrefetch+0x44>

0800e538 <st_sssa8_ch_convolve>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	b09f      	sub	sp, #124	; 0x7c
 800e53e:	4699      	mov	r9, r3
 800e540:	4683      	mov	fp, r0
 800e542:	f8bd 60a4 	ldrh.w	r6, [sp, #164]	; 0xa4
 800e546:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e548:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 800e54c:	921d      	str	r2, [sp, #116]	; 0x74
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	9117      	str	r1, [sp, #92]	; 0x5c
 800e552:	ebc6 7186 	rsb	r1, r6, r6, lsl #30
 800e556:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 800e55a:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	9212      	str	r2, [sp, #72]	; 0x48
 800e562:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800e566:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 800e56a:	9316      	str	r3, [sp, #88]	; 0x58
 800e56c:	9214      	str	r2, [sp, #80]	; 0x50
 800e56e:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 800e572:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800e576:	9213      	str	r2, [sp, #76]	; 0x4c
 800e578:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 800e57c:	f8bd a0ac 	ldrh.w	sl, [sp, #172]	; 0xac
 800e580:	9215      	str	r2, [sp, #84]	; 0x54
 800e582:	f99d 20d4 	ldrsb.w	r2, [sp, #212]	; 0xd4
 800e586:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800e588:	921a      	str	r2, [sp, #104]	; 0x68
 800e58a:	f8bd 20e0 	ldrh.w	r2, [sp, #224]	; 0xe0
 800e58e:	f99d 50d8 	ldrsb.w	r5, [sp, #216]	; 0xd8
 800e592:	921b      	str	r2, [sp, #108]	; 0x6c
 800e594:	f8bd 20e4 	ldrh.w	r2, [sp, #228]	; 0xe4
 800e598:	921c      	str	r2, [sp, #112]	; 0x70
 800e59a:	00b2      	lsls	r2, r6, #2
 800e59c:	9218      	str	r2, [sp, #96]	; 0x60
 800e59e:	2e00      	cmp	r6, #0
 800e5a0:	f000 80a7 	beq.w	800e6f2 <st_sssa8_ch_convolve+0x1ba>
 800e5a4:	46a4      	mov	ip, r4
 800e5a6:	0072      	lsls	r2, r6, #1
 800e5a8:	3104      	adds	r1, #4
 800e5aa:	2701      	movs	r7, #1
 800e5ac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800e5b0:	9219      	str	r2, [sp, #100]	; 0x64
 800e5b2:	f93c 2b02 	ldrsh.w	r2, [ip], #2
 800e5b6:	1e50      	subs	r0, r2, #1
 800e5b8:	fa07 fe02 	lsl.w	lr, r7, r2
 800e5bc:	fa05 f202 	lsl.w	r2, r5, r2
 800e5c0:	b280      	uxth	r0, r0
 800e5c2:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800e5c6:	2814      	cmp	r0, #20
 800e5c8:	d84e      	bhi.n	800e668 <st_sssa8_ch_convolve+0x130>
 800e5ca:	4564      	cmp	r4, ip
 800e5cc:	f841 2c04 	str.w	r2, [r1, #-4]
 800e5d0:	f101 0104 	add.w	r1, r1, #4
 800e5d4:	d1ed      	bne.n	800e5b2 <st_sssa8_ch_convolve+0x7a>
 800e5d6:	4641      	mov	r1, r8
 800e5d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e5da:	f06f 0009 	mvn.w	r0, #9
 800e5de:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e5e0:	1aa4      	subs	r4, r4, r2
 800e5e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e5e4:	fb00 5006 	mla	r0, r0, r6, r5
 800e5e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800e5ea:	1a89      	subs	r1, r1, r2
 800e5ec:	fb06 f209 	mul.w	r2, r6, r9
 800e5f0:	fb03 f202 	mul.w	r2, r3, r2
 800e5f4:	fb0a f202 	mul.w	r2, sl, r2
 800e5f8:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800e5fc:	fb15 f209 	smulbb	r2, r5, r9
 800e600:	bfac      	ite	ge
 800e602:	4640      	movge	r0, r8
 800e604:	2000      	movlt	r0, #0
 800e606:	2b01      	cmp	r3, #1
 800e608:	b292      	uxth	r2, r2
 800e60a:	d108      	bne.n	800e61e <st_sssa8_ch_convolve+0xe6>
 800e60c:	f1ba 0f01 	cmp.w	sl, #1
 800e610:	d105      	bne.n	800e61e <st_sssa8_ch_convolve+0xe6>
 800e612:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e614:	2f01      	cmp	r7, #1
 800e616:	d102      	bne.n	800e61e <st_sssa8_ch_convolve+0xe6>
 800e618:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e61a:	2f01      	cmp	r7, #1
 800e61c:	d04f      	beq.n	800e6be <st_sssa8_ch_convolve+0x186>
 800e61e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e620:	2d01      	cmp	r5, #1
 800e622:	d128      	bne.n	800e676 <st_sssa8_ch_convolve+0x13e>
 800e624:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e626:	2d01      	cmp	r5, #1
 800e628:	d125      	bne.n	800e676 <st_sssa8_ch_convolve+0x13e>
 800e62a:	910c      	str	r1, [sp, #48]	; 0x30
 800e62c:	9401      	str	r4, [sp, #4]
 800e62e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e630:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e632:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e636:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e638:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e63a:	9307      	str	r3, [sp, #28]
 800e63c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e63e:	9400      	str	r4, [sp, #0]
 800e640:	9306      	str	r3, [sp, #24]
 800e642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e644:	9305      	str	r3, [sp, #20]
 800e646:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e648:	e9cd 800d 	strd	r8, r0, [sp, #52]	; 0x34
 800e64c:	e9cd a10a 	strd	sl, r1, [sp, #40]	; 0x28
 800e650:	9304      	str	r3, [sp, #16]
 800e652:	4658      	mov	r0, fp
 800e654:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e656:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e658:	e9cd 6902 	strd	r6, r9, [sp, #8]
 800e65c:	f003 f8c8 	bl	80117f0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 800e660:	2000      	movs	r0, #0
 800e662:	b01f      	add	sp, #124	; 0x7c
 800e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e668:	4564      	cmp	r4, ip
 800e66a:	f841 5c04 	str.w	r5, [r1, #-4]
 800e66e:	f101 0104 	add.w	r1, r1, #4
 800e672:	d19e      	bne.n	800e5b2 <st_sssa8_ch_convolve+0x7a>
 800e674:	e7af      	b.n	800e5d6 <st_sssa8_ch_convolve+0x9e>
 800e676:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e67a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e67c:	910e      	str	r1, [sp, #56]	; 0x38
 800e67e:	9309      	str	r3, [sp, #36]	; 0x24
 800e680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e682:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e684:	9308      	str	r3, [sp, #32]
 800e686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e688:	9010      	str	r0, [sp, #64]	; 0x40
 800e68a:	4658      	mov	r0, fp
 800e68c:	9307      	str	r3, [sp, #28]
 800e68e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e690:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e692:	9306      	str	r3, [sp, #24]
 800e694:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e696:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e69e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800e6a2:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e6a4:	e9cd a10c 	strd	sl, r1, [sp, #48]	; 0x30
 800e6a8:	e9cd 9303 	strd	r9, r3, [sp, #12]
 800e6ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e6ae:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e6b0:	9400      	str	r4, [sp, #0]
 800e6b2:	f003 fe8d 	bl	80123d0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	b01f      	add	sp, #124	; 0x7c
 800e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	9401      	str	r4, [sp, #4]
 800e6c4:	fb03 f202 	mul.w	r2, r3, r2
 800e6c8:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e6ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e6cc:	9106      	str	r1, [sp, #24]
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e6d2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e6d4:	f8cd 9010 	str.w	r9, [sp, #16]
 800e6d8:	9400      	str	r4, [sp, #0]
 800e6da:	e9cd 8007 	strd	r8, r0, [sp, #28]
 800e6de:	e9cd 2602 	strd	r2, r6, [sp, #8]
 800e6e2:	4658      	mov	r0, fp
 800e6e4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e6e6:	f002 fa77 	bl	8010bd8 <st_sssa8_ch_nn_mat_mult_nt_t>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	b01f      	add	sp, #124	; 0x7c
 800e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f2:	9619      	str	r6, [sp, #100]	; 0x64
 800e6f4:	e770      	b.n	800e5d8 <st_sssa8_ch_convolve+0xa0>
 800e6f6:	bf00      	nop

0800e6f8 <st_sssa8_ch_convolve_startNN>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b08 	vpush	{d8-d11}
 800e700:	b0cf      	sub	sp, #316	; 0x13c
 800e702:	469a      	mov	sl, r3
 800e704:	468b      	mov	fp, r1
 800e706:	920a      	str	r2, [sp, #40]	; 0x28
 800e708:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 800e70c:	f8bd 418c 	ldrh.w	r4, [sp, #396]	; 0x18c
 800e710:	4611      	mov	r1, r2
 800e712:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800e714:	ee09 2a10 	vmov	s18, r2
 800e718:	9009      	str	r0, [sp, #36]	; 0x24
 800e71a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e71e:	f8bd 0188 	ldrh.w	r0, [sp, #392]	; 0x188
 800e722:	f99d 81ac 	ldrsb.w	r8, [sp, #428]	; 0x1ac
 800e726:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e72a:	460a      	mov	r2, r1
 800e72c:	fb10 f304 	smulbb	r3, r0, r4
 800e730:	9019      	str	r0, [sp, #100]	; 0x64
 800e732:	f8bd 01b8 	ldrh.w	r0, [sp, #440]	; 0x1b8
 800e736:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e73a:	fb13 f30a 	smulbb	r3, r3, sl
 800e73e:	f99d 61b0 	ldrsb.w	r6, [sp, #432]	; 0x1b0
 800e742:	900f      	str	r0, [sp, #60]	; 0x3c
 800e744:	b29b      	uxth	r3, r3
 800e746:	f8bd 01bc 	ldrh.w	r0, [sp, #444]	; 0x1bc
 800e74a:	9420      	str	r4, [sp, #128]	; 0x80
 800e74c:	9315      	str	r3, [sp, #84]	; 0x54
 800e74e:	ebc1 7341 	rsb	r3, r1, r1, lsl #29
 800e752:	f8bd 1190 	ldrh.w	r1, [sp, #400]	; 0x190
 800e756:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e75a:	9514      	str	r5, [sp, #80]	; 0x50
 800e75c:	9116      	str	r1, [sp, #88]	; 0x58
 800e75e:	f8bd 1194 	ldrh.w	r1, [sp, #404]	; 0x194
 800e762:	ee0a 3a10 	vmov	s20, r3
 800e766:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e76a:	901f      	str	r0, [sp, #124]	; 0x7c
 800e76c:	9121      	str	r1, [sp, #132]	; 0x84
 800e76e:	f8bd 1198 	ldrh.w	r1, [sp, #408]	; 0x198
 800e772:	931d      	str	r3, [sp, #116]	; 0x74
 800e774:	910e      	str	r1, [sp, #56]	; 0x38
 800e776:	f8bd 119c 	ldrh.w	r1, [sp, #412]	; 0x19c
 800e77a:	911b      	str	r1, [sp, #108]	; 0x6c
 800e77c:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800e77e:	2a00      	cmp	r2, #0
 800e780:	f000 866d 	beq.w	800f45e <st_sssa8_ch_convolve_startNN+0xd66>
 800e784:	1d18      	adds	r0, r3, #4
 800e786:	2501      	movs	r5, #1
 800e788:	0053      	lsls	r3, r2, #1
 800e78a:	eb01 0742 	add.w	r7, r1, r2, lsl #1
 800e78e:	9318      	str	r3, [sp, #96]	; 0x60
 800e790:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800e794:	1e5a      	subs	r2, r3, #1
 800e796:	fa05 f403 	lsl.w	r4, r5, r3
 800e79a:	fa06 f303 	lsl.w	r3, r6, r3
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800e7a4:	2a14      	cmp	r2, #20
 800e7a6:	d85b      	bhi.n	800e860 <st_sssa8_ch_convolve_startNN+0x168>
 800e7a8:	428f      	cmp	r7, r1
 800e7aa:	f840 3c04 	str.w	r3, [r0, #-4]
 800e7ae:	f100 0004 	add.w	r0, r0, #4
 800e7b2:	d1ed      	bne.n	800e790 <st_sssa8_ch_convolve_startNN+0x98>
 800e7b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e7bc:	aa2e      	add	r2, sp, #184	; 0xb8
 800e7be:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800e7c0:	a83a      	add	r0, sp, #232	; 0xe8
 800e7c2:	1acb      	subs	r3, r1, r3
 800e7c4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e7c6:	a944      	add	r1, sp, #272	; 0x110
 800e7c8:	9438      	str	r4, [sp, #224]	; 0xe0
 800e7ca:	931c      	str	r3, [sp, #112]	; 0x70
 800e7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ce:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800e7d2:	932f      	str	r3, [sp, #188]	; 0xbc
 800e7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7d6:	9537      	str	r5, [sp, #220]	; 0xdc
 800e7d8:	9334      	str	r3, [sp, #208]	; 0xd0
 800e7da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7dc:	9333      	str	r3, [sp, #204]	; 0xcc
 800e7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7e0:	9346      	str	r3, [sp, #280]	; 0x118
 800e7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800e7e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7e8:	9348      	str	r3, [sp, #288]	; 0x120
 800e7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ec:	9349      	str	r3, [sp, #292]	; 0x124
 800e7ee:	ab36      	add	r3, sp, #216	; 0xd8
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	ab32      	add	r3, sp, #200	; 0xc8
 800e7f4:	f001 f936 	bl	800fa64 <ai_padding_opt_init>
 800e7f8:	fb05 f304 	mul.w	r3, r5, r4
 800e7fc:	ee19 2a10 	vmov	r2, s18
 800e800:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e802:	fb0a f303 	mul.w	r3, sl, r3
 800e806:	ee19 0a10 	vmov	r0, s18
 800e80a:	fb02 f303 	mul.w	r3, r2, r3
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e814:	bfd4      	ite	le
 800e816:	ebc9 0203 	rsble	r2, r9, r3
 800e81a:	f5c9 52a0 	rsbgt	r2, r9, #5120	; 0x1400
 800e81e:	fb0a f904 	mul.w	r9, sl, r4
 800e822:	fb09 f305 	mul.w	r3, r9, r5
 800e826:	2a00      	cmp	r2, #0
 800e828:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e82c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e82e:	bfb8      	it	lt
 800e830:	3201      	addlt	r2, #1
 800e832:	ee09 3a90 	vmov	s19, r3
 800e836:	fb00 f301 	mul.w	r3, r0, r1
 800e83a:	1054      	asrs	r4, r2, #1
 800e83c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800e840:	dc15      	bgt.n	800e86e <st_sssa8_ch_convolve_startNN+0x176>
 800e842:	f01a 0f03 	tst.w	sl, #3
 800e846:	f040 8165 	bne.w	800eb14 <st_sssa8_ch_convolve_startNN+0x41c>
 800e84a:	ee19 3a10 	vmov	r3, s18
 800e84e:	460a      	mov	r2, r1
 800e850:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e852:	ee19 1a90 	vmov	r1, s19
 800e856:	f001 ff8f 	bl	8010778 <st_int8_to16_dual_interleaved>
 800e85a:	2301      	movs	r3, #1
 800e85c:	932a      	str	r3, [sp, #168]	; 0xa8
 800e85e:	e008      	b.n	800e872 <st_sssa8_ch_convolve_startNN+0x17a>
 800e860:	428f      	cmp	r7, r1
 800e862:	f840 6c04 	str.w	r6, [r0, #-4]
 800e866:	f100 0004 	add.w	r0, r0, #4
 800e86a:	d191      	bne.n	800e790 <st_sssa8_ch_convolve_startNN+0x98>
 800e86c:	e7a2      	b.n	800e7b4 <st_sssa8_ch_convolve_startNN+0xbc>
 800e86e:	2300      	movs	r3, #0
 800e870:	932a      	str	r3, [sp, #168]	; 0xa8
 800e872:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e874:	ee19 1a10 	vmov	r1, s18
 800e878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e87a:	fb02 f303 	mul.w	r3, r2, r3
 800e87e:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e880:	fb01 2303 	mla	r3, r1, r3, r2
 800e884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e886:	429a      	cmp	r2, r3
 800e888:	f080 8131 	bcs.w	800eaee <st_sssa8_ch_convolve_startNN+0x3f6>
 800e88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e88e:	fb03 f30b 	mul.w	r3, r3, fp
 800e892:	fb0a 2303 	mla	r3, sl, r3, r2
 800e896:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e898:	429a      	cmp	r2, r3
 800e89a:	bf2c      	ite	cs
 800e89c:	2300      	movcs	r3, #0
 800e89e:	2301      	movcc	r3, #1
 800e8a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e8a2:	ee19 1a10 	vmov	r1, s18
 800e8a6:	fb94 f2f2 	sdiv	r2, r4, r2
 800e8aa:	b292      	uxth	r2, r2
 800e8ac:	428a      	cmp	r2, r1
 800e8ae:	bf28      	it	cs
 800e8b0:	460a      	movcs	r2, r1
 800e8b2:	2a01      	cmp	r2, #1
 800e8b4:	921a      	str	r2, [sp, #104]	; 0x68
 800e8b6:	f240 81fa 	bls.w	800ecae <st_sssa8_ch_convolve_startNN+0x5b6>
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	ee19 2a10 	vmov	r2, s18
 800e8c0:	fbb1 f1f0 	udiv	r1, r1, r0
 800e8c4:	fb00 2211 	mls	r2, r0, r1, r2
 800e8c8:	b289      	uxth	r1, r1
 800e8ca:	b292      	uxth	r2, r2
 800e8cc:	9127      	str	r1, [sp, #156]	; 0x9c
 800e8ce:	2a00      	cmp	r2, #0
 800e8d0:	f000 810f 	beq.w	800eaf2 <st_sssa8_ch_convolve_startNN+0x3fa>
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f040 83b6 	bne.w	800f046 <st_sssa8_ch_convolve_startNN+0x94e>
 800e8da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8dc:	fa0f f688 	sxth.w	r6, r8
 800e8e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e8e2:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800e8e6:	fb03 f30a 	mul.w	r3, r3, sl
 800e8ea:	ee08 6a90 	vmov	s17, r6
 800e8ee:	fb02 f303 	mul.w	r3, r2, r3
 800e8f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8f8:	9312      	str	r3, [sp, #72]	; 0x48
 800e8fa:	f00a 0303 	and.w	r3, sl, #3
 800e8fe:	930c      	str	r3, [sp, #48]	; 0x30
 800e900:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800e904:	9313      	str	r3, [sp, #76]	; 0x4c
 800e906:	ee19 3a10 	vmov	r3, s18
 800e90a:	e9cd 8322 	strd	r8, r3, [sp, #136]	; 0x88
 800e90e:	465b      	mov	r3, fp
 800e910:	46d0      	mov	r8, sl
 800e912:	46cb      	mov	fp, r9
 800e914:	4699      	mov	r9, r3
 800e916:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e918:	b953      	cbnz	r3, 800e930 <st_sssa8_ch_convolve_startNN+0x238>
 800e91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f040 81be 	bne.w	800ec9e <st_sssa8_ch_convolve_startNN+0x5a6>
 800e922:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e924:	ee19 1a90 	vmov	r1, s19
 800e928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e92a:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e92c:	f001 ff24 	bl	8010778 <st_int8_to16_dual_interleaved>
 800e930:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 80af 	beq.w	800ea96 <st_sssa8_ch_convolve_startNN+0x39e>
 800e938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e93a:	2400      	movs	r4, #0
 800e93c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e93e:	425b      	negs	r3, r3
 800e940:	4626      	mov	r6, r4
 800e942:	b29b      	uxth	r3, r3
 800e944:	9318      	str	r3, [sp, #96]	; 0x60
 800e946:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800e948:	9317      	str	r3, [sp, #92]	; 0x5c
 800e94a:	a83a      	add	r0, sp, #232	; 0xe8
 800e94c:	f001 f8e4 	bl	800fb18 <ai_padding_opt_phase1>
 800e950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 81a0 	beq.w	800ec98 <st_sssa8_ch_convolve_startNN+0x5a0>
 800e958:	b2a3      	uxth	r3, r4
 800e95a:	2100      	movs	r1, #0
 800e95c:	931e      	str	r3, [sp, #120]	; 0x78
 800e95e:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800e962:	1a9b      	subs	r3, r3, r2
 800e964:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e966:	fb06 3302 	mla	r3, r6, r2, r3
 800e96a:	460a      	mov	r2, r1
 800e96c:	9308      	str	r3, [sp, #32]
 800e96e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e970:	425b      	negs	r3, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	9307      	str	r3, [sp, #28]
 800e976:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800e97a:	9311      	str	r3, [sp, #68]	; 0x44
 800e97c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80ec 	beq.w	800eb5c <st_sssa8_ch_convolve_startNN+0x464>
 800e984:	3b01      	subs	r3, #1
 800e986:	933a      	str	r3, [sp, #232]	; 0xe8
 800e988:	2301      	movs	r3, #1
 800e98a:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e98e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e990:	9808      	ldr	r0, [sp, #32]
 800e992:	4283      	cmp	r3, r0
 800e994:	f280 80f0 	bge.w	800eb78 <st_sssa8_ch_convolve_startNN+0x480>
 800e998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e99a:	ee08 ba10 	vmov	s16, fp
 800e99e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e9a0:	46c3      	mov	fp, r8
 800e9a2:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800e9a6:	ee18 7a90 	vmov	r7, s17
 800e9aa:	fb02 3200 	mla	r2, r2, r0, r3
 800e9ae:	b28b      	uxth	r3, r1
 800e9b0:	930d      	str	r3, [sp, #52]	; 0x34
 800e9b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e9b4:	1ad4      	subs	r4, r2, r3
 800e9b6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9be:	461a      	mov	r2, r3
 800e9c0:	9306      	str	r3, [sp, #24]
 800e9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	dd27      	ble.n	800ea18 <st_sssa8_ch_convolve_startNN+0x320>
 800e9c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9ca:	4291      	cmp	r1, r2
 800e9cc:	fb09 f202 	mul.w	r2, r9, r2
 800e9d0:	bfcc      	ite	gt
 800e9d2:	f04f 0800 	movgt.w	r8, #0
 800e9d6:	f04f 0801 	movle.w	r8, #1
 800e9da:	9210      	str	r2, [sp, #64]	; 0x40
 800e9dc:	9a06      	ldr	r2, [sp, #24]
 800e9de:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800e9e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9e4:	2a00      	cmp	r2, #0
 800e9e6:	f000 80a0 	beq.w	800eb2a <st_sssa8_ch_convolve_startNN+0x432>
 800e9ea:	461e      	mov	r6, r3
 800e9ec:	469e      	mov	lr, r3
 800e9ee:	0ff3      	lsrs	r3, r6, #31
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	465a      	mov	r2, fp
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	45f1      	cmp	r9, lr
 800e9f8:	bfd8      	it	le
 800e9fa:	f043 0301 	orrle.w	r3, r3, #1
 800e9fe:	b91b      	cbnz	r3, 800ea08 <st_sssa8_ch_convolve_startNN+0x310>
 800ea00:	f1b8 0f00 	cmp.w	r8, #0
 800ea04:	f000 813f 	beq.w	800ec86 <st_sssa8_ch_convolve_startNN+0x58e>
 800ea08:	f005 fb4e 	bl	80140a8 <st_dsp_arm_fill_q15>
 800ea0c:	3601      	adds	r6, #1
 800ea0e:	4455      	add	r5, sl
 800ea10:	b236      	sxth	r6, r6
 800ea12:	42b4      	cmp	r4, r6
 800ea14:	46b6      	mov	lr, r6
 800ea16:	dcea      	bgt.n	800e9ee <st_sssa8_ch_convolve_startNN+0x2f6>
 800ea18:	9a06      	ldr	r2, [sp, #24]
 800ea1a:	9908      	ldr	r1, [sp, #32]
 800ea1c:	3201      	adds	r2, #1
 800ea1e:	b213      	sxth	r3, r2
 800ea20:	428b      	cmp	r3, r1
 800ea22:	461a      	mov	r2, r3
 800ea24:	9306      	str	r3, [sp, #24]
 800ea26:	dbcc      	blt.n	800e9c2 <st_sssa8_ch_convolve_startNN+0x2ca>
 800ea28:	46d8      	mov	r8, fp
 800ea2a:	ee18 ba10 	vmov	fp, s16
 800ea2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea30:	42ab      	cmp	r3, r5
 800ea32:	f000 80a7 	beq.w	800eb84 <st_sssa8_ch_convolve_startNN+0x48c>
 800ea36:	9b07      	ldr	r3, [sp, #28]
 800ea38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ea3c:	4413      	add	r3, r2
 800ea3e:	3101      	adds	r1, #1
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b209      	sxth	r1, r1
 800ea44:	9307      	str	r3, [sp, #28]
 800ea46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea48:	460a      	mov	r2, r1
 800ea4a:	428b      	cmp	r3, r1
 800ea4c:	dc96      	bgt.n	800e97c <st_sssa8_ch_convolve_startNN+0x284>
 800ea4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ea50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ea52:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ea54:	4413      	add	r3, r2
 800ea56:	3401      	adds	r4, #1
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	b224      	sxth	r4, r4
 800ea5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ea5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea60:	4626      	mov	r6, r4
 800ea62:	42a3      	cmp	r3, r4
 800ea64:	f73f af71 	bgt.w	800e94a <st_sssa8_ch_convolve_startNN+0x252>
 800ea68:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ea6a:	42a9      	cmp	r1, r5
 800ea6c:	d013      	beq.n	800ea96 <st_sssa8_ch_convolve_startNN+0x39e>
 800ea6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea70:	ee1a 2a10 	vmov	r2, s20
 800ea74:	ee19 0a90 	vmov	r0, s19
 800ea78:	9305      	str	r3, [sp, #20]
 800ea7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea7c:	9304      	str	r3, [sp, #16]
 800ea7e:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800ea80:	9303      	str	r3, [sp, #12]
 800ea82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea84:	9302      	str	r3, [sp, #8]
 800ea86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	ee19 3a10 	vmov	r3, s18
 800ea92:	f004 ff21 	bl	80138d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800ea96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ea98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea9a:	1a9b      	subs	r3, r3, r2
 800ea9c:	b299      	uxth	r1, r3
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	428a      	cmp	r2, r1
 800eaa2:	9123      	str	r1, [sp, #140]	; 0x8c
 800eaa4:	bf28      	it	cs
 800eaa6:	460b      	movcs	r3, r1
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	b1cb      	cbz	r3, 800eae0 <st_sssa8_ch_convolve_startNN+0x3e8>
 800eaac:	9960      	ldr	r1, [sp, #384]	; 0x180
 800eaae:	9815      	ldr	r0, [sp, #84]	; 0x54
 800eab0:	fb00 1102 	mla	r1, r0, r2, r1
 800eab4:	9160      	str	r1, [sp, #384]	; 0x180
 800eab6:	ee1a 1a10 	vmov	r1, s20
 800eaba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eabe:	ee0a 1a10 	vmov	s20, r1
 800eac2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eac4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800eac8:	911c      	str	r1, [sp, #112]	; 0x70
 800eaca:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800eacc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ead0:	9169      	str	r1, [sp, #420]	; 0x1a4
 800ead2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ead4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ead8:	911d      	str	r1, [sp, #116]	; 0x74
 800eada:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 800eadc:	4411      	add	r1, r2
 800eade:	916d      	str	r1, [sp, #436]	; 0x1b4
 800eae0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800eae2:	1e4a      	subs	r2, r1, #1
 800eae4:	b292      	uxth	r2, r2
 800eae6:	b179      	cbz	r1, 800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800eae8:	9227      	str	r2, [sp, #156]	; 0x9c
 800eaea:	931a      	str	r3, [sp, #104]	; 0x68
 800eaec:	e713      	b.n	800e916 <st_sssa8_ch_convolve_startNN+0x21e>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e6d6      	b.n	800e8a0 <st_sssa8_ch_convolve_startNN+0x1a8>
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 82ab 	bne.w	800f04e <st_sssa8_ch_convolve_startNN+0x956>
 800eaf8:	1e4b      	subs	r3, r1, #1
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	9327      	str	r3, [sp, #156]	; 0x9c
 800eafe:	ee19 3a10 	vmov	r3, s18
 800eb02:	4283      	cmp	r3, r0
 800eb04:	f4bf aee9 	bcs.w	800e8da <st_sssa8_ch_convolve_startNN+0x1e2>
 800eb08:	2000      	movs	r0, #0
 800eb0a:	b04f      	add	sp, #316	; 0x13c
 800eb0c:	ecbd 8b08 	vpop	{d8-d11}
 800eb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb14:	460a      	mov	r2, r1
 800eb16:	ee19 3a10 	vmov	r3, s18
 800eb1a:	ee19 1a90 	vmov	r1, s19
 800eb1e:	9860      	ldr	r0, [sp, #384]	; 0x180
 800eb20:	f001 fcca 	bl	80104b8 <st_int8_to16_dual>
 800eb24:	2301      	movs	r3, #1
 800eb26:	932a      	str	r3, [sp, #168]	; 0xa8
 800eb28:	e6a3      	b.n	800e872 <st_sssa8_ch_convolve_startNN+0x17a>
 800eb2a:	469c      	mov	ip, r3
 800eb2c:	461e      	mov	r6, r3
 800eb2e:	45e1      	cmp	r9, ip
 800eb30:	465a      	mov	r2, fp
 800eb32:	4629      	mov	r1, r5
 800eb34:	4638      	mov	r0, r7
 800eb36:	bfcc      	ite	gt
 800eb38:	2300      	movgt	r3, #0
 800eb3a:	2301      	movle	r3, #1
 800eb3c:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800eb40:	d103      	bne.n	800eb4a <st_sssa8_ch_convolve_startNN+0x452>
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	f000 8095 	beq.w	800ec74 <st_sssa8_ch_convolve_startNN+0x57c>
 800eb4a:	f005 faad 	bl	80140a8 <st_dsp_arm_fill_q15>
 800eb4e:	3601      	adds	r6, #1
 800eb50:	4455      	add	r5, sl
 800eb52:	b236      	sxth	r6, r6
 800eb54:	42a6      	cmp	r6, r4
 800eb56:	46b4      	mov	ip, r6
 800eb58:	dbe9      	blt.n	800eb2e <st_sssa8_ch_convolve_startNN+0x436>
 800eb5a:	e75d      	b.n	800ea18 <st_sssa8_ch_convolve_startNN+0x320>
 800eb5c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d135      	bne.n	800ebce <st_sssa8_ch_convolve_startNN+0x4d6>
 800eb62:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800eb64:	9808      	ldr	r0, [sp, #32]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	933c      	str	r3, [sp, #240]	; 0xf0
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800eb70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb72:	4283      	cmp	r3, r0
 800eb74:	f6ff af10 	blt.w	800e998 <st_sssa8_ch_convolve_startNN+0x2a0>
 800eb78:	b28b      	uxth	r3, r1
 800eb7a:	930d      	str	r3, [sp, #52]	; 0x34
 800eb7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb7e:	42ab      	cmp	r3, r5
 800eb80:	f47f af59 	bne.w	800ea36 <st_sssa8_ch_convolve_startNN+0x33e>
 800eb84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb86:	ee1a 2a10 	vmov	r2, s20
 800eb8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eb8c:	ee19 0a90 	vmov	r0, s19
 800eb90:	9305      	str	r3, [sp, #20]
 800eb92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb94:	9304      	str	r3, [sp, #16]
 800eb96:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800eb98:	9303      	str	r3, [sp, #12]
 800eb9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eb9c:	9302      	str	r3, [sp, #8]
 800eb9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	ee19 3a10 	vmov	r3, s18
 800ebaa:	f004 fb71 	bl	8013290 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800ebae:	9b07      	ldr	r3, [sp, #28]
 800ebb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ebb4:	4413      	add	r3, r2
 800ebb6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ebb8:	3101      	adds	r1, #1
 800ebba:	9017      	str	r0, [sp, #92]	; 0x5c
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	b209      	sxth	r1, r1
 800ebc0:	9307      	str	r3, [sp, #28]
 800ebc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	428b      	cmp	r3, r1
 800ebc8:	f73f aed8 	bgt.w	800e97c <st_sssa8_ch_convolve_startNN+0x284>
 800ebcc:	e73f      	b.n	800ea4e <st_sssa8_ch_convolve_startNN+0x356>
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	933b      	str	r3, [sp, #236]	; 0xec
 800ebd2:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800ebdc:	f43f aed7 	beq.w	800e98e <st_sssa8_ch_convolve_startNN+0x296>
 800ebe0:	b28b      	uxth	r3, r1
 800ebe2:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800ebe6:	930d      	str	r3, [sp, #52]	; 0x34
 800ebe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebea:	bb0b      	cbnz	r3, 800ec30 <st_sssa8_ch_convolve_startNN+0x538>
 800ebec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebee:	9908      	ldr	r1, [sp, #32]
 800ebf0:	428b      	cmp	r3, r1
 800ebf2:	f6bf af1c 	bge.w	800ea2e <st_sssa8_ch_convolve_startNN+0x336>
 800ebf6:	465a      	mov	r2, fp
 800ebf8:	464f      	mov	r7, r9
 800ebfa:	46ab      	mov	fp, r5
 800ebfc:	461e      	mov	r6, r3
 800ebfe:	4625      	mov	r5, r4
 800ec00:	4618      	mov	r0, r3
 800ec02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ec04:	4689      	mov	r9, r1
 800ec06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ec0a:	3601      	adds	r6, #1
 800ec0c:	fb00 5007 	mla	r0, r0, r7, r5
 800ec10:	4659      	mov	r1, fp
 800ec12:	9206      	str	r2, [sp, #24]
 800ec14:	b236      	sxth	r6, r6
 800ec16:	fb08 a000 	mla	r0, r8, r0, sl
 800ec1a:	f001 fbfd 	bl	8010418 <st_int8_to16_no_shift_interleaved>
 800ec1e:	44a3      	add	fp, r4
 800ec20:	454e      	cmp	r6, r9
 800ec22:	4630      	mov	r0, r6
 800ec24:	9a06      	ldr	r2, [sp, #24]
 800ec26:	dbf0      	blt.n	800ec0a <st_sssa8_ch_convolve_startNN+0x512>
 800ec28:	465d      	mov	r5, fp
 800ec2a:	46b9      	mov	r9, r7
 800ec2c:	4693      	mov	fp, r2
 800ec2e:	e6fe      	b.n	800ea2e <st_sssa8_ch_convolve_startNN+0x336>
 800ec30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec32:	9908      	ldr	r1, [sp, #32]
 800ec34:	428b      	cmp	r3, r1
 800ec36:	f6bf aefa 	bge.w	800ea2e <st_sssa8_ch_convolve_startNN+0x336>
 800ec3a:	465a      	mov	r2, fp
 800ec3c:	464f      	mov	r7, r9
 800ec3e:	46ab      	mov	fp, r5
 800ec40:	461e      	mov	r6, r3
 800ec42:	4625      	mov	r5, r4
 800ec44:	4618      	mov	r0, r3
 800ec46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ec48:	4689      	mov	r9, r1
 800ec4a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ec4e:	3601      	adds	r6, #1
 800ec50:	fb00 5007 	mla	r0, r0, r7, r5
 800ec54:	4659      	mov	r1, fp
 800ec56:	9206      	str	r2, [sp, #24]
 800ec58:	b236      	sxth	r6, r6
 800ec5a:	fb08 a000 	mla	r0, r8, r0, sl
 800ec5e:	f001 fb45 	bl	80102ec <st_int8_to16_no_shift>
 800ec62:	44a3      	add	fp, r4
 800ec64:	454e      	cmp	r6, r9
 800ec66:	4630      	mov	r0, r6
 800ec68:	9a06      	ldr	r2, [sp, #24]
 800ec6a:	dbf0      	blt.n	800ec4e <st_sssa8_ch_convolve_startNN+0x556>
 800ec6c:	465d      	mov	r5, fp
 800ec6e:	46b9      	mov	r9, r7
 800ec70:	4693      	mov	fp, r2
 800ec72:	e6dc      	b.n	800ea2e <st_sssa8_ch_convolve_startNN+0x336>
 800ec74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec76:	eb03 000c 	add.w	r0, r3, ip
 800ec7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec7c:	fb0b 3000 	mla	r0, fp, r0, r3
 800ec80:	f001 fbca 	bl	8010418 <st_int8_to16_no_shift_interleaved>
 800ec84:	e763      	b.n	800eb4e <st_sssa8_ch_convolve_startNN+0x456>
 800ec86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec88:	eb03 000e 	add.w	r0, r3, lr
 800ec8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec8e:	fb0b 3000 	mla	r0, fp, r0, r3
 800ec92:	f001 fb2b 	bl	80102ec <st_int8_to16_no_shift>
 800ec96:	e6b9      	b.n	800ea0c <st_sssa8_ch_convolve_startNN+0x314>
 800ec98:	b2a3      	uxth	r3, r4
 800ec9a:	931e      	str	r3, [sp, #120]	; 0x78
 800ec9c:	e6d7      	b.n	800ea4e <st_sssa8_ch_convolve_startNN+0x356>
 800ec9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800eca0:	ee19 1a90 	vmov	r1, s19
 800eca4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eca6:	9860      	ldr	r0, [sp, #384]	; 0x180
 800eca8:	f001 fc06 	bl	80104b8 <st_int8_to16_dual>
 800ecac:	e640      	b.n	800e930 <st_sssa8_ch_convolve_startNN+0x238>
 800ecae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f43f af29 	beq.w	800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800ecb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ecb8:	fa0f f888 	sxth.w	r8, r8
 800ecbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ecbe:	2400      	movs	r4, #0
 800ecc0:	fb03 f30a 	mul.w	r3, r3, sl
 800ecc4:	ee08 9a90 	vmov	s17, r9
 800ecc8:	4647      	mov	r7, r8
 800ecca:	4625      	mov	r5, r4
 800eccc:	fb02 f303 	mul.w	r3, r2, r3
 800ecd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecd2:	46d8      	mov	r8, fp
 800ecd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecd8:	4693      	mov	fp, r2
 800ecda:	9311      	str	r3, [sp, #68]	; 0x44
 800ecdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecde:	425b      	negs	r3, r3
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	9313      	str	r3, [sp, #76]	; 0x4c
 800ece4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800ece8:	9312      	str	r3, [sp, #72]	; 0x48
 800ecea:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800ecee:	4699      	mov	r9, r3
 800ecf0:	a83a      	add	r0, sp, #232	; 0xe8
 800ecf2:	f000 ff11 	bl	800fb18 <ai_padding_opt_phase1>
 800ecf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f000 819a 	beq.w	800f032 <st_sssa8_ch_convolve_startNN+0x93a>
 800ecfe:	b2a3      	uxth	r3, r4
 800ed00:	2000      	movs	r0, #0
 800ed02:	931a      	str	r3, [sp, #104]	; 0x68
 800ed04:	4601      	mov	r1, r0
 800ed06:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800ed0a:	1a9a      	subs	r2, r3, r2
 800ed0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed0e:	fb05 2303 	mla	r3, r5, r3, r2
 800ed12:	9308      	str	r3, [sp, #32]
 800ed14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ed16:	425a      	negs	r2, r3
 800ed18:	b293      	uxth	r3, r2
 800ed1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed1c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800ed20:	9310      	str	r3, [sp, #64]	; 0x40
 800ed22:	465b      	mov	r3, fp
 800ed24:	46cb      	mov	fp, r9
 800ed26:	4699      	mov	r9, r3
 800ed28:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800ed2a:	2a00      	cmp	r2, #0
 800ed2c:	f000 80f6 	beq.w	800ef1c <st_sssa8_ch_convolve_startNN+0x824>
 800ed30:	3a01      	subs	r2, #1
 800ed32:	923a      	str	r2, [sp, #232]	; 0xe8
 800ed34:	2201      	movs	r2, #1
 800ed36:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ed3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed3c:	9a08      	ldr	r2, [sp, #32]
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	f280 80fa 	bge.w	800ef38 <st_sssa8_ch_convolve_startNN+0x840>
 800ed44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed48:	fb01 3102 	mla	r1, r1, r2, r3
 800ed4c:	b283      	uxth	r3, r0
 800ed4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ed50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ed52:	1acd      	subs	r5, r1, r3
 800ed54:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ed58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	9306      	str	r3, [sp, #24]
 800ed60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed62:	42ab      	cmp	r3, r5
 800ed64:	da20      	bge.n	800eda8 <st_sssa8_ch_convolve_startNN+0x6b0>
 800ed66:	9906      	ldr	r1, [sp, #24]
 800ed68:	461c      	mov	r4, r3
 800ed6a:	469c      	mov	ip, r3
 800ed6c:	0fce      	lsrs	r6, r1, #31
 800ed6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed70:	4291      	cmp	r1, r2
 800ed72:	bfd8      	it	le
 800ed74:	f046 0601 	orrle.w	r6, r6, #1
 800ed78:	fb02 f208 	mul.w	r2, r2, r8
 800ed7c:	9207      	str	r2, [sp, #28]
 800ed7e:	45e0      	cmp	r8, ip
 800ed80:	4652      	mov	r2, sl
 800ed82:	4649      	mov	r1, r9
 800ed84:	4638      	mov	r0, r7
 800ed86:	bfcc      	ite	gt
 800ed88:	2300      	movgt	r3, #0
 800ed8a:	2301      	movle	r3, #1
 800ed8c:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800ed90:	d102      	bne.n	800ed98 <st_sssa8_ch_convolve_startNN+0x6a0>
 800ed92:	2e00      	cmp	r6, #0
 800ed94:	f000 80b9 	beq.w	800ef0a <st_sssa8_ch_convolve_startNN+0x812>
 800ed98:	f005 f986 	bl	80140a8 <st_dsp_arm_fill_q15>
 800ed9c:	3401      	adds	r4, #1
 800ed9e:	44d9      	add	r9, fp
 800eda0:	b224      	sxth	r4, r4
 800eda2:	42ac      	cmp	r4, r5
 800eda4:	46a4      	mov	ip, r4
 800eda6:	dbea      	blt.n	800ed7e <st_sssa8_ch_convolve_startNN+0x686>
 800eda8:	9b06      	ldr	r3, [sp, #24]
 800edaa:	9908      	ldr	r1, [sp, #32]
 800edac:	3301      	adds	r3, #1
 800edae:	b21b      	sxth	r3, r3
 800edb0:	428b      	cmp	r3, r1
 800edb2:	461a      	mov	r2, r3
 800edb4:	9306      	str	r3, [sp, #24]
 800edb6:	dbd3      	blt.n	800ed60 <st_sssa8_ch_convolve_startNN+0x668>
 800edb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edba:	454b      	cmp	r3, r9
 800edbc:	f000 80c2 	beq.w	800ef44 <st_sssa8_ch_convolve_startNN+0x84c>
 800edc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800edc6:	441a      	add	r2, r3
 800edc8:	3001      	adds	r0, #1
 800edca:	b293      	uxth	r3, r2
 800edcc:	b200      	sxth	r0, r0
 800edce:	930c      	str	r3, [sp, #48]	; 0x30
 800edd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edd2:	4601      	mov	r1, r0
 800edd4:	4283      	cmp	r3, r0
 800edd6:	dca7      	bgt.n	800ed28 <st_sssa8_ch_convolve_startNN+0x630>
 800edd8:	464b      	mov	r3, r9
 800edda:	46d9      	mov	r9, fp
 800eddc:	469b      	mov	fp, r3
 800edde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ede0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ede2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800ede4:	441a      	add	r2, r3
 800ede6:	3401      	adds	r4, #1
 800ede8:	b293      	uxth	r3, r2
 800edea:	b224      	sxth	r4, r4
 800edec:	9313      	str	r3, [sp, #76]	; 0x4c
 800edee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edf0:	4625      	mov	r5, r4
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	f73f af7c 	bgt.w	800ecf0 <st_sssa8_ch_convolve_startNN+0x5f8>
 800edf8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800edfa:	4559      	cmp	r1, fp
 800edfc:	f43f ae84 	beq.w	800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800ee00:	ee19 3a10 	vmov	r3, s18
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f43f ae7f 	beq.w	800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800ee0a:	ee1a 3a10 	vmov	r3, s20
 800ee0e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ee10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee12:	f1a3 0b04 	sub.w	fp, r3, #4
 800ee16:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800ee18:	f002 0a03 	and.w	sl, r2, #3
 800ee1c:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 800ee1e:	1c5f      	adds	r7, r3, #1
 800ee20:	f8df c648 	ldr.w	ip, [pc, #1608]	; 800f46c <st_sssa8_ch_convolve_startNN+0xd74>
 800ee24:	f8dd e180 	ldr.w	lr, [sp, #384]	; 0x180
 800ee28:	f8cd b018 	str.w	fp, [sp, #24]
 800ee2c:	e9dd 4317 	ldrd	r4, r3, [sp, #92]	; 0x5c
 800ee30:	4433      	add	r3, r6
 800ee32:	930a      	str	r3, [sp, #40]	; 0x28
 800ee34:	0893      	lsrs	r3, r2, #2
 800ee36:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ee3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	b292      	uxth	r2, r2
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	9207      	str	r2, [sp, #28]
 800ee44:	3301      	adds	r3, #1
 800ee46:	009a      	lsls	r2, r3, #2
 800ee48:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ee4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee4e:	9308      	str	r3, [sp, #32]
 800ee50:	9a06      	ldr	r2, [sp, #24]
 800ee52:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ee56:	9206      	str	r2, [sp, #24]
 800ee58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee5a:	2a00      	cmp	r2, #0
 800ee5c:	f000 80f0 	beq.w	800f040 <st_sssa8_ch_convolve_startNN+0x948>
 800ee60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee62:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ee64:	eb0e 0902 	add.w	r9, lr, r2
 800ee68:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ee6c:	fa2f fb82 	sxtb16	fp, r2
 800ee70:	fa1f f88b 	uxth.w	r8, fp
 800ee74:	6801      	ldr	r1, [r0, #0]
 800ee76:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ee7a:	fa2f f282 	sxtb16	r2, r2
 800ee7e:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 800ee82:	fb28 3101 	smlad	r1, r8, r1, r3
 800ee86:	ea02 030c 	and.w	r3, r2, ip
 800ee8a:	3008      	adds	r0, #8
 800ee8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ee90:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800ee94:	fb23 1302 	smlad	r3, r3, r2, r1
 800ee98:	45ce      	cmp	lr, r9
 800ee9a:	d1e5      	bne.n	800ee68 <st_sssa8_ch_convolve_startNN+0x770>
 800ee9c:	9a08      	ldr	r2, [sp, #32]
 800ee9e:	f1ba 0f00 	cmp.w	sl, #0
 800eea2:	f000 80b4 	beq.w	800f00e <st_sssa8_ch_convolve_startNN+0x916>
 800eea6:	f999 1000 	ldrsb.w	r1, [r9]
 800eeaa:	8810      	ldrh	r0, [r2, #0]
 800eeac:	fb10 3301 	smlabb	r3, r0, r1, r3
 800eeb0:	9907      	ldr	r1, [sp, #28]
 800eeb2:	b161      	cbz	r1, 800eece <st_sssa8_ch_convolve_startNN+0x7d6>
 800eeb4:	f999 1001 	ldrsb.w	r1, [r9, #1]
 800eeb8:	f1ba 0f02 	cmp.w	sl, #2
 800eebc:	8850      	ldrh	r0, [r2, #2]
 800eebe:	fb10 3301 	smlabb	r3, r0, r1, r3
 800eec2:	d004      	beq.n	800eece <st_sssa8_ch_convolve_startNN+0x7d6>
 800eec4:	8891      	ldrh	r1, [r2, #4]
 800eec6:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800eeca:	fb11 3302 	smlabb	r3, r1, r2, r3
 800eece:	eb09 0e0a 	add.w	lr, r9, sl
 800eed2:	f936 0b02 	ldrsh.w	r0, [r6], #2
 800eed6:	2815      	cmp	r0, #21
 800eed8:	f340 808c 	ble.w	800eff4 <st_sssa8_ch_convolve_startNN+0x8fc>
 800eedc:	1e81      	subs	r1, r0, #2
 800eede:	2201      	movs	r2, #1
 800eee0:	3801      	subs	r0, #1
 800eee2:	fa02 f101 	lsl.w	r1, r2, r1
 800eee6:	682a      	ldr	r2, [r5, #0]
 800eee8:	fb53 1302 	smmla	r3, r3, r2, r1
 800eeec:	fa43 f200 	asr.w	r2, r3, r0
 800eef0:	6823      	ldr	r3, [r4, #0]
 800eef2:	4413      	add	r3, r2
 800eef4:	f303 0307 	ssat	r3, #8, r3
 800eef8:	f807 3c01 	strb.w	r3, [r7, #-1]
 800eefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefe:	3701      	adds	r7, #1
 800ef00:	3504      	adds	r5, #4
 800ef02:	3404      	adds	r4, #4
 800ef04:	42b3      	cmp	r3, r6
 800ef06:	d1a3      	bne.n	800ee50 <st_sssa8_ch_convolve_startNN+0x758>
 800ef08:	e5fe      	b.n	800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800ef0a:	9b07      	ldr	r3, [sp, #28]
 800ef0c:	eb03 000c 	add.w	r0, r3, ip
 800ef10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef12:	fb0a 3000 	mla	r0, sl, r0, r3
 800ef16:	f001 f9e9 	bl	80102ec <st_int8_to16_no_shift>
 800ef1a:	e73f      	b.n	800ed9c <st_sssa8_ch_convolve_startNN+0x6a4>
 800ef1c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800ef1e:	2a00      	cmp	r2, #0
 800ef20:	d132      	bne.n	800ef88 <st_sssa8_ch_convolve_startNN+0x890>
 800ef22:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800ef24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef26:	3a01      	subs	r2, #1
 800ef28:	923c      	str	r2, [sp, #240]	; 0xf0
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ef30:	9a08      	ldr	r2, [sp, #32]
 800ef32:	4293      	cmp	r3, r2
 800ef34:	f6ff af06 	blt.w	800ed44 <st_sssa8_ch_convolve_startNN+0x64c>
 800ef38:	b283      	uxth	r3, r0
 800ef3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ef3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef3e:	454b      	cmp	r3, r9
 800ef40:	f47f af3e 	bne.w	800edc0 <st_sssa8_ch_convolve_startNN+0x6c8>
 800ef44:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800ef46:	ee1a 2a10 	vmov	r2, s20
 800ef4a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef50:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800ef56:	9302      	str	r3, [sp, #8]
 800ef58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ef5a:	9301      	str	r3, [sp, #4]
 800ef5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	ee19 3a10 	vmov	r3, s18
 800ef64:	f000 fdf2 	bl	800fb4c <st_sssa8_ch_nn_mat_mult_kernel>
 800ef68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef6e:	440b      	add	r3, r1
 800ef70:	906d      	str	r0, [sp, #436]	; 0x1b4
 800ef72:	3201      	adds	r2, #1
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	b210      	sxth	r0, r2
 800ef78:	930c      	str	r3, [sp, #48]	; 0x30
 800ef7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef7c:	4601      	mov	r1, r0
 800ef7e:	4283      	cmp	r3, r0
 800ef80:	dd5a      	ble.n	800f038 <st_sssa8_ch_convolve_startNN+0x940>
 800ef82:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800ef86:	e6cf      	b.n	800ed28 <st_sssa8_ch_convolve_startNN+0x630>
 800ef88:	3a01      	subs	r2, #1
 800ef8a:	923b      	str	r2, [sp, #236]	; 0xec
 800ef8c:	f8bd 210c 	ldrh.w	r2, [sp, #268]	; 0x10c
 800ef90:	2a01      	cmp	r2, #1
 800ef92:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ef96:	f43f aed0 	beq.w	800ed3a <st_sssa8_ch_convolve_startNN+0x642>
 800ef9a:	b283      	uxth	r3, r0
 800ef9c:	9908      	ldr	r1, [sp, #32]
 800ef9e:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800efa2:	930d      	str	r3, [sp, #52]	; 0x34
 800efa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efa6:	428b      	cmp	r3, r1
 800efa8:	f6bf af06 	bge.w	800edb8 <st_sssa8_ch_convolve_startNN+0x6c0>
 800efac:	ee08 7a10 	vmov	s16, r7
 800efb0:	f8cd b01c 	str.w	fp, [sp, #28]
 800efb4:	464f      	mov	r7, r9
 800efb6:	46c3      	mov	fp, r8
 800efb8:	461d      	mov	r5, r3
 800efba:	4618      	mov	r0, r3
 800efbc:	ee18 2a90 	vmov	r2, s17
 800efc0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800efc2:	4688      	mov	r8, r1
 800efc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800efc8:	3501      	adds	r5, #1
 800efca:	fb00 400b 	mla	r0, r0, fp, r4
 800efce:	4639      	mov	r1, r7
 800efd0:	9206      	str	r2, [sp, #24]
 800efd2:	b22d      	sxth	r5, r5
 800efd4:	fb0a 9000 	mla	r0, sl, r0, r9
 800efd8:	f001 f988 	bl	80102ec <st_int8_to16_no_shift>
 800efdc:	4437      	add	r7, r6
 800efde:	4545      	cmp	r5, r8
 800efe0:	4628      	mov	r0, r5
 800efe2:	9a06      	ldr	r2, [sp, #24]
 800efe4:	dbf0      	blt.n	800efc8 <st_sssa8_ch_convolve_startNN+0x8d0>
 800efe6:	46b9      	mov	r9, r7
 800efe8:	46d8      	mov	r8, fp
 800efea:	ee18 7a10 	vmov	r7, s16
 800efee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800eff2:	e6e1      	b.n	800edb8 <st_sssa8_ch_convolve_startNN+0x6c0>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	dd0c      	ble.n	800f012 <st_sssa8_ch_convolve_startNN+0x91a>
 800eff8:	682a      	ldr	r2, [r5, #0]
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	6821      	ldr	r1, [r4, #0]
 800effe:	fb53 1302 	smmla	r3, r3, r2, r1
 800f002:	4103      	asrs	r3, r0
 800f004:	f303 0307 	ssat	r3, #8, r3
 800f008:	f807 3c01 	strb.w	r3, [r7, #-1]
 800f00c:	e776      	b.n	800eefc <st_sssa8_ch_convolve_startNN+0x804>
 800f00e:	46ce      	mov	lr, r9
 800f010:	e75f      	b.n	800eed2 <st_sssa8_ch_convolve_startNN+0x7da>
 800f012:	f1c0 0201 	rsb	r2, r0, #1
 800f016:	fa03 f202 	lsl.w	r2, r3, r2
 800f01a:	f302 021f 	ssat	r2, #32, r2
 800f01e:	682b      	ldr	r3, [r5, #0]
 800f020:	fb52 f213 	smmulr	r2, r2, r3
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	4413      	add	r3, r2
 800f028:	f303 0307 	ssat	r3, #8, r3
 800f02c:	f807 3c01 	strb.w	r3, [r7, #-1]
 800f030:	e764      	b.n	800eefc <st_sssa8_ch_convolve_startNN+0x804>
 800f032:	b2a3      	uxth	r3, r4
 800f034:	931a      	str	r3, [sp, #104]	; 0x68
 800f036:	e6d2      	b.n	800edde <st_sssa8_ch_convolve_startNN+0x6e6>
 800f038:	46d9      	mov	r9, fp
 800f03a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800f03e:	e6ce      	b.n	800edde <st_sssa8_ch_convolve_startNN+0x6e6>
 800f040:	46f1      	mov	r9, lr
 800f042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f044:	e72b      	b.n	800ee9e <st_sssa8_ch_convolve_startNN+0x7a6>
 800f046:	460b      	mov	r3, r1
 800f048:	3301      	adds	r3, #1
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	9327      	str	r3, [sp, #156]	; 0x9c
 800f04e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f050:	2b00      	cmp	r3, #0
 800f052:	f43f ad59 	beq.w	800eb08 <st_sssa8_ch_convolve_startNN+0x410>
 800f056:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f058:	fa0f f788 	sxth.w	r7, r8
 800f05c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f05e:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800f062:	fb03 f30a 	mul.w	r3, r3, sl
 800f066:	2400      	movs	r4, #0
 800f068:	ee08 9a90 	vmov	s17, r9
 800f06c:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
 800f070:	fb02 f303 	mul.w	r3, r2, r3
 800f074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f076:	4625      	mov	r5, r4
 800f078:	46d0      	mov	r8, sl
 800f07a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f07e:	9312      	str	r3, [sp, #72]	; 0x48
 800f080:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f082:	3b01      	subs	r3, #1
 800f084:	b29b      	uxth	r3, r3
 800f086:	932d      	str	r3, [sp, #180]	; 0xb4
 800f088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f08a:	425b      	negs	r3, r3
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	932b      	str	r3, [sp, #172]	; 0xac
 800f090:	f00a 0303 	and.w	r3, sl, #3
 800f094:	930b      	str	r3, [sp, #44]	; 0x2c
 800f096:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800f09a:	46d9      	mov	r9, fp
 800f09c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f09e:	a83a      	add	r0, sp, #232	; 0xe8
 800f0a0:	f000 fd3a 	bl	800fb18 <ai_padding_opt_phase1>
 800f0a4:	ee19 3a10 	vmov	r3, s18
 800f0a8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800f0aa:	fb05 f303 	mul.w	r3, r5, r3
 800f0ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0b0:	fb01 2303 	mla	r3, r1, r3, r2
 800f0b4:	931e      	str	r3, [sp, #120]	; 0x78
 800f0b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f0b8:	b953      	cbnz	r3, 800f0d0 <st_sssa8_ch_convolve_startNN+0x9d8>
 800f0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f040 81c0 	bne.w	800f442 <st_sssa8_ch_convolve_startNN+0xd4a>
 800f0c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f0c4:	ee19 1a90 	vmov	r1, s19
 800f0c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f0ca:	9860      	ldr	r0, [sp, #384]	; 0x180
 800f0cc:	f001 fb54 	bl	8010778 <st_int8_to16_dual_interleaved>
 800f0d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 81c0 	beq.w	800f458 <st_sssa8_ch_convolve_startNN+0xd60>
 800f0d8:	b2a3      	uxth	r3, r4
 800f0da:	eef0 aa4a 	vmov.f32	s21, s20
 800f0de:	ee0b 7a10 	vmov	s22, r7
 800f0e2:	ed8d 9a26 	vstr	s18, [sp, #152]	; 0x98
 800f0e6:	932c      	str	r3, [sp, #176]	; 0xb0
 800f0e8:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800f0ec:	1a9b      	subs	r3, r3, r2
 800f0ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f0f0:	fb02 3305 	mla	r3, r2, r5, r3
 800f0f4:	9308      	str	r3, [sp, #32]
 800f0f6:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800f0fa:	9311      	str	r3, [sp, #68]	; 0x44
 800f0fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f0fe:	9325      	str	r3, [sp, #148]	; 0x94
 800f100:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f102:	9318      	str	r3, [sp, #96]	; 0x60
 800f104:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800f106:	9329      	str	r3, [sp, #164]	; 0xa4
 800f108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f10a:	9324      	str	r3, [sp, #144]	; 0x90
 800f10c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f10e:	9323      	str	r3, [sp, #140]	; 0x8c
 800f110:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800f112:	9322      	str	r3, [sp, #136]	; 0x88
 800f114:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800f116:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800f118:	923b      	str	r2, [sp, #236]	; 0xec
 800f11a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f11c:	933a      	str	r3, [sp, #232]	; 0xe8
 800f11e:	923c      	str	r2, [sp, #240]	; 0xf0
 800f120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f122:	2a00      	cmp	r2, #0
 800f124:	f000 8137 	beq.w	800f396 <st_sssa8_ch_convolve_startNN+0xc9e>
 800f128:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f12a:	2100      	movs	r1, #0
 800f12c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800f12e:	4252      	negs	r2, r2
 800f130:	b292      	uxth	r2, r2
 800f132:	9207      	str	r2, [sp, #28]
 800f134:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f136:	9217      	str	r2, [sp, #92]	; 0x5c
 800f138:	460a      	mov	r2, r1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d062      	beq.n	800f204 <st_sssa8_ch_convolve_startNN+0xb0c>
 800f13e:	3b01      	subs	r3, #1
 800f140:	933a      	str	r3, [sp, #232]	; 0xe8
 800f142:	2301      	movs	r3, #1
 800f144:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800f148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f14a:	9808      	ldr	r0, [sp, #32]
 800f14c:	4283      	cmp	r3, r0
 800f14e:	da66      	bge.n	800f21e <st_sssa8_ch_convolve_startNN+0xb26>
 800f150:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f152:	46c3      	mov	fp, r8
 800f154:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f156:	ee1b 7a10 	vmov	r7, s22
 800f15a:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800f15e:	fb02 3200 	mla	r2, r2, r0, r3
 800f162:	b28b      	uxth	r3, r1
 800f164:	930d      	str	r3, [sp, #52]	; 0x34
 800f166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f168:	1ad5      	subs	r5, r2, r3
 800f16a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f16e:	930c      	str	r3, [sp, #48]	; 0x30
 800f170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f172:	461a      	mov	r2, r3
 800f174:	9306      	str	r3, [sp, #24]
 800f176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f178:	42ab      	cmp	r3, r5
 800f17a:	da27      	bge.n	800f1cc <st_sssa8_ch_convolve_startNN+0xad4>
 800f17c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f17e:	4291      	cmp	r1, r2
 800f180:	fb09 f202 	mul.w	r2, r9, r2
 800f184:	bfcc      	ite	gt
 800f186:	f04f 0800 	movgt.w	r8, #0
 800f18a:	f04f 0801 	movle.w	r8, #1
 800f18e:	9210      	str	r2, [sp, #64]	; 0x40
 800f190:	9a06      	ldr	r2, [sp, #24]
 800f192:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800f196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f198:	2a00      	cmp	r2, #0
 800f19a:	d06a      	beq.n	800f272 <st_sssa8_ch_convolve_startNN+0xb7a>
 800f19c:	461e      	mov	r6, r3
 800f19e:	469c      	mov	ip, r3
 800f1a0:	45e1      	cmp	r9, ip
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	465a      	mov	r2, fp
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	bfcc      	ite	gt
 800f1aa:	2300      	movgt	r3, #0
 800f1ac:	2301      	movle	r3, #1
 800f1ae:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800f1b2:	d103      	bne.n	800f1bc <st_sssa8_ch_convolve_startNN+0xac4>
 800f1b4:	f1b8 0f00 	cmp.w	r8, #0
 800f1b8:	f000 80cd 	beq.w	800f356 <st_sssa8_ch_convolve_startNN+0xc5e>
 800f1bc:	f004 ff74 	bl	80140a8 <st_dsp_arm_fill_q15>
 800f1c0:	3601      	adds	r6, #1
 800f1c2:	4454      	add	r4, sl
 800f1c4:	b236      	sxth	r6, r6
 800f1c6:	42b5      	cmp	r5, r6
 800f1c8:	46b4      	mov	ip, r6
 800f1ca:	dce9      	bgt.n	800f1a0 <st_sssa8_ch_convolve_startNN+0xaa8>
 800f1cc:	9a06      	ldr	r2, [sp, #24]
 800f1ce:	9908      	ldr	r1, [sp, #32]
 800f1d0:	3201      	adds	r2, #1
 800f1d2:	b213      	sxth	r3, r2
 800f1d4:	428b      	cmp	r3, r1
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	9306      	str	r3, [sp, #24]
 800f1da:	dbcc      	blt.n	800f176 <st_sssa8_ch_convolve_startNN+0xa7e>
 800f1dc:	46d8      	mov	r8, fp
 800f1de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	d021      	beq.n	800f228 <st_sssa8_ch_convolve_startNN+0xb30>
 800f1e4:	9b07      	ldr	r3, [sp, #28]
 800f1e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f1ea:	4413      	add	r3, r2
 800f1ec:	3101      	adds	r1, #1
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	b209      	sxth	r1, r1
 800f1f2:	9307      	str	r3, [sp, #28]
 800f1f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1f6:	460a      	mov	r2, r1
 800f1f8:	428b      	cmp	r3, r1
 800f1fa:	f340 80b5 	ble.w	800f368 <st_sssa8_ch_convolve_startNN+0xc70>
 800f1fe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800f200:	2b00      	cmp	r3, #0
 800f202:	d19c      	bne.n	800f13e <st_sssa8_ch_convolve_startNN+0xa46>
 800f204:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800f206:	2b00      	cmp	r3, #0
 800f208:	d14a      	bne.n	800f2a0 <st_sssa8_ch_convolve_startNN+0xba8>
 800f20a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800f20c:	9808      	ldr	r0, [sp, #32]
 800f20e:	3b01      	subs	r3, #1
 800f210:	933c      	str	r3, [sp, #240]	; 0xf0
 800f212:	2301      	movs	r3, #1
 800f214:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800f218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f21a:	4283      	cmp	r3, r0
 800f21c:	db98      	blt.n	800f150 <st_sssa8_ch_convolve_startNN+0xa58>
 800f21e:	b28b      	uxth	r3, r1
 800f220:	930d      	str	r3, [sp, #52]	; 0x34
 800f222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f224:	42a3      	cmp	r3, r4
 800f226:	d1dd      	bne.n	800f1e4 <st_sssa8_ch_convolve_startNN+0xaec>
 800f228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f22a:	ee1a 2a90 	vmov	r2, s21
 800f22e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f230:	ee19 0a90 	vmov	r0, s19
 800f234:	9305      	str	r3, [sp, #20]
 800f236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f23c:	9303      	str	r3, [sp, #12]
 800f23e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f240:	9302      	str	r3, [sp, #8]
 800f242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f244:	9301      	str	r3, [sp, #4]
 800f246:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	ee19 3a10 	vmov	r3, s18
 800f24e:	f004 f81f 	bl	8013290 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800f252:	9b07      	ldr	r3, [sp, #28]
 800f254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f256:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f258:	4413      	add	r3, r2
 800f25a:	9017      	str	r0, [sp, #92]	; 0x5c
 800f25c:	3101      	adds	r1, #1
 800f25e:	b29b      	uxth	r3, r3
 800f260:	b209      	sxth	r1, r1
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f266:	460a      	mov	r2, r1
 800f268:	428b      	cmp	r3, r1
 800f26a:	f340 8094 	ble.w	800f396 <st_sssa8_ch_convolve_startNN+0xc9e>
 800f26e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800f270:	e7c5      	b.n	800f1fe <st_sssa8_ch_convolve_startNN+0xb06>
 800f272:	469e      	mov	lr, r3
 800f274:	461e      	mov	r6, r3
 800f276:	0ff3      	lsrs	r3, r6, #31
 800f278:	465a      	mov	r2, fp
 800f27a:	4621      	mov	r1, r4
 800f27c:	4638      	mov	r0, r7
 800f27e:	45f1      	cmp	r9, lr
 800f280:	bfd8      	it	le
 800f282:	f043 0301 	orrle.w	r3, r3, #1
 800f286:	b913      	cbnz	r3, 800f28e <st_sssa8_ch_convolve_startNN+0xb96>
 800f288:	f1b8 0f00 	cmp.w	r8, #0
 800f28c:	d05a      	beq.n	800f344 <st_sssa8_ch_convolve_startNN+0xc4c>
 800f28e:	f004 ff0b 	bl	80140a8 <st_dsp_arm_fill_q15>
 800f292:	3601      	adds	r6, #1
 800f294:	4454      	add	r4, sl
 800f296:	b236      	sxth	r6, r6
 800f298:	42ae      	cmp	r6, r5
 800f29a:	46b6      	mov	lr, r6
 800f29c:	dbeb      	blt.n	800f276 <st_sssa8_ch_convolve_startNN+0xb7e>
 800f29e:	e795      	b.n	800f1cc <st_sssa8_ch_convolve_startNN+0xad4>
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	933b      	str	r3, [sp, #236]	; 0xec
 800f2a4:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800f2ae:	f43f af4b 	beq.w	800f148 <st_sssa8_ch_convolve_startNN+0xa50>
 800f2b2:	b28b      	uxth	r3, r1
 800f2b4:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800f2b8:	930d      	str	r3, [sp, #52]	; 0x34
 800f2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2bc:	bb03      	cbnz	r3, 800f300 <st_sssa8_ch_convolve_startNN+0xc08>
 800f2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2c0:	9908      	ldr	r1, [sp, #32]
 800f2c2:	428b      	cmp	r3, r1
 800f2c4:	da8b      	bge.n	800f1de <st_sssa8_ch_convolve_startNN+0xae6>
 800f2c6:	46a3      	mov	fp, r4
 800f2c8:	464f      	mov	r7, r9
 800f2ca:	462c      	mov	r4, r5
 800f2cc:	461e      	mov	r6, r3
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	ee18 2a90 	vmov	r2, s17
 800f2d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f2d6:	4689      	mov	r9, r1
 800f2d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f2dc:	3601      	adds	r6, #1
 800f2de:	fb00 4007 	mla	r0, r0, r7, r4
 800f2e2:	4659      	mov	r1, fp
 800f2e4:	9206      	str	r2, [sp, #24]
 800f2e6:	b236      	sxth	r6, r6
 800f2e8:	fb08 a000 	mla	r0, r8, r0, sl
 800f2ec:	f001 f894 	bl	8010418 <st_int8_to16_no_shift_interleaved>
 800f2f0:	44ab      	add	fp, r5
 800f2f2:	454e      	cmp	r6, r9
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	9a06      	ldr	r2, [sp, #24]
 800f2f8:	dbf0      	blt.n	800f2dc <st_sssa8_ch_convolve_startNN+0xbe4>
 800f2fa:	465c      	mov	r4, fp
 800f2fc:	46b9      	mov	r9, r7
 800f2fe:	e76e      	b.n	800f1de <st_sssa8_ch_convolve_startNN+0xae6>
 800f300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f302:	9908      	ldr	r1, [sp, #32]
 800f304:	428b      	cmp	r3, r1
 800f306:	f6bf af6a 	bge.w	800f1de <st_sssa8_ch_convolve_startNN+0xae6>
 800f30a:	46a3      	mov	fp, r4
 800f30c:	464f      	mov	r7, r9
 800f30e:	462c      	mov	r4, r5
 800f310:	461e      	mov	r6, r3
 800f312:	4618      	mov	r0, r3
 800f314:	ee18 2a90 	vmov	r2, s17
 800f318:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f31a:	4689      	mov	r9, r1
 800f31c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f320:	3601      	adds	r6, #1
 800f322:	fb00 4007 	mla	r0, r0, r7, r4
 800f326:	4659      	mov	r1, fp
 800f328:	9206      	str	r2, [sp, #24]
 800f32a:	b236      	sxth	r6, r6
 800f32c:	fb08 a000 	mla	r0, r8, r0, sl
 800f330:	f000 ffdc 	bl	80102ec <st_int8_to16_no_shift>
 800f334:	44ab      	add	fp, r5
 800f336:	454e      	cmp	r6, r9
 800f338:	4630      	mov	r0, r6
 800f33a:	9a06      	ldr	r2, [sp, #24]
 800f33c:	dbf0      	blt.n	800f320 <st_sssa8_ch_convolve_startNN+0xc28>
 800f33e:	465c      	mov	r4, fp
 800f340:	46b9      	mov	r9, r7
 800f342:	e74c      	b.n	800f1de <st_sssa8_ch_convolve_startNN+0xae6>
 800f344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f346:	eb03 000e 	add.w	r0, r3, lr
 800f34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f34c:	fb0b 3000 	mla	r0, fp, r0, r3
 800f350:	f001 f862 	bl	8010418 <st_int8_to16_no_shift_interleaved>
 800f354:	e79d      	b.n	800f292 <st_sssa8_ch_convolve_startNN+0xb9a>
 800f356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f358:	eb03 000c 	add.w	r0, r3, ip
 800f35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35e:	fb0b 3000 	mla	r0, fp, r0, r3
 800f362:	f000 ffc3 	bl	80102ec <st_int8_to16_no_shift>
 800f366:	e72b      	b.n	800f1c0 <st_sssa8_ch_convolve_startNN+0xac8>
 800f368:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f36a:	428c      	cmp	r4, r1
 800f36c:	d013      	beq.n	800f396 <st_sssa8_ch_convolve_startNN+0xc9e>
 800f36e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f370:	ee1a 2a90 	vmov	r2, s21
 800f374:	ee19 0a90 	vmov	r0, s19
 800f378:	9305      	str	r3, [sp, #20]
 800f37a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f37c:	9304      	str	r3, [sp, #16]
 800f37e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f384:	9302      	str	r3, [sp, #8]
 800f386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	ee19 3a10 	vmov	r3, s18
 800f392:	f004 faa1 	bl	80138d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800f396:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f39a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f39c:	1a9b      	subs	r3, r3, r2
 800f39e:	4411      	add	r1, r2
 800f3a0:	911e      	str	r1, [sp, #120]	; 0x78
 800f3a2:	b299      	uxth	r1, r3
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	428a      	cmp	r2, r1
 800f3a8:	9126      	str	r1, [sp, #152]	; 0x98
 800f3aa:	bf28      	it	cs
 800f3ac:	460b      	movcs	r3, r1
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d03d      	beq.n	800f430 <st_sssa8_ch_convolve_startNN+0xd38>
 800f3b4:	ee1a 4a90 	vmov	r4, s21
 800f3b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800f3ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f3bc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800f3c0:	fb01 0002 	mla	r0, r1, r2, r0
 800f3c4:	ee0a 4a90 	vmov	s21, r4
 800f3c8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f3ca:	9029      	str	r0, [sp, #164]	; 0xa4
 800f3cc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800f3d0:	9423      	str	r4, [sp, #140]	; 0x8c
 800f3d2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800f3d4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800f3d8:	9422      	str	r4, [sp, #136]	; 0x88
 800f3da:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800f3dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3e0:	9224      	str	r2, [sp, #144]	; 0x90
 800f3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3e4:	bb32      	cbnz	r2, 800f434 <st_sssa8_ch_convolve_startNN+0xd3c>
 800f3e6:	460a      	mov	r2, r1
 800f3e8:	ee19 1a90 	vmov	r1, s19
 800f3ec:	9318      	str	r3, [sp, #96]	; 0x60
 800f3ee:	f001 f9c3 	bl	8010778 <st_int8_to16_dual_interleaved>
 800f3f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	9325      	str	r3, [sp, #148]	; 0x94
 800f3fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f400:	429a      	cmp	r2, r3
 800f402:	f47f ae87 	bne.w	800f114 <st_sssa8_ch_convolve_startNN+0xa1c>
 800f406:	ee1b 7a10 	vmov	r7, s22
 800f40a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f40c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f40e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800f410:	4413      	add	r3, r2
 800f412:	3401      	adds	r4, #1
 800f414:	b29b      	uxth	r3, r3
 800f416:	b224      	sxth	r4, r4
 800f418:	932b      	str	r3, [sp, #172]	; 0xac
 800f41a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f41c:	4625      	mov	r5, r4
 800f41e:	42a3      	cmp	r3, r4
 800f420:	f73f ae3d 	bgt.w	800f09e <st_sssa8_ch_convolve_startNN+0x9a6>
 800f424:	2000      	movs	r0, #0
 800f426:	b04f      	add	sp, #316	; 0x13c
 800f428:	ecbd 8b08 	vpop	{d8-d11}
 800f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	9318      	str	r3, [sp, #96]	; 0x60
 800f432:	e7de      	b.n	800f3f2 <st_sssa8_ch_convolve_startNN+0xcfa>
 800f434:	460a      	mov	r2, r1
 800f436:	ee19 1a90 	vmov	r1, s19
 800f43a:	9318      	str	r3, [sp, #96]	; 0x60
 800f43c:	f001 f83c 	bl	80104b8 <st_int8_to16_dual>
 800f440:	e7d7      	b.n	800f3f2 <st_sssa8_ch_convolve_startNN+0xcfa>
 800f442:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f444:	ee19 1a90 	vmov	r1, s19
 800f448:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f44a:	9860      	ldr	r0, [sp, #384]	; 0x180
 800f44c:	f001 f834 	bl	80104b8 <st_int8_to16_dual>
 800f450:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f452:	2b00      	cmp	r3, #0
 800f454:	f47f ae40 	bne.w	800f0d8 <st_sssa8_ch_convolve_startNN+0x9e0>
 800f458:	b2a3      	uxth	r3, r4
 800f45a:	932c      	str	r3, [sp, #176]	; 0xb0
 800f45c:	e7d5      	b.n	800f40a <st_sssa8_ch_convolve_startNN+0xd12>
 800f45e:	ed8d aa17 	vstr	s20, [sp, #92]	; 0x5c
 800f462:	ed8d 9a18 	vstr	s18, [sp, #96]	; 0x60
 800f466:	f7ff b9a8 	b.w	800e7ba <st_sssa8_ch_convolve_startNN+0xc2>
 800f46a:	bf00      	nop
 800f46c:	ffff0000 	.word	0xffff0000

0800f470 <st_sssa8_fully_connected>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	b097      	sub	sp, #92	; 0x5c
 800f476:	460d      	mov	r5, r1
 800f478:	4683      	mov	fp, r0
 800f47a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f47c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f47e:	6823      	ldr	r3, [r4, #0]
 800f480:	9203      	str	r2, [sp, #12]
 800f482:	9307      	str	r3, [sp, #28]
 800f484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f486:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800f48a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f48e:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800f492:	1e4a      	subs	r2, r1, #1
 800f494:	9104      	str	r1, [sp, #16]
 800f496:	920d      	str	r2, [sp, #52]	; 0x34
 800f498:	b292      	uxth	r2, r2
 800f49a:	2a14      	cmp	r2, #20
 800f49c:	f200 81b3 	bhi.w	800f806 <st_sssa8_fully_connected+0x396>
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	408b      	lsls	r3, r1
 800f4a4:	408a      	lsls	r2, r1
 800f4a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f4aa:	9308      	str	r3, [sp, #32]
 800f4ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 81ae 	beq.w	800f810 <st_sssa8_fully_connected+0x3a0>
 800f4b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f4b6:	b2b3      	uxth	r3, r6
 800f4b8:	9600      	str	r6, [sp, #0]
 800f4ba:	4658      	mov	r0, fp
 800f4bc:	0851      	lsrs	r1, r2, #1
 800f4be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800f4c2:	9e03      	ldr	r6, [sp, #12]
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	9115      	str	r1, [sp, #84]	; 0x54
 800f4c8:	4632      	mov	r2, r6
 800f4ca:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f4cc:	f003 fea8 	bl	8013220 <st_int8_reordered_no_shift_zero>
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	f000 8145 	beq.w	800f762 <st_sssa8_fully_connected+0x2f2>
 800f4d8:	4634      	mov	r4, r6
 800f4da:	f1a6 0310 	sub.w	r3, r6, #16
 800f4de:	9e04      	ldr	r6, [sp, #16]
 800f4e0:	1e4a      	subs	r2, r1, #1
 800f4e2:	2001      	movs	r0, #1
 800f4e4:	091b      	lsrs	r3, r3, #4
 800f4e6:	1eb1      	subs	r1, r6, #2
 800f4e8:	b292      	uxth	r2, r2
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	fa00 f101 	lsl.w	r1, r0, r1
 800f4f0:	9112      	str	r1, [sp, #72]	; 0x48
 800f4f2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f4f4:	3110      	adds	r1, #16
 800f4f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f4fa:	920e      	str	r2, [sp, #56]	; 0x38
 800f4fc:	1ee2      	subs	r2, r4, #3
 800f4fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800f500:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f502:	3208      	adds	r2, #8
 800f504:	9205      	str	r2, [sp, #20]
 800f506:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f508:	3202      	adds	r2, #2
 800f50a:	9206      	str	r2, [sp, #24]
 800f50c:	011a      	lsls	r2, r3, #4
 800f50e:	9209      	str	r2, [sp, #36]	; 0x24
 800f510:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f512:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f516:	9310      	str	r3, [sp, #64]	; 0x40
 800f518:	1f23      	subs	r3, r4, #4
 800f51a:	9311      	str	r3, [sp, #68]	; 0x44
 800f51c:	1b83      	subs	r3, r0, r6
 800f51e:	9314      	str	r3, [sp, #80]	; 0x50
 800f520:	9a03      	ldr	r2, [sp, #12]
 800f522:	9b05      	ldr	r3, [sp, #20]
 800f524:	2a0f      	cmp	r2, #15
 800f526:	eb05 0b02 	add.w	fp, r5, r2
 800f52a:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800f52e:	f340 8261 	ble.w	800f9f4 <st_sssa8_fully_connected+0x584>
 800f532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f534:	465c      	mov	r4, fp
 800f536:	18ae      	adds	r6, r5, r2
 800f538:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f53a:	682f      	ldr	r7, [r5, #0]
 800f53c:	f8d4 a000 	ldr.w	sl, [r4]
 800f540:	ea4f 2037 	mov.w	r0, r7, ror #8
 800f544:	f8d2 9000 	ldr.w	r9, [r2]
 800f548:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800f54c:	fa2f f080 	sxtb16	r0, r0
 800f550:	fa2f fc8e 	sxtb16	ip, lr
 800f554:	fa2f f787 	sxtb16	r7, r7
 800f558:	fa2f fe8a 	sxtb16	lr, sl
 800f55c:	fb29 1107 	smlad	r1, r9, r7, r1
 800f560:	fb29 390e 	smlad	r9, r9, lr, r3
 800f564:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f568:	fb28 1100 	smlad	r1, r8, r0, r1
 800f56c:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800f570:	6868      	ldr	r0, [r5, #4]
 800f572:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f576:	ea4f 2330 	mov.w	r3, r0, ror #8
 800f57a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800f57e:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800f582:	fa2f f383 	sxtb16	r3, r3
 800f586:	fa2f f78a 	sxtb16	r7, sl
 800f58a:	fa2f f080 	sxtb16	r0, r0
 800f58e:	fa2f fa89 	sxtb16	sl, r9
 800f592:	fb28 1000 	smlad	r0, r8, r0, r1
 800f596:	fb28 e80a 	smlad	r8, r8, sl, lr
 800f59a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800f59e:	fb2c 0003 	smlad	r0, ip, r3, r0
 800f5a2:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800f5a6:	68ab      	ldr	r3, [r5, #8]
 800f5a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800f5ac:	ea4f 2133 	mov.w	r1, r3, ror #8
 800f5b0:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800f5b4:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800f5b8:	fa2f f181 	sxtb16	r1, r1
 800f5bc:	fa2f f98e 	sxtb16	r9, lr
 800f5c0:	fa2f f383 	sxtb16	r3, r3
 800f5c4:	fa2f fe88 	sxtb16	lr, r8
 800f5c8:	fb2c 0303 	smlad	r3, ip, r3, r0
 800f5cc:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800f5d0:	6957      	ldr	r7, [r2, #20]
 800f5d2:	fb27 3301 	smlad	r3, r7, r1, r3
 800f5d6:	fb27 ce09 	smlad	lr, r7, r9, ip
 800f5da:	68e8      	ldr	r0, [r5, #12]
 800f5dc:	3410      	adds	r4, #16
 800f5de:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800f5e2:	3510      	adds	r5, #16
 800f5e4:	ea4f 2130 	mov.w	r1, r0, ror #8
 800f5e8:	6997      	ldr	r7, [r2, #24]
 800f5ea:	fa2f f881 	sxtb16	r8, r1
 800f5ee:	fa2f f180 	sxtb16	r1, r0
 800f5f2:	ea4f 203c 	mov.w	r0, ip, ror #8
 800f5f6:	fa2f fc8c 	sxtb16	ip, ip
 800f5fa:	fa2f f080 	sxtb16	r0, r0
 800f5fe:	fb27 3101 	smlad	r1, r7, r1, r3
 800f602:	fb27 e70c 	smlad	r7, r7, ip, lr
 800f606:	69d3      	ldr	r3, [r2, #28]
 800f608:	3220      	adds	r2, #32
 800f60a:	fb23 1108 	smlad	r1, r3, r8, r1
 800f60e:	fb23 7300 	smlad	r3, r3, r0, r7
 800f612:	42b5      	cmp	r5, r6
 800f614:	d191      	bne.n	800f53a <st_sssa8_fully_connected+0xca>
 800f616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f618:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800f61c:	4493      	add	fp, r2
 800f61e:	4691      	mov	r9, r2
 800f620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f622:	4591      	cmp	r9, r2
 800f624:	f280 81e4 	bge.w	800f9f0 <st_sssa8_fully_connected+0x580>
 800f628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f62a:	4657      	mov	r7, sl
 800f62c:	46d8      	mov	r8, fp
 800f62e:	eba2 0209 	sub.w	r2, r2, r9
 800f632:	0892      	lsrs	r2, r2, #2
 800f634:	920c      	str	r2, [sp, #48]	; 0x30
 800f636:	3201      	adds	r2, #1
 800f638:	0090      	lsls	r0, r2, #2
 800f63a:	920b      	str	r2, [sp, #44]	; 0x2c
 800f63c:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800f640:	900a      	str	r0, [sp, #40]	; 0x28
 800f642:	f856 eb04 	ldr.w	lr, [r6], #4
 800f646:	f858 0b04 	ldr.w	r0, [r8], #4
 800f64a:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	ea4f 2530 	mov.w	r5, r0, ror #8
 800f654:	fa2f fc8c 	sxtb16	ip, ip
 800f658:	fa2f fe8e 	sxtb16	lr, lr
 800f65c:	fa2f f585 	sxtb16	r5, r5
 800f660:	fa2f f080 	sxtb16	r0, r0
 800f664:	fb22 110e 	smlad	r1, r2, lr, r1
 800f668:	fb22 3300 	smlad	r3, r2, r0, r3
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	3708      	adds	r7, #8
 800f670:	fb22 110c 	smlad	r1, r2, ip, r1
 800f674:	fb22 3305 	smlad	r3, r2, r5, r3
 800f678:	42a6      	cmp	r6, r4
 800f67a:	d1e2      	bne.n	800f642 <st_sssa8_fully_connected+0x1d2>
 800f67c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f67e:	f109 0904 	add.w	r9, r9, #4
 800f682:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800f686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f688:	4493      	add	fp, r2
 800f68a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f68c:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800f690:	9d03      	ldr	r5, [sp, #12]
 800f692:	454d      	cmp	r5, r9
 800f694:	dd37      	ble.n	800f706 <st_sssa8_fully_connected+0x296>
 800f696:	f9ba 2000 	ldrsh.w	r2, [sl]
 800f69a:	f994 0000 	ldrsb.w	r0, [r4]
 800f69e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f6a2:	f99b 0000 	ldrsb.w	r0, [fp]
 800f6a6:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f6aa:	f109 0201 	add.w	r2, r9, #1
 800f6ae:	42aa      	cmp	r2, r5
 800f6b0:	da25      	bge.n	800f6fe <st_sssa8_fully_connected+0x28e>
 800f6b2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800f6b6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f6ba:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f6be:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800f6c2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f6c6:	f109 0202 	add.w	r2, r9, #2
 800f6ca:	42aa      	cmp	r2, r5
 800f6cc:	da17      	bge.n	800f6fe <st_sssa8_fully_connected+0x28e>
 800f6ce:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800f6d2:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f6d6:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f6da:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800f6de:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f6e2:	f109 0203 	add.w	r2, r9, #3
 800f6e6:	4295      	cmp	r5, r2
 800f6e8:	dd09      	ble.n	800f6fe <st_sssa8_fully_connected+0x28e>
 800f6ea:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800f6ee:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800f6f2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f6f6:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800f6fa:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f6fe:	9a03      	ldr	r2, [sp, #12]
 800f700:	eba2 0909 	sub.w	r9, r2, r9
 800f704:	444c      	add	r4, r9
 800f706:	9a04      	ldr	r2, [sp, #16]
 800f708:	2a15      	cmp	r2, #21
 800f70a:	f340 8141 	ble.w	800f990 <st_sssa8_fully_connected+0x520>
 800f70e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f710:	9a07      	ldr	r2, [sp, #28]
 800f712:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f714:	fb51 0102 	smmla	r1, r1, r2, r0
 800f718:	fb53 0302 	smmla	r3, r3, r2, r0
 800f71c:	4129      	asrs	r1, r5
 800f71e:	9a08      	ldr	r2, [sp, #32]
 800f720:	4411      	add	r1, r2
 800f722:	f301 0107 	ssat	r1, #8, r1
 800f726:	9806      	ldr	r0, [sp, #24]
 800f728:	412b      	asrs	r3, r5
 800f72a:	f800 1c02 	strb.w	r1, [r0, #-2]
 800f72e:	4413      	add	r3, r2
 800f730:	f303 0307 	ssat	r3, #8, r3
 800f734:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f738:	9a03      	ldr	r2, [sp, #12]
 800f73a:	9b05      	ldr	r3, [sp, #20]
 800f73c:	18a5      	adds	r5, r4, r2
 800f73e:	9a06      	ldr	r2, [sp, #24]
 800f740:	3308      	adds	r3, #8
 800f742:	3202      	adds	r2, #2
 800f744:	9305      	str	r3, [sp, #20]
 800f746:	9206      	str	r2, [sp, #24]
 800f748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f74a:	4293      	cmp	r3, r2
 800f74c:	f47f aee8 	bne.w	800f520 <st_sssa8_fully_connected+0xb0>
 800f750:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f754:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800f758:	9225      	str	r2, [sp, #148]	; 0x94
 800f75a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f75c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f760:	9324      	str	r3, [sp, #144]	; 0x90
 800f762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f764:	07db      	lsls	r3, r3, #31
 800f766:	d54a      	bpl.n	800f7fe <st_sssa8_fully_connected+0x38e>
 800f768:	9a03      	ldr	r2, [sp, #12]
 800f76a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f76c:	0897      	lsrs	r7, r2, #2
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f000 8176 	beq.w	800fa60 <st_sssa8_fully_connected+0x5f0>
 800f774:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800f778:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f77a:	f855 2b04 	ldr.w	r2, [r5], #4
 800f77e:	6801      	ldr	r1, [r0, #0]
 800f780:	fa2f f482 	sxtb16	r4, r2
 800f784:	ea4f 2232 	mov.w	r2, r2, ror #8
 800f788:	fa2f f282 	sxtb16	r2, r2
 800f78c:	fb21 3304 	smlad	r3, r1, r4, r3
 800f790:	6841      	ldr	r1, [r0, #4]
 800f792:	3008      	adds	r0, #8
 800f794:	fb21 3302 	smlad	r3, r1, r2, r3
 800f798:	42b5      	cmp	r5, r6
 800f79a:	d1ee      	bne.n	800f77a <st_sssa8_fully_connected+0x30a>
 800f79c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f79e:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800f7a2:	9226      	str	r2, [sp, #152]	; 0x98
 800f7a4:	9a03      	ldr	r2, [sp, #12]
 800f7a6:	f012 0203 	ands.w	r2, r2, #3
 800f7aa:	d016      	beq.n	800f7da <st_sssa8_fully_connected+0x36a>
 800f7ac:	3a01      	subs	r2, #1
 800f7ae:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f7b0:	f996 1000 	ldrsb.w	r1, [r6]
 800f7b4:	8800      	ldrh	r0, [r0, #0]
 800f7b6:	b292      	uxth	r2, r2
 800f7b8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800f7bc:	b16a      	cbz	r2, 800f7da <st_sssa8_fully_connected+0x36a>
 800f7be:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800f7c6:	8840      	ldrh	r0, [r0, #2]
 800f7c8:	fb10 3301 	smlabb	r3, r0, r1, r3
 800f7cc:	d005      	beq.n	800f7da <st_sssa8_fully_connected+0x36a>
 800f7ce:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f7d0:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800f7d4:	8889      	ldrh	r1, [r1, #4]
 800f7d6:	fb11 3302 	smlabb	r3, r1, r2, r3
 800f7da:	9a04      	ldr	r2, [sp, #16]
 800f7dc:	2a15      	cmp	r2, #21
 800f7de:	f340 811d 	ble.w	800fa1c <st_sssa8_fully_connected+0x5ac>
 800f7e2:	1e91      	subs	r1, r2, #2
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	408a      	lsls	r2, r1
 800f7e8:	9907      	ldr	r1, [sp, #28]
 800f7ea:	fb53 2301 	smmla	r3, r3, r1, r2
 800f7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7f0:	4113      	asrs	r3, r2
 800f7f2:	9a08      	ldr	r2, [sp, #32]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f303 0307 	ssat	r3, #8, r3
 800f7fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f7fc:	7013      	strb	r3, [r2, #0]
 800f7fe:	2000      	movs	r0, #0
 800f800:	b017      	add	sp, #92	; 0x5c
 800f802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f806:	9308      	str	r3, [sp, #32]
 800f808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f47f ae52 	bne.w	800f4b4 <st_sssa8_fully_connected+0x44>
 800f810:	4273      	negs	r3, r6
 800f812:	b298      	uxth	r0, r3
 800f814:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800f818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d0ef      	beq.n	800f7fe <st_sssa8_fully_connected+0x38e>
 800f81e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f820:	3301      	adds	r3, #1
 800f822:	9903      	ldr	r1, [sp, #12]
 800f824:	b236      	sxth	r6, r6
 800f826:	18d3      	adds	r3, r2, r3
 800f828:	9c04      	ldr	r4, [sp, #16]
 800f82a:	f1a1 0810 	sub.w	r8, r1, #16
 800f82e:	f102 0e01 	add.w	lr, r2, #1
 800f832:	9305      	str	r3, [sp, #20]
 800f834:	2201      	movs	r2, #1
 800f836:	f028 080f 	bic.w	r8, r8, #15
 800f83a:	1ea3      	subs	r3, r4, #2
 800f83c:	468c      	mov	ip, r1
 800f83e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800f842:	fa02 f303 	lsl.w	r3, r2, r3
 800f846:	f108 0810 	add.w	r8, r8, #16
 800f84a:	f1bc 0f0f 	cmp.w	ip, #15
 800f84e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f852:	9309      	str	r3, [sp, #36]	; 0x24
 800f854:	eb0b 0308 	add.w	r3, fp, r8
 800f858:	9306      	str	r3, [sp, #24]
 800f85a:	eba2 0304 	sub.w	r3, r2, r4
 800f85e:	930a      	str	r3, [sp, #40]	; 0x28
 800f860:	f859 3b04 	ldr.w	r3, [r9], #4
 800f864:	dd7e      	ble.n	800f964 <st_sssa8_fully_connected+0x4f4>
 800f866:	eb05 0708 	add.w	r7, r5, r8
 800f86a:	462a      	mov	r2, r5
 800f86c:	9d03      	ldr	r5, [sp, #12]
 800f86e:	6811      	ldr	r1, [r2, #0]
 800f870:	682c      	ldr	r4, [r5, #0]
 800f872:	fa2f fb81 	sxtb16	fp, r1
 800f876:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800f87a:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f87e:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f882:	fa2f f181 	sxtb16	r1, r1
 800f886:	fa20 f484 	sxtab16	r4, r0, r4
 800f88a:	fb24 340b 	smlad	r4, r4, fp, r3
 800f88e:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800f892:	6851      	ldr	r1, [r2, #4]
 800f894:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f898:	fa2f f481 	sxtb16	r4, r1
 800f89c:	ea4f 233a 	mov.w	r3, sl, ror #8
 800f8a0:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f8a4:	fa20 f383 	sxtab16	r3, r0, r3
 800f8a8:	fa2f f181 	sxtb16	r1, r1
 800f8ac:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f8b0:	fb2a ba04 	smlad	sl, sl, r4, fp
 800f8b4:	fb23 a401 	smlad	r4, r3, r1, sl
 800f8b8:	6891      	ldr	r1, [r2, #8]
 800f8ba:	68ab      	ldr	r3, [r5, #8]
 800f8bc:	fa2f fb81 	sxtb16	fp, r1
 800f8c0:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800f8c4:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f8c8:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f8cc:	fa2f f181 	sxtb16	r1, r1
 800f8d0:	fa20 f383 	sxtab16	r3, r0, r3
 800f8d4:	fb23 430b 	smlad	r3, r3, fp, r4
 800f8d8:	fb2a 3301 	smlad	r3, sl, r1, r3
 800f8dc:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800f8e0:	3510      	adds	r5, #16
 800f8e2:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800f8e6:	3210      	adds	r2, #16
 800f8e8:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800f8ec:	ea4f 2431 	mov.w	r4, r1, ror #8
 800f8f0:	fa2f fa8a 	sxtb16	sl, sl
 800f8f4:	fa2f fb8b 	sxtb16	fp, fp
 800f8f8:	fa20 f181 	sxtab16	r1, r0, r1
 800f8fc:	fa20 f484 	sxtab16	r4, r0, r4
 800f900:	fb21 330a 	smlad	r3, r1, sl, r3
 800f904:	fb24 330b 	smlad	r3, r4, fp, r3
 800f908:	4297      	cmp	r7, r2
 800f90a:	d1b0      	bne.n	800f86e <st_sssa8_fully_connected+0x3fe>
 800f90c:	4645      	mov	r5, r8
 800f90e:	9f06      	ldr	r7, [sp, #24]
 800f910:	45ac      	cmp	ip, r5
 800f912:	dd2c      	ble.n	800f96e <st_sssa8_fully_connected+0x4fe>
 800f914:	ebac 0505 	sub.w	r5, ip, r5
 800f918:	4415      	add	r5, r2
 800f91a:	4611      	mov	r1, r2
 800f91c:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800f920:	3201      	adds	r2, #1
 800f922:	7809      	ldrb	r1, [r1, #0]
 800f924:	1ba4      	subs	r4, r4, r6
 800f926:	42aa      	cmp	r2, r5
 800f928:	b249      	sxtb	r1, r1
 800f92a:	fb14 3301 	smlabb	r3, r4, r1, r3
 800f92e:	d1f4      	bne.n	800f91a <st_sssa8_fully_connected+0x4aa>
 800f930:	9a04      	ldr	r2, [sp, #16]
 800f932:	2a15      	cmp	r2, #21
 800f934:	dd1f      	ble.n	800f976 <st_sssa8_fully_connected+0x506>
 800f936:	9a07      	ldr	r2, [sp, #28]
 800f938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f93a:	fb53 1302 	smmla	r3, r3, r2, r1
 800f93e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f940:	4113      	asrs	r3, r2
 800f942:	9a08      	ldr	r2, [sp, #32]
 800f944:	4413      	add	r3, r2
 800f946:	f303 0307 	ssat	r3, #8, r3
 800f94a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f94e:	f10e 0e01 	add.w	lr, lr, #1
 800f952:	9b05      	ldr	r3, [sp, #20]
 800f954:	459e      	cmp	lr, r3
 800f956:	f43f af52 	beq.w	800f7fe <st_sssa8_fully_connected+0x38e>
 800f95a:	f1bc 0f0f 	cmp.w	ip, #15
 800f95e:	f859 3b04 	ldr.w	r3, [r9], #4
 800f962:	dc80      	bgt.n	800f866 <st_sssa8_fully_connected+0x3f6>
 800f964:	462a      	mov	r2, r5
 800f966:	2500      	movs	r5, #0
 800f968:	9f03      	ldr	r7, [sp, #12]
 800f96a:	45ac      	cmp	ip, r5
 800f96c:	dcd2      	bgt.n	800f914 <st_sssa8_fully_connected+0x4a4>
 800f96e:	4615      	mov	r5, r2
 800f970:	9a04      	ldr	r2, [sp, #16]
 800f972:	2a15      	cmp	r2, #21
 800f974:	dcdf      	bgt.n	800f936 <st_sssa8_fully_connected+0x4c6>
 800f976:	2a00      	cmp	r2, #0
 800f978:	dd42      	ble.n	800fa00 <st_sssa8_fully_connected+0x590>
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800f980:	fb53 4301 	smmla	r3, r3, r1, r4
 800f984:	4113      	asrs	r3, r2
 800f986:	f303 0307 	ssat	r3, #8, r3
 800f98a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f98e:	e7de      	b.n	800f94e <st_sssa8_fully_connected+0x4de>
 800f990:	2a00      	cmp	r2, #0
 800f992:	dd13      	ble.n	800f9bc <st_sssa8_fully_connected+0x54c>
 800f994:	0049      	lsls	r1, r1, #1
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800f99c:	fb51 5100 	smmla	r1, r1, r0, r5
 800f9a0:	fb53 5300 	smmla	r3, r3, r0, r5
 800f9a4:	4111      	asrs	r1, r2
 800f9a6:	f301 0107 	ssat	r1, #8, r1
 800f9aa:	9806      	ldr	r0, [sp, #24]
 800f9ac:	4113      	asrs	r3, r2
 800f9ae:	f800 1c02 	strb.w	r1, [r0, #-2]
 800f9b2:	f303 0307 	ssat	r3, #8, r3
 800f9b6:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f9ba:	e6bd      	b.n	800f738 <st_sssa8_fully_connected+0x2c8>
 800f9bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f9be:	fa01 f200 	lsl.w	r2, r1, r0
 800f9c2:	f302 021f 	ssat	r2, #32, r2
 800f9c6:	9907      	ldr	r1, [sp, #28]
 800f9c8:	fb52 f211 	smmulr	r2, r2, r1
 800f9cc:	4083      	lsls	r3, r0
 800f9ce:	f303 031f 	ssat	r3, #32, r3
 800f9d2:	fb53 f311 	smmulr	r3, r3, r1
 800f9d6:	9908      	ldr	r1, [sp, #32]
 800f9d8:	440a      	add	r2, r1
 800f9da:	f302 0207 	ssat	r2, #8, r2
 800f9de:	9806      	ldr	r0, [sp, #24]
 800f9e0:	440b      	add	r3, r1
 800f9e2:	f800 2c02 	strb.w	r2, [r0, #-2]
 800f9e6:	f303 0307 	ssat	r3, #8, r3
 800f9ea:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f9ee:	e6a3      	b.n	800f738 <st_sssa8_fully_connected+0x2c8>
 800f9f0:	4634      	mov	r4, r6
 800f9f2:	e64d      	b.n	800f690 <st_sssa8_fully_connected+0x220>
 800f9f4:	462e      	mov	r6, r5
 800f9f6:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800f9fa:	f04f 0900 	mov.w	r9, #0
 800f9fe:	e60f      	b.n	800f620 <st_sssa8_fully_connected+0x1b0>
 800fa00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa02:	4093      	lsls	r3, r2
 800fa04:	f303 031f 	ssat	r3, #32, r3
 800fa08:	9a07      	ldr	r2, [sp, #28]
 800fa0a:	fb53 f312 	smmulr	r3, r3, r2
 800fa0e:	9a08      	ldr	r2, [sp, #32]
 800fa10:	4413      	add	r3, r2
 800fa12:	f303 0307 	ssat	r3, #8, r3
 800fa16:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800fa1a:	e798      	b.n	800f94e <st_sssa8_fully_connected+0x4de>
 800fa1c:	2a00      	cmp	r2, #0
 800fa1e:	dd0d      	ble.n	800fa3c <st_sssa8_fully_connected+0x5cc>
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800fa26:	fb53 0301 	smmla	r3, r3, r1, r0
 800fa2a:	4113      	asrs	r3, r2
 800fa2c:	f303 0307 	ssat	r3, #8, r3
 800fa30:	2000      	movs	r0, #0
 800fa32:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fa34:	7013      	strb	r3, [r2, #0]
 800fa36:	b017      	add	sp, #92	; 0x5c
 800fa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3c:	f1c2 0201 	rsb	r2, r2, #1
 800fa40:	4093      	lsls	r3, r2
 800fa42:	f303 031f 	ssat	r3, #32, r3
 800fa46:	9a07      	ldr	r2, [sp, #28]
 800fa48:	fb53 f312 	smmulr	r3, r3, r2
 800fa4c:	9a08      	ldr	r2, [sp, #32]
 800fa4e:	441a      	add	r2, r3
 800fa50:	f302 0307 	ssat	r3, #8, r2
 800fa54:	2000      	movs	r0, #0
 800fa56:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fa58:	7013      	strb	r3, [r2, #0]
 800fa5a:	b017      	add	sp, #92	; 0x5c
 800fa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa60:	462e      	mov	r6, r5
 800fa62:	e69f      	b.n	800f7a4 <st_sssa8_fully_connected+0x334>

0800fa64 <ai_padding_opt_init>:
 800fa64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa68:	2700      	movs	r7, #0
 800fa6a:	9c07      	ldr	r4, [sp, #28]
 800fa6c:	e9c0 7700 	strd	r7, r7, [r0]
 800fa70:	6087      	str	r7, [r0, #8]
 800fa72:	46b9      	mov	r9, r7
 800fa74:	690d      	ldr	r5, [r1, #16]
 800fa76:	f1c5 0c00 	rsb	ip, r5, #0
 800fa7a:	689d      	ldr	r5, [r3, #8]
 800fa7c:	42bd      	cmp	r5, r7
 800fa7e:	dd1c      	ble.n	800faba <ai_padding_opt_init+0x56>
 800fa80:	463e      	mov	r6, r7
 800fa82:	46be      	mov	lr, r7
 800fa84:	e010      	b.n	800faa8 <ai_padding_opt_init+0x44>
 800fa86:	6895      	ldr	r5, [r2, #8]
 800fa88:	eba5 080c 	sub.w	r8, r5, ip
 800fa8c:	68a5      	ldr	r5, [r4, #8]
 800fa8e:	45a8      	cmp	r8, r5
 800fa90:	da10      	bge.n	800fab4 <ai_padding_opt_init+0x50>
 800fa92:	f109 0901 	add.w	r9, r9, #1
 800fa96:	f8c0 9008 	str.w	r9, [r0, #8]
 800fa9a:	688d      	ldr	r5, [r1, #8]
 800fa9c:	f10e 0e01 	add.w	lr, lr, #1
 800faa0:	44ac      	add	ip, r5
 800faa2:	689d      	ldr	r5, [r3, #8]
 800faa4:	4575      	cmp	r5, lr
 800faa6:	dd09      	ble.n	800fabc <ai_padding_opt_init+0x58>
 800faa8:	f1bc 0f00 	cmp.w	ip, #0
 800faac:	daeb      	bge.n	800fa86 <ai_padding_opt_init+0x22>
 800faae:	3601      	adds	r6, #1
 800fab0:	6006      	str	r6, [r0, #0]
 800fab2:	e7f2      	b.n	800fa9a <ai_padding_opt_init+0x36>
 800fab4:	3701      	adds	r7, #1
 800fab6:	6047      	str	r7, [r0, #4]
 800fab8:	e7ef      	b.n	800fa9a <ai_padding_opt_init+0x36>
 800faba:	463e      	mov	r6, r7
 800fabc:	2500      	movs	r5, #0
 800fabe:	f8c0 9014 	str.w	r9, [r0, #20]
 800fac2:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800fac6:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800faca:	6205      	str	r5, [r0, #32]
 800facc:	694e      	ldr	r6, [r1, #20]
 800face:	f1c6 0c00 	rsb	ip, r6, #0
 800fad2:	685e      	ldr	r6, [r3, #4]
 800fad4:	42ae      	cmp	r6, r5
 800fad6:	dd1c      	ble.n	800fb12 <ai_padding_opt_init+0xae>
 800fad8:	46ae      	mov	lr, r5
 800fada:	e00f      	b.n	800fafc <ai_padding_opt_init+0x98>
 800fadc:	6855      	ldr	r5, [r2, #4]
 800fade:	6866      	ldr	r6, [r4, #4]
 800fae0:	eba5 050c 	sub.w	r5, r5, ip
 800fae4:	42b5      	cmp	r5, r6
 800fae6:	da10      	bge.n	800fb0a <ai_padding_opt_init+0xa6>
 800fae8:	6a05      	ldr	r5, [r0, #32]
 800faea:	3501      	adds	r5, #1
 800faec:	6205      	str	r5, [r0, #32]
 800faee:	68cd      	ldr	r5, [r1, #12]
 800faf0:	f10e 0e01 	add.w	lr, lr, #1
 800faf4:	44ac      	add	ip, r5
 800faf6:	685d      	ldr	r5, [r3, #4]
 800faf8:	4575      	cmp	r5, lr
 800fafa:	dd0a      	ble.n	800fb12 <ai_padding_opt_init+0xae>
 800fafc:	f1bc 0f00 	cmp.w	ip, #0
 800fb00:	daec      	bge.n	800fadc <ai_padding_opt_init+0x78>
 800fb02:	6985      	ldr	r5, [r0, #24]
 800fb04:	3501      	adds	r5, #1
 800fb06:	6185      	str	r5, [r0, #24]
 800fb08:	e7f1      	b.n	800faee <ai_padding_opt_init+0x8a>
 800fb0a:	69c5      	ldr	r5, [r0, #28]
 800fb0c:	3501      	adds	r5, #1
 800fb0e:	61c5      	str	r5, [r0, #28]
 800fb10:	e7ed      	b.n	800faee <ai_padding_opt_init+0x8a>
 800fb12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb16:	bf00      	nop

0800fb18 <ai_padding_opt_phase1>:
 800fb18:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800fb1c:	b923      	cbnz	r3, 800fb28 <ai_padding_opt_phase1+0x10>
 800fb1e:	b17a      	cbz	r2, 800fb40 <ai_padding_opt_phase1+0x28>
 800fb20:	3a01      	subs	r2, #1
 800fb22:	8483      	strh	r3, [r0, #36]	; 0x24
 800fb24:	61c2      	str	r2, [r0, #28]
 800fb26:	e004      	b.n	800fb32 <ai_padding_opt_phase1+0x1a>
 800fb28:	b152      	cbz	r2, 800fb40 <ai_padding_opt_phase1+0x28>
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	8482      	strh	r2, [r0, #36]	; 0x24
 800fb30:	6183      	str	r3, [r0, #24]
 800fb32:	68c3      	ldr	r3, [r0, #12]
 800fb34:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800fb38:	6003      	str	r3, [r0, #0]
 800fb3a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800fb3e:	4770      	bx	lr
 800fb40:	6a03      	ldr	r3, [r0, #32]
 800fb42:	2201      	movs	r2, #1
 800fb44:	3b01      	subs	r3, #1
 800fb46:	8482      	strh	r2, [r0, #36]	; 0x24
 800fb48:	6203      	str	r3, [r0, #32]
 800fb4a:	e7f2      	b.n	800fb32 <ai_padding_opt_phase1+0x1a>

0800fb4c <st_sssa8_ch_nn_mat_mult_kernel>:
 800fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb50:	b09d      	sub	sp, #116	; 0x74
 800fb52:	085e      	lsrs	r6, r3, #1
 800fb54:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fb56:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800fb5a:	441d      	add	r5, r3
 800fb5c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb5e:	9111      	str	r1, [sp, #68]	; 0x44
 800fb60:	9219      	str	r2, [sp, #100]	; 0x64
 800fb62:	940b      	str	r4, [sp, #44]	; 0x2c
 800fb64:	9518      	str	r5, [sp, #96]	; 0x60
 800fb66:	961b      	str	r6, [sp, #108]	; 0x6c
 800fb68:	f000 8276 	beq.w	8010058 <st_sssa8_ch_nn_mat_mult_kernel+0x50c>
 800fb6c:	eb01 0744 	add.w	r7, r1, r4, lsl #1
 800fb70:	4696      	mov	lr, r2
 800fb72:	1e72      	subs	r2, r6, #1
 800fb74:	460e      	mov	r6, r1
 800fb76:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800fb78:	f1a4 0310 	sub.w	r3, r4, #16
 800fb7c:	b292      	uxth	r2, r2
 800fb7e:	f8df 8768 	ldr.w	r8, [pc, #1896]	; 80102e8 <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800fb82:	3108      	adds	r1, #8
 800fb84:	091b      	lsrs	r3, r3, #4
 800fb86:	4684      	mov	ip, r0
 800fb88:	9714      	str	r7, [sp, #80]	; 0x50
 800fb8a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb8e:	4672      	mov	r2, lr
 800fb90:	3301      	adds	r3, #1
 800fb92:	3208      	adds	r2, #8
 800fb94:	9113      	str	r1, [sp, #76]	; 0x4c
 800fb96:	4621      	mov	r1, r4
 800fb98:	3c03      	subs	r4, #3
 800fb9a:	920c      	str	r2, [sp, #48]	; 0x30
 800fb9c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fb9e:	9412      	str	r4, [sp, #72]	; 0x48
 800fba0:	3204      	adds	r2, #4
 800fba2:	9206      	str	r2, [sp, #24]
 800fba4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fba6:	3204      	adds	r2, #4
 800fba8:	9207      	str	r2, [sp, #28]
 800fbaa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fbac:	3204      	adds	r2, #4
 800fbae:	9208      	str	r2, [sp, #32]
 800fbb0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800fbb2:	3201      	adds	r2, #1
 800fbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbb6:	1c6a      	adds	r2, r5, #1
 800fbb8:	920a      	str	r2, [sp, #40]	; 0x28
 800fbba:	011a      	lsls	r2, r3, #4
 800fbbc:	920d      	str	r2, [sp, #52]	; 0x34
 800fbbe:	eb06 1243 	add.w	r2, r6, r3, lsl #5
 800fbc2:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800fbc6:	9216      	str	r2, [sp, #88]	; 0x58
 800fbc8:	9315      	str	r3, [sp, #84]	; 0x54
 800fbca:	1f0b      	subs	r3, r1, #4
 800fbcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800fbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fbd2:	eb0c 0003 	add.w	r0, ip, r3
 800fbd6:	2b0f      	cmp	r3, #15
 800fbd8:	e951 2b02 	ldrd	r2, fp, [r1, #-8]
 800fbdc:	9002      	str	r0, [sp, #8]
 800fbde:	f340 8337 	ble.w	8010250 <st_sssa8_ch_nn_mat_mult_kernel+0x704>
 800fbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbe4:	4659      	mov	r1, fp
 800fbe6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fbe8:	4463      	add	r3, ip
 800fbea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800fbec:	9000      	str	r0, [sp, #0]
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	f8dc 7000 	ldr.w	r7, [ip]
 800fbf6:	9800      	ldr	r0, [sp, #0]
 800fbf8:	fa2f fa87 	sxtb16	sl, r7
 800fbfc:	f8d0 e000 	ldr.w	lr, [r0]
 800fc00:	ea4f 2737 	mov.w	r7, r7, ror #8
 800fc04:	fa2f f787 	sxtb16	r7, r7
 800fc08:	ea07 0008 	and.w	r0, r7, r8
 800fc0c:	fa1f f98a 	uxth.w	r9, sl
 800fc10:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800fc14:	ea4f 2a3e 	mov.w	sl, lr, ror #8
 800fc18:	fa2f fe8e 	sxtb16	lr, lr
 800fc1c:	fa1f f48e 	uxth.w	r4, lr
 800fc20:	fa2f fa8a 	sxtb16	sl, sl
 800fc24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc28:	ea0a 0a08 	and.w	sl, sl, r8
 800fc2c:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800fc30:	6837      	ldr	r7, [r6, #0]
 800fc32:	ea4a 4a1e 	orr.w	sl, sl, lr, lsr #16
 800fc36:	f8d5 e000 	ldr.w	lr, [r5]
 800fc3a:	fb29 220e 	smlad	r2, r9, lr, r2
 800fc3e:	fb29 3307 	smlad	r3, r9, r7, r3
 800fc42:	fb24 bb0e 	smlad	fp, r4, lr, fp
 800fc46:	fb24 1707 	smlad	r7, r4, r7, r1
 800fc4a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800fc4e:	6874      	ldr	r4, [r6, #4]
 800fc50:	fb20 220e 	smlad	r2, r0, lr, r2
 800fc54:	fb20 3304 	smlad	r3, r0, r4, r3
 800fc58:	fb2a be0e 	smlad	lr, sl, lr, fp
 800fc5c:	fb2a 7704 	smlad	r7, sl, r4, r7
 800fc60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fc64:	9800      	ldr	r0, [sp, #0]
 800fc66:	fa2f fa81 	sxtb16	sl, r1
 800fc6a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800fc6e:	fa1f f48a 	uxth.w	r4, sl
 800fc72:	ea4f 2131 	mov.w	r1, r1, ror #8
 800fc76:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800fc7a:	fa2f f181 	sxtb16	r1, r1
 800fc7e:	ea01 0008 	and.w	r0, r1, r8
 800fc82:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fc86:	ea4f 2139 	mov.w	r1, r9, ror #8
 800fc8a:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800fc8e:	fa2f f989 	sxtb16	r9, r9
 800fc92:	fa1f fa89 	uxth.w	sl, r9
 800fc96:	fa2f f181 	sxtb16	r1, r1
 800fc9a:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800fc9e:	ea01 0108 	and.w	r1, r1, r8
 800fca2:	ea41 4119 	orr.w	r1, r1, r9, lsr #16
 800fca6:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800fcaa:	fb24 220b 	smlad	r2, r4, fp, r2
 800fcae:	fb24 3409 	smlad	r4, r4, r9, r3
 800fcb2:	fb2a eb0b 	smlad	fp, sl, fp, lr
 800fcb6:	fb2a 7a09 	smlad	sl, sl, r9, r7
 800fcba:	68eb      	ldr	r3, [r5, #12]
 800fcbc:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800fcc0:	fb20 2203 	smlad	r2, r0, r3, r2
 800fcc4:	fb20 400e 	smlad	r0, r0, lr, r4
 800fcc8:	fb21 bb03 	smlad	fp, r1, r3, fp
 800fccc:	fb21 aa0e 	smlad	sl, r1, lr, sl
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800fcd6:	689f      	ldr	r7, [r3, #8]
 800fcd8:	fa2f f381 	sxtb16	r3, r1
 800fcdc:	b29c      	uxth	r4, r3
 800fcde:	ea4f 2131 	mov.w	r1, r1, ror #8
 800fce2:	fa2f f181 	sxtb16	r1, r1
 800fce6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fcea:	ea01 0108 	and.w	r1, r1, r8
 800fcee:	fa2f fe87 	sxtb16	lr, r7
 800fcf2:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800fcf6:	fa1f f98e 	uxth.w	r9, lr
 800fcfa:	ea4f 2337 	mov.w	r3, r7, ror #8
 800fcfe:	fa2f f383 	sxtb16	r3, r3
 800fd02:	ea03 0708 	and.w	r7, r3, r8
 800fd06:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
 800fd0a:	692b      	ldr	r3, [r5, #16]
 800fd0c:	ea47 471e 	orr.w	r7, r7, lr, lsr #16
 800fd10:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800fd14:	fb24 2203 	smlad	r2, r4, r3, r2
 800fd18:	fb24 000e 	smlad	r0, r4, lr, r0
 800fd1c:	fb29 b303 	smlad	r3, r9, r3, fp
 800fd20:	fb29 aa0e 	smlad	sl, r9, lr, sl
 800fd24:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800fd28:	6974      	ldr	r4, [r6, #20]
 800fd2a:	fb21 220e 	smlad	r2, r1, lr, r2
 800fd2e:	fb21 0004 	smlad	r0, r1, r4, r0
 800fd32:	fb27 330e 	smlad	r3, r7, lr, r3
 800fd36:	fb27 a704 	smlad	r7, r7, r4, sl
 800fd3a:	9900      	ldr	r1, [sp, #0]
 800fd3c:	f10c 0c10 	add.w	ip, ip, #16
 800fd40:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800fd44:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800fd48:	3110      	adds	r1, #16
 800fd4a:	fa2f fe84 	sxtb16	lr, r4
 800fd4e:	9100      	str	r1, [sp, #0]
 800fd50:	fa1f f18e 	uxth.w	r1, lr
 800fd54:	ea4f 2434 	mov.w	r4, r4, ror #8
 800fd58:	f8d5 a018 	ldr.w	sl, [r5, #24]
 800fd5c:	fa2f f484 	sxtb16	r4, r4
 800fd60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fd64:	ea04 0408 	and.w	r4, r4, r8
 800fd68:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800fd6c:	ea4f 2e39 	mov.w	lr, r9, ror #8
 800fd70:	fa2f f989 	sxtb16	r9, r9
 800fd74:	fa1f fb89 	uxth.w	fp, r9
 800fd78:	fa2f fe8e 	sxtb16	lr, lr
 800fd7c:	ea4b 4b0e 	orr.w	fp, fp, lr, lsl #16
 800fd80:	ea0e 0e08 	and.w	lr, lr, r8
 800fd84:	ea4e 4e19 	orr.w	lr, lr, r9, lsr #16
 800fd88:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800fd8c:	fb21 220a 	smlad	r2, r1, sl, r2
 800fd90:	fb21 0009 	smlad	r0, r1, r9, r0
 800fd94:	fb2b 3a0a 	smlad	sl, fp, sl, r3
 800fd98:	fb2b 7909 	smlad	r9, fp, r9, r7
 800fd9c:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800fda0:	3620      	adds	r6, #32
 800fda2:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800fda6:	3520      	adds	r5, #32
 800fda8:	fb24 220b 	smlad	r2, r4, fp, r2
 800fdac:	fb24 0307 	smlad	r3, r4, r7, r0
 800fdb0:	fb2e ab0b 	smlad	fp, lr, fp, sl
 800fdb4:	fb2e 9107 	smlad	r1, lr, r7, r9
 800fdb8:	9801      	ldr	r0, [sp, #4]
 800fdba:	4584      	cmp	ip, r0
 800fdbc:	f47f af19 	bne.w	800fbf2 <st_sssa8_ch_nn_mat_mult_kernel+0xa6>
 800fdc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fdc2:	9802      	ldr	r0, [sp, #8]
 800fdc4:	9405      	str	r4, [sp, #20]
 800fdc6:	4420      	add	r0, r4
 800fdc8:	9002      	str	r0, [sp, #8]
 800fdca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fdcc:	9004      	str	r0, [sp, #16]
 800fdce:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fdd0:	9003      	str	r0, [sp, #12]
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fdd6:	42a0      	cmp	r0, r4
 800fdd8:	da63      	bge.n	800fea2 <st_sssa8_ch_nn_mat_mult_kernel+0x356>
 800fdda:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800fddc:	9f01      	ldr	r7, [sp, #4]
 800fdde:	1a20      	subs	r0, r4, r0
 800fde0:	f8dd a008 	ldr.w	sl, [sp, #8]
 800fde4:	0880      	lsrs	r0, r0, #2
 800fde6:	900f      	str	r0, [sp, #60]	; 0x3c
 800fde8:	3001      	adds	r0, #1
 800fdea:	e9dd ce03 	ldrd	ip, lr, [sp, #12]
 800fdee:	0084      	lsls	r4, r0, #2
 800fdf0:	900e      	str	r0, [sp, #56]	; 0x38
 800fdf2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800fdf6:	9410      	str	r4, [sp, #64]	; 0x40
 800fdf8:	e9cd a000 	strd	sl, r0, [sp]
 800fdfc:	9c00      	ldr	r4, [sp, #0]
 800fdfe:	f857 0b04 	ldr.w	r0, [r7], #4
 800fe02:	f854 9b04 	ldr.w	r9, [r4], #4
 800fe06:	f8dc a000 	ldr.w	sl, [ip]
 800fe0a:	9400      	str	r4, [sp, #0]
 800fe0c:	fa2f f480 	sxtb16	r4, r0
 800fe10:	b2a6      	uxth	r6, r4
 800fe12:	ea4f 2030 	mov.w	r0, r0, ror #8
 800fe16:	fa2f f080 	sxtb16	r0, r0
 800fe1a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800fe1e:	ea00 0008 	and.w	r0, r0, r8
 800fe22:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800fe26:	ea4f 2439 	mov.w	r4, r9, ror #8
 800fe2a:	fa2f f989 	sxtb16	r9, r9
 800fe2e:	fa1f f589 	uxth.w	r5, r9
 800fe32:	fa2f f484 	sxtb16	r4, r4
 800fe36:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800fe3a:	ea04 0408 	and.w	r4, r4, r8
 800fe3e:	ea44 4419 	orr.w	r4, r4, r9, lsr #16
 800fe42:	f8de 9000 	ldr.w	r9, [lr]
 800fe46:	fb26 220a 	smlad	r2, r6, sl, r2
 800fe4a:	fb26 3309 	smlad	r3, r6, r9, r3
 800fe4e:	fb25 bb0a 	smlad	fp, r5, sl, fp
 800fe52:	fb25 1109 	smlad	r1, r5, r9, r1
 800fe56:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800fe5a:	f10e 0e08 	add.w	lr, lr, #8
 800fe5e:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 800fe62:	f10c 0c08 	add.w	ip, ip, #8
 800fe66:	fb20 2205 	smlad	r2, r0, r5, r2
 800fe6a:	fb20 3306 	smlad	r3, r0, r6, r3
 800fe6e:	fb24 bb05 	smlad	fp, r4, r5, fp
 800fe72:	fb24 1106 	smlad	r1, r4, r6, r1
 800fe76:	9801      	ldr	r0, [sp, #4]
 800fe78:	4287      	cmp	r7, r0
 800fe7a:	d1bf      	bne.n	800fdfc <st_sssa8_ch_nn_mat_mult_kernel+0x2b0>
 800fe7c:	9802      	ldr	r0, [sp, #8]
 800fe7e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fe80:	4420      	add	r0, r4
 800fe82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fe84:	9002      	str	r0, [sp, #8]
 800fe86:	9805      	ldr	r0, [sp, #20]
 800fe88:	3004      	adds	r0, #4
 800fe8a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800fe8e:	9c04      	ldr	r4, [sp, #16]
 800fe90:	9005      	str	r0, [sp, #20]
 800fe92:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fe94:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800fe98:	9404      	str	r4, [sp, #16]
 800fe9a:	9c03      	ldr	r4, [sp, #12]
 800fe9c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800fea0:	9003      	str	r0, [sp, #12]
 800fea2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fea4:	9f05      	ldr	r7, [sp, #20]
 800fea6:	42be      	cmp	r6, r7
 800fea8:	dd5e      	ble.n	800ff68 <st_sssa8_ch_nn_mat_mult_kernel+0x41c>
 800feaa:	9801      	ldr	r0, [sp, #4]
 800feac:	9c03      	ldr	r4, [sp, #12]
 800feae:	f990 5000 	ldrsb.w	r5, [r0]
 800feb2:	9802      	ldr	r0, [sp, #8]
 800feb4:	f9b4 4000 	ldrsh.w	r4, [r4]
 800feb8:	f990 0000 	ldrsb.w	r0, [r0]
 800febc:	fb14 2205 	smlabb	r2, r4, r5, r2
 800fec0:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800fec4:	9c04      	ldr	r4, [sp, #16]
 800fec6:	f9b4 4000 	ldrsh.w	r4, [r4]
 800feca:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fece:	1c78      	adds	r0, r7, #1
 800fed0:	fb14 3305 	smlabb	r3, r4, r5, r3
 800fed4:	4286      	cmp	r6, r0
 800fed6:	dd41      	ble.n	800ff5c <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800fed8:	9801      	ldr	r0, [sp, #4]
 800feda:	9c03      	ldr	r4, [sp, #12]
 800fedc:	f990 5001 	ldrsb.w	r5, [r0, #1]
 800fee0:	9802      	ldr	r0, [sp, #8]
 800fee2:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fee6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800feea:	fb14 2205 	smlabb	r2, r4, r5, r2
 800feee:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800fef2:	9c04      	ldr	r4, [sp, #16]
 800fef4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fef8:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fefc:	1cb8      	adds	r0, r7, #2
 800fefe:	fb14 3305 	smlabb	r3, r4, r5, r3
 800ff02:	4286      	cmp	r6, r0
 800ff04:	dd2a      	ble.n	800ff5c <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800ff06:	9801      	ldr	r0, [sp, #4]
 800ff08:	9c03      	ldr	r4, [sp, #12]
 800ff0a:	f990 5002 	ldrsb.w	r5, [r0, #2]
 800ff0e:	9802      	ldr	r0, [sp, #8]
 800ff10:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800ff14:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ff18:	fb14 2205 	smlabb	r2, r4, r5, r2
 800ff1c:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800ff20:	9c04      	ldr	r4, [sp, #16]
 800ff22:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800ff26:	fb14 1100 	smlabb	r1, r4, r0, r1
 800ff2a:	1cf8      	adds	r0, r7, #3
 800ff2c:	fb14 3305 	smlabb	r3, r4, r5, r3
 800ff30:	4286      	cmp	r6, r0
 800ff32:	dd13      	ble.n	800ff5c <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800ff34:	9d03      	ldr	r5, [sp, #12]
 800ff36:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 800ff3a:	9d02      	ldr	r5, [sp, #8]
 800ff3c:	f995 4003 	ldrsb.w	r4, [r5, #3]
 800ff40:	9d04      	ldr	r5, [sp, #16]
 800ff42:	fb10 bb04 	smlabb	fp, r0, r4, fp
 800ff46:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800ff4a:	fb15 1104 	smlabb	r1, r5, r4, r1
 800ff4e:	9c01      	ldr	r4, [sp, #4]
 800ff50:	f994 4003 	ldrsb.w	r4, [r4, #3]
 800ff54:	fb10 2204 	smlabb	r2, r0, r4, r2
 800ff58:	fb15 3304 	smlabb	r3, r5, r4, r3
 800ff5c:	9c05      	ldr	r4, [sp, #20]
 800ff5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ff60:	1b00      	subs	r0, r0, r4
 800ff62:	9c01      	ldr	r4, [sp, #4]
 800ff64:	4404      	add	r4, r0
 800ff66:	9401      	str	r4, [sp, #4]
 800ff68:	9806      	ldr	r0, [sp, #24]
 800ff6a:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800ff6e:	2c15      	cmp	r4, #21
 800ff70:	f340 8114 	ble.w	801019c <st_sssa8_ch_nn_mat_mult_kernel+0x650>
 800ff74:	1ea5      	subs	r5, r4, #2
 800ff76:	2001      	movs	r0, #1
 800ff78:	3c01      	subs	r4, #1
 800ff7a:	fa00 f505 	lsl.w	r5, r0, r5
 800ff7e:	9807      	ldr	r0, [sp, #28]
 800ff80:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ff84:	fb52 5200 	smmla	r2, r2, r0, r5
 800ff88:	fb53 5000 	smmla	r0, r3, r0, r5
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	4122      	asrs	r2, r4
 800ff90:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800ff94:	4432      	add	r2, r6
 800ff96:	f302 0207 	ssat	r2, #8, r2
 800ff9a:	4120      	asrs	r0, r4
 800ff9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff9e:	4430      	add	r0, r6
 800ffa0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ffa4:	f300 0007 	ssat	r0, #8, r0
 800ffa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffaa:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ffae:	9b06      	ldr	r3, [sp, #24]
 800ffb0:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800ffb4:	2b15      	cmp	r3, #21
 800ffb6:	f340 80d7 	ble.w	8010168 <st_sssa8_ch_nn_mat_mult_kernel+0x61c>
 800ffba:	1e98      	subs	r0, r3, #2
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	fa02 f000 	lsl.w	r0, r2, r0
 800ffc4:	9a07      	ldr	r2, [sp, #28]
 800ffc6:	6814      	ldr	r4, [r2, #0]
 800ffc8:	9a08      	ldr	r2, [sp, #32]
 800ffca:	fb5b 0904 	smmla	r9, fp, r4, r0
 800ffce:	6816      	ldr	r6, [r2, #0]
 800ffd0:	fa49 f503 	asr.w	r5, r9, r3
 800ffd4:	fb51 0404 	smmla	r4, r1, r4, r0
 800ffd8:	4435      	add	r5, r6
 800ffda:	f305 0507 	ssat	r5, #8, r5
 800ffde:	fa44 f303 	asr.w	r3, r4, r3
 800ffe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffe4:	4433      	add	r3, r6
 800ffe6:	7015      	strb	r5, [r2, #0]
 800ffe8:	f303 0307 	ssat	r3, #8, r3
 800ffec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffee:	7013      	strb	r3, [r2, #0]
 800fff0:	9a01      	ldr	r2, [sp, #4]
 800fff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fff4:	9b06      	ldr	r3, [sp, #24]
 800fff6:	440a      	add	r2, r1
 800fff8:	3304      	adds	r3, #4
 800fffa:	4694      	mov	ip, r2
 800fffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fffe:	9306      	str	r3, [sp, #24]
 8010000:	3208      	adds	r2, #8
 8010002:	920c      	str	r2, [sp, #48]	; 0x30
 8010004:	9a07      	ldr	r2, [sp, #28]
 8010006:	3208      	adds	r2, #8
 8010008:	9207      	str	r2, [sp, #28]
 801000a:	9a08      	ldr	r2, [sp, #32]
 801000c:	3208      	adds	r2, #8
 801000e:	9208      	str	r2, [sp, #32]
 8010010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010012:	3202      	adds	r2, #2
 8010014:	9209      	str	r2, [sp, #36]	; 0x24
 8010016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010018:	3202      	adds	r2, #2
 801001a:	920a      	str	r2, [sp, #40]	; 0x28
 801001c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801001e:	4293      	cmp	r3, r2
 8010020:	f47f add5 	bne.w	800fbce <st_sssa8_ch_nn_mat_mult_kernel+0x82>
 8010024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010026:	4660      	mov	r0, ip
 8010028:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801002a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801002e:	9228      	str	r2, [sp, #160]	; 0xa0
 8010030:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010032:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010036:	9229      	str	r2, [sp, #164]	; 0xa4
 8010038:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801003a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801003e:	922a      	str	r2, [sp, #168]	; 0xa8
 8010040:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010042:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8010046:	9218      	str	r2, [sp, #96]	; 0x60
 8010048:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801004a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801004e:	9219      	str	r2, [sp, #100]	; 0x64
 8010050:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010056:	9327      	str	r3, [sp, #156]	; 0x9c
 8010058:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801005a:	07db      	lsls	r3, r3, #31
 801005c:	d57e      	bpl.n	801015c <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 801005e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010060:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010062:	6819      	ldr	r1, [r3, #0]
 8010064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010066:	ea5f 0993 	movs.w	r9, r3, lsr #2
 801006a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801006e:	f000 8138 	beq.w	80102e2 <st_sssa8_ch_nn_mat_mult_kernel+0x796>
 8010072:	4604      	mov	r4, r0
 8010074:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8010078:	4646      	mov	r6, r8
 801007a:	460a      	mov	r2, r1
 801007c:	f8df e268 	ldr.w	lr, [pc, #616]	; 80102e8 <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 8010080:	f854 3b04 	ldr.w	r3, [r4], #4
 8010084:	fa2f fa83 	sxtb16	sl, r3
 8010088:	fa1f f08a 	uxth.w	r0, sl
 801008c:	682f      	ldr	r7, [r5, #0]
 801008e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010092:	fa2f f383 	sxtb16	r3, r3
 8010096:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801009a:	ea03 030e 	and.w	r3, r3, lr
 801009e:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 80100a2:	fb20 1107 	smlad	r1, r0, r7, r1
 80100a6:	6837      	ldr	r7, [r6, #0]
 80100a8:	fb20 2207 	smlad	r2, r0, r7, r2
 80100ac:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80100b0:	3608      	adds	r6, #8
 80100b2:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80100b6:	3508      	adds	r5, #8
 80100b8:	fb23 110a 	smlad	r1, r3, sl, r1
 80100bc:	fb23 2200 	smlad	r2, r3, r0, r2
 80100c0:	4564      	cmp	r4, ip
 80100c2:	d1dd      	bne.n	8010080 <st_sssa8_ch_nn_mat_mult_kernel+0x534>
 80100c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100c6:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 80100ca:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80100ce:	9311      	str	r3, [sp, #68]	; 0x44
 80100d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d2:	f013 0303 	ands.w	r3, r3, #3
 80100d6:	d020      	beq.n	801011a <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 80100d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80100da:	3b01      	subs	r3, #1
 80100dc:	f99c 0000 	ldrsb.w	r0, [ip]
 80100e0:	882c      	ldrh	r4, [r5, #0]
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	fb14 1100 	smlabb	r1, r4, r0, r1
 80100e8:	f8b8 4000 	ldrh.w	r4, [r8]
 80100ec:	fb14 2200 	smlabb	r2, r4, r0, r2
 80100f0:	b19b      	cbz	r3, 801011a <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 80100f2:	f99c 0001 	ldrsb.w	r0, [ip, #1]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	886c      	ldrh	r4, [r5, #2]
 80100fa:	fb14 1100 	smlabb	r1, r4, r0, r1
 80100fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010102:	fb14 2200 	smlabb	r2, r4, r0, r2
 8010106:	d008      	beq.n	801011a <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 8010108:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 801010c:	88a8      	ldrh	r0, [r5, #4]
 801010e:	fb10 1103 	smlabb	r1, r0, r3, r1
 8010112:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8010116:	fb10 2203 	smlabb	r2, r0, r3, r2
 801011a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801011c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010120:	2b15      	cmp	r3, #21
 8010122:	f340 80a0 	ble.w	8010266 <st_sssa8_ch_nn_mat_mult_kernel+0x71a>
 8010126:	1e9e      	subs	r6, r3, #2
 8010128:	1e5d      	subs	r5, r3, #1
 801012a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801012c:	2301      	movs	r3, #1
 801012e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8010130:	6800      	ldr	r0, [r0, #0]
 8010132:	40b3      	lsls	r3, r6
 8010134:	6824      	ldr	r4, [r4, #0]
 8010136:	fb51 3100 	smmla	r1, r1, r0, r3
 801013a:	fb52 3300 	smmla	r3, r2, r0, r3
 801013e:	fa41 f205 	asr.w	r2, r1, r5
 8010142:	4422      	add	r2, r4
 8010144:	f302 0207 	ssat	r2, #8, r2
 8010148:	412b      	asrs	r3, r5
 801014a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801014c:	4423      	add	r3, r4
 801014e:	f800 2b01 	strb.w	r2, [r0], #1
 8010152:	f303 0307 	ssat	r3, #8, r3
 8010156:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010158:	902a      	str	r0, [sp, #168]	; 0xa8
 801015a:	7013      	strb	r3, [r2, #0]
 801015c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801015e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8010160:	4418      	add	r0, r3
 8010162:	b01d      	add	sp, #116	; 0x74
 8010164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010168:	2b00      	cmp	r3, #0
 801016a:	dd32      	ble.n	80101d2 <st_sssa8_ch_nn_mat_mult_kernel+0x686>
 801016c:	004c      	lsls	r4, r1, #1
 801016e:	9a07      	ldr	r2, [sp, #28]
 8010170:	9908      	ldr	r1, [sp, #32]
 8010172:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8010176:	6812      	ldr	r2, [r2, #0]
 8010178:	6809      	ldr	r1, [r1, #0]
 801017a:	fb59 1902 	smmla	r9, r9, r2, r1
 801017e:	fb54 1102 	smmla	r1, r4, r2, r1
 8010182:	fa49 f903 	asr.w	r9, r9, r3
 8010186:	f309 0907 	ssat	r9, #8, r9
 801018a:	4119      	asrs	r1, r3
 801018c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018e:	f883 9000 	strb.w	r9, [r3]
 8010192:	f301 0107 	ssat	r1, #8, r1
 8010196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010198:	7019      	strb	r1, [r3, #0]
 801019a:	e729      	b.n	800fff0 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 801019c:	2c00      	cmp	r4, #0
 801019e:	dd35      	ble.n	801020c <st_sssa8_ch_nn_mat_mult_kernel+0x6c0>
 80101a0:	0058      	lsls	r0, r3, #1
 80101a2:	9d08      	ldr	r5, [sp, #32]
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	0052      	lsls	r2, r2, #1
 80101a8:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80101ac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80101b0:	fb52 5203 	smmla	r2, r2, r3, r5
 80101b4:	fb50 5303 	smmla	r3, r0, r3, r5
 80101b8:	4122      	asrs	r2, r4
 80101ba:	f302 0207 	ssat	r2, #8, r2
 80101be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101c0:	4123      	asrs	r3, r4
 80101c2:	f800 2c01 	strb.w	r2, [r0, #-1]
 80101c6:	f303 0307 	ssat	r3, #8, r3
 80101ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80101d0:	e6ed      	b.n	800ffae <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 80101d2:	f1c3 0301 	rsb	r3, r3, #1
 80101d6:	fa0b f903 	lsl.w	r9, fp, r3
 80101da:	f309 021f 	ssat	r2, #32, r9
 80101de:	9807      	ldr	r0, [sp, #28]
 80101e0:	6800      	ldr	r0, [r0, #0]
 80101e2:	fb52 f210 	smmulr	r2, r2, r0
 80101e6:	4099      	lsls	r1, r3
 80101e8:	f301 011f 	ssat	r1, #32, r1
 80101ec:	fb51 f110 	smmulr	r1, r1, r0
 80101f0:	9808      	ldr	r0, [sp, #32]
 80101f2:	6803      	ldr	r3, [r0, #0]
 80101f4:	4413      	add	r3, r2
 80101f6:	f303 0307 	ssat	r3, #8, r3
 80101fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101fc:	7013      	strb	r3, [r2, #0]
 80101fe:	6803      	ldr	r3, [r0, #0]
 8010200:	440b      	add	r3, r1
 8010202:	f303 0307 	ssat	r3, #8, r3
 8010206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010208:	7013      	strb	r3, [r2, #0]
 801020a:	e6f1      	b.n	800fff0 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 801020c:	f1c4 0401 	rsb	r4, r4, #1
 8010210:	40a2      	lsls	r2, r4
 8010212:	f302 021f 	ssat	r2, #32, r2
 8010216:	9807      	ldr	r0, [sp, #28]
 8010218:	f850 5c04 	ldr.w	r5, [r0, #-4]
 801021c:	fb52 f215 	smmulr	r2, r2, r5
 8010220:	fa03 f004 	lsl.w	r0, r3, r4
 8010224:	f300 001f 	ssat	r0, #32, r0
 8010228:	fb50 f015 	smmulr	r0, r0, r5
 801022c:	9c08      	ldr	r4, [sp, #32]
 801022e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010232:	4413      	add	r3, r2
 8010234:	f303 0307 	ssat	r3, #8, r3
 8010238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801023a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801023e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010242:	4403      	add	r3, r0
 8010244:	f303 0307 	ssat	r3, #8, r3
 8010248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801024a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801024e:	e6ae      	b.n	800ffae <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 8010250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010252:	2000      	movs	r0, #0
 8010254:	4659      	mov	r1, fp
 8010256:	f8cd c004 	str.w	ip, [sp, #4]
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801025e:	9005      	str	r0, [sp, #20]
 8010260:	9303      	str	r3, [sp, #12]
 8010262:	4613      	mov	r3, r2
 8010264:	e5b6      	b.n	800fdd4 <st_sssa8_ch_nn_mat_mult_kernel+0x288>
 8010266:	2b00      	cmp	r3, #0
 8010268:	dd1b      	ble.n	80102a2 <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 801026a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801026c:	0049      	lsls	r1, r1, #1
 801026e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8010270:	0052      	lsls	r2, r2, #1
 8010272:	6800      	ldr	r0, [r0, #0]
 8010274:	6824      	ldr	r4, [r4, #0]
 8010276:	fb51 4100 	smmla	r1, r1, r0, r4
 801027a:	fb52 4200 	smmla	r2, r2, r0, r4
 801027e:	fa41 f303 	asr.w	r3, r1, r3
 8010282:	f303 0307 	ssat	r3, #8, r3
 8010286:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8010288:	f800 3b01 	strb.w	r3, [r0], #1
 801028c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801028e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010292:	fa42 f303 	asr.w	r3, r2, r3
 8010296:	f303 0307 	ssat	r3, #8, r3
 801029a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801029c:	902a      	str	r0, [sp, #168]	; 0xa8
 801029e:	7013      	strb	r3, [r2, #0]
 80102a0:	e75c      	b.n	801015c <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 80102a2:	f1c3 0001 	rsb	r0, r3, #1
 80102a6:	fa01 f300 	lsl.w	r3, r1, r0
 80102aa:	f303 031f 	ssat	r3, #32, r3
 80102ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80102b0:	6809      	ldr	r1, [r1, #0]
 80102b2:	fb53 f311 	smmulr	r3, r3, r1
 80102b6:	4082      	lsls	r2, r0
 80102b8:	f302 021f 	ssat	r2, #32, r2
 80102bc:	fb52 f211 	smmulr	r2, r2, r1
 80102c0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80102c2:	6809      	ldr	r1, [r1, #0]
 80102c4:	440b      	add	r3, r1
 80102c6:	f303 0307 	ssat	r3, #8, r3
 80102ca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80102cc:	f801 3b01 	strb.w	r3, [r1], #1
 80102d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4413      	add	r3, r2
 80102d6:	f303 0307 	ssat	r3, #8, r3
 80102da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80102dc:	912a      	str	r1, [sp, #168]	; 0xa8
 80102de:	7013      	strb	r3, [r2, #0]
 80102e0:	e73c      	b.n	801015c <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 80102e2:	4684      	mov	ip, r0
 80102e4:	460a      	mov	r2, r1
 80102e6:	e6f3      	b.n	80100d0 <st_sssa8_ch_nn_mat_mult_kernel+0x584>
 80102e8:	ffff0000 	.word	0xffff0000

080102ec <st_int8_to16_no_shift>:
 80102ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	f1b2 0810 	subs.w	r8, r2, #16
 80102f4:	f100 808c 	bmi.w	8010410 <st_int8_to16_no_shift+0x124>
 80102f8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80102fc:	4603      	mov	r3, r0
 80102fe:	4c45      	ldr	r4, [pc, #276]	; (8010414 <st_int8_to16_no_shift+0x128>)
 8010300:	f108 0801 	add.w	r8, r8, #1
 8010304:	eb01 1748 	add.w	r7, r1, r8, lsl #5
 8010308:	f8d3 e000 	ldr.w	lr, [r3]
 801030c:	3310      	adds	r3, #16
 801030e:	fa2f f69e 	sxtb16	r6, lr, ror #8
 8010312:	fa2f fe8e 	sxtb16	lr, lr
 8010316:	ea06 0504 	and.w	r5, r6, r4
 801031a:	fa1f f98e 	uxth.w	r9, lr
 801031e:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8010322:	3120      	adds	r1, #32
 8010324:	fa2f fa9c 	sxtb16	sl, ip, ror #8
 8010328:	ea49 4906 	orr.w	r9, r9, r6, lsl #16
 801032c:	ea45 4e1e 	orr.w	lr, r5, lr, lsr #16
 8010330:	ea0a 0504 	and.w	r5, sl, r4
 8010334:	fa2f fc8c 	sxtb16	ip, ip
 8010338:	fa1f f68c 	uxth.w	r6, ip
 801033c:	f841 9c20 	str.w	r9, [r1, #-32]
 8010340:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 8010344:	f841 ec1c 	str.w	lr, [r1, #-28]
 8010348:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 801034c:	f841 cc14 	str.w	ip, [r1, #-20]
 8010350:	f841 6c18 	str.w	r6, [r1, #-24]
 8010354:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8010358:	f853 cc04 	ldr.w	ip, [r3, #-4]
 801035c:	fa2f f59e 	sxtb16	r5, lr, ror #8
 8010360:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8010364:	ea05 0b04 	and.w	fp, r5, r4
 8010368:	fa2f fe8e 	sxtb16	lr, lr
 801036c:	fa2f fc8c 	sxtb16	ip, ip
 8010370:	fa1f f98e 	uxth.w	r9, lr
 8010374:	fa1f fa8c 	uxth.w	sl, ip
 8010378:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 801037c:	ea06 0504 	and.w	r5, r6, r4
 8010380:	ea4b 4e1e 	orr.w	lr, fp, lr, lsr #16
 8010384:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 8010388:	f841 9c10 	str.w	r9, [r1, #-16]
 801038c:	f841 ec0c 	str.w	lr, [r1, #-12]
 8010390:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 8010394:	f841 6c08 	str.w	r6, [r1, #-8]
 8010398:	428f      	cmp	r7, r1
 801039a:	f841 cc04 	str.w	ip, [r1, #-4]
 801039e:	d1b3      	bne.n	8010308 <st_int8_to16_no_shift+0x1c>
 80103a0:	ea4f 1708 	mov.w	r7, r8, lsl #4
 80103a4:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 80103a8:	f1a2 0804 	sub.w	r8, r2, #4
 80103ac:	45b8      	cmp	r8, r7
 80103ae:	db23      	blt.n	80103f8 <st_int8_to16_no_shift+0x10c>
 80103b0:	eba8 0807 	sub.w	r8, r8, r7
 80103b4:	4686      	mov	lr, r0
 80103b6:	4e17      	ldr	r6, [pc, #92]	; (8010414 <st_int8_to16_no_shift+0x128>)
 80103b8:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80103bc:	f108 0901 	add.w	r9, r8, #1
 80103c0:	eb01 05c9 	add.w	r5, r1, r9, lsl #3
 80103c4:	f85e 3b04 	ldr.w	r3, [lr], #4
 80103c8:	3108      	adds	r1, #8
 80103ca:	fa2f fa93 	sxtb16	sl, r3, ror #8
 80103ce:	fa2f f383 	sxtb16	r3, r3
 80103d2:	ea0a 0406 	and.w	r4, sl, r6
 80103d6:	fa1f fc83 	uxth.w	ip, r3
 80103da:	428d      	cmp	r5, r1
 80103dc:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 80103e0:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 80103e4:	f841 cc08 	str.w	ip, [r1, #-8]
 80103e8:	f841 3c04 	str.w	r3, [r1, #-4]
 80103ec:	d1ea      	bne.n	80103c4 <st_int8_to16_no_shift+0xd8>
 80103ee:	3704      	adds	r7, #4
 80103f0:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80103f4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80103f8:	42ba      	cmp	r2, r7
 80103fa:	dd07      	ble.n	801040c <st_int8_to16_no_shift+0x120>
 80103fc:	1bd2      	subs	r2, r2, r7
 80103fe:	4402      	add	r2, r0
 8010400:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8010404:	4290      	cmp	r0, r2
 8010406:	f821 3b02 	strh.w	r3, [r1], #2
 801040a:	d1f9      	bne.n	8010400 <st_int8_to16_no_shift+0x114>
 801040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010410:	2700      	movs	r7, #0
 8010412:	e7c9      	b.n	80103a8 <st_int8_to16_no_shift+0xbc>
 8010414:	ffff0000 	.word	0xffff0000

08010418 <st_int8_to16_no_shift_interleaved>:
 8010418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041a:	f1b2 0510 	subs.w	r5, r2, #16
 801041e:	d449      	bmi.n	80104b4 <st_int8_to16_no_shift_interleaved+0x9c>
 8010420:	092d      	lsrs	r5, r5, #4
 8010422:	4603      	mov	r3, r0
 8010424:	3501      	adds	r5, #1
 8010426:	eb01 1445 	add.w	r4, r1, r5, lsl #5
 801042a:	f8d3 e000 	ldr.w	lr, [r3]
 801042e:	3120      	adds	r1, #32
 8010430:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8010434:	3310      	adds	r3, #16
 8010436:	fa2f f69e 	sxtb16	r6, lr, ror #8
 801043a:	fa2f fe8e 	sxtb16	lr, lr
 801043e:	f841 6c20 	str.w	r6, [r1, #-32]
 8010442:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8010446:	fa2f fc8c 	sxtb16	ip, ip
 801044a:	f841 6c18 	str.w	r6, [r1, #-24]
 801044e:	f841 ec1c 	str.w	lr, [r1, #-28]
 8010452:	f841 cc14 	str.w	ip, [r1, #-20]
 8010456:	428c      	cmp	r4, r1
 8010458:	f853 ec08 	ldr.w	lr, [r3, #-8]
 801045c:	f853 cc04 	ldr.w	ip, [r3, #-4]
 8010460:	fa2f f79e 	sxtb16	r7, lr, ror #8
 8010464:	fa2f f69c 	sxtb16	r6, ip, ror #8
 8010468:	fa2f fe8e 	sxtb16	lr, lr
 801046c:	fa2f fc8c 	sxtb16	ip, ip
 8010470:	f841 7c10 	str.w	r7, [r1, #-16]
 8010474:	f841 ec0c 	str.w	lr, [r1, #-12]
 8010478:	f841 6c08 	str.w	r6, [r1, #-8]
 801047c:	f841 cc04 	str.w	ip, [r1, #-4]
 8010480:	d1d3      	bne.n	801042a <st_int8_to16_no_shift_interleaved+0x12>
 8010482:	012b      	lsls	r3, r5, #4
 8010484:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8010488:	3a04      	subs	r2, #4
 801048a:	429a      	cmp	r2, r3
 801048c:	db11      	blt.n	80104b2 <st_int8_to16_no_shift_interleaved+0x9a>
 801048e:	1ad2      	subs	r2, r2, r3
 8010490:	0892      	lsrs	r2, r2, #2
 8010492:	3201      	adds	r2, #1
 8010494:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010498:	3108      	adds	r1, #8
 801049a:	f850 3b04 	ldr.w	r3, [r0], #4
 801049e:	fa2f fc93 	sxtb16	ip, r3, ror #8
 80104a2:	428a      	cmp	r2, r1
 80104a4:	f841 cc08 	str.w	ip, [r1, #-8]
 80104a8:	fa2f f383 	sxtb16	r3, r3
 80104ac:	f841 3c04 	str.w	r3, [r1, #-4]
 80104b0:	d1f2      	bne.n	8010498 <st_int8_to16_no_shift_interleaved+0x80>
 80104b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b4:	2300      	movs	r3, #0
 80104b6:	e7e7      	b.n	8010488 <st_int8_to16_no_shift_interleaved+0x70>

080104b8 <st_int8_to16_dual>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	b08b      	sub	sp, #44	; 0x2c
 80104be:	4692      	mov	sl, r2
 80104c0:	468b      	mov	fp, r1
 80104c2:	eb00 0902 	add.w	r9, r0, r2
 80104c6:	9309      	str	r3, [sp, #36]	; 0x24
 80104c8:	085b      	lsrs	r3, r3, #1
 80104ca:	9302      	str	r3, [sp, #8]
 80104cc:	f000 810d 	beq.w	80106ea <st_int8_to16_dual+0x232>
 80104d0:	3a10      	subs	r2, #16
 80104d2:	f1aa 0304 	sub.w	r3, sl, #4
 80104d6:	f8cd a004 	str.w	sl, [sp, #4]
 80104da:	9207      	str	r2, [sp, #28]
 80104dc:	0912      	lsrs	r2, r2, #4
 80104de:	9306      	str	r3, [sp, #24]
 80104e0:	3201      	adds	r2, #1
 80104e2:	4ba4      	ldr	r3, [pc, #656]	; (8010774 <st_int8_to16_dual+0x2bc>)
 80104e4:	0111      	lsls	r1, r2, #4
 80104e6:	0192      	lsls	r2, r2, #6
 80104e8:	9103      	str	r1, [sp, #12]
 80104ea:	9208      	str	r2, [sp, #32]
 80104ec:	9a07      	ldr	r2, [sp, #28]
 80104ee:	2a00      	cmp	r2, #0
 80104f0:	f2c0 8131 	blt.w	8010756 <st_int8_to16_dual+0x29e>
 80104f4:	9a03      	ldr	r2, [sp, #12]
 80104f6:	464d      	mov	r5, r9
 80104f8:	1886      	adds	r6, r0, r2
 80104fa:	465a      	mov	r2, fp
 80104fc:	f8d0 c000 	ldr.w	ip, [r0]
 8010500:	3010      	adds	r0, #16
 8010502:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8010506:	fa2f fc8c 	sxtb16	ip, ip
 801050a:	fa1f fe8c 	uxth.w	lr, ip
 801050e:	682f      	ldr	r7, [r5, #0]
 8010510:	fa2f f197 	sxtb16	r1, r7, ror #8
 8010514:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 8010518:	401c      	ands	r4, r3
 801051a:	fa2f f787 	sxtb16	r7, r7
 801051e:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 8010522:	f8c2 e000 	str.w	lr, [r2]
 8010526:	3510      	adds	r5, #16
 8010528:	3240      	adds	r2, #64	; 0x40
 801052a:	f842 4c38 	str.w	r4, [r2, #-56]
 801052e:	b2bc      	uxth	r4, r7
 8010530:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010534:	4019      	ands	r1, r3
 8010536:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801053a:	f842 4c3c 	str.w	r4, [r2, #-60]
 801053e:	f842 1c34 	str.w	r1, [r2, #-52]
 8010542:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 8010546:	4286      	cmp	r6, r0
 8010548:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801054c:	fa2f fc8c 	sxtb16	ip, ip
 8010550:	fa1f fe8c 	uxth.w	lr, ip
 8010554:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 8010558:	fa2f f197 	sxtb16	r1, r7, ror #8
 801055c:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 8010560:	ea04 0403 	and.w	r4, r4, r3
 8010564:	fa2f f787 	sxtb16	r7, r7
 8010568:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801056c:	f842 ec30 	str.w	lr, [r2, #-48]
 8010570:	f842 4c28 	str.w	r4, [r2, #-40]
 8010574:	b2bc      	uxth	r4, r7
 8010576:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801057a:	ea01 0103 	and.w	r1, r1, r3
 801057e:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 8010582:	f842 4c2c 	str.w	r4, [r2, #-44]
 8010586:	f842 1c24 	str.w	r1, [r2, #-36]
 801058a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 801058e:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8010592:	fa2f fc8c 	sxtb16	ip, ip
 8010596:	fa1f fe8c 	uxth.w	lr, ip
 801059a:	f855 7c08 	ldr.w	r7, [r5, #-8]
 801059e:	fa2f f197 	sxtb16	r1, r7, ror #8
 80105a2:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 80105a6:	ea04 0403 	and.w	r4, r4, r3
 80105aa:	fa2f f787 	sxtb16	r7, r7
 80105ae:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 80105b2:	f842 ec20 	str.w	lr, [r2, #-32]
 80105b6:	f842 4c18 	str.w	r4, [r2, #-24]
 80105ba:	b2bc      	uxth	r4, r7
 80105bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80105c0:	ea01 0103 	and.w	r1, r1, r3
 80105c4:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80105c8:	f842 4c1c 	str.w	r4, [r2, #-28]
 80105cc:	f842 1c14 	str.w	r1, [r2, #-20]
 80105d0:	f850 cc04 	ldr.w	ip, [r0, #-4]
 80105d4:	fa2f f49c 	sxtb16	r4, ip, ror #8
 80105d8:	fa2f fc8c 	sxtb16	ip, ip
 80105dc:	fa1f fe8c 	uxth.w	lr, ip
 80105e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80105e4:	fa2f f197 	sxtb16	r1, r7, ror #8
 80105e8:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 80105ec:	ea04 0403 	and.w	r4, r4, r3
 80105f0:	fa2f f787 	sxtb16	r7, r7
 80105f4:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 80105f8:	f842 ec10 	str.w	lr, [r2, #-16]
 80105fc:	f842 4c08 	str.w	r4, [r2, #-8]
 8010600:	b2bc      	uxth	r4, r7
 8010602:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010606:	ea01 0103 	and.w	r1, r1, r3
 801060a:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801060e:	f842 4c0c 	str.w	r4, [r2, #-12]
 8010612:	f842 1c04 	str.w	r1, [r2, #-4]
 8010616:	f47f af71 	bne.w	80104fc <st_int8_to16_dual+0x44>
 801061a:	9a08      	ldr	r2, [sp, #32]
 801061c:	4493      	add	fp, r2
 801061e:	9a03      	ldr	r2, [sp, #12]
 8010620:	4690      	mov	r8, r2
 8010622:	4491      	add	r9, r2
 8010624:	9a06      	ldr	r2, [sp, #24]
 8010626:	4542      	cmp	r2, r8
 8010628:	f2c0 809b 	blt.w	8010762 <st_int8_to16_dual+0x2aa>
 801062c:	eba2 0a08 	sub.w	sl, r2, r8
 8010630:	46ce      	mov	lr, r9
 8010632:	465c      	mov	r4, fp
 8010634:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8010638:	f102 0a01 	add.w	sl, r2, #1
 801063c:	9204      	str	r2, [sp, #16]
 801063e:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 8010642:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010646:	9205      	str	r2, [sp, #20]
 8010648:	f850 6b04 	ldr.w	r6, [r0], #4
 801064c:	3410      	adds	r4, #16
 801064e:	fa2f f196 	sxtb16	r1, r6, ror #8
 8010652:	fa2f f686 	sxtb16	r6, r6
 8010656:	fa1f fc86 	uxth.w	ip, r6
 801065a:	f85e 5b04 	ldr.w	r5, [lr], #4
 801065e:	fa2f f295 	sxtb16	r2, r5, ror #8
 8010662:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 8010666:	4019      	ands	r1, r3
 8010668:	fa2f f585 	sxtb16	r5, r5
 801066c:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 8010670:	42b8      	cmp	r0, r7
 8010672:	f844 cc10 	str.w	ip, [r4, #-16]
 8010676:	f844 1c08 	str.w	r1, [r4, #-8]
 801067a:	b2a9      	uxth	r1, r5
 801067c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010680:	ea02 0203 	and.w	r2, r2, r3
 8010684:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 8010688:	f844 1c0c 	str.w	r1, [r4, #-12]
 801068c:	f844 2c04 	str.w	r2, [r4, #-4]
 8010690:	d1da      	bne.n	8010648 <st_int8_to16_dual+0x190>
 8010692:	9a05      	ldr	r2, [sp, #20]
 8010694:	f108 0804 	add.w	r8, r8, #4
 8010698:	eb0b 1b0a 	add.w	fp, fp, sl, lsl #4
 801069c:	4491      	add	r9, r2
 801069e:	9a04      	ldr	r2, [sp, #16]
 80106a0:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 80106a4:	9a01      	ldr	r2, [sp, #4]
 80106a6:	4542      	cmp	r2, r8
 80106a8:	dd5f      	ble.n	801076a <st_int8_to16_dual+0x2b2>
 80106aa:	eba2 0808 	sub.w	r8, r2, r8
 80106ae:	4649      	mov	r1, r9
 80106b0:	f10b 0204 	add.w	r2, fp, #4
 80106b4:	eb07 0008 	add.w	r0, r7, r8
 80106b8:	f917 4b01 	ldrsb.w	r4, [r7], #1
 80106bc:	3204      	adds	r2, #4
 80106be:	f822 4c08 	strh.w	r4, [r2, #-8]
 80106c2:	4287      	cmp	r7, r0
 80106c4:	f911 4b01 	ldrsb.w	r4, [r1], #1
 80106c8:	f822 4c06 	strh.w	r4, [r2, #-6]
 80106cc:	d1f4      	bne.n	80106b8 <st_int8_to16_dual+0x200>
 80106ce:	44c1      	add	r9, r8
 80106d0:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 80106d4:	9a02      	ldr	r2, [sp, #8]
 80106d6:	9901      	ldr	r1, [sp, #4]
 80106d8:	3a01      	subs	r2, #1
 80106da:	4408      	add	r0, r1
 80106dc:	4489      	add	r9, r1
 80106de:	b292      	uxth	r2, r2
 80106e0:	9202      	str	r2, [sp, #8]
 80106e2:	2a00      	cmp	r2, #0
 80106e4:	f47f af02 	bne.w	80104ec <st_int8_to16_dual+0x34>
 80106e8:	468a      	mov	sl, r1
 80106ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ec:	07db      	lsls	r3, r3, #31
 80106ee:	d52f      	bpl.n	8010750 <st_int8_to16_dual+0x298>
 80106f0:	f1ba 0c04 	subs.w	ip, sl, #4
 80106f4:	d43b      	bmi.n	801076e <st_int8_to16_dual+0x2b6>
 80106f6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80106fa:	4605      	mov	r5, r0
 80106fc:	4e1d      	ldr	r6, [pc, #116]	; (8010774 <st_int8_to16_dual+0x2bc>)
 80106fe:	f10c 0c01 	add.w	ip, ip, #1
 8010702:	eb0b 07cc 	add.w	r7, fp, ip, lsl #3
 8010706:	f855 3b04 	ldr.w	r3, [r5], #4
 801070a:	f10b 0b08 	add.w	fp, fp, #8
 801070e:	fa2f f493 	sxtb16	r4, r3, ror #8
 8010712:	fa2f f383 	sxtb16	r3, r3
 8010716:	ea04 0106 	and.w	r1, r4, r6
 801071a:	b29a      	uxth	r2, r3
 801071c:	455f      	cmp	r7, fp
 801071e:	ea41 4313 	orr.w	r3, r1, r3, lsr #16
 8010722:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010726:	f84b 3c04 	str.w	r3, [fp, #-4]
 801072a:	f84b 2c08 	str.w	r2, [fp, #-8]
 801072e:	d1ea      	bne.n	8010706 <st_int8_to16_dual+0x24e>
 8010730:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8010734:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8010738:	459a      	cmp	sl, r3
 801073a:	dd09      	ble.n	8010750 <st_int8_to16_dual+0x298>
 801073c:	ebaa 0303 	sub.w	r3, sl, r3
 8010740:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8010744:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8010748:	f82b 2b02 	strh.w	r2, [fp], #2
 801074c:	459b      	cmp	fp, r3
 801074e:	d1f9      	bne.n	8010744 <st_int8_to16_dual+0x28c>
 8010750:	b00b      	add	sp, #44	; 0x2c
 8010752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010756:	f04f 0800 	mov.w	r8, #0
 801075a:	9a06      	ldr	r2, [sp, #24]
 801075c:	4542      	cmp	r2, r8
 801075e:	f6bf af65 	bge.w	801062c <st_int8_to16_dual+0x174>
 8010762:	9a01      	ldr	r2, [sp, #4]
 8010764:	4607      	mov	r7, r0
 8010766:	4542      	cmp	r2, r8
 8010768:	dc9f      	bgt.n	80106aa <st_int8_to16_dual+0x1f2>
 801076a:	4638      	mov	r0, r7
 801076c:	e7b2      	b.n	80106d4 <st_int8_to16_dual+0x21c>
 801076e:	2300      	movs	r3, #0
 8010770:	e7e2      	b.n	8010738 <st_int8_to16_dual+0x280>
 8010772:	bf00      	nop
 8010774:	ffff0000 	.word	0xffff0000

08010778 <st_int8_to16_dual_interleaved>:
 8010778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077c:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 8010780:	b087      	sub	sp, #28
 8010782:	eb00 0802 	add.w	r8, r0, r2
 8010786:	9305      	str	r3, [sp, #20]
 8010788:	f000 80ba 	beq.w	8010900 <st_int8_to16_dual_interleaved+0x188>
 801078c:	f1a2 0310 	sub.w	r3, r2, #16
 8010790:	1f14      	subs	r4, r2, #4
 8010792:	9303      	str	r3, [sp, #12]
 8010794:	091b      	lsrs	r3, r3, #4
 8010796:	9402      	str	r4, [sp, #8]
 8010798:	3301      	adds	r3, #1
 801079a:	011c      	lsls	r4, r3, #4
 801079c:	019b      	lsls	r3, r3, #6
 801079e:	9400      	str	r4, [sp, #0]
 80107a0:	9304      	str	r3, [sp, #16]
 80107a2:	9b03      	ldr	r3, [sp, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f2c0 80d3 	blt.w	8010950 <st_int8_to16_dual_interleaved+0x1d8>
 80107aa:	9b00      	ldr	r3, [sp, #0]
 80107ac:	4644      	mov	r4, r8
 80107ae:	18c7      	adds	r7, r0, r3
 80107b0:	460b      	mov	r3, r1
 80107b2:	6806      	ldr	r6, [r0, #0]
 80107b4:	3010      	adds	r0, #16
 80107b6:	6825      	ldr	r5, [r4, #0]
 80107b8:	3340      	adds	r3, #64	; 0x40
 80107ba:	3410      	adds	r4, #16
 80107bc:	4287      	cmp	r7, r0
 80107be:	fa2f fc96 	sxtb16	ip, r6, ror #8
 80107c2:	fa2f f686 	sxtb16	r6, r6
 80107c6:	f843 6c38 	str.w	r6, [r3, #-56]
 80107ca:	fa2f f695 	sxtb16	r6, r5, ror #8
 80107ce:	f843 cc40 	str.w	ip, [r3, #-64]
 80107d2:	f843 6c3c 	str.w	r6, [r3, #-60]
 80107d6:	fa2f f585 	sxtb16	r5, r5
 80107da:	f843 5c34 	str.w	r5, [r3, #-52]
 80107de:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 80107e2:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80107e6:	fa2f fc96 	sxtb16	ip, r6, ror #8
 80107ea:	fa2f f686 	sxtb16	r6, r6
 80107ee:	f843 cc30 	str.w	ip, [r3, #-48]
 80107f2:	f843 6c28 	str.w	r6, [r3, #-40]
 80107f6:	fa2f f695 	sxtb16	r6, r5, ror #8
 80107fa:	fa2f f585 	sxtb16	r5, r5
 80107fe:	f843 6c2c 	str.w	r6, [r3, #-44]
 8010802:	f843 5c24 	str.w	r5, [r3, #-36]
 8010806:	f850 6c08 	ldr.w	r6, [r0, #-8]
 801080a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801080e:	fa2f fc96 	sxtb16	ip, r6, ror #8
 8010812:	fa2f f686 	sxtb16	r6, r6
 8010816:	f843 cc20 	str.w	ip, [r3, #-32]
 801081a:	f843 6c18 	str.w	r6, [r3, #-24]
 801081e:	fa2f f695 	sxtb16	r6, r5, ror #8
 8010822:	fa2f f585 	sxtb16	r5, r5
 8010826:	f843 6c1c 	str.w	r6, [r3, #-28]
 801082a:	f843 5c14 	str.w	r5, [r3, #-20]
 801082e:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8010832:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010836:	fa2f fc96 	sxtb16	ip, r6, ror #8
 801083a:	fa2f f686 	sxtb16	r6, r6
 801083e:	f843 cc10 	str.w	ip, [r3, #-16]
 8010842:	f843 6c08 	str.w	r6, [r3, #-8]
 8010846:	fa2f f695 	sxtb16	r6, r5, ror #8
 801084a:	fa2f f585 	sxtb16	r5, r5
 801084e:	f843 6c0c 	str.w	r6, [r3, #-12]
 8010852:	f843 5c04 	str.w	r5, [r3, #-4]
 8010856:	d1ac      	bne.n	80107b2 <st_int8_to16_dual_interleaved+0x3a>
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	4419      	add	r1, r3
 801085c:	9b00      	ldr	r3, [sp, #0]
 801085e:	469e      	mov	lr, r3
 8010860:	4498      	add	r8, r3
 8010862:	9b02      	ldr	r3, [sp, #8]
 8010864:	4573      	cmp	r3, lr
 8010866:	db78      	blt.n	801095a <st_int8_to16_dual_interleaved+0x1e2>
 8010868:	eba3 090e 	sub.w	r9, r3, lr
 801086c:	4647      	mov	r7, r8
 801086e:	460b      	mov	r3, r1
 8010870:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8010874:	f109 0a01 	add.w	sl, r9, #1
 8010878:	ea4f 048a 	mov.w	r4, sl, lsl #2
 801087c:	eb00 068a 	add.w	r6, r0, sl, lsl #2
 8010880:	9401      	str	r4, [sp, #4]
 8010882:	f850 5b04 	ldr.w	r5, [r0], #4
 8010886:	3310      	adds	r3, #16
 8010888:	f857 4b04 	ldr.w	r4, [r7], #4
 801088c:	fa2f fc95 	sxtb16	ip, r5, ror #8
 8010890:	42b0      	cmp	r0, r6
 8010892:	f843 cc10 	str.w	ip, [r3, #-16]
 8010896:	fa2f f585 	sxtb16	r5, r5
 801089a:	f843 5c08 	str.w	r5, [r3, #-8]
 801089e:	fa2f f594 	sxtb16	r5, r4, ror #8
 80108a2:	fa2f f484 	sxtb16	r4, r4
 80108a6:	f843 5c0c 	str.w	r5, [r3, #-12]
 80108aa:	f843 4c04 	str.w	r4, [r3, #-4]
 80108ae:	d1e8      	bne.n	8010882 <st_int8_to16_dual_interleaved+0x10a>
 80108b0:	f10e 0e04 	add.w	lr, lr, #4
 80108b4:	9b01      	ldr	r3, [sp, #4]
 80108b6:	eb01 110a 	add.w	r1, r1, sl, lsl #4
 80108ba:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80108be:	4498      	add	r8, r3
 80108c0:	4572      	cmp	r2, lr
 80108c2:	dd4d      	ble.n	8010960 <st_int8_to16_dual_interleaved+0x1e8>
 80108c4:	eba2 0e0e 	sub.w	lr, r2, lr
 80108c8:	1d0b      	adds	r3, r1, #4
 80108ca:	4644      	mov	r4, r8
 80108cc:	eb06 000e 	add.w	r0, r6, lr
 80108d0:	f916 5b01 	ldrsb.w	r5, [r6], #1
 80108d4:	3304      	adds	r3, #4
 80108d6:	f823 5c08 	strh.w	r5, [r3, #-8]
 80108da:	4286      	cmp	r6, r0
 80108dc:	f914 5b01 	ldrsb.w	r5, [r4], #1
 80108e0:	f823 5c06 	strh.w	r5, [r3, #-6]
 80108e4:	d1f4      	bne.n	80108d0 <st_int8_to16_dual_interleaved+0x158>
 80108e6:	44f0      	add	r8, lr
 80108e8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80108ec:	f10b 33ff 	add.w	r3, fp, #4294967295
 80108f0:	4410      	add	r0, r2
 80108f2:	4490      	add	r8, r2
 80108f4:	fa1f fb83 	uxth.w	fp, r3
 80108f8:	f1bb 0f00 	cmp.w	fp, #0
 80108fc:	f47f af51 	bne.w	80107a2 <st_int8_to16_dual_interleaved+0x2a>
 8010900:	9b05      	ldr	r3, [sp, #20]
 8010902:	07db      	lsls	r3, r3, #31
 8010904:	d521      	bpl.n	801094a <st_int8_to16_dual_interleaved+0x1d2>
 8010906:	1f17      	subs	r7, r2, #4
 8010908:	d42c      	bmi.n	8010964 <st_int8_to16_dual_interleaved+0x1ec>
 801090a:	08bf      	lsrs	r7, r7, #2
 801090c:	4604      	mov	r4, r0
 801090e:	3701      	adds	r7, #1
 8010910:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 8010914:	3108      	adds	r1, #8
 8010916:	f854 3b04 	ldr.w	r3, [r4], #4
 801091a:	fa2f f593 	sxtb16	r5, r3, ror #8
 801091e:	428e      	cmp	r6, r1
 8010920:	f841 5c08 	str.w	r5, [r1, #-8]
 8010924:	fa2f f383 	sxtb16	r3, r3
 8010928:	f841 3c04 	str.w	r3, [r1, #-4]
 801092c:	d1f2      	bne.n	8010914 <st_int8_to16_dual_interleaved+0x19c>
 801092e:	00bb      	lsls	r3, r7, #2
 8010930:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8010934:	429a      	cmp	r2, r3
 8010936:	dd08      	ble.n	801094a <st_int8_to16_dual_interleaved+0x1d2>
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801093e:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8010942:	f821 2b02 	strh.w	r2, [r1], #2
 8010946:	4299      	cmp	r1, r3
 8010948:	d1f9      	bne.n	801093e <st_int8_to16_dual_interleaved+0x1c6>
 801094a:	b007      	add	sp, #28
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010950:	f04f 0e00 	mov.w	lr, #0
 8010954:	9b02      	ldr	r3, [sp, #8]
 8010956:	4573      	cmp	r3, lr
 8010958:	da86      	bge.n	8010868 <st_int8_to16_dual_interleaved+0xf0>
 801095a:	4572      	cmp	r2, lr
 801095c:	4606      	mov	r6, r0
 801095e:	dcb1      	bgt.n	80108c4 <st_int8_to16_dual_interleaved+0x14c>
 8010960:	4630      	mov	r0, r6
 8010962:	e7c3      	b.n	80108ec <st_int8_to16_dual_interleaved+0x174>
 8010964:	2300      	movs	r3, #0
 8010966:	e7e5      	b.n	8010934 <st_int8_to16_dual_interleaved+0x1bc>

08010968 <weights_2channels_prefetch>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	2b00      	cmp	r3, #0
 801096e:	b087      	sub	sp, #28
 8010970:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010974:	9302      	str	r3, [sp, #8]
 8010976:	f340 80e6 	ble.w	8010b46 <weights_2channels_prefetch+0x1de>
 801097a:	f1a8 0310 	sub.w	r3, r8, #16
 801097e:	f1a8 0403 	sub.w	r4, r8, #3
 8010982:	f04f 0b00 	mov.w	fp, #0
 8010986:	091b      	lsrs	r3, r3, #4
 8010988:	9403      	str	r4, [sp, #12]
 801098a:	f1a8 0404 	sub.w	r4, r8, #4
 801098e:	3301      	adds	r3, #1
 8010990:	9405      	str	r4, [sp, #20]
 8010992:	011c      	lsls	r4, r3, #4
 8010994:	019b      	lsls	r3, r3, #6
 8010996:	9400      	str	r4, [sp, #0]
 8010998:	9304      	str	r3, [sp, #16]
 801099a:	f1b8 0f0f 	cmp.w	r8, #15
 801099e:	f340 80d7 	ble.w	8010b50 <weights_2channels_prefetch+0x1e8>
 80109a2:	9b00      	ldr	r3, [sp, #0]
 80109a4:	460d      	mov	r5, r1
 80109a6:	18c6      	adds	r6, r0, r3
 80109a8:	4613      	mov	r3, r2
 80109aa:	6804      	ldr	r4, [r0, #0]
 80109ac:	3010      	adds	r0, #16
 80109ae:	682f      	ldr	r7, [r5, #0]
 80109b0:	3340      	adds	r3, #64	; 0x40
 80109b2:	fa2f fc84 	sxtb16	ip, r4
 80109b6:	3510      	adds	r5, #16
 80109b8:	f843 cc40 	str.w	ip, [r3, #-64]
 80109bc:	ea4f 2434 	mov.w	r4, r4, ror #8
 80109c0:	42b0      	cmp	r0, r6
 80109c2:	fa2f f484 	sxtb16	r4, r4
 80109c6:	f843 4c3c 	str.w	r4, [r3, #-60]
 80109ca:	ea4f 2437 	mov.w	r4, r7, ror #8
 80109ce:	fa2f f787 	sxtb16	r7, r7
 80109d2:	fa2f f484 	sxtb16	r4, r4
 80109d6:	f843 7c38 	str.w	r7, [r3, #-56]
 80109da:	f843 4c34 	str.w	r4, [r3, #-52]
 80109de:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 80109e2:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 80109e6:	ea4f 2c34 	mov.w	ip, r4, ror #8
 80109ea:	fa2f f484 	sxtb16	r4, r4
 80109ee:	fa2f fc8c 	sxtb16	ip, ip
 80109f2:	f843 4c28 	str.w	r4, [r3, #-40]
 80109f6:	f843 cc24 	str.w	ip, [r3, #-36]
 80109fa:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80109fe:	fa2f f787 	sxtb16	r7, r7
 8010a02:	f843 7c30 	str.w	r7, [r3, #-48]
 8010a06:	fa2f f78c 	sxtb16	r7, ip
 8010a0a:	f843 7c2c 	str.w	r7, [r3, #-44]
 8010a0e:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8010a12:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8010a16:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8010a1a:	fa2f f787 	sxtb16	r7, r7
 8010a1e:	fa2f fc8c 	sxtb16	ip, ip
 8010a22:	f843 7c20 	str.w	r7, [r3, #-32]
 8010a26:	ea4f 2734 	mov.w	r7, r4, ror #8
 8010a2a:	f843 cc1c 	str.w	ip, [r3, #-28]
 8010a2e:	fa2f f787 	sxtb16	r7, r7
 8010a32:	fa2f f484 	sxtb16	r4, r4
 8010a36:	f843 7c14 	str.w	r7, [r3, #-20]
 8010a3a:	f843 4c18 	str.w	r4, [r3, #-24]
 8010a3e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8010a42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010a46:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8010a4a:	fa2f f787 	sxtb16	r7, r7
 8010a4e:	fa2f fc8c 	sxtb16	ip, ip
 8010a52:	f843 7c10 	str.w	r7, [r3, #-16]
 8010a56:	ea4f 2734 	mov.w	r7, r4, ror #8
 8010a5a:	f843 cc0c 	str.w	ip, [r3, #-12]
 8010a5e:	fa2f f787 	sxtb16	r7, r7
 8010a62:	fa2f f484 	sxtb16	r4, r4
 8010a66:	f843 7c04 	str.w	r7, [r3, #-4]
 8010a6a:	f843 4c08 	str.w	r4, [r3, #-8]
 8010a6e:	d19c      	bne.n	80109aa <weights_2channels_prefetch+0x42>
 8010a70:	9b04      	ldr	r3, [sp, #16]
 8010a72:	441a      	add	r2, r3
 8010a74:	9b00      	ldr	r3, [sp, #0]
 8010a76:	4419      	add	r1, r3
 8010a78:	469e      	mov	lr, r3
 8010a7a:	9b03      	ldr	r3, [sp, #12]
 8010a7c:	4573      	cmp	r3, lr
 8010a7e:	dd65      	ble.n	8010b4c <weights_2channels_prefetch+0x1e4>
 8010a80:	9b05      	ldr	r3, [sp, #20]
 8010a82:	4614      	mov	r4, r2
 8010a84:	460f      	mov	r7, r1
 8010a86:	eba3 090e 	sub.w	r9, r3, lr
 8010a8a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8010a8e:	f109 0a01 	add.w	sl, r9, #1
 8010a92:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8010a96:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 8010a9a:	9301      	str	r3, [sp, #4]
 8010a9c:	f856 3b04 	ldr.w	r3, [r6], #4
 8010aa0:	3410      	adds	r4, #16
 8010aa2:	f857 5b04 	ldr.w	r5, [r7], #4
 8010aa6:	fa2f fc83 	sxtb16	ip, r3
 8010aaa:	4286      	cmp	r6, r0
 8010aac:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010ab0:	fa2f f383 	sxtb16	r3, r3
 8010ab4:	f844 3c0c 	str.w	r3, [r4, #-12]
 8010ab8:	ea4f 2335 	mov.w	r3, r5, ror #8
 8010abc:	fa2f f585 	sxtb16	r5, r5
 8010ac0:	f844 cc10 	str.w	ip, [r4, #-16]
 8010ac4:	f844 5c08 	str.w	r5, [r4, #-8]
 8010ac8:	fa2f f383 	sxtb16	r3, r3
 8010acc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ad0:	d1e4      	bne.n	8010a9c <weights_2channels_prefetch+0x134>
 8010ad2:	9b01      	ldr	r3, [sp, #4]
 8010ad4:	f10e 0e04 	add.w	lr, lr, #4
 8010ad8:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8010adc:	4419      	add	r1, r3
 8010ade:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8010ae2:	45f0      	cmp	r8, lr
 8010ae4:	dd29      	ble.n	8010b3a <weights_2channels_prefetch+0x1d2>
 8010ae6:	f990 3000 	ldrsb.w	r3, [r0]
 8010aea:	8013      	strh	r3, [r2, #0]
 8010aec:	f991 3000 	ldrsb.w	r3, [r1]
 8010af0:	8053      	strh	r3, [r2, #2]
 8010af2:	f10e 0301 	add.w	r3, lr, #1
 8010af6:	4598      	cmp	r8, r3
 8010af8:	dd19      	ble.n	8010b2e <weights_2channels_prefetch+0x1c6>
 8010afa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010afe:	8093      	strh	r3, [r2, #4]
 8010b00:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8010b04:	80d3      	strh	r3, [r2, #6]
 8010b06:	f10e 0302 	add.w	r3, lr, #2
 8010b0a:	4598      	cmp	r8, r3
 8010b0c:	dd0f      	ble.n	8010b2e <weights_2channels_prefetch+0x1c6>
 8010b0e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8010b12:	8113      	strh	r3, [r2, #8]
 8010b14:	f10e 0303 	add.w	r3, lr, #3
 8010b18:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8010b1c:	4598      	cmp	r8, r3
 8010b1e:	8154      	strh	r4, [r2, #10]
 8010b20:	dd05      	ble.n	8010b2e <weights_2channels_prefetch+0x1c6>
 8010b22:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8010b26:	8193      	strh	r3, [r2, #12]
 8010b28:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8010b2c:	81d3      	strh	r3, [r2, #14]
 8010b2e:	eba8 0e0e 	sub.w	lr, r8, lr
 8010b32:	4470      	add	r0, lr
 8010b34:	4471      	add	r1, lr
 8010b36:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8010b3a:	f10b 0b01 	add.w	fp, fp, #1
 8010b3e:	9b02      	ldr	r3, [sp, #8]
 8010b40:	455b      	cmp	r3, fp
 8010b42:	f47f af2a 	bne.w	801099a <weights_2channels_prefetch+0x32>
 8010b46:	b007      	add	sp, #28
 8010b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	e7c8      	b.n	8010ae2 <weights_2channels_prefetch+0x17a>
 8010b50:	4606      	mov	r6, r0
 8010b52:	f04f 0e00 	mov.w	lr, #0
 8010b56:	e790      	b.n	8010a7a <weights_2channels_prefetch+0x112>

08010b58 <st_sssa8_ch_fullW_prefetch>:
 8010b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5c:	b087      	sub	sp, #28
 8010b5e:	461c      	mov	r4, r3
 8010b60:	4680      	mov	r8, r0
 8010b62:	4613      	mov	r3, r2
 8010b64:	104f      	asrs	r7, r1, #1
 8010b66:	4620      	mov	r0, r4
 8010b68:	9103      	str	r1, [sp, #12]
 8010b6a:	9704      	str	r7, [sp, #16]
 8010b6c:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8010b70:	eb08 0402 	add.w	r4, r8, r2
 8010b74:	d020      	beq.n	8010bb8 <st_sssa8_ch_fullW_prefetch+0x60>
 8010b76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b78:	4646      	mov	r6, r8
 8010b7a:	4655      	mov	r5, sl
 8010b7c:	f8cd 8014 	str.w	r8, [sp, #20]
 8010b80:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8010b84:	4680      	mov	r8, r0
 8010b86:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010b8a:	469a      	mov	sl, r3
 8010b8c:	462a      	mov	r2, r5
 8010b8e:	4621      	mov	r1, r4
 8010b90:	4630      	mov	r0, r6
 8010b92:	4653      	mov	r3, sl
 8010b94:	f8cd 8000 	str.w	r8, [sp]
 8010b98:	445d      	add	r5, fp
 8010b9a:	f7ff fee5 	bl	8010968 <weights_2channels_prefetch>
 8010b9e:	3f01      	subs	r7, #1
 8010ba0:	444c      	add	r4, r9
 8010ba2:	444e      	add	r6, r9
 8010ba4:	d1f2      	bne.n	8010b8c <st_sssa8_ch_fullW_prefetch+0x34>
 8010ba6:	9b04      	ldr	r3, [sp, #16]
 8010ba8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010bac:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8010bb0:	fb03 8809 	mla	r8, r3, r9, r8
 8010bb4:	fb03 aa0b 	mla	sl, r3, fp, sl
 8010bb8:	9b03      	ldr	r3, [sp, #12]
 8010bba:	07db      	lsls	r3, r3, #31
 8010bbc:	d509      	bpl.n	8010bd2 <st_sssa8_ch_fullW_prefetch+0x7a>
 8010bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dd06      	ble.n	8010bd2 <st_sssa8_ch_fullW_prefetch+0x7a>
 8010bc4:	4443      	add	r3, r8
 8010bc6:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8010bca:	4543      	cmp	r3, r8
 8010bcc:	f82a 2b02 	strh.w	r2, [sl], #2
 8010bd0:	d1f9      	bne.n	8010bc6 <st_sssa8_ch_fullW_prefetch+0x6e>
 8010bd2:	b007      	add	sp, #28
 8010bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bd8 <st_sssa8_ch_nn_mat_mult_nt_t>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	b0b5      	sub	sp, #212	; 0xd4
 8010bde:	9027      	str	r0, [sp, #156]	; 0x9c
 8010be0:	912d      	str	r1, [sp, #180]	; 0xb4
 8010be2:	9233      	str	r2, [sp, #204]	; 0xcc
 8010be4:	932e      	str	r3, [sp, #184]	; 0xb8
 8010be6:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 8010bea:	2c00      	cmp	r4, #0
 8010bec:	bf18      	it	ne
 8010bee:	4620      	movne	r0, r4
 8010bf0:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8010bf2:	2c01      	cmp	r4, #1
 8010bf4:	9045      	str	r0, [sp, #276]	; 0x114
 8010bf6:	f340 826b 	ble.w	80110d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 8010bfa:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8010bfc:	461e      	mov	r6, r3
 8010bfe:	4694      	mov	ip, r2
 8010c00:	9f42      	ldr	r7, [sp, #264]	; 0x108
 8010c02:	f1a4 0310 	sub.w	r3, r4, #16
 8010c06:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8010c08:	468e      	mov	lr, r1
 8010c0a:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8010c0c:	1ea0      	subs	r0, r4, #2
 8010c0e:	0919      	lsrs	r1, r3, #4
 8010c10:	f023 030f 	bic.w	r3, r3, #15
 8010c14:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8010c16:	f020 0201 	bic.w	r2, r0, #1
 8010c1a:	9032      	str	r0, [sp, #200]	; 0xc8
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	3101      	adds	r1, #1
 8010c20:	4432      	add	r2, r6
 8010c22:	10a4      	asrs	r4, r4, #2
 8010c24:	106d      	asrs	r5, r5, #1
 8010c26:	1cd6      	adds	r6, r2, #3
 8010c28:	f107 0214 	add.w	r2, r7, #20
 8010c2c:	942f      	str	r4, [sp, #188]	; 0xbc
 8010c2e:	18d3      	adds	r3, r2, r3
 8010c30:	9629      	str	r6, [sp, #164]	; 0xa4
 8010c32:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8010c34:	9318      	str	r3, [sp, #96]	; 0x60
 8010c36:	f06f 0303 	mvn.w	r3, #3
 8010c3a:	0076      	lsls	r6, r6, #1
 8010c3c:	952a      	str	r5, [sp, #168]	; 0xa8
 8010c3e:	1bdb      	subs	r3, r3, r7
 8010c40:	9613      	str	r6, [sp, #76]	; 0x4c
 8010c42:	9319      	str	r3, [sp, #100]	; 0x64
 8010c44:	f1a7 030f 	sub.w	r3, r7, #15
 8010c48:	9312      	str	r3, [sp, #72]	; 0x48
 8010c4a:	f007 0303 	and.w	r3, r7, #3
 8010c4e:	9330      	str	r3, [sp, #192]	; 0xc0
 8010c50:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	9328      	str	r3, [sp, #160]	; 0xa0
 8010c58:	007b      	lsls	r3, r7, #1
 8010c5a:	9326      	str	r3, [sp, #152]	; 0x98
 8010c5c:	00bb      	lsls	r3, r7, #2
 8010c5e:	932c      	str	r3, [sp, #176]	; 0xb0
 8010c60:	1f3b      	subs	r3, r7, #4
 8010c62:	9317      	str	r3, [sp, #92]	; 0x5c
 8010c64:	1c43      	adds	r3, r0, #1
 8010c66:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c68:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010c6a:	3302      	adds	r3, #2
 8010c6c:	9321      	str	r3, [sp, #132]	; 0x84
 8010c6e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8010c70:	3304      	adds	r3, #4
 8010c72:	931f      	str	r3, [sp, #124]	; 0x7c
 8010c74:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010c76:	3304      	adds	r3, #4
 8010c78:	9320      	str	r3, [sp, #128]	; 0x80
 8010c7a:	4663      	mov	r3, ip
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	9322      	str	r3, [sp, #136]	; 0x88
 8010c80:	010b      	lsls	r3, r1, #4
 8010c82:	9316      	str	r3, [sp, #88]	; 0x58
 8010c84:	018b      	lsls	r3, r1, #6
 8010c86:	9325      	str	r3, [sp, #148]	; 0x94
 8010c88:	0123      	lsls	r3, r4, #4
 8010c8a:	9331      	str	r3, [sp, #196]	; 0xc4
 8010c8c:	fb06 f305 	mul.w	r3, r6, r5
 8010c90:	932b      	str	r3, [sp, #172]	; 0xac
 8010c92:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8010c96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c98:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010c9a:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8010c9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ca2:	3901      	subs	r1, #1
 8010ca4:	2b15      	cmp	r3, #21
 8010ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8010ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8010caa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010cac:	9101      	str	r1, [sp, #4]
 8010cae:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010cb2:	6812      	ldr	r2, [r2, #0]
 8010cb4:	910d      	str	r1, [sp, #52]	; 0x34
 8010cb6:	920e      	str	r2, [sp, #56]	; 0x38
 8010cb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010cba:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010cbe:	6812      	ldr	r2, [r2, #0]
 8010cc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8010cc2:	9210      	str	r2, [sp, #64]	; 0x40
 8010cc4:	f300 8402 	bgt.w	80114cc <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	bfcc      	ite	gt
 8010ccc:	2300      	movgt	r3, #0
 8010cce:	2301      	movle	r3, #1
 8010cd0:	425b      	negs	r3, r3
 8010cd2:	9308      	str	r3, [sp, #32]
 8010cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd6:	2b15      	cmp	r3, #21
 8010cd8:	f300 82c4 	bgt.w	8011264 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	bfcc      	ite	gt
 8010ce0:	2300      	movgt	r3, #0
 8010ce2:	2301      	movle	r3, #1
 8010ce4:	425b      	negs	r3, r3
 8010ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce8:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 82c0 	beq.w	8011270 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 8010cf0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f040 8397 	bne.w	8011426 <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010cfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010d02:	18cb      	adds	r3, r1, r3
 8010d04:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010d06:	930c      	str	r3, [sp, #48]	; 0x30
 8010d08:	6803      	ldr	r3, [r0, #0]
 8010d0a:	18d3      	adds	r3, r2, r3
 8010d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d0e:	2900      	cmp	r1, #0
 8010d10:	f000 8511 	beq.w	8011736 <st_sssa8_ch_nn_mat_mult_nt_t+0xb5e>
 8010d14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d16:	2001      	movs	r0, #1
 8010d18:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8010d1a:	1e93      	subs	r3, r2, #2
 8010d1c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8010d20:	9104      	str	r1, [sp, #16]
 8010d22:	fa00 f303 	lsl.w	r3, r0, r3
 8010d26:	931c      	str	r3, [sp, #112]	; 0x70
 8010d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d2a:	3b02      	subs	r3, #2
 8010d2c:	fa00 f303 	lsl.w	r3, r0, r3
 8010d30:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010d32:	931d      	str	r3, [sp, #116]	; 0x74
 8010d34:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010d36:	3b03      	subs	r3, #3
 8010d38:	9311      	str	r3, [sp, #68]	; 0x44
 8010d3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d3c:	4418      	add	r0, r3
 8010d3e:	9303      	str	r3, [sp, #12]
 8010d40:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010d42:	9002      	str	r0, [sp, #8]
 8010d44:	3304      	adds	r3, #4
 8010d46:	9845      	ldr	r0, [sp, #276]	; 0x114
 8010d48:	9315      	str	r3, [sp, #84]	; 0x54
 8010d4a:	1e53      	subs	r3, r2, #1
 8010d4c:	4420      	add	r0, r4
 8010d4e:	931e      	str	r3, [sp, #120]	; 0x78
 8010d50:	f1c2 0301 	rsb	r3, r2, #1
 8010d54:	9014      	str	r0, [sp, #80]	; 0x50
 8010d56:	9324      	str	r3, [sp, #144]	; 0x90
 8010d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f340 8279 	ble.w	8011252 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 8010d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d64:	eb0b 0703 	add.w	r7, fp, r3
 8010d68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010d6a:	f8cd b014 	str.w	fp, [sp, #20]
 8010d6e:	4604      	mov	r4, r0
 8010d70:	445b      	add	r3, fp
 8010d72:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8010d74:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8010d78:	9301      	str	r3, [sp, #4]
 8010d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	f85b c007 	ldr.w	ip, [fp, r7]
 8010d82:	eb0b 0e07 	add.w	lr, fp, r7
 8010d86:	fa2f f58c 	sxtb16	r5, ip
 8010d8a:	6832      	ldr	r2, [r6, #0]
 8010d8c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8010d90:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010d94:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8010d98:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8010d9c:	fb25 0002 	smlad	r0, r5, r2, r0
 8010da0:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010da4:	fb25 350a 	smlad	r5, r5, sl, r3
 8010da8:	fb2c 5508 	smlad	r5, ip, r8, r5
 8010dac:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010db0:	fa2f fc83 	sxtb16	ip, r3
 8010db4:	fa2f f393 	sxtb16	r3, r3, ror #8
 8010db8:	fb2c 4202 	smlad	r2, ip, r2, r4
 8010dbc:	fb2c 110a 	smlad	r1, ip, sl, r1
 8010dc0:	fb23 2209 	smlad	r2, r3, r9, r2
 8010dc4:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8010dc8:	6974      	ldr	r4, [r6, #20]
 8010dca:	fb23 1808 	smlad	r8, r3, r8, r1
 8010dce:	f8de 1004 	ldr.w	r1, [lr, #4]
 8010dd2:	69b3      	ldr	r3, [r6, #24]
 8010dd4:	fa2f fc81 	sxtb16	ip, r1
 8010dd8:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8010ddc:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010de0:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010de4:	fb21 0004 	smlad	r0, r1, r4, r0
 8010de8:	fb2c 5c03 	smlad	ip, ip, r3, r5
 8010dec:	fb21 cc0a 	smlad	ip, r1, sl, ip
 8010df0:	683d      	ldr	r5, [r7, #0]
 8010df2:	fa2f f185 	sxtb16	r1, r5
 8010df6:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010dfa:	fb21 2909 	smlad	r9, r1, r9, r2
 8010dfe:	fb21 8803 	smlad	r8, r1, r3, r8
 8010e02:	fb25 9904 	smlad	r9, r5, r4, r9
 8010e06:	6a34      	ldr	r4, [r6, #32]
 8010e08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e0a:	fb25 8a0a 	smlad	sl, r5, sl, r8
 8010e0e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8010e12:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 8010e16:	fa2f f182 	sxtb16	r1, r2
 8010e1a:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8010e1c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010e20:	fb21 0004 	smlad	r0, r1, r4, r0
 8010e24:	fb22 0003 	smlad	r0, r2, r3, r0
 8010e28:	fb21 c108 	smlad	r1, r1, r8, ip
 8010e2c:	fb22 1205 	smlad	r2, r2, r5, r1
 8010e30:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8010e34:	fa2f f18c 	sxtb16	r1, ip
 8010e38:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8010e3c:	fb21 9404 	smlad	r4, r1, r4, r9
 8010e40:	fb21 aa08 	smlad	sl, r1, r8, sl
 8010e44:	fb2c 4903 	smlad	r9, ip, r3, r4
 8010e48:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 8010e4c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8010e4e:	fb2c a505 	smlad	r5, ip, r5, sl
 8010e52:	f8de 300c 	ldr.w	r3, [lr, #12]
 8010e56:	3640      	adds	r6, #64	; 0x40
 8010e58:	fa2f f183 	sxtb16	r1, r3
 8010e5c:	f856 ac08 	ldr.w	sl, [r6, #-8]
 8010e60:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8010e64:	fa2f f393 	sxtb16	r3, r3, ror #8
 8010e68:	fb21 0008 	smlad	r0, r1, r8, r0
 8010e6c:	fb23 0004 	smlad	r0, r3, r4, r0
 8010e70:	fb21 220a 	smlad	r2, r1, sl, r2
 8010e74:	fb23 230e 	smlad	r3, r3, lr, r2
 8010e78:	68b9      	ldr	r1, [r7, #8]
 8010e7a:	fa2f f281 	sxtb16	r2, r1
 8010e7e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010e82:	fb22 9908 	smlad	r9, r2, r8, r9
 8010e86:	fb22 550a 	smlad	r5, r2, sl, r5
 8010e8a:	fb21 9404 	smlad	r4, r1, r4, r9
 8010e8e:	fb21 510e 	smlad	r1, r1, lr, r5
 8010e92:	3710      	adds	r7, #16
 8010e94:	9a01      	ldr	r2, [sp, #4]
 8010e96:	4297      	cmp	r7, r2
 8010e98:	f47f af71 	bne.w	8010d7e <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8010e9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010e9e:	f8dd b014 	ldr.w	fp, [sp, #20]
 8010ea2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010ea4:	4692      	mov	sl, r2
 8010ea6:	4493      	add	fp, r2
 8010ea8:	9501      	str	r5, [sp, #4]
 8010eaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010eac:	4592      	cmp	sl, r2
 8010eae:	f280 81ce 	bge.w	801124e <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 8010eb2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010eb4:	f8cd a01c 	str.w	sl, [sp, #28]
 8010eb8:	eba5 020a 	sub.w	r2, r5, sl
 8010ebc:	46aa      	mov	sl, r5
 8010ebe:	0892      	lsrs	r2, r2, #2
 8010ec0:	4616      	mov	r6, r2
 8010ec2:	9206      	str	r2, [sp, #24]
 8010ec4:	9a01      	ldr	r2, [sp, #4]
 8010ec6:	3601      	adds	r6, #1
 8010ec8:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 8010ecc:	9605      	str	r6, [sp, #20]
 8010ece:	f85b 5b04 	ldr.w	r5, [fp], #4
 8010ed2:	3210      	adds	r2, #16
 8010ed4:	fa2f f685 	sxtb16	r6, r5
 8010ed8:	f852 8c10 	ldr.w	r8, [r2, #-16]
 8010edc:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8010ee0:	f852 ec08 	ldr.w	lr, [r2, #-8]
 8010ee4:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8010ee8:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010eec:	fb26 0008 	smlad	r0, r6, r8, r0
 8010ef0:	fb25 000c 	smlad	r0, r5, ip, r0
 8010ef4:	fb26 330e 	smlad	r3, r6, lr, r3
 8010ef8:	fb25 3307 	smlad	r3, r5, r7, r3
 8010efc:	f85b 500a 	ldr.w	r5, [fp, sl]
 8010f00:	fa2f f685 	sxtb16	r6, r5
 8010f04:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010f08:	fb26 4408 	smlad	r4, r6, r8, r4
 8010f0c:	fb26 110e 	smlad	r1, r6, lr, r1
 8010f10:	fb25 440c 	smlad	r4, r5, ip, r4
 8010f14:	fb25 1107 	smlad	r1, r5, r7, r1
 8010f18:	45cb      	cmp	fp, r9
 8010f1a:	d1d8      	bne.n	8010ece <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 8010f1c:	9a01      	ldr	r2, [sp, #4]
 8010f1e:	9d05      	ldr	r5, [sp, #20]
 8010f20:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010f24:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8010f28:	9d06      	ldr	r5, [sp, #24]
 8010f2a:	9201      	str	r2, [sp, #4]
 8010f2c:	f10a 0204 	add.w	r2, sl, #4
 8010f30:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8010f34:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010f36:	4552      	cmp	r2, sl
 8010f38:	dd58      	ble.n	8010fec <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 8010f3a:	9f01      	ldr	r7, [sp, #4]
 8010f3c:	f999 2000 	ldrsb.w	r2, [r9]
 8010f40:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8010f44:	f9b7 6000 	ldrsh.w	r6, [r7]
 8010f48:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010f4c:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010f50:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010f52:	f919 2002 	ldrsb.w	r2, [r9, r2]
 8010f56:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010f5a:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8010f5c:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010f60:	f10a 0201 	add.w	r2, sl, #1
 8010f64:	4295      	cmp	r5, r2
 8010f66:	dd3d      	ble.n	8010fe4 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010f68:	eb09 0205 	add.w	r2, r9, r5
 8010f6c:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8010f70:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8010f74:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8010f78:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010f7c:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010f80:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8010f84:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010f88:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8010f8a:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010f8e:	f10a 0202 	add.w	r2, sl, #2
 8010f92:	f109 0502 	add.w	r5, r9, #2
 8010f96:	4296      	cmp	r6, r2
 8010f98:	dd24      	ble.n	8010fe4 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010f9a:	57aa      	ldrsb	r2, [r5, r6]
 8010f9c:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8010fa0:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8010fa4:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010fa8:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010fac:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8010fb0:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010fb4:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8010fb6:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010fba:	f10a 0203 	add.w	r2, sl, #3
 8010fbe:	f109 0503 	add.w	r5, r9, #3
 8010fc2:	4296      	cmp	r6, r2
 8010fc4:	dd0e      	ble.n	8010fe4 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010fc6:	57ad      	ldrsb	r5, [r5, r6]
 8010fc8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010fcc:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8010fd0:	fb12 4405 	smlabb	r4, r2, r5, r4
 8010fd4:	fb16 1105 	smlabb	r1, r6, r5, r1
 8010fd8:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8010fdc:	fb12 0005 	smlabb	r0, r2, r5, r0
 8010fe0:	fb16 3305 	smlabb	r3, r6, r5, r3
 8010fe4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010fe6:	eba2 020a 	sub.w	r2, r2, sl
 8010fea:	4491      	add	r9, r2
 8010fec:	9a08      	ldr	r2, [sp, #32]
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	f040 80dd 	bne.w	80111ae <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 8010ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ff6:	0040      	lsls	r0, r0, #1
 8010ff8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ffa:	0064      	lsls	r4, r4, #1
 8010ffc:	fb50 5002 	smmla	r0, r0, r2, r5
 8011000:	fb54 5402 	smmla	r4, r4, r2, r5
 8011004:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011006:	4110      	asrs	r0, r2
 8011008:	f300 0007 	ssat	r0, #8, r0
 801100c:	9d03      	ldr	r5, [sp, #12]
 801100e:	4114      	asrs	r4, r2
 8011010:	f805 0c01 	strb.w	r0, [r5, #-1]
 8011014:	f304 0407 	ssat	r4, #8, r4
 8011018:	9a02      	ldr	r2, [sp, #8]
 801101a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801101e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011020:	2a00      	cmp	r2, #0
 8011022:	f040 80ac 	bne.w	801117e <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 8011026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801102c:	0049      	lsls	r1, r1, #1
 801102e:	fb53 0302 	smmla	r3, r3, r2, r0
 8011032:	fb51 0102 	smmla	r1, r1, r2, r0
 8011036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011038:	4113      	asrs	r3, r2
 801103a:	f303 0307 	ssat	r3, #8, r3
 801103e:	9803      	ldr	r0, [sp, #12]
 8011040:	4111      	asrs	r1, r2
 8011042:	7003      	strb	r3, [r0, #0]
 8011044:	f301 0107 	ssat	r1, #8, r1
 8011048:	9b02      	ldr	r3, [sp, #8]
 801104a:	7019      	strb	r1, [r3, #0]
 801104c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801104e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011050:	eb09 0b03 	add.w	fp, r9, r3
 8011054:	9b03      	ldr	r3, [sp, #12]
 8011056:	4413      	add	r3, r2
 8011058:	9303      	str	r3, [sp, #12]
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	4413      	add	r3, r2
 801105e:	9302      	str	r3, [sp, #8]
 8011060:	9b04      	ldr	r3, [sp, #16]
 8011062:	3b01      	subs	r3, #1
 8011064:	9304      	str	r3, [sp, #16]
 8011066:	f47f ae77 	bne.w	8010d58 <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 801106a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801106c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801106e:	3b01      	subs	r3, #1
 8011070:	4413      	add	r3, r2
 8011072:	9301      	str	r3, [sp, #4]
 8011074:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011076:	2b00      	cmp	r3, #0
 8011078:	f040 822b 	bne.w	80114d2 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 801107c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801107e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011080:	4413      	add	r3, r2
 8011082:	9323      	str	r3, [sp, #140]	; 0x8c
 8011084:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8011086:	b11b      	cbz	r3, 8011090 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 8011088:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801108a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801108c:	4413      	add	r3, r2
 801108e:	9345      	str	r3, [sp, #276]	; 0x114
 8011090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011092:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011094:	3204      	adds	r2, #4
 8011096:	3302      	adds	r3, #2
 8011098:	9221      	str	r2, [sp, #132]	; 0x84
 801109a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801109c:	931b      	str	r3, [sp, #108]	; 0x6c
 801109e:	3208      	adds	r2, #8
 80110a0:	921f      	str	r2, [sp, #124]	; 0x7c
 80110a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80110a4:	3208      	adds	r2, #8
 80110a6:	9220      	str	r2, [sp, #128]	; 0x80
 80110a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80110aa:	3208      	adds	r2, #8
 80110ac:	9222      	str	r2, [sp, #136]	; 0x88
 80110ae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80110b0:	429a      	cmp	r2, r3
 80110b2:	f47f adf0 	bne.w	8010c96 <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 80110b6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80110b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80110ba:	085a      	lsrs	r2, r3, #1
 80110bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110be:	fb02 3303 	mla	r3, r2, r3, r3
 80110c2:	3201      	adds	r2, #1
 80110c4:	4419      	add	r1, r3
 80110c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80110c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80110cc:	912d      	str	r1, [sp, #180]	; 0xb4
 80110ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80110d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110d2:	07db      	lsls	r3, r3, #31
 80110d4:	d54f      	bpl.n	8011176 <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 80110d6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dd4c      	ble.n	8011176 <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 80110dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110de:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80110e2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80110e6:	2200      	movs	r2, #0
 80110e8:	441c      	add	r4, r3
 80110ea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80110ec:	f04f 0901 	mov.w	r9, #1
 80110f0:	4611      	mov	r1, r2
 80110f2:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 80110f6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80110f8:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 80110fc:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80110fe:	f8cd e004 	str.w	lr, [sp, #4]
 8011102:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011108:	4498      	add	r8, r3
 801110a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801110c:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 8011110:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8011114:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011116:	9e01      	ldr	r6, [sp, #4]
 8011118:	f1be 0f00 	cmp.w	lr, #0
 801111c:	6837      	ldr	r7, [r6, #0]
 801111e:	dd0d      	ble.n	801113c <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 8011120:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8011122:	eb03 0b0e 	add.w	fp, r3, lr
 8011126:	f106 3cff 	add.w	ip, r6, #4294967295
 801112a:	f913 6b01 	ldrsb.w	r6, [r3], #1
 801112e:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 8011132:	1a36      	subs	r6, r6, r0
 8011134:	455b      	cmp	r3, fp
 8011136:	fb0a 7706 	mla	r7, sl, r6, r7
 801113a:	d1f6      	bne.n	801112a <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 801113c:	f9b8 c000 	ldrsh.w	ip, [r8]
 8011140:	f1bc 0f15 	cmp.w	ip, #21
 8011144:	f340 82fa 	ble.w	801173c <st_sssa8_ch_nn_mat_mult_nt_t+0xb64>
 8011148:	f1ac 0a02 	sub.w	sl, ip, #2
 801114c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011150:	682e      	ldr	r6, [r5, #0]
 8011152:	fa09 fa0a 	lsl.w	sl, r9, sl
 8011156:	fb57 a606 	smmla	r6, r7, r6, sl
 801115a:	fa46 fc0c 	asr.w	ip, r6, ip
 801115e:	6826      	ldr	r6, [r4, #0]
 8011160:	4466      	add	r6, ip
 8011162:	f306 0607 	ssat	r6, #8, r6
 8011166:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011168:	54be      	strb	r6, [r7, r2]
 801116a:	9e41      	ldr	r6, [sp, #260]	; 0x104
 801116c:	3101      	adds	r1, #1
 801116e:	4432      	add	r2, r6
 8011170:	9e40      	ldr	r6, [sp, #256]	; 0x100
 8011172:	428e      	cmp	r6, r1
 8011174:	d1cf      	bne.n	8011116 <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 8011176:	2000      	movs	r0, #0
 8011178:	b035      	add	sp, #212	; 0xd4
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117e:	3201      	adds	r2, #1
 8011180:	d02e      	beq.n	80111e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 8011182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011184:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011186:	fb53 0302 	smmla	r3, r3, r2, r0
 801118a:	fb51 0102 	smmla	r1, r1, r2, r0
 801118e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011190:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011192:	3a01      	subs	r2, #1
 8011194:	4113      	asrs	r3, r2
 8011196:	4403      	add	r3, r0
 8011198:	f303 0307 	ssat	r3, #8, r3
 801119c:	4111      	asrs	r1, r2
 801119e:	9a03      	ldr	r2, [sp, #12]
 80111a0:	4401      	add	r1, r0
 80111a2:	7013      	strb	r3, [r2, #0]
 80111a4:	f301 0207 	ssat	r2, #8, r1
 80111a8:	9b02      	ldr	r3, [sp, #8]
 80111aa:	701a      	strb	r2, [r3, #0]
 80111ac:	e74e      	b.n	801104c <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 80111ae:	3201      	adds	r2, #1
 80111b0:	d031      	beq.n	8011216 <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 80111b2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80111b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111b6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80111b8:	fb50 5002 	smmla	r0, r0, r2, r5
 80111bc:	fb54 5402 	smmla	r4, r4, r2, r5
 80111c0:	4130      	asrs	r0, r6
 80111c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111c4:	4410      	add	r0, r2
 80111c6:	f300 0007 	ssat	r0, #8, r0
 80111ca:	9d03      	ldr	r5, [sp, #12]
 80111cc:	4134      	asrs	r4, r6
 80111ce:	f805 0c01 	strb.w	r0, [r5, #-1]
 80111d2:	18a2      	adds	r2, r4, r2
 80111d4:	f302 0207 	ssat	r2, #8, r2
 80111d8:	9802      	ldr	r0, [sp, #8]
 80111da:	f800 2c01 	strb.w	r2, [r0, #-1]
 80111de:	e71e      	b.n	801101e <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 80111e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111e2:	f1c2 0201 	rsb	r2, r2, #1
 80111e6:	4093      	lsls	r3, r2
 80111e8:	f303 031f 	ssat	r3, #32, r3
 80111ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80111ee:	fb53 f310 	smmulr	r3, r3, r0
 80111f2:	fa01 f202 	lsl.w	r2, r1, r2
 80111f6:	f302 021f 	ssat	r2, #32, r2
 80111fa:	fb52 f210 	smmulr	r2, r2, r0
 80111fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011200:	440b      	add	r3, r1
 8011202:	f303 0307 	ssat	r3, #8, r3
 8011206:	9803      	ldr	r0, [sp, #12]
 8011208:	440a      	add	r2, r1
 801120a:	7003      	strb	r3, [r0, #0]
 801120c:	f302 0207 	ssat	r2, #8, r2
 8011210:	9b02      	ldr	r3, [sp, #8]
 8011212:	701a      	strb	r2, [r3, #0]
 8011214:	e71a      	b.n	801104c <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8011216:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8011218:	fa00 f205 	lsl.w	r2, r0, r5
 801121c:	f302 021f 	ssat	r2, #32, r2
 8011220:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011222:	fb52 f216 	smmulr	r2, r2, r6
 8011226:	fa04 f005 	lsl.w	r0, r4, r5
 801122a:	f300 001f 	ssat	r0, #32, r0
 801122e:	fb50 f016 	smmulr	r0, r0, r6
 8011232:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8011234:	4422      	add	r2, r4
 8011236:	f302 0207 	ssat	r2, #8, r2
 801123a:	9d03      	ldr	r5, [sp, #12]
 801123c:	4420      	add	r0, r4
 801123e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011242:	f300 0007 	ssat	r0, #8, r0
 8011246:	9a02      	ldr	r2, [sp, #8]
 8011248:	f802 0c01 	strb.w	r0, [r2, #-1]
 801124c:	e6e7      	b.n	801101e <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 801124e:	46d9      	mov	r9, fp
 8011250:	e670      	b.n	8010f34 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 8011252:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011254:	f04f 0a00 	mov.w	sl, #0
 8011258:	980c      	ldr	r0, [sp, #48]	; 0x30
 801125a:	9301      	str	r3, [sp, #4]
 801125c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801125e:	4604      	mov	r4, r0
 8011260:	4619      	mov	r1, r3
 8011262:	e622      	b.n	8010eaa <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 8011264:	2301      	movs	r3, #1
 8011266:	9309      	str	r3, [sp, #36]	; 0x24
 8011268:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801126a:	2b00      	cmp	r3, #0
 801126c:	f47f ad40 	bne.w	8010cf0 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8011270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011272:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011274:	eb03 0a02 	add.w	sl, r3, r2
 8011278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801127a:	2b00      	cmp	r3, #0
 801127c:	f340 82b2 	ble.w	80117e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0c>
 8011280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011282:	4650      	mov	r0, sl
 8011284:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011286:	18d5      	adds	r5, r2, r3
 8011288:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801128a:	6811      	ldr	r1, [r2, #0]
 801128c:	3210      	adds	r2, #16
 801128e:	6804      	ldr	r4, [r0, #0]
 8011290:	3340      	adds	r3, #64	; 0x40
 8011292:	fa2f f681 	sxtb16	r6, r1
 8011296:	3010      	adds	r0, #16
 8011298:	f843 6c40 	str.w	r6, [r3, #-64]
 801129c:	ea4f 2131 	mov.w	r1, r1, ror #8
 80112a0:	42aa      	cmp	r2, r5
 80112a2:	fa2f f181 	sxtb16	r1, r1
 80112a6:	f843 1c3c 	str.w	r1, [r3, #-60]
 80112aa:	ea4f 2134 	mov.w	r1, r4, ror #8
 80112ae:	fa2f f484 	sxtb16	r4, r4
 80112b2:	fa2f f181 	sxtb16	r1, r1
 80112b6:	f843 4c38 	str.w	r4, [r3, #-56]
 80112ba:	f843 1c34 	str.w	r1, [r3, #-52]
 80112be:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 80112c2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80112c6:	ea4f 2631 	mov.w	r6, r1, ror #8
 80112ca:	fa2f f181 	sxtb16	r1, r1
 80112ce:	fa2f f686 	sxtb16	r6, r6
 80112d2:	f843 1c28 	str.w	r1, [r3, #-40]
 80112d6:	f843 6c24 	str.w	r6, [r3, #-36]
 80112da:	ea4f 2634 	mov.w	r6, r4, ror #8
 80112de:	fa2f f484 	sxtb16	r4, r4
 80112e2:	f843 4c30 	str.w	r4, [r3, #-48]
 80112e6:	fa2f f486 	sxtb16	r4, r6
 80112ea:	f843 4c2c 	str.w	r4, [r3, #-44]
 80112ee:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80112f2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80112f6:	ea4f 2634 	mov.w	r6, r4, ror #8
 80112fa:	fa2f f484 	sxtb16	r4, r4
 80112fe:	fa2f f686 	sxtb16	r6, r6
 8011302:	f843 4c20 	str.w	r4, [r3, #-32]
 8011306:	ea4f 2431 	mov.w	r4, r1, ror #8
 801130a:	f843 6c1c 	str.w	r6, [r3, #-28]
 801130e:	fa2f f484 	sxtb16	r4, r4
 8011312:	fa2f f181 	sxtb16	r1, r1
 8011316:	f843 4c14 	str.w	r4, [r3, #-20]
 801131a:	f843 1c18 	str.w	r1, [r3, #-24]
 801131e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8011322:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8011326:	ea4f 2634 	mov.w	r6, r4, ror #8
 801132a:	fa2f f484 	sxtb16	r4, r4
 801132e:	fa2f f686 	sxtb16	r6, r6
 8011332:	f843 4c10 	str.w	r4, [r3, #-16]
 8011336:	ea4f 2431 	mov.w	r4, r1, ror #8
 801133a:	f843 6c0c 	str.w	r6, [r3, #-12]
 801133e:	fa2f f484 	sxtb16	r4, r4
 8011342:	fa2f f181 	sxtb16	r1, r1
 8011346:	f843 4c04 	str.w	r4, [r3, #-4]
 801134a:	f843 1c08 	str.w	r1, [r3, #-8]
 801134e:	d19c      	bne.n	801128a <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 8011350:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011352:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011354:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011356:	449a      	add	sl, r3
 8011358:	469c      	mov	ip, r3
 801135a:	1857      	adds	r7, r2, r1
 801135c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801135e:	3b03      	subs	r3, #3
 8011360:	4563      	cmp	r3, ip
 8011362:	f340 823d 	ble.w	80117e0 <st_sssa8_ch_nn_mat_mult_nt_t+0xc08>
 8011366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011368:	463a      	mov	r2, r7
 801136a:	4650      	mov	r0, sl
 801136c:	eba3 030c 	sub.w	r3, r3, ip
 8011370:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8011374:	f108 0e01 	add.w	lr, r8, #1
 8011378:	ea4f 098e 	mov.w	r9, lr, lsl #2
 801137c:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 8011380:	f855 3b04 	ldr.w	r3, [r5], #4
 8011384:	3210      	adds	r2, #16
 8011386:	f850 1b04 	ldr.w	r1, [r0], #4
 801138a:	fa2f f483 	sxtb16	r4, r3
 801138e:	42b5      	cmp	r5, r6
 8011390:	ea4f 2333 	mov.w	r3, r3, ror #8
 8011394:	fa2f f383 	sxtb16	r3, r3
 8011398:	f842 3c0c 	str.w	r3, [r2, #-12]
 801139c:	ea4f 2331 	mov.w	r3, r1, ror #8
 80113a0:	fa2f f181 	sxtb16	r1, r1
 80113a4:	f842 4c10 	str.w	r4, [r2, #-16]
 80113a8:	f842 1c08 	str.w	r1, [r2, #-8]
 80113ac:	fa2f f383 	sxtb16	r3, r3
 80113b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80113b4:	d1e4      	bne.n	8011380 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 80113b6:	f10c 0304 	add.w	r3, ip, #4
 80113ba:	44ca      	add	sl, r9
 80113bc:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80113c0:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 80113c4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80113c6:	4563      	cmp	r3, ip
 80113c8:	f77f ac92 	ble.w	8010cf0 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80113cc:	f996 3000 	ldrsb.w	r3, [r6]
 80113d0:	803b      	strh	r3, [r7, #0]
 80113d2:	f10c 0301 	add.w	r3, ip, #1
 80113d6:	f99a 2000 	ldrsb.w	r2, [sl]
 80113da:	807a      	strh	r2, [r7, #2]
 80113dc:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80113de:	429a      	cmp	r2, r3
 80113e0:	f77f ac86 	ble.w	8010cf0 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80113e4:	f996 3001 	ldrsb.w	r3, [r6, #1]
 80113e8:	80bb      	strh	r3, [r7, #4]
 80113ea:	f10c 0302 	add.w	r3, ip, #2
 80113ee:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 80113f2:	80fa      	strh	r2, [r7, #6]
 80113f4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80113f6:	429a      	cmp	r2, r3
 80113f8:	f77f ac7a 	ble.w	8010cf0 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80113fc:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8011400:	f10c 0c03 	add.w	ip, ip, #3
 8011404:	813b      	strh	r3, [r7, #8]
 8011406:	4594      	cmp	ip, r2
 8011408:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 801140c:	817b      	strh	r3, [r7, #10]
 801140e:	f6bf ac6f 	bge.w	8010cf0 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8011412:	f996 3003 	ldrsb.w	r3, [r6, #3]
 8011416:	81bb      	strh	r3, [r7, #12]
 8011418:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 801141c:	81fb      	strh	r3, [r7, #14]
 801141e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011420:	2b00      	cmp	r3, #0
 8011422:	f43f ac69 	beq.w	8010cf8 <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 8011426:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011428:	2800      	cmp	r0, #0
 801142a:	f000 81cd 	beq.w	80117c8 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf0>
 801142e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011430:	2300      	movs	r3, #0
 8011432:	f102 0110 	add.w	r1, r2, #16
 8011436:	461a      	mov	r2, r3
 8011438:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 801143c:	3801      	subs	r0, #1
 801143e:	f101 0110 	add.w	r1, r1, #16
 8011442:	eba3 0304 	sub.w	r3, r3, r4
 8011446:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 801144a:	eba2 0204 	sub.w	r2, r2, r4
 801144e:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 8011452:	eba3 0304 	sub.w	r3, r3, r4
 8011456:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 801145a:	eba2 0204 	sub.w	r2, r2, r4
 801145e:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 8011462:	eba3 0304 	sub.w	r3, r3, r4
 8011466:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 801146a:	eba2 0204 	sub.w	r2, r2, r4
 801146e:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8011472:	eba3 0304 	sub.w	r3, r3, r4
 8011476:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 801147a:	eba2 0204 	sub.w	r2, r2, r4
 801147e:	d1db      	bne.n	8011438 <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8011480:	9945      	ldr	r1, [sp, #276]	; 0x114
 8011482:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8011484:	4401      	add	r1, r0
 8011486:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8011488:	b1cc      	cbz	r4, 80114be <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801148a:	f9b1 0000 	ldrsh.w	r0, [r1]
 801148e:	2c01      	cmp	r4, #1
 8011490:	eba3 0300 	sub.w	r3, r3, r0
 8011494:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8011498:	eba2 0200 	sub.w	r2, r2, r0
 801149c:	d00f      	beq.n	80114be <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801149e:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 80114a2:	2c02      	cmp	r4, #2
 80114a4:	eba3 0300 	sub.w	r3, r3, r0
 80114a8:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 80114ac:	eba2 0200 	sub.w	r2, r2, r0
 80114b0:	d005      	beq.n	80114be <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 80114b2:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 80114b6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80114ba:	1a1b      	subs	r3, r3, r0
 80114bc:	1a52      	subs	r2, r2, r1
 80114be:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80114c0:	fb03 f101 	mul.w	r1, r3, r1
 80114c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80114c6:	fb03 f202 	mul.w	r2, r3, r2
 80114ca:	e417      	b.n	8010cfc <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 80114cc:	2301      	movs	r3, #1
 80114ce:	9308      	str	r3, [sp, #32]
 80114d0:	e400      	b.n	8010cd4 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 80114d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f340 817d 	ble.w	80117d4 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfc>
 80114da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80114dc:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 80114e0:	eb0b 0003 	add.w	r0, fp, r3
 80114e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80114e6:	f8db 1000 	ldr.w	r1, [fp]
 80114ea:	681e      	ldr	r6, [r3, #0]
 80114ec:	fa2f f481 	sxtb16	r4, r1
 80114f0:	fa2f f191 	sxtb16	r1, r1, ror #8
 80114f4:	fb24 5506 	smlad	r5, r4, r6, r5
 80114f8:	685e      	ldr	r6, [r3, #4]
 80114fa:	fb21 5606 	smlad	r6, r1, r6, r5
 80114fe:	689d      	ldr	r5, [r3, #8]
 8011500:	fb24 2205 	smlad	r2, r4, r5, r2
 8011504:	68dc      	ldr	r4, [r3, #12]
 8011506:	fb21 2104 	smlad	r1, r1, r4, r2
 801150a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801150e:	691d      	ldr	r5, [r3, #16]
 8011510:	fa2f f482 	sxtb16	r4, r2
 8011514:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011518:	fb24 6505 	smlad	r5, r4, r5, r6
 801151c:	695e      	ldr	r6, [r3, #20]
 801151e:	fb22 5606 	smlad	r6, r2, r6, r5
 8011522:	699d      	ldr	r5, [r3, #24]
 8011524:	fb24 1105 	smlad	r1, r4, r5, r1
 8011528:	69dc      	ldr	r4, [r3, #28]
 801152a:	fb22 1104 	smlad	r1, r2, r4, r1
 801152e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8011532:	6a1d      	ldr	r5, [r3, #32]
 8011534:	fa2f f482 	sxtb16	r4, r2
 8011538:	fa2f f292 	sxtb16	r2, r2, ror #8
 801153c:	fb24 6505 	smlad	r5, r4, r5, r6
 8011540:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8011542:	fb22 5606 	smlad	r6, r2, r6, r5
 8011546:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8011548:	fb24 1105 	smlad	r1, r4, r5, r1
 801154c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801154e:	fb22 1104 	smlad	r1, r2, r4, r1
 8011552:	f8db 200c 	ldr.w	r2, [fp, #12]
 8011556:	3340      	adds	r3, #64	; 0x40
 8011558:	fa2f f482 	sxtb16	r4, r2
 801155c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8011560:	f10b 0b10 	add.w	fp, fp, #16
 8011564:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 8011568:	f853 cc08 	ldr.w	ip, [r3, #-8]
 801156c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8011570:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011574:	fb24 6505 	smlad	r5, r4, r5, r6
 8011578:	fb22 550e 	smlad	r5, r2, lr, r5
 801157c:	fb24 110c 	smlad	r1, r4, ip, r1
 8011580:	fb22 1207 	smlad	r2, r2, r7, r1
 8011584:	4583      	cmp	fp, r0
 8011586:	d1ae      	bne.n	80114e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 8011588:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801158a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801158e:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 8011592:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011594:	eb03 0e02 	add.w	lr, r3, r2
 8011598:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801159a:	3b03      	subs	r3, #3
 801159c:	4543      	cmp	r3, r8
 801159e:	f340 8117 	ble.w	80117d0 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf8>
 80115a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80115a6:	eba3 0a08 	sub.w	sl, r3, r8
 80115aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80115ac:	4673      	mov	r3, lr
 80115ae:	f8cd e008 	str.w	lr, [sp, #8]
 80115b2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 80115b6:	f10a 0901 	add.w	r9, sl, #1
 80115ba:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 80115be:	f850 2b04 	ldr.w	r2, [r0], #4
 80115c2:	3310      	adds	r3, #16
 80115c4:	fa2f f182 	sxtb16	r1, r2
 80115c8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80115cc:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 80115d0:	f853 ec08 	ldr.w	lr, [r3, #-8]
 80115d4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80115d8:	fa2f f292 	sxtb16	r2, r2, ror #8
 80115dc:	fb21 6604 	smlad	r6, r1, r4, r6
 80115e0:	fb22 660b 	smlad	r6, r2, fp, r6
 80115e4:	fb21 550e 	smlad	r5, r1, lr, r5
 80115e8:	fb22 5507 	smlad	r5, r2, r7, r5
 80115ec:	4560      	cmp	r0, ip
 80115ee:	d1e6      	bne.n	80115be <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 80115f0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80115f4:	f108 0804 	add.w	r8, r8, #4
 80115f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80115fa:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 80115fe:	960c      	str	r6, [sp, #48]	; 0x30
 8011600:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8011604:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8011606:	4543      	cmp	r3, r8
 8011608:	dd40      	ble.n	801168c <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 801160a:	f99c 3000 	ldrsb.w	r3, [ip]
 801160e:	f8be 2000 	ldrh.w	r2, [lr]
 8011612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011614:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011616:	fb12 1103 	smlabb	r1, r2, r3, r1
 801161a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801161e:	fb12 0003 	smlabb	r0, r2, r3, r0
 8011622:	f108 0301 	add.w	r3, r8, #1
 8011626:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011628:	910c      	str	r1, [sp, #48]	; 0x30
 801162a:	429a      	cmp	r2, r3
 801162c:	900b      	str	r0, [sp, #44]	; 0x2c
 801162e:	dd2d      	ble.n	801168c <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8011630:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8011634:	f8be 2004 	ldrh.w	r2, [lr, #4]
 8011638:	fb12 1103 	smlabb	r1, r2, r3, r1
 801163c:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8011640:	fb12 0003 	smlabb	r0, r2, r3, r0
 8011644:	f108 0302 	add.w	r3, r8, #2
 8011648:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801164a:	910c      	str	r1, [sp, #48]	; 0x30
 801164c:	429a      	cmp	r2, r3
 801164e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011650:	dd1c      	ble.n	801168c <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8011652:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8011656:	f108 0803 	add.w	r8, r8, #3
 801165a:	f8be 2008 	ldrh.w	r2, [lr, #8]
 801165e:	fb12 1103 	smlabb	r1, r2, r3, r1
 8011662:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8011666:	fb12 0003 	smlabb	r0, r2, r3, r0
 801166a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801166c:	910c      	str	r1, [sp, #48]	; 0x30
 801166e:	4543      	cmp	r3, r8
 8011670:	900b      	str	r0, [sp, #44]	; 0x2c
 8011672:	dd0b      	ble.n	801168c <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8011674:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8011678:	f8be 200c 	ldrh.w	r2, [lr, #12]
 801167c:	fb12 1203 	smlabb	r2, r2, r3, r1
 8011680:	920c      	str	r2, [sp, #48]	; 0x30
 8011682:	f8be 200e 	ldrh.w	r2, [lr, #14]
 8011686:	fb12 0303 	smlabb	r3, r2, r3, r0
 801168a:	930b      	str	r3, [sp, #44]	; 0x2c
 801168c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801168e:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8011692:	2915      	cmp	r1, #21
 8011694:	dd3d      	ble.n	8011712 <st_sssa8_ch_nn_mat_mult_nt_t+0xb3a>
 8011696:	1e8a      	subs	r2, r1, #2
 8011698:	2301      	movs	r3, #1
 801169a:	3901      	subs	r1, #1
 801169c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801169e:	fa03 f202 	lsl.w	r2, r3, r2
 80116a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80116a8:	fb50 2303 	smmla	r3, r0, r3, r2
 80116ac:	fa43 f101 	asr.w	r1, r3, r1
 80116b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80116b2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80116b6:	440b      	add	r3, r1
 80116b8:	f303 0307 	ssat	r3, #8, r3
 80116bc:	9a01      	ldr	r2, [sp, #4]
 80116be:	7013      	strb	r3, [r2, #0]
 80116c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80116c6:	2915      	cmp	r1, #21
 80116c8:	dd13      	ble.n	80116f2 <st_sssa8_ch_nn_mat_mult_nt_t+0xb1a>
 80116ca:	1e8a      	subs	r2, r1, #2
 80116cc:	2301      	movs	r3, #1
 80116ce:	3901      	subs	r1, #1
 80116d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80116d2:	fa03 f202 	lsl.w	r2, r3, r2
 80116d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	fb50 2303 	smmla	r3, r0, r3, r2
 80116de:	fa43 f101 	asr.w	r1, r3, r1
 80116e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	440b      	add	r3, r1
 80116e8:	f303 0307 	ssat	r3, #8, r3
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	7053      	strb	r3, [r2, #1]
 80116f0:	e4c4      	b.n	801107c <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80116f2:	2900      	cmp	r1, #0
 80116f4:	dd56      	ble.n	80117a4 <st_sssa8_ch_nn_mat_mult_nt_t+0xbcc>
 80116f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80116fa:	0058      	lsls	r0, r3, #1
 80116fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116fe:	6812      	ldr	r2, [r2, #0]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	fb50 2303 	smmla	r3, r0, r3, r2
 8011706:	410b      	asrs	r3, r1
 8011708:	f303 0307 	ssat	r3, #8, r3
 801170c:	9a01      	ldr	r2, [sp, #4]
 801170e:	7053      	strb	r3, [r2, #1]
 8011710:	e4b4      	b.n	801107c <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8011712:	2900      	cmp	r1, #0
 8011714:	dd32      	ble.n	801177c <st_sssa8_ch_nn_mat_mult_nt_t+0xba4>
 8011716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011718:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801171a:	0058      	lsls	r0, r3, #1
 801171c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801171e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011722:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011726:	fb50 2303 	smmla	r3, r0, r3, r2
 801172a:	410b      	asrs	r3, r1
 801172c:	f303 0307 	ssat	r3, #8, r3
 8011730:	9a01      	ldr	r2, [sp, #4]
 8011732:	7013      	strb	r3, [r2, #0]
 8011734:	e7c4      	b.n	80116c0 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8011736:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801173a:	e49b      	b.n	8011074 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 801173c:	f1bc 0f00 	cmp.w	ip, #0
 8011740:	dd0c      	ble.n	801175c <st_sssa8_ch_nn_mat_mult_nt_t+0xb84>
 8011742:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8011746:	682e      	ldr	r6, [r5, #0]
 8011748:	6827      	ldr	r7, [r4, #0]
 801174a:	fb5a 7706 	smmla	r7, sl, r6, r7
 801174e:	fa47 f60c 	asr.w	r6, r7, ip
 8011752:	f306 0607 	ssat	r6, #8, r6
 8011756:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011758:	54be      	strb	r6, [r7, r2]
 801175a:	e506      	b.n	801116a <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801175c:	f1cc 0c01 	rsb	ip, ip, #1
 8011760:	fa07 f70c 	lsl.w	r7, r7, ip
 8011764:	f307 071f 	ssat	r7, #32, r7
 8011768:	682e      	ldr	r6, [r5, #0]
 801176a:	fb57 f716 	smmulr	r7, r7, r6
 801176e:	6826      	ldr	r6, [r4, #0]
 8011770:	443e      	add	r6, r7
 8011772:	f306 0607 	ssat	r6, #8, r6
 8011776:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011778:	54be      	strb	r6, [r7, r2]
 801177a:	e4f6      	b.n	801116a <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801177c:	f1c1 0101 	rsb	r1, r1, #1
 8011780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011782:	408a      	lsls	r2, r1
 8011784:	f302 021f 	ssat	r2, #32, r2
 8011788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801178a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801178e:	fb52 f213 	smmulr	r2, r2, r3
 8011792:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011794:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011798:	4413      	add	r3, r2
 801179a:	f303 0307 	ssat	r3, #8, r3
 801179e:	9a01      	ldr	r2, [sp, #4]
 80117a0:	7013      	strb	r3, [r2, #0]
 80117a2:	e78d      	b.n	80116c0 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 80117a4:	f1c1 0101 	rsb	r1, r1, #1
 80117a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117aa:	408a      	lsls	r2, r1
 80117ac:	f302 021f 	ssat	r2, #32, r2
 80117b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	fb52 f213 	smmulr	r2, r2, r3
 80117b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	4413      	add	r3, r2
 80117be:	f303 0307 	ssat	r3, #8, r3
 80117c2:	9a01      	ldr	r2, [sp, #4]
 80117c4:	7053      	strb	r3, [r2, #1]
 80117c6:	e459      	b.n	801107c <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80117c8:	4602      	mov	r2, r0
 80117ca:	9945      	ldr	r1, [sp, #276]	; 0x114
 80117cc:	4603      	mov	r3, r0
 80117ce:	e65a      	b.n	8011486 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 80117d0:	4684      	mov	ip, r0
 80117d2:	e717      	b.n	8011604 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2c>
 80117d4:	4658      	mov	r0, fp
 80117d6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 80117da:	f04f 0800 	mov.w	r8, #0
 80117de:	e6db      	b.n	8011598 <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 80117e0:	462e      	mov	r6, r5
 80117e2:	e5ef      	b.n	80113c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 80117e4:	9f45      	ldr	r7, [sp, #276]	; 0x114
 80117e6:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80117e8:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 80117ec:	e5b6      	b.n	801135c <st_sssa8_ch_nn_mat_mult_nt_t+0x784>
 80117ee:	bf00      	nop

080117f0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	b0c7      	sub	sp, #284	; 0x11c
 80117f6:	469c      	mov	ip, r3
 80117f8:	4688      	mov	r8, r1
 80117fa:	902d      	str	r0, [sp, #180]	; 0xb4
 80117fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80117fe:	9853      	ldr	r0, [sp, #332]	; 0x14c
 8011800:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8011804:	f8bd 615c 	ldrh.w	r6, [sp, #348]	; 0x15c
 8011808:	fb00 f003 	mul.w	r0, r0, r3
 801180c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801180e:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 8011812:	9131      	str	r1, [sp, #196]	; 0xc4
 8011814:	962e      	str	r6, [sp, #184]	; 0xb8
 8011816:	f8bd 1168 	ldrh.w	r1, [sp, #360]	; 0x168
 801181a:	f8bd 6160 	ldrh.w	r6, [sp, #352]	; 0x160
 801181e:	9243      	str	r2, [sp, #268]	; 0x10c
 8011820:	9006      	str	r0, [sp, #24]
 8011822:	9745      	str	r7, [sp, #276]	; 0x114
 8011824:	960c      	str	r6, [sp, #48]	; 0x30
 8011826:	910a      	str	r1, [sp, #40]	; 0x28
 8011828:	e9dd 455d 	ldrd	r4, r5, [sp, #372]	; 0x174
 801182c:	2d00      	cmp	r5, #0
 801182e:	bf18      	it	ne
 8011830:	462c      	movne	r4, r5
 8011832:	f8bd 5158 	ldrh.w	r5, [sp, #344]	; 0x158
 8011836:	2b01      	cmp	r3, #1
 8011838:	945d      	str	r4, [sp, #372]	; 0x174
 801183a:	f8bd 4150 	ldrh.w	r4, [sp, #336]	; 0x150
 801183e:	9532      	str	r5, [sp, #200]	; 0xc8
 8011840:	9444      	str	r4, [sp, #272]	; 0x110
 8011842:	f340 82aa 	ble.w	8011d9a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5aa>
 8011846:	3b02      	subs	r3, #2
 8011848:	fb00 f101 	mul.w	r1, r0, r1
 801184c:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 801184e:	4696      	mov	lr, r2
 8011850:	085b      	lsrs	r3, r3, #1
 8011852:	9139      	str	r1, [sp, #228]	; 0xe4
 8011854:	fb06 f404 	mul.w	r4, r6, r4
 8011858:	460e      	mov	r6, r1
 801185a:	3301      	adds	r3, #1
 801185c:	1081      	asrs	r1, r0, #2
 801185e:	1eaa      	subs	r2, r5, #2
 8011860:	9407      	str	r4, [sp, #28]
 8011862:	9337      	str	r3, [sp, #220]	; 0xdc
 8011864:	f1a0 0310 	sub.w	r3, r0, #16
 8011868:	9134      	str	r1, [sp, #208]	; 0xd0
 801186a:	f000 0103 	and.w	r1, r0, #3
 801186e:	9852      	ldr	r0, [sp, #328]	; 0x148
 8011870:	0852      	lsrs	r2, r2, #1
 8011872:	9135      	str	r1, [sp, #212]	; 0xd4
 8011874:	0041      	lsls	r1, r0, #1
 8011876:	9341      	str	r3, [sp, #260]	; 0x104
 8011878:	091b      	lsrs	r3, r3, #4
 801187a:	4608      	mov	r0, r1
 801187c:	9120      	str	r1, [sp, #128]	; 0x80
 801187e:	fb02 f104 	mul.w	r1, r2, r4
 8011882:	3301      	adds	r3, #1
 8011884:	fb02 0000 	mla	r0, r2, r0, r0
 8011888:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801188a:	9040      	str	r0, [sp, #256]	; 0x100
 801188c:	0048      	lsls	r0, r1, #1
 801188e:	903f      	str	r0, [sp, #252]	; 0xfc
 8011890:	f06f 0003 	mvn.w	r0, #3
 8011894:	1b00      	subs	r0, r0, r4
 8011896:	9013      	str	r0, [sp, #76]	; 0x4c
 8011898:	1f20      	subs	r0, r4, #4
 801189a:	9011      	str	r0, [sp, #68]	; 0x44
 801189c:	1e68      	subs	r0, r5, #1
 801189e:	901d      	str	r0, [sp, #116]	; 0x74
 80118a0:	9806      	ldr	r0, [sp, #24]
 80118a2:	380f      	subs	r0, #15
 80118a4:	900d      	str	r0, [sp, #52]	; 0x34
 80118a6:	f005 0001 	and.w	r0, r5, #1
 80118aa:	903a      	str	r0, [sp, #232]	; 0xe8
 80118ac:	0060      	lsls	r0, r4, #1
 80118ae:	901e      	str	r0, [sp, #120]	; 0x78
 80118b0:	0070      	lsls	r0, r6, #1
 80118b2:	9036      	str	r0, [sp, #216]	; 0xd8
 80118b4:	00b0      	lsls	r0, r6, #2
 80118b6:	903b      	str	r0, [sp, #236]	; 0xec
 80118b8:	9851      	ldr	r0, [sp, #324]	; 0x144
 80118ba:	3002      	adds	r0, #2
 80118bc:	9029      	str	r0, [sp, #164]	; 0xa4
 80118be:	9850      	ldr	r0, [sp, #320]	; 0x140
 80118c0:	3004      	adds	r0, #4
 80118c2:	9026      	str	r0, [sp, #152]	; 0x98
 80118c4:	985c      	ldr	r0, [sp, #368]	; 0x170
 80118c6:	3004      	adds	r0, #4
 80118c8:	9027      	str	r0, [sp, #156]	; 0x9c
 80118ca:	4670      	mov	r0, lr
 80118cc:	3004      	adds	r0, #4
 80118ce:	9030      	str	r0, [sp, #192]	; 0xc0
 80118d0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
 80118d4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80118d6:	9042      	str	r0, [sp, #264]	; 0x108
 80118d8:	0110      	lsls	r0, r2, #4
 80118da:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80118dc:	0092      	lsls	r2, r2, #2
 80118de:	903d      	str	r0, [sp, #244]	; 0xf4
 80118e0:	923e      	str	r2, [sp, #248]	; 0xf8
 80118e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80118e4:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 80118e8:	fb06 f207 	mul.w	r2, r6, r7
 80118ec:	923c      	str	r2, [sp, #240]	; 0xf0
 80118ee:	011a      	lsls	r2, r3, #4
 80118f0:	019b      	lsls	r3, r3, #6
 80118f2:	920e      	str	r2, [sp, #56]	; 0x38
 80118f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80118f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80118f8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80118fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011900:	2b15      	cmp	r3, #21
 8011902:	931f      	str	r3, [sp, #124]	; 0x7c
 8011904:	921c      	str	r2, [sp, #112]	; 0x70
 8011906:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011908:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801190c:	6812      	ldr	r2, [r2, #0]
 801190e:	9121      	str	r1, [sp, #132]	; 0x84
 8011910:	9222      	str	r2, [sp, #136]	; 0x88
 8011912:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011914:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011918:	6812      	ldr	r2, [r2, #0]
 801191a:	9123      	str	r1, [sp, #140]	; 0x8c
 801191c:	9224      	str	r2, [sp, #144]	; 0x90
 801191e:	f300 851b 	bgt.w	8012358 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb68>
 8011922:	2b00      	cmp	r3, #0
 8011924:	bfcc      	ite	gt
 8011926:	2300      	movgt	r3, #0
 8011928:	2301      	movle	r3, #1
 801192a:	425b      	negs	r3, r3
 801192c:	9318      	str	r3, [sp, #96]	; 0x60
 801192e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011930:	2b15      	cmp	r3, #21
 8011932:	f300 84a3 	bgt.w	801227c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa8c>
 8011936:	2b00      	cmp	r3, #0
 8011938:	bfcc      	ite	gt
 801193a:	2300      	movgt	r3, #0
 801193c:	2301      	movle	r3, #1
 801193e:	425b      	negs	r3, r3
 8011940:	9319      	str	r3, [sp, #100]	; 0x64
 8011942:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8011944:	2b00      	cmp	r3, #0
 8011946:	f000 849f 	beq.w	8012288 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa98>
 801194a:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 801194c:	2b00      	cmp	r3, #0
 801194e:	f040 84a9 	bne.w	80122a4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab4>
 8011952:	461c      	mov	r4, r3
 8011954:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011956:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801195a:	18a2      	adds	r2, r4, r2
 801195c:	921a      	str	r2, [sp, #104]	; 0x68
 801195e:	680a      	ldr	r2, [r1, #0]
 8011960:	4413      	add	r3, r2
 8011962:	931b      	str	r3, [sp, #108]	; 0x6c
 8011964:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011966:	2b00      	cmp	r3, #0
 8011968:	f000 81f3 	beq.w	8011d52 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 801196c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801196e:	2301      	movs	r3, #1
 8011970:	3a02      	subs	r2, #2
 8011972:	fa03 f202 	lsl.w	r2, r3, r2
 8011976:	922a      	str	r2, [sp, #168]	; 0xa8
 8011978:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801197a:	3a02      	subs	r2, #2
 801197c:	4093      	lsls	r3, r2
 801197e:	932b      	str	r3, [sp, #172]	; 0xac
 8011980:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011982:	f023 030f 	bic.w	r3, r3, #15
 8011986:	3314      	adds	r3, #20
 8011988:	9312      	str	r3, [sp, #72]	; 0x48
 801198a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801198c:	932c      	str	r3, [sp, #176]	; 0xb0
 801198e:	9304      	str	r3, [sp, #16]
 8011990:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011992:	9325      	str	r3, [sp, #148]	; 0x94
 8011994:	2300      	movs	r3, #0
 8011996:	9333      	str	r3, [sp, #204]	; 0xcc
 8011998:	9b06      	ldr	r3, [sp, #24]
 801199a:	3b04      	subs	r3, #4
 801199c:	9310      	str	r3, [sp, #64]	; 0x40
 801199e:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	9338      	str	r3, [sp, #224]	; 0xe0
 80119a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f340 81c3 	ble.w	8011d34 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x544>
 80119ae:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80119b0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80119b2:	3301      	adds	r3, #1
 80119b4:	18cb      	adds	r3, r1, r3
 80119b6:	9314      	str	r3, [sp, #80]	; 0x50
 80119b8:	1c4b      	adds	r3, r1, #1
 80119ba:	9315      	str	r3, [sp, #84]	; 0x54
 80119bc:	9b07      	ldr	r3, [sp, #28]
 80119be:	4413      	add	r3, r2
 80119c0:	9316      	str	r3, [sp, #88]	; 0x58
 80119c2:	2300      	movs	r3, #0
 80119c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80119c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f000 82ee 	beq.w	8011faa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ba>
 80119ce:	9b06      	ldr	r3, [sp, #24]
 80119d0:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80119d4:	3b03      	subs	r3, #3
 80119d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80119d8:	4665      	mov	r5, ip
 80119da:	930b      	str	r3, [sp, #44]	; 0x2c
 80119dc:	4693      	mov	fp, r2
 80119de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80119e0:	9304      	str	r3, [sp, #16]
 80119e2:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80119e4:	9303      	str	r3, [sp, #12]
 80119e6:	2300      	movs	r3, #0
 80119e8:	9305      	str	r3, [sp, #20]
 80119ea:	9907      	ldr	r1, [sp, #28]
 80119ec:	9b04      	ldr	r3, [sp, #16]
 80119ee:	1a5f      	subs	r7, r3, r1
 80119f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80119f2:	2900      	cmp	r1, #0
 80119f4:	f340 826d 	ble.w	8011ed2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e2>
 80119f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80119fa:	1d1c      	adds	r4, r3, #4
 80119fc:	9803      	ldr	r0, [sp, #12]
 80119fe:	18cb      	adds	r3, r1, r3
 8011a00:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011a04:	9708      	str	r7, [sp, #32]
 8011a06:	9302      	str	r3, [sp, #8]
 8011a08:	f85a 6004 	ldr.w	r6, [sl, r4]
 8011a0c:	eb0a 0704 	add.w	r7, sl, r4
 8011a10:	fa2f f186 	sxtb16	r1, r6
 8011a14:	6803      	ldr	r3, [r0, #0]
 8011a16:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011a1a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011a1e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8011a22:	fa2f f696 	sxtb16	r6, r6, ror #8
 8011a26:	fb21 2203 	smlad	r2, r1, r3, r2
 8011a2a:	fb26 2208 	smlad	r2, r6, r8, r2
 8011a2e:	fb21 c109 	smlad	r1, r1, r9, ip
 8011a32:	fb26 110e 	smlad	r1, r6, lr, r1
 8011a36:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8011a3a:	fa2f fc86 	sxtb16	ip, r6
 8011a3e:	fa2f f696 	sxtb16	r6, r6, ror #8
 8011a42:	fb2c b303 	smlad	r3, ip, r3, fp
 8011a46:	fb2c 5509 	smlad	r5, ip, r9, r5
 8011a4a:	fb26 3308 	smlad	r3, r6, r8, r3
 8011a4e:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8011a52:	f8d0 b014 	ldr.w	fp, [r0, #20]
 8011a56:	fb26 5e0e 	smlad	lr, r6, lr, r5
 8011a5a:	687d      	ldr	r5, [r7, #4]
 8011a5c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8011a60:	fa2f f685 	sxtb16	r6, r5
 8011a64:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8011a68:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011a6c:	fb26 2208 	smlad	r2, r6, r8, r2
 8011a70:	fb25 220b 	smlad	r2, r5, fp, r2
 8011a74:	fb26 160c 	smlad	r6, r6, ip, r1
 8011a78:	fb25 6609 	smlad	r6, r5, r9, r6
 8011a7c:	6821      	ldr	r1, [r4, #0]
 8011a7e:	fa2f f581 	sxtb16	r5, r1
 8011a82:	fa2f f191 	sxtb16	r1, r1, ror #8
 8011a86:	fb25 3808 	smlad	r8, r5, r8, r3
 8011a8a:	fb25 ee0c 	smlad	lr, r5, ip, lr
 8011a8e:	fb21 880b 	smlad	r8, r1, fp, r8
 8011a92:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8011a96:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8011a9a:	fb21 e909 	smlad	r9, r1, r9, lr
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
 8011aa4:	fa2f f583 	sxtb16	r5, r3
 8011aa8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8011aaa:	fa2f f393 	sxtb16	r3, r3, ror #8
 8011aae:	fb25 220b 	smlad	r2, r5, fp, r2
 8011ab2:	fb23 220c 	smlad	r2, r3, ip, r2
 8011ab6:	fb25 650e 	smlad	r5, r5, lr, r6
 8011aba:	fb23 5301 	smlad	r3, r3, r1, r5
 8011abe:	6866      	ldr	r6, [r4, #4]
 8011ac0:	fa2f f586 	sxtb16	r5, r6
 8011ac4:	fa2f f696 	sxtb16	r6, r6, ror #8
 8011ac8:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8011acc:	fb25 990e 	smlad	r9, r5, lr, r9
 8011ad0:	fb26 b80c 	smlad	r8, r6, ip, fp
 8011ad4:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
 8011ad8:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 8011adc:	fb26 9101 	smlad	r1, r6, r1, r9
 8011ae0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8011ae4:	3040      	adds	r0, #64	; 0x40
 8011ae6:	fa2f f58c 	sxtb16	r5, ip
 8011aea:	f850 9c08 	ldr.w	r9, [r0, #-8]
 8011aee:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011af2:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8011af6:	fb25 220e 	smlad	r2, r5, lr, r2
 8011afa:	fb2c 220b 	smlad	r2, ip, fp, r2
 8011afe:	fb25 3309 	smlad	r3, r5, r9, r3
 8011b02:	fb2c 3c07 	smlad	ip, ip, r7, r3
 8011b06:	68a5      	ldr	r5, [r4, #8]
 8011b08:	fa2f f385 	sxtb16	r3, r5
 8011b0c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011b10:	fb23 880e 	smlad	r8, r3, lr, r8
 8011b14:	fb23 1109 	smlad	r1, r3, r9, r1
 8011b18:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8011b1c:	fb25 1507 	smlad	r5, r5, r7, r1
 8011b20:	3410      	adds	r4, #16
 8011b22:	9b02      	ldr	r3, [sp, #8]
 8011b24:	429c      	cmp	r4, r3
 8011b26:	f47f af6f 	bne.w	8011a08 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x218>
 8011b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b2c:	9903      	ldr	r1, [sp, #12]
 8011b2e:	9f08      	ldr	r7, [sp, #32]
 8011b30:	469a      	mov	sl, r3
 8011b32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011b34:	441f      	add	r7, r3
 8011b36:	4401      	add	r1, r0
 8011b38:	9103      	str	r1, [sp, #12]
 8011b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b3c:	459a      	cmp	sl, r3
 8011b3e:	f280 81c6 	bge.w	8011ece <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6de>
 8011b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b44:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011b48:	eba3 030a 	sub.w	r3, r3, sl
 8011b4c:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8011b50:	089b      	lsrs	r3, r3, #2
 8011b52:	4619      	mov	r1, r3
 8011b54:	9308      	str	r3, [sp, #32]
 8011b56:	9b03      	ldr	r3, [sp, #12]
 8011b58:	3101      	adds	r1, #1
 8011b5a:	eb07 0981 	add.w	r9, r7, r1, lsl #2
 8011b5e:	9102      	str	r1, [sp, #8]
 8011b60:	f857 1b04 	ldr.w	r1, [r7], #4
 8011b64:	3310      	adds	r3, #16
 8011b66:	fa2f f081 	sxtb16	r0, r1
 8011b6a:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8011b6e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8011b72:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8011b76:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8011b7a:	fa2f f191 	sxtb16	r1, r1, ror #8
 8011b7e:	fb20 2208 	smlad	r2, r0, r8, r2
 8011b82:	fb21 2206 	smlad	r2, r1, r6, r2
 8011b86:	fb20 cc0e 	smlad	ip, r0, lr, ip
 8011b8a:	fb21 cc04 	smlad	ip, r1, r4, ip
 8011b8e:	f857 100a 	ldr.w	r1, [r7, sl]
 8011b92:	fa2f f081 	sxtb16	r0, r1
 8011b96:	fa2f f191 	sxtb16	r1, r1, ror #8
 8011b9a:	fb20 bb08 	smlad	fp, r0, r8, fp
 8011b9e:	fb20 550e 	smlad	r5, r0, lr, r5
 8011ba2:	fb21 bb06 	smlad	fp, r1, r6, fp
 8011ba6:	fb21 5504 	smlad	r5, r1, r4, r5
 8011baa:	454f      	cmp	r7, r9
 8011bac:	d1d8      	bne.n	8011b60 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x370>
 8011bae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011bb2:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011bb6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011bba:	9908      	ldr	r1, [sp, #32]
 8011bbc:	9303      	str	r3, [sp, #12]
 8011bbe:	f10a 0304 	add.w	r3, sl, #4
 8011bc2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 8011bc6:	9e06      	ldr	r6, [sp, #24]
 8011bc8:	4556      	cmp	r6, sl
 8011bca:	dd58      	ble.n	8011c7e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x48e>
 8011bcc:	9c03      	ldr	r4, [sp, #12]
 8011bce:	f999 3000 	ldrsb.w	r3, [r9]
 8011bd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011bd6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011bda:	9f07      	ldr	r7, [sp, #28]
 8011bdc:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011be0:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8011be4:	f919 3007 	ldrsb.w	r3, [r9, r7]
 8011be8:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011bec:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011bf0:	f10a 0301 	add.w	r3, sl, #1
 8011bf4:	42b3      	cmp	r3, r6
 8011bf6:	da3b      	bge.n	8011c70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8011bf8:	eb09 0307 	add.w	r3, r9, r7
 8011bfc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011c00:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011c04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011c08:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011c0c:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011c10:	f999 3001 	ldrsb.w	r3, [r9, #1]
 8011c14:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8011c18:	f109 0102 	add.w	r1, r9, #2
 8011c1c:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011c20:	f10a 0302 	add.w	r3, sl, #2
 8011c24:	42b3      	cmp	r3, r6
 8011c26:	da23      	bge.n	8011c70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8011c28:	57cb      	ldrsb	r3, [r1, r7]
 8011c2a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8011c2e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8011c32:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011c36:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011c3a:	f999 3002 	ldrsb.w	r3, [r9, #2]
 8011c3e:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8011c42:	f109 0103 	add.w	r1, r9, #3
 8011c46:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011c4a:	f10a 0303 	add.w	r3, sl, #3
 8011c4e:	42b3      	cmp	r3, r6
 8011c50:	da0e      	bge.n	8011c70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8011c52:	57cb      	ldrsb	r3, [r1, r7]
 8011c54:	f999 0003 	ldrsb.w	r0, [r9, #3]
 8011c58:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8011c5c:	fb11 2200 	smlabb	r2, r1, r0, r2
 8011c60:	fb11 bb03 	smlabb	fp, r1, r3, fp
 8011c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c68:	fb11 cc00 	smlabb	ip, r1, r0, ip
 8011c6c:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011c70:	9b06      	ldr	r3, [sp, #24]
 8011c72:	9903      	ldr	r1, [sp, #12]
 8011c74:	eba3 030a 	sub.w	r3, r3, sl
 8011c78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011c7c:	9303      	str	r3, [sp, #12]
 8011c7e:	9904      	ldr	r1, [sp, #16]
 8011c80:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c82:	9b05      	ldr	r3, [sp, #20]
 8011c84:	4401      	add	r1, r0
 8011c86:	3301      	adds	r3, #1
 8011c88:	9104      	str	r1, [sp, #16]
 8011c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011c8c:	9305      	str	r3, [sp, #20]
 8011c8e:	4299      	cmp	r1, r3
 8011c90:	f47f aeab 	bne.w	80119ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1fa>
 8011c94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f040 8139 	bne.w	8011f0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x71e>
 8011c9c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011c9e:	0052      	lsls	r2, r2, #1
 8011ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ca2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011ca6:	fb52 1203 	smmla	r2, r2, r3, r1
 8011caa:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8011cae:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011cb0:	410a      	asrs	r2, r1
 8011cb2:	f302 0307 	ssat	r3, #8, r2
 8011cb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cb8:	fa4b fb01 	asr.w	fp, fp, r1
 8011cbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011cc0:	f30b 0307 	ssat	r3, #8, fp
 8011cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f040 8103 	bne.w	8011ed8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e8>
 8011cd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011cd4:	ea4f 084c 	mov.w	r8, ip, lsl #1
 8011cd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011cda:	006c      	lsls	r4, r5, #1
 8011cdc:	fb58 2803 	smmla	r8, r8, r3, r2
 8011ce0:	fb54 2403 	smmla	r4, r4, r3, r2
 8011ce4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011ce6:	fa48 f802 	asr.w	r8, r8, r2
 8011cea:	f308 0307 	ssat	r3, #8, r8
 8011cee:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011cf0:	4114      	asrs	r4, r2
 8011cf2:	700b      	strb	r3, [r1, #0]
 8011cf4:	f304 0307 	ssat	r3, #8, r4
 8011cf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cfa:	7013      	strb	r3, [r2, #0]
 8011cfc:	460a      	mov	r2, r1
 8011cfe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d02:	440a      	add	r2, r1
 8011d04:	3302      	adds	r3, #2
 8011d06:	9215      	str	r2, [sp, #84]	; 0x54
 8011d08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8011d0c:	440a      	add	r2, r1
 8011d0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011d10:	9214      	str	r2, [sp, #80]	; 0x50
 8011d12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d14:	440a      	add	r2, r1
 8011d16:	9216      	str	r2, [sp, #88]	; 0x58
 8011d18:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	f6ff ae53 	blt.w	80119c6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1d6>
 8011d20:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8011d22:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8011d24:	9940      	ldr	r1, [sp, #256]	; 0x100
 8011d26:	4413      	add	r3, r2
 8011d28:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011d2a:	440a      	add	r2, r1
 8011d2c:	9225      	str	r2, [sp, #148]	; 0x94
 8011d2e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011d30:	18d3      	adds	r3, r2, r3
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f040 813d 	bne.w	8011fb6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7c6>
 8011d3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011d3e:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8011d40:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8011d42:	440a      	add	r2, r1
 8011d44:	3301      	adds	r3, #1
 8011d46:	922c      	str	r2, [sp, #176]	; 0xb0
 8011d48:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011d4a:	9333      	str	r3, [sp, #204]	; 0xcc
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	f47f ae26 	bne.w	801199e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1ae>
 8011d52:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8011d54:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011d56:	4413      	add	r3, r2
 8011d58:	932f      	str	r3, [sp, #188]	; 0xbc
 8011d5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011d5c:	3302      	adds	r3, #2
 8011d5e:	9328      	str	r3, [sp, #160]	; 0xa0
 8011d60:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8011d62:	b11b      	cbz	r3, 8011d6c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57c>
 8011d64:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8011d66:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8011d68:	4413      	add	r3, r2
 8011d6a:	935d      	str	r3, [sp, #372]	; 0x174
 8011d6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011d6e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011d70:	3304      	adds	r3, #4
 8011d72:	9329      	str	r3, [sp, #164]	; 0xa4
 8011d74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d76:	3308      	adds	r3, #8
 8011d78:	9326      	str	r3, [sp, #152]	; 0x98
 8011d7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011d7c:	3308      	adds	r3, #8
 8011d7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8011d80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011d82:	3308      	adds	r3, #8
 8011d84:	9330      	str	r3, [sp, #192]	; 0xc0
 8011d86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	f47f adb4 	bne.w	80118f6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x106>
 8011d8e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8011d90:	e9dd 2136 	ldrd	r2, r1, [sp, #216]	; 0xd8
 8011d94:	fb01 3302 	mla	r3, r1, r2, r3
 8011d98:	9331      	str	r3, [sp, #196]	; 0xc4
 8011d9a:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011d9c:	07db      	lsls	r3, r3, #31
 8011d9e:	f140 8092 	bpl.w	8011ec6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011da2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	f000 808e 	beq.w	8011ec6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011daa:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011dac:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8011db0:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011db2:	4499      	add	r9, r3
 8011db4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011db6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011dba:	9307      	str	r3, [sp, #28]
 8011dbc:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8011dbe:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 8011dc2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8011dc4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8011dc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011dcc:	4413      	add	r3, r2
 8011dce:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011dd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011dd4:	9308      	str	r3, [sp, #32]
 8011dd6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d074      	beq.n	8011ec6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011ddc:	9953      	ldr	r1, [sp, #332]	; 0x14c
 8011dde:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8011de0:	9e5b      	ldr	r6, [sp, #364]	; 0x16c
 8011de2:	fb01 f202 	mul.w	r2, r1, r2
 8011de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8011dea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011dec:	fb01 f202 	mul.w	r2, r1, r2
 8011df0:	9906      	ldr	r1, [sp, #24]
 8011df2:	9209      	str	r2, [sp, #36]	; 0x24
 8011df4:	468e      	mov	lr, r1
 8011df6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011df8:	440a      	add	r2, r1
 8011dfa:	4693      	mov	fp, r2
 8011dfc:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011dfe:	fb02 f303 	mul.w	r3, r2, r3
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	2300      	movs	r3, #0
 8011e06:	9303      	str	r3, [sp, #12]
 8011e08:	2300      	movs	r3, #0
 8011e0a:	f8cd b008 	str.w	fp, [sp, #8]
 8011e0e:	f8cd b018 	str.w	fp, [sp, #24]
 8011e12:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8011e16:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011e1a:	9304      	str	r3, [sp, #16]
 8011e1c:	9b07      	ldr	r3, [sp, #28]
 8011e1e:	6819      	ldr	r1, [r3, #0]
 8011e20:	f1bb 0f00 	cmp.w	fp, #0
 8011e24:	d01e      	beq.n	8011e64 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x674>
 8011e26:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8011e2a:	2700      	movs	r7, #0
 8011e2c:	9d02      	ldr	r5, [sp, #8]
 8011e2e:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 8011e32:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8011e36:	f1be 0f00 	cmp.w	lr, #0
 8011e3a:	eba5 020e 	sub.w	r2, r5, lr
 8011e3e:	dd0b      	ble.n	8011e58 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 8011e40:	f10c 30ff 	add.w	r0, ip, #4294967295
 8011e44:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8011e48:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8011e4c:	1b9b      	subs	r3, r3, r6
 8011e4e:	42aa      	cmp	r2, r5
 8011e50:	fb04 1103 	mla	r1, r4, r3, r1
 8011e54:	d1f6      	bne.n	8011e44 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x654>
 8011e56:	44f4      	add	ip, lr
 8011e58:	3701      	adds	r7, #1
 8011e5a:	4445      	add	r5, r8
 8011e5c:	45bb      	cmp	fp, r7
 8011e5e:	d1ea      	bne.n	8011e36 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x646>
 8011e60:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8011e64:	9b08      	ldr	r3, [sp, #32]
 8011e66:	f9b3 0000 	ldrsh.w	r0, [r3]
 8011e6a:	2815      	cmp	r0, #21
 8011e6c:	f340 828f 	ble.w	801238e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb9e>
 8011e70:	1e83      	subs	r3, r0, #2
 8011e72:	1e42      	subs	r2, r0, #1
 8011e74:	2001      	movs	r0, #1
 8011e76:	4098      	lsls	r0, r3
 8011e78:	f8da 3000 	ldr.w	r3, [sl]
 8011e7c:	fb51 0303 	smmla	r3, r1, r3, r0
 8011e80:	fa43 f202 	asr.w	r2, r3, r2
 8011e84:	f8d9 3000 	ldr.w	r3, [r9]
 8011e88:	4413      	add	r3, r2
 8011e8a:	f303 0307 	ssat	r3, #8, r3
 8011e8e:	f888 3000 	strb.w	r3, [r8]
 8011e92:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e96:	4490      	add	r8, r2
 8011e98:	9a02      	ldr	r2, [sp, #8]
 8011e9a:	9b04      	ldr	r3, [sp, #16]
 8011e9c:	440a      	add	r2, r1
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	9202      	str	r2, [sp, #8]
 8011ea2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8011ea4:	9304      	str	r3, [sp, #16]
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	d1b8      	bne.n	8011e1c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 8011eaa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011eac:	9905      	ldr	r1, [sp, #20]
 8011eae:	9b03      	ldr	r3, [sp, #12]
 8011eb0:	440a      	add	r2, r1
 8011eb2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	9228      	str	r2, [sp, #160]	; 0xa0
 8011eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ebc:	9303      	str	r3, [sp, #12]
 8011ebe:	4493      	add	fp, r2
 8011ec0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d1a0      	bne.n	8011e08 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x618>
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	b047      	add	sp, #284	; 0x11c
 8011eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ece:	46b9      	mov	r9, r7
 8011ed0:	e679      	b.n	8011bc6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3d6>
 8011ed2:	f04f 0a00 	mov.w	sl, #0
 8011ed6:	e630      	b.n	8011b3a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x34a>
 8011ed8:	3301      	adds	r3, #1
 8011eda:	d034      	beq.n	8011f46 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x756>
 8011edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ede:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011ee0:	fb5c 2803 	smmla	r8, ip, r3, r2
 8011ee4:	fb55 2403 	smmla	r4, r5, r3, r2
 8011ee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011eea:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011eec:	3b01      	subs	r3, #1
 8011eee:	fa48 f203 	asr.w	r2, r8, r3
 8011ef2:	440a      	add	r2, r1
 8011ef4:	f302 0207 	ssat	r2, #8, r2
 8011ef8:	fa44 f303 	asr.w	r3, r4, r3
 8011efc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011efe:	440b      	add	r3, r1
 8011f00:	7002      	strb	r2, [r0, #0]
 8011f02:	f303 0307 	ssat	r3, #8, r3
 8011f06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f08:	7013      	strb	r3, [r2, #0]
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	e6f7      	b.n	8011cfe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x50e>
 8011f0e:	3301      	adds	r3, #1
 8011f10:	d02e      	beq.n	8011f70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x780>
 8011f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f14:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011f16:	fb52 1203 	smmla	r2, r2, r3, r1
 8011f1a:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8011f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f20:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011f22:	3b01      	subs	r3, #1
 8011f24:	411a      	asrs	r2, r3
 8011f26:	440a      	add	r2, r1
 8011f28:	f302 0207 	ssat	r2, #8, r2
 8011f2c:	fa4b fb03 	asr.w	fp, fp, r3
 8011f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f32:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011f36:	eb0b 0301 	add.w	r3, fp, r1
 8011f3a:	f303 0307 	ssat	r3, #8, r3
 8011f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011f44:	e6c1      	b.n	8011cca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8011f46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011f48:	f1c3 0301 	rsb	r3, r3, #1
 8011f4c:	fa0c f203 	lsl.w	r2, ip, r3
 8011f50:	f302 021f 	ssat	r2, #32, r2
 8011f54:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011f56:	fb52 f211 	smmulr	r2, r2, r1
 8011f5a:	fa05 f303 	lsl.w	r3, r5, r3
 8011f5e:	f303 031f 	ssat	r3, #32, r3
 8011f62:	fb53 f311 	smmulr	r3, r3, r1
 8011f66:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011f68:	440a      	add	r2, r1
 8011f6a:	f302 0207 	ssat	r2, #8, r2
 8011f6e:	e7c5      	b.n	8011efc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70c>
 8011f70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f72:	f1c3 0301 	rsb	r3, r3, #1
 8011f76:	409a      	lsls	r2, r3
 8011f78:	f302 021f 	ssat	r2, #32, r2
 8011f7c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011f7e:	fb52 f211 	smmulr	r2, r2, r1
 8011f82:	fa0b f303 	lsl.w	r3, fp, r3
 8011f86:	f303 031f 	ssat	r3, #32, r3
 8011f8a:	fb53 f311 	smmulr	r3, r3, r1
 8011f8e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011f90:	440a      	add	r2, r1
 8011f92:	f302 0207 	ssat	r2, #8, r2
 8011f96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011f98:	440b      	add	r3, r1
 8011f9a:	f800 2c01 	strb.w	r2, [r0, #-1]
 8011f9e:	f303 0307 	ssat	r3, #8, r3
 8011fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fa4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011fa8:	e68f      	b.n	8011cca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8011faa:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8011fae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011fb0:	4665      	mov	r5, ip
 8011fb2:	4693      	mov	fp, r2
 8011fb4:	e66e      	b.n	8011c94 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a4>
 8011fb6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	f000 8143 	beq.w	8012244 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa54>
 8011fbe:	9b04      	ldr	r3, [sp, #16]
 8011fc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011fc2:	4413      	add	r3, r2
 8011fc4:	9304      	str	r3, [sp, #16]
 8011fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	f000 8141 	beq.w	8012250 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa60>
 8011fce:	9b06      	ldr	r3, [sp, #24]
 8011fd0:	f8dd 9174 	ldr.w	r9, [sp, #372]	; 0x174
 8011fd4:	3b03      	subs	r3, #3
 8011fd6:	9308      	str	r3, [sp, #32]
 8011fd8:	9b04      	ldr	r3, [sp, #16]
 8011fda:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011fde:	9302      	str	r3, [sp, #8]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	9303      	str	r3, [sp, #12]
 8011fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fe6:	9a02      	ldr	r2, [sp, #8]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	4611      	mov	r1, r2
 8011fec:	f340 8100 	ble.w	80121f0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa00>
 8011ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ff2:	464b      	mov	r3, r9
 8011ff4:	188c      	adds	r4, r1, r2
 8011ff6:	6808      	ldr	r0, [r1, #0]
 8011ff8:	681d      	ldr	r5, [r3, #0]
 8011ffa:	fa2f f280 	sxtb16	r2, r0
 8011ffe:	fa2f f090 	sxtb16	r0, r0, ror #8
 8012002:	fb22 a505 	smlad	r5, r2, r5, sl
 8012006:	685e      	ldr	r6, [r3, #4]
 8012008:	fb20 5706 	smlad	r7, r0, r6, r5
 801200c:	689d      	ldr	r5, [r3, #8]
 801200e:	fb22 b205 	smlad	r2, r2, r5, fp
 8012012:	68dd      	ldr	r5, [r3, #12]
 8012014:	fb20 2005 	smlad	r0, r0, r5, r2
 8012018:	684a      	ldr	r2, [r1, #4]
 801201a:	691e      	ldr	r6, [r3, #16]
 801201c:	fa2f f582 	sxtb16	r5, r2
 8012020:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012024:	fb25 7606 	smlad	r6, r5, r6, r7
 8012028:	695f      	ldr	r7, [r3, #20]
 801202a:	fb22 6607 	smlad	r6, r2, r7, r6
 801202e:	699f      	ldr	r7, [r3, #24]
 8012030:	fb25 0007 	smlad	r0, r5, r7, r0
 8012034:	69dd      	ldr	r5, [r3, #28]
 8012036:	fb22 0205 	smlad	r2, r2, r5, r0
 801203a:	688f      	ldr	r7, [r1, #8]
 801203c:	6a1d      	ldr	r5, [r3, #32]
 801203e:	fa2f f087 	sxtb16	r0, r7
 8012042:	fa2f f797 	sxtb16	r7, r7, ror #8
 8012046:	fb20 6505 	smlad	r5, r0, r5, r6
 801204a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801204c:	fb27 5606 	smlad	r6, r7, r6, r5
 8012050:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8012054:	fb20 200b 	smlad	r0, r0, fp, r2
 8012058:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 801205c:	fb27 000b 	smlad	r0, r7, fp, r0
 8012060:	68ca      	ldr	r2, [r1, #12]
 8012062:	3340      	adds	r3, #64	; 0x40
 8012064:	fa2f fb82 	sxtb16	fp, r2
 8012068:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801206c:	3110      	adds	r1, #16
 801206e:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8012072:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8012076:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801207a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801207e:	fb2b 6505 	smlad	r5, fp, r5, r6
 8012082:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8012086:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 801208a:	fb22 bb07 	smlad	fp, r2, r7, fp
 801208e:	42a1      	cmp	r1, r4
 8012090:	d1b1      	bne.n	8011ff6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x806>
 8012092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012094:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8012098:	4499      	add	r9, r3
 801209a:	9b08      	ldr	r3, [sp, #32]
 801209c:	459e      	cmp	lr, r3
 801209e:	f280 80a5 	bge.w	80121ec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9fc>
 80120a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120a4:	4649      	mov	r1, r9
 80120a6:	eba3 080e 	sub.w	r8, r3, lr
 80120aa:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80120ae:	f108 0301 	add.w	r3, r8, #1
 80120b2:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80120b6:	9305      	str	r3, [sp, #20]
 80120b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80120bc:	3110      	adds	r1, #16
 80120be:	fa2f f283 	sxtb16	r2, r3
 80120c2:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80120c6:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80120ca:	f851 6c08 	ldr.w	r6, [r1, #-8]
 80120ce:	f851 5c04 	ldr.w	r5, [r1, #-4]
 80120d2:	fa2f f393 	sxtb16	r3, r3, ror #8
 80120d6:	fb22 a000 	smlad	r0, r2, r0, sl
 80120da:	fb23 0a07 	smlad	sl, r3, r7, r0
 80120de:	fb22 b206 	smlad	r2, r2, r6, fp
 80120e2:	fb23 2b05 	smlad	fp, r3, r5, r2
 80120e6:	4564      	cmp	r4, ip
 80120e8:	d1e6      	bne.n	80120b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c8>
 80120ea:	9b05      	ldr	r3, [sp, #20]
 80120ec:	f10e 0e04 	add.w	lr, lr, #4
 80120f0:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 80120f4:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 80120f8:	9906      	ldr	r1, [sp, #24]
 80120fa:	4571      	cmp	r1, lr
 80120fc:	dd38      	ble.n	8012170 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x980>
 80120fe:	f99c 3000 	ldrsb.w	r3, [ip]
 8012102:	f8b9 2000 	ldrh.w	r2, [r9]
 8012106:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801210a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801210e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012112:	f10e 0301 	add.w	r3, lr, #1
 8012116:	4299      	cmp	r1, r3
 8012118:	dd25      	ble.n	8012166 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 801211a:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 801211e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8012122:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012126:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801212a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801212e:	f10e 0302 	add.w	r3, lr, #2
 8012132:	4299      	cmp	r1, r3
 8012134:	dd17      	ble.n	8012166 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8012136:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 801213a:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 801213e:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012142:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8012146:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801214a:	f10e 0303 	add.w	r3, lr, #3
 801214e:	4299      	cmp	r1, r3
 8012150:	dd09      	ble.n	8012166 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8012152:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8012156:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 801215a:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801215e:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8012162:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012166:	9b06      	ldr	r3, [sp, #24]
 8012168:	eba3 0e0e 	sub.w	lr, r3, lr
 801216c:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8012170:	9a02      	ldr	r2, [sp, #8]
 8012172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012174:	9b03      	ldr	r3, [sp, #12]
 8012176:	440a      	add	r2, r1
 8012178:	3301      	adds	r3, #1
 801217a:	9202      	str	r2, [sp, #8]
 801217c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801217e:	9303      	str	r3, [sp, #12]
 8012180:	429a      	cmp	r2, r3
 8012182:	f47f af2f 	bne.w	8011fe4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f4>
 8012186:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012188:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801218c:	2915      	cmp	r1, #21
 801218e:	dd45      	ble.n	801221c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa2c>
 8012190:	1e8b      	subs	r3, r1, #2
 8012192:	2201      	movs	r2, #1
 8012194:	3901      	subs	r1, #1
 8012196:	409a      	lsls	r2, r3
 8012198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801219a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801219e:	fb5a 2303 	smmla	r3, sl, r3, r2
 80121a2:	fa43 f101 	asr.w	r1, r3, r1
 80121a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80121a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80121ac:	440b      	add	r3, r1
 80121ae:	f303 0307 	ssat	r3, #8, r3
 80121b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80121b4:	7013      	strb	r3, [r2, #0]
 80121b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80121b8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80121bc:	2915      	cmp	r1, #21
 80121be:	dd1b      	ble.n	80121f8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa08>
 80121c0:	1e8b      	subs	r3, r1, #2
 80121c2:	2201      	movs	r2, #1
 80121c4:	3901      	subs	r1, #1
 80121c6:	409a      	lsls	r2, r3
 80121c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	fb5b 2303 	smmla	r3, fp, r3, r2
 80121d0:	fa43 f101 	asr.w	r1, r3, r1
 80121d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	440b      	add	r3, r1
 80121da:	f303 0307 	ssat	r3, #8, r3
 80121de:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80121e0:	7053      	strb	r3, [r2, #1]
 80121e2:	4613      	mov	r3, r2
 80121e4:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80121e6:	4413      	add	r3, r2
 80121e8:	9325      	str	r3, [sp, #148]	; 0x94
 80121ea:	e5a7      	b.n	8011d3c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x54c>
 80121ec:	46a4      	mov	ip, r4
 80121ee:	e783      	b.n	80120f8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x908>
 80121f0:	4614      	mov	r4, r2
 80121f2:	f04f 0e00 	mov.w	lr, #0
 80121f6:	e750      	b.n	801209a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8aa>
 80121f8:	2900      	cmp	r1, #0
 80121fa:	dd2c      	ble.n	8012256 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa66>
 80121fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80121fe:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012202:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	6812      	ldr	r2, [r2, #0]
 8012208:	fb5b 2b03 	smmla	fp, fp, r3, r2
 801220c:	fa4b f301 	asr.w	r3, fp, r1
 8012210:	f303 0307 	ssat	r3, #8, r3
 8012214:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012216:	7053      	strb	r3, [r2, #1]
 8012218:	4613      	mov	r3, r2
 801221a:	e7e3      	b.n	80121e4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 801221c:	2900      	cmp	r1, #0
 801221e:	f340 809f 	ble.w	8012360 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb70>
 8012222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012224:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8012228:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801222a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801222e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012232:	fb5a 2a03 	smmla	sl, sl, r3, r2
 8012236:	fa4a f301 	asr.w	r3, sl, r1
 801223a:	f303 0307 	ssat	r3, #8, r3
 801223e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012240:	7013      	strb	r3, [r2, #0]
 8012242:	e7b8      	b.n	80121b6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8012244:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8012246:	9304      	str	r3, [sp, #16]
 8012248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801224a:	2b00      	cmp	r3, #0
 801224c:	f47f aebf 	bne.w	8011fce <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 8012250:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012254:	e797      	b.n	8012186 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 8012256:	f1c1 0101 	rsb	r1, r1, #1
 801225a:	fa0b f201 	lsl.w	r2, fp, r1
 801225e:	f302 021f 	ssat	r2, #32, r2
 8012262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	fb52 f213 	smmulr	r2, r2, r3
 801226a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4413      	add	r3, r2
 8012270:	f303 0307 	ssat	r3, #8, r3
 8012274:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012276:	7053      	strb	r3, [r2, #1]
 8012278:	4613      	mov	r3, r2
 801227a:	e7b3      	b.n	80121e4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 801227c:	2301      	movs	r3, #1
 801227e:	9319      	str	r3, [sp, #100]	; 0x64
 8012280:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8012282:	2b00      	cmp	r3, #0
 8012284:	f47f ab61 	bne.w	801194a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x15a>
 8012288:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801228a:	9b06      	ldr	r3, [sp, #24]
 801228c:	4601      	mov	r1, r0
 801228e:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8012294:	4421      	add	r1, r4
 8012296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012298:	f7fe fb66 	bl	8010968 <weights_2channels_prefetch>
 801229c:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f43f ab57 	beq.w	8011952 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x162>
 80122a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d06e      	beq.n	8012388 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb98>
 80122aa:	2300      	movs	r3, #0
 80122ac:	985d      	ldr	r0, [sp, #372]	; 0x174
 80122ae:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80122b0:	461c      	mov	r4, r3
 80122b2:	461e      	mov	r6, r3
 80122b4:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 80122b6:	b33f      	cbz	r7, 8012308 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb18>
 80122b8:	f100 0510 	add.w	r5, r0, #16
 80122bc:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 80122c0:	3f01      	subs	r7, #1
 80122c2:	f105 0510 	add.w	r5, r5, #16
 80122c6:	eba4 0402 	sub.w	r4, r4, r2
 80122ca:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 80122ce:	eba3 0302 	sub.w	r3, r3, r2
 80122d2:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 80122d6:	eba4 0402 	sub.w	r4, r4, r2
 80122da:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 80122de:	eba3 0302 	sub.w	r3, r3, r2
 80122e2:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 80122e6:	eba4 0402 	sub.w	r4, r4, r2
 80122ea:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 80122ee:	eba3 0302 	sub.w	r3, r3, r2
 80122f2:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 80122f6:	eba4 0402 	sub.w	r4, r4, r2
 80122fa:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 80122fe:	eba3 0302 	sub.w	r3, r3, r2
 8012302:	d1db      	bne.n	80122bc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 8012304:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8012306:	4410      	add	r0, r2
 8012308:	b1d9      	cbz	r1, 8012342 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb52>
 801230a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801230e:	2901      	cmp	r1, #1
 8012310:	eba4 0402 	sub.w	r4, r4, r2
 8012314:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012318:	eba3 0302 	sub.w	r3, r3, r2
 801231c:	d00f      	beq.n	801233e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 801231e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012322:	2902      	cmp	r1, #2
 8012324:	eba4 0402 	sub.w	r4, r4, r2
 8012328:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801232c:	eba3 0302 	sub.w	r3, r3, r2
 8012330:	d005      	beq.n	801233e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8012332:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8012336:	1aa4      	subs	r4, r4, r2
 8012338:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801233c:	1a9b      	subs	r3, r3, r2
 801233e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8012340:	4410      	add	r0, r2
 8012342:	3601      	adds	r6, #1
 8012344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012346:	42b2      	cmp	r2, r6
 8012348:	d1b4      	bne.n	80122b4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac4>
 801234a:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 801234c:	fb02 f404 	mul.w	r4, r2, r4
 8012350:	fb02 f303 	mul.w	r3, r2, r3
 8012354:	f7ff bafe 	b.w	8011954 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8012358:	2301      	movs	r3, #1
 801235a:	9318      	str	r3, [sp, #96]	; 0x60
 801235c:	f7ff bae7 	b.w	801192e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x13e>
 8012360:	f1c1 0101 	rsb	r1, r1, #1
 8012364:	fa0a f201 	lsl.w	r2, sl, r1
 8012368:	f302 021f 	ssat	r2, #32, r2
 801236c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801236e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012372:	fb52 f213 	smmulr	r2, r2, r3
 8012376:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012378:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801237c:	4413      	add	r3, r2
 801237e:	f303 0307 	ssat	r3, #8, r3
 8012382:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012384:	7013      	strb	r3, [r2, #0]
 8012386:	e716      	b.n	80121b6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8012388:	461c      	mov	r4, r3
 801238a:	f7ff bae3 	b.w	8011954 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 801238e:	2800      	cmp	r0, #0
 8012390:	dd0c      	ble.n	80123ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbbc>
 8012392:	0049      	lsls	r1, r1, #1
 8012394:	f8da 3000 	ldr.w	r3, [sl]
 8012398:	f8d9 2000 	ldr.w	r2, [r9]
 801239c:	fb51 2303 	smmla	r3, r1, r3, r2
 80123a0:	4103      	asrs	r3, r0
 80123a2:	f303 0307 	ssat	r3, #8, r3
 80123a6:	f888 3000 	strb.w	r3, [r8]
 80123aa:	e572      	b.n	8011e92 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>
 80123ac:	f1c0 0201 	rsb	r2, r0, #1
 80123b0:	fa01 f202 	lsl.w	r2, r1, r2
 80123b4:	f302 021f 	ssat	r2, #32, r2
 80123b8:	f8da 3000 	ldr.w	r3, [sl]
 80123bc:	fb52 f213 	smmulr	r2, r2, r3
 80123c0:	f8d9 3000 	ldr.w	r3, [r9]
 80123c4:	4413      	add	r3, r2
 80123c6:	f303 0307 	ssat	r3, #8, r3
 80123ca:	f888 3000 	strb.w	r3, [r8]
 80123ce:	e560      	b.n	8011e92 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>

080123d0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>:
 80123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	b0cd      	sub	sp, #308	; 0x134
 80123d6:	469c      	mov	ip, r3
 80123d8:	4688      	mov	r8, r1
 80123da:	4696      	mov	lr, r2
 80123dc:	931d      	str	r3, [sp, #116]	; 0x74
 80123de:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 80123e2:	f8bd 5188 	ldrh.w	r5, [sp, #392]	; 0x188
 80123e6:	9021      	str	r0, [sp, #132]	; 0x84
 80123e8:	9325      	str	r3, [sp, #148]	; 0x94
 80123ea:	f8bd 0184 	ldrh.w	r0, [sp, #388]	; 0x184
 80123ee:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80123f0:	912f      	str	r1, [sp, #188]	; 0xbc
 80123f2:	900a      	str	r0, [sp, #40]	; 0x28
 80123f4:	fb03 f100 	mul.w	r1, r3, r0
 80123f8:	f8bd 7168 	ldrh.w	r7, [sp, #360]	; 0x168
 80123fc:	fb05 f000 	mul.w	r0, r5, r0
 8012400:	9249      	str	r2, [sp, #292]	; 0x124
 8012402:	ee07 0a90 	vmov	s15, r0
 8012406:	9858      	ldr	r0, [sp, #352]	; 0x160
 8012408:	f8bd 216c 	ldrh.w	r2, [sp, #364]	; 0x16c
 801240c:	9516      	str	r5, [sp, #88]	; 0x58
 801240e:	974a      	str	r7, [sp, #296]	; 0x128
 8012410:	9239      	str	r2, [sp, #228]	; 0xe4
 8012412:	e9dd 4665 	ldrd	r4, r6, [sp, #404]	; 0x194
 8012416:	2e00      	cmp	r6, #0
 8012418:	bf18      	it	ne
 801241a:	4634      	movne	r4, r6
 801241c:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 8012420:	2801      	cmp	r0, #1
 8012422:	9465      	str	r4, [sp, #404]	; 0x194
 8012424:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 8012428:	963b      	str	r6, [sp, #236]	; 0xec
 801242a:	943a      	str	r4, [sp, #232]	; 0xe8
 801242c:	f8bd 6180 	ldrh.w	r6, [sp, #384]	; 0x180
 8012430:	f8bd 4178 	ldrh.w	r4, [sp, #376]	; 0x178
 8012434:	964b      	str	r6, [sp, #300]	; 0x12c
 8012436:	9430      	str	r4, [sp, #192]	; 0xc0
 8012438:	f340 82c7 	ble.w	80129ca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5fa>
 801243c:	1e83      	subs	r3, r0, #2
 801243e:	fb01 f505 	mul.w	r5, r1, r5
 8012442:	1ea2      	subs	r2, r4, #2
 8012444:	085b      	lsrs	r3, r3, #1
 8012446:	9531      	str	r5, [sp, #196]	; 0xc4
 8012448:	9d58      	ldr	r5, [sp, #352]	; 0x160
 801244a:	0852      	lsrs	r2, r2, #1
 801244c:	1c58      	adds	r0, r3, #1
 801244e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012450:	9038      	str	r0, [sp, #224]	; 0xe0
 8012452:	3b10      	subs	r3, #16
 8012454:	9859      	ldr	r0, [sp, #356]	; 0x164
 8012456:	9347      	str	r3, [sp, #284]	; 0x11c
 8012458:	091b      	lsrs	r3, r3, #4
 801245a:	fb00 f007 	mul.w	r0, r0, r7
 801245e:	108f      	asrs	r7, r1, #2
 8012460:	f001 0103 	and.w	r1, r1, #3
 8012464:	3301      	adds	r3, #1
 8012466:	9008      	str	r0, [sp, #32]
 8012468:	9134      	str	r1, [sp, #208]	; 0xd0
 801246a:	0069      	lsls	r1, r5, #1
 801246c:	9741      	str	r7, [sp, #260]	; 0x104
 801246e:	460d      	mov	r5, r1
 8012470:	9146      	str	r1, [sp, #280]	; 0x118
 8012472:	fb02 f100 	mul.w	r1, r2, r0
 8012476:	fb02 5505 	mla	r5, r2, r5, r5
 801247a:	9545      	str	r5, [sp, #276]	; 0x114
 801247c:	004d      	lsls	r5, r1, #1
 801247e:	9544      	str	r5, [sp, #272]	; 0x110
 8012480:	f06f 0503 	mvn.w	r5, #3
 8012484:	1a2d      	subs	r5, r5, r0
 8012486:	9513      	str	r5, [sp, #76]	; 0x4c
 8012488:	1f05      	subs	r5, r0, #4
 801248a:	9510      	str	r5, [sp, #64]	; 0x40
 801248c:	1e65      	subs	r5, r4, #1
 801248e:	9535      	str	r5, [sp, #212]	; 0xd4
 8012490:	9d59      	ldr	r5, [sp, #356]	; 0x164
 8012492:	3d0f      	subs	r5, #15
 8012494:	950c      	str	r5, [sp, #48]	; 0x30
 8012496:	f004 0501 	and.w	r5, r4, #1
 801249a:	953e      	str	r5, [sp, #248]	; 0xf8
 801249c:	0045      	lsls	r5, r0, #1
 801249e:	9537      	str	r5, [sp, #220]	; 0xdc
 80124a0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 80124a2:	0068      	lsls	r0, r5, #1
 80124a4:	00ad      	lsls	r5, r5, #2
 80124a6:	9036      	str	r0, [sp, #216]	; 0xd8
 80124a8:	953f      	str	r5, [sp, #252]	; 0xfc
 80124aa:	9d57      	ldr	r5, [sp, #348]	; 0x15c
 80124ac:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80124ae:	3502      	adds	r5, #2
 80124b0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80124b4:	9520      	str	r5, [sp, #128]	; 0x80
 80124b6:	9d56      	ldr	r5, [sp, #344]	; 0x158
 80124b8:	9048      	str	r0, [sp, #288]	; 0x120
 80124ba:	0138      	lsls	r0, r7, #4
 80124bc:	3504      	adds	r5, #4
 80124be:	9042      	str	r0, [sp, #264]	; 0x108
 80124c0:	9519      	str	r5, [sp, #100]	; 0x64
 80124c2:	9d64      	ldr	r5, [sp, #400]	; 0x190
 80124c4:	3504      	adds	r5, #4
 80124c6:	951a      	str	r5, [sp, #104]	; 0x68
 80124c8:	4675      	mov	r5, lr
 80124ca:	3504      	adds	r5, #4
 80124cc:	952e      	str	r5, [sp, #184]	; 0xb8
 80124ce:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80124d0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80124d2:	0088      	lsls	r0, r1, #2
 80124d4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80124d6:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80124da:	9043      	str	r0, [sp, #268]	; 0x10c
 80124dc:	fb06 f002 	mul.w	r0, r6, r2
 80124e0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80124e2:	fb06 f202 	mul.w	r2, r6, r2
 80124e6:	9040      	str	r0, [sp, #256]	; 0x100
 80124e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80124ea:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80124ec:	fb02 f204 	mul.w	r2, r2, r4
 80124f0:	920d      	str	r2, [sp, #52]	; 0x34
 80124f2:	011a      	lsls	r2, r3, #4
 80124f4:	019b      	lsls	r3, r3, #6
 80124f6:	920e      	str	r2, [sp, #56]	; 0x38
 80124f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80124fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80124fc:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012500:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012504:	2b15      	cmp	r3, #21
 8012506:	9324      	str	r3, [sp, #144]	; 0x90
 8012508:	921f      	str	r2, [sp, #124]	; 0x7c
 801250a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801250c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012510:	6812      	ldr	r2, [r2, #0]
 8012512:	9129      	str	r1, [sp, #164]	; 0xa4
 8012514:	922a      	str	r2, [sp, #168]	; 0xa8
 8012516:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012518:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801251c:	6812      	ldr	r2, [r2, #0]
 801251e:	912b      	str	r1, [sp, #172]	; 0xac
 8012520:	922c      	str	r2, [sp, #176]	; 0xb0
 8012522:	f300 8549 	bgt.w	8012fb8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe8>
 8012526:	2b00      	cmp	r3, #0
 8012528:	bfcc      	ite	gt
 801252a:	2300      	movgt	r3, #0
 801252c:	2301      	movle	r3, #1
 801252e:	425b      	negs	r3, r3
 8012530:	9327      	str	r3, [sp, #156]	; 0x9c
 8012532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012534:	2b15      	cmp	r3, #21
 8012536:	f300 853b 	bgt.w	8012fb0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe0>
 801253a:	2b00      	cmp	r3, #0
 801253c:	bfcc      	ite	gt
 801253e:	2300      	movgt	r3, #0
 8012540:	2301      	movle	r3, #1
 8012542:	425b      	negs	r3, r3
 8012544:	9328      	str	r3, [sp, #160]	; 0xa0
 8012546:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012548:	2b00      	cmp	r3, #0
 801254a:	f000 84c7 	beq.w	8012edc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb0c>
 801254e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8012550:	2b00      	cmp	r3, #0
 8012552:	f040 84d2 	bne.w	8012efa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb2a>
 8012556:	461c      	mov	r4, r3
 8012558:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801255a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801255e:	18a2      	adds	r2, r4, r2
 8012560:	9222      	str	r2, [sp, #136]	; 0x88
 8012562:	680a      	ldr	r2, [r1, #0]
 8012564:	4413      	add	r3, r2
 8012566:	9323      	str	r3, [sp, #140]	; 0x8c
 8012568:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801256a:	2b00      	cmp	r3, #0
 801256c:	f000 8209 	beq.w	8012982 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5b2>
 8012570:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012572:	2301      	movs	r3, #1
 8012574:	3a02      	subs	r2, #2
 8012576:	fa03 f202 	lsl.w	r2, r3, r2
 801257a:	923c      	str	r2, [sp, #240]	; 0xf0
 801257c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801257e:	3a02      	subs	r2, #2
 8012580:	4093      	lsls	r3, r2
 8012582:	2200      	movs	r2, #0
 8012584:	933d      	str	r3, [sp, #244]	; 0xf4
 8012586:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012588:	921e      	str	r2, [sp, #120]	; 0x78
 801258a:	f023 030f 	bic.w	r3, r3, #15
 801258e:	9232      	str	r2, [sp, #200]	; 0xc8
 8012590:	3314      	adds	r3, #20
 8012592:	9312      	str	r3, [sp, #72]	; 0x48
 8012594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012596:	9305      	str	r3, [sp, #20]
 8012598:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801259a:	9318      	str	r3, [sp, #96]	; 0x60
 801259c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f340 81e0 	ble.w	8012964 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x594>
 80125a4:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80125a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125a8:	3301      	adds	r3, #1
 80125aa:	18d3      	adds	r3, r2, r3
 80125ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80125ae:	1c53      	adds	r3, r2, #1
 80125b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80125b2:	931c      	str	r3, [sp, #112]	; 0x70
 80125b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125b6:	4413      	add	r3, r2
 80125b8:	9326      	str	r3, [sp, #152]	; 0x98
 80125ba:	2300      	movs	r3, #0
 80125bc:	9333      	str	r3, [sp, #204]	; 0xcc
 80125be:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80125c0:	3b04      	subs	r3, #4
 80125c2:	9311      	str	r3, [sp, #68]	; 0x44
 80125c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f000 8312 	beq.w	8012bf0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x820>
 80125cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80125ce:	9a08      	ldr	r2, [sp, #32]
 80125d0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80125d2:	4413      	add	r3, r2
 80125d4:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80125d8:	462c      	mov	r4, r5
 80125da:	462f      	mov	r7, r5
 80125dc:	9314      	str	r3, [sp, #80]	; 0x50
 80125de:	4675      	mov	r5, lr
 80125e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80125e2:	46a1      	mov	r9, r4
 80125e4:	9304      	str	r3, [sp, #16]
 80125e6:	2300      	movs	r3, #0
 80125e8:	9315      	str	r3, [sp, #84]	; 0x54
 80125ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 815c 	beq.w	80128aa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4da>
 80125f2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80125f4:	3b03      	subs	r3, #3
 80125f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80125f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125fa:	9305      	str	r3, [sp, #20]
 80125fc:	2300      	movs	r3, #0
 80125fe:	9306      	str	r3, [sp, #24]
 8012600:	9a08      	ldr	r2, [sp, #32]
 8012602:	9b05      	ldr	r3, [sp, #20]
 8012604:	1a9e      	subs	r6, r3, r2
 8012606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012608:	2a00      	cmp	r2, #0
 801260a:	f340 828e 	ble.w	8012b2a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x75a>
 801260e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012610:	1d18      	adds	r0, r3, #4
 8012612:	9904      	ldr	r1, [sp, #16]
 8012614:	18d3      	adds	r3, r2, r3
 8012616:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801261a:	9607      	str	r6, [sp, #28]
 801261c:	9303      	str	r3, [sp, #12]
 801261e:	f85b 4000 	ldr.w	r4, [fp, r0]
 8012622:	eb0b 0600 	add.w	r6, fp, r0
 8012626:	fa2f f284 	sxtb16	r2, r4
 801262a:	680b      	ldr	r3, [r1, #0]
 801262c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8012630:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8012634:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8012638:	fa2f f494 	sxtb16	r4, r4, ror #8
 801263c:	fb22 ee03 	smlad	lr, r2, r3, lr
 8012640:	fb24 ee08 	smlad	lr, r4, r8, lr
 8012644:	fb22 720a 	smlad	r2, r2, sl, r7
 8012648:	fb24 220c 	smlad	r2, r4, ip, r2
 801264c:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8012650:	fa2f f784 	sxtb16	r7, r4
 8012654:	fa2f f494 	sxtb16	r4, r4, ror #8
 8012658:	fb27 5303 	smlad	r3, r7, r3, r5
 801265c:	fb27 990a 	smlad	r9, r7, sl, r9
 8012660:	fb24 3308 	smlad	r3, r4, r8, r3
 8012664:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8012668:	694f      	ldr	r7, [r1, #20]
 801266a:	fb24 9c0c 	smlad	ip, r4, ip, r9
 801266e:	6875      	ldr	r5, [r6, #4]
 8012670:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8012674:	fa2f f485 	sxtb16	r4, r5
 8012678:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801267c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8012680:	fb24 ee08 	smlad	lr, r4, r8, lr
 8012684:	fb25 ee07 	smlad	lr, r5, r7, lr
 8012688:	fb24 240a 	smlad	r4, r4, sl, r2
 801268c:	fb25 4409 	smlad	r4, r5, r9, r4
 8012690:	6802      	ldr	r2, [r0, #0]
 8012692:	fa2f f582 	sxtb16	r5, r2
 8012696:	fa2f f292 	sxtb16	r2, r2, ror #8
 801269a:	fb25 3808 	smlad	r8, r5, r8, r3
 801269e:	fb25 cc0a 	smlad	ip, r5, sl, ip
 80126a2:	fb22 8707 	smlad	r7, r2, r7, r8
 80126a6:	6a0b      	ldr	r3, [r1, #32]
 80126a8:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
 80126ac:	fb22 c909 	smlad	r9, r2, r9, ip
 80126b0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80126b4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80126b6:	fa2f f58c 	sxtb16	r5, ip
 80126ba:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 80126be:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80126c2:	fb25 ee03 	smlad	lr, r5, r3, lr
 80126c6:	fb2c ee08 	smlad	lr, ip, r8, lr
 80126ca:	fb25 4502 	smlad	r5, r5, r2, r4
 80126ce:	fb2c 5c0a 	smlad	ip, ip, sl, r5
 80126d2:	6844      	ldr	r4, [r0, #4]
 80126d4:	fa2f f584 	sxtb16	r5, r4
 80126d8:	fa2f f494 	sxtb16	r4, r4, ror #8
 80126dc:	fb25 7703 	smlad	r7, r5, r3, r7
 80126e0:	fb25 9902 	smlad	r9, r5, r2, r9
 80126e4:	fb24 7808 	smlad	r8, r4, r8, r7
 80126e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80126ea:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80126ec:	fb24 9a0a 	smlad	sl, r4, sl, r9
 80126f0:	68f7      	ldr	r7, [r6, #12]
 80126f2:	3140      	adds	r1, #64	; 0x40
 80126f4:	fa2f f487 	sxtb16	r4, r7
 80126f8:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80126fc:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8012700:	fa2f f797 	sxtb16	r7, r7, ror #8
 8012704:	fb24 ee03 	smlad	lr, r4, r3, lr
 8012708:	fb27 ee05 	smlad	lr, r7, r5, lr
 801270c:	fb24 cc02 	smlad	ip, r4, r2, ip
 8012710:	fb27 c706 	smlad	r7, r7, r6, ip
 8012714:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012718:	fa2f f489 	sxtb16	r4, r9
 801271c:	fa2f f999 	sxtb16	r9, r9, ror #8
 8012720:	fb24 8803 	smlad	r8, r4, r3, r8
 8012724:	fb24 aa02 	smlad	sl, r4, r2, sl
 8012728:	fb29 8505 	smlad	r5, r9, r5, r8
 801272c:	fb29 a906 	smlad	r9, r9, r6, sl
 8012730:	3010      	adds	r0, #16
 8012732:	9b03      	ldr	r3, [sp, #12]
 8012734:	4283      	cmp	r3, r0
 8012736:	f47f af72 	bne.w	801261e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x24e>
 801273a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801273c:	9a04      	ldr	r2, [sp, #16]
 801273e:	9e07      	ldr	r6, [sp, #28]
 8012740:	469b      	mov	fp, r3
 8012742:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012744:	441e      	add	r6, r3
 8012746:	440a      	add	r2, r1
 8012748:	9204      	str	r2, [sp, #16]
 801274a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801274c:	459b      	cmp	fp, r3
 801274e:	f280 81ea 	bge.w	8012b26 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x756>
 8012752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012754:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012758:	eba3 030b 	sub.w	r3, r3, fp
 801275c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8012760:	089b      	lsrs	r3, r3, #2
 8012762:	461a      	mov	r2, r3
 8012764:	9307      	str	r3, [sp, #28]
 8012766:	9b04      	ldr	r3, [sp, #16]
 8012768:	3201      	adds	r2, #1
 801276a:	eb06 0a82 	add.w	sl, r6, r2, lsl #2
 801276e:	9203      	str	r2, [sp, #12]
 8012770:	f856 2b04 	ldr.w	r2, [r6], #4
 8012774:	3310      	adds	r3, #16
 8012776:	fa2f f182 	sxtb16	r1, r2
 801277a:	f853 8c10 	ldr.w	r8, [r3, #-16]
 801277e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8012782:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8012786:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801278a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801278e:	fb21 ee08 	smlad	lr, r1, r8, lr
 8012792:	fb22 ee04 	smlad	lr, r2, r4, lr
 8012796:	fb21 770c 	smlad	r7, r1, ip, r7
 801279a:	fb22 7700 	smlad	r7, r2, r0, r7
 801279e:	f856 200b 	ldr.w	r2, [r6, fp]
 80127a2:	fa2f f182 	sxtb16	r1, r2
 80127a6:	fa2f f292 	sxtb16	r2, r2, ror #8
 80127aa:	fb21 5508 	smlad	r5, r1, r8, r5
 80127ae:	fb21 990c 	smlad	r9, r1, ip, r9
 80127b2:	fb22 5504 	smlad	r5, r2, r4, r5
 80127b6:	fb22 9900 	smlad	r9, r2, r0, r9
 80127ba:	45b2      	cmp	sl, r6
 80127bc:	d1d8      	bne.n	8012770 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x3a0>
 80127be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80127c2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80127c6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80127ca:	9a07      	ldr	r2, [sp, #28]
 80127cc:	9304      	str	r3, [sp, #16]
 80127ce:	f10b 0304 	add.w	r3, fp, #4
 80127d2:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 80127d6:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80127d8:	455b      	cmp	r3, fp
 80127da:	dd5b      	ble.n	8012894 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4c4>
 80127dc:	9804      	ldr	r0, [sp, #16]
 80127de:	f99a 3000 	ldrsb.w	r3, [sl]
 80127e2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80127e6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80127ea:	9c08      	ldr	r4, [sp, #32]
 80127ec:	fb12 7703 	smlabb	r7, r2, r3, r7
 80127f0:	fb11 ee03 	smlabb	lr, r1, r3, lr
 80127f4:	f91a 3004 	ldrsb.w	r3, [sl, r4]
 80127f8:	fb12 9903 	smlabb	r9, r2, r3, r9
 80127fc:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80127fe:	fb11 5503 	smlabb	r5, r1, r3, r5
 8012802:	f10b 0301 	add.w	r3, fp, #1
 8012806:	4293      	cmp	r3, r2
 8012808:	da3d      	bge.n	8012886 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 801280a:	eb0a 0304 	add.w	r3, sl, r4
 801280e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012812:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012816:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801281a:	fb11 5503 	smlabb	r5, r1, r3, r5
 801281e:	fb12 9903 	smlabb	r9, r2, r3, r9
 8012822:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 8012826:	fb11 ee03 	smlabb	lr, r1, r3, lr
 801282a:	9959      	ldr	r1, [sp, #356]	; 0x164
 801282c:	fb12 7703 	smlabb	r7, r2, r3, r7
 8012830:	f10b 0302 	add.w	r3, fp, #2
 8012834:	f10a 0202 	add.w	r2, sl, #2
 8012838:	428b      	cmp	r3, r1
 801283a:	da24      	bge.n	8012886 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 801283c:	5713      	ldrsb	r3, [r2, r4]
 801283e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012842:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012846:	fb11 5503 	smlabb	r5, r1, r3, r5
 801284a:	fb12 9903 	smlabb	r9, r2, r3, r9
 801284e:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8012852:	fb11 ee03 	smlabb	lr, r1, r3, lr
 8012856:	9959      	ldr	r1, [sp, #356]	; 0x164
 8012858:	fb12 7703 	smlabb	r7, r2, r3, r7
 801285c:	f10b 0303 	add.w	r3, fp, #3
 8012860:	f10a 0203 	add.w	r2, sl, #3
 8012864:	428b      	cmp	r3, r1
 8012866:	da0e      	bge.n	8012886 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8012868:	5713      	ldrsb	r3, [r2, r4]
 801286a:	f99a 1003 	ldrsb.w	r1, [sl, #3]
 801286e:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8012872:	fb12 ee01 	smlabb	lr, r2, r1, lr
 8012876:	fb12 5503 	smlabb	r5, r2, r3, r5
 801287a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 801287e:	fb12 7701 	smlabb	r7, r2, r1, r7
 8012882:	fb12 9903 	smlabb	r9, r2, r3, r9
 8012886:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012888:	9a04      	ldr	r2, [sp, #16]
 801288a:	eba3 030b 	sub.w	r3, r3, fp
 801288e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012892:	9304      	str	r3, [sp, #16]
 8012894:	9a05      	ldr	r2, [sp, #20]
 8012896:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012898:	9b06      	ldr	r3, [sp, #24]
 801289a:	440a      	add	r2, r1
 801289c:	3301      	adds	r3, #1
 801289e:	9205      	str	r2, [sp, #20]
 80128a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128a2:	9306      	str	r3, [sp, #24]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	f47f aeab 	bne.w	8012600 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x230>
 80128aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80128ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80128ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128b0:	440a      	add	r2, r1
 80128b2:	3301      	adds	r3, #1
 80128b4:	9214      	str	r2, [sp, #80]	; 0x50
 80128b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80128b8:	9315      	str	r3, [sp, #84]	; 0x54
 80128ba:	429a      	cmp	r2, r3
 80128bc:	f47f ae95 	bne.w	80125ea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x21a>
 80128c0:	46ab      	mov	fp, r5
 80128c2:	464c      	mov	r4, r9
 80128c4:	463d      	mov	r5, r7
 80128c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f040 814c 	bne.w	8012b66 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x796>
 80128ce:	992b      	ldr	r1, [sp, #172]	; 0xac
 80128d0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80128d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80128d6:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 80128da:	fb52 1203 	smmla	r2, r2, r3, r1
 80128de:	fb5a 1a03 	smmla	sl, sl, r3, r1
 80128e2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80128e4:	410a      	asrs	r2, r1
 80128e6:	f302 0307 	ssat	r3, #8, r2
 80128ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80128ec:	fa4a fa01 	asr.w	sl, sl, r1
 80128f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128f4:	f30a 0307 	ssat	r3, #8, sl
 80128f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80128fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012900:	2b00      	cmp	r3, #0
 8012902:	f040 8115 	bne.w	8012b30 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x760>
 8012906:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8012908:	006f      	lsls	r7, r5, #1
 801290a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801290c:	0060      	lsls	r0, r4, #1
 801290e:	fb57 2703 	smmla	r7, r7, r3, r2
 8012912:	fb50 2003 	smmla	r0, r0, r3, r2
 8012916:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012918:	4117      	asrs	r7, r2
 801291a:	f307 0307 	ssat	r3, #8, r7
 801291e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012920:	4110      	asrs	r0, r2
 8012922:	700b      	strb	r3, [r1, #0]
 8012924:	f300 0307 	ssat	r3, #8, r0
 8012928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801292a:	7013      	strb	r3, [r2, #0]
 801292c:	460a      	mov	r2, r1
 801292e:	9946      	ldr	r1, [sp, #280]	; 0x118
 8012930:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012932:	440a      	add	r2, r1
 8012934:	3302      	adds	r3, #2
 8012936:	921c      	str	r2, [sp, #112]	; 0x70
 8012938:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801293a:	9333      	str	r3, [sp, #204]	; 0xcc
 801293c:	440a      	add	r2, r1
 801293e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8012940:	921b      	str	r2, [sp, #108]	; 0x6c
 8012942:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012944:	440a      	add	r2, r1
 8012946:	9226      	str	r2, [sp, #152]	; 0x98
 8012948:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801294a:	4293      	cmp	r3, r2
 801294c:	f6ff ae3a 	blt.w	80125c4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1f4>
 8012950:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012952:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012954:	4413      	add	r3, r2
 8012956:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8012958:	9318      	str	r3, [sp, #96]	; 0x60
 801295a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801295c:	4413      	add	r3, r2
 801295e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012960:	18d3      	adds	r3, r2, r3
 8012962:	9305      	str	r3, [sp, #20]
 8012964:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8012966:	2b00      	cmp	r3, #0
 8012968:	f040 8148 	bne.w	8012bfc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x82c>
 801296c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801296e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8012970:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8012972:	440a      	add	r2, r1
 8012974:	3301      	adds	r3, #1
 8012976:	921e      	str	r2, [sp, #120]	; 0x78
 8012978:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801297a:	9332      	str	r3, [sp, #200]	; 0xc8
 801297c:	429a      	cmp	r2, r3
 801297e:	f47f ae0d 	bne.w	801259c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1cc>
 8012982:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012984:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8012986:	4413      	add	r3, r2
 8012988:	932d      	str	r3, [sp, #180]	; 0xb4
 801298a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801298c:	3302      	adds	r3, #2
 801298e:	931d      	str	r3, [sp, #116]	; 0x74
 8012990:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012992:	b11b      	cbz	r3, 801299c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5cc>
 8012994:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8012996:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012998:	4413      	add	r3, r2
 801299a:	9365      	str	r3, [sp, #404]	; 0x194
 801299c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801299e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 80129a0:	3304      	adds	r3, #4
 80129a2:	9320      	str	r3, [sp, #128]	; 0x80
 80129a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129a6:	3308      	adds	r3, #8
 80129a8:	9319      	str	r3, [sp, #100]	; 0x64
 80129aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80129ac:	3308      	adds	r3, #8
 80129ae:	931a      	str	r3, [sp, #104]	; 0x68
 80129b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80129b2:	3308      	adds	r3, #8
 80129b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80129b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129b8:	4293      	cmp	r3, r2
 80129ba:	f47f ad9e 	bne.w	80124fa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x12a>
 80129be:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80129c0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80129c2:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80129c4:	fb01 3302 	mla	r3, r1, r2, r3
 80129c8:	932f      	str	r3, [sp, #188]	; 0xbc
 80129ca:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80129cc:	07db      	lsls	r3, r3, #31
 80129ce:	f140 80a6 	bpl.w	8012b1e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 80129d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f000 80a2 	beq.w	8012b1e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 80129da:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80129dc:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
 80129e0:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80129e2:	449b      	add	fp, r3
 80129e4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80129e6:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80129ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80129ec:	9b56      	ldr	r3, [sp, #344]	; 0x158
 80129ee:	eb03 088b 	add.w	r8, r3, fp, lsl #2
 80129f2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80129f4:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80129f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80129fc:	4413      	add	r3, r2
 80129fe:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8012a00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012a04:	930c      	str	r3, [sp, #48]	; 0x30
 8012a06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f000 8088 	beq.w	8012b1e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 8012a0e:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8012a10:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8012a12:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8012a14:	fb01 f202 	mul.w	r2, r1, r2
 8012a18:	920d      	str	r2, [sp, #52]	; 0x34
 8012a1a:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8012a1c:	fb01 f202 	mul.w	r2, r1, r2
 8012a20:	9959      	ldr	r1, [sp, #356]	; 0x164
 8012a22:	9209      	str	r2, [sp, #36]	; 0x24
 8012a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a26:	440a      	add	r2, r1
 8012a28:	9203      	str	r2, [sp, #12]
 8012a2a:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8012a2c:	fb01 f202 	mul.w	r2, r1, r2
 8012a30:	920e      	str	r2, [sp, #56]	; 0x38
 8012a32:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8012a34:	fb01 fe02 	mul.w	lr, r1, r2
 8012a38:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012a3a:	fb02 f303 	mul.w	r3, r2, r3
 8012a3e:	46f1      	mov	r9, lr
 8012a40:	468e      	mov	lr, r1
 8012a42:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a44:	2300      	movs	r3, #0
 8012a46:	9306      	str	r3, [sp, #24]
 8012a48:	9b03      	ldr	r3, [sp, #12]
 8012a4a:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8012a4e:	9304      	str	r3, [sp, #16]
 8012a50:	2300      	movs	r3, #0
 8012a52:	9307      	str	r3, [sp, #28]
 8012a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a56:	6819      	ldr	r1, [r3, #0]
 8012a58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012a5a:	b37b      	cbz	r3, 8012abc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ec>
 8012a5c:	9b04      	ldr	r3, [sp, #16]
 8012a5e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012a62:	9305      	str	r3, [sp, #20]
 8012a64:	2300      	movs	r3, #0
 8012a66:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8012a68:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8012a6c:	9308      	str	r3, [sp, #32]
 8012a6e:	f1b8 0f00 	cmp.w	r8, #0
 8012a72:	d017      	beq.n	8012aa4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6d4>
 8012a74:	9d05      	ldr	r5, [sp, #20]
 8012a76:	f04f 0c00 	mov.w	ip, #0
 8012a7a:	f1be 0f00 	cmp.w	lr, #0
 8012a7e:	eba5 020e 	sub.w	r2, r5, lr
 8012a82:	dd0a      	ble.n	8012a9a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ca>
 8012a84:	1e78      	subs	r0, r7, #1
 8012a86:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8012a8a:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8012a8e:	1b9b      	subs	r3, r3, r6
 8012a90:	42aa      	cmp	r2, r5
 8012a92:	fb04 1103 	mla	r1, r4, r3, r1
 8012a96:	d1f6      	bne.n	8012a86 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6b6>
 8012a98:	4477      	add	r7, lr
 8012a9a:	f10c 0c01 	add.w	ip, ip, #1
 8012a9e:	444d      	add	r5, r9
 8012aa0:	45e0      	cmp	r8, ip
 8012aa2:	d1ea      	bne.n	8012a7a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6aa>
 8012aa4:	9a05      	ldr	r2, [sp, #20]
 8012aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012aa8:	9b08      	ldr	r3, [sp, #32]
 8012aaa:	4402      	add	r2, r0
 8012aac:	3301      	adds	r3, #1
 8012aae:	9205      	str	r2, [sp, #20]
 8012ab0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012ab2:	9308      	str	r3, [sp, #32]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d1da      	bne.n	8012a6e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x69e>
 8012ab8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012abe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012ac2:	2815      	cmp	r0, #21
 8012ac4:	f340 82a3 	ble.w	801300e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc3e>
 8012ac8:	1e83      	subs	r3, r0, #2
 8012aca:	1e42      	subs	r2, r0, #1
 8012acc:	2001      	movs	r0, #1
 8012ace:	4098      	lsls	r0, r3
 8012ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8012ad4:	fb51 0303 	smmla	r3, r1, r3, r0
 8012ad8:	fa43 f202 	asr.w	r2, r3, r2
 8012adc:	f8db 3000 	ldr.w	r3, [fp]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f303 0307 	ssat	r3, #8, r3
 8012ae6:	f88a 3000 	strb.w	r3, [sl]
 8012aea:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012aec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012aee:	4492      	add	sl, r2
 8012af0:	9a04      	ldr	r2, [sp, #16]
 8012af2:	9b07      	ldr	r3, [sp, #28]
 8012af4:	440a      	add	r2, r1
 8012af6:	3301      	adds	r3, #1
 8012af8:	9204      	str	r2, [sp, #16]
 8012afa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8012afc:	9307      	str	r3, [sp, #28]
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d1a8      	bne.n	8012a54 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x684>
 8012b02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012b04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b06:	9b06      	ldr	r3, [sp, #24]
 8012b08:	440a      	add	r2, r1
 8012b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	921d      	str	r2, [sp, #116]	; 0x74
 8012b10:	9a03      	ldr	r2, [sp, #12]
 8012b12:	9306      	str	r3, [sp, #24]
 8012b14:	440a      	add	r2, r1
 8012b16:	9203      	str	r2, [sp, #12]
 8012b18:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d194      	bne.n	8012a48 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x678>
 8012b1e:	2000      	movs	r0, #0
 8012b20:	b04d      	add	sp, #308	; 0x134
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	46b2      	mov	sl, r6
 8012b28:	e655      	b.n	80127d6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x406>
 8012b2a:	f04f 0b00 	mov.w	fp, #0
 8012b2e:	e60c      	b.n	801274a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x37a>
 8012b30:	3301      	adds	r3, #1
 8012b32:	d033      	beq.n	8012b9c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7cc>
 8012b34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012b36:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8012b38:	fb55 2703 	smmla	r7, r5, r3, r2
 8012b3c:	fb54 2003 	smmla	r0, r4, r3, r2
 8012b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b42:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8012b44:	3b01      	subs	r3, #1
 8012b46:	fa47 f203 	asr.w	r2, r7, r3
 8012b4a:	440a      	add	r2, r1
 8012b4c:	f302 0207 	ssat	r2, #8, r2
 8012b50:	fa40 f303 	asr.w	r3, r0, r3
 8012b54:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012b56:	440b      	add	r3, r1
 8012b58:	7002      	strb	r2, [r0, #0]
 8012b5a:	f303 0307 	ssat	r3, #8, r3
 8012b5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012b60:	7013      	strb	r3, [r2, #0]
 8012b62:	4602      	mov	r2, r0
 8012b64:	e6e3      	b.n	801292e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x55e>
 8012b66:	3301      	adds	r3, #1
 8012b68:	d02d      	beq.n	8012bc6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7f6>
 8012b6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012b6c:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8012b6e:	fb5e 1203 	smmla	r2, lr, r3, r1
 8012b72:	fb5b 1a03 	smmla	sl, fp, r3, r1
 8012b76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012b78:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	411a      	asrs	r2, r3
 8012b7e:	440a      	add	r2, r1
 8012b80:	f302 0207 	ssat	r2, #8, r2
 8012b84:	fa4a f303 	asr.w	r3, sl, r3
 8012b88:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012b8a:	440b      	add	r3, r1
 8012b8c:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012b90:	f303 0307 	ssat	r3, #8, r3
 8012b94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012b96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b9a:	e6b0      	b.n	80128fe <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x52e>
 8012b9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b9e:	f1c3 0301 	rsb	r3, r3, #1
 8012ba2:	fa05 f203 	lsl.w	r2, r5, r3
 8012ba6:	f302 021f 	ssat	r2, #32, r2
 8012baa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012bac:	fb52 f211 	smmulr	r2, r2, r1
 8012bb0:	fa04 f303 	lsl.w	r3, r4, r3
 8012bb4:	f303 031f 	ssat	r3, #32, r3
 8012bb8:	fb53 f311 	smmulr	r3, r3, r1
 8012bbc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8012bbe:	440a      	add	r2, r1
 8012bc0:	f302 0207 	ssat	r2, #8, r2
 8012bc4:	e7c6      	b.n	8012b54 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x784>
 8012bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012bc8:	f1c3 0301 	rsb	r3, r3, #1
 8012bcc:	fa0e f203 	lsl.w	r2, lr, r3
 8012bd0:	f302 021f 	ssat	r2, #32, r2
 8012bd4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012bd6:	fb52 f211 	smmulr	r2, r2, r1
 8012bda:	fa0b f303 	lsl.w	r3, fp, r3
 8012bde:	f303 031f 	ssat	r3, #32, r3
 8012be2:	fb53 f311 	smmulr	r3, r3, r1
 8012be6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012be8:	440a      	add	r2, r1
 8012bea:	f302 0207 	ssat	r2, #8, r2
 8012bee:	e7cb      	b.n	8012b88 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7b8>
 8012bf0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8012bf2:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8012bf6:	462c      	mov	r4, r5
 8012bf8:	46f3      	mov	fp, lr
 8012bfa:	e664      	b.n	80128c6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4f6>
 8012bfc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	f000 8167 	beq.w	8012ed2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb02>
 8012c04:	9b05      	ldr	r3, [sp, #20]
 8012c06:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8012c08:	4413      	add	r3, r2
 8012c0a:	9305      	str	r3, [sp, #20]
 8012c0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f000 812f 	beq.w	8012e72 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xaa2>
 8012c14:	2300      	movs	r3, #0
 8012c16:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 8012c1a:	9307      	str	r3, [sp, #28]
 8012c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8012c1e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012c20:	3b03      	subs	r3, #3
 8012c22:	9309      	str	r3, [sp, #36]	; 0x24
 8012c24:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012c26:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8012c2a:	3b04      	subs	r3, #4
 8012c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 80da 	beq.w	8012dea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa1a>
 8012c36:	9b05      	ldr	r3, [sp, #20]
 8012c38:	9a07      	ldr	r2, [sp, #28]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	9303      	str	r3, [sp, #12]
 8012c3e:	2300      	movs	r3, #0
 8012c40:	9304      	str	r3, [sp, #16]
 8012c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c44:	9a03      	ldr	r2, [sp, #12]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	4611      	mov	r1, r2
 8012c4a:	f340 810e 	ble.w	8012e6a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa9a>
 8012c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c50:	464b      	mov	r3, r9
 8012c52:	188c      	adds	r4, r1, r2
 8012c54:	6808      	ldr	r0, [r1, #0]
 8012c56:	681d      	ldr	r5, [r3, #0]
 8012c58:	fa2f f280 	sxtb16	r2, r0
 8012c5c:	fa2f f090 	sxtb16	r0, r0, ror #8
 8012c60:	fb22 a505 	smlad	r5, r2, r5, sl
 8012c64:	685e      	ldr	r6, [r3, #4]
 8012c66:	fb20 5706 	smlad	r7, r0, r6, r5
 8012c6a:	689d      	ldr	r5, [r3, #8]
 8012c6c:	fb22 b205 	smlad	r2, r2, r5, fp
 8012c70:	68dd      	ldr	r5, [r3, #12]
 8012c72:	fb20 2005 	smlad	r0, r0, r5, r2
 8012c76:	684a      	ldr	r2, [r1, #4]
 8012c78:	691e      	ldr	r6, [r3, #16]
 8012c7a:	fa2f f582 	sxtb16	r5, r2
 8012c7e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012c82:	fb25 7606 	smlad	r6, r5, r6, r7
 8012c86:	695f      	ldr	r7, [r3, #20]
 8012c88:	fb22 6607 	smlad	r6, r2, r7, r6
 8012c8c:	699f      	ldr	r7, [r3, #24]
 8012c8e:	fb25 0007 	smlad	r0, r5, r7, r0
 8012c92:	69dd      	ldr	r5, [r3, #28]
 8012c94:	fb22 0205 	smlad	r2, r2, r5, r0
 8012c98:	688f      	ldr	r7, [r1, #8]
 8012c9a:	6a1d      	ldr	r5, [r3, #32]
 8012c9c:	fa2f f087 	sxtb16	r0, r7
 8012ca0:	fa2f f797 	sxtb16	r7, r7, ror #8
 8012ca4:	fb20 6505 	smlad	r5, r0, r5, r6
 8012ca8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8012caa:	fb27 5606 	smlad	r6, r7, r6, r5
 8012cae:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8012cb2:	fb20 200b 	smlad	r0, r0, fp, r2
 8012cb6:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8012cba:	fb27 000b 	smlad	r0, r7, fp, r0
 8012cbe:	68ca      	ldr	r2, [r1, #12]
 8012cc0:	3340      	adds	r3, #64	; 0x40
 8012cc2:	fa2f fb82 	sxtb16	fp, r2
 8012cc6:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012cca:	3110      	adds	r1, #16
 8012ccc:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8012cd0:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8012cd4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8012cd8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012cdc:	fb2b 6505 	smlad	r5, fp, r5, r6
 8012ce0:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8012ce4:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8012ce8:	fb22 bb07 	smlad	fp, r2, r7, fp
 8012cec:	42a1      	cmp	r1, r4
 8012cee:	d1b1      	bne.n	8012c54 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x884>
 8012cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cf2:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8012cf6:	4499      	add	r9, r3
 8012cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cfa:	459e      	cmp	lr, r3
 8012cfc:	f280 80b3 	bge.w	8012e66 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa96>
 8012d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d02:	4649      	mov	r1, r9
 8012d04:	eba3 080e 	sub.w	r8, r3, lr
 8012d08:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8012d0c:	f108 0301 	add.w	r3, r8, #1
 8012d10:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8012d14:	9306      	str	r3, [sp, #24]
 8012d16:	f854 3b04 	ldr.w	r3, [r4], #4
 8012d1a:	3110      	adds	r1, #16
 8012d1c:	fa2f f283 	sxtb16	r2, r3
 8012d20:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8012d24:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8012d28:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8012d2c:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8012d30:	fa2f f393 	sxtb16	r3, r3, ror #8
 8012d34:	fb22 a000 	smlad	r0, r2, r0, sl
 8012d38:	fb23 0a07 	smlad	sl, r3, r7, r0
 8012d3c:	fb22 b206 	smlad	r2, r2, r6, fp
 8012d40:	fb23 2b05 	smlad	fp, r3, r5, r2
 8012d44:	4564      	cmp	r4, ip
 8012d46:	d1e6      	bne.n	8012d16 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x946>
 8012d48:	9b06      	ldr	r3, [sp, #24]
 8012d4a:	f10e 0e04 	add.w	lr, lr, #4
 8012d4e:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8012d52:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8012d56:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012d58:	4573      	cmp	r3, lr
 8012d5a:	dd3b      	ble.n	8012dd4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa04>
 8012d5c:	f99c 3000 	ldrsb.w	r3, [ip]
 8012d60:	f8b9 2000 	ldrh.w	r2, [r9]
 8012d64:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012d68:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8012d6c:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012d70:	f10e 0301 	add.w	r3, lr, #1
 8012d74:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012d76:	429a      	cmp	r2, r3
 8012d78:	dd27      	ble.n	8012dca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012d7a:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8012d7e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8012d82:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012d86:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8012d8a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012d8e:	f10e 0302 	add.w	r3, lr, #2
 8012d92:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012d94:	429a      	cmp	r2, r3
 8012d96:	dd18      	ble.n	8012dca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012d98:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8012d9c:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8012da0:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012da4:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8012da8:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012dac:	f10e 0303 	add.w	r3, lr, #3
 8012db0:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012db2:	429a      	cmp	r2, r3
 8012db4:	dd09      	ble.n	8012dca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012db6:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8012dba:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8012dbe:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012dc2:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8012dc6:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012dca:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012dcc:	eba3 0e0e 	sub.w	lr, r3, lr
 8012dd0:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8012dd4:	9a03      	ldr	r2, [sp, #12]
 8012dd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012dd8:	9b04      	ldr	r3, [sp, #16]
 8012dda:	440a      	add	r2, r1
 8012ddc:	3301      	adds	r3, #1
 8012dde:	9203      	str	r2, [sp, #12]
 8012de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012de2:	9304      	str	r3, [sp, #16]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	f47f af2c 	bne.w	8012c42 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x872>
 8012dea:	9a07      	ldr	r2, [sp, #28]
 8012dec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012df0:	440a      	add	r2, r1
 8012df2:	3301      	adds	r3, #1
 8012df4:	9207      	str	r2, [sp, #28]
 8012df6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012df8:	9311      	str	r3, [sp, #68]	; 0x44
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	f47f af17 	bne.w	8012c2e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x85e>
 8012e00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e02:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8012e06:	2915      	cmp	r1, #21
 8012e08:	dd3a      	ble.n	8012e80 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xab0>
 8012e0a:	1e8b      	subs	r3, r1, #2
 8012e0c:	2201      	movs	r2, #1
 8012e0e:	3901      	subs	r1, #1
 8012e10:	409a      	lsls	r2, r3
 8012e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e14:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012e18:	fb5a 2303 	smmla	r3, sl, r3, r2
 8012e1c:	fa43 f101 	asr.w	r1, r3, r1
 8012e20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012e22:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012e26:	440b      	add	r3, r1
 8012e28:	f303 0307 	ssat	r3, #8, r3
 8012e2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e2e:	7013      	strb	r3, [r2, #0]
 8012e30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e32:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012e36:	2915      	cmp	r1, #21
 8012e38:	dd39      	ble.n	8012eae <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xade>
 8012e3a:	1e8b      	subs	r3, r1, #2
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	3901      	subs	r1, #1
 8012e40:	409a      	lsls	r2, r3
 8012e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	fb5b 2303 	smmla	r3, fp, r3, r2
 8012e4a:	fa43 f101 	asr.w	r1, r3, r1
 8012e4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	440b      	add	r3, r1
 8012e54:	f303 0307 	ssat	r3, #8, r3
 8012e58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e5a:	7053      	strb	r3, [r2, #1]
 8012e5c:	4613      	mov	r3, r2
 8012e5e:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012e60:	4413      	add	r3, r2
 8012e62:	9318      	str	r3, [sp, #96]	; 0x60
 8012e64:	e582      	b.n	801296c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x59c>
 8012e66:	46a4      	mov	ip, r4
 8012e68:	e775      	b.n	8012d56 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x986>
 8012e6a:	4614      	mov	r4, r2
 8012e6c:	f04f 0e00 	mov.w	lr, #0
 8012e70:	e742      	b.n	8012cf8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x928>
 8012e72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e74:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8012e78:	2915      	cmp	r1, #21
 8012e7a:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8012e7e:	dcc4      	bgt.n	8012e0a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa3a>
 8012e80:	2900      	cmp	r1, #0
 8012e82:	f340 80b0 	ble.w	8012fe6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc16>
 8012e86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e88:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8012e8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012e8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012e92:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012e96:	fb54 2303 	smmla	r3, r4, r3, r2
 8012e9a:	410b      	asrs	r3, r1
 8012e9c:	f303 0307 	ssat	r3, #8, r3
 8012ea0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ea2:	7013      	strb	r3, [r2, #0]
 8012ea4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012ea6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012eaa:	2915      	cmp	r1, #21
 8012eac:	dcc5      	bgt.n	8012e3a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa6a>
 8012eae:	2900      	cmp	r1, #0
 8012eb0:	f340 8086 	ble.w	8012fc0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbf0>
 8012eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012eb6:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8012eba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	6812      	ldr	r2, [r2, #0]
 8012ec0:	fb54 2303 	smmla	r3, r4, r3, r2
 8012ec4:	410b      	asrs	r3, r1
 8012ec6:	f303 0307 	ssat	r3, #8, r3
 8012eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ecc:	7053      	strb	r3, [r2, #1]
 8012ece:	4613      	mov	r3, r2
 8012ed0:	e7c5      	b.n	8012e5e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8012ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ed4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012ed6:	4413      	add	r3, r2
 8012ed8:	9305      	str	r3, [sp, #20]
 8012eda:	e697      	b.n	8012c0c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x83c>
 8012edc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8012ede:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012ee0:	4601      	mov	r1, r0
 8012ee2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	ee17 3a90 	vmov	r3, s15
 8012eea:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012eec:	4421      	add	r1, r4
 8012eee:	f7fd fd3b 	bl	8010968 <weights_2channels_prefetch>
 8012ef2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f43f ab2e 	beq.w	8012556 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x186>
 8012efa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f000 8095 	beq.w	801302c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc5c>
 8012f02:	2300      	movs	r3, #0
 8012f04:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012f06:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8012f08:	461c      	mov	r4, r3
 8012f0a:	461e      	mov	r6, r3
 8012f0c:	9f41      	ldr	r7, [sp, #260]	; 0x104
 8012f0e:	b33f      	cbz	r7, 8012f60 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb90>
 8012f10:	f102 0510 	add.w	r5, r2, #16
 8012f14:	f935 1c10 	ldrsh.w	r1, [r5, #-16]
 8012f18:	3f01      	subs	r7, #1
 8012f1a:	f105 0510 	add.w	r5, r5, #16
 8012f1e:	eba4 0401 	sub.w	r4, r4, r1
 8012f22:	f935 1c18 	ldrsh.w	r1, [r5, #-24]
 8012f26:	eba3 0301 	sub.w	r3, r3, r1
 8012f2a:	f935 1c1e 	ldrsh.w	r1, [r5, #-30]
 8012f2e:	eba4 0401 	sub.w	r4, r4, r1
 8012f32:	f935 1c16 	ldrsh.w	r1, [r5, #-22]
 8012f36:	eba3 0301 	sub.w	r3, r3, r1
 8012f3a:	f935 1c1c 	ldrsh.w	r1, [r5, #-28]
 8012f3e:	eba4 0401 	sub.w	r4, r4, r1
 8012f42:	f935 1c14 	ldrsh.w	r1, [r5, #-20]
 8012f46:	eba3 0301 	sub.w	r3, r3, r1
 8012f4a:	f935 1c1a 	ldrsh.w	r1, [r5, #-26]
 8012f4e:	eba4 0401 	sub.w	r4, r4, r1
 8012f52:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 8012f56:	eba3 0301 	sub.w	r3, r3, r1
 8012f5a:	d1db      	bne.n	8012f14 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb44>
 8012f5c:	9942      	ldr	r1, [sp, #264]	; 0x108
 8012f5e:	440a      	add	r2, r1
 8012f60:	b1d8      	cbz	r0, 8012f9a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbca>
 8012f62:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012f66:	2801      	cmp	r0, #1
 8012f68:	eba4 0401 	sub.w	r4, r4, r1
 8012f6c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8012f70:	eba3 0301 	sub.w	r3, r3, r1
 8012f74:	d00f      	beq.n	8012f96 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8012f76:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012f7a:	2802      	cmp	r0, #2
 8012f7c:	eba4 0401 	sub.w	r4, r4, r1
 8012f80:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012f84:	eba3 0301 	sub.w	r3, r3, r1
 8012f88:	d005      	beq.n	8012f96 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8012f8a:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8012f8e:	1a64      	subs	r4, r4, r1
 8012f90:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8012f94:	1a5b      	subs	r3, r3, r1
 8012f96:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8012f98:	440a      	add	r2, r1
 8012f9a:	3601      	adds	r6, #1
 8012f9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012f9e:	42b1      	cmp	r1, r6
 8012fa0:	d1b4      	bne.n	8012f0c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb3c>
 8012fa2:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8012fa4:	fb02 f404 	mul.w	r4, r2, r4
 8012fa8:	fb02 f303 	mul.w	r3, r2, r3
 8012fac:	f7ff bad4 	b.w	8012558 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	9328      	str	r3, [sp, #160]	; 0xa0
 8012fb4:	f7ff bac7 	b.w	8012546 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x176>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	9327      	str	r3, [sp, #156]	; 0x9c
 8012fbc:	f7ff bab9 	b.w	8012532 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x162>
 8012fc0:	f1c1 0101 	rsb	r1, r1, #1
 8012fc4:	fa0b f101 	lsl.w	r1, fp, r1
 8012fc8:	f301 021f 	ssat	r2, #32, r1
 8012fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	fb52 f213 	smmulr	r2, r2, r3
 8012fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4413      	add	r3, r2
 8012fda:	f303 0307 	ssat	r3, #8, r3
 8012fde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012fe0:	7053      	strb	r3, [r2, #1]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	e73b      	b.n	8012e5e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8012fe6:	f1c1 0101 	rsb	r1, r1, #1
 8012fea:	fa0a f201 	lsl.w	r2, sl, r1
 8012fee:	f302 021f 	ssat	r2, #32, r2
 8012ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ff4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012ff8:	fb52 f213 	smmulr	r2, r2, r3
 8012ffc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012ffe:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013002:	4413      	add	r3, r2
 8013004:	f303 0307 	ssat	r3, #8, r3
 8013008:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801300a:	7013      	strb	r3, [r2, #0]
 801300c:	e710      	b.n	8012e30 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa60>
 801300e:	2800      	cmp	r0, #0
 8013010:	dd0f      	ble.n	8013032 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc62>
 8013012:	0049      	lsls	r1, r1, #1
 8013014:	f8d8 3000 	ldr.w	r3, [r8]
 8013018:	f8db 2000 	ldr.w	r2, [fp]
 801301c:	fb51 2303 	smmla	r3, r1, r3, r2
 8013020:	4103      	asrs	r3, r0
 8013022:	f303 0307 	ssat	r3, #8, r3
 8013026:	f88a 3000 	strb.w	r3, [sl]
 801302a:	e55e      	b.n	8012aea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 801302c:	461c      	mov	r4, r3
 801302e:	f7ff ba93 	b.w	8012558 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8013032:	f1c0 0201 	rsb	r2, r0, #1
 8013036:	fa01 f202 	lsl.w	r2, r1, r2
 801303a:	f302 021f 	ssat	r2, #32, r2
 801303e:	f8d8 3000 	ldr.w	r3, [r8]
 8013042:	fb52 f213 	smmulr	r2, r2, r3
 8013046:	f8db 3000 	ldr.w	r3, [fp]
 801304a:	4413      	add	r3, r2
 801304c:	f303 0307 	ssat	r3, #8, r3
 8013050:	f88a 3000 	strb.w	r3, [sl]
 8013054:	e549      	b.n	8012aea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 8013056:	bf00      	nop

08013058 <st_int8_fill>:
 8013058:	078b      	lsls	r3, r1, #30
 801305a:	468c      	mov	ip, r1
 801305c:	d00a      	beq.n	8013074 <st_int8_fill+0x1c>
 801305e:	b912      	cbnz	r2, 8013066 <st_int8_fill+0xe>
 8013060:	e045      	b.n	80130ee <st_int8_fill+0x96>
 8013062:	2a00      	cmp	r2, #0
 8013064:	d044      	beq.n	80130f0 <st_int8_fill+0x98>
 8013066:	f80c 0b01 	strb.w	r0, [ip], #1
 801306a:	f01c 0f03 	tst.w	ip, #3
 801306e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013072:	d1f6      	bne.n	8013062 <st_int8_fill+0xa>
 8013074:	b2c3      	uxtb	r3, r0
 8013076:	0911      	lsrs	r1, r2, #4
 8013078:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801307c:	b510      	push	{r4, lr}
 801307e:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8013082:	b2a4      	uxth	r4, r4
 8013084:	ea44 0403 	orr.w	r4, r4, r3
 8013088:	ea4f 4300 	mov.w	r3, r0, lsl #16
 801308c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013090:	ea44 0403 	orr.w	r4, r4, r3
 8013094:	d043      	beq.n	801311e <st_int8_fill+0xc6>
 8013096:	1e4b      	subs	r3, r1, #1
 8013098:	2b04      	cmp	r3, #4
 801309a:	d92a      	bls.n	80130f2 <st_int8_fill+0x9a>
 801309c:	f01c 0f07 	tst.w	ip, #7
 80130a0:	d127      	bne.n	80130f2 <st_int8_fill+0x9a>
 80130a2:	f10c 0310 	add.w	r3, ip, #16
 80130a6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80130aa:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80130ae:	e943 4404 	strd	r4, r4, [r3, #-16]
 80130b2:	e943 4402 	strd	r4, r4, [r3, #-8]
 80130b6:	3310      	adds	r3, #16
 80130b8:	428b      	cmp	r3, r1
 80130ba:	d1f8      	bne.n	80130ae <st_int8_fill+0x56>
 80130bc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80130c0:	44f4      	add	ip, lr
 80130c2:	f002 0203 	and.w	r2, r2, #3
 80130c6:	b15b      	cbz	r3, 80130e0 <st_int8_fill+0x88>
 80130c8:	1e59      	subs	r1, r3, #1
 80130ca:	f8cc 4000 	str.w	r4, [ip]
 80130ce:	d005      	beq.n	80130dc <st_int8_fill+0x84>
 80130d0:	2901      	cmp	r1, #1
 80130d2:	f8cc 4004 	str.w	r4, [ip, #4]
 80130d6:	bf18      	it	ne
 80130d8:	f8cc 4008 	strne.w	r4, [ip, #8]
 80130dc:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 80130e0:	b1e2      	cbz	r2, 801311c <st_int8_fill+0xc4>
 80130e2:	4601      	mov	r1, r0
 80130e4:	4660      	mov	r0, ip
 80130e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130ea:	f001 bbb3 	b.w	8014854 <memset>
 80130ee:	4770      	bx	lr
 80130f0:	4770      	bx	lr
 80130f2:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80130f6:	4663      	mov	r3, ip
 80130f8:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 80130fc:	601c      	str	r4, [r3, #0]
 80130fe:	3310      	adds	r3, #16
 8013100:	f843 4c0c 	str.w	r4, [r3, #-12]
 8013104:	f843 4c08 	str.w	r4, [r3, #-8]
 8013108:	f843 4c04 	str.w	r4, [r3, #-4]
 801310c:	4299      	cmp	r1, r3
 801310e:	d1f5      	bne.n	80130fc <st_int8_fill+0xa4>
 8013110:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8013114:	44f4      	add	ip, lr
 8013116:	f002 0203 	and.w	r2, r2, #3
 801311a:	e7d4      	b.n	80130c6 <st_int8_fill+0x6e>
 801311c:	bd10      	pop	{r4, pc}
 801311e:	0893      	lsrs	r3, r2, #2
 8013120:	f002 0203 	and.w	r2, r2, #3
 8013124:	e7cf      	b.n	80130c6 <st_int8_fill+0x6e>
 8013126:	bf00      	nop

08013128 <st_int8_copy>:
 8013128:	078b      	lsls	r3, r1, #30
 801312a:	d00a      	beq.n	8013142 <st_int8_copy+0x1a>
 801312c:	b912      	cbnz	r2, 8013134 <st_int8_copy+0xc>
 801312e:	e04f      	b.n	80131d0 <st_int8_copy+0xa8>
 8013130:	2a00      	cmp	r2, #0
 8013132:	d04e      	beq.n	80131d2 <st_int8_copy+0xaa>
 8013134:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8013138:	3a01      	subs	r2, #1
 801313a:	f801 3b01 	strb.w	r3, [r1], #1
 801313e:	078b      	lsls	r3, r1, #30
 8013140:	d1f6      	bne.n	8013130 <st_int8_copy+0x8>
 8013142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013146:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801314a:	d065      	beq.n	8013218 <st_int8_copy+0xf0>
 801314c:	ea41 0300 	orr.w	r3, r1, r0
 8013150:	075b      	lsls	r3, r3, #29
 8013152:	d13f      	bne.n	80131d4 <st_int8_copy+0xac>
 8013154:	f10e 33ff 	add.w	r3, lr, #4294967295
 8013158:	2b01      	cmp	r3, #1
 801315a:	d93b      	bls.n	80131d4 <st_int8_copy+0xac>
 801315c:	f100 0310 	add.w	r3, r0, #16
 8013160:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8013164:	f101 0c10 	add.w	ip, r1, #16
 8013168:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801316c:	3310      	adds	r3, #16
 801316e:	f10c 0c10 	add.w	ip, ip, #16
 8013172:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8013176:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 801317a:	4573      	cmp	r3, lr
 801317c:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8013180:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8013184:	d1f2      	bne.n	801316c <st_int8_copy+0x44>
 8013186:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801318a:	4421      	add	r1, r4
 801318c:	4420      	add	r0, r4
 801318e:	f002 0203 	and.w	r2, r2, #3
 8013192:	b16b      	cbz	r3, 80131b0 <st_int8_copy+0x88>
 8013194:	6804      	ldr	r4, [r0, #0]
 8013196:	600c      	str	r4, [r1, #0]
 8013198:	1e5c      	subs	r4, r3, #1
 801319a:	d005      	beq.n	80131a8 <st_int8_copy+0x80>
 801319c:	6845      	ldr	r5, [r0, #4]
 801319e:	2c01      	cmp	r4, #1
 80131a0:	604d      	str	r5, [r1, #4]
 80131a2:	d001      	beq.n	80131a8 <st_int8_copy+0x80>
 80131a4:	6884      	ldr	r4, [r0, #8]
 80131a6:	608c      	str	r4, [r1, #8]
 80131a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80131ac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80131b0:	b162      	cbz	r2, 80131cc <st_int8_copy+0xa4>
 80131b2:	f990 3000 	ldrsb.w	r3, [r0]
 80131b6:	3a01      	subs	r2, #1
 80131b8:	700b      	strb	r3, [r1, #0]
 80131ba:	d007      	beq.n	80131cc <st_int8_copy+0xa4>
 80131bc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80131c0:	2a01      	cmp	r2, #1
 80131c2:	704b      	strb	r3, [r1, #1]
 80131c4:	d002      	beq.n	80131cc <st_int8_copy+0xa4>
 80131c6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80131ca:	708b      	strb	r3, [r1, #2]
 80131cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d0:	4770      	bx	lr
 80131d2:	4770      	bx	lr
 80131d4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80131d8:	460b      	mov	r3, r1
 80131da:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80131de:	4684      	mov	ip, r0
 80131e0:	f8dc 8000 	ldr.w	r8, [ip]
 80131e4:	3310      	adds	r3, #16
 80131e6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80131ea:	f10c 0c10 	add.w	ip, ip, #16
 80131ee:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80131f2:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80131f6:	f843 8c10 	str.w	r8, [r3, #-16]
 80131fa:	f843 7c0c 	str.w	r7, [r3, #-12]
 80131fe:	f843 6c08 	str.w	r6, [r3, #-8]
 8013202:	f843 5c04 	str.w	r5, [r3, #-4]
 8013206:	459e      	cmp	lr, r3
 8013208:	d1ea      	bne.n	80131e0 <st_int8_copy+0xb8>
 801320a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801320e:	4421      	add	r1, r4
 8013210:	4420      	add	r0, r4
 8013212:	f002 0203 	and.w	r2, r2, #3
 8013216:	e7bc      	b.n	8013192 <st_int8_copy+0x6a>
 8013218:	0893      	lsrs	r3, r2, #2
 801321a:	f002 0203 	and.w	r2, r2, #3
 801321e:	e7b8      	b.n	8013192 <st_int8_copy+0x6a>

08013220 <st_int8_reordered_no_shift_zero>:
 8013220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013222:	0897      	lsrs	r7, r2, #2
 8013224:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8013228:	d02f      	beq.n	801328a <st_int8_reordered_no_shift_zero+0x6a>
 801322a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 801322e:	460c      	mov	r4, r1
 8013230:	f850 cb04 	ldr.w	ip, [r0], #4
 8013234:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8013238:	fa2f fe8e 	sxtb16	lr, lr
 801323c:	fade fe03 	ssub16	lr, lr, r3
 8013240:	fa2f fc8c 	sxtb16	ip, ip
 8013244:	fadc fc03 	ssub16	ip, ip, r3
 8013248:	42a8      	cmp	r0, r5
 801324a:	f8c4 c000 	str.w	ip, [r4]
 801324e:	f8c4 e004 	str.w	lr, [r4, #4]
 8013252:	f104 0408 	add.w	r4, r4, #8
 8013256:	d1eb      	bne.n	8013230 <st_int8_reordered_no_shift_zero+0x10>
 8013258:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801325c:	f012 0203 	ands.w	r2, r2, #3
 8013260:	d012      	beq.n	8013288 <st_int8_reordered_no_shift_zero+0x68>
 8013262:	f995 0000 	ldrsb.w	r0, [r5]
 8013266:	b273      	sxtb	r3, r6
 8013268:	3a01      	subs	r2, #1
 801326a:	eba0 0003 	sub.w	r0, r0, r3
 801326e:	8008      	strh	r0, [r1, #0]
 8013270:	d00a      	beq.n	8013288 <st_int8_reordered_no_shift_zero+0x68>
 8013272:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8013276:	2a01      	cmp	r2, #1
 8013278:	eba0 0003 	sub.w	r0, r0, r3
 801327c:	8048      	strh	r0, [r1, #2]
 801327e:	d003      	beq.n	8013288 <st_int8_reordered_no_shift_zero+0x68>
 8013280:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	808b      	strh	r3, [r1, #4]
 8013288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801328a:	4605      	mov	r5, r0
 801328c:	e7e6      	b.n	801325c <st_int8_reordered_no_shift_zero+0x3c>
 801328e:	bf00      	nop

08013290 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8013290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013294:	b09d      	sub	sp, #116	; 0x74
 8013296:	4683      	mov	fp, r0
 8013298:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 801329c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801329e:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80132a2:	441d      	add	r5, r3
 80132a4:	9417      	str	r4, [sp, #92]	; 0x5c
 80132a6:	0864      	lsrs	r4, r4, #1
 80132a8:	9318      	str	r3, [sp, #96]	; 0x60
 80132aa:	910c      	str	r1, [sp, #48]	; 0x30
 80132ac:	9216      	str	r2, [sp, #88]	; 0x58
 80132ae:	9008      	str	r0, [sp, #32]
 80132b0:	9515      	str	r5, [sp, #84]	; 0x54
 80132b2:	9419      	str	r4, [sp, #100]	; 0x64
 80132b4:	f000 81d2 	beq.w	801365c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3cc>
 80132b8:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 80132bc:	4617      	mov	r7, r2
 80132be:	1e62      	subs	r2, r4, #1
 80132c0:	460c      	mov	r4, r1
 80132c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80132c4:	f1a0 0310 	sub.w	r3, r0, #16
 80132c8:	b292      	uxth	r2, r2
 80132ca:	46d9      	mov	r9, fp
 80132cc:	3108      	adds	r1, #8
 80132ce:	091b      	lsrs	r3, r3, #4
 80132d0:	960f      	str	r6, [sp, #60]	; 0x3c
 80132d2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80132d6:	463a      	mov	r2, r7
 80132d8:	3301      	adds	r3, #1
 80132da:	3208      	adds	r2, #8
 80132dc:	910e      	str	r1, [sp, #56]	; 0x38
 80132de:	4601      	mov	r1, r0
 80132e0:	3803      	subs	r0, #3
 80132e2:	9207      	str	r2, [sp, #28]
 80132e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80132e6:	900d      	str	r0, [sp, #52]	; 0x34
 80132e8:	3204      	adds	r2, #4
 80132ea:	9202      	str	r2, [sp, #8]
 80132ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80132ee:	3204      	adds	r2, #4
 80132f0:	9203      	str	r2, [sp, #12]
 80132f2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80132f4:	3204      	adds	r2, #4
 80132f6:	9204      	str	r2, [sp, #16]
 80132f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80132fa:	3201      	adds	r2, #1
 80132fc:	9205      	str	r2, [sp, #20]
 80132fe:	1c6a      	adds	r2, r5, #1
 8013300:	9206      	str	r2, [sp, #24]
 8013302:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8013306:	9213      	str	r2, [sp, #76]	; 0x4c
 8013308:	019a      	lsls	r2, r3, #6
 801330a:	9210      	str	r2, [sp, #64]	; 0x40
 801330c:	011a      	lsls	r2, r3, #4
 801330e:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8013312:	9212      	str	r2, [sp, #72]	; 0x48
 8013314:	9311      	str	r3, [sp, #68]	; 0x44
 8013316:	1f0b      	subs	r3, r1, #4
 8013318:	9314      	str	r3, [sp, #80]	; 0x50
 801331a:	9a07      	ldr	r2, [sp, #28]
 801331c:	9c08      	ldr	r4, [sp, #32]
 801331e:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8013322:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8013326:	2c0f      	cmp	r4, #15
 8013328:	931b      	str	r3, [sp, #108]	; 0x6c
 801332a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801332c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801332e:	921b      	str	r2, [sp, #108]	; 0x6c
 8013330:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013332:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013334:	f340 8285 	ble.w	8013842 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5b2>
 8013338:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801333a:	464d      	mov	r5, r9
 801333c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801333e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013340:	f8d4 e000 	ldr.w	lr, [r4]
 8013344:	f8d7 a000 	ldr.w	sl, [r7]
 8013348:	f8d5 c000 	ldr.w	ip, [r5]
 801334c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8013350:	fb2c 330e 	smlad	r3, ip, lr, r3
 8013354:	fb2c 000a 	smlad	r0, ip, sl, r0
 8013358:	fb28 2e0e 	smlad	lr, r8, lr, r2
 801335c:	fb28 110a 	smlad	r1, r8, sl, r1
 8013360:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8013364:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8013368:	68aa      	ldr	r2, [r5, #8]
 801336a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 801336e:	fb22 330c 	smlad	r3, r2, ip, r3
 8013372:	fb22 0008 	smlad	r0, r2, r8, r0
 8013376:	fb2b ee0c 	smlad	lr, fp, ip, lr
 801337a:	fb2b 1808 	smlad	r8, fp, r8, r1
 801337e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8013382:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8013386:	692a      	ldr	r2, [r5, #16]
 8013388:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801338c:	fb22 330c 	smlad	r3, r2, ip, r3
 8013390:	fb22 000b 	smlad	r0, r2, fp, r0
 8013394:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8013398:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 801339c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80133a0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80133a4:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80133a8:	69e9      	ldr	r1, [r5, #28]
 80133aa:	fb28 330c 	smlad	r3, r8, ip, r3
 80133ae:	fb28 000a 	smlad	r0, r8, sl, r0
 80133b2:	fb21 ec0c 	smlad	ip, r1, ip, lr
 80133b6:	fb21 ba0a 	smlad	sl, r1, sl, fp
 80133ba:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80133be:	6939      	ldr	r1, [r7, #16]
 80133c0:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80133c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80133c6:	fb28 330e 	smlad	r3, r8, lr, r3
 80133ca:	fb28 0001 	smlad	r0, r8, r1, r0
 80133ce:	fb22 cc0e 	smlad	ip, r2, lr, ip
 80133d2:	fb22 a101 	smlad	r1, r2, r1, sl
 80133d6:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80133da:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80133de:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 80133e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80133e4:	fb28 330e 	smlad	r3, r8, lr, r3
 80133e8:	fb28 000a 	smlad	r0, r8, sl, r0
 80133ec:	fb22 cc0e 	smlad	ip, r2, lr, ip
 80133f0:	fb22 120a 	smlad	r2, r2, sl, r1
 80133f4:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80133f8:	f8d7 b018 	ldr.w	fp, [r7, #24]
 80133fc:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8013400:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8013402:	fb28 330e 	smlad	r3, r8, lr, r3
 8013406:	fb28 080b 	smlad	r8, r8, fp, r0
 801340a:	fb21 ce0e 	smlad	lr, r1, lr, ip
 801340e:	fb21 210b 	smlad	r1, r1, fp, r2
 8013412:	69e2      	ldr	r2, [r4, #28]
 8013414:	3720      	adds	r7, #32
 8013416:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8013418:	3420      	adds	r4, #32
 801341a:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 801341e:	3540      	adds	r5, #64	; 0x40
 8013420:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8013424:	fb20 3302 	smlad	r3, r0, r2, r3
 8013428:	fb20 800b 	smlad	r0, r0, fp, r8
 801342c:	fb2c e202 	smlad	r2, ip, r2, lr
 8013430:	fb2c 110b 	smlad	r1, ip, fp, r1
 8013434:	42a6      	cmp	r6, r4
 8013436:	d183      	bne.n	8013340 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xb0>
 8013438:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801343a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801343e:	44a9      	add	r9, r5
 8013440:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013442:	9501      	str	r5, [sp, #4]
 8013444:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013446:	45ab      	cmp	fp, r5
 8013448:	f280 8204 	bge.w	8013854 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 801344c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801344e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013452:	eba5 050b 	sub.w	r5, r5, fp
 8013456:	08ad      	lsrs	r5, r5, #2
 8013458:	462e      	mov	r6, r5
 801345a:	950b      	str	r5, [sp, #44]	; 0x2c
 801345c:	464d      	mov	r5, r9
 801345e:	3601      	adds	r6, #1
 8013460:	00f7      	lsls	r7, r6, #3
 8013462:	960a      	str	r6, [sp, #40]	; 0x28
 8013464:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 8013468:	9709      	str	r7, [sp, #36]	; 0x24
 801346a:	f8d4 e000 	ldr.w	lr, [r4]
 801346e:	f8dc 7000 	ldr.w	r7, [ip]
 8013472:	f8d5 a000 	ldr.w	sl, [r5]
 8013476:	686e      	ldr	r6, [r5, #4]
 8013478:	fb2a 330e 	smlad	r3, sl, lr, r3
 801347c:	fb2a 0007 	smlad	r0, sl, r7, r0
 8013480:	fb26 220e 	smlad	r2, r6, lr, r2
 8013484:	fb26 1107 	smlad	r1, r6, r7, r1
 8013488:	6867      	ldr	r7, [r4, #4]
 801348a:	f10c 0c08 	add.w	ip, ip, #8
 801348e:	68ae      	ldr	r6, [r5, #8]
 8013490:	3408      	adds	r4, #8
 8013492:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8013496:	3510      	adds	r5, #16
 8013498:	f85c ac04 	ldr.w	sl, [ip, #-4]
 801349c:	fb26 3307 	smlad	r3, r6, r7, r3
 80134a0:	fb26 000a 	smlad	r0, r6, sl, r0
 80134a4:	fb2e 2207 	smlad	r2, lr, r7, r2
 80134a8:	fb2e 110a 	smlad	r1, lr, sl, r1
 80134ac:	4544      	cmp	r4, r8
 80134ae:	d1dc      	bne.n	801346a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 80134b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80134b2:	f10b 0b04 	add.w	fp, fp, #4
 80134b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80134b8:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 80134bc:	9c01      	ldr	r4, [sp, #4]
 80134be:	442c      	add	r4, r5
 80134c0:	9401      	str	r4, [sp, #4]
 80134c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80134c4:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 80134c8:	9f08      	ldr	r7, [sp, #32]
 80134ca:	455f      	cmp	r7, fp
 80134cc:	dd54      	ble.n	8013578 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 80134ce:	f9b8 5000 	ldrsh.w	r5, [r8]
 80134d2:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 80134d6:	f9b9 6000 	ldrsh.w	r6, [r9]
 80134da:	fb05 2204 	mla	r2, r5, r4, r2
 80134de:	fb06 3305 	mla	r3, r6, r5, r3
 80134e2:	9d01      	ldr	r5, [sp, #4]
 80134e4:	f9b5 5000 	ldrsh.w	r5, [r5]
 80134e8:	fb05 1104 	mla	r1, r5, r4, r1
 80134ec:	f10b 0401 	add.w	r4, fp, #1
 80134f0:	fb06 0005 	mla	r0, r6, r5, r0
 80134f4:	42a7      	cmp	r7, r4
 80134f6:	dd3a      	ble.n	801356e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 80134f8:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80134fc:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8013500:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8013504:	fb05 2204 	mla	r2, r5, r4, r2
 8013508:	fb06 3305 	mla	r3, r6, r5, r3
 801350c:	9d01      	ldr	r5, [sp, #4]
 801350e:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8013512:	fb05 1104 	mla	r1, r5, r4, r1
 8013516:	f10b 0402 	add.w	r4, fp, #2
 801351a:	fb06 0005 	mla	r0, r6, r5, r0
 801351e:	42a7      	cmp	r7, r4
 8013520:	dd25      	ble.n	801356e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8013522:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8013526:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 801352a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801352e:	fb05 2204 	mla	r2, r5, r4, r2
 8013532:	fb06 3305 	mla	r3, r6, r5, r3
 8013536:	9d01      	ldr	r5, [sp, #4]
 8013538:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 801353c:	fb05 1104 	mla	r1, r5, r4, r1
 8013540:	f10b 0403 	add.w	r4, fp, #3
 8013544:	fb06 0005 	mla	r0, r6, r5, r0
 8013548:	42a7      	cmp	r7, r4
 801354a:	dd10      	ble.n	801356e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 801354c:	9c01      	ldr	r4, [sp, #4]
 801354e:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8013552:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8013556:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 801355a:	fb04 3305 	mla	r3, r4, r5, r3
 801355e:	fb04 0006 	mla	r0, r4, r6, r0
 8013562:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 8013566:	fb05 2204 	mla	r2, r5, r4, r2
 801356a:	fb06 1104 	mla	r1, r6, r4, r1
 801356e:	9c08      	ldr	r4, [sp, #32]
 8013570:	eba4 0b0b 	sub.w	fp, r4, fp
 8013574:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 8013578:	9c02      	ldr	r4, [sp, #8]
 801357a:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 801357e:	2c15      	cmp	r4, #21
 8013580:	f340 80e8 	ble.w	8013754 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4c4>
 8013584:	1ea6      	subs	r6, r4, #2
 8013586:	2501      	movs	r5, #1
 8013588:	3c01      	subs	r4, #1
 801358a:	fa05 f606 	lsl.w	r6, r5, r6
 801358e:	9d03      	ldr	r5, [sp, #12]
 8013590:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8013594:	fb53 6305 	smmla	r3, r3, r5, r6
 8013598:	fb50 6005 	smmla	r0, r0, r5, r6
 801359c:	9d04      	ldr	r5, [sp, #16]
 801359e:	4123      	asrs	r3, r4
 80135a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80135a4:	443b      	add	r3, r7
 80135a6:	f303 0307 	ssat	r3, #8, r3
 80135aa:	4120      	asrs	r0, r4
 80135ac:	9c05      	ldr	r4, [sp, #20]
 80135ae:	4438      	add	r0, r7
 80135b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80135b4:	f300 0007 	ssat	r0, #8, r0
 80135b8:	9b06      	ldr	r3, [sp, #24]
 80135ba:	f803 0c01 	strb.w	r0, [r3, #-1]
 80135be:	9b02      	ldr	r3, [sp, #8]
 80135c0:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80135c4:	2b15      	cmp	r3, #21
 80135c6:	f340 80e5 	ble.w	8013794 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x504>
 80135ca:	1e9c      	subs	r4, r3, #2
 80135cc:	2001      	movs	r0, #1
 80135ce:	3b01      	subs	r3, #1
 80135d0:	fa00 f404 	lsl.w	r4, r0, r4
 80135d4:	9803      	ldr	r0, [sp, #12]
 80135d6:	6800      	ldr	r0, [r0, #0]
 80135d8:	fb52 4200 	smmla	r2, r2, r0, r4
 80135dc:	fb51 4100 	smmla	r1, r1, r0, r4
 80135e0:	9804      	ldr	r0, [sp, #16]
 80135e2:	411a      	asrs	r2, r3
 80135e4:	6805      	ldr	r5, [r0, #0]
 80135e6:	442a      	add	r2, r5
 80135e8:	f302 0207 	ssat	r2, #8, r2
 80135ec:	4119      	asrs	r1, r3
 80135ee:	9b05      	ldr	r3, [sp, #20]
 80135f0:	4429      	add	r1, r5
 80135f2:	701a      	strb	r2, [r3, #0]
 80135f4:	f301 0107 	ssat	r1, #8, r1
 80135f8:	9b06      	ldr	r3, [sp, #24]
 80135fa:	7019      	strb	r1, [r3, #0]
 80135fc:	9a07      	ldr	r2, [sp, #28]
 80135fe:	9b02      	ldr	r3, [sp, #8]
 8013600:	3208      	adds	r2, #8
 8013602:	3304      	adds	r3, #4
 8013604:	9207      	str	r2, [sp, #28]
 8013606:	9a03      	ldr	r2, [sp, #12]
 8013608:	9302      	str	r3, [sp, #8]
 801360a:	3208      	adds	r2, #8
 801360c:	9203      	str	r2, [sp, #12]
 801360e:	9a04      	ldr	r2, [sp, #16]
 8013610:	3208      	adds	r2, #8
 8013612:	9204      	str	r2, [sp, #16]
 8013614:	9a05      	ldr	r2, [sp, #20]
 8013616:	3202      	adds	r2, #2
 8013618:	9205      	str	r2, [sp, #20]
 801361a:	9a06      	ldr	r2, [sp, #24]
 801361c:	3202      	adds	r2, #2
 801361e:	9206      	str	r2, [sp, #24]
 8013620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013622:	4293      	cmp	r3, r2
 8013624:	f47f ae79 	bne.w	801331a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x8a>
 8013628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801362a:	46cb      	mov	fp, r9
 801362c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801362e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013632:	9229      	str	r2, [sp, #164]	; 0xa4
 8013634:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8013636:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801363a:	922a      	str	r2, [sp, #168]	; 0xa8
 801363c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801363e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8013642:	922b      	str	r2, [sp, #172]	; 0xac
 8013644:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013646:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801364a:	9215      	str	r2, [sp, #84]	; 0x54
 801364c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801364e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013652:	9216      	str	r2, [sp, #88]	; 0x58
 8013654:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013656:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801365a:	9328      	str	r3, [sp, #160]	; 0xa0
 801365c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801365e:	07db      	lsls	r3, r3, #31
 8013660:	d56f      	bpl.n	8013742 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8013662:	9a08      	ldr	r2, [sp, #32]
 8013664:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013666:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013668:	0896      	lsrs	r6, r2, #2
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 8013670:	f000 812e 	beq.w	80138d0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 8013674:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8013678:	463c      	mov	r4, r7
 801367a:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 801367e:	461a      	mov	r2, r3
 8013680:	f8db 5000 	ldr.w	r5, [fp]
 8013684:	f10b 0b08 	add.w	fp, fp, #8
 8013688:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 801368c:	f8d0 e000 	ldr.w	lr, [r0]
 8013690:	fb25 330e 	smlad	r3, r5, lr, r3
 8013694:	f8d4 e000 	ldr.w	lr, [r4]
 8013698:	fb25 220e 	smlad	r2, r5, lr, r2
 801369c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80136a0:	3408      	adds	r4, #8
 80136a2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80136a6:	3008      	adds	r0, #8
 80136a8:	fb21 330e 	smlad	r3, r1, lr, r3
 80136ac:	fb21 2205 	smlad	r2, r1, r5, r2
 80136b0:	45b3      	cmp	fp, r6
 80136b2:	d1e5      	bne.n	8013680 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3f0>
 80136b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80136b6:	4467      	add	r7, ip
 80136b8:	4461      	add	r1, ip
 80136ba:	910c      	str	r1, [sp, #48]	; 0x30
 80136bc:	9908      	ldr	r1, [sp, #32]
 80136be:	f011 0103 	ands.w	r1, r1, #3
 80136c2:	d01d      	beq.n	8013700 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80136c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136c6:	3901      	subs	r1, #1
 80136c8:	f9b6 0000 	ldrsh.w	r0, [r6]
 80136cc:	882c      	ldrh	r4, [r5, #0]
 80136ce:	b289      	uxth	r1, r1
 80136d0:	fb14 3300 	smlabb	r3, r4, r0, r3
 80136d4:	883c      	ldrh	r4, [r7, #0]
 80136d6:	fb14 2200 	smlabb	r2, r4, r0, r2
 80136da:	b189      	cbz	r1, 8013700 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80136dc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80136e0:	2901      	cmp	r1, #1
 80136e2:	886c      	ldrh	r4, [r5, #2]
 80136e4:	fb14 3300 	smlabb	r3, r4, r0, r3
 80136e8:	887c      	ldrh	r4, [r7, #2]
 80136ea:	fb14 2200 	smlabb	r2, r4, r0, r2
 80136ee:	d007      	beq.n	8013700 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80136f0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80136f4:	88a8      	ldrh	r0, [r5, #4]
 80136f6:	fb11 3300 	smlabb	r3, r1, r0, r3
 80136fa:	88b8      	ldrh	r0, [r7, #4]
 80136fc:	fb11 2200 	smlabb	r2, r1, r0, r2
 8013700:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013702:	f9b1 1000 	ldrsh.w	r1, [r1]
 8013706:	2915      	cmp	r1, #21
 8013708:	f340 80a6 	ble.w	8013858 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c8>
 801370c:	1e8d      	subs	r5, r1, #2
 801370e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8013710:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8013712:	3901      	subs	r1, #1
 8013714:	2601      	movs	r6, #1
 8013716:	6800      	ldr	r0, [r0, #0]
 8013718:	6824      	ldr	r4, [r4, #0]
 801371a:	40ae      	lsls	r6, r5
 801371c:	fb53 6500 	smmla	r5, r3, r0, r6
 8013720:	fb52 6300 	smmla	r3, r2, r0, r6
 8013724:	fa45 f201 	asr.w	r2, r5, r1
 8013728:	4422      	add	r2, r4
 801372a:	f302 0207 	ssat	r2, #8, r2
 801372e:	410b      	asrs	r3, r1
 8013730:	982b      	ldr	r0, [sp, #172]	; 0xac
 8013732:	4423      	add	r3, r4
 8013734:	f800 2b01 	strb.w	r2, [r0], #1
 8013738:	f303 0307 	ssat	r3, #8, r3
 801373c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801373e:	902b      	str	r0, [sp, #172]	; 0xac
 8013740:	7013      	strb	r3, [r2, #0]
 8013742:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8013746:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 801374a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801374c:	4418      	add	r0, r3
 801374e:	b01d      	add	sp, #116	; 0x74
 8013750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013754:	2c00      	cmp	r4, #0
 8013756:	dd34      	ble.n	80137c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x532>
 8013758:	9d03      	ldr	r5, [sp, #12]
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	9e04      	ldr	r6, [sp, #16]
 801375e:	0040      	lsls	r0, r0, #1
 8013760:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8013764:	f856 6c04 	ldr.w	r6, [r6, #-4]
 8013768:	fb53 6305 	smmla	r3, r3, r5, r6
 801376c:	fb50 6005 	smmla	r0, r0, r5, r6
 8013770:	4123      	asrs	r3, r4
 8013772:	f303 0307 	ssat	r3, #8, r3
 8013776:	4120      	asrs	r0, r4
 8013778:	9c05      	ldr	r4, [sp, #20]
 801377a:	f804 3c01 	strb.w	r3, [r4, #-1]
 801377e:	f300 0007 	ssat	r0, #8, r0
 8013782:	9b06      	ldr	r3, [sp, #24]
 8013784:	f803 0c01 	strb.w	r0, [r3, #-1]
 8013788:	9b02      	ldr	r3, [sp, #8]
 801378a:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801378e:	2b15      	cmp	r3, #21
 8013790:	f73f af1b 	bgt.w	80135ca <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8013794:	2b00      	cmp	r3, #0
 8013796:	dd36      	ble.n	8013806 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x576>
 8013798:	9803      	ldr	r0, [sp, #12]
 801379a:	0052      	lsls	r2, r2, #1
 801379c:	9c04      	ldr	r4, [sp, #16]
 801379e:	0049      	lsls	r1, r1, #1
 80137a0:	6800      	ldr	r0, [r0, #0]
 80137a2:	6824      	ldr	r4, [r4, #0]
 80137a4:	fb52 4200 	smmla	r2, r2, r0, r4
 80137a8:	fb51 4100 	smmla	r1, r1, r0, r4
 80137ac:	411a      	asrs	r2, r3
 80137ae:	f302 0207 	ssat	r2, #8, r2
 80137b2:	4119      	asrs	r1, r3
 80137b4:	9b05      	ldr	r3, [sp, #20]
 80137b6:	701a      	strb	r2, [r3, #0]
 80137b8:	f301 0107 	ssat	r1, #8, r1
 80137bc:	9b06      	ldr	r3, [sp, #24]
 80137be:	7019      	strb	r1, [r3, #0]
 80137c0:	e71c      	b.n	80135fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 80137c2:	f1c4 0401 	rsb	r4, r4, #1
 80137c6:	fa03 f504 	lsl.w	r5, r3, r4
 80137ca:	f305 051f 	ssat	r5, #32, r5
 80137ce:	9b03      	ldr	r3, [sp, #12]
 80137d0:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80137d4:	fb55 f516 	smmulr	r5, r5, r6
 80137d8:	40a0      	lsls	r0, r4
 80137da:	f300 001f 	ssat	r0, #32, r0
 80137de:	fb50 f016 	smmulr	r0, r0, r6
 80137e2:	9c04      	ldr	r4, [sp, #16]
 80137e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80137e8:	442b      	add	r3, r5
 80137ea:	f303 0307 	ssat	r3, #8, r3
 80137ee:	9d05      	ldr	r5, [sp, #20]
 80137f0:	f805 3c01 	strb.w	r3, [r5, #-1]
 80137f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80137f8:	4403      	add	r3, r0
 80137fa:	f303 0307 	ssat	r3, #8, r3
 80137fe:	9806      	ldr	r0, [sp, #24]
 8013800:	f800 3c01 	strb.w	r3, [r0, #-1]
 8013804:	e6db      	b.n	80135be <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32e>
 8013806:	f1c3 0301 	rsb	r3, r3, #1
 801380a:	fa02 f003 	lsl.w	r0, r2, r3
 801380e:	f300 001f 	ssat	r0, #32, r0
 8013812:	9a03      	ldr	r2, [sp, #12]
 8013814:	6814      	ldr	r4, [r2, #0]
 8013816:	fb50 f014 	smmulr	r0, r0, r4
 801381a:	fa01 f303 	lsl.w	r3, r1, r3
 801381e:	f303 021f 	ssat	r2, #32, r3
 8013822:	fb52 f214 	smmulr	r2, r2, r4
 8013826:	9904      	ldr	r1, [sp, #16]
 8013828:	680b      	ldr	r3, [r1, #0]
 801382a:	4403      	add	r3, r0
 801382c:	f303 0307 	ssat	r3, #8, r3
 8013830:	9805      	ldr	r0, [sp, #20]
 8013832:	7003      	strb	r3, [r0, #0]
 8013834:	680b      	ldr	r3, [r1, #0]
 8013836:	4413      	add	r3, r2
 8013838:	f303 0307 	ssat	r3, #8, r3
 801383c:	9a06      	ldr	r2, [sp, #24]
 801383e:	7013      	strb	r3, [r2, #0]
 8013840:	e6dc      	b.n	80135fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8013842:	f04f 0b00 	mov.w	fp, #0
 8013846:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013848:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801384a:	45ab      	cmp	fp, r5
 801384c:	9401      	str	r4, [sp, #4]
 801384e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013850:	f6ff adfc 	blt.w	801344c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8013854:	46a0      	mov	r8, r4
 8013856:	e637      	b.n	80134c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8013858:	2900      	cmp	r1, #0
 801385a:	dd1a      	ble.n	8013892 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x602>
 801385c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	0052      	lsls	r2, r2, #1
 8013862:	6804      	ldr	r4, [r0, #0]
 8013864:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8013866:	6805      	ldr	r5, [r0, #0]
 8013868:	fb53 5004 	smmla	r0, r3, r4, r5
 801386c:	fb52 5304 	smmla	r3, r2, r4, r5
 8013870:	fa40 f201 	asr.w	r2, r0, r1
 8013874:	f302 0207 	ssat	r2, #8, r2
 8013878:	982b      	ldr	r0, [sp, #172]	; 0xac
 801387a:	f800 2b01 	strb.w	r2, [r0], #1
 801387e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013880:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013884:	4113      	asrs	r3, r2
 8013886:	f303 0307 	ssat	r3, #8, r3
 801388a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801388c:	902b      	str	r0, [sp, #172]	; 0xac
 801388e:	7013      	strb	r3, [r2, #0]
 8013890:	e757      	b.n	8013742 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8013892:	f1c1 0101 	rsb	r1, r1, #1
 8013896:	408b      	lsls	r3, r1
 8013898:	f303 031f 	ssat	r3, #32, r3
 801389c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801389e:	6800      	ldr	r0, [r0, #0]
 80138a0:	fb53 f310 	smmulr	r3, r3, r0
 80138a4:	408a      	lsls	r2, r1
 80138a6:	f302 021f 	ssat	r2, #32, r2
 80138aa:	fb52 f210 	smmulr	r2, r2, r0
 80138ae:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80138b0:	6809      	ldr	r1, [r1, #0]
 80138b2:	440b      	add	r3, r1
 80138b4:	f303 0307 	ssat	r3, #8, r3
 80138b8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80138ba:	f801 3b01 	strb.w	r3, [r1], #1
 80138be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	4413      	add	r3, r2
 80138c4:	f303 0307 	ssat	r3, #8, r3
 80138c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138ca:	912b      	str	r1, [sp, #172]	; 0xac
 80138cc:	7013      	strb	r3, [r2, #0]
 80138ce:	e738      	b.n	8013742 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80138d0:	465e      	mov	r6, fp
 80138d2:	461a      	mov	r2, r3
 80138d4:	e6f2      	b.n	80136bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x42c>
 80138d6:	bf00      	nop

080138d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	b093      	sub	sp, #76	; 0x4c
 80138de:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80138e2:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 80138e6:	085d      	lsrs	r5, r3, #1
 80138e8:	930e      	str	r3, [sp, #56]	; 0x38
 80138ea:	9107      	str	r1, [sp, #28]
 80138ec:	920d      	str	r2, [sp, #52]	; 0x34
 80138ee:	9405      	str	r4, [sp, #20]
 80138f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80138f2:	f000 81fc 	beq.w	8013cee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 80138f6:	4616      	mov	r6, r2
 80138f8:	1e6a      	subs	r2, r5, #1
 80138fa:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80138fc:	460f      	mov	r7, r1
 80138fe:	b292      	uxth	r2, r2
 8013900:	f1a4 0310 	sub.w	r3, r4, #16
 8013904:	1d29      	adds	r1, r5, #4
 8013906:	f106 0a08 	add.w	sl, r6, #8
 801390a:	091b      	lsrs	r3, r3, #4
 801390c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013912:	3301      	adds	r3, #1
 8013914:	f102 0b02 	add.w	fp, r2, #2
 8013918:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801391a:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 801391e:	9509      	str	r5, [sp, #36]	; 0x24
 8013920:	3204      	adds	r2, #4
 8013922:	1ee5      	subs	r5, r4, #3
 8013924:	9202      	str	r2, [sp, #8]
 8013926:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013928:	9508      	str	r5, [sp, #32]
 801392a:	3208      	adds	r2, #8
 801392c:	9204      	str	r2, [sp, #16]
 801392e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013930:	3208      	adds	r2, #8
 8013932:	9201      	str	r2, [sp, #4]
 8013934:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013936:	3202      	adds	r2, #2
 8013938:	9203      	str	r2, [sp, #12]
 801393a:	019a      	lsls	r2, r3, #6
 801393c:	011b      	lsls	r3, r3, #4
 801393e:	920a      	str	r2, [sp, #40]	; 0x28
 8013940:	930b      	str	r3, [sp, #44]	; 0x2c
 8013942:	1f23      	subs	r3, r4, #4
 8013944:	930c      	str	r3, [sp, #48]	; 0x30
 8013946:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 801394a:	9905      	ldr	r1, [sp, #20]
 801394c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8013950:	9311      	str	r3, [sp, #68]	; 0x44
 8013952:	290f      	cmp	r1, #15
 8013954:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013956:	9211      	str	r2, [sp, #68]	; 0x44
 8013958:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801395a:	9c07      	ldr	r4, [sp, #28]
 801395c:	f340 819c 	ble.w	8013c98 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 8013960:	4601      	mov	r1, r0
 8013962:	f8d4 c000 	ldr.w	ip, [r4]
 8013966:	680e      	ldr	r6, [r1, #0]
 8013968:	fb26 330c 	smlad	r3, r6, ip, r3
 801396c:	684d      	ldr	r5, [r1, #4]
 801396e:	fb25 220c 	smlad	r2, r5, ip, r2
 8013972:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8013976:	688e      	ldr	r6, [r1, #8]
 8013978:	fb26 360c 	smlad	r6, r6, ip, r3
 801397c:	68cd      	ldr	r5, [r1, #12]
 801397e:	fb25 250c 	smlad	r5, r5, ip, r2
 8013982:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8013986:	690b      	ldr	r3, [r1, #16]
 8013988:	fb23 660c 	smlad	r6, r3, ip, r6
 801398c:	694a      	ldr	r2, [r1, #20]
 801398e:	fb22 550c 	smlad	r5, r2, ip, r5
 8013992:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8013996:	698b      	ldr	r3, [r1, #24]
 8013998:	fb23 630c 	smlad	r3, r3, ip, r6
 801399c:	69ca      	ldr	r2, [r1, #28]
 801399e:	fb22 520c 	smlad	r2, r2, ip, r5
 80139a2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80139a6:	6a0e      	ldr	r6, [r1, #32]
 80139a8:	fb26 330c 	smlad	r3, r6, ip, r3
 80139ac:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80139ae:	fb25 220c 	smlad	r2, r5, ip, r2
 80139b2:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80139b6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80139b8:	fb26 360c 	smlad	r6, r6, ip, r3
 80139bc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80139be:	fb25 250c 	smlad	r5, r5, ip, r2
 80139c2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80139c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80139c8:	fb23 660c 	smlad	r6, r3, ip, r6
 80139cc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80139ce:	fb22 550c 	smlad	r5, r2, ip, r5
 80139d2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 80139d6:	3140      	adds	r1, #64	; 0x40
 80139d8:	f851 3c08 	ldr.w	r3, [r1, #-8]
 80139dc:	3420      	adds	r4, #32
 80139de:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80139e2:	fb23 630c 	smlad	r3, r3, ip, r6
 80139e6:	fb22 520c 	smlad	r2, r2, ip, r5
 80139ea:	42bc      	cmp	r4, r7
 80139ec:	d1b9      	bne.n	8013962 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 80139ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139f0:	463c      	mov	r4, r7
 80139f2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80139f6:	4408      	add	r0, r1
 80139f8:	9908      	ldr	r1, [sp, #32]
 80139fa:	458e      	cmp	lr, r1
 80139fc:	da25      	bge.n	8013a4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 80139fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a00:	eba1 090e 	sub.w	r9, r1, lr
 8013a04:	4601      	mov	r1, r0
 8013a06:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8013a0a:	f109 0501 	add.w	r5, r9, #1
 8013a0e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8013a12:	9506      	str	r5, [sp, #24]
 8013a14:	6825      	ldr	r5, [r4, #0]
 8013a16:	680e      	ldr	r6, [r1, #0]
 8013a18:	fb26 3305 	smlad	r3, r6, r5, r3
 8013a1c:	684e      	ldr	r6, [r1, #4]
 8013a1e:	fb26 2505 	smlad	r5, r6, r5, r2
 8013a22:	6866      	ldr	r6, [r4, #4]
 8013a24:	3110      	adds	r1, #16
 8013a26:	f851 cc08 	ldr.w	ip, [r1, #-8]
 8013a2a:	3408      	adds	r4, #8
 8013a2c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013a30:	fb2c 3306 	smlad	r3, ip, r6, r3
 8013a34:	fb22 5206 	smlad	r2, r2, r6, r5
 8013a38:	45a0      	cmp	r8, r4
 8013a3a:	d1eb      	bne.n	8013a14 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 8013a3c:	9906      	ldr	r1, [sp, #24]
 8013a3e:	f10e 0e04 	add.w	lr, lr, #4
 8013a42:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8013a46:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8013a4a:	9e05      	ldr	r6, [sp, #20]
 8013a4c:	4576      	cmp	r6, lr
 8013a4e:	dd30      	ble.n	8013ab2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 8013a50:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013a54:	8805      	ldrh	r5, [r0, #0]
 8013a56:	fb15 3301 	smlabb	r3, r5, r1, r3
 8013a5a:	8845      	ldrh	r5, [r0, #2]
 8013a5c:	fb11 2205 	smlabb	r2, r1, r5, r2
 8013a60:	f10e 0101 	add.w	r1, lr, #1
 8013a64:	428e      	cmp	r6, r1
 8013a66:	dd1f      	ble.n	8013aa8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8013a68:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013a6c:	8885      	ldrh	r5, [r0, #4]
 8013a6e:	fb15 3301 	smlabb	r3, r5, r1, r3
 8013a72:	88c5      	ldrh	r5, [r0, #6]
 8013a74:	fb11 2205 	smlabb	r2, r1, r5, r2
 8013a78:	f10e 0102 	add.w	r1, lr, #2
 8013a7c:	428e      	cmp	r6, r1
 8013a7e:	dd13      	ble.n	8013aa8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8013a80:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013a84:	8905      	ldrh	r5, [r0, #8]
 8013a86:	fb15 3301 	smlabb	r3, r5, r1, r3
 8013a8a:	8945      	ldrh	r5, [r0, #10]
 8013a8c:	fb11 2205 	smlabb	r2, r1, r5, r2
 8013a90:	f10e 0103 	add.w	r1, lr, #3
 8013a94:	428e      	cmp	r6, r1
 8013a96:	dd07      	ble.n	8013aa8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8013a98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013a9c:	8984      	ldrh	r4, [r0, #12]
 8013a9e:	fb14 3301 	smlabb	r3, r4, r1, r3
 8013aa2:	89c4      	ldrh	r4, [r0, #14]
 8013aa4:	fb11 2204 	smlabb	r2, r1, r4, r2
 8013aa8:	9905      	ldr	r1, [sp, #20]
 8013aaa:	eba1 0e0e 	sub.w	lr, r1, lr
 8013aae:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8013ab2:	9902      	ldr	r1, [sp, #8]
 8013ab4:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 8013ab8:	2d15      	cmp	r5, #21
 8013aba:	f340 80b0 	ble.w	8013c1e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8013abe:	9e04      	ldr	r6, [sp, #16]
 8013ac0:	1eac      	subs	r4, r5, #2
 8013ac2:	2101      	movs	r1, #1
 8013ac4:	3d01      	subs	r5, #1
 8013ac6:	f1a6 0e04 	sub.w	lr, r6, #4
 8013aca:	fa01 f404 	lsl.w	r4, r1, r4
 8013ace:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8013ad2:	fb53 4401 	smmla	r4, r3, r1, r4
 8013ad6:	9b01      	ldr	r3, [sp, #4]
 8013ad8:	fa44 f505 	asr.w	r5, r4, r5
 8013adc:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8013ae0:	1f1e      	subs	r6, r3, #4
 8013ae2:	442c      	add	r4, r5
 8013ae4:	f304 0407 	ssat	r4, #8, r4
 8013ae8:	f80b 4c02 	strb.w	r4, [fp, #-2]
 8013aec:	9b03      	ldr	r3, [sp, #12]
 8013aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013af2:	2b15      	cmp	r3, #21
 8013af4:	f340 8085 	ble.w	8013c02 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 8013af8:	1e9c      	subs	r4, r3, #2
 8013afa:	2501      	movs	r5, #1
 8013afc:	3b01      	subs	r3, #1
 8013afe:	6836      	ldr	r6, [r6, #0]
 8013b00:	f8de 1000 	ldr.w	r1, [lr]
 8013b04:	fa05 f404 	lsl.w	r4, r5, r4
 8013b08:	fb52 4201 	smmla	r2, r2, r1, r4
 8013b0c:	411a      	asrs	r2, r3
 8013b0e:	4432      	add	r2, r6
 8013b10:	f302 0207 	ssat	r2, #8, r2
 8013b14:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8013b18:	9b02      	ldr	r3, [sp, #8]
 8013b1a:	f10b 0b02 	add.w	fp, fp, #2
 8013b1e:	f10a 0a08 	add.w	sl, sl, #8
 8013b22:	3304      	adds	r3, #4
 8013b24:	9302      	str	r3, [sp, #8]
 8013b26:	9b04      	ldr	r3, [sp, #16]
 8013b28:	3308      	adds	r3, #8
 8013b2a:	9304      	str	r3, [sp, #16]
 8013b2c:	9b01      	ldr	r3, [sp, #4]
 8013b2e:	3308      	adds	r3, #8
 8013b30:	9301      	str	r3, [sp, #4]
 8013b32:	9b03      	ldr	r3, [sp, #12]
 8013b34:	3304      	adds	r3, #4
 8013b36:	9303      	str	r3, [sp, #12]
 8013b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b3a:	459b      	cmp	fp, r3
 8013b3c:	f47f af03 	bne.w	8013946 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 8013b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013b44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013b48:	921e      	str	r2, [sp, #120]	; 0x78
 8013b4a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013b4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013b50:	921f      	str	r2, [sp, #124]	; 0x7c
 8013b52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013b54:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013b58:	9220      	str	r2, [sp, #128]	; 0x80
 8013b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b5c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013b60:	920d      	str	r2, [sp, #52]	; 0x34
 8013b62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b64:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8013b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b6a:	07db      	lsls	r3, r3, #31
 8013b6c:	d545      	bpl.n	8013bfa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 8013b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	9b05      	ldr	r3, [sp, #20]
 8013b74:	089e      	lsrs	r6, r3, #2
 8013b76:	d014      	beq.n	8013ba2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 8013b78:	00f7      	lsls	r7, r6, #3
 8013b7a:	9b07      	ldr	r3, [sp, #28]
 8013b7c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8013b80:	6805      	ldr	r5, [r0, #0]
 8013b82:	3008      	adds	r0, #8
 8013b84:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8013b88:	f8d3 c000 	ldr.w	ip, [r3]
 8013b8c:	fb25 220c 	smlad	r2, r5, ip, r2
 8013b90:	685d      	ldr	r5, [r3, #4]
 8013b92:	3308      	adds	r3, #8
 8013b94:	fb24 2205 	smlad	r2, r4, r5, r2
 8013b98:	4286      	cmp	r6, r0
 8013b9a:	d1f1      	bne.n	8013b80 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 8013b9c:	9b07      	ldr	r3, [sp, #28]
 8013b9e:	443b      	add	r3, r7
 8013ba0:	9307      	str	r3, [sp, #28]
 8013ba2:	9b05      	ldr	r3, [sp, #20]
 8013ba4:	f013 0303 	ands.w	r3, r3, #3
 8013ba8:	d011      	beq.n	8013bce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8013baa:	3b01      	subs	r3, #1
 8013bac:	9e07      	ldr	r6, [sp, #28]
 8013bae:	8804      	ldrh	r4, [r0, #0]
 8013bb0:	8835      	ldrh	r5, [r6, #0]
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	fb15 2204 	smlabb	r2, r5, r4, r2
 8013bb8:	b14b      	cbz	r3, 8013bce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8013bba:	8845      	ldrh	r5, [r0, #2]
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	8874      	ldrh	r4, [r6, #2]
 8013bc0:	fb15 2204 	smlabb	r2, r5, r4, r2
 8013bc4:	d003      	beq.n	8013bce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8013bc6:	8880      	ldrh	r0, [r0, #4]
 8013bc8:	88b3      	ldrh	r3, [r6, #4]
 8013bca:	fb10 2203 	smlabb	r2, r0, r3, r2
 8013bce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013bd4:	2b15      	cmp	r3, #21
 8013bd6:	dd62      	ble.n	8013c9e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 8013bd8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8013bda:	1e9e      	subs	r6, r3, #2
 8013bdc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013bde:	3b01      	subs	r3, #1
 8013be0:	6825      	ldr	r5, [r4, #0]
 8013be2:	2401      	movs	r4, #1
 8013be4:	6800      	ldr	r0, [r0, #0]
 8013be6:	40b4      	lsls	r4, r6
 8013be8:	fb52 4200 	smmla	r2, r2, r0, r4
 8013bec:	fa42 f303 	asr.w	r3, r2, r3
 8013bf0:	442b      	add	r3, r5
 8013bf2:	f303 0307 	ssat	r3, #8, r3
 8013bf6:	f801 3b01 	strb.w	r3, [r1], #1
 8013bfa:	4608      	mov	r0, r1
 8013bfc:	b013      	add	sp, #76	; 0x4c
 8013bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	dd21      	ble.n	8013c4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 8013c06:	f8de 1000 	ldr.w	r1, [lr]
 8013c0a:	0052      	lsls	r2, r2, #1
 8013c0c:	6834      	ldr	r4, [r6, #0]
 8013c0e:	fb52 4201 	smmla	r2, r2, r1, r4
 8013c12:	411a      	asrs	r2, r3
 8013c14:	f302 0307 	ssat	r3, #8, r2
 8013c18:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8013c1c:	e77c      	b.n	8013b18 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8013c1e:	2d00      	cmp	r5, #0
 8013c20:	dd24      	ble.n	8013c6c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 8013c22:	9e04      	ldr	r6, [sp, #16]
 8013c24:	005b      	lsls	r3, r3, #1
 8013c26:	9c01      	ldr	r4, [sp, #4]
 8013c28:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8013c2c:	f1a6 0e04 	sub.w	lr, r6, #4
 8013c30:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8013c34:	fb53 4301 	smmla	r3, r3, r1, r4
 8013c38:	9c01      	ldr	r4, [sp, #4]
 8013c3a:	fa43 f505 	asr.w	r5, r3, r5
 8013c3e:	1f26      	subs	r6, r4, #4
 8013c40:	f305 0507 	ssat	r5, #8, r5
 8013c44:	f80b 5c02 	strb.w	r5, [fp, #-2]
 8013c48:	e750      	b.n	8013aec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 8013c4a:	f1c3 0301 	rsb	r3, r3, #1
 8013c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c52:	f303 031f 	ssat	r3, #32, r3
 8013c56:	f8de 2000 	ldr.w	r2, [lr]
 8013c5a:	fb53 f312 	smmulr	r3, r3, r2
 8013c5e:	6832      	ldr	r2, [r6, #0]
 8013c60:	441a      	add	r2, r3
 8013c62:	f302 0207 	ssat	r2, #8, r2
 8013c66:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8013c6a:	e755      	b.n	8013b18 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8013c6c:	f1c5 0501 	rsb	r5, r5, #1
 8013c70:	40ab      	lsls	r3, r5
 8013c72:	f303 031f 	ssat	r3, #32, r3
 8013c76:	9904      	ldr	r1, [sp, #16]
 8013c78:	f1a1 0e04 	sub.w	lr, r1, #4
 8013c7c:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8013c80:	fb53 f111 	smmulr	r1, r3, r1
 8013c84:	9c01      	ldr	r4, [sp, #4]
 8013c86:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8013c8a:	1f26      	subs	r6, r4, #4
 8013c8c:	440b      	add	r3, r1
 8013c8e:	f303 0307 	ssat	r3, #8, r3
 8013c92:	f80b 3c02 	strb.w	r3, [fp, #-2]
 8013c96:	e729      	b.n	8013aec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 8013c98:	f04f 0e00 	mov.w	lr, #0
 8013c9c:	e6ac      	b.n	80139f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	dd10      	ble.n	8013cc4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 8013ca2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013ca4:	0052      	lsls	r2, r2, #1
 8013ca6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8013ca8:	6800      	ldr	r0, [r0, #0]
 8013caa:	6824      	ldr	r4, [r4, #0]
 8013cac:	fb52 4200 	smmla	r2, r2, r0, r4
 8013cb0:	fa42 f303 	asr.w	r3, r2, r3
 8013cb4:	f303 0307 	ssat	r3, #8, r3
 8013cb8:	f801 3b01 	strb.w	r3, [r1], #1
 8013cbc:	4608      	mov	r0, r1
 8013cbe:	b013      	add	sp, #76	; 0x4c
 8013cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc4:	f1c3 0301 	rsb	r3, r3, #1
 8013cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8013ccc:	f303 031f 	ssat	r3, #32, r3
 8013cd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	fb53 f312 	smmulr	r3, r3, r2
 8013cd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013cda:	6812      	ldr	r2, [r2, #0]
 8013cdc:	4413      	add	r3, r2
 8013cde:	f303 0307 	ssat	r3, #8, r3
 8013ce2:	f801 3b01 	strb.w	r3, [r1], #1
 8013ce6:	4608      	mov	r0, r1
 8013ce8:	b013      	add	sp, #76	; 0x4c
 8013cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cee:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013cf0:	e73a      	b.n	8013b68 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 8013cf2:	bf00      	nop

08013cf4 <st_int8_avepool>:
 8013cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf8:	b095      	sub	sp, #84	; 0x54
 8013cfa:	4699      	mov	r9, r3
 8013cfc:	4692      	mov	sl, r2
 8013cfe:	ee80 6a20 	vdiv.f32	s12, s0, s1
 8013d02:	9102      	str	r1, [sp, #8]
 8013d04:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8013d08:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8013d0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8013d0e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8013d12:	930d      	str	r3, [sp, #52]	; 0x34
 8013d14:	9110      	str	r1, [sp, #64]	; 0x40
 8013d16:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8013d1a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8013d1e:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8013d22:	9309      	str	r3, [sp, #36]	; 0x24
 8013d24:	9104      	str	r1, [sp, #16]
 8013d26:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8013d2a:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 8013d2e:	930e      	str	r3, [sp, #56]	; 0x38
 8013d30:	ee03 1a90 	vmov	s7, r1
 8013d34:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 8013d38:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013d3c:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8013d40:	9211      	str	r2, [sp, #68]	; 0x44
 8013d42:	2a00      	cmp	r2, #0
 8013d44:	f000 80b3 	beq.w	8013eae <st_int8_avepool+0x1ba>
 8013d48:	eeb4 0a60 	vcmp.f32	s0, s1
 8013d4c:	ee03 1a10 	vmov	s6, r1
 8013d50:	4683      	mov	fp, r0
 8013d52:	ee13 1a90 	vmov	r1, s7
 8013d56:	ee13 0a10 	vmov	r0, s6
 8013d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5e:	bf0c      	ite	eq
 8013d60:	2201      	moveq	r2, #1
 8013d62:	2200      	movne	r2, #0
 8013d64:	4281      	cmp	r1, r0
 8013d66:	bf14      	ite	ne
 8013d68:	2200      	movne	r2, #0
 8013d6a:	f002 0201 	andeq.w	r2, r2, #1
 8013d6e:	f1b8 0f01 	cmp.w	r8, #1
 8013d72:	9201      	str	r2, [sp, #4]
 8013d74:	f040 80c2 	bne.w	8013efc <st_int8_avepool+0x208>
 8013d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d7a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8013ef4 <st_int8_avepool+0x200>
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8013ef8 <st_int8_avepool+0x204>
 8013d84:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	1a89      	subs	r1, r1, r2
 8013d8c:	4252      	negs	r2, r2
 8013d8e:	9306      	str	r3, [sp, #24]
 8013d90:	b293      	uxth	r3, r2
 8013d92:	2200      	movs	r2, #0
 8013d94:	910d      	str	r1, [sp, #52]	; 0x34
 8013d96:	930c      	str	r3, [sp, #48]	; 0x30
 8013d98:	4613      	mov	r3, r2
 8013d9a:	9904      	ldr	r1, [sp, #16]
 8013d9c:	2900      	cmp	r1, #0
 8013d9e:	f000 80a6 	beq.w	8013eee <st_int8_avepool+0x1fa>
 8013da2:	b292      	uxth	r2, r2
 8013da4:	2100      	movs	r1, #0
 8013da6:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 8013daa:	9207      	str	r2, [sp, #28]
 8013dac:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8013db0:	9a04      	ldr	r2, [sp, #16]
 8013db2:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8013db6:	4688      	mov	r8, r1
 8013db8:	fb02 f303 	mul.w	r3, r2, r3
 8013dbc:	9a06      	ldr	r2, [sp, #24]
 8013dbe:	9308      	str	r3, [sp, #32]
 8013dc0:	fa0f fe82 	sxth.w	lr, r2
 8013dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	b21b      	sxth	r3, r3
 8013dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dce:	9303      	str	r3, [sp, #12]
 8013dd0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013dd4:	9305      	str	r3, [sp, #20]
 8013dd6:	b28b      	uxth	r3, r1
 8013dd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013dda:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8013dde:	930a      	str	r3, [sp, #40]	; 0x28
 8013de0:	4570      	cmp	r0, lr
 8013de2:	9b08      	ldr	r3, [sp, #32]
 8013de4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8013de8:	4498      	add	r8, r3
 8013dea:	da79      	bge.n	8013ee0 <st_int8_avepool+0x1ec>
 8013dec:	2700      	movs	r7, #0
 8013dee:	46bc      	mov	ip, r7
 8013df0:	42a6      	cmp	r6, r4
 8013df2:	da17      	bge.n	8013e24 <st_int8_avepool+0x130>
 8013df4:	43c5      	mvns	r5, r0
 8013df6:	4548      	cmp	r0, r9
 8013df8:	fb0a f200 	mul.w	r2, sl, r0
 8013dfc:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8013e00:	da10      	bge.n	8013e24 <st_int8_avepool+0x130>
 8013e02:	4432      	add	r2, r6
 8013e04:	4633      	mov	r3, r6
 8013e06:	445a      	add	r2, fp
 8013e08:	0419      	lsls	r1, r3, #16
 8013e0a:	d406      	bmi.n	8013e1a <st_int8_avepool+0x126>
 8013e0c:	b12d      	cbz	r5, 8013e1a <st_int8_avepool+0x126>
 8013e0e:	4553      	cmp	r3, sl
 8013e10:	da03      	bge.n	8013e1a <st_int8_avepool+0x126>
 8013e12:	f992 1000 	ldrsb.w	r1, [r2]
 8013e16:	3701      	adds	r7, #1
 8013e18:	448c      	add	ip, r1
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	3201      	adds	r2, #1
 8013e1e:	b219      	sxth	r1, r3
 8013e20:	42a1      	cmp	r1, r4
 8013e22:	dbf1      	blt.n	8013e08 <st_int8_avepool+0x114>
 8013e24:	3001      	adds	r0, #1
 8013e26:	b200      	sxth	r0, r0
 8013e28:	4570      	cmp	r0, lr
 8013e2a:	dbe1      	blt.n	8013df0 <st_int8_avepool+0xfc>
 8013e2c:	9b01      	ldr	r3, [sp, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d140      	bne.n	8013eb4 <st_int8_avepool+0x1c0>
 8013e32:	ee07 ca90 	vmov	s15, ip
 8013e36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013e3a:	ee07 7a90 	vmov	s15, r7
 8013e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e46:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013e4a:	eeb0 7a64 	vmov.f32	s14, s9
 8013e4e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013e52:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5a:	fe65 7a25 	vselge.f32	s15, s10, s11
 8013e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e66:	ee17 3a90 	vmov	r3, s15
 8013e6a:	f303 0307 	ssat	r3, #8, r3
 8013e6e:	9a02      	ldr	r2, [sp, #8]
 8013e70:	f802 3008 	strb.w	r3, [r2, r8]
 8013e74:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013e76:	9b05      	ldr	r3, [sp, #20]
 8013e78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e7a:	4403      	add	r3, r0
 8013e7c:	9a03      	ldr	r2, [sp, #12]
 8013e7e:	3101      	adds	r1, #1
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	4402      	add	r2, r0
 8013e84:	b209      	sxth	r1, r1
 8013e86:	9305      	str	r3, [sp, #20]
 8013e88:	b292      	uxth	r2, r2
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	4688      	mov	r8, r1
 8013e8e:	9203      	str	r2, [sp, #12]
 8013e90:	428b      	cmp	r3, r1
 8013e92:	dca0      	bgt.n	8013dd6 <st_int8_avepool+0xe2>
 8013e94:	9a07      	ldr	r2, [sp, #28]
 8013e96:	9b06      	ldr	r3, [sp, #24]
 8013e98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013e9a:	3201      	adds	r2, #1
 8013e9c:	440b      	add	r3, r1
 8013e9e:	b212      	sxth	r2, r2
 8013ea0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	4291      	cmp	r1, r2
 8013ea6:	9306      	str	r3, [sp, #24]
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	f73f af76 	bgt.w	8013d9a <st_int8_avepool+0xa6>
 8013eae:	b015      	add	sp, #84	; 0x54
 8013eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb4:	f1bc 0f00 	cmp.w	ip, #0
 8013eb8:	db09      	blt.n	8013ece <st_int8_avepool+0x1da>
 8013eba:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 8013ebe:	fbb3 f7f7 	udiv	r7, r3, r7
 8013ec2:	f307 0307 	ssat	r3, #8, r7
 8013ec6:	9a02      	ldr	r2, [sp, #8]
 8013ec8:	f802 3008 	strb.w	r3, [r2, r8]
 8013ecc:	e7d2      	b.n	8013e74 <st_int8_avepool+0x180>
 8013ece:	2f00      	cmp	r7, #0
 8013ed0:	463b      	mov	r3, r7
 8013ed2:	bfb8      	it	lt
 8013ed4:	1c7b      	addlt	r3, r7, #1
 8013ed6:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8013eda:	fb93 f7f7 	sdiv	r7, r3, r7
 8013ede:	e7f0      	b.n	8013ec2 <st_int8_avepool+0x1ce>
 8013ee0:	9b01      	ldr	r3, [sp, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f040 80df 	bne.w	80140a6 <st_int8_avepool+0x3b2>
 8013ee8:	eef0 7a62 	vmov.f32	s15, s5
 8013eec:	e7ab      	b.n	8013e46 <st_int8_avepool+0x152>
 8013eee:	b293      	uxth	r3, r2
 8013ef0:	9307      	str	r3, [sp, #28]
 8013ef2:	e7cf      	b.n	8013e94 <st_int8_avepool+0x1a0>
 8013ef4:	befffffc 	.word	0xbefffffc
 8013ef8:	7fc00000 	.word	0x7fc00000
 8013efc:	425b      	negs	r3, r3
 8013efe:	2200      	movs	r2, #0
 8013f00:	9904      	ldr	r1, [sp, #16]
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	f8cd b00c 	str.w	fp, [sp, #12]
 8013f08:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8013ef4 <st_int8_avepool+0x200>
 8013f0c:	46d3      	mov	fp, sl
 8013f0e:	9308      	str	r3, [sp, #32]
 8013f10:	46ca      	mov	sl, r9
 8013f12:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8013ef8 <st_int8_avepool+0x204>
 8013f16:	4613      	mov	r3, r2
 8013f18:	2900      	cmp	r1, #0
 8013f1a:	f000 80a3 	beq.w	8014064 <st_int8_avepool+0x370>
 8013f1e:	b292      	uxth	r2, r2
 8013f20:	2100      	movs	r1, #0
 8013f22:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8013f26:	920c      	str	r2, [sp, #48]	; 0x30
 8013f28:	9a04      	ldr	r2, [sp, #16]
 8013f2a:	fb03 f302 	mul.w	r3, r3, r2
 8013f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f32:	4253      	negs	r3, r2
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	9306      	str	r3, [sp, #24]
 8013f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f3a:	1a9b      	subs	r3, r3, r2
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	9307      	str	r3, [sp, #28]
 8013f40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f44:	4413      	add	r3, r2
 8013f46:	fa0f fe83 	sxth.w	lr, r3
 8013f4a:	b213      	sxth	r3, r2
 8013f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f4e:	460b      	mov	r3, r1
 8013f50:	f1b8 0f00 	cmp.w	r8, #0
 8013f54:	f000 80a4 	beq.w	80140a0 <st_int8_avepool+0x3ac>
 8013f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f5a:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 8013f5e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8013f62:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8013f66:	4413      	add	r3, r2
 8013f68:	b28a      	uxth	r2, r1
 8013f6a:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8013f6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013f70:	9a02      	ldr	r2, [sp, #8]
 8013f72:	fb08 2303 	mla	r3, r8, r3, r2
 8013f76:	9312      	str	r3, [sp, #72]	; 0x48
 8013f78:	2300      	movs	r3, #0
 8013f7a:	4699      	mov	r9, r3
 8013f7c:	9305      	str	r3, [sp, #20]
 8013f7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f80:	4570      	cmp	r0, lr
 8013f82:	f280 8088 	bge.w	8014096 <st_int8_avepool+0x3a2>
 8013f86:	2700      	movs	r7, #0
 8013f88:	46bc      	mov	ip, r7
 8013f8a:	42ae      	cmp	r6, r5
 8013f8c:	da1a      	bge.n	8013fc4 <st_int8_avepool+0x2d0>
 8013f8e:	43c4      	mvns	r4, r0
 8013f90:	4550      	cmp	r0, sl
 8013f92:	fb0b f300 	mul.w	r3, fp, r0
 8013f96:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8013f9a:	da13      	bge.n	8013fc4 <st_int8_avepool+0x2d0>
 8013f9c:	199a      	adds	r2, r3, r6
 8013f9e:	9b03      	ldr	r3, [sp, #12]
 8013fa0:	fb08 9202 	mla	r2, r8, r2, r9
 8013fa4:	441a      	add	r2, r3
 8013fa6:	4633      	mov	r3, r6
 8013fa8:	0419      	lsls	r1, r3, #16
 8013faa:	d406      	bmi.n	8013fba <st_int8_avepool+0x2c6>
 8013fac:	b12c      	cbz	r4, 8013fba <st_int8_avepool+0x2c6>
 8013fae:	459b      	cmp	fp, r3
 8013fb0:	dd03      	ble.n	8013fba <st_int8_avepool+0x2c6>
 8013fb2:	f992 1000 	ldrsb.w	r1, [r2]
 8013fb6:	3701      	adds	r7, #1
 8013fb8:	448c      	add	ip, r1
 8013fba:	3301      	adds	r3, #1
 8013fbc:	4442      	add	r2, r8
 8013fbe:	b219      	sxth	r1, r3
 8013fc0:	42a9      	cmp	r1, r5
 8013fc2:	dbf1      	blt.n	8013fa8 <st_int8_avepool+0x2b4>
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	b200      	sxth	r0, r0
 8013fc8:	4570      	cmp	r0, lr
 8013fca:	dbde      	blt.n	8013f8a <st_int8_avepool+0x296>
 8013fcc:	9b01      	ldr	r3, [sp, #4]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d14b      	bne.n	801406a <st_int8_avepool+0x376>
 8013fd2:	ee07 ca90 	vmov	s15, ip
 8013fd6:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8013fda:	ee07 7a90 	vmov	s15, r7
 8013fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013fe2:	eec2 7a87 	vdiv.f32	s15, s5, s14
 8013fe6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013fea:	eeb0 7a44 	vmov.f32	s14, s8
 8013fee:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013ff2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8013ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014006:	ee17 3a90 	vmov	r3, s15
 801400a:	f303 0307 	ssat	r3, #8, r3
 801400e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014010:	f802 3009 	strb.w	r3, [r2, r9]
 8014014:	9b05      	ldr	r3, [sp, #20]
 8014016:	3301      	adds	r3, #1
 8014018:	b21b      	sxth	r3, r3
 801401a:	4543      	cmp	r3, r8
 801401c:	4699      	mov	r9, r3
 801401e:	9305      	str	r3, [sp, #20]
 8014020:	dbad      	blt.n	8013f7e <st_int8_avepool+0x28a>
 8014022:	9a06      	ldr	r2, [sp, #24]
 8014024:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014028:	4402      	add	r2, r0
 801402a:	9b07      	ldr	r3, [sp, #28]
 801402c:	3101      	adds	r1, #1
 801402e:	b292      	uxth	r2, r2
 8014030:	4403      	add	r3, r0
 8014032:	b209      	sxth	r1, r1
 8014034:	9206      	str	r2, [sp, #24]
 8014036:	b29b      	uxth	r3, r3
 8014038:	9a04      	ldr	r2, [sp, #16]
 801403a:	9307      	str	r3, [sp, #28]
 801403c:	460b      	mov	r3, r1
 801403e:	4291      	cmp	r1, r2
 8014040:	db86      	blt.n	8013f50 <st_int8_avepool+0x25c>
 8014042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014044:	9b08      	ldr	r3, [sp, #32]
 8014046:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014048:	3201      	adds	r2, #1
 801404a:	440b      	add	r3, r1
 801404c:	b212      	sxth	r2, r2
 801404e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014050:	b29b      	uxth	r3, r3
 8014052:	4291      	cmp	r1, r2
 8014054:	9308      	str	r3, [sp, #32]
 8014056:	4613      	mov	r3, r2
 8014058:	f77f af29 	ble.w	8013eae <st_int8_avepool+0x1ba>
 801405c:	9904      	ldr	r1, [sp, #16]
 801405e:	2900      	cmp	r1, #0
 8014060:	f47f af5d 	bne.w	8013f1e <st_int8_avepool+0x22a>
 8014064:	b293      	uxth	r3, r2
 8014066:	930c      	str	r3, [sp, #48]	; 0x30
 8014068:	e7eb      	b.n	8014042 <st_int8_avepool+0x34e>
 801406a:	f1bc 0f00 	cmp.w	ip, #0
 801406e:	db09      	blt.n	8014084 <st_int8_avepool+0x390>
 8014070:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8014074:	fbbc f7f7 	udiv	r7, ip, r7
 8014078:	f307 0707 	ssat	r7, #8, r7
 801407c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801407e:	f803 7009 	strb.w	r7, [r3, r9]
 8014082:	e7c7      	b.n	8014014 <st_int8_avepool+0x320>
 8014084:	2f00      	cmp	r7, #0
 8014086:	463b      	mov	r3, r7
 8014088:	bfb8      	it	lt
 801408a:	1c7b      	addlt	r3, r7, #1
 801408c:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8014090:	fb93 f7f7 	sdiv	r7, r3, r7
 8014094:	e7f0      	b.n	8014078 <st_int8_avepool+0x384>
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	b92b      	cbnz	r3, 80140a6 <st_int8_avepool+0x3b2>
 801409a:	eef0 7a66 	vmov.f32	s15, s13
 801409e:	e7a2      	b.n	8013fe6 <st_int8_avepool+0x2f2>
 80140a0:	b28b      	uxth	r3, r1
 80140a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80140a4:	e7bd      	b.n	8014022 <st_int8_avepool+0x32e>
 80140a6:	deff      	udf	#255	; 0xff

080140a8 <st_dsp_arm_fill_q15>:
 80140a8:	b510      	push	{r4, lr}
 80140aa:	b284      	uxth	r4, r0
 80140ac:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 80140b0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80140b4:	d013      	beq.n	80140de <st_dsp_arm_fill_q15+0x36>
 80140b6:	f10e 33ff 	add.w	r3, lr, #4294967295
 80140ba:	2b09      	cmp	r3, #9
 80140bc:	460b      	mov	r3, r1
 80140be:	d919      	bls.n	80140f4 <st_dsp_arm_fill_q15+0x4c>
 80140c0:	f011 0f07 	tst.w	r1, #7
 80140c4:	d116      	bne.n	80140f4 <st_dsp_arm_fill_q15+0x4c>
 80140c6:	f04f 0c00 	mov.w	ip, #0
 80140ca:	f10c 0c01 	add.w	ip, ip, #1
 80140ce:	45e6      	cmp	lr, ip
 80140d0:	e9c3 4400 	strd	r4, r4, [r3]
 80140d4:	f103 0308 	add.w	r3, r3, #8
 80140d8:	d1f7      	bne.n	80140ca <st_dsp_arm_fill_q15+0x22>
 80140da:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80140de:	f012 0203 	ands.w	r2, r2, #3
 80140e2:	d006      	beq.n	80140f2 <st_dsp_arm_fill_q15+0x4a>
 80140e4:	3a01      	subs	r2, #1
 80140e6:	8008      	strh	r0, [r1, #0]
 80140e8:	d003      	beq.n	80140f2 <st_dsp_arm_fill_q15+0x4a>
 80140ea:	2a01      	cmp	r2, #1
 80140ec:	8048      	strh	r0, [r1, #2]
 80140ee:	bf18      	it	ne
 80140f0:	8088      	strhne	r0, [r1, #4]
 80140f2:	bd10      	pop	{r4, pc}
 80140f4:	46f4      	mov	ip, lr
 80140f6:	f1bc 0c01 	subs.w	ip, ip, #1
 80140fa:	601c      	str	r4, [r3, #0]
 80140fc:	605c      	str	r4, [r3, #4]
 80140fe:	f103 0308 	add.w	r3, r3, #8
 8014102:	d1f8      	bne.n	80140f6 <st_dsp_arm_fill_q15+0x4e>
 8014104:	e7e9      	b.n	80140da <st_dsp_arm_fill_q15+0x32>
 8014106:	bf00      	nop

08014108 <st_dsp_arm_float_to_q15>:
 8014108:	b530      	push	{r4, r5, lr}
 801410a:	0895      	lsrs	r5, r2, #2
 801410c:	d069      	beq.n	80141e2 <st_dsp_arm_float_to_q15+0xda>
 801410e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014112:	f100 0c10 	add.w	ip, r0, #16
 8014116:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801411a:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8014270 <st_dsp_arm_float_to_q15+0x168>
 801411e:	f101 0e08 	add.w	lr, r1, #8
 8014122:	462c      	mov	r4, r5
 8014124:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8014128:	ee67 6a86 	vmul.f32	s13, s15, s12
 801412c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801413c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014140:	ee17 3a90 	vmov	r3, s15
 8014144:	f303 030f 	ssat	r3, #16, r3
 8014148:	f82e 3c08 	strh.w	r3, [lr, #-8]
 801414c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8014150:	ee67 6a86 	vmul.f32	s13, s15, s12
 8014154:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801415c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014168:	ee17 3a90 	vmov	r3, s15
 801416c:	f303 030f 	ssat	r3, #16, r3
 8014170:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8014174:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8014178:	ee67 6a86 	vmul.f32	s13, s15, s12
 801417c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801418c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014190:	ee17 3a90 	vmov	r3, s15
 8014194:	f303 030f 	ssat	r3, #16, r3
 8014198:	f82e 3c04 	strh.w	r3, [lr, #-4]
 801419c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80141a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80141a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80141a8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80141ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80141b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141bc:	bfcc      	ite	gt
 80141be:	ee16 3a90 	vmovgt	r3, s13
 80141c2:	ee17 3a90 	vmovle	r3, s15
 80141c6:	f303 030f 	ssat	r3, #16, r3
 80141ca:	3c01      	subs	r4, #1
 80141cc:	f82e 3c02 	strh.w	r3, [lr, #-2]
 80141d0:	f10c 0c10 	add.w	ip, ip, #16
 80141d4:	f10e 0e08 	add.w	lr, lr, #8
 80141d8:	d1a4      	bne.n	8014124 <st_dsp_arm_float_to_q15+0x1c>
 80141da:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80141de:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80141e2:	f012 0203 	ands.w	r2, r2, #3
 80141e6:	d042      	beq.n	801426e <st_dsp_arm_float_to_q15+0x166>
 80141e8:	edd0 7a00 	vldr	s15, [r0]
 80141ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80141f0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8014270 <st_dsp_arm_float_to_q15+0x168>
 80141f4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80141f8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80141fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014204:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8014208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801420c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014210:	ee17 3a90 	vmov	r3, s15
 8014214:	f303 030f 	ssat	r3, #16, r3
 8014218:	3a01      	subs	r2, #1
 801421a:	800b      	strh	r3, [r1, #0]
 801421c:	d027      	beq.n	801426e <st_dsp_arm_float_to_q15+0x166>
 801421e:	edd0 7a01 	vldr	s15, [r0, #4]
 8014222:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8014232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801423a:	ee17 3a90 	vmov	r3, s15
 801423e:	f303 030f 	ssat	r3, #16, r3
 8014242:	2a01      	cmp	r2, #1
 8014244:	804b      	strh	r3, [r1, #2]
 8014246:	d012      	beq.n	801426e <st_dsp_arm_float_to_q15+0x166>
 8014248:	edd0 7a02 	vldr	s15, [r0, #8]
 801424c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8014250:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014258:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801425c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014260:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014264:	ee17 3a10 	vmov	r3, s14
 8014268:	f303 030f 	ssat	r3, #16, r3
 801426c:	808b      	strh	r3, [r1, #4]
 801426e:	bd30      	pop	{r4, r5, pc}
 8014270:	47000000 	.word	0x47000000

08014274 <st_dsp_arm_float_to_q7>:
 8014274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014276:	0895      	lsrs	r5, r2, #2
 8014278:	d06f      	beq.n	801435a <st_dsp_arm_float_to_q7+0xe6>
 801427a:	f101 0c04 	add.w	ip, r1, #4
 801427e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014282:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8014286:	f100 0e10 	add.w	lr, r0, #16
 801428a:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8014408 <st_dsp_arm_float_to_q7+0x194>
 801428e:	00ae      	lsls	r6, r5, #2
 8014290:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8014294:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8014298:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801429c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80142a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a4:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80142a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142b0:	ee17 3a90 	vmov	r3, s15
 80142b4:	b21b      	sxth	r3, r3
 80142b6:	f303 0307 	ssat	r3, #8, r3
 80142ba:	f80c 3c04 	strb.w	r3, [ip, #-4]
 80142be:	ed5e 7a03 	vldr	s15, [lr, #-12]
 80142c2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80142c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80142ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ce:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80142d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142da:	ee17 3a90 	vmov	r3, s15
 80142de:	b21b      	sxth	r3, r3
 80142e0:	f303 0307 	ssat	r3, #8, r3
 80142e4:	f80c 3c03 	strb.w	r3, [ip, #-3]
 80142e8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 80142ec:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80142f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80142fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014304:	ee17 3a90 	vmov	r3, s15
 8014308:	b21b      	sxth	r3, r3
 801430a:	f303 0307 	ssat	r3, #8, r3
 801430e:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8014312:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8014316:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801431a:	ee76 7a86 	vadd.f32	s15, s13, s12
 801431e:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8014322:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801432a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014332:	ee17 3a90 	vmov	r3, s15
 8014336:	ee17 7a10 	vmov	r7, s14
 801433a:	b21b      	sxth	r3, r3
 801433c:	b23f      	sxth	r7, r7
 801433e:	dd56      	ble.n	80143ee <st_dsp_arm_float_to_q7+0x17a>
 8014340:	f303 0307 	ssat	r3, #8, r3
 8014344:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8014348:	f10c 0c04 	add.w	ip, ip, #4
 801434c:	f10e 0e10 	add.w	lr, lr, #16
 8014350:	4564      	cmp	r4, ip
 8014352:	d19f      	bne.n	8014294 <st_dsp_arm_float_to_q7+0x20>
 8014354:	4431      	add	r1, r6
 8014356:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801435a:	f012 0203 	ands.w	r2, r2, #3
 801435e:	d045      	beq.n	80143ec <st_dsp_arm_float_to_q7+0x178>
 8014360:	edd0 7a00 	vldr	s15, [r0]
 8014364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014368:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8014408 <st_dsp_arm_float_to_q7+0x194>
 801436c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8014370:	ee67 6a85 	vmul.f32	s13, s15, s10
 8014374:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8014380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014388:	ee17 3a90 	vmov	r3, s15
 801438c:	b21b      	sxth	r3, r3
 801438e:	f303 0307 	ssat	r3, #8, r3
 8014392:	3a01      	subs	r2, #1
 8014394:	700b      	strb	r3, [r1, #0]
 8014396:	d029      	beq.n	80143ec <st_dsp_arm_float_to_q7+0x178>
 8014398:	edd0 6a01 	vldr	s13, [r0, #4]
 801439c:	ee26 6a85 	vmul.f32	s12, s13, s10
 80143a0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80143a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a8:	fe77 6a25 	vselgt.f32	s13, s14, s11
 80143ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80143b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80143b4:	ee16 3a90 	vmov	r3, s13
 80143b8:	b21b      	sxth	r3, r3
 80143ba:	f303 0307 	ssat	r3, #8, r3
 80143be:	2a01      	cmp	r2, #1
 80143c0:	704b      	strb	r3, [r1, #1]
 80143c2:	d013      	beq.n	80143ec <st_dsp_arm_float_to_q7+0x178>
 80143c4:	edd0 7a02 	vldr	s15, [r0, #8]
 80143c8:	ee27 5a85 	vmul.f32	s10, s15, s10
 80143cc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80143d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80143d8:	ee77 7a85 	vadd.f32	s15, s15, s10
 80143dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143e0:	ee17 3a90 	vmov	r3, s15
 80143e4:	b21b      	sxth	r3, r3
 80143e6:	f303 0307 	ssat	r3, #8, r3
 80143ea:	708b      	strb	r3, [r1, #2]
 80143ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ee:	f307 0707 	ssat	r7, #8, r7
 80143f2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 80143f6:	f10c 0c04 	add.w	ip, ip, #4
 80143fa:	f10e 0e10 	add.w	lr, lr, #16
 80143fe:	45a4      	cmp	ip, r4
 8014400:	f47f af48 	bne.w	8014294 <st_dsp_arm_float_to_q7+0x20>
 8014404:	e7a6      	b.n	8014354 <st_dsp_arm_float_to_q7+0xe0>
 8014406:	bf00      	nop
 8014408:	43000000 	.word	0x43000000

0801440c <st_dsp_arm_q15_to_float>:
 801440c:	b530      	push	{r4, r5, lr}
 801440e:	0894      	lsrs	r4, r2, #2
 8014410:	d038      	beq.n	8014484 <st_dsp_arm_q15_to_float+0x78>
 8014412:	f100 0c08 	add.w	ip, r0, #8
 8014416:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80144d4 <st_dsp_arm_q15_to_float+0xc8>
 801441a:	f101 0310 	add.w	r3, r1, #16
 801441e:	46a6      	mov	lr, r4
 8014420:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8014424:	3310      	adds	r3, #16
 8014426:	f10c 0c08 	add.w	ip, ip, #8
 801442a:	f1be 0e01 	subs.w	lr, lr, #1
 801442e:	ee07 5a90 	vmov	s15, r5
 8014432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014436:	ee67 7a87 	vmul.f32	s15, s15, s14
 801443a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 801443e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8014442:	ee07 5a90 	vmov	s15, r5
 8014446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801444a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801444e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8014452:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8014456:	ee07 5a90 	vmov	s15, r5
 801445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801445e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014462:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8014466:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 801446a:	ee07 5a90 	vmov	s15, r5
 801446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014476:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801447a:	d1d1      	bne.n	8014420 <st_dsp_arm_q15_to_float+0x14>
 801447c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8014480:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8014484:	f012 0203 	ands.w	r2, r2, #3
 8014488:	d023      	beq.n	80144d2 <st_dsp_arm_q15_to_float+0xc6>
 801448a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801448e:	3a01      	subs	r2, #1
 8014490:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80144d4 <st_dsp_arm_q15_to_float+0xc8>
 8014494:	ee07 3a90 	vmov	s15, r3
 8014498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801449c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144a0:	edc1 7a00 	vstr	s15, [r1]
 80144a4:	d015      	beq.n	80144d2 <st_dsp_arm_q15_to_float+0xc6>
 80144a6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80144aa:	2a01      	cmp	r2, #1
 80144ac:	ee07 3a90 	vmov	s15, r3
 80144b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144b8:	edc1 7a01 	vstr	s15, [r1, #4]
 80144bc:	d009      	beq.n	80144d2 <st_dsp_arm_q15_to_float+0xc6>
 80144be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80144c2:	ee07 3a90 	vmov	s15, r3
 80144c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144ce:	edc1 7a02 	vstr	s15, [r1, #8]
 80144d2:	bd30      	pop	{r4, r5, pc}
 80144d4:	38000000 	.word	0x38000000

080144d8 <st_dsp_arm_q7_to_float>:
 80144d8:	b530      	push	{r4, r5, lr}
 80144da:	0894      	lsrs	r4, r2, #2
 80144dc:	d036      	beq.n	801454c <st_dsp_arm_q7_to_float+0x74>
 80144de:	1d03      	adds	r3, r0, #4
 80144e0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80144e4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 801459c <st_dsp_arm_q7_to_float+0xc4>
 80144e8:	f101 0010 	add.w	r0, r1, #16
 80144ec:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 80144f0:	3010      	adds	r0, #16
 80144f2:	ee07 ea90 	vmov	s15, lr
 80144f6:	469e      	mov	lr, r3
 80144f8:	3304      	adds	r3, #4
 80144fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144fe:	45e6      	cmp	lr, ip
 8014500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014504:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 8014508:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 801450c:	ee07 5a90 	vmov	s15, r5
 8014510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014518:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 801451c:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8014520:	ee07 5a90 	vmov	s15, r5
 8014524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014528:	ee67 7a87 	vmul.f32	s15, s15, s14
 801452c:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8014530:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 8014534:	ee07 5a90 	vmov	s15, r5
 8014538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801453c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014540:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 8014544:	d1d2      	bne.n	80144ec <st_dsp_arm_q7_to_float+0x14>
 8014546:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801454a:	4660      	mov	r0, ip
 801454c:	f012 0203 	ands.w	r2, r2, #3
 8014550:	d023      	beq.n	801459a <st_dsp_arm_q7_to_float+0xc2>
 8014552:	f990 3000 	ldrsb.w	r3, [r0]
 8014556:	3a01      	subs	r2, #1
 8014558:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801459c <st_dsp_arm_q7_to_float+0xc4>
 801455c:	ee07 3a90 	vmov	s15, r3
 8014560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014568:	edc1 7a00 	vstr	s15, [r1]
 801456c:	d015      	beq.n	801459a <st_dsp_arm_q7_to_float+0xc2>
 801456e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8014572:	2a01      	cmp	r2, #1
 8014574:	ee07 3a90 	vmov	s15, r3
 8014578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801457c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014580:	edc1 7a01 	vstr	s15, [r1, #4]
 8014584:	d009      	beq.n	801459a <st_dsp_arm_q7_to_float+0xc2>
 8014586:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801458a:	ee07 3a90 	vmov	s15, r3
 801458e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014596:	edc1 7a02 	vstr	s15, [r1, #8]
 801459a:	bd30      	pop	{r4, r5, pc}
 801459c:	3c000000 	.word	0x3c000000

080145a0 <ai_version_get>:
 80145a0:	0212      	lsls	r2, r2, #8
 80145a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80145a6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80145aa:	4770      	bx	lr

080145ac <get_tensor_byte_size>:
 80145ac:	b430      	push	{r4, r5}
 80145ae:	6985      	ldr	r5, [r0, #24]
 80145b0:	68c4      	ldr	r4, [r0, #12]
 80145b2:	6941      	ldr	r1, [r0, #20]
 80145b4:	4b06      	ldr	r3, [pc, #24]	; (80145d0 <get_tensor_byte_size+0x24>)
 80145b6:	6828      	ldr	r0, [r5, #0]
 80145b8:	4a06      	ldr	r2, [pc, #24]	; (80145d4 <get_tensor_byte_size+0x28>)
 80145ba:	4003      	ands	r3, r0
 80145bc:	68c9      	ldr	r1, [r1, #12]
 80145be:	68e0      	ldr	r0, [r4, #12]
 80145c0:	4293      	cmp	r3, r2
 80145c2:	fb01 f000 	mul.w	r0, r1, r0
 80145c6:	d101      	bne.n	80145cc <get_tensor_byte_size+0x20>
 80145c8:	3007      	adds	r0, #7
 80145ca:	08c0      	lsrs	r0, r0, #3
 80145cc:	bc30      	pop	{r4, r5}
 80145ce:	4770      	bx	lr
 80145d0:	017fffff 	.word	0x017fffff
 80145d4:	000400c0 	.word	0x000400c0

080145d8 <ai_array_to_buffer_fmt>:
 80145d8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80145dc:	2b02      	cmp	r3, #2
 80145de:	d050      	beq.n	8014682 <ai_array_to_buffer_fmt+0xaa>
 80145e0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80145e4:	4b29      	ldr	r3, [pc, #164]	; (801468c <ai_array_to_buffer_fmt+0xb4>)
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d00b      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 80145ea:	dc1c      	bgt.n	8014626 <ai_array_to_buffer_fmt+0x4e>
 80145ec:	4b28      	ldr	r3, [pc, #160]	; (8014690 <ai_array_to_buffer_fmt+0xb8>)
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d007      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 80145f2:	dd0b      	ble.n	801460c <ai_array_to_buffer_fmt+0x34>
 80145f4:	4b27      	ldr	r3, [pc, #156]	; (8014694 <ai_array_to_buffer_fmt+0xbc>)
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d003      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 80145fa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80145fe:	429a      	cmp	r2, r3
 8014600:	d131      	bne.n	8014666 <ai_array_to_buffer_fmt+0x8e>
 8014602:	4613      	mov	r3, r2
 8014604:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014608:	4318      	orrs	r0, r3
 801460a:	4770      	bx	lr
 801460c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014610:	429a      	cmp	r2, r3
 8014612:	d0f6      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 8014614:	dd2c      	ble.n	8014670 <ai_array_to_buffer_fmt+0x98>
 8014616:	4b20      	ldr	r3, [pc, #128]	; (8014698 <ai_array_to_buffer_fmt+0xc0>)
 8014618:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801461c:	429a      	cmp	r2, r3
 801461e:	bf18      	it	ne
 8014620:	2340      	movne	r3, #64	; 0x40
 8014622:	4318      	orrs	r0, r3
 8014624:	4770      	bx	lr
 8014626:	4b1d      	ldr	r3, [pc, #116]	; (801469c <ai_array_to_buffer_fmt+0xc4>)
 8014628:	429a      	cmp	r2, r3
 801462a:	d0ea      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 801462c:	dd0e      	ble.n	801464c <ai_array_to_buffer_fmt+0x74>
 801462e:	4b1c      	ldr	r3, [pc, #112]	; (80146a0 <ai_array_to_buffer_fmt+0xc8>)
 8014630:	429a      	cmp	r2, r3
 8014632:	d0e6      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 8014634:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8014638:	429a      	cmp	r2, r3
 801463a:	d0e2      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 801463c:	4b19      	ldr	r3, [pc, #100]	; (80146a4 <ai_array_to_buffer_fmt+0xcc>)
 801463e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014642:	429a      	cmp	r2, r3
 8014644:	bf18      	it	ne
 8014646:	2340      	movne	r3, #64	; 0x40
 8014648:	4318      	orrs	r0, r3
 801464a:	4770      	bx	lr
 801464c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014650:	429a      	cmp	r2, r3
 8014652:	d0d6      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 8014654:	3307      	adds	r3, #7
 8014656:	429a      	cmp	r2, r3
 8014658:	d0d3      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 801465a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801465e:	429a      	cmp	r2, r3
 8014660:	bf18      	it	ne
 8014662:	2340      	movne	r3, #64	; 0x40
 8014664:	e7ce      	b.n	8014604 <ai_array_to_buffer_fmt+0x2c>
 8014666:	4b10      	ldr	r3, [pc, #64]	; (80146a8 <ai_array_to_buffer_fmt+0xd0>)
 8014668:	429a      	cmp	r2, r3
 801466a:	bf18      	it	ne
 801466c:	2340      	movne	r3, #64	; 0x40
 801466e:	e7c9      	b.n	8014604 <ai_array_to_buffer_fmt+0x2c>
 8014670:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014674:	429a      	cmp	r2, r3
 8014676:	d0c4      	beq.n	8014602 <ai_array_to_buffer_fmt+0x2a>
 8014678:	3380      	adds	r3, #128	; 0x80
 801467a:	429a      	cmp	r2, r3
 801467c:	bf18      	it	ne
 801467e:	2340      	movne	r3, #64	; 0x40
 8014680:	e7c0      	b.n	8014604 <ai_array_to_buffer_fmt+0x2c>
 8014682:	4b0a      	ldr	r3, [pc, #40]	; (80146ac <ai_array_to_buffer_fmt+0xd4>)
 8014684:	4003      	ands	r3, r0
 8014686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801468a:	e7bb      	b.n	8014604 <ai_array_to_buffer_fmt+0x2c>
 801468c:	00840040 	.word	0x00840040
 8014690:	00040840 	.word	0x00040840
 8014694:	00041040 	.word	0x00041040
 8014698:	00040447 	.word	0x00040447
 801469c:	00840840 	.word	0x00840840
 80146a0:	00841040 	.word	0x00841040
 80146a4:	0084084f 	.word	0x0084084f
 80146a8:	0004084f 	.word	0x0004084f
 80146ac:	00803fff 	.word	0x00803fff

080146b0 <ai_array_get_byte_size>:
 80146b0:	b319      	cbz	r1, 80146fa <ai_array_get_byte_size+0x4a>
 80146b2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80146b6:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80146ba:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80146be:	11c0      	asrs	r0, r0, #7
 80146c0:	fb03 f101 	mul.w	r1, r3, r1
 80146c4:	2a04      	cmp	r2, #4
 80146c6:	f101 0107 	add.w	r1, r1, #7
 80146ca:	f021 0107 	bic.w	r1, r1, #7
 80146ce:	fa21 f10c 	lsr.w	r1, r1, ip
 80146d2:	d00b      	beq.n	80146ec <ai_array_get_byte_size+0x3c>
 80146d4:	2a08      	cmp	r2, #8
 80146d6:	d002      	beq.n	80146de <ai_array_get_byte_size+0x2e>
 80146d8:	3107      	adds	r1, #7
 80146da:	08c8      	lsrs	r0, r1, #3
 80146dc:	4770      	bx	lr
 80146de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80146e2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80146e6:	3107      	adds	r1, #7
 80146e8:	08c8      	lsrs	r0, r1, #3
 80146ea:	4770      	bx	lr
 80146ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80146f0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80146f4:	3107      	adds	r1, #7
 80146f6:	08c8      	lsrs	r0, r1, #3
 80146f8:	4770      	bx	lr
 80146fa:	4608      	mov	r0, r1
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop

08014700 <ai_array_get_data_byte_size>:
 8014700:	b161      	cbz	r1, 801471c <ai_array_get_data_byte_size+0x1c>
 8014702:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8014706:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801470a:	fb03 f101 	mul.w	r1, r3, r1
 801470e:	1dc8      	adds	r0, r1, #7
 8014710:	f020 0007 	bic.w	r0, r0, #7
 8014714:	40d0      	lsrs	r0, r2
 8014716:	3007      	adds	r0, #7
 8014718:	08c0      	lsrs	r0, r0, #3
 801471a:	4770      	bx	lr
 801471c:	4608      	mov	r0, r1
 801471e:	4770      	bx	lr

08014720 <core_tensor_clone>:
 8014720:	680b      	ldr	r3, [r1, #0]
 8014722:	6882      	ldr	r2, [r0, #8]
 8014724:	6003      	str	r3, [r0, #0]
 8014726:	684b      	ldr	r3, [r1, #4]
 8014728:	6043      	str	r3, [r0, #4]
 801472a:	698b      	ldr	r3, [r1, #24]
 801472c:	6183      	str	r3, [r0, #24]
 801472e:	688b      	ldr	r3, [r1, #8]
 8014730:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8014734:	f363 221f 	bfi	r2, r3, #8, #24
 8014738:	b410      	push	{r4}
 801473a:	6082      	str	r2, [r0, #8]
 801473c:	b15b      	cbz	r3, 8014756 <core_tensor_clone+0x36>
 801473e:	2300      	movs	r3, #0
 8014740:	68cc      	ldr	r4, [r1, #12]
 8014742:	68c2      	ldr	r2, [r0, #12]
 8014744:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8014748:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801474c:	3301      	adds	r3, #1
 801474e:	6882      	ldr	r2, [r0, #8]
 8014750:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8014754:	d3f4      	bcc.n	8014740 <core_tensor_clone+0x20>
 8014756:	690b      	ldr	r3, [r1, #16]
 8014758:	6902      	ldr	r2, [r0, #16]
 801475a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801475e:	f363 221f 	bfi	r2, r3, #8, #24
 8014762:	6102      	str	r2, [r0, #16]
 8014764:	b15b      	cbz	r3, 801477e <core_tensor_clone+0x5e>
 8014766:	2300      	movs	r3, #0
 8014768:	694c      	ldr	r4, [r1, #20]
 801476a:	6942      	ldr	r2, [r0, #20]
 801476c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8014770:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8014774:	3301      	adds	r3, #1
 8014776:	6902      	ldr	r2, [r0, #16]
 8014778:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 801477c:	d3f4      	bcc.n	8014768 <core_tensor_clone+0x48>
 801477e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014782:	4770      	bx	lr

08014784 <core_array_clone>:
 8014784:	4684      	mov	ip, r0
 8014786:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014788:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop

08014790 <__errno>:
 8014790:	4b01      	ldr	r3, [pc, #4]	; (8014798 <__errno+0x8>)
 8014792:	6818      	ldr	r0, [r3, #0]
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	20001440 	.word	0x20001440

0801479c <__libc_init_array>:
 801479c:	b570      	push	{r4, r5, r6, lr}
 801479e:	4d0d      	ldr	r5, [pc, #52]	; (80147d4 <__libc_init_array+0x38>)
 80147a0:	4c0d      	ldr	r4, [pc, #52]	; (80147d8 <__libc_init_array+0x3c>)
 80147a2:	1b64      	subs	r4, r4, r5
 80147a4:	10a4      	asrs	r4, r4, #2
 80147a6:	2600      	movs	r6, #0
 80147a8:	42a6      	cmp	r6, r4
 80147aa:	d109      	bne.n	80147c0 <__libc_init_array+0x24>
 80147ac:	4d0b      	ldr	r5, [pc, #44]	; (80147dc <__libc_init_array+0x40>)
 80147ae:	4c0c      	ldr	r4, [pc, #48]	; (80147e0 <__libc_init_array+0x44>)
 80147b0:	f003 f968 	bl	8017a84 <_init>
 80147b4:	1b64      	subs	r4, r4, r5
 80147b6:	10a4      	asrs	r4, r4, #2
 80147b8:	2600      	movs	r6, #0
 80147ba:	42a6      	cmp	r6, r4
 80147bc:	d105      	bne.n	80147ca <__libc_init_array+0x2e>
 80147be:	bd70      	pop	{r4, r5, r6, pc}
 80147c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80147c4:	4798      	blx	r3
 80147c6:	3601      	adds	r6, #1
 80147c8:	e7ee      	b.n	80147a8 <__libc_init_array+0xc>
 80147ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80147ce:	4798      	blx	r3
 80147d0:	3601      	adds	r6, #1
 80147d2:	e7f2      	b.n	80147ba <__libc_init_array+0x1e>
 80147d4:	08019ac0 	.word	0x08019ac0
 80147d8:	08019ac0 	.word	0x08019ac0
 80147dc:	08019ac0 	.word	0x08019ac0
 80147e0:	08019ac4 	.word	0x08019ac4

080147e4 <malloc>:
 80147e4:	4b02      	ldr	r3, [pc, #8]	; (80147f0 <malloc+0xc>)
 80147e6:	4601      	mov	r1, r0
 80147e8:	6818      	ldr	r0, [r3, #0]
 80147ea:	f000 b8a7 	b.w	801493c <_malloc_r>
 80147ee:	bf00      	nop
 80147f0:	20001440 	.word	0x20001440

080147f4 <free>:
 80147f4:	4b02      	ldr	r3, [pc, #8]	; (8014800 <free+0xc>)
 80147f6:	4601      	mov	r1, r0
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	f000 b833 	b.w	8014864 <_free_r>
 80147fe:	bf00      	nop
 8014800:	20001440 	.word	0x20001440

08014804 <memcpy>:
 8014804:	440a      	add	r2, r1
 8014806:	4291      	cmp	r1, r2
 8014808:	f100 33ff 	add.w	r3, r0, #4294967295
 801480c:	d100      	bne.n	8014810 <memcpy+0xc>
 801480e:	4770      	bx	lr
 8014810:	b510      	push	{r4, lr}
 8014812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014816:	f803 4f01 	strb.w	r4, [r3, #1]!
 801481a:	4291      	cmp	r1, r2
 801481c:	d1f9      	bne.n	8014812 <memcpy+0xe>
 801481e:	bd10      	pop	{r4, pc}

08014820 <memmove>:
 8014820:	4288      	cmp	r0, r1
 8014822:	b510      	push	{r4, lr}
 8014824:	eb01 0402 	add.w	r4, r1, r2
 8014828:	d902      	bls.n	8014830 <memmove+0x10>
 801482a:	4284      	cmp	r4, r0
 801482c:	4623      	mov	r3, r4
 801482e:	d807      	bhi.n	8014840 <memmove+0x20>
 8014830:	1e43      	subs	r3, r0, #1
 8014832:	42a1      	cmp	r1, r4
 8014834:	d008      	beq.n	8014848 <memmove+0x28>
 8014836:	f811 2b01 	ldrb.w	r2, [r1], #1
 801483a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801483e:	e7f8      	b.n	8014832 <memmove+0x12>
 8014840:	4402      	add	r2, r0
 8014842:	4601      	mov	r1, r0
 8014844:	428a      	cmp	r2, r1
 8014846:	d100      	bne.n	801484a <memmove+0x2a>
 8014848:	bd10      	pop	{r4, pc}
 801484a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801484e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014852:	e7f7      	b.n	8014844 <memmove+0x24>

08014854 <memset>:
 8014854:	4402      	add	r2, r0
 8014856:	4603      	mov	r3, r0
 8014858:	4293      	cmp	r3, r2
 801485a:	d100      	bne.n	801485e <memset+0xa>
 801485c:	4770      	bx	lr
 801485e:	f803 1b01 	strb.w	r1, [r3], #1
 8014862:	e7f9      	b.n	8014858 <memset+0x4>

08014864 <_free_r>:
 8014864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014866:	2900      	cmp	r1, #0
 8014868:	d044      	beq.n	80148f4 <_free_r+0x90>
 801486a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801486e:	9001      	str	r0, [sp, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	f1a1 0404 	sub.w	r4, r1, #4
 8014876:	bfb8      	it	lt
 8014878:	18e4      	addlt	r4, r4, r3
 801487a:	f001 feb3 	bl	80165e4 <__malloc_lock>
 801487e:	4a1e      	ldr	r2, [pc, #120]	; (80148f8 <_free_r+0x94>)
 8014880:	9801      	ldr	r0, [sp, #4]
 8014882:	6813      	ldr	r3, [r2, #0]
 8014884:	b933      	cbnz	r3, 8014894 <_free_r+0x30>
 8014886:	6063      	str	r3, [r4, #4]
 8014888:	6014      	str	r4, [r2, #0]
 801488a:	b003      	add	sp, #12
 801488c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014890:	f001 beae 	b.w	80165f0 <__malloc_unlock>
 8014894:	42a3      	cmp	r3, r4
 8014896:	d908      	bls.n	80148aa <_free_r+0x46>
 8014898:	6825      	ldr	r5, [r4, #0]
 801489a:	1961      	adds	r1, r4, r5
 801489c:	428b      	cmp	r3, r1
 801489e:	bf01      	itttt	eq
 80148a0:	6819      	ldreq	r1, [r3, #0]
 80148a2:	685b      	ldreq	r3, [r3, #4]
 80148a4:	1949      	addeq	r1, r1, r5
 80148a6:	6021      	streq	r1, [r4, #0]
 80148a8:	e7ed      	b.n	8014886 <_free_r+0x22>
 80148aa:	461a      	mov	r2, r3
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	b10b      	cbz	r3, 80148b4 <_free_r+0x50>
 80148b0:	42a3      	cmp	r3, r4
 80148b2:	d9fa      	bls.n	80148aa <_free_r+0x46>
 80148b4:	6811      	ldr	r1, [r2, #0]
 80148b6:	1855      	adds	r5, r2, r1
 80148b8:	42a5      	cmp	r5, r4
 80148ba:	d10b      	bne.n	80148d4 <_free_r+0x70>
 80148bc:	6824      	ldr	r4, [r4, #0]
 80148be:	4421      	add	r1, r4
 80148c0:	1854      	adds	r4, r2, r1
 80148c2:	42a3      	cmp	r3, r4
 80148c4:	6011      	str	r1, [r2, #0]
 80148c6:	d1e0      	bne.n	801488a <_free_r+0x26>
 80148c8:	681c      	ldr	r4, [r3, #0]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	6053      	str	r3, [r2, #4]
 80148ce:	4421      	add	r1, r4
 80148d0:	6011      	str	r1, [r2, #0]
 80148d2:	e7da      	b.n	801488a <_free_r+0x26>
 80148d4:	d902      	bls.n	80148dc <_free_r+0x78>
 80148d6:	230c      	movs	r3, #12
 80148d8:	6003      	str	r3, [r0, #0]
 80148da:	e7d6      	b.n	801488a <_free_r+0x26>
 80148dc:	6825      	ldr	r5, [r4, #0]
 80148de:	1961      	adds	r1, r4, r5
 80148e0:	428b      	cmp	r3, r1
 80148e2:	bf04      	itt	eq
 80148e4:	6819      	ldreq	r1, [r3, #0]
 80148e6:	685b      	ldreq	r3, [r3, #4]
 80148e8:	6063      	str	r3, [r4, #4]
 80148ea:	bf04      	itt	eq
 80148ec:	1949      	addeq	r1, r1, r5
 80148ee:	6021      	streq	r1, [r4, #0]
 80148f0:	6054      	str	r4, [r2, #4]
 80148f2:	e7ca      	b.n	801488a <_free_r+0x26>
 80148f4:	b003      	add	sp, #12
 80148f6:	bd30      	pop	{r4, r5, pc}
 80148f8:	20001b40 	.word	0x20001b40

080148fc <sbrk_aligned>:
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	4e0e      	ldr	r6, [pc, #56]	; (8014938 <sbrk_aligned+0x3c>)
 8014900:	460c      	mov	r4, r1
 8014902:	6831      	ldr	r1, [r6, #0]
 8014904:	4605      	mov	r5, r0
 8014906:	b911      	cbnz	r1, 801490e <sbrk_aligned+0x12>
 8014908:	f000 fd5e 	bl	80153c8 <_sbrk_r>
 801490c:	6030      	str	r0, [r6, #0]
 801490e:	4621      	mov	r1, r4
 8014910:	4628      	mov	r0, r5
 8014912:	f000 fd59 	bl	80153c8 <_sbrk_r>
 8014916:	1c43      	adds	r3, r0, #1
 8014918:	d00a      	beq.n	8014930 <sbrk_aligned+0x34>
 801491a:	1cc4      	adds	r4, r0, #3
 801491c:	f024 0403 	bic.w	r4, r4, #3
 8014920:	42a0      	cmp	r0, r4
 8014922:	d007      	beq.n	8014934 <sbrk_aligned+0x38>
 8014924:	1a21      	subs	r1, r4, r0
 8014926:	4628      	mov	r0, r5
 8014928:	f000 fd4e 	bl	80153c8 <_sbrk_r>
 801492c:	3001      	adds	r0, #1
 801492e:	d101      	bne.n	8014934 <sbrk_aligned+0x38>
 8014930:	f04f 34ff 	mov.w	r4, #4294967295
 8014934:	4620      	mov	r0, r4
 8014936:	bd70      	pop	{r4, r5, r6, pc}
 8014938:	20001b44 	.word	0x20001b44

0801493c <_malloc_r>:
 801493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014940:	1ccd      	adds	r5, r1, #3
 8014942:	f025 0503 	bic.w	r5, r5, #3
 8014946:	3508      	adds	r5, #8
 8014948:	2d0c      	cmp	r5, #12
 801494a:	bf38      	it	cc
 801494c:	250c      	movcc	r5, #12
 801494e:	2d00      	cmp	r5, #0
 8014950:	4607      	mov	r7, r0
 8014952:	db01      	blt.n	8014958 <_malloc_r+0x1c>
 8014954:	42a9      	cmp	r1, r5
 8014956:	d905      	bls.n	8014964 <_malloc_r+0x28>
 8014958:	230c      	movs	r3, #12
 801495a:	603b      	str	r3, [r7, #0]
 801495c:	2600      	movs	r6, #0
 801495e:	4630      	mov	r0, r6
 8014960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014964:	4e2e      	ldr	r6, [pc, #184]	; (8014a20 <_malloc_r+0xe4>)
 8014966:	f001 fe3d 	bl	80165e4 <__malloc_lock>
 801496a:	6833      	ldr	r3, [r6, #0]
 801496c:	461c      	mov	r4, r3
 801496e:	bb34      	cbnz	r4, 80149be <_malloc_r+0x82>
 8014970:	4629      	mov	r1, r5
 8014972:	4638      	mov	r0, r7
 8014974:	f7ff ffc2 	bl	80148fc <sbrk_aligned>
 8014978:	1c43      	adds	r3, r0, #1
 801497a:	4604      	mov	r4, r0
 801497c:	d14d      	bne.n	8014a1a <_malloc_r+0xde>
 801497e:	6834      	ldr	r4, [r6, #0]
 8014980:	4626      	mov	r6, r4
 8014982:	2e00      	cmp	r6, #0
 8014984:	d140      	bne.n	8014a08 <_malloc_r+0xcc>
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	4631      	mov	r1, r6
 801498a:	4638      	mov	r0, r7
 801498c:	eb04 0803 	add.w	r8, r4, r3
 8014990:	f000 fd1a 	bl	80153c8 <_sbrk_r>
 8014994:	4580      	cmp	r8, r0
 8014996:	d13a      	bne.n	8014a0e <_malloc_r+0xd2>
 8014998:	6821      	ldr	r1, [r4, #0]
 801499a:	3503      	adds	r5, #3
 801499c:	1a6d      	subs	r5, r5, r1
 801499e:	f025 0503 	bic.w	r5, r5, #3
 80149a2:	3508      	adds	r5, #8
 80149a4:	2d0c      	cmp	r5, #12
 80149a6:	bf38      	it	cc
 80149a8:	250c      	movcc	r5, #12
 80149aa:	4629      	mov	r1, r5
 80149ac:	4638      	mov	r0, r7
 80149ae:	f7ff ffa5 	bl	80148fc <sbrk_aligned>
 80149b2:	3001      	adds	r0, #1
 80149b4:	d02b      	beq.n	8014a0e <_malloc_r+0xd2>
 80149b6:	6823      	ldr	r3, [r4, #0]
 80149b8:	442b      	add	r3, r5
 80149ba:	6023      	str	r3, [r4, #0]
 80149bc:	e00e      	b.n	80149dc <_malloc_r+0xa0>
 80149be:	6822      	ldr	r2, [r4, #0]
 80149c0:	1b52      	subs	r2, r2, r5
 80149c2:	d41e      	bmi.n	8014a02 <_malloc_r+0xc6>
 80149c4:	2a0b      	cmp	r2, #11
 80149c6:	d916      	bls.n	80149f6 <_malloc_r+0xba>
 80149c8:	1961      	adds	r1, r4, r5
 80149ca:	42a3      	cmp	r3, r4
 80149cc:	6025      	str	r5, [r4, #0]
 80149ce:	bf18      	it	ne
 80149d0:	6059      	strne	r1, [r3, #4]
 80149d2:	6863      	ldr	r3, [r4, #4]
 80149d4:	bf08      	it	eq
 80149d6:	6031      	streq	r1, [r6, #0]
 80149d8:	5162      	str	r2, [r4, r5]
 80149da:	604b      	str	r3, [r1, #4]
 80149dc:	4638      	mov	r0, r7
 80149de:	f104 060b 	add.w	r6, r4, #11
 80149e2:	f001 fe05 	bl	80165f0 <__malloc_unlock>
 80149e6:	f026 0607 	bic.w	r6, r6, #7
 80149ea:	1d23      	adds	r3, r4, #4
 80149ec:	1af2      	subs	r2, r6, r3
 80149ee:	d0b6      	beq.n	801495e <_malloc_r+0x22>
 80149f0:	1b9b      	subs	r3, r3, r6
 80149f2:	50a3      	str	r3, [r4, r2]
 80149f4:	e7b3      	b.n	801495e <_malloc_r+0x22>
 80149f6:	6862      	ldr	r2, [r4, #4]
 80149f8:	42a3      	cmp	r3, r4
 80149fa:	bf0c      	ite	eq
 80149fc:	6032      	streq	r2, [r6, #0]
 80149fe:	605a      	strne	r2, [r3, #4]
 8014a00:	e7ec      	b.n	80149dc <_malloc_r+0xa0>
 8014a02:	4623      	mov	r3, r4
 8014a04:	6864      	ldr	r4, [r4, #4]
 8014a06:	e7b2      	b.n	801496e <_malloc_r+0x32>
 8014a08:	4634      	mov	r4, r6
 8014a0a:	6876      	ldr	r6, [r6, #4]
 8014a0c:	e7b9      	b.n	8014982 <_malloc_r+0x46>
 8014a0e:	230c      	movs	r3, #12
 8014a10:	603b      	str	r3, [r7, #0]
 8014a12:	4638      	mov	r0, r7
 8014a14:	f001 fdec 	bl	80165f0 <__malloc_unlock>
 8014a18:	e7a1      	b.n	801495e <_malloc_r+0x22>
 8014a1a:	6025      	str	r5, [r4, #0]
 8014a1c:	e7de      	b.n	80149dc <_malloc_r+0xa0>
 8014a1e:	bf00      	nop
 8014a20:	20001b40 	.word	0x20001b40

08014a24 <__cvt>:
 8014a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a26:	ed2d 8b02 	vpush	{d8}
 8014a2a:	eeb0 8b40 	vmov.f64	d8, d0
 8014a2e:	b085      	sub	sp, #20
 8014a30:	4617      	mov	r7, r2
 8014a32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014a34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a36:	ee18 2a90 	vmov	r2, s17
 8014a3a:	f025 0520 	bic.w	r5, r5, #32
 8014a3e:	2a00      	cmp	r2, #0
 8014a40:	bfb6      	itet	lt
 8014a42:	222d      	movlt	r2, #45	; 0x2d
 8014a44:	2200      	movge	r2, #0
 8014a46:	eeb1 8b40 	vneglt.f64	d8, d0
 8014a4a:	2d46      	cmp	r5, #70	; 0x46
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	701a      	strb	r2, [r3, #0]
 8014a50:	d004      	beq.n	8014a5c <__cvt+0x38>
 8014a52:	2d45      	cmp	r5, #69	; 0x45
 8014a54:	d100      	bne.n	8014a58 <__cvt+0x34>
 8014a56:	3401      	adds	r4, #1
 8014a58:	2102      	movs	r1, #2
 8014a5a:	e000      	b.n	8014a5e <__cvt+0x3a>
 8014a5c:	2103      	movs	r1, #3
 8014a5e:	ab03      	add	r3, sp, #12
 8014a60:	9301      	str	r3, [sp, #4]
 8014a62:	ab02      	add	r3, sp, #8
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	4622      	mov	r2, r4
 8014a68:	4633      	mov	r3, r6
 8014a6a:	eeb0 0b48 	vmov.f64	d0, d8
 8014a6e:	f000 fe27 	bl	80156c0 <_dtoa_r>
 8014a72:	2d47      	cmp	r5, #71	; 0x47
 8014a74:	d101      	bne.n	8014a7a <__cvt+0x56>
 8014a76:	07fb      	lsls	r3, r7, #31
 8014a78:	d51a      	bpl.n	8014ab0 <__cvt+0x8c>
 8014a7a:	2d46      	cmp	r5, #70	; 0x46
 8014a7c:	eb00 0204 	add.w	r2, r0, r4
 8014a80:	d10c      	bne.n	8014a9c <__cvt+0x78>
 8014a82:	7803      	ldrb	r3, [r0, #0]
 8014a84:	2b30      	cmp	r3, #48	; 0x30
 8014a86:	d107      	bne.n	8014a98 <__cvt+0x74>
 8014a88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a90:	bf1c      	itt	ne
 8014a92:	f1c4 0401 	rsbne	r4, r4, #1
 8014a96:	6034      	strne	r4, [r6, #0]
 8014a98:	6833      	ldr	r3, [r6, #0]
 8014a9a:	441a      	add	r2, r3
 8014a9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa4:	bf08      	it	eq
 8014aa6:	9203      	streq	r2, [sp, #12]
 8014aa8:	2130      	movs	r1, #48	; 0x30
 8014aaa:	9b03      	ldr	r3, [sp, #12]
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d307      	bcc.n	8014ac0 <__cvt+0x9c>
 8014ab0:	9b03      	ldr	r3, [sp, #12]
 8014ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ab4:	1a1b      	subs	r3, r3, r0
 8014ab6:	6013      	str	r3, [r2, #0]
 8014ab8:	b005      	add	sp, #20
 8014aba:	ecbd 8b02 	vpop	{d8}
 8014abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ac0:	1c5c      	adds	r4, r3, #1
 8014ac2:	9403      	str	r4, [sp, #12]
 8014ac4:	7019      	strb	r1, [r3, #0]
 8014ac6:	e7f0      	b.n	8014aaa <__cvt+0x86>

08014ac8 <__exponent>:
 8014ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014aca:	4603      	mov	r3, r0
 8014acc:	2900      	cmp	r1, #0
 8014ace:	bfb8      	it	lt
 8014ad0:	4249      	neglt	r1, r1
 8014ad2:	f803 2b02 	strb.w	r2, [r3], #2
 8014ad6:	bfb4      	ite	lt
 8014ad8:	222d      	movlt	r2, #45	; 0x2d
 8014ada:	222b      	movge	r2, #43	; 0x2b
 8014adc:	2909      	cmp	r1, #9
 8014ade:	7042      	strb	r2, [r0, #1]
 8014ae0:	dd2a      	ble.n	8014b38 <__exponent+0x70>
 8014ae2:	f10d 0407 	add.w	r4, sp, #7
 8014ae6:	46a4      	mov	ip, r4
 8014ae8:	270a      	movs	r7, #10
 8014aea:	46a6      	mov	lr, r4
 8014aec:	460a      	mov	r2, r1
 8014aee:	fb91 f6f7 	sdiv	r6, r1, r7
 8014af2:	fb07 1516 	mls	r5, r7, r6, r1
 8014af6:	3530      	adds	r5, #48	; 0x30
 8014af8:	2a63      	cmp	r2, #99	; 0x63
 8014afa:	f104 34ff 	add.w	r4, r4, #4294967295
 8014afe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014b02:	4631      	mov	r1, r6
 8014b04:	dcf1      	bgt.n	8014aea <__exponent+0x22>
 8014b06:	3130      	adds	r1, #48	; 0x30
 8014b08:	f1ae 0502 	sub.w	r5, lr, #2
 8014b0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014b10:	1c44      	adds	r4, r0, #1
 8014b12:	4629      	mov	r1, r5
 8014b14:	4561      	cmp	r1, ip
 8014b16:	d30a      	bcc.n	8014b2e <__exponent+0x66>
 8014b18:	f10d 0209 	add.w	r2, sp, #9
 8014b1c:	eba2 020e 	sub.w	r2, r2, lr
 8014b20:	4565      	cmp	r5, ip
 8014b22:	bf88      	it	hi
 8014b24:	2200      	movhi	r2, #0
 8014b26:	4413      	add	r3, r2
 8014b28:	1a18      	subs	r0, r3, r0
 8014b2a:	b003      	add	sp, #12
 8014b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014b36:	e7ed      	b.n	8014b14 <__exponent+0x4c>
 8014b38:	2330      	movs	r3, #48	; 0x30
 8014b3a:	3130      	adds	r1, #48	; 0x30
 8014b3c:	7083      	strb	r3, [r0, #2]
 8014b3e:	70c1      	strb	r1, [r0, #3]
 8014b40:	1d03      	adds	r3, r0, #4
 8014b42:	e7f1      	b.n	8014b28 <__exponent+0x60>
 8014b44:	0000      	movs	r0, r0
	...

08014b48 <_printf_float>:
 8014b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b4c:	b08b      	sub	sp, #44	; 0x2c
 8014b4e:	460c      	mov	r4, r1
 8014b50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014b54:	4616      	mov	r6, r2
 8014b56:	461f      	mov	r7, r3
 8014b58:	4605      	mov	r5, r0
 8014b5a:	f001 fcd7 	bl	801650c <_localeconv_r>
 8014b5e:	f8d0 b000 	ldr.w	fp, [r0]
 8014b62:	4658      	mov	r0, fp
 8014b64:	f7eb fb6c 	bl	8000240 <strlen>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	9308      	str	r3, [sp, #32]
 8014b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014b74:	6822      	ldr	r2, [r4, #0]
 8014b76:	3307      	adds	r3, #7
 8014b78:	f023 0307 	bic.w	r3, r3, #7
 8014b7c:	f103 0108 	add.w	r1, r3, #8
 8014b80:	f8c8 1000 	str.w	r1, [r8]
 8014b84:	4682      	mov	sl, r0
 8014b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8014b8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014df0 <_printf_float+0x2a8>
 8014b92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014b96:	eeb0 6bc0 	vabs.f64	d6, d0
 8014b9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8014b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba2:	dd24      	ble.n	8014bee <_printf_float+0xa6>
 8014ba4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bac:	d502      	bpl.n	8014bb4 <_printf_float+0x6c>
 8014bae:	232d      	movs	r3, #45	; 0x2d
 8014bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bb4:	4b90      	ldr	r3, [pc, #576]	; (8014df8 <_printf_float+0x2b0>)
 8014bb6:	4891      	ldr	r0, [pc, #580]	; (8014dfc <_printf_float+0x2b4>)
 8014bb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014bbc:	bf94      	ite	ls
 8014bbe:	4698      	movls	r8, r3
 8014bc0:	4680      	movhi	r8, r0
 8014bc2:	2303      	movs	r3, #3
 8014bc4:	6123      	str	r3, [r4, #16]
 8014bc6:	f022 0204 	bic.w	r2, r2, #4
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6022      	str	r2, [r4, #0]
 8014bce:	9304      	str	r3, [sp, #16]
 8014bd0:	9700      	str	r7, [sp, #0]
 8014bd2:	4633      	mov	r3, r6
 8014bd4:	aa09      	add	r2, sp, #36	; 0x24
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	4628      	mov	r0, r5
 8014bda:	f000 f9d3 	bl	8014f84 <_printf_common>
 8014bde:	3001      	adds	r0, #1
 8014be0:	f040 808a 	bne.w	8014cf8 <_printf_float+0x1b0>
 8014be4:	f04f 30ff 	mov.w	r0, #4294967295
 8014be8:	b00b      	add	sp, #44	; 0x2c
 8014bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bee:	eeb4 0b40 	vcmp.f64	d0, d0
 8014bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf6:	d709      	bvc.n	8014c0c <_printf_float+0xc4>
 8014bf8:	ee10 3a90 	vmov	r3, s1
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	bfbc      	itt	lt
 8014c00:	232d      	movlt	r3, #45	; 0x2d
 8014c02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014c06:	487e      	ldr	r0, [pc, #504]	; (8014e00 <_printf_float+0x2b8>)
 8014c08:	4b7e      	ldr	r3, [pc, #504]	; (8014e04 <_printf_float+0x2bc>)
 8014c0a:	e7d5      	b.n	8014bb8 <_printf_float+0x70>
 8014c0c:	6863      	ldr	r3, [r4, #4]
 8014c0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014c12:	9104      	str	r1, [sp, #16]
 8014c14:	1c59      	adds	r1, r3, #1
 8014c16:	d13c      	bne.n	8014c92 <_printf_float+0x14a>
 8014c18:	2306      	movs	r3, #6
 8014c1a:	6063      	str	r3, [r4, #4]
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9303      	str	r3, [sp, #12]
 8014c20:	ab08      	add	r3, sp, #32
 8014c22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014c2a:	ab07      	add	r3, sp, #28
 8014c2c:	6861      	ldr	r1, [r4, #4]
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	6022      	str	r2, [r4, #0]
 8014c32:	f10d 031b 	add.w	r3, sp, #27
 8014c36:	4628      	mov	r0, r5
 8014c38:	f7ff fef4 	bl	8014a24 <__cvt>
 8014c3c:	9b04      	ldr	r3, [sp, #16]
 8014c3e:	9907      	ldr	r1, [sp, #28]
 8014c40:	2b47      	cmp	r3, #71	; 0x47
 8014c42:	4680      	mov	r8, r0
 8014c44:	d108      	bne.n	8014c58 <_printf_float+0x110>
 8014c46:	1cc8      	adds	r0, r1, #3
 8014c48:	db02      	blt.n	8014c50 <_printf_float+0x108>
 8014c4a:	6863      	ldr	r3, [r4, #4]
 8014c4c:	4299      	cmp	r1, r3
 8014c4e:	dd41      	ble.n	8014cd4 <_printf_float+0x18c>
 8014c50:	f1a9 0902 	sub.w	r9, r9, #2
 8014c54:	fa5f f989 	uxtb.w	r9, r9
 8014c58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014c5c:	d820      	bhi.n	8014ca0 <_printf_float+0x158>
 8014c5e:	3901      	subs	r1, #1
 8014c60:	464a      	mov	r2, r9
 8014c62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c66:	9107      	str	r1, [sp, #28]
 8014c68:	f7ff ff2e 	bl	8014ac8 <__exponent>
 8014c6c:	9a08      	ldr	r2, [sp, #32]
 8014c6e:	9004      	str	r0, [sp, #16]
 8014c70:	1813      	adds	r3, r2, r0
 8014c72:	2a01      	cmp	r2, #1
 8014c74:	6123      	str	r3, [r4, #16]
 8014c76:	dc02      	bgt.n	8014c7e <_printf_float+0x136>
 8014c78:	6822      	ldr	r2, [r4, #0]
 8014c7a:	07d2      	lsls	r2, r2, #31
 8014c7c:	d501      	bpl.n	8014c82 <_printf_float+0x13a>
 8014c7e:	3301      	adds	r3, #1
 8014c80:	6123      	str	r3, [r4, #16]
 8014c82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d0a2      	beq.n	8014bd0 <_printf_float+0x88>
 8014c8a:	232d      	movs	r3, #45	; 0x2d
 8014c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c90:	e79e      	b.n	8014bd0 <_printf_float+0x88>
 8014c92:	9904      	ldr	r1, [sp, #16]
 8014c94:	2947      	cmp	r1, #71	; 0x47
 8014c96:	d1c1      	bne.n	8014c1c <_printf_float+0xd4>
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d1bf      	bne.n	8014c1c <_printf_float+0xd4>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e7bc      	b.n	8014c1a <_printf_float+0xd2>
 8014ca0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014ca4:	d118      	bne.n	8014cd8 <_printf_float+0x190>
 8014ca6:	2900      	cmp	r1, #0
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	dd0b      	ble.n	8014cc4 <_printf_float+0x17c>
 8014cac:	6121      	str	r1, [r4, #16]
 8014cae:	b913      	cbnz	r3, 8014cb6 <_printf_float+0x16e>
 8014cb0:	6822      	ldr	r2, [r4, #0]
 8014cb2:	07d0      	lsls	r0, r2, #31
 8014cb4:	d502      	bpl.n	8014cbc <_printf_float+0x174>
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	440b      	add	r3, r1
 8014cba:	6123      	str	r3, [r4, #16]
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8014cc0:	9304      	str	r3, [sp, #16]
 8014cc2:	e7de      	b.n	8014c82 <_printf_float+0x13a>
 8014cc4:	b913      	cbnz	r3, 8014ccc <_printf_float+0x184>
 8014cc6:	6822      	ldr	r2, [r4, #0]
 8014cc8:	07d2      	lsls	r2, r2, #31
 8014cca:	d501      	bpl.n	8014cd0 <_printf_float+0x188>
 8014ccc:	3302      	adds	r3, #2
 8014cce:	e7f4      	b.n	8014cba <_printf_float+0x172>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e7f2      	b.n	8014cba <_printf_float+0x172>
 8014cd4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014cd8:	9b08      	ldr	r3, [sp, #32]
 8014cda:	4299      	cmp	r1, r3
 8014cdc:	db05      	blt.n	8014cea <_printf_float+0x1a2>
 8014cde:	6823      	ldr	r3, [r4, #0]
 8014ce0:	6121      	str	r1, [r4, #16]
 8014ce2:	07d8      	lsls	r0, r3, #31
 8014ce4:	d5ea      	bpl.n	8014cbc <_printf_float+0x174>
 8014ce6:	1c4b      	adds	r3, r1, #1
 8014ce8:	e7e7      	b.n	8014cba <_printf_float+0x172>
 8014cea:	2900      	cmp	r1, #0
 8014cec:	bfd4      	ite	le
 8014cee:	f1c1 0202 	rsble	r2, r1, #2
 8014cf2:	2201      	movgt	r2, #1
 8014cf4:	4413      	add	r3, r2
 8014cf6:	e7e0      	b.n	8014cba <_printf_float+0x172>
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	055a      	lsls	r2, r3, #21
 8014cfc:	d407      	bmi.n	8014d0e <_printf_float+0x1c6>
 8014cfe:	6923      	ldr	r3, [r4, #16]
 8014d00:	4642      	mov	r2, r8
 8014d02:	4631      	mov	r1, r6
 8014d04:	4628      	mov	r0, r5
 8014d06:	47b8      	blx	r7
 8014d08:	3001      	adds	r0, #1
 8014d0a:	d12a      	bne.n	8014d62 <_printf_float+0x21a>
 8014d0c:	e76a      	b.n	8014be4 <_printf_float+0x9c>
 8014d0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014d12:	f240 80e2 	bls.w	8014eda <_printf_float+0x392>
 8014d16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014d1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d22:	d133      	bne.n	8014d8c <_printf_float+0x244>
 8014d24:	4a38      	ldr	r2, [pc, #224]	; (8014e08 <_printf_float+0x2c0>)
 8014d26:	2301      	movs	r3, #1
 8014d28:	4631      	mov	r1, r6
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	47b8      	blx	r7
 8014d2e:	3001      	adds	r0, #1
 8014d30:	f43f af58 	beq.w	8014be4 <_printf_float+0x9c>
 8014d34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	db02      	blt.n	8014d42 <_printf_float+0x1fa>
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	07d8      	lsls	r0, r3, #31
 8014d40:	d50f      	bpl.n	8014d62 <_printf_float+0x21a>
 8014d42:	4653      	mov	r3, sl
 8014d44:	465a      	mov	r2, fp
 8014d46:	4631      	mov	r1, r6
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b8      	blx	r7
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	f43f af49 	beq.w	8014be4 <_printf_float+0x9c>
 8014d52:	f04f 0800 	mov.w	r8, #0
 8014d56:	f104 091a 	add.w	r9, r4, #26
 8014d5a:	9b08      	ldr	r3, [sp, #32]
 8014d5c:	3b01      	subs	r3, #1
 8014d5e:	4543      	cmp	r3, r8
 8014d60:	dc09      	bgt.n	8014d76 <_printf_float+0x22e>
 8014d62:	6823      	ldr	r3, [r4, #0]
 8014d64:	079b      	lsls	r3, r3, #30
 8014d66:	f100 8108 	bmi.w	8014f7a <_printf_float+0x432>
 8014d6a:	68e0      	ldr	r0, [r4, #12]
 8014d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d6e:	4298      	cmp	r0, r3
 8014d70:	bfb8      	it	lt
 8014d72:	4618      	movlt	r0, r3
 8014d74:	e738      	b.n	8014be8 <_printf_float+0xa0>
 8014d76:	2301      	movs	r3, #1
 8014d78:	464a      	mov	r2, r9
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b8      	blx	r7
 8014d80:	3001      	adds	r0, #1
 8014d82:	f43f af2f 	beq.w	8014be4 <_printf_float+0x9c>
 8014d86:	f108 0801 	add.w	r8, r8, #1
 8014d8a:	e7e6      	b.n	8014d5a <_printf_float+0x212>
 8014d8c:	9b07      	ldr	r3, [sp, #28]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	dc3c      	bgt.n	8014e0c <_printf_float+0x2c4>
 8014d92:	4a1d      	ldr	r2, [pc, #116]	; (8014e08 <_printf_float+0x2c0>)
 8014d94:	2301      	movs	r3, #1
 8014d96:	4631      	mov	r1, r6
 8014d98:	4628      	mov	r0, r5
 8014d9a:	47b8      	blx	r7
 8014d9c:	3001      	adds	r0, #1
 8014d9e:	f43f af21 	beq.w	8014be4 <_printf_float+0x9c>
 8014da2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014da6:	4313      	orrs	r3, r2
 8014da8:	d102      	bne.n	8014db0 <_printf_float+0x268>
 8014daa:	6823      	ldr	r3, [r4, #0]
 8014dac:	07d9      	lsls	r1, r3, #31
 8014dae:	d5d8      	bpl.n	8014d62 <_printf_float+0x21a>
 8014db0:	4653      	mov	r3, sl
 8014db2:	465a      	mov	r2, fp
 8014db4:	4631      	mov	r1, r6
 8014db6:	4628      	mov	r0, r5
 8014db8:	47b8      	blx	r7
 8014dba:	3001      	adds	r0, #1
 8014dbc:	f43f af12 	beq.w	8014be4 <_printf_float+0x9c>
 8014dc0:	f04f 0900 	mov.w	r9, #0
 8014dc4:	f104 0a1a 	add.w	sl, r4, #26
 8014dc8:	9b07      	ldr	r3, [sp, #28]
 8014dca:	425b      	negs	r3, r3
 8014dcc:	454b      	cmp	r3, r9
 8014dce:	dc01      	bgt.n	8014dd4 <_printf_float+0x28c>
 8014dd0:	9b08      	ldr	r3, [sp, #32]
 8014dd2:	e795      	b.n	8014d00 <_printf_float+0x1b8>
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	4652      	mov	r2, sl
 8014dd8:	4631      	mov	r1, r6
 8014dda:	4628      	mov	r0, r5
 8014ddc:	47b8      	blx	r7
 8014dde:	3001      	adds	r0, #1
 8014de0:	f43f af00 	beq.w	8014be4 <_printf_float+0x9c>
 8014de4:	f109 0901 	add.w	r9, r9, #1
 8014de8:	e7ee      	b.n	8014dc8 <_printf_float+0x280>
 8014dea:	bf00      	nop
 8014dec:	f3af 8000 	nop.w
 8014df0:	ffffffff 	.word	0xffffffff
 8014df4:	7fefffff 	.word	0x7fefffff
 8014df8:	0801946c 	.word	0x0801946c
 8014dfc:	08019470 	.word	0x08019470
 8014e00:	08019478 	.word	0x08019478
 8014e04:	08019474 	.word	0x08019474
 8014e08:	0801947c 	.word	0x0801947c
 8014e0c:	9a08      	ldr	r2, [sp, #32]
 8014e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e10:	429a      	cmp	r2, r3
 8014e12:	bfa8      	it	ge
 8014e14:	461a      	movge	r2, r3
 8014e16:	2a00      	cmp	r2, #0
 8014e18:	4691      	mov	r9, r2
 8014e1a:	dc38      	bgt.n	8014e8e <_printf_float+0x346>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	9305      	str	r3, [sp, #20]
 8014e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e24:	f104 021a 	add.w	r2, r4, #26
 8014e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e2a:	9905      	ldr	r1, [sp, #20]
 8014e2c:	9304      	str	r3, [sp, #16]
 8014e2e:	eba3 0309 	sub.w	r3, r3, r9
 8014e32:	428b      	cmp	r3, r1
 8014e34:	dc33      	bgt.n	8014e9e <_printf_float+0x356>
 8014e36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	db3c      	blt.n	8014eb8 <_printf_float+0x370>
 8014e3e:	6823      	ldr	r3, [r4, #0]
 8014e40:	07da      	lsls	r2, r3, #31
 8014e42:	d439      	bmi.n	8014eb8 <_printf_float+0x370>
 8014e44:	9b08      	ldr	r3, [sp, #32]
 8014e46:	9a04      	ldr	r2, [sp, #16]
 8014e48:	9907      	ldr	r1, [sp, #28]
 8014e4a:	1a9a      	subs	r2, r3, r2
 8014e4c:	eba3 0901 	sub.w	r9, r3, r1
 8014e50:	4591      	cmp	r9, r2
 8014e52:	bfa8      	it	ge
 8014e54:	4691      	movge	r9, r2
 8014e56:	f1b9 0f00 	cmp.w	r9, #0
 8014e5a:	dc35      	bgt.n	8014ec8 <_printf_float+0x380>
 8014e5c:	f04f 0800 	mov.w	r8, #0
 8014e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e64:	f104 0a1a 	add.w	sl, r4, #26
 8014e68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014e6c:	1a9b      	subs	r3, r3, r2
 8014e6e:	eba3 0309 	sub.w	r3, r3, r9
 8014e72:	4543      	cmp	r3, r8
 8014e74:	f77f af75 	ble.w	8014d62 <_printf_float+0x21a>
 8014e78:	2301      	movs	r3, #1
 8014e7a:	4652      	mov	r2, sl
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	4628      	mov	r0, r5
 8014e80:	47b8      	blx	r7
 8014e82:	3001      	adds	r0, #1
 8014e84:	f43f aeae 	beq.w	8014be4 <_printf_float+0x9c>
 8014e88:	f108 0801 	add.w	r8, r8, #1
 8014e8c:	e7ec      	b.n	8014e68 <_printf_float+0x320>
 8014e8e:	4613      	mov	r3, r2
 8014e90:	4631      	mov	r1, r6
 8014e92:	4642      	mov	r2, r8
 8014e94:	4628      	mov	r0, r5
 8014e96:	47b8      	blx	r7
 8014e98:	3001      	adds	r0, #1
 8014e9a:	d1bf      	bne.n	8014e1c <_printf_float+0x2d4>
 8014e9c:	e6a2      	b.n	8014be4 <_printf_float+0x9c>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	4631      	mov	r1, r6
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	9204      	str	r2, [sp, #16]
 8014ea6:	47b8      	blx	r7
 8014ea8:	3001      	adds	r0, #1
 8014eaa:	f43f ae9b 	beq.w	8014be4 <_printf_float+0x9c>
 8014eae:	9b05      	ldr	r3, [sp, #20]
 8014eb0:	9a04      	ldr	r2, [sp, #16]
 8014eb2:	3301      	adds	r3, #1
 8014eb4:	9305      	str	r3, [sp, #20]
 8014eb6:	e7b7      	b.n	8014e28 <_printf_float+0x2e0>
 8014eb8:	4653      	mov	r3, sl
 8014eba:	465a      	mov	r2, fp
 8014ebc:	4631      	mov	r1, r6
 8014ebe:	4628      	mov	r0, r5
 8014ec0:	47b8      	blx	r7
 8014ec2:	3001      	adds	r0, #1
 8014ec4:	d1be      	bne.n	8014e44 <_printf_float+0x2fc>
 8014ec6:	e68d      	b.n	8014be4 <_printf_float+0x9c>
 8014ec8:	9a04      	ldr	r2, [sp, #16]
 8014eca:	464b      	mov	r3, r9
 8014ecc:	4442      	add	r2, r8
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	47b8      	blx	r7
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	d1c1      	bne.n	8014e5c <_printf_float+0x314>
 8014ed8:	e684      	b.n	8014be4 <_printf_float+0x9c>
 8014eda:	9a08      	ldr	r2, [sp, #32]
 8014edc:	2a01      	cmp	r2, #1
 8014ede:	dc01      	bgt.n	8014ee4 <_printf_float+0x39c>
 8014ee0:	07db      	lsls	r3, r3, #31
 8014ee2:	d537      	bpl.n	8014f54 <_printf_float+0x40c>
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	4642      	mov	r2, r8
 8014ee8:	4631      	mov	r1, r6
 8014eea:	4628      	mov	r0, r5
 8014eec:	47b8      	blx	r7
 8014eee:	3001      	adds	r0, #1
 8014ef0:	f43f ae78 	beq.w	8014be4 <_printf_float+0x9c>
 8014ef4:	4653      	mov	r3, sl
 8014ef6:	465a      	mov	r2, fp
 8014ef8:	4631      	mov	r1, r6
 8014efa:	4628      	mov	r0, r5
 8014efc:	47b8      	blx	r7
 8014efe:	3001      	adds	r0, #1
 8014f00:	f43f ae70 	beq.w	8014be4 <_printf_float+0x9c>
 8014f04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014f08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f10:	d01b      	beq.n	8014f4a <_printf_float+0x402>
 8014f12:	9b08      	ldr	r3, [sp, #32]
 8014f14:	f108 0201 	add.w	r2, r8, #1
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	47b8      	blx	r7
 8014f20:	3001      	adds	r0, #1
 8014f22:	d10e      	bne.n	8014f42 <_printf_float+0x3fa>
 8014f24:	e65e      	b.n	8014be4 <_printf_float+0x9c>
 8014f26:	2301      	movs	r3, #1
 8014f28:	464a      	mov	r2, r9
 8014f2a:	4631      	mov	r1, r6
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	47b8      	blx	r7
 8014f30:	3001      	adds	r0, #1
 8014f32:	f43f ae57 	beq.w	8014be4 <_printf_float+0x9c>
 8014f36:	f108 0801 	add.w	r8, r8, #1
 8014f3a:	9b08      	ldr	r3, [sp, #32]
 8014f3c:	3b01      	subs	r3, #1
 8014f3e:	4543      	cmp	r3, r8
 8014f40:	dcf1      	bgt.n	8014f26 <_printf_float+0x3de>
 8014f42:	9b04      	ldr	r3, [sp, #16]
 8014f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f48:	e6db      	b.n	8014d02 <_printf_float+0x1ba>
 8014f4a:	f04f 0800 	mov.w	r8, #0
 8014f4e:	f104 091a 	add.w	r9, r4, #26
 8014f52:	e7f2      	b.n	8014f3a <_printf_float+0x3f2>
 8014f54:	2301      	movs	r3, #1
 8014f56:	4642      	mov	r2, r8
 8014f58:	e7df      	b.n	8014f1a <_printf_float+0x3d2>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	464a      	mov	r2, r9
 8014f5e:	4631      	mov	r1, r6
 8014f60:	4628      	mov	r0, r5
 8014f62:	47b8      	blx	r7
 8014f64:	3001      	adds	r0, #1
 8014f66:	f43f ae3d 	beq.w	8014be4 <_printf_float+0x9c>
 8014f6a:	f108 0801 	add.w	r8, r8, #1
 8014f6e:	68e3      	ldr	r3, [r4, #12]
 8014f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f72:	1a5b      	subs	r3, r3, r1
 8014f74:	4543      	cmp	r3, r8
 8014f76:	dcf0      	bgt.n	8014f5a <_printf_float+0x412>
 8014f78:	e6f7      	b.n	8014d6a <_printf_float+0x222>
 8014f7a:	f04f 0800 	mov.w	r8, #0
 8014f7e:	f104 0919 	add.w	r9, r4, #25
 8014f82:	e7f4      	b.n	8014f6e <_printf_float+0x426>

08014f84 <_printf_common>:
 8014f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f88:	4616      	mov	r6, r2
 8014f8a:	4699      	mov	r9, r3
 8014f8c:	688a      	ldr	r2, [r1, #8]
 8014f8e:	690b      	ldr	r3, [r1, #16]
 8014f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f94:	4293      	cmp	r3, r2
 8014f96:	bfb8      	it	lt
 8014f98:	4613      	movlt	r3, r2
 8014f9a:	6033      	str	r3, [r6, #0]
 8014f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fa0:	4607      	mov	r7, r0
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	b10a      	cbz	r2, 8014faa <_printf_common+0x26>
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	6033      	str	r3, [r6, #0]
 8014faa:	6823      	ldr	r3, [r4, #0]
 8014fac:	0699      	lsls	r1, r3, #26
 8014fae:	bf42      	ittt	mi
 8014fb0:	6833      	ldrmi	r3, [r6, #0]
 8014fb2:	3302      	addmi	r3, #2
 8014fb4:	6033      	strmi	r3, [r6, #0]
 8014fb6:	6825      	ldr	r5, [r4, #0]
 8014fb8:	f015 0506 	ands.w	r5, r5, #6
 8014fbc:	d106      	bne.n	8014fcc <_printf_common+0x48>
 8014fbe:	f104 0a19 	add.w	sl, r4, #25
 8014fc2:	68e3      	ldr	r3, [r4, #12]
 8014fc4:	6832      	ldr	r2, [r6, #0]
 8014fc6:	1a9b      	subs	r3, r3, r2
 8014fc8:	42ab      	cmp	r3, r5
 8014fca:	dc26      	bgt.n	801501a <_printf_common+0x96>
 8014fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fd0:	1e13      	subs	r3, r2, #0
 8014fd2:	6822      	ldr	r2, [r4, #0]
 8014fd4:	bf18      	it	ne
 8014fd6:	2301      	movne	r3, #1
 8014fd8:	0692      	lsls	r2, r2, #26
 8014fda:	d42b      	bmi.n	8015034 <_printf_common+0xb0>
 8014fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fe0:	4649      	mov	r1, r9
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	47c0      	blx	r8
 8014fe6:	3001      	adds	r0, #1
 8014fe8:	d01e      	beq.n	8015028 <_printf_common+0xa4>
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	68e5      	ldr	r5, [r4, #12]
 8014fee:	6832      	ldr	r2, [r6, #0]
 8014ff0:	f003 0306 	and.w	r3, r3, #6
 8014ff4:	2b04      	cmp	r3, #4
 8014ff6:	bf08      	it	eq
 8014ff8:	1aad      	subeq	r5, r5, r2
 8014ffa:	68a3      	ldr	r3, [r4, #8]
 8014ffc:	6922      	ldr	r2, [r4, #16]
 8014ffe:	bf0c      	ite	eq
 8015000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015004:	2500      	movne	r5, #0
 8015006:	4293      	cmp	r3, r2
 8015008:	bfc4      	itt	gt
 801500a:	1a9b      	subgt	r3, r3, r2
 801500c:	18ed      	addgt	r5, r5, r3
 801500e:	2600      	movs	r6, #0
 8015010:	341a      	adds	r4, #26
 8015012:	42b5      	cmp	r5, r6
 8015014:	d11a      	bne.n	801504c <_printf_common+0xc8>
 8015016:	2000      	movs	r0, #0
 8015018:	e008      	b.n	801502c <_printf_common+0xa8>
 801501a:	2301      	movs	r3, #1
 801501c:	4652      	mov	r2, sl
 801501e:	4649      	mov	r1, r9
 8015020:	4638      	mov	r0, r7
 8015022:	47c0      	blx	r8
 8015024:	3001      	adds	r0, #1
 8015026:	d103      	bne.n	8015030 <_printf_common+0xac>
 8015028:	f04f 30ff 	mov.w	r0, #4294967295
 801502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015030:	3501      	adds	r5, #1
 8015032:	e7c6      	b.n	8014fc2 <_printf_common+0x3e>
 8015034:	18e1      	adds	r1, r4, r3
 8015036:	1c5a      	adds	r2, r3, #1
 8015038:	2030      	movs	r0, #48	; 0x30
 801503a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801503e:	4422      	add	r2, r4
 8015040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015048:	3302      	adds	r3, #2
 801504a:	e7c7      	b.n	8014fdc <_printf_common+0x58>
 801504c:	2301      	movs	r3, #1
 801504e:	4622      	mov	r2, r4
 8015050:	4649      	mov	r1, r9
 8015052:	4638      	mov	r0, r7
 8015054:	47c0      	blx	r8
 8015056:	3001      	adds	r0, #1
 8015058:	d0e6      	beq.n	8015028 <_printf_common+0xa4>
 801505a:	3601      	adds	r6, #1
 801505c:	e7d9      	b.n	8015012 <_printf_common+0x8e>
	...

08015060 <_printf_i>:
 8015060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015064:	7e0f      	ldrb	r7, [r1, #24]
 8015066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015068:	2f78      	cmp	r7, #120	; 0x78
 801506a:	4691      	mov	r9, r2
 801506c:	4680      	mov	r8, r0
 801506e:	460c      	mov	r4, r1
 8015070:	469a      	mov	sl, r3
 8015072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015076:	d807      	bhi.n	8015088 <_printf_i+0x28>
 8015078:	2f62      	cmp	r7, #98	; 0x62
 801507a:	d80a      	bhi.n	8015092 <_printf_i+0x32>
 801507c:	2f00      	cmp	r7, #0
 801507e:	f000 80d8 	beq.w	8015232 <_printf_i+0x1d2>
 8015082:	2f58      	cmp	r7, #88	; 0x58
 8015084:	f000 80a3 	beq.w	80151ce <_printf_i+0x16e>
 8015088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801508c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015090:	e03a      	b.n	8015108 <_printf_i+0xa8>
 8015092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015096:	2b15      	cmp	r3, #21
 8015098:	d8f6      	bhi.n	8015088 <_printf_i+0x28>
 801509a:	a101      	add	r1, pc, #4	; (adr r1, 80150a0 <_printf_i+0x40>)
 801509c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150a0:	080150f9 	.word	0x080150f9
 80150a4:	0801510d 	.word	0x0801510d
 80150a8:	08015089 	.word	0x08015089
 80150ac:	08015089 	.word	0x08015089
 80150b0:	08015089 	.word	0x08015089
 80150b4:	08015089 	.word	0x08015089
 80150b8:	0801510d 	.word	0x0801510d
 80150bc:	08015089 	.word	0x08015089
 80150c0:	08015089 	.word	0x08015089
 80150c4:	08015089 	.word	0x08015089
 80150c8:	08015089 	.word	0x08015089
 80150cc:	08015219 	.word	0x08015219
 80150d0:	0801513d 	.word	0x0801513d
 80150d4:	080151fb 	.word	0x080151fb
 80150d8:	08015089 	.word	0x08015089
 80150dc:	08015089 	.word	0x08015089
 80150e0:	0801523b 	.word	0x0801523b
 80150e4:	08015089 	.word	0x08015089
 80150e8:	0801513d 	.word	0x0801513d
 80150ec:	08015089 	.word	0x08015089
 80150f0:	08015089 	.word	0x08015089
 80150f4:	08015203 	.word	0x08015203
 80150f8:	682b      	ldr	r3, [r5, #0]
 80150fa:	1d1a      	adds	r2, r3, #4
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	602a      	str	r2, [r5, #0]
 8015100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015108:	2301      	movs	r3, #1
 801510a:	e0a3      	b.n	8015254 <_printf_i+0x1f4>
 801510c:	6820      	ldr	r0, [r4, #0]
 801510e:	6829      	ldr	r1, [r5, #0]
 8015110:	0606      	lsls	r6, r0, #24
 8015112:	f101 0304 	add.w	r3, r1, #4
 8015116:	d50a      	bpl.n	801512e <_printf_i+0xce>
 8015118:	680e      	ldr	r6, [r1, #0]
 801511a:	602b      	str	r3, [r5, #0]
 801511c:	2e00      	cmp	r6, #0
 801511e:	da03      	bge.n	8015128 <_printf_i+0xc8>
 8015120:	232d      	movs	r3, #45	; 0x2d
 8015122:	4276      	negs	r6, r6
 8015124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015128:	485e      	ldr	r0, [pc, #376]	; (80152a4 <_printf_i+0x244>)
 801512a:	230a      	movs	r3, #10
 801512c:	e019      	b.n	8015162 <_printf_i+0x102>
 801512e:	680e      	ldr	r6, [r1, #0]
 8015130:	602b      	str	r3, [r5, #0]
 8015132:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015136:	bf18      	it	ne
 8015138:	b236      	sxthne	r6, r6
 801513a:	e7ef      	b.n	801511c <_printf_i+0xbc>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	6820      	ldr	r0, [r4, #0]
 8015140:	1d19      	adds	r1, r3, #4
 8015142:	6029      	str	r1, [r5, #0]
 8015144:	0601      	lsls	r1, r0, #24
 8015146:	d501      	bpl.n	801514c <_printf_i+0xec>
 8015148:	681e      	ldr	r6, [r3, #0]
 801514a:	e002      	b.n	8015152 <_printf_i+0xf2>
 801514c:	0646      	lsls	r6, r0, #25
 801514e:	d5fb      	bpl.n	8015148 <_printf_i+0xe8>
 8015150:	881e      	ldrh	r6, [r3, #0]
 8015152:	4854      	ldr	r0, [pc, #336]	; (80152a4 <_printf_i+0x244>)
 8015154:	2f6f      	cmp	r7, #111	; 0x6f
 8015156:	bf0c      	ite	eq
 8015158:	2308      	moveq	r3, #8
 801515a:	230a      	movne	r3, #10
 801515c:	2100      	movs	r1, #0
 801515e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015162:	6865      	ldr	r5, [r4, #4]
 8015164:	60a5      	str	r5, [r4, #8]
 8015166:	2d00      	cmp	r5, #0
 8015168:	bfa2      	ittt	ge
 801516a:	6821      	ldrge	r1, [r4, #0]
 801516c:	f021 0104 	bicge.w	r1, r1, #4
 8015170:	6021      	strge	r1, [r4, #0]
 8015172:	b90e      	cbnz	r6, 8015178 <_printf_i+0x118>
 8015174:	2d00      	cmp	r5, #0
 8015176:	d04d      	beq.n	8015214 <_printf_i+0x1b4>
 8015178:	4615      	mov	r5, r2
 801517a:	fbb6 f1f3 	udiv	r1, r6, r3
 801517e:	fb03 6711 	mls	r7, r3, r1, r6
 8015182:	5dc7      	ldrb	r7, [r0, r7]
 8015184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015188:	4637      	mov	r7, r6
 801518a:	42bb      	cmp	r3, r7
 801518c:	460e      	mov	r6, r1
 801518e:	d9f4      	bls.n	801517a <_printf_i+0x11a>
 8015190:	2b08      	cmp	r3, #8
 8015192:	d10b      	bne.n	80151ac <_printf_i+0x14c>
 8015194:	6823      	ldr	r3, [r4, #0]
 8015196:	07de      	lsls	r6, r3, #31
 8015198:	d508      	bpl.n	80151ac <_printf_i+0x14c>
 801519a:	6923      	ldr	r3, [r4, #16]
 801519c:	6861      	ldr	r1, [r4, #4]
 801519e:	4299      	cmp	r1, r3
 80151a0:	bfde      	ittt	le
 80151a2:	2330      	movle	r3, #48	; 0x30
 80151a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80151ac:	1b52      	subs	r2, r2, r5
 80151ae:	6122      	str	r2, [r4, #16]
 80151b0:	f8cd a000 	str.w	sl, [sp]
 80151b4:	464b      	mov	r3, r9
 80151b6:	aa03      	add	r2, sp, #12
 80151b8:	4621      	mov	r1, r4
 80151ba:	4640      	mov	r0, r8
 80151bc:	f7ff fee2 	bl	8014f84 <_printf_common>
 80151c0:	3001      	adds	r0, #1
 80151c2:	d14c      	bne.n	801525e <_printf_i+0x1fe>
 80151c4:	f04f 30ff 	mov.w	r0, #4294967295
 80151c8:	b004      	add	sp, #16
 80151ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ce:	4835      	ldr	r0, [pc, #212]	; (80152a4 <_printf_i+0x244>)
 80151d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80151d4:	6829      	ldr	r1, [r5, #0]
 80151d6:	6823      	ldr	r3, [r4, #0]
 80151d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80151dc:	6029      	str	r1, [r5, #0]
 80151de:	061d      	lsls	r5, r3, #24
 80151e0:	d514      	bpl.n	801520c <_printf_i+0x1ac>
 80151e2:	07df      	lsls	r7, r3, #31
 80151e4:	bf44      	itt	mi
 80151e6:	f043 0320 	orrmi.w	r3, r3, #32
 80151ea:	6023      	strmi	r3, [r4, #0]
 80151ec:	b91e      	cbnz	r6, 80151f6 <_printf_i+0x196>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	f023 0320 	bic.w	r3, r3, #32
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	2310      	movs	r3, #16
 80151f8:	e7b0      	b.n	801515c <_printf_i+0xfc>
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	f043 0320 	orr.w	r3, r3, #32
 8015200:	6023      	str	r3, [r4, #0]
 8015202:	2378      	movs	r3, #120	; 0x78
 8015204:	4828      	ldr	r0, [pc, #160]	; (80152a8 <_printf_i+0x248>)
 8015206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801520a:	e7e3      	b.n	80151d4 <_printf_i+0x174>
 801520c:	0659      	lsls	r1, r3, #25
 801520e:	bf48      	it	mi
 8015210:	b2b6      	uxthmi	r6, r6
 8015212:	e7e6      	b.n	80151e2 <_printf_i+0x182>
 8015214:	4615      	mov	r5, r2
 8015216:	e7bb      	b.n	8015190 <_printf_i+0x130>
 8015218:	682b      	ldr	r3, [r5, #0]
 801521a:	6826      	ldr	r6, [r4, #0]
 801521c:	6961      	ldr	r1, [r4, #20]
 801521e:	1d18      	adds	r0, r3, #4
 8015220:	6028      	str	r0, [r5, #0]
 8015222:	0635      	lsls	r5, r6, #24
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	d501      	bpl.n	801522c <_printf_i+0x1cc>
 8015228:	6019      	str	r1, [r3, #0]
 801522a:	e002      	b.n	8015232 <_printf_i+0x1d2>
 801522c:	0670      	lsls	r0, r6, #25
 801522e:	d5fb      	bpl.n	8015228 <_printf_i+0x1c8>
 8015230:	8019      	strh	r1, [r3, #0]
 8015232:	2300      	movs	r3, #0
 8015234:	6123      	str	r3, [r4, #16]
 8015236:	4615      	mov	r5, r2
 8015238:	e7ba      	b.n	80151b0 <_printf_i+0x150>
 801523a:	682b      	ldr	r3, [r5, #0]
 801523c:	1d1a      	adds	r2, r3, #4
 801523e:	602a      	str	r2, [r5, #0]
 8015240:	681d      	ldr	r5, [r3, #0]
 8015242:	6862      	ldr	r2, [r4, #4]
 8015244:	2100      	movs	r1, #0
 8015246:	4628      	mov	r0, r5
 8015248:	f7eb f802 	bl	8000250 <memchr>
 801524c:	b108      	cbz	r0, 8015252 <_printf_i+0x1f2>
 801524e:	1b40      	subs	r0, r0, r5
 8015250:	6060      	str	r0, [r4, #4]
 8015252:	6863      	ldr	r3, [r4, #4]
 8015254:	6123      	str	r3, [r4, #16]
 8015256:	2300      	movs	r3, #0
 8015258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801525c:	e7a8      	b.n	80151b0 <_printf_i+0x150>
 801525e:	6923      	ldr	r3, [r4, #16]
 8015260:	462a      	mov	r2, r5
 8015262:	4649      	mov	r1, r9
 8015264:	4640      	mov	r0, r8
 8015266:	47d0      	blx	sl
 8015268:	3001      	adds	r0, #1
 801526a:	d0ab      	beq.n	80151c4 <_printf_i+0x164>
 801526c:	6823      	ldr	r3, [r4, #0]
 801526e:	079b      	lsls	r3, r3, #30
 8015270:	d413      	bmi.n	801529a <_printf_i+0x23a>
 8015272:	68e0      	ldr	r0, [r4, #12]
 8015274:	9b03      	ldr	r3, [sp, #12]
 8015276:	4298      	cmp	r0, r3
 8015278:	bfb8      	it	lt
 801527a:	4618      	movlt	r0, r3
 801527c:	e7a4      	b.n	80151c8 <_printf_i+0x168>
 801527e:	2301      	movs	r3, #1
 8015280:	4632      	mov	r2, r6
 8015282:	4649      	mov	r1, r9
 8015284:	4640      	mov	r0, r8
 8015286:	47d0      	blx	sl
 8015288:	3001      	adds	r0, #1
 801528a:	d09b      	beq.n	80151c4 <_printf_i+0x164>
 801528c:	3501      	adds	r5, #1
 801528e:	68e3      	ldr	r3, [r4, #12]
 8015290:	9903      	ldr	r1, [sp, #12]
 8015292:	1a5b      	subs	r3, r3, r1
 8015294:	42ab      	cmp	r3, r5
 8015296:	dcf2      	bgt.n	801527e <_printf_i+0x21e>
 8015298:	e7eb      	b.n	8015272 <_printf_i+0x212>
 801529a:	2500      	movs	r5, #0
 801529c:	f104 0619 	add.w	r6, r4, #25
 80152a0:	e7f5      	b.n	801528e <_printf_i+0x22e>
 80152a2:	bf00      	nop
 80152a4:	0801947e 	.word	0x0801947e
 80152a8:	0801948f 	.word	0x0801948f

080152ac <iprintf>:
 80152ac:	b40f      	push	{r0, r1, r2, r3}
 80152ae:	4b0a      	ldr	r3, [pc, #40]	; (80152d8 <iprintf+0x2c>)
 80152b0:	b513      	push	{r0, r1, r4, lr}
 80152b2:	681c      	ldr	r4, [r3, #0]
 80152b4:	b124      	cbz	r4, 80152c0 <iprintf+0x14>
 80152b6:	69a3      	ldr	r3, [r4, #24]
 80152b8:	b913      	cbnz	r3, 80152c0 <iprintf+0x14>
 80152ba:	4620      	mov	r0, r4
 80152bc:	f001 f888 	bl	80163d0 <__sinit>
 80152c0:	ab05      	add	r3, sp, #20
 80152c2:	9a04      	ldr	r2, [sp, #16]
 80152c4:	68a1      	ldr	r1, [r4, #8]
 80152c6:	9301      	str	r3, [sp, #4]
 80152c8:	4620      	mov	r0, r4
 80152ca:	f001 fee5 	bl	8017098 <_vfiprintf_r>
 80152ce:	b002      	add	sp, #8
 80152d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152d4:	b004      	add	sp, #16
 80152d6:	4770      	bx	lr
 80152d8:	20001440 	.word	0x20001440

080152dc <_puts_r>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	460e      	mov	r6, r1
 80152e0:	4605      	mov	r5, r0
 80152e2:	b118      	cbz	r0, 80152ec <_puts_r+0x10>
 80152e4:	6983      	ldr	r3, [r0, #24]
 80152e6:	b90b      	cbnz	r3, 80152ec <_puts_r+0x10>
 80152e8:	f001 f872 	bl	80163d0 <__sinit>
 80152ec:	69ab      	ldr	r3, [r5, #24]
 80152ee:	68ac      	ldr	r4, [r5, #8]
 80152f0:	b913      	cbnz	r3, 80152f8 <_puts_r+0x1c>
 80152f2:	4628      	mov	r0, r5
 80152f4:	f001 f86c 	bl	80163d0 <__sinit>
 80152f8:	4b2c      	ldr	r3, [pc, #176]	; (80153ac <_puts_r+0xd0>)
 80152fa:	429c      	cmp	r4, r3
 80152fc:	d120      	bne.n	8015340 <_puts_r+0x64>
 80152fe:	686c      	ldr	r4, [r5, #4]
 8015300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015302:	07db      	lsls	r3, r3, #31
 8015304:	d405      	bmi.n	8015312 <_puts_r+0x36>
 8015306:	89a3      	ldrh	r3, [r4, #12]
 8015308:	0598      	lsls	r0, r3, #22
 801530a:	d402      	bmi.n	8015312 <_puts_r+0x36>
 801530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801530e:	f001 f902 	bl	8016516 <__retarget_lock_acquire_recursive>
 8015312:	89a3      	ldrh	r3, [r4, #12]
 8015314:	0719      	lsls	r1, r3, #28
 8015316:	d51d      	bpl.n	8015354 <_puts_r+0x78>
 8015318:	6923      	ldr	r3, [r4, #16]
 801531a:	b1db      	cbz	r3, 8015354 <_puts_r+0x78>
 801531c:	3e01      	subs	r6, #1
 801531e:	68a3      	ldr	r3, [r4, #8]
 8015320:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015324:	3b01      	subs	r3, #1
 8015326:	60a3      	str	r3, [r4, #8]
 8015328:	bb39      	cbnz	r1, 801537a <_puts_r+0x9e>
 801532a:	2b00      	cmp	r3, #0
 801532c:	da38      	bge.n	80153a0 <_puts_r+0xc4>
 801532e:	4622      	mov	r2, r4
 8015330:	210a      	movs	r1, #10
 8015332:	4628      	mov	r0, r5
 8015334:	f000 f878 	bl	8015428 <__swbuf_r>
 8015338:	3001      	adds	r0, #1
 801533a:	d011      	beq.n	8015360 <_puts_r+0x84>
 801533c:	250a      	movs	r5, #10
 801533e:	e011      	b.n	8015364 <_puts_r+0x88>
 8015340:	4b1b      	ldr	r3, [pc, #108]	; (80153b0 <_puts_r+0xd4>)
 8015342:	429c      	cmp	r4, r3
 8015344:	d101      	bne.n	801534a <_puts_r+0x6e>
 8015346:	68ac      	ldr	r4, [r5, #8]
 8015348:	e7da      	b.n	8015300 <_puts_r+0x24>
 801534a:	4b1a      	ldr	r3, [pc, #104]	; (80153b4 <_puts_r+0xd8>)
 801534c:	429c      	cmp	r4, r3
 801534e:	bf08      	it	eq
 8015350:	68ec      	ldreq	r4, [r5, #12]
 8015352:	e7d5      	b.n	8015300 <_puts_r+0x24>
 8015354:	4621      	mov	r1, r4
 8015356:	4628      	mov	r0, r5
 8015358:	f000 f8b8 	bl	80154cc <__swsetup_r>
 801535c:	2800      	cmp	r0, #0
 801535e:	d0dd      	beq.n	801531c <_puts_r+0x40>
 8015360:	f04f 35ff 	mov.w	r5, #4294967295
 8015364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015366:	07da      	lsls	r2, r3, #31
 8015368:	d405      	bmi.n	8015376 <_puts_r+0x9a>
 801536a:	89a3      	ldrh	r3, [r4, #12]
 801536c:	059b      	lsls	r3, r3, #22
 801536e:	d402      	bmi.n	8015376 <_puts_r+0x9a>
 8015370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015372:	f001 f8d1 	bl	8016518 <__retarget_lock_release_recursive>
 8015376:	4628      	mov	r0, r5
 8015378:	bd70      	pop	{r4, r5, r6, pc}
 801537a:	2b00      	cmp	r3, #0
 801537c:	da04      	bge.n	8015388 <_puts_r+0xac>
 801537e:	69a2      	ldr	r2, [r4, #24]
 8015380:	429a      	cmp	r2, r3
 8015382:	dc06      	bgt.n	8015392 <_puts_r+0xb6>
 8015384:	290a      	cmp	r1, #10
 8015386:	d004      	beq.n	8015392 <_puts_r+0xb6>
 8015388:	6823      	ldr	r3, [r4, #0]
 801538a:	1c5a      	adds	r2, r3, #1
 801538c:	6022      	str	r2, [r4, #0]
 801538e:	7019      	strb	r1, [r3, #0]
 8015390:	e7c5      	b.n	801531e <_puts_r+0x42>
 8015392:	4622      	mov	r2, r4
 8015394:	4628      	mov	r0, r5
 8015396:	f000 f847 	bl	8015428 <__swbuf_r>
 801539a:	3001      	adds	r0, #1
 801539c:	d1bf      	bne.n	801531e <_puts_r+0x42>
 801539e:	e7df      	b.n	8015360 <_puts_r+0x84>
 80153a0:	6823      	ldr	r3, [r4, #0]
 80153a2:	250a      	movs	r5, #10
 80153a4:	1c5a      	adds	r2, r3, #1
 80153a6:	6022      	str	r2, [r4, #0]
 80153a8:	701d      	strb	r5, [r3, #0]
 80153aa:	e7db      	b.n	8015364 <_puts_r+0x88>
 80153ac:	08019550 	.word	0x08019550
 80153b0:	08019570 	.word	0x08019570
 80153b4:	08019530 	.word	0x08019530

080153b8 <puts>:
 80153b8:	4b02      	ldr	r3, [pc, #8]	; (80153c4 <puts+0xc>)
 80153ba:	4601      	mov	r1, r0
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	f7ff bf8d 	b.w	80152dc <_puts_r>
 80153c2:	bf00      	nop
 80153c4:	20001440 	.word	0x20001440

080153c8 <_sbrk_r>:
 80153c8:	b538      	push	{r3, r4, r5, lr}
 80153ca:	4d06      	ldr	r5, [pc, #24]	; (80153e4 <_sbrk_r+0x1c>)
 80153cc:	2300      	movs	r3, #0
 80153ce:	4604      	mov	r4, r0
 80153d0:	4608      	mov	r0, r1
 80153d2:	602b      	str	r3, [r5, #0]
 80153d4:	f7ec fd00 	bl	8001dd8 <_sbrk>
 80153d8:	1c43      	adds	r3, r0, #1
 80153da:	d102      	bne.n	80153e2 <_sbrk_r+0x1a>
 80153dc:	682b      	ldr	r3, [r5, #0]
 80153de:	b103      	cbz	r3, 80153e2 <_sbrk_r+0x1a>
 80153e0:	6023      	str	r3, [r4, #0]
 80153e2:	bd38      	pop	{r3, r4, r5, pc}
 80153e4:	20001b4c 	.word	0x20001b4c

080153e8 <siprintf>:
 80153e8:	b40e      	push	{r1, r2, r3}
 80153ea:	b500      	push	{lr}
 80153ec:	b09c      	sub	sp, #112	; 0x70
 80153ee:	ab1d      	add	r3, sp, #116	; 0x74
 80153f0:	9002      	str	r0, [sp, #8]
 80153f2:	9006      	str	r0, [sp, #24]
 80153f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153f8:	4809      	ldr	r0, [pc, #36]	; (8015420 <siprintf+0x38>)
 80153fa:	9107      	str	r1, [sp, #28]
 80153fc:	9104      	str	r1, [sp, #16]
 80153fe:	4909      	ldr	r1, [pc, #36]	; (8015424 <siprintf+0x3c>)
 8015400:	f853 2b04 	ldr.w	r2, [r3], #4
 8015404:	9105      	str	r1, [sp, #20]
 8015406:	6800      	ldr	r0, [r0, #0]
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	a902      	add	r1, sp, #8
 801540c:	f001 fd1a 	bl	8016e44 <_svfiprintf_r>
 8015410:	9b02      	ldr	r3, [sp, #8]
 8015412:	2200      	movs	r2, #0
 8015414:	701a      	strb	r2, [r3, #0]
 8015416:	b01c      	add	sp, #112	; 0x70
 8015418:	f85d eb04 	ldr.w	lr, [sp], #4
 801541c:	b003      	add	sp, #12
 801541e:	4770      	bx	lr
 8015420:	20001440 	.word	0x20001440
 8015424:	ffff0208 	.word	0xffff0208

08015428 <__swbuf_r>:
 8015428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801542a:	460e      	mov	r6, r1
 801542c:	4614      	mov	r4, r2
 801542e:	4605      	mov	r5, r0
 8015430:	b118      	cbz	r0, 801543a <__swbuf_r+0x12>
 8015432:	6983      	ldr	r3, [r0, #24]
 8015434:	b90b      	cbnz	r3, 801543a <__swbuf_r+0x12>
 8015436:	f000 ffcb 	bl	80163d0 <__sinit>
 801543a:	4b21      	ldr	r3, [pc, #132]	; (80154c0 <__swbuf_r+0x98>)
 801543c:	429c      	cmp	r4, r3
 801543e:	d12b      	bne.n	8015498 <__swbuf_r+0x70>
 8015440:	686c      	ldr	r4, [r5, #4]
 8015442:	69a3      	ldr	r3, [r4, #24]
 8015444:	60a3      	str	r3, [r4, #8]
 8015446:	89a3      	ldrh	r3, [r4, #12]
 8015448:	071a      	lsls	r2, r3, #28
 801544a:	d52f      	bpl.n	80154ac <__swbuf_r+0x84>
 801544c:	6923      	ldr	r3, [r4, #16]
 801544e:	b36b      	cbz	r3, 80154ac <__swbuf_r+0x84>
 8015450:	6923      	ldr	r3, [r4, #16]
 8015452:	6820      	ldr	r0, [r4, #0]
 8015454:	1ac0      	subs	r0, r0, r3
 8015456:	6963      	ldr	r3, [r4, #20]
 8015458:	b2f6      	uxtb	r6, r6
 801545a:	4283      	cmp	r3, r0
 801545c:	4637      	mov	r7, r6
 801545e:	dc04      	bgt.n	801546a <__swbuf_r+0x42>
 8015460:	4621      	mov	r1, r4
 8015462:	4628      	mov	r0, r5
 8015464:	f000 ff20 	bl	80162a8 <_fflush_r>
 8015468:	bb30      	cbnz	r0, 80154b8 <__swbuf_r+0x90>
 801546a:	68a3      	ldr	r3, [r4, #8]
 801546c:	3b01      	subs	r3, #1
 801546e:	60a3      	str	r3, [r4, #8]
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	1c5a      	adds	r2, r3, #1
 8015474:	6022      	str	r2, [r4, #0]
 8015476:	701e      	strb	r6, [r3, #0]
 8015478:	6963      	ldr	r3, [r4, #20]
 801547a:	3001      	adds	r0, #1
 801547c:	4283      	cmp	r3, r0
 801547e:	d004      	beq.n	801548a <__swbuf_r+0x62>
 8015480:	89a3      	ldrh	r3, [r4, #12]
 8015482:	07db      	lsls	r3, r3, #31
 8015484:	d506      	bpl.n	8015494 <__swbuf_r+0x6c>
 8015486:	2e0a      	cmp	r6, #10
 8015488:	d104      	bne.n	8015494 <__swbuf_r+0x6c>
 801548a:	4621      	mov	r1, r4
 801548c:	4628      	mov	r0, r5
 801548e:	f000 ff0b 	bl	80162a8 <_fflush_r>
 8015492:	b988      	cbnz	r0, 80154b8 <__swbuf_r+0x90>
 8015494:	4638      	mov	r0, r7
 8015496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015498:	4b0a      	ldr	r3, [pc, #40]	; (80154c4 <__swbuf_r+0x9c>)
 801549a:	429c      	cmp	r4, r3
 801549c:	d101      	bne.n	80154a2 <__swbuf_r+0x7a>
 801549e:	68ac      	ldr	r4, [r5, #8]
 80154a0:	e7cf      	b.n	8015442 <__swbuf_r+0x1a>
 80154a2:	4b09      	ldr	r3, [pc, #36]	; (80154c8 <__swbuf_r+0xa0>)
 80154a4:	429c      	cmp	r4, r3
 80154a6:	bf08      	it	eq
 80154a8:	68ec      	ldreq	r4, [r5, #12]
 80154aa:	e7ca      	b.n	8015442 <__swbuf_r+0x1a>
 80154ac:	4621      	mov	r1, r4
 80154ae:	4628      	mov	r0, r5
 80154b0:	f000 f80c 	bl	80154cc <__swsetup_r>
 80154b4:	2800      	cmp	r0, #0
 80154b6:	d0cb      	beq.n	8015450 <__swbuf_r+0x28>
 80154b8:	f04f 37ff 	mov.w	r7, #4294967295
 80154bc:	e7ea      	b.n	8015494 <__swbuf_r+0x6c>
 80154be:	bf00      	nop
 80154c0:	08019550 	.word	0x08019550
 80154c4:	08019570 	.word	0x08019570
 80154c8:	08019530 	.word	0x08019530

080154cc <__swsetup_r>:
 80154cc:	4b32      	ldr	r3, [pc, #200]	; (8015598 <__swsetup_r+0xcc>)
 80154ce:	b570      	push	{r4, r5, r6, lr}
 80154d0:	681d      	ldr	r5, [r3, #0]
 80154d2:	4606      	mov	r6, r0
 80154d4:	460c      	mov	r4, r1
 80154d6:	b125      	cbz	r5, 80154e2 <__swsetup_r+0x16>
 80154d8:	69ab      	ldr	r3, [r5, #24]
 80154da:	b913      	cbnz	r3, 80154e2 <__swsetup_r+0x16>
 80154dc:	4628      	mov	r0, r5
 80154de:	f000 ff77 	bl	80163d0 <__sinit>
 80154e2:	4b2e      	ldr	r3, [pc, #184]	; (801559c <__swsetup_r+0xd0>)
 80154e4:	429c      	cmp	r4, r3
 80154e6:	d10f      	bne.n	8015508 <__swsetup_r+0x3c>
 80154e8:	686c      	ldr	r4, [r5, #4]
 80154ea:	89a3      	ldrh	r3, [r4, #12]
 80154ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154f0:	0719      	lsls	r1, r3, #28
 80154f2:	d42c      	bmi.n	801554e <__swsetup_r+0x82>
 80154f4:	06dd      	lsls	r5, r3, #27
 80154f6:	d411      	bmi.n	801551c <__swsetup_r+0x50>
 80154f8:	2309      	movs	r3, #9
 80154fa:	6033      	str	r3, [r6, #0]
 80154fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015500:	81a3      	strh	r3, [r4, #12]
 8015502:	f04f 30ff 	mov.w	r0, #4294967295
 8015506:	e03e      	b.n	8015586 <__swsetup_r+0xba>
 8015508:	4b25      	ldr	r3, [pc, #148]	; (80155a0 <__swsetup_r+0xd4>)
 801550a:	429c      	cmp	r4, r3
 801550c:	d101      	bne.n	8015512 <__swsetup_r+0x46>
 801550e:	68ac      	ldr	r4, [r5, #8]
 8015510:	e7eb      	b.n	80154ea <__swsetup_r+0x1e>
 8015512:	4b24      	ldr	r3, [pc, #144]	; (80155a4 <__swsetup_r+0xd8>)
 8015514:	429c      	cmp	r4, r3
 8015516:	bf08      	it	eq
 8015518:	68ec      	ldreq	r4, [r5, #12]
 801551a:	e7e6      	b.n	80154ea <__swsetup_r+0x1e>
 801551c:	0758      	lsls	r0, r3, #29
 801551e:	d512      	bpl.n	8015546 <__swsetup_r+0x7a>
 8015520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015522:	b141      	cbz	r1, 8015536 <__swsetup_r+0x6a>
 8015524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015528:	4299      	cmp	r1, r3
 801552a:	d002      	beq.n	8015532 <__swsetup_r+0x66>
 801552c:	4630      	mov	r0, r6
 801552e:	f7ff f999 	bl	8014864 <_free_r>
 8015532:	2300      	movs	r3, #0
 8015534:	6363      	str	r3, [r4, #52]	; 0x34
 8015536:	89a3      	ldrh	r3, [r4, #12]
 8015538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801553c:	81a3      	strh	r3, [r4, #12]
 801553e:	2300      	movs	r3, #0
 8015540:	6063      	str	r3, [r4, #4]
 8015542:	6923      	ldr	r3, [r4, #16]
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	89a3      	ldrh	r3, [r4, #12]
 8015548:	f043 0308 	orr.w	r3, r3, #8
 801554c:	81a3      	strh	r3, [r4, #12]
 801554e:	6923      	ldr	r3, [r4, #16]
 8015550:	b94b      	cbnz	r3, 8015566 <__swsetup_r+0x9a>
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801555c:	d003      	beq.n	8015566 <__swsetup_r+0x9a>
 801555e:	4621      	mov	r1, r4
 8015560:	4630      	mov	r0, r6
 8015562:	f000 ffff 	bl	8016564 <__smakebuf_r>
 8015566:	89a0      	ldrh	r0, [r4, #12]
 8015568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801556c:	f010 0301 	ands.w	r3, r0, #1
 8015570:	d00a      	beq.n	8015588 <__swsetup_r+0xbc>
 8015572:	2300      	movs	r3, #0
 8015574:	60a3      	str	r3, [r4, #8]
 8015576:	6963      	ldr	r3, [r4, #20]
 8015578:	425b      	negs	r3, r3
 801557a:	61a3      	str	r3, [r4, #24]
 801557c:	6923      	ldr	r3, [r4, #16]
 801557e:	b943      	cbnz	r3, 8015592 <__swsetup_r+0xc6>
 8015580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015584:	d1ba      	bne.n	80154fc <__swsetup_r+0x30>
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	0781      	lsls	r1, r0, #30
 801558a:	bf58      	it	pl
 801558c:	6963      	ldrpl	r3, [r4, #20]
 801558e:	60a3      	str	r3, [r4, #8]
 8015590:	e7f4      	b.n	801557c <__swsetup_r+0xb0>
 8015592:	2000      	movs	r0, #0
 8015594:	e7f7      	b.n	8015586 <__swsetup_r+0xba>
 8015596:	bf00      	nop
 8015598:	20001440 	.word	0x20001440
 801559c:	08019550 	.word	0x08019550
 80155a0:	08019570 	.word	0x08019570
 80155a4:	08019530 	.word	0x08019530

080155a8 <quorem>:
 80155a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ac:	6903      	ldr	r3, [r0, #16]
 80155ae:	690c      	ldr	r4, [r1, #16]
 80155b0:	42a3      	cmp	r3, r4
 80155b2:	4607      	mov	r7, r0
 80155b4:	f2c0 8081 	blt.w	80156ba <quorem+0x112>
 80155b8:	3c01      	subs	r4, #1
 80155ba:	f101 0814 	add.w	r8, r1, #20
 80155be:	f100 0514 	add.w	r5, r0, #20
 80155c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80155c6:	9301      	str	r3, [sp, #4]
 80155c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80155cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80155d0:	3301      	adds	r3, #1
 80155d2:	429a      	cmp	r2, r3
 80155d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80155d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80155dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80155e0:	d331      	bcc.n	8015646 <quorem+0x9e>
 80155e2:	f04f 0e00 	mov.w	lr, #0
 80155e6:	4640      	mov	r0, r8
 80155e8:	46ac      	mov	ip, r5
 80155ea:	46f2      	mov	sl, lr
 80155ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80155f0:	b293      	uxth	r3, r2
 80155f2:	fb06 e303 	mla	r3, r6, r3, lr
 80155f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	ebaa 0303 	sub.w	r3, sl, r3
 8015600:	f8dc a000 	ldr.w	sl, [ip]
 8015604:	0c12      	lsrs	r2, r2, #16
 8015606:	fa13 f38a 	uxtah	r3, r3, sl
 801560a:	fb06 e202 	mla	r2, r6, r2, lr
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	9b00      	ldr	r3, [sp, #0]
 8015612:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015616:	b292      	uxth	r2, r2
 8015618:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801561c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015620:	f8bd 3000 	ldrh.w	r3, [sp]
 8015624:	4581      	cmp	r9, r0
 8015626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801562a:	f84c 3b04 	str.w	r3, [ip], #4
 801562e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015632:	d2db      	bcs.n	80155ec <quorem+0x44>
 8015634:	f855 300b 	ldr.w	r3, [r5, fp]
 8015638:	b92b      	cbnz	r3, 8015646 <quorem+0x9e>
 801563a:	9b01      	ldr	r3, [sp, #4]
 801563c:	3b04      	subs	r3, #4
 801563e:	429d      	cmp	r5, r3
 8015640:	461a      	mov	r2, r3
 8015642:	d32e      	bcc.n	80156a2 <quorem+0xfa>
 8015644:	613c      	str	r4, [r7, #16]
 8015646:	4638      	mov	r0, r7
 8015648:	f001 fa5a 	bl	8016b00 <__mcmp>
 801564c:	2800      	cmp	r0, #0
 801564e:	db24      	blt.n	801569a <quorem+0xf2>
 8015650:	3601      	adds	r6, #1
 8015652:	4628      	mov	r0, r5
 8015654:	f04f 0c00 	mov.w	ip, #0
 8015658:	f858 2b04 	ldr.w	r2, [r8], #4
 801565c:	f8d0 e000 	ldr.w	lr, [r0]
 8015660:	b293      	uxth	r3, r2
 8015662:	ebac 0303 	sub.w	r3, ip, r3
 8015666:	0c12      	lsrs	r2, r2, #16
 8015668:	fa13 f38e 	uxtah	r3, r3, lr
 801566c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015674:	b29b      	uxth	r3, r3
 8015676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801567a:	45c1      	cmp	r9, r8
 801567c:	f840 3b04 	str.w	r3, [r0], #4
 8015680:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015684:	d2e8      	bcs.n	8015658 <quorem+0xb0>
 8015686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801568a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801568e:	b922      	cbnz	r2, 801569a <quorem+0xf2>
 8015690:	3b04      	subs	r3, #4
 8015692:	429d      	cmp	r5, r3
 8015694:	461a      	mov	r2, r3
 8015696:	d30a      	bcc.n	80156ae <quorem+0x106>
 8015698:	613c      	str	r4, [r7, #16]
 801569a:	4630      	mov	r0, r6
 801569c:	b003      	add	sp, #12
 801569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a2:	6812      	ldr	r2, [r2, #0]
 80156a4:	3b04      	subs	r3, #4
 80156a6:	2a00      	cmp	r2, #0
 80156a8:	d1cc      	bne.n	8015644 <quorem+0x9c>
 80156aa:	3c01      	subs	r4, #1
 80156ac:	e7c7      	b.n	801563e <quorem+0x96>
 80156ae:	6812      	ldr	r2, [r2, #0]
 80156b0:	3b04      	subs	r3, #4
 80156b2:	2a00      	cmp	r2, #0
 80156b4:	d1f0      	bne.n	8015698 <quorem+0xf0>
 80156b6:	3c01      	subs	r4, #1
 80156b8:	e7eb      	b.n	8015692 <quorem+0xea>
 80156ba:	2000      	movs	r0, #0
 80156bc:	e7ee      	b.n	801569c <quorem+0xf4>
	...

080156c0 <_dtoa_r>:
 80156c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c4:	ed2d 8b02 	vpush	{d8}
 80156c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80156ca:	b091      	sub	sp, #68	; 0x44
 80156cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80156d0:	ec59 8b10 	vmov	r8, r9, d0
 80156d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80156d6:	9106      	str	r1, [sp, #24]
 80156d8:	4606      	mov	r6, r0
 80156da:	9208      	str	r2, [sp, #32]
 80156dc:	930c      	str	r3, [sp, #48]	; 0x30
 80156de:	b975      	cbnz	r5, 80156fe <_dtoa_r+0x3e>
 80156e0:	2010      	movs	r0, #16
 80156e2:	f7ff f87f 	bl	80147e4 <malloc>
 80156e6:	4602      	mov	r2, r0
 80156e8:	6270      	str	r0, [r6, #36]	; 0x24
 80156ea:	b920      	cbnz	r0, 80156f6 <_dtoa_r+0x36>
 80156ec:	4baa      	ldr	r3, [pc, #680]	; (8015998 <_dtoa_r+0x2d8>)
 80156ee:	21ea      	movs	r1, #234	; 0xea
 80156f0:	48aa      	ldr	r0, [pc, #680]	; (801599c <_dtoa_r+0x2dc>)
 80156f2:	f001 fe57 	bl	80173a4 <__assert_func>
 80156f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80156fa:	6005      	str	r5, [r0, #0]
 80156fc:	60c5      	str	r5, [r0, #12]
 80156fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015700:	6819      	ldr	r1, [r3, #0]
 8015702:	b151      	cbz	r1, 801571a <_dtoa_r+0x5a>
 8015704:	685a      	ldr	r2, [r3, #4]
 8015706:	604a      	str	r2, [r1, #4]
 8015708:	2301      	movs	r3, #1
 801570a:	4093      	lsls	r3, r2
 801570c:	608b      	str	r3, [r1, #8]
 801570e:	4630      	mov	r0, r6
 8015710:	f000 ffb4 	bl	801667c <_Bfree>
 8015714:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015716:	2200      	movs	r2, #0
 8015718:	601a      	str	r2, [r3, #0]
 801571a:	f1b9 0300 	subs.w	r3, r9, #0
 801571e:	bfbb      	ittet	lt
 8015720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015724:	9303      	strlt	r3, [sp, #12]
 8015726:	2300      	movge	r3, #0
 8015728:	2201      	movlt	r2, #1
 801572a:	bfac      	ite	ge
 801572c:	6023      	strge	r3, [r4, #0]
 801572e:	6022      	strlt	r2, [r4, #0]
 8015730:	4b9b      	ldr	r3, [pc, #620]	; (80159a0 <_dtoa_r+0x2e0>)
 8015732:	9c03      	ldr	r4, [sp, #12]
 8015734:	43a3      	bics	r3, r4
 8015736:	d11c      	bne.n	8015772 <_dtoa_r+0xb2>
 8015738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801573a:	f242 730f 	movw	r3, #9999	; 0x270f
 801573e:	6013      	str	r3, [r2, #0]
 8015740:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015744:	ea53 0308 	orrs.w	r3, r3, r8
 8015748:	f000 84fd 	beq.w	8016146 <_dtoa_r+0xa86>
 801574c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801574e:	b963      	cbnz	r3, 801576a <_dtoa_r+0xaa>
 8015750:	4b94      	ldr	r3, [pc, #592]	; (80159a4 <_dtoa_r+0x2e4>)
 8015752:	e01f      	b.n	8015794 <_dtoa_r+0xd4>
 8015754:	4b94      	ldr	r3, [pc, #592]	; (80159a8 <_dtoa_r+0x2e8>)
 8015756:	9301      	str	r3, [sp, #4]
 8015758:	3308      	adds	r3, #8
 801575a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801575c:	6013      	str	r3, [r2, #0]
 801575e:	9801      	ldr	r0, [sp, #4]
 8015760:	b011      	add	sp, #68	; 0x44
 8015762:	ecbd 8b02 	vpop	{d8}
 8015766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801576a:	4b8e      	ldr	r3, [pc, #568]	; (80159a4 <_dtoa_r+0x2e4>)
 801576c:	9301      	str	r3, [sp, #4]
 801576e:	3303      	adds	r3, #3
 8015770:	e7f3      	b.n	801575a <_dtoa_r+0x9a>
 8015772:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015776:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801577e:	d10b      	bne.n	8015798 <_dtoa_r+0xd8>
 8015780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015782:	2301      	movs	r3, #1
 8015784:	6013      	str	r3, [r2, #0]
 8015786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015788:	2b00      	cmp	r3, #0
 801578a:	f000 84d9 	beq.w	8016140 <_dtoa_r+0xa80>
 801578e:	4887      	ldr	r0, [pc, #540]	; (80159ac <_dtoa_r+0x2ec>)
 8015790:	6018      	str	r0, [r3, #0]
 8015792:	1e43      	subs	r3, r0, #1
 8015794:	9301      	str	r3, [sp, #4]
 8015796:	e7e2      	b.n	801575e <_dtoa_r+0x9e>
 8015798:	a90f      	add	r1, sp, #60	; 0x3c
 801579a:	aa0e      	add	r2, sp, #56	; 0x38
 801579c:	4630      	mov	r0, r6
 801579e:	eeb0 0b48 	vmov.f64	d0, d8
 80157a2:	f001 fa53 	bl	8016c4c <__d2b>
 80157a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80157aa:	4605      	mov	r5, r0
 80157ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80157ae:	2900      	cmp	r1, #0
 80157b0:	d046      	beq.n	8015840 <_dtoa_r+0x180>
 80157b2:	ee18 4a90 	vmov	r4, s17
 80157b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80157ba:	ec53 2b18 	vmov	r2, r3, d8
 80157be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80157c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80157c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80157ca:	2400      	movs	r4, #0
 80157cc:	ec43 2b16 	vmov	d6, r2, r3
 80157d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80157d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015980 <_dtoa_r+0x2c0>
 80157d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80157dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015988 <_dtoa_r+0x2c8>
 80157e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80157e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015990 <_dtoa_r+0x2d0>
 80157e8:	ee07 1a90 	vmov	s15, r1
 80157ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80157f0:	eeb0 7b46 	vmov.f64	d7, d6
 80157f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80157f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80157fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015804:	ee16 ba90 	vmov	fp, s13
 8015808:	940a      	str	r4, [sp, #40]	; 0x28
 801580a:	d508      	bpl.n	801581e <_dtoa_r+0x15e>
 801580c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015810:	eeb4 6b47 	vcmp.f64	d6, d7
 8015814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015818:	bf18      	it	ne
 801581a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801581e:	f1bb 0f16 	cmp.w	fp, #22
 8015822:	d82f      	bhi.n	8015884 <_dtoa_r+0x1c4>
 8015824:	4b62      	ldr	r3, [pc, #392]	; (80159b0 <_dtoa_r+0x2f0>)
 8015826:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801582a:	ed93 7b00 	vldr	d7, [r3]
 801582e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015836:	d501      	bpl.n	801583c <_dtoa_r+0x17c>
 8015838:	f10b 3bff 	add.w	fp, fp, #4294967295
 801583c:	2300      	movs	r3, #0
 801583e:	e022      	b.n	8015886 <_dtoa_r+0x1c6>
 8015840:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015842:	4401      	add	r1, r0
 8015844:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015848:	2b20      	cmp	r3, #32
 801584a:	bfc1      	itttt	gt
 801584c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015850:	fa04 f303 	lslgt.w	r3, r4, r3
 8015854:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015858:	fa28 f804 	lsrgt.w	r8, r8, r4
 801585c:	bfd6      	itet	le
 801585e:	f1c3 0320 	rsble	r3, r3, #32
 8015862:	ea43 0808 	orrgt.w	r8, r3, r8
 8015866:	fa08 f803 	lslle.w	r8, r8, r3
 801586a:	ee07 8a90 	vmov	s15, r8
 801586e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015872:	3901      	subs	r1, #1
 8015874:	ee17 4a90 	vmov	r4, s15
 8015878:	ec53 2b17 	vmov	r2, r3, d7
 801587c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015880:	2401      	movs	r4, #1
 8015882:	e7a3      	b.n	80157cc <_dtoa_r+0x10c>
 8015884:	2301      	movs	r3, #1
 8015886:	930b      	str	r3, [sp, #44]	; 0x2c
 8015888:	1a43      	subs	r3, r0, r1
 801588a:	1e5a      	subs	r2, r3, #1
 801588c:	bf45      	ittet	mi
 801588e:	f1c3 0301 	rsbmi	r3, r3, #1
 8015892:	9304      	strmi	r3, [sp, #16]
 8015894:	2300      	movpl	r3, #0
 8015896:	2300      	movmi	r3, #0
 8015898:	9205      	str	r2, [sp, #20]
 801589a:	bf54      	ite	pl
 801589c:	9304      	strpl	r3, [sp, #16]
 801589e:	9305      	strmi	r3, [sp, #20]
 80158a0:	f1bb 0f00 	cmp.w	fp, #0
 80158a4:	db18      	blt.n	80158d8 <_dtoa_r+0x218>
 80158a6:	9b05      	ldr	r3, [sp, #20]
 80158a8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80158ac:	445b      	add	r3, fp
 80158ae:	9305      	str	r3, [sp, #20]
 80158b0:	2300      	movs	r3, #0
 80158b2:	9a06      	ldr	r2, [sp, #24]
 80158b4:	2a09      	cmp	r2, #9
 80158b6:	d849      	bhi.n	801594c <_dtoa_r+0x28c>
 80158b8:	2a05      	cmp	r2, #5
 80158ba:	bfc4      	itt	gt
 80158bc:	3a04      	subgt	r2, #4
 80158be:	9206      	strgt	r2, [sp, #24]
 80158c0:	9a06      	ldr	r2, [sp, #24]
 80158c2:	f1a2 0202 	sub.w	r2, r2, #2
 80158c6:	bfcc      	ite	gt
 80158c8:	2400      	movgt	r4, #0
 80158ca:	2401      	movle	r4, #1
 80158cc:	2a03      	cmp	r2, #3
 80158ce:	d848      	bhi.n	8015962 <_dtoa_r+0x2a2>
 80158d0:	e8df f002 	tbb	[pc, r2]
 80158d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80158d8:	9b04      	ldr	r3, [sp, #16]
 80158da:	2200      	movs	r2, #0
 80158dc:	eba3 030b 	sub.w	r3, r3, fp
 80158e0:	9304      	str	r3, [sp, #16]
 80158e2:	9209      	str	r2, [sp, #36]	; 0x24
 80158e4:	f1cb 0300 	rsb	r3, fp, #0
 80158e8:	e7e3      	b.n	80158b2 <_dtoa_r+0x1f2>
 80158ea:	2200      	movs	r2, #0
 80158ec:	9207      	str	r2, [sp, #28]
 80158ee:	9a08      	ldr	r2, [sp, #32]
 80158f0:	2a00      	cmp	r2, #0
 80158f2:	dc39      	bgt.n	8015968 <_dtoa_r+0x2a8>
 80158f4:	f04f 0a01 	mov.w	sl, #1
 80158f8:	46d1      	mov	r9, sl
 80158fa:	4652      	mov	r2, sl
 80158fc:	f8cd a020 	str.w	sl, [sp, #32]
 8015900:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8015902:	2100      	movs	r1, #0
 8015904:	6079      	str	r1, [r7, #4]
 8015906:	2004      	movs	r0, #4
 8015908:	f100 0c14 	add.w	ip, r0, #20
 801590c:	4594      	cmp	ip, r2
 801590e:	6879      	ldr	r1, [r7, #4]
 8015910:	d92f      	bls.n	8015972 <_dtoa_r+0x2b2>
 8015912:	4630      	mov	r0, r6
 8015914:	930d      	str	r3, [sp, #52]	; 0x34
 8015916:	f000 fe71 	bl	80165fc <_Balloc>
 801591a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801591c:	9001      	str	r0, [sp, #4]
 801591e:	4602      	mov	r2, r0
 8015920:	2800      	cmp	r0, #0
 8015922:	d149      	bne.n	80159b8 <_dtoa_r+0x2f8>
 8015924:	4b23      	ldr	r3, [pc, #140]	; (80159b4 <_dtoa_r+0x2f4>)
 8015926:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801592a:	e6e1      	b.n	80156f0 <_dtoa_r+0x30>
 801592c:	2201      	movs	r2, #1
 801592e:	e7dd      	b.n	80158ec <_dtoa_r+0x22c>
 8015930:	2200      	movs	r2, #0
 8015932:	9207      	str	r2, [sp, #28]
 8015934:	9a08      	ldr	r2, [sp, #32]
 8015936:	eb0b 0a02 	add.w	sl, fp, r2
 801593a:	f10a 0901 	add.w	r9, sl, #1
 801593e:	464a      	mov	r2, r9
 8015940:	2a01      	cmp	r2, #1
 8015942:	bfb8      	it	lt
 8015944:	2201      	movlt	r2, #1
 8015946:	e7db      	b.n	8015900 <_dtoa_r+0x240>
 8015948:	2201      	movs	r2, #1
 801594a:	e7f2      	b.n	8015932 <_dtoa_r+0x272>
 801594c:	2401      	movs	r4, #1
 801594e:	2200      	movs	r2, #0
 8015950:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015954:	f04f 3aff 	mov.w	sl, #4294967295
 8015958:	2100      	movs	r1, #0
 801595a:	46d1      	mov	r9, sl
 801595c:	2212      	movs	r2, #18
 801595e:	9108      	str	r1, [sp, #32]
 8015960:	e7ce      	b.n	8015900 <_dtoa_r+0x240>
 8015962:	2201      	movs	r2, #1
 8015964:	9207      	str	r2, [sp, #28]
 8015966:	e7f5      	b.n	8015954 <_dtoa_r+0x294>
 8015968:	f8dd a020 	ldr.w	sl, [sp, #32]
 801596c:	46d1      	mov	r9, sl
 801596e:	4652      	mov	r2, sl
 8015970:	e7c6      	b.n	8015900 <_dtoa_r+0x240>
 8015972:	3101      	adds	r1, #1
 8015974:	6079      	str	r1, [r7, #4]
 8015976:	0040      	lsls	r0, r0, #1
 8015978:	e7c6      	b.n	8015908 <_dtoa_r+0x248>
 801597a:	bf00      	nop
 801597c:	f3af 8000 	nop.w
 8015980:	636f4361 	.word	0x636f4361
 8015984:	3fd287a7 	.word	0x3fd287a7
 8015988:	8b60c8b3 	.word	0x8b60c8b3
 801598c:	3fc68a28 	.word	0x3fc68a28
 8015990:	509f79fb 	.word	0x509f79fb
 8015994:	3fd34413 	.word	0x3fd34413
 8015998:	080194ad 	.word	0x080194ad
 801599c:	080194c4 	.word	0x080194c4
 80159a0:	7ff00000 	.word	0x7ff00000
 80159a4:	080194a9 	.word	0x080194a9
 80159a8:	080194a0 	.word	0x080194a0
 80159ac:	0801947d 	.word	0x0801947d
 80159b0:	08019618 	.word	0x08019618
 80159b4:	0801951f 	.word	0x0801951f
 80159b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80159ba:	9901      	ldr	r1, [sp, #4]
 80159bc:	6011      	str	r1, [r2, #0]
 80159be:	f1b9 0f0e 	cmp.w	r9, #14
 80159c2:	d86c      	bhi.n	8015a9e <_dtoa_r+0x3de>
 80159c4:	2c00      	cmp	r4, #0
 80159c6:	d06a      	beq.n	8015a9e <_dtoa_r+0x3de>
 80159c8:	f1bb 0f00 	cmp.w	fp, #0
 80159cc:	f340 80a0 	ble.w	8015b10 <_dtoa_r+0x450>
 80159d0:	49c1      	ldr	r1, [pc, #772]	; (8015cd8 <_dtoa_r+0x618>)
 80159d2:	f00b 020f 	and.w	r2, fp, #15
 80159d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80159da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80159de:	ed92 7b00 	vldr	d7, [r2]
 80159e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80159e6:	f000 8087 	beq.w	8015af8 <_dtoa_r+0x438>
 80159ea:	4abc      	ldr	r2, [pc, #752]	; (8015cdc <_dtoa_r+0x61c>)
 80159ec:	ed92 6b08 	vldr	d6, [r2, #32]
 80159f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80159f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80159f8:	f001 010f 	and.w	r1, r1, #15
 80159fc:	2203      	movs	r2, #3
 80159fe:	48b7      	ldr	r0, [pc, #732]	; (8015cdc <_dtoa_r+0x61c>)
 8015a00:	2900      	cmp	r1, #0
 8015a02:	d17b      	bne.n	8015afc <_dtoa_r+0x43c>
 8015a04:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015a08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a12:	2900      	cmp	r1, #0
 8015a14:	f000 80a2 	beq.w	8015b5c <_dtoa_r+0x49c>
 8015a18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a28:	f140 8098 	bpl.w	8015b5c <_dtoa_r+0x49c>
 8015a2c:	f1b9 0f00 	cmp.w	r9, #0
 8015a30:	f000 8094 	beq.w	8015b5c <_dtoa_r+0x49c>
 8015a34:	f1ba 0f00 	cmp.w	sl, #0
 8015a38:	dd2f      	ble.n	8015a9a <_dtoa_r+0x3da>
 8015a3a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a42:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a46:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015a4a:	3201      	adds	r2, #1
 8015a4c:	4650      	mov	r0, sl
 8015a4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015a52:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015a56:	ee07 2a90 	vmov	s15, r2
 8015a5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a5e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015a62:	ee15 4a90 	vmov	r4, s11
 8015a66:	ec52 1b15 	vmov	r1, r2, d5
 8015a6a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d177      	bne.n	8015b62 <_dtoa_r+0x4a2>
 8015a72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015a76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015a7a:	ec42 1b17 	vmov	d7, r1, r2
 8015a7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a86:	f300 8263 	bgt.w	8015f50 <_dtoa_r+0x890>
 8015a8a:	eeb1 7b47 	vneg.f64	d7, d7
 8015a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a96:	f100 8258 	bmi.w	8015f4a <_dtoa_r+0x88a>
 8015a9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015aa0:	2a00      	cmp	r2, #0
 8015aa2:	f2c0 811d 	blt.w	8015ce0 <_dtoa_r+0x620>
 8015aa6:	f1bb 0f0e 	cmp.w	fp, #14
 8015aaa:	f300 8119 	bgt.w	8015ce0 <_dtoa_r+0x620>
 8015aae:	4b8a      	ldr	r3, [pc, #552]	; (8015cd8 <_dtoa_r+0x618>)
 8015ab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015ab4:	ed93 6b00 	vldr	d6, [r3]
 8015ab8:	9b08      	ldr	r3, [sp, #32]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	f280 80b7 	bge.w	8015c2e <_dtoa_r+0x56e>
 8015ac0:	f1b9 0f00 	cmp.w	r9, #0
 8015ac4:	f300 80b3 	bgt.w	8015c2e <_dtoa_r+0x56e>
 8015ac8:	f040 823f 	bne.w	8015f4a <_dtoa_r+0x88a>
 8015acc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015ad0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015ad4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015ad8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae0:	464c      	mov	r4, r9
 8015ae2:	464f      	mov	r7, r9
 8015ae4:	f280 8215 	bge.w	8015f12 <_dtoa_r+0x852>
 8015ae8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015aec:	2331      	movs	r3, #49	; 0x31
 8015aee:	f808 3b01 	strb.w	r3, [r8], #1
 8015af2:	f10b 0b01 	add.w	fp, fp, #1
 8015af6:	e211      	b.n	8015f1c <_dtoa_r+0x85c>
 8015af8:	2202      	movs	r2, #2
 8015afa:	e780      	b.n	80159fe <_dtoa_r+0x33e>
 8015afc:	07cc      	lsls	r4, r1, #31
 8015afe:	d504      	bpl.n	8015b0a <_dtoa_r+0x44a>
 8015b00:	ed90 6b00 	vldr	d6, [r0]
 8015b04:	3201      	adds	r2, #1
 8015b06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015b0a:	1049      	asrs	r1, r1, #1
 8015b0c:	3008      	adds	r0, #8
 8015b0e:	e777      	b.n	8015a00 <_dtoa_r+0x340>
 8015b10:	d022      	beq.n	8015b58 <_dtoa_r+0x498>
 8015b12:	f1cb 0100 	rsb	r1, fp, #0
 8015b16:	4a70      	ldr	r2, [pc, #448]	; (8015cd8 <_dtoa_r+0x618>)
 8015b18:	f001 000f 	and.w	r0, r1, #15
 8015b1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015b20:	ed92 7b00 	vldr	d7, [r2]
 8015b24:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015b28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b2c:	486b      	ldr	r0, [pc, #428]	; (8015cdc <_dtoa_r+0x61c>)
 8015b2e:	1109      	asrs	r1, r1, #4
 8015b30:	2400      	movs	r4, #0
 8015b32:	2202      	movs	r2, #2
 8015b34:	b929      	cbnz	r1, 8015b42 <_dtoa_r+0x482>
 8015b36:	2c00      	cmp	r4, #0
 8015b38:	f43f af6a 	beq.w	8015a10 <_dtoa_r+0x350>
 8015b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b40:	e766      	b.n	8015a10 <_dtoa_r+0x350>
 8015b42:	07cf      	lsls	r7, r1, #31
 8015b44:	d505      	bpl.n	8015b52 <_dtoa_r+0x492>
 8015b46:	ed90 6b00 	vldr	d6, [r0]
 8015b4a:	3201      	adds	r2, #1
 8015b4c:	2401      	movs	r4, #1
 8015b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015b52:	1049      	asrs	r1, r1, #1
 8015b54:	3008      	adds	r0, #8
 8015b56:	e7ed      	b.n	8015b34 <_dtoa_r+0x474>
 8015b58:	2202      	movs	r2, #2
 8015b5a:	e759      	b.n	8015a10 <_dtoa_r+0x350>
 8015b5c:	465f      	mov	r7, fp
 8015b5e:	4648      	mov	r0, r9
 8015b60:	e775      	b.n	8015a4e <_dtoa_r+0x38e>
 8015b62:	ec42 1b17 	vmov	d7, r1, r2
 8015b66:	4a5c      	ldr	r2, [pc, #368]	; (8015cd8 <_dtoa_r+0x618>)
 8015b68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015b6c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015b70:	9a01      	ldr	r2, [sp, #4]
 8015b72:	1814      	adds	r4, r2, r0
 8015b74:	9a07      	ldr	r2, [sp, #28]
 8015b76:	b352      	cbz	r2, 8015bce <_dtoa_r+0x50e>
 8015b78:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015b7c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015b80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b84:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015b88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015b8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015b90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015b94:	ee14 2a90 	vmov	r2, s9
 8015b98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015b9c:	3230      	adds	r2, #48	; 0x30
 8015b9e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015ba2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015baa:	f808 2b01 	strb.w	r2, [r8], #1
 8015bae:	d439      	bmi.n	8015c24 <_dtoa_r+0x564>
 8015bb0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015bb4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bbc:	d472      	bmi.n	8015ca4 <_dtoa_r+0x5e4>
 8015bbe:	45a0      	cmp	r8, r4
 8015bc0:	f43f af6b 	beq.w	8015a9a <_dtoa_r+0x3da>
 8015bc4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015bc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015bcc:	e7e0      	b.n	8015b90 <_dtoa_r+0x4d0>
 8015bce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015bd2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015bd6:	4621      	mov	r1, r4
 8015bd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015bdc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015be0:	ee14 2a90 	vmov	r2, s9
 8015be4:	3230      	adds	r2, #48	; 0x30
 8015be6:	f808 2b01 	strb.w	r2, [r8], #1
 8015bea:	45a0      	cmp	r8, r4
 8015bec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015bf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015bf4:	d118      	bne.n	8015c28 <_dtoa_r+0x568>
 8015bf6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015bfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015bfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c06:	dc4d      	bgt.n	8015ca4 <_dtoa_r+0x5e4>
 8015c08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015c0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c14:	f57f af41 	bpl.w	8015a9a <_dtoa_r+0x3da>
 8015c18:	4688      	mov	r8, r1
 8015c1a:	3901      	subs	r1, #1
 8015c1c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015c20:	2b30      	cmp	r3, #48	; 0x30
 8015c22:	d0f9      	beq.n	8015c18 <_dtoa_r+0x558>
 8015c24:	46bb      	mov	fp, r7
 8015c26:	e02a      	b.n	8015c7e <_dtoa_r+0x5be>
 8015c28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015c2c:	e7d6      	b.n	8015bdc <_dtoa_r+0x51c>
 8015c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c32:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015c36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015c3a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015c3e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015c42:	ee15 3a10 	vmov	r3, s10
 8015c46:	3330      	adds	r3, #48	; 0x30
 8015c48:	f808 3b01 	strb.w	r3, [r8], #1
 8015c4c:	9b01      	ldr	r3, [sp, #4]
 8015c4e:	eba8 0303 	sub.w	r3, r8, r3
 8015c52:	4599      	cmp	r9, r3
 8015c54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015c58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015c5c:	d133      	bne.n	8015cc6 <_dtoa_r+0x606>
 8015c5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015c62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c6a:	dc1a      	bgt.n	8015ca2 <_dtoa_r+0x5e2>
 8015c6c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c74:	d103      	bne.n	8015c7e <_dtoa_r+0x5be>
 8015c76:	ee15 3a10 	vmov	r3, s10
 8015c7a:	07d9      	lsls	r1, r3, #31
 8015c7c:	d411      	bmi.n	8015ca2 <_dtoa_r+0x5e2>
 8015c7e:	4629      	mov	r1, r5
 8015c80:	4630      	mov	r0, r6
 8015c82:	f000 fcfb 	bl	801667c <_Bfree>
 8015c86:	2300      	movs	r3, #0
 8015c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c8a:	f888 3000 	strb.w	r3, [r8]
 8015c8e:	f10b 0301 	add.w	r3, fp, #1
 8015c92:	6013      	str	r3, [r2, #0]
 8015c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	f43f ad61 	beq.w	801575e <_dtoa_r+0x9e>
 8015c9c:	f8c3 8000 	str.w	r8, [r3]
 8015ca0:	e55d      	b.n	801575e <_dtoa_r+0x9e>
 8015ca2:	465f      	mov	r7, fp
 8015ca4:	4643      	mov	r3, r8
 8015ca6:	4698      	mov	r8, r3
 8015ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015cac:	2a39      	cmp	r2, #57	; 0x39
 8015cae:	d106      	bne.n	8015cbe <_dtoa_r+0x5fe>
 8015cb0:	9a01      	ldr	r2, [sp, #4]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d1f7      	bne.n	8015ca6 <_dtoa_r+0x5e6>
 8015cb6:	9901      	ldr	r1, [sp, #4]
 8015cb8:	2230      	movs	r2, #48	; 0x30
 8015cba:	3701      	adds	r7, #1
 8015cbc:	700a      	strb	r2, [r1, #0]
 8015cbe:	781a      	ldrb	r2, [r3, #0]
 8015cc0:	3201      	adds	r2, #1
 8015cc2:	701a      	strb	r2, [r3, #0]
 8015cc4:	e7ae      	b.n	8015c24 <_dtoa_r+0x564>
 8015cc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd2:	d1b2      	bne.n	8015c3a <_dtoa_r+0x57a>
 8015cd4:	e7d3      	b.n	8015c7e <_dtoa_r+0x5be>
 8015cd6:	bf00      	nop
 8015cd8:	08019618 	.word	0x08019618
 8015cdc:	080195f0 	.word	0x080195f0
 8015ce0:	9907      	ldr	r1, [sp, #28]
 8015ce2:	2900      	cmp	r1, #0
 8015ce4:	f000 80d0 	beq.w	8015e88 <_dtoa_r+0x7c8>
 8015ce8:	9906      	ldr	r1, [sp, #24]
 8015cea:	2901      	cmp	r1, #1
 8015cec:	f300 80b4 	bgt.w	8015e58 <_dtoa_r+0x798>
 8015cf0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015cf2:	2900      	cmp	r1, #0
 8015cf4:	f000 80ac 	beq.w	8015e50 <_dtoa_r+0x790>
 8015cf8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015cfc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015d00:	461c      	mov	r4, r3
 8015d02:	930a      	str	r3, [sp, #40]	; 0x28
 8015d04:	9b04      	ldr	r3, [sp, #16]
 8015d06:	4413      	add	r3, r2
 8015d08:	9304      	str	r3, [sp, #16]
 8015d0a:	9b05      	ldr	r3, [sp, #20]
 8015d0c:	2101      	movs	r1, #1
 8015d0e:	4413      	add	r3, r2
 8015d10:	4630      	mov	r0, r6
 8015d12:	9305      	str	r3, [sp, #20]
 8015d14:	f000 fd6a 	bl	80167ec <__i2b>
 8015d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d1a:	4607      	mov	r7, r0
 8015d1c:	f1b8 0f00 	cmp.w	r8, #0
 8015d20:	dd0d      	ble.n	8015d3e <_dtoa_r+0x67e>
 8015d22:	9a05      	ldr	r2, [sp, #20]
 8015d24:	2a00      	cmp	r2, #0
 8015d26:	dd0a      	ble.n	8015d3e <_dtoa_r+0x67e>
 8015d28:	4542      	cmp	r2, r8
 8015d2a:	9904      	ldr	r1, [sp, #16]
 8015d2c:	bfa8      	it	ge
 8015d2e:	4642      	movge	r2, r8
 8015d30:	1a89      	subs	r1, r1, r2
 8015d32:	9104      	str	r1, [sp, #16]
 8015d34:	9905      	ldr	r1, [sp, #20]
 8015d36:	eba8 0802 	sub.w	r8, r8, r2
 8015d3a:	1a8a      	subs	r2, r1, r2
 8015d3c:	9205      	str	r2, [sp, #20]
 8015d3e:	b303      	cbz	r3, 8015d82 <_dtoa_r+0x6c2>
 8015d40:	9a07      	ldr	r2, [sp, #28]
 8015d42:	2a00      	cmp	r2, #0
 8015d44:	f000 80a5 	beq.w	8015e92 <_dtoa_r+0x7d2>
 8015d48:	2c00      	cmp	r4, #0
 8015d4a:	dd13      	ble.n	8015d74 <_dtoa_r+0x6b4>
 8015d4c:	4639      	mov	r1, r7
 8015d4e:	4622      	mov	r2, r4
 8015d50:	4630      	mov	r0, r6
 8015d52:	930d      	str	r3, [sp, #52]	; 0x34
 8015d54:	f000 fe0a 	bl	801696c <__pow5mult>
 8015d58:	462a      	mov	r2, r5
 8015d5a:	4601      	mov	r1, r0
 8015d5c:	4607      	mov	r7, r0
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f000 fd5a 	bl	8016818 <__multiply>
 8015d64:	4629      	mov	r1, r5
 8015d66:	900a      	str	r0, [sp, #40]	; 0x28
 8015d68:	4630      	mov	r0, r6
 8015d6a:	f000 fc87 	bl	801667c <_Bfree>
 8015d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d72:	4615      	mov	r5, r2
 8015d74:	1b1a      	subs	r2, r3, r4
 8015d76:	d004      	beq.n	8015d82 <_dtoa_r+0x6c2>
 8015d78:	4629      	mov	r1, r5
 8015d7a:	4630      	mov	r0, r6
 8015d7c:	f000 fdf6 	bl	801696c <__pow5mult>
 8015d80:	4605      	mov	r5, r0
 8015d82:	2101      	movs	r1, #1
 8015d84:	4630      	mov	r0, r6
 8015d86:	f000 fd31 	bl	80167ec <__i2b>
 8015d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	4604      	mov	r4, r0
 8015d90:	f340 8081 	ble.w	8015e96 <_dtoa_r+0x7d6>
 8015d94:	461a      	mov	r2, r3
 8015d96:	4601      	mov	r1, r0
 8015d98:	4630      	mov	r0, r6
 8015d9a:	f000 fde7 	bl	801696c <__pow5mult>
 8015d9e:	9b06      	ldr	r3, [sp, #24]
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	4604      	mov	r4, r0
 8015da4:	dd7a      	ble.n	8015e9c <_dtoa_r+0x7dc>
 8015da6:	2300      	movs	r3, #0
 8015da8:	930a      	str	r3, [sp, #40]	; 0x28
 8015daa:	6922      	ldr	r2, [r4, #16]
 8015dac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015db0:	6910      	ldr	r0, [r2, #16]
 8015db2:	f000 fccb 	bl	801674c <__hi0bits>
 8015db6:	f1c0 0020 	rsb	r0, r0, #32
 8015dba:	9b05      	ldr	r3, [sp, #20]
 8015dbc:	4418      	add	r0, r3
 8015dbe:	f010 001f 	ands.w	r0, r0, #31
 8015dc2:	f000 808c 	beq.w	8015ede <_dtoa_r+0x81e>
 8015dc6:	f1c0 0220 	rsb	r2, r0, #32
 8015dca:	2a04      	cmp	r2, #4
 8015dcc:	f340 8085 	ble.w	8015eda <_dtoa_r+0x81a>
 8015dd0:	f1c0 001c 	rsb	r0, r0, #28
 8015dd4:	9b04      	ldr	r3, [sp, #16]
 8015dd6:	4403      	add	r3, r0
 8015dd8:	9304      	str	r3, [sp, #16]
 8015dda:	9b05      	ldr	r3, [sp, #20]
 8015ddc:	4403      	add	r3, r0
 8015dde:	4480      	add	r8, r0
 8015de0:	9305      	str	r3, [sp, #20]
 8015de2:	9b04      	ldr	r3, [sp, #16]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	dd05      	ble.n	8015df4 <_dtoa_r+0x734>
 8015de8:	4629      	mov	r1, r5
 8015dea:	461a      	mov	r2, r3
 8015dec:	4630      	mov	r0, r6
 8015dee:	f000 fe17 	bl	8016a20 <__lshift>
 8015df2:	4605      	mov	r5, r0
 8015df4:	9b05      	ldr	r3, [sp, #20]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	dd05      	ble.n	8015e06 <_dtoa_r+0x746>
 8015dfa:	4621      	mov	r1, r4
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	4630      	mov	r0, r6
 8015e00:	f000 fe0e 	bl	8016a20 <__lshift>
 8015e04:	4604      	mov	r4, r0
 8015e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d06a      	beq.n	8015ee2 <_dtoa_r+0x822>
 8015e0c:	4621      	mov	r1, r4
 8015e0e:	4628      	mov	r0, r5
 8015e10:	f000 fe76 	bl	8016b00 <__mcmp>
 8015e14:	2800      	cmp	r0, #0
 8015e16:	da64      	bge.n	8015ee2 <_dtoa_r+0x822>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	220a      	movs	r2, #10
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f000 fc4e 	bl	80166c0 <__multadd>
 8015e24:	9b07      	ldr	r3, [sp, #28]
 8015e26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f000 8191 	beq.w	8016154 <_dtoa_r+0xa94>
 8015e32:	4639      	mov	r1, r7
 8015e34:	2300      	movs	r3, #0
 8015e36:	220a      	movs	r2, #10
 8015e38:	4630      	mov	r0, r6
 8015e3a:	f000 fc41 	bl	80166c0 <__multadd>
 8015e3e:	f1ba 0f00 	cmp.w	sl, #0
 8015e42:	4607      	mov	r7, r0
 8015e44:	f300 808d 	bgt.w	8015f62 <_dtoa_r+0x8a2>
 8015e48:	9b06      	ldr	r3, [sp, #24]
 8015e4a:	2b02      	cmp	r3, #2
 8015e4c:	dc50      	bgt.n	8015ef0 <_dtoa_r+0x830>
 8015e4e:	e088      	b.n	8015f62 <_dtoa_r+0x8a2>
 8015e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015e56:	e751      	b.n	8015cfc <_dtoa_r+0x63c>
 8015e58:	f109 34ff 	add.w	r4, r9, #4294967295
 8015e5c:	42a3      	cmp	r3, r4
 8015e5e:	bfbf      	itttt	lt
 8015e60:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8015e62:	1ae3      	sublt	r3, r4, r3
 8015e64:	18d2      	addlt	r2, r2, r3
 8015e66:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015e68:	bfb6      	itet	lt
 8015e6a:	4623      	movlt	r3, r4
 8015e6c:	1b1c      	subge	r4, r3, r4
 8015e6e:	2400      	movlt	r4, #0
 8015e70:	f1b9 0f00 	cmp.w	r9, #0
 8015e74:	bfb5      	itete	lt
 8015e76:	9a04      	ldrlt	r2, [sp, #16]
 8015e78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015e7c:	eba2 0809 	sublt.w	r8, r2, r9
 8015e80:	464a      	movge	r2, r9
 8015e82:	bfb8      	it	lt
 8015e84:	2200      	movlt	r2, #0
 8015e86:	e73c      	b.n	8015d02 <_dtoa_r+0x642>
 8015e88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015e8c:	9f07      	ldr	r7, [sp, #28]
 8015e8e:	461c      	mov	r4, r3
 8015e90:	e744      	b.n	8015d1c <_dtoa_r+0x65c>
 8015e92:	461a      	mov	r2, r3
 8015e94:	e770      	b.n	8015d78 <_dtoa_r+0x6b8>
 8015e96:	9b06      	ldr	r3, [sp, #24]
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	dc18      	bgt.n	8015ece <_dtoa_r+0x80e>
 8015e9c:	9b02      	ldr	r3, [sp, #8]
 8015e9e:	b9b3      	cbnz	r3, 8015ece <_dtoa_r+0x80e>
 8015ea0:	9b03      	ldr	r3, [sp, #12]
 8015ea2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015ea6:	b9a2      	cbnz	r2, 8015ed2 <_dtoa_r+0x812>
 8015ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015eac:	0d12      	lsrs	r2, r2, #20
 8015eae:	0512      	lsls	r2, r2, #20
 8015eb0:	b18a      	cbz	r2, 8015ed6 <_dtoa_r+0x816>
 8015eb2:	9b04      	ldr	r3, [sp, #16]
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	9304      	str	r3, [sp, #16]
 8015eb8:	9b05      	ldr	r3, [sp, #20]
 8015eba:	3301      	adds	r3, #1
 8015ebc:	9305      	str	r3, [sp, #20]
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8015ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	f47f af70 	bne.w	8015daa <_dtoa_r+0x6ea>
 8015eca:	2001      	movs	r0, #1
 8015ecc:	e775      	b.n	8015dba <_dtoa_r+0x6fa>
 8015ece:	2300      	movs	r3, #0
 8015ed0:	e7f6      	b.n	8015ec0 <_dtoa_r+0x800>
 8015ed2:	9b02      	ldr	r3, [sp, #8]
 8015ed4:	e7f4      	b.n	8015ec0 <_dtoa_r+0x800>
 8015ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8015ed8:	e7f3      	b.n	8015ec2 <_dtoa_r+0x802>
 8015eda:	d082      	beq.n	8015de2 <_dtoa_r+0x722>
 8015edc:	4610      	mov	r0, r2
 8015ede:	301c      	adds	r0, #28
 8015ee0:	e778      	b.n	8015dd4 <_dtoa_r+0x714>
 8015ee2:	f1b9 0f00 	cmp.w	r9, #0
 8015ee6:	dc37      	bgt.n	8015f58 <_dtoa_r+0x898>
 8015ee8:	9b06      	ldr	r3, [sp, #24]
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	dd34      	ble.n	8015f58 <_dtoa_r+0x898>
 8015eee:	46ca      	mov	sl, r9
 8015ef0:	f1ba 0f00 	cmp.w	sl, #0
 8015ef4:	d10d      	bne.n	8015f12 <_dtoa_r+0x852>
 8015ef6:	4621      	mov	r1, r4
 8015ef8:	4653      	mov	r3, sl
 8015efa:	2205      	movs	r2, #5
 8015efc:	4630      	mov	r0, r6
 8015efe:	f000 fbdf 	bl	80166c0 <__multadd>
 8015f02:	4601      	mov	r1, r0
 8015f04:	4604      	mov	r4, r0
 8015f06:	4628      	mov	r0, r5
 8015f08:	f000 fdfa 	bl	8016b00 <__mcmp>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	f73f adeb 	bgt.w	8015ae8 <_dtoa_r+0x428>
 8015f12:	9b08      	ldr	r3, [sp, #32]
 8015f14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015f18:	ea6f 0b03 	mvn.w	fp, r3
 8015f1c:	f04f 0900 	mov.w	r9, #0
 8015f20:	4621      	mov	r1, r4
 8015f22:	4630      	mov	r0, r6
 8015f24:	f000 fbaa 	bl	801667c <_Bfree>
 8015f28:	2f00      	cmp	r7, #0
 8015f2a:	f43f aea8 	beq.w	8015c7e <_dtoa_r+0x5be>
 8015f2e:	f1b9 0f00 	cmp.w	r9, #0
 8015f32:	d005      	beq.n	8015f40 <_dtoa_r+0x880>
 8015f34:	45b9      	cmp	r9, r7
 8015f36:	d003      	beq.n	8015f40 <_dtoa_r+0x880>
 8015f38:	4649      	mov	r1, r9
 8015f3a:	4630      	mov	r0, r6
 8015f3c:	f000 fb9e 	bl	801667c <_Bfree>
 8015f40:	4639      	mov	r1, r7
 8015f42:	4630      	mov	r0, r6
 8015f44:	f000 fb9a 	bl	801667c <_Bfree>
 8015f48:	e699      	b.n	8015c7e <_dtoa_r+0x5be>
 8015f4a:	2400      	movs	r4, #0
 8015f4c:	4627      	mov	r7, r4
 8015f4e:	e7e0      	b.n	8015f12 <_dtoa_r+0x852>
 8015f50:	46bb      	mov	fp, r7
 8015f52:	4604      	mov	r4, r0
 8015f54:	4607      	mov	r7, r0
 8015f56:	e5c7      	b.n	8015ae8 <_dtoa_r+0x428>
 8015f58:	9b07      	ldr	r3, [sp, #28]
 8015f5a:	46ca      	mov	sl, r9
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	f000 8100 	beq.w	8016162 <_dtoa_r+0xaa2>
 8015f62:	f1b8 0f00 	cmp.w	r8, #0
 8015f66:	dd05      	ble.n	8015f74 <_dtoa_r+0x8b4>
 8015f68:	4639      	mov	r1, r7
 8015f6a:	4642      	mov	r2, r8
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	f000 fd57 	bl	8016a20 <__lshift>
 8015f72:	4607      	mov	r7, r0
 8015f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d05d      	beq.n	8016036 <_dtoa_r+0x976>
 8015f7a:	6879      	ldr	r1, [r7, #4]
 8015f7c:	4630      	mov	r0, r6
 8015f7e:	f000 fb3d 	bl	80165fc <_Balloc>
 8015f82:	4680      	mov	r8, r0
 8015f84:	b928      	cbnz	r0, 8015f92 <_dtoa_r+0x8d2>
 8015f86:	4b82      	ldr	r3, [pc, #520]	; (8016190 <_dtoa_r+0xad0>)
 8015f88:	4602      	mov	r2, r0
 8015f8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015f8e:	f7ff bbaf 	b.w	80156f0 <_dtoa_r+0x30>
 8015f92:	693a      	ldr	r2, [r7, #16]
 8015f94:	3202      	adds	r2, #2
 8015f96:	0092      	lsls	r2, r2, #2
 8015f98:	f107 010c 	add.w	r1, r7, #12
 8015f9c:	300c      	adds	r0, #12
 8015f9e:	f7fe fc31 	bl	8014804 <memcpy>
 8015fa2:	2201      	movs	r2, #1
 8015fa4:	4641      	mov	r1, r8
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	f000 fd3a 	bl	8016a20 <__lshift>
 8015fac:	9b01      	ldr	r3, [sp, #4]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	9304      	str	r3, [sp, #16]
 8015fb2:	9b01      	ldr	r3, [sp, #4]
 8015fb4:	4453      	add	r3, sl
 8015fb6:	9308      	str	r3, [sp, #32]
 8015fb8:	9b02      	ldr	r3, [sp, #8]
 8015fba:	f003 0301 	and.w	r3, r3, #1
 8015fbe:	46b9      	mov	r9, r7
 8015fc0:	9307      	str	r3, [sp, #28]
 8015fc2:	4607      	mov	r7, r0
 8015fc4:	9b04      	ldr	r3, [sp, #16]
 8015fc6:	4621      	mov	r1, r4
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	4628      	mov	r0, r5
 8015fcc:	9302      	str	r3, [sp, #8]
 8015fce:	f7ff faeb 	bl	80155a8 <quorem>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	3330      	adds	r3, #48	; 0x30
 8015fd6:	9005      	str	r0, [sp, #20]
 8015fd8:	4649      	mov	r1, r9
 8015fda:	4628      	mov	r0, r5
 8015fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8015fde:	f000 fd8f 	bl	8016b00 <__mcmp>
 8015fe2:	463a      	mov	r2, r7
 8015fe4:	4682      	mov	sl, r0
 8015fe6:	4621      	mov	r1, r4
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f000 fda5 	bl	8016b38 <__mdiff>
 8015fee:	68c2      	ldr	r2, [r0, #12]
 8015ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff2:	4680      	mov	r8, r0
 8015ff4:	bb0a      	cbnz	r2, 801603a <_dtoa_r+0x97a>
 8015ff6:	4601      	mov	r1, r0
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	f000 fd81 	bl	8016b00 <__mcmp>
 8015ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016000:	4602      	mov	r2, r0
 8016002:	4641      	mov	r1, r8
 8016004:	4630      	mov	r0, r6
 8016006:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801600a:	f000 fb37 	bl	801667c <_Bfree>
 801600e:	9b06      	ldr	r3, [sp, #24]
 8016010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016012:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016016:	ea43 0102 	orr.w	r1, r3, r2
 801601a:	9b07      	ldr	r3, [sp, #28]
 801601c:	430b      	orrs	r3, r1
 801601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016020:	d10d      	bne.n	801603e <_dtoa_r+0x97e>
 8016022:	2b39      	cmp	r3, #57	; 0x39
 8016024:	d029      	beq.n	801607a <_dtoa_r+0x9ba>
 8016026:	f1ba 0f00 	cmp.w	sl, #0
 801602a:	dd01      	ble.n	8016030 <_dtoa_r+0x970>
 801602c:	9b05      	ldr	r3, [sp, #20]
 801602e:	3331      	adds	r3, #49	; 0x31
 8016030:	9a02      	ldr	r2, [sp, #8]
 8016032:	7013      	strb	r3, [r2, #0]
 8016034:	e774      	b.n	8015f20 <_dtoa_r+0x860>
 8016036:	4638      	mov	r0, r7
 8016038:	e7b8      	b.n	8015fac <_dtoa_r+0x8ec>
 801603a:	2201      	movs	r2, #1
 801603c:	e7e1      	b.n	8016002 <_dtoa_r+0x942>
 801603e:	f1ba 0f00 	cmp.w	sl, #0
 8016042:	db06      	blt.n	8016052 <_dtoa_r+0x992>
 8016044:	9906      	ldr	r1, [sp, #24]
 8016046:	ea41 0a0a 	orr.w	sl, r1, sl
 801604a:	9907      	ldr	r1, [sp, #28]
 801604c:	ea5a 0101 	orrs.w	r1, sl, r1
 8016050:	d120      	bne.n	8016094 <_dtoa_r+0x9d4>
 8016052:	2a00      	cmp	r2, #0
 8016054:	ddec      	ble.n	8016030 <_dtoa_r+0x970>
 8016056:	4629      	mov	r1, r5
 8016058:	2201      	movs	r2, #1
 801605a:	4630      	mov	r0, r6
 801605c:	9304      	str	r3, [sp, #16]
 801605e:	f000 fcdf 	bl	8016a20 <__lshift>
 8016062:	4621      	mov	r1, r4
 8016064:	4605      	mov	r5, r0
 8016066:	f000 fd4b 	bl	8016b00 <__mcmp>
 801606a:	2800      	cmp	r0, #0
 801606c:	9b04      	ldr	r3, [sp, #16]
 801606e:	dc02      	bgt.n	8016076 <_dtoa_r+0x9b6>
 8016070:	d1de      	bne.n	8016030 <_dtoa_r+0x970>
 8016072:	07da      	lsls	r2, r3, #31
 8016074:	d5dc      	bpl.n	8016030 <_dtoa_r+0x970>
 8016076:	2b39      	cmp	r3, #57	; 0x39
 8016078:	d1d8      	bne.n	801602c <_dtoa_r+0x96c>
 801607a:	9a02      	ldr	r2, [sp, #8]
 801607c:	2339      	movs	r3, #57	; 0x39
 801607e:	7013      	strb	r3, [r2, #0]
 8016080:	4643      	mov	r3, r8
 8016082:	4698      	mov	r8, r3
 8016084:	3b01      	subs	r3, #1
 8016086:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801608a:	2a39      	cmp	r2, #57	; 0x39
 801608c:	d051      	beq.n	8016132 <_dtoa_r+0xa72>
 801608e:	3201      	adds	r2, #1
 8016090:	701a      	strb	r2, [r3, #0]
 8016092:	e745      	b.n	8015f20 <_dtoa_r+0x860>
 8016094:	2a00      	cmp	r2, #0
 8016096:	dd03      	ble.n	80160a0 <_dtoa_r+0x9e0>
 8016098:	2b39      	cmp	r3, #57	; 0x39
 801609a:	d0ee      	beq.n	801607a <_dtoa_r+0x9ba>
 801609c:	3301      	adds	r3, #1
 801609e:	e7c7      	b.n	8016030 <_dtoa_r+0x970>
 80160a0:	9a04      	ldr	r2, [sp, #16]
 80160a2:	9908      	ldr	r1, [sp, #32]
 80160a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80160a8:	428a      	cmp	r2, r1
 80160aa:	d02b      	beq.n	8016104 <_dtoa_r+0xa44>
 80160ac:	4629      	mov	r1, r5
 80160ae:	2300      	movs	r3, #0
 80160b0:	220a      	movs	r2, #10
 80160b2:	4630      	mov	r0, r6
 80160b4:	f000 fb04 	bl	80166c0 <__multadd>
 80160b8:	45b9      	cmp	r9, r7
 80160ba:	4605      	mov	r5, r0
 80160bc:	f04f 0300 	mov.w	r3, #0
 80160c0:	f04f 020a 	mov.w	r2, #10
 80160c4:	4649      	mov	r1, r9
 80160c6:	4630      	mov	r0, r6
 80160c8:	d107      	bne.n	80160da <_dtoa_r+0xa1a>
 80160ca:	f000 faf9 	bl	80166c0 <__multadd>
 80160ce:	4681      	mov	r9, r0
 80160d0:	4607      	mov	r7, r0
 80160d2:	9b04      	ldr	r3, [sp, #16]
 80160d4:	3301      	adds	r3, #1
 80160d6:	9304      	str	r3, [sp, #16]
 80160d8:	e774      	b.n	8015fc4 <_dtoa_r+0x904>
 80160da:	f000 faf1 	bl	80166c0 <__multadd>
 80160de:	4639      	mov	r1, r7
 80160e0:	4681      	mov	r9, r0
 80160e2:	2300      	movs	r3, #0
 80160e4:	220a      	movs	r2, #10
 80160e6:	4630      	mov	r0, r6
 80160e8:	f000 faea 	bl	80166c0 <__multadd>
 80160ec:	4607      	mov	r7, r0
 80160ee:	e7f0      	b.n	80160d2 <_dtoa_r+0xa12>
 80160f0:	f1ba 0f00 	cmp.w	sl, #0
 80160f4:	9a01      	ldr	r2, [sp, #4]
 80160f6:	bfcc      	ite	gt
 80160f8:	46d0      	movgt	r8, sl
 80160fa:	f04f 0801 	movle.w	r8, #1
 80160fe:	4490      	add	r8, r2
 8016100:	f04f 0900 	mov.w	r9, #0
 8016104:	4629      	mov	r1, r5
 8016106:	2201      	movs	r2, #1
 8016108:	4630      	mov	r0, r6
 801610a:	9302      	str	r3, [sp, #8]
 801610c:	f000 fc88 	bl	8016a20 <__lshift>
 8016110:	4621      	mov	r1, r4
 8016112:	4605      	mov	r5, r0
 8016114:	f000 fcf4 	bl	8016b00 <__mcmp>
 8016118:	2800      	cmp	r0, #0
 801611a:	dcb1      	bgt.n	8016080 <_dtoa_r+0x9c0>
 801611c:	d102      	bne.n	8016124 <_dtoa_r+0xa64>
 801611e:	9b02      	ldr	r3, [sp, #8]
 8016120:	07db      	lsls	r3, r3, #31
 8016122:	d4ad      	bmi.n	8016080 <_dtoa_r+0x9c0>
 8016124:	4643      	mov	r3, r8
 8016126:	4698      	mov	r8, r3
 8016128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801612c:	2a30      	cmp	r2, #48	; 0x30
 801612e:	d0fa      	beq.n	8016126 <_dtoa_r+0xa66>
 8016130:	e6f6      	b.n	8015f20 <_dtoa_r+0x860>
 8016132:	9a01      	ldr	r2, [sp, #4]
 8016134:	429a      	cmp	r2, r3
 8016136:	d1a4      	bne.n	8016082 <_dtoa_r+0x9c2>
 8016138:	f10b 0b01 	add.w	fp, fp, #1
 801613c:	2331      	movs	r3, #49	; 0x31
 801613e:	e778      	b.n	8016032 <_dtoa_r+0x972>
 8016140:	4b14      	ldr	r3, [pc, #80]	; (8016194 <_dtoa_r+0xad4>)
 8016142:	f7ff bb27 	b.w	8015794 <_dtoa_r+0xd4>
 8016146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016148:	2b00      	cmp	r3, #0
 801614a:	f47f ab03 	bne.w	8015754 <_dtoa_r+0x94>
 801614e:	4b12      	ldr	r3, [pc, #72]	; (8016198 <_dtoa_r+0xad8>)
 8016150:	f7ff bb20 	b.w	8015794 <_dtoa_r+0xd4>
 8016154:	f1ba 0f00 	cmp.w	sl, #0
 8016158:	dc03      	bgt.n	8016162 <_dtoa_r+0xaa2>
 801615a:	9b06      	ldr	r3, [sp, #24]
 801615c:	2b02      	cmp	r3, #2
 801615e:	f73f aec7 	bgt.w	8015ef0 <_dtoa_r+0x830>
 8016162:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016166:	4621      	mov	r1, r4
 8016168:	4628      	mov	r0, r5
 801616a:	f7ff fa1d 	bl	80155a8 <quorem>
 801616e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016172:	f808 3b01 	strb.w	r3, [r8], #1
 8016176:	9a01      	ldr	r2, [sp, #4]
 8016178:	eba8 0202 	sub.w	r2, r8, r2
 801617c:	4592      	cmp	sl, r2
 801617e:	ddb7      	ble.n	80160f0 <_dtoa_r+0xa30>
 8016180:	4629      	mov	r1, r5
 8016182:	2300      	movs	r3, #0
 8016184:	220a      	movs	r2, #10
 8016186:	4630      	mov	r0, r6
 8016188:	f000 fa9a 	bl	80166c0 <__multadd>
 801618c:	4605      	mov	r5, r0
 801618e:	e7ea      	b.n	8016166 <_dtoa_r+0xaa6>
 8016190:	0801951f 	.word	0x0801951f
 8016194:	0801947c 	.word	0x0801947c
 8016198:	080194a0 	.word	0x080194a0

0801619c <__sflush_r>:
 801619c:	898a      	ldrh	r2, [r1, #12]
 801619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a2:	4605      	mov	r5, r0
 80161a4:	0710      	lsls	r0, r2, #28
 80161a6:	460c      	mov	r4, r1
 80161a8:	d458      	bmi.n	801625c <__sflush_r+0xc0>
 80161aa:	684b      	ldr	r3, [r1, #4]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	dc05      	bgt.n	80161bc <__sflush_r+0x20>
 80161b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	dc02      	bgt.n	80161bc <__sflush_r+0x20>
 80161b6:	2000      	movs	r0, #0
 80161b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161be:	2e00      	cmp	r6, #0
 80161c0:	d0f9      	beq.n	80161b6 <__sflush_r+0x1a>
 80161c2:	2300      	movs	r3, #0
 80161c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80161c8:	682f      	ldr	r7, [r5, #0]
 80161ca:	602b      	str	r3, [r5, #0]
 80161cc:	d032      	beq.n	8016234 <__sflush_r+0x98>
 80161ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	075a      	lsls	r2, r3, #29
 80161d4:	d505      	bpl.n	80161e2 <__sflush_r+0x46>
 80161d6:	6863      	ldr	r3, [r4, #4]
 80161d8:	1ac0      	subs	r0, r0, r3
 80161da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161dc:	b10b      	cbz	r3, 80161e2 <__sflush_r+0x46>
 80161de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161e0:	1ac0      	subs	r0, r0, r3
 80161e2:	2300      	movs	r3, #0
 80161e4:	4602      	mov	r2, r0
 80161e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161e8:	6a21      	ldr	r1, [r4, #32]
 80161ea:	4628      	mov	r0, r5
 80161ec:	47b0      	blx	r6
 80161ee:	1c43      	adds	r3, r0, #1
 80161f0:	89a3      	ldrh	r3, [r4, #12]
 80161f2:	d106      	bne.n	8016202 <__sflush_r+0x66>
 80161f4:	6829      	ldr	r1, [r5, #0]
 80161f6:	291d      	cmp	r1, #29
 80161f8:	d82c      	bhi.n	8016254 <__sflush_r+0xb8>
 80161fa:	4a2a      	ldr	r2, [pc, #168]	; (80162a4 <__sflush_r+0x108>)
 80161fc:	40ca      	lsrs	r2, r1
 80161fe:	07d6      	lsls	r6, r2, #31
 8016200:	d528      	bpl.n	8016254 <__sflush_r+0xb8>
 8016202:	2200      	movs	r2, #0
 8016204:	6062      	str	r2, [r4, #4]
 8016206:	04d9      	lsls	r1, r3, #19
 8016208:	6922      	ldr	r2, [r4, #16]
 801620a:	6022      	str	r2, [r4, #0]
 801620c:	d504      	bpl.n	8016218 <__sflush_r+0x7c>
 801620e:	1c42      	adds	r2, r0, #1
 8016210:	d101      	bne.n	8016216 <__sflush_r+0x7a>
 8016212:	682b      	ldr	r3, [r5, #0]
 8016214:	b903      	cbnz	r3, 8016218 <__sflush_r+0x7c>
 8016216:	6560      	str	r0, [r4, #84]	; 0x54
 8016218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801621a:	602f      	str	r7, [r5, #0]
 801621c:	2900      	cmp	r1, #0
 801621e:	d0ca      	beq.n	80161b6 <__sflush_r+0x1a>
 8016220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016224:	4299      	cmp	r1, r3
 8016226:	d002      	beq.n	801622e <__sflush_r+0x92>
 8016228:	4628      	mov	r0, r5
 801622a:	f7fe fb1b 	bl	8014864 <_free_r>
 801622e:	2000      	movs	r0, #0
 8016230:	6360      	str	r0, [r4, #52]	; 0x34
 8016232:	e7c1      	b.n	80161b8 <__sflush_r+0x1c>
 8016234:	6a21      	ldr	r1, [r4, #32]
 8016236:	2301      	movs	r3, #1
 8016238:	4628      	mov	r0, r5
 801623a:	47b0      	blx	r6
 801623c:	1c41      	adds	r1, r0, #1
 801623e:	d1c7      	bne.n	80161d0 <__sflush_r+0x34>
 8016240:	682b      	ldr	r3, [r5, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d0c4      	beq.n	80161d0 <__sflush_r+0x34>
 8016246:	2b1d      	cmp	r3, #29
 8016248:	d001      	beq.n	801624e <__sflush_r+0xb2>
 801624a:	2b16      	cmp	r3, #22
 801624c:	d101      	bne.n	8016252 <__sflush_r+0xb6>
 801624e:	602f      	str	r7, [r5, #0]
 8016250:	e7b1      	b.n	80161b6 <__sflush_r+0x1a>
 8016252:	89a3      	ldrh	r3, [r4, #12]
 8016254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016258:	81a3      	strh	r3, [r4, #12]
 801625a:	e7ad      	b.n	80161b8 <__sflush_r+0x1c>
 801625c:	690f      	ldr	r7, [r1, #16]
 801625e:	2f00      	cmp	r7, #0
 8016260:	d0a9      	beq.n	80161b6 <__sflush_r+0x1a>
 8016262:	0793      	lsls	r3, r2, #30
 8016264:	680e      	ldr	r6, [r1, #0]
 8016266:	bf08      	it	eq
 8016268:	694b      	ldreq	r3, [r1, #20]
 801626a:	600f      	str	r7, [r1, #0]
 801626c:	bf18      	it	ne
 801626e:	2300      	movne	r3, #0
 8016270:	eba6 0807 	sub.w	r8, r6, r7
 8016274:	608b      	str	r3, [r1, #8]
 8016276:	f1b8 0f00 	cmp.w	r8, #0
 801627a:	dd9c      	ble.n	80161b6 <__sflush_r+0x1a>
 801627c:	6a21      	ldr	r1, [r4, #32]
 801627e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016280:	4643      	mov	r3, r8
 8016282:	463a      	mov	r2, r7
 8016284:	4628      	mov	r0, r5
 8016286:	47b0      	blx	r6
 8016288:	2800      	cmp	r0, #0
 801628a:	dc06      	bgt.n	801629a <__sflush_r+0xfe>
 801628c:	89a3      	ldrh	r3, [r4, #12]
 801628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016292:	81a3      	strh	r3, [r4, #12]
 8016294:	f04f 30ff 	mov.w	r0, #4294967295
 8016298:	e78e      	b.n	80161b8 <__sflush_r+0x1c>
 801629a:	4407      	add	r7, r0
 801629c:	eba8 0800 	sub.w	r8, r8, r0
 80162a0:	e7e9      	b.n	8016276 <__sflush_r+0xda>
 80162a2:	bf00      	nop
 80162a4:	20400001 	.word	0x20400001

080162a8 <_fflush_r>:
 80162a8:	b538      	push	{r3, r4, r5, lr}
 80162aa:	690b      	ldr	r3, [r1, #16]
 80162ac:	4605      	mov	r5, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	b913      	cbnz	r3, 80162b8 <_fflush_r+0x10>
 80162b2:	2500      	movs	r5, #0
 80162b4:	4628      	mov	r0, r5
 80162b6:	bd38      	pop	{r3, r4, r5, pc}
 80162b8:	b118      	cbz	r0, 80162c2 <_fflush_r+0x1a>
 80162ba:	6983      	ldr	r3, [r0, #24]
 80162bc:	b90b      	cbnz	r3, 80162c2 <_fflush_r+0x1a>
 80162be:	f000 f887 	bl	80163d0 <__sinit>
 80162c2:	4b14      	ldr	r3, [pc, #80]	; (8016314 <_fflush_r+0x6c>)
 80162c4:	429c      	cmp	r4, r3
 80162c6:	d11b      	bne.n	8016300 <_fflush_r+0x58>
 80162c8:	686c      	ldr	r4, [r5, #4]
 80162ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d0ef      	beq.n	80162b2 <_fflush_r+0xa>
 80162d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80162d4:	07d0      	lsls	r0, r2, #31
 80162d6:	d404      	bmi.n	80162e2 <_fflush_r+0x3a>
 80162d8:	0599      	lsls	r1, r3, #22
 80162da:	d402      	bmi.n	80162e2 <_fflush_r+0x3a>
 80162dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162de:	f000 f91a 	bl	8016516 <__retarget_lock_acquire_recursive>
 80162e2:	4628      	mov	r0, r5
 80162e4:	4621      	mov	r1, r4
 80162e6:	f7ff ff59 	bl	801619c <__sflush_r>
 80162ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162ec:	07da      	lsls	r2, r3, #31
 80162ee:	4605      	mov	r5, r0
 80162f0:	d4e0      	bmi.n	80162b4 <_fflush_r+0xc>
 80162f2:	89a3      	ldrh	r3, [r4, #12]
 80162f4:	059b      	lsls	r3, r3, #22
 80162f6:	d4dd      	bmi.n	80162b4 <_fflush_r+0xc>
 80162f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162fa:	f000 f90d 	bl	8016518 <__retarget_lock_release_recursive>
 80162fe:	e7d9      	b.n	80162b4 <_fflush_r+0xc>
 8016300:	4b05      	ldr	r3, [pc, #20]	; (8016318 <_fflush_r+0x70>)
 8016302:	429c      	cmp	r4, r3
 8016304:	d101      	bne.n	801630a <_fflush_r+0x62>
 8016306:	68ac      	ldr	r4, [r5, #8]
 8016308:	e7df      	b.n	80162ca <_fflush_r+0x22>
 801630a:	4b04      	ldr	r3, [pc, #16]	; (801631c <_fflush_r+0x74>)
 801630c:	429c      	cmp	r4, r3
 801630e:	bf08      	it	eq
 8016310:	68ec      	ldreq	r4, [r5, #12]
 8016312:	e7da      	b.n	80162ca <_fflush_r+0x22>
 8016314:	08019550 	.word	0x08019550
 8016318:	08019570 	.word	0x08019570
 801631c:	08019530 	.word	0x08019530

08016320 <std>:
 8016320:	2300      	movs	r3, #0
 8016322:	b510      	push	{r4, lr}
 8016324:	4604      	mov	r4, r0
 8016326:	e9c0 3300 	strd	r3, r3, [r0]
 801632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801632e:	6083      	str	r3, [r0, #8]
 8016330:	8181      	strh	r1, [r0, #12]
 8016332:	6643      	str	r3, [r0, #100]	; 0x64
 8016334:	81c2      	strh	r2, [r0, #14]
 8016336:	6183      	str	r3, [r0, #24]
 8016338:	4619      	mov	r1, r3
 801633a:	2208      	movs	r2, #8
 801633c:	305c      	adds	r0, #92	; 0x5c
 801633e:	f7fe fa89 	bl	8014854 <memset>
 8016342:	4b05      	ldr	r3, [pc, #20]	; (8016358 <std+0x38>)
 8016344:	6263      	str	r3, [r4, #36]	; 0x24
 8016346:	4b05      	ldr	r3, [pc, #20]	; (801635c <std+0x3c>)
 8016348:	62a3      	str	r3, [r4, #40]	; 0x28
 801634a:	4b05      	ldr	r3, [pc, #20]	; (8016360 <std+0x40>)
 801634c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801634e:	4b05      	ldr	r3, [pc, #20]	; (8016364 <std+0x44>)
 8016350:	6224      	str	r4, [r4, #32]
 8016352:	6323      	str	r3, [r4, #48]	; 0x30
 8016354:	bd10      	pop	{r4, pc}
 8016356:	bf00      	nop
 8016358:	080172f9 	.word	0x080172f9
 801635c:	0801731b 	.word	0x0801731b
 8016360:	08017353 	.word	0x08017353
 8016364:	08017377 	.word	0x08017377

08016368 <_cleanup_r>:
 8016368:	4901      	ldr	r1, [pc, #4]	; (8016370 <_cleanup_r+0x8>)
 801636a:	f000 b8af 	b.w	80164cc <_fwalk_reent>
 801636e:	bf00      	nop
 8016370:	080162a9 	.word	0x080162a9

08016374 <__sfmoreglue>:
 8016374:	b570      	push	{r4, r5, r6, lr}
 8016376:	2268      	movs	r2, #104	; 0x68
 8016378:	1e4d      	subs	r5, r1, #1
 801637a:	4355      	muls	r5, r2
 801637c:	460e      	mov	r6, r1
 801637e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016382:	f7fe fadb 	bl	801493c <_malloc_r>
 8016386:	4604      	mov	r4, r0
 8016388:	b140      	cbz	r0, 801639c <__sfmoreglue+0x28>
 801638a:	2100      	movs	r1, #0
 801638c:	e9c0 1600 	strd	r1, r6, [r0]
 8016390:	300c      	adds	r0, #12
 8016392:	60a0      	str	r0, [r4, #8]
 8016394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016398:	f7fe fa5c 	bl	8014854 <memset>
 801639c:	4620      	mov	r0, r4
 801639e:	bd70      	pop	{r4, r5, r6, pc}

080163a0 <__sfp_lock_acquire>:
 80163a0:	4801      	ldr	r0, [pc, #4]	; (80163a8 <__sfp_lock_acquire+0x8>)
 80163a2:	f000 b8b8 	b.w	8016516 <__retarget_lock_acquire_recursive>
 80163a6:	bf00      	nop
 80163a8:	20001b49 	.word	0x20001b49

080163ac <__sfp_lock_release>:
 80163ac:	4801      	ldr	r0, [pc, #4]	; (80163b4 <__sfp_lock_release+0x8>)
 80163ae:	f000 b8b3 	b.w	8016518 <__retarget_lock_release_recursive>
 80163b2:	bf00      	nop
 80163b4:	20001b49 	.word	0x20001b49

080163b8 <__sinit_lock_acquire>:
 80163b8:	4801      	ldr	r0, [pc, #4]	; (80163c0 <__sinit_lock_acquire+0x8>)
 80163ba:	f000 b8ac 	b.w	8016516 <__retarget_lock_acquire_recursive>
 80163be:	bf00      	nop
 80163c0:	20001b4a 	.word	0x20001b4a

080163c4 <__sinit_lock_release>:
 80163c4:	4801      	ldr	r0, [pc, #4]	; (80163cc <__sinit_lock_release+0x8>)
 80163c6:	f000 b8a7 	b.w	8016518 <__retarget_lock_release_recursive>
 80163ca:	bf00      	nop
 80163cc:	20001b4a 	.word	0x20001b4a

080163d0 <__sinit>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	f7ff fff0 	bl	80163b8 <__sinit_lock_acquire>
 80163d8:	69a3      	ldr	r3, [r4, #24]
 80163da:	b11b      	cbz	r3, 80163e4 <__sinit+0x14>
 80163dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163e0:	f7ff bff0 	b.w	80163c4 <__sinit_lock_release>
 80163e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80163e8:	6523      	str	r3, [r4, #80]	; 0x50
 80163ea:	4b13      	ldr	r3, [pc, #76]	; (8016438 <__sinit+0x68>)
 80163ec:	4a13      	ldr	r2, [pc, #76]	; (801643c <__sinit+0x6c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80163f2:	42a3      	cmp	r3, r4
 80163f4:	bf04      	itt	eq
 80163f6:	2301      	moveq	r3, #1
 80163f8:	61a3      	streq	r3, [r4, #24]
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 f820 	bl	8016440 <__sfp>
 8016400:	6060      	str	r0, [r4, #4]
 8016402:	4620      	mov	r0, r4
 8016404:	f000 f81c 	bl	8016440 <__sfp>
 8016408:	60a0      	str	r0, [r4, #8]
 801640a:	4620      	mov	r0, r4
 801640c:	f000 f818 	bl	8016440 <__sfp>
 8016410:	2200      	movs	r2, #0
 8016412:	60e0      	str	r0, [r4, #12]
 8016414:	2104      	movs	r1, #4
 8016416:	6860      	ldr	r0, [r4, #4]
 8016418:	f7ff ff82 	bl	8016320 <std>
 801641c:	68a0      	ldr	r0, [r4, #8]
 801641e:	2201      	movs	r2, #1
 8016420:	2109      	movs	r1, #9
 8016422:	f7ff ff7d 	bl	8016320 <std>
 8016426:	68e0      	ldr	r0, [r4, #12]
 8016428:	2202      	movs	r2, #2
 801642a:	2112      	movs	r1, #18
 801642c:	f7ff ff78 	bl	8016320 <std>
 8016430:	2301      	movs	r3, #1
 8016432:	61a3      	str	r3, [r4, #24]
 8016434:	e7d2      	b.n	80163dc <__sinit+0xc>
 8016436:	bf00      	nop
 8016438:	08019468 	.word	0x08019468
 801643c:	08016369 	.word	0x08016369

08016440 <__sfp>:
 8016440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016442:	4607      	mov	r7, r0
 8016444:	f7ff ffac 	bl	80163a0 <__sfp_lock_acquire>
 8016448:	4b1e      	ldr	r3, [pc, #120]	; (80164c4 <__sfp+0x84>)
 801644a:	681e      	ldr	r6, [r3, #0]
 801644c:	69b3      	ldr	r3, [r6, #24]
 801644e:	b913      	cbnz	r3, 8016456 <__sfp+0x16>
 8016450:	4630      	mov	r0, r6
 8016452:	f7ff ffbd 	bl	80163d0 <__sinit>
 8016456:	3648      	adds	r6, #72	; 0x48
 8016458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801645c:	3b01      	subs	r3, #1
 801645e:	d503      	bpl.n	8016468 <__sfp+0x28>
 8016460:	6833      	ldr	r3, [r6, #0]
 8016462:	b30b      	cbz	r3, 80164a8 <__sfp+0x68>
 8016464:	6836      	ldr	r6, [r6, #0]
 8016466:	e7f7      	b.n	8016458 <__sfp+0x18>
 8016468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801646c:	b9d5      	cbnz	r5, 80164a4 <__sfp+0x64>
 801646e:	4b16      	ldr	r3, [pc, #88]	; (80164c8 <__sfp+0x88>)
 8016470:	60e3      	str	r3, [r4, #12]
 8016472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016476:	6665      	str	r5, [r4, #100]	; 0x64
 8016478:	f000 f84c 	bl	8016514 <__retarget_lock_init_recursive>
 801647c:	f7ff ff96 	bl	80163ac <__sfp_lock_release>
 8016480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016488:	6025      	str	r5, [r4, #0]
 801648a:	61a5      	str	r5, [r4, #24]
 801648c:	2208      	movs	r2, #8
 801648e:	4629      	mov	r1, r5
 8016490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016494:	f7fe f9de 	bl	8014854 <memset>
 8016498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801649c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80164a0:	4620      	mov	r0, r4
 80164a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164a4:	3468      	adds	r4, #104	; 0x68
 80164a6:	e7d9      	b.n	801645c <__sfp+0x1c>
 80164a8:	2104      	movs	r1, #4
 80164aa:	4638      	mov	r0, r7
 80164ac:	f7ff ff62 	bl	8016374 <__sfmoreglue>
 80164b0:	4604      	mov	r4, r0
 80164b2:	6030      	str	r0, [r6, #0]
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d1d5      	bne.n	8016464 <__sfp+0x24>
 80164b8:	f7ff ff78 	bl	80163ac <__sfp_lock_release>
 80164bc:	230c      	movs	r3, #12
 80164be:	603b      	str	r3, [r7, #0]
 80164c0:	e7ee      	b.n	80164a0 <__sfp+0x60>
 80164c2:	bf00      	nop
 80164c4:	08019468 	.word	0x08019468
 80164c8:	ffff0001 	.word	0xffff0001

080164cc <_fwalk_reent>:
 80164cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164d0:	4606      	mov	r6, r0
 80164d2:	4688      	mov	r8, r1
 80164d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80164d8:	2700      	movs	r7, #0
 80164da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164de:	f1b9 0901 	subs.w	r9, r9, #1
 80164e2:	d505      	bpl.n	80164f0 <_fwalk_reent+0x24>
 80164e4:	6824      	ldr	r4, [r4, #0]
 80164e6:	2c00      	cmp	r4, #0
 80164e8:	d1f7      	bne.n	80164da <_fwalk_reent+0xe>
 80164ea:	4638      	mov	r0, r7
 80164ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164f0:	89ab      	ldrh	r3, [r5, #12]
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d907      	bls.n	8016506 <_fwalk_reent+0x3a>
 80164f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164fa:	3301      	adds	r3, #1
 80164fc:	d003      	beq.n	8016506 <_fwalk_reent+0x3a>
 80164fe:	4629      	mov	r1, r5
 8016500:	4630      	mov	r0, r6
 8016502:	47c0      	blx	r8
 8016504:	4307      	orrs	r7, r0
 8016506:	3568      	adds	r5, #104	; 0x68
 8016508:	e7e9      	b.n	80164de <_fwalk_reent+0x12>
	...

0801650c <_localeconv_r>:
 801650c:	4800      	ldr	r0, [pc, #0]	; (8016510 <_localeconv_r+0x4>)
 801650e:	4770      	bx	lr
 8016510:	20001594 	.word	0x20001594

08016514 <__retarget_lock_init_recursive>:
 8016514:	4770      	bx	lr

08016516 <__retarget_lock_acquire_recursive>:
 8016516:	4770      	bx	lr

08016518 <__retarget_lock_release_recursive>:
 8016518:	4770      	bx	lr

0801651a <__swhatbuf_r>:
 801651a:	b570      	push	{r4, r5, r6, lr}
 801651c:	460e      	mov	r6, r1
 801651e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016522:	2900      	cmp	r1, #0
 8016524:	b096      	sub	sp, #88	; 0x58
 8016526:	4614      	mov	r4, r2
 8016528:	461d      	mov	r5, r3
 801652a:	da08      	bge.n	801653e <__swhatbuf_r+0x24>
 801652c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016530:	2200      	movs	r2, #0
 8016532:	602a      	str	r2, [r5, #0]
 8016534:	061a      	lsls	r2, r3, #24
 8016536:	d410      	bmi.n	801655a <__swhatbuf_r+0x40>
 8016538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801653c:	e00e      	b.n	801655c <__swhatbuf_r+0x42>
 801653e:	466a      	mov	r2, sp
 8016540:	f000 ff70 	bl	8017424 <_fstat_r>
 8016544:	2800      	cmp	r0, #0
 8016546:	dbf1      	blt.n	801652c <__swhatbuf_r+0x12>
 8016548:	9a01      	ldr	r2, [sp, #4]
 801654a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801654e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016552:	425a      	negs	r2, r3
 8016554:	415a      	adcs	r2, r3
 8016556:	602a      	str	r2, [r5, #0]
 8016558:	e7ee      	b.n	8016538 <__swhatbuf_r+0x1e>
 801655a:	2340      	movs	r3, #64	; 0x40
 801655c:	2000      	movs	r0, #0
 801655e:	6023      	str	r3, [r4, #0]
 8016560:	b016      	add	sp, #88	; 0x58
 8016562:	bd70      	pop	{r4, r5, r6, pc}

08016564 <__smakebuf_r>:
 8016564:	898b      	ldrh	r3, [r1, #12]
 8016566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016568:	079d      	lsls	r5, r3, #30
 801656a:	4606      	mov	r6, r0
 801656c:	460c      	mov	r4, r1
 801656e:	d507      	bpl.n	8016580 <__smakebuf_r+0x1c>
 8016570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016574:	6023      	str	r3, [r4, #0]
 8016576:	6123      	str	r3, [r4, #16]
 8016578:	2301      	movs	r3, #1
 801657a:	6163      	str	r3, [r4, #20]
 801657c:	b002      	add	sp, #8
 801657e:	bd70      	pop	{r4, r5, r6, pc}
 8016580:	ab01      	add	r3, sp, #4
 8016582:	466a      	mov	r2, sp
 8016584:	f7ff ffc9 	bl	801651a <__swhatbuf_r>
 8016588:	9900      	ldr	r1, [sp, #0]
 801658a:	4605      	mov	r5, r0
 801658c:	4630      	mov	r0, r6
 801658e:	f7fe f9d5 	bl	801493c <_malloc_r>
 8016592:	b948      	cbnz	r0, 80165a8 <__smakebuf_r+0x44>
 8016594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016598:	059a      	lsls	r2, r3, #22
 801659a:	d4ef      	bmi.n	801657c <__smakebuf_r+0x18>
 801659c:	f023 0303 	bic.w	r3, r3, #3
 80165a0:	f043 0302 	orr.w	r3, r3, #2
 80165a4:	81a3      	strh	r3, [r4, #12]
 80165a6:	e7e3      	b.n	8016570 <__smakebuf_r+0xc>
 80165a8:	4b0d      	ldr	r3, [pc, #52]	; (80165e0 <__smakebuf_r+0x7c>)
 80165aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80165ac:	89a3      	ldrh	r3, [r4, #12]
 80165ae:	6020      	str	r0, [r4, #0]
 80165b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165b4:	81a3      	strh	r3, [r4, #12]
 80165b6:	9b00      	ldr	r3, [sp, #0]
 80165b8:	6163      	str	r3, [r4, #20]
 80165ba:	9b01      	ldr	r3, [sp, #4]
 80165bc:	6120      	str	r0, [r4, #16]
 80165be:	b15b      	cbz	r3, 80165d8 <__smakebuf_r+0x74>
 80165c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165c4:	4630      	mov	r0, r6
 80165c6:	f000 ff3f 	bl	8017448 <_isatty_r>
 80165ca:	b128      	cbz	r0, 80165d8 <__smakebuf_r+0x74>
 80165cc:	89a3      	ldrh	r3, [r4, #12]
 80165ce:	f023 0303 	bic.w	r3, r3, #3
 80165d2:	f043 0301 	orr.w	r3, r3, #1
 80165d6:	81a3      	strh	r3, [r4, #12]
 80165d8:	89a0      	ldrh	r0, [r4, #12]
 80165da:	4305      	orrs	r5, r0
 80165dc:	81a5      	strh	r5, [r4, #12]
 80165de:	e7cd      	b.n	801657c <__smakebuf_r+0x18>
 80165e0:	08016369 	.word	0x08016369

080165e4 <__malloc_lock>:
 80165e4:	4801      	ldr	r0, [pc, #4]	; (80165ec <__malloc_lock+0x8>)
 80165e6:	f7ff bf96 	b.w	8016516 <__retarget_lock_acquire_recursive>
 80165ea:	bf00      	nop
 80165ec:	20001b48 	.word	0x20001b48

080165f0 <__malloc_unlock>:
 80165f0:	4801      	ldr	r0, [pc, #4]	; (80165f8 <__malloc_unlock+0x8>)
 80165f2:	f7ff bf91 	b.w	8016518 <__retarget_lock_release_recursive>
 80165f6:	bf00      	nop
 80165f8:	20001b48 	.word	0x20001b48

080165fc <_Balloc>:
 80165fc:	b570      	push	{r4, r5, r6, lr}
 80165fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016600:	4604      	mov	r4, r0
 8016602:	460d      	mov	r5, r1
 8016604:	b976      	cbnz	r6, 8016624 <_Balloc+0x28>
 8016606:	2010      	movs	r0, #16
 8016608:	f7fe f8ec 	bl	80147e4 <malloc>
 801660c:	4602      	mov	r2, r0
 801660e:	6260      	str	r0, [r4, #36]	; 0x24
 8016610:	b920      	cbnz	r0, 801661c <_Balloc+0x20>
 8016612:	4b18      	ldr	r3, [pc, #96]	; (8016674 <_Balloc+0x78>)
 8016614:	4818      	ldr	r0, [pc, #96]	; (8016678 <_Balloc+0x7c>)
 8016616:	2166      	movs	r1, #102	; 0x66
 8016618:	f000 fec4 	bl	80173a4 <__assert_func>
 801661c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016620:	6006      	str	r6, [r0, #0]
 8016622:	60c6      	str	r6, [r0, #12]
 8016624:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016626:	68f3      	ldr	r3, [r6, #12]
 8016628:	b183      	cbz	r3, 801664c <_Balloc+0x50>
 801662a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801662c:	68db      	ldr	r3, [r3, #12]
 801662e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016632:	b9b8      	cbnz	r0, 8016664 <_Balloc+0x68>
 8016634:	2101      	movs	r1, #1
 8016636:	fa01 f605 	lsl.w	r6, r1, r5
 801663a:	1d72      	adds	r2, r6, #5
 801663c:	0092      	lsls	r2, r2, #2
 801663e:	4620      	mov	r0, r4
 8016640:	f000 fb60 	bl	8016d04 <_calloc_r>
 8016644:	b160      	cbz	r0, 8016660 <_Balloc+0x64>
 8016646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801664a:	e00e      	b.n	801666a <_Balloc+0x6e>
 801664c:	2221      	movs	r2, #33	; 0x21
 801664e:	2104      	movs	r1, #4
 8016650:	4620      	mov	r0, r4
 8016652:	f000 fb57 	bl	8016d04 <_calloc_r>
 8016656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016658:	60f0      	str	r0, [r6, #12]
 801665a:	68db      	ldr	r3, [r3, #12]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d1e4      	bne.n	801662a <_Balloc+0x2e>
 8016660:	2000      	movs	r0, #0
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	6802      	ldr	r2, [r0, #0]
 8016666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801666a:	2300      	movs	r3, #0
 801666c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016670:	e7f7      	b.n	8016662 <_Balloc+0x66>
 8016672:	bf00      	nop
 8016674:	080194ad 	.word	0x080194ad
 8016678:	08019590 	.word	0x08019590

0801667c <_Bfree>:
 801667c:	b570      	push	{r4, r5, r6, lr}
 801667e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016680:	4605      	mov	r5, r0
 8016682:	460c      	mov	r4, r1
 8016684:	b976      	cbnz	r6, 80166a4 <_Bfree+0x28>
 8016686:	2010      	movs	r0, #16
 8016688:	f7fe f8ac 	bl	80147e4 <malloc>
 801668c:	4602      	mov	r2, r0
 801668e:	6268      	str	r0, [r5, #36]	; 0x24
 8016690:	b920      	cbnz	r0, 801669c <_Bfree+0x20>
 8016692:	4b09      	ldr	r3, [pc, #36]	; (80166b8 <_Bfree+0x3c>)
 8016694:	4809      	ldr	r0, [pc, #36]	; (80166bc <_Bfree+0x40>)
 8016696:	218a      	movs	r1, #138	; 0x8a
 8016698:	f000 fe84 	bl	80173a4 <__assert_func>
 801669c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166a0:	6006      	str	r6, [r0, #0]
 80166a2:	60c6      	str	r6, [r0, #12]
 80166a4:	b13c      	cbz	r4, 80166b6 <_Bfree+0x3a>
 80166a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80166a8:	6862      	ldr	r2, [r4, #4]
 80166aa:	68db      	ldr	r3, [r3, #12]
 80166ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80166b0:	6021      	str	r1, [r4, #0]
 80166b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80166b6:	bd70      	pop	{r4, r5, r6, pc}
 80166b8:	080194ad 	.word	0x080194ad
 80166bc:	08019590 	.word	0x08019590

080166c0 <__multadd>:
 80166c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166c4:	690d      	ldr	r5, [r1, #16]
 80166c6:	4607      	mov	r7, r0
 80166c8:	460c      	mov	r4, r1
 80166ca:	461e      	mov	r6, r3
 80166cc:	f101 0c14 	add.w	ip, r1, #20
 80166d0:	2000      	movs	r0, #0
 80166d2:	f8dc 3000 	ldr.w	r3, [ip]
 80166d6:	b299      	uxth	r1, r3
 80166d8:	fb02 6101 	mla	r1, r2, r1, r6
 80166dc:	0c1e      	lsrs	r6, r3, #16
 80166de:	0c0b      	lsrs	r3, r1, #16
 80166e0:	fb02 3306 	mla	r3, r2, r6, r3
 80166e4:	b289      	uxth	r1, r1
 80166e6:	3001      	adds	r0, #1
 80166e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80166ec:	4285      	cmp	r5, r0
 80166ee:	f84c 1b04 	str.w	r1, [ip], #4
 80166f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80166f6:	dcec      	bgt.n	80166d2 <__multadd+0x12>
 80166f8:	b30e      	cbz	r6, 801673e <__multadd+0x7e>
 80166fa:	68a3      	ldr	r3, [r4, #8]
 80166fc:	42ab      	cmp	r3, r5
 80166fe:	dc19      	bgt.n	8016734 <__multadd+0x74>
 8016700:	6861      	ldr	r1, [r4, #4]
 8016702:	4638      	mov	r0, r7
 8016704:	3101      	adds	r1, #1
 8016706:	f7ff ff79 	bl	80165fc <_Balloc>
 801670a:	4680      	mov	r8, r0
 801670c:	b928      	cbnz	r0, 801671a <__multadd+0x5a>
 801670e:	4602      	mov	r2, r0
 8016710:	4b0c      	ldr	r3, [pc, #48]	; (8016744 <__multadd+0x84>)
 8016712:	480d      	ldr	r0, [pc, #52]	; (8016748 <__multadd+0x88>)
 8016714:	21b5      	movs	r1, #181	; 0xb5
 8016716:	f000 fe45 	bl	80173a4 <__assert_func>
 801671a:	6922      	ldr	r2, [r4, #16]
 801671c:	3202      	adds	r2, #2
 801671e:	f104 010c 	add.w	r1, r4, #12
 8016722:	0092      	lsls	r2, r2, #2
 8016724:	300c      	adds	r0, #12
 8016726:	f7fe f86d 	bl	8014804 <memcpy>
 801672a:	4621      	mov	r1, r4
 801672c:	4638      	mov	r0, r7
 801672e:	f7ff ffa5 	bl	801667c <_Bfree>
 8016732:	4644      	mov	r4, r8
 8016734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016738:	3501      	adds	r5, #1
 801673a:	615e      	str	r6, [r3, #20]
 801673c:	6125      	str	r5, [r4, #16]
 801673e:	4620      	mov	r0, r4
 8016740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016744:	0801951f 	.word	0x0801951f
 8016748:	08019590 	.word	0x08019590

0801674c <__hi0bits>:
 801674c:	0c03      	lsrs	r3, r0, #16
 801674e:	041b      	lsls	r3, r3, #16
 8016750:	b9d3      	cbnz	r3, 8016788 <__hi0bits+0x3c>
 8016752:	0400      	lsls	r0, r0, #16
 8016754:	2310      	movs	r3, #16
 8016756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801675a:	bf04      	itt	eq
 801675c:	0200      	lsleq	r0, r0, #8
 801675e:	3308      	addeq	r3, #8
 8016760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016764:	bf04      	itt	eq
 8016766:	0100      	lsleq	r0, r0, #4
 8016768:	3304      	addeq	r3, #4
 801676a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801676e:	bf04      	itt	eq
 8016770:	0080      	lsleq	r0, r0, #2
 8016772:	3302      	addeq	r3, #2
 8016774:	2800      	cmp	r0, #0
 8016776:	db05      	blt.n	8016784 <__hi0bits+0x38>
 8016778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801677c:	f103 0301 	add.w	r3, r3, #1
 8016780:	bf08      	it	eq
 8016782:	2320      	moveq	r3, #32
 8016784:	4618      	mov	r0, r3
 8016786:	4770      	bx	lr
 8016788:	2300      	movs	r3, #0
 801678a:	e7e4      	b.n	8016756 <__hi0bits+0xa>

0801678c <__lo0bits>:
 801678c:	6803      	ldr	r3, [r0, #0]
 801678e:	f013 0207 	ands.w	r2, r3, #7
 8016792:	4601      	mov	r1, r0
 8016794:	d00b      	beq.n	80167ae <__lo0bits+0x22>
 8016796:	07da      	lsls	r2, r3, #31
 8016798:	d423      	bmi.n	80167e2 <__lo0bits+0x56>
 801679a:	0798      	lsls	r0, r3, #30
 801679c:	bf49      	itett	mi
 801679e:	085b      	lsrmi	r3, r3, #1
 80167a0:	089b      	lsrpl	r3, r3, #2
 80167a2:	2001      	movmi	r0, #1
 80167a4:	600b      	strmi	r3, [r1, #0]
 80167a6:	bf5c      	itt	pl
 80167a8:	600b      	strpl	r3, [r1, #0]
 80167aa:	2002      	movpl	r0, #2
 80167ac:	4770      	bx	lr
 80167ae:	b298      	uxth	r0, r3
 80167b0:	b9a8      	cbnz	r0, 80167de <__lo0bits+0x52>
 80167b2:	0c1b      	lsrs	r3, r3, #16
 80167b4:	2010      	movs	r0, #16
 80167b6:	b2da      	uxtb	r2, r3
 80167b8:	b90a      	cbnz	r2, 80167be <__lo0bits+0x32>
 80167ba:	3008      	adds	r0, #8
 80167bc:	0a1b      	lsrs	r3, r3, #8
 80167be:	071a      	lsls	r2, r3, #28
 80167c0:	bf04      	itt	eq
 80167c2:	091b      	lsreq	r3, r3, #4
 80167c4:	3004      	addeq	r0, #4
 80167c6:	079a      	lsls	r2, r3, #30
 80167c8:	bf04      	itt	eq
 80167ca:	089b      	lsreq	r3, r3, #2
 80167cc:	3002      	addeq	r0, #2
 80167ce:	07da      	lsls	r2, r3, #31
 80167d0:	d403      	bmi.n	80167da <__lo0bits+0x4e>
 80167d2:	085b      	lsrs	r3, r3, #1
 80167d4:	f100 0001 	add.w	r0, r0, #1
 80167d8:	d005      	beq.n	80167e6 <__lo0bits+0x5a>
 80167da:	600b      	str	r3, [r1, #0]
 80167dc:	4770      	bx	lr
 80167de:	4610      	mov	r0, r2
 80167e0:	e7e9      	b.n	80167b6 <__lo0bits+0x2a>
 80167e2:	2000      	movs	r0, #0
 80167e4:	4770      	bx	lr
 80167e6:	2020      	movs	r0, #32
 80167e8:	4770      	bx	lr
	...

080167ec <__i2b>:
 80167ec:	b510      	push	{r4, lr}
 80167ee:	460c      	mov	r4, r1
 80167f0:	2101      	movs	r1, #1
 80167f2:	f7ff ff03 	bl	80165fc <_Balloc>
 80167f6:	4602      	mov	r2, r0
 80167f8:	b928      	cbnz	r0, 8016806 <__i2b+0x1a>
 80167fa:	4b05      	ldr	r3, [pc, #20]	; (8016810 <__i2b+0x24>)
 80167fc:	4805      	ldr	r0, [pc, #20]	; (8016814 <__i2b+0x28>)
 80167fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016802:	f000 fdcf 	bl	80173a4 <__assert_func>
 8016806:	2301      	movs	r3, #1
 8016808:	6144      	str	r4, [r0, #20]
 801680a:	6103      	str	r3, [r0, #16]
 801680c:	bd10      	pop	{r4, pc}
 801680e:	bf00      	nop
 8016810:	0801951f 	.word	0x0801951f
 8016814:	08019590 	.word	0x08019590

08016818 <__multiply>:
 8016818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801681c:	4691      	mov	r9, r2
 801681e:	690a      	ldr	r2, [r1, #16]
 8016820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016824:	429a      	cmp	r2, r3
 8016826:	bfb8      	it	lt
 8016828:	460b      	movlt	r3, r1
 801682a:	460c      	mov	r4, r1
 801682c:	bfbc      	itt	lt
 801682e:	464c      	movlt	r4, r9
 8016830:	4699      	movlt	r9, r3
 8016832:	6927      	ldr	r7, [r4, #16]
 8016834:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016838:	68a3      	ldr	r3, [r4, #8]
 801683a:	6861      	ldr	r1, [r4, #4]
 801683c:	eb07 060a 	add.w	r6, r7, sl
 8016840:	42b3      	cmp	r3, r6
 8016842:	b085      	sub	sp, #20
 8016844:	bfb8      	it	lt
 8016846:	3101      	addlt	r1, #1
 8016848:	f7ff fed8 	bl	80165fc <_Balloc>
 801684c:	b930      	cbnz	r0, 801685c <__multiply+0x44>
 801684e:	4602      	mov	r2, r0
 8016850:	4b44      	ldr	r3, [pc, #272]	; (8016964 <__multiply+0x14c>)
 8016852:	4845      	ldr	r0, [pc, #276]	; (8016968 <__multiply+0x150>)
 8016854:	f240 115d 	movw	r1, #349	; 0x15d
 8016858:	f000 fda4 	bl	80173a4 <__assert_func>
 801685c:	f100 0514 	add.w	r5, r0, #20
 8016860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016864:	462b      	mov	r3, r5
 8016866:	2200      	movs	r2, #0
 8016868:	4543      	cmp	r3, r8
 801686a:	d321      	bcc.n	80168b0 <__multiply+0x98>
 801686c:	f104 0314 	add.w	r3, r4, #20
 8016870:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016874:	f109 0314 	add.w	r3, r9, #20
 8016878:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801687c:	9202      	str	r2, [sp, #8]
 801687e:	1b3a      	subs	r2, r7, r4
 8016880:	3a15      	subs	r2, #21
 8016882:	f022 0203 	bic.w	r2, r2, #3
 8016886:	3204      	adds	r2, #4
 8016888:	f104 0115 	add.w	r1, r4, #21
 801688c:	428f      	cmp	r7, r1
 801688e:	bf38      	it	cc
 8016890:	2204      	movcc	r2, #4
 8016892:	9201      	str	r2, [sp, #4]
 8016894:	9a02      	ldr	r2, [sp, #8]
 8016896:	9303      	str	r3, [sp, #12]
 8016898:	429a      	cmp	r2, r3
 801689a:	d80c      	bhi.n	80168b6 <__multiply+0x9e>
 801689c:	2e00      	cmp	r6, #0
 801689e:	dd03      	ble.n	80168a8 <__multiply+0x90>
 80168a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d05a      	beq.n	801695e <__multiply+0x146>
 80168a8:	6106      	str	r6, [r0, #16]
 80168aa:	b005      	add	sp, #20
 80168ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b0:	f843 2b04 	str.w	r2, [r3], #4
 80168b4:	e7d8      	b.n	8016868 <__multiply+0x50>
 80168b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80168ba:	f1ba 0f00 	cmp.w	sl, #0
 80168be:	d024      	beq.n	801690a <__multiply+0xf2>
 80168c0:	f104 0e14 	add.w	lr, r4, #20
 80168c4:	46a9      	mov	r9, r5
 80168c6:	f04f 0c00 	mov.w	ip, #0
 80168ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80168ce:	f8d9 1000 	ldr.w	r1, [r9]
 80168d2:	fa1f fb82 	uxth.w	fp, r2
 80168d6:	b289      	uxth	r1, r1
 80168d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80168dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80168e0:	f8d9 2000 	ldr.w	r2, [r9]
 80168e4:	4461      	add	r1, ip
 80168e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80168ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80168f2:	b289      	uxth	r1, r1
 80168f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168f8:	4577      	cmp	r7, lr
 80168fa:	f849 1b04 	str.w	r1, [r9], #4
 80168fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016902:	d8e2      	bhi.n	80168ca <__multiply+0xb2>
 8016904:	9a01      	ldr	r2, [sp, #4]
 8016906:	f845 c002 	str.w	ip, [r5, r2]
 801690a:	9a03      	ldr	r2, [sp, #12]
 801690c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016910:	3304      	adds	r3, #4
 8016912:	f1b9 0f00 	cmp.w	r9, #0
 8016916:	d020      	beq.n	801695a <__multiply+0x142>
 8016918:	6829      	ldr	r1, [r5, #0]
 801691a:	f104 0c14 	add.w	ip, r4, #20
 801691e:	46ae      	mov	lr, r5
 8016920:	f04f 0a00 	mov.w	sl, #0
 8016924:	f8bc b000 	ldrh.w	fp, [ip]
 8016928:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801692c:	fb09 220b 	mla	r2, r9, fp, r2
 8016930:	4492      	add	sl, r2
 8016932:	b289      	uxth	r1, r1
 8016934:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016938:	f84e 1b04 	str.w	r1, [lr], #4
 801693c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016940:	f8be 1000 	ldrh.w	r1, [lr]
 8016944:	0c12      	lsrs	r2, r2, #16
 8016946:	fb09 1102 	mla	r1, r9, r2, r1
 801694a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801694e:	4567      	cmp	r7, ip
 8016950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016954:	d8e6      	bhi.n	8016924 <__multiply+0x10c>
 8016956:	9a01      	ldr	r2, [sp, #4]
 8016958:	50a9      	str	r1, [r5, r2]
 801695a:	3504      	adds	r5, #4
 801695c:	e79a      	b.n	8016894 <__multiply+0x7c>
 801695e:	3e01      	subs	r6, #1
 8016960:	e79c      	b.n	801689c <__multiply+0x84>
 8016962:	bf00      	nop
 8016964:	0801951f 	.word	0x0801951f
 8016968:	08019590 	.word	0x08019590

0801696c <__pow5mult>:
 801696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016970:	4615      	mov	r5, r2
 8016972:	f012 0203 	ands.w	r2, r2, #3
 8016976:	4606      	mov	r6, r0
 8016978:	460f      	mov	r7, r1
 801697a:	d007      	beq.n	801698c <__pow5mult+0x20>
 801697c:	4c25      	ldr	r4, [pc, #148]	; (8016a14 <__pow5mult+0xa8>)
 801697e:	3a01      	subs	r2, #1
 8016980:	2300      	movs	r3, #0
 8016982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016986:	f7ff fe9b 	bl	80166c0 <__multadd>
 801698a:	4607      	mov	r7, r0
 801698c:	10ad      	asrs	r5, r5, #2
 801698e:	d03d      	beq.n	8016a0c <__pow5mult+0xa0>
 8016990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016992:	b97c      	cbnz	r4, 80169b4 <__pow5mult+0x48>
 8016994:	2010      	movs	r0, #16
 8016996:	f7fd ff25 	bl	80147e4 <malloc>
 801699a:	4602      	mov	r2, r0
 801699c:	6270      	str	r0, [r6, #36]	; 0x24
 801699e:	b928      	cbnz	r0, 80169ac <__pow5mult+0x40>
 80169a0:	4b1d      	ldr	r3, [pc, #116]	; (8016a18 <__pow5mult+0xac>)
 80169a2:	481e      	ldr	r0, [pc, #120]	; (8016a1c <__pow5mult+0xb0>)
 80169a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80169a8:	f000 fcfc 	bl	80173a4 <__assert_func>
 80169ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80169b0:	6004      	str	r4, [r0, #0]
 80169b2:	60c4      	str	r4, [r0, #12]
 80169b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80169b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80169bc:	b94c      	cbnz	r4, 80169d2 <__pow5mult+0x66>
 80169be:	f240 2171 	movw	r1, #625	; 0x271
 80169c2:	4630      	mov	r0, r6
 80169c4:	f7ff ff12 	bl	80167ec <__i2b>
 80169c8:	2300      	movs	r3, #0
 80169ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80169ce:	4604      	mov	r4, r0
 80169d0:	6003      	str	r3, [r0, #0]
 80169d2:	f04f 0900 	mov.w	r9, #0
 80169d6:	07eb      	lsls	r3, r5, #31
 80169d8:	d50a      	bpl.n	80169f0 <__pow5mult+0x84>
 80169da:	4639      	mov	r1, r7
 80169dc:	4622      	mov	r2, r4
 80169de:	4630      	mov	r0, r6
 80169e0:	f7ff ff1a 	bl	8016818 <__multiply>
 80169e4:	4639      	mov	r1, r7
 80169e6:	4680      	mov	r8, r0
 80169e8:	4630      	mov	r0, r6
 80169ea:	f7ff fe47 	bl	801667c <_Bfree>
 80169ee:	4647      	mov	r7, r8
 80169f0:	106d      	asrs	r5, r5, #1
 80169f2:	d00b      	beq.n	8016a0c <__pow5mult+0xa0>
 80169f4:	6820      	ldr	r0, [r4, #0]
 80169f6:	b938      	cbnz	r0, 8016a08 <__pow5mult+0x9c>
 80169f8:	4622      	mov	r2, r4
 80169fa:	4621      	mov	r1, r4
 80169fc:	4630      	mov	r0, r6
 80169fe:	f7ff ff0b 	bl	8016818 <__multiply>
 8016a02:	6020      	str	r0, [r4, #0]
 8016a04:	f8c0 9000 	str.w	r9, [r0]
 8016a08:	4604      	mov	r4, r0
 8016a0a:	e7e4      	b.n	80169d6 <__pow5mult+0x6a>
 8016a0c:	4638      	mov	r0, r7
 8016a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a12:	bf00      	nop
 8016a14:	080196e0 	.word	0x080196e0
 8016a18:	080194ad 	.word	0x080194ad
 8016a1c:	08019590 	.word	0x08019590

08016a20 <__lshift>:
 8016a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a24:	460c      	mov	r4, r1
 8016a26:	6849      	ldr	r1, [r1, #4]
 8016a28:	6923      	ldr	r3, [r4, #16]
 8016a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016a2e:	68a3      	ldr	r3, [r4, #8]
 8016a30:	4607      	mov	r7, r0
 8016a32:	4691      	mov	r9, r2
 8016a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016a38:	f108 0601 	add.w	r6, r8, #1
 8016a3c:	42b3      	cmp	r3, r6
 8016a3e:	db0b      	blt.n	8016a58 <__lshift+0x38>
 8016a40:	4638      	mov	r0, r7
 8016a42:	f7ff fddb 	bl	80165fc <_Balloc>
 8016a46:	4605      	mov	r5, r0
 8016a48:	b948      	cbnz	r0, 8016a5e <__lshift+0x3e>
 8016a4a:	4602      	mov	r2, r0
 8016a4c:	4b2a      	ldr	r3, [pc, #168]	; (8016af8 <__lshift+0xd8>)
 8016a4e:	482b      	ldr	r0, [pc, #172]	; (8016afc <__lshift+0xdc>)
 8016a50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016a54:	f000 fca6 	bl	80173a4 <__assert_func>
 8016a58:	3101      	adds	r1, #1
 8016a5a:	005b      	lsls	r3, r3, #1
 8016a5c:	e7ee      	b.n	8016a3c <__lshift+0x1c>
 8016a5e:	2300      	movs	r3, #0
 8016a60:	f100 0114 	add.w	r1, r0, #20
 8016a64:	f100 0210 	add.w	r2, r0, #16
 8016a68:	4618      	mov	r0, r3
 8016a6a:	4553      	cmp	r3, sl
 8016a6c:	db37      	blt.n	8016ade <__lshift+0xbe>
 8016a6e:	6920      	ldr	r0, [r4, #16]
 8016a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a74:	f104 0314 	add.w	r3, r4, #20
 8016a78:	f019 091f 	ands.w	r9, r9, #31
 8016a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016a84:	d02f      	beq.n	8016ae6 <__lshift+0xc6>
 8016a86:	f1c9 0e20 	rsb	lr, r9, #32
 8016a8a:	468a      	mov	sl, r1
 8016a8c:	f04f 0c00 	mov.w	ip, #0
 8016a90:	681a      	ldr	r2, [r3, #0]
 8016a92:	fa02 f209 	lsl.w	r2, r2, r9
 8016a96:	ea42 020c 	orr.w	r2, r2, ip
 8016a9a:	f84a 2b04 	str.w	r2, [sl], #4
 8016a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aa2:	4298      	cmp	r0, r3
 8016aa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016aa8:	d8f2      	bhi.n	8016a90 <__lshift+0x70>
 8016aaa:	1b03      	subs	r3, r0, r4
 8016aac:	3b15      	subs	r3, #21
 8016aae:	f023 0303 	bic.w	r3, r3, #3
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	f104 0215 	add.w	r2, r4, #21
 8016ab8:	4290      	cmp	r0, r2
 8016aba:	bf38      	it	cc
 8016abc:	2304      	movcc	r3, #4
 8016abe:	f841 c003 	str.w	ip, [r1, r3]
 8016ac2:	f1bc 0f00 	cmp.w	ip, #0
 8016ac6:	d001      	beq.n	8016acc <__lshift+0xac>
 8016ac8:	f108 0602 	add.w	r6, r8, #2
 8016acc:	3e01      	subs	r6, #1
 8016ace:	4638      	mov	r0, r7
 8016ad0:	612e      	str	r6, [r5, #16]
 8016ad2:	4621      	mov	r1, r4
 8016ad4:	f7ff fdd2 	bl	801667c <_Bfree>
 8016ad8:	4628      	mov	r0, r5
 8016ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	e7c1      	b.n	8016a6a <__lshift+0x4a>
 8016ae6:	3904      	subs	r1, #4
 8016ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8016af0:	4298      	cmp	r0, r3
 8016af2:	d8f9      	bhi.n	8016ae8 <__lshift+0xc8>
 8016af4:	e7ea      	b.n	8016acc <__lshift+0xac>
 8016af6:	bf00      	nop
 8016af8:	0801951f 	.word	0x0801951f
 8016afc:	08019590 	.word	0x08019590

08016b00 <__mcmp>:
 8016b00:	b530      	push	{r4, r5, lr}
 8016b02:	6902      	ldr	r2, [r0, #16]
 8016b04:	690c      	ldr	r4, [r1, #16]
 8016b06:	1b12      	subs	r2, r2, r4
 8016b08:	d10e      	bne.n	8016b28 <__mcmp+0x28>
 8016b0a:	f100 0314 	add.w	r3, r0, #20
 8016b0e:	3114      	adds	r1, #20
 8016b10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016b14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016b18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016b1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016b20:	42a5      	cmp	r5, r4
 8016b22:	d003      	beq.n	8016b2c <__mcmp+0x2c>
 8016b24:	d305      	bcc.n	8016b32 <__mcmp+0x32>
 8016b26:	2201      	movs	r2, #1
 8016b28:	4610      	mov	r0, r2
 8016b2a:	bd30      	pop	{r4, r5, pc}
 8016b2c:	4283      	cmp	r3, r0
 8016b2e:	d3f3      	bcc.n	8016b18 <__mcmp+0x18>
 8016b30:	e7fa      	b.n	8016b28 <__mcmp+0x28>
 8016b32:	f04f 32ff 	mov.w	r2, #4294967295
 8016b36:	e7f7      	b.n	8016b28 <__mcmp+0x28>

08016b38 <__mdiff>:
 8016b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	4606      	mov	r6, r0
 8016b40:	4611      	mov	r1, r2
 8016b42:	4620      	mov	r0, r4
 8016b44:	4690      	mov	r8, r2
 8016b46:	f7ff ffdb 	bl	8016b00 <__mcmp>
 8016b4a:	1e05      	subs	r5, r0, #0
 8016b4c:	d110      	bne.n	8016b70 <__mdiff+0x38>
 8016b4e:	4629      	mov	r1, r5
 8016b50:	4630      	mov	r0, r6
 8016b52:	f7ff fd53 	bl	80165fc <_Balloc>
 8016b56:	b930      	cbnz	r0, 8016b66 <__mdiff+0x2e>
 8016b58:	4b3a      	ldr	r3, [pc, #232]	; (8016c44 <__mdiff+0x10c>)
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	f240 2132 	movw	r1, #562	; 0x232
 8016b60:	4839      	ldr	r0, [pc, #228]	; (8016c48 <__mdiff+0x110>)
 8016b62:	f000 fc1f 	bl	80173a4 <__assert_func>
 8016b66:	2301      	movs	r3, #1
 8016b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b70:	bfa4      	itt	ge
 8016b72:	4643      	movge	r3, r8
 8016b74:	46a0      	movge	r8, r4
 8016b76:	4630      	mov	r0, r6
 8016b78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016b7c:	bfa6      	itte	ge
 8016b7e:	461c      	movge	r4, r3
 8016b80:	2500      	movge	r5, #0
 8016b82:	2501      	movlt	r5, #1
 8016b84:	f7ff fd3a 	bl	80165fc <_Balloc>
 8016b88:	b920      	cbnz	r0, 8016b94 <__mdiff+0x5c>
 8016b8a:	4b2e      	ldr	r3, [pc, #184]	; (8016c44 <__mdiff+0x10c>)
 8016b8c:	4602      	mov	r2, r0
 8016b8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016b92:	e7e5      	b.n	8016b60 <__mdiff+0x28>
 8016b94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016b98:	6926      	ldr	r6, [r4, #16]
 8016b9a:	60c5      	str	r5, [r0, #12]
 8016b9c:	f104 0914 	add.w	r9, r4, #20
 8016ba0:	f108 0514 	add.w	r5, r8, #20
 8016ba4:	f100 0e14 	add.w	lr, r0, #20
 8016ba8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016bac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016bb0:	f108 0210 	add.w	r2, r8, #16
 8016bb4:	46f2      	mov	sl, lr
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8016bbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016bc0:	fa1f f883 	uxth.w	r8, r3
 8016bc4:	fa11 f18b 	uxtah	r1, r1, fp
 8016bc8:	0c1b      	lsrs	r3, r3, #16
 8016bca:	eba1 0808 	sub.w	r8, r1, r8
 8016bce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016bd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016bd6:	fa1f f888 	uxth.w	r8, r8
 8016bda:	1419      	asrs	r1, r3, #16
 8016bdc:	454e      	cmp	r6, r9
 8016bde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016be2:	f84a 3b04 	str.w	r3, [sl], #4
 8016be6:	d8e7      	bhi.n	8016bb8 <__mdiff+0x80>
 8016be8:	1b33      	subs	r3, r6, r4
 8016bea:	3b15      	subs	r3, #21
 8016bec:	f023 0303 	bic.w	r3, r3, #3
 8016bf0:	3304      	adds	r3, #4
 8016bf2:	3415      	adds	r4, #21
 8016bf4:	42a6      	cmp	r6, r4
 8016bf6:	bf38      	it	cc
 8016bf8:	2304      	movcc	r3, #4
 8016bfa:	441d      	add	r5, r3
 8016bfc:	4473      	add	r3, lr
 8016bfe:	469e      	mov	lr, r3
 8016c00:	462e      	mov	r6, r5
 8016c02:	4566      	cmp	r6, ip
 8016c04:	d30e      	bcc.n	8016c24 <__mdiff+0xec>
 8016c06:	f10c 0203 	add.w	r2, ip, #3
 8016c0a:	1b52      	subs	r2, r2, r5
 8016c0c:	f022 0203 	bic.w	r2, r2, #3
 8016c10:	3d03      	subs	r5, #3
 8016c12:	45ac      	cmp	ip, r5
 8016c14:	bf38      	it	cc
 8016c16:	2200      	movcc	r2, #0
 8016c18:	441a      	add	r2, r3
 8016c1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016c1e:	b17b      	cbz	r3, 8016c40 <__mdiff+0x108>
 8016c20:	6107      	str	r7, [r0, #16]
 8016c22:	e7a3      	b.n	8016b6c <__mdiff+0x34>
 8016c24:	f856 8b04 	ldr.w	r8, [r6], #4
 8016c28:	fa11 f288 	uxtah	r2, r1, r8
 8016c2c:	1414      	asrs	r4, r2, #16
 8016c2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016c32:	b292      	uxth	r2, r2
 8016c34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016c38:	f84e 2b04 	str.w	r2, [lr], #4
 8016c3c:	1421      	asrs	r1, r4, #16
 8016c3e:	e7e0      	b.n	8016c02 <__mdiff+0xca>
 8016c40:	3f01      	subs	r7, #1
 8016c42:	e7ea      	b.n	8016c1a <__mdiff+0xe2>
 8016c44:	0801951f 	.word	0x0801951f
 8016c48:	08019590 	.word	0x08019590

08016c4c <__d2b>:
 8016c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c50:	4689      	mov	r9, r1
 8016c52:	2101      	movs	r1, #1
 8016c54:	ec57 6b10 	vmov	r6, r7, d0
 8016c58:	4690      	mov	r8, r2
 8016c5a:	f7ff fccf 	bl	80165fc <_Balloc>
 8016c5e:	4604      	mov	r4, r0
 8016c60:	b930      	cbnz	r0, 8016c70 <__d2b+0x24>
 8016c62:	4602      	mov	r2, r0
 8016c64:	4b25      	ldr	r3, [pc, #148]	; (8016cfc <__d2b+0xb0>)
 8016c66:	4826      	ldr	r0, [pc, #152]	; (8016d00 <__d2b+0xb4>)
 8016c68:	f240 310a 	movw	r1, #778	; 0x30a
 8016c6c:	f000 fb9a 	bl	80173a4 <__assert_func>
 8016c70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016c74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016c78:	bb35      	cbnz	r5, 8016cc8 <__d2b+0x7c>
 8016c7a:	2e00      	cmp	r6, #0
 8016c7c:	9301      	str	r3, [sp, #4]
 8016c7e:	d028      	beq.n	8016cd2 <__d2b+0x86>
 8016c80:	4668      	mov	r0, sp
 8016c82:	9600      	str	r6, [sp, #0]
 8016c84:	f7ff fd82 	bl	801678c <__lo0bits>
 8016c88:	9900      	ldr	r1, [sp, #0]
 8016c8a:	b300      	cbz	r0, 8016cce <__d2b+0x82>
 8016c8c:	9a01      	ldr	r2, [sp, #4]
 8016c8e:	f1c0 0320 	rsb	r3, r0, #32
 8016c92:	fa02 f303 	lsl.w	r3, r2, r3
 8016c96:	430b      	orrs	r3, r1
 8016c98:	40c2      	lsrs	r2, r0
 8016c9a:	6163      	str	r3, [r4, #20]
 8016c9c:	9201      	str	r2, [sp, #4]
 8016c9e:	9b01      	ldr	r3, [sp, #4]
 8016ca0:	61a3      	str	r3, [r4, #24]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	bf14      	ite	ne
 8016ca6:	2202      	movne	r2, #2
 8016ca8:	2201      	moveq	r2, #1
 8016caa:	6122      	str	r2, [r4, #16]
 8016cac:	b1d5      	cbz	r5, 8016ce4 <__d2b+0x98>
 8016cae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016cb2:	4405      	add	r5, r0
 8016cb4:	f8c9 5000 	str.w	r5, [r9]
 8016cb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016cbc:	f8c8 0000 	str.w	r0, [r8]
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	b003      	add	sp, #12
 8016cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ccc:	e7d5      	b.n	8016c7a <__d2b+0x2e>
 8016cce:	6161      	str	r1, [r4, #20]
 8016cd0:	e7e5      	b.n	8016c9e <__d2b+0x52>
 8016cd2:	a801      	add	r0, sp, #4
 8016cd4:	f7ff fd5a 	bl	801678c <__lo0bits>
 8016cd8:	9b01      	ldr	r3, [sp, #4]
 8016cda:	6163      	str	r3, [r4, #20]
 8016cdc:	2201      	movs	r2, #1
 8016cde:	6122      	str	r2, [r4, #16]
 8016ce0:	3020      	adds	r0, #32
 8016ce2:	e7e3      	b.n	8016cac <__d2b+0x60>
 8016ce4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ce8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016cec:	f8c9 0000 	str.w	r0, [r9]
 8016cf0:	6918      	ldr	r0, [r3, #16]
 8016cf2:	f7ff fd2b 	bl	801674c <__hi0bits>
 8016cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016cfa:	e7df      	b.n	8016cbc <__d2b+0x70>
 8016cfc:	0801951f 	.word	0x0801951f
 8016d00:	08019590 	.word	0x08019590

08016d04 <_calloc_r>:
 8016d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d06:	fba1 2402 	umull	r2, r4, r1, r2
 8016d0a:	b94c      	cbnz	r4, 8016d20 <_calloc_r+0x1c>
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	9201      	str	r2, [sp, #4]
 8016d10:	f7fd fe14 	bl	801493c <_malloc_r>
 8016d14:	9a01      	ldr	r2, [sp, #4]
 8016d16:	4605      	mov	r5, r0
 8016d18:	b930      	cbnz	r0, 8016d28 <_calloc_r+0x24>
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	b003      	add	sp, #12
 8016d1e:	bd30      	pop	{r4, r5, pc}
 8016d20:	220c      	movs	r2, #12
 8016d22:	6002      	str	r2, [r0, #0]
 8016d24:	2500      	movs	r5, #0
 8016d26:	e7f8      	b.n	8016d1a <_calloc_r+0x16>
 8016d28:	4621      	mov	r1, r4
 8016d2a:	f7fd fd93 	bl	8014854 <memset>
 8016d2e:	e7f4      	b.n	8016d1a <_calloc_r+0x16>

08016d30 <_realloc_r>:
 8016d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d34:	4680      	mov	r8, r0
 8016d36:	4614      	mov	r4, r2
 8016d38:	460e      	mov	r6, r1
 8016d3a:	b921      	cbnz	r1, 8016d46 <_realloc_r+0x16>
 8016d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d40:	4611      	mov	r1, r2
 8016d42:	f7fd bdfb 	b.w	801493c <_malloc_r>
 8016d46:	b92a      	cbnz	r2, 8016d54 <_realloc_r+0x24>
 8016d48:	f7fd fd8c 	bl	8014864 <_free_r>
 8016d4c:	4625      	mov	r5, r4
 8016d4e:	4628      	mov	r0, r5
 8016d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d54:	f000 fbac 	bl	80174b0 <_malloc_usable_size_r>
 8016d58:	4284      	cmp	r4, r0
 8016d5a:	4607      	mov	r7, r0
 8016d5c:	d802      	bhi.n	8016d64 <_realloc_r+0x34>
 8016d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016d62:	d812      	bhi.n	8016d8a <_realloc_r+0x5a>
 8016d64:	4621      	mov	r1, r4
 8016d66:	4640      	mov	r0, r8
 8016d68:	f7fd fde8 	bl	801493c <_malloc_r>
 8016d6c:	4605      	mov	r5, r0
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d0ed      	beq.n	8016d4e <_realloc_r+0x1e>
 8016d72:	42bc      	cmp	r4, r7
 8016d74:	4622      	mov	r2, r4
 8016d76:	4631      	mov	r1, r6
 8016d78:	bf28      	it	cs
 8016d7a:	463a      	movcs	r2, r7
 8016d7c:	f7fd fd42 	bl	8014804 <memcpy>
 8016d80:	4631      	mov	r1, r6
 8016d82:	4640      	mov	r0, r8
 8016d84:	f7fd fd6e 	bl	8014864 <_free_r>
 8016d88:	e7e1      	b.n	8016d4e <_realloc_r+0x1e>
 8016d8a:	4635      	mov	r5, r6
 8016d8c:	e7df      	b.n	8016d4e <_realloc_r+0x1e>

08016d8e <__ssputs_r>:
 8016d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d92:	688e      	ldr	r6, [r1, #8]
 8016d94:	429e      	cmp	r6, r3
 8016d96:	4682      	mov	sl, r0
 8016d98:	460c      	mov	r4, r1
 8016d9a:	4690      	mov	r8, r2
 8016d9c:	461f      	mov	r7, r3
 8016d9e:	d838      	bhi.n	8016e12 <__ssputs_r+0x84>
 8016da0:	898a      	ldrh	r2, [r1, #12]
 8016da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016da6:	d032      	beq.n	8016e0e <__ssputs_r+0x80>
 8016da8:	6825      	ldr	r5, [r4, #0]
 8016daa:	6909      	ldr	r1, [r1, #16]
 8016dac:	eba5 0901 	sub.w	r9, r5, r1
 8016db0:	6965      	ldr	r5, [r4, #20]
 8016db2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016dba:	3301      	adds	r3, #1
 8016dbc:	444b      	add	r3, r9
 8016dbe:	106d      	asrs	r5, r5, #1
 8016dc0:	429d      	cmp	r5, r3
 8016dc2:	bf38      	it	cc
 8016dc4:	461d      	movcc	r5, r3
 8016dc6:	0553      	lsls	r3, r2, #21
 8016dc8:	d531      	bpl.n	8016e2e <__ssputs_r+0xa0>
 8016dca:	4629      	mov	r1, r5
 8016dcc:	f7fd fdb6 	bl	801493c <_malloc_r>
 8016dd0:	4606      	mov	r6, r0
 8016dd2:	b950      	cbnz	r0, 8016dea <__ssputs_r+0x5c>
 8016dd4:	230c      	movs	r3, #12
 8016dd6:	f8ca 3000 	str.w	r3, [sl]
 8016dda:	89a3      	ldrh	r3, [r4, #12]
 8016ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016de0:	81a3      	strh	r3, [r4, #12]
 8016de2:	f04f 30ff 	mov.w	r0, #4294967295
 8016de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dea:	6921      	ldr	r1, [r4, #16]
 8016dec:	464a      	mov	r2, r9
 8016dee:	f7fd fd09 	bl	8014804 <memcpy>
 8016df2:	89a3      	ldrh	r3, [r4, #12]
 8016df4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dfc:	81a3      	strh	r3, [r4, #12]
 8016dfe:	6126      	str	r6, [r4, #16]
 8016e00:	6165      	str	r5, [r4, #20]
 8016e02:	444e      	add	r6, r9
 8016e04:	eba5 0509 	sub.w	r5, r5, r9
 8016e08:	6026      	str	r6, [r4, #0]
 8016e0a:	60a5      	str	r5, [r4, #8]
 8016e0c:	463e      	mov	r6, r7
 8016e0e:	42be      	cmp	r6, r7
 8016e10:	d900      	bls.n	8016e14 <__ssputs_r+0x86>
 8016e12:	463e      	mov	r6, r7
 8016e14:	6820      	ldr	r0, [r4, #0]
 8016e16:	4632      	mov	r2, r6
 8016e18:	4641      	mov	r1, r8
 8016e1a:	f7fd fd01 	bl	8014820 <memmove>
 8016e1e:	68a3      	ldr	r3, [r4, #8]
 8016e20:	1b9b      	subs	r3, r3, r6
 8016e22:	60a3      	str	r3, [r4, #8]
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	4433      	add	r3, r6
 8016e28:	6023      	str	r3, [r4, #0]
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	e7db      	b.n	8016de6 <__ssputs_r+0x58>
 8016e2e:	462a      	mov	r2, r5
 8016e30:	f7ff ff7e 	bl	8016d30 <_realloc_r>
 8016e34:	4606      	mov	r6, r0
 8016e36:	2800      	cmp	r0, #0
 8016e38:	d1e1      	bne.n	8016dfe <__ssputs_r+0x70>
 8016e3a:	6921      	ldr	r1, [r4, #16]
 8016e3c:	4650      	mov	r0, sl
 8016e3e:	f7fd fd11 	bl	8014864 <_free_r>
 8016e42:	e7c7      	b.n	8016dd4 <__ssputs_r+0x46>

08016e44 <_svfiprintf_r>:
 8016e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e48:	4698      	mov	r8, r3
 8016e4a:	898b      	ldrh	r3, [r1, #12]
 8016e4c:	061b      	lsls	r3, r3, #24
 8016e4e:	b09d      	sub	sp, #116	; 0x74
 8016e50:	4607      	mov	r7, r0
 8016e52:	460d      	mov	r5, r1
 8016e54:	4614      	mov	r4, r2
 8016e56:	d50e      	bpl.n	8016e76 <_svfiprintf_r+0x32>
 8016e58:	690b      	ldr	r3, [r1, #16]
 8016e5a:	b963      	cbnz	r3, 8016e76 <_svfiprintf_r+0x32>
 8016e5c:	2140      	movs	r1, #64	; 0x40
 8016e5e:	f7fd fd6d 	bl	801493c <_malloc_r>
 8016e62:	6028      	str	r0, [r5, #0]
 8016e64:	6128      	str	r0, [r5, #16]
 8016e66:	b920      	cbnz	r0, 8016e72 <_svfiprintf_r+0x2e>
 8016e68:	230c      	movs	r3, #12
 8016e6a:	603b      	str	r3, [r7, #0]
 8016e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e70:	e0d1      	b.n	8017016 <_svfiprintf_r+0x1d2>
 8016e72:	2340      	movs	r3, #64	; 0x40
 8016e74:	616b      	str	r3, [r5, #20]
 8016e76:	2300      	movs	r3, #0
 8016e78:	9309      	str	r3, [sp, #36]	; 0x24
 8016e7a:	2320      	movs	r3, #32
 8016e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e84:	2330      	movs	r3, #48	; 0x30
 8016e86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017030 <_svfiprintf_r+0x1ec>
 8016e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e8e:	f04f 0901 	mov.w	r9, #1
 8016e92:	4623      	mov	r3, r4
 8016e94:	469a      	mov	sl, r3
 8016e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e9a:	b10a      	cbz	r2, 8016ea0 <_svfiprintf_r+0x5c>
 8016e9c:	2a25      	cmp	r2, #37	; 0x25
 8016e9e:	d1f9      	bne.n	8016e94 <_svfiprintf_r+0x50>
 8016ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8016ea4:	d00b      	beq.n	8016ebe <_svfiprintf_r+0x7a>
 8016ea6:	465b      	mov	r3, fp
 8016ea8:	4622      	mov	r2, r4
 8016eaa:	4629      	mov	r1, r5
 8016eac:	4638      	mov	r0, r7
 8016eae:	f7ff ff6e 	bl	8016d8e <__ssputs_r>
 8016eb2:	3001      	adds	r0, #1
 8016eb4:	f000 80aa 	beq.w	801700c <_svfiprintf_r+0x1c8>
 8016eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eba:	445a      	add	r2, fp
 8016ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8016ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f000 80a2 	beq.w	801700c <_svfiprintf_r+0x1c8>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	f04f 32ff 	mov.w	r2, #4294967295
 8016ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ed2:	f10a 0a01 	add.w	sl, sl, #1
 8016ed6:	9304      	str	r3, [sp, #16]
 8016ed8:	9307      	str	r3, [sp, #28]
 8016eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ede:	931a      	str	r3, [sp, #104]	; 0x68
 8016ee0:	4654      	mov	r4, sl
 8016ee2:	2205      	movs	r2, #5
 8016ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ee8:	4851      	ldr	r0, [pc, #324]	; (8017030 <_svfiprintf_r+0x1ec>)
 8016eea:	f7e9 f9b1 	bl	8000250 <memchr>
 8016eee:	9a04      	ldr	r2, [sp, #16]
 8016ef0:	b9d8      	cbnz	r0, 8016f2a <_svfiprintf_r+0xe6>
 8016ef2:	06d0      	lsls	r0, r2, #27
 8016ef4:	bf44      	itt	mi
 8016ef6:	2320      	movmi	r3, #32
 8016ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016efc:	0711      	lsls	r1, r2, #28
 8016efe:	bf44      	itt	mi
 8016f00:	232b      	movmi	r3, #43	; 0x2b
 8016f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f06:	f89a 3000 	ldrb.w	r3, [sl]
 8016f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8016f0c:	d015      	beq.n	8016f3a <_svfiprintf_r+0xf6>
 8016f0e:	9a07      	ldr	r2, [sp, #28]
 8016f10:	4654      	mov	r4, sl
 8016f12:	2000      	movs	r0, #0
 8016f14:	f04f 0c0a 	mov.w	ip, #10
 8016f18:	4621      	mov	r1, r4
 8016f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f1e:	3b30      	subs	r3, #48	; 0x30
 8016f20:	2b09      	cmp	r3, #9
 8016f22:	d94e      	bls.n	8016fc2 <_svfiprintf_r+0x17e>
 8016f24:	b1b0      	cbz	r0, 8016f54 <_svfiprintf_r+0x110>
 8016f26:	9207      	str	r2, [sp, #28]
 8016f28:	e014      	b.n	8016f54 <_svfiprintf_r+0x110>
 8016f2a:	eba0 0308 	sub.w	r3, r0, r8
 8016f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8016f32:	4313      	orrs	r3, r2
 8016f34:	9304      	str	r3, [sp, #16]
 8016f36:	46a2      	mov	sl, r4
 8016f38:	e7d2      	b.n	8016ee0 <_svfiprintf_r+0x9c>
 8016f3a:	9b03      	ldr	r3, [sp, #12]
 8016f3c:	1d19      	adds	r1, r3, #4
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	9103      	str	r1, [sp, #12]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	bfbb      	ittet	lt
 8016f46:	425b      	neglt	r3, r3
 8016f48:	f042 0202 	orrlt.w	r2, r2, #2
 8016f4c:	9307      	strge	r3, [sp, #28]
 8016f4e:	9307      	strlt	r3, [sp, #28]
 8016f50:	bfb8      	it	lt
 8016f52:	9204      	strlt	r2, [sp, #16]
 8016f54:	7823      	ldrb	r3, [r4, #0]
 8016f56:	2b2e      	cmp	r3, #46	; 0x2e
 8016f58:	d10c      	bne.n	8016f74 <_svfiprintf_r+0x130>
 8016f5a:	7863      	ldrb	r3, [r4, #1]
 8016f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f5e:	d135      	bne.n	8016fcc <_svfiprintf_r+0x188>
 8016f60:	9b03      	ldr	r3, [sp, #12]
 8016f62:	1d1a      	adds	r2, r3, #4
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	9203      	str	r2, [sp, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bfb8      	it	lt
 8016f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f70:	3402      	adds	r4, #2
 8016f72:	9305      	str	r3, [sp, #20]
 8016f74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017040 <_svfiprintf_r+0x1fc>
 8016f78:	7821      	ldrb	r1, [r4, #0]
 8016f7a:	2203      	movs	r2, #3
 8016f7c:	4650      	mov	r0, sl
 8016f7e:	f7e9 f967 	bl	8000250 <memchr>
 8016f82:	b140      	cbz	r0, 8016f96 <_svfiprintf_r+0x152>
 8016f84:	2340      	movs	r3, #64	; 0x40
 8016f86:	eba0 000a 	sub.w	r0, r0, sl
 8016f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8016f8e:	9b04      	ldr	r3, [sp, #16]
 8016f90:	4303      	orrs	r3, r0
 8016f92:	3401      	adds	r4, #1
 8016f94:	9304      	str	r3, [sp, #16]
 8016f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f9a:	4826      	ldr	r0, [pc, #152]	; (8017034 <_svfiprintf_r+0x1f0>)
 8016f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fa0:	2206      	movs	r2, #6
 8016fa2:	f7e9 f955 	bl	8000250 <memchr>
 8016fa6:	2800      	cmp	r0, #0
 8016fa8:	d038      	beq.n	801701c <_svfiprintf_r+0x1d8>
 8016faa:	4b23      	ldr	r3, [pc, #140]	; (8017038 <_svfiprintf_r+0x1f4>)
 8016fac:	bb1b      	cbnz	r3, 8016ff6 <_svfiprintf_r+0x1b2>
 8016fae:	9b03      	ldr	r3, [sp, #12]
 8016fb0:	3307      	adds	r3, #7
 8016fb2:	f023 0307 	bic.w	r3, r3, #7
 8016fb6:	3308      	adds	r3, #8
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fbc:	4433      	add	r3, r6
 8016fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016fc0:	e767      	b.n	8016e92 <_svfiprintf_r+0x4e>
 8016fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fc6:	460c      	mov	r4, r1
 8016fc8:	2001      	movs	r0, #1
 8016fca:	e7a5      	b.n	8016f18 <_svfiprintf_r+0xd4>
 8016fcc:	2300      	movs	r3, #0
 8016fce:	3401      	adds	r4, #1
 8016fd0:	9305      	str	r3, [sp, #20]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	f04f 0c0a 	mov.w	ip, #10
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fde:	3a30      	subs	r2, #48	; 0x30
 8016fe0:	2a09      	cmp	r2, #9
 8016fe2:	d903      	bls.n	8016fec <_svfiprintf_r+0x1a8>
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d0c5      	beq.n	8016f74 <_svfiprintf_r+0x130>
 8016fe8:	9105      	str	r1, [sp, #20]
 8016fea:	e7c3      	b.n	8016f74 <_svfiprintf_r+0x130>
 8016fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e7f0      	b.n	8016fd8 <_svfiprintf_r+0x194>
 8016ff6:	ab03      	add	r3, sp, #12
 8016ff8:	9300      	str	r3, [sp, #0]
 8016ffa:	462a      	mov	r2, r5
 8016ffc:	4b0f      	ldr	r3, [pc, #60]	; (801703c <_svfiprintf_r+0x1f8>)
 8016ffe:	a904      	add	r1, sp, #16
 8017000:	4638      	mov	r0, r7
 8017002:	f7fd fda1 	bl	8014b48 <_printf_float>
 8017006:	1c42      	adds	r2, r0, #1
 8017008:	4606      	mov	r6, r0
 801700a:	d1d6      	bne.n	8016fba <_svfiprintf_r+0x176>
 801700c:	89ab      	ldrh	r3, [r5, #12]
 801700e:	065b      	lsls	r3, r3, #25
 8017010:	f53f af2c 	bmi.w	8016e6c <_svfiprintf_r+0x28>
 8017014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017016:	b01d      	add	sp, #116	; 0x74
 8017018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801701c:	ab03      	add	r3, sp, #12
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	462a      	mov	r2, r5
 8017022:	4b06      	ldr	r3, [pc, #24]	; (801703c <_svfiprintf_r+0x1f8>)
 8017024:	a904      	add	r1, sp, #16
 8017026:	4638      	mov	r0, r7
 8017028:	f7fe f81a 	bl	8015060 <_printf_i>
 801702c:	e7eb      	b.n	8017006 <_svfiprintf_r+0x1c2>
 801702e:	bf00      	nop
 8017030:	080196ec 	.word	0x080196ec
 8017034:	080196f6 	.word	0x080196f6
 8017038:	08014b49 	.word	0x08014b49
 801703c:	08016d8f 	.word	0x08016d8f
 8017040:	080196f2 	.word	0x080196f2

08017044 <__sfputc_r>:
 8017044:	6893      	ldr	r3, [r2, #8]
 8017046:	3b01      	subs	r3, #1
 8017048:	2b00      	cmp	r3, #0
 801704a:	b410      	push	{r4}
 801704c:	6093      	str	r3, [r2, #8]
 801704e:	da08      	bge.n	8017062 <__sfputc_r+0x1e>
 8017050:	6994      	ldr	r4, [r2, #24]
 8017052:	42a3      	cmp	r3, r4
 8017054:	db01      	blt.n	801705a <__sfputc_r+0x16>
 8017056:	290a      	cmp	r1, #10
 8017058:	d103      	bne.n	8017062 <__sfputc_r+0x1e>
 801705a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801705e:	f7fe b9e3 	b.w	8015428 <__swbuf_r>
 8017062:	6813      	ldr	r3, [r2, #0]
 8017064:	1c58      	adds	r0, r3, #1
 8017066:	6010      	str	r0, [r2, #0]
 8017068:	7019      	strb	r1, [r3, #0]
 801706a:	4608      	mov	r0, r1
 801706c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017070:	4770      	bx	lr

08017072 <__sfputs_r>:
 8017072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017074:	4606      	mov	r6, r0
 8017076:	460f      	mov	r7, r1
 8017078:	4614      	mov	r4, r2
 801707a:	18d5      	adds	r5, r2, r3
 801707c:	42ac      	cmp	r4, r5
 801707e:	d101      	bne.n	8017084 <__sfputs_r+0x12>
 8017080:	2000      	movs	r0, #0
 8017082:	e007      	b.n	8017094 <__sfputs_r+0x22>
 8017084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017088:	463a      	mov	r2, r7
 801708a:	4630      	mov	r0, r6
 801708c:	f7ff ffda 	bl	8017044 <__sfputc_r>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d1f3      	bne.n	801707c <__sfputs_r+0xa>
 8017094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017098 <_vfiprintf_r>:
 8017098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801709c:	460d      	mov	r5, r1
 801709e:	b09d      	sub	sp, #116	; 0x74
 80170a0:	4614      	mov	r4, r2
 80170a2:	4698      	mov	r8, r3
 80170a4:	4606      	mov	r6, r0
 80170a6:	b118      	cbz	r0, 80170b0 <_vfiprintf_r+0x18>
 80170a8:	6983      	ldr	r3, [r0, #24]
 80170aa:	b90b      	cbnz	r3, 80170b0 <_vfiprintf_r+0x18>
 80170ac:	f7ff f990 	bl	80163d0 <__sinit>
 80170b0:	4b89      	ldr	r3, [pc, #548]	; (80172d8 <_vfiprintf_r+0x240>)
 80170b2:	429d      	cmp	r5, r3
 80170b4:	d11b      	bne.n	80170ee <_vfiprintf_r+0x56>
 80170b6:	6875      	ldr	r5, [r6, #4]
 80170b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170ba:	07d9      	lsls	r1, r3, #31
 80170bc:	d405      	bmi.n	80170ca <_vfiprintf_r+0x32>
 80170be:	89ab      	ldrh	r3, [r5, #12]
 80170c0:	059a      	lsls	r2, r3, #22
 80170c2:	d402      	bmi.n	80170ca <_vfiprintf_r+0x32>
 80170c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170c6:	f7ff fa26 	bl	8016516 <__retarget_lock_acquire_recursive>
 80170ca:	89ab      	ldrh	r3, [r5, #12]
 80170cc:	071b      	lsls	r3, r3, #28
 80170ce:	d501      	bpl.n	80170d4 <_vfiprintf_r+0x3c>
 80170d0:	692b      	ldr	r3, [r5, #16]
 80170d2:	b9eb      	cbnz	r3, 8017110 <_vfiprintf_r+0x78>
 80170d4:	4629      	mov	r1, r5
 80170d6:	4630      	mov	r0, r6
 80170d8:	f7fe f9f8 	bl	80154cc <__swsetup_r>
 80170dc:	b1c0      	cbz	r0, 8017110 <_vfiprintf_r+0x78>
 80170de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170e0:	07dc      	lsls	r4, r3, #31
 80170e2:	d50e      	bpl.n	8017102 <_vfiprintf_r+0x6a>
 80170e4:	f04f 30ff 	mov.w	r0, #4294967295
 80170e8:	b01d      	add	sp, #116	; 0x74
 80170ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ee:	4b7b      	ldr	r3, [pc, #492]	; (80172dc <_vfiprintf_r+0x244>)
 80170f0:	429d      	cmp	r5, r3
 80170f2:	d101      	bne.n	80170f8 <_vfiprintf_r+0x60>
 80170f4:	68b5      	ldr	r5, [r6, #8]
 80170f6:	e7df      	b.n	80170b8 <_vfiprintf_r+0x20>
 80170f8:	4b79      	ldr	r3, [pc, #484]	; (80172e0 <_vfiprintf_r+0x248>)
 80170fa:	429d      	cmp	r5, r3
 80170fc:	bf08      	it	eq
 80170fe:	68f5      	ldreq	r5, [r6, #12]
 8017100:	e7da      	b.n	80170b8 <_vfiprintf_r+0x20>
 8017102:	89ab      	ldrh	r3, [r5, #12]
 8017104:	0598      	lsls	r0, r3, #22
 8017106:	d4ed      	bmi.n	80170e4 <_vfiprintf_r+0x4c>
 8017108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801710a:	f7ff fa05 	bl	8016518 <__retarget_lock_release_recursive>
 801710e:	e7e9      	b.n	80170e4 <_vfiprintf_r+0x4c>
 8017110:	2300      	movs	r3, #0
 8017112:	9309      	str	r3, [sp, #36]	; 0x24
 8017114:	2320      	movs	r3, #32
 8017116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801711a:	f8cd 800c 	str.w	r8, [sp, #12]
 801711e:	2330      	movs	r3, #48	; 0x30
 8017120:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80172e4 <_vfiprintf_r+0x24c>
 8017124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017128:	f04f 0901 	mov.w	r9, #1
 801712c:	4623      	mov	r3, r4
 801712e:	469a      	mov	sl, r3
 8017130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017134:	b10a      	cbz	r2, 801713a <_vfiprintf_r+0xa2>
 8017136:	2a25      	cmp	r2, #37	; 0x25
 8017138:	d1f9      	bne.n	801712e <_vfiprintf_r+0x96>
 801713a:	ebba 0b04 	subs.w	fp, sl, r4
 801713e:	d00b      	beq.n	8017158 <_vfiprintf_r+0xc0>
 8017140:	465b      	mov	r3, fp
 8017142:	4622      	mov	r2, r4
 8017144:	4629      	mov	r1, r5
 8017146:	4630      	mov	r0, r6
 8017148:	f7ff ff93 	bl	8017072 <__sfputs_r>
 801714c:	3001      	adds	r0, #1
 801714e:	f000 80aa 	beq.w	80172a6 <_vfiprintf_r+0x20e>
 8017152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017154:	445a      	add	r2, fp
 8017156:	9209      	str	r2, [sp, #36]	; 0x24
 8017158:	f89a 3000 	ldrb.w	r3, [sl]
 801715c:	2b00      	cmp	r3, #0
 801715e:	f000 80a2 	beq.w	80172a6 <_vfiprintf_r+0x20e>
 8017162:	2300      	movs	r3, #0
 8017164:	f04f 32ff 	mov.w	r2, #4294967295
 8017168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801716c:	f10a 0a01 	add.w	sl, sl, #1
 8017170:	9304      	str	r3, [sp, #16]
 8017172:	9307      	str	r3, [sp, #28]
 8017174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017178:	931a      	str	r3, [sp, #104]	; 0x68
 801717a:	4654      	mov	r4, sl
 801717c:	2205      	movs	r2, #5
 801717e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017182:	4858      	ldr	r0, [pc, #352]	; (80172e4 <_vfiprintf_r+0x24c>)
 8017184:	f7e9 f864 	bl	8000250 <memchr>
 8017188:	9a04      	ldr	r2, [sp, #16]
 801718a:	b9d8      	cbnz	r0, 80171c4 <_vfiprintf_r+0x12c>
 801718c:	06d1      	lsls	r1, r2, #27
 801718e:	bf44      	itt	mi
 8017190:	2320      	movmi	r3, #32
 8017192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017196:	0713      	lsls	r3, r2, #28
 8017198:	bf44      	itt	mi
 801719a:	232b      	movmi	r3, #43	; 0x2b
 801719c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80171a0:	f89a 3000 	ldrb.w	r3, [sl]
 80171a4:	2b2a      	cmp	r3, #42	; 0x2a
 80171a6:	d015      	beq.n	80171d4 <_vfiprintf_r+0x13c>
 80171a8:	9a07      	ldr	r2, [sp, #28]
 80171aa:	4654      	mov	r4, sl
 80171ac:	2000      	movs	r0, #0
 80171ae:	f04f 0c0a 	mov.w	ip, #10
 80171b2:	4621      	mov	r1, r4
 80171b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171b8:	3b30      	subs	r3, #48	; 0x30
 80171ba:	2b09      	cmp	r3, #9
 80171bc:	d94e      	bls.n	801725c <_vfiprintf_r+0x1c4>
 80171be:	b1b0      	cbz	r0, 80171ee <_vfiprintf_r+0x156>
 80171c0:	9207      	str	r2, [sp, #28]
 80171c2:	e014      	b.n	80171ee <_vfiprintf_r+0x156>
 80171c4:	eba0 0308 	sub.w	r3, r0, r8
 80171c8:	fa09 f303 	lsl.w	r3, r9, r3
 80171cc:	4313      	orrs	r3, r2
 80171ce:	9304      	str	r3, [sp, #16]
 80171d0:	46a2      	mov	sl, r4
 80171d2:	e7d2      	b.n	801717a <_vfiprintf_r+0xe2>
 80171d4:	9b03      	ldr	r3, [sp, #12]
 80171d6:	1d19      	adds	r1, r3, #4
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	9103      	str	r1, [sp, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	bfbb      	ittet	lt
 80171e0:	425b      	neglt	r3, r3
 80171e2:	f042 0202 	orrlt.w	r2, r2, #2
 80171e6:	9307      	strge	r3, [sp, #28]
 80171e8:	9307      	strlt	r3, [sp, #28]
 80171ea:	bfb8      	it	lt
 80171ec:	9204      	strlt	r2, [sp, #16]
 80171ee:	7823      	ldrb	r3, [r4, #0]
 80171f0:	2b2e      	cmp	r3, #46	; 0x2e
 80171f2:	d10c      	bne.n	801720e <_vfiprintf_r+0x176>
 80171f4:	7863      	ldrb	r3, [r4, #1]
 80171f6:	2b2a      	cmp	r3, #42	; 0x2a
 80171f8:	d135      	bne.n	8017266 <_vfiprintf_r+0x1ce>
 80171fa:	9b03      	ldr	r3, [sp, #12]
 80171fc:	1d1a      	adds	r2, r3, #4
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	9203      	str	r2, [sp, #12]
 8017202:	2b00      	cmp	r3, #0
 8017204:	bfb8      	it	lt
 8017206:	f04f 33ff 	movlt.w	r3, #4294967295
 801720a:	3402      	adds	r4, #2
 801720c:	9305      	str	r3, [sp, #20]
 801720e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80172f4 <_vfiprintf_r+0x25c>
 8017212:	7821      	ldrb	r1, [r4, #0]
 8017214:	2203      	movs	r2, #3
 8017216:	4650      	mov	r0, sl
 8017218:	f7e9 f81a 	bl	8000250 <memchr>
 801721c:	b140      	cbz	r0, 8017230 <_vfiprintf_r+0x198>
 801721e:	2340      	movs	r3, #64	; 0x40
 8017220:	eba0 000a 	sub.w	r0, r0, sl
 8017224:	fa03 f000 	lsl.w	r0, r3, r0
 8017228:	9b04      	ldr	r3, [sp, #16]
 801722a:	4303      	orrs	r3, r0
 801722c:	3401      	adds	r4, #1
 801722e:	9304      	str	r3, [sp, #16]
 8017230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017234:	482c      	ldr	r0, [pc, #176]	; (80172e8 <_vfiprintf_r+0x250>)
 8017236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801723a:	2206      	movs	r2, #6
 801723c:	f7e9 f808 	bl	8000250 <memchr>
 8017240:	2800      	cmp	r0, #0
 8017242:	d03f      	beq.n	80172c4 <_vfiprintf_r+0x22c>
 8017244:	4b29      	ldr	r3, [pc, #164]	; (80172ec <_vfiprintf_r+0x254>)
 8017246:	bb1b      	cbnz	r3, 8017290 <_vfiprintf_r+0x1f8>
 8017248:	9b03      	ldr	r3, [sp, #12]
 801724a:	3307      	adds	r3, #7
 801724c:	f023 0307 	bic.w	r3, r3, #7
 8017250:	3308      	adds	r3, #8
 8017252:	9303      	str	r3, [sp, #12]
 8017254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017256:	443b      	add	r3, r7
 8017258:	9309      	str	r3, [sp, #36]	; 0x24
 801725a:	e767      	b.n	801712c <_vfiprintf_r+0x94>
 801725c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017260:	460c      	mov	r4, r1
 8017262:	2001      	movs	r0, #1
 8017264:	e7a5      	b.n	80171b2 <_vfiprintf_r+0x11a>
 8017266:	2300      	movs	r3, #0
 8017268:	3401      	adds	r4, #1
 801726a:	9305      	str	r3, [sp, #20]
 801726c:	4619      	mov	r1, r3
 801726e:	f04f 0c0a 	mov.w	ip, #10
 8017272:	4620      	mov	r0, r4
 8017274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017278:	3a30      	subs	r2, #48	; 0x30
 801727a:	2a09      	cmp	r2, #9
 801727c:	d903      	bls.n	8017286 <_vfiprintf_r+0x1ee>
 801727e:	2b00      	cmp	r3, #0
 8017280:	d0c5      	beq.n	801720e <_vfiprintf_r+0x176>
 8017282:	9105      	str	r1, [sp, #20]
 8017284:	e7c3      	b.n	801720e <_vfiprintf_r+0x176>
 8017286:	fb0c 2101 	mla	r1, ip, r1, r2
 801728a:	4604      	mov	r4, r0
 801728c:	2301      	movs	r3, #1
 801728e:	e7f0      	b.n	8017272 <_vfiprintf_r+0x1da>
 8017290:	ab03      	add	r3, sp, #12
 8017292:	9300      	str	r3, [sp, #0]
 8017294:	462a      	mov	r2, r5
 8017296:	4b16      	ldr	r3, [pc, #88]	; (80172f0 <_vfiprintf_r+0x258>)
 8017298:	a904      	add	r1, sp, #16
 801729a:	4630      	mov	r0, r6
 801729c:	f7fd fc54 	bl	8014b48 <_printf_float>
 80172a0:	4607      	mov	r7, r0
 80172a2:	1c78      	adds	r0, r7, #1
 80172a4:	d1d6      	bne.n	8017254 <_vfiprintf_r+0x1bc>
 80172a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172a8:	07d9      	lsls	r1, r3, #31
 80172aa:	d405      	bmi.n	80172b8 <_vfiprintf_r+0x220>
 80172ac:	89ab      	ldrh	r3, [r5, #12]
 80172ae:	059a      	lsls	r2, r3, #22
 80172b0:	d402      	bmi.n	80172b8 <_vfiprintf_r+0x220>
 80172b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80172b4:	f7ff f930 	bl	8016518 <__retarget_lock_release_recursive>
 80172b8:	89ab      	ldrh	r3, [r5, #12]
 80172ba:	065b      	lsls	r3, r3, #25
 80172bc:	f53f af12 	bmi.w	80170e4 <_vfiprintf_r+0x4c>
 80172c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172c2:	e711      	b.n	80170e8 <_vfiprintf_r+0x50>
 80172c4:	ab03      	add	r3, sp, #12
 80172c6:	9300      	str	r3, [sp, #0]
 80172c8:	462a      	mov	r2, r5
 80172ca:	4b09      	ldr	r3, [pc, #36]	; (80172f0 <_vfiprintf_r+0x258>)
 80172cc:	a904      	add	r1, sp, #16
 80172ce:	4630      	mov	r0, r6
 80172d0:	f7fd fec6 	bl	8015060 <_printf_i>
 80172d4:	e7e4      	b.n	80172a0 <_vfiprintf_r+0x208>
 80172d6:	bf00      	nop
 80172d8:	08019550 	.word	0x08019550
 80172dc:	08019570 	.word	0x08019570
 80172e0:	08019530 	.word	0x08019530
 80172e4:	080196ec 	.word	0x080196ec
 80172e8:	080196f6 	.word	0x080196f6
 80172ec:	08014b49 	.word	0x08014b49
 80172f0:	08017073 	.word	0x08017073
 80172f4:	080196f2 	.word	0x080196f2

080172f8 <__sread>:
 80172f8:	b510      	push	{r4, lr}
 80172fa:	460c      	mov	r4, r1
 80172fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017300:	f000 f8de 	bl	80174c0 <_read_r>
 8017304:	2800      	cmp	r0, #0
 8017306:	bfab      	itete	ge
 8017308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801730a:	89a3      	ldrhlt	r3, [r4, #12]
 801730c:	181b      	addge	r3, r3, r0
 801730e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017312:	bfac      	ite	ge
 8017314:	6563      	strge	r3, [r4, #84]	; 0x54
 8017316:	81a3      	strhlt	r3, [r4, #12]
 8017318:	bd10      	pop	{r4, pc}

0801731a <__swrite>:
 801731a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801731e:	461f      	mov	r7, r3
 8017320:	898b      	ldrh	r3, [r1, #12]
 8017322:	05db      	lsls	r3, r3, #23
 8017324:	4605      	mov	r5, r0
 8017326:	460c      	mov	r4, r1
 8017328:	4616      	mov	r6, r2
 801732a:	d505      	bpl.n	8017338 <__swrite+0x1e>
 801732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017330:	2302      	movs	r3, #2
 8017332:	2200      	movs	r2, #0
 8017334:	f000 f898 	bl	8017468 <_lseek_r>
 8017338:	89a3      	ldrh	r3, [r4, #12]
 801733a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801733e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017342:	81a3      	strh	r3, [r4, #12]
 8017344:	4632      	mov	r2, r6
 8017346:	463b      	mov	r3, r7
 8017348:	4628      	mov	r0, r5
 801734a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801734e:	f000 b817 	b.w	8017380 <_write_r>

08017352 <__sseek>:
 8017352:	b510      	push	{r4, lr}
 8017354:	460c      	mov	r4, r1
 8017356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801735a:	f000 f885 	bl	8017468 <_lseek_r>
 801735e:	1c43      	adds	r3, r0, #1
 8017360:	89a3      	ldrh	r3, [r4, #12]
 8017362:	bf15      	itete	ne
 8017364:	6560      	strne	r0, [r4, #84]	; 0x54
 8017366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801736a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801736e:	81a3      	strheq	r3, [r4, #12]
 8017370:	bf18      	it	ne
 8017372:	81a3      	strhne	r3, [r4, #12]
 8017374:	bd10      	pop	{r4, pc}

08017376 <__sclose>:
 8017376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801737a:	f000 b831 	b.w	80173e0 <_close_r>
	...

08017380 <_write_r>:
 8017380:	b538      	push	{r3, r4, r5, lr}
 8017382:	4d07      	ldr	r5, [pc, #28]	; (80173a0 <_write_r+0x20>)
 8017384:	4604      	mov	r4, r0
 8017386:	4608      	mov	r0, r1
 8017388:	4611      	mov	r1, r2
 801738a:	2200      	movs	r2, #0
 801738c:	602a      	str	r2, [r5, #0]
 801738e:	461a      	mov	r2, r3
 8017390:	f000 fb6e 	bl	8017a70 <_write>
 8017394:	1c43      	adds	r3, r0, #1
 8017396:	d102      	bne.n	801739e <_write_r+0x1e>
 8017398:	682b      	ldr	r3, [r5, #0]
 801739a:	b103      	cbz	r3, 801739e <_write_r+0x1e>
 801739c:	6023      	str	r3, [r4, #0]
 801739e:	bd38      	pop	{r3, r4, r5, pc}
 80173a0:	20001b4c 	.word	0x20001b4c

080173a4 <__assert_func>:
 80173a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173a6:	4614      	mov	r4, r2
 80173a8:	461a      	mov	r2, r3
 80173aa:	4b09      	ldr	r3, [pc, #36]	; (80173d0 <__assert_func+0x2c>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	4605      	mov	r5, r0
 80173b0:	68d8      	ldr	r0, [r3, #12]
 80173b2:	b14c      	cbz	r4, 80173c8 <__assert_func+0x24>
 80173b4:	4b07      	ldr	r3, [pc, #28]	; (80173d4 <__assert_func+0x30>)
 80173b6:	9100      	str	r1, [sp, #0]
 80173b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173bc:	4906      	ldr	r1, [pc, #24]	; (80173d8 <__assert_func+0x34>)
 80173be:	462b      	mov	r3, r5
 80173c0:	f000 f81e 	bl	8017400 <fiprintf>
 80173c4:	f000 f89b 	bl	80174fe <abort>
 80173c8:	4b04      	ldr	r3, [pc, #16]	; (80173dc <__assert_func+0x38>)
 80173ca:	461c      	mov	r4, r3
 80173cc:	e7f3      	b.n	80173b6 <__assert_func+0x12>
 80173ce:	bf00      	nop
 80173d0:	20001440 	.word	0x20001440
 80173d4:	080196fd 	.word	0x080196fd
 80173d8:	0801970a 	.word	0x0801970a
 80173dc:	08019738 	.word	0x08019738

080173e0 <_close_r>:
 80173e0:	b538      	push	{r3, r4, r5, lr}
 80173e2:	4d06      	ldr	r5, [pc, #24]	; (80173fc <_close_r+0x1c>)
 80173e4:	2300      	movs	r3, #0
 80173e6:	4604      	mov	r4, r0
 80173e8:	4608      	mov	r0, r1
 80173ea:	602b      	str	r3, [r5, #0]
 80173ec:	f000 fb08 	bl	8017a00 <_close>
 80173f0:	1c43      	adds	r3, r0, #1
 80173f2:	d102      	bne.n	80173fa <_close_r+0x1a>
 80173f4:	682b      	ldr	r3, [r5, #0]
 80173f6:	b103      	cbz	r3, 80173fa <_close_r+0x1a>
 80173f8:	6023      	str	r3, [r4, #0]
 80173fa:	bd38      	pop	{r3, r4, r5, pc}
 80173fc:	20001b4c 	.word	0x20001b4c

08017400 <fiprintf>:
 8017400:	b40e      	push	{r1, r2, r3}
 8017402:	b503      	push	{r0, r1, lr}
 8017404:	4601      	mov	r1, r0
 8017406:	ab03      	add	r3, sp, #12
 8017408:	4805      	ldr	r0, [pc, #20]	; (8017420 <fiprintf+0x20>)
 801740a:	f853 2b04 	ldr.w	r2, [r3], #4
 801740e:	6800      	ldr	r0, [r0, #0]
 8017410:	9301      	str	r3, [sp, #4]
 8017412:	f7ff fe41 	bl	8017098 <_vfiprintf_r>
 8017416:	b002      	add	sp, #8
 8017418:	f85d eb04 	ldr.w	lr, [sp], #4
 801741c:	b003      	add	sp, #12
 801741e:	4770      	bx	lr
 8017420:	20001440 	.word	0x20001440

08017424 <_fstat_r>:
 8017424:	b538      	push	{r3, r4, r5, lr}
 8017426:	4d07      	ldr	r5, [pc, #28]	; (8017444 <_fstat_r+0x20>)
 8017428:	2300      	movs	r3, #0
 801742a:	4604      	mov	r4, r0
 801742c:	4608      	mov	r0, r1
 801742e:	4611      	mov	r1, r2
 8017430:	602b      	str	r3, [r5, #0]
 8017432:	f000 faed 	bl	8017a10 <_fstat>
 8017436:	1c43      	adds	r3, r0, #1
 8017438:	d102      	bne.n	8017440 <_fstat_r+0x1c>
 801743a:	682b      	ldr	r3, [r5, #0]
 801743c:	b103      	cbz	r3, 8017440 <_fstat_r+0x1c>
 801743e:	6023      	str	r3, [r4, #0]
 8017440:	bd38      	pop	{r3, r4, r5, pc}
 8017442:	bf00      	nop
 8017444:	20001b4c 	.word	0x20001b4c

08017448 <_isatty_r>:
 8017448:	b538      	push	{r3, r4, r5, lr}
 801744a:	4d06      	ldr	r5, [pc, #24]	; (8017464 <_isatty_r+0x1c>)
 801744c:	2300      	movs	r3, #0
 801744e:	4604      	mov	r4, r0
 8017450:	4608      	mov	r0, r1
 8017452:	602b      	str	r3, [r5, #0]
 8017454:	f000 faec 	bl	8017a30 <_isatty>
 8017458:	1c43      	adds	r3, r0, #1
 801745a:	d102      	bne.n	8017462 <_isatty_r+0x1a>
 801745c:	682b      	ldr	r3, [r5, #0]
 801745e:	b103      	cbz	r3, 8017462 <_isatty_r+0x1a>
 8017460:	6023      	str	r3, [r4, #0]
 8017462:	bd38      	pop	{r3, r4, r5, pc}
 8017464:	20001b4c 	.word	0x20001b4c

08017468 <_lseek_r>:
 8017468:	b538      	push	{r3, r4, r5, lr}
 801746a:	4d07      	ldr	r5, [pc, #28]	; (8017488 <_lseek_r+0x20>)
 801746c:	4604      	mov	r4, r0
 801746e:	4608      	mov	r0, r1
 8017470:	4611      	mov	r1, r2
 8017472:	2200      	movs	r2, #0
 8017474:	602a      	str	r2, [r5, #0]
 8017476:	461a      	mov	r2, r3
 8017478:	f000 faea 	bl	8017a50 <_lseek>
 801747c:	1c43      	adds	r3, r0, #1
 801747e:	d102      	bne.n	8017486 <_lseek_r+0x1e>
 8017480:	682b      	ldr	r3, [r5, #0]
 8017482:	b103      	cbz	r3, 8017486 <_lseek_r+0x1e>
 8017484:	6023      	str	r3, [r4, #0]
 8017486:	bd38      	pop	{r3, r4, r5, pc}
 8017488:	20001b4c 	.word	0x20001b4c

0801748c <__ascii_mbtowc>:
 801748c:	b082      	sub	sp, #8
 801748e:	b901      	cbnz	r1, 8017492 <__ascii_mbtowc+0x6>
 8017490:	a901      	add	r1, sp, #4
 8017492:	b142      	cbz	r2, 80174a6 <__ascii_mbtowc+0x1a>
 8017494:	b14b      	cbz	r3, 80174aa <__ascii_mbtowc+0x1e>
 8017496:	7813      	ldrb	r3, [r2, #0]
 8017498:	600b      	str	r3, [r1, #0]
 801749a:	7812      	ldrb	r2, [r2, #0]
 801749c:	1e10      	subs	r0, r2, #0
 801749e:	bf18      	it	ne
 80174a0:	2001      	movne	r0, #1
 80174a2:	b002      	add	sp, #8
 80174a4:	4770      	bx	lr
 80174a6:	4610      	mov	r0, r2
 80174a8:	e7fb      	b.n	80174a2 <__ascii_mbtowc+0x16>
 80174aa:	f06f 0001 	mvn.w	r0, #1
 80174ae:	e7f8      	b.n	80174a2 <__ascii_mbtowc+0x16>

080174b0 <_malloc_usable_size_r>:
 80174b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174b4:	1f18      	subs	r0, r3, #4
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	bfbc      	itt	lt
 80174ba:	580b      	ldrlt	r3, [r1, r0]
 80174bc:	18c0      	addlt	r0, r0, r3
 80174be:	4770      	bx	lr

080174c0 <_read_r>:
 80174c0:	b538      	push	{r3, r4, r5, lr}
 80174c2:	4d07      	ldr	r5, [pc, #28]	; (80174e0 <_read_r+0x20>)
 80174c4:	4604      	mov	r4, r0
 80174c6:	4608      	mov	r0, r1
 80174c8:	4611      	mov	r1, r2
 80174ca:	2200      	movs	r2, #0
 80174cc:	602a      	str	r2, [r5, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	f000 fac6 	bl	8017a60 <_read>
 80174d4:	1c43      	adds	r3, r0, #1
 80174d6:	d102      	bne.n	80174de <_read_r+0x1e>
 80174d8:	682b      	ldr	r3, [r5, #0]
 80174da:	b103      	cbz	r3, 80174de <_read_r+0x1e>
 80174dc:	6023      	str	r3, [r4, #0]
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	20001b4c 	.word	0x20001b4c

080174e4 <__ascii_wctomb>:
 80174e4:	b149      	cbz	r1, 80174fa <__ascii_wctomb+0x16>
 80174e6:	2aff      	cmp	r2, #255	; 0xff
 80174e8:	bf85      	ittet	hi
 80174ea:	238a      	movhi	r3, #138	; 0x8a
 80174ec:	6003      	strhi	r3, [r0, #0]
 80174ee:	700a      	strbls	r2, [r1, #0]
 80174f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80174f4:	bf98      	it	ls
 80174f6:	2001      	movls	r0, #1
 80174f8:	4770      	bx	lr
 80174fa:	4608      	mov	r0, r1
 80174fc:	4770      	bx	lr

080174fe <abort>:
 80174fe:	b508      	push	{r3, lr}
 8017500:	2006      	movs	r0, #6
 8017502:	f000 f82b 	bl	801755c <raise>
 8017506:	2001      	movs	r0, #1
 8017508:	f000 faba 	bl	8017a80 <_exit>

0801750c <_raise_r>:
 801750c:	291f      	cmp	r1, #31
 801750e:	b538      	push	{r3, r4, r5, lr}
 8017510:	4604      	mov	r4, r0
 8017512:	460d      	mov	r5, r1
 8017514:	d904      	bls.n	8017520 <_raise_r+0x14>
 8017516:	2316      	movs	r3, #22
 8017518:	6003      	str	r3, [r0, #0]
 801751a:	f04f 30ff 	mov.w	r0, #4294967295
 801751e:	bd38      	pop	{r3, r4, r5, pc}
 8017520:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017522:	b112      	cbz	r2, 801752a <_raise_r+0x1e>
 8017524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017528:	b94b      	cbnz	r3, 801753e <_raise_r+0x32>
 801752a:	4620      	mov	r0, r4
 801752c:	f000 f830 	bl	8017590 <_getpid_r>
 8017530:	462a      	mov	r2, r5
 8017532:	4601      	mov	r1, r0
 8017534:	4620      	mov	r0, r4
 8017536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801753a:	f000 b817 	b.w	801756c <_kill_r>
 801753e:	2b01      	cmp	r3, #1
 8017540:	d00a      	beq.n	8017558 <_raise_r+0x4c>
 8017542:	1c59      	adds	r1, r3, #1
 8017544:	d103      	bne.n	801754e <_raise_r+0x42>
 8017546:	2316      	movs	r3, #22
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	2001      	movs	r0, #1
 801754c:	e7e7      	b.n	801751e <_raise_r+0x12>
 801754e:	2400      	movs	r4, #0
 8017550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017554:	4628      	mov	r0, r5
 8017556:	4798      	blx	r3
 8017558:	2000      	movs	r0, #0
 801755a:	e7e0      	b.n	801751e <_raise_r+0x12>

0801755c <raise>:
 801755c:	4b02      	ldr	r3, [pc, #8]	; (8017568 <raise+0xc>)
 801755e:	4601      	mov	r1, r0
 8017560:	6818      	ldr	r0, [r3, #0]
 8017562:	f7ff bfd3 	b.w	801750c <_raise_r>
 8017566:	bf00      	nop
 8017568:	20001440 	.word	0x20001440

0801756c <_kill_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4d07      	ldr	r5, [pc, #28]	; (801758c <_kill_r+0x20>)
 8017570:	2300      	movs	r3, #0
 8017572:	4604      	mov	r4, r0
 8017574:	4608      	mov	r0, r1
 8017576:	4611      	mov	r1, r2
 8017578:	602b      	str	r3, [r5, #0]
 801757a:	f000 fa61 	bl	8017a40 <_kill>
 801757e:	1c43      	adds	r3, r0, #1
 8017580:	d102      	bne.n	8017588 <_kill_r+0x1c>
 8017582:	682b      	ldr	r3, [r5, #0]
 8017584:	b103      	cbz	r3, 8017588 <_kill_r+0x1c>
 8017586:	6023      	str	r3, [r4, #0]
 8017588:	bd38      	pop	{r3, r4, r5, pc}
 801758a:	bf00      	nop
 801758c:	20001b4c 	.word	0x20001b4c

08017590 <_getpid_r>:
 8017590:	f000 ba46 	b.w	8017a20 <_getpid>

08017594 <with_errnof>:
 8017594:	b513      	push	{r0, r1, r4, lr}
 8017596:	4604      	mov	r4, r0
 8017598:	ed8d 0a01 	vstr	s0, [sp, #4]
 801759c:	f7fd f8f8 	bl	8014790 <__errno>
 80175a0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80175a4:	6004      	str	r4, [r0, #0]
 80175a6:	b002      	add	sp, #8
 80175a8:	bd10      	pop	{r4, pc}

080175aa <xflowf>:
 80175aa:	b130      	cbz	r0, 80175ba <xflowf+0x10>
 80175ac:	eef1 7a40 	vneg.f32	s15, s0
 80175b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80175b4:	2022      	movs	r0, #34	; 0x22
 80175b6:	f7ff bfed 	b.w	8017594 <with_errnof>
 80175ba:	eef0 7a40 	vmov.f32	s15, s0
 80175be:	e7f7      	b.n	80175b0 <xflowf+0x6>

080175c0 <__math_uflowf>:
 80175c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80175c8 <__math_uflowf+0x8>
 80175c4:	f7ff bff1 	b.w	80175aa <xflowf>
 80175c8:	10000000 	.word	0x10000000

080175cc <__math_may_uflowf>:
 80175cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80175d4 <__math_may_uflowf+0x8>
 80175d0:	f7ff bfeb 	b.w	80175aa <xflowf>
 80175d4:	1a200000 	.word	0x1a200000

080175d8 <__math_oflowf>:
 80175d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80175e0 <__math_oflowf+0x8>
 80175dc:	f7ff bfe5 	b.w	80175aa <xflowf>
 80175e0:	70000000 	.word	0x70000000

080175e4 <__math_divzerof>:
 80175e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80175e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80175ec:	2800      	cmp	r0, #0
 80175ee:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80175f2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017600 <__math_divzerof+0x1c>
 80175f6:	2022      	movs	r0, #34	; 0x22
 80175f8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80175fc:	f7ff bfca 	b.w	8017594 <with_errnof>
 8017600:	00000000 	.word	0x00000000

08017604 <__math_invalidf>:
 8017604:	eef0 7a40 	vmov.f32	s15, s0
 8017608:	ee30 7a40 	vsub.f32	s14, s0, s0
 801760c:	eef4 7a67 	vcmp.f32	s15, s15
 8017610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017614:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017618:	d602      	bvs.n	8017620 <__math_invalidf+0x1c>
 801761a:	2021      	movs	r0, #33	; 0x21
 801761c:	f7ff bfba 	b.w	8017594 <with_errnof>
 8017620:	4770      	bx	lr
	...

08017624 <expf>:
 8017624:	ee10 2a10 	vmov	r2, s0
 8017628:	f240 412a 	movw	r1, #1066	; 0x42a
 801762c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8017630:	428b      	cmp	r3, r1
 8017632:	b430      	push	{r4, r5}
 8017634:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8017638:	d92a      	bls.n	8017690 <expf+0x6c>
 801763a:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801763e:	d058      	beq.n	80176f2 <expf+0xce>
 8017640:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8017644:	d303      	bcc.n	801764e <expf+0x2a>
 8017646:	ee30 0a00 	vadd.f32	s0, s0, s0
 801764a:	bc30      	pop	{r4, r5}
 801764c:	4770      	bx	lr
 801764e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80176f8 <expf+0xd4>
 8017652:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801765a:	dd03      	ble.n	8017664 <expf+0x40>
 801765c:	bc30      	pop	{r4, r5}
 801765e:	2000      	movs	r0, #0
 8017660:	f7ff bfba 	b.w	80175d8 <__math_oflowf>
 8017664:	eddf 7a25 	vldr	s15, [pc, #148]	; 80176fc <expf+0xd8>
 8017668:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017670:	d503      	bpl.n	801767a <expf+0x56>
 8017672:	bc30      	pop	{r4, r5}
 8017674:	2000      	movs	r0, #0
 8017676:	f7ff bfa3 	b.w	80175c0 <__math_uflowf>
 801767a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017700 <expf+0xdc>
 801767e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017686:	d503      	bpl.n	8017690 <expf+0x6c>
 8017688:	bc30      	pop	{r4, r5}
 801768a:	2000      	movs	r0, #0
 801768c:	f7ff bf9e 	b.w	80175cc <__math_may_uflowf>
 8017690:	4b1c      	ldr	r3, [pc, #112]	; (8017704 <expf+0xe0>)
 8017692:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017696:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801769a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801769e:	eeb0 7b44 	vmov.f64	d7, d4
 80176a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80176a6:	ee17 0a10 	vmov	r0, s14
 80176aa:	ee37 7b44 	vsub.f64	d7, d7, d4
 80176ae:	f000 021f 	and.w	r2, r0, #31
 80176b2:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80176b6:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 80176ba:	ee27 4b07 	vmul.f64	d4, d7, d7
 80176be:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 80176c2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80176c6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80176ca:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80176ce:	684d      	ldr	r5, [r1, #4]
 80176d0:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80176d4:	2100      	movs	r1, #0
 80176d6:	190a      	adds	r2, r1, r4
 80176d8:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80176dc:	eea5 0b07 	vfma.f64	d0, d5, d7
 80176e0:	ec43 2b17 	vmov	d7, r2, r3
 80176e4:	eea6 0b04 	vfma.f64	d0, d6, d4
 80176e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80176ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80176f0:	e7ab      	b.n	801764a <expf+0x26>
 80176f2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8017708 <expf+0xe4>
 80176f6:	e7a8      	b.n	801764a <expf+0x26>
 80176f8:	42b17217 	.word	0x42b17217
 80176fc:	c2cff1b4 	.word	0xc2cff1b4
 8017700:	c2ce8ecf 	.word	0xc2ce8ecf
 8017704:	08019848 	.word	0x08019848
 8017708:	00000000 	.word	0x00000000

0801770c <checkint>:
 801770c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017710:	2b7e      	cmp	r3, #126	; 0x7e
 8017712:	dd10      	ble.n	8017736 <checkint+0x2a>
 8017714:	2b96      	cmp	r3, #150	; 0x96
 8017716:	dc0c      	bgt.n	8017732 <checkint+0x26>
 8017718:	2201      	movs	r2, #1
 801771a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801771e:	fa02 f303 	lsl.w	r3, r2, r3
 8017722:	1e5a      	subs	r2, r3, #1
 8017724:	4202      	tst	r2, r0
 8017726:	d106      	bne.n	8017736 <checkint+0x2a>
 8017728:	4203      	tst	r3, r0
 801772a:	bf0c      	ite	eq
 801772c:	2002      	moveq	r0, #2
 801772e:	2001      	movne	r0, #1
 8017730:	4770      	bx	lr
 8017732:	2002      	movs	r0, #2
 8017734:	4770      	bx	lr
 8017736:	2000      	movs	r0, #0
 8017738:	4770      	bx	lr
 801773a:	0000      	movs	r0, r0
 801773c:	0000      	movs	r0, r0
	...

08017740 <powf>:
 8017740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017742:	ee10 1a10 	vmov	r1, s0
 8017746:	ee10 4a90 	vmov	r4, s1
 801774a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801774e:	0062      	lsls	r2, r4, #1
 8017750:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017754:	eef0 7a40 	vmov.f32	s15, s0
 8017758:	f102 30ff 	add.w	r0, r2, #4294967295
 801775c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8017760:	d252      	bcs.n	8017808 <powf+0xc8>
 8017762:	4298      	cmp	r0, r3
 8017764:	d252      	bcs.n	801780c <powf+0xcc>
 8017766:	2000      	movs	r0, #0
 8017768:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801776c:	4ca0      	ldr	r4, [pc, #640]	; (80179f0 <powf+0x2b0>)
 801776e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8017772:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8017776:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801777a:	0dd2      	lsrs	r2, r2, #23
 801777c:	05d2      	lsls	r2, r2, #23
 801777e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8017782:	1a8b      	subs	r3, r1, r2
 8017784:	ed95 6b00 	vldr	d6, [r5]
 8017788:	ee07 3a90 	vmov	s15, r3
 801778c:	15d2      	asrs	r2, r2, #23
 801778e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017792:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017796:	ed95 6b02 	vldr	d6, [r5, #8]
 801779a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801779e:	ee22 1b02 	vmul.f64	d1, d2, d2
 80177a2:	ee07 2a90 	vmov	s15, r2
 80177a6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80177aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80177ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80177b2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80177b6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80177ba:	eea5 3b06 	vfma.f64	d3, d5, d6
 80177be:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80177c2:	eea5 6b04 	vfma.f64	d6, d5, d4
 80177c6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80177ca:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80177ce:	eea5 7b04 	vfma.f64	d7, d5, d4
 80177d2:	eea2 7b06 	vfma.f64	d7, d2, d6
 80177d6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80177da:	ee20 0b07 	vmul.f64	d0, d0, d7
 80177de:	ee10 3a90 	vmov	r3, s1
 80177e2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80177e6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80177ea:	429a      	cmp	r2, r3
 80177ec:	f0c0 80b1 	bcc.w	8017952 <powf+0x212>
 80177f0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80179d0 <powf+0x290>
 80177f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	dd79      	ble.n	80178f2 <powf+0x1b2>
 80177fe:	b003      	add	sp, #12
 8017800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017804:	f7ff bee8 	b.w	80175d8 <__math_oflowf>
 8017808:	4298      	cmp	r0, r3
 801780a:	d32d      	bcc.n	8017868 <powf+0x128>
 801780c:	b952      	cbnz	r2, 8017824 <powf+0xe4>
 801780e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8017812:	005b      	lsls	r3, r3, #1
 8017814:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8017818:	f240 80c9 	bls.w	80179ae <powf+0x26e>
 801781c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8017820:	b003      	add	sp, #12
 8017822:	bd30      	pop	{r4, r5, pc}
 8017824:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017828:	d105      	bne.n	8017836 <powf+0xf6>
 801782a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801782e:	0064      	lsls	r4, r4, #1
 8017830:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8017834:	e7f0      	b.n	8017818 <powf+0xd8>
 8017836:	004b      	lsls	r3, r1, #1
 8017838:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801783c:	d8ee      	bhi.n	801781c <powf+0xdc>
 801783e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017842:	d1eb      	bne.n	801781c <powf+0xdc>
 8017844:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017848:	f000 80b1 	beq.w	80179ae <powf+0x26e>
 801784c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017850:	ea6f 0404 	mvn.w	r4, r4
 8017854:	bf34      	ite	cc
 8017856:	2300      	movcc	r3, #0
 8017858:	2301      	movcs	r3, #1
 801785a:	0fe4      	lsrs	r4, r4, #31
 801785c:	42a3      	cmp	r3, r4
 801785e:	f040 80a9 	bne.w	80179b4 <powf+0x274>
 8017862:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8017866:	e7db      	b.n	8017820 <powf+0xe0>
 8017868:	004d      	lsls	r5, r1, #1
 801786a:	1e6a      	subs	r2, r5, #1
 801786c:	429a      	cmp	r2, r3
 801786e:	d31c      	bcc.n	80178aa <powf+0x16a>
 8017870:	2900      	cmp	r1, #0
 8017872:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017876:	da0f      	bge.n	8017898 <powf+0x158>
 8017878:	ee10 0a90 	vmov	r0, s1
 801787c:	f7ff ff46 	bl	801770c <checkint>
 8017880:	2801      	cmp	r0, #1
 8017882:	d109      	bne.n	8017898 <powf+0x158>
 8017884:	eeb1 0a40 	vneg.f32	s0, s0
 8017888:	b945      	cbnz	r5, 801789c <powf+0x15c>
 801788a:	2c00      	cmp	r4, #0
 801788c:	dac8      	bge.n	8017820 <powf+0xe0>
 801788e:	b003      	add	sp, #12
 8017890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017894:	f7ff bea6 	b.w	80175e4 <__math_divzerof>
 8017898:	2000      	movs	r0, #0
 801789a:	e7f5      	b.n	8017888 <powf+0x148>
 801789c:	2c00      	cmp	r4, #0
 801789e:	dabf      	bge.n	8017820 <powf+0xe0>
 80178a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80178a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80178a8:	e7ba      	b.n	8017820 <powf+0xe0>
 80178aa:	2900      	cmp	r1, #0
 80178ac:	da1f      	bge.n	80178ee <powf+0x1ae>
 80178ae:	ee10 0a90 	vmov	r0, s1
 80178b2:	f7ff ff2b 	bl	801770c <checkint>
 80178b6:	b920      	cbnz	r0, 80178c2 <powf+0x182>
 80178b8:	b003      	add	sp, #12
 80178ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178be:	f7ff bea1 	b.w	8017604 <__math_invalidf>
 80178c2:	2801      	cmp	r0, #1
 80178c4:	bf14      	ite	ne
 80178c6:	2000      	movne	r0, #0
 80178c8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80178cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80178d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80178d4:	f4bf af48 	bcs.w	8017768 <powf+0x28>
 80178d8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80179f4 <powf+0x2b4>
 80178dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80178e0:	ee10 3a10 	vmov	r3, s0
 80178e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178e8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80178ec:	e73c      	b.n	8017768 <powf+0x28>
 80178ee:	2000      	movs	r0, #0
 80178f0:	e7ee      	b.n	80178d0 <powf+0x190>
 80178f2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80179d8 <powf+0x298>
 80178f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80178fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178fe:	dd10      	ble.n	8017922 <powf+0x1e2>
 8017900:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017904:	2800      	cmp	r0, #0
 8017906:	d158      	bne.n	80179ba <powf+0x27a>
 8017908:	9300      	str	r3, [sp, #0]
 801790a:	eddd 7a00 	vldr	s15, [sp]
 801790e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017916:	eef4 7a47 	vcmp.f32	s15, s14
 801791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801791e:	f47f af6e 	bne.w	80177fe <powf+0xbe>
 8017922:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80179e0 <powf+0x2a0>
 8017926:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801792a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801792e:	d804      	bhi.n	801793a <powf+0x1fa>
 8017930:	b003      	add	sp, #12
 8017932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017936:	f7ff be43 	b.w	80175c0 <__math_uflowf>
 801793a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80179e8 <powf+0x2a8>
 801793e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017946:	d504      	bpl.n	8017952 <powf+0x212>
 8017948:	b003      	add	sp, #12
 801794a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801794e:	f7ff be3d 	b.w	80175cc <__math_may_uflowf>
 8017952:	4b29      	ldr	r3, [pc, #164]	; (80179f8 <powf+0x2b8>)
 8017954:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8017958:	ee30 6b07 	vadd.f64	d6, d0, d7
 801795c:	ee16 2a10 	vmov	r2, s12
 8017960:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017964:	f002 011f 	and.w	r1, r2, #31
 8017968:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801796c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8017970:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017974:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8017978:	ee27 4b07 	vmul.f64	d4, d7, d7
 801797c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8017980:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8017984:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017988:	686d      	ldr	r5, [r5, #4]
 801798a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801798e:	1882      	adds	r2, r0, r2
 8017990:	2300      	movs	r3, #0
 8017992:	1918      	adds	r0, r3, r4
 8017994:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8017998:	eea7 0b05 	vfma.f64	d0, d7, d5
 801799c:	ec41 0b17 	vmov	d7, r0, r1
 80179a0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80179a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80179a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80179ac:	e738      	b.n	8017820 <powf+0xe0>
 80179ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80179b2:	e735      	b.n	8017820 <powf+0xe0>
 80179b4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80179fc <powf+0x2bc>
 80179b8:	e732      	b.n	8017820 <powf+0xe0>
 80179ba:	9301      	str	r3, [sp, #4]
 80179bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80179c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80179c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179c8:	e7a5      	b.n	8017916 <powf+0x1d6>
 80179ca:	bf00      	nop
 80179cc:	f3af 8000 	nop.w
 80179d0:	ffd1d571 	.word	0xffd1d571
 80179d4:	405fffff 	.word	0x405fffff
 80179d8:	ffa3aae2 	.word	0xffa3aae2
 80179dc:	405fffff 	.word	0x405fffff
 80179e0:	00000000 	.word	0x00000000
 80179e4:	c062c000 	.word	0xc062c000
 80179e8:	00000000 	.word	0x00000000
 80179ec:	c062a000 	.word	0xc062a000
 80179f0:	08019990 	.word	0x08019990
 80179f4:	4b000000 	.word	0x4b000000
 80179f8:	08019848 	.word	0x08019848
 80179fc:	00000000 	.word	0x00000000

08017a00 <_close>:
 8017a00:	4b02      	ldr	r3, [pc, #8]	; (8017a0c <_close+0xc>)
 8017a02:	2258      	movs	r2, #88	; 0x58
 8017a04:	601a      	str	r2, [r3, #0]
 8017a06:	f04f 30ff 	mov.w	r0, #4294967295
 8017a0a:	4770      	bx	lr
 8017a0c:	20001b4c 	.word	0x20001b4c

08017a10 <_fstat>:
 8017a10:	4b02      	ldr	r3, [pc, #8]	; (8017a1c <_fstat+0xc>)
 8017a12:	2258      	movs	r2, #88	; 0x58
 8017a14:	601a      	str	r2, [r3, #0]
 8017a16:	f04f 30ff 	mov.w	r0, #4294967295
 8017a1a:	4770      	bx	lr
 8017a1c:	20001b4c 	.word	0x20001b4c

08017a20 <_getpid>:
 8017a20:	4b02      	ldr	r3, [pc, #8]	; (8017a2c <_getpid+0xc>)
 8017a22:	2258      	movs	r2, #88	; 0x58
 8017a24:	601a      	str	r2, [r3, #0]
 8017a26:	f04f 30ff 	mov.w	r0, #4294967295
 8017a2a:	4770      	bx	lr
 8017a2c:	20001b4c 	.word	0x20001b4c

08017a30 <_isatty>:
 8017a30:	4b02      	ldr	r3, [pc, #8]	; (8017a3c <_isatty+0xc>)
 8017a32:	2258      	movs	r2, #88	; 0x58
 8017a34:	601a      	str	r2, [r3, #0]
 8017a36:	2000      	movs	r0, #0
 8017a38:	4770      	bx	lr
 8017a3a:	bf00      	nop
 8017a3c:	20001b4c 	.word	0x20001b4c

08017a40 <_kill>:
 8017a40:	4b02      	ldr	r3, [pc, #8]	; (8017a4c <_kill+0xc>)
 8017a42:	2258      	movs	r2, #88	; 0x58
 8017a44:	601a      	str	r2, [r3, #0]
 8017a46:	f04f 30ff 	mov.w	r0, #4294967295
 8017a4a:	4770      	bx	lr
 8017a4c:	20001b4c 	.word	0x20001b4c

08017a50 <_lseek>:
 8017a50:	4b02      	ldr	r3, [pc, #8]	; (8017a5c <_lseek+0xc>)
 8017a52:	2258      	movs	r2, #88	; 0x58
 8017a54:	601a      	str	r2, [r3, #0]
 8017a56:	f04f 30ff 	mov.w	r0, #4294967295
 8017a5a:	4770      	bx	lr
 8017a5c:	20001b4c 	.word	0x20001b4c

08017a60 <_read>:
 8017a60:	4b02      	ldr	r3, [pc, #8]	; (8017a6c <_read+0xc>)
 8017a62:	2258      	movs	r2, #88	; 0x58
 8017a64:	601a      	str	r2, [r3, #0]
 8017a66:	f04f 30ff 	mov.w	r0, #4294967295
 8017a6a:	4770      	bx	lr
 8017a6c:	20001b4c 	.word	0x20001b4c

08017a70 <_write>:
 8017a70:	4b02      	ldr	r3, [pc, #8]	; (8017a7c <_write+0xc>)
 8017a72:	2258      	movs	r2, #88	; 0x58
 8017a74:	601a      	str	r2, [r3, #0]
 8017a76:	f04f 30ff 	mov.w	r0, #4294967295
 8017a7a:	4770      	bx	lr
 8017a7c:	20001b4c 	.word	0x20001b4c

08017a80 <_exit>:
 8017a80:	e7fe      	b.n	8017a80 <_exit>
	...

08017a84 <_init>:
 8017a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a86:	bf00      	nop
 8017a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a8a:	bc08      	pop	{r3}
 8017a8c:	469e      	mov	lr, r3
 8017a8e:	4770      	bx	lr

08017a90 <_fini>:
 8017a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a92:	bf00      	nop
 8017a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a96:	bc08      	pop	{r3}
 8017a98:	469e      	mov	lr, r3
 8017a9a:	4770      	bx	lr
