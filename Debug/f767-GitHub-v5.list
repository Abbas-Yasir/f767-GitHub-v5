
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cf0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec4  08016f00  08016f00  00026f00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018dc4  08018dc4  0003151c  2**0
                  CONTENTS
  4 .ARM          00000008  08018dc4  08018dc4  00028dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dcc  08018dcc  0003151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018dcc  08018dcc  00028dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018dd0  08018dd0  00028dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000151c  20000000  08018dd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  2000151c  0801a2f0  0003151c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001aa0  0801a2f0  00031aa0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003151c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d739  00000000  00000000  0003154a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000411f  00000000  00000000  0004ec83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00052da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00054280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cad9  00000000  00000000  000555a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d680  00000000  00000000  00082081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e568  00000000  00000000  0009f701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001adc69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  001adcbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001b4268  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001b4334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000151c 	.word	0x2000151c
 800021c:	00000000 	.word	0x00000000
 8000220:	08016ed8 	.word	0x08016ed8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001520 	.word	0x20001520
 800023c:	08016ed8 	.word	0x08016ed8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b9a8 	b.w	8000658 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f83a 	bl	8000388 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__aeabi_f2lz>:
 8000320:	ee07 0a90 	vmov	s15, r0
 8000324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032c:	d401      	bmi.n	8000332 <__aeabi_f2lz+0x12>
 800032e:	f000 b80b 	b.w	8000348 <__aeabi_f2ulz>
 8000332:	eef1 7a67 	vneg.f32	s15, s15
 8000336:	b508      	push	{r3, lr}
 8000338:	ee17 0a90 	vmov	r0, s15
 800033c:	f000 f804 	bl	8000348 <__aeabi_f2ulz>
 8000340:	4240      	negs	r0, r0
 8000342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000346:	bd08      	pop	{r3, pc}

08000348 <__aeabi_f2ulz>:
 8000348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000378 <__aeabi_f2ulz+0x30>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000380 <__aeabi_f2ulz+0x38>
 8000354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800035c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000360:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000364:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000368:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800036c:	ee16 1a10 	vmov	r1, s12
 8000370:	ee17 0a90 	vmov	r0, s15
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	00000000 	.word	0x00000000
 800037c:	3df00000 	.word	0x3df00000
 8000380:	00000000 	.word	0x00000000
 8000384:	41f00000 	.word	0x41f00000

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CRC_Init+0x3c>)
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <MX_CRC_Init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CRC_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CRC_Init+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CRC_Init+0x3c>)
 8000686:	f004 f85d 	bl	8004744 <HAL_CRC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000690:	f001 f8e8 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20001538 	.word	0x20001538
 800069c:	40023000 	.word	0x40023000

080006a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_CRC_MspInit+0x38>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023000 	.word	0x40023000
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2044      	movs	r0, #68	; 0x44
 8000704:	f003 ffe7 	bl	80046d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000708:	2044      	movs	r0, #68	; 0x44
 800070a:	f004 f800 	bl	800470e <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a43      	ldr	r2, [pc, #268]	; (8000844 <MX_GPIO_Init+0x128>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <MX_GPIO_Init+0x128>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0x128>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_GPIO_Init+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <MX_GPIO_Init+0x128>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <MX_GPIO_Init+0x128>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0x128>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007c2:	2200      	movs	r2, #0
 80007c4:	f647 0110 	movw	r1, #30736	; 0x7810
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007ca:	f004 fdcd 	bl	8005368 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_GPIO_Init+0x130>)
 80007d4:	f004 fdc8 	bl	8005368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80007de:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_GPIO_Init+0x134>)
 80007e0:	f004 fdc2 	bl	8005368 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007e4:	f647 0310 	movw	r3, #30736	; 0x7810
 80007e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007fe:	f004 fc07 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000802:	2310      	movs	r3, #16
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0x130>)
 800081a:	f004 fbf9 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800081e:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_GPIO_Init+0x134>)
 8000838:	f004 fbea 	bl	8005010 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40021000 	.word	0x40021000
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400

08000854 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
}
 8000862:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <SCB_EnableICache+0x48>)
 8000866:	2200      	movs	r2, #0
 8000868:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000872:	f3bf 8f6f 	isb	sy
}
 8000876:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <SCB_EnableICache+0x48>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <SCB_EnableICache+0x48>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
}
 800088e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SCB_EnableDCache+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <SCB_EnableDCache+0x84>)
 80008b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0b5b      	lsrs	r3, r3, #13
 80008c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008de:	4911      	ldr	r1, [pc, #68]	; (8000924 <SCB_EnableDCache+0x84>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ef      	bne.n	80008d0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	60fa      	str	r2, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e5      	bne.n	80008c6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SCB_EnableDCache+0x84>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SCB_EnableDCache+0x84>)
 8000906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d027      	beq.n	8000992 <in_func+0x6a>
//    	read_bulk_4ByteAdd_SharedFM(dev->fp, buff, nbyte);
//    	read_bulk_4ByteAdd_LocalFM(dev->fp, buff, nbyte);
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f002 f83a 	bl	80029c4 <W25qxx_ReadBytes>

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	3b01      	subs	r3, #1
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4911      	ldr	r1, [pc, #68]	; (80009a8 <in_func+0x80>)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <in_func+0x84>)
 8000966:	f014 f99f 	bl	8014ca8 <siprintf>
 800096a:	4603      	mov	r3, r0
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <in_func+0x88>)
 8000970:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <in_func+0x88>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	490c      	ldr	r1, [pc, #48]	; (80009ac <in_func+0x84>)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <in_func+0x8c>)
 800097e:	f006 ffc1 	bl	8007904 <HAL_UART_Transmit>

    	dev->fp += nbyte;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	441a      	add	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

        return nbyte;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	e006      	b.n	80009a0 <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	441a      	add	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]
        return nbyte;
 800099e:	88fb      	ldrh	r3, [r7, #6]
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08016f00 	.word	0x08016f00
 80009ac:	20001564 	.word	0x20001564
 80009b0:	20001560 	.word	0x20001560
 80009b4:	200017b8 	.word	0x200017b8

080009b8 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c8:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4611      	mov	r1, r2
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	8912      	ldrh	r2, [r2, #8]
 80009dc:	fb01 f202 	mul.w	r2, r1, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	8809      	ldrh	r1, [r1, #0]
 80009e4:	440a      	add	r2, r1
 80009e6:	4413      	add	r3, r2
 80009e8:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	885a      	ldrh	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	83fb      	strh	r3, [r7, #30]
 8000a06:	e010      	b.n	8000a2a <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0e:	6a38      	ldr	r0, [r7, #32]
 8000a10:	f013 fb58 	bl	80140c4 <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	8abb      	ldrh	r3, [r7, #20]
 8000a1e:	6a3a      	ldr	r2, [r7, #32]
 8000a20:	4413      	add	r3, r2
 8000a22:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a24:	8bfb      	ldrh	r3, [r7, #30]
 8000a26:	3301      	adds	r3, #1
 8000a28:	83fb      	strh	r3, [r7, #30]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	8bfa      	ldrh	r2, [r7, #30]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d9e9      	bls.n	8000a08 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	f5ad 3da2 	sub.w	sp, sp, #82944	; 0x14400
 8000a46:	b0e3      	sub	sp, #396	; 0x18c
 8000a48:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4ac1      	ldr	r2, [pc, #772]	; (8000d54 <main+0x314>)
 8000a4e:	443a      	add	r2, r7
 8000a50:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x24;
 8000a52:	2324      	movs	r3, #36	; 0x24
 8000a54:	4ac0      	ldr	r2, [pc, #768]	; (8000d58 <main+0x318>)
 8000a56:	443a      	add	r2, r7
 8000a58:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 5100;
 8000a5a:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8000a5e:	4abf      	ldr	r2, [pc, #764]	; (8000d5c <main+0x31c>)
 8000a60:	443a      	add	r2, r7
 8000a62:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	4abe      	ldr	r2, [pc, #760]	; (8000d60 <main+0x320>)
 8000a68:	443a      	add	r2, r7
 8000a6a:	6013      	str	r3, [r2, #0]
	  ai_i32 nbatch_ICU;

	  uint32_t timestamp;
	  uint32_t timestamp_ICU;

	  uint8_t prediction = 0xFF;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	4abd      	ldr	r2, [pc, #756]	; (8000d64 <main+0x324>)
 8000a70:	443a      	add	r2, r7
 8000a72:	7013      	strb	r3, [r2, #0]
	  // Buffers used to store input and output tensors
	  ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 8000a74:	4bbc      	ldr	r3, [pc, #752]	; (8000d68 <main+0x328>)
 8000a76:	443b      	add	r3, r7
 8000a78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000a80:	4bb9      	ldr	r3, [pc, #740]	; (8000d68 <main+0x328>)
 8000a82:	443b      	add	r3, r7
 8000a84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000a88:	4ab8      	ldr	r2, [pc, #736]	; (8000d6c <main+0x32c>)
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	4bb6      	ldr	r3, [pc, #728]	; (8000d68 <main+0x328>)
 8000a8e:	443b      	add	r3, r7
 8000a90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	4bb3      	ldr	r3, [pc, #716]	; (8000d68 <main+0x328>)
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	4bb0      	ldr	r3, [pc, #704]	; (8000d68 <main+0x328>)
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	4bad      	ldr	r3, [pc, #692]	; (8000d68 <main+0x328>)
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	4baa      	ldr	r3, [pc, #680]	; (8000d68 <main+0x328>)
 8000abe:	443b      	add	r3, r7
 8000ac0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	751a      	strb	r2, [r3, #20]
 8000ac8:	4ba7      	ldr	r3, [pc, #668]	; (8000d68 <main+0x328>)
 8000aca:	443b      	add	r3, r7
 8000acc:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	f361 231f 	bfi	r3, r1, #8, #24
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4ba3      	ldr	r3, [pc, #652]	; (8000d68 <main+0x328>)
 8000adc:	443b      	add	r3, r7
 8000ade:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000ae2:	4aa3      	ldr	r2, [pc, #652]	; (8000d70 <main+0x330>)
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aee:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <main+0x328>)
 8000af0:	443b      	add	r3, r7
 8000af2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000af6:	4a9f      	ldr	r2, [pc, #636]	; (8000d74 <main+0x334>)
 8000af8:	443a      	add	r2, r7
 8000afa:	619a      	str	r2, [r3, #24]
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000afc:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <main+0x328>)
 8000afe:	443b      	add	r3, r7
 8000b00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b04:	4a99      	ldr	r2, [pc, #612]	; (8000d6c <main+0x32c>)
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <main+0x328>)
 8000b0a:	443b      	add	r3, r7
 8000b0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	4b94      	ldr	r3, [pc, #592]	; (8000d68 <main+0x328>)
 8000b16:	443b      	add	r3, r7
 8000b18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <main+0x328>)
 8000b22:	443b      	add	r3, r7
 8000b24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <main+0x328>)
 8000b2e:	443b      	add	r3, r7
 8000b30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b34:	2201      	movs	r2, #1
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <main+0x328>)
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b40:	2201      	movs	r2, #1
 8000b42:	751a      	strb	r2, [r3, #20]
 8000b44:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <main+0x328>)
 8000b46:	443b      	add	r3, r7
 8000b48:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8000b4c:	6953      	ldr	r3, [r2, #20]
 8000b4e:	2104      	movs	r1, #4
 8000b50:	f361 231f 	bfi	r3, r1, #8, #24
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b84      	ldr	r3, [pc, #528]	; (8000d68 <main+0x328>)
 8000b58:	443b      	add	r3, r7
 8000b5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000b5e:	4a84      	ldr	r2, [pc, #528]	; (8000d70 <main+0x330>)
 8000b60:	461c      	mov	r4, r3
 8000b62:	4613      	mov	r3, r2
 8000b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b6a:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <main+0x328>)
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b72:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <main+0x338>)
 8000b74:	443a      	add	r2, r7
 8000b76:	619a      	str	r2, [r3, #24]


	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000b78:	f008 faa0 	bl	80090bc <ai_sine_model_data_weights_get>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <main+0x328>)
 8000b80:	443b      	add	r3, r7
 8000b82:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 fa63 	bl	8009054 <ai_sine_model_data_weights_buffer_get>
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000b8e:	4b76      	ldr	r3, [pc, #472]	; (8000d68 <main+0x328>)
 8000b90:	443b      	add	r3, r7
 8000b92:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b96:	331c      	adds	r3, #28
 8000b98:	f507 32a2 	add.w	r2, r7, #82944	; 0x14400
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f008 fa24 	bl	8008fec <ai_sine_model_data_activations_buffer_get>
	  // Buffers used to store input and output tensors
	  ai_i8 image[AI_NETWORK_IN_1_SIZE_BYTES];
	  ai_i8 out_data_ICU[AI_NETWORK_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle icu_tflite = AI_HANDLE_NULL;
 8000ba4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000ba8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input_ICU[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8000bb0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bb4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bb8:	4a70      	ldr	r2, [pc, #448]	; (8000d7c <main+0x33c>)
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000be4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000be8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bf2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	751a      	strb	r2, [r3, #20]
 8000bfa:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bfe:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000c02:	6953      	ldr	r3, [r2, #20]
 8000c04:	2104      	movs	r1, #4
 8000c06:	f361 231f 	bfi	r3, r1, #8, #24
 8000c0a:	6153      	str	r3, [r2, #20]
 8000c0c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000c14:	4a5a      	ldr	r2, [pc, #360]	; (8000d80 <main+0x340>)
 8000c16:	461c      	mov	r4, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c20:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c24:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <main+0x344>)
 8000c2a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000c2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c32:	443b      	add	r3, r7
 8000c34:	6193      	str	r3, [r2, #24]
	  ai_buffer ai_output_ICU[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8000c36:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c3e:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <main+0x33c>)
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c6e:	2202      	movs	r2, #2
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	751a      	strb	r2, [r3, #20]
 8000c7e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c82:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000c86:	6953      	ldr	r3, [r2, #20]
 8000c88:	2104      	movs	r1, #4
 8000c8a:	f361 231f 	bfi	r3, r1, #8, #24
 8000c8e:	6153      	str	r3, [r2, #20]
 8000c90:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8000c98:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <main+0x348>)
 8000c9a:	461c      	mov	r4, r3
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ca4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000ca8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000cac:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <main+0x34c>)
 8000cae:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000cb2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cb6:	443b      	add	r3, r7
 8000cb8:	6193      	str	r3, [r2, #24]

	  // Set working memory and get weights/biases from model
//	  ai_network_params ai_params_ICU = AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations_ICU));
	  ai_network_params ai_params_ICU = {
			  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000cba:	f008 f83f 	bl	8008d3c <ai_network_data_weights_get>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cc4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f008 f802 	bl	8008cd4 <ai_network_data_weights_buffer_get>
			  AI_NETWORK_DATA_ACTIVATIONS(activations_ICU)
 8000cd0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cd4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000cd8:	f103 021c 	add.w	r2, r3, #28
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <main+0x350>)
 8000cde:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000ce2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ce6:	443b      	add	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f007 ffbe 	bl	8008c6c <ai_network_data_activations_buffer_get>
	  };



	  //		ai_input_ICU[0].n_batches = 1;
	  		ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 8000cf0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cf4:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <main+0x354>)
 8000cfa:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000cfe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d02:	443b      	add	r3, r7
 8000d04:	6053      	str	r3, [r2, #4]
	  //		ai_output_ICU[0].n_batches = 1;
	  		ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 8000d06:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000d0a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0x358>)
 8000d10:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000d14:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d18:	443b      	add	r3, r7
 8000d1a:	6053      	str	r3, [r2, #4]
	  		//End of ICU part 2


	  	  // Set pointers wrapper structs to our data buffers
	  //	  ai_input[0].n_batches = 1;
	  	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <main+0x328>)
 8000d1e:	443b      	add	r3, r7
 8000d20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <main+0x35c>)
 8000d26:	443a      	add	r2, r7
 8000d28:	605a      	str	r2, [r3, #4]
	  //	  ai_output[0].n_batches = 1;
	  	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <main+0x328>)
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <main+0x360>)
 8000d34:	443a      	add	r2, r7
 8000d36:	605a      	str	r2, [r3, #4]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d38:	f7ff fd8c 	bl	8000854 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d3c:	f7ff fdb0 	bl	80008a0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f003 fb6d 	bl	800441e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 fd20 	bl	8001788 <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f7ff fce8 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4c:	f7ff fcc8 	bl	80006e0 <MX_DMA_Init>
 8000d50:	e028      	b.n	8000da4 <main+0x364>
 8000d52:	bf00      	nop
 8000d54:	00014564 	.word	0x00014564
 8000d58:	00014563 	.word	0x00014563
 8000d5c:	0001455c 	.word	0x0001455c
 8000d60:	0001457c 	.word	0x0001457c
 8000d64:	0001457b 	.word	0x0001457b
 8000d68:	00014580 	.word	0x00014580
 8000d6c:	01821040 	.word	0x01821040
 8000d70:	08017230 	.word	0x08017230
 8000d74:	000143c8 	.word	0x000143c8
 8000d78:	0001439c 	.word	0x0001439c
 8000d7c:	00840440 	.word	0x00840440
 8000d80:	08017240 	.word	0x08017240
 8000d84:	fffece70 	.word	0xfffece70
 8000d88:	08017250 	.word	0x08017250
 8000d8c:	fffece44 	.word	0xfffece44
 8000d90:	ffff19a4 	.word	0xffff19a4
 8000d94:	fffecea4 	.word	0xfffecea4
 8000d98:	fffecea0 	.word	0xfffecea0
 8000d9c:	000143fc 	.word	0x000143fc
 8000da0:	000143f8 	.word	0x000143f8
  MX_SPI4_Init();
 8000da4:	f000 fe8a 	bl	8001abc <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000da8:	f001 f8ba 	bl	8001f20 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000dac:	f000 fe10 	bl	80019d0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000db0:	f000 fe4c 	bl	8001a4c <MX_SPI3_Init>
  MX_QUADSPI_Init();
 8000db4:	f000 fd5e 	bl	8001874 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000db8:	f001 f8e2 	bl	8001f80 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000dbc:	f001 f858 	bl	8001e70 <MX_TIM14_Init>
  MX_CRC_Init();
 8000dc0:	f7ff fc4c 	bl	800065c <MX_CRC_Init>
  MX_TIM13_Init();
 8000dc4:	f001 f830 	bl	8001e28 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000dc8:	f001 faee 	bl	80023a8 <W25qxx_Init>

//  HAL_Delay(5000);

  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 8000dcc:	489b      	ldr	r0, [pc, #620]	; (800103c <main+0x5fc>)
 8000dce:	f013 ff53 	bl	8014c78 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	4899      	ldr	r0, [pc, #612]	; (8001040 <main+0x600>)
 8000dda:	f004 fac5 	bl	8005368 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f003 fb7a 	bl	80044d8 <HAL_Delay>

  char readBytes[5000]="ABC";
 8000de4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8000de8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8000dec:	4a95      	ldr	r2, [pc, #596]	; (8001044 <main+0x604>)
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	3304      	adds	r3, #4
 8000df2:	f241 3284 	movw	r2, #4996	; 0x1384
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f013 f98b 	bl	8014114 <memset>

//	uint8_t* Target;
#define Target  Space

	W25qxx_EraseBlock(0);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f001 fc1a 	bl	8002638 <W25qxx_EraseBlock>

	HAL_Delay(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f003 fb67 	bl	80044d8 <HAL_Delay>
	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 8000e0a:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <main+0x608>)
 8000e0c:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000e10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e14:	443b      	add	r3, r7
 8000e16:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fdd1 	bl	80029c4 <W25qxx_ReadBytes>

	HAL_Delay(10);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f003 fb58 	bl	80044d8 <HAL_Delay>
	W25qxx_WriteBlock(Target, 0, 0, sizeof(Target));
 8000e28:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4886      	ldr	r0, [pc, #536]	; (800104c <main+0x60c>)
 8000e32:	f001 fd4b 	bl	80028cc <W25qxx_WriteBlock>

	StringLength=sprintf(txString,"\r\nTarget size=%d,Space size=%d, Earth size=%d\r\n",sizeof(Target),sizeof(Space),sizeof(Earth));
 8000e36:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000e40:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e44:	4982      	ldr	r1, [pc, #520]	; (8001050 <main+0x610>)
 8000e46:	4883      	ldr	r0, [pc, #524]	; (8001054 <main+0x614>)
 8000e48:	f013 ff2e 	bl	8014ca8 <siprintf>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b81      	ldr	r3, [pc, #516]	; (8001058 <main+0x618>)
 8000e52:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000e54:	4b80      	ldr	r3, [pc, #512]	; (8001058 <main+0x618>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	497d      	ldr	r1, [pc, #500]	; (8001054 <main+0x614>)
 8000e5e:	487f      	ldr	r0, [pc, #508]	; (800105c <main+0x61c>)
 8000e60:	f006 fd50 	bl	8007904 <HAL_UART_Transmit>


	compression_ratio = 1;
 8000e64:	4b7e      	ldr	r3, [pc, #504]	; (8001060 <main+0x620>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]




	  // Greetings!
	  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI\r\n");
 8000e6a:	4b7e      	ldr	r3, [pc, #504]	; (8001064 <main+0x624>)
 8000e6c:	443b      	add	r3, r7
 8000e6e:	497e      	ldr	r1, [pc, #504]	; (8001068 <main+0x628>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f013 ff19 	bl	8014ca8 <siprintf>
 8000e76:	4b7d      	ldr	r3, [pc, #500]	; (800106c <main+0x62c>)
 8000e78:	443b      	add	r3, r7
 8000e7a:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000e7c:	4b7b      	ldr	r3, [pc, #492]	; (800106c <main+0x62c>)
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4977      	ldr	r1, [pc, #476]	; (8001064 <main+0x624>)
 8000e86:	4439      	add	r1, r7
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	4874      	ldr	r0, [pc, #464]	; (800105c <main+0x61c>)
 8000e8c:	f006 fd3a 	bl	8007904 <HAL_UART_Transmit>


	  // Create instance of neural network
	  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000e90:	4b77      	ldr	r3, [pc, #476]	; (8001070 <main+0x630>)
 8000e92:	443b      	add	r3, r7
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 f846 	bl	8008f28 <ai_sine_model_create>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a75      	ldr	r2, [pc, #468]	; (8001074 <main+0x634>)
 8000ea0:	443a      	add	r2, r7
 8000ea2:	6013      	str	r3, [r2, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 8000ea4:	4b73      	ldr	r3, [pc, #460]	; (8001074 <main+0x634>)
 8000ea6:	443b      	add	r3, r7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d013      	beq.n	8000ed6 <main+0x496>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000eae:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <main+0x624>)
 8000eb0:	443b      	add	r3, r7
 8000eb2:	4971      	ldr	r1, [pc, #452]	; (8001078 <main+0x638>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f013 fef7 	bl	8014ca8 <siprintf>
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <main+0x62c>)
 8000ebc:	443b      	add	r3, r7
 8000ebe:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000ec0:	4b6a      	ldr	r3, [pc, #424]	; (800106c <main+0x62c>)
 8000ec2:	443b      	add	r3, r7
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4966      	ldr	r1, [pc, #408]	; (8001064 <main+0x624>)
 8000eca:	4439      	add	r1, r7
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	4863      	ldr	r0, [pc, #396]	; (800105c <main+0x61c>)
 8000ed0:	f006 fd18 	bl	8007904 <HAL_UART_Transmit>
	    while(1);
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x494>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <main+0x624>)
 8000ed8:	443b      	add	r3, r7
 8000eda:	4968      	ldr	r1, [pc, #416]	; (800107c <main+0x63c>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f013 fee3 	bl	8014ca8 <siprintf>
 8000ee2:	4b62      	ldr	r3, [pc, #392]	; (800106c <main+0x62c>)
 8000ee4:	443b      	add	r3, r7
 8000ee6:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <main+0x62c>)
 8000eea:	443b      	add	r3, r7
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	495c      	ldr	r1, [pc, #368]	; (8001064 <main+0x624>)
 8000ef2:	4439      	add	r1, r7
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	4859      	ldr	r0, [pc, #356]	; (800105c <main+0x61c>)
 8000ef8:	f006 fd04 	bl	8007904 <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_sine_model_init(sine_model, &ai_params))
 8000efc:	4b60      	ldr	r3, [pc, #384]	; (8001080 <main+0x640>)
 8000efe:	443b      	add	r3, r7
 8000f00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a5f      	ldr	r2, [pc, #380]	; (8001084 <main+0x644>)
 8000f08:	443a      	add	r2, r7
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f008 f821 	bl	8008f54 <ai_sine_model_init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f083 0301 	eor.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d013      	beq.n	8000f46 <main+0x506>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <main+0x624>)
 8000f20:	443b      	add	r3, r7
 8000f22:	4959      	ldr	r1, [pc, #356]	; (8001088 <main+0x648>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f013 febf 	bl	8014ca8 <siprintf>
 8000f2a:	4b50      	ldr	r3, [pc, #320]	; (800106c <main+0x62c>)
 8000f2c:	443b      	add	r3, r7
 8000f2e:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000f30:	4b4e      	ldr	r3, [pc, #312]	; (800106c <main+0x62c>)
 8000f32:	443b      	add	r3, r7
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	494a      	ldr	r1, [pc, #296]	; (8001064 <main+0x624>)
 8000f3a:	4439      	add	r1, r7
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	4847      	ldr	r0, [pc, #284]	; (800105c <main+0x61c>)
 8000f40:	f006 fce0 	bl	8007904 <HAL_UART_Transmit>
	    while(1);
 8000f44:	e7fe      	b.n	8000f44 <main+0x504>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <main+0x624>)
 8000f48:	443b      	add	r3, r7
 8000f4a:	4950      	ldr	r1, [pc, #320]	; (800108c <main+0x64c>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f013 feab 	bl	8014ca8 <siprintf>
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <main+0x62c>)
 8000f54:	443b      	add	r3, r7
 8000f56:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000f58:	4b44      	ldr	r3, [pc, #272]	; (800106c <main+0x62c>)
 8000f5a:	443b      	add	r3, r7
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4940      	ldr	r1, [pc, #256]	; (8001064 <main+0x624>)
 8000f62:	4439      	add	r1, r7
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	483d      	ldr	r0, [pc, #244]	; (800105c <main+0x61c>)
 8000f68:	f006 fccc 	bl	8007904 <HAL_UART_Transmit>
	  }


	  // Create instance of neural network
	  ai_err_ICU = ai_network_create(&icu_tflite, AI_NETWORK_DATA_CONFIG);
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <main+0x650>)
 8000f6e:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000f72:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f76:	443b      	add	r3, r7
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f007 fe14 	bl	8008ba8 <ai_network_create>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <main+0x640>)
 8000f84:	443b      	add	r3, r7
 8000f86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f8a:	601a      	str	r2, [r3, #0]
	  if (ai_err_ICU.type != AI_ERROR_NONE)
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	; (8001080 <main+0x640>)
 8000f8e:	443b      	add	r3, r7
 8000f90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d013      	beq.n	8000fc2 <main+0x582>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <main+0x624>)
 8000f9c:	443b      	add	r3, r7
 8000f9e:	4936      	ldr	r1, [pc, #216]	; (8001078 <main+0x638>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f013 fe81 	bl	8014ca8 <siprintf>
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <main+0x62c>)
 8000fa8:	443b      	add	r3, r7
 8000faa:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <main+0x62c>)
 8000fae:	443b      	add	r3, r7
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	492b      	ldr	r1, [pc, #172]	; (8001064 <main+0x624>)
 8000fb6:	4439      	add	r1, r7
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	4828      	ldr	r0, [pc, #160]	; (800105c <main+0x61c>)
 8000fbc:	f006 fca2 	bl	8007904 <HAL_UART_Transmit>
	    while(1);
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x580>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <main+0x624>)
 8000fc4:	443b      	add	r3, r7
 8000fc6:	492d      	ldr	r1, [pc, #180]	; (800107c <main+0x63c>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f013 fe6d 	bl	8014ca8 <siprintf>
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <main+0x62c>)
 8000fd0:	443b      	add	r3, r7
 8000fd2:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <main+0x62c>)
 8000fd6:	443b      	add	r3, r7
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4921      	ldr	r1, [pc, #132]	; (8001064 <main+0x624>)
 8000fde:	4439      	add	r1, r7
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	481e      	ldr	r0, [pc, #120]	; (800105c <main+0x61c>)
 8000fe4:	f006 fc8e 	bl	8007904 <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_network_init(icu_tflite, &ai_params_ICU))
 8000fe8:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000fec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x654>)
 8000ff4:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000ff8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ffc:	443b      	add	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f007 fde7 	bl	8008bd4 <ai_network_init>
 8001006:	4603      	mov	r3, r0
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d042      	beq.n	8001098 <main+0x658>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <main+0x624>)
 8001014:	443b      	add	r3, r7
 8001016:	491c      	ldr	r1, [pc, #112]	; (8001088 <main+0x648>)
 8001018:	4618      	mov	r0, r3
 800101a:	f013 fe45 	bl	8014ca8 <siprintf>
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <main+0x62c>)
 8001020:	443b      	add	r3, r7
 8001022:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <main+0x62c>)
 8001026:	443b      	add	r3, r7
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29a      	uxth	r2, r3
 800102c:	490d      	ldr	r1, [pc, #52]	; (8001064 <main+0x624>)
 800102e:	4439      	add	r1, r7
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <main+0x61c>)
 8001034:	f006 fc66 	bl	8007904 <HAL_UART_Transmit>
	    while(1);
 8001038:	e7fe      	b.n	8001038 <main+0x5f8>
 800103a:	bf00      	nop
 800103c:	08016f28 	.word	0x08016f28
 8001040:	40020400 	.word	0x40020400
 8001044:	00434241 	.word	0x00434241
 8001048:	fffeba84 	.word	0xfffeba84
 800104c:	20000000 	.word	0x20000000
 8001050:	08016f64 	.word	0x08016f64
 8001054:	20001564 	.word	0x20001564
 8001058:	20001560 	.word	0x20001560
 800105c:	200017b8 	.word	0x200017b8
 8001060:	2000155c 	.word	0x2000155c
 8001064:	00014488 	.word	0x00014488
 8001068:	08016f94 	.word	0x08016f94
 800106c:	0001457c 	.word	0x0001457c
 8001070:	000143f4 	.word	0x000143f4
 8001074:	00014484 	.word	0x00014484
 8001078:	08016fac 	.word	0x08016fac
 800107c:	08016fd4 	.word	0x08016fd4
 8001080:	00014580 	.word	0x00014580
 8001084:	00014364 	.word	0x00014364
 8001088:	08016fec 	.word	0x08016fec
 800108c:	08017010 	.word	0x08017010
 8001090:	fffece9c 	.word	0xfffece9c
 8001094:	fffece0c 	.word	0xfffece0c
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <main+0x6cc>)
 800109a:	443b      	add	r3, r7
 800109c:	491c      	ldr	r1, [pc, #112]	; (8001110 <main+0x6d0>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f013 fe02 	bl	8014ca8 <siprintf>
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <main+0x6d4>)
 80010a6:	443b      	add	r3, r7
 80010a8:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x6d4>)
 80010ac:	443b      	add	r3, r7
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4916      	ldr	r1, [pc, #88]	; (800110c <main+0x6cc>)
 80010b4:	4439      	add	r1, r7
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <main+0x6d8>)
 80010ba:	f006 fc23 	bl	8007904 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printf("Loop\r\n");
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <main+0x6dc>)
 80010c0:	f013 fdda 	bl	8014c78 <puts>

		work = (void*)malloc(sz_work);
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <main+0x6e0>)
 80010c6:	443b      	add	r3, r7
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f012 ffeb 	bl	80140a4 <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <main+0x6e4>)
 80010d2:	443a      	add	r2, r7
 80010d4:	6013      	str	r3, [r2, #0]
	  	count++;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <main+0x6e8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <main+0x6e8>)
 80010de:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <main+0x6e8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10b      	bne.n	8001100 <main+0x6c0>
	  		W25qxx_ReadBytes( readBytes, 0, sizeof(Target) );
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <main+0x6ec>)
 80010ea:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80010ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010f2:	443b      	add	r3, r7
 80010f4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fc62 	bl	80029c4 <W25qxx_ReadBytes>
	  	}

		  // Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <main+0x6f0>)
 8001104:	443a      	add	r2, r7
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e025      	b.n	8001156 <main+0x716>
 800110a:	bf00      	nop
 800110c:	00014488 	.word	0x00014488
 8001110:	08017010 	.word	0x08017010
 8001114:	0001457c 	.word	0x0001457c
 8001118:	200017b8 	.word	0x200017b8
 800111c:	08017024 	.word	0x08017024
 8001120:	0001455c 	.word	0x0001455c
 8001124:	00014558 	.word	0x00014558
 8001128:	200015a0 	.word	0x200015a0
 800112c:	fffeba84 	.word	0xfffeba84
 8001130:	00014574 	.word	0x00014574
			{
			  ((ai_float *)in_data)[i] = (ai_float)1.0f;
 8001134:	4b98      	ldr	r3, [pc, #608]	; (8001398 <main+0x958>)
 8001136:	443b      	add	r3, r7
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4a97      	ldr	r2, [pc, #604]	; (800139c <main+0x95c>)
 800113e:	443a      	add	r2, r7
 8001140:	4413      	add	r3, r2
 8001142:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001146:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001148:	4b93      	ldr	r3, [pc, #588]	; (8001398 <main+0x958>)
 800114a:	443b      	add	r3, r7
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a91      	ldr	r2, [pc, #580]	; (8001398 <main+0x958>)
 8001152:	443a      	add	r2, r7
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b90      	ldr	r3, [pc, #576]	; (8001398 <main+0x958>)
 8001158:	443b      	add	r3, r7
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0e9      	beq.n	8001134 <main+0x6f4>
			}

			// Get current timestamp
			timestamp = htim13.Instance->CNT;
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <main+0x960>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	4a8f      	ldr	r2, [pc, #572]	; (80013a4 <main+0x964>)
 8001168:	443a      	add	r2, r7
 800116a:	6013      	str	r3, [r2, #0]

			// Perform inference
			nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 800116c:	4b8e      	ldr	r3, [pc, #568]	; (80013a8 <main+0x968>)
 800116e:	443b      	add	r3, r7
 8001170:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8d      	ldr	r2, [pc, #564]	; (80013ac <main+0x96c>)
 8001178:	443a      	add	r2, r7
 800117a:	498d      	ldr	r1, [pc, #564]	; (80013b0 <main+0x970>)
 800117c:	4439      	add	r1, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f007 ff24 	bl	8008fcc <ai_sine_model_run>
 8001184:	4b8b      	ldr	r3, [pc, #556]	; (80013b4 <main+0x974>)
 8001186:	443b      	add	r3, r7
 8001188:	6018      	str	r0, [r3, #0]
			if (nbatch != 1) {
 800118a:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <main+0x974>)
 800118c:	443b      	add	r3, r7
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d012      	beq.n	80011ba <main+0x77a>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001194:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <main+0x978>)
 8001196:	443b      	add	r3, r7
 8001198:	4988      	ldr	r1, [pc, #544]	; (80013bc <main+0x97c>)
 800119a:	4618      	mov	r0, r3
 800119c:	f013 fd84 	bl	8014ca8 <siprintf>
 80011a0:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <main+0x980>)
 80011a2:	443b      	add	r3, r7
 80011a4:	6018      	str	r0, [r3, #0]
			  HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80011a6:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <main+0x980>)
 80011a8:	443b      	add	r3, r7
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4982      	ldr	r1, [pc, #520]	; (80013b8 <main+0x978>)
 80011b0:	4439      	add	r1, r7
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	4883      	ldr	r0, [pc, #524]	; (80013c4 <main+0x984>)
 80011b6:	f006 fba5 	bl	8007904 <HAL_UART_Transmit>
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 80011ba:	4b83      	ldr	r3, [pc, #524]	; (80013c8 <main+0x988>)
 80011bc:	443b      	add	r3, r7
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a82      	ldr	r2, [pc, #520]	; (80013cc <main+0x98c>)
 80011c2:	443a      	add	r2, r7
 80011c4:	6013      	str	r3, [r2, #0]

			// Print output of neural network along with inference time (microseconds)
			buf_len = sprintf(buf,
 80011c6:	4b81      	ldr	r3, [pc, #516]	; (80013cc <main+0x98c>)
 80011c8:	443b      	add	r3, r7
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
							  "Output: %f | Duration: %lu\r\n",
							  y_val,
							  htim13.Instance->CNT - timestamp);
 80011d2:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <main+0x960>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			buf_len = sprintf(buf,
 80011d8:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <main+0x964>)
 80011da:	443b      	add	r3, r7
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4875      	ldr	r0, [pc, #468]	; (80013b8 <main+0x978>)
 80011e2:	4438      	add	r0, r7
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	ec53 2b17 	vmov	r2, r3, d7
 80011ea:	4979      	ldr	r1, [pc, #484]	; (80013d0 <main+0x990>)
 80011ec:	f013 fd5c 	bl	8014ca8 <siprintf>
 80011f0:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <main+0x980>)
 80011f2:	443b      	add	r3, r7
 80011f4:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80011f6:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <main+0x980>)
 80011f8:	443b      	add	r3, r7
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	496e      	ldr	r1, [pc, #440]	; (80013b8 <main+0x978>)
 8001200:	4439      	add	r1, r7
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	486f      	ldr	r0, [pc, #444]	; (80013c4 <main+0x984>)
 8001206:	f006 fb7d 	bl	8007904 <HAL_UART_Transmit>

			// Wait before doing it again
			HAL_Delay(500);
 800120a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120e:	f003 f963 	bl	80044d8 <HAL_Delay>


	  	handshakeCAM = 0;
 8001212:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <main+0x994>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	  	 // 	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
	  	  //		HAL_UART_Receive(&huart3, (uint8_t *) &handshakeCAM, 1, 1000);												/* Wait for CAM to command ICU, expects 0x29*/
	  	  //		__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_RXNE);

	  	  		//if (handshakeCAM == 0x29) {
	  	  			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 8001218:	496f      	ldr	r1, [pc, #444]	; (80013d8 <main+0x998>)
 800121a:	4870      	ldr	r0, [pc, #448]	; (80013dc <main+0x99c>)
 800121c:	f013 fd44 	bl	8014ca8 <siprintf>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <main+0x9a0>)
 8001226:	701a      	strb	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001228:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <main+0x9a0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b29a      	uxth	r2, r3
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	496a      	ldr	r1, [pc, #424]	; (80013dc <main+0x99c>)
 8001232:	4864      	ldr	r0, [pc, #400]	; (80013c4 <main+0x984>)
 8001234:	f006 fb66 	bl	8007904 <HAL_UART_Transmit>

	  	  			HAL_Delay(1000);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f003 f94c 	bl	80044d8 <HAL_Delay>
	  	  			devid.fp=0;
 8001240:	2300      	movs	r3, #0
 8001242:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <main+0x9a4>)
 8001244:	443a      	add	r2, r7
 8001246:	6013      	str	r3, [r2, #0]
//	  	  			devid.fp= Space;

	  				StringLength=sprintf(txString,"\r\n");
 8001248:	4967      	ldr	r1, [pc, #412]	; (80013e8 <main+0x9a8>)
 800124a:	4864      	ldr	r0, [pc, #400]	; (80013dc <main+0x99c>)
 800124c:	f013 fd2c 	bl	8014ca8 <siprintf>
 8001250:	4603      	mov	r3, r0
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <main+0x9a0>)
 8001256:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001258:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <main+0x9a0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29a      	uxth	r2, r3
 800125e:	2364      	movs	r3, #100	; 0x64
 8001260:	495e      	ldr	r1, [pc, #376]	; (80013dc <main+0x99c>)
 8001262:	4858      	ldr	r0, [pc, #352]	; (80013c4 <main+0x984>)
 8001264:	f006 fb4e 	bl	8007904 <HAL_UART_Transmit>

	  	//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

	  	  			res = jd_prepare(&jdec, in_func, work, sz_work, &devid);													/* Prepare to decompress */
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <main+0x9ac>)
 800126a:	443b      	add	r3, r7
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	485f      	ldr	r0, [pc, #380]	; (80013f0 <main+0x9b0>)
 8001272:	4438      	add	r0, r7
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <main+0x9a4>)
 8001276:	443b      	add	r3, r7
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4613      	mov	r3, r2
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <main+0x9b4>)
 800127e:	443a      	add	r2, r7
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	495d      	ldr	r1, [pc, #372]	; (80013f8 <main+0x9b8>)
 8001284:	f002 fd9a 	bl	8003dbc <jd_prepare>
 8001288:	4603      	mov	r3, r0
 800128a:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <main+0x9bc>)
 800128c:	443a      	add	r2, r7
 800128e:	7013      	strb	r3, [r2, #0]
	  	  			if (res == JDR_OK)
 8001290:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <main+0x9bc>)
 8001292:	443b      	add	r3, r7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 80e2 	bne.w	8001460 <main+0xa20>
	  	  			{																					/* Ready to decompress. Image info is available here. */
	  	  				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 800129c:	4b58      	ldr	r3, [pc, #352]	; (8001400 <main+0x9c0>)
 800129e:	443b      	add	r3, r7
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <main+0x9c4>)
 80012a6:	443b      	add	r3, r7
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	4b56      	ldr	r3, [pc, #344]	; (8001408 <main+0x9c8>)
 80012ae:	443b      	add	r3, r7
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <main+0x9ac>)
 80012b6:	443b      	add	r3, r7
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	4952      	ldr	r1, [pc, #328]	; (800140c <main+0x9cc>)
 80012c4:	4845      	ldr	r0, [pc, #276]	; (80013dc <main+0x99c>)
 80012c6:	f013 fcef 	bl	8014ca8 <siprintf>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <main+0x9a0>)
 80012d0:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <main+0x9a0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	4940      	ldr	r1, [pc, #256]	; (80013dc <main+0x99c>)
 80012dc:	4839      	ldr	r0, [pc, #228]	; (80013c4 <main+0x984>)
 80012de:	f006 fb11 	bl	8007904 <HAL_UART_Transmit>

	  	  				image_size = N_BPP  * jdec.width * jdec.height;
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <main+0x9c0>)
 80012e4:	443b      	add	r3, r7
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	4a46      	ldr	r2, [pc, #280]	; (8001404 <main+0x9c4>)
 80012ea:	443a      	add	r2, r7
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <main+0x9d0>)
 80012f4:	443a      	add	r2, r7
 80012f6:	6013      	str	r3, [r2, #0]
	  	  				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <main+0x9d0>)
 80012fa:	443b      	add	r3, r7
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f012 fed0 	bl	80140a4 <malloc>
 8001304:	4603      	mov	r3, r0
 8001306:	4a43      	ldr	r2, [pc, #268]	; (8001414 <main+0x9d4>)
 8001308:	443a      	add	r2, r7
 800130a:	6013      	str	r3, [r2, #0]
	  	  		        devid.wfbuf = jdec.width;
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <main+0x9c0>)
 800130e:	443b      	add	r3, r7
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	4a41      	ldr	r2, [pc, #260]	; (8001418 <main+0x9d8>)
 8001314:	443a      	add	r2, r7
 8001316:	8013      	strh	r3, [r2, #0]

	  					Width = jdec.width;
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <main+0x9c0>)
 800131a:	443b      	add	r3, r7
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <main+0x9dc>)
 8001322:	601a      	str	r2, [r3, #0]
	  					Height = jdec.height;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <main+0x9c4>)
 8001326:	443b      	add	r3, r7
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <main+0x9e0>)
 800132e:	601a      	str	r2, [r3, #0]

	  	  				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 8001330:	493c      	ldr	r1, [pc, #240]	; (8001424 <main+0x9e4>)
 8001332:	482a      	ldr	r0, [pc, #168]	; (80013dc <main+0x99c>)
 8001334:	f013 fcb8 	bl	8014ca8 <siprintf>
 8001338:	4603      	mov	r3, r0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <main+0x9a0>)
 800133e:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <main+0x9a0>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b29a      	uxth	r2, r3
 8001346:	2364      	movs	r3, #100	; 0x64
 8001348:	4924      	ldr	r1, [pc, #144]	; (80013dc <main+0x99c>)
 800134a:	481e      	ldr	r0, [pc, #120]	; (80013c4 <main+0x984>)
 800134c:	f006 fada 	bl	8007904 <HAL_UART_Transmit>

	  	  				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <main+0x9e8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <main+0x9b0>)
 8001358:	443b      	add	r3, r7
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <main+0x9ec>)
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ffe3 	bl	8004328 <jd_decomp>
 8001362:	4603      	mov	r3, r0
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <main+0x9bc>)
 8001366:	443a      	add	r2, r7
 8001368:	7013      	strb	r3, [r2, #0]
	  	  				if (res == JDR_OK) {
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <main+0x9bc>)
 800136c:	443b      	add	r3, r7
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d160      	bne.n	8001436 <main+0x9f6>
	  	  					StringLength=sprintf(txString,"Decompression - Success\r\n");
 8001374:	492e      	ldr	r1, [pc, #184]	; (8001430 <main+0x9f0>)
 8001376:	4819      	ldr	r0, [pc, #100]	; (80013dc <main+0x99c>)
 8001378:	f013 fc96 	bl	8014ca8 <siprintf>
 800137c:	4603      	mov	r3, r0
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <main+0x9a0>)
 8001382:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <main+0x9a0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b29a      	uxth	r2, r3
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <main+0x99c>)
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <main+0x984>)
 8001390:	f006 fab8 	bl	8007904 <HAL_UART_Transmit>
 8001394:	e04e      	b.n	8001434 <main+0x9f4>
 8001396:	bf00      	nop
 8001398:	00014574 	.word	0x00014574
 800139c:	000143fc 	.word	0x000143fc
 80013a0:	20001720 	.word	0x20001720
 80013a4:	00014554 	.word	0x00014554
 80013a8:	00014580 	.word	0x00014580
 80013ac:	000143ac 	.word	0x000143ac
 80013b0:	000143d8 	.word	0x000143d8
 80013b4:	00014550 	.word	0x00014550
 80013b8:	00014488 	.word	0x00014488
 80013bc:	0801702c 	.word	0x0801702c
 80013c0:	0001457c 	.word	0x0001457c
 80013c4:	200017b8 	.word	0x200017b8
 80013c8:	000143f8 	.word	0x000143f8
 80013cc:	0001454c 	.word	0x0001454c
 80013d0:	08017050 	.word	0x08017050
 80013d4:	20001596 	.word	0x20001596
 80013d8:	08017070 	.word	0x08017070
 80013dc:	20001564 	.word	0x20001564
 80013e0:	20001560 	.word	0x20001560
 80013e4:	000144bc 	.word	0x000144bc
 80013e8:	08017094 	.word	0x08017094
 80013ec:	0001455c 	.word	0x0001455c
 80013f0:	000144c8 	.word	0x000144c8
 80013f4:	00014558 	.word	0x00014558
 80013f8:	08000929 	.word	0x08000929
 80013fc:	0001454b 	.word	0x0001454b
 8001400:	000144e4 	.word	0x000144e4
 8001404:	000144e6 	.word	0x000144e6
 8001408:	00014534 	.word	0x00014534
 800140c:	08017098 	.word	0x08017098
 8001410:	00014564 	.word	0x00014564
 8001414:	000144c0 	.word	0x000144c0
 8001418:	000144c4 	.word	0x000144c4
 800141c:	20001598 	.word	0x20001598
 8001420:	2000159c 	.word	0x2000159c
 8001424:	080170e4 	.word	0x080170e4
 8001428:	2000155c 	.word	0x2000155c
 800142c:	080009b9 	.word	0x080009b9
 8001430:	08017114 	.word	0x08017114
 8001434:	e028      	b.n	8001488 <main+0xa48>
	  	  				}
	  	  				else{
	  	  					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 8001436:	4b93      	ldr	r3, [pc, #588]	; (8001684 <main+0xc44>)
 8001438:	443b      	add	r3, r7
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4992      	ldr	r1, [pc, #584]	; (8001688 <main+0xc48>)
 8001440:	4892      	ldr	r0, [pc, #584]	; (800168c <main+0xc4c>)
 8001442:	f013 fc31 	bl	8014ca8 <siprintf>
 8001446:	4603      	mov	r3, r0
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b91      	ldr	r3, [pc, #580]	; (8001690 <main+0xc50>)
 800144c:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800144e:	4b90      	ldr	r3, [pc, #576]	; (8001690 <main+0xc50>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b29a      	uxth	r2, r3
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	498d      	ldr	r1, [pc, #564]	; (800168c <main+0xc4c>)
 8001458:	488e      	ldr	r0, [pc, #568]	; (8001694 <main+0xc54>)
 800145a:	f006 fa53 	bl	8007904 <HAL_UART_Transmit>
 800145e:	e013      	b.n	8001488 <main+0xa48>
	  	  				}
	  	  			}
	  	  			else{
	  	  			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 8001460:	4b88      	ldr	r3, [pc, #544]	; (8001684 <main+0xc44>)
 8001462:	443b      	add	r3, r7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	498b      	ldr	r1, [pc, #556]	; (8001698 <main+0xc58>)
 800146a:	4888      	ldr	r0, [pc, #544]	; (800168c <main+0xc4c>)
 800146c:	f013 fc1c 	bl	8014ca8 <siprintf>
 8001470:	4603      	mov	r3, r0
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b86      	ldr	r3, [pc, #536]	; (8001690 <main+0xc50>)
 8001476:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001478:	4b85      	ldr	r3, [pc, #532]	; (8001690 <main+0xc50>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b29a      	uxth	r2, r3
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	4982      	ldr	r1, [pc, #520]	; (800168c <main+0xc4c>)
 8001482:	4884      	ldr	r0, [pc, #528]	; (8001694 <main+0xc54>)
 8001484:	f006 fa3e 	bl	8007904 <HAL_UART_Transmit>
	  	  			}

	  	  			HAL_Delay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f003 f824 	bl	80044d8 <HAL_Delay>
//					ai_input_ICU[0].data = AI_HANDLE_PTR(image);
////	  				ai_output_ICU[0].n_batches = 1;
//					ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);

	  	  			// Image Classification Section
	  	  		    for (uint32_t  ii = 0; ii < AI_NETWORK_IN_1_SIZE; ii++)
 8001490:	2300      	movs	r3, #0
 8001492:	4a82      	ldr	r2, [pc, #520]	; (800169c <main+0xc5c>)
 8001494:	443a      	add	r2, r7
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e019      	b.n	80014ce <main+0xa8e>
	  	  		    {
//	  	  		    	image[ii] = *(devid.fbuf + ii);
	  	  		        ((ai_u8 *)image)[ii] = *(devid.fbuf + ii);
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <main+0xc60>)
 800149c:	443b      	add	r3, r7
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <main+0xc5c>)
 80014a2:	443b      	add	r3, r7
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	441a      	add	r2, r3
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <main+0xc64>)
 80014aa:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80014ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014b2:	443b      	add	r3, r7
 80014b4:	4979      	ldr	r1, [pc, #484]	; (800169c <main+0xc5c>)
 80014b6:	4439      	add	r1, r7
 80014b8:	6809      	ldr	r1, [r1, #0]
 80014ba:	440b      	add	r3, r1
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	701a      	strb	r2, [r3, #0]
	  	  		    for (uint32_t  ii = 0; ii < AI_NETWORK_IN_1_SIZE; ii++)
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <main+0xc5c>)
 80014c2:	443b      	add	r3, r7
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a74      	ldr	r2, [pc, #464]	; (800169c <main+0xc5c>)
 80014ca:	443a      	add	r2, r7
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <main+0xc5c>)
 80014d0:	443b      	add	r3, r7
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80014d8:	d3df      	bcc.n	800149a <main+0xa5a>
	  	  		    }


	  	  		// Get current timestamp
	  	  		timestamp_ICU = htim14.Instance->CNT;
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <main+0xc68>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	4a72      	ldr	r2, [pc, #456]	; (80016ac <main+0xc6c>)
 80014e2:	443a      	add	r2, r7
 80014e4:	6013      	str	r3, [r2, #0]




	  	  		    // Perform inference
	  	  		    nbatch_ICU = ai_network_run(icu_tflite, &ai_input_ICU[0], &ai_output_ICU[0]);
 80014e6:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80014ea:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <main+0xc70>)
 80014f2:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <main+0xc74>)
 80014f4:	4413      	add	r3, r2
 80014f6:	19da      	adds	r2, r3, r7
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <main+0xc78>)
 80014fa:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80014fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001502:	443b      	add	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	f007 fba1 	bl	8008c4c <ai_network_run>
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <main+0xc7c>)
 800150c:	443b      	add	r3, r7
 800150e:	6018      	str	r0, [r3, #0]

	  	  		    if (nbatch_ICU != 1) {
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <main+0xc7c>)
 8001512:	443b      	add	r3, r7
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d016      	beq.n	8001548 <main+0xb08>
	  	  		      buf_len = sprintf(buf, "Error: could not run inference. nbatch_ICU=%lu\r\n",(int32_t)nbatch_ICU);
 800151a:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <main+0xc80>)
 800151c:	443b      	add	r3, r7
 800151e:	4a67      	ldr	r2, [pc, #412]	; (80016bc <main+0xc7c>)
 8001520:	443a      	add	r2, r7
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4967      	ldr	r1, [pc, #412]	; (80016c4 <main+0xc84>)
 8001526:	4618      	mov	r0, r3
 8001528:	f013 fbbe 	bl	8014ca8 <siprintf>
 800152c:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <main+0xc88>)
 800152e:	443b      	add	r3, r7
 8001530:	6018      	str	r0, [r3, #0]
	  	  		      HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <main+0xc88>)
 8001534:	443b      	add	r3, r7
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29a      	uxth	r2, r3
 800153a:	4961      	ldr	r1, [pc, #388]	; (80016c0 <main+0xc80>)
 800153c:	4439      	add	r1, r7
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	4854      	ldr	r0, [pc, #336]	; (8001694 <main+0xc54>)
 8001542:	f006 f9df 	bl	8007904 <HAL_UART_Transmit>
 8001546:	e012      	b.n	800156e <main+0xb2e>
	  	  		    }
	  	  		    else
	  	  		    {
	  	  		  	    buf_len = sprintf(buf, "\r\nRunning ICU tflite done!\r\n");
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <main+0xc80>)
 800154a:	443b      	add	r3, r7
 800154c:	495f      	ldr	r1, [pc, #380]	; (80016cc <main+0xc8c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f013 fbaa 	bl	8014ca8 <siprintf>
 8001554:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <main+0xc88>)
 8001556:	443b      	add	r3, r7
 8001558:	6018      	str	r0, [r3, #0]
	  	  		  	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <main+0xc88>)
 800155c:	443b      	add	r3, r7
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29a      	uxth	r2, r3
 8001562:	4957      	ldr	r1, [pc, #348]	; (80016c0 <main+0xc80>)
 8001564:	4439      	add	r1, r7
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	484a      	ldr	r0, [pc, #296]	; (8001694 <main+0xc54>)
 800156a:	f006 f9cb 	bl	8007904 <HAL_UART_Transmit>
	  	  		    }

	  	  		    float max_val = -1;
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <main+0xc90>)
 8001570:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <main+0xc94>)
 8001572:	443a      	add	r2, r7
 8001574:	6013      	str	r3, [r2, #0]

	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <main+0xc98>)
 800157a:	443a      	add	r2, r7
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e049      	b.n	8001614 <main+0xbd4>
	  	  		    {
	  	  		        if(max_val < out_data_ICU[i])
 8001580:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001584:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <main+0xc98>)
 800158a:	443b      	add	r3, r7
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	f993 3000 	ldrsb.w	r3, [r3]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <main+0xc94>)
 800159e:	443b      	add	r3, r7
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d52b      	bpl.n	8001606 <main+0xbc6>
	  	  		        {
	  	  		            max_val = out_data_ICU[i];
 80015ae:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80015b2:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <main+0xc98>)
 80015b8:	443b      	add	r3, r7
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	f993 3000 	ldrsb.w	r3, [r3]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <main+0xc94>)
 80015cc:	443b      	add	r3, r7
 80015ce:	edc3 7a00 	vstr	s15, [r3]
	  	  		            prediction = i;
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <main+0xc98>)
 80015d4:	443b      	add	r3, r7
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a40      	ldr	r2, [pc, #256]	; (80016dc <main+0xc9c>)
 80015da:	443a      	add	r2, r7
 80015dc:	7013      	strb	r3, [r2, #0]

	  						StringLength=sprintf(txString,"\r\n\nIndex:  %ld ", (long)prediction);
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <main+0xc9c>)
 80015e0:	443b      	add	r3, r7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	493e      	ldr	r1, [pc, #248]	; (80016e0 <main+0xca0>)
 80015e8:	4828      	ldr	r0, [pc, #160]	; (800168c <main+0xc4c>)
 80015ea:	f013 fb5d 	bl	8014ca8 <siprintf>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <main+0xc50>)
 80015f4:	701a      	strb	r2, [r3, #0]
	  						HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <main+0xc50>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	4923      	ldr	r1, [pc, #140]	; (800168c <main+0xc4c>)
 8001600:	4824      	ldr	r0, [pc, #144]	; (8001694 <main+0xc54>)
 8001602:	f006 f97f 	bl	8007904 <HAL_UART_Transmit>
	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <main+0xc98>)
 8001608:	443b      	add	r3, r7
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <main+0xc98>)
 8001610:	443a      	add	r2, r7
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <main+0xc98>)
 8001616:	443b      	add	r3, r7
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	ddb0      	ble.n	8001580 <main+0xb40>
	  	  		    }

	  	  		    prediction = prediction;

	  	  		// Print output of neural network along with inference time (microseconds)
	  	  		StringLength = sprintf(txString,"Output: %f | Duration: %lu\r\n", prediction, htim14.Instance->CNT - timestamp_ICU);
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <main+0xc9c>)
 8001620:	443b      	add	r3, r7
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <main+0xc68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <main+0xc6c>)
 800162c:	443b      	add	r3, r7
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	460a      	mov	r2, r1
 8001634:	492b      	ldr	r1, [pc, #172]	; (80016e4 <main+0xca4>)
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <main+0xc4c>)
 8001638:	f013 fb36 	bl	8014ca8 <siprintf>
 800163c:	4603      	mov	r3, r0
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <main+0xc50>)
 8001642:	701a      	strb	r2, [r3, #0]
	  	  		HAL_UART_Transmit(&debugPort, (uint8_t *)txString, buf_len, 100);
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <main+0xc88>)
 8001646:	443b      	add	r3, r7
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29a      	uxth	r2, r3
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	490f      	ldr	r1, [pc, #60]	; (800168c <main+0xc4c>)
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <main+0xc54>)
 8001652:	f006 f957 	bl	8007904 <HAL_UART_Transmit>


	  	  		    if (prediction == 1)
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <main+0xc9c>)
 8001658:	443b      	add	r3, r7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d145      	bne.n	80016ec <main+0xcac>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Space \r\n");
 8001660:	4921      	ldr	r1, [pc, #132]	; (80016e8 <main+0xca8>)
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <main+0xc4c>)
 8001664:	f013 fb20 	bl	8014ca8 <siprintf>
 8001668:	4603      	mov	r3, r0
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <main+0xc50>)
 800166e:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <main+0xc50>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	4904      	ldr	r1, [pc, #16]	; (800168c <main+0xc4c>)
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <main+0xc54>)
 800167c:	f006 f942 	bl	8007904 <HAL_UART_Transmit>
 8001680:	e05a      	b.n	8001738 <main+0xcf8>
 8001682:	bf00      	nop
 8001684:	0001454b 	.word	0x0001454b
 8001688:	08017130 	.word	0x08017130
 800168c:	20001564 	.word	0x20001564
 8001690:	20001560 	.word	0x20001560
 8001694:	200017b8 	.word	0x200017b8
 8001698:	08017150 	.word	0x08017150
 800169c:	00014570 	.word	0x00014570
 80016a0:	000144c0 	.word	0x000144c0
 80016a4:	fffecea4 	.word	0xfffecea4
 80016a8:	2000176c 	.word	0x2000176c
 80016ac:	00014544 	.word	0x00014544
 80016b0:	fffece54 	.word	0xfffece54
 80016b4:	00014580 	.word	0x00014580
 80016b8:	fffece80 	.word	0xfffece80
 80016bc:	00014540 	.word	0x00014540
 80016c0:	00014488 	.word	0x00014488
 80016c4:	08017184 	.word	0x08017184
 80016c8:	0001457c 	.word	0x0001457c
 80016cc:	080171b8 	.word	0x080171b8
 80016d0:	bf800000 	.word	0xbf800000
 80016d4:	0001456c 	.word	0x0001456c
 80016d8:	00014568 	.word	0x00014568
 80016dc:	0001457b 	.word	0x0001457b
 80016e0:	080171d8 	.word	0x080171d8
 80016e4:	08017050 	.word	0x08017050
 80016e8:	080171e8 	.word	0x080171e8
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Space_ICU, 1, 100);
	  	  		    }
	  	  		    else if (prediction == 0)
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <main+0xd24>)
 80016ee:	443b      	add	r3, r7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d110      	bne.n	8001718 <main+0xcd8>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Earth \r\n");
 80016f6:	491c      	ldr	r1, [pc, #112]	; (8001768 <main+0xd28>)
 80016f8:	481c      	ldr	r0, [pc, #112]	; (800176c <main+0xd2c>)
 80016fa:	f013 fad5 	bl	8014ca8 <siprintf>
 80016fe:	4603      	mov	r3, r0
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <main+0xd30>)
 8001704:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <main+0xd30>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	2364      	movs	r3, #100	; 0x64
 800170e:	4917      	ldr	r1, [pc, #92]	; (800176c <main+0xd2c>)
 8001710:	4818      	ldr	r0, [pc, #96]	; (8001774 <main+0xd34>)
 8001712:	f006 f8f7 	bl	8007904 <HAL_UART_Transmit>
 8001716:	e00f      	b.n	8001738 <main+0xcf8>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Earth_ICU, 1, 100);
	  	  		    }
	  	  		    else
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nError Prediction \r\n");
 8001718:	4917      	ldr	r1, [pc, #92]	; (8001778 <main+0xd38>)
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <main+0xd2c>)
 800171c:	f013 fac4 	bl	8014ca8 <siprintf>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <main+0xd30>)
 8001726:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <main+0xd30>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b29a      	uxth	r2, r3
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <main+0xd2c>)
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <main+0xd34>)
 8001734:	f006 f8e6 	bl	8007904 <HAL_UART_Transmit>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Error_ICU, 1, 100);
	  	  		    }



	  	  	  	if (count == 10000) {
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <main+0xd3c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <main+0xd0a>
	  	  	  		count = 0;																									/* Reset to zero to prevent overflowing bugs */
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <main+0xd3c>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	  	  	  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  		free(work);   /* Discard work area */
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <main+0xd40>)
 800174c:	443b      	add	r3, r7
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	f012 fcb0 	bl	80140b4 <free>
	  	  		free(devid.fbuf);
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <main+0xd44>)
 8001756:	443b      	add	r3, r7
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f012 fcaa 	bl	80140b4 <free>
  {
 8001760:	e4ad      	b.n	80010be <main+0x67e>
 8001762:	bf00      	nop
 8001764:	0001457b 	.word	0x0001457b
 8001768:	08017200 	.word	0x08017200
 800176c:	20001564 	.word	0x20001564
 8001770:	20001560 	.word	0x20001560
 8001774:	200017b8 	.word	0x200017b8
 8001778:	08017218 	.word	0x08017218
 800177c:	200015a0 	.word	0x200015a0
 8001780:	00014558 	.word	0x00014558
 8001784:	000144c0 	.word	0x000144c0

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2234      	movs	r2, #52	; 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fcbc 	bl	8014114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <SystemClock_Config+0xd4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <SystemClock_Config+0xd4>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <SystemClock_Config+0xd4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <SystemClock_Config+0xd8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	; (8001860 <SystemClock_Config+0xd8>)
 80017ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <SystemClock_Config+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2310      	movs	r3, #16
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f0:	2308      	movs	r3, #8
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80017f4:	23d8      	movs	r3, #216	; 0xd8
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001800:	2302      	movs	r3, #2
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fed9 	bl	80055c0 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001814:	f000 f826 	bl	8001864 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001818:	f003 fdc0 	bl	800539c <HAL_PWREx_EnableOverDrive>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001822:	f000 f81f 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	230f      	movs	r3, #15
 8001828:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182a:	2302      	movs	r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001832:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2107      	movs	r1, #7
 8001844:	4618      	mov	r0, r3
 8001846:	f004 f969 	bl	8005b1c <HAL_RCC_ClockConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001850:	f000 f808 	bl	8001864 <Error_Handler>
  }
}
 8001854:	bf00      	nop
 8001856:	3750      	adds	r7, #80	; 0x50
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_QUADSPI_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 8001886:	2201      	movs	r2, #1
 8001888:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 8001892:	2201      	movs	r2, #1
 8001894:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_QUADSPI_Init+0x50>)
 80018b0:	f003 fdc4 	bl	800543c <HAL_QSPI_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f7ff ffd3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200015a4 	.word	0x200015a4
 80018c8:	a0001000 	.word	0xa0001000

080018cc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <HAL_QSPI_MspInit+0xf4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d164      	bne.n	80019b8 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6393      	str	r3, [r2, #56]	; 0x38
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_QSPI_MspInit+0xf8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23c0      	movs	r3, #192	; 0xc0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001946:	2309      	movs	r3, #9
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	481d      	ldr	r0, [pc, #116]	; (80019c8 <HAL_QSPI_MspInit+0xfc>)
 8001952:	f003 fb5d 	bl	8005010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001968:	230a      	movs	r3, #10
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <HAL_QSPI_MspInit+0xfc>)
 8001974:	f003 fb4c 	bl	8005010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001978:	2304      	movs	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001988:	2309      	movs	r3, #9
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	480e      	ldr	r0, [pc, #56]	; (80019cc <HAL_QSPI_MspInit+0x100>)
 8001994:	f003 fb3c 	bl	8005010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019a8:	230a      	movs	r3, #10
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <HAL_QSPI_MspInit+0x100>)
 80019b4:	f003 fb2c 	bl	8005010 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	a0001000 	.word	0xa0001000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40020400 	.word	0x40020400

080019d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <MX_SPI1_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_SPI1_Init+0x74>)
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a06:	2210      	movs	r2, #16
 8001a08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_SPI1_Init+0x74>)
 8001a30:	f004 fec2 	bl	80067b8 <HAL_SPI_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f7ff ff13 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200015f0 	.word	0x200015f0
 8001a48:	40013000 	.word	0x40013000

08001a4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <MX_SPI3_Init+0x6c>)
 8001a54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI3_Init+0x68>)
 8001aa2:	f004 fe89 	bl	80067b8 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001aac:	f7ff feda 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20001654 	.word	0x20001654
 8001ab8:	40003c00 	.word	0x40003c00

08001abc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_SPI4_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ad6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ada:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001af2:	2228      	movs	r2, #40	; 0x28
 8001af4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_SPI4_Init+0x74>)
 8001b1c:	f004 fe4c 	bl	80067b8 <HAL_SPI_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f7ff fe9d 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200016b8 	.word	0x200016b8
 8001b34:	40013400 	.word	0x40013400

08001b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_SPI_MspInit+0x170>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d128      	bne.n	8001bac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23e0      	movs	r3, #224	; 0xe0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4842      	ldr	r0, [pc, #264]	; (8001cb0 <HAL_SPI_MspInit+0x178>)
 8001ba6:	f003 fa33 	bl	8005010 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001baa:	e078      	b.n	8001c9e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <HAL_SPI_MspInit+0x17c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d146      	bne.n	8001c44 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a36      	ldr	r2, [pc, #216]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c10:	2306      	movs	r3, #6
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <HAL_SPI_MspInit+0x178>)
 8001c1c:	f003 f9f8 	bl	8005010 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c32:	2306      	movs	r3, #6
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481e      	ldr	r0, [pc, #120]	; (8001cb8 <HAL_SPI_MspInit+0x180>)
 8001c3e:	f003 f9e7 	bl	8005010 <HAL_GPIO_Init>
}
 8001c42:	e02c      	b.n	8001c9e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_SPI_MspInit+0x184>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d127      	bne.n	8001c9e <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_SPI_MspInit+0x174>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4619      	mov	r1, r3
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_SPI_MspInit+0x188>)
 8001c9a:	f003 f9b9 	bl	8005010 <HAL_GPIO_Init>
}
 8001c9e:	bf00      	nop
 8001ca0:	3738      	adds	r7, #56	; 0x38
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40003c00 	.word	0x40003c00
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40013400 	.word	0x40013400
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x44>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x44>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f002 fb9a 	bl	8004498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART1_IRQHandler+0x10>)
 8001d6e:	f005 fe4d 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200017b8 	.word	0x200017b8

08001d7c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA2_Stream5_IRQHandler+0x10>)
 8001d82:	f002 ff09 	bl	8004b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200018c8 	.word	0x200018c8

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f012 f946 	bl	8014050 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20080000 	.word	0x20080000
 8001df0:	00000800 	.word	0x00000800
 8001df4:	2000171c 	.word	0x2000171c
 8001df8:	20001aa0 	.word	0x20001aa0

08001dfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <SystemInit+0x28>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <SystemInit+0x28>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SystemInit+0x28>)
 8001e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e16:	609a      	str	r2, [r3, #8]
#endif
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <MX_TIM13_Init+0x44>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e34:	224f      	movs	r2, #79	; 0x4f
 8001e36:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e44:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_TIM13_Init+0x40>)
 8001e54:	f005 fc10 	bl	8007678 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001e5e:	f7ff fd01 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20001720 	.word	0x20001720
 8001e6c:	40001c00 	.word	0x40001c00

08001e70 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <MX_TIM14_Init+0x44>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e7c:	224f      	movs	r2, #79	; 0x4f
 8001e7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_TIM14_Init+0x40>)
 8001e9c:	f005 fbec 	bl	8007678 <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001ea6:	f7ff fcdd 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000176c 	.word	0x2000176c
 8001eb4:	40002000 	.word	0x40002000

08001eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_TIM_Base_MspInit+0x5c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001ee2:	e010      	b.n	8001f06 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_TIM_Base_MspInit+0x64>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10b      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_TIM_Base_MspInit+0x60>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40001c00 	.word	0x40001c00
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40002000 	.word	0x40002000

08001f20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <MX_USART1_UART_Init+0x5c>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART1_UART_Init+0x58>)
 8001f64:	f005 fc80 	bl	8007868 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f6e:	f7ff fc79 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200017b8 	.word	0x200017b8
 8001f7c:	40011000 	.word	0x40011000

08001f80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <MX_USART2_UART_Init+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fc4:	f005 fc50 	bl	8007868 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fce:	f7ff fc49 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20001840 	.word	0x20001840
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0b0      	sub	sp, #192	; 0xc0
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2290      	movs	r2, #144	; 0x90
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f012 f887 	bl	8014114 <memset>
  if(uartHandle->Instance==USART1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_UART_MspInit+0x1a0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d173      	bne.n	80020f8 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002014:	2300      	movs	r3, #0
 8002016:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4618      	mov	r0, r3
 800201e:	f003 ffa3 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002028:	f7ff fc1c 	bl	8001864 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002032:	f043 0310 	orr.w	r3, r3, #16
 8002036:	6453      	str	r3, [r2, #68]	; 0x44
 8002038:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800205c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002076:	2307      	movs	r3, #7
 8002078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002080:	4619      	mov	r1, r3
 8002082:	4841      	ldr	r0, [pc, #260]	; (8002188 <HAL_UART_MspInit+0x1a8>)
 8002084:	f002 ffc4 	bl	8005010 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002088:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_UART_MspInit+0x1ac>)
 800208a:	4a41      	ldr	r2, [pc, #260]	; (8002190 <HAL_UART_MspInit+0x1b0>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_UART_MspInit+0x1ac>)
 8002090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002094:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_UART_MspInit+0x1ac>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_UART_MspInit+0x1ac>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020ca:	4830      	ldr	r0, [pc, #192]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020cc:	f002 fc24 	bl	8004918 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80020d6:	f7ff fbc5 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2b      	ldr	r2, [pc, #172]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020de:	675a      	str	r2, [r3, #116]	; 0x74
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_UART_MspInit+0x1ac>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2025      	movs	r0, #37	; 0x25
 80020ec:	f002 faf3 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020f0:	2025      	movs	r0, #37	; 0x25
 80020f2:	f002 fb0c 	bl	800470e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020f6:	e03f      	b.n	8002178 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_UART_MspInit+0x1b4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d13a      	bne.n	8002178 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002106:	2300      	movs	r3, #0
 8002108:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4618      	mov	r0, r3
 8002110:	f003 ff2a 	bl	8005f68 <HAL_RCCEx_PeriphCLKConfig>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0x13e>
      Error_Handler();
 800211a:	f7ff fba3 	bl	8001864 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_UART_MspInit+0x1a4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800214e:	230c      	movs	r3, #12
 8002150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002166:	2307      	movs	r3, #7
 8002168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_UART_MspInit+0x1a8>)
 8002174:	f002 ff4c 	bl	8005010 <HAL_GPIO_Init>
}
 8002178:	bf00      	nop
 800217a:	37c0      	adds	r7, #192	; 0xc0
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40011000 	.word	0x40011000
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000
 800218c:	200018c8 	.word	0x200018c8
 8002190:	40026488 	.word	0x40026488
 8002194:	40004400 	.word	0x40004400

08002198 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80021a2:	f107 020f 	add.w	r2, r7, #15
 80021a6:	1df9      	adds	r1, r7, #7
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	4804      	ldr	r0, [pc, #16]	; (80021c0 <W25qxx_Spi+0x28>)
 80021b0:	f004 fe4b 	bl	8006e4a <HAL_SPI_TransmitReceive>
	return ret;	
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200016b8 	.word	0x200016b8

080021c4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	2300      	movs	r3, #0
 80021d8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2110      	movs	r1, #16
 80021de:	4813      	ldr	r0, [pc, #76]	; (800222c <W25qxx_ReadID+0x68>)
 80021e0:	f003 f8c2 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80021e4:	209f      	movs	r0, #159	; 0x9f
 80021e6:	f7ff ffd7 	bl	8002198 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021ea:	20a5      	movs	r0, #165	; 0xa5
 80021ec:	f7ff ffd4 	bl	8002198 <W25qxx_Spi>
 80021f0:	4603      	mov	r3, r0
 80021f2:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021f4:	20a5      	movs	r0, #165	; 0xa5
 80021f6:	f7ff ffcf 	bl	8002198 <W25qxx_Spi>
 80021fa:	4603      	mov	r3, r0
 80021fc:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021fe:	20a5      	movs	r0, #165	; 0xa5
 8002200:	f7ff ffca 	bl	8002198 <W25qxx_Spi>
 8002204:	4603      	mov	r3, r0
 8002206:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	2110      	movs	r1, #16
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <W25qxx_ReadID+0x68>)
 800220e:	f003 f8ab 	bl	8005368 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	4313      	orrs	r3, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  return Temp;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	2110      	movs	r1, #16
 800223a:	4816      	ldr	r0, [pc, #88]	; (8002294 <W25qxx_ReadUniqID+0x64>)
 800223c:	f003 f894 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002240:	204b      	movs	r0, #75	; 0x4b
 8002242:	f7ff ffa9 	bl	8002198 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002246:	2300      	movs	r3, #0
 8002248:	71fb      	strb	r3, [r7, #7]
 800224a:	e005      	b.n	8002258 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800224c:	20a5      	movs	r0, #165	; 0xa5
 800224e:	f7ff ffa3 	bl	8002198 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3301      	adds	r3, #1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d9f6      	bls.n	800224c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 800225e:	2300      	movs	r3, #0
 8002260:	71bb      	strb	r3, [r7, #6]
 8002262:	e00b      	b.n	800227c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002264:	79bc      	ldrb	r4, [r7, #6]
 8002266:	20a5      	movs	r0, #165	; 0xa5
 8002268:	f7ff ff96 	bl	8002198 <W25qxx_Spi>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <W25qxx_ReadUniqID+0x68>)
 8002272:	4423      	add	r3, r4
 8002274:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	3301      	adds	r3, #1
 800227a:	71bb      	strb	r3, [r7, #6]
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b07      	cmp	r3, #7
 8002280:	d9f0      	bls.n	8002264 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	2110      	movs	r1, #16
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <W25qxx_ReadUniqID+0x64>)
 8002288:	f003 f86e 	bl	8005368 <HAL_GPIO_WritePin>
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	20001928 	.word	0x20001928

0800229c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2110      	movs	r1, #16
 80022a4:	4807      	ldr	r0, [pc, #28]	; (80022c4 <W25qxx_WriteEnable+0x28>)
 80022a6:	f003 f85f 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80022aa:	2006      	movs	r0, #6
 80022ac:	f7ff ff74 	bl	8002198 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2110      	movs	r1, #16
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <W25qxx_WriteEnable+0x28>)
 80022b6:	f003 f857 	bl	8005368 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f002 f90c 	bl	80044d8 <HAL_Delay>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000

080022c8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	481c      	ldr	r0, [pc, #112]	; (800234c <W25qxx_ReadStatusRegister+0x84>)
 80022dc:	f003 f844 	bl	8005368 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10c      	bne.n	8002300 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80022e6:	2005      	movs	r0, #5
 80022e8:	f7ff ff56 	bl	8002198 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022ec:	20a5      	movs	r0, #165	; 0xa5
 80022ee:	f7ff ff53 	bl	8002198 <W25qxx_Spi>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <W25qxx_ReadStatusRegister+0x88>)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80022fe:	e01b      	b.n	8002338 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d10c      	bne.n	8002320 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002306:	2035      	movs	r0, #53	; 0x35
 8002308:	f7ff ff46 	bl	8002198 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800230c:	20a5      	movs	r0, #165	; 0xa5
 800230e:	f7ff ff43 	bl	8002198 <W25qxx_Spi>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <W25qxx_ReadStatusRegister+0x88>)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800231e:	e00b      	b.n	8002338 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002320:	2015      	movs	r0, #21
 8002322:	f7ff ff39 	bl	8002198 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002326:	20a5      	movs	r0, #165	; 0xa5
 8002328:	f7ff ff36 	bl	8002198 <W25qxx_Spi>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <W25qxx_ReadStatusRegister+0x88>)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2110      	movs	r1, #16
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <W25qxx_ReadStatusRegister+0x84>)
 800233e:	f003 f813 	bl	8005368 <HAL_GPIO_WritePin>
	return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	20001928 	.word	0x20001928

08002354 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f002 f8bd 	bl	80044d8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2110      	movs	r1, #16
 8002362:	480f      	ldr	r0, [pc, #60]	; (80023a0 <W25qxx_WaitForWriteEnd+0x4c>)
 8002364:	f003 f800 	bl	8005368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002368:	2005      	movs	r0, #5
 800236a:	f7ff ff15 	bl	8002198 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800236e:	20a5      	movs	r0, #165	; 0xa5
 8002370:	f7ff ff12 	bl	8002198 <W25qxx_Spi>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <W25qxx_WaitForWriteEnd+0x50>)
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f002 f8aa 	bl	80044d8 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <W25qxx_WaitForWriteEnd+0x50>)
 8002386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ed      	bne.n	800236e <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	2110      	movs	r1, #16
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <W25qxx_WaitForWriteEnd+0x4c>)
 8002398:	f002 ffe6 	bl	8005368 <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	20001928 	.word	0x20001928

080023a8 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80023ae:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <W25qxx_Init+0x230>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80023b6:	e002      	b.n	80023be <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 80023b8:	2064      	movs	r0, #100	; 0x64
 80023ba:	f002 f88d 	bl	80044d8 <HAL_Delay>
	while(HAL_GetTick()<100)
 80023be:	f002 f87f 	bl	80044c0 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b63      	cmp	r3, #99	; 0x63
 80023c6:	d9f7      	bls.n	80023b8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2110      	movs	r1, #16
 80023cc:	4883      	ldr	r0, [pc, #524]	; (80025dc <W25qxx_Init+0x234>)
 80023ce:	f002 ffcb 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f002 f880 	bl	80044d8 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 80023d8:	4881      	ldr	r0, [pc, #516]	; (80025e0 <W25qxx_Init+0x238>)
 80023da:	f012 fc4d 	bl	8014c78 <puts>
	#endif
	id=W25qxx_ReadID();
 80023de:	f7ff fef1 	bl	80021c4 <W25qxx_ReadID>
 80023e2:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	487f      	ldr	r0, [pc, #508]	; (80025e4 <W25qxx_Init+0x23c>)
 80023e8:	f012 fbc0 	bl	8014b6c <iprintf>
	#endif
	switch(id&0x0000FFFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <W25qxx_Init+0x240>)
 80023f2:	4413      	add	r3, r2
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d87e      	bhi.n	80024f6 <W25qxx_Init+0x14e>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <W25qxx_Init+0x58>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	080024e3 	.word	0x080024e3
 8002404:	080024cf 	.word	0x080024cf
 8002408:	080024bb 	.word	0x080024bb
 800240c:	080024a7 	.word	0x080024a7
 8002410:	08002493 	.word	0x08002493
 8002414:	0800247f 	.word	0x0800247f
 8002418:	0800246b 	.word	0x0800246b
 800241c:	08002455 	.word	0x08002455
 8002420:	0800243f 	.word	0x0800243f
 8002424:	08002429 	.word	0x08002429
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002428:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <W25qxx_Init+0x230>)
 800242a:	220a      	movs	r2, #10
 800242c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <W25qxx_Init+0x230>)
 8002430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002434:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 8002436:	486d      	ldr	r0, [pc, #436]	; (80025ec <W25qxx_Init+0x244>)
 8002438:	f012 fc1e 	bl	8014c78 <puts>
			#endif
		break;
 800243c:	e064      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800243e:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <W25qxx_Init+0x230>)
 8002440:	2209      	movs	r2, #9
 8002442:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8002444:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <W25qxx_Init+0x230>)
 8002446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 800244c:	4868      	ldr	r0, [pc, #416]	; (80025f0 <W25qxx_Init+0x248>)
 800244e:	f012 fc13 	bl	8014c78 <puts>
			#endif
		break;
 8002452:	e059      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <W25qxx_Init+0x230>)
 8002456:	2208      	movs	r2, #8
 8002458:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <W25qxx_Init+0x230>)
 800245c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002460:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 8002462:	4864      	ldr	r0, [pc, #400]	; (80025f4 <W25qxx_Init+0x24c>)
 8002464:	f012 fc08 	bl	8014c78 <puts>
			#endif
		break;
 8002468:	e04e      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <W25qxx_Init+0x230>)
 800246c:	2207      	movs	r2, #7
 800246e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <W25qxx_Init+0x230>)
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 8002476:	4860      	ldr	r0, [pc, #384]	; (80025f8 <W25qxx_Init+0x250>)
 8002478:	f012 fbfe 	bl	8014c78 <puts>
			#endif
		break;
 800247c:	e044      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800247e:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <W25qxx_Init+0x230>)
 8002480:	2206      	movs	r2, #6
 8002482:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002484:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <W25qxx_Init+0x230>)
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 800248a:	485c      	ldr	r0, [pc, #368]	; (80025fc <W25qxx_Init+0x254>)
 800248c:	f012 fbf4 	bl	8014c78 <puts>
			#endif
		break;
 8002490:	e03a      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <W25qxx_Init+0x230>)
 8002494:	2205      	movs	r2, #5
 8002496:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002498:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <W25qxx_Init+0x230>)
 800249a:	2220      	movs	r2, #32
 800249c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 800249e:	4858      	ldr	r0, [pc, #352]	; (8002600 <W25qxx_Init+0x258>)
 80024a0:	f012 fbea 	bl	8014c78 <puts>
			#endif
		break;
 80024a4:	e030      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80024a6:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <W25qxx_Init+0x230>)
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80024ac:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <W25qxx_Init+0x230>)
 80024ae:	2210      	movs	r2, #16
 80024b0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 80024b2:	4854      	ldr	r0, [pc, #336]	; (8002604 <W25qxx_Init+0x25c>)
 80024b4:	f012 fbe0 	bl	8014c78 <puts>
			#endif
		break;
 80024b8:	e026      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <W25qxx_Init+0x230>)
 80024bc:	2203      	movs	r2, #3
 80024be:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80024c0:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <W25qxx_Init+0x230>)
 80024c2:	2208      	movs	r2, #8
 80024c4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 80024c6:	4850      	ldr	r0, [pc, #320]	; (8002608 <W25qxx_Init+0x260>)
 80024c8:	f012 fbd6 	bl	8014c78 <puts>
			#endif
		break;
 80024cc:	e01c      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <W25qxx_Init+0x230>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <W25qxx_Init+0x230>)
 80024d6:	2204      	movs	r2, #4
 80024d8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 80024da:	484c      	ldr	r0, [pc, #304]	; (800260c <W25qxx_Init+0x264>)
 80024dc:	f012 fbcc 	bl	8014c78 <puts>
			#endif
		break;
 80024e0:	e012      	b.n	8002508 <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <W25qxx_Init+0x230>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <W25qxx_Init+0x230>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 80024ee:	4848      	ldr	r0, [pc, #288]	; (8002610 <W25qxx_Init+0x268>)
 80024f0:	f012 fbc2 	bl	8014c78 <puts>
			#endif
		break;
 80024f4:	e008      	b.n	8002508 <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 80024f6:	4847      	ldr	r0, [pc, #284]	; (8002614 <W25qxx_Init+0x26c>)
 80024f8:	f012 fbbe 	bl	8014c78 <puts>
				#endif
			w25qxx.Lock=0;	
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <W25qxx_Init+0x230>)
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8002504:	2300      	movs	r3, #0
 8002506:	e063      	b.n	80025d0 <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <W25qxx_Init+0x230>)
 800250a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <W25qxx_Init+0x230>)
 8002512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002516:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <W25qxx_Init+0x230>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <W25qxx_Init+0x230>)
 8002520:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <W25qxx_Init+0x230>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <W25qxx_Init+0x230>)
 8002528:	6912      	ldr	r2, [r2, #16]
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <W25qxx_Init+0x230>)
 8002530:	8952      	ldrh	r2, [r2, #10]
 8002532:	fbb3 f3f2 	udiv	r3, r3, r2
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <W25qxx_Init+0x230>)
 8002538:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <W25qxx_Init+0x230>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <W25qxx_Init+0x230>)
 8002542:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <W25qxx_Init+0x230>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <W25qxx_Init+0x230>)
 800254a:	6912      	ldr	r2, [r2, #16]
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	0a9b      	lsrs	r3, r3, #10
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <W25qxx_Init+0x230>)
 8002554:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002556:	f7ff fe6b 	bl	8002230 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff feb4 	bl	80022c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002560:	2002      	movs	r0, #2
 8002562:	f7ff feb1 	bl	80022c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002566:	2003      	movs	r0, #3
 8002568:	f7ff feae 	bl	80022c8 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <W25qxx_Init+0x230>)
 800256e:	895b      	ldrh	r3, [r3, #10]
 8002570:	4619      	mov	r1, r3
 8002572:	4829      	ldr	r0, [pc, #164]	; (8002618 <W25qxx_Init+0x270>)
 8002574:	f012 fafa 	bl	8014b6c <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <W25qxx_Init+0x230>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4619      	mov	r1, r3
 800257e:	4827      	ldr	r0, [pc, #156]	; (800261c <W25qxx_Init+0x274>)
 8002580:	f012 faf4 	bl	8014b6c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <W25qxx_Init+0x230>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4619      	mov	r1, r3
 800258a:	4825      	ldr	r0, [pc, #148]	; (8002620 <W25qxx_Init+0x278>)
 800258c:	f012 faee 	bl	8014b6c <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <W25qxx_Init+0x230>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4619      	mov	r1, r3
 8002596:	4823      	ldr	r0, [pc, #140]	; (8002624 <W25qxx_Init+0x27c>)
 8002598:	f012 fae8 	bl	8014b6c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <W25qxx_Init+0x230>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4821      	ldr	r0, [pc, #132]	; (8002628 <W25qxx_Init+0x280>)
 80025a4:	f012 fae2 	bl	8014b6c <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <W25qxx_Init+0x230>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4619      	mov	r1, r3
 80025ae:	481f      	ldr	r0, [pc, #124]	; (800262c <W25qxx_Init+0x284>)
 80025b0:	f012 fadc 	bl	8014b6c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <W25qxx_Init+0x230>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4619      	mov	r1, r3
 80025ba:	481d      	ldr	r0, [pc, #116]	; (8002630 <W25qxx_Init+0x288>)
 80025bc:	f012 fad6 	bl	8014b6c <iprintf>
	printf("w25qxx Init Done\r\n");
 80025c0:	481c      	ldr	r0, [pc, #112]	; (8002634 <W25qxx_Init+0x28c>)
 80025c2:	f012 fb59 	bl	8014c78 <puts>
	#endif
	w25qxx.Lock=0;	
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <W25qxx_Init+0x230>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80025ce:	2301      	movs	r3, #1
}	
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20001928 	.word	0x20001928
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08017444 	.word	0x08017444
 80025e4:	0801745c 	.word	0x0801745c
 80025e8:	ffffbfef 	.word	0xffffbfef
 80025ec:	08017470 	.word	0x08017470
 80025f0:	08017488 	.word	0x08017488
 80025f4:	080174a0 	.word	0x080174a0
 80025f8:	080174b8 	.word	0x080174b8
 80025fc:	080174d0 	.word	0x080174d0
 8002600:	080174e8 	.word	0x080174e8
 8002604:	08017500 	.word	0x08017500
 8002608:	08017518 	.word	0x08017518
 800260c:	08017530 	.word	0x08017530
 8002610:	08017548 	.word	0x08017548
 8002614:	08017560 	.word	0x08017560
 8002618:	08017574 	.word	0x08017574
 800261c:	08017594 	.word	0x08017594
 8002620:	080175ac 	.word	0x080175ac
 8002624:	080175cc 	.word	0x080175cc
 8002628:	080175e8 	.word	0x080175e8
 800262c:	08017608 	.word	0x08017608
 8002630:	08017624 	.word	0x08017624
 8002634:	08017644 	.word	0x08017644

08002638 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8002640:	e002      	b.n	8002648 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f001 ff48 	bl	80044d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <W25qxx_EraseBlock+0xd0>)
 800264a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800264e:	2b01      	cmp	r3, #1
 8002650:	d0f7      	beq.n	8002642 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <W25qxx_EraseBlock+0xd0>)
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	482b      	ldr	r0, [pc, #172]	; (800270c <W25qxx_EraseBlock+0xd4>)
 800265e:	f012 fa85 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f001 ff38 	bl	80044d8 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8002668:	f001 ff2a 	bl	80044c0 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 800266e:	f7ff fe71 	bl	8002354 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <W25qxx_EraseBlock+0xd0>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8002680:	f7ff fe0c 	bl	800229c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2110      	movs	r1, #16
 8002688:	4821      	ldr	r0, [pc, #132]	; (8002710 <W25qxx_EraseBlock+0xd8>)
 800268a:	f002 fe6d 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 800268e:	20d8      	movs	r0, #216	; 0xd8
 8002690:	f7ff fd82 	bl	8002198 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <W25qxx_EraseBlock+0xd0>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d905      	bls.n	80026a8 <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0e1b      	lsrs	r3, r3, #24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fd78 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fd72 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fd6c 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fd67 	bl	8002198 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	2110      	movs	r1, #16
 80026ce:	4810      	ldr	r0, [pc, #64]	; (8002710 <W25qxx_EraseBlock+0xd8>)
 80026d0:	f002 fe4a 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80026d4:	f7ff fe3e 	bl	8002354 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 80026d8:	f001 fef2 	bl	80044c0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	480b      	ldr	r0, [pc, #44]	; (8002714 <W25qxx_EraseBlock+0xdc>)
 80026e6:	f012 fa41 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 80026ea:	2064      	movs	r0, #100	; 0x64
 80026ec:	f001 fef4 	bl	80044d8 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f001 fef1 	bl	80044d8 <HAL_Delay>
	w25qxx.Lock=0;
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <W25qxx_EraseBlock+0xd0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20001928 	.word	0x20001928
 800270c:	080176e8 	.word	0x080176e8
 8002710:	40021000 	.word	0x40021000
 8002714:	08017708 	.word	0x08017708

08002718 <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <W25qxx_BlockToPage+0x28>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <W25qxx_BlockToPage+0x28>)
 800272c:	8952      	ldrh	r2, [r2, #10]
 800272e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20001928 	.word	0x20001928

08002744 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8002752:	e002      	b.n	800275a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002754:	2001      	movs	r0, #1
 8002756:	f001 febf 	bl	80044d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 800275a:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <W25qxx_WritePage+0x16c>)
 800275c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002760:	2b01      	cmp	r3, #1
 8002762:	d0f7      	beq.n	8002754 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <W25qxx_WritePage+0x16c>)
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a4f      	ldr	r2, [pc, #316]	; (80028b0 <W25qxx_WritePage+0x16c>)
 8002774:	8952      	ldrh	r2, [r2, #10]
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <W25qxx_WritePage+0x3c>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <W25qxx_WritePage+0x16c>)
 8002782:	895b      	ldrh	r3, [r3, #10]
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <W25qxx_WritePage+0x16c>)
 8002794:	8952      	ldrh	r2, [r2, #10]
 8002796:	4293      	cmp	r3, r2
 8002798:	d905      	bls.n	80027a6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800279a:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <W25qxx_WritePage+0x16c>)
 800279c:	895b      	ldrh	r3, [r3, #10]
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4841      	ldr	r0, [pc, #260]	; (80028b4 <W25qxx_WritePage+0x170>)
 80027ae:	f012 f9dd 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f001 fe90 	bl	80044d8 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 80027b8:	f001 fe82 	bl	80044c0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 80027be:	f7ff fdc9 	bl	8002354 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80027c2:	f7ff fd6b 	bl	800229c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2110      	movs	r1, #16
 80027ca:	483b      	ldr	r0, [pc, #236]	; (80028b8 <W25qxx_WritePage+0x174>)
 80027cc:	f002 fdcc 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7ff fce1 	bl	8002198 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80027d6:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <W25qxx_WritePage+0x16c>)
 80027d8:	895b      	ldrh	r3, [r3, #10]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <W25qxx_WritePage+0x16c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d905      	bls.n	80027fc <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0e1b      	lsrs	r3, r3, #24
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fcce 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fcc8 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fcc2 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fcbd 	bl	8002198 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b29a      	uxth	r2, r3
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	4825      	ldr	r0, [pc, #148]	; (80028bc <W25qxx_WritePage+0x178>)
 8002828:	f004 f871 	bl	800690e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	2110      	movs	r1, #16
 8002830:	4821      	ldr	r0, [pc, #132]	; (80028b8 <W25qxx_WritePage+0x174>)
 8002832:	f002 fd99 	bl	8005368 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8002836:	f7ff fd8d 	bl	8002354 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 800283a:	f001 fe41 	bl	80044c0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e018      	b.n	800287e <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <W25qxx_WritePage+0x124>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d905      	bls.n	8002868 <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 800285c:	4818      	ldr	r0, [pc, #96]	; (80028c0 <W25qxx_WritePage+0x17c>)
 800285e:	f012 fa0b 	bl	8014c78 <puts>
			W25qxx_Delay(10);			
 8002862:	200a      	movs	r0, #10
 8002864:	f001 fe38 	bl	80044d8 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	4814      	ldr	r0, [pc, #80]	; (80028c4 <W25qxx_WritePage+0x180>)
 8002874:	f012 f97a 	bl	8014b6c <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3e2      	bcc.n	800284c <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 8002886:	480e      	ldr	r0, [pc, #56]	; (80028c0 <W25qxx_WritePage+0x17c>)
 8002888:	f012 f9f6 	bl	8014c78 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 800288c:	6939      	ldr	r1, [r7, #16]
 800288e:	480e      	ldr	r0, [pc, #56]	; (80028c8 <W25qxx_WritePage+0x184>)
 8002890:	f012 f96c 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f001 fe1f 	bl	80044d8 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f001 fe1c 	bl	80044d8 <HAL_Delay>
	w25qxx.Lock=0;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <W25qxx_WritePage+0x16c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20001928 	.word	0x20001928
 80028b4:	08017924 	.word	0x08017924
 80028b8:	40021000 	.word	0x40021000
 80028bc:	200016b8 	.word	0x200016b8
 80028c0:	08017960 	.word	0x08017960
 80028c4:	08017964 	.word	0x08017964
 80028c8:	0801796c 	.word	0x0801796c

080028cc <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d802      	bhi.n	80028ea <W25qxx_WriteBlock+0x1e>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	4830      	ldr	r0, [pc, #192]	; (80029b8 <W25qxx_WriteBlock+0xec>)
 80028f8:	f012 f938 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	f001 fdeb 	bl	80044d8 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d306      	bcc.n	800291a <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 800290c:	482b      	ldr	r0, [pc, #172]	; (80029bc <W25qxx_WriteBlock+0xf0>)
 800290e:	f012 f9b3 	bl	8014c78 <puts>
		W25qxx_Delay(100);
 8002912:	2064      	movs	r0, #100	; 0x64
 8002914:	f001 fde0 	bl	80044d8 <HAL_Delay>
		#endif	
		return;
 8002918:	e048      	b.n	80029ac <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	441a      	add	r2, r3
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	429a      	cmp	r2, r3
 8002926:	d905      	bls.n	8002934 <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e001      	b.n	8002938 <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8002938:	68b8      	ldr	r0, [r7, #8]
 800293a:	f7ff feed 	bl	8002718 <W25qxx_BlockToPage>
 800293e:	4602      	mov	r2, r0
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002942:	895b      	ldrh	r3, [r3, #10]
 8002944:	4619      	mov	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	fbb3 f3f1 	udiv	r3, r3, r1
 800294c:	4413      	add	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002952:	895b      	ldrh	r3, [r3, #10]
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	fbb3 f1f2 	udiv	r1, r3, r2
 800295c:	fb01 f202 	mul.w	r2, r1, r2
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff feea 	bl	8002744 <W25qxx_WritePage>
		StartPage++;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	3301      	adds	r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002978:	895b      	ldrh	r3, [r3, #10]
 800297a:	461a      	mov	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1a9a      	subs	r2, r3, r2
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <W25qxx_WriteBlock+0xe8>)
 8002988:	895b      	ldrh	r3, [r3, #10]
 800298a:	461a      	mov	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	dce1      	bgt.n	8002964 <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <W25qxx_WriteBlock+0xf4>)
 80029a2:	f012 f969 	bl	8014c78 <puts>
	W25qxx_Delay(100);
 80029a6:	2064      	movs	r0, #100	; 0x64
 80029a8:	f001 fd96 	bl	80044d8 <HAL_Delay>
	#endif	
}
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20001928 	.word	0x20001928
 80029b8:	08017a0c 	.word	0x08017a0c
 80029bc:	08017a4c 	.word	0x08017a4c
 80029c0:	08017a6c 	.word	0x08017a6c

080029c4 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80029d0:	e002      	b.n	80029d8 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f001 fd80 	bl	80044d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <W25qxx_ReadBytes+0x114>)
 80029da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d0f7      	beq.n	80029d2 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <W25qxx_ReadBytes+0x114>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 80029ea:	f001 fd69 	bl	80044c0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	4839      	ldr	r0, [pc, #228]	; (8002adc <W25qxx_ReadBytes+0x118>)
 80029f6:	f012 f8b9 	bl	8014b6c <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2110      	movs	r1, #16
 80029fe:	4838      	ldr	r0, [pc, #224]	; (8002ae0 <W25qxx_ReadBytes+0x11c>)
 8002a00:	f002 fcb2 	bl	8005368 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8002a04:	200b      	movs	r0, #11
 8002a06:	f7ff fbc7 	bl	8002198 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <W25qxx_ReadBytes+0x114>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d905      	bls.n	8002a1e <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0e1b      	lsrs	r3, r3, #24
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fbbd 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fbb7 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fbb1 	bl	8002198 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fbac 	bl	8002198 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fba9 	bl	8002198 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	4824      	ldr	r0, [pc, #144]	; (8002ae4 <W25qxx_ReadBytes+0x120>)
 8002a52:	f004 f8ca 	bl	8006bea <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	2110      	movs	r1, #16
 8002a5a:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <W25qxx_ReadBytes+0x11c>)
 8002a5c:	f002 fc84 	bl	8005368 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8002a60:	f001 fd2e 	bl	80044c0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e018      	b.n	8002aa4 <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <W25qxx_ReadBytes+0xca>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d905      	bls.n	8002a8e <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 8002a82:	4819      	ldr	r0, [pc, #100]	; (8002ae8 <W25qxx_ReadBytes+0x124>)
 8002a84:	f012 f8f8 	bl	8014c78 <puts>
			W25qxx_Delay(10);
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f001 fd25 	bl	80044d8 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4814      	ldr	r0, [pc, #80]	; (8002aec <W25qxx_ReadBytes+0x128>)
 8002a9a:	f012 f867 	bl	8014b6c <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3e2      	bcc.n	8002a72 <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 8002aac:	480e      	ldr	r0, [pc, #56]	; (8002ae8 <W25qxx_ReadBytes+0x124>)
 8002aae:	f012 f8e3 	bl	8014c78 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	480e      	ldr	r0, [pc, #56]	; (8002af0 <W25qxx_ReadBytes+0x12c>)
 8002ab6:	f012 f859 	bl	8014b6c <iprintf>
	W25qxx_Delay(100);
 8002aba:	2064      	movs	r0, #100	; 0x64
 8002abc:	f001 fd0c 	bl	80044d8 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fd09 	bl	80044d8 <HAL_Delay>
	w25qxx.Lock=0;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <W25qxx_ReadBytes+0x114>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20001928 	.word	0x20001928
 8002adc:	08017ae0 	.word	0x08017ae0
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	200016b8 	.word	0x200016b8
 8002ae8:	08017960 	.word	0x08017960
 8002aec:	08017964 	.word	0x08017964
 8002af0:	08017b18 	.word	0x08017b18

08002af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002afa:	e003      	b.n	8002b04 <LoopCopyDataInit>

08002afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b02:	3104      	adds	r1, #4

08002b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b04:	480b      	ldr	r0, [pc, #44]	; (8002b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b0c:	d3f6      	bcc.n	8002afc <CopyDataInit>
  ldr  r2, =_sbss
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b10:	e002      	b.n	8002b18 <LoopFillZerobss>

08002b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b14:	f842 3b04 	str.w	r3, [r2], #4

08002b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b1c:	d3f9      	bcc.n	8002b12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b1e:	f7ff f96d 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b22:	f011 fa9b 	bl	801405c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b26:	f7fd ff8b 	bl	8000a40 <main>
  bx  lr    
 8002b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b2c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b30:	08018dd4 	.word	0x08018dd4
  ldr  r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b38:	2000151c 	.word	0x2000151c
  ldr  r2, =_sbss
 8002b3c:	2000151c 	.word	0x2000151c
  ldr  r3, = _ebss
 8002b40:	20001aa0 	.word	0x20001aa0

08002b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b44:	e7fe      	b.n	8002b44 <ADC_IRQHandler>

08002b46 <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	3303      	adds	r3, #3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f023 0303 	bic.w	r3, r3, #3
 8002b60:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d810      	bhi.n	8002b90 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b84:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 8002b90:	68fb      	ldr	r3, [r7, #12]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 8002bae:	e047      	b.n	8002c40 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d801      	bhi.n	8002bba <create_qt_tbl+0x1a>
 8002bb6:	2306      	movs	r3, #6
 8002bb8:	e046      	b.n	8002c48 <create_qt_tbl+0xa8>
		ndata -= 65;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	3b41      	subs	r3, #65	; 0x41
 8002bbe:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	60ba      	str	r2, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 8002bca:	7f7b      	ldrb	r3, [r7, #29]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <create_qt_tbl+0x38>
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	e037      	b.n	8002c48 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 8002bd8:	7f7b      	ldrb	r3, [r7, #29]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 8002be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ffad 	bl	8002b46 <alloc_pool>
 8002bec:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <create_qt_tbl+0x58>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e027      	b.n	8002c48 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 8002bf8:	8bfa      	ldrh	r2, [r7, #30]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3214      	adds	r2, #20
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002c04:	2300      	movs	r3, #0
 8002c06:	83fb      	strh	r3, [r7, #30]
 8002c08:	e017      	b.n	8002c3a <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 8002c0a:	8bfb      	ldrh	r3, [r7, #30]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <create_qt_tbl+0xb0>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	60ba      	str	r2, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <create_qt_tbl+0xb4>)
 8002c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c24:	fb03 f101 	mul.w	r1, r3, r1
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4413      	add	r3, r2
 8002c30:	460a      	mov	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002c34:	8bfb      	ldrh	r3, [r7, #30]
 8002c36:	3301      	adds	r3, #1
 8002c38:	83fb      	strh	r3, [r7, #30]
 8002c3a:	8bfb      	ldrh	r3, [r7, #30]
 8002c3c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c3e:	d9e4      	bls.n	8002c0a <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1b4      	bne.n	8002bb0 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08017d08 	.word	0x08017d08
 8002c54:	08017d48 	.word	0x08017d48

08002c58 <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 8002c66:	e0c3      	b.n	8002df0 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d801      	bhi.n	8002c72 <create_huffman_tbl+0x1a>
 8002c6e:	2306      	movs	r3, #6
 8002c70:	e0c3      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		ndata -= 17;
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	3b11      	subs	r3, #17
 8002c76:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 8002c84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c88:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <create_huffman_tbl+0x3c>
 8002c90:	2306      	movs	r3, #6
 8002c92:	e0b2      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 8002c94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	83fb      	strh	r3, [r7, #30]
 8002c9e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 8002caa:	2110      	movs	r1, #16
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff ff4a 	bl	8002b46 <alloc_pool>
 8002cb2:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <create_huffman_tbl+0x66>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e09d      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 8002cbe:	8bb9      	ldrh	r1, [r7, #28]
 8002cc0:	8bfa      	ldrh	r2, [r7, #30]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0049      	lsls	r1, r1, #1
 8002cc6:	440a      	add	r2, r1
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cd6:	853b      	strh	r3, [r7, #40]	; 0x28
 8002cd8:	e00f      	b.n	8002cfa <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	1c53      	adds	r3, r2, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cf0:	4413      	add	r3, r2
 8002cf2:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d9ec      	bls.n	8002cda <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002d00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff ff1c 	bl	8002b46 <alloc_pool>
 8002d0e:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <create_huffman_tbl+0xc2>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e06f      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 8002d1a:	8bb9      	ldrh	r1, [r7, #28]
 8002d1c:	8bfa      	ldrh	r2, [r7, #30]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0049      	lsls	r1, r1, #1
 8002d22:	440a      	add	r2, r1
 8002d24:	320c      	adds	r2, #12
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002d30:	2300      	movs	r3, #0
 8002d32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002d38:	e01a      	b.n	8002d70 <create_huffman_tbl+0x118>
			b = pb[i];
 8002d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002d44:	e009      	b.n	8002d5a <create_huffman_tbl+0x102>
 8002d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	847a      	strh	r2, [r7, #34]	; 0x22
 8002d4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002d4e:	1c51      	adds	r1, r2, #1
 8002d50:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002d52:	0052      	lsls	r2, r2, #1
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	440a      	add	r2, r1
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	857a      	strh	r2, [r7, #42]	; 0x2a
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <create_huffman_tbl+0xee>
			hc <<= 1;
 8002d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d9e1      	bls.n	8002d3a <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d201      	bcs.n	8002d82 <create_huffman_tbl+0x12a>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e03b      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		ndata -= np;
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 8002d8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fed9 	bl	8002b46 <alloc_pool>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <create_huffman_tbl+0x148>
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e02c      	b.n	8002dfa <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 8002da0:	8bb9      	ldrh	r1, [r7, #28]
 8002da2:	8bfa      	ldrh	r2, [r7, #30]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	0049      	lsls	r1, r1, #1
 8002da8:	440a      	add	r2, r1
 8002daa:	3210      	adds	r2, #16
 8002dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002db2:	2300      	movs	r3, #0
 8002db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002db6:	e017      	b.n	8002de8 <create_huffman_tbl+0x190>
			d = *data++;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	60ba      	str	r2, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 8002dc4:	8bfb      	ldrh	r3, [r7, #30]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <create_huffman_tbl+0x17e>
 8002dca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002dce:	2b0b      	cmp	r3, #11
 8002dd0:	d901      	bls.n	8002dd6 <create_huffman_tbl+0x17e>
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	e011      	b.n	8002dfa <create_huffman_tbl+0x1a2>
			*pd++ = d;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	627a      	str	r2, [r7, #36]	; 0x24
 8002ddc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002de0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002de2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002de4:	3301      	adds	r3, #1
 8002de6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002de8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3e3      	bcc.n	8002db8 <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f47f af38 	bne.w	8002c68 <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3730      	adds	r7, #48	; 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	75fb      	strb	r3, [r7, #23]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	75bb      	strb	r3, [r7, #22]
 8002e24:	2300      	movs	r3, #0
 8002e26:	817b      	strh	r3, [r7, #10]
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d137      	bne.n	8002ea2 <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002e32:	89fb      	ldrh	r3, [r7, #14]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e46:	6939      	ldr	r1, [r7, #16]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002e50:	89fb      	ldrh	r3, [r7, #14]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <bitext+0x60>
 8002e56:	f06f 0301 	mvn.w	r3, #1
 8002e5a:	e041      	b.n	8002ee0 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 8002e6e:	2300      	movs	r3, #0
 8002e70:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <bitext+0x7e>
 8002e7a:	f06f 0305 	mvn.w	r3, #5
 8002e7e:	e02f      	b.n	8002ee0 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002e80:	23ff      	movs	r3, #255	; 0xff
 8002e82:	75bb      	strb	r3, [r7, #22]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	7dba      	ldrb	r2, [r7, #22]
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e008      	b.n	8002e9e <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002e92:	7dbb      	ldrb	r3, [r7, #22]
 8002e94:	2bff      	cmp	r3, #255	; 0xff
 8002e96:	d102      	bne.n	8002e9e <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	817b      	strh	r3, [r7, #10]
 8002e9c:	e013      	b.n	8002ec6 <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 8002ea2:	89bb      	ldrh	r3, [r7, #12]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 8002ea8:	7dba      	ldrb	r2, [r7, #22]
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <bitext+0xb8>
 8002eb4:	89bb      	ldrh	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1af      	bne.n	8002e2c <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7dfa      	ldrb	r2, [r7, #23]
 8002ed0:	731a      	strb	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	89fa      	ldrh	r2, [r7, #14]
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]

	return (int)v;
 8002ede:	89bb      	ldrh	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	7b1b      	ldrb	r3, [r3, #12]
 8002efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	83fb      	strh	r3, [r7, #30]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f12:	2300      	movs	r3, #0
 8002f14:	837b      	strh	r3, [r7, #26]
 8002f16:	8b7b      	ldrh	r3, [r7, #26]
 8002f18:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 8002f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d13c      	bne.n	8002fa0 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 8002f26:	8bfb      	ldrh	r3, [r7, #30]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3a:	6a39      	ldr	r1, [r7, #32]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002f44:	8bfb      	ldrh	r3, [r7, #30]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <huffext+0x6e>
 8002f4a:	f06f 0301 	mvn.w	r3, #1
 8002f4e:	e066      	b.n	800301e <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	3301      	adds	r3, #1
 8002f54:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 8002f56:	8bfb      	ldrh	r3, [r7, #30]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 8002f5c:	8b7b      	ldrh	r3, [r7, #26]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 8002f62:	2300      	movs	r3, #0
 8002f64:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <huffext+0x8c>
 8002f6e:	f06f 0305 	mvn.w	r3, #5
 8002f72:	e054      	b.n	800301e <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e00a      	b.n	8002f9a <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f90:	2bff      	cmp	r3, #255	; 0xff
 8002f92:	d102      	bne.n	8002f9a <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8002f94:	2301      	movs	r3, #1
 8002f96:	837b      	strh	r3, [r7, #26]
 8002f98:	e03c      	b.n	8003014 <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 8002fa0:	8bbb      	ldrh	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 8002fa6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <huffext+0xd4>
 8002fb6:	8bbb      	ldrh	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	60ba      	str	r2, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	82fb      	strh	r3, [r7, #22]
 8002fd0:	e01a      	b.n	8003008 <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	8bba      	ldrh	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10d      	bne.n	8002ffc <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fe6:	731a      	strb	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8bfa      	ldrh	r2, [r7, #30]
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	e010      	b.n	800301e <huffext+0x136>
			}
			hdata++;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8003002:	8afb      	ldrh	r3, [r7, #22]
 8003004:	3b01      	subs	r3, #1
 8003006:	82fb      	strh	r3, [r7, #22]
 8003008:	8afb      	ldrh	r3, [r7, #22]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e1      	bne.n	8002fd2 <huffext+0xea>
		}
		bl--;
 800300e:	8b3b      	ldrh	r3, [r7, #24]
 8003010:	3b01      	subs	r3, #1
 8003012:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8003014:	8b3b      	ldrh	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d181      	bne.n	8002f1e <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 800301a:	f06f 0305 	mvn.w	r3, #5
}
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8003028:	b480      	push	{r7}
 800302a:	b095      	sub	sp, #84	; 0x54
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 8003032:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
 8003038:	f241 1351 	movw	r3, #4433	; 0x1151
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
 800303e:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
 8003044:	f641 5390 	movw	r3, #7568	; 0x1d90
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 800304a:	2300      	movs	r3, #0
 800304c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003050:	e0b8      	b.n	80031c4 <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 800306e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	4413      	add	r3, r2
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8003076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 800307e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	131b      	asrs	r3, r3, #12
 800308c:	623b      	str	r3, [r7, #32]
		v3 += v1;
 800308e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	4413      	add	r3, r2
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8003096:	6a3a      	ldr	r2, [r7, #32]
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	4413      	add	r3, r2
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 80030a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	4413      	add	r3, r2
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c4:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030d2:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4413      	add	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	131b      	asrs	r3, r3, #12
 8003108:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	4413      	add	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8003112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	4413      	add	r3, r2
 8003118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	131b      	asrs	r3, r3, #12
 8003120:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	131b      	asrs	r3, r3, #12
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	131b      	asrs	r3, r3, #12
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8003156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	441a      	add	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	33e0      	adds	r3, #224	; 0xe0
 8003164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	1a8a      	subs	r2, r1, r2
 800316a:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3320      	adds	r3, #32
 8003170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	440a      	add	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	33c0      	adds	r3, #192	; 0xc0
 800317c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3340      	adds	r3, #64	; 0x40
 8003188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	440a      	add	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	33a0      	adds	r3, #160	; 0xa0
 8003194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	1a8a      	subs	r2, r1, r2
 800319a:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3360      	adds	r3, #96	; 0x60
 80031a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	440a      	add	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3380      	adds	r3, #128	; 0x80
 80031ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	1a8a      	subs	r2, r1, r2
 80031b2:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80031ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031be:	3301      	adds	r3, #1
 80031c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c8:	2b07      	cmp	r3, #7
 80031ca:	f67f af42 	bls.w	8003052 <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3b20      	subs	r3, #32
 80031d2:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031da:	e0e9      	b.n	80033b0 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031e4:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 80031f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	4413      	add	r3, r2
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8003208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	131b      	asrs	r3, r3, #12
 8003216:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	4413      	add	r3, r2
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	4413      	add	r3, r2
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8003230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	4413      	add	r3, r2
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	4413      	add	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	131b      	asrs	r3, r3, #12
 800328e:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	4413      	add	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8003298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	4413      	add	r3, r2
 800329e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	131b      	asrs	r3, r3, #12
 80032a6:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	131b      	asrs	r3, r3, #12
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	131b      	asrs	r3, r3, #12
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 80032dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	121b      	asrs	r3, r3, #8
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ea:	4a37      	ldr	r2, [pc, #220]	; (80033c8 <block_idct+0x3a0>)
 80032ec:	5cd2      	ldrb	r2, [r2, r3]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 80032f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	121b      	asrs	r3, r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3307      	adds	r3, #7
 8003304:	4930      	ldr	r1, [pc, #192]	; (80033c8 <block_idct+0x3a0>)
 8003306:	5c8a      	ldrb	r2, [r1, r2]
 8003308:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 800330a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4413      	add	r3, r2
 8003310:	121b      	asrs	r3, r3, #8
 8003312:	b29b      	uxth	r3, r3
 8003314:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	492a      	ldr	r1, [pc, #168]	; (80033c8 <block_idct+0x3a0>)
 800331e:	5c8a      	ldrb	r2, [r1, r2]
 8003320:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 8003322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	121b      	asrs	r3, r3, #8
 800332a:	b29b      	uxth	r3, r3
 800332c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3306      	adds	r3, #6
 8003334:	4924      	ldr	r1, [pc, #144]	; (80033c8 <block_idct+0x3a0>)
 8003336:	5c8a      	ldrb	r2, [r1, r2]
 8003338:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 800333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	121b      	asrs	r3, r3, #8
 8003342:	b29b      	uxth	r3, r3
 8003344:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	3302      	adds	r3, #2
 800334c:	491e      	ldr	r1, [pc, #120]	; (80033c8 <block_idct+0x3a0>)
 800334e:	5c8a      	ldrb	r2, [r1, r2]
 8003350:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 8003352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	121b      	asrs	r3, r3, #8
 800335a:	b29b      	uxth	r3, r3
 800335c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3305      	adds	r3, #5
 8003364:	4918      	ldr	r1, [pc, #96]	; (80033c8 <block_idct+0x3a0>)
 8003366:	5c8a      	ldrb	r2, [r1, r2]
 8003368:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 800336a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	121b      	asrs	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3303      	adds	r3, #3
 800337c:	4912      	ldr	r1, [pc, #72]	; (80033c8 <block_idct+0x3a0>)
 800337e:	5c8a      	ldrb	r2, [r1, r2]
 8003380:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 8003382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	121b      	asrs	r3, r3, #8
 800338a:	b29b      	uxth	r3, r3
 800338c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	3304      	adds	r3, #4
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <block_idct+0x3a0>)
 8003396:	5c8a      	ldrb	r2, [r1, r2]
 8003398:	701a      	strb	r2, [r3, #0]
		dst += 8;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3320      	adds	r3, #32
 80033a4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80033a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033aa:	3301      	adds	r3, #1
 80033ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	f67f af11 	bls.w	80031dc <block_idct+0x1b4>
	}
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	3754      	adds	r7, #84	; 0x54
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	08017dc8 	.word	0x08017dc8

080033cc <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b090      	sub	sp, #64	; 0x40
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7b9b      	ldrb	r3, [r3, #14]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7bdb      	ldrb	r3, [r3, #15]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	fb12 f303 	smulbb	r3, r2, r3
 80033ea:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 80033ec:	2302      	movs	r3, #2
 80033ee:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033fa:	e11b      	b.n	8003634 <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 80033fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003400:	429a      	cmp	r2, r3
 8003402:	d306      	bcc.n	8003412 <mcu_load+0x46>
 8003404:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	e000      	b.n	8003414 <mcu_load+0x48>
 8003412:	2300      	movs	r3, #0
 8003414:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8003416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8003424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3204      	adds	r2, #4
 800342a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800342e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8003430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3206      	adds	r2, #6
 8003436:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800343a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 800343c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003446:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fd4a 	bl	8002ee8 <huffext>
 8003454:	4603      	mov	r3, r0
 8003456:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	da04      	bge.n	8003468 <mcu_load+0x9c>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	425b      	negs	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e0ed      	b.n	8003644 <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8003468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	3308      	adds	r3, #8
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02a      	beq.n	80034d4 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fcbe 	bl	8002e02 <bitext>
 8003486:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	2b00      	cmp	r3, #0
 800348c:	da04      	bge.n	8003498 <mcu_load+0xcc>
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	b2db      	uxtb	r3, r3
 8003492:	425b      	negs	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e0d5      	b.n	8003644 <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3b01      	subs	r3, #1
 800349c:	2201      	movs	r2, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 80034a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <mcu_load+0xee>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 80034ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	4413      	add	r3, r2
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 80034c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c6:	b211      	sxth	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	3308      	adds	r3, #8
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	460a      	mov	r2, r1
 80034d2:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 80034d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	7c1b      	ldrb	r3, [r3, #16]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3214      	adds	r2, #20
 80034e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e6:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	121a      	asrs	r2, r3, #8
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 80034f8:	2301      	movs	r3, #1
 80034fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034fc:	e007      	b.n	800350e <mcu_load+0x142>
 80034fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003508:	4413      	add	r3, r2
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003510:	2b3f      	cmp	r3, #63	; 0x3f
 8003512:	d9f4      	bls.n	80034fe <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8003514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 8003520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 800352c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8003538:	2301      	movs	r3, #1
 800353a:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fcd0 	bl	8002ee8 <huffext>
 8003548:	4603      	mov	r3, r0
 800354a:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d055      	beq.n	80035fe <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	da04      	bge.n	8003562 <mcu_load+0x196>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	425b      	negs	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e070      	b.n	8003644 <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	b29b      	uxth	r3, r3
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	81fb      	strh	r3, [r7, #14]
			if (z) {
 800356a:	89fb      	ldrh	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8003570:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	4413      	add	r3, r2
 8003576:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8003578:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800357a:	2b3f      	cmp	r3, #63	; 0x3f
 800357c:	d901      	bls.n	8003582 <mcu_load+0x1b6>
 800357e:	2306      	movs	r3, #6
 8003580:	e060      	b.n	8003644 <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02f      	beq.n	80035f0 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fc35 	bl	8002e02 <bitext>
 8003598:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	da04      	bge.n	80035aa <mcu_load+0x1de>
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	425b      	negs	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e04c      	b.n	8003644 <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	2201      	movs	r2, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 80035b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <mcu_load+0x200>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 80035cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <mcu_load+0x280>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e0:	fb03 f202 	mul.w	r2, r3, r2
 80035e4:	89fb      	ldrh	r3, [r7, #14]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ea:	440b      	add	r3, r1
 80035ec:	1212      	asrs	r2, r2, #8
 80035ee:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 80035f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035f2:	3301      	adds	r3, #1
 80035f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035f8:	2b3f      	cmp	r3, #63	; 0x3f
 80035fa:	d99f      	bls.n	800353c <mcu_load+0x170>
 80035fc:	e000      	b.n	8003600 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 80035fe:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7b5b      	ldrb	r3, [r3, #13]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d10b      	bne.n	8003620 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da00      	bge.n	8003612 <mcu_load+0x246>
 8003610:	33ff      	adds	r3, #255	; 0xff
 8003612:	121b      	asrs	r3, r3, #8
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3b80      	subs	r3, #128	; 0x80
 8003618:	b2da      	uxtb	r2, r3
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e003      	b.n	8003628 <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8003620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003624:	f7ff fd00 	bl	8003028 <block_idct>
		}

		bp += 64;				/* Next block */
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	3340      	adds	r3, #64	; 0x40
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 800362e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003630:	3301      	adds	r3, #1
 8003632:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003634:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003636:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800363a:	440b      	add	r3, r1
 800363c:	429a      	cmp	r2, r3
 800363e:	f6ff aedd 	blt.w	80033fc <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3740      	adds	r7, #64	; 0x40
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08017d08 	.word	0x08017d08

08003650 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b098      	sub	sp, #96	; 0x60
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	460b      	mov	r3, r1
 8003660:	80fb      	strh	r3, [r7, #6]
 8003662:	4613      	mov	r3, r2
 8003664:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	7b9b      	ldrb	r3, [r3, #14]
 800366e:	b29b      	uxth	r3, r3
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	863b      	strh	r3, [r7, #48]	; 0x30
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	7bdb      	ldrb	r3, [r3, #15]
 8003678:	b29b      	uxth	r3, r3
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003682:	4413      	add	r3, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	8b92      	ldrh	r2, [r2, #28]
 8003688:	4293      	cmp	r3, r2
 800368a:	dd05      	ble.n	8003698 <mcu_output+0x48>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8b9a      	ldrh	r2, [r3, #28]
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	b29b      	uxth	r3, r3
 8003696:	e000      	b.n	800369a <mcu_output+0x4a>
 8003698:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800369a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 800369c:	88ba      	ldrh	r2, [r7, #4]
 800369e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036a0:	4413      	add	r3, r2
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	8bd2      	ldrh	r2, [r2, #30]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	dd05      	ble.n	80036b6 <mcu_output+0x66>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8bda      	ldrh	r2, [r3, #30]
 80036ae:	88bb      	ldrh	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	e000      	b.n	80036b8 <mcu_output+0x68>
 80036b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036b8:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 80036ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	7b52      	ldrb	r2, [r2, #13]
 80036c0:	4113      	asrs	r3, r2
 80036c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80036c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	7b52      	ldrb	r2, [r2, #13]
 80036ca:	4113      	asrs	r3, r2
 80036cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 80036ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <mcu_output+0x8a>
 80036d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <mcu_output+0x8e>
 80036da:	2300      	movs	r3, #0
 80036dc:	e2f0      	b.n	8003cc0 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	7b52      	ldrb	r2, [r2, #13]
 80036e4:	4113      	asrs	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	7b52      	ldrb	r2, [r2, #13]
 80036ee:	4113      	asrs	r3, r2
 80036f0:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	82bb      	strh	r3, [r7, #20]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 8003704:	88bb      	ldrh	r3, [r7, #4]
 8003706:	833b      	strh	r3, [r7, #24]
 8003708:	88ba      	ldrh	r2, [r7, #4]
 800370a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800370c:	4413      	add	r3, r2
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	7b5b      	ldrb	r3, [r3, #13]
 800371a:	2b03      	cmp	r3, #3
 800371c:	f000 81a3 	beq.w	8003a66 <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 8003726:	2300      	movs	r3, #0
 8003728:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800372c:	e0e3      	b.n	80038f6 <mcu_output+0x2a6>
			pc = jd->mcubuf;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003732:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 8003734:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	461a      	mov	r2, r3
 800373c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373e:	4413      	add	r3, r2
 8003740:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 8003742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003744:	2b10      	cmp	r3, #16
 8003746:	d111      	bne.n	800376c <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8003748:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	3320      	adds	r3, #32
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	461a      	mov	r2, r3
 8003756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003758:	4413      	add	r3, r2
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 800375c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003760:	2b07      	cmp	r3, #7
 8003762:	d90c      	bls.n	800377e <mcu_output+0x12e>
 8003764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003766:	3340      	adds	r3, #64	; 0x40
 8003768:	65bb      	str	r3, [r7, #88]	; 0x58
 800376a:	e008      	b.n	800377e <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 800376c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800376e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	461a      	mov	r2, r3
 8003778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377a:	4413      	add	r3, r2
 800377c:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 800377e:	2300      	movs	r3, #0
 8003780:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003784:	e0ac      	b.n	80038e0 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 8003786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b80      	subs	r3, #128	; 0x80
 800378e:	b29b      	uxth	r3, r3
 8003790:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 8003792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003794:	3340      	adds	r3, #64	; 0x40
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b80      	subs	r3, #128	; 0x80
 800379c:	b29b      	uxth	r3, r3
 800379e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 80037a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d10e      	bne.n	80037c4 <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80037a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d102      	bne.n	80037b4 <mcu_output+0x164>
 80037ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b0:	3338      	adds	r3, #56	; 0x38
 80037b2:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80037b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037be:	4413      	add	r3, r2
 80037c0:	657b      	str	r3, [r7, #84]	; 0x54
 80037c2:	e002      	b.n	80037ca <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	3301      	adds	r3, #1
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 80037ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 80037d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037e0:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8003ac0 <mcu_output+0x470>
 80037e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037ec:	ee17 3a90 	vmov	r3, s15
 80037f0:	b21b      	sxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80037f8:	fb03 f202 	mul.w	r2, r3, r2
 80037fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003800:	fb92 f3f3 	sdiv	r3, r2, r3
 8003804:	b29a      	uxth	r2, r3
 8003806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003808:	4413      	add	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	6539      	str	r1, [r7, #80]	; 0x50
 8003816:	49b2      	ldr	r1, [pc, #712]	; (8003ae0 <mcu_output+0x490>)
 8003818:	5c8a      	ldrb	r2, [r1, r2]
 800381a:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 800381c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800381e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800382a:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003ac8 <mcu_output+0x478>
 800382e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003832:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003836:	ee17 3a90 	vmov	r3, s15
 800383a:	b21b      	sxth	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003842:	fb03 f101 	mul.w	r1, r3, r1
 8003846:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003852:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003ad0 <mcu_output+0x480>
 8003856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800385a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800385e:	ee17 3a90 	vmov	r3, s15
 8003862:	b21b      	sxth	r3, r3
 8003864:	4618      	mov	r0, r3
 8003866:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	4419      	add	r1, r3
 8003870:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003874:	fb91 f3f3 	sdiv	r3, r1, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	b29b      	uxth	r3, r3
 800387e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003884:	1c59      	adds	r1, r3, #1
 8003886:	6539      	str	r1, [r7, #80]	; 0x50
 8003888:	4995      	ldr	r1, [pc, #596]	; (8003ae0 <mcu_output+0x490>)
 800388a:	5c8a      	ldrb	r2, [r1, r2]
 800388c:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 800388e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800389a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8003ad8 <mcu_output+0x488>
 800389e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80038a6:	ee17 3a90 	vmov	r3, s15
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80038b2:	fb03 f202 	mul.w	r2, r3, r2
 80038b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80038ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80038be:	b29a      	uxth	r2, r3
 80038c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038c2:	4413      	add	r3, r2
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	6539      	str	r1, [r7, #80]	; 0x50
 80038d0:	4983      	ldr	r1, [pc, #524]	; (8003ae0 <mcu_output+0x490>)
 80038d2:	5c8a      	ldrb	r2, [r1, r2]
 80038d4:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 80038d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038da:	3301      	adds	r3, #1
 80038dc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038e0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038e6:	429a      	cmp	r2, r3
 80038e8:	f4ff af4d 	bcc.w	8003786 <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 80038ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038f0:	3301      	adds	r3, #1
 80038f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038f6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80038fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f4ff af16 	bcc.w	800372e <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	7b5b      	ldrb	r3, [r3, #13]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8189 	beq.w	8003c1e <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	7b5b      	ldrb	r3, [r3, #13]
 8003910:	b29b      	uxth	r3, r3
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	7b5b      	ldrb	r3, [r3, #13]
 800391a:	461a      	mov	r2, r3
 800391c:	2301      	movs	r3, #1
 800391e:	4093      	lsls	r3, r2
 8003920:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8003922:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003924:	8c3b      	ldrh	r3, [r7, #32]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	0052      	lsls	r2, r2, #1
 800392e:	4413      	add	r3, r2
 8003930:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8003938:	2300      	movs	r3, #0
 800393a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800393e:	e08b      	b.n	8003a58 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8003940:	2300      	movs	r3, #0
 8003942:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003946:	e07b      	b.n	8003a40 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800394c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003950:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003952:	fb03 f202 	mul.w	r2, r3, r2
 8003956:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800395a:	441a      	add	r2, r3
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	440b      	add	r3, r1
 8003964:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800396c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003970:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003974:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003978:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 800397c:	2300      	movs	r3, #0
 800397e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003982:	e034      	b.n	80039ee <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 8003984:	2300      	movs	r3, #0
 8003986:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800398a:	e022      	b.n	80039d2 <mcu_output+0x382>
							r += *rgb24++;
 800398c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	653a      	str	r2, [r7, #80]	; 0x50
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800399a:	4413      	add	r3, r2
 800399c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 80039a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	653a      	str	r2, [r7, #80]	; 0x50
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039ae:	4413      	add	r3, r2
 80039b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 80039b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	653a      	str	r2, [r7, #80]	; 0x50
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80039c2:	4413      	add	r3, r2
 80039c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 80039c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039cc:	3301      	adds	r3, #1
 80039ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80039d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80039d6:	8c3b      	ldrh	r3, [r7, #32]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3d7      	bcc.n	800398c <mcu_output+0x33c>
						}
						rgb24 += a;
 80039dc:	8bfb      	ldrh	r3, [r7, #30]
 80039de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039e0:	4413      	add	r3, r2
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 80039e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039e8:	3301      	adds	r3, #1
 80039ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80039ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80039f2:	8c3b      	ldrh	r3, [r7, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d3c5      	bcc.n	8003984 <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 80039f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80039fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039fe:	fa42 f103 	asr.w	r1, r2, r3
 8003a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	643a      	str	r2, [r7, #64]	; 0x40
 8003a08:	b2ca      	uxtb	r2, r1
 8003a0a:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 8003a0c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a12:	fa42 f103 	asr.w	r1, r2, r3
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	643a      	str	r2, [r7, #64]	; 0x40
 8003a1c:	b2ca      	uxtb	r2, r1
 8003a1e:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 8003a20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a26:	fa42 f103 	asr.w	r1, r2, r3
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	643a      	str	r2, [r7, #64]	; 0x40
 8003a30:	b2ca      	uxtb	r2, r1
 8003a32:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 8003a34:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a38:	8c3b      	ldrh	r3, [r7, #32]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a40:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f4ff af7e 	bcc.w	8003948 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 8003a4c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003a50:	8c3b      	ldrh	r3, [r7, #32]
 8003a52:	4413      	add	r3, r2
 8003a54:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a58:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	f4ff af6e 	bcc.w	8003940 <mcu_output+0x2f0>
 8003a64:	e0db      	b.n	8003c1e <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003a72:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003a74:	fb01 f202 	mul.w	r2, r1, r2
 8003a78:	4413      	add	r3, r2
 8003a7a:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b80      	subs	r3, #128	; 0x80
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 8003a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8a:	3340      	adds	r3, #64	; 0x40
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b80      	subs	r3, #128	; 0x80
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a9c:	e0b9      	b.n	8003c12 <mcu_output+0x5c2>
			py = jd->mcubuf;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 8003aa4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d102      	bne.n	8003ab2 <mcu_output+0x462>
 8003aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aae:	3380      	adds	r3, #128	; 0x80
 8003ab0:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003ab8:	e0a0      	b.n	8003bfc <mcu_output+0x5ac>
 8003aba:	bf00      	nop
 8003abc:	f3af 8000 	nop.w
 8003ac0:	8d4fdf3b 	.word	0x8d4fdf3b
 8003ac4:	3ff66e97 	.word	0x3ff66e97
 8003ac8:	9374bc6a 	.word	0x9374bc6a
 8003acc:	3fd60418 	.word	0x3fd60418
 8003ad0:	872b020c 	.word	0x872b020c
 8003ad4:	3fe6d916 	.word	0x3fe6d916
 8003ad8:	ac083127 	.word	0xac083127
 8003adc:	3ffc5a1c 	.word	0x3ffc5a1c
 8003ae0:	08017dc8 	.word	0x08017dc8
				yy = *py;	/* Get Y component */
 8003ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 8003aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aec:	3340      	adds	r3, #64	; 0x40
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 8003af0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003afc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003cc8 <mcu_output+0x678>
 8003b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b08:	ee17 3a90 	vmov	r3, s15
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003b14:	fb03 f202 	mul.w	r2, r3, r2
 8003b18:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b24:	4413      	add	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	6539      	str	r1, [r7, #80]	; 0x50
 8003b32:	496d      	ldr	r1, [pc, #436]	; (8003ce8 <mcu_output+0x698>)
 8003b34:	5c8a      	ldrb	r2, [r1, r2]
 8003b36:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003b38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b3a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b46:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003cd0 <mcu_output+0x680>
 8003b4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b52:	ee17 3a90 	vmov	r3, s15
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003b5e:	fb03 f101 	mul.w	r1, r3, r1
 8003b62:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b6e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003cd8 <mcu_output+0x688>
 8003b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b76:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003b7a:	ee17 3a90 	vmov	r3, s15
 8003b7e:	b21b      	sxth	r3, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003b86:	fb00 f303 	mul.w	r3, r0, r3
 8003b8a:	4419      	add	r1, r3
 8003b8c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003b90:	fb91 f3f3 	sdiv	r3, r1, r3
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	6539      	str	r1, [r7, #80]	; 0x50
 8003ba4:	4950      	ldr	r1, [pc, #320]	; (8003ce8 <mcu_output+0x698>)
 8003ba6:	5c8a      	ldrb	r2, [r1, r2]
 8003ba8:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 8003baa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003bb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003ce0 <mcu_output+0x690>
 8003bba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bbe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003bc2:	ee17 3a90 	vmov	r3, s15
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bde:	4413      	add	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	6539      	str	r1, [r7, #80]	; 0x50
 8003bec:	493e      	ldr	r1, [pc, #248]	; (8003ce8 <mcu_output+0x698>)
 8003bee:	5c8a      	ldrb	r2, [r1, r2]
 8003bf0:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 8003bf2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003bfc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003c00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f4ff af6e 	bcc.w	8003ae4 <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003c08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c12:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003c16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	f4ff af40 	bcc.w	8003a9e <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 8003c1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	7b52      	ldrb	r2, [r2, #13]
 8003c24:	4113      	asrs	r3, r2
 8003c26:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003c28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003c2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d23a      	bcs.n	8003ca6 <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c3e:	e02e      	b.n	8003c9e <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003c40:	2300      	movs	r3, #0
 8003c42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c44:	e01a      	b.n	8003c7c <mcu_output+0x62c>
				*d++ = *s++;
 8003c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c48:	1c53      	adds	r3, r2, #1
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c58:	1c53      	adds	r3, r2, #1
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c68:	1c53      	adds	r3, r2, #1
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003c76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c78:	3301      	adds	r3, #1
 8003c7a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3e0      	bcc.n	8003c46 <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8003c84:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c88:	1ad2      	subs	r2, r2, r3
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	4413      	add	r3, r2
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003c98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3cc      	bcc.n	8003c40 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003caa:	f107 0214 	add.w	r2, r7, #20
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	4798      	blx	r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3760      	adds	r7, #96	; 0x60
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	8d4fdf3b 	.word	0x8d4fdf3b
 8003ccc:	3ff66e97 	.word	0x3ff66e97
 8003cd0:	9374bc6a 	.word	0x9374bc6a
 8003cd4:	3fd60418 	.word	0x3fd60418
 8003cd8:	872b020c 	.word	0x872b020c
 8003cdc:	3fe6d916 	.word	0x3fe6d916
 8003ce0:	ac083127 	.word	0xac083127
 8003ce4:	3ffc5a1c 	.word	0x3ffc5a1c
 8003ce8:	08017dc8 	.word	0x08017dc8

08003cec <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	82bb      	strh	r3, [r7, #20]
	d = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003d08:	2300      	movs	r3, #0
 8003d0a:	82fb      	strh	r3, [r7, #22]
 8003d0c:	e025      	b.n	8003d5a <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 8003d0e:	8abb      	ldrh	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d110      	bne.n	8003d36 <restart+0x4a>
			dp = jd->inbuf;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 8003d2c:	8abb      	ldrh	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <restart+0x50>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e03d      	b.n	8003db2 <restart+0xc6>
		} else {
			dp++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 8003d3c:	8abb      	ldrh	r3, [r7, #20]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 8003d42:	8a7b      	ldrh	r3, [r7, #18]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	b21a      	sxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	3301      	adds	r3, #1
 8003d58:	82fb      	strh	r3, [r7, #22]
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d9d6      	bls.n	8003d0e <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8aba      	ldrh	r2, [r7, #20]
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 8003d72:	8a7a      	ldrh	r2, [r7, #18]
 8003d74:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8003d78:	4013      	ands	r3, r2
 8003d7a:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d107      	bne.n	8003d92 <restart+0xa6>
 8003d82:	8a7a      	ldrh	r2, [r7, #18]
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	4053      	eors	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 8003d92:	2306      	movs	r3, #6
 8003d94:	e00d      	b.n	8003db2 <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	829a      	strh	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	82da      	strh	r2, [r3, #22]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <jd_prepare+0x18>
 8003dd0:	2305      	movs	r3, #5
 8003dd2:	e2a4      	b.n	800431e <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dec:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003df4:	2300      	movs	r3, #0
 8003df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003df8:	e026      	b.n	8003e48 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	843b      	strh	r3, [r7, #32]
 8003dfe:	e01d      	b.n	8003e3c <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003e00:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003e02:	8c3a      	ldrh	r2, [r7, #32]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0049      	lsls	r1, r1, #1
 8003e08:	440a      	add	r2, r1
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 8003e12:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003e14:	8c3a      	ldrh	r2, [r7, #32]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0049      	lsls	r1, r1, #1
 8003e1a:	440a      	add	r2, r1
 8003e1c:	320c      	adds	r2, #12
 8003e1e:	2100      	movs	r1, #0
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 8003e24:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003e26:	8c3a      	ldrh	r2, [r7, #32]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	0049      	lsls	r1, r1, #1
 8003e2c:	440a      	add	r2, r1
 8003e2e:	3210      	adds	r2, #16
 8003e30:	2100      	movs	r1, #0
 8003e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 8003e36:	8c3b      	ldrh	r3, [r7, #32]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	843b      	strh	r3, [r7, #32]
 8003e3c:	8c3b      	ldrh	r3, [r7, #32]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d9de      	bls.n	8003e00 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e44:	3301      	adds	r3, #1
 8003e46:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d9d5      	bls.n	8003dfa <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e52:	e008      	b.n	8003e66 <jd_prepare+0xaa>
 8003e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	847a      	strh	r2, [r7, #34]	; 0x22
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3214      	adds	r2, #20
 8003e60:	2100      	movs	r1, #0
 8003e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d9f3      	bls.n	8003e54 <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 8003e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7fe fe68 	bl	8002b46 <alloc_pool>
 8003e76:	61b8      	str	r0, [r7, #24]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <jd_prepare+0xcc>
 8003e84:	2303      	movs	r3, #3
 8003e86:	e24a      	b.n	800431e <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	4798      	blx	r3
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d001      	beq.n	8003e9e <jd_prepare+0xe2>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e23f      	b.n	800431e <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003eb6:	d001      	beq.n	8003ebc <jd_prepare+0x100>
 8003eb8:	2306      	movs	r3, #6
 8003eba:	e230      	b.n	800431e <jd_prepare+0x562>
	ofs = 2;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	4798      	blx	r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d001      	beq.n	8003ed6 <jd_prepare+0x11a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e223      	b.n	800431e <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	b21a      	sxth	r2, r3
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3302      	adds	r3, #2
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d904      	bls.n	8003f14 <jd_prepare+0x158>
 8003f0a:	8afb      	ldrh	r3, [r7, #22]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2bff      	cmp	r3, #255	; 0xff
 8003f12:	d001      	beq.n	8003f18 <jd_prepare+0x15c>
 8003f14:	2306      	movs	r3, #6
 8003f16:	e202      	b.n	800431e <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003f18:	8bfb      	ldrh	r3, [r7, #30]
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003f1e:	8bfa      	ldrh	r2, [r7, #30]
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3bc0      	subs	r3, #192	; 0xc0
 8003f2e:	2b1d      	cmp	r3, #29
 8003f30:	f200 81e3 	bhi.w	80042fa <jd_prepare+0x53e>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <jd_prepare+0x180>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003fb5 	.word	0x08003fb5
 8003f40:	080042f7 	.word	0x080042f7
 8003f44:	080042f7 	.word	0x080042f7
 8003f48:	080042f7 	.word	0x080042f7
 8003f4c:	080040f1 	.word	0x080040f1
 8003f50:	080042f7 	.word	0x080042f7
 8003f54:	080042f7 	.word	0x080042f7
 8003f58:	080042f7 	.word	0x080042f7
 8003f5c:	080042fb 	.word	0x080042fb
 8003f60:	080042f7 	.word	0x080042f7
 8003f64:	080042f7 	.word	0x080042f7
 8003f68:	080042f7 	.word	0x080042f7
 8003f6c:	080042fb 	.word	0x080042fb
 8003f70:	080042f7 	.word	0x080042f7
 8003f74:	080042f7 	.word	0x080042f7
 8003f78:	080042f7 	.word	0x080042f7
 8003f7c:	080042fb 	.word	0x080042fb
 8003f80:	080042fb 	.word	0x080042fb
 8003f84:	080042fb 	.word	0x080042fb
 8003f88:	080042fb 	.word	0x080042fb
 8003f8c:	080042fb 	.word	0x080042fb
 8003f90:	080042fb 	.word	0x080042fb
 8003f94:	080042fb 	.word	0x080042fb
 8003f98:	080042fb 	.word	0x080042fb
 8003f9c:	080042fb 	.word	0x080042fb
 8003fa0:	080042f7 	.word	0x080042f7
 8003fa4:	08004175 	.word	0x08004175
 8003fa8:	08004133 	.word	0x08004133
 8003fac:	080042fb 	.word	0x080042fb
 8003fb0:	080040af 	.word	0x080040af
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fba:	d901      	bls.n	8003fc0 <jd_prepare+0x204>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	e1ae      	b.n	800431e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	8bfa      	ldrh	r2, [r7, #30]
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	4798      	blx	r3
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	8bfb      	ldrh	r3, [r7, #30]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d001      	beq.n	8003fda <jd_prepare+0x21e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e1a1      	b.n	800431e <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	3303      	adds	r3, #3
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	b21a      	sxth	r2, r3
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	3302      	adds	r3, #2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b21b      	sxth	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b21b      	sxth	r3, r3
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3305      	adds	r3, #5
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d001      	beq.n	8004020 <jd_prepare+0x264>
 800401c:	2308      	movs	r3, #8
 800401e:	e17e      	b.n	800431e <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8004020:	2300      	movs	r3, #0
 8004022:	847b      	strh	r3, [r7, #34]	; 0x22
 8004024:	e03f      	b.n	80040a6 <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8004026:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	3307      	adds	r3, #7
 8004030:	461a      	mov	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 800403a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800403c:	2b00      	cmp	r3, #0
 800403e:	d116      	bne.n	800406e <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8004040:	7c7b      	ldrb	r3, [r7, #17]
 8004042:	2b11      	cmp	r3, #17
 8004044:	d007      	beq.n	8004056 <jd_prepare+0x29a>
 8004046:	7c7b      	ldrb	r3, [r7, #17]
 8004048:	2b22      	cmp	r3, #34	; 0x22
 800404a:	d004      	beq.n	8004056 <jd_prepare+0x29a>
 800404c:	7c7b      	ldrb	r3, [r7, #17]
 800404e:	2b21      	cmp	r3, #33	; 0x21
 8004050:	d001      	beq.n	8004056 <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8004052:	2308      	movs	r3, #8
 8004054:	e163      	b.n	800431e <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8004056:	7c7b      	ldrb	r3, [r7, #17]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	739a      	strb	r2, [r3, #14]
 8004060:	7c7b      	ldrb	r3, [r7, #17]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	73da      	strb	r2, [r3, #15]
 800406c:	e004      	b.n	8004078 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 800406e:	7c7b      	ldrb	r3, [r7, #17]
 8004070:	2b11      	cmp	r3, #17
 8004072:	d001      	beq.n	8004078 <jd_prepare+0x2bc>
 8004074:	2308      	movs	r3, #8
 8004076:	e152      	b.n	800431e <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8004078:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	3308      	adds	r3, #8
 8004082:	461a      	mov	r2, r3
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 800408c:	7c7b      	ldrb	r3, [r7, #17]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d901      	bls.n	8004096 <jd_prepare+0x2da>
 8004092:	2308      	movs	r3, #8
 8004094:	e143      	b.n	800431e <jd_prepare+0x562>
				jd->qtid[i] = b;
 8004096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	7c7a      	ldrb	r2, [r7, #17]
 800409e:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 80040a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040a2:	3301      	adds	r3, #1
 80040a4:	847b      	strh	r3, [r7, #34]	; 0x22
 80040a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d9bc      	bls.n	8004026 <jd_prepare+0x26a>
			}
			break;
 80040ac:	e136      	b.n	800431c <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80040ae:	8bfb      	ldrh	r3, [r7, #30]
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d901      	bls.n	80040ba <jd_prepare+0x2fe>
 80040b6:	2304      	movs	r3, #4
 80040b8:	e131      	b.n	800431e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	8bfa      	ldrh	r2, [r7, #30]
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	4798      	blx	r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	8bfb      	ldrh	r3, [r7, #30]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d001      	beq.n	80040d4 <jd_prepare+0x318>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e124      	b.n	800431e <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	b21a      	sxth	r2, r3
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3301      	adds	r3, #1
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	835a      	strh	r2, [r3, #26]
			break;
 80040ee:	e115      	b.n	800431c <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80040f0:	8bfb      	ldrh	r3, [r7, #30]
 80040f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f6:	d901      	bls.n	80040fc <jd_prepare+0x340>
 80040f8:	2304      	movs	r3, #4
 80040fa:	e110      	b.n	800431e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	8bfa      	ldrh	r2, [r7, #30]
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	4798      	blx	r3
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	8bfb      	ldrh	r3, [r7, #30]
 800410e:	4293      	cmp	r3, r2
 8004110:	d001      	beq.n	8004116 <jd_prepare+0x35a>
 8004112:	2302      	movs	r3, #2
 8004114:	e103      	b.n	800431e <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8004116:	8bfb      	ldrh	r3, [r7, #30]
 8004118:	461a      	mov	r2, r3
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fe fd9b 	bl	8002c58 <create_huffman_tbl>
 8004122:	4603      	mov	r3, r0
 8004124:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8004126:	7d7b      	ldrb	r3, [r7, #21]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80f4 	beq.w	8004316 <jd_prepare+0x55a>
 800412e:	7d7b      	ldrb	r3, [r7, #21]
 8004130:	e0f5      	b.n	800431e <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8004132:	8bfb      	ldrh	r3, [r7, #30]
 8004134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004138:	d901      	bls.n	800413e <jd_prepare+0x382>
 800413a:	2304      	movs	r3, #4
 800413c:	e0ef      	b.n	800431e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	8bfa      	ldrh	r2, [r7, #30]
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	4798      	blx	r3
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	8bfb      	ldrh	r3, [r7, #30]
 8004150:	4293      	cmp	r3, r2
 8004152:	d001      	beq.n	8004158 <jd_prepare+0x39c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0e2      	b.n	800431e <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8004158:	8bfb      	ldrh	r3, [r7, #30]
 800415a:	461a      	mov	r2, r3
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7fe fd1e 	bl	8002ba0 <create_qt_tbl>
 8004164:	4603      	mov	r3, r0
 8004166:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8004168:	7d7b      	ldrb	r3, [r7, #21]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80d5 	beq.w	800431a <jd_prepare+0x55e>
 8004170:	7d7b      	ldrb	r3, [r7, #21]
 8004172:	e0d4      	b.n	800431e <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8004174:	8bfb      	ldrh	r3, [r7, #30]
 8004176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417a:	d901      	bls.n	8004180 <jd_prepare+0x3c4>
 800417c:	2304      	movs	r3, #4
 800417e:	e0ce      	b.n	800431e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	8bfa      	ldrh	r2, [r7, #30]
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	8bfb      	ldrh	r3, [r7, #30]
 8004192:	4293      	cmp	r3, r2
 8004194:	d001      	beq.n	800419a <jd_prepare+0x3de>
 8004196:	2302      	movs	r3, #2
 8004198:	e0c1      	b.n	800431e <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8b9b      	ldrh	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <jd_prepare+0x3ee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8bdb      	ldrh	r3, [r3, #30]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <jd_prepare+0x3f2>
 80041aa:	2306      	movs	r3, #6
 80041ac:	e0b7      	b.n	800431e <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d001      	beq.n	80041ba <jd_prepare+0x3fe>
 80041b6:	2308      	movs	r3, #8
 80041b8:	e0b1      	b.n	800431e <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 80041ba:	2300      	movs	r3, #0
 80041bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80041be:	e036      	b.n	800422e <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 80041c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	461a      	mov	r2, r3
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 80041d0:	7c7b      	ldrb	r3, [r7, #17]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <jd_prepare+0x424>
 80041d6:	7c7b      	ldrb	r3, [r7, #17]
 80041d8:	2b11      	cmp	r3, #17
 80041da:	d001      	beq.n	80041e0 <jd_prepare+0x424>
 80041dc:	2308      	movs	r3, #8
 80041de:	e09e      	b.n	800431e <jd_prepare+0x562>
				b = i ? 1 : 0;
 80041e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 80041ee:	7c7a      	ldrb	r2, [r7, #17]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3204      	adds	r2, #4
 80041f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <jd_prepare+0x44e>
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 800420a:	2306      	movs	r3, #6
 800420c:	e087      	b.n	800431e <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 800420e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	7c1b      	ldrb	r3, [r3, #16]
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3214      	adds	r2, #20
 800421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 8004224:	2306      	movs	r3, #6
 8004226:	e07a      	b.n	800431e <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8004228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800422a:	3301      	adds	r3, #1
 800422c:	847b      	strh	r3, [r7, #34]	; 0x22
 800422e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004230:	2b02      	cmp	r3, #2
 8004232:	d9c5      	bls.n	80041c0 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	7bdb      	ldrb	r3, [r3, #15]
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	7b9b      	ldrb	r3, [r3, #14]
 800423e:	b29b      	uxth	r3, r3
 8004240:	fb12 f303 	smulbb	r3, r2, r3
 8004244:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8004246:	8a7b      	ldrh	r3, [r7, #18]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <jd_prepare+0x494>
 800424c:	2306      	movs	r3, #6
 800424e:	e066      	b.n	800431e <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8004250:	8a7b      	ldrh	r3, [r7, #18]
 8004252:	01db      	lsls	r3, r3, #7
 8004254:	b29b      	uxth	r3, r3
 8004256:	3340      	adds	r3, #64	; 0x40
 8004258:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 800425a:	8bfb      	ldrh	r3, [r7, #30]
 800425c:	2bff      	cmp	r3, #255	; 0xff
 800425e:	d802      	bhi.n	8004266 <jd_prepare+0x4aa>
 8004260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004264:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8004266:	8bfb      	ldrh	r3, [r7, #30]
 8004268:	4619      	mov	r1, r3
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7fe fc6b 	bl	8002b46 <alloc_pool>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <jd_prepare+0x4c6>
 800427e:	2303      	movs	r3, #3
 8004280:	e04d      	b.n	800431e <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 8004282:	8a7b      	ldrh	r3, [r7, #18]
 8004284:	3302      	adds	r3, #2
 8004286:	b29b      	uxth	r3, r3
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	b29b      	uxth	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7fe fc59 	bl	8002b46 <alloc_pool>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <jd_prepare+0x4ea>
 80042a2:	2303      	movs	r3, #3
 80042a4:	e03b      	b.n	800431e <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	4411      	add	r1, r2
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	b292      	uxth	r2, r2
 80042d4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80042d8:	b292      	uxth	r2, r2
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	4798      	blx	r3
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	3b01      	subs	r3, #1
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 80042f2:	2300      	movs	r3, #0
 80042f4:	e013      	b.n	800431e <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 80042f6:	2308      	movs	r3, #8
 80042f8:	e011      	b.n	800431e <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	8bfa      	ldrh	r2, [r7, #30]
 8004300:	2100      	movs	r1, #0
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	4798      	blx	r3
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	8bfb      	ldrh	r3, [r7, #30]
 800430c:	4293      	cmp	r3, r2
 800430e:	f43f add7 	beq.w	8003ec0 <jd_prepare+0x104>
				return JDR_INP;
 8004312:	2302      	movs	r3, #2
 8004314:	e003      	b.n	800431e <jd_prepare+0x562>
			break;
 8004316:	bf00      	nop
 8004318:	e5d2      	b.n	8003ec0 <jd_prepare+0x104>
			break;
 800431a:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 800431c:	e5d0      	b.n	8003ec0 <jd_prepare+0x104>
			}
		}
	}
}
 800431e:	4618      	mov	r0, r3
 8004320:	3728      	adds	r7, #40	; 0x28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop

08004328 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d901      	bls.n	8004340 <jd_decomp+0x18>
 800433c:	2305      	movs	r3, #5
 800433e:	e06a      	b.n	8004416 <jd_decomp+0xee>
	jd->scale = scale;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	79fa      	ldrb	r2, [r7, #7]
 8004344:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	7b9b      	ldrb	r3, [r3, #14]
 800434a:	b29b      	uxth	r3, r3
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	82bb      	strh	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	7bdb      	ldrb	r3, [r3, #15]
 8004354:	b29b      	uxth	r3, r3
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	829a      	strh	r2, [r3, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	82da      	strh	r2, [r3, #22]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	833b      	strh	r3, [r7, #24]
 8004378:	8b3b      	ldrh	r3, [r7, #24]
 800437a:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8004380:	2300      	movs	r3, #0
 8004382:	83bb      	strh	r3, [r7, #28]
 8004384:	e041      	b.n	800440a <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8004386:	2300      	movs	r3, #0
 8004388:	83fb      	strh	r3, [r7, #30]
 800438a:	e035      	b.n	80043f8 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8b5b      	ldrh	r3, [r3, #26]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d016      	beq.n	80043c2 <jd_decomp+0x9a>
 8004394:	8b7b      	ldrh	r3, [r7, #26]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	837a      	strh	r2, [r7, #26]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	8b52      	ldrh	r2, [r2, #26]
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10f      	bne.n	80043c2 <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 80043a2:	8b3b      	ldrh	r3, [r7, #24]
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	833a      	strh	r2, [r7, #24]
 80043a8:	4619      	mov	r1, r3
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fc9e 	bl	8003cec <restart>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <jd_decomp+0x96>
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	e02b      	b.n	8004416 <jd_decomp+0xee>
				rst = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff f802 	bl	80033cc <mcu_load>
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <jd_decomp+0xae>
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	e01f      	b.n	8004416 <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 80043d6:	8bbb      	ldrh	r3, [r7, #28]
 80043d8:	8bfa      	ldrh	r2, [r7, #30]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff f937 	bl	8003650 <mcu_output>
 80043e2:	4603      	mov	r3, r0
 80043e4:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <jd_decomp+0xc8>
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	e012      	b.n	8004416 <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 80043f0:	8bfa      	ldrh	r2, [r7, #30]
 80043f2:	8abb      	ldrh	r3, [r7, #20]
 80043f4:	4413      	add	r3, r2
 80043f6:	83fb      	strh	r3, [r7, #30]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8b9b      	ldrh	r3, [r3, #28]
 80043fc:	8bfa      	ldrh	r2, [r7, #30]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3c4      	bcc.n	800438c <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8004402:	8bba      	ldrh	r2, [r7, #28]
 8004404:	8a7b      	ldrh	r3, [r7, #18]
 8004406:	4413      	add	r3, r2
 8004408:	83bb      	strh	r3, [r7, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8bdb      	ldrh	r3, [r3, #30]
 800440e:	8bba      	ldrh	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d3b8      	bcc.n	8004386 <jd_decomp+0x5e>
		}
	}

	return rc;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004422:	2003      	movs	r0, #3
 8004424:	f000 f94c 	bl	80046c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004428:	2000      	movs	r0, #0
 800442a:	f000 f805 	bl	8004438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800442e:	f7fd fc49 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_InitTick+0x54>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_InitTick+0x58>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800444e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f967 	bl	800472a <HAL_SYSTICK_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e00e      	b.n	8004484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d80a      	bhi.n	8004482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800446c:	2200      	movs	r2, #0
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	f000 f92f 	bl	80046d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004478:	4a06      	ldr	r2, [pc, #24]	; (8004494 <HAL_InitTick+0x5c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200004c0 	.word	0x200004c0
 8004490:	200004c8 	.word	0x200004c8
 8004494:	200004c4 	.word	0x200004c4

08004498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_IncTick+0x20>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_IncTick+0x24>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_IncTick+0x24>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	200004c8 	.word	0x200004c8
 80044bc:	20001950 	.word	0x20001950

080044c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return uwTick;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_GetTick+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20001950 	.word	0x20001950

080044d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7ff ffee 	bl	80044c0 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d005      	beq.n	80044fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_Delay+0x44>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044fe:	bf00      	nop
 8004500:	f7ff ffde 	bl	80044c0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	429a      	cmp	r2, r3
 800450e:	d8f7      	bhi.n	8004500 <HAL_Delay+0x28>
  {
  }
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200004c8 	.word	0x200004c8

08004520 <__NVIC_SetPriorityGrouping>:
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <__NVIC_SetPriorityGrouping+0x40>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800453c:	4013      	ands	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <__NVIC_SetPriorityGrouping+0x44>)
 800454a:	4313      	orrs	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454e:	4a04      	ldr	r2, [pc, #16]	; (8004560 <__NVIC_SetPriorityGrouping+0x40>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	60d3      	str	r3, [r2, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000ed00 	.word	0xe000ed00
 8004564:	05fa0000 	.word	0x05fa0000

08004568 <__NVIC_GetPriorityGrouping>:
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <__NVIC_GetPriorityGrouping+0x18>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	f003 0307 	and.w	r3, r3, #7
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <__NVIC_EnableIRQ>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	db0b      	blt.n	80045ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	f003 021f 	and.w	r2, r3, #31
 800459c:	4907      	ldr	r1, [pc, #28]	; (80045bc <__NVIC_EnableIRQ+0x38>)
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2001      	movs	r0, #1
 80045a6:	fa00 f202 	lsl.w	r2, r0, r2
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	; (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <NVIC_EncodePriority>:
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f1c3 0307 	rsb	r3, r3, #7
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf28      	it	cs
 8004632:	2304      	movcs	r3, #4
 8004634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3304      	adds	r3, #4
 800463a:	2b06      	cmp	r3, #6
 800463c:	d902      	bls.n	8004644 <NVIC_EncodePriority+0x30>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3b03      	subs	r3, #3
 8004642:	e000      	b.n	8004646 <NVIC_EncodePriority+0x32>
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800465c:	f04f 31ff 	mov.w	r1, #4294967295
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	43d9      	mvns	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	4313      	orrs	r3, r2
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468c:	d301      	bcc.n	8004692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <SysTick_Config+0x40>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800469a:	210f      	movs	r1, #15
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f7ff ff8e 	bl	80045c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <SysTick_Config+0x40>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <SysTick_Config+0x40>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000e010 	.word	0xe000e010

080046c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff29 	bl	8004520 <__NVIC_SetPriorityGrouping>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e8:	f7ff ff3e 	bl	8004568 <__NVIC_GetPriorityGrouping>
 80046ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff8e 	bl	8004614 <NVIC_EncodePriority>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff5d 	bl	80045c0 <__NVIC_SetPriority>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff31 	bl	8004584 <__NVIC_EnableIRQ>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ffa2 	bl	800467c <SysTick_Config>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e054      	b.n	8004800 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7f5b      	ldrb	r3, [r3, #29]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fb ff9a 	bl	80006a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	791b      	ldrb	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <HAL_CRC_Init+0xc4>)
 8004780:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0218 	bic.w	r2, r2, #24
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	e00c      	b.n	80047ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	461a      	mov	r2, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f834 	bl	800480c <HAL_CRCEx_Polynomial_Set>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e028      	b.n	8004800 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	795b      	ldrb	r3, [r3, #5]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	611a      	str	r2, [r3, #16]
 80047c0:	e004      	b.n	80047cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6912      	ldr	r2, [r2, #16]
 80047ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	04c11db7 	.word	0x04c11db7

0800480c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800481c:	231f      	movs	r3, #31
 800481e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004820:	bf00      	nop
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	613a      	str	r2, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_CRCEx_Polynomial_Set+0x34>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b18      	cmp	r3, #24
 8004844:	d846      	bhi.n	80048d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	080048db 	.word	0x080048db
 8004850:	080048d5 	.word	0x080048d5
 8004854:	080048d5 	.word	0x080048d5
 8004858:	080048d5 	.word	0x080048d5
 800485c:	080048d5 	.word	0x080048d5
 8004860:	080048d5 	.word	0x080048d5
 8004864:	080048d5 	.word	0x080048d5
 8004868:	080048d5 	.word	0x080048d5
 800486c:	080048c9 	.word	0x080048c9
 8004870:	080048d5 	.word	0x080048d5
 8004874:	080048d5 	.word	0x080048d5
 8004878:	080048d5 	.word	0x080048d5
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048d5 	.word	0x080048d5
 8004884:	080048d5 	.word	0x080048d5
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048d5 	.word	0x080048d5
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048b1 	.word	0x080048b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d913      	bls.n	80048de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048ba:	e010      	b.n	80048de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d90f      	bls.n	80048e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048c6:	e00c      	b.n	80048e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d90b      	bls.n	80048e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048d2:	e008      	b.n	80048e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	e006      	b.n	80048e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10d      	bne.n	800490a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 0118 	bic.w	r1, r3, #24
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7ff fdcc 	bl	80044c0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e099      	b.n	8004a68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004954:	e00f      	b.n	8004976 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004956:	f7ff fdb3 	bl	80044c0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b05      	cmp	r3, #5
 8004962:	d908      	bls.n	8004976 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e078      	b.n	8004a68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e8      	bne.n	8004956 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_DMA_Init+0x158>)
 8004990:	4013      	ands	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d107      	bne.n	80049e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	4313      	orrs	r3, r2
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d117      	bne.n	8004a3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa7b 	bl	8004f18 <DMA_CheckFifoParam>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a36:	2301      	movs	r3, #1
 8004a38:	e016      	b.n	8004a68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa32 	bl	8004eac <DMA_CalcBaseAndBitshift>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	223f      	movs	r2, #63	; 0x3f
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e010803f 	.word	0xe010803f

08004a74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a82:	f7ff fd1d 	bl	80044c0 <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d008      	beq.n	8004aa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2280      	movs	r2, #128	; 0x80
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e052      	b.n	8004b4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0216 	bic.w	r2, r2, #22
 8004ab4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_DMA_Abort+0x62>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af6:	e013      	b.n	8004b20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af8:	f7ff fce2 	bl	80044c0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d90c      	bls.n	8004b20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e015      	b.n	8004b4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e4      	bne.n	8004af8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	223f      	movs	r2, #63	; 0x3f
 8004b34:	409a      	lsls	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d004      	beq.n	8004b72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e00c      	b.n	8004b8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2205      	movs	r2, #5
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004ba4:	4b8e      	ldr	r3, [pc, #568]	; (8004de0 <HAL_DMA_IRQHandler+0x248>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a8e      	ldr	r2, [pc, #568]	; (8004de4 <HAL_DMA_IRQHandler+0x24c>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01a      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0204 	bic.w	r2, r2, #4
 8004bea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	2201      	movs	r2, #1
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d012      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	2201      	movs	r2, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f043 0202 	orr.w	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2204      	movs	r2, #4
 8004c40:	409a      	lsls	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d012      	beq.n	8004c70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f043 0204 	orr.w	r2, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2210      	movs	r2, #16
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d043      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03c      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	2210      	movs	r2, #16
 8004c94:	409a      	lsls	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d024      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
 8004cc6:	e01f      	b.n	8004d08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
 8004cd8:	e016      	b.n	8004d08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0208 	bic.w	r2, r2, #8
 8004cf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 808f 	beq.w	8004e38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8087 	beq.w	8004e38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	2220      	movs	r2, #32
 8004d30:	409a      	lsls	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d136      	bne.n	8004db0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0216 	bic.w	r2, r2, #22
 8004d50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_DMA_IRQHandler+0x1da>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0208 	bic.w	r2, r2, #8
 8004d80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	223f      	movs	r2, #63	; 0x3f
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d07e      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
        }
        return;
 8004dae:	e079      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01d      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d031      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
 8004ddc:	e02c      	b.n	8004e38 <HAL_DMA_IRQHandler+0x2a0>
 8004dde:	bf00      	nop
 8004de0:	200004c0 	.word	0x200004c0
 8004de4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d023      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	e01e      	b.n	8004e38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0210 	bic.w	r2, r2, #16
 8004e16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d032      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d022      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2205      	movs	r2, #5
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d307      	bcc.n	8004e80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f2      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x2cc>
 8004e7e:	e000      	b.n	8004e82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ea4:	bf00      	nop
    }
  }
}
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3b10      	subs	r3, #16
 8004ebc:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <DMA_CalcBaseAndBitshift+0x60>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <DMA_CalcBaseAndBitshift+0x64>)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d908      	bls.n	8004eec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <DMA_CalcBaseAndBitshift+0x68>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	659a      	str	r2, [r3, #88]	; 0x58
 8004eea:	e006      	b.n	8004efa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <DMA_CalcBaseAndBitshift+0x68>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	aaaaaaab 	.word	0xaaaaaaab
 8004f10:	080181c8 	.word	0x080181c8
 8004f14:	fffffc00 	.word	0xfffffc00

08004f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11f      	bne.n	8004f72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d856      	bhi.n	8004fe6 <DMA_CheckFifoParam+0xce>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <DMA_CheckFifoParam+0x28>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f63 	.word	0x08004f63
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004fe7 	.word	0x08004fe7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d046      	beq.n	8004fea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f60:	e043      	b.n	8004fea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f6a:	d140      	bne.n	8004fee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f70:	e03d      	b.n	8004fee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7a:	d121      	bne.n	8004fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d837      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xda>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <DMA_CheckFifoParam+0x70>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004f9f 	.word	0x08004f9f
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	08004fb1 	.word	0x08004fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e030      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d025      	beq.n	8004ff6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fae:	e022      	b.n	8004ff6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fb8:	d11f      	bne.n	8004ffa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fbe:	e01c      	b.n	8004ffa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d903      	bls.n	8004fce <DMA_CheckFifoParam+0xb6>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d003      	beq.n	8004fd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fcc:	e018      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd2:	e015      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe4:	e00b      	b.n	8004ffe <DMA_CheckFifoParam+0xe6>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e00a      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;
 8004fea:	bf00      	nop
 8004fec:	e008      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e006      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e004      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
    }
  } 
  
  return status; 
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e175      	b.n	800531c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005030:	2201      	movs	r2, #1
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	f040 8164 	bne.w	8005316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d005      	beq.n	8005066 <HAL_GPIO_Init+0x56>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d130      	bne.n	80050c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800509c:	2201      	movs	r2, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 0201 	and.w	r2, r3, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d017      	beq.n	8005104 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2203      	movs	r2, #3
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d123      	bne.n	8005158 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	08da      	lsrs	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3208      	adds	r2, #8
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	220f      	movs	r2, #15
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	08da      	lsrs	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3208      	adds	r2, #8
 8005152:	69b9      	ldr	r1, [r7, #24]
 8005154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	2203      	movs	r2, #3
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0203 	and.w	r2, r3, #3
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80be 	beq.w	8005316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519a:	4b66      	ldr	r3, [pc, #408]	; (8005334 <HAL_GPIO_Init+0x324>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	4a65      	ldr	r2, [pc, #404]	; (8005334 <HAL_GPIO_Init+0x324>)
 80051a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a4:	6453      	str	r3, [r2, #68]	; 0x44
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_GPIO_Init+0x324>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80051b2:	4a61      	ldr	r2, [pc, #388]	; (8005338 <HAL_GPIO_Init+0x328>)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	3302      	adds	r3, #2
 80051ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	220f      	movs	r2, #15
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a58      	ldr	r2, [pc, #352]	; (800533c <HAL_GPIO_Init+0x32c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d037      	beq.n	800524e <HAL_GPIO_Init+0x23e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a57      	ldr	r2, [pc, #348]	; (8005340 <HAL_GPIO_Init+0x330>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d031      	beq.n	800524a <HAL_GPIO_Init+0x23a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a56      	ldr	r2, [pc, #344]	; (8005344 <HAL_GPIO_Init+0x334>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <HAL_GPIO_Init+0x236>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a55      	ldr	r2, [pc, #340]	; (8005348 <HAL_GPIO_Init+0x338>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d025      	beq.n	8005242 <HAL_GPIO_Init+0x232>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a54      	ldr	r2, [pc, #336]	; (800534c <HAL_GPIO_Init+0x33c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <HAL_GPIO_Init+0x22e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a53      	ldr	r2, [pc, #332]	; (8005350 <HAL_GPIO_Init+0x340>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d019      	beq.n	800523a <HAL_GPIO_Init+0x22a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a52      	ldr	r2, [pc, #328]	; (8005354 <HAL_GPIO_Init+0x344>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_GPIO_Init+0x226>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a51      	ldr	r2, [pc, #324]	; (8005358 <HAL_GPIO_Init+0x348>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00d      	beq.n	8005232 <HAL_GPIO_Init+0x222>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a50      	ldr	r2, [pc, #320]	; (800535c <HAL_GPIO_Init+0x34c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <HAL_GPIO_Init+0x21e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a4f      	ldr	r2, [pc, #316]	; (8005360 <HAL_GPIO_Init+0x350>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_GPIO_Init+0x21a>
 8005226:	2309      	movs	r3, #9
 8005228:	e012      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800522a:	230a      	movs	r3, #10
 800522c:	e010      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800522e:	2308      	movs	r3, #8
 8005230:	e00e      	b.n	8005250 <HAL_GPIO_Init+0x240>
 8005232:	2307      	movs	r3, #7
 8005234:	e00c      	b.n	8005250 <HAL_GPIO_Init+0x240>
 8005236:	2306      	movs	r3, #6
 8005238:	e00a      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800523a:	2305      	movs	r3, #5
 800523c:	e008      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800523e:	2304      	movs	r3, #4
 8005240:	e006      	b.n	8005250 <HAL_GPIO_Init+0x240>
 8005242:	2303      	movs	r3, #3
 8005244:	e004      	b.n	8005250 <HAL_GPIO_Init+0x240>
 8005246:	2302      	movs	r3, #2
 8005248:	e002      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_GPIO_Init+0x240>
 800524e:	2300      	movs	r3, #0
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	f002 0203 	and.w	r2, r2, #3
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	4093      	lsls	r3, r2
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005260:	4935      	ldr	r1, [pc, #212]	; (8005338 <HAL_GPIO_Init+0x328>)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	089b      	lsrs	r3, r3, #2
 8005266:	3302      	adds	r3, #2
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800526e:	4b3d      	ldr	r3, [pc, #244]	; (8005364 <HAL_GPIO_Init+0x354>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005292:	4a34      	ldr	r2, [pc, #208]	; (8005364 <HAL_GPIO_Init+0x354>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005298:	4b32      	ldr	r3, [pc, #200]	; (8005364 <HAL_GPIO_Init+0x354>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_GPIO_Init+0x354>)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <HAL_GPIO_Init+0x354>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4013      	ands	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_GPIO_Init+0x354>)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ec:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_GPIO_Init+0x354>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <HAL_GPIO_Init+0x354>)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b0f      	cmp	r3, #15
 8005320:	f67f ae86 	bls.w	8005030 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3724      	adds	r7, #36	; 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800
 8005338:	40013800 	.word	0x40013800
 800533c:	40020000 	.word	0x40020000
 8005340:	40020400 	.word	0x40020400
 8005344:	40020800 	.word	0x40020800
 8005348:	40020c00 	.word	0x40020c00
 800534c:	40021000 	.word	0x40021000
 8005350:	40021400 	.word	0x40021400
 8005354:	40021800 	.word	0x40021800
 8005358:	40021c00 	.word	0x40021c00
 800535c:	40022000 	.word	0x40022000
 8005360:	40022400 	.word	0x40022400
 8005364:	40013c00 	.word	0x40013c00

08005368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	807b      	strh	r3, [r7, #2]
 8005374:	4613      	mov	r3, r2
 8005376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005378:	787b      	ldrb	r3, [r7, #1]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005384:	e003      	b.n	800538e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005386:	887b      	ldrh	r3, [r7, #2]
 8005388:	041a      	lsls	r2, r3, #16
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	619a      	str	r2, [r3, #24]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4b23      	ldr	r3, [pc, #140]	; (8005434 <HAL_PWREx_EnableOverDrive+0x98>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_PWREx_EnableOverDrive+0x98>)
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_PWREx_EnableOverDrive+0x98>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80053be:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ca:	f7ff f879 	bl	80044c0 <HAL_GetTick>
 80053ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053d0:	e009      	b.n	80053e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053d2:	f7ff f875 	bl	80044c0 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e0:	d901      	bls.n	80053e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e022      	b.n	800542c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f2:	d1ee      	bne.n	80053d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053f4:	4b10      	ldr	r3, [pc, #64]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0f      	ldr	r2, [pc, #60]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005400:	f7ff f85e 	bl	80044c0 <HAL_GetTick>
 8005404:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005406:	e009      	b.n	800541c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005408:	f7ff f85a 	bl	80044c0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005416:	d901      	bls.n	800541c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e007      	b.n	800542c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_PWREx_EnableOverDrive+0x9c>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005428:	d1ee      	bne.n	8005408 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000

0800543c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff f83c 	bl	80044c0 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e067      	b.n	8005524 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10b      	bne.n	8005478 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc fa2f 	bl	80018cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800546e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f85e 	bl	8005534 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	3b01      	subs	r3, #1
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	2120      	movs	r1, #32
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f856 	bl	8005550 <QSPI_WaitFlagStateUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d135      	bne.n	800551a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_QSPI_Init+0xf0>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	0611      	lsls	r1, r2, #24
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	4311      	orrs	r1, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	69d2      	ldr	r2, [r2, #28]
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a12      	ldr	r2, [r2, #32]
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <HAL_QSPI_Init+0xf4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6912      	ldr	r2, [r2, #16]
 80054e6:	0411      	lsls	r1, r2, #16
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6952      	ldr	r2, [r2, #20]
 80054ec:	4311      	orrs	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6992      	ldr	r2, [r2, #24]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005522:	7afb      	ldrb	r3, [r7, #11]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	00ffff2f 	.word	0x00ffff2f
 8005530:	ffe0f8fe 	.word	0xffe0f8fe

08005534 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005560:	e01a      	b.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d016      	beq.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fe ffa9 	bl	80044c0 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2204      	movs	r2, #4
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e00e      	b.n	80055b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1d6      	bne.n	8005562 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80055c8:	2300      	movs	r3, #0
 80055ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e29b      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8087 	beq.w	80056f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055e4:	4b96      	ldr	r3, [pc, #600]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d00c      	beq.n	800560a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f0:	4b93      	ldr	r3, [pc, #588]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d112      	bne.n	8005622 <HAL_RCC_OscConfig+0x62>
 80055fc:	4b90      	ldr	r3, [pc, #576]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005608:	d10b      	bne.n	8005622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560a:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06c      	beq.n	80056f0 <HAL_RCC_OscConfig+0x130>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d168      	bne.n	80056f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e275      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x7a>
 800562c:	4b84      	ldr	r3, [pc, #528]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a83      	ldr	r2, [pc, #524]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e02e      	b.n	8005698 <HAL_RCC_OscConfig+0xd8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x9c>
 8005642:	4b7f      	ldr	r3, [pc, #508]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a7e      	ldr	r2, [pc, #504]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a7b      	ldr	r2, [pc, #492]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e01d      	b.n	8005698 <HAL_RCC_OscConfig+0xd8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0xc0>
 8005666:	4b76      	ldr	r3, [pc, #472]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a75      	ldr	r2, [pc, #468]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800566c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4b73      	ldr	r3, [pc, #460]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a72      	ldr	r2, [pc, #456]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e00b      	b.n	8005698 <HAL_RCC_OscConfig+0xd8>
 8005680:	4b6f      	ldr	r3, [pc, #444]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6e      	ldr	r2, [pc, #440]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b6c      	ldr	r3, [pc, #432]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6b      	ldr	r2, [pc, #428]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fe ff0e 	bl	80044c0 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fe ff0a 	bl	80044c0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e229      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b61      	ldr	r3, [pc, #388]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0xe8>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe fefa 	bl	80044c0 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fe fef6 	bl	80044c0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e215      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e2:	4b57      	ldr	r3, [pc, #348]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x110>
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d069      	beq.n	80057d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056fe:	4b50      	ldr	r3, [pc, #320]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570a:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b08      	cmp	r3, #8
 8005714:	d11c      	bne.n	8005750 <HAL_RCC_OscConfig+0x190>
 8005716:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_RCC_OscConfig+0x17a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e1e9      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	493d      	ldr	r1, [pc, #244]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	e040      	b.n	80057d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d023      	beq.n	80057a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005758:	4b39      	ldr	r3, [pc, #228]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a38      	ldr	r2, [pc, #224]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fe feac 	bl	80044c0 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576c:	f7fe fea8 	bl	80044c0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1c7      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577e:	4b30      	ldr	r3, [pc, #192]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4929      	ldr	r1, [pc, #164]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]
 800579e:	e018      	b.n	80057d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a0:	4b27      	ldr	r3, [pc, #156]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe fe88 	bl	80044c0 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b4:	f7fe fe84 	bl	80044c0 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1a3      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d038      	beq.n	8005850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e6:	4b16      	ldr	r3, [pc, #88]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fe fe65 	bl	80044c0 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fe fe61 	bl	80044c0 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e180      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x23a>
 8005818:	e01a      	b.n	8005850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	4a08      	ldr	r2, [pc, #32]	; (8005840 <HAL_RCC_OscConfig+0x280>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fe fe4b 	bl	80044c0 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582e:	f7fe fe47 	bl	80044c0 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d903      	bls.n	8005844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e166      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
 8005840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	4b92      	ldr	r3, [pc, #584]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ee      	bne.n	800582e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a4 	beq.w	80059a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585e:	4b8c      	ldr	r3, [pc, #560]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800586a:	4b89      	ldr	r3, [pc, #548]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	4a88      	ldr	r2, [pc, #544]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
 8005876:	4b86      	ldr	r3, [pc, #536]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005886:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCC_OscConfig+0x4d4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d118      	bne.n	80058c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005892:	4b80      	ldr	r3, [pc, #512]	; (8005a94 <HAL_RCC_OscConfig+0x4d4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a7f      	ldr	r2, [pc, #508]	; (8005a94 <HAL_RCC_OscConfig+0x4d4>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589e:	f7fe fe0f 	bl	80044c0 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fe fe0b 	bl	80044c0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b64      	cmp	r3, #100	; 0x64
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e12a      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b8:	4b76      	ldr	r3, [pc, #472]	; (8005a94 <HAL_RCC_OscConfig+0x4d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x31a>
 80058cc:	4b70      	ldr	r3, [pc, #448]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4a6f      	ldr	r2, [pc, #444]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
 80058d8:	e02d      	b.n	8005936 <HAL_RCC_OscConfig+0x376>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0x33c>
 80058e2:	4b6b      	ldr	r3, [pc, #428]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a6a      	ldr	r2, [pc, #424]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a67      	ldr	r2, [pc, #412]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
 80058fa:	e01c      	b.n	8005936 <HAL_RCC_OscConfig+0x376>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b05      	cmp	r3, #5
 8005902:	d10c      	bne.n	800591e <HAL_RCC_OscConfig+0x35e>
 8005904:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a61      	ldr	r2, [pc, #388]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
 8005910:	4b5f      	ldr	r3, [pc, #380]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	4a5e      	ldr	r2, [pc, #376]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	6713      	str	r3, [r2, #112]	; 0x70
 800591c:	e00b      	b.n	8005936 <HAL_RCC_OscConfig+0x376>
 800591e:	4b5c      	ldr	r3, [pc, #368]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a58      	ldr	r2, [pc, #352]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d015      	beq.n	800596a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fe fdbf 	bl	80044c0 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	e00a      	b.n	800595c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005946:	f7fe fdbb 	bl	80044c0 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f241 3288 	movw	r2, #5000	; 0x1388
 8005954:	4293      	cmp	r3, r2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e0d8      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595c:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ee      	beq.n	8005946 <HAL_RCC_OscConfig+0x386>
 8005968:	e014      	b.n	8005994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fe fda9 	bl	80044c0 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005970:	e00a      	b.n	8005988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fe fda5 	bl	80044c0 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e0c2      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005988:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800598a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1ee      	bne.n	8005972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d105      	bne.n	80059a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599a:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	4a3c      	ldr	r2, [pc, #240]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80059a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80ae 	beq.w	8005b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b0:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d06d      	beq.n	8005a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d14b      	bne.n	8005a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fe fd76 	bl	80044c0 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fe fd72 	bl	80044c0 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e091      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	071b      	lsls	r3, r3, #28
 8005a22:	491b      	ldr	r1, [pc, #108]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fe fd44 	bl	80044c0 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fe fd40 	bl	80044c0 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e05f      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x47c>
 8005a5a:	e057      	b.n	8005b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0b      	ldr	r2, [pc, #44]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fe fd2a 	bl	80044c0 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fe fd26 	bl	80044c0 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e045      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <HAL_RCC_OscConfig+0x4d0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x4b0>
 8005a8e:	e03d      	b.n	8005b0c <HAL_RCC_OscConfig+0x54c>
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <HAL_RCC_OscConfig+0x558>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d030      	beq.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d129      	bne.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d122      	bne.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ac8:	4013      	ands	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d119      	bne.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d10f      	bne.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0d0      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b34:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d910      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 020f 	bic.w	r2, r3, #15
 8005b4a:	4965      	ldr	r1, [pc, #404]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b63      	ldr	r3, [pc, #396]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0b8      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d020      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b7c:	4b59      	ldr	r3, [pc, #356]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a58      	ldr	r2, [pc, #352]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b94:	4b53      	ldr	r3, [pc, #332]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	4a52      	ldr	r2, [pc, #328]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba0:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	494d      	ldr	r1, [pc, #308]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d040      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d115      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e07f      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e073      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bee:	4b3d      	ldr	r3, [pc, #244]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e06b      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 0203 	bic.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	4936      	ldr	r1, [pc, #216]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c10:	f7fe fc56 	bl	80044c0 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c18:	f7fe fc52 	bl	80044c0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e053      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 020c 	and.w	r2, r3, #12
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d1eb      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d210      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 020f 	bic.w	r2, r3, #15
 8005c56:	4922      	ldr	r1, [pc, #136]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e032      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4916      	ldr	r1, [pc, #88]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	490e      	ldr	r1, [pc, #56]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cae:	f000 f821 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	490a      	ldr	r1, [pc, #40]	; (8005ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8005cc0:	5ccb      	ldrb	r3, [r1, r3]
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1d0>)
 8005cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fbb2 	bl	8004438 <HAL_InitTick>

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023c00 	.word	0x40023c00
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08017cf0 	.word	0x08017cf0
 8005cec:	200004c0 	.word	0x200004c0
 8005cf0:	200004c4 	.word	0x200004c4

08005cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b094      	sub	sp, #80	; 0x50
 8005cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005d00:	2300      	movs	r3, #0
 8005d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d04:	2300      	movs	r3, #0
 8005d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0c:	4b79      	ldr	r3, [pc, #484]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d00d      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x40>
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	f200 80e1 	bhi.w	8005ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x34>
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d003      	beq.n	8005d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d26:	e0db      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d28:	4b73      	ldr	r3, [pc, #460]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d2c:	e0db      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d2e:	4b73      	ldr	r3, [pc, #460]	; (8005efc <HAL_RCC_GetSysClockFreq+0x208>)
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d32:	e0d8      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d34:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d063      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4a:	4b6a      	ldr	r3, [pc, #424]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	099b      	lsrs	r3, r3, #6
 8005d50:	2200      	movs	r2, #0
 8005d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
 8005d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	f04f 0000 	mov.w	r0, #0
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	0159      	lsls	r1, r3, #5
 8005d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d78:	0150      	lsls	r0, r2, #5
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4621      	mov	r1, r4
 8005d80:	1a51      	subs	r1, r2, r1
 8005d82:	6139      	str	r1, [r7, #16]
 8005d84:	4629      	mov	r1, r5
 8005d86:	eb63 0301 	sbc.w	r3, r3, r1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d98:	4659      	mov	r1, fp
 8005d9a:	018b      	lsls	r3, r1, #6
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005da2:	4651      	mov	r1, sl
 8005da4:	018a      	lsls	r2, r1, #6
 8005da6:	4651      	mov	r1, sl
 8005da8:	ebb2 0801 	subs.w	r8, r2, r1
 8005dac:	4659      	mov	r1, fp
 8005dae:	eb63 0901 	sbc.w	r9, r3, r1
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dc6:	4690      	mov	r8, r2
 8005dc8:	4699      	mov	r9, r3
 8005dca:	4623      	mov	r3, r4
 8005dcc:	eb18 0303 	adds.w	r3, r8, r3
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	eb49 0303 	adc.w	r3, r9, r3
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005de6:	4629      	mov	r1, r5
 8005de8:	024b      	lsls	r3, r1, #9
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df0:	4621      	mov	r1, r4
 8005df2:	024a      	lsls	r2, r1, #9
 8005df4:	4610      	mov	r0, r2
 8005df6:	4619      	mov	r1, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e04:	f7fa fa74 	bl	80002f0 <__aeabi_uldivmod>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e10:	e058      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e12:	4b38      	ldr	r3, [pc, #224]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	f04f 0000 	mov.w	r0, #0
 8005e34:	f04f 0100 	mov.w	r1, #0
 8005e38:	0159      	lsls	r1, r3, #5
 8005e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e3e:	0150      	lsls	r0, r2, #5
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4641      	mov	r1, r8
 8005e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e64:	ebb2 040a 	subs.w	r4, r2, sl
 8005e68:	eb63 050b 	sbc.w	r5, r3, fp
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	00eb      	lsls	r3, r5, #3
 8005e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e7a:	00e2      	lsls	r2, r4, #3
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	461d      	mov	r5, r3
 8005e80:	4643      	mov	r3, r8
 8005e82:	18e3      	adds	r3, r4, r3
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	464b      	mov	r3, r9
 8005e88:	eb45 0303 	adc.w	r3, r5, r3
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	028b      	lsls	r3, r1, #10
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	028a      	lsls	r2, r1, #10
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	61fa      	str	r2, [r7, #28]
 8005eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb8:	f7fa fa1a 	bl	80002f0 <__aeabi_uldivmod>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ede:	e002      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3750      	adds	r7, #80	; 0x50
 8005eec:	46bd      	mov	sp, r7
 8005eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	007a1200 	.word	0x007a1200

08005f00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	200004c0 	.word	0x200004c0

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f1c:	f7ff fff0 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0a9b      	lsrs	r3, r3, #10
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4903      	ldr	r1, [pc, #12]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	08017d00 	.word	0x08017d00

08005f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f44:	f7ff ffdc 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0b5b      	lsrs	r3, r3, #13
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800
 8005f64:	08017d00 	.word	0x08017d00

08005f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f90:	4b69      	ldr	r3, [pc, #420]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4a68      	ldr	r2, [pc, #416]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f9a:	6093      	str	r3, [r2, #8]
 8005f9c:	4b66      	ldr	r3, [pc, #408]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	4964      	ldr	r1, [pc, #400]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d017      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	4959      	ldr	r1, [pc, #356]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d017      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	494a      	ldr	r1, [pc, #296]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800601c:	d101      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 808b 	beq.w	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800604c:	4b3a      	ldr	r3, [pc, #232]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	4a39      	ldr	r2, [pc, #228]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006056:	6413      	str	r3, [r2, #64]	; 0x40
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006064:	4b35      	ldr	r3, [pc, #212]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a34      	ldr	r2, [pc, #208]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006070:	f7fe fa26 	bl	80044c0 <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006076:	e008      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006078:	f7fe fa22 	bl	80044c0 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	; 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e38f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800608a:	4b2c      	ldr	r3, [pc, #176]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006096:	4b28      	ldr	r3, [pc, #160]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d035      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d02e      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060b4:	4b20      	ldr	r3, [pc, #128]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060be:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060ca:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	4a1a      	ldr	r2, [pc, #104]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d114      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fe f9ea 	bl	80044c0 <HAL_GetTick>
 80060ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ee:	e00a      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fe f9e6 	bl	80044c0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e351      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0ee      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611e:	d111      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800612e:	400b      	ands	r3, r1
 8006130:	4901      	ldr	r1, [pc, #4]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006138:	40023800 	.word	0x40023800
 800613c:	40007000 	.word	0x40007000
 8006140:	0ffffcff 	.word	0x0ffffcff
 8006144:	4bac      	ldr	r3, [pc, #688]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4aab      	ldr	r2, [pc, #684]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800614e:	6093      	str	r3, [r2, #8]
 8006150:	4ba9      	ldr	r3, [pc, #676]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615c:	49a6      	ldr	r1, [pc, #664]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615e:	4313      	orrs	r3, r2
 8006160:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800616e:	4ba2      	ldr	r3, [pc, #648]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006174:	4aa0      	ldr	r2, [pc, #640]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800617a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800617e:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006180:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	499b      	ldr	r1, [pc, #620]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800619c:	4b96      	ldr	r3, [pc, #600]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	4993      	ldr	r1, [pc, #588]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061be:	4b8e      	ldr	r3, [pc, #568]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	498a      	ldr	r1, [pc, #552]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e0:	4b85      	ldr	r3, [pc, #532]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ee:	4982      	ldr	r1, [pc, #520]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006202:	4b7d      	ldr	r3, [pc, #500]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006208:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	4979      	ldr	r1, [pc, #484]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006224:	4b74      	ldr	r3, [pc, #464]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f023 0203 	bic.w	r2, r3, #3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	4971      	ldr	r1, [pc, #452]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006246:	4b6c      	ldr	r3, [pc, #432]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	f023 020c 	bic.w	r2, r3, #12
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006254:	4968      	ldr	r1, [pc, #416]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006268:	4b63      	ldr	r3, [pc, #396]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	4960      	ldr	r1, [pc, #384]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800628a:	4b5b      	ldr	r3, [pc, #364]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	4957      	ldr	r1, [pc, #348]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062ac:	4b52      	ldr	r3, [pc, #328]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	494f      	ldr	r1, [pc, #316]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80062ce:	4b4a      	ldr	r3, [pc, #296]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062dc:	4946      	ldr	r1, [pc, #280]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	493e      	ldr	r1, [pc, #248]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006320:	4935      	ldr	r1, [pc, #212]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006334:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006342:	492d      	ldr	r1, [pc, #180]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006356:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006364:	4924      	ldr	r1, [pc, #144]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006374:	d101      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006386:	2301      	movs	r3, #1
 8006388:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a4:	4914      	ldr	r1, [pc, #80]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ec:	4902      	ldr	r1, [pc, #8]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80063f6:	bf00      	nop
 80063f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006408:	4b8a      	ldr	r3, [pc, #552]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006418:	4986      	ldr	r1, [pc, #536]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800642c:	4b81      	ldr	r3, [pc, #516]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800642e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006432:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643c:	497d      	ldr	r1, [pc, #500]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d006      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80d6 	beq.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006458:	4b76      	ldr	r3, [pc, #472]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a75      	ldr	r2, [pc, #468]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006464:	f7fe f82c 	bl	80044c0 <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800646c:	f7fe f828 	bl	80044c0 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b64      	cmp	r3, #100	; 0x64
 8006478:	d901      	bls.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e195      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800647e:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d021      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11d      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064ac:	4b61      	ldr	r3, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b2:	0e1b      	lsrs	r3, r3, #24
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	019a      	lsls	r2, r3, #6
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	061b      	lsls	r3, r3, #24
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	071b      	lsls	r3, r3, #28
 80064d2:	4958      	ldr	r1, [pc, #352]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02e      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006504:	d129      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006506:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006514:	4b47      	ldr	r3, [pc, #284]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651a:	0f1b      	lsrs	r3, r3, #28
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	019a      	lsls	r2, r3, #6
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	071b      	lsls	r3, r3, #28
 800653a:	493e      	ldr	r1, [pc, #248]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006542:	4b3c      	ldr	r3, [pc, #240]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006548:	f023 021f 	bic.w	r2, r3, #31
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	3b01      	subs	r3, #1
 8006552:	4938      	ldr	r1, [pc, #224]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01d      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006566:	4b33      	ldr	r3, [pc, #204]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006574:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800657a:	0f1b      	lsrs	r3, r3, #28
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	019a      	lsls	r2, r3, #6
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	431a      	orrs	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	071b      	lsls	r3, r3, #28
 800659a:	4926      	ldr	r1, [pc, #152]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	019a      	lsls	r2, r3, #6
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	491a      	ldr	r1, [pc, #104]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065d2:	4b18      	ldr	r3, [pc, #96]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a17      	ldr	r2, [pc, #92]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065de:	f7fd ff6f 	bl	80044c0 <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065e6:	f7fd ff6b 	bl	80044c0 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b64      	cmp	r3, #100	; 0x64
 80065f2:	d901      	bls.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e0d8      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b01      	cmp	r3, #1
 8006608:	f040 80ce 	bne.w	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006618:	f7fd ff52 	bl	80044c0 <HAL_GetTick>
 800661c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800661e:	e00b      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006620:	f7fd ff4e 	bl	80044c0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d904      	bls.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0bb      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006638:	4b5e      	ldr	r3, [pc, #376]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006644:	d0ec      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02e      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d12a      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800666e:	4b51      	ldr	r3, [pc, #324]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800667c:	4b4d      	ldr	r3, [pc, #308]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	0f1b      	lsrs	r3, r3, #28
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	019a      	lsls	r2, r3, #6
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	431a      	orrs	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	071b      	lsls	r3, r3, #28
 80066a2:	4944      	ldr	r1, [pc, #272]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066aa:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	493d      	ldr	r1, [pc, #244]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d022      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d8:	d11d      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066da:	4b36      	ldr	r3, [pc, #216]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066e8:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	0f1b      	lsrs	r3, r3, #28
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	019a      	lsls	r2, r3, #6
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	431a      	orrs	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	061b      	lsls	r3, r3, #24
 8006708:	431a      	orrs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	071b      	lsls	r3, r3, #28
 800670e:	4929      	ldr	r1, [pc, #164]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d028      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006722:	4b24      	ldr	r3, [pc, #144]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	0e1b      	lsrs	r3, r3, #24
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006730:	4b20      	ldr	r3, [pc, #128]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	0c1b      	lsrs	r3, r3, #16
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	019a      	lsls	r2, r3, #6
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	4917      	ldr	r1, [pc, #92]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800675e:	4b15      	ldr	r3, [pc, #84]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4911      	ldr	r1, [pc, #68]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a0e      	ldr	r2, [pc, #56]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800677a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006780:	f7fd fe9e 	bl	80044c0 <HAL_GetTick>
 8006784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006788:	f7fd fe9a 	bl	80044c0 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e007      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a6:	d1ef      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40023800 	.word	0x40023800

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e09d      	b.n	8006906 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067da:	d009      	beq.n	80067f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	61da      	str	r2, [r3, #28]
 80067e2:	e005      	b.n	80067f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fb f994 	bl	8001b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006830:	d902      	bls.n	8006838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e002      	b.n	800683e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800683c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006846:	d007      	beq.n	8006858 <HAL_SPI_Init+0xa0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	ea42 0103 	orr.w	r1, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	f003 0204 	and.w	r2, r3, #4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068d4:	ea42 0103 	orr.w	r1, r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_SPI_Transmit+0x22>
 800692c:	2302      	movs	r3, #2
 800692e:	e158      	b.n	8006be2 <HAL_SPI_Transmit+0x2d4>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006938:	f7fd fdc2 	bl	80044c0 <HAL_GetTick>
 800693c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d002      	beq.n	8006954 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800694e:	2302      	movs	r3, #2
 8006950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006952:	e13d      	b.n	8006bd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_SPI_Transmit+0x52>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006964:	e134      	b.n	8006bd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2203      	movs	r2, #3
 800696a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	d10f      	bne.n	80069d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d007      	beq.n	80069f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f8:	d94b      	bls.n	8006a92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_SPI_Transmit+0xfa>
 8006a02:	8afb      	ldrh	r3, [r7, #22]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d13e      	bne.n	8006a86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a2c:	e02b      	b.n	8006a86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d112      	bne.n	8006a62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	881a      	ldrh	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	1c9a      	adds	r2, r3, #2
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a60:	e011      	b.n	8006a86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a62:	f7fd fd2d 	bl	80044c0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d803      	bhi.n	8006a7a <HAL_SPI_Transmit+0x16c>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d102      	bne.n	8006a80 <HAL_SPI_Transmit+0x172>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d102      	bne.n	8006a86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a84:	e0a4      	b.n	8006bd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ce      	bne.n	8006a2e <HAL_SPI_Transmit+0x120>
 8006a90:	e07c      	b.n	8006b8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_SPI_Transmit+0x192>
 8006a9a:	8afb      	ldrh	r3, [r7, #22]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d170      	bne.n	8006b82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d912      	bls.n	8006ad0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	881a      	ldrh	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	1c9a      	adds	r2, r3, #2
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b02      	subs	r3, #2
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ace:	e058      	b.n	8006b82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006af6:	e044      	b.n	8006b82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d12b      	bne.n	8006b5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d912      	bls.n	8006b36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b02      	subs	r3, #2
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b34:	e025      	b.n	8006b82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b5c:	e011      	b.n	8006b82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5e:	f7fd fcaf 	bl	80044c0 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <HAL_SPI_Transmit+0x268>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_Transmit+0x26e>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b80:	e026      	b.n	8006bd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1b5      	bne.n	8006af8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fd07 	bl	80075a4 <SPI_EndRxTxTransaction>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e000      	b.n	8006bd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af02      	add	r7, sp, #8
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c06:	d112      	bne.n	8006c2e <HAL_SPI_Receive+0x44>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10e      	bne.n	8006c2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2204      	movs	r2, #4
 8006c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c18:	88fa      	ldrh	r2, [r7, #6]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f910 	bl	8006e4a <HAL_SPI_TransmitReceive>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	e109      	b.n	8006e42 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_SPI_Receive+0x52>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e102      	b.n	8006e42 <HAL_SPI_Receive+0x258>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c44:	f7fd fc3c 	bl	80044c0 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c5a:	e0e9      	b.n	8006e30 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Receive+0x7e>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c6c:	e0e0      	b.n	8006e30 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2204      	movs	r2, #4
 8006c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	88fa      	ldrh	r2, [r7, #6]
 8006c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cb8:	d908      	bls.n	8006ccc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	e007      	b.n	8006cdc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce4:	d10f      	bne.n	8006d06 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d007      	beq.n	8006d24 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d2c:	d867      	bhi.n	8006dfe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d2e:	e030      	b.n	8006d92 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d117      	bne.n	8006d6e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f103 020c 	add.w	r2, r3, #12
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d6c:	e011      	b.n	8006d92 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d6e:	f7fd fba7 	bl	80044c0 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d803      	bhi.n	8006d86 <HAL_SPI_Receive+0x19c>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d102      	bne.n	8006d8c <HAL_SPI_Receive+0x1a2>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d90:	e04e      	b.n	8006e30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1c8      	bne.n	8006d30 <HAL_SPI_Receive+0x146>
 8006d9e:	e034      	b.n	8006e0a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d115      	bne.n	8006dda <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	b292      	uxth	r2, r2
 8006dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006dd8:	e011      	b.n	8006dfe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dda:	f7fd fb71 	bl	80044c0 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d803      	bhi.n	8006df2 <HAL_SPI_Receive+0x208>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d102      	bne.n	8006df8 <HAL_SPI_Receive+0x20e>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dfc:	e018      	b.n	8006e30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ca      	bne.n	8006da0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fb4c 	bl	80074ac <SPI_EndRxTransaction>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
 8006e2c:	e000      	b.n	8006e30 <HAL_SPI_Receive+0x246>
  }

error :
 8006e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b08a      	sub	sp, #40	; 0x28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x26>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e1fb      	b.n	8007268 <HAL_SPI_TransmitReceive+0x41e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e78:	f7fd fb22 	bl	80044c0 <HAL_GetTick>
 8006e7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e94:	7efb      	ldrb	r3, [r7, #27]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d00e      	beq.n	8006eb8 <HAL_SPI_TransmitReceive+0x6e>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea0:	d106      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x66>
 8006eaa:	7efb      	ldrb	r3, [r7, #27]
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d003      	beq.n	8006eb8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006eb6:	e1cd      	b.n	8007254 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_SPI_TransmitReceive+0x80>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_TransmitReceive+0x80>
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ed0:	e1c0      	b.n	8007254 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d003      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	887a      	ldrh	r2, [r7, #2]
 8006ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	887a      	ldrh	r2, [r7, #2]
 8006f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	887a      	ldrh	r2, [r7, #2]
 8006f12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f28:	d802      	bhi.n	8006f30 <HAL_SPI_TransmitReceive+0xe6>
 8006f2a:	8a3b      	ldrh	r3, [r7, #16]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d908      	bls.n	8006f42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	e007      	b.n	8006f52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d007      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f78:	d97c      	bls.n	8007074 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_SPI_TransmitReceive+0x13e>
 8006f82:	8a7b      	ldrh	r3, [r7, #18]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d169      	bne.n	800705c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	881a      	ldrh	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	1c9a      	adds	r2, r3, #2
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fac:	e056      	b.n	800705c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d11b      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d016      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d113      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	881a      	ldrh	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d11c      	bne.n	800703c <HAL_SPI_TransmitReceive+0x1f2>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d016      	beq.n	800703c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	b292      	uxth	r2, r2
 800701a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	1c9a      	adds	r2, r3, #2
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007038:	2301      	movs	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800703c:	f7fd fa40 	bl	80044c0 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007048:	429a      	cmp	r2, r3
 800704a:	d807      	bhi.n	800705c <HAL_SPI_TransmitReceive+0x212>
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d003      	beq.n	800705c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800705a:	e0fb      	b.n	8007254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1a3      	bne.n	8006fae <HAL_SPI_TransmitReceive+0x164>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d19d      	bne.n	8006fae <HAL_SPI_TransmitReceive+0x164>
 8007072:	e0df      	b.n	8007234 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_SPI_TransmitReceive+0x23a>
 800707c:	8a7b      	ldrh	r3, [r7, #18]
 800707e:	2b01      	cmp	r3, #1
 8007080:	f040 80cb 	bne.w	800721a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	d912      	bls.n	80070b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	881a      	ldrh	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b02      	subs	r3, #2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070b2:	e0b2      	b.n	800721a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070da:	e09e      	b.n	800721a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d134      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x30a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02f      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x30a>
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d12c      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d912      	bls.n	800712a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	881a      	ldrh	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	1c9a      	adds	r2, r3, #2
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b02      	subs	r3, #2
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007128:	e012      	b.n	8007150 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d148      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x3aa>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d042      	beq.n	80071f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	d923      	bls.n	80071c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	b292      	uxth	r2, r2
 8007186:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b02      	subs	r3, #2
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d81f      	bhi.n	80071f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071be:	605a      	str	r2, [r3, #4]
 80071c0:	e016      	b.n	80071f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f103 020c 	add.w	r2, r3, #12
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071f0:	2301      	movs	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071f4:	f7fd f964 	bl	80044c0 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007200:	429a      	cmp	r2, r3
 8007202:	d803      	bhi.n	800720c <HAL_SPI_TransmitReceive+0x3c2>
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d102      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x3c8>
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007218:	e01c      	b.n	8007254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	f47f af5b 	bne.w	80070dc <HAL_SPI_TransmitReceive+0x292>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f af54 	bne.w	80070dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f9b3 	bl	80075a4 <SPI_EndRxTxTransaction>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	661a      	str	r2, [r3, #96]	; 0x60
 8007250:	e000      	b.n	8007254 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007268:	4618      	mov	r0, r3
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007280:	f7fd f91e 	bl	80044c0 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4413      	add	r3, r2
 800728e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007290:	f7fd f916 	bl	80044c0 <HAL_GetTick>
 8007294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	015b      	lsls	r3, r3, #5
 800729c:	0d1b      	lsrs	r3, r3, #20
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072a6:	e054      	b.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d050      	beq.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072b0:	f7fd f906 	bl	80044c0 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d902      	bls.n	80072c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d13d      	bne.n	8007342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072de:	d111      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	d004      	beq.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d107      	bne.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730c:	d10f      	bne.n	800732e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800732c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e017      	b.n	8007372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3b01      	subs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	429a      	cmp	r2, r3
 800736e:	d19b      	bne.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200004c0 	.word	0x200004c0

08007380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007392:	f7fd f895 	bl	80044c0 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	4413      	add	r3, r2
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80073a2:	f7fd f88d 	bl	80044c0 <HAL_GetTick>
 80073a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073b0:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	00da      	lsls	r2, r3, #3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	0d1b      	lsrs	r3, r3, #20
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073c8:	e060      	b.n	800748c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073d0:	d107      	bne.n	80073e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d050      	beq.n	800748c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ea:	f7fd f869 	bl	80044c0 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d902      	bls.n	8007400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d13d      	bne.n	800747c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800740e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007418:	d111      	bne.n	800743e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007422:	d004      	beq.n	800742e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742c:	d107      	bne.n	800743e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	d10f      	bne.n	8007468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e010      	b.n	800749e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3b01      	subs	r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d196      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200004c0 	.word	0x200004c0

080074ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c0:	d111      	bne.n	80074e6 <SPI_EndRxTransaction+0x3a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ca:	d004      	beq.n	80074d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d4:	d107      	bne.n	80074e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ee:	d112      	bne.n	8007516 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff feb8 	bl	8007270 <SPI_WaitFlagStateUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d021      	beq.n	800754a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750a:	f043 0220 	orr.w	r2, r3, #32
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e03d      	b.n	8007592 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007516:	4b21      	ldr	r3, [pc, #132]	; (800759c <SPI_EndRxTransaction+0xf0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <SPI_EndRxTransaction+0xf4>)
 800751c:	fba2 2303 	umull	r2, r3, r2, r3
 8007520:	0d5b      	lsrs	r3, r3, #21
 8007522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3b01      	subs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d0f2      	beq.n	800752c <SPI_EndRxTransaction+0x80>
 8007546:	e000      	b.n	800754a <SPI_EndRxTransaction+0x9e>
        break;
 8007548:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007552:	d11d      	bne.n	8007590 <SPI_EndRxTransaction+0xe4>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755c:	d004      	beq.n	8007568 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007566:	d113      	bne.n	8007590 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff ff03 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e000      	b.n	8007592 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200004c0 	.word	0x200004c0
 80075a0:	165e9f81 	.word	0x165e9f81

080075a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fedf 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075cc:	f043 0220 	orr.w	r2, r3, #32
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e046      	b.n	8007666 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075d8:	4b25      	ldr	r3, [pc, #148]	; (8007670 <SPI_EndRxTxTransaction+0xcc>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a25      	ldr	r2, [pc, #148]	; (8007674 <SPI_EndRxTxTransaction+0xd0>)
 80075de:	fba2 2303 	umull	r2, r3, r2, r3
 80075e2:	0d5b      	lsrs	r3, r3, #21
 80075e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075e8:	fb02 f303 	mul.w	r3, r2, r3
 80075ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f6:	d112      	bne.n	800761e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2200      	movs	r2, #0
 8007600:	2180      	movs	r1, #128	; 0x80
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fe34 	bl	8007270 <SPI_WaitFlagStateUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007612:	f043 0220 	orr.w	r2, r3, #32
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e023      	b.n	8007666 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3b01      	subs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d0f2      	beq.n	800761e <SPI_EndRxTxTransaction+0x7a>
 8007638:	e000      	b.n	800763c <SPI_EndRxTxTransaction+0x98>
        break;
 800763a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fe99 	bl	8007380 <SPI_WaitFifoStateUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007658:	f043 0220 	orr.w	r2, r3, #32
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e000      	b.n	8007666 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200004c0 	.word	0x200004c0
 8007674:	165e9f81 	.word	0x165e9f81

08007678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e049      	b.n	800771e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fa fc0a 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f000 f836 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a40      	ldr	r2, [pc, #256]	; (800783c <TIM_Base_SetConfig+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007746:	d00f      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a3d      	ldr	r2, [pc, #244]	; (8007840 <TIM_Base_SetConfig+0x118>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a3c      	ldr	r2, [pc, #240]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a3b      	ldr	r2, [pc, #236]	; (8007848 <TIM_Base_SetConfig+0x120>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a3a      	ldr	r2, [pc, #232]	; (800784c <TIM_Base_SetConfig+0x124>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d108      	bne.n	800777a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2f      	ldr	r2, [pc, #188]	; (800783c <TIM_Base_SetConfig+0x114>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d027      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <TIM_Base_SetConfig+0x118>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d023      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2b      	ldr	r2, [pc, #172]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01f      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <TIM_Base_SetConfig+0x120>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a29      	ldr	r2, [pc, #164]	; (800784c <TIM_Base_SetConfig+0x124>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d017      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a28      	ldr	r2, [pc, #160]	; (8007850 <TIM_Base_SetConfig+0x128>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a27      	ldr	r2, [pc, #156]	; (8007854 <TIM_Base_SetConfig+0x12c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00f      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a26      	ldr	r2, [pc, #152]	; (8007858 <TIM_Base_SetConfig+0x130>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a25      	ldr	r2, [pc, #148]	; (800785c <TIM_Base_SetConfig+0x134>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d007      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a24      	ldr	r2, [pc, #144]	; (8007860 <TIM_Base_SetConfig+0x138>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d003      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a23      	ldr	r2, [pc, #140]	; (8007864 <TIM_Base_SetConfig+0x13c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d108      	bne.n	80077ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a0a      	ldr	r2, [pc, #40]	; (800783c <TIM_Base_SetConfig+0x114>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_Base_SetConfig+0xf8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a0c      	ldr	r2, [pc, #48]	; (800784c <TIM_Base_SetConfig+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d103      	bne.n	8007828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	615a      	str	r2, [r3, #20]
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40010000 	.word	0x40010000
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40010400 	.word	0x40010400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800
 800785c:	40001800 	.word	0x40001800
 8007860:	40001c00 	.word	0x40001c00
 8007864:	40002000 	.word	0x40002000

08007868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e040      	b.n	80078fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fa fba8 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2224      	movs	r2, #36	; 0x24
 8007894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fbc2 	bl	8008030 <UART_SetConfig>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e022      	b.n	80078fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fe1a 	bl	80084f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fea1 	bl	800863c <UART_CheckIdleState>
 80078fa:	4603      	mov	r3, r0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	; 0x28
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007918:	2b20      	cmp	r3, #32
 800791a:	d171      	bne.n	8007a00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_UART_Transmit+0x24>
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e06a      	b.n	8007a02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2221      	movs	r2, #33	; 0x21
 8007938:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800793a:	f7fc fdc1 	bl	80044c0 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d108      	bne.n	800796c <HAL_UART_Transmit+0x68>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e003      	b.n	8007974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007974:	e02c      	b.n	80079d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2200      	movs	r2, #0
 800797e:	2180      	movs	r1, #128	; 0x80
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fea8 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e038      	b.n	8007a02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	3302      	adds	r3, #2
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	e007      	b.n	80079be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	3301      	adds	r3, #1
 80079bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1cc      	bne.n	8007976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2200      	movs	r2, #0
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fe75 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e005      	b.n	8007a02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2220      	movs	r2, #32
 80079fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e000      	b.n	8007a02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007a00:	2302      	movs	r3, #2
  }
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b0ba      	sub	sp, #232	; 0xe8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00f      	beq.n	8007a74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 82ac 	beq.w	8007fc2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
      }
      return;
 8007a72:	e2a6      	b.n	8007fc2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8117 	beq.w	8007cac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a8e:	4b85      	ldr	r3, [pc, #532]	; (8007ca4 <HAL_UART_IRQHandler+0x298>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 810a 	beq.w	8007cac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d011      	beq.n	8007ac8 <HAL_UART_IRQHandler+0xbc>
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abe:	f043 0201 	orr.w	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d011      	beq.n	8007af8 <HAL_UART_IRQHandler+0xec>
 8007ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d011      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
 8007b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2204      	movs	r2, #4
 8007b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1e:	f043 0202 	orr.w	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2208      	movs	r2, #8
 8007b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b5a:	f043 0208 	orr.w	r2, r3, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d012      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18a>
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00c      	beq.n	8007b96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8212 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d005      	beq.n	8007bee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04f      	beq.n	8007c8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fe37 	bl	8008862 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d141      	bne.n	8007c86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d9      	bne.n	8007c02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <HAL_UART_IRQHandler+0x29c>)
 8007c5c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc ff76 	bl	8004b54 <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d017      	beq.n	8007c9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	e00f      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9b6 	bl	8007ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	e00b      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f9b2 	bl	8007ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	e007      	b.n	8007c9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9ae 	bl	8007ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c9c:	e193      	b.n	8007fc6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9e:	bf00      	nop
    return;
 8007ca0:	e191      	b.n	8007fc6 <HAL_UART_IRQHandler+0x5ba>
 8007ca2:	bf00      	nop
 8007ca4:	04000120 	.word	0x04000120
 8007ca8:	0800892b 	.word	0x0800892b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	f040 814c 	bne.w	8007f4e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8145 	beq.w	8007f4e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 813e 	beq.w	8007f4e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	f040 80b6 	bne.w	8007e56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 8165 	beq.w	8007fca <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f080 815d 	bcs.w	8007fca <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d24:	f000 8086 	beq.w	8007e34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1da      	bne.n	8007d28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3308      	adds	r3, #8
 8007d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e1      	bne.n	8007d72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e3      	bne.n	8007dae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e04:	f023 0310 	bic.w	r3, r3, #16
 8007e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e4      	bne.n	8007df4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fc fe20 	bl	8004a74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f8d8 	bl	8008004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e54:	e0b9      	b.n	8007fca <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80ab 	beq.w	8007fce <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80a6 	beq.w	8007fce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007edc:	633a      	str	r2, [r7, #48]	; 0x30
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e3      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f023 0310 	bic.w	r3, r3, #16
 8007f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	69b9      	ldr	r1, [r7, #24]
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	617b      	str	r3, [r7, #20]
   return(result);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e4      	bne.n	8007f04 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f85c 	bl	8008004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f4c:	e03f      	b.n	8007fce <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00e      	beq.n	8007f78 <HAL_UART_IRQHandler+0x56c>
 8007f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d008      	beq.n	8007f78 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f853 	bl	800801c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f76:	e02d      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00e      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01c      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
    }
    return;
 8007fa0:	e017      	b.n	8007fd2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d012      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fccb 	bl	8008956 <UART_EndTransmit_IT>
    return;
 8007fc0:	e008      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007fc2:	bf00      	nop
 8007fc4:	e006      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007fd2:	bf00      	nop
  }

}
 8007fd4:	37e8      	adds	r7, #232	; 0xe8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop

08007fdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4ba6      	ldr	r3, [pc, #664]	; (80082f4 <UART_SetConfig+0x2c4>)
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	6979      	ldr	r1, [r7, #20]
 8008064:	430b      	orrs	r3, r1
 8008066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	430a      	orrs	r2, r1
 80080a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a94      	ldr	r2, [pc, #592]	; (80082f8 <UART_SetConfig+0x2c8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d120      	bne.n	80080ee <UART_SetConfig+0xbe>
 80080ac:	4b93      	ldr	r3, [pc, #588]	; (80082fc <UART_SetConfig+0x2cc>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d816      	bhi.n	80080e8 <UART_SetConfig+0xb8>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x90>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080dd 	.word	0x080080dd
 80080c8:	080080d7 	.word	0x080080d7
 80080cc:	080080e3 	.word	0x080080e3
 80080d0:	2301      	movs	r3, #1
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e150      	b.n	8008378 <UART_SetConfig+0x348>
 80080d6:	2302      	movs	r3, #2
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e14d      	b.n	8008378 <UART_SetConfig+0x348>
 80080dc:	2304      	movs	r3, #4
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e14a      	b.n	8008378 <UART_SetConfig+0x348>
 80080e2:	2308      	movs	r3, #8
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e147      	b.n	8008378 <UART_SetConfig+0x348>
 80080e8:	2310      	movs	r3, #16
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e144      	b.n	8008378 <UART_SetConfig+0x348>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a83      	ldr	r2, [pc, #524]	; (8008300 <UART_SetConfig+0x2d0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d132      	bne.n	800815e <UART_SetConfig+0x12e>
 80080f8:	4b80      	ldr	r3, [pc, #512]	; (80082fc <UART_SetConfig+0x2cc>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f003 030c 	and.w	r3, r3, #12
 8008102:	2b0c      	cmp	r3, #12
 8008104:	d828      	bhi.n	8008158 <UART_SetConfig+0x128>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <UART_SetConfig+0xdc>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008141 	.word	0x08008141
 8008110:	08008159 	.word	0x08008159
 8008114:	08008159 	.word	0x08008159
 8008118:	08008159 	.word	0x08008159
 800811c:	0800814d 	.word	0x0800814d
 8008120:	08008159 	.word	0x08008159
 8008124:	08008159 	.word	0x08008159
 8008128:	08008159 	.word	0x08008159
 800812c:	08008147 	.word	0x08008147
 8008130:	08008159 	.word	0x08008159
 8008134:	08008159 	.word	0x08008159
 8008138:	08008159 	.word	0x08008159
 800813c:	08008153 	.word	0x08008153
 8008140:	2300      	movs	r3, #0
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e118      	b.n	8008378 <UART_SetConfig+0x348>
 8008146:	2302      	movs	r3, #2
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e115      	b.n	8008378 <UART_SetConfig+0x348>
 800814c:	2304      	movs	r3, #4
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e112      	b.n	8008378 <UART_SetConfig+0x348>
 8008152:	2308      	movs	r3, #8
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e10f      	b.n	8008378 <UART_SetConfig+0x348>
 8008158:	2310      	movs	r3, #16
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e10c      	b.n	8008378 <UART_SetConfig+0x348>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a68      	ldr	r2, [pc, #416]	; (8008304 <UART_SetConfig+0x2d4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d120      	bne.n	80081aa <UART_SetConfig+0x17a>
 8008168:	4b64      	ldr	r3, [pc, #400]	; (80082fc <UART_SetConfig+0x2cc>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008172:	2b30      	cmp	r3, #48	; 0x30
 8008174:	d013      	beq.n	800819e <UART_SetConfig+0x16e>
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d814      	bhi.n	80081a4 <UART_SetConfig+0x174>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d009      	beq.n	8008192 <UART_SetConfig+0x162>
 800817e:	2b20      	cmp	r3, #32
 8008180:	d810      	bhi.n	80081a4 <UART_SetConfig+0x174>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <UART_SetConfig+0x15c>
 8008186:	2b10      	cmp	r3, #16
 8008188:	d006      	beq.n	8008198 <UART_SetConfig+0x168>
 800818a:	e00b      	b.n	80081a4 <UART_SetConfig+0x174>
 800818c:	2300      	movs	r3, #0
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	e0f2      	b.n	8008378 <UART_SetConfig+0x348>
 8008192:	2302      	movs	r3, #2
 8008194:	77fb      	strb	r3, [r7, #31]
 8008196:	e0ef      	b.n	8008378 <UART_SetConfig+0x348>
 8008198:	2304      	movs	r3, #4
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e0ec      	b.n	8008378 <UART_SetConfig+0x348>
 800819e:	2308      	movs	r3, #8
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e0e9      	b.n	8008378 <UART_SetConfig+0x348>
 80081a4:	2310      	movs	r3, #16
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e0e6      	b.n	8008378 <UART_SetConfig+0x348>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a56      	ldr	r2, [pc, #344]	; (8008308 <UART_SetConfig+0x2d8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d120      	bne.n	80081f6 <UART_SetConfig+0x1c6>
 80081b4:	4b51      	ldr	r3, [pc, #324]	; (80082fc <UART_SetConfig+0x2cc>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081be:	2bc0      	cmp	r3, #192	; 0xc0
 80081c0:	d013      	beq.n	80081ea <UART_SetConfig+0x1ba>
 80081c2:	2bc0      	cmp	r3, #192	; 0xc0
 80081c4:	d814      	bhi.n	80081f0 <UART_SetConfig+0x1c0>
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d009      	beq.n	80081de <UART_SetConfig+0x1ae>
 80081ca:	2b80      	cmp	r3, #128	; 0x80
 80081cc:	d810      	bhi.n	80081f0 <UART_SetConfig+0x1c0>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <UART_SetConfig+0x1a8>
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d006      	beq.n	80081e4 <UART_SetConfig+0x1b4>
 80081d6:	e00b      	b.n	80081f0 <UART_SetConfig+0x1c0>
 80081d8:	2300      	movs	r3, #0
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	e0cc      	b.n	8008378 <UART_SetConfig+0x348>
 80081de:	2302      	movs	r3, #2
 80081e0:	77fb      	strb	r3, [r7, #31]
 80081e2:	e0c9      	b.n	8008378 <UART_SetConfig+0x348>
 80081e4:	2304      	movs	r3, #4
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e0c6      	b.n	8008378 <UART_SetConfig+0x348>
 80081ea:	2308      	movs	r3, #8
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e0c3      	b.n	8008378 <UART_SetConfig+0x348>
 80081f0:	2310      	movs	r3, #16
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e0c0      	b.n	8008378 <UART_SetConfig+0x348>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a44      	ldr	r2, [pc, #272]	; (800830c <UART_SetConfig+0x2dc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d125      	bne.n	800824c <UART_SetConfig+0x21c>
 8008200:	4b3e      	ldr	r3, [pc, #248]	; (80082fc <UART_SetConfig+0x2cc>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800820e:	d017      	beq.n	8008240 <UART_SetConfig+0x210>
 8008210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008214:	d817      	bhi.n	8008246 <UART_SetConfig+0x216>
 8008216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821a:	d00b      	beq.n	8008234 <UART_SetConfig+0x204>
 800821c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008220:	d811      	bhi.n	8008246 <UART_SetConfig+0x216>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <UART_SetConfig+0x1fe>
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	d006      	beq.n	800823a <UART_SetConfig+0x20a>
 800822c:	e00b      	b.n	8008246 <UART_SetConfig+0x216>
 800822e:	2300      	movs	r3, #0
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e0a1      	b.n	8008378 <UART_SetConfig+0x348>
 8008234:	2302      	movs	r3, #2
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e09e      	b.n	8008378 <UART_SetConfig+0x348>
 800823a:	2304      	movs	r3, #4
 800823c:	77fb      	strb	r3, [r7, #31]
 800823e:	e09b      	b.n	8008378 <UART_SetConfig+0x348>
 8008240:	2308      	movs	r3, #8
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e098      	b.n	8008378 <UART_SetConfig+0x348>
 8008246:	2310      	movs	r3, #16
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e095      	b.n	8008378 <UART_SetConfig+0x348>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2f      	ldr	r2, [pc, #188]	; (8008310 <UART_SetConfig+0x2e0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d125      	bne.n	80082a2 <UART_SetConfig+0x272>
 8008256:	4b29      	ldr	r3, [pc, #164]	; (80082fc <UART_SetConfig+0x2cc>)
 8008258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008264:	d017      	beq.n	8008296 <UART_SetConfig+0x266>
 8008266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800826a:	d817      	bhi.n	800829c <UART_SetConfig+0x26c>
 800826c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008270:	d00b      	beq.n	800828a <UART_SetConfig+0x25a>
 8008272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008276:	d811      	bhi.n	800829c <UART_SetConfig+0x26c>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <UART_SetConfig+0x254>
 800827c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008280:	d006      	beq.n	8008290 <UART_SetConfig+0x260>
 8008282:	e00b      	b.n	800829c <UART_SetConfig+0x26c>
 8008284:	2301      	movs	r3, #1
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e076      	b.n	8008378 <UART_SetConfig+0x348>
 800828a:	2302      	movs	r3, #2
 800828c:	77fb      	strb	r3, [r7, #31]
 800828e:	e073      	b.n	8008378 <UART_SetConfig+0x348>
 8008290:	2304      	movs	r3, #4
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e070      	b.n	8008378 <UART_SetConfig+0x348>
 8008296:	2308      	movs	r3, #8
 8008298:	77fb      	strb	r3, [r7, #31]
 800829a:	e06d      	b.n	8008378 <UART_SetConfig+0x348>
 800829c:	2310      	movs	r3, #16
 800829e:	77fb      	strb	r3, [r7, #31]
 80082a0:	e06a      	b.n	8008378 <UART_SetConfig+0x348>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <UART_SetConfig+0x2e4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d138      	bne.n	800831e <UART_SetConfig+0x2ee>
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <UART_SetConfig+0x2cc>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80082b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082ba:	d017      	beq.n	80082ec <UART_SetConfig+0x2bc>
 80082bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082c0:	d82a      	bhi.n	8008318 <UART_SetConfig+0x2e8>
 80082c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c6:	d00b      	beq.n	80082e0 <UART_SetConfig+0x2b0>
 80082c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082cc:	d824      	bhi.n	8008318 <UART_SetConfig+0x2e8>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <UART_SetConfig+0x2aa>
 80082d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d6:	d006      	beq.n	80082e6 <UART_SetConfig+0x2b6>
 80082d8:	e01e      	b.n	8008318 <UART_SetConfig+0x2e8>
 80082da:	2300      	movs	r3, #0
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e04b      	b.n	8008378 <UART_SetConfig+0x348>
 80082e0:	2302      	movs	r3, #2
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	e048      	b.n	8008378 <UART_SetConfig+0x348>
 80082e6:	2304      	movs	r3, #4
 80082e8:	77fb      	strb	r3, [r7, #31]
 80082ea:	e045      	b.n	8008378 <UART_SetConfig+0x348>
 80082ec:	2308      	movs	r3, #8
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e042      	b.n	8008378 <UART_SetConfig+0x348>
 80082f2:	bf00      	nop
 80082f4:	efff69f3 	.word	0xefff69f3
 80082f8:	40011000 	.word	0x40011000
 80082fc:	40023800 	.word	0x40023800
 8008300:	40004400 	.word	0x40004400
 8008304:	40004800 	.word	0x40004800
 8008308:	40004c00 	.word	0x40004c00
 800830c:	40005000 	.word	0x40005000
 8008310:	40011400 	.word	0x40011400
 8008314:	40007800 	.word	0x40007800
 8008318:	2310      	movs	r3, #16
 800831a:	77fb      	strb	r3, [r7, #31]
 800831c:	e02c      	b.n	8008378 <UART_SetConfig+0x348>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a72      	ldr	r2, [pc, #456]	; (80084ec <UART_SetConfig+0x4bc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d125      	bne.n	8008374 <UART_SetConfig+0x344>
 8008328:	4b71      	ldr	r3, [pc, #452]	; (80084f0 <UART_SetConfig+0x4c0>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008332:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008336:	d017      	beq.n	8008368 <UART_SetConfig+0x338>
 8008338:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800833c:	d817      	bhi.n	800836e <UART_SetConfig+0x33e>
 800833e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008342:	d00b      	beq.n	800835c <UART_SetConfig+0x32c>
 8008344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008348:	d811      	bhi.n	800836e <UART_SetConfig+0x33e>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <UART_SetConfig+0x326>
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008352:	d006      	beq.n	8008362 <UART_SetConfig+0x332>
 8008354:	e00b      	b.n	800836e <UART_SetConfig+0x33e>
 8008356:	2300      	movs	r3, #0
 8008358:	77fb      	strb	r3, [r7, #31]
 800835a:	e00d      	b.n	8008378 <UART_SetConfig+0x348>
 800835c:	2302      	movs	r3, #2
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e00a      	b.n	8008378 <UART_SetConfig+0x348>
 8008362:	2304      	movs	r3, #4
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e007      	b.n	8008378 <UART_SetConfig+0x348>
 8008368:	2308      	movs	r3, #8
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e004      	b.n	8008378 <UART_SetConfig+0x348>
 800836e:	2310      	movs	r3, #16
 8008370:	77fb      	strb	r3, [r7, #31]
 8008372:	e001      	b.n	8008378 <UART_SetConfig+0x348>
 8008374:	2310      	movs	r3, #16
 8008376:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008380:	d15b      	bne.n	800843a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008382:	7ffb      	ldrb	r3, [r7, #31]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d828      	bhi.n	80083da <UART_SetConfig+0x3aa>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <UART_SetConfig+0x360>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083db 	.word	0x080083db
 80083a0:	080083cb 	.word	0x080083cb
 80083a4:	080083db 	.word	0x080083db
 80083a8:	080083db 	.word	0x080083db
 80083ac:	080083db 	.word	0x080083db
 80083b0:	080083d3 	.word	0x080083d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b4:	f7fd fdb0 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 80083b8:	61b8      	str	r0, [r7, #24]
        break;
 80083ba:	e013      	b.n	80083e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083bc:	f7fd fdc0 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 80083c0:	61b8      	str	r0, [r7, #24]
        break;
 80083c2:	e00f      	b.n	80083e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c4:	4b4b      	ldr	r3, [pc, #300]	; (80084f4 <UART_SetConfig+0x4c4>)
 80083c6:	61bb      	str	r3, [r7, #24]
        break;
 80083c8:	e00c      	b.n	80083e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ca:	f7fd fc93 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 80083ce:	61b8      	str	r0, [r7, #24]
        break;
 80083d0:	e008      	b.n	80083e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d6:	61bb      	str	r3, [r7, #24]
        break;
 80083d8:	e004      	b.n	80083e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	77bb      	strb	r3, [r7, #30]
        break;
 80083e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d074      	beq.n	80084d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	005a      	lsls	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	441a      	add	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d916      	bls.n	8008434 <UART_SetConfig+0x404>
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840c:	d212      	bcs.n	8008434 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f023 030f 	bic.w	r3, r3, #15
 8008416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	b29b      	uxth	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b29a      	uxth	r2, r3
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	4313      	orrs	r3, r2
 8008428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	89fa      	ldrh	r2, [r7, #14]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e04f      	b.n	80084d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77bb      	strb	r3, [r7, #30]
 8008438:	e04c      	b.n	80084d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800843a:	7ffb      	ldrb	r3, [r7, #31]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d828      	bhi.n	8008492 <UART_SetConfig+0x462>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x418>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	08008493 	.word	0x08008493
 8008458:	08008483 	.word	0x08008483
 800845c:	08008493 	.word	0x08008493
 8008460:	08008493 	.word	0x08008493
 8008464:	08008493 	.word	0x08008493
 8008468:	0800848b 	.word	0x0800848b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fd fd54 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8008470:	61b8      	str	r0, [r7, #24]
        break;
 8008472:	e013      	b.n	800849c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008474:	f7fd fd64 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 8008478:	61b8      	str	r0, [r7, #24]
        break;
 800847a:	e00f      	b.n	800849c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800847c:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <UART_SetConfig+0x4c4>)
 800847e:	61bb      	str	r3, [r7, #24]
        break;
 8008480:	e00c      	b.n	800849c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008482:	f7fd fc37 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8008486:	61b8      	str	r0, [r7, #24]
        break;
 8008488:	e008      	b.n	800849c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848e:	61bb      	str	r3, [r7, #24]
        break;
 8008490:	e004      	b.n	800849c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	77bb      	strb	r3, [r7, #30]
        break;
 800849a:	bf00      	nop
    }

    if (pclk != 0U)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	085a      	lsrs	r2, r3, #1
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	441a      	add	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b0f      	cmp	r3, #15
 80084ba:	d909      	bls.n	80084d0 <UART_SetConfig+0x4a0>
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c2:	d205      	bcs.n	80084d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	e001      	b.n	80084d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80084e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40007c00 	.word	0x40007c00
 80084f0:	40023800 	.word	0x40023800
 80084f4:	00f42400 	.word	0x00f42400

080084f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	f003 0310 	and.w	r3, r3, #16
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f6:	d10a      	bne.n	800860e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  }
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800864c:	f7fb ff38 	bl	80044c0 <HAL_GetTick>
 8008650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b08      	cmp	r3, #8
 800865e:	d10e      	bne.n	800867e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f831 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e027      	b.n	80086ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b04      	cmp	r3, #4
 800868a:	d10e      	bne.n	80086aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800868c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f81b 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e011      	b.n	80086ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2220      	movs	r2, #32
 80086ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b09c      	sub	sp, #112	; 0x70
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	4613      	mov	r3, r2
 80086e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e6:	e0a7      	b.n	8008838 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	f000 80a3 	beq.w	8008838 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f2:	f7fb fee5 	bl	80044c0 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086fe:	429a      	cmp	r2, r3
 8008700:	d302      	bcc.n	8008708 <UART_WaitOnFlagUntilTimeout+0x32>
 8008702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008704:	2b00      	cmp	r3, #0
 8008706:	d13f      	bne.n	8008788 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800871c:	667b      	str	r3, [r7, #100]	; 0x64
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008728:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800872c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	663b      	str	r3, [r7, #96]	; 0x60
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800875a:	64ba      	str	r2, [r7, #72]	; 0x48
 800875c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e068      	b.n	800885a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d050      	beq.n	8008838 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a4:	d148      	bne.n	8008838 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
 80087d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	613b      	str	r3, [r7, #16]
   return(result);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f023 0301 	bic.w	r3, r3, #1
 80087f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008802:	623a      	str	r2, [r7, #32]
 8008804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	69f9      	ldr	r1, [r7, #28]
 8008808:	6a3a      	ldr	r2, [r7, #32]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e5      	bne.n	80087e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e010      	b.n	800885a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69da      	ldr	r2, [r3, #28]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4013      	ands	r3, r2
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	429a      	cmp	r2, r3
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	429a      	cmp	r2, r3
 8008854:	f43f af48 	beq.w	80086e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3770      	adds	r7, #112	; 0x70
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b095      	sub	sp, #84	; 0x54
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800887e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008888:	643b      	str	r3, [r7, #64]	; 0x40
 800888a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800888e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3308      	adds	r3, #8
 80088a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3308      	adds	r3, #8
 80088ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e5      	bne.n	800889c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d118      	bne.n	800890a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f023 0310 	bic.w	r3, r3, #16
 80088ec:	647b      	str	r3, [r7, #68]	; 0x44
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f6:	61bb      	str	r3, [r7, #24]
 80088f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6979      	ldr	r1, [r7, #20]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	613b      	str	r3, [r7, #16]
   return(result);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800891e:	bf00      	nop
 8008920:	3754      	adds	r7, #84	; 0x54
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fb51 	bl	8007ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b088      	sub	sp, #32
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60bb      	str	r3, [r7, #8]
   return(result);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6979      	ldr	r1, [r7, #20]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	613b      	str	r3, [r7, #16]
   return(result);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fb1d 	bl	8007fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a2:	bf00      	nop
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	2101      	movs	r1, #1
 80089ba:	483f      	ldr	r0, [pc, #252]	; (8008ab8 <network_configure_activations+0x10c>)
 80089bc:	f000 fc22 	bl	8009204 <ai_platform_get_activations_map>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d06d      	beq.n	8008aa2 <network_configure_activations+0xf6>
    /* Updating activations (byte) offsets */
    
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 80089c6:	4b3c      	ldr	r3, [pc, #240]	; (8008ab8 <network_configure_activations+0x10c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80089ce:	4a3b      	ldr	r2, [pc, #236]	; (8008abc <network_configure_activations+0x110>)
 80089d0:	6093      	str	r3, [r2, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 80089d2:	4b39      	ldr	r3, [pc, #228]	; (8008ab8 <network_configure_activations+0x10c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80089da:	4a38      	ldr	r2, [pc, #224]	; (8008abc <network_configure_activations+0x110>)
 80089dc:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 80089de:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <network_configure_activations+0x10c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80089e6:	4a36      	ldr	r2, [pc, #216]	; (8008ac0 <network_configure_activations+0x114>)
 80089e8:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 80089ea:	4b33      	ldr	r3, [pc, #204]	; (8008ab8 <network_configure_activations+0x10c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80089f2:	4a33      	ldr	r2, [pc, #204]	; (8008ac0 <network_configure_activations+0x114>)
 80089f4:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80089f6:	4b30      	ldr	r3, [pc, #192]	; (8008ab8 <network_configure_activations+0x10c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	4a31      	ldr	r2, [pc, #196]	; (8008ac4 <network_configure_activations+0x118>)
 80089fe:	6093      	str	r3, [r2, #8]
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8008a00:	4b2d      	ldr	r3, [pc, #180]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3308      	adds	r3, #8
 8008a06:	4a2f      	ldr	r2, [pc, #188]	; (8008ac4 <network_configure_activations+0x118>)
 8008a08:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 19772);
 8008a0a:	4b2b      	ldr	r3, [pc, #172]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	f644 533c 	movw	r3, #19772	; 0x4d3c
 8008a12:	4413      	add	r3, r2
 8008a14:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <network_configure_activations+0x11c>)
 8008a16:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 19772);
 8008a18:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f644 533c 	movw	r3, #19772	; 0x4d3c
 8008a20:	4413      	add	r3, r2
 8008a22:	4a29      	ldr	r2, [pc, #164]	; (8008ac8 <network_configure_activations+0x11c>)
 8008a24:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 8008a26:	4b24      	ldr	r3, [pc, #144]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008a2e:	4413      	add	r3, r2
 8008a30:	4a26      	ldr	r2, [pc, #152]	; (8008acc <network_configure_activations+0x120>)
 8008a32:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 8008a34:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4a23      	ldr	r2, [pc, #140]	; (8008acc <network_configure_activations+0x120>)
 8008a40:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a22      	ldr	r2, [pc, #136]	; (8008ad0 <network_configure_activations+0x124>)
 8008a48:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008a4a:	4b1b      	ldr	r3, [pc, #108]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <network_configure_activations+0x124>)
 8008a50:	60d3      	str	r3, [r2, #12]
    
    dense_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8008a52:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <network_configure_activations+0x128>)
 8008a5a:	6093      	str	r3, [r2, #8]
    dense_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8008a5c:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <network_configure_activations+0x128>)
 8008a64:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3318      	adds	r3, #24
 8008a6c:	4a1a      	ldr	r2, [pc, #104]	; (8008ad8 <network_configure_activations+0x12c>)
 8008a6e:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8008a70:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3318      	adds	r3, #24
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <network_configure_activations+0x12c>)
 8008a78:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a17      	ldr	r2, [pc, #92]	; (8008adc <network_configure_activations+0x130>)
 8008a80:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008a82:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <network_configure_activations+0x130>)
 8008a88:	60d3      	str	r3, [r2, #12]
    
    conversion_5_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <network_configure_activations+0x134>)
 8008a92:	6093      	str	r3, [r2, #8]
    conversion_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <network_configure_activations+0x10c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4a11      	ldr	r2, [pc, #68]	; (8008ae0 <network_configure_activations+0x134>)
 8008a9c:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e005      	b.n	8008aae <network_configure_activations+0x102>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008aa2:	2213      	movs	r2, #19
 8008aa4:	2130      	movs	r1, #48	; 0x30
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fc04 	bl	80092b4 <ai_platform_network_set_error>
  return false;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20001954 	.word	0x20001954
 8008abc:	200004cc 	.word	0x200004cc
 8008ac0:	200004dc 	.word	0x200004dc
 8008ac4:	200004ec 	.word	0x200004ec
 8008ac8:	2000057c 	.word	0x2000057c
 8008acc:	2000058c 	.word	0x2000058c
 8008ad0:	200004fc 	.word	0x200004fc
 8008ad4:	2000059c 	.word	0x2000059c
 8008ad8:	2000050c 	.word	0x2000050c
 8008adc:	2000051c 	.word	0x2000051c
 8008ae0:	2000052c 	.word	0x2000052c

08008ae4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	2101      	movs	r1, #1
 8008af2:	4828      	ldr	r0, [pc, #160]	; (8008b94 <network_configure_weights+0xb0>)
 8008af4:	f000 fb2e 	bl	8009154 <ai_platform_get_weights_map>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d03f      	beq.n	8008b7e <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008afe:	4b26      	ldr	r3, [pc, #152]	; (8008b98 <network_configure_weights+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b06:	4a24      	ldr	r2, [pc, #144]	; (8008b98 <network_configure_weights+0xb4>)
 8008b08:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8008b0a:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <network_configure_weights+0xb0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a22      	ldr	r2, [pc, #136]	; (8008b98 <network_configure_weights+0xb4>)
 8008b10:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8008b12:	4b20      	ldr	r3, [pc, #128]	; (8008b94 <network_configure_weights+0xb0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a20      	ldr	r2, [pc, #128]	; (8008b98 <network_configure_weights+0xb4>)
 8008b18:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008b1a:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <network_configure_weights+0xb8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b22:	4a1e      	ldr	r2, [pc, #120]	; (8008b9c <network_configure_weights+0xb8>)
 8008b24:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 72);
 8008b26:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <network_configure_weights+0xb0>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3348      	adds	r3, #72	; 0x48
 8008b2c:	4a1b      	ldr	r2, [pc, #108]	; (8008b9c <network_configure_weights+0xb8>)
 8008b2e:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 72);
 8008b30:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <network_configure_weights+0xb0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3348      	adds	r3, #72	; 0x48
 8008b36:	4a19      	ldr	r2, [pc, #100]	; (8008b9c <network_configure_weights+0xb8>)
 8008b38:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008b3a:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <network_configure_weights+0xbc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <network_configure_weights+0xbc>)
 8008b44:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 104);
 8008b46:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <network_configure_weights+0xb0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3368      	adds	r3, #104	; 0x68
 8008b4c:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <network_configure_weights+0xbc>)
 8008b4e:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 104);
 8008b50:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <network_configure_weights+0xb0>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3368      	adds	r3, #104	; 0x68
 8008b56:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <network_configure_weights+0xbc>)
 8008b58:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <network_configure_weights+0xc0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b62:	4a10      	ldr	r2, [pc, #64]	; (8008ba4 <network_configure_weights+0xc0>)
 8008b64:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 112);
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <network_configure_weights+0xb0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3370      	adds	r3, #112	; 0x70
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <network_configure_weights+0xc0>)
 8008b6e:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112);
 8008b70:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <network_configure_weights+0xb0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3370      	adds	r3, #112	; 0x70
 8008b76:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <network_configure_weights+0xc0>)
 8008b78:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e005      	b.n	8008b8a <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008b7e:	2212      	movs	r2, #18
 8008b80:	2130      	movs	r1, #48	; 0x30
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb96 	bl	80092b4 <ai_platform_network_set_error>
  return false;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20001958 	.word	0x20001958
 8008b98:	2000053c 	.word	0x2000053c
 8008b9c:	2000054c 	.word	0x2000054c
 8008ba0:	2000055c 	.word	0x2000055c
 8008ba4:	2000056c 	.word	0x2000056c

08008ba8 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	2305      	movs	r3, #5
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <ai_network_create+0x28>)
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fb7d 	bl	80092c0 <ai_platform_network_create>
 8008bc6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000c08 	.word	0x20000c08

08008bd4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fd21 	bl	8009628 <ai_platform_network_init>
 8008be6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <ai_network_init+0x1e>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e028      	b.n	8008c44 <ai_network_init+0x70>

  ai_bool ok = true;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff ff73 	bl	8008ae4 <network_configure_weights>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	461a      	mov	r2, r3
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bf14      	ite	ne
 8008c0a:	2301      	movne	r3, #1
 8008c0c:	2300      	moveq	r3, #0
 8008c0e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff feca 	bl	80089ac <network_configure_activations>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fe78 	bl	8009920 <ai_platform_network_post_init>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	4013      	ands	r3, r2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bf14      	ite	ne
 8008c3c:	2301      	movne	r3, #1
 8008c3e:	2300      	moveq	r3, #0
 8008c40:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 ff6b 	bl	8009b38 <ai_platform_network_process>
 8008c62:	4603      	mov	r3, r0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8008c6c:	b4b0      	push	{r4, r5, r7}
 8008c6e:	b08f      	sub	sp, #60	; 0x3c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008c76:	4b15      	ldr	r3, [pc, #84]	; (8008ccc <ai_network_data_activations_buffer_get+0x60>)
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
 8008c82:	2300      	movs	r3, #0
 8008c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c86:	f24e 4340 	movw	r3, #58432	; 0xe440
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	2204      	movs	r2, #4
 8008c96:	f362 231f 	bfi	r3, r2, #8, #24
 8008c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <ai_network_data_activations_buffer_get+0x64>)
 8008c9e:	f107 040c 	add.w	r4, r7, #12
 8008ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008ca8:	f107 030c 	add.w	r3, r7, #12
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	461d      	mov	r5, r3
 8008cb2:	f107 041c 	add.w	r4, r7, #28
 8008cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008cbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	373c      	adds	r7, #60	; 0x3c
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bcb0      	pop	{r4, r5, r7}
 8008cca:	4770      	bx	lr
 8008ccc:	00040440 	.word	0x00040440
 8008cd0:	08017c90 	.word	0x08017c90

08008cd4 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8008cd4:	b4b0      	push	{r4, r5, r7}
 8008cd6:	b08f      	sub	sp, #60	; 0x3c
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <ai_network_data_weights_buffer_get+0x60>)
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	623b      	str	r3, [r7, #32]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cea:	2300      	movs	r3, #0
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cee:	2374      	movs	r3, #116	; 0x74
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	f362 231f 	bfi	r3, r2, #8, #24
 8008d00:	633b      	str	r3, [r7, #48]	; 0x30
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <ai_network_data_weights_buffer_get+0x64>)
 8008d04:	f107 040c 	add.w	r4, r7, #12
 8008d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	461d      	mov	r5, r3
 8008d18:	f107 041c 	add.w	r4, r7, #28
 8008d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	373c      	adds	r7, #60	; 0x3c
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bcb0      	pop	{r4, r5, r7}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40040440 	.word	0x40040440
 8008d38:	08017ca0 	.word	0x08017ca0

08008d3c <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <ai_network_data_weights_get+0x10>)

}
 8008d42:	4618      	mov	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000cac 	.word	0x20000cac

08008d50 <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4825      	ldr	r0, [pc, #148]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d60:	f000 fa50 	bl	8009204 <ai_platform_get_activations_map>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d039      	beq.n	8008dde <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    dense_input_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8008d6a:	4b22      	ldr	r3, [pc, #136]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	333c      	adds	r3, #60	; 0x3c
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <sine_model_configure_activations+0xa8>)
 8008d72:	6093      	str	r3, [r2, #8]
    dense_input_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8008d74:	4b1f      	ldr	r3, [pc, #124]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	333c      	adds	r3, #60	; 0x3c
 8008d7a:	4a1f      	ldr	r2, [pc, #124]	; (8008df8 <sine_model_configure_activations+0xa8>)
 8008d7c:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3340      	adds	r3, #64	; 0x40
 8008d84:	4a1d      	ldr	r2, [pc, #116]	; (8008dfc <sine_model_configure_activations+0xac>)
 8008d86:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d88:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3340      	adds	r3, #64	; 0x40
 8008d8e:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <sine_model_configure_activations+0xac>)
 8008d90:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d92:	4b18      	ldr	r3, [pc, #96]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3340      	adds	r3, #64	; 0x40
 8008d98:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <sine_model_configure_activations+0xb0>)
 8008d9a:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3340      	adds	r3, #64	; 0x40
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <sine_model_configure_activations+0xb0>)
 8008da4:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <sine_model_configure_activations+0xb4>)
 8008dac:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a14      	ldr	r2, [pc, #80]	; (8008e04 <sine_model_configure_activations+0xb4>)
 8008db4:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3340      	adds	r3, #64	; 0x40
 8008dbc:	4a12      	ldr	r2, [pc, #72]	; (8008e08 <sine_model_configure_activations+0xb8>)
 8008dbe:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3340      	adds	r3, #64	; 0x40
 8008dc6:	4a10      	ldr	r2, [pc, #64]	; (8008e08 <sine_model_configure_activations+0xb8>)
 8008dc8:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a0f      	ldr	r2, [pc, #60]	; (8008e0c <sine_model_configure_activations+0xbc>)
 8008dd0:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <sine_model_configure_activations+0xa4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <sine_model_configure_activations+0xbc>)
 8008dd8:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e005      	b.n	8008dea <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008dde:	2213      	movs	r2, #19
 8008de0:	2130      	movs	r1, #48	; 0x30
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa66 	bl	80092b4 <ai_platform_network_set_error>
  return false;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20001a04 	.word	0x20001a04
 8008df8:	20000cb8 	.word	0x20000cb8
 8008dfc:	20000cc8 	.word	0x20000cc8
 8008e00:	20000cd8 	.word	0x20000cd8
 8008e04:	20000ce8 	.word	0x20000ce8
 8008e08:	20000cf8 	.word	0x20000cf8
 8008e0c:	20000d08 	.word	0x20000d08

08008e10 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	483b      	ldr	r0, [pc, #236]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e20:	f000 f998 	bl	8009154 <ai_platform_get_weights_map>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d065      	beq.n	8008ef6 <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e2a:	4b39      	ldr	r3, [pc, #228]	; (8008f10 <sine_model_configure_weights+0x100>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e32:	4a37      	ldr	r2, [pc, #220]	; (8008f10 <sine_model_configure_weights+0x100>)
 8008e34:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8008e36:	4b35      	ldr	r3, [pc, #212]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a35      	ldr	r2, [pc, #212]	; (8008f10 <sine_model_configure_weights+0x100>)
 8008e3c:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8008e3e:	4b33      	ldr	r3, [pc, #204]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a33      	ldr	r2, [pc, #204]	; (8008f10 <sine_model_configure_weights+0x100>)
 8008e44:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e46:	4b33      	ldr	r3, [pc, #204]	; (8008f14 <sine_model_configure_weights+0x104>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e4e:	4a31      	ldr	r2, [pc, #196]	; (8008f14 <sine_model_configure_weights+0x104>)
 8008e50:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3340      	adds	r3, #64	; 0x40
 8008e58:	4a2e      	ldr	r2, [pc, #184]	; (8008f14 <sine_model_configure_weights+0x104>)
 8008e5a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8008e5c:	4b2b      	ldr	r3, [pc, #172]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3340      	adds	r3, #64	; 0x40
 8008e62:	4a2c      	ldr	r2, [pc, #176]	; (8008f14 <sine_model_configure_weights+0x104>)
 8008e64:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e66:	4b2c      	ldr	r3, [pc, #176]	; (8008f18 <sine_model_configure_weights+0x108>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e6e:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <sine_model_configure_weights+0x108>)
 8008e70:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8008e72:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3380      	adds	r3, #128	; 0x80
 8008e78:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <sine_model_configure_weights+0x108>)
 8008e7a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8008e7c:	4b23      	ldr	r3, [pc, #140]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3380      	adds	r3, #128	; 0x80
 8008e82:	4a25      	ldr	r2, [pc, #148]	; (8008f18 <sine_model_configure_weights+0x108>)
 8008e84:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e86:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <sine_model_configure_weights+0x10c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e8e:	4a23      	ldr	r2, [pc, #140]	; (8008f1c <sine_model_configure_weights+0x10c>)
 8008e90:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008e9a:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <sine_model_configure_weights+0x10c>)
 8008e9c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008ea6:	4a1d      	ldr	r2, [pc, #116]	; (8008f1c <sine_model_configure_weights+0x10c>)
 8008ea8:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008eaa:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <sine_model_configure_weights+0x110>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eb2:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <sine_model_configure_weights+0x110>)
 8008eb4:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008ebe:	4a18      	ldr	r2, [pc, #96]	; (8008f20 <sine_model_configure_weights+0x110>)
 8008ec0:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8008ec2:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008eca:	4a15      	ldr	r2, [pc, #84]	; (8008f20 <sine_model_configure_weights+0x110>)
 8008ecc:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ece:	4b15      	ldr	r3, [pc, #84]	; (8008f24 <sine_model_configure_weights+0x114>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ed6:	4a13      	ldr	r2, [pc, #76]	; (8008f24 <sine_model_configure_weights+0x114>)
 8008ed8:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee2:	4a10      	ldr	r2, [pc, #64]	; (8008f24 <sine_model_configure_weights+0x114>)
 8008ee4:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8008ee6:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <sine_model_configure_weights+0xfc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <sine_model_configure_weights+0x114>)
 8008ef0:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e005      	b.n	8008f02 <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008ef6:	2212      	movs	r2, #18
 8008ef8:	2130      	movs	r1, #48	; 0x30
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9da 	bl	80092b4 <ai_platform_network_set_error>
  return false;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20001a08 	.word	0x20001a08
 8008f10:	20000d18 	.word	0x20000d18
 8008f14:	20000d28 	.word	0x20000d28
 8008f18:	20000d38 	.word	0x20000d38
 8008f1c:	20000d48 	.word	0x20000d48
 8008f20:	20000d58 	.word	0x20000d58
 8008f24:	20000d68 	.word	0x20000d68

08008f28 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008f32:	2300      	movs	r3, #0
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	2305      	movs	r3, #5
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <ai_sine_model_create+0x28>)
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f9bd 	bl	80092c0 <ai_platform_network_create>
 8008f46:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	2000129c 	.word	0x2000129c

08008f54 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fb61 	bl	8009628 <ai_platform_network_init>
 8008f66:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <ai_sine_model_init+0x1e>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e028      	b.n	8008fc4 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8008f72:	2301      	movs	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff ff49 	bl	8008e10 <sine_model_configure_weights>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	461a      	mov	r2, r3
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	4013      	ands	r3, r2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	2300      	moveq	r3, #0
 8008f8e:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fedc 	bl	8008d50 <sine_model_configure_activations>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf14      	ite	ne
 8008fa4:	2301      	movne	r3, #1
 8008fa6:	2300      	moveq	r3, #0
 8008fa8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fcb8 	bl	8009920 <ai_platform_network_post_init>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fdab 	bl	8009b38 <ai_platform_network_process>
 8008fe2:	4603      	mov	r3, r0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8008fec:	b4b0      	push	{r4, r5, r7}
 8008fee:	b08f      	sub	sp, #60	; 0x3c
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <ai_sine_model_data_activations_buffer_get+0x60>)
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	623b      	str	r3, [r7, #32]
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
 8009002:	2300      	movs	r3, #0
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	2380      	movs	r3, #128	; 0x80
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900a:	2301      	movs	r3, #1
 800900c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	2204      	movs	r2, #4
 8009014:	f362 231f 	bfi	r3, r2, #8, #24
 8009018:	633b      	str	r3, [r7, #48]	; 0x30
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <ai_sine_model_data_activations_buffer_get+0x64>)
 800901c:	f107 040c 	add.w	r4, r7, #12
 8009020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009026:	f107 030c 	add.w	r3, r7, #12
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	461d      	mov	r5, r3
 8009030:	f107 041c 	add.w	r4, r7, #28
 8009034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009038:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800903c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	373c      	adds	r7, #60	; 0x3c
 8009044:	46bd      	mov	sp, r7
 8009046:	bcb0      	pop	{r4, r5, r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	00040440 	.word	0x00040440
 8009050:	08017cc0 	.word	0x08017cc0

08009054 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8009054:	b4b0      	push	{r4, r5, r7}
 8009056:	b08f      	sub	sp, #60	; 0x3c
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <ai_sine_model_data_weights_buffer_get+0x60>)
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	623b      	str	r3, [r7, #32]
 8009066:	2300      	movs	r3, #0
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
 800906a:	2300      	movs	r3, #0
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
 800906e:	f240 5304 	movw	r3, #1284	; 0x504
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009074:	2301      	movs	r3, #1
 8009076:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2204      	movs	r2, #4
 800907e:	f362 231f 	bfi	r3, r2, #8, #24
 8009082:	633b      	str	r3, [r7, #48]	; 0x30
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <ai_sine_model_data_weights_buffer_get+0x64>)
 8009086:	f107 040c 	add.w	r4, r7, #12
 800908a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800908c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	461d      	mov	r5, r3
 800909a:	f107 041c 	add.w	r4, r7, #28
 800909e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80090a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	373c      	adds	r7, #60	; 0x3c
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bcb0      	pop	{r4, r5, r7}
 80090b2:	4770      	bx	lr
 80090b4:	40040440 	.word	0x40040440
 80090b8:	08017cd0 	.word	0x08017cd0

080090bc <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <ai_sine_model_data_weights_get+0x10>)

}
 80090c2:	4618      	mov	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20001340 	.word	0x20001340

080090d0 <ai_buffer_get_size>:
 80090d0:	b368      	cbz	r0, 800912e <ai_buffer_get_size+0x5e>
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <ai_buffer_get_size+0x60>)
 80090d4:	4a17      	ldr	r2, [pc, #92]	; (8009134 <ai_buffer_get_size+0x64>)
 80090d6:	b410      	push	{r4}
 80090d8:	6804      	ldr	r4, [r0, #0]
 80090da:	4023      	ands	r3, r4
 80090dc:	4293      	cmp	r3, r2
 80090de:	d123      	bne.n	8009128 <ai_buffer_get_size+0x58>
 80090e0:	b311      	cbz	r1, 8009128 <ai_buffer_get_size+0x58>
 80090e2:	6984      	ldr	r4, [r0, #24]
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	321f      	adds	r2, #31
 80090e8:	f022 021f 	bic.w	r2, r2, #31
 80090ec:	7d03      	ldrb	r3, [r0, #20]
 80090ee:	6941      	ldr	r1, [r0, #20]
 80090f0:	f1a3 0301 	sub.w	r3, r3, #1
 80090f4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80090f8:	fab3 f383 	clz	r3, r3
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009102:	da0c      	bge.n	800911e <ai_buffer_get_size+0x4e>
 8009104:	2b01      	cmp	r3, #1
 8009106:	d103      	bne.n	8009110 <ai_buffer_get_size+0x40>
 8009108:	2802      	cmp	r0, #2
 800910a:	f04f 0302 	mov.w	r3, #2
 800910e:	d006      	beq.n	800911e <ai_buffer_get_size+0x4e>
 8009110:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009114:	3301      	adds	r3, #1
 8009116:	4298      	cmp	r0, r3
 8009118:	fb01 f202 	mul.w	r2, r1, r2
 800911c:	d1f2      	bne.n	8009104 <ai_buffer_get_size+0x34>
 800911e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	6984      	ldr	r4, [r0, #24]
 800912a:	6862      	ldr	r2, [r4, #4]
 800912c:	e7de      	b.n	80090ec <ai_buffer_get_size+0x1c>
 800912e:	4770      	bx	lr
 8009130:	017fffff 	.word	0x017fffff
 8009134:	000400c0 	.word	0x000400c0

08009138 <ai_buffer_array_sane>:
 8009138:	b138      	cbz	r0, 800914a <ai_buffer_array_sane+0x12>
 800913a:	6843      	ldr	r3, [r0, #4]
 800913c:	b123      	cbz	r3, 8009148 <ai_buffer_array_sane+0x10>
 800913e:	8840      	ldrh	r0, [r0, #2]
 8009140:	3800      	subs	r0, #0
 8009142:	bf18      	it	ne
 8009144:	2001      	movne	r0, #1
 8009146:	4770      	bx	lr
 8009148:	4618      	mov	r0, r3
 800914a:	4770      	bx	lr

0800914c <_ai_platform_acquire_crc>:
 800914c:	2001      	movs	r0, #1
 800914e:	4770      	bx	lr

08009150 <_ai_platform_release_crc>:
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <ai_platform_get_weights_map>:
 8009154:	2900      	cmp	r1, #0
 8009156:	bf18      	it	ne
 8009158:	2800      	cmpne	r0, #0
 800915a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915c:	bf0c      	ite	eq
 800915e:	2401      	moveq	r4, #1
 8009160:	2400      	movne	r4, #0
 8009162:	2a00      	cmp	r2, #0
 8009164:	bf08      	it	eq
 8009166:	f044 0401 	orreq.w	r4, r4, #1
 800916a:	b114      	cbz	r4, 8009172 <ai_platform_get_weights_map+0x1e>
 800916c:	2400      	movs	r4, #0
 800916e:	4620      	mov	r0, r4
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009172:	4616      	mov	r6, r2
 8009174:	4b22      	ldr	r3, [pc, #136]	; (8009200 <ai_platform_get_weights_map+0xac>)
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	4605      	mov	r5, r0
 800917a:	460f      	mov	r7, r1
 800917c:	429a      	cmp	r2, r3
 800917e:	d022      	beq.n	80091c6 <ai_platform_get_weights_map+0x72>
 8009180:	6870      	ldr	r0, [r6, #4]
 8009182:	2800      	cmp	r0, #0
 8009184:	d0f2      	beq.n	800916c <ai_platform_get_weights_map+0x18>
 8009186:	6806      	ldr	r6, [r0, #0]
 8009188:	429e      	cmp	r6, r3
 800918a:	d006      	beq.n	800919a <ai_platform_get_weights_map+0x46>
 800918c:	f1a1 0401 	sub.w	r4, r1, #1
 8009190:	6028      	str	r0, [r5, #0]
 8009192:	fab4 f484 	clz	r4, r4
 8009196:	0964      	lsrs	r4, r4, #5
 8009198:	e7e9      	b.n	800916e <ai_platform_get_weights_map+0x1a>
 800919a:	3d04      	subs	r5, #4
 800919c:	4602      	mov	r2, r0
 800919e:	4621      	mov	r1, r4
 80091a0:	e000      	b.n	80091a4 <ai_platform_get_weights_map+0x50>
 80091a2:	4619      	mov	r1, r3
 80091a4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	d025      	beq.n	80091f8 <ai_platform_get_weights_map+0xa4>
 80091ac:	f845 3f04 	str.w	r3, [r5, #4]!
 80091b0:	1c4b      	adds	r3, r1, #1
 80091b2:	429f      	cmp	r7, r3
 80091b4:	d8f5      	bhi.n	80091a2 <ai_platform_get_weights_map+0x4e>
 80091b6:	d1da      	bne.n	800916e <ai_platform_get_weights_map+0x1a>
 80091b8:	3102      	adds	r1, #2
 80091ba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80091be:	42b3      	cmp	r3, r6
 80091c0:	d1d5      	bne.n	800916e <ai_platform_get_weights_map+0x1a>
 80091c2:	2401      	movs	r4, #1
 80091c4:	e7d3      	b.n	800916e <ai_platform_get_weights_map+0x1a>
 80091c6:	1d30      	adds	r0, r6, #4
 80091c8:	f7ff ffb6 	bl	8009138 <ai_buffer_array_sane>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d0cd      	beq.n	800916c <ai_platform_get_weights_map+0x18>
 80091d0:	88f3      	ldrh	r3, [r6, #6]
 80091d2:	429f      	cmp	r7, r3
 80091d4:	d1ca      	bne.n	800916c <ai_platform_get_weights_map+0x18>
 80091d6:	3d04      	subs	r5, #4
 80091d8:	4622      	mov	r2, r4
 80091da:	68b3      	ldr	r3, [r6, #8]
 80091dc:	4423      	add	r3, r4
 80091de:	341c      	adds	r4, #28
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	b123      	cbz	r3, 80091ee <ai_platform_get_weights_map+0x9a>
 80091e4:	3201      	adds	r2, #1
 80091e6:	f845 3f04 	str.w	r3, [r5, #4]!
 80091ea:	4297      	cmp	r7, r2
 80091ec:	d8f5      	bhi.n	80091da <ai_platform_get_weights_map+0x86>
 80091ee:	1abc      	subs	r4, r7, r2
 80091f0:	fab4 f484 	clz	r4, r4
 80091f4:	0964      	lsrs	r4, r4, #5
 80091f6:	e7ba      	b.n	800916e <ai_platform_get_weights_map+0x1a>
 80091f8:	428f      	cmp	r7, r1
 80091fa:	d1b8      	bne.n	800916e <ai_platform_get_weights_map+0x1a>
 80091fc:	e7e1      	b.n	80091c2 <ai_platform_get_weights_map+0x6e>
 80091fe:	bf00      	nop
 8009200:	a1facade 	.word	0xa1facade

08009204 <ai_platform_get_activations_map>:
 8009204:	2900      	cmp	r1, #0
 8009206:	bf18      	it	ne
 8009208:	2800      	cmpne	r0, #0
 800920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920c:	bf0c      	ite	eq
 800920e:	2401      	moveq	r4, #1
 8009210:	2400      	movne	r4, #0
 8009212:	2a00      	cmp	r2, #0
 8009214:	bf08      	it	eq
 8009216:	f044 0401 	orreq.w	r4, r4, #1
 800921a:	b114      	cbz	r4, 8009222 <ai_platform_get_activations_map+0x1e>
 800921c:	2400      	movs	r4, #0
 800921e:	4620      	mov	r0, r4
 8009220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009222:	4616      	mov	r6, r2
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <ai_platform_get_activations_map+0xac>)
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	4605      	mov	r5, r0
 800922a:	460f      	mov	r7, r1
 800922c:	429a      	cmp	r2, r3
 800922e:	d022      	beq.n	8009276 <ai_platform_get_activations_map+0x72>
 8009230:	6a30      	ldr	r0, [r6, #32]
 8009232:	2800      	cmp	r0, #0
 8009234:	d0f2      	beq.n	800921c <ai_platform_get_activations_map+0x18>
 8009236:	6806      	ldr	r6, [r0, #0]
 8009238:	429e      	cmp	r6, r3
 800923a:	d006      	beq.n	800924a <ai_platform_get_activations_map+0x46>
 800923c:	f1a1 0401 	sub.w	r4, r1, #1
 8009240:	6028      	str	r0, [r5, #0]
 8009242:	fab4 f484 	clz	r4, r4
 8009246:	0964      	lsrs	r4, r4, #5
 8009248:	e7e9      	b.n	800921e <ai_platform_get_activations_map+0x1a>
 800924a:	3d04      	subs	r5, #4
 800924c:	4602      	mov	r2, r0
 800924e:	4621      	mov	r1, r4
 8009250:	e000      	b.n	8009254 <ai_platform_get_activations_map+0x50>
 8009252:	4619      	mov	r1, r3
 8009254:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009258:	42b3      	cmp	r3, r6
 800925a:	d026      	beq.n	80092aa <ai_platform_get_activations_map+0xa6>
 800925c:	f845 3f04 	str.w	r3, [r5, #4]!
 8009260:	1c4b      	adds	r3, r1, #1
 8009262:	429f      	cmp	r7, r3
 8009264:	d8f5      	bhi.n	8009252 <ai_platform_get_activations_map+0x4e>
 8009266:	d1da      	bne.n	800921e <ai_platform_get_activations_map+0x1a>
 8009268:	3102      	adds	r1, #2
 800926a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800926e:	42b3      	cmp	r3, r6
 8009270:	d1d5      	bne.n	800921e <ai_platform_get_activations_map+0x1a>
 8009272:	2401      	movs	r4, #1
 8009274:	e7d3      	b.n	800921e <ai_platform_get_activations_map+0x1a>
 8009276:	f106 000c 	add.w	r0, r6, #12
 800927a:	f7ff ff5d 	bl	8009138 <ai_buffer_array_sane>
 800927e:	2800      	cmp	r0, #0
 8009280:	d0cc      	beq.n	800921c <ai_platform_get_activations_map+0x18>
 8009282:	89f3      	ldrh	r3, [r6, #14]
 8009284:	429f      	cmp	r7, r3
 8009286:	d1c9      	bne.n	800921c <ai_platform_get_activations_map+0x18>
 8009288:	3d04      	subs	r5, #4
 800928a:	4622      	mov	r2, r4
 800928c:	6933      	ldr	r3, [r6, #16]
 800928e:	4423      	add	r3, r4
 8009290:	341c      	adds	r4, #28
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	b123      	cbz	r3, 80092a0 <ai_platform_get_activations_map+0x9c>
 8009296:	3201      	adds	r2, #1
 8009298:	f845 3f04 	str.w	r3, [r5, #4]!
 800929c:	4297      	cmp	r7, r2
 800929e:	d8f5      	bhi.n	800928c <ai_platform_get_activations_map+0x88>
 80092a0:	1abc      	subs	r4, r7, r2
 80092a2:	fab4 f484 	clz	r4, r4
 80092a6:	0964      	lsrs	r4, r4, #5
 80092a8:	e7b9      	b.n	800921e <ai_platform_get_activations_map+0x1a>
 80092aa:	428f      	cmp	r7, r1
 80092ac:	d1b7      	bne.n	800921e <ai_platform_get_activations_map+0x1a>
 80092ae:	e7e0      	b.n	8009272 <ai_platform_get_activations_map+0x6e>
 80092b0:	a1facade 	.word	0xa1facade

080092b4 <ai_platform_network_set_error>:
 80092b4:	b110      	cbz	r0, 80092bc <ai_platform_network_set_error+0x8>
 80092b6:	3010      	adds	r0, #16
 80092b8:	f001 b82a 	b.w	800a310 <core_set_error>
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop

080092c0 <ai_platform_network_create>:
 80092c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c4:	b083      	sub	sp, #12
 80092c6:	4604      	mov	r4, r0
 80092c8:	4615      	mov	r5, r2
 80092ca:	461e      	mov	r6, r3
 80092cc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80092d0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80092d4:	f7ff ff3a 	bl	800914c <_ai_platform_acquire_crc>
 80092d8:	2800      	cmp	r0, #0
 80092da:	f000 80ba 	beq.w	8009452 <ai_platform_network_create+0x192>
 80092de:	4bb3      	ldr	r3, [pc, #716]	; (80095ac <ai_platform_network_create+0x2ec>)
 80092e0:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80092e4:	4601      	mov	r1, r0
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ec:	eb03 020c 	add.w	r2, r3, ip
 80092f0:	2a01      	cmp	r2, #1
 80092f2:	f240 80a5 	bls.w	8009440 <ai_platform_network_create+0x180>
 80092f6:	f240 4249 	movw	r2, #1097	; 0x449
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f000 80a0 	beq.w	8009440 <ai_platform_network_create+0x180>
 8009300:	4aab      	ldr	r2, [pc, #684]	; (80095b0 <ai_platform_network_create+0x2f0>)
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009308:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800930c:	f000 80b7 	beq.w	800947e <ai_platform_network_create+0x1be>
 8009310:	6813      	ldr	r3, [r2, #0]
 8009312:	f240 4c83 	movw	ip, #1155	; 0x483
 8009316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800931a:	4563      	cmp	r3, ip
 800931c:	f000 809f 	beq.w	800945e <ai_platform_network_create+0x19e>
 8009320:	6813      	ldr	r3, [r2, #0]
 8009322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009326:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800932a:	f040 8090 	bne.w	800944e <ai_platform_network_create+0x18e>
 800932e:	4ba1      	ldr	r3, [pc, #644]	; (80095b4 <ai_platform_network_create+0x2f4>)
 8009330:	2218      	movs	r2, #24
 8009332:	609a      	str	r2, [r3, #8]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	2a18      	cmp	r2, #24
 8009338:	f040 8089 	bne.w	800944e <ai_platform_network_create+0x18e>
 800933c:	2201      	movs	r2, #1
 800933e:	609a      	str	r2, [r3, #8]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	2a00      	cmp	r2, #0
 8009344:	d1fc      	bne.n	8009340 <ai_platform_network_create+0x80>
 8009346:	4608      	mov	r0, r1
 8009348:	f7ff ff02 	bl	8009150 <_ai_platform_release_crc>
 800934c:	4a9a      	ldr	r2, [pc, #616]	; (80095b8 <ai_platform_network_create+0x2f8>)
 800934e:	6813      	ldr	r3, [r2, #0]
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	f7ff fef9 	bl	800914c <_ai_platform_acquire_crc>
 800935a:	4b94      	ldr	r3, [pc, #592]	; (80095ac <ai_platform_network_create+0x2ec>)
 800935c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009366:	189a      	adds	r2, r3, r2
 8009368:	2a01      	cmp	r2, #1
 800936a:	f240 809e 	bls.w	80094aa <ai_platform_network_create+0x1ea>
 800936e:	f240 4249 	movw	r2, #1097	; 0x449
 8009372:	4293      	cmp	r3, r2
 8009374:	f000 8099 	beq.w	80094aa <ai_platform_network_create+0x1ea>
 8009378:	4a8d      	ldr	r2, [pc, #564]	; (80095b0 <ai_platform_network_create+0x2f0>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009380:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009384:	f000 809f 	beq.w	80094c6 <ai_platform_network_create+0x206>
 8009388:	6813      	ldr	r3, [r2, #0]
 800938a:	f240 4183 	movw	r1, #1155	; 0x483
 800938e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009392:	428b      	cmp	r3, r1
 8009394:	f000 80c0 	beq.w	8009518 <ai_platform_network_create+0x258>
 8009398:	6813      	ldr	r3, [r2, #0]
 800939a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800939e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80093a2:	f000 80d9 	beq.w	8009558 <ai_platform_network_create+0x298>
 80093a6:	f7ff fed3 	bl	8009150 <_ai_platform_release_crc>
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	f000 80b1 	beq.w	8009512 <ai_platform_network_create+0x252>
 80093b0:	4b82      	ldr	r3, [pc, #520]	; (80095bc <ai_platform_network_create+0x2fc>)
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	6025      	str	r5, [r4, #0]
 80093b6:	f000 ffa9 	bl	800a30c <core_init>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	f000 8095 	beq.w	80094ea <ai_platform_network_create+0x22a>
 80093c0:	4a7d      	ldr	r2, [pc, #500]	; (80095b8 <ai_platform_network_create+0x2f8>)
 80093c2:	6813      	ldr	r3, [r2, #0]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	f7ff febf 	bl	800914c <_ai_platform_acquire_crc>
 80093ce:	4b77      	ldr	r3, [pc, #476]	; (80095ac <ai_platform_network_create+0x2ec>)
 80093d0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093da:	185a      	adds	r2, r3, r1
 80093dc:	2a01      	cmp	r2, #1
 80093de:	f240 80ad 	bls.w	800953c <ai_platform_network_create+0x27c>
 80093e2:	f240 4249 	movw	r2, #1097	; 0x449
 80093e6:	4293      	cmp	r3, r2
 80093e8:	f000 80a8 	beq.w	800953c <ai_platform_network_create+0x27c>
 80093ec:	4a70      	ldr	r2, [pc, #448]	; (80095b0 <ai_platform_network_create+0x2f0>)
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093f4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80093f8:	f000 80bc 	beq.w	8009574 <ai_platform_network_create+0x2b4>
 80093fc:	6813      	ldr	r3, [r2, #0]
 80093fe:	f240 4183 	movw	r1, #1155	; 0x483
 8009402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009406:	428b      	cmp	r3, r1
 8009408:	f000 80e2 	beq.w	80095d0 <ai_platform_network_create+0x310>
 800940c:	6813      	ldr	r3, [r2, #0]
 800940e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009412:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009416:	f000 80ed 	beq.w	80095f4 <ai_platform_network_create+0x334>
 800941a:	f7ff fe99 	bl	8009150 <_ai_platform_release_crc>
 800941e:	2200      	movs	r2, #0
 8009420:	4639      	mov	r1, r7
 8009422:	4630      	mov	r0, r6
 8009424:	f00a fd1c 	bl	8013e60 <ai_version_get>
 8009428:	4681      	mov	r9, r0
 800942a:	2200      	movs	r2, #0
 800942c:	2105      	movs	r1, #5
 800942e:	2001      	movs	r0, #1
 8009430:	f00a fd16 	bl	8013e60 <ai_version_get>
 8009434:	4581      	cmp	r9, r0
 8009436:	f000 80af 	beq.w	8009598 <ai_platform_network_create+0x2d8>
 800943a:	f04f 0901 	mov.w	r9, #1
 800943e:	e056      	b.n	80094ee <ai_platform_network_create+0x22e>
 8009440:	4b5c      	ldr	r3, [pc, #368]	; (80095b4 <ai_platform_network_create+0x2f4>)
 8009442:	2218      	movs	r2, #24
 8009444:	609a      	str	r2, [r3, #8]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	2a18      	cmp	r2, #24
 800944a:	d028      	beq.n	800949e <ai_platform_network_create+0x1de>
 800944c:	4608      	mov	r0, r1
 800944e:	f7ff fe7f 	bl	8009150 <_ai_platform_release_crc>
 8009452:	f244 1333 	movw	r3, #16691	; 0x4133
 8009456:	4618      	mov	r0, r3
 8009458:	b003      	add	sp, #12
 800945a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800945e:	4a58      	ldr	r2, [pc, #352]	; (80095c0 <ai_platform_network_create+0x300>)
 8009460:	2318      	movs	r3, #24
 8009462:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009466:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800946a:	2b18      	cmp	r3, #24
 800946c:	d1ef      	bne.n	800944e <ai_platform_network_create+0x18e>
 800946e:	2301      	movs	r3, #1
 8009470:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009474:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1fb      	bne.n	8009474 <ai_platform_network_create+0x1b4>
 800947c:	e763      	b.n	8009346 <ai_platform_network_create+0x86>
 800947e:	4a50      	ldr	r2, [pc, #320]	; (80095c0 <ai_platform_network_create+0x300>)
 8009480:	2318      	movs	r3, #24
 8009482:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009486:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800948a:	2b18      	cmp	r3, #24
 800948c:	d1df      	bne.n	800944e <ai_platform_network_create+0x18e>
 800948e:	2301      	movs	r3, #1
 8009490:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009494:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1fb      	bne.n	8009494 <ai_platform_network_create+0x1d4>
 800949c:	e753      	b.n	8009346 <ai_platform_network_create+0x86>
 800949e:	2201      	movs	r2, #1
 80094a0:	609a      	str	r2, [r3, #8]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d1fc      	bne.n	80094a2 <ai_platform_network_create+0x1e2>
 80094a8:	e74d      	b.n	8009346 <ai_platform_network_create+0x86>
 80094aa:	4a42      	ldr	r2, [pc, #264]	; (80095b4 <ai_platform_network_create+0x2f4>)
 80094ac:	2301      	movs	r3, #1
 80094ae:	6093      	str	r3, [r2, #8]
 80094b0:	6891      	ldr	r1, [r2, #8]
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d1fc      	bne.n	80094b0 <ai_platform_network_create+0x1f0>
 80094b6:	4b43      	ldr	r3, [pc, #268]	; (80095c4 <ai_platform_network_create+0x304>)
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	4b43      	ldr	r3, [pc, #268]	; (80095c8 <ai_platform_network_create+0x308>)
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	f43f af71 	beq.w	80093a6 <ai_platform_network_create+0xe6>
 80094c4:	e7fe      	b.n	80094c4 <ai_platform_network_create+0x204>
 80094c6:	4a3e      	ldr	r2, [pc, #248]	; (80095c0 <ai_platform_network_create+0x300>)
 80094c8:	2301      	movs	r3, #1
 80094ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80094ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1fb      	bne.n	80094ce <ai_platform_network_create+0x20e>
 80094d6:	4b3b      	ldr	r3, [pc, #236]	; (80095c4 <ai_platform_network_create+0x304>)
 80094d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80094dc:	4b3a      	ldr	r3, [pc, #232]	; (80095c8 <ai_platform_network_create+0x308>)
 80094de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f43f af5f 	beq.w	80093a6 <ai_platform_network_create+0xe6>
 80094e8:	e7fe      	b.n	80094e8 <ai_platform_network_create+0x228>
 80094ea:	f04f 0930 	mov.w	r9, #48	; 0x30
 80094ee:	2300      	movs	r3, #0
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	2410      	movs	r4, #16
 80094f4:	4642      	mov	r2, r8
 80094f6:	4639      	mov	r1, r7
 80094f8:	4630      	mov	r0, r6
 80094fa:	f00a fcb1 	bl	8013e60 <ai_version_get>
 80094fe:	2300      	movs	r3, #0
 8009500:	64a8      	str	r0, [r5, #72]	; 0x48
 8009502:	f369 0307 	bfi	r3, r9, #0, #8
 8009506:	f364 231f 	bfi	r3, r4, #8, #24
 800950a:	4618      	mov	r0, r3
 800950c:	b003      	add	sp, #12
 800950e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009512:	f241 0310 	movw	r3, #4112	; 0x1010
 8009516:	e79e      	b.n	8009456 <ai_platform_network_create+0x196>
 8009518:	4a29      	ldr	r2, [pc, #164]	; (80095c0 <ai_platform_network_create+0x300>)
 800951a:	2301      	movs	r3, #1
 800951c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009520:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1fb      	bne.n	8009520 <ai_platform_network_create+0x260>
 8009528:	4b26      	ldr	r3, [pc, #152]	; (80095c4 <ai_platform_network_create+0x304>)
 800952a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <ai_platform_network_create+0x308>)
 8009530:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009534:	429a      	cmp	r2, r3
 8009536:	f43f af36 	beq.w	80093a6 <ai_platform_network_create+0xe6>
 800953a:	e7fe      	b.n	800953a <ai_platform_network_create+0x27a>
 800953c:	4a1d      	ldr	r2, [pc, #116]	; (80095b4 <ai_platform_network_create+0x2f4>)
 800953e:	2301      	movs	r3, #1
 8009540:	6093      	str	r3, [r2, #8]
 8009542:	6893      	ldr	r3, [r2, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1fc      	bne.n	8009542 <ai_platform_network_create+0x282>
 8009548:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <ai_platform_network_create+0x304>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4b1e      	ldr	r3, [pc, #120]	; (80095c8 <ai_platform_network_create+0x308>)
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	f43f af62 	beq.w	800941a <ai_platform_network_create+0x15a>
 8009556:	e7fe      	b.n	8009556 <ai_platform_network_create+0x296>
 8009558:	4a16      	ldr	r2, [pc, #88]	; (80095b4 <ai_platform_network_create+0x2f4>)
 800955a:	2301      	movs	r3, #1
 800955c:	6093      	str	r3, [r2, #8]
 800955e:	6893      	ldr	r3, [r2, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1fc      	bne.n	800955e <ai_platform_network_create+0x29e>
 8009564:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <ai_platform_network_create+0x304>)
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <ai_platform_network_create+0x308>)
 800956a:	6812      	ldr	r2, [r2, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	f43f af1a 	beq.w	80093a6 <ai_platform_network_create+0xe6>
 8009572:	e7fe      	b.n	8009572 <ai_platform_network_create+0x2b2>
 8009574:	4a12      	ldr	r2, [pc, #72]	; (80095c0 <ai_platform_network_create+0x300>)
 8009576:	2301      	movs	r3, #1
 8009578:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800957c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1fb      	bne.n	800957c <ai_platform_network_create+0x2bc>
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <ai_platform_network_create+0x304>)
 8009586:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800958a:	4b0f      	ldr	r3, [pc, #60]	; (80095c8 <ai_platform_network_create+0x308>)
 800958c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009590:	429a      	cmp	r2, r3
 8009592:	f43f af42 	beq.w	800941a <ai_platform_network_create+0x15a>
 8009596:	e7fe      	b.n	8009596 <ai_platform_network_create+0x2d6>
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <ai_platform_network_create+0x30c>)
 800959a:	a801      	add	r0, sp, #4
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f002 fc7f 	bl	800bea0 <ai_check_custom_types>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d034      	beq.n	8009610 <ai_platform_network_create+0x350>
 80095a6:	2400      	movs	r4, #0
 80095a8:	46a1      	mov	r9, r4
 80095aa:	e7a3      	b.n	80094f4 <ai_platform_network_create+0x234>
 80095ac:	e0042000 	.word	0xe0042000
 80095b0:	5c001000 	.word	0x5c001000
 80095b4:	40023000 	.word	0x40023000
 80095b8:	e0002000 	.word	0xe0002000
 80095bc:	a1c00100 	.word	0xa1c00100
 80095c0:	58024000 	.word	0x58024000
 80095c4:	f407a5c2 	.word	0xf407a5c2
 80095c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80095cc:	84048403 	.word	0x84048403
 80095d0:	4b11      	ldr	r3, [pc, #68]	; (8009618 <ai_platform_network_create+0x358>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80095d8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80095dc:	2a00      	cmp	r2, #0
 80095de:	d1fb      	bne.n	80095d8 <ai_platform_network_create+0x318>
 80095e0:	4a0e      	ldr	r2, [pc, #56]	; (800961c <ai_platform_network_create+0x35c>)
 80095e2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80095e6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <ai_platform_network_create+0x360>)
 80095ec:	429a      	cmp	r2, r3
 80095ee:	f43f af14 	beq.w	800941a <ai_platform_network_create+0x15a>
 80095f2:	e7fe      	b.n	80095f2 <ai_platform_network_create+0x332>
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <ai_platform_network_create+0x364>)
 80095f6:	2201      	movs	r2, #1
 80095f8:	609a      	str	r2, [r3, #8]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d1fc      	bne.n	80095fa <ai_platform_network_create+0x33a>
 8009600:	4a06      	ldr	r2, [pc, #24]	; (800961c <ai_platform_network_create+0x35c>)
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <ai_platform_network_create+0x360>)
 8009608:	429a      	cmp	r2, r3
 800960a:	f43f af06 	beq.w	800941a <ai_platform_network_create+0x15a>
 800960e:	e7fe      	b.n	800960e <ai_platform_network_create+0x34e>
 8009610:	f04f 0902 	mov.w	r9, #2
 8009614:	e76b      	b.n	80094ee <ai_platform_network_create+0x22e>
 8009616:	bf00      	nop
 8009618:	58024000 	.word	0x58024000
 800961c:	f407a5c2 	.word	0xf407a5c2
 8009620:	b5e8b5cd 	.word	0xb5e8b5cd
 8009624:	40023000 	.word	0x40023000

08009628 <ai_platform_network_init>:
 8009628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800962c:	2800      	cmp	r0, #0
 800962e:	d04f      	beq.n	80096d0 <ai_platform_network_init+0xa8>
 8009630:	4bad      	ldr	r3, [pc, #692]	; (80098e8 <ai_platform_network_init+0x2c0>)
 8009632:	4604      	mov	r4, r0
 8009634:	6802      	ldr	r2, [r0, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d14a      	bne.n	80096d0 <ai_platform_network_init+0xa8>
 800963a:	4aac      	ldr	r2, [pc, #688]	; (80098ec <ai_platform_network_init+0x2c4>)
 800963c:	460d      	mov	r5, r1
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	f7ff fd81 	bl	800914c <_ai_platform_acquire_crc>
 800964a:	4ba9      	ldr	r3, [pc, #676]	; (80098f0 <ai_platform_network_init+0x2c8>)
 800964c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009656:	189a      	adds	r2, r3, r2
 8009658:	2a01      	cmp	r2, #1
 800965a:	d975      	bls.n	8009748 <ai_platform_network_init+0x120>
 800965c:	f240 4249 	movw	r2, #1097	; 0x449
 8009660:	4293      	cmp	r3, r2
 8009662:	d071      	beq.n	8009748 <ai_platform_network_init+0x120>
 8009664:	4aa3      	ldr	r2, [pc, #652]	; (80098f4 <ai_platform_network_init+0x2cc>)
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800966c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009670:	f000 8088 	beq.w	8009784 <ai_platform_network_init+0x15c>
 8009674:	6813      	ldr	r3, [r2, #0]
 8009676:	f240 4183 	movw	r1, #1155	; 0x483
 800967a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800967e:	428b      	cmp	r3, r1
 8009680:	f000 80cc 	beq.w	800981c <ai_platform_network_init+0x1f4>
 8009684:	6813      	ldr	r3, [r2, #0]
 8009686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800968a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800968e:	f000 80f5 	beq.w	800987c <ai_platform_network_init+0x254>
 8009692:	f7ff fd5d 	bl	8009150 <_ai_platform_release_crc>
 8009696:	2d00      	cmp	r5, #0
 8009698:	f000 80fe 	beq.w	8009898 <ai_platform_network_init+0x270>
 800969c:	4b96      	ldr	r3, [pc, #600]	; (80098f8 <ai_platform_network_init+0x2d0>)
 800969e:	682a      	ldr	r2, [r5, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	f040 8081 	bne.w	80097a8 <ai_platform_network_init+0x180>
 80096a6:	692b      	ldr	r3, [r5, #16]
 80096a8:	89ae      	ldrh	r6, [r5, #12]
 80096aa:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80096ae:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80096b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80096b4:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80096b8:	2303      	movs	r3, #3
 80096ba:	84a6      	strh	r6, [r4, #36]	; 0x24
 80096bc:	4626      	mov	r6, r4
 80096be:	4620      	mov	r0, r4
 80096c0:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 80096c4:	60e3      	str	r3, [r4, #12]
 80096c6:	f002 fc13 	bl	800bef0 <ai_layers_init_all>
 80096ca:	4630      	mov	r0, r6
 80096cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d0:	4a86      	ldr	r2, [pc, #536]	; (80098ec <ai_platform_network_init+0x2c4>)
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	f7ff fd37 	bl	800914c <_ai_platform_acquire_crc>
 80096de:	4b84      	ldr	r3, [pc, #528]	; (80098f0 <ai_platform_network_init+0x2c8>)
 80096e0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096ea:	185a      	adds	r2, r3, r1
 80096ec:	2a01      	cmp	r2, #1
 80096ee:	d91e      	bls.n	800972e <ai_platform_network_init+0x106>
 80096f0:	f240 4249 	movw	r2, #1097	; 0x449
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d01a      	beq.n	800972e <ai_platform_network_init+0x106>
 80096f8:	4a7e      	ldr	r2, [pc, #504]	; (80098f4 <ai_platform_network_init+0x2cc>)
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009700:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009704:	d02d      	beq.n	8009762 <ai_platform_network_init+0x13a>
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	f240 4183 	movw	r1, #1155	; 0x483
 800970c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009710:	428b      	cmp	r3, r1
 8009712:	d072      	beq.n	80097fa <ai_platform_network_init+0x1d2>
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800971a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800971e:	f000 809f 	beq.w	8009860 <ai_platform_network_init+0x238>
 8009722:	2600      	movs	r6, #0
 8009724:	f7ff fd14 	bl	8009150 <_ai_platform_release_crc>
 8009728:	4630      	mov	r0, r6
 800972a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800972e:	4a73      	ldr	r2, [pc, #460]	; (80098fc <ai_platform_network_init+0x2d4>)
 8009730:	2301      	movs	r3, #1
 8009732:	6093      	str	r3, [r2, #8]
 8009734:	6893      	ldr	r3, [r2, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1fc      	bne.n	8009734 <ai_platform_network_init+0x10c>
 800973a:	4971      	ldr	r1, [pc, #452]	; (8009900 <ai_platform_network_init+0x2d8>)
 800973c:	4b71      	ldr	r3, [pc, #452]	; (8009904 <ai_platform_network_init+0x2dc>)
 800973e:	6011      	str	r1, [r2, #0]
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d0ed      	beq.n	8009722 <ai_platform_network_init+0xfa>
 8009746:	e7fe      	b.n	8009746 <ai_platform_network_init+0x11e>
 8009748:	4a6c      	ldr	r2, [pc, #432]	; (80098fc <ai_platform_network_init+0x2d4>)
 800974a:	2301      	movs	r3, #1
 800974c:	6093      	str	r3, [r2, #8]
 800974e:	6893      	ldr	r3, [r2, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1fc      	bne.n	800974e <ai_platform_network_init+0x126>
 8009754:	4b6a      	ldr	r3, [pc, #424]	; (8009900 <ai_platform_network_init+0x2d8>)
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b6a      	ldr	r3, [pc, #424]	; (8009904 <ai_platform_network_init+0x2dc>)
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d098      	beq.n	8009692 <ai_platform_network_init+0x6a>
 8009760:	e7fe      	b.n	8009760 <ai_platform_network_init+0x138>
 8009762:	4a69      	ldr	r2, [pc, #420]	; (8009908 <ai_platform_network_init+0x2e0>)
 8009764:	2301      	movs	r3, #1
 8009766:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800976a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1fb      	bne.n	800976a <ai_platform_network_init+0x142>
 8009772:	4963      	ldr	r1, [pc, #396]	; (8009900 <ai_platform_network_init+0x2d8>)
 8009774:	4b63      	ldr	r3, [pc, #396]	; (8009904 <ai_platform_network_init+0x2dc>)
 8009776:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800977a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800977e:	429a      	cmp	r2, r3
 8009780:	d0cf      	beq.n	8009722 <ai_platform_network_init+0xfa>
 8009782:	e7fe      	b.n	8009782 <ai_platform_network_init+0x15a>
 8009784:	4a60      	ldr	r2, [pc, #384]	; (8009908 <ai_platform_network_init+0x2e0>)
 8009786:	2301      	movs	r3, #1
 8009788:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800978c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1fb      	bne.n	800978c <ai_platform_network_init+0x164>
 8009794:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <ai_platform_network_init+0x2d8>)
 8009796:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800979a:	4b5a      	ldr	r3, [pc, #360]	; (8009904 <ai_platform_network_init+0x2dc>)
 800979c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097a0:	429a      	cmp	r2, r3
 80097a2:	f43f af76 	beq.w	8009692 <ai_platform_network_init+0x6a>
 80097a6:	e7fe      	b.n	80097a6 <ai_platform_network_init+0x17e>
 80097a8:	2101      	movs	r1, #1
 80097aa:	4628      	mov	r0, r5
 80097ac:	f105 081c 	add.w	r8, r5, #28
 80097b0:	686e      	ldr	r6, [r5, #4]
 80097b2:	f7ff fc8d 	bl	80090d0 <ai_buffer_get_size>
 80097b6:	4607      	mov	r7, r0
 80097b8:	2101      	movs	r1, #1
 80097ba:	4640      	mov	r0, r8
 80097bc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80097c0:	f7ff fc86 	bl	80090d0 <ai_buffer_get_size>
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	d13b      	bne.n	8009840 <ai_platform_network_init+0x218>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d079      	beq.n	80098c0 <ai_platform_network_init+0x298>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	d07a      	beq.n	80098c8 <ai_platform_network_init+0x2a0>
 80097d2:	f04f 0c01 	mov.w	ip, #1
 80097d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80097d8:	2600      	movs	r6, #0
 80097da:	83e7      	strh	r7, [r4, #30]
 80097dc:	4563      	cmp	r3, ip
 80097de:	83a6      	strh	r6, [r4, #28]
 80097e0:	d361      	bcc.n	80098a6 <ai_platform_network_init+0x27e>
 80097e2:	f1bc 0f00 	cmp.w	ip, #0
 80097e6:	d07c      	beq.n	80098e2 <ai_platform_network_init+0x2ba>
 80097e8:	4647      	mov	r7, r8
 80097ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80097ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80097ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097f0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80097f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80097f8:	e75e      	b.n	80096b8 <ai_platform_network_init+0x90>
 80097fa:	4a43      	ldr	r2, [pc, #268]	; (8009908 <ai_platform_network_init+0x2e0>)
 80097fc:	2301      	movs	r3, #1
 80097fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009802:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1fb      	bne.n	8009802 <ai_platform_network_init+0x1da>
 800980a:	493d      	ldr	r1, [pc, #244]	; (8009900 <ai_platform_network_init+0x2d8>)
 800980c:	4b3d      	ldr	r3, [pc, #244]	; (8009904 <ai_platform_network_init+0x2dc>)
 800980e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009812:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009816:	429a      	cmp	r2, r3
 8009818:	d083      	beq.n	8009722 <ai_platform_network_init+0xfa>
 800981a:	e7fe      	b.n	800981a <ai_platform_network_init+0x1f2>
 800981c:	4a3a      	ldr	r2, [pc, #232]	; (8009908 <ai_platform_network_init+0x2e0>)
 800981e:	2301      	movs	r3, #1
 8009820:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009824:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1fb      	bne.n	8009824 <ai_platform_network_init+0x1fc>
 800982c:	4b34      	ldr	r3, [pc, #208]	; (8009900 <ai_platform_network_init+0x2d8>)
 800982e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009832:	4b34      	ldr	r3, [pc, #208]	; (8009904 <ai_platform_network_init+0x2dc>)
 8009834:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009838:	429a      	cmp	r2, r3
 800983a:	f43f af2a 	beq.w	8009692 <ai_platform_network_init+0x6a>
 800983e:	e7fe      	b.n	800983e <ai_platform_network_init+0x216>
 8009840:	2800      	cmp	r0, #0
 8009842:	d137      	bne.n	80098b4 <ai_platform_network_init+0x28c>
 8009844:	4680      	mov	r8, r0
 8009846:	4684      	mov	ip, r0
 8009848:	2e00      	cmp	r6, #0
 800984a:	d044      	beq.n	80098d6 <ai_platform_network_init+0x2ae>
 800984c:	8be6      	ldrh	r6, [r4, #30]
 800984e:	2e00      	cmp	r6, #0
 8009850:	d15c      	bne.n	800990c <ai_platform_network_init+0x2e4>
 8009852:	2212      	movs	r2, #18
 8009854:	2116      	movs	r1, #22
 8009856:	f104 0010 	add.w	r0, r4, #16
 800985a:	f000 fd59 	bl	800a310 <core_set_error>
 800985e:	e763      	b.n	8009728 <ai_platform_network_init+0x100>
 8009860:	4a26      	ldr	r2, [pc, #152]	; (80098fc <ai_platform_network_init+0x2d4>)
 8009862:	2301      	movs	r3, #1
 8009864:	6093      	str	r3, [r2, #8]
 8009866:	6893      	ldr	r3, [r2, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1fc      	bne.n	8009866 <ai_platform_network_init+0x23e>
 800986c:	4924      	ldr	r1, [pc, #144]	; (8009900 <ai_platform_network_init+0x2d8>)
 800986e:	4b25      	ldr	r3, [pc, #148]	; (8009904 <ai_platform_network_init+0x2dc>)
 8009870:	6011      	str	r1, [r2, #0]
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	f43f af54 	beq.w	8009722 <ai_platform_network_init+0xfa>
 800987a:	e7fe      	b.n	800987a <ai_platform_network_init+0x252>
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <ai_platform_network_init+0x2d4>)
 800987e:	2301      	movs	r3, #1
 8009880:	6093      	str	r3, [r2, #8]
 8009882:	6893      	ldr	r3, [r2, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1fc      	bne.n	8009882 <ai_platform_network_init+0x25a>
 8009888:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <ai_platform_network_init+0x2d8>)
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <ai_platform_network_init+0x2dc>)
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	f43f aefe 	beq.w	8009692 <ai_platform_network_init+0x6a>
 8009896:	e7fe      	b.n	8009896 <ai_platform_network_init+0x26e>
 8009898:	2110      	movs	r1, #16
 800989a:	2211      	movs	r2, #17
 800989c:	462e      	mov	r6, r5
 800989e:	1860      	adds	r0, r4, r1
 80098a0:	f000 fd36 	bl	800a310 <core_set_error>
 80098a4:	e740      	b.n	8009728 <ai_platform_network_init+0x100>
 80098a6:	2213      	movs	r2, #19
 80098a8:	2116      	movs	r1, #22
 80098aa:	f104 0010 	add.w	r0, r4, #16
 80098ae:	f000 fd2f 	bl	800a310 <core_set_error>
 80098b2:	e739      	b.n	8009728 <ai_platform_network_init+0x100>
 80098b4:	f1b9 0f00 	cmp.w	r9, #0
 80098b8:	d006      	beq.n	80098c8 <ai_platform_network_init+0x2a0>
 80098ba:	f04f 0c01 	mov.w	ip, #1
 80098be:	e7c3      	b.n	8009848 <ai_platform_network_init+0x220>
 80098c0:	4607      	mov	r7, r0
 80098c2:	4680      	mov	r8, r0
 80098c4:	4684      	mov	ip, r0
 80098c6:	e786      	b.n	80097d6 <ai_platform_network_init+0x1ae>
 80098c8:	2110      	movs	r1, #16
 80098ca:	2213      	movs	r2, #19
 80098cc:	2600      	movs	r6, #0
 80098ce:	1860      	adds	r0, r4, r1
 80098d0:	f000 fd1e 	bl	800a310 <core_set_error>
 80098d4:	e728      	b.n	8009728 <ai_platform_network_init+0x100>
 80098d6:	2110      	movs	r1, #16
 80098d8:	2212      	movs	r2, #18
 80098da:	1860      	adds	r0, r4, r1
 80098dc:	f000 fd18 	bl	800a310 <core_set_error>
 80098e0:	e722      	b.n	8009728 <ai_platform_network_init+0x100>
 80098e2:	4666      	mov	r6, ip
 80098e4:	e6e8      	b.n	80096b8 <ai_platform_network_init+0x90>
 80098e6:	bf00      	nop
 80098e8:	a1c00100 	.word	0xa1c00100
 80098ec:	e0002000 	.word	0xe0002000
 80098f0:	e0042000 	.word	0xe0042000
 80098f4:	5c001000 	.word	0x5c001000
 80098f8:	a1facade 	.word	0xa1facade
 80098fc:	40023000 	.word	0x40023000
 8009900:	f407a5c2 	.word	0xf407a5c2
 8009904:	b5e8b5cd 	.word	0xb5e8b5cd
 8009908:	58024000 	.word	0x58024000
 800990c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800990e:	6a26      	ldr	r6, [r4, #32]
 8009910:	2701      	movs	r7, #1
 8009912:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009918:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800991c:	e75b      	b.n	80097d6 <ai_platform_network_init+0x1ae>
 800991e:	bf00      	nop

08009920 <ai_platform_network_post_init>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	2800      	cmp	r0, #0
 8009924:	d04a      	beq.n	80099bc <ai_platform_network_post_init+0x9c>
 8009926:	4b7c      	ldr	r3, [pc, #496]	; (8009b18 <ai_platform_network_post_init+0x1f8>)
 8009928:	4604      	mov	r4, r0
 800992a:	6802      	ldr	r2, [r0, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d145      	bne.n	80099bc <ai_platform_network_post_init+0x9c>
 8009930:	4a7a      	ldr	r2, [pc, #488]	; (8009b1c <ai_platform_network_post_init+0x1fc>)
 8009932:	6813      	ldr	r3, [r2, #0]
 8009934:	f023 0301 	bic.w	r3, r3, #1
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	f7ff fc07 	bl	800914c <_ai_platform_acquire_crc>
 800993e:	4b78      	ldr	r3, [pc, #480]	; (8009b20 <ai_platform_network_post_init+0x200>)
 8009940:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800994a:	189a      	adds	r2, r3, r2
 800994c:	2a01      	cmp	r2, #1
 800994e:	d96e      	bls.n	8009a2e <ai_platform_network_post_init+0x10e>
 8009950:	f240 4249 	movw	r2, #1097	; 0x449
 8009954:	4293      	cmp	r3, r2
 8009956:	d06a      	beq.n	8009a2e <ai_platform_network_post_init+0x10e>
 8009958:	4a72      	ldr	r2, [pc, #456]	; (8009b24 <ai_platform_network_post_init+0x204>)
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009960:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009964:	f000 8081 	beq.w	8009a6a <ai_platform_network_post_init+0x14a>
 8009968:	6813      	ldr	r3, [r2, #0]
 800996a:	f240 4183 	movw	r1, #1155	; 0x483
 800996e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009972:	428b      	cmp	r3, r1
 8009974:	f000 80a3 	beq.w	8009abe <ai_platform_network_post_init+0x19e>
 8009978:	6813      	ldr	r3, [r2, #0]
 800997a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800997e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009982:	f000 80bb 	beq.w	8009afc <ai_platform_network_post_init+0x1dc>
 8009986:	f7ff fbe3 	bl	8009150 <_ai_platform_release_crc>
 800998a:	68e3      	ldr	r3, [r4, #12]
 800998c:	f013 0502 	ands.w	r5, r3, #2
 8009990:	d07d      	beq.n	8009a8e <ai_platform_network_post_init+0x16e>
 8009992:	4620      	mov	r0, r4
 8009994:	f002 faba 	bl	800bf0c <ai_layers_post_init_all>
 8009998:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800999a:	b16b      	cbz	r3, 80099b8 <ai_platform_network_post_init+0x98>
 800999c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800999e:	e007      	b.n	80099b0 <ai_platform_network_post_init+0x90>
 80099a0:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80099a4:	4798      	blx	r3
 80099a6:	692b      	ldr	r3, [r5, #16]
 80099a8:	b133      	cbz	r3, 80099b8 <ai_platform_network_post_init+0x98>
 80099aa:	42ab      	cmp	r3, r5
 80099ac:	461d      	mov	r5, r3
 80099ae:	d003      	beq.n	80099b8 <ai_platform_network_post_init+0x98>
 80099b0:	4629      	mov	r1, r5
 80099b2:	2000      	movs	r0, #0
 80099b4:	2d00      	cmp	r5, #0
 80099b6:	d1f3      	bne.n	80099a0 <ai_platform_network_post_init+0x80>
 80099b8:	2001      	movs	r0, #1
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	4a57      	ldr	r2, [pc, #348]	; (8009b1c <ai_platform_network_post_init+0x1fc>)
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	f023 0301 	bic.w	r3, r3, #1
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	f7ff fbc1 	bl	800914c <_ai_platform_acquire_crc>
 80099ca:	4b55      	ldr	r3, [pc, #340]	; (8009b20 <ai_platform_network_post_init+0x200>)
 80099cc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099d6:	185a      	adds	r2, r3, r1
 80099d8:	2a01      	cmp	r2, #1
 80099da:	d91b      	bls.n	8009a14 <ai_platform_network_post_init+0xf4>
 80099dc:	f240 4249 	movw	r2, #1097	; 0x449
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d017      	beq.n	8009a14 <ai_platform_network_post_init+0xf4>
 80099e4:	4a4f      	ldr	r2, [pc, #316]	; (8009b24 <ai_platform_network_post_init+0x204>)
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80099f0:	d02a      	beq.n	8009a48 <ai_platform_network_post_init+0x128>
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	f240 4183 	movw	r1, #1155	; 0x483
 80099f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099fc:	428b      	cmp	r3, r1
 80099fe:	d04d      	beq.n	8009a9c <ai_platform_network_post_init+0x17c>
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a06:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009a0a:	d06a      	beq.n	8009ae2 <ai_platform_network_post_init+0x1c2>
 8009a0c:	f7ff fba0 	bl	8009150 <_ai_platform_release_crc>
 8009a10:	2000      	movs	r0, #0
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	4a44      	ldr	r2, [pc, #272]	; (8009b28 <ai_platform_network_post_init+0x208>)
 8009a16:	2301      	movs	r3, #1
 8009a18:	6093      	str	r3, [r2, #8]
 8009a1a:	6893      	ldr	r3, [r2, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1fc      	bne.n	8009a1a <ai_platform_network_post_init+0xfa>
 8009a20:	4942      	ldr	r1, [pc, #264]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009a22:	4b43      	ldr	r3, [pc, #268]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009a24:	6011      	str	r1, [r2, #0]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d0ef      	beq.n	8009a0c <ai_platform_network_post_init+0xec>
 8009a2c:	e7fe      	b.n	8009a2c <ai_platform_network_post_init+0x10c>
 8009a2e:	4a3e      	ldr	r2, [pc, #248]	; (8009b28 <ai_platform_network_post_init+0x208>)
 8009a30:	2301      	movs	r3, #1
 8009a32:	6093      	str	r3, [r2, #8]
 8009a34:	6893      	ldr	r3, [r2, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1fc      	bne.n	8009a34 <ai_platform_network_post_init+0x114>
 8009a3a:	493c      	ldr	r1, [pc, #240]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009a3c:	4b3c      	ldr	r3, [pc, #240]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009a3e:	6011      	str	r1, [r2, #0]
 8009a40:	6812      	ldr	r2, [r2, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d09f      	beq.n	8009986 <ai_platform_network_post_init+0x66>
 8009a46:	e7fe      	b.n	8009a46 <ai_platform_network_post_init+0x126>
 8009a48:	4a3a      	ldr	r2, [pc, #232]	; (8009b34 <ai_platform_network_post_init+0x214>)
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1fb      	bne.n	8009a50 <ai_platform_network_post_init+0x130>
 8009a58:	4934      	ldr	r1, [pc, #208]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009a5a:	4b35      	ldr	r3, [pc, #212]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009a5c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009a60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d0d1      	beq.n	8009a0c <ai_platform_network_post_init+0xec>
 8009a68:	e7fe      	b.n	8009a68 <ai_platform_network_post_init+0x148>
 8009a6a:	4a32      	ldr	r2, [pc, #200]	; (8009b34 <ai_platform_network_post_init+0x214>)
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a72:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1fb      	bne.n	8009a72 <ai_platform_network_post_init+0x152>
 8009a7a:	492c      	ldr	r1, [pc, #176]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009a7c:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009a7e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009a82:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a86:	429a      	cmp	r2, r3
 8009a88:	f43f af7d 	beq.w	8009986 <ai_platform_network_post_init+0x66>
 8009a8c:	e7fe      	b.n	8009a8c <ai_platform_network_post_init+0x16c>
 8009a8e:	2210      	movs	r2, #16
 8009a90:	2111      	movs	r1, #17
 8009a92:	18a0      	adds	r0, r4, r2
 8009a94:	f000 fc3c 	bl	800a310 <core_set_error>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	4a25      	ldr	r2, [pc, #148]	; (8009b34 <ai_platform_network_post_init+0x214>)
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009aa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1fb      	bne.n	8009aa4 <ai_platform_network_post_init+0x184>
 8009aac:	491f      	ldr	r1, [pc, #124]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009aae:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009ab0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009ab4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d0a7      	beq.n	8009a0c <ai_platform_network_post_init+0xec>
 8009abc:	e7fe      	b.n	8009abc <ai_platform_network_post_init+0x19c>
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <ai_platform_network_post_init+0x214>)
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ac6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1fb      	bne.n	8009ac6 <ai_platform_network_post_init+0x1a6>
 8009ace:	4917      	ldr	r1, [pc, #92]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009ad0:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009ad2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009ad6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009ada:	429a      	cmp	r2, r3
 8009adc:	f43f af53 	beq.w	8009986 <ai_platform_network_post_init+0x66>
 8009ae0:	e7fe      	b.n	8009ae0 <ai_platform_network_post_init+0x1c0>
 8009ae2:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <ai_platform_network_post_init+0x208>)
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	6093      	str	r3, [r2, #8]
 8009ae8:	6893      	ldr	r3, [r2, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1fc      	bne.n	8009ae8 <ai_platform_network_post_init+0x1c8>
 8009aee:	490f      	ldr	r1, [pc, #60]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009af0:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009af2:	6011      	str	r1, [r2, #0]
 8009af4:	6812      	ldr	r2, [r2, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d088      	beq.n	8009a0c <ai_platform_network_post_init+0xec>
 8009afa:	e7fe      	b.n	8009afa <ai_platform_network_post_init+0x1da>
 8009afc:	4a0a      	ldr	r2, [pc, #40]	; (8009b28 <ai_platform_network_post_init+0x208>)
 8009afe:	2301      	movs	r3, #1
 8009b00:	6093      	str	r3, [r2, #8]
 8009b02:	6893      	ldr	r3, [r2, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1fc      	bne.n	8009b02 <ai_platform_network_post_init+0x1e2>
 8009b08:	4908      	ldr	r1, [pc, #32]	; (8009b2c <ai_platform_network_post_init+0x20c>)
 8009b0a:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <ai_platform_network_post_init+0x210>)
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	f43f af38 	beq.w	8009986 <ai_platform_network_post_init+0x66>
 8009b16:	e7fe      	b.n	8009b16 <ai_platform_network_post_init+0x1f6>
 8009b18:	a1c00100 	.word	0xa1c00100
 8009b1c:	e0002000 	.word	0xe0002000
 8009b20:	e0042000 	.word	0xe0042000
 8009b24:	5c001000 	.word	0x5c001000
 8009b28:	40023000 	.word	0x40023000
 8009b2c:	f407a5c2 	.word	0xf407a5c2
 8009b30:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b34:	58024000 	.word	0x58024000

08009b38 <ai_platform_network_process>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	460e      	mov	r6, r1
 8009b40:	4605      	mov	r5, r0
 8009b42:	9202      	str	r2, [sp, #8]
 8009b44:	b120      	cbz	r0, 8009b50 <ai_platform_network_process+0x18>
 8009b46:	4bb5      	ldr	r3, [pc, #724]	; (8009e1c <ai_platform_network_process+0x2e4>)
 8009b48:	6802      	ldr	r2, [r0, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	bf18      	it	ne
 8009b4e:	2500      	movne	r5, #0
 8009b50:	4ab3      	ldr	r2, [pc, #716]	; (8009e20 <ai_platform_network_process+0x2e8>)
 8009b52:	6813      	ldr	r3, [r2, #0]
 8009b54:	f023 0301 	bic.w	r3, r3, #1
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	f7ff faf7 	bl	800914c <_ai_platform_acquire_crc>
 8009b5e:	4bb1      	ldr	r3, [pc, #708]	; (8009e24 <ai_platform_network_process+0x2ec>)
 8009b60:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b6a:	185a      	adds	r2, r3, r1
 8009b6c:	2a01      	cmp	r2, #1
 8009b6e:	f240 8147 	bls.w	8009e00 <ai_platform_network_process+0x2c8>
 8009b72:	f240 4249 	movw	r2, #1097	; 0x449
 8009b76:	4293      	cmp	r3, r2
 8009b78:	f000 8142 	beq.w	8009e00 <ai_platform_network_process+0x2c8>
 8009b7c:	4aaa      	ldr	r2, [pc, #680]	; (8009e28 <ai_platform_network_process+0x2f0>)
 8009b7e:	6813      	ldr	r3, [r2, #0]
 8009b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b84:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b88:	f000 8167 	beq.w	8009e5a <ai_platform_network_process+0x322>
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	f240 4183 	movw	r1, #1155	; 0x483
 8009b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b96:	428b      	cmp	r3, r1
 8009b98:	f000 8191 	beq.w	8009ebe <ai_platform_network_process+0x386>
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ba2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009ba6:	f000 816a 	beq.w	8009e7e <ai_platform_network_process+0x346>
 8009baa:	f7ff fad1 	bl	8009150 <_ai_platform_release_crc>
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	f000 8197 	beq.w	8009ee2 <ai_platform_network_process+0x3aa>
 8009bb4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 813e 	beq.w	8009e38 <ai_platform_network_process+0x300>
 8009bbc:	68eb      	ldr	r3, [r5, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8009bc4:	f003 0303 	and.w	r3, r3, #3
 8009bc8:	616a      	str	r2, [r5, #20]
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	f040 813a 	bne.w	8009e44 <ai_platform_network_process+0x30c>
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	f000 8169 	beq.w	8009ea8 <ai_platform_network_process+0x370>
 8009bd6:	fab8 f788 	clz	r7, r8
 8009bda:	097f      	lsrs	r7, r7, #5
 8009bdc:	f1b8 0f00 	cmp.w	r8, #0
 8009be0:	f000 8162 	beq.w	8009ea8 <ai_platform_network_process+0x370>
 8009be4:	f8b8 3000 	ldrh.w	r3, [r8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 815d 	beq.w	8009ea8 <ai_platform_network_process+0x370>
 8009bee:	69b3      	ldr	r3, [r6, #24]
 8009bf0:	9503      	str	r5, [sp, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d072      	beq.n	8009ce4 <ai_platform_network_process+0x1ac>
 8009bfe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	d06e      	beq.n	8009ce4 <ai_platform_network_process+0x1ac>
 8009c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c0a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009c0e:	f8d3 a000 	ldr.w	sl, [r3]
 8009c12:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8009c16:	f000 8146 	beq.w	8009ea6 <ai_platform_network_process+0x36e>
 8009c1a:	69a3      	ldr	r3, [r4, #24]
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	4630      	mov	r0, r6
 8009c20:	685d      	ldr	r5, [r3, #4]
 8009c22:	f7ff fa55 	bl	80090d0 <ai_buffer_get_size>
 8009c26:	4285      	cmp	r5, r0
 8009c28:	f0c0 815d 	bcc.w	8009ee6 <ai_platform_network_process+0x3ae>
 8009c2c:	68e0      	ldr	r0, [r4, #12]
 8009c2e:	69b1      	ldr	r1, [r6, #24]
 8009c30:	68c2      	ldr	r2, [r0, #12]
 8009c32:	68cb      	ldr	r3, [r1, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	f040 8156 	bne.w	8009ee6 <ai_platform_network_process+0x3ae>
 8009c3a:	6882      	ldr	r2, [r0, #8]
 8009c3c:	688b      	ldr	r3, [r1, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	f040 8151 	bne.w	8009ee6 <ai_platform_network_process+0x3ae>
 8009c44:	6842      	ldr	r2, [r0, #4]
 8009c46:	684b      	ldr	r3, [r1, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	f040 814c 	bne.w	8009ee6 <ai_platform_network_process+0x3ae>
 8009c4e:	69a3      	ldr	r3, [r4, #24]
 8009c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c54:	f00a f9b4 	bl	8013fc0 <ai_array_get_data_byte_size>
 8009c58:	4605      	mov	r5, r0
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f00a f906 	bl	8013e6c <get_tensor_byte_size>
 8009c60:	4285      	cmp	r5, r0
 8009c62:	f0c0 8140 	bcc.w	8009ee6 <ai_platform_network_process+0x3ae>
 8009c66:	69a3      	ldr	r3, [r4, #24]
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	f00a f915 	bl	8013e98 <ai_array_to_buffer_fmt>
 8009c6e:	6833      	ldr	r3, [r6, #0]
 8009c70:	4058      	eors	r0, r3
 8009c72:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009c76:	f040 81fa 	bne.w	800a06e <ai_platform_network_process+0x536>
 8009c7a:	6873      	ldr	r3, [r6, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 81ed 	beq.w	800a05c <ai_platform_network_process+0x524>
 8009c82:	69b3      	ldr	r3, [r6, #24]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 81df 	beq.w	800a04a <ai_platform_network_process+0x512>
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	3701      	adds	r7, #1
 8009c92:	361c      	adds	r6, #28
 8009c94:	429a      	cmp	r2, r3
 8009c96:	bf38      	it	cc
 8009c98:	461a      	movcc	r2, r3
 8009c9a:	9201      	str	r2, [sp, #4]
 8009c9c:	f00a f8e6 	bl	8013e6c <get_tensor_byte_size>
 8009ca0:	f8c9 0008 	str.w	r0, [r9, #8]
 8009ca4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	fb00 f303 	mul.w	r3, r0, r3
 8009cae:	f8c9 300c 	str.w	r3, [r9, #12]
 8009cb2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8009cb6:	440b      	add	r3, r1
 8009cb8:	f8c9 1004 	str.w	r1, [r9, #4]
 8009cbc:	f84a 300b 	str.w	r3, [sl, fp]
 8009cc0:	69a0      	ldr	r0, [r4, #24]
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	009a      	lsls	r2, r3, #2
 8009cc6:	f100 80e8 	bmi.w	8009e9a <ai_platform_network_process+0x362>
 8009cca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009cce:	1a9b      	subs	r3, r3, r2
 8009cd0:	4419      	add	r1, r3
 8009cd2:	6081      	str	r1, [r0, #8]
 8009cd4:	69a3      	ldr	r3, [r4, #24]
 8009cd6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009cda:	60da      	str	r2, [r3, #12]
 8009cdc:	f8b8 3000 	ldrh.w	r3, [r8]
 8009ce0:	42bb      	cmp	r3, r7
 8009ce2:	d888      	bhi.n	8009bf6 <ai_platform_network_process+0xbe>
 8009ce4:	9d03      	ldr	r5, [sp, #12]
 8009ce6:	9b02      	ldr	r3, [sp, #8]
 8009ce8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 81c8 	beq.w	800a080 <ai_platform_network_process+0x548>
 8009cf0:	2a01      	cmp	r2, #1
 8009cf2:	f240 81a2 	bls.w	800a03a <ai_platform_network_process+0x502>
 8009cf6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009cfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 819b 	beq.w	800a03a <ai_platform_network_process+0x502>
 8009d04:	2600      	movs	r6, #0
 8009d06:	9f02      	ldr	r7, [sp, #8]
 8009d08:	9502      	str	r5, [sp, #8]
 8009d0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 80f7 	beq.w	8009f02 <ai_platform_network_process+0x3ca>
 8009d14:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009d18:	2c00      	cmp	r4, #0
 8009d1a:	f000 80f2 	beq.w	8009f02 <ai_platform_network_process+0x3ca>
 8009d1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009d22:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 8009d26:	f8d3 8000 	ldr.w	r8, [r3]
 8009d2a:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 8009d2e:	f000 81b4 	beq.w	800a09a <ai_platform_network_process+0x562>
 8009d32:	69a3      	ldr	r3, [r4, #24]
 8009d34:	2101      	movs	r1, #1
 8009d36:	4638      	mov	r0, r7
 8009d38:	685d      	ldr	r5, [r3, #4]
 8009d3a:	f7ff f9c9 	bl	80090d0 <ai_buffer_get_size>
 8009d3e:	4285      	cmp	r5, r0
 8009d40:	f0c0 817a 	bcc.w	800a038 <ai_platform_network_process+0x500>
 8009d44:	68e0      	ldr	r0, [r4, #12]
 8009d46:	69b9      	ldr	r1, [r7, #24]
 8009d48:	68c2      	ldr	r2, [r0, #12]
 8009d4a:	68cb      	ldr	r3, [r1, #12]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	f040 8173 	bne.w	800a038 <ai_platform_network_process+0x500>
 8009d52:	6882      	ldr	r2, [r0, #8]
 8009d54:	688b      	ldr	r3, [r1, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	f040 816e 	bne.w	800a038 <ai_platform_network_process+0x500>
 8009d5c:	6842      	ldr	r2, [r0, #4]
 8009d5e:	684b      	ldr	r3, [r1, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	f040 8169 	bne.w	800a038 <ai_platform_network_process+0x500>
 8009d66:	69a3      	ldr	r3, [r4, #24]
 8009d68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d6c:	f00a f928 	bl	8013fc0 <ai_array_get_data_byte_size>
 8009d70:	9003      	str	r0, [sp, #12]
 8009d72:	4620      	mov	r0, r4
 8009d74:	f00a f87a 	bl	8013e6c <get_tensor_byte_size>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	f0c0 815c 	bcc.w	800a038 <ai_platform_network_process+0x500>
 8009d80:	69a3      	ldr	r3, [r4, #24]
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f00a f888 	bl	8013e98 <ai_array_to_buffer_fmt>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	4058      	eors	r0, r3
 8009d8c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009d90:	f040 817a 	bne.w	800a088 <ai_platform_network_process+0x550>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8193 	beq.w	800a0c2 <ai_platform_network_process+0x58a>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 8185 	beq.w	800a0b0 <ai_platform_network_process+0x578>
 8009da6:	9a01      	ldr	r2, [sp, #4]
 8009da8:	4620      	mov	r0, r4
 8009daa:	3601      	adds	r6, #1
 8009dac:	371c      	adds	r7, #28
 8009dae:	429a      	cmp	r2, r3
 8009db0:	bf38      	it	cc
 8009db2:	461a      	movcc	r2, r3
 8009db4:	9201      	str	r2, [sp, #4]
 8009db6:	f00a f859 	bl	8013e6c <get_tensor_byte_size>
 8009dba:	f8ca 0008 	str.w	r0, [sl, #8]
 8009dbe:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	fb00 f303 	mul.w	r3, r0, r3
 8009dc8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009dcc:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f8ca 1004 	str.w	r1, [sl, #4]
 8009dd6:	f848 300b 	str.w	r3, [r8, fp]
 8009dda:	69a0      	ldr	r0, [r4, #24]
 8009ddc:	6803      	ldr	r3, [r0, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	f100 808a 	bmi.w	8009ef8 <ai_platform_network_process+0x3c0>
 8009de4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	4419      	add	r1, r3
 8009dec:	6081      	str	r1, [r0, #8]
 8009dee:	69a3      	ldr	r3, [r4, #24]
 8009df0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009dfa:	429e      	cmp	r6, r3
 8009dfc:	d385      	bcc.n	8009d0a <ai_platform_network_process+0x1d2>
 8009dfe:	e080      	b.n	8009f02 <ai_platform_network_process+0x3ca>
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <ai_platform_network_process+0x2f4>)
 8009e02:	2301      	movs	r3, #1
 8009e04:	6093      	str	r3, [r2, #8]
 8009e06:	6893      	ldr	r3, [r2, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1fc      	bne.n	8009e06 <ai_platform_network_process+0x2ce>
 8009e0c:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <ai_platform_network_process+0x2f8>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <ai_platform_network_process+0x2fc>)
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	f43f aec8 	beq.w	8009baa <ai_platform_network_process+0x72>
 8009e1a:	e7fe      	b.n	8009e1a <ai_platform_network_process+0x2e2>
 8009e1c:	a1c00100 	.word	0xa1c00100
 8009e20:	e0002000 	.word	0xe0002000
 8009e24:	e0042000 	.word	0xe0042000
 8009e28:	5c001000 	.word	0x5c001000
 8009e2c:	40023000 	.word	0x40023000
 8009e30:	f407a5c2 	.word	0xf407a5c2
 8009e34:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e38:	68ea      	ldr	r2, [r5, #12]
 8009e3a:	616b      	str	r3, [r5, #20]
 8009e3c:	f002 0203 	and.w	r2, r2, #3
 8009e40:	2a03      	cmp	r2, #3
 8009e42:	d031      	beq.n	8009ea8 <ai_platform_network_process+0x370>
 8009e44:	2230      	movs	r2, #48	; 0x30
 8009e46:	2111      	movs	r1, #17
 8009e48:	f105 0010 	add.w	r0, r5, #16
 8009e4c:	2400      	movs	r4, #0
 8009e4e:	f000 fa5f 	bl	800a310 <core_set_error>
 8009e52:	4620      	mov	r0, r4
 8009e54:	b005      	add	sp, #20
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	4a9e      	ldr	r2, [pc, #632]	; (800a0d4 <ai_platform_network_process+0x59c>)
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e62:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1fb      	bne.n	8009e62 <ai_platform_network_process+0x32a>
 8009e6a:	4b9b      	ldr	r3, [pc, #620]	; (800a0d8 <ai_platform_network_process+0x5a0>)
 8009e6c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009e70:	4b9a      	ldr	r3, [pc, #616]	; (800a0dc <ai_platform_network_process+0x5a4>)
 8009e72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f43f ae97 	beq.w	8009baa <ai_platform_network_process+0x72>
 8009e7c:	e7fe      	b.n	8009e7c <ai_platform_network_process+0x344>
 8009e7e:	4a98      	ldr	r2, [pc, #608]	; (800a0e0 <ai_platform_network_process+0x5a8>)
 8009e80:	2301      	movs	r3, #1
 8009e82:	6093      	str	r3, [r2, #8]
 8009e84:	6893      	ldr	r3, [r2, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1fc      	bne.n	8009e84 <ai_platform_network_process+0x34c>
 8009e8a:	4b93      	ldr	r3, [pc, #588]	; (800a0d8 <ai_platform_network_process+0x5a0>)
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	4b93      	ldr	r3, [pc, #588]	; (800a0dc <ai_platform_network_process+0x5a4>)
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	f43f ae89 	beq.w	8009baa <ai_platform_network_process+0x72>
 8009e98:	e7fe      	b.n	8009e98 <ai_platform_network_process+0x360>
 8009e9a:	f8b8 3000 	ldrh.w	r3, [r8]
 8009e9e:	429f      	cmp	r7, r3
 8009ea0:	f4ff aea9 	bcc.w	8009bf6 <ai_platform_network_process+0xbe>
 8009ea4:	e71e      	b.n	8009ce4 <ai_platform_network_process+0x1ac>
 8009ea6:	9d03      	ldr	r5, [sp, #12]
 8009ea8:	2400      	movs	r4, #0
 8009eaa:	2217      	movs	r2, #23
 8009eac:	2112      	movs	r1, #18
 8009eae:	f105 0010 	add.w	r0, r5, #16
 8009eb2:	f000 fa2d 	bl	800a310 <core_set_error>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	b005      	add	sp, #20
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	4a85      	ldr	r2, [pc, #532]	; (800a0d4 <ai_platform_network_process+0x59c>)
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ec6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1fb      	bne.n	8009ec6 <ai_platform_network_process+0x38e>
 8009ece:	4b82      	ldr	r3, [pc, #520]	; (800a0d8 <ai_platform_network_process+0x5a0>)
 8009ed0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009ed4:	4b81      	ldr	r3, [pc, #516]	; (800a0dc <ai_platform_network_process+0x5a4>)
 8009ed6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009eda:	429a      	cmp	r2, r3
 8009edc:	f43f ae65 	beq.w	8009baa <ai_platform_network_process+0x72>
 8009ee0:	e7fe      	b.n	8009ee0 <ai_platform_network_process+0x3a8>
 8009ee2:	462c      	mov	r4, r5
 8009ee4:	e7b5      	b.n	8009e52 <ai_platform_network_process+0x31a>
 8009ee6:	9d03      	ldr	r5, [sp, #12]
 8009ee8:	2218      	movs	r2, #24
 8009eea:	2112      	movs	r1, #18
 8009eec:	2400      	movs	r4, #0
 8009eee:	f105 0010 	add.w	r0, r5, #16
 8009ef2:	f000 fa0d 	bl	800a310 <core_set_error>
 8009ef6:	e7ac      	b.n	8009e52 <ai_platform_network_process+0x31a>
 8009ef8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009efc:	429e      	cmp	r6, r3
 8009efe:	f4ff af04 	bcc.w	8009d0a <ai_platform_network_process+0x1d2>
 8009f02:	9d02      	ldr	r5, [sp, #8]
 8009f04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009f08:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009f0a:	82ab      	strh	r3, [r5, #20]
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	f040 808d 	bne.w	800a02c <ai_platform_network_process+0x4f4>
 8009f12:	4616      	mov	r6, r2
 8009f14:	4617      	mov	r7, r2
 8009f16:	8aec      	ldrh	r4, [r5, #22]
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	d29a      	bcs.n	8009e52 <ai_platform_network_process+0x31a>
 8009f1c:	46ab      	mov	fp, r5
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d030      	beq.n	8009f84 <ai_platform_network_process+0x44c>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	e014      	b.n	8009f52 <ai_platform_network_process+0x41a>
 8009f28:	6882      	ldr	r2, [r0, #8]
 8009f2a:	68c5      	ldr	r5, [r0, #12]
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	1b52      	subs	r2, r2, r5
 8009f30:	4413      	add	r3, r2
 8009f32:	6083      	str	r3, [r0, #8]
 8009f34:	698b      	ldr	r3, [r1, #24]
 8009f36:	6862      	ldr	r2, [r4, #4]
 8009f38:	60da      	str	r2, [r3, #12]
 8009f3a:	f859 200a 	ldr.w	r2, [r9, sl]
 8009f3e:	f108 0801 	add.w	r8, r8, #1
 8009f42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009f46:	440b      	add	r3, r1
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d301      	bcc.n	8009f50 <ai_platform_network_process+0x418>
 8009f4c:	68e3      	ldr	r3, [r4, #12]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	8833      	ldrh	r3, [r6, #0]
 8009f54:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009f58:	4543      	cmp	r3, r8
 8009f5a:	d913      	bls.n	8009f84 <ai_platform_network_process+0x44c>
 8009f5c:	6873      	ldr	r3, [r6, #4]
 8009f5e:	b18b      	cbz	r3, 8009f84 <ai_platform_network_process+0x44c>
 8009f60:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009f64:	b171      	cbz	r1, 8009f84 <ai_platform_network_process+0x44c>
 8009f66:	6988      	ldr	r0, [r1, #24]
 8009f68:	68b2      	ldr	r2, [r6, #8]
 8009f6a:	6803      	ldr	r3, [r0, #0]
 8009f6c:	f8d2 9000 	ldr.w	r9, [r2]
 8009f70:	009d      	lsls	r5, r3, #2
 8009f72:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009f76:	d5d7      	bpl.n	8009f28 <ai_platform_network_process+0x3f0>
 8009f78:	6880      	ldr	r0, [r0, #8]
 8009f7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009f7e:	f00a f8a1 	bl	80140c4 <memcpy>
 8009f82:	e7da      	b.n	8009f3a <ai_platform_network_process+0x402>
 8009f84:	4658      	mov	r0, fp
 8009f86:	f001 ffd5 	bl	800bf34 <ai_layers_forward_all>
 8009f8a:	2f00      	cmp	r7, #0
 8009f8c:	d03f      	beq.n	800a00e <ai_platform_network_process+0x4d6>
 8009f8e:	2400      	movs	r4, #0
 8009f90:	e016      	b.n	8009fc0 <ai_platform_network_process+0x488>
 8009f92:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009f96:	f859 100a 	ldr.w	r1, [r9, sl]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	428b      	cmp	r3, r1
 8009f9e:	d302      	bcc.n	8009fa6 <ai_platform_network_process+0x46e>
 8009fa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fa4:	1acb      	subs	r3, r1, r3
 8009fa6:	f8c8 3004 	str.w	r3, [r8, #4]
 8009faa:	6981      	ldr	r1, [r0, #24]
 8009fac:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009fb0:	1b52      	subs	r2, r2, r5
 8009fb2:	4413      	add	r3, r2
 8009fb4:	608b      	str	r3, [r1, #8]
 8009fb6:	6983      	ldr	r3, [r0, #24]
 8009fb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	883b      	ldrh	r3, [r7, #0]
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	d923      	bls.n	800a00e <ai_platform_network_process+0x4d6>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	b30b      	cbz	r3, 800a00e <ai_platform_network_process+0x4d6>
 8009fca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009fce:	b1f0      	cbz	r0, 800a00e <ai_platform_network_process+0x4d6>
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009fd6:	6983      	ldr	r3, [r0, #24]
 8009fd8:	f8d2 9000 	ldr.w	r9, [r2]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009fe2:	0092      	lsls	r2, r2, #2
 8009fe4:	d5d5      	bpl.n	8009f92 <ai_platform_network_process+0x45a>
 8009fe6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009fea:	6899      	ldr	r1, [r3, #8]
 8009fec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ff0:	f00a f868 	bl	80140c4 <memcpy>
 8009ff4:	f859 200a 	ldr.w	r2, [r9, sl]
 8009ff8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009ffc:	440b      	add	r3, r1
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d302      	bcc.n	800a008 <ai_platform_network_process+0x4d0>
 800a002:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	f8c8 3004 	str.w	r3, [r8, #4]
 800a00c:	e7d7      	b.n	8009fbe <ai_platform_network_process+0x486>
 800a00e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800a012:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a016:	3401      	adds	r4, #1
 800a018:	b2a4      	uxth	r4, r4
 800a01a:	42a3      	cmp	r3, r4
 800a01c:	f8ab 4016 	strh.w	r4, [fp, #22]
 800a020:	f63f af7d 	bhi.w	8009f1e <ai_platform_network_process+0x3e6>
 800a024:	4620      	mov	r0, r4
 800a026:	b005      	add	sp, #20
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	2a01      	cmp	r2, #1
 800a02e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800a030:	d03c      	beq.n	800a0ac <ai_platform_network_process+0x574>
 800a032:	f106 070c 	add.w	r7, r6, #12
 800a036:	e76e      	b.n	8009f16 <ai_platform_network_process+0x3de>
 800a038:	9d02      	ldr	r5, [sp, #8]
 800a03a:	2218      	movs	r2, #24
 800a03c:	2113      	movs	r1, #19
 800a03e:	f105 0010 	add.w	r0, r5, #16
 800a042:	2400      	movs	r4, #0
 800a044:	f000 f964 	bl	800a310 <core_set_error>
 800a048:	e703      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a04a:	9d03      	ldr	r5, [sp, #12]
 800a04c:	4604      	mov	r4, r0
 800a04e:	2221      	movs	r2, #33	; 0x21
 800a050:	2112      	movs	r1, #18
 800a052:	f105 0010 	add.w	r0, r5, #16
 800a056:	f000 f95b 	bl	800a310 <core_set_error>
 800a05a:	e6fa      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a05c:	9d03      	ldr	r5, [sp, #12]
 800a05e:	4604      	mov	r4, r0
 800a060:	2217      	movs	r2, #23
 800a062:	2112      	movs	r1, #18
 800a064:	f105 0010 	add.w	r0, r5, #16
 800a068:	f000 f952 	bl	800a310 <core_set_error>
 800a06c:	e6f1      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a06e:	9d03      	ldr	r5, [sp, #12]
 800a070:	2219      	movs	r2, #25
 800a072:	2112      	movs	r1, #18
 800a074:	2400      	movs	r4, #0
 800a076:	f105 0010 	add.w	r0, r5, #16
 800a07a:	f000 f949 	bl	800a310 <core_set_error>
 800a07e:	e6e8      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a080:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a084:	82ab      	strh	r3, [r5, #20]
 800a086:	e741      	b.n	8009f0c <ai_platform_network_process+0x3d4>
 800a088:	9d02      	ldr	r5, [sp, #8]
 800a08a:	2219      	movs	r2, #25
 800a08c:	2113      	movs	r1, #19
 800a08e:	2400      	movs	r4, #0
 800a090:	f105 0010 	add.w	r0, r5, #16
 800a094:	f000 f93c 	bl	800a310 <core_set_error>
 800a098:	e6db      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a09a:	9d02      	ldr	r5, [sp, #8]
 800a09c:	2217      	movs	r2, #23
 800a09e:	2113      	movs	r1, #19
 800a0a0:	4654      	mov	r4, sl
 800a0a2:	f105 0010 	add.w	r0, r5, #16
 800a0a6:	f000 f933 	bl	800a310 <core_set_error>
 800a0aa:	e6d2      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a0ac:	2700      	movs	r7, #0
 800a0ae:	e732      	b.n	8009f16 <ai_platform_network_process+0x3de>
 800a0b0:	9d02      	ldr	r5, [sp, #8]
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	2221      	movs	r2, #33	; 0x21
 800a0b6:	2113      	movs	r1, #19
 800a0b8:	f105 0010 	add.w	r0, r5, #16
 800a0bc:	f000 f928 	bl	800a310 <core_set_error>
 800a0c0:	e6c7      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a0c2:	9d02      	ldr	r5, [sp, #8]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	2217      	movs	r2, #23
 800a0c8:	2113      	movs	r1, #19
 800a0ca:	f105 0010 	add.w	r0, r5, #16
 800a0ce:	f000 f91f 	bl	800a310 <core_set_error>
 800a0d2:	e6be      	b.n	8009e52 <ai_platform_network_process+0x31a>
 800a0d4:	58024000 	.word	0x58024000
 800a0d8:	f407a5c2 	.word	0xf407a5c2
 800a0dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800a0e0:	40023000 	.word	0x40023000

0800a0e4 <node_convert_integer>:
 800a0e4:	6982      	ldr	r2, [r0, #24]
 800a0e6:	8813      	ldrh	r3, [r2, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d058      	beq.n	800a19e <node_convert_integer+0xba>
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	6852      	ldr	r2, [r2, #4]
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	6856      	ldr	r6, [r2, #4]
 800a0f4:	b106      	cbz	r6, 800a0f8 <node_convert_integer+0x14>
 800a0f6:	6836      	ldr	r6, [r6, #0]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	f000 8100 	beq.w	800a2fe <node_convert_integer+0x21a>
 800a0fe:	6915      	ldr	r5, [r2, #16]
 800a100:	b105      	cbz	r5, 800a104 <node_convert_integer+0x20>
 800a102:	682d      	ldr	r5, [r5, #0]
 800a104:	68b3      	ldr	r3, [r6, #8]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	f000 80d3 	beq.w	800a2b2 <node_convert_integer+0x1ce>
 800a10c:	68f0      	ldr	r0, [r6, #12]
 800a10e:	2201      	movs	r2, #1
 800a110:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a118:	4298      	cmp	r0, r3
 800a11a:	fb01 f202 	mul.w	r2, r1, r2
 800a11e:	d1f9      	bne.n	800a114 <node_convert_integer+0x30>
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	682c      	ldr	r4, [r5, #0]
 800a124:	b17b      	cbz	r3, 800a146 <node_convert_integer+0x62>
 800a126:	6859      	ldr	r1, [r3, #4]
 800a128:	b169      	cbz	r1, 800a146 <node_convert_integer+0x62>
 800a12a:	8858      	ldrh	r0, [r3, #2]
 800a12c:	b158      	cbz	r0, 800a146 <node_convert_integer+0x62>
 800a12e:	6809      	ldr	r1, [r1, #0]
 800a130:	ed91 7a00 	vldr	s14, [r1]
 800a134:	b15c      	cbz	r4, 800a14e <node_convert_integer+0x6a>
 800a136:	6861      	ldr	r1, [r4, #4]
 800a138:	b149      	cbz	r1, 800a14e <node_convert_integer+0x6a>
 800a13a:	8860      	ldrh	r0, [r4, #2]
 800a13c:	b138      	cbz	r0, 800a14e <node_convert_integer+0x6a>
 800a13e:	6809      	ldr	r1, [r1, #0]
 800a140:	edd1 7a00 	vldr	s15, [r1]
 800a144:	e005      	b.n	800a152 <node_convert_integer+0x6e>
 800a146:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a304 <node_convert_integer+0x220>
 800a14a:	2c00      	cmp	r4, #0
 800a14c:	d1f3      	bne.n	800a136 <node_convert_integer+0x52>
 800a14e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800a304 <node_convert_integer+0x220>
 800a152:	69b0      	ldr	r0, [r6, #24]
 800a154:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a158:	69ad      	ldr	r5, [r5, #24]
 800a15a:	6806      	ldr	r6, [r0, #0]
 800a15c:	6829      	ldr	r1, [r5, #0]
 800a15e:	0236      	lsls	r6, r6, #8
 800a160:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 800a164:	d41d      	bmi.n	800a1a2 <node_convert_integer+0xbe>
 800a166:	2900      	cmp	r1, #0
 800a168:	f040 8081 	bne.w	800a26e <node_convert_integer+0x18a>
 800a16c:	6880      	ldr	r0, [r0, #8]
 800a16e:	68a9      	ldr	r1, [r5, #8]
 800a170:	b13b      	cbz	r3, 800a182 <node_convert_integer+0x9e>
 800a172:	685d      	ldr	r5, [r3, #4]
 800a174:	2d00      	cmp	r5, #0
 800a176:	f000 80a7 	beq.w	800a2c8 <node_convert_integer+0x1e4>
 800a17a:	885b      	ldrh	r3, [r3, #2]
 800a17c:	b10b      	cbz	r3, 800a182 <node_convert_integer+0x9e>
 800a17e:	686b      	ldr	r3, [r5, #4]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b13c      	cbz	r4, 800a194 <node_convert_integer+0xb0>
 800a184:	6865      	ldr	r5, [r4, #4]
 800a186:	2d00      	cmp	r5, #0
 800a188:	f000 80ad 	beq.w	800a2e6 <node_convert_integer+0x202>
 800a18c:	8864      	ldrh	r4, [r4, #2]
 800a18e:	b10c      	cbz	r4, 800a194 <node_convert_integer+0xb0>
 800a190:	686c      	ldr	r4, [r5, #4]
 800a192:	7824      	ldrb	r4, [r4, #0]
 800a194:	9400      	str	r4, [sp, #0]
 800a196:	f001 ffeb 	bl	800c170 <forward_lite_node_convert_integer_iu8ou8>
 800a19a:	b002      	add	sp, #8
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	deff      	udf	#255	; 0xff
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d042      	beq.n	800a22c <node_convert_integer+0x148>
 800a1a6:	6886      	ldr	r6, [r0, #8]
 800a1a8:	68a9      	ldr	r1, [r5, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d07f      	beq.n	800a2ae <node_convert_integer+0x1ca>
 800a1ae:	6858      	ldr	r0, [r3, #4]
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f000 8092 	beq.w	800a2da <node_convert_integer+0x1f6>
 800a1b6:	885d      	ldrh	r5, [r3, #2]
 800a1b8:	b115      	cbz	r5, 800a1c0 <node_convert_integer+0xdc>
 800a1ba:	6843      	ldr	r3, [r0, #4]
 800a1bc:	f993 5000 	ldrsb.w	r5, [r3]
 800a1c0:	2c00      	cmp	r4, #0
 800a1c2:	d078      	beq.n	800a2b6 <node_convert_integer+0x1d2>
 800a1c4:	6863      	ldr	r3, [r4, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d07b      	beq.n	800a2c2 <node_convert_integer+0x1de>
 800a1ca:	8860      	ldrh	r0, [r4, #2]
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d075      	beq.n	800a2bc <node_convert_integer+0x1d8>
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f993 3000 	ldrsb.w	r3, [r3]
 800a1d6:	ee06 3a90 	vmov	s13, r3
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	d0dd      	beq.n	800a19a <node_convert_integer+0xb6>
 800a1de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a1e2:	4432      	add	r2, r6
 800a1e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a1e8:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a308 <node_convert_integer+0x224>
 800a1ec:	f916 3b01 	ldrsb.w	r3, [r6], #1
 800a1f0:	1b5b      	subs	r3, r3, r5
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1fa:	eef0 7a66 	vmov.f32	s15, s13
 800a1fe:	eee7 7a00 	vfma.f32	s15, s14, s0
 800a202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20a:	bfcc      	ite	gt
 800a20c:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 800a210:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 800a214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a218:	ee17 3a90 	vmov	r3, s15
 800a21c:	f303 0307 	ssat	r3, #8, r3
 800a220:	4296      	cmp	r6, r2
 800a222:	f801 3b01 	strb.w	r3, [r1], #1
 800a226:	d1e1      	bne.n	800a1ec <node_convert_integer+0x108>
 800a228:	b002      	add	sp, #8
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	6880      	ldr	r0, [r0, #8]
 800a22e:	68a9      	ldr	r1, [r5, #8]
 800a230:	b13b      	cbz	r3, 800a242 <node_convert_integer+0x15e>
 800a232:	685d      	ldr	r5, [r3, #4]
 800a234:	2d00      	cmp	r5, #0
 800a236:	d04c      	beq.n	800a2d2 <node_convert_integer+0x1ee>
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	b113      	cbz	r3, 800a242 <node_convert_integer+0x15e>
 800a23c:	686b      	ldr	r3, [r5, #4]
 800a23e:	f993 3000 	ldrsb.w	r3, [r3]
 800a242:	b134      	cbz	r4, 800a252 <node_convert_integer+0x16e>
 800a244:	6865      	ldr	r5, [r4, #4]
 800a246:	2d00      	cmp	r5, #0
 800a248:	d04b      	beq.n	800a2e2 <node_convert_integer+0x1fe>
 800a24a:	8864      	ldrh	r4, [r4, #2]
 800a24c:	b10c      	cbz	r4, 800a252 <node_convert_integer+0x16e>
 800a24e:	686c      	ldr	r4, [r5, #4]
 800a250:	7824      	ldrb	r4, [r4, #0]
 800a252:	eeb4 7a67 	vcmp.f32	s14, s15
 800a256:	9400      	str	r4, [sp, #0]
 800a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25c:	d103      	bne.n	800a266 <node_convert_integer+0x182>
 800a25e:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800a262:	42a5      	cmp	r5, r4
 800a264:	d048      	beq.n	800a2f8 <node_convert_integer+0x214>
 800a266:	f002 f825 	bl	800c2b4 <forward_lite_node_convert_integer_is8ou8>
 800a26a:	b002      	add	sp, #8
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	b133      	cbz	r3, 800a27e <node_convert_integer+0x19a>
 800a270:	6859      	ldr	r1, [r3, #4]
 800a272:	2900      	cmp	r1, #0
 800a274:	d039      	beq.n	800a2ea <node_convert_integer+0x206>
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	b10b      	cbz	r3, 800a27e <node_convert_integer+0x19a>
 800a27a:	684b      	ldr	r3, [r1, #4]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	b134      	cbz	r4, 800a28e <node_convert_integer+0x1aa>
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	b361      	cbz	r1, 800a2de <node_convert_integer+0x1fa>
 800a284:	8864      	ldrh	r4, [r4, #2]
 800a286:	b114      	cbz	r4, 800a28e <node_convert_integer+0x1aa>
 800a288:	6849      	ldr	r1, [r1, #4]
 800a28a:	f991 4000 	ldrsb.w	r4, [r1]
 800a28e:	eeb4 7a67 	vcmp.f32	s14, s15
 800a292:	6880      	ldr	r0, [r0, #8]
 800a294:	68a9      	ldr	r1, [r5, #8]
 800a296:	9400      	str	r4, [sp, #0]
 800a298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29c:	d103      	bne.n	800a2a6 <node_convert_integer+0x1c2>
 800a29e:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800a2a2:	42ab      	cmp	r3, r5
 800a2a4:	d025      	beq.n	800a2f2 <node_convert_integer+0x20e>
 800a2a6:	f001 ff8d 	bl	800c1c4 <forward_lite_node_convert_integer_iu8os8>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	461d      	mov	r5, r3
 800a2b0:	e786      	b.n	800a1c0 <node_convert_integer+0xdc>
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	e734      	b.n	800a120 <node_convert_integer+0x3c>
 800a2b6:	ee06 4a90 	vmov	s13, r4
 800a2ba:	e78e      	b.n	800a1da <node_convert_integer+0xf6>
 800a2bc:	ee06 0a90 	vmov	s13, r0
 800a2c0:	e78b      	b.n	800a1da <node_convert_integer+0xf6>
 800a2c2:	ee06 3a90 	vmov	s13, r3
 800a2c6:	e788      	b.n	800a1da <node_convert_integer+0xf6>
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	2c00      	cmp	r4, #0
 800a2cc:	f47f af5a 	bne.w	800a184 <node_convert_integer+0xa0>
 800a2d0:	e760      	b.n	800a194 <node_convert_integer+0xb0>
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	d1b5      	bne.n	800a244 <node_convert_integer+0x160>
 800a2d8:	e7bb      	b.n	800a252 <node_convert_integer+0x16e>
 800a2da:	4605      	mov	r5, r0
 800a2dc:	e770      	b.n	800a1c0 <node_convert_integer+0xdc>
 800a2de:	460c      	mov	r4, r1
 800a2e0:	e7d5      	b.n	800a28e <node_convert_integer+0x1aa>
 800a2e2:	462c      	mov	r4, r5
 800a2e4:	e7b5      	b.n	800a252 <node_convert_integer+0x16e>
 800a2e6:	462c      	mov	r4, r5
 800a2e8:	e754      	b.n	800a194 <node_convert_integer+0xb0>
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	2c00      	cmp	r4, #0
 800a2ee:	d1c7      	bne.n	800a280 <node_convert_integer+0x19c>
 800a2f0:	e7cd      	b.n	800a28e <node_convert_integer+0x1aa>
 800a2f2:	f001 ffa7 	bl	800c244 <forward_lite_node_convert_integer_iu8os8_fast>
 800a2f6:	e750      	b.n	800a19a <node_convert_integer+0xb6>
 800a2f8:	f002 f806 	bl	800c308 <forward_lite_node_convert_integer_is8ou8_fast>
 800a2fc:	e74d      	b.n	800a19a <node_convert_integer+0xb6>
 800a2fe:	2300      	movs	r3, #0
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	deff      	udf	#255	; 0xff
 800a304:	00000000 	.word	0x00000000
 800a308:	3efffffc 	.word	0x3efffffc

0800a30c <core_init>:
 800a30c:	2001      	movs	r0, #1
 800a30e:	4770      	bx	lr

0800a310 <core_set_error>:
 800a310:	4603      	mov	r3, r0
 800a312:	7800      	ldrb	r0, [r0, #0]
 800a314:	b108      	cbz	r0, 800a31a <core_set_error+0xa>
 800a316:	2000      	movs	r0, #0
 800a318:	4770      	bx	lr
 800a31a:	7019      	strb	r1, [r3, #0]
 800a31c:	2001      	movs	r0, #1
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	f362 211f 	bfi	r1, r2, #8, #24
 800a324:	6019      	str	r1, [r3, #0]
 800a326:	4770      	bx	lr

0800a328 <forward_dense>:
 800a328:	6983      	ldr	r3, [r0, #24]
 800a32a:	881a      	ldrh	r2, [r3, #0]
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	f000 80f7 	beq.w	800a520 <forward_dense+0x1f8>
 800a332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a336:	ed2d 8b0e 	vpush	{d8-d14}
 800a33a:	6858      	ldr	r0, [r3, #4]
 800a33c:	b09b      	sub	sp, #108	; 0x6c
 800a33e:	6847      	ldr	r7, [r0, #4]
 800a340:	b107      	cbz	r7, 800a344 <forward_dense+0x1c>
 800a342:	683f      	ldr	r7, [r7, #0]
 800a344:	2a01      	cmp	r2, #1
 800a346:	f000 8523 	beq.w	800ad90 <forward_dense+0xa68>
 800a34a:	6905      	ldr	r5, [r0, #16]
 800a34c:	b105      	cbz	r5, 800a350 <forward_dense+0x28>
 800a34e:	682d      	ldr	r5, [r5, #0]
 800a350:	2a02      	cmp	r2, #2
 800a352:	f000 80e7 	beq.w	800a524 <forward_dense+0x1fc>
 800a356:	69c3      	ldr	r3, [r0, #28]
 800a358:	930b      	str	r3, [sp, #44]	; 0x2c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8509 	beq.w	800ad72 <forward_dense+0xa4a>
 800a360:	4619      	mov	r1, r3
 800a362:	8b03      	ldrh	r3, [r0, #24]
 800a364:	6809      	ldr	r1, [r1, #0]
 800a366:	2b01      	cmp	r3, #1
 800a368:	910c      	str	r1, [sp, #48]	; 0x30
 800a36a:	f240 8505 	bls.w	800ad78 <forward_dense+0xa50>
 800a36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	930b      	str	r3, [sp, #44]	; 0x2c
 800a374:	460b      	mov	r3, r1
 800a376:	6999      	ldr	r1, [r3, #24]
 800a378:	2a03      	cmp	r2, #3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68ec      	ldr	r4, [r5, #12]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800a384:	9314      	str	r3, [sp, #80]	; 0x50
 800a386:	680b      	ldr	r3, [r1, #0]
 800a388:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 800a38c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800a390:	fb0c fb06 	mul.w	fp, ip, r6
 800a394:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800a398:	fa4e f40c 	asr.w	r4, lr, ip
 800a39c:	9413      	str	r4, [sp, #76]	; 0x4c
 800a39e:	f000 84f4 	beq.w	800ad8a <forward_dense+0xa62>
 800a3a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a3a4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	f000 84dc 	beq.w	800ad66 <forward_dense+0xa3e>
 800a3ae:	6812      	ldr	r2, [r2, #0]
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	f000 84d8 	beq.w	800ad66 <forward_dense+0xa3e>
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800a3bc:	f000 84bf 	beq.w	800ad3e <forward_dense+0xa16>
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	f000 84bc 	beq.w	800ad3e <forward_dense+0xa16>
 800a3c6:	f04f 0a00 	mov.w	sl, #0
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	fb0b f408 	mul.w	r4, fp, r8
 800a3d0:	69aa      	ldr	r2, [r5, #24]
 800a3d2:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800a3d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d8:	6892      	ldr	r2, [r2, #8]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800a3e0:	9204      	str	r2, [sp, #16]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	910f      	str	r1, [sp, #60]	; 0x3c
 800a3e8:	9302      	str	r3, [sp, #8]
 800a3ea:	ea4f 0386 	mov.w	r3, r6, lsl #2
 800a3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f0:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f080 849a 	bcs.w	800ad2e <forward_dense+0xa06>
 800a3fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3fc:	4bbf      	ldr	r3, [pc, #764]	; (800a6fc <forward_dense+0x3d4>)
 800a3fe:	08d0      	lsrs	r0, r2, #3
 800a400:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a700 <forward_dense+0x3d8>
 800a404:	4413      	add	r3, r2
 800a406:	9007      	str	r0, [sp, #28]
 800a408:	0099      	lsls	r1, r3, #2
 800a40a:	f1a2 0310 	sub.w	r3, r2, #16
 800a40e:	091b      	lsrs	r3, r3, #4
 800a410:	f101 0420 	add.w	r4, r1, #32
 800a414:	9115      	str	r1, [sp, #84]	; 0x54
 800a416:	0949      	lsrs	r1, r1, #5
 800a418:	3301      	adds	r3, #1
 800a41a:	940e      	str	r4, [sp, #56]	; 0x38
 800a41c:	445c      	add	r4, fp
 800a41e:	9116      	str	r1, [sp, #88]	; 0x58
 800a420:	019b      	lsls	r3, r3, #6
 800a422:	46a1      	mov	r9, r4
 800a424:	940a      	str	r4, [sp, #40]	; 0x28
 800a426:	9319      	str	r3, [sp, #100]	; 0x64
 800a428:	f022 0301 	bic.w	r3, r2, #1
 800a42c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	9318      	str	r3, [sp, #96]	; 0x60
 800a438:	00cb      	lsls	r3, r1, #3
 800a43a:	3310      	adds	r3, #16
 800a43c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a43e:	f002 0301 	and.w	r3, r2, #1
 800a442:	9308      	str	r3, [sp, #32]
 800a444:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	4653      	mov	r3, sl
 800a44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a44e:	6992      	ldr	r2, [r2, #24]
 800a450:	6897      	ldr	r7, [r2, #8]
 800a452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a454:	2a00      	cmp	r2, #0
 800a456:	f000 8270 	beq.w	800a93a <forward_dense+0x612>
 800a45a:	6992      	ldr	r2, [r2, #24]
 800a45c:	6895      	ldr	r5, [r2, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 826f 	beq.w	800a942 <forward_dense+0x61a>
 800a464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a466:	2a04      	cmp	r2, #4
 800a468:	f000 837a 	beq.w	800ab60 <forward_dense+0x838>
 800a46c:	9a01      	ldr	r2, [sp, #4]
 800a46e:	9904      	ldr	r1, [sp, #16]
 800a470:	428a      	cmp	r2, r1
 800a472:	d93f      	bls.n	800a4f4 <forward_dense+0x1cc>
 800a474:	468e      	mov	lr, r1
 800a476:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a478:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a47a:	3201      	adds	r2, #1
 800a47c:	eb01 0a0b 	add.w	sl, r1, fp
 800a480:	f10b 0104 	add.w	r1, fp, #4
 800a484:	9110      	str	r1, [sp, #64]	; 0x40
 800a486:	00d1      	lsls	r1, r2, #3
 800a488:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 800a48c:	f8cd a018 	str.w	sl, [sp, #24]
 800a490:	9111      	str	r1, [sp, #68]	; 0x44
 800a492:	9212      	str	r2, [sp, #72]	; 0x48
 800a494:	f1aa 0204 	sub.w	r2, sl, #4
 800a498:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	f000 8128 	beq.w	800a6f4 <forward_dense+0x3cc>
 800a4a4:	ecf5 4a01 	vldmia	r5!, {s9}
 800a4a8:	f1ba 0f07 	cmp.w	sl, #7
 800a4ac:	d83d      	bhi.n	800a52a <forward_dense+0x202>
 800a4ae:	45cb      	cmp	fp, r9
 800a4b0:	d211      	bcs.n	800a4d6 <forward_dense+0x1ae>
 800a4b2:	eddf 7a93 	vldr	s15, [pc, #588]	; 800a700 <forward_dense+0x3d8>
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4be:	ecf1 6a01 	vldmia	r1!, {s13}
 800a4c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a4c6:	4549      	cmp	r1, r9
 800a4c8:	ed92 6a00 	vldr	s12, [r2]
 800a4cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a4d0:	d3f3      	bcc.n	800a4ba <forward_dense+0x192>
 800a4d2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a4d6:	9a02      	ldr	r2, [sp, #8]
 800a4d8:	ecee 4a01 	vstmia	lr!, {s9}
 800a4dc:	4417      	add	r7, r2
 800a4de:	9a01      	ldr	r2, [sp, #4]
 800a4e0:	4596      	cmp	lr, r2
 800a4e2:	d3dc      	bcc.n	800a49e <forward_dense+0x176>
 800a4e4:	9904      	ldr	r1, [sp, #16]
 800a4e6:	1a52      	subs	r2, r2, r1
 800a4e8:	3a01      	subs	r2, #1
 800a4ea:	f022 0203 	bic.w	r2, r2, #3
 800a4ee:	3204      	adds	r2, #4
 800a4f0:	188a      	adds	r2, r1, r2
 800a4f2:	9204      	str	r2, [sp, #16]
 800a4f4:	9a01      	ldr	r2, [sp, #4]
 800a4f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4f8:	9804      	ldr	r0, [sp, #16]
 800a4fa:	440a      	add	r2, r1
 800a4fc:	9905      	ldr	r1, [sp, #20]
 800a4fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a504:	42a0      	cmp	r0, r4
 800a506:	4411      	add	r1, r2
 800a508:	4491      	add	r9, r2
 800a50a:	9105      	str	r1, [sp, #20]
 800a50c:	9903      	ldr	r1, [sp, #12]
 800a50e:	4411      	add	r1, r2
 800a510:	9103      	str	r1, [sp, #12]
 800a512:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a514:	468b      	mov	fp, r1
 800a516:	f080 840a 	bcs.w	800ad2e <forward_dense+0xa06>
 800a51a:	4411      	add	r1, r2
 800a51c:	910a      	str	r1, [sp, #40]	; 0x28
 800a51e:	e795      	b.n	800a44c <forward_dense+0x124>
 800a520:	6853      	ldr	r3, [r2, #4]
 800a522:	deff      	udf	#255	; 0xff
 800a524:	2300      	movs	r3, #0
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	deff      	udf	#255	; 0xff
 800a52a:	f007 0203 	and.w	r2, r7, #3
 800a52e:	2a02      	cmp	r2, #2
 800a530:	f000 81e7 	beq.w	800a902 <forward_dense+0x5da>
 800a534:	2a03      	cmp	r2, #3
 800a536:	f000 80e5 	beq.w	800a704 <forward_dense+0x3dc>
 800a53a:	2a01      	cmp	r2, #1
 800a53c:	f000 81f0 	beq.w	800a920 <forward_dense+0x5f8>
 800a540:	9a06      	ldr	r2, [sp, #24]
 800a542:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a700 <forward_dense+0x3d8>
 800a546:	4593      	cmp	fp, r2
 800a548:	f200 83f6 	bhi.w	800ad38 <forward_dense+0xa10>
 800a54c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a54e:	f107 0208 	add.w	r2, r7, #8
 800a552:	f10b 0120 	add.w	r1, fp, #32
 800a556:	19c4      	adds	r4, r0, r7
 800a558:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a55c:	3208      	adds	r2, #8
 800a55e:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a562:	3120      	adds	r1, #32
 800a564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a568:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800a56c:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800a570:	edd0 7a00 	vldr	s15, [r0]
 800a574:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a578:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a57c:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a584:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800a588:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800a58c:	ed90 2a00 	vldr	s4, [r0]
 800a590:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a594:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a598:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a59c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5a0:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800a5a4:	edd0 2a00 	vldr	s5, [r0]
 800a5a8:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a5ac:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a5b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5b4:	ed90 3a00 	vldr	s6, [r0]
 800a5b8:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a5bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5c4:	edd0 3a00 	vldr	s7, [r0]
 800a5c8:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a5cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5d0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a5d4:	ed90 4a00 	vldr	s8, [r0]
 800a5d8:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a5dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5e0:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a5e4:	ed90 5a00 	vldr	s10, [r0]
 800a5e8:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a5ec:	4294      	cmp	r4, r2
 800a5ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5f6:	edd0 5a00 	vldr	s11, [r0]
 800a5fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a5fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a602:	d1a9      	bne.n	800a558 <forward_dense+0x230>
 800a604:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a606:	18b9      	adds	r1, r7, r2
 800a608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a60a:	454a      	cmp	r2, r9
 800a60c:	d26f      	bcs.n	800a6ee <forward_dense+0x3c6>
 800a60e:	7808      	ldrb	r0, [r1, #0]
 800a610:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a614:	edd0 7a00 	vldr	s15, [r0]
 800a618:	4610      	mov	r0, r2
 800a61a:	ecb0 6a01 	vldmia	r0!, {s12}
 800a61e:	4581      	cmp	r9, r0
 800a620:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a624:	d963      	bls.n	800a6ee <forward_dense+0x3c6>
 800a626:	7848      	ldrb	r0, [r1, #1]
 800a628:	ed92 6a01 	vldr	s12, [r2, #4]
 800a62c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a630:	edd0 7a00 	vldr	s15, [r0]
 800a634:	f102 0008 	add.w	r0, r2, #8
 800a638:	4581      	cmp	r9, r0
 800a63a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a63e:	d956      	bls.n	800a6ee <forward_dense+0x3c6>
 800a640:	7888      	ldrb	r0, [r1, #2]
 800a642:	ed92 6a02 	vldr	s12, [r2, #8]
 800a646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a64a:	edd0 7a00 	vldr	s15, [r0]
 800a64e:	f102 000c 	add.w	r0, r2, #12
 800a652:	4581      	cmp	r9, r0
 800a654:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a658:	d949      	bls.n	800a6ee <forward_dense+0x3c6>
 800a65a:	78c8      	ldrb	r0, [r1, #3]
 800a65c:	ed92 6a03 	vldr	s12, [r2, #12]
 800a660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a664:	edd0 7a00 	vldr	s15, [r0]
 800a668:	f102 0010 	add.w	r0, r2, #16
 800a66c:	4581      	cmp	r9, r0
 800a66e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a672:	d93c      	bls.n	800a6ee <forward_dense+0x3c6>
 800a674:	7908      	ldrb	r0, [r1, #4]
 800a676:	ed92 6a04 	vldr	s12, [r2, #16]
 800a67a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a67e:	edd0 7a00 	vldr	s15, [r0]
 800a682:	f102 0014 	add.w	r0, r2, #20
 800a686:	4581      	cmp	r9, r0
 800a688:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a68c:	d92f      	bls.n	800a6ee <forward_dense+0x3c6>
 800a68e:	7948      	ldrb	r0, [r1, #5]
 800a690:	ed92 6a05 	vldr	s12, [r2, #20]
 800a694:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a698:	edd0 7a00 	vldr	s15, [r0]
 800a69c:	f102 0018 	add.w	r0, r2, #24
 800a6a0:	4581      	cmp	r9, r0
 800a6a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6a6:	d922      	bls.n	800a6ee <forward_dense+0x3c6>
 800a6a8:	7988      	ldrb	r0, [r1, #6]
 800a6aa:	ed92 6a06 	vldr	s12, [r2, #24]
 800a6ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6b2:	edd0 7a00 	vldr	s15, [r0]
 800a6b6:	f102 001c 	add.w	r0, r2, #28
 800a6ba:	4581      	cmp	r9, r0
 800a6bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6c0:	d915      	bls.n	800a6ee <forward_dense+0x3c6>
 800a6c2:	79c8      	ldrb	r0, [r1, #7]
 800a6c4:	ed92 6a07 	vldr	s12, [r2, #28]
 800a6c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6cc:	edd0 7a00 	vldr	s15, [r0]
 800a6d0:	f102 0020 	add.w	r0, r2, #32
 800a6d4:	4581      	cmp	r9, r0
 800a6d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6da:	d908      	bls.n	800a6ee <forward_dense+0x3c6>
 800a6dc:	edd2 7a08 	vldr	s15, [r2, #32]
 800a6e0:	7a0a      	ldrb	r2, [r1, #8]
 800a6e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a6e6:	ed92 6a00 	vldr	s12, [r2]
 800a6ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a6ee:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800a6f2:	e6f0      	b.n	800a4d6 <forward_dense+0x1ae>
 800a6f4:	eddf 4a02 	vldr	s9, [pc, #8]	; 800a700 <forward_dense+0x3d8>
 800a6f8:	e6d6      	b.n	800a4a8 <forward_dense+0x180>
 800a6fa:	bf00      	nop
 800a6fc:	3ffffff8 	.word	0x3ffffff8
 800a700:	00000000 	.word	0x00000000
 800a704:	eef0 6a47 	vmov.f32	s13, s14
 800a708:	4659      	mov	r1, fp
 800a70a:	463a      	mov	r2, r7
 800a70c:	4694      	mov	ip, r2
 800a70e:	460c      	mov	r4, r1
 800a710:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800a714:	ecf4 7a01 	vldmia	r4!, {s15}
 800a718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a71c:	ed90 6a00 	vldr	s12, [r0]
 800a720:	9806      	ldr	r0, [sp, #24]
 800a722:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a726:	4284      	cmp	r4, r0
 800a728:	d866      	bhi.n	800a7f8 <forward_dense+0x4d0>
 800a72a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a72c:	f102 0611 	add.w	r6, r2, #17
 800a730:	3209      	adds	r2, #9
 800a732:	eba0 0801 	sub.w	r8, r0, r1
 800a736:	3124      	adds	r1, #36	; 0x24
 800a738:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800a73c:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800a740:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a744:	3208      	adds	r2, #8
 800a746:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a74a:	3120      	adds	r1, #32
 800a74c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a750:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800a754:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800a758:	edd0 7a00 	vldr	s15, [r0]
 800a75c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a760:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a764:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a76c:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800a770:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800a774:	ed90 2a00 	vldr	s4, [r0]
 800a778:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a77c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a780:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a788:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800a78c:	edd0 2a00 	vldr	s5, [r0]
 800a790:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a794:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a79c:	ed90 3a00 	vldr	s6, [r0]
 800a7a0:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a7a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a7ac:	edd0 3a00 	vldr	s7, [r0]
 800a7b0:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a7b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7b8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a7bc:	ed90 4a00 	vldr	s8, [r0]
 800a7c0:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a7c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7c8:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a7cc:	ed90 5a00 	vldr	s10, [r0]
 800a7d0:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a7d4:	4296      	cmp	r6, r2
 800a7d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7da:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a7de:	edd0 5a00 	vldr	s11, [r0]
 800a7e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a7e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a7ea:	d1a9      	bne.n	800a740 <forward_dense+0x418>
 800a7ec:	f108 0801 	add.w	r8, r8, #1
 800a7f0:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800a7f4:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 800a7f8:	454c      	cmp	r4, r9
 800a7fa:	f4bf af78 	bcs.w	800a6ee <forward_dense+0x3c6>
 800a7fe:	f89c 2000 	ldrb.w	r2, [ip]
 800a802:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a806:	edd2 7a00 	vldr	s15, [r2]
 800a80a:	4622      	mov	r2, r4
 800a80c:	ecb2 6a01 	vldmia	r2!, {s12}
 800a810:	4591      	cmp	r9, r2
 800a812:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a816:	f67f af6a 	bls.w	800a6ee <forward_dense+0x3c6>
 800a81a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800a81e:	ed94 6a01 	vldr	s12, [r4, #4]
 800a822:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a826:	edd2 7a00 	vldr	s15, [r2]
 800a82a:	f104 0208 	add.w	r2, r4, #8
 800a82e:	4591      	cmp	r9, r2
 800a830:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a834:	f67f af5b 	bls.w	800a6ee <forward_dense+0x3c6>
 800a838:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800a83c:	ed94 6a02 	vldr	s12, [r4, #8]
 800a840:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a844:	edd2 7a00 	vldr	s15, [r2]
 800a848:	f104 020c 	add.w	r2, r4, #12
 800a84c:	4591      	cmp	r9, r2
 800a84e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a852:	f67f af4c 	bls.w	800a6ee <forward_dense+0x3c6>
 800a856:	f89c 2003 	ldrb.w	r2, [ip, #3]
 800a85a:	ed94 6a03 	vldr	s12, [r4, #12]
 800a85e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a862:	edd2 7a00 	vldr	s15, [r2]
 800a866:	f104 0210 	add.w	r2, r4, #16
 800a86a:	4591      	cmp	r9, r2
 800a86c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a870:	f67f af3d 	bls.w	800a6ee <forward_dense+0x3c6>
 800a874:	f89c 2004 	ldrb.w	r2, [ip, #4]
 800a878:	ed94 6a04 	vldr	s12, [r4, #16]
 800a87c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a880:	edd2 7a00 	vldr	s15, [r2]
 800a884:	f104 0214 	add.w	r2, r4, #20
 800a888:	4591      	cmp	r9, r2
 800a88a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a88e:	f67f af2e 	bls.w	800a6ee <forward_dense+0x3c6>
 800a892:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800a896:	ed94 6a05 	vldr	s12, [r4, #20]
 800a89a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a89e:	edd2 7a00 	vldr	s15, [r2]
 800a8a2:	f104 0218 	add.w	r2, r4, #24
 800a8a6:	4591      	cmp	r9, r2
 800a8a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8ac:	f67f af1f 	bls.w	800a6ee <forward_dense+0x3c6>
 800a8b0:	f89c 2006 	ldrb.w	r2, [ip, #6]
 800a8b4:	ed94 6a06 	vldr	s12, [r4, #24]
 800a8b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a8bc:	edd2 7a00 	vldr	s15, [r2]
 800a8c0:	f104 021c 	add.w	r2, r4, #28
 800a8c4:	4591      	cmp	r9, r2
 800a8c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8ca:	f67f af10 	bls.w	800a6ee <forward_dense+0x3c6>
 800a8ce:	f89c 2007 	ldrb.w	r2, [ip, #7]
 800a8d2:	ed94 6a07 	vldr	s12, [r4, #28]
 800a8d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a8da:	edd2 7a00 	vldr	s15, [r2]
 800a8de:	f104 0220 	add.w	r2, r4, #32
 800a8e2:	4591      	cmp	r9, r2
 800a8e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8e8:	f67f af01 	bls.w	800a6ee <forward_dense+0x3c6>
 800a8ec:	f89c 2008 	ldrb.w	r2, [ip, #8]
 800a8f0:	edd4 7a08 	vldr	s15, [r4, #32]
 800a8f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a8f8:	ed92 6a00 	vldr	s12, [r2]
 800a8fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a900:	e6f5      	b.n	800a6ee <forward_dense+0x3c6>
 800a902:	eef0 6a47 	vmov.f32	s13, s14
 800a906:	4659      	mov	r1, fp
 800a908:	463a      	mov	r2, r7
 800a90a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a90e:	ecf1 7a01 	vldmia	r1!, {s15}
 800a912:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a916:	ed90 6a00 	vldr	s12, [r0]
 800a91a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a91e:	e6f5      	b.n	800a70c <forward_dense+0x3e4>
 800a920:	463a      	mov	r2, r7
 800a922:	eddb 7a00 	vldr	s15, [fp]
 800a926:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a928:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a92c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a930:	edd0 6a00 	vldr	s13, [r0]
 800a934:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a938:	e7e7      	b.n	800a90a <forward_dense+0x5e2>
 800a93a:	4615      	mov	r5, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f47f ad91 	bne.w	800a464 <forward_dense+0x13c>
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	9904      	ldr	r1, [sp, #16]
 800a946:	428a      	cmp	r2, r1
 800a948:	f67f add4 	bls.w	800a4f4 <forward_dense+0x1cc>
 800a94c:	4690      	mov	r8, r2
 800a94e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a952:	460c      	mov	r4, r1
 800a954:	f000 0c0f 	and.w	ip, r0, #15
 800a958:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a95c:	eb0b 0602 	add.w	r6, fp, r2
 800a960:	4692      	mov	sl, r2
 800a962:	9306      	str	r3, [sp, #24]
 800a964:	2d00      	cmp	r5, #0
 800a966:	f000 81d7 	beq.w	800ad18 <forward_dense+0x9f0>
 800a96a:	280f      	cmp	r0, #15
 800a96c:	ecb5 0a01 	vldmia	r5!, {s0}
 800a970:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 800a700 <forward_dense+0x3d8>
 800a974:	f240 81d7 	bls.w	800ad26 <forward_dense+0x9fe>
 800a978:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800a97c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a980:	4601      	mov	r1, r0
 800a982:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800a986:	3910      	subs	r1, #16
 800a988:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a98c:	3340      	adds	r3, #64	; 0x40
 800a98e:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 800a992:	290f      	cmp	r1, #15
 800a994:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a998:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800a99c:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800a9a0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a9a4:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800a9a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a9ac:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 800a9b0:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800a9b4:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800a9b8:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800a9bc:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800a9c0:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800a9c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a9c8:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a9cc:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a9d0:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a9d4:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a9d8:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800a9dc:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800a9e0:	eeee 7a06 	vfma.f32	s15, s28, s12
 800a9e4:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 800a9e8:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 800a9ec:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a9f0:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 800a9f4:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800a9f8:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 800a9fc:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800aa00:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 800aa04:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800aa08:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800aa0c:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800aa10:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800aa14:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800aa18:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800aa1c:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800aa20:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800aa24:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800aa28:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800aa2c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800aa30:	eee8 7a88 	vfma.f32	s15, s17, s16
 800aa34:	eee0 7a81 	vfma.f32	s15, s1, s2
 800aa38:	eee1 7a82 	vfma.f32	s15, s3, s4
 800aa3c:	eee2 7a83 	vfma.f32	s15, s5, s6
 800aa40:	eee3 7a84 	vfma.f32	s15, s7, s8
 800aa44:	eee4 7a85 	vfma.f32	s15, s9, s10
 800aa48:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aa4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aa50:	d897      	bhi.n	800a982 <forward_dense+0x65a>
 800aa52:	eb07 010a 	add.w	r1, r7, sl
 800aa56:	4663      	mov	r3, ip
 800aa58:	4632      	mov	r2, r6
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d075      	beq.n	800ab4a <forward_dense+0x822>
 800aa5e:	ed92 6a00 	vldr	s12, [r2]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	edd1 7a00 	vldr	s15, [r1]
 800aa68:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa6c:	d06d      	beq.n	800ab4a <forward_dense+0x822>
 800aa6e:	ed92 6a01 	vldr	s12, [r2, #4]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	edd1 7a01 	vldr	s15, [r1, #4]
 800aa78:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa7c:	d065      	beq.n	800ab4a <forward_dense+0x822>
 800aa7e:	ed92 6a02 	vldr	s12, [r2, #8]
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	edd1 7a02 	vldr	s15, [r1, #8]
 800aa88:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa8c:	d05d      	beq.n	800ab4a <forward_dense+0x822>
 800aa8e:	ed92 6a03 	vldr	s12, [r2, #12]
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	edd1 7a03 	vldr	s15, [r1, #12]
 800aa98:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aa9c:	d055      	beq.n	800ab4a <forward_dense+0x822>
 800aa9e:	ed92 6a04 	vldr	s12, [r2, #16]
 800aaa2:	2b05      	cmp	r3, #5
 800aaa4:	edd1 7a04 	vldr	s15, [r1, #16]
 800aaa8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aaac:	d04d      	beq.n	800ab4a <forward_dense+0x822>
 800aaae:	ed92 6a05 	vldr	s12, [r2, #20]
 800aab2:	2b06      	cmp	r3, #6
 800aab4:	edd1 7a05 	vldr	s15, [r1, #20]
 800aab8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aabc:	d045      	beq.n	800ab4a <forward_dense+0x822>
 800aabe:	ed92 6a06 	vldr	s12, [r2, #24]
 800aac2:	2b07      	cmp	r3, #7
 800aac4:	edd1 7a06 	vldr	s15, [r1, #24]
 800aac8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aacc:	d03d      	beq.n	800ab4a <forward_dense+0x822>
 800aace:	ed92 6a07 	vldr	s12, [r2, #28]
 800aad2:	2b08      	cmp	r3, #8
 800aad4:	edd1 7a07 	vldr	s15, [r1, #28]
 800aad8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aadc:	d035      	beq.n	800ab4a <forward_dense+0x822>
 800aade:	ed92 6a08 	vldr	s12, [r2, #32]
 800aae2:	2b09      	cmp	r3, #9
 800aae4:	edd1 7a08 	vldr	s15, [r1, #32]
 800aae8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aaec:	d02d      	beq.n	800ab4a <forward_dense+0x822>
 800aaee:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800aaf2:	2b0a      	cmp	r3, #10
 800aaf4:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800aaf8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aafc:	d025      	beq.n	800ab4a <forward_dense+0x822>
 800aafe:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 800ab02:	2b0b      	cmp	r3, #11
 800ab04:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800ab08:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab0c:	d01d      	beq.n	800ab4a <forward_dense+0x822>
 800ab0e:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800ab12:	2b0c      	cmp	r3, #12
 800ab14:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800ab18:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab1c:	d015      	beq.n	800ab4a <forward_dense+0x822>
 800ab1e:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 800ab22:	3b0d      	subs	r3, #13
 800ab24:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800ab28:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab2c:	d00d      	beq.n	800ab4a <forward_dense+0x822>
 800ab2e:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800ab38:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab3c:	d005      	beq.n	800ab4a <forward_dense+0x822>
 800ab3e:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800ab42:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ab46:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab4a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ab4e:	4477      	add	r7, lr
 800ab50:	ece4 6a01 	vstmia	r4!, {s13}
 800ab54:	4544      	cmp	r4, r8
 800ab56:	f4ff af05 	bcc.w	800a964 <forward_dense+0x63c>
 800ab5a:	9b06      	ldr	r3, [sp, #24]
 800ab5c:	9a01      	ldr	r2, [sp, #4]
 800ab5e:	e4c1      	b.n	800a4e4 <forward_dense+0x1bc>
 800ab60:	9901      	ldr	r1, [sp, #4]
 800ab62:	9a04      	ldr	r2, [sp, #16]
 800ab64:	4291      	cmp	r1, r2
 800ab66:	f67f acc5 	bls.w	800a4f4 <forward_dense+0x1cc>
 800ab6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab6c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab70:	4691      	mov	r9, r2
 800ab72:	eb07 0c01 	add.w	ip, r7, r1
 800ab76:	9903      	ldr	r1, [sp, #12]
 800ab78:	3901      	subs	r1, #1
 800ab7a:	9106      	str	r1, [sp, #24]
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	f000 80c0 	beq.w	800ad02 <forward_dense+0x9da>
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	ecb5 2a01 	vldmia	r5!, {s4}
 800ab88:	eddf 6a83 	vldr	s13, [pc, #524]	; 800ad98 <forward_dense+0xa70>
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	f000 80c0 	beq.w	800ad12 <forward_dense+0x9ea>
 800ab92:	1d39      	adds	r1, r7, #4
 800ab94:	f10b 0220 	add.w	r2, fp, #32
 800ab98:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800ab9c:	3104      	adds	r1, #4
 800ab9e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800aba2:	3220      	adds	r2, #32
 800aba4:	f006 0e0f 	and.w	lr, r6, #15
 800aba8:	0936      	lsrs	r6, r6, #4
 800abaa:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 800abae:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800abb2:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 800abb6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800abba:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 800abbe:	edde 7a00 	vldr	s15, [lr]
 800abc2:	edd6 2a00 	vldr	s5, [r6]
 800abc6:	0926      	lsrs	r6, r4, #4
 800abc8:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800abcc:	f004 040f 	and.w	r4, r4, #15
 800abd0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800abd4:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 800abd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abdc:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800abe0:	eee2 7aa3 	vfma.f32	s15, s5, s7
 800abe4:	edd6 2a00 	vldr	s5, [r6]
 800abe8:	edd4 3a00 	vldr	s7, [r4]
 800abec:	0904      	lsrs	r4, r0, #4
 800abee:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 800abf2:	f000 000f 	and.w	r0, r0, #15
 800abf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abfa:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800abfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac02:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 800ac06:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 800ac0a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ac0e:	eee3 7aa4 	vfma.f32	s15, s7, s9
 800ac12:	edd4 3a00 	vldr	s7, [r4]
 800ac16:	edd0 4a00 	vldr	s9, [r0]
 800ac1a:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 800ac1e:	4561      	cmp	r1, ip
 800ac20:	ea4f 1410 	mov.w	r4, r0, lsr #4
 800ac24:	f000 000f 	and.w	r0, r0, #15
 800ac28:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ac2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac34:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800ac38:	edd4 4a00 	vldr	s9, [r4]
 800ac3c:	edd0 5a00 	vldr	s11, [r0]
 800ac40:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ac44:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ac48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ac4c:	d1a4      	bne.n	800ab98 <forward_dense+0x870>
 800ac4e:	f1ac 0804 	sub.w	r8, ip, #4
 800ac52:	f8dd e014 	ldr.w	lr, [sp, #20]
 800ac56:	9a03      	ldr	r2, [sp, #12]
 800ac58:	4596      	cmp	lr, r2
 800ac5a:	d229      	bcs.n	800acb0 <forward_dense+0x988>
 800ac5c:	9a06      	ldr	r2, [sp, #24]
 800ac5e:	f10e 0108 	add.w	r1, lr, #8
 800ac62:	f108 34ff 	add.w	r4, r8, #4294967295
 800ac66:	eba2 060e 	sub.w	r6, r2, lr
 800ac6a:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 800ac6e:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800ac72:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800ac76:	3108      	adds	r1, #8
 800ac78:	ed11 5a03 	vldr	s10, [r1, #-12]
 800ac7c:	f002 000f 	and.w	r0, r2, #15
 800ac80:	0912      	lsrs	r2, r2, #4
 800ac82:	ed11 6a04 	vldr	s12, [r1, #-16]
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ac90:	edd0 7a00 	vldr	s15, [r0]
 800ac94:	edd2 5a00 	vldr	s11, [r2]
 800ac98:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac9c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aca0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aca4:	d1e5      	bne.n	800ac72 <forward_dense+0x94a>
 800aca6:	f10a 0a01 	add.w	sl, sl, #1
 800acaa:	44d0      	add	r8, sl
 800acac:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800acb0:	9a08      	ldr	r2, [sp, #32]
 800acb2:	b1ca      	cbz	r2, 800ace8 <forward_dense+0x9c0>
 800acb4:	f898 2000 	ldrb.w	r2, [r8]
 800acb8:	edde 7a00 	vldr	s15, [lr]
 800acbc:	0912      	lsrs	r2, r2, #4
 800acbe:	9902      	ldr	r1, [sp, #8]
 800acc0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800acc4:	440f      	add	r7, r1
 800acc6:	448c      	add	ip, r1
 800acc8:	ed92 6a00 	vldr	s12, [r2]
 800accc:	9a01      	ldr	r2, [sp, #4]
 800acce:	eee6 6a27 	vfma.f32	s13, s12, s15
 800acd2:	ee32 2a26 	vadd.f32	s4, s4, s13
 800acd6:	eca9 2a01 	vstmia	r9!, {s4}
 800acda:	454a      	cmp	r2, r9
 800acdc:	f63f af4e 	bhi.w	800ab7c <forward_dense+0x854>
 800ace0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ace4:	f7ff bbfe 	b.w	800a4e4 <forward_dense+0x1bc>
 800ace8:	9a02      	ldr	r2, [sp, #8]
 800acea:	ee72 6a26 	vadd.f32	s13, s4, s13
 800acee:	4417      	add	r7, r2
 800acf0:	4494      	add	ip, r2
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	ece9 6a01 	vstmia	r9!, {s13}
 800acf8:	4591      	cmp	r9, r2
 800acfa:	d2f1      	bcs.n	800ace0 <forward_dense+0x9b8>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	f47f af40 	bne.w	800ab82 <forward_dense+0x85a>
 800ad02:	9a07      	ldr	r2, [sp, #28]
 800ad04:	eeb0 2a47 	vmov.f32	s4, s14
 800ad08:	eddf 6a23 	vldr	s13, [pc, #140]	; 800ad98 <forward_dense+0xa70>
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	f47f af40 	bne.w	800ab92 <forward_dense+0x86a>
 800ad12:	46de      	mov	lr, fp
 800ad14:	46b8      	mov	r8, r7
 800ad16:	e79e      	b.n	800ac56 <forward_dense+0x92e>
 800ad18:	280f      	cmp	r0, #15
 800ad1a:	eeb0 0a47 	vmov.f32	s0, s14
 800ad1e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800ad98 <forward_dense+0xa70>
 800ad22:	f63f ae29 	bhi.w	800a978 <forward_dense+0x650>
 800ad26:	4603      	mov	r3, r0
 800ad28:	4639      	mov	r1, r7
 800ad2a:	465a      	mov	r2, fp
 800ad2c:	e695      	b.n	800aa5a <forward_dense+0x732>
 800ad2e:	b01b      	add	sp, #108	; 0x6c
 800ad30:	ecbd 8b0e 	vpop	{d8-d14}
 800ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad38:	465a      	mov	r2, fp
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	e465      	b.n	800a60a <forward_dense+0x2e2>
 800ad3e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	f43f ab40 	beq.w	800a3ca <forward_dense+0xa2>
 800ad4a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ad4e:	f009 f90f 	bl	8013f70 <ai_array_get_byte_size>
 800ad52:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ad56:	4602      	mov	r2, r0
 800ad58:	4651      	mov	r1, sl
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f009 f9b2 	bl	80140c4 <memcpy>
 800ad60:	4682      	mov	sl, r0
 800ad62:	f7ff bb32 	b.w	800a3ca <forward_dense+0xa2>
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d00b      	beq.n	800ad82 <forward_dense+0xa5a>
 800ad6a:	f04f 0900 	mov.w	r9, #0
 800ad6e:	f7ff bb27 	b.w	800a3c0 <forward_dense+0x98>
 800ad72:	930c      	str	r3, [sp, #48]	; 0x30
 800ad74:	f7ff baff 	b.w	800a376 <forward_dense+0x4e>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	f7ff bafa 	b.w	800a376 <forward_dense+0x4e>
 800ad82:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800ad86:	f7ff bb20 	b.w	800a3ca <forward_dense+0xa2>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	deff      	udf	#255	; 0xff
 800ad90:	2300      	movs	r3, #0
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	deff      	udf	#255	; 0xff
 800ad96:	bf00      	nop
 800ad98:	00000000 	.word	0x00000000

0800ad9c <func_dummy>:
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop

0800ada0 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800ada0:	6982      	ldr	r2, [r0, #24]
 800ada2:	8813      	ldrh	r3, [r2, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 81a3 	beq.w	800b0f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 800adaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adae:	ed2d 8b04 	vpush	{d8-d9}
 800adb2:	6851      	ldr	r1, [r2, #4]
 800adb4:	b0d9      	sub	sp, #356	; 0x164
 800adb6:	4680      	mov	r8, r0
 800adb8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800adbc:	f1ba 0f00 	cmp.w	sl, #0
 800adc0:	d001      	beq.n	800adc6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26>
 800adc2:	f8da a000 	ldr.w	sl, [sl]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	f000 8369 	beq.w	800b49e <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fe>
 800adcc:	690a      	ldr	r2, [r1, #16]
 800adce:	9218      	str	r2, [sp, #96]	; 0x60
 800add0:	b10a      	cbz	r2, 800add6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x36>
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	9218      	str	r2, [sp, #96]	; 0x60
 800add6:	2b02      	cmp	r3, #2
 800add8:	f000 8187 	beq.w	800b0ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x34a>
 800addc:	69ca      	ldr	r2, [r1, #28]
 800adde:	2a00      	cmp	r2, #0
 800ade0:	f000 82f4 	beq.w	800b3cc <forward_conv2d_nl_pool_integer_SSSA_ch+0x62c>
 800ade4:	8b08      	ldrh	r0, [r1, #24]
 800ade6:	f8d2 b000 	ldr.w	fp, [r2]
 800adea:	2801      	cmp	r0, #1
 800adec:	f200 8182 	bhi.w	800b0f4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x354>
 800adf0:	2000      	movs	r0, #0
 800adf2:	901d      	str	r0, [sp, #116]	; 0x74
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	f000 8355 	beq.w	800b4a4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x704>
 800adfa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 834c 	beq.w	800b49a <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fa>
 800ae02:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ae0c:	9133      	str	r1, [sp, #204]	; 0xcc
 800ae0e:	901a      	str	r0, [sp, #104]	; 0x68
 800ae10:	2900      	cmp	r1, #0
 800ae12:	f000 82d6 	beq.w	800b3c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x622>
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	9319      	str	r3, [sp, #100]	; 0x64
 800ae1a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ae1e:	f8da 000c 	ldr.w	r0, [sl, #12]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	6845      	ldr	r5, [r0, #4]
 800ae26:	461e      	mov	r6, r3
 800ae28:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ae2a:	9516      	str	r5, [sp, #88]	; 0x58
 800ae2c:	b2b6      	uxth	r6, r6
 800ae2e:	68e4      	ldr	r4, [r4, #12]
 800ae30:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 800ae34:	ee08 6a90 	vmov	s17, r6
 800ae38:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800ae3c:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 800ae40:	ee08 6a10 	vmov	s16, r6
 800ae44:	68e6      	ldr	r6, [r4, #12]
 800ae46:	68a4      	ldr	r4, [r4, #8]
 800ae48:	9322      	str	r3, [sp, #136]	; 0x88
 800ae4a:	9439      	str	r4, [sp, #228]	; 0xe4
 800ae4c:	680b      	ldr	r3, [r1, #0]
 800ae4e:	f8db c00c 	ldr.w	ip, [fp, #12]
 800ae52:	f8d8 7054 	ldr.w	r7, [r8, #84]	; 0x54
 800ae56:	961e      	str	r6, [sp, #120]	; 0x78
 800ae58:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800ae5c:	903d      	str	r0, [sp, #244]	; 0xf4
 800ae5e:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 800ae62:	9037      	str	r0, [sp, #220]	; 0xdc
 800ae64:	b2a8      	uxth	r0, r5
 800ae66:	9038      	str	r0, [sp, #224]	; 0xe0
 800ae68:	b298      	uxth	r0, r3
 800ae6a:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae6c:	8888      	ldrh	r0, [r1, #4]
 800ae6e:	6889      	ldr	r1, [r1, #8]
 800ae70:	902e      	str	r0, [sp, #184]	; 0xb8
 800ae72:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
 800ae76:	902f      	str	r0, [sp, #188]	; 0xbc
 800ae78:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
 800ae7c:	9030      	str	r0, [sp, #192]	; 0xc0
 800ae7e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800ae82:	9020      	str	r0, [sp, #128]	; 0x80
 800ae84:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800ae88:	9029      	str	r0, [sp, #164]	; 0xa4
 800ae8a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800ae8e:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae90:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 800ae94:	903a      	str	r0, [sp, #232]	; 0xe8
 800ae96:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800ae9a:	903b      	str	r0, [sp, #236]	; 0xec
 800ae9c:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800aea0:	9026      	str	r0, [sp, #152]	; 0x98
 800aea2:	6838      	ldr	r0, [r7, #0]
 800aea4:	902b      	str	r0, [sp, #172]	; 0xac
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	903c      	str	r0, [sp, #240]	; 0xf0
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	f000 8264 	beq.w	800b378 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800aeb0:	6892      	ldr	r2, [r2, #8]
 800aeb2:	2a00      	cmp	r2, #0
 800aeb4:	f000 8260 	beq.w	800b378 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800aeb8:	6990      	ldr	r0, [r2, #24]
 800aeba:	2800      	cmp	r0, #0
 800aebc:	bf08      	it	eq
 800aebe:	4602      	moveq	r2, r0
 800aec0:	922a      	str	r2, [sp, #168]	; 0xa8
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aec6:	b2aa      	uxth	r2, r5
 800aec8:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800aecc:	fa13 f181 	uxtah	r1, r3, r1
 800aed0:	4423      	add	r3, r4
 800aed2:	9223      	str	r2, [sp, #140]	; 0x8c
 800aed4:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 800aed8:	4421      	add	r1, r4
 800aeda:	9321      	str	r3, [sp, #132]	; 0x84
 800aedc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aede:	ac4d      	add	r4, sp, #308	; 0x134
 800aee0:	6987      	ldr	r7, [r0, #24]
 800aee2:	1acd      	subs	r5, r1, r3
 800aee4:	f240 4101 	movw	r1, #1025	; 0x401
 800aee8:	f8cd c150 	str.w	ip, [sp, #336]	; 0x150
 800aeec:	fbb5 f3f2 	udiv	r3, r5, r2
 800aef0:	aa49      	add	r2, sp, #292	; 0x124
 800aef2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800aef4:	9315      	str	r3, [sp, #84]	; 0x54
 800aef6:	2300      	movs	r3, #0
 800aef8:	9256      	str	r2, [sp, #344]	; 0x158
 800aefa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aefe:	69ad      	ldr	r5, [r5, #24]
 800af00:	9351      	str	r3, [sp, #324]	; 0x144
 800af02:	9345      	str	r3, [sp, #276]	; 0x114
 800af04:	9349      	str	r3, [sp, #292]	; 0x124
 800af06:	9348      	str	r3, [sp, #288]	; 0x120
 800af08:	934c      	str	r3, [sp, #304]	; 0x130
 800af0a:	9357      	str	r3, [sp, #348]	; 0x15c
 800af0c:	952c      	str	r5, [sp, #176]	; 0xb0
 800af0e:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 800af12:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 800af16:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800af1a:	e9cd 2152 	strd	r2, r1, [sp, #328]	; 0x148
 800af1e:	f240 4102 	movw	r1, #1026	; 0x402
 800af22:	931f      	str	r3, [sp, #124]	; 0x7c
 800af24:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800af28:	9155      	str	r1, [sp, #340]	; 0x154
 800af2a:	4601      	mov	r1, r0
 800af2c:	a851      	add	r0, sp, #324	; 0x144
 800af2e:	9331      	str	r3, [sp, #196]	; 0xc4
 800af30:	f009 f856 	bl	8013fe0 <core_tensor_clone>
 800af34:	4620      	mov	r0, r4
 800af36:	4639      	mov	r1, r7
 800af38:	f009 f884 	bl	8014044 <core_array_clone>
 800af3c:	9457      	str	r4, [sp, #348]	; 0x15c
 800af3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af42:	f8da 2000 	ldr.w	r2, [sl]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f9bd 40ac 	ldrsh.w	r4, [sp, #172]	; 0xac
 800af4c:	931c      	str	r3, [sp, #112]	; 0x70
 800af4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800af50:	f8db 0000 	ldr.w	r0, [fp]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	9327      	str	r3, [sp, #156]	; 0x9c
 800af5a:	f8d9 3000 	ldr.w	r3, [r9]
 800af5e:	2a00      	cmp	r2, #0
 800af60:	f000 81c9 	beq.w	800b2f6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800af64:	6851      	ldr	r1, [r2, #4]
 800af66:	2900      	cmp	r1, #0
 800af68:	f000 81c5 	beq.w	800b2f6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800af6c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800af70:	f1bc 0f00 	cmp.w	ip, #0
 800af74:	f000 81bf 	beq.w	800b2f6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800af78:	6809      	ldr	r1, [r1, #0]
 800af7a:	ed91 0a00 	vldr	s0, [r1]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 81b6 	beq.w	800b2f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800af84:	6859      	ldr	r1, [r3, #4]
 800af86:	2900      	cmp	r1, #0
 800af88:	f000 81b2 	beq.w	800b2f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800af8c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800af90:	f1bc 0f00 	cmp.w	ip, #0
 800af94:	f000 81ac 	beq.w	800b2f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800af98:	6809      	ldr	r1, [r1, #0]
 800af9a:	edd1 0a00 	vldr	s1, [r1]
 800af9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800afa0:	2901      	cmp	r1, #1
 800afa2:	f040 81a2 	bne.w	800b2ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800afa6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800afa8:	2901      	cmp	r1, #1
 800afaa:	f040 819e 	bne.w	800b2ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800afae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800afb0:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800afb2:	4329      	orrs	r1, r5
 800afb4:	f040 8199 	bne.w	800b2ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800afb8:	e9dd 1537 	ldrd	r1, r5, [sp, #220]	; 0xdc
 800afbc:	2901      	cmp	r1, #1
 800afbe:	bf08      	it	eq
 800afc0:	2d01      	cmpeq	r5, #1
 800afc2:	bf0c      	ite	eq
 800afc4:	2101      	moveq	r1, #1
 800afc6:	2100      	movne	r1, #0
 800afc8:	9124      	str	r1, [sp, #144]	; 0x90
 800afca:	991d      	ldr	r1, [sp, #116]	; 0x74
 800afcc:	f8da c018 	ldr.w	ip, [sl, #24]
 800afd0:	f8db e018 	ldr.w	lr, [fp, #24]
 800afd4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800afd8:	6989      	ldr	r1, [r1, #24]
 800afda:	951d      	str	r5, [sp, #116]	; 0x74
 800afdc:	6889      	ldr	r1, [r1, #8]
 800afde:	f8de 5008 	ldr.w	r5, [lr, #8]
 800afe2:	9132      	str	r1, [sp, #200]	; 0xc8
 800afe4:	952d      	str	r5, [sp, #180]	; 0xb4
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	f000 81c0 	beq.w	800b36c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800afec:	6851      	ldr	r1, [r2, #4]
 800afee:	2900      	cmp	r1, #0
 800aff0:	f000 81e5 	beq.w	800b3be <forward_conv2d_nl_pool_integer_SSSA_ch+0x61e>
 800aff4:	8852      	ldrh	r2, [r2, #2]
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	f000 81b8 	beq.w	800b36c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800affc:	684a      	ldr	r2, [r1, #4]
 800affe:	f992 2000 	ldrsb.w	r2, [r2]
 800b002:	9234      	str	r2, [sp, #208]	; 0xd0
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 81b5 	beq.w	800b374 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	f000 81d4 	beq.w	800b3ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x61a>
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 81ad 	beq.w	800b374 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800b01a:	6853      	ldr	r3, [r2, #4]
 800b01c:	f993 3000 	ldrsb.w	r3, [r3]
 800b020:	9336      	str	r3, [sp, #216]	; 0xd8
 800b022:	b110      	cbz	r0, 800b02a <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800b024:	6840      	ldr	r0, [r0, #4]
 800b026:	b100      	cbz	r0, 800b02a <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800b028:	6800      	ldr	r0, [r0, #0]
 800b02a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	f000 81bd 	beq.w	800b3ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800b032:	461a      	mov	r2, r3
 800b034:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800b038:	429a      	cmp	r2, r3
 800b03a:	bf0c      	ite	eq
 800b03c:	2317      	moveq	r3, #23
 800b03e:	2300      	movne	r3, #0
 800b040:	9328      	str	r3, [sp, #160]	; 0xa0
 800b042:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b044:	ee18 1a90 	vmov	r1, s17
 800b048:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
 800b04c:	462a      	mov	r2, r5
 800b04e:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800b052:	9335      	str	r3, [sp, #212]	; 0xd4
 800b054:	f001 f9de 	bl	800c414 <align_factor_ch>
 800b058:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b05a:	9543      	str	r5, [sp, #268]	; 0x10c
 800b05c:	698b      	ldr	r3, [r1, #24]
 800b05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b062:	f008 ff85 	bl	8013f70 <ai_array_get_byte_size>
 800b066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b068:	9044      	str	r0, [sp, #272]	; 0x110
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8106 	beq.w	800b27c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4dc>
 800b070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b072:	f04f 0b00 	mov.w	fp, #0
 800b076:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800b07a:	fb02 f10a 	mul.w	r1, r2, sl
 800b07e:	b292      	uxth	r2, r2
 800b080:	9422      	str	r4, [sp, #136]	; 0x88
 800b082:	9125      	str	r1, [sp, #148]	; 0x94
 800b084:	9224      	str	r2, [sp, #144]	; 0x90
 800b086:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800b08a:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
 800b08e:	2901      	cmp	r1, #1
 800b090:	bf08      	it	eq
 800b092:	2a01      	cmpeq	r2, #1
 800b094:	ee18 1a10 	vmov	r1, s16
 800b098:	bf14      	ite	ne
 800b09a:	2201      	movne	r2, #1
 800b09c:	2200      	moveq	r2, #0
 800b09e:	2907      	cmp	r1, #7
 800b0a0:	bf88      	it	hi
 800b0a2:	f042 0201 	orrhi.w	r2, r2, #1
 800b0a6:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800b0a8:	923e      	str	r2, [sp, #248]	; 0xf8
 800b0aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b0ac:	fb01 f202 	mul.w	r2, r1, r2
 800b0b0:	fb03 f202 	mul.w	r2, r3, r2
 800b0b4:	fb01 f303 	mul.w	r3, r1, r3
 800b0b8:	923d      	str	r2, [sp, #244]	; 0xf4
 800b0ba:	933f      	str	r3, [sp, #252]	; 0xfc
 800b0bc:	b28b      	uxth	r3, r1
 800b0be:	ee09 3a10 	vmov	s18, r3
 800b0c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b0c4:	e9cd 3b1a 	strd	r3, fp, [sp, #104]	; 0x68
 800b0c8:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800b0cc:	931c      	str	r3, [sp, #112]	; 0x70
 800b0ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f340 80de 	ble.w	800b294 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4f4>
 800b0d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b0da:	2b17      	cmp	r3, #23
 800b0dc:	f000 8112 	beq.w	800b304 <forward_conv2d_nl_pool_integer_SSSA_ch+0x564>
 800b0e0:	2b18      	cmp	r3, #24
 800b0e2:	d00a      	beq.n	800b0fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 800b0e4:	2b16      	cmp	r3, #22
 800b0e6:	d00c      	beq.n	800b102 <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 800b0e8:	e7fe      	b.n	800b0e8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x348>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	deff      	udf	#255	; 0xff
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	deff      	udf	#255	; 0xff
 800b0f4:	6850      	ldr	r0, [r2, #4]
 800b0f6:	901d      	str	r0, [sp, #116]	; 0x74
 800b0f8:	e67c      	b.n	800adf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800b0fa:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f000 8168 	beq.w	800b3d2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x632>
 800b102:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b104:	429c      	cmp	r4, r3
 800b106:	d103      	bne.n	800b110 <forward_conv2d_nl_pool_integer_SSSA_ch+0x370>
 800b108:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 819d 	beq.w	800b44a <forward_conv2d_nl_pool_integer_SSSA_ch+0x6aa>
 800b110:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800b114:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800b118:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800b11c:	2201      	movs	r2, #1
 800b11e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800b122:	ee19 1a10 	vmov	r1, s18
 800b126:	9211      	str	r2, [sp, #68]	; 0x44
 800b128:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b12a:	9210      	str	r2, [sp, #64]	; 0x40
 800b12c:	68b2      	ldr	r2, [r6, #8]
 800b12e:	edcd 8a01 	vstr	s17, [sp, #4]
 800b132:	920f      	str	r2, [sp, #60]	; 0x3c
 800b134:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 800b138:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b13c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b13e:	930a      	str	r3, [sp, #40]	; 0x28
 800b140:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b142:	9309      	str	r3, [sp, #36]	; 0x24
 800b144:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b14e:	9306      	str	r3, [sp, #24]
 800b150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b152:	9305      	str	r3, [sp, #20]
 800b154:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b15e:	930e      	str	r3, [sp, #56]	; 0x38
 800b160:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b162:	930d      	str	r3, [sp, #52]	; 0x34
 800b164:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b166:	930c      	str	r3, [sp, #48]	; 0x30
 800b168:	ee18 3a10 	vmov	r3, s16
 800b16c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b170:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b172:	f003 f88d 	bl	800e290 <st_sssa8_ch_convolve>
 800b176:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b17a:	4293      	cmp	r3, r2
 800b17c:	f000 80be 	beq.w	800b2fc <forward_conv2d_nl_pool_integer_SSSA_ch+0x55c>
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b184:	429a      	cmp	r2, r3
 800b186:	9321      	str	r3, [sp, #132]	; 0x84
 800b188:	bf28      	it	cs
 800b18a:	461a      	movcs	r2, r3
 800b18c:	921a      	str	r2, [sp, #104]	; 0x68
 800b18e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b190:	2b00      	cmp	r3, #0
 800b192:	f040 809b 	bne.w	800b2cc <forward_conv2d_nl_pool_integer_SSSA_ch+0x52c>
 800b196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b198:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800b19a:	4413      	add	r3, r2
 800b19c:	931d      	str	r3, [sp, #116]	; 0x74
 800b19e:	3401      	adds	r4, #1
 800b1a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b1a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	b224      	sxth	r4, r4
 800b1a8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b1aa:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800b1ac:	47a8      	blx	r5
 800b1ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	db39      	blt.n	800b228 <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800b1b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800b1bc:	a851      	add	r0, sp, #324	; 0x144
 800b1be:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	fa1f f38b 	uxth.w	r3, fp
 800b1c8:	9207      	str	r2, [sp, #28]
 800b1ca:	1ae4      	subs	r4, r4, r3
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	fa1f f38a 	uxth.w	r3, sl
 800b1d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1d4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b1d6:	b224      	sxth	r4, r4
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	3201      	adds	r2, #1
 800b1dc:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 800b1e0:	9216      	str	r2, [sp, #88]	; 0x58
 800b1e2:	9306      	str	r3, [sp, #24]
 800b1e4:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800b1e8:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
 800b1f2:	9201      	str	r2, [sp, #4]
 800b1f4:	1a52      	subs	r2, r2, r1
 800b1f6:	9302      	str	r3, [sp, #8]
 800b1f8:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	ee18 3a90 	vmov	r3, s17
 800b206:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 800b208:	47a8      	blx	r5
 800b20a:	4652      	mov	r2, sl
 800b20c:	fa0f f38b 	sxth.w	r3, fp
 800b210:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b218:	b21a      	sxth	r2, r3
 800b21a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	9222      	str	r2, [sp, #136]	; 0x88
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	688b      	ldr	r3, [r1, #8]
 800b224:	4413      	add	r3, r2
 800b226:	608b      	str	r3, [r1, #8]
 800b228:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b22c:	68b2      	ldr	r2, [r6, #8]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	eb02 0a03 	add.w	sl, r2, r3
 800b234:	f8c6 a008 	str.w	sl, [r6, #8]
 800b238:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b23c:	b13b      	cbz	r3, 800b24e <forward_conv2d_nl_pool_integer_SSSA_ch+0x4ae>
 800b23e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4413      	add	r3, r2
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800b24e:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800b252:	4648      	mov	r0, r9
 800b254:	f008 fe0a 	bl	8013e6c <get_tensor_byte_size>
 800b258:	4458      	add	r0, fp
 800b25a:	4582      	cmp	sl, r0
 800b25c:	d306      	bcc.n	800b26c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800b25e:	68f3      	ldr	r3, [r6, #12]
 800b260:	60b3      	str	r3, [r6, #8]
 800b262:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b266:	b10b      	cbz	r3, 800b26c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	60bb      	str	r3, [r7, #8]
 800b26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b26e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b270:	3b01      	subs	r3, #1
 800b272:	9315      	str	r3, [sp, #84]	; 0x54
 800b274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b276:	4293      	cmp	r3, r2
 800b278:	f4ff af29 	bcc.w	800b0ce <forward_conv2d_nl_pool_integer_SSSA_ch+0x32e>
 800b27c:	68f3      	ldr	r3, [r6, #12]
 800b27e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b280:	60b3      	str	r3, [r6, #8]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	60bb      	str	r3, [r7, #8]
 800b286:	68d3      	ldr	r3, [r2, #12]
 800b288:	6093      	str	r3, [r2, #8]
 800b28a:	b059      	add	sp, #356	; 0x164
 800b28c:	ecbd 8b04 	vpop	{d8-d9}
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b296:	2b00      	cmp	r3, #0
 800b298:	da89      	bge.n	800b1ae <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800b29a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b29c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b2a0:	fb03 1314 	mls	r3, r3, r4, r1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d901      	bls.n	800b2ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4403      	add	r3, r0
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d202      	bcs.n	800b2b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b2b0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b2b2:	42a0      	cmp	r0, r4
 800b2b4:	d169      	bne.n	800b38a <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 800b2b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2b8:	b2a4      	uxth	r4, r4
 800b2ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b2bc:	4413      	add	r3, r2
 800b2be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b2c0:	1b1b      	subs	r3, r3, r4
 800b2c2:	4414      	add	r4, r2
 800b2c4:	b21b      	sxth	r3, r3
 800b2c6:	b224      	sxth	r4, r4
 800b2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ca:	e770      	b.n	800b1ae <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800b2cc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	1a5b      	subs	r3, r3, r1
 800b2d2:	d505      	bpl.n	800b2e0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x540>
 800b2d4:	1a8a      	subs	r2, r1, r2
 800b2d6:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800b2d8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b2da:	fb00 1202 	mla	r2, r0, r2, r1
 800b2de:	921d      	str	r2, [sp, #116]	; 0x74
 800b2e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2e8:	e759      	b.n	800b19e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3fe>
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	9124      	str	r1, [sp, #144]	; 0x90
 800b2ee:	e66c      	b.n	800afca <forward_conv2d_nl_pool_integer_SSSA_ch+0x22a>
 800b2f0:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b4ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800b2f4:	e653      	b.n	800af9e <forward_conv2d_nl_pool_integer_SSSA_ch+0x1fe>
 800b2f6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b4ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800b2fa:	e640      	b.n	800af7e <forward_conv2d_nl_pool_integer_SSSA_ch+0x1de>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b300:	9321      	str	r3, [sp, #132]	; 0x84
 800b302:	e744      	b.n	800b18e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ee>
 800b304:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b306:	429c      	cmp	r4, r3
 800b308:	d103      	bne.n	800b312 <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 800b30a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80b4 	beq.w	800b47a <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 800b312:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800b316:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800b31a:	2101      	movs	r1, #1
 800b31c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800b31e:	910f      	str	r1, [sp, #60]	; 0x3c
 800b320:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b322:	9010      	str	r0, [sp, #64]	; 0x40
 800b324:	910e      	str	r1, [sp, #56]	; 0x38
 800b326:	68b1      	ldr	r1, [r6, #8]
 800b328:	edcd 8a01 	vstr	s17, [sp, #4]
 800b32c:	910d      	str	r1, [sp, #52]	; 0x34
 800b32e:	ee19 1a10 	vmov	r1, s18
 800b332:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b336:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b338:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b33c:	930c      	str	r3, [sp, #48]	; 0x30
 800b33e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b340:	930b      	str	r3, [sp, #44]	; 0x2c
 800b342:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b344:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 800b348:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b34a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b34c:	9308      	str	r3, [sp, #32]
 800b34e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b350:	9307      	str	r3, [sp, #28]
 800b352:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b354:	9306      	str	r3, [sp, #24]
 800b356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b358:	9305      	str	r3, [sp, #20]
 800b35a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b35c:	9304      	str	r3, [sp, #16]
 800b35e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	ee18 3a10 	vmov	r3, s16
 800b366:	f001 f981 	bl	800c66c <st_sssa8_ch_convolve_dw>
 800b36a:	e704      	b.n	800b176 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800b36c:	9234      	str	r2, [sp, #208]	; 0xd0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f47f ae4b 	bne.w	800b00a <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 800b374:	9336      	str	r3, [sp, #216]	; 0xd8
 800b376:	e654      	b.n	800b022 <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800b378:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b37c:	922a      	str	r2, [sp, #168]	; 0xa8
 800b37e:	2a00      	cmp	r2, #0
 800b380:	f43f ad9f 	beq.w	800aec2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800b384:	6892      	ldr	r2, [r2, #8]
 800b386:	922a      	str	r2, [sp, #168]	; 0xa8
 800b388:	e59b      	b.n	800aec2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4402      	add	r2, r0
 800b38e:	4293      	cmp	r3, r2
 800b390:	d291      	bcs.n	800b2b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b392:	3901      	subs	r1, #1
 800b394:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b39a:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4402      	add	r2, r0
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d3f6      	bcc.n	800b396 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800b3a8:	9515      	str	r5, [sp, #84]	; 0x54
 800b3aa:	e784      	b.n	800b2b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800b3ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bf0c      	ite	eq
 800b3b2:	2318      	moveq	r3, #24
 800b3b4:	2316      	movne	r3, #22
 800b3b6:	9328      	str	r3, [sp, #160]	; 0xa0
 800b3b8:	e643      	b.n	800b042 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a2>
 800b3ba:	9236      	str	r2, [sp, #216]	; 0xd8
 800b3bc:	e631      	b.n	800b022 <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800b3be:	9134      	str	r1, [sp, #208]	; 0xd0
 800b3c0:	e620      	b.n	800b004 <forward_conv2d_nl_pool_integer_SSSA_ch+0x264>
 800b3c2:	4b3b      	ldr	r3, [pc, #236]	; (800b4b0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x710>)
 800b3c4:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800b3c8:	9333      	str	r3, [sp, #204]	; 0xcc
 800b3ca:	e526      	b.n	800ae1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 800b3cc:	4693      	mov	fp, r2
 800b3ce:	921d      	str	r2, [sp, #116]	; 0x74
 800b3d0:	e510      	b.n	800adf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800b3d2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b3d4:	ee18 0a10 	vmov	r0, s16
 800b3d8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b3da:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b3dc:	f8bd b0a4 	ldrh.w	fp, [sp, #164]	; 0xa4
 800b3e0:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800b3e4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b3e6:	9503      	str	r5, [sp, #12]
 800b3e8:	9302      	str	r3, [sp, #8]
 800b3ea:	465b      	mov	r3, fp
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	ee18 2a90 	vmov	r2, s17
 800b3f2:	f8cd a000 	str.w	sl, [sp]
 800b3f6:	f002 fe85 	bl	800e104 <st_sssa8_ch_convolve_rank1upd>
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	9510      	str	r5, [sp, #64]	; 0x40
 800b3fe:	910f      	str	r1, [sp, #60]	; 0x3c
 800b400:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b402:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b404:	910e      	str	r1, [sp, #56]	; 0x38
 800b406:	68b3      	ldr	r3, [r6, #8]
 800b408:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800b40a:	930d      	str	r3, [sp, #52]	; 0x34
 800b40c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b40e:	9208      	str	r2, [sp, #32]
 800b410:	930b      	str	r3, [sp, #44]	; 0x2c
 800b412:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b414:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b416:	910c      	str	r1, [sp, #48]	; 0x30
 800b418:	ee19 1a10 	vmov	r1, s18
 800b41c:	9200      	str	r2, [sp, #0]
 800b41e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b420:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800b424:	edcd 8a01 	vstr	s17, [sp, #4]
 800b428:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 800b42c:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800b42e:	ee18 3a10 	vmov	r3, s16
 800b432:	9507      	str	r5, [sp, #28]
 800b434:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800b436:	9506      	str	r5, [sp, #24]
 800b438:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800b43a:	9505      	str	r5, [sp, #20]
 800b43c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800b43e:	e9cd ba02 	strd	fp, sl, [sp, #8]
 800b442:	9504      	str	r5, [sp, #16]
 800b444:	f003 f804 	bl	800e450 <st_sssa8_ch_convolve_startNN>
 800b448:	e695      	b.n	800b176 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800b44a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b44c:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800b450:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800b454:	ee18 2a10 	vmov	r2, s16
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	ee18 1a90 	vmov	r1, s17
 800b45e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800b460:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800b468:	f8cd b000 	str.w	fp, [sp]
 800b46c:	f8cd a00c 	str.w	sl, [sp, #12]
 800b470:	9340      	str	r3, [sp, #256]	; 0x100
 800b472:	f002 fed7 	bl	800e224 <st_sssa8_ch_convolve_WeightsPrefetch>
 800b476:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800b478:	e650      	b.n	800b11c <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800b47a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b47c:	ee18 1a90 	vmov	r1, s17
 800b480:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800b48a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800b48c:	9241      	str	r2, [sp, #260]	; 0x104
 800b48e:	9340      	str	r3, [sp, #256]	; 0x100
 800b490:	f001 f824 	bl	800c4dc <st_sssa8_ch_conv_dw_Wadapt>
 800b494:	e9dd 3240 	ldrd	r3, r2, [sp, #256]	; 0x100
 800b498:	e73f      	b.n	800b31a <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	deff      	udf	#255	; 0xff
 800b49e:	2300      	movs	r3, #0
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	deff      	udf	#255	; 0xff
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	deff      	udf	#255	; 0xff
 800b4aa:	bf00      	nop
 800b4ac:	00000000 	.word	0x00000000
 800b4b0:	0800ad9d 	.word	0x0800ad9d

0800b4b4 <forward_dense_integer_SSSA>:
 800b4b4:	6982      	ldr	r2, [r0, #24]
 800b4b6:	8813      	ldrh	r3, [r2, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 80c8 	beq.w	800b64e <forward_dense_integer_SSSA+0x19a>
 800b4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c2:	6852      	ldr	r2, [r2, #4]
 800b4c4:	b093      	sub	sp, #76	; 0x4c
 800b4c6:	6854      	ldr	r4, [r2, #4]
 800b4c8:	b104      	cbz	r4, 800b4cc <forward_dense_integer_SSSA+0x18>
 800b4ca:	6824      	ldr	r4, [r4, #0]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	f000 8161 	beq.w	800b794 <forward_dense_integer_SSSA+0x2e0>
 800b4d2:	6911      	ldr	r1, [r2, #16]
 800b4d4:	b101      	cbz	r1, 800b4d8 <forward_dense_integer_SSSA+0x24>
 800b4d6:	6809      	ldr	r1, [r1, #0]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	f000 815e 	beq.w	800b79a <forward_dense_integer_SSSA+0x2e6>
 800b4de:	69d5      	ldr	r5, [r2, #28]
 800b4e0:	2d00      	cmp	r5, #0
 800b4e2:	f000 8108 	beq.w	800b6f6 <forward_dense_integer_SSSA+0x242>
 800b4e6:	8b16      	ldrh	r6, [r2, #24]
 800b4e8:	6828      	ldr	r0, [r5, #0]
 800b4ea:	2e01      	cmp	r6, #1
 800b4ec:	f240 812d 	bls.w	800b74a <forward_dense_integer_SSSA+0x296>
 800b4f0:	686d      	ldr	r5, [r5, #4]
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	f000 8154 	beq.w	800b7a0 <forward_dense_integer_SSSA+0x2ec>
 800b4f8:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800b4fc:	69ab      	ldr	r3, [r5, #24]
 800b4fe:	f1b9 0f00 	cmp.w	r9, #0
 800b502:	f000 810f 	beq.w	800b724 <forward_dense_integer_SSSA+0x270>
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	68e2      	ldr	r2, [r4, #12]
 800b50a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50c:	68cb      	ldr	r3, [r1, #12]
 800b50e:	6856      	ldr	r6, [r2, #4]
 800b510:	f8d9 9000 	ldr.w	r9, [r9]
 800b514:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b518:	698d      	ldr	r5, [r1, #24]
 800b51a:	960f      	str	r6, [sp, #60]	; 0x3c
 800b51c:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	fb03 f302 	mul.w	r3, r3, r2
 800b526:	b2b2      	uxth	r2, r6
 800b528:	930c      	str	r3, [sp, #48]	; 0x30
 800b52a:	fa1f f38a 	uxth.w	r3, sl
 800b52e:	f1b9 0f00 	cmp.w	r9, #0
 800b532:	d003      	beq.n	800b53c <forward_dense_integer_SSSA+0x88>
 800b534:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800b538:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800b53c:	6827      	ldr	r7, [r4, #0]
 800b53e:	f8d0 b000 	ldr.w	fp, [r0]
 800b542:	680c      	ldr	r4, [r1, #0]
 800b544:	6981      	ldr	r1, [r0, #24]
 800b546:	2f00      	cmp	r7, #0
 800b548:	f000 8083 	beq.w	800b652 <forward_dense_integer_SSSA+0x19e>
 800b54c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b550:	f1bc 0f00 	cmp.w	ip, #0
 800b554:	f000 80b1 	beq.w	800b6ba <forward_dense_integer_SSSA+0x206>
 800b558:	8878      	ldrh	r0, [r7, #2]
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f000 809c 	beq.w	800b698 <forward_dense_integer_SSSA+0x1e4>
 800b560:	f8dc 6000 	ldr.w	r6, [ip]
 800b564:	edd6 7a00 	vldr	s15, [r6]
 800b568:	2c00      	cmp	r4, #0
 800b56a:	f000 809a 	beq.w	800b6a2 <forward_dense_integer_SSSA+0x1ee>
 800b56e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b572:	f1b8 0f00 	cmp.w	r8, #0
 800b576:	f000 80a9 	beq.w	800b6cc <forward_dense_integer_SSSA+0x218>
 800b57a:	8860      	ldrh	r0, [r4, #2]
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d074      	beq.n	800b66a <forward_dense_integer_SSSA+0x1b6>
 800b580:	68ae      	ldr	r6, [r5, #8]
 800b582:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b586:	6889      	ldr	r1, [r1, #8]
 800b588:	950d      	str	r5, [sp, #52]	; 0x34
 800b58a:	f8d8 5000 	ldr.w	r5, [r8]
 800b58e:	ed95 0a00 	vldr	s0, [r5]
 800b592:	f1bc 0f00 	cmp.w	ip, #0
 800b596:	d076      	beq.n	800b686 <forward_dense_integer_SSSA+0x1d2>
 800b598:	8878      	ldrh	r0, [r7, #2]
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f000 80a3 	beq.w	800b6e6 <forward_dense_integer_SSSA+0x232>
 800b5a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b5a4:	f990 7000 	ldrsb.w	r7, [r0]
 800b5a8:	2c00      	cmp	r4, #0
 800b5aa:	f000 80eb 	beq.w	800b784 <forward_dense_integer_SSSA+0x2d0>
 800b5ae:	f1b8 0f00 	cmp.w	r8, #0
 800b5b2:	f000 809d 	beq.w	800b6f0 <forward_dense_integer_SSSA+0x23c>
 800b5b6:	8860      	ldrh	r0, [r4, #2]
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d167      	bne.n	800b68c <forward_dense_integer_SSSA+0x1d8>
 800b5bc:	900a      	str	r0, [sp, #40]	; 0x28
 800b5be:	910e      	str	r1, [sp, #56]	; 0x38
 800b5c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5c4:	f1bb 0f00 	cmp.w	fp, #0
 800b5c8:	f000 80de 	beq.w	800b788 <forward_dense_integer_SSSA+0x2d4>
 800b5cc:	f8db 0004 	ldr.w	r0, [fp, #4]
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	f000 80d9 	beq.w	800b788 <forward_dense_integer_SSSA+0x2d4>
 800b5d6:	6800      	ldr	r0, [r0, #0]
 800b5d8:	2400      	movs	r4, #0
 800b5da:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800b5de:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800b5e2:	9411      	str	r4, [sp, #68]	; 0x44
 800b5e4:	ed90 7a00 	vldr	s14, [r0]
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5ee:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b5f2:	f000 febd 	bl	800c370 <align_factor>
 800b5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5f8:	9011      	str	r0, [sp, #68]	; 0x44
 800b5fa:	b32b      	cbz	r3, 800b648 <forward_dense_integer_SSSA+0x194>
 800b5fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b600:	4699      	mov	r9, r3
 800b602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b604:	fa1f fa8a 	uxth.w	sl, sl
 800b608:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b60a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800b60e:	970d      	str	r7, [sp, #52]	; 0x34
 800b610:	461f      	mov	r7, r3
 800b612:	9a08      	ldr	r2, [sp, #32]
 800b614:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b618:	3401      	adds	r4, #1
 800b61a:	4628      	mov	r0, r5
 800b61c:	9605      	str	r6, [sp, #20]
 800b61e:	9306      	str	r3, [sp, #24]
 800b620:	4456      	add	r6, sl
 800b622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b624:	445d      	add	r5, fp
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62a:	9303      	str	r3, [sp, #12]
 800b62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b62e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800b632:	ab11      	add	r3, sp, #68	; 0x44
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	463b      	mov	r3, r7
 800b638:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800b63c:	f003 fdc4 	bl	800f1c8 <st_sssa8_fully_connected>
 800b640:	454c      	cmp	r4, r9
 800b642:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b646:	d1e6      	bne.n	800b616 <forward_dense_integer_SSSA+0x162>
 800b648:	b013      	add	sp, #76	; 0x4c
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	deff      	udf	#255	; 0xff
 800b652:	2c00      	cmp	r4, #0
 800b654:	d056      	beq.n	800b704 <forward_dense_integer_SSSA+0x250>
 800b656:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b65a:	f1b8 0f00 	cmp.w	r8, #0
 800b65e:	d05d      	beq.n	800b71c <forward_dense_integer_SSSA+0x268>
 800b660:	8860      	ldrh	r0, [r4, #2]
 800b662:	2800      	cmp	r0, #0
 800b664:	d173      	bne.n	800b74e <forward_dense_integer_SSSA+0x29a>
 800b666:	eddf 7a50 	vldr	s15, [pc, #320]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b66a:	68ae      	ldr	r6, [r5, #8]
 800b66c:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b670:	6889      	ldr	r1, [r1, #8]
 800b672:	950d      	str	r5, [sp, #52]	; 0x34
 800b674:	2f00      	cmp	r7, #0
 800b676:	d041      	beq.n	800b6fc <forward_dense_integer_SSSA+0x248>
 800b678:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b67c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b680:	f1bc 0f00 	cmp.w	ip, #0
 800b684:	d188      	bne.n	800b598 <forward_dense_integer_SSSA+0xe4>
 800b686:	4667      	mov	r7, ip
 800b688:	2800      	cmp	r0, #0
 800b68a:	d097      	beq.n	800b5bc <forward_dense_integer_SSSA+0x108>
 800b68c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b690:	f990 0000 	ldrsb.w	r0, [r0]
 800b694:	900a      	str	r0, [sp, #40]	; 0x28
 800b696:	e792      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b698:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b69c:	2c00      	cmp	r4, #0
 800b69e:	f47f af66 	bne.w	800b56e <forward_dense_integer_SSSA+0xba>
 800b6a2:	68ae      	ldr	r6, [r5, #8]
 800b6a4:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b6a8:	6889      	ldr	r1, [r1, #8]
 800b6aa:	950d      	str	r5, [sp, #52]	; 0x34
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d15a      	bne.n	800b766 <forward_dense_integer_SSSA+0x2b2>
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b6b6:	900a      	str	r0, [sp, #40]	; 0x28
 800b6b8:	e781      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b6ba:	b31c      	cbz	r4, 800b704 <forward_dense_integer_SSSA+0x250>
 800b6bc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b6c0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b6c4:	f1b8 0f00 	cmp.w	r8, #0
 800b6c8:	f47f af57 	bne.w	800b57a <forward_dense_integer_SSSA+0xc6>
 800b6cc:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b6d0:	68ae      	ldr	r6, [r5, #8]
 800b6d2:	6889      	ldr	r1, [r1, #8]
 800b6d4:	900d      	str	r0, [sp, #52]	; 0x34
 800b6d6:	f1bc 0f00 	cmp.w	ip, #0
 800b6da:	d00e      	beq.n	800b6fa <forward_dense_integer_SSSA+0x246>
 800b6dc:	8878      	ldrh	r0, [r7, #2]
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d149      	bne.n	800b776 <forward_dense_integer_SSSA+0x2c2>
 800b6e2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b6e6:	2700      	movs	r7, #0
 800b6e8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ec:	f47f af63 	bne.w	800b5b6 <forward_dense_integer_SSSA+0x102>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	900a      	str	r0, [sp, #40]	; 0x28
 800b6f4:	e763      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	e6fb      	b.n	800b4f2 <forward_dense_integer_SSSA+0x3e>
 800b6fa:	4667      	mov	r7, ip
 800b6fc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b700:	970a      	str	r7, [sp, #40]	; 0x28
 800b702:	e75c      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b704:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b708:	4627      	mov	r7, r4
 800b70a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b70e:	eeb0 0a67 	vmov.f32	s0, s15
 800b712:	68ae      	ldr	r6, [r5, #8]
 800b714:	6889      	ldr	r1, [r1, #8]
 800b716:	900d      	str	r0, [sp, #52]	; 0x34
 800b718:	970a      	str	r7, [sp, #40]	; 0x28
 800b71a:	e750      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b71c:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b720:	4647      	mov	r7, r8
 800b722:	e7f2      	b.n	800b70a <forward_dense_integer_SSSA+0x256>
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	68e2      	ldr	r2, [r4, #12]
 800b728:	930b      	str	r3, [sp, #44]	; 0x2c
 800b72a:	68cb      	ldr	r3, [r1, #12]
 800b72c:	6856      	ldr	r6, [r2, #4]
 800b72e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b732:	698d      	ldr	r5, [r1, #24]
 800b734:	960f      	str	r6, [sp, #60]	; 0x3c
 800b736:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	fb03 f302 	mul.w	r3, r3, r2
 800b740:	b2b2      	uxth	r2, r6
 800b742:	930c      	str	r3, [sp, #48]	; 0x30
 800b744:	fa1f f38a 	uxth.w	r3, sl
 800b748:	e6f8      	b.n	800b53c <forward_dense_integer_SSSA+0x88>
 800b74a:	2500      	movs	r5, #0
 800b74c:	e6d1      	b.n	800b4f2 <forward_dense_integer_SSSA+0x3e>
 800b74e:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b752:	68ae      	ldr	r6, [r5, #8]
 800b754:	900d      	str	r0, [sp, #52]	; 0x34
 800b756:	f8d8 0000 	ldr.w	r0, [r8]
 800b75a:	6889      	ldr	r1, [r1, #8]
 800b75c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b760:	ed90 0a00 	vldr	s0, [r0]
 800b764:	e792      	b.n	800b68c <forward_dense_integer_SSSA+0x1d8>
 800b766:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b76a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b76e:	f990 7000 	ldrsb.w	r7, [r0]
 800b772:	940a      	str	r4, [sp, #40]	; 0x28
 800b774:	e723      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b776:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b77a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800b7a8 <forward_dense_integer_SSSA+0x2f4>
 800b77e:	f990 7000 	ldrsb.w	r7, [r0]
 800b782:	e7b5      	b.n	800b6f0 <forward_dense_integer_SSSA+0x23c>
 800b784:	940a      	str	r4, [sp, #40]	; 0x28
 800b786:	e71a      	b.n	800b5be <forward_dense_integer_SSSA+0x10a>
 800b788:	2300      	movs	r3, #0
 800b78a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800b78e:	9311      	str	r3, [sp, #68]	; 0x44
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	deff      	udf	#255	; 0xff
 800b794:	2300      	movs	r3, #0
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	deff      	udf	#255	; 0xff
 800b79a:	2300      	movs	r3, #0
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	deff      	udf	#255	; 0xff
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	deff      	udf	#255	; 0xff
 800b7a6:	bf00      	nop
 800b7a8:	00000000 	.word	0x00000000

0800b7ac <nl_func_relu_generic_array_f32>:
 800b7ac:	b430      	push	{r4, r5}
 800b7ae:	edd3 6a02 	vldr	s13, [r3, #8]
 800b7b2:	ed93 7a00 	vldr	s14, [r3]
 800b7b6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b7ba:	ed93 6a01 	vldr	s12, [r3, #4]
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	d430      	bmi.n	800b826 <nl_func_relu_generic_array_f32+0x7a>
 800b7c4:	698c      	ldr	r4, [r1, #24]
 800b7c6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b7ca:	6981      	ldr	r1, [r0, #24]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	68a0      	ldr	r0, [r4, #8]
 800b7d0:	6889      	ldr	r1, [r1, #8]
 800b7d2:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4290      	cmp	r0, r2
 800b7da:	d822      	bhi.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b7dc:	3304      	adds	r3, #4
 800b7de:	3204      	adds	r2, #4
 800b7e0:	4419      	add	r1, r3
 800b7e2:	e00e      	b.n	800b802 <nl_func_relu_generic_array_f32+0x56>
 800b7e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7e8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800b7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f0:	db01      	blt.n	800b7f6 <nl_func_relu_generic_array_f32+0x4a>
 800b7f2:	ee65 7a86 	vmul.f32	s15, s11, s12
 800b7f6:	3b08      	subs	r3, #8
 800b7f8:	ed61 7a01 	vstmdb	r1!, {s15}
 800b7fc:	68a0      	ldr	r0, [r4, #8]
 800b7fe:	4298      	cmp	r0, r3
 800b800:	d80f      	bhi.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b802:	4613      	mov	r3, r2
 800b804:	ed72 7a01 	vldmdb	r2!, {s15}
 800b808:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b810:	dae8      	bge.n	800b7e4 <nl_func_relu_generic_array_f32+0x38>
 800b812:	eef0 7a66 	vmov.f32	s15, s13
 800b816:	3b08      	subs	r3, #8
 800b818:	ed61 7a01 	vstmdb	r1!, {s15}
 800b81c:	68a0      	ldr	r0, [r4, #8]
 800b81e:	4298      	cmp	r0, r3
 800b820:	d9ef      	bls.n	800b802 <nl_func_relu_generic_array_f32+0x56>
 800b822:	bc30      	pop	{r4, r5}
 800b824:	4770      	bx	lr
 800b826:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b82a:	698d      	ldr	r5, [r1, #24]
 800b82c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b830:	6983      	ldr	r3, [r0, #24]
 800b832:	68a8      	ldr	r0, [r5, #8]
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	4411      	add	r1, r2
 800b83a:	689a      	ldr	r2, [r3, #8]
 800b83c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b840:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800b844:	d019      	beq.n	800b87a <nl_func_relu_generic_array_f32+0xce>
 800b846:	4298      	cmp	r0, r3
 800b848:	d8eb      	bhi.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b84a:	3104      	adds	r1, #4
 800b84c:	3304      	adds	r3, #4
 800b84e:	440a      	add	r2, r1
 800b850:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b854:	1f19      	subs	r1, r3, #4
 800b856:	f1a3 0408 	sub.w	r4, r3, #8
 800b85a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b85e:	460b      	mov	r3, r1
 800b860:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b868:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b86c:	d823      	bhi.n	800b8b6 <nl_func_relu_generic_array_f32+0x10a>
 800b86e:	ed62 6a01 	vstmdb	r2!, {s13}
 800b872:	68a9      	ldr	r1, [r5, #8]
 800b874:	42a1      	cmp	r1, r4
 800b876:	d9eb      	bls.n	800b850 <nl_func_relu_generic_array_f32+0xa4>
 800b878:	e7d3      	b.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b87a:	4298      	cmp	r0, r3
 800b87c:	d8d1      	bhi.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b87e:	3104      	adds	r1, #4
 800b880:	3304      	adds	r3, #4
 800b882:	f04f 0c00 	mov.w	ip, #0
 800b886:	440a      	add	r2, r1
 800b888:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b88c:	1f19      	subs	r1, r3, #4
 800b88e:	f1a3 0408 	sub.w	r4, r3, #8
 800b892:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b896:	460b      	mov	r3, r1
 800b898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89c:	dc05      	bgt.n	800b8aa <nl_func_relu_generic_array_f32+0xfe>
 800b89e:	f842 cd04 	str.w	ip, [r2, #-4]!
 800b8a2:	68a9      	ldr	r1, [r5, #8]
 800b8a4:	42a1      	cmp	r1, r4
 800b8a6:	d9ef      	bls.n	800b888 <nl_func_relu_generic_array_f32+0xdc>
 800b8a8:	e7bb      	b.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b8aa:	ed62 7a01 	vstmdb	r2!, {s15}
 800b8ae:	68a9      	ldr	r1, [r5, #8]
 800b8b0:	42a1      	cmp	r1, r4
 800b8b2:	d9e9      	bls.n	800b888 <nl_func_relu_generic_array_f32+0xdc>
 800b8b4:	e7b5      	b.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b8b6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b8ba:	68a9      	ldr	r1, [r5, #8]
 800b8bc:	42a1      	cmp	r1, r4
 800b8be:	d9c7      	bls.n	800b850 <nl_func_relu_generic_array_f32+0xa4>
 800b8c0:	e7af      	b.n	800b822 <nl_func_relu_generic_array_f32+0x76>
 800b8c2:	bf00      	nop

0800b8c4 <forward_relu>:
 800b8c4:	6982      	ldr	r2, [r0, #24]
 800b8c6:	8813      	ldrh	r3, [r2, #0]
 800b8c8:	b30b      	cbz	r3, 800b90e <forward_relu+0x4a>
 800b8ca:	6852      	ldr	r2, [r2, #4]
 800b8cc:	6851      	ldr	r1, [r2, #4]
 800b8ce:	b101      	cbz	r1, 800b8d2 <forward_relu+0xe>
 800b8d0:	6809      	ldr	r1, [r1, #0]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	f000 808d 	beq.w	800b9f2 <forward_relu+0x12e>
 800b8d8:	b470      	push	{r4, r5, r6}
 800b8da:	6916      	ldr	r6, [r2, #16]
 800b8dc:	b106      	cbz	r6, 800b8e0 <forward_relu+0x1c>
 800b8de:	6836      	ldr	r6, [r6, #0]
 800b8e0:	69c0      	ldr	r0, [r0, #28]
 800b8e2:	b1b0      	cbz	r0, 800b912 <forward_relu+0x4e>
 800b8e4:	6842      	ldr	r2, [r0, #4]
 800b8e6:	688b      	ldr	r3, [r1, #8]
 800b8e8:	2a01      	cmp	r2, #1
 800b8ea:	d03d      	beq.n	800b968 <forward_relu+0xa4>
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	d071      	beq.n	800b9d4 <forward_relu+0x110>
 800b8f0:	68cd      	ldr	r5, [r1, #12]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b8f8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	fb04 f202 	mul.w	r2, r4, r2
 800b902:	d1f9      	bne.n	800b8f8 <forward_relu+0x34>
 800b904:	6883      	ldr	r3, [r0, #8]
 800b906:	4630      	mov	r0, r6
 800b908:	bc70      	pop	{r4, r5, r6}
 800b90a:	f7ff bf4f 	b.w	800b7ac <nl_func_relu_generic_array_f32>
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	deff      	udf	#255	; 0xff
 800b912:	688b      	ldr	r3, [r1, #8]
 800b914:	0a1b      	lsrs	r3, r3, #8
 800b916:	d05f      	beq.n	800b9d8 <forward_relu+0x114>
 800b918:	68cc      	ldr	r4, [r1, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b920:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800b924:	429c      	cmp	r4, r3
 800b926:	fb00 f202 	mul.w	r2, r0, r2
 800b92a:	d1f9      	bne.n	800b920 <forward_relu+0x5c>
 800b92c:	698c      	ldr	r4, [r1, #24]
 800b92e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b932:	69b1      	ldr	r1, [r6, #24]
 800b934:	4413      	add	r3, r2
 800b936:	68a0      	ldr	r0, [r4, #8]
 800b938:	6889      	ldr	r1, [r1, #8]
 800b93a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800b93e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b942:	4290      	cmp	r0, r2
 800b944:	d80e      	bhi.n	800b964 <forward_relu+0xa0>
 800b946:	3204      	adds	r2, #4
 800b948:	3104      	adds	r1, #4
 800b94a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b9f8 <forward_relu+0x134>
 800b94e:	4613      	mov	r3, r2
 800b950:	ed72 7a01 	vldmdb	r2!, {s15}
 800b954:	3b08      	subs	r3, #8
 800b956:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b95a:	ed61 7a01 	vstmdb	r1!, {s15}
 800b95e:	68a0      	ldr	r0, [r4, #8]
 800b960:	4298      	cmp	r0, r3
 800b962:	d9f4      	bls.n	800b94e <forward_relu+0x8a>
 800b964:	bc70      	pop	{r4, r5, r6}
 800b966:	4770      	bx	lr
 800b968:	0a1b      	lsrs	r3, r3, #8
 800b96a:	d03a      	beq.n	800b9e2 <forward_relu+0x11e>
 800b96c:	68cd      	ldr	r5, [r1, #12]
 800b96e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b972:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b976:	429d      	cmp	r5, r3
 800b978:	fb04 f202 	mul.w	r2, r4, r2
 800b97c:	d1f9      	bne.n	800b972 <forward_relu+0xae>
 800b97e:	698c      	ldr	r4, [r1, #24]
 800b980:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b984:	6883      	ldr	r3, [r0, #8]
 800b986:	4411      	add	r1, r2
 800b988:	68a0      	ldr	r0, [r4, #8]
 800b98a:	69b5      	ldr	r5, [r6, #24]
 800b98c:	ed93 7a00 	vldr	s14, [r3]
 800b990:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b994:	68aa      	ldr	r2, [r5, #8]
 800b996:	4298      	cmp	r0, r3
 800b998:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b99c:	d8e2      	bhi.n	800b964 <forward_relu+0xa0>
 800b99e:	3304      	adds	r3, #4
 800b9a0:	3204      	adds	r2, #4
 800b9a2:	2500      	movs	r5, #0
 800b9a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b9a8:	1f19      	subs	r1, r3, #4
 800b9aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b2:	d507      	bpl.n	800b9c4 <forward_relu+0x100>
 800b9b4:	3b08      	subs	r3, #8
 800b9b6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b9ba:	68a0      	ldr	r0, [r4, #8]
 800b9bc:	4298      	cmp	r0, r3
 800b9be:	d8d1      	bhi.n	800b964 <forward_relu+0xa0>
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	e7ef      	b.n	800b9a4 <forward_relu+0xe0>
 800b9c4:	3b08      	subs	r3, #8
 800b9c6:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b9ca:	68a0      	ldr	r0, [r4, #8]
 800b9cc:	4298      	cmp	r0, r3
 800b9ce:	d8c9      	bhi.n	800b964 <forward_relu+0xa0>
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	e7e7      	b.n	800b9a4 <forward_relu+0xe0>
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	e795      	b.n	800b904 <forward_relu+0x40>
 800b9d8:	698c      	ldr	r4, [r1, #24]
 800b9da:	69b3      	ldr	r3, [r6, #24]
 800b9dc:	68a2      	ldr	r2, [r4, #8]
 800b9de:	6899      	ldr	r1, [r3, #8]
 800b9e0:	e7b1      	b.n	800b946 <forward_relu+0x82>
 800b9e2:	6883      	ldr	r3, [r0, #8]
 800b9e4:	698c      	ldr	r4, [r1, #24]
 800b9e6:	69b2      	ldr	r2, [r6, #24]
 800b9e8:	ed93 7a00 	vldr	s14, [r3]
 800b9ec:	6892      	ldr	r2, [r2, #8]
 800b9ee:	68a3      	ldr	r3, [r4, #8]
 800b9f0:	e7d5      	b.n	800b99e <forward_relu+0xda>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	deff      	udf	#255	; 0xff
 800b9f8:	00000000 	.word	0x00000000

0800b9fc <forward_pad>:
 800b9fc:	6982      	ldr	r2, [r0, #24]
 800b9fe:	8813      	ldrh	r3, [r2, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d052      	beq.n	800baaa <forward_pad+0xae>
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	ed2d 8b02 	vpush	{d8}
 800ba0c:	6852      	ldr	r2, [r2, #4]
 800ba0e:	b091      	sub	sp, #68	; 0x44
 800ba10:	6857      	ldr	r7, [r2, #4]
 800ba12:	b107      	cbz	r7, 800ba16 <forward_pad+0x1a>
 800ba14:	683f      	ldr	r7, [r7, #0]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	f000 81e7 	beq.w	800bdea <forward_pad+0x3ee>
 800ba1c:	6913      	ldr	r3, [r2, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 81e1 	beq.w	800bde6 <forward_pad+0x3ea>
 800ba24:	681d      	ldr	r5, [r3, #0]
 800ba26:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800ba2a:	68aa      	ldr	r2, [r5, #8]
 800ba2c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba2e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800ba32:	f8de 100c 	ldr.w	r1, [lr, #12]
 800ba36:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800ba3a:	bf38      	it	cc
 800ba3c:	2201      	movcc	r2, #1
 800ba3e:	9102      	str	r1, [sp, #8]
 800ba40:	bf28      	it	cs
 800ba42:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 800ba46:	f9b6 1000 	ldrsh.w	r1, [r6]
 800ba4a:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800ba4e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800ba52:	9103      	str	r1, [sp, #12]
 800ba54:	9201      	str	r2, [sp, #4]
 800ba56:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800ba5a:	7f03      	ldrb	r3, [r0, #28]
 800ba5c:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	6895      	ldr	r5, [r2, #8]
 800ba64:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800ba68:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 800ba6c:	68f7      	ldr	r7, [r6, #12]
 800ba6e:	f8dc 8008 	ldr.w	r8, [ip, #8]
 800ba72:	fb07 f404 	mul.w	r4, r7, r4
 800ba76:	463e      	mov	r6, r7
 800ba78:	9708      	str	r7, [sp, #32]
 800ba7a:	9f03      	ldr	r7, [sp, #12]
 800ba7c:	940d      	str	r4, [sp, #52]	; 0x34
 800ba7e:	fb06 f607 	mul.w	r6, r6, r7
 800ba82:	68d4      	ldr	r4, [r2, #12]
 800ba84:	fb0b f709 	mul.w	r7, fp, r9
 800ba88:	9405      	str	r4, [sp, #20]
 800ba8a:	960c      	str	r6, [sp, #48]	; 0x30
 800ba8c:	6894      	ldr	r4, [r2, #8]
 800ba8e:	fb0b f601 	mul.w	r6, fp, r1
 800ba92:	d00c      	beq.n	800baae <forward_pad+0xb2>
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	f000 8106 	beq.w	800bca6 <forward_pad+0x2aa>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 80a8 	beq.w	800bbf0 <forward_pad+0x1f4>
 800baa0:	b011      	add	sp, #68	; 0x44
 800baa2:	ecbd 8b02 	vpop	{d8}
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	deff      	udf	#255	; 0xff
 800baae:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bab2:	930e      	str	r3, [sp, #56]	; 0x38
 800bab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab6:	eb05 0903 	add.w	r9, r5, r3
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	dd6a      	ble.n	800bb96 <forward_pad+0x19a>
 800bac0:	f8de 3008 	ldr.w	r3, [lr, #8]
 800bac4:	ee08 8a10 	vmov	s16, r8
 800bac8:	9805      	ldr	r0, [sp, #20]
 800baca:	4419      	add	r1, r3
 800bacc:	f8da 2008 	ldr.w	r2, [sl, #8]
 800bad0:	4407      	add	r7, r0
 800bad2:	9801      	ldr	r0, [sp, #4]
 800bad4:	950f      	str	r5, [sp, #60]	; 0x3c
 800bad6:	fb01 f000 	mul.w	r0, r1, r0
 800bada:	4601      	mov	r1, r0
 800badc:	9007      	str	r0, [sp, #28]
 800bade:	19b8      	adds	r0, r7, r6
 800bae0:	900a      	str	r0, [sp, #40]	; 0x28
 800bae2:	eb09 0006 	add.w	r0, r9, r6
 800bae6:	9e03      	ldr	r6, [sp, #12]
 800bae8:	9001      	str	r0, [sp, #4]
 800baea:	4608      	mov	r0, r1
 800baec:	4611      	mov	r1, r2
 800baee:	fb02 0206 	mla	r2, r2, r6, r0
 800baf2:	460f      	mov	r7, r1
 800baf4:	fb0b 5202 	mla	r2, fp, r2, r5
 800baf8:	9204      	str	r2, [sp, #16]
 800bafa:	1e9a      	subs	r2, r3, #2
 800bafc:	fb04 f303 	mul.w	r3, r4, r3
 800bb00:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb02:	fb04 8302 	mla	r3, r4, r2, r8
 800bb06:	9303      	str	r3, [sp, #12]
 800bb08:	fb0b f301 	mul.w	r3, fp, r1
 800bb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0e:	2300      	movs	r3, #0
 800bb10:	9306      	str	r3, [sp, #24]
 800bb12:	f1cb 0300 	rsb	r3, fp, #0
 800bb16:	4698      	mov	r8, r3
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	454b      	cmp	r3, r9
 800bb1c:	d00b      	beq.n	800bb36 <forward_pad+0x13a>
 800bb1e:	ee18 5a10 	vmov	r5, s16
 800bb22:	4443      	add	r3, r8
 800bb24:	4425      	add	r5, r4
 800bb26:	4622      	mov	r2, r4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f008 faca 	bl	80140c4 <memcpy>
 800bb30:	4548      	cmp	r0, r9
 800bb32:	4603      	mov	r3, r0
 800bb34:	d1f5      	bne.n	800bb22 <forward_pad+0x126>
 800bb36:	ee18 3a10 	vmov	r3, s16
 800bb3a:	9a05      	ldr	r2, [sp, #20]
 800bb3c:	ee18 1a10 	vmov	r1, s16
 800bb40:	9801      	ldr	r0, [sp, #4]
 800bb42:	4413      	add	r3, r2
 800bb44:	ee08 3a10 	vmov	s16, r3
 800bb48:	f008 fabc 	bl	80140c4 <memcpy>
 800bb4c:	9b07      	ldr	r3, [sp, #28]
 800bb4e:	429f      	cmp	r7, r3
 800bb50:	dd0d      	ble.n	800bb6e <forward_pad+0x172>
 800bb52:	461d      	mov	r5, r3
 800bb54:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 800bb58:	3501      	adds	r5, #1
 800bb5a:	4651      	mov	r1, sl
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4622      	mov	r2, r4
 800bb60:	f008 fab0 	bl	80140c4 <memcpy>
 800bb64:	42af      	cmp	r7, r5
 800bb66:	ebaa 0a04 	sub.w	sl, sl, r4
 800bb6a:	445e      	add	r6, fp
 800bb6c:	d1f4      	bne.n	800bb58 <forward_pad+0x15c>
 800bb6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb70:	9901      	ldr	r1, [sp, #4]
 800bb72:	4491      	add	r9, r2
 800bb74:	9b06      	ldr	r3, [sp, #24]
 800bb76:	4411      	add	r1, r2
 800bb78:	9a04      	ldr	r2, [sp, #16]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	9101      	str	r1, [sp, #4]
 800bb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb80:	9306      	str	r3, [sp, #24]
 800bb82:	440a      	add	r2, r1
 800bb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb86:	9204      	str	r2, [sp, #16]
 800bb88:	9a03      	ldr	r2, [sp, #12]
 800bb8a:	440a      	add	r2, r1
 800bb8c:	9203      	str	r2, [sp, #12]
 800bb8e:	9a02      	ldr	r2, [sp, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d1c1      	bne.n	800bb18 <forward_pad+0x11c>
 800bb94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb98:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800bb9c:	42a5      	cmp	r5, r4
 800bb9e:	d00c      	beq.n	800bbba <forward_pad+0x1be>
 800bba0:	9b08      	ldr	r3, [sp, #32]
 800bba2:	462e      	mov	r6, r5
 800bba4:	425f      	negs	r7, r3
 800bba6:	4698      	mov	r8, r3
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4630      	mov	r0, r6
 800bbac:	443c      	add	r4, r7
 800bbae:	4446      	add	r6, r8
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	f008 fa87 	bl	80140c4 <memcpy>
 800bbb6:	42a6      	cmp	r6, r4
 800bbb8:	d1f6      	bne.n	800bba8 <forward_pad+0x1ac>
 800bbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbbc:	9a08      	ldr	r2, [sp, #32]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	fb02 5503 	mla	r5, r2, r3, r5
 800bbc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbc6:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 800bbca:	42a5      	cmp	r5, r4
 800bbcc:	f43f af68 	beq.w	800baa0 <forward_pad+0xa4>
 800bbd0:	4617      	mov	r7, r2
 800bbd2:	4256      	negs	r6, r2
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	443c      	add	r4, r7
 800bbda:	4435      	add	r5, r6
 800bbdc:	463a      	mov	r2, r7
 800bbde:	f008 fa71 	bl	80140c4 <memcpy>
 800bbe2:	42a5      	cmp	r5, r4
 800bbe4:	d1f6      	bne.n	800bbd4 <forward_pad+0x1d8>
 800bbe6:	b011      	add	sp, #68	; 0x44
 800bbe8:	ecbd 8b02 	vpop	{d8}
 800bbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf0:	f8dc 1000 	ldr.w	r1, [ip]
 800bbf4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bbf6:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800bbfa:	2908      	cmp	r1, #8
 800bbfc:	f000 80b5 	beq.w	800bd6a <forward_pad+0x36e>
 800bc00:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800bc04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	dd0a      	ble.n	800bc20 <forward_pad+0x224>
 800bc0a:	4693      	mov	fp, r2
 800bc0c:	469a      	mov	sl, r3
 800bc0e:	44ca      	add	sl, r9
 800bc10:	4628      	mov	r0, r5
 800bc12:	464a      	mov	r2, r9
 800bc14:	68a1      	ldr	r1, [r4, #8]
 800bc16:	f008 fa55 	bl	80140c4 <memcpy>
 800bc1a:	45d3      	cmp	fp, sl
 800bc1c:	444d      	add	r5, r9
 800bc1e:	dcf6      	bgt.n	800bc0e <forward_pad+0x212>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dd2c      	ble.n	800bc80 <forward_pad+0x284>
 800bc26:	f04f 0a00 	mov.w	sl, #0
 800bc2a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800bc2e:	f8cd a004 	str.w	sl, [sp, #4]
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	dd0a      	ble.n	800bc4c <forward_pad+0x250>
 800bc36:	f04f 0a00 	mov.w	sl, #0
 800bc3a:	44ca      	add	sl, r9
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	464a      	mov	r2, r9
 800bc40:	68a1      	ldr	r1, [r4, #8]
 800bc42:	f008 fa3f 	bl	80140c4 <memcpy>
 800bc46:	4556      	cmp	r6, sl
 800bc48:	444d      	add	r5, r9
 800bc4a:	dcf6      	bgt.n	800bc3a <forward_pad+0x23e>
 800bc4c:	4641      	mov	r1, r8
 800bc4e:	4628      	mov	r0, r5
 800bc50:	465a      	mov	r2, fp
 800bc52:	44d8      	add	r8, fp
 800bc54:	f008 fa36 	bl	80140c4 <memcpy>
 800bc58:	2f00      	cmp	r7, #0
 800bc5a:	445d      	add	r5, fp
 800bc5c:	dd0a      	ble.n	800bc74 <forward_pad+0x278>
 800bc5e:	f04f 0a00 	mov.w	sl, #0
 800bc62:	44ca      	add	sl, r9
 800bc64:	4628      	mov	r0, r5
 800bc66:	464a      	mov	r2, r9
 800bc68:	68a1      	ldr	r1, [r4, #8]
 800bc6a:	f008 fa2b 	bl	80140c4 <memcpy>
 800bc6e:	4557      	cmp	r7, sl
 800bc70:	444d      	add	r5, r9
 800bc72:	dcf6      	bgt.n	800bc62 <forward_pad+0x266>
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	9a02      	ldr	r2, [sp, #8]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	d1d8      	bne.n	800bc32 <forward_pad+0x236>
 800bc80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bc82:	2f00      	cmp	r7, #0
 800bc84:	f77f af0c 	ble.w	800baa0 <forward_pad+0xa4>
 800bc88:	2600      	movs	r6, #0
 800bc8a:	444e      	add	r6, r9
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	464a      	mov	r2, r9
 800bc90:	68a1      	ldr	r1, [r4, #8]
 800bc92:	f008 fa17 	bl	80140c4 <memcpy>
 800bc96:	42b7      	cmp	r7, r6
 800bc98:	444d      	add	r5, r9
 800bc9a:	dcf6      	bgt.n	800bc8a <forward_pad+0x28e>
 800bc9c:	b011      	add	sp, #68	; 0x44
 800bc9e:	ecbd 8b02 	vpop	{d8}
 800bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	442f      	add	r7, r5
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	9706      	str	r7, [sp, #24]
 800bcb0:	dd32      	ble.n	800bd18 <forward_pad+0x31c>
 800bcb2:	fb04 f309 	mul.w	r3, r4, r9
 800bcb6:	9507      	str	r5, [sp, #28]
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	dd09      	ble.n	800bcd6 <forward_pad+0x2da>
 800bcc2:	2500      	movs	r5, #0
 800bcc4:	4425      	add	r5, r4
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4641      	mov	r1, r8
 800bccc:	f008 f9fa 	bl	80140c4 <memcpy>
 800bcd0:	42ae      	cmp	r6, r5
 800bcd2:	4427      	add	r7, r4
 800bcd4:	dcf6      	bgt.n	800bcc4 <forward_pad+0x2c8>
 800bcd6:	9b05      	ldr	r3, [sp, #20]
 800bcd8:	4641      	mov	r1, r8
 800bcda:	4638      	mov	r0, r7
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4498      	add	r8, r3
 800bce0:	441f      	add	r7, r3
 800bce2:	f008 f9ef 	bl	80140c4 <memcpy>
 800bce6:	f1b9 0f00 	cmp.w	r9, #0
 800bcea:	eba8 0a04 	sub.w	sl, r8, r4
 800bcee:	dd0c      	ble.n	800bd0a <forward_pad+0x30e>
 800bcf0:	46bb      	mov	fp, r7
 800bcf2:	2500      	movs	r5, #0
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	4658      	mov	r0, fp
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4651      	mov	r1, sl
 800bcfc:	f008 f9e2 	bl	80140c4 <memcpy>
 800bd00:	45a9      	cmp	r9, r5
 800bd02:	44a3      	add	fp, r4
 800bd04:	d1f6      	bne.n	800bcf4 <forward_pad+0x2f8>
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	441f      	add	r7, r3
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	9a02      	ldr	r2, [sp, #8]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	429a      	cmp	r2, r3
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	d1d3      	bne.n	800bcbe <forward_pad+0x2c2>
 800bd16:	9d07      	ldr	r5, [sp, #28]
 800bd18:	9b06      	ldr	r3, [sp, #24]
 800bd1a:	429d      	cmp	r5, r3
 800bd1c:	d00a      	beq.n	800bd34 <forward_pad+0x338>
 800bd1e:	461f      	mov	r7, r3
 800bd20:	462c      	mov	r4, r5
 800bd22:	9e08      	ldr	r6, [sp, #32]
 800bd24:	4620      	mov	r0, r4
 800bd26:	4434      	add	r4, r6
 800bd28:	4632      	mov	r2, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f008 f9ca 	bl	80140c4 <memcpy>
 800bd30:	42a7      	cmp	r7, r4
 800bd32:	d1f7      	bne.n	800bd24 <forward_pad+0x328>
 800bd34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	9a08      	ldr	r2, [sp, #32]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	fb02 5503 	mla	r5, r2, r3, r5
 800bd44:	442c      	add	r4, r5
 800bd46:	42a5      	cmp	r5, r4
 800bd48:	f43f aeaa 	beq.w	800baa0 <forward_pad+0xa4>
 800bd4c:	4617      	mov	r7, r2
 800bd4e:	4256      	negs	r6, r2
 800bd50:	4620      	mov	r0, r4
 800bd52:	4434      	add	r4, r6
 800bd54:	463a      	mov	r2, r7
 800bd56:	4629      	mov	r1, r5
 800bd58:	f008 f9b4 	bl	80140c4 <memcpy>
 800bd5c:	42a5      	cmp	r5, r4
 800bd5e:	d1f7      	bne.n	800bd50 <forward_pad+0x354>
 800bd60:	b011      	add	sp, #68	; 0x44
 800bd62:	ecbd 8b02 	vpop	{d8}
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	68a2      	ldr	r2, [r4, #8]
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	f992 9000 	ldrsb.w	r9, [r2]
 800bd74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd76:	4648      	mov	r0, r9
 800bd78:	18ac      	adds	r4, r5, r2
 800bd7a:	9403      	str	r4, [sp, #12]
 800bd7c:	f007 f818 	bl	8012db0 <st_int8_fill>
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd25      	ble.n	800bdd2 <forward_pad+0x3d6>
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	eb06 0a07 	add.w	sl, r6, r7
 800bd8c:	4625      	mov	r5, r4
 800bd8e:	9601      	str	r6, [sp, #4]
 800bd90:	469b      	mov	fp, r3
 800bd92:	9b05      	ldr	r3, [sp, #20]
 800bd94:	4434      	add	r4, r6
 800bd96:	449a      	add	sl, r3
 800bd98:	461e      	mov	r6, r3
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	9a01      	ldr	r2, [sp, #4]
 800bd9e:	4648      	mov	r0, r9
 800bda0:	f10b 0b01 	add.w	fp, fp, #1
 800bda4:	f007 f804 	bl	8012db0 <st_int8_fill>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4632      	mov	r2, r6
 800bdae:	f007 f867 	bl	8012e80 <st_int8_copy>
 800bdb2:	19a1      	adds	r1, r4, r6
 800bdb4:	463a      	mov	r2, r7
 800bdb6:	4648      	mov	r0, r9
 800bdb8:	f006 fffa 	bl	8012db0 <st_int8_fill>
 800bdbc:	9b02      	ldr	r3, [sp, #8]
 800bdbe:	4455      	add	r5, sl
 800bdc0:	44b0      	add	r8, r6
 800bdc2:	455b      	cmp	r3, fp
 800bdc4:	4454      	add	r4, sl
 800bdc6:	d1e8      	bne.n	800bd9a <forward_pad+0x39e>
 800bdc8:	461a      	mov	r2, r3
 800bdca:	9b03      	ldr	r3, [sp, #12]
 800bdcc:	fb0a 3302 	mla	r3, sl, r2, r3
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	9903      	ldr	r1, [sp, #12]
 800bdd8:	b011      	add	sp, #68	; 0x44
 800bdda:	ecbd 8b02 	vpop	{d8}
 800bdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde2:	f006 bfe5 	b.w	8012db0 <st_int8_fill>
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	deff      	udf	#255	; 0xff
 800bdea:	2300      	movs	r3, #0
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	deff      	udf	#255	; 0xff

0800bdf0 <forward_nl_integer>:
 800bdf0:	6982      	ldr	r2, [r0, #24]
 800bdf2:	8813      	ldrh	r3, [r2, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d02f      	beq.n	800be58 <forward_nl_integer+0x68>
 800bdf8:	b470      	push	{r4, r5, r6}
 800bdfa:	6852      	ldr	r2, [r2, #4]
 800bdfc:	6855      	ldr	r5, [r2, #4]
 800bdfe:	b105      	cbz	r5, 800be02 <forward_nl_integer+0x12>
 800be00:	682d      	ldr	r5, [r5, #0]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d048      	beq.n	800be98 <forward_nl_integer+0xa8>
 800be06:	6916      	ldr	r6, [r2, #16]
 800be08:	b106      	cbz	r6, 800be0c <forward_nl_integer+0x1c>
 800be0a:	6836      	ldr	r6, [r6, #0]
 800be0c:	68ab      	ldr	r3, [r5, #8]
 800be0e:	0a1b      	lsrs	r3, r3, #8
 800be10:	d033      	beq.n	800be7a <forward_nl_integer+0x8a>
 800be12:	68ec      	ldr	r4, [r5, #12]
 800be14:	2201      	movs	r2, #1
 800be16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be1e:	429c      	cmp	r4, r3
 800be20:	fb01 f202 	mul.w	r2, r1, r2
 800be24:	d1f9      	bne.n	800be1a <forward_nl_integer+0x2a>
 800be26:	69ab      	ldr	r3, [r5, #24]
 800be28:	69c4      	ldr	r4, [r0, #28]
 800be2a:	6819      	ldr	r1, [r3, #0]
 800be2c:	69b0      	ldr	r0, [r6, #24]
 800be2e:	020d      	lsls	r5, r1, #8
 800be30:	68a4      	ldr	r4, [r4, #8]
 800be32:	d513      	bpl.n	800be5c <forward_nl_integer+0x6c>
 800be34:	689e      	ldr	r6, [r3, #8]
 800be36:	6885      	ldr	r5, [r0, #8]
 800be38:	b162      	cbz	r2, 800be54 <forward_nl_integer+0x64>
 800be3a:	1e70      	subs	r0, r6, #1
 800be3c:	4603      	mov	r3, r0
 800be3e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800be42:	3302      	adds	r3, #2
 800be44:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800be48:	1b9b      	subs	r3, r3, r6
 800be4a:	5c61      	ldrb	r1, [r4, r1]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	f805 1b01 	strb.w	r1, [r5], #1
 800be52:	d8f3      	bhi.n	800be3c <forward_nl_integer+0x4c>
 800be54:	bc70      	pop	{r4, r5, r6}
 800be56:	4770      	bx	lr
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	deff      	udf	#255	; 0xff
 800be5c:	6899      	ldr	r1, [r3, #8]
 800be5e:	6883      	ldr	r3, [r0, #8]
 800be60:	2a00      	cmp	r2, #0
 800be62:	d0f7      	beq.n	800be54 <forward_nl_integer+0x64>
 800be64:	3901      	subs	r1, #1
 800be66:	441a      	add	r2, r3
 800be68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be6c:	5c20      	ldrb	r0, [r4, r0]
 800be6e:	f803 0b01 	strb.w	r0, [r3], #1
 800be72:	4293      	cmp	r3, r2
 800be74:	d1f8      	bne.n	800be68 <forward_nl_integer+0x78>
 800be76:	bc70      	pop	{r4, r5, r6}
 800be78:	4770      	bx	lr
 800be7a:	69ab      	ldr	r3, [r5, #24]
 800be7c:	69c0      	ldr	r0, [r0, #28]
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	69b2      	ldr	r2, [r6, #24]
 800be82:	0209      	lsls	r1, r1, #8
 800be84:	6884      	ldr	r4, [r0, #8]
 800be86:	d503      	bpl.n	800be90 <forward_nl_integer+0xa0>
 800be88:	6895      	ldr	r5, [r2, #8]
 800be8a:	2201      	movs	r2, #1
 800be8c:	689e      	ldr	r6, [r3, #8]
 800be8e:	e7d4      	b.n	800be3a <forward_nl_integer+0x4a>
 800be90:	6899      	ldr	r1, [r3, #8]
 800be92:	6893      	ldr	r3, [r2, #8]
 800be94:	2201      	movs	r2, #1
 800be96:	e7e5      	b.n	800be64 <forward_nl_integer+0x74>
 800be98:	2300      	movs	r3, #0
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	deff      	udf	#255	; 0xff
 800be9e:	bf00      	nop

0800bea0 <ai_check_custom_types>:
 800bea0:	b082      	sub	sp, #8
 800bea2:	4b12      	ldr	r3, [pc, #72]	; (800beec <ai_check_custom_types+0x4c>)
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	b118      	cbz	r0, 800beb0 <ai_check_custom_types+0x10>
 800bea8:	7803      	ldrb	r3, [r0, #0]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d002      	beq.n	800beb4 <ai_check_custom_types+0x14>
 800beae:	2000      	movs	r0, #0
 800beb0:	b002      	add	sp, #8
 800beb2:	4770      	bx	lr
 800beb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800beb8:	4293      	cmp	r3, r2
 800beba:	d004      	beq.n	800bec6 <ai_check_custom_types+0x26>
 800bebc:	2001      	movs	r0, #1
 800bebe:	f080 0001 	eor.w	r0, r0, #1
 800bec2:	b002      	add	sp, #8
 800bec4:	4770      	bx	lr
 800bec6:	7842      	ldrb	r2, [r0, #1]
 800bec8:	3001      	adds	r0, #1
 800beca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d1f4      	bne.n	800bebc <ai_check_custom_types+0x1c>
 800bed2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bed6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d1ee      	bne.n	800bebc <ai_check_custom_types+0x1c>
 800bede:	7842      	ldrb	r2, [r0, #1]
 800bee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d1e9      	bne.n	800bebc <ai_check_custom_types+0x1c>
 800bee8:	2000      	movs	r0, #0
 800beea:	e7e8      	b.n	800bebe <ai_check_custom_types+0x1e>
 800beec:	84048403 	.word	0x84048403

0800bef0 <ai_layers_init_all>:
 800bef0:	2100      	movs	r1, #0
 800bef2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bef4:	b13b      	cbz	r3, 800bf06 <ai_layers_init_all+0x16>
 800bef6:	691a      	ldr	r2, [r3, #16]
 800bef8:	3101      	adds	r1, #1
 800befa:	60d8      	str	r0, [r3, #12]
 800befc:	429a      	cmp	r2, r3
 800befe:	4613      	mov	r3, r2
 800bf00:	d001      	beq.n	800bf06 <ai_layers_init_all+0x16>
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d1f6      	bne.n	800bef4 <ai_layers_init_all+0x4>
 800bf06:	4608      	mov	r0, r1
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop

0800bf0c <ai_layers_post_init_all>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	2500      	movs	r5, #0
 800bf10:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bf12:	b16c      	cbz	r4, 800bf30 <ai_layers_post_init_all+0x24>
 800bf14:	6863      	ldr	r3, [r4, #4]
 800bf16:	07db      	lsls	r3, r3, #31
 800bf18:	d504      	bpl.n	800bf24 <ai_layers_post_init_all+0x18>
 800bf1a:	6a23      	ldr	r3, [r4, #32]
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	b10b      	cbz	r3, 800bf24 <ai_layers_post_init_all+0x18>
 800bf20:	3501      	adds	r5, #1
 800bf22:	4798      	blx	r3
 800bf24:	6923      	ldr	r3, [r4, #16]
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	461c      	mov	r4, r3
 800bf2a:	d001      	beq.n	800bf30 <ai_layers_post_init_all+0x24>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1f0      	bne.n	800bf12 <ai_layers_post_init_all+0x6>
 800bf30:	4628      	mov	r0, r5
 800bf32:	bd38      	pop	{r3, r4, r5, pc}

0800bf34 <ai_layers_forward_all>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	2f00      	cmp	r7, #0
 800bf3e:	d02c      	beq.n	800bf9a <ai_layers_forward_all+0x66>
 800bf40:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800bf42:	b1e1      	cbz	r1, 800bf7e <ai_layers_forward_all+0x4a>
 800bf44:	2600      	movs	r6, #0
 800bf46:	6381      	str	r1, [r0, #56]	; 0x38
 800bf48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	47b8      	blx	r7
 800bf4e:	46b0      	mov	r8, r6
 800bf50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf54:	2002      	movs	r0, #2
 800bf56:	47b8      	blx	r7
 800bf58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	696b      	ldr	r3, [r5, #20]
 800bf5e:	4798      	blx	r3
 800bf60:	692b      	ldr	r3, [r5, #16]
 800bf62:	2003      	movs	r0, #3
 800bf64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf66:	429d      	cmp	r5, r3
 800bf68:	4619      	mov	r1, r3
 800bf6a:	d00c      	beq.n	800bf86 <ai_layers_forward_all+0x52>
 800bf6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf6e:	3601      	adds	r6, #1
 800bf70:	47b8      	blx	r7
 800bf72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf74:	2900      	cmp	r1, #0
 800bf76:	d1ec      	bne.n	800bf52 <ai_layers_forward_all+0x1e>
 800bf78:	4630      	mov	r0, r6
 800bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7e:	460e      	mov	r6, r1
 800bf80:	4630      	mov	r0, r6
 800bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf86:	2100      	movs	r1, #0
 800bf88:	2003      	movs	r0, #3
 800bf8a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800bf8e:	3601      	adds	r6, #1
 800bf90:	47b8      	blx	r7
 800bf92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d1dc      	bne.n	800bf52 <ai_layers_forward_all+0x1e>
 800bf98:	e7ee      	b.n	800bf78 <ai_layers_forward_all+0x44>
 800bf9a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800bf9c:	b19d      	cbz	r5, 800bfc6 <ai_layers_forward_all+0x92>
 800bf9e:	463e      	mov	r6, r7
 800bfa0:	6385      	str	r5, [r0, #56]	; 0x38
 800bfa2:	e003      	b.n	800bfac <ai_layers_forward_all+0x78>
 800bfa4:	3601      	adds	r6, #1
 800bfa6:	63a5      	str	r5, [r4, #56]	; 0x38
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	d0e5      	beq.n	800bf78 <ai_layers_forward_all+0x44>
 800bfac:	696b      	ldr	r3, [r5, #20]
 800bfae:	4628      	mov	r0, r5
 800bfb0:	4798      	blx	r3
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	692d      	ldr	r5, [r5, #16]
 800bfb6:	429d      	cmp	r5, r3
 800bfb8:	d1f4      	bne.n	800bfa4 <ai_layers_forward_all+0x70>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	63a3      	str	r3, [r4, #56]	; 0x38
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc6:	462e      	mov	r6, r5
 800bfc8:	e7d6      	b.n	800bf78 <ai_layers_forward_all+0x44>
 800bfca:	bf00      	nop

0800bfcc <pool_func_ap_array_integer_INT8>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	b093      	sub	sp, #76	; 0x4c
 800bfd2:	468c      	mov	ip, r1
 800bfd4:	469a      	mov	sl, r3
 800bfd6:	6804      	ldr	r4, [r0, #0]
 800bfd8:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800bfdc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800bfe0:	910e      	str	r1, [sp, #56]	; 0x38
 800bfe2:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800bfe6:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe8:	910f      	str	r1, [sp, #60]	; 0x3c
 800bfea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bfec:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800bff0:	6980      	ldr	r0, [r0, #24]
 800bff2:	9110      	str	r1, [sp, #64]	; 0x40
 800bff4:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800bff8:	6999      	ldr	r1, [r3, #24]
 800bffa:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 800bffe:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 800c002:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2c00      	cmp	r4, #0
 800c00a:	d05c      	beq.n	800c0c6 <pool_func_ap_array_integer_INT8+0xfa>
 800c00c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c010:	f1b9 0f00 	cmp.w	r9, #0
 800c014:	d041      	beq.n	800c09a <pool_func_ap_array_integer_INT8+0xce>
 800c016:	8865      	ldrh	r5, [r4, #2]
 800c018:	2d00      	cmp	r5, #0
 800c01a:	d06d      	beq.n	800c0f8 <pool_func_ap_array_integer_INT8+0x12c>
 800c01c:	f8d9 6000 	ldr.w	r6, [r9]
 800c020:	ed96 0a00 	vldr	s0, [r6]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d06b      	beq.n	800c100 <pool_func_ap_array_integer_INT8+0x134>
 800c028:	685e      	ldr	r6, [r3, #4]
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	d03c      	beq.n	800c0a8 <pool_func_ap_array_integer_INT8+0xdc>
 800c02e:	885d      	ldrh	r5, [r3, #2]
 800c030:	9511      	str	r5, [sp, #68]	; 0x44
 800c032:	2d00      	cmp	r5, #0
 800c034:	d050      	beq.n	800c0d8 <pool_func_ap_array_integer_INT8+0x10c>
 800c036:	6835      	ldr	r5, [r6, #0]
 800c038:	6880      	ldr	r0, [r0, #8]
 800c03a:	6889      	ldr	r1, [r1, #8]
 800c03c:	edd5 0a00 	vldr	s1, [r5]
 800c040:	f1b9 0f00 	cmp.w	r9, #0
 800c044:	d052      	beq.n	800c0ec <pool_func_ap_array_integer_INT8+0x120>
 800c046:	8864      	ldrh	r4, [r4, #2]
 800c048:	2c00      	cmp	r4, #0
 800c04a:	d037      	beq.n	800c0bc <pool_func_ap_array_integer_INT8+0xf0>
 800c04c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800c050:	f994 4000 	ldrsb.w	r4, [r4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d04d      	beq.n	800c0f4 <pool_func_ap_array_integer_INT8+0x128>
 800c058:	2e00      	cmp	r6, #0
 800c05a:	d032      	beq.n	800c0c2 <pool_func_ap_array_integer_INT8+0xf6>
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	9311      	str	r3, [sp, #68]	; 0x44
 800c060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c062:	2b00      	cmp	r3, #0
 800c064:	d046      	beq.n	800c0f4 <pool_func_ap_array_integer_INT8+0x128>
 800c066:	6873      	ldr	r3, [r6, #4]
 800c068:	f993 5000 	ldrsb.w	r5, [r3]
 800c06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c06e:	f8cd a000 	str.w	sl, [sp]
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c076:	9303      	str	r3, [sp, #12]
 800c078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07a:	9302      	str	r3, [sp, #8]
 800c07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c07e:	9301      	str	r3, [sp, #4]
 800c080:	4613      	mov	r3, r2
 800c082:	4662      	mov	r2, ip
 800c084:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800c088:	e9cd e807 	strd	lr, r8, [sp, #28]
 800c08c:	e9cd b705 	strd	fp, r7, [sp, #20]
 800c090:	f007 fcdc 	bl	8013a4c <st_int8_avepool>
 800c094:	b013      	add	sp, #76	; 0x4c
 800c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d03c      	beq.n	800c118 <pool_func_ap_array_integer_INT8+0x14c>
 800c09e:	685e      	ldr	r6, [r3, #4]
 800c0a0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	d1c2      	bne.n	800c02e <pool_func_ap_array_integer_INT8+0x62>
 800c0a8:	6880      	ldr	r0, [r0, #8]
 800c0aa:	6889      	ldr	r1, [r1, #8]
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	d02d      	beq.n	800c10e <pool_func_ap_array_integer_INT8+0x142>
 800c0b2:	8864      	ldrh	r4, [r4, #2]
 800c0b4:	2c00      	cmp	r4, #0
 800c0b6:	d151      	bne.n	800c15c <pool_func_ap_array_integer_INT8+0x190>
 800c0b8:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c0bc:	2400      	movs	r4, #0
 800c0be:	2e00      	cmp	r6, #0
 800c0c0:	d1cc      	bne.n	800c05c <pool_func_ap_array_integer_INT8+0x90>
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	e7d2      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c0c6:	b33b      	cbz	r3, 800c118 <pool_func_ap_array_integer_INT8+0x14c>
 800c0c8:	685e      	ldr	r6, [r3, #4]
 800c0ca:	b376      	cbz	r6, 800c12a <pool_func_ap_array_integer_INT8+0x15e>
 800c0cc:	885d      	ldrh	r5, [r3, #2]
 800c0ce:	9511      	str	r5, [sp, #68]	; 0x44
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	d133      	bne.n	800c13c <pool_func_ap_array_integer_INT8+0x170>
 800c0d4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c0d8:	6880      	ldr	r0, [r0, #8]
 800c0da:	6889      	ldr	r1, [r1, #8]
 800c0dc:	b1c4      	cbz	r4, 800c110 <pool_func_ap_array_integer_INT8+0x144>
 800c0de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c0e2:	eddf 0a22 	vldr	s1, [pc, #136]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c0e6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ea:	d1ac      	bne.n	800c046 <pool_func_ap_array_integer_INT8+0x7a>
 800c0ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ee:	464c      	mov	r4, r9
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1b8      	bne.n	800c066 <pool_func_ap_array_integer_INT8+0x9a>
 800c0f4:	461d      	mov	r5, r3
 800c0f6:	e7b9      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c0f8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d193      	bne.n	800c028 <pool_func_ap_array_integer_INT8+0x5c>
 800c100:	6880      	ldr	r0, [r0, #8]
 800c102:	6889      	ldr	r1, [r1, #8]
 800c104:	bb15      	cbnz	r5, 800c14c <pool_func_ap_array_integer_INT8+0x180>
 800c106:	462c      	mov	r4, r5
 800c108:	eddf 0a18 	vldr	s1, [pc, #96]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c10c:	e7ae      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c10e:	464c      	mov	r4, r9
 800c110:	eddf 0a16 	vldr	s1, [pc, #88]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c114:	4625      	mov	r5, r4
 800c116:	e7a9      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c118:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c11c:	461c      	mov	r4, r3
 800c11e:	6880      	ldr	r0, [r0, #8]
 800c120:	461d      	mov	r5, r3
 800c122:	eef0 0a40 	vmov.f32	s1, s0
 800c126:	6889      	ldr	r1, [r1, #8]
 800c128:	e7a0      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c12a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c12e:	4634      	mov	r4, r6
 800c130:	6880      	ldr	r0, [r0, #8]
 800c132:	4635      	mov	r5, r6
 800c134:	eef0 0a40 	vmov.f32	s1, s0
 800c138:	6889      	ldr	r1, [r1, #8]
 800c13a:	e797      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c13c:	6833      	ldr	r3, [r6, #0]
 800c13e:	6880      	ldr	r0, [r0, #8]
 800c140:	6889      	ldr	r1, [r1, #8]
 800c142:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c146:	edd3 0a00 	vldr	s1, [r3]
 800c14a:	e78c      	b.n	800c066 <pool_func_ap_array_integer_INT8+0x9a>
 800c14c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800c150:	461d      	mov	r5, r3
 800c152:	eddf 0a06 	vldr	s1, [pc, #24]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c156:	f994 4000 	ldrsb.w	r4, [r4]
 800c15a:	e787      	b.n	800c06c <pool_func_ap_array_integer_INT8+0xa0>
 800c15c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c160:	eddf 0a02 	vldr	s1, [pc, #8]	; 800c16c <pool_func_ap_array_integer_INT8+0x1a0>
 800c164:	f993 4000 	ldrsb.w	r4, [r3]
 800c168:	e7ab      	b.n	800c0c2 <pool_func_ap_array_integer_INT8+0xf6>
 800c16a:	bf00      	nop
 800c16c:	00000000 	.word	0x00000000

0800c170 <forward_lite_node_convert_integer_iu8ou8>:
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	f89d 3000 	ldrb.w	r3, [sp]
 800c178:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c17c:	ee06 3a90 	vmov	s13, r3
 800c180:	1883      	adds	r3, r0, r2
 800c182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c186:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c18a:	4298      	cmp	r0, r3
 800c18c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c190:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c194:	d215      	bcs.n	800c1c2 <forward_lite_node_convert_integer_iu8ou8+0x52>
 800c196:	3801      	subs	r0, #1
 800c198:	440a      	add	r2, r1
 800c19a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c19e:	eef0 7a66 	vmov.f32	s15, s13
 800c1a2:	ee07 3a10 	vmov	s14, r3
 800c1a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1aa:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c1ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1b2:	ee17 3a90 	vmov	r3, s15
 800c1b6:	f383 0308 	usat	r3, #8, r3
 800c1ba:	f801 3b01 	strb.w	r3, [r1], #1
 800c1be:	4291      	cmp	r1, r2
 800c1c0:	d1eb      	bne.n	800c19a <forward_lite_node_convert_integer_iu8ou8+0x2a>
 800c1c2:	4770      	bx	lr

0800c1c4 <forward_lite_node_convert_integer_iu8os8>:
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	f99d 3000 	ldrsb.w	r3, [sp]
 800c1cc:	ee06 3a90 	vmov	s13, r3
 800c1d0:	1883      	adds	r3, r0, r2
 800c1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c1da:	4298      	cmp	r0, r3
 800c1dc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c1e0:	d22d      	bcs.n	800c23e <forward_lite_node_convert_integer_iu8os8+0x7a>
 800c1e2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c1e6:	3801      	subs	r0, #1
 800c1e8:	440a      	add	r2, r1
 800c1ea:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c240 <forward_lite_node_convert_integer_iu8os8+0x7c>
 800c1ee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c1f2:	eef0 7a66 	vmov.f32	s15, s13
 800c1f6:	ee07 3a10 	vmov	s14, r3
 800c1fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1fe:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c206:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800c20a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c21a:	dd08      	ble.n	800c22e <forward_lite_node_convert_integer_iu8os8+0x6a>
 800c21c:	ee17 3a10 	vmov	r3, s14
 800c220:	f303 0307 	ssat	r3, #8, r3
 800c224:	f801 3b01 	strb.w	r3, [r1], #1
 800c228:	4291      	cmp	r1, r2
 800c22a:	d1e0      	bne.n	800c1ee <forward_lite_node_convert_integer_iu8os8+0x2a>
 800c22c:	4770      	bx	lr
 800c22e:	ee17 3a90 	vmov	r3, s15
 800c232:	f303 0307 	ssat	r3, #8, r3
 800c236:	f801 3b01 	strb.w	r3, [r1], #1
 800c23a:	4291      	cmp	r1, r2
 800c23c:	d1d7      	bne.n	800c1ee <forward_lite_node_convert_integer_iu8os8+0x2a>
 800c23e:	4770      	bx	lr
 800c240:	3efffffc 	.word	0x3efffffc

0800c244 <forward_lite_node_convert_integer_iu8os8_fast>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	1095      	asrs	r5, r2, #2
 800c248:	2d00      	cmp	r5, #0
 800c24a:	dd31      	ble.n	800c2b0 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800c24c:	00ae      	lsls	r6, r5, #2
 800c24e:	460c      	mov	r4, r1
 800c250:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c254:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800c258:	f850 3b04 	ldr.w	r3, [r0], #4
 800c25c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800c260:	fa3f fc8c 	uxtb16	ip, ip
 800c264:	fadc fc0e 	ssub16	ip, ip, lr
 800c268:	fa3f f383 	uxtb16	r3, r3
 800c26c:	fad3 f30e 	ssub16	r3, r3, lr
 800c270:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800c274:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c278:	42a8      	cmp	r0, r5
 800c27a:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800c27e:	ea43 030c 	orr.w	r3, r3, ip
 800c282:	f844 3b04 	str.w	r3, [r4], #4
 800c286:	d1e7      	bne.n	800c258 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800c288:	4431      	add	r1, r6
 800c28a:	f012 0203 	ands.w	r2, r2, #3
 800c28e:	d00e      	beq.n	800c2ae <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c290:	782b      	ldrb	r3, [r5, #0]
 800c292:	3a01      	subs	r2, #1
 800c294:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c298:	700b      	strb	r3, [r1, #0]
 800c29a:	d008      	beq.n	800c2ae <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c29c:	786b      	ldrb	r3, [r5, #1]
 800c29e:	2a01      	cmp	r2, #1
 800c2a0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c2a4:	704b      	strb	r3, [r1, #1]
 800c2a6:	d002      	beq.n	800c2ae <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800c2a8:	78ab      	ldrb	r3, [r5, #2]
 800c2aa:	3b80      	subs	r3, #128	; 0x80
 800c2ac:	708b      	strb	r3, [r1, #2]
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	e7ea      	b.n	800c28a <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800c2b4 <forward_lite_node_convert_integer_is8ou8>:
 800c2b4:	ee07 3a90 	vmov	s15, r3
 800c2b8:	f89d 3000 	ldrb.w	r3, [sp]
 800c2bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c2c0:	ee06 3a90 	vmov	s13, r3
 800c2c4:	1883      	adds	r3, r0, r2
 800c2c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ca:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800c2ce:	4298      	cmp	r0, r3
 800c2d0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c2d4:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800c2d8:	d215      	bcs.n	800c306 <forward_lite_node_convert_integer_is8ou8+0x52>
 800c2da:	3801      	subs	r0, #1
 800c2dc:	440a      	add	r2, r1
 800c2de:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800c2e2:	eef0 7a66 	vmov.f32	s15, s13
 800c2e6:	ee07 3a10 	vmov	s14, r3
 800c2ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2ee:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2f6:	ee17 3a90 	vmov	r3, s15
 800c2fa:	f383 0308 	usat	r3, #8, r3
 800c2fe:	f801 3b01 	strb.w	r3, [r1], #1
 800c302:	4291      	cmp	r1, r2
 800c304:	d1eb      	bne.n	800c2de <forward_lite_node_convert_integer_is8ou8+0x2a>
 800c306:	4770      	bx	lr

0800c308 <forward_lite_node_convert_integer_is8ou8_fast>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	1095      	asrs	r5, r2, #2
 800c30c:	2d00      	cmp	r5, #0
 800c30e:	dd2d      	ble.n	800c36c <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800c310:	00ae      	lsls	r6, r5, #2
 800c312:	460c      	mov	r4, r1
 800c314:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c318:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800c31c:	f850 3b04 	ldr.w	r3, [r0], #4
 800c320:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800c324:	fa2f fc8c 	sxtb16	ip, ip
 800c328:	fa9c fc0e 	sadd16	ip, ip, lr
 800c32c:	fa2f f383 	sxtb16	r3, r3
 800c330:	fa93 f30e 	sadd16	r3, r3, lr
 800c334:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c338:	42a8      	cmp	r0, r5
 800c33a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c33e:	f844 3b04 	str.w	r3, [r4], #4
 800c342:	d1eb      	bne.n	800c31c <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800c344:	4431      	add	r1, r6
 800c346:	f012 0203 	ands.w	r2, r2, #3
 800c34a:	d00e      	beq.n	800c36a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c34c:	782b      	ldrb	r3, [r5, #0]
 800c34e:	3a01      	subs	r2, #1
 800c350:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c354:	700b      	strb	r3, [r1, #0]
 800c356:	d008      	beq.n	800c36a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c358:	786b      	ldrb	r3, [r5, #1]
 800c35a:	2a01      	cmp	r2, #1
 800c35c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800c360:	704b      	strb	r3, [r1, #1]
 800c362:	d002      	beq.n	800c36a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800c364:	78ab      	ldrb	r3, [r5, #2]
 800c366:	3b80      	subs	r3, #128	; 0x80
 800c368:	708b      	strb	r3, [r1, #2]
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	4605      	mov	r5, r0
 800c36e:	e7ea      	b.n	800c346 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800c370 <align_factor>:
 800c370:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c374:	4602      	mov	r2, r0
 800c376:	b508      	push	{r3, lr}
 800c378:	eeb4 0a67 	vcmp.f32	s0, s15
 800c37c:	2300      	movs	r3, #0
 800c37e:	8003      	strh	r3, [r0, #0]
 800c380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c384:	d524      	bpl.n	800c3d0 <align_factor+0x60>
 800c386:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38e:	dd1f      	ble.n	800c3d0 <align_factor+0x60>
 800c390:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c394:	2301      	movs	r3, #1
 800c396:	e005      	b.n	800c3a4 <align_factor+0x34>
 800c398:	8013      	strh	r3, [r2, #0]
 800c39a:	b28b      	uxth	r3, r1
 800c39c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c3a0:	2b21      	cmp	r3, #33	; 0x21
 800c3a2:	d02b      	beq.n	800c3fc <align_factor+0x8c>
 800c3a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c3a8:	1c59      	adds	r1, r3, #1
 800c3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ae:	d4f3      	bmi.n	800c398 <align_factor+0x28>
 800c3b0:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c410 <align_factor+0xa0>
 800c3b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c3b8:	ee17 0a90 	vmov	r0, s15
 800c3bc:	f7f3 ffb0 	bl	8000320 <__aeabi_f2lz>
 800c3c0:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c3c4:	d003      	beq.n	800c3ce <align_factor+0x5e>
 800c3c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800c3ca:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800c3ce:	bd08      	pop	{r3, pc}
 800c3d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c3d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c3dc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800c3e0:	e005      	b.n	800c3ee <align_factor+0x7e>
 800c3e2:	8013      	strh	r3, [r2, #0]
 800c3e4:	b28b      	uxth	r3, r1
 800c3e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c3ea:	4283      	cmp	r3, r0
 800c3ec:	d00a      	beq.n	800c404 <align_factor+0x94>
 800c3ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c3f2:	1e59      	subs	r1, r3, #1
 800c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f8:	dcf3      	bgt.n	800c3e2 <align_factor+0x72>
 800c3fa:	e7d9      	b.n	800c3b0 <align_factor+0x40>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	8013      	strh	r3, [r2, #0]
 800c402:	bd08      	pop	{r3, pc}
 800c404:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800c408:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c40c:	8013      	strh	r3, [r2, #0]
 800c40e:	e7cf      	b.n	800c3b0 <align_factor+0x40>
 800c410:	4f000000 	.word	0x4f000000

0800c414 <align_factor_ch>:
 800c414:	2900      	cmp	r1, #0
 800c416:	d05d      	beq.n	800c4d4 <align_factor_ch+0xc0>
 800c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c41c:	ed2d 8b04 	vpush	{d8-d9}
 800c420:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800c424:	4604      	mov	r4, r0
 800c426:	4691      	mov	r9, r2
 800c428:	4698      	mov	r8, r3
 800c42a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800c42e:	eddf 9a2a 	vldr	s19, [pc, #168]	; 800c4d8 <align_factor_ch+0xc4>
 800c432:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800c436:	2700      	movs	r7, #0
 800c438:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c43c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c440:	ecf4 7a01 	vldmia	r4!, {s15}
 800c444:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c448:	eef4 7a68 	vcmp.f32	s15, s17
 800c44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c450:	d528      	bpl.n	800c4a4 <align_factor_ch+0x90>
 800c452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	dd23      	ble.n	800c4a4 <align_factor_ch+0x90>
 800c45c:	2200      	movs	r2, #0
 800c45e:	e003      	b.n	800c468 <align_factor_ch+0x54>
 800c460:	2a20      	cmp	r2, #32
 800c462:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c466:	d031      	beq.n	800c4cc <align_factor_ch+0xb8>
 800c468:	eef4 7ac8 	vcmpe.f32	s15, s16
 800c46c:	b213      	sxth	r3, r2
 800c46e:	3201      	adds	r2, #1
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	d4f4      	bmi.n	800c460 <align_factor_ch+0x4c>
 800c476:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c47a:	f8a8 3000 	strh.w	r3, [r8]
 800c47e:	ee17 0a90 	vmov	r0, s15
 800c482:	f7f3 ff4d 	bl	8000320 <__aeabi_f2lz>
 800c486:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c48a:	bf18      	it	ne
 800c48c:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800c490:	42a5      	cmp	r5, r4
 800c492:	f108 0802 	add.w	r8, r8, #2
 800c496:	f849 0b04 	str.w	r0, [r9], #4
 800c49a:	d1d1      	bne.n	800c440 <align_factor_ch+0x2c>
 800c49c:	ecbd 8b04 	vpop	{d8-d9}
 800c4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e005      	b.n	800c4b4 <align_factor_ch+0xa0>
 800c4a8:	b213      	sxth	r3, r2
 800c4aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c4ae:	f113 0f1f 	cmn.w	r3, #31
 800c4b2:	d006      	beq.n	800c4c2 <align_factor_ch+0xae>
 800c4b4:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c4b8:	1e5a      	subs	r2, r3, #1
 800c4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4be:	dcf3      	bgt.n	800c4a8 <align_factor_ch+0x94>
 800c4c0:	e7d9      	b.n	800c476 <align_factor_ch+0x62>
 800c4c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c4c6:	f06f 031d 	mvn.w	r3, #29
 800c4ca:	e7d4      	b.n	800c476 <align_factor_ch+0x62>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	f8a8 7000 	strh.w	r7, [r8]
 800c4d2:	e7dd      	b.n	800c490 <align_factor_ch+0x7c>
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	4f000000 	.word	0x4f000000

0800c4dc <st_sssa8_ch_conv_dw_Wadapt>:
 800c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	b089      	sub	sp, #36	; 0x24
 800c4e2:	461e      	mov	r6, r3
 800c4e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800c4e6:	9304      	str	r3, [sp, #16]
 800c4e8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c4ec:	9005      	str	r0, [sp, #20]
 800c4ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c4f2:	9203      	str	r2, [sp, #12]
 800c4f4:	088c      	lsrs	r4, r1, #2
 800c4f6:	9402      	str	r4, [sp, #8]
 800c4f8:	d05a      	beq.n	800c5b0 <st_sssa8_ch_conv_dw_Wadapt+0xd4>
 800c4fa:	fb06 f902 	mul.w	r9, r6, r2
 800c4fe:	4615      	mov	r5, r2
 800c500:	4607      	mov	r7, r0
 800c502:	1e60      	subs	r0, r4, #1
 800c504:	f3c9 094f 	ubfx	r9, r9, #1, #16
 800c508:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800c50c:	f107 0a04 	add.w	sl, r7, #4
 800c510:	b280      	uxth	r0, r0
 800c512:	f109 32ff 	add.w	r2, r9, #4294967295
 800c516:	46b8      	mov	r8, r7
 800c518:	fb15 fb06 	smulbb	fp, r5, r6
 800c51c:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 800c520:	b292      	uxth	r2, r2
 800c522:	4f51      	ldr	r7, [pc, #324]	; (800c668 <st_sssa8_ch_conv_dw_Wadapt+0x18c>)
 800c524:	f00b 0b01 	and.w	fp, fp, #1
 800c528:	468c      	mov	ip, r1
 800c52a:	fb02 1201 	mla	r2, r2, r1, r1
 800c52e:	0054      	lsls	r4, r2, #1
 800c530:	9401      	str	r4, [sp, #4]
 800c532:	4644      	mov	r4, r8
 800c534:	9307      	str	r3, [sp, #28]
 800c536:	f1b9 0f00 	cmp.w	r9, #0
 800c53a:	d02b      	beq.n	800c594 <st_sssa8_ch_conv_dw_Wadapt+0xb8>
 800c53c:	4648      	mov	r0, r9
 800c53e:	9907      	ldr	r1, [sp, #28]
 800c540:	3801      	subs	r0, #1
 800c542:	f854 500c 	ldr.w	r5, [r4, ip]
 800c546:	1d0a      	adds	r2, r1, #4
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	b280      	uxth	r0, r0
 800c54c:	4474      	add	r4, lr
 800c54e:	9207      	str	r2, [sp, #28]
 800c550:	ea05 0207 	and.w	r2, r5, r7
 800c554:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 800c558:	b29b      	uxth	r3, r3
 800c55a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800c55e:	9d07      	ldr	r5, [sp, #28]
 800c560:	fa2f f683 	sxtb16	r6, r3
 800c564:	600e      	str	r6, [r1, #0]
 800c566:	1d29      	adds	r1, r5, #4
 800c568:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c56c:	9107      	str	r1, [sp, #28]
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	9b07      	ldr	r3, [sp, #28]
 800c572:	fa2f f182 	sxtb16	r1, r2
 800c576:	3304      	adds	r3, #4
 800c578:	f843 1c04 	str.w	r1, [r3, #-4]
 800c57c:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c580:	9307      	str	r3, [sp, #28]
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	3304      	adds	r3, #4
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d1d7      	bne.n	800c53e <st_sssa8_ch_conv_dw_Wadapt+0x62>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	eb03 0408 	add.w	r4, r3, r8
 800c594:	9907      	ldr	r1, [sp, #28]
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	d12e      	bne.n	800c5fa <st_sssa8_ch_conv_dw_Wadapt+0x11e>
 800c59c:	460b      	mov	r3, r1
 800c59e:	f108 0804 	add.w	r8, r8, #4
 800c5a2:	45d0      	cmp	r8, sl
 800c5a4:	d1c5      	bne.n	800c532 <st_sssa8_ch_conv_dw_Wadapt+0x56>
 800c5a6:	9a02      	ldr	r2, [sp, #8]
 800c5a8:	4661      	mov	r1, ip
 800c5aa:	0092      	lsls	r2, r2, #2
 800c5ac:	b292      	uxth	r2, r2
 800c5ae:	9202      	str	r2, [sp, #8]
 800c5b0:	f011 0203 	ands.w	r2, r1, #3
 800c5b4:	d037      	beq.n	800c626 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c5b6:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800c5ba:	fb10 f404 	smulbb	r4, r0, r4
 800c5be:	b2a4      	uxth	r4, r4
 800c5c0:	b38c      	cbz	r4, 800c626 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c5c2:	2901      	cmp	r1, #1
 800c5c4:	d132      	bne.n	800c62c <st_sssa8_ch_conv_dw_Wadapt+0x150>
 800c5c6:	0067      	lsls	r7, r4, #1
 800c5c8:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c5cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800c5d0:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c5d4:	4665      	mov	r5, ip
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	1c69      	adds	r1, r5, #1
 800c5da:	eb0e 0205 	add.w	r2, lr, r5
 800c5de:	462e      	mov	r6, r5
 800c5e0:	b28d      	uxth	r5, r1
 800c5e2:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800c5e6:	f823 1b02 	strh.w	r1, [r3], #2
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	d1f9      	bne.n	800c5e2 <st_sssa8_ch_conv_dw_Wadapt+0x106>
 800c5ee:	4566      	cmp	r6, ip
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	4438      	add	r0, r7
 800c5f4:	d017      	beq.n	800c626 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c5f6:	443c      	add	r4, r7
 800c5f8:	e7ee      	b.n	800c5d8 <st_sssa8_ch_conv_dw_Wadapt+0xfc>
 800c5fa:	6824      	ldr	r4, [r4, #0]
 800c5fc:	f101 0308 	add.w	r3, r1, #8
 800c600:	b2a2      	uxth	r2, r4
 800c602:	ea07 2004 	and.w	r0, r7, r4, lsl #8
 800c606:	4310      	orrs	r0, r2
 800c608:	ea04 0207 	and.w	r2, r4, r7
 800c60c:	fa2f f080 	sxtb16	r0, r0
 800c610:	ea42 6214 	orr.w	r2, r2, r4, lsr #24
 800c614:	8008      	strh	r0, [r1, #0]
 800c616:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 800c61a:	0c00      	lsrs	r0, r0, #16
 800c61c:	808a      	strh	r2, [r1, #4]
 800c61e:	0c12      	lsrs	r2, r2, #16
 800c620:	8048      	strh	r0, [r1, #2]
 800c622:	80ca      	strh	r2, [r1, #6]
 800c624:	e7bb      	b.n	800c59e <st_sssa8_ch_conv_dw_Wadapt+0xc2>
 800c626:	b009      	add	sp, #36	; 0x24
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	9802      	ldr	r0, [sp, #8]
 800c62e:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 800c632:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c636:	0064      	lsls	r4, r4, #1
 800c638:	4402      	add	r2, r0
 800c63a:	463d      	mov	r5, r7
 800c63c:	4684      	mov	ip, r0
 800c63e:	b296      	uxth	r6, r2
 800c640:	f10c 0001 	add.w	r0, ip, #1
 800c644:	eb0e 020c 	add.w	r2, lr, ip
 800c648:	fa1f fc80 	uxth.w	ip, r0
 800c64c:	f992 0000 	ldrsb.w	r0, [r2]
 800c650:	440a      	add	r2, r1
 800c652:	f823 0b02 	strh.w	r0, [r3], #2
 800c656:	42ab      	cmp	r3, r5
 800c658:	d1f8      	bne.n	800c64c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800c65a:	45b4      	cmp	ip, r6
 800c65c:	4425      	add	r5, r4
 800c65e:	463b      	mov	r3, r7
 800c660:	d0e1      	beq.n	800c626 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c662:	4427      	add	r7, r4
 800c664:	e7ec      	b.n	800c640 <st_sssa8_ch_conv_dw_Wadapt+0x164>
 800c666:	bf00      	nop
 800c668:	ffff0000 	.word	0xffff0000

0800c66c <st_sssa8_ch_convolve_dw>:
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	ed2d 8b02 	vpush	{d8}
 800c674:	b0eb      	sub	sp, #428	; 0x1ac
 800c676:	9211      	str	r2, [sp, #68]	; 0x44
 800c678:	9322      	str	r3, [sp, #136]	; 0x88
 800c67a:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	; 0x1e4
 800c67e:	f8bd 31e0 	ldrh.w	r3, [sp, #480]	; 0x1e0
 800c682:	f8bd 41dc 	ldrh.w	r4, [sp, #476]	; 0x1dc
 800c686:	fb02 f803 	mul.w	r8, r2, r3
 800c68a:	f99d 6208 	ldrsb.w	r6, [sp, #520]	; 0x208
 800c68e:	9238      	str	r2, [sp, #224]	; 0xe0
 800c690:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800c694:	f8bd 21e8 	ldrh.w	r2, [sp, #488]	; 0x1e8
 800c698:	9023      	str	r0, [sp, #140]	; 0x8c
 800c69a:	9237      	str	r2, [sp, #220]	; 0xdc
 800c69c:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
 800c6a0:	9886      	ldr	r0, [sp, #536]	; 0x218
 800c6a2:	923c      	str	r2, [sp, #240]	; 0xf0
 800c6a4:	fb04 5208 	mla	r2, r4, r8, r5
 800c6a8:	910d      	str	r1, [sp, #52]	; 0x34
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c6b0:	9335      	str	r3, [sp, #212]	; 0xd4
 800c6b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c6b6:	9434      	str	r4, [sp, #208]	; 0xd0
 800c6b8:	920c      	str	r2, [sp, #48]	; 0x30
 800c6ba:	00a4      	lsls	r4, r4, #2
 800c6bc:	f8bd 21f0 	ldrh.w	r2, [sp, #496]	; 0x1f0
 800c6c0:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800c6c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c6c8:	922a      	str	r2, [sp, #168]	; 0xa8
 800c6ca:	f8bd 21f4 	ldrh.w	r2, [sp, #500]	; 0x1f4
 800c6ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c6d0:	923d      	str	r2, [sp, #244]	; 0xf4
 800c6d2:	f99d 2204 	ldrsb.w	r2, [sp, #516]	; 0x204
 800c6d6:	ee08 2a10 	vmov	s16, r2
 800c6da:	f8bd 2210 	ldrh.w	r2, [sp, #528]	; 0x210
 800c6de:	922d      	str	r2, [sp, #180]	; 0xb4
 800c6e0:	f8bd 2214 	ldrh.w	r2, [sp, #532]	; 0x214
 800c6e4:	9239      	str	r2, [sp, #228]	; 0xe4
 800c6e6:	004a      	lsls	r2, r1, #1
 800c6e8:	9214      	str	r2, [sp, #80]	; 0x50
 800c6ea:	b1d1      	cbz	r1, 800c722 <st_sssa8_ch_convolve_dw+0xb6>
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800c6f0:	f04f 0e01 	mov.w	lr, #1
 800c6f4:	1d11      	adds	r1, r2, #4
 800c6f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6f8:	eb03 0c02 	add.w	ip, r3, r2
 800c6fc:	f933 2b02 	ldrsh.w	r2, [r3], #2
 800c700:	1e50      	subs	r0, r2, #1
 800c702:	fa0e f702 	lsl.w	r7, lr, r2
 800c706:	fa06 f202 	lsl.w	r2, r6, r2
 800c70a:	b280      	uxth	r0, r0
 800c70c:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800c710:	2814      	cmp	r0, #20
 800c712:	f200 827e 	bhi.w	800cc12 <st_sssa8_ch_convolve_dw+0x5a6>
 800c716:	4563      	cmp	r3, ip
 800c718:	f841 2c04 	str.w	r2, [r1, #-4]
 800c71c:	f101 0104 	add.w	r1, r1, #4
 800c720:	d1ec      	bne.n	800c6fc <st_sssa8_ch_convolve_dw+0x90>
 800c722:	ee18 3a10 	vmov	r3, s16
 800c726:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c728:	425b      	negs	r3, r3
 800c72a:	1b16      	subs	r6, r2, r4
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	0076      	lsls	r6, r6, #1
 800c730:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800c734:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c736:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c738:	ea53 0c02 	orrs.w	ip, r3, r2
 800c73c:	d10a      	bne.n	800c754 <st_sssa8_ch_convolve_dw+0xe8>
 800c73e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c742:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800c744:	4293      	cmp	r3, r2
 800c746:	bf08      	it	eq
 800c748:	2903      	cmpeq	r1, #3
 800c74a:	d103      	bne.n	800c754 <st_sssa8_ch_convolve_dw+0xe8>
 800c74c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c74e:	2b03      	cmp	r3, #3
 800c750:	f001 804f 	beq.w	800d7f2 <st_sssa8_ch_convolve_dw+0x1186>
 800c754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c756:	aa4a      	add	r2, sp, #296	; 0x128
 800c758:	a960      	add	r1, sp, #384	; 0x180
 800c75a:	a856      	add	r0, sp, #344	; 0x158
 800c75c:	934c      	str	r3, [sp, #304]	; 0x130
 800c75e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c760:	934b      	str	r3, [sp, #300]	; 0x12c
 800c762:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c764:	9350      	str	r3, [sp, #320]	; 0x140
 800c766:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c768:	934f      	str	r3, [sp, #316]	; 0x13c
 800c76a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c76c:	9354      	str	r3, [sp, #336]	; 0x150
 800c76e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c770:	9353      	str	r3, [sp, #332]	; 0x14c
 800c772:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c774:	9362      	str	r3, [sp, #392]	; 0x188
 800c776:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800c778:	9363      	str	r3, [sp, #396]	; 0x18c
 800c77a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c77c:	9364      	str	r3, [sp, #400]	; 0x190
 800c77e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800c780:	9365      	str	r3, [sp, #404]	; 0x194
 800c782:	ab52      	add	r3, sp, #328	; 0x148
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	ab4e      	add	r3, sp, #312	; 0x138
 800c788:	f003 f818 	bl	800f7bc <ai_padding_opt_init>
 800c78c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c78e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c790:	fbb3 f3f2 	udiv	r3, r3, r2
 800c794:	079a      	lsls	r2, r3, #30
 800c796:	9327      	str	r3, [sp, #156]	; 0x9c
 800c798:	f000 8243 	beq.w	800cc22 <st_sssa8_ch_convolve_dw+0x5b6>
 800c79c:	2301      	movs	r3, #1
 800c79e:	933e      	str	r3, [sp, #248]	; 0xf8
 800c7a0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 822f 	beq.w	800cc06 <st_sssa8_ch_convolve_dw+0x59a>
 800c7a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7aa:	f3c8 004f 	ubfx	r0, r8, #1, #16
 800c7ae:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c7b0:	186b      	adds	r3, r5, r1
 800c7b2:	9015      	str	r0, [sp, #84]	; 0x54
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800c7b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7ba:	eb01 0309 	add.w	r3, r1, r9
 800c7be:	08b9      	lsrs	r1, r7, #2
 800c7c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c7c2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c7c4:	9136      	str	r1, [sp, #216]	; 0xd8
 800c7c6:	3901      	subs	r1, #1
 800c7c8:	fb12 f303 	smulbb	r3, r2, r3
 800c7cc:	1e42      	subs	r2, r0, #1
 800c7ce:	b289      	uxth	r1, r1
 800c7d0:	b298      	uxth	r0, r3
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	b292      	uxth	r2, r2
 800c7d8:	9316      	str	r3, [sp, #88]	; 0x58
 800c7da:	1e43      	subs	r3, r0, #1
 800c7dc:	9031      	str	r0, [sp, #196]	; 0xc4
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	0058      	lsls	r0, r3, #1
 800c7e4:	1c4b      	adds	r3, r1, #1
 800c7e6:	9026      	str	r0, [sp, #152]	; 0x98
 800c7e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c7ea:	4420      	add	r0, r4
 800c7ec:	192c      	adds	r4, r5, r4
 800c7ee:	1986      	adds	r6, r0, r6
 800c7f0:	9024      	str	r0, [sp, #144]	; 0x90
 800c7f2:	941c      	str	r4, [sp, #112]	; 0x70
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	962b      	str	r6, [sp, #172]	; 0xac
 800c7f8:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800c7fa:	4270      	negs	r0, r6
 800c7fc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c7fe:	fa1f fc80 	uxth.w	ip, r0
 800c802:	08b0      	lsrs	r0, r6, #2
 800c804:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 800c808:	f106 3cff 	add.w	ip, r6, #4294967295
 800c80c:	0080      	lsls	r0, r0, #2
 800c80e:	f026 0603 	bic.w	r6, r6, #3
 800c812:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800c816:	9030      	str	r0, [sp, #192]	; 0xc0
 800c818:	1c50      	adds	r0, r2, #1
 800c81a:	9633      	str	r6, [sp, #204]	; 0xcc
 800c81c:	0100      	lsls	r0, r0, #4
 800c81e:	9021      	str	r0, [sp, #132]	; 0x84
 800c820:	fb02 7007 	mla	r0, r2, r7, r7
 800c824:	0112      	lsls	r2, r2, #4
 800c826:	923a      	str	r2, [sp, #232]	; 0xe8
 800c828:	eb05 0c40 	add.w	ip, r5, r0, lsl #1
 800c82c:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800c82e:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800c832:	3220      	adds	r2, #32
 800c834:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
 800c838:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c83a:	19ca      	adds	r2, r1, r7
 800c83c:	4629      	mov	r1, r5
 800c83e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c842:	442a      	add	r2, r5
 800c844:	921d      	str	r2, [sp, #116]	; 0x74
 800c846:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 800c84a:	1955      	adds	r5, r2, r5
 800c84c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800c850:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800c854:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c856:	9519      	str	r5, [sp, #100]	; 0x64
 800c858:	2500      	movs	r5, #0
 800c85a:	943b      	str	r4, [sp, #236]	; 0xec
 800c85c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800c85e:	fb04 f402 	mul.w	r4, r4, r2
 800c862:	9443      	str	r4, [sp, #268]	; 0x10c
 800c864:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800c866:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
 800c86a:	2a03      	cmp	r2, #3
 800c86c:	bf08      	it	eq
 800c86e:	2803      	cmpeq	r0, #3
 800c870:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c872:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c874:	eba2 0206 	sub.w	r2, r2, r6
 800c878:	bf0c      	ite	eq
 800c87a:	2401      	moveq	r4, #1
 800c87c:	2400      	movne	r4, #0
 800c87e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800c880:	9232      	str	r2, [sp, #200]	; 0xc8
 800c882:	942c      	str	r4, [sp, #176]	; 0xb0
 800c884:	f007 0403 	and.w	r4, r7, #3
 800c888:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800c88a:	9429      	str	r4, [sp, #164]	; 0xa4
 800c88c:	0094      	lsls	r4, r2, #2
 800c88e:	3a01      	subs	r2, #1
 800c890:	9241      	str	r2, [sp, #260]	; 0x104
 800c892:	009a      	lsls	r2, r3, #2
 800c894:	943f      	str	r4, [sp, #252]	; 0xfc
 800c896:	462c      	mov	r4, r5
 800c898:	9212      	str	r2, [sp, #72]	; 0x48
 800c89a:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c89c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800c8a0:	9244      	str	r2, [sp, #272]	; 0x110
 800c8a2:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800c8a6:	9245      	str	r2, [sp, #276]	; 0x114
 800c8a8:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800c8ac:	9248      	str	r2, [sp, #288]	; 0x120
 800c8ae:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800c8b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800c8b4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c8b6:	9247      	str	r2, [sp, #284]	; 0x11c
 800c8b8:	009a      	lsls	r2, r3, #2
 800c8ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8bc:	9246      	str	r2, [sp, #280]	; 0x118
 800c8be:	18cb      	adds	r3, r1, r3
 800c8c0:	931e      	str	r3, [sp, #120]	; 0x78
 800c8c2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
 800c8c6:	9318      	str	r3, [sp, #96]	; 0x60
 800c8c8:	a856      	add	r0, sp, #344	; 0x158
 800c8ca:	f002 ffd1 	bl	800f870 <ai_padding_opt_phase1>
 800c8ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 878a 	beq.w	800d7ea <st_sssa8_ch_convolve_dw+0x117e>
 800c8d6:	b2ab      	uxth	r3, r5
 800c8d8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c8da:	f8dd b124 	ldr.w	fp, [sp, #292]	; 0x124
 800c8de:	9342      	str	r3, [sp, #264]	; 0x108
 800c8e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c8e2:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 800c8e6:	1a9b      	subs	r3, r3, r2
 800c8e8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800c8ea:	fb02 3304 	mla	r3, r2, r4, r3
 800c8ee:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 800c8f2:	9310      	str	r3, [sp, #64]	; 0x40
 800c8f4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c8f6:	922e      	str	r2, [sp, #184]	; 0xb8
 800c8f8:	425b      	negs	r3, r3
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	9325      	str	r3, [sp, #148]	; 0x94
 800c8fe:	2300      	movs	r3, #0
 800c900:	4619      	mov	r1, r3
 800c902:	9a56      	ldr	r2, [sp, #344]	; 0x158
 800c904:	2a00      	cmp	r2, #0
 800c906:	f000 82c8 	beq.w	800ce9a <st_sssa8_ch_convolve_dw+0x82e>
 800c90a:	3a01      	subs	r2, #1
 800c90c:	9256      	str	r2, [sp, #344]	; 0x158
 800c90e:	2201      	movs	r2, #1
 800c910:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800c914:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c916:	2a01      	cmp	r2, #1
 800c918:	f000 8583 	beq.w	800d422 <st_sssa8_ch_convolve_dw+0xdb6>
 800c91c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c91e:	2a04      	cmp	r2, #4
 800c920:	f000 86ae 	beq.w	800d680 <st_sssa8_ch_convolve_dw+0x1014>
 800c924:	2a02      	cmp	r2, #2
 800c926:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800c928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c92a:	f000 85c6 	beq.w	800d4ba <st_sssa8_ch_convolve_dw+0xe4e>
 800c92e:	4282      	cmp	r2, r0
 800c930:	f340 8755 	ble.w	800d7de <st_sssa8_ch_convolve_dw+0x1172>
 800c934:	b29b      	uxth	r3, r3
 800c936:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c938:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c93a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c93c:	fb01 2100 	mla	r1, r1, r0, r2
 800c940:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c942:	1acd      	subs	r5, r1, r3
 800c944:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c948:	429d      	cmp	r5, r3
 800c94a:	9307      	str	r3, [sp, #28]
 800c94c:	dd3c      	ble.n	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800c94e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c950:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c954:	46d3      	mov	fp, sl
 800c956:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c95a:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800c95e:	9503      	str	r5, [sp, #12]
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	9a05      	ldr	r2, [sp, #20]
 800c964:	46da      	mov	sl, fp
 800c966:	ee18 0a10 	vmov	r0, s16
 800c96a:	0fd1      	lsrs	r1, r2, #31
 800c96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c96e:	429a      	cmp	r2, r3
 800c970:	bfd8      	it	le
 800c972:	f041 0101 	orrle.w	r1, r1, #1
 800c976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c978:	9104      	str	r1, [sp, #16]
 800c97a:	4693      	mov	fp, r2
 800c97c:	9907      	ldr	r1, [sp, #28]
 800c97e:	fb03 f302 	mul.w	r3, r3, r2
 800c982:	460c      	mov	r4, r1
 800c984:	9306      	str	r3, [sp, #24]
 800c986:	0fe3      	lsrs	r3, r4, #31
 800c988:	458b      	cmp	fp, r1
 800c98a:	bfd8      	it	le
 800c98c:	f043 0301 	orrle.w	r3, r3, #1
 800c990:	b91b      	cbnz	r3, 800c99a <st_sssa8_ch_convolve_dw+0x32e>
 800c992:	9b04      	ldr	r3, [sp, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 81c8 	beq.w	800cd2a <st_sssa8_ch_convolve_dw+0x6be>
 800c99a:	4652      	mov	r2, sl
 800c99c:	4641      	mov	r1, r8
 800c99e:	9002      	str	r0, [sp, #8]
 800c9a0:	f006 fa06 	bl	8012db0 <st_int8_fill>
 800c9a4:	9802      	ldr	r0, [sp, #8]
 800c9a6:	3401      	adds	r4, #1
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	44d0      	add	r8, sl
 800c9ac:	b224      	sxth	r4, r4
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	dbe8      	blt.n	800c986 <st_sssa8_ch_convolve_dw+0x31a>
 800c9b4:	9b05      	ldr	r3, [sp, #20]
 800c9b6:	46d3      	mov	fp, sl
 800c9b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b21b      	sxth	r3, r3
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	9305      	str	r3, [sp, #20]
 800c9c2:	dcce      	bgt.n	800c962 <st_sssa8_ch_convolve_dw+0x2f6>
 800c9c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800c9c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f040 82a2 	bne.w	800cf14 <st_sssa8_ch_convolve_dw+0x8a8>
 800c9d0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 85f8 	beq.w	800d5c8 <st_sssa8_ch_convolve_dw+0xf5c>
 800c9d8:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800c9da:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800c9de:	3310      	adds	r3, #16
 800c9e0:	9305      	str	r3, [sp, #20]
 800c9e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c9e4:	9302      	str	r3, [sp, #8]
 800c9e6:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f2:	f103 020c 	add.w	r2, r3, #12
 800c9f6:	920a      	str	r2, [sp, #40]	; 0x28
 800c9f8:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c9fa:	3208      	adds	r2, #8
 800c9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9fe:	f103 0208 	add.w	r2, r3, #8
 800ca02:	3304      	adds	r3, #4
 800ca04:	9208      	str	r2, [sp, #32]
 800ca06:	9306      	str	r3, [sp, #24]
 800ca08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca0a:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ca10:	3204      	adds	r2, #4
 800ca12:	3320      	adds	r3, #32
 800ca14:	9207      	str	r2, [sp, #28]
 800ca16:	931f      	str	r3, [sp, #124]	; 0x7c
 800ca18:	ee18 3a10 	vmov	r3, s16
 800ca1c:	b21b      	sxth	r3, r3
 800ca1e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca20:	9b05      	ldr	r3, [sp, #20]
 800ca22:	9e04      	ldr	r6, [sp, #16]
 800ca24:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 800ca28:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ca2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca2e:	eb03 020c 	add.w	r2, r3, ip
 800ca32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca34:	b3cb      	cbz	r3, 800caaa <st_sssa8_ch_convolve_dw+0x43e>
 800ca36:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ca38:	f106 0310 	add.w	r3, r6, #16
 800ca3c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ca40:	19f7      	adds	r7, r6, r7
 800ca42:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800ca46:	f852 900a 	ldr.w	r9, [r2, sl]
 800ca4a:	f8df e910 	ldr.w	lr, [pc, #2320]	; 800d35c <st_sssa8_ch_convolve_dw+0xcf0>
 800ca4e:	f8d2 8000 	ldr.w	r8, [r2]
 800ca52:	4462      	add	r2, ip
 800ca54:	ea09 0e0e 	and.w	lr, r9, lr
 800ca58:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800ca5c:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800ca60:	fa1f f888 	uxth.w	r8, r8
 800ca64:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
 800ca68:	fa2b f988 	sxtab16	r9, fp, r8
 800ca6c:	fb26 5509 	smlad	r5, r6, r9, r5
 800ca70:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800ca74:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800ca78:	fb26 4408 	smlad	r4, r6, r8, r4
 800ca7c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800ca80:	fa2b f88e 	sxtab16	r8, fp, lr
 800ca84:	fb26 0008 	smlad	r0, r6, r8, r0
 800ca88:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800ca8c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800ca90:	fb26 110e 	smlad	r1, r6, lr, r1
 800ca94:	3310      	adds	r3, #16
 800ca96:	429f      	cmp	r7, r3
 800ca98:	d1d5      	bne.n	800ca46 <st_sssa8_ch_convolve_dw+0x3da>
 800ca9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca9c:	9e04      	ldr	r6, [sp, #16]
 800ca9e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800caa2:	441e      	add	r6, r3
 800caa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800caa6:	eb0c 0203 	add.w	r2, ip, r3
 800caaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800caac:	2b00      	cmp	r3, #0
 800caae:	f040 80bd 	bne.w	800cc2c <st_sssa8_ch_convolve_dw+0x5c0>
 800cab2:	9604      	str	r6, [sp, #16]
 800cab4:	9e02      	ldr	r6, [sp, #8]
 800cab6:	f9b6 7000 	ldrsh.w	r7, [r6]
 800caba:	2f15      	cmp	r7, #21
 800cabc:	f340 80da 	ble.w	800cc74 <st_sssa8_ch_convolve_dw+0x608>
 800cac0:	1eba      	subs	r2, r7, #2
 800cac2:	2301      	movs	r3, #1
 800cac4:	3f01      	subs	r7, #1
 800cac6:	3602      	adds	r6, #2
 800cac8:	fa03 f202 	lsl.w	r2, r3, r2
 800cacc:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800cace:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cad2:	fb55 2203 	smmla	r2, r5, r3, r2
 800cad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cad8:	fa42 f707 	asr.w	r7, r2, r7
 800cadc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800cae0:	443a      	add	r2, r7
 800cae2:	f302 0207 	ssat	r2, #8, r2
 800cae6:	9d03      	ldr	r5, [sp, #12]
 800cae8:	f805 2b01 	strb.w	r2, [r5], #1
 800caec:	f9b6 7000 	ldrsh.w	r7, [r6]
 800caf0:	2f15      	cmp	r7, #21
 800caf2:	f340 80d8 	ble.w	800cca6 <st_sssa8_ch_convolve_dw+0x63a>
 800caf6:	1eba      	subs	r2, r7, #2
 800caf8:	2301      	movs	r3, #1
 800cafa:	3f01      	subs	r7, #1
 800cafc:	fa03 f202 	lsl.w	r2, r3, r2
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	fb54 2203 	smmla	r2, r4, r3, r2
 800cb08:	9b06      	ldr	r3, [sp, #24]
 800cb0a:	fa42 f707 	asr.w	r7, r2, r7
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	9b02      	ldr	r3, [sp, #8]
 800cb12:	443a      	add	r2, r7
 800cb14:	1d1e      	adds	r6, r3, #4
 800cb16:	f302 0207 	ssat	r2, #8, r2
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	702a      	strb	r2, [r5, #0]
 800cb1e:	1c9c      	adds	r4, r3, #2
 800cb20:	f9b6 6000 	ldrsh.w	r6, [r6]
 800cb24:	2e15      	cmp	r6, #21
 800cb26:	f340 80d7 	ble.w	800ccd8 <st_sssa8_ch_convolve_dw+0x66c>
 800cb2a:	1eb2      	subs	r2, r6, #2
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	3e01      	subs	r6, #1
 800cb30:	fa03 f202 	lsl.w	r2, r3, r2
 800cb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	fb50 2203 	smmla	r2, r0, r3, r2
 800cb3c:	9b08      	ldr	r3, [sp, #32]
 800cb3e:	fa42 f606 	asr.w	r6, r2, r6
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	9b02      	ldr	r3, [sp, #8]
 800cb46:	4432      	add	r2, r6
 800cb48:	1d9d      	adds	r5, r3, #6
 800cb4a:	f302 0207 	ssat	r2, #8, r2
 800cb4e:	9b03      	ldr	r3, [sp, #12]
 800cb50:	7022      	strb	r2, [r4, #0]
 800cb52:	1cd8      	adds	r0, r3, #3
 800cb54:	f9b5 4000 	ldrsh.w	r4, [r5]
 800cb58:	2c15      	cmp	r4, #21
 800cb5a:	f340 80d6 	ble.w	800cd0a <st_sssa8_ch_convolve_dw+0x69e>
 800cb5e:	1ea2      	subs	r2, r4, #2
 800cb60:	2301      	movs	r3, #1
 800cb62:	3c01      	subs	r4, #1
 800cb64:	fa03 f202 	lsl.w	r2, r3, r2
 800cb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	fb51 2303 	smmla	r3, r1, r3, r2
 800cb70:	fa43 f404 	asr.w	r4, r3, r4
 800cb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	4414      	add	r4, r2
 800cb7a:	f304 0407 	ssat	r4, #8, r4
 800cb7e:	7004      	strb	r4, [r0, #0]
 800cb80:	9b05      	ldr	r3, [sp, #20]
 800cb82:	f10c 0c04 	add.w	ip, ip, #4
 800cb86:	3310      	adds	r3, #16
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	9b02      	ldr	r3, [sp, #8]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	9302      	str	r3, [sp, #8]
 800cb90:	9b03      	ldr	r3, [sp, #12]
 800cb92:	3304      	adds	r3, #4
 800cb94:	9303      	str	r3, [sp, #12]
 800cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb98:	3310      	adds	r3, #16
 800cb9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9e:	3310      	adds	r3, #16
 800cba0:	930a      	str	r3, [sp, #40]	; 0x28
 800cba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba4:	3310      	adds	r3, #16
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	9b08      	ldr	r3, [sp, #32]
 800cbaa:	3310      	adds	r3, #16
 800cbac:	9308      	str	r3, [sp, #32]
 800cbae:	9b07      	ldr	r3, [sp, #28]
 800cbb0:	3310      	adds	r3, #16
 800cbb2:	9307      	str	r3, [sp, #28]
 800cbb4:	9b06      	ldr	r3, [sp, #24]
 800cbb6:	3310      	adds	r3, #16
 800cbb8:	9306      	str	r3, [sp, #24]
 800cbba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbbc:	4563      	cmp	r3, ip
 800cbbe:	f47f af2f 	bne.w	800ca20 <st_sssa8_ch_convolve_dw+0x3b4>
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cbc6:	4413      	add	r3, r2
 800cbc8:	9383      	str	r3, [sp, #524]	; 0x20c
 800cbca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f040 83d3 	bne.w	800d378 <st_sssa8_ch_convolve_dw+0xd0c>
 800cbd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cbd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800cbd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cbd8:	440a      	add	r2, r1
 800cbda:	3301      	adds	r3, #1
 800cbdc:	b292      	uxth	r2, r2
 800cbde:	b21b      	sxth	r3, r3
 800cbe0:	9225      	str	r2, [sp, #148]	; 0x94
 800cbe2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	f73f ae8b 	bgt.w	800c902 <st_sssa8_ch_convolve_dw+0x296>
 800cbec:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800cbee:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800cbf0:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800cbf2:	4413      	add	r3, r2
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	b22d      	sxth	r5, r5
 800cbfa:	9340      	str	r3, [sp, #256]	; 0x100
 800cbfc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800cbfe:	462c      	mov	r4, r5
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	f73f ae61 	bgt.w	800c8c8 <st_sssa8_ch_convolve_dw+0x25c>
 800cc06:	2000      	movs	r0, #0
 800cc08:	b06b      	add	sp, #428	; 0x1ac
 800cc0a:	ecbd 8b02 	vpop	{d8}
 800cc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc12:	4563      	cmp	r3, ip
 800cc14:	f841 6c04 	str.w	r6, [r1, #-4]
 800cc18:	f101 0104 	add.w	r1, r1, #4
 800cc1c:	f47f ad6e 	bne.w	800c6fc <st_sssa8_ch_convolve_dw+0x90>
 800cc20:	e57f      	b.n	800c722 <st_sssa8_ch_convolve_dw+0xb6>
 800cc22:	109b      	asrs	r3, r3, #2
 800cc24:	933e      	str	r3, [sp, #248]	; 0xf8
 800cc26:	2304      	movs	r3, #4
 800cc28:	9327      	str	r3, [sp, #156]	; 0x9c
 800cc2a:	e5b9      	b.n	800c7a0 <st_sssa8_ch_convolve_dw+0x134>
 800cc2c:	6813      	ldr	r3, [r2, #0]
 800cc2e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cc30:	b25a      	sxtb	r2, r3
 800cc32:	f8b6 9000 	ldrh.w	r9, [r6]
 800cc36:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800cc3a:	1bd2      	subs	r2, r2, r7
 800cc3c:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800cc40:	fb19 5502 	smlabb	r5, r9, r2, r5
 800cc44:	f343 2207 	sbfx	r2, r3, #8, #8
 800cc48:	1bd2      	subs	r2, r2, r7
 800cc4a:	fb1e 4402 	smlabb	r4, lr, r2, r4
 800cc4e:	f343 4207 	sbfx	r2, r3, #16, #8
 800cc52:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800cc56:	1bd2      	subs	r2, r2, r7
 800cc58:	fb18 0002 	smlabb	r0, r8, r2, r0
 800cc5c:	88f2      	ldrh	r2, [r6, #6]
 800cc5e:	fb12 1103 	smlabb	r1, r2, r3, r1
 800cc62:	f106 0308 	add.w	r3, r6, #8
 800cc66:	9e02      	ldr	r6, [sp, #8]
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cc6e:	2f15      	cmp	r7, #21
 800cc70:	f73f af26 	bgt.w	800cac0 <st_sssa8_ch_convolve_dw+0x454>
 800cc74:	2f00      	cmp	r7, #0
 800cc76:	f340 80bf 	ble.w	800cdf8 <st_sssa8_ch_convolve_dw+0x78c>
 800cc7a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800cc7c:	006d      	lsls	r5, r5, #1
 800cc7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc80:	3602      	adds	r6, #2
 800cc82:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cc86:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cc8a:	fb55 2503 	smmla	r5, r5, r3, r2
 800cc8e:	fa45 f307 	asr.w	r3, r5, r7
 800cc92:	f303 0307 	ssat	r3, #8, r3
 800cc96:	9d03      	ldr	r5, [sp, #12]
 800cc98:	f805 3b01 	strb.w	r3, [r5], #1
 800cc9c:	f9b6 7000 	ldrsh.w	r7, [r6]
 800cca0:	2f15      	cmp	r7, #21
 800cca2:	f73f af28 	bgt.w	800caf6 <st_sssa8_ch_convolve_dw+0x48a>
 800cca6:	2f00      	cmp	r7, #0
 800cca8:	f340 80e2 	ble.w	800ce70 <st_sssa8_ch_convolve_dw+0x804>
 800ccac:	9b07      	ldr	r3, [sp, #28]
 800ccae:	0064      	lsls	r4, r4, #1
 800ccb0:	9a06      	ldr	r2, [sp, #24]
 800ccb2:	9e02      	ldr	r6, [sp, #8]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6812      	ldr	r2, [r2, #0]
 800ccb8:	3604      	adds	r6, #4
 800ccba:	fb54 2403 	smmla	r4, r4, r3, r2
 800ccbe:	fa44 f307 	asr.w	r3, r4, r7
 800ccc2:	f303 0307 	ssat	r3, #8, r3
 800ccc6:	702b      	strb	r3, [r5, #0]
 800ccc8:	f9b6 6000 	ldrsh.w	r6, [r6]
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	2e15      	cmp	r6, #21
 800ccd0:	f103 0402 	add.w	r4, r3, #2
 800ccd4:	f73f af29 	bgt.w	800cb2a <st_sssa8_ch_convolve_dw+0x4be>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	f340 80a3 	ble.w	800ce24 <st_sssa8_ch_convolve_dw+0x7b8>
 800ccde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce0:	0040      	lsls	r0, r0, #1
 800cce2:	9a08      	ldr	r2, [sp, #32]
 800cce4:	9d02      	ldr	r5, [sp, #8]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6812      	ldr	r2, [r2, #0]
 800ccea:	3506      	adds	r5, #6
 800ccec:	fb50 2003 	smmla	r0, r0, r3, r2
 800ccf0:	fa40 f306 	asr.w	r3, r0, r6
 800ccf4:	f303 0307 	ssat	r3, #8, r3
 800ccf8:	7023      	strb	r3, [r4, #0]
 800ccfa:	f9b5 4000 	ldrsh.w	r4, [r5]
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	2c15      	cmp	r4, #21
 800cd02:	f103 0003 	add.w	r0, r3, #3
 800cd06:	f73f af2a 	bgt.w	800cb5e <st_sssa8_ch_convolve_dw+0x4f2>
 800cd0a:	2c00      	cmp	r4, #0
 800cd0c:	f340 809f 	ble.w	800ce4e <st_sssa8_ch_convolve_dw+0x7e2>
 800cd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd12:	0049      	lsls	r1, r1, #1
 800cd14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6812      	ldr	r2, [r2, #0]
 800cd1a:	fb51 2103 	smmla	r1, r1, r3, r2
 800cd1e:	fa41 f304 	asr.w	r3, r1, r4
 800cd22:	f303 0307 	ssat	r3, #8, r3
 800cd26:	7003      	strb	r3, [r0, #0]
 800cd28:	e72a      	b.n	800cb80 <st_sssa8_ch_convolve_dw+0x514>
 800cd2a:	9b06      	ldr	r3, [sp, #24]
 800cd2c:	4419      	add	r1, r3
 800cd2e:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800cd32:	fb03 2501 	mla	r5, r3, r1, r2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f43f ae35 	beq.w	800c9a6 <st_sssa8_ch_convolve_dw+0x33a>
 800cd3c:	f1b9 0f00 	cmp.w	r9, #0
 800cd40:	f43f ae31 	beq.w	800c9a6 <st_sssa8_ch_convolve_dw+0x33a>
 800cd44:	46c4      	mov	ip, r8
 800cd46:	4642      	mov	r2, r8
 800cd48:	ee07 0a90 	vmov	s15, r0
 800cd4c:	f8cd 8020 	str.w	r8, [sp, #32]
 800cd50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd54:	eb05 0e03 	add.w	lr, r5, r3
 800cd58:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 800cd5c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800cd5e:	9402      	str	r4, [sp, #8]
 800cd60:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 800cd64:	3501      	adds	r5, #1
 800cd66:	4614      	mov	r4, r2
 800cd68:	42aa      	cmp	r2, r5
 800cd6a:	f105 31ff 	add.w	r1, r5, #4294967295
 800cd6e:	444a      	add	r2, r9
 800cd70:	bf34      	ite	cc
 800cd72:	2300      	movcc	r3, #0
 800cd74:	2301      	movcs	r3, #1
 800cd76:	428a      	cmp	r2, r1
 800cd78:	bf98      	it	ls
 800cd7a:	f043 0301 	orrls.w	r3, r3, #1
 800cd7e:	b373      	cbz	r3, 800cdde <st_sssa8_ch_convolve_dw+0x772>
 800cd80:	f1ba 0f07 	cmp.w	sl, #7
 800cd84:	d92b      	bls.n	800cdde <st_sssa8_ch_convolve_dw+0x772>
 800cd86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	eb00 060c 	add.w	r6, r0, ip
 800cd90:	f363 0107 	bfi	r1, r3, #0, #8
 800cd94:	f363 210f 	bfi	r1, r3, #8, #8
 800cd98:	f363 4117 	bfi	r1, r3, #16, #8
 800cd9c:	f363 611f 	bfi	r1, r3, #24, #8
 800cda0:	4663      	mov	r3, ip
 800cda2:	f843 1b04 	str.w	r1, [r3], #4
 800cda6:	42b3      	cmp	r3, r6
 800cda8:	d1fb      	bne.n	800cda2 <st_sssa8_ch_convolve_dw+0x736>
 800cdaa:	45b9      	cmp	r9, r7
 800cdac:	eb04 0307 	add.w	r3, r4, r7
 800cdb0:	d00c      	beq.n	800cdcc <st_sssa8_ch_convolve_dw+0x760>
 800cdb2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cdb6:	55e1      	strb	r1, [r4, r7]
 800cdb8:	f1b8 0f00 	cmp.w	r8, #0
 800cdbc:	d006      	beq.n	800cdcc <st_sssa8_ch_convolve_dw+0x760>
 800cdbe:	f1b8 0f01 	cmp.w	r8, #1
 800cdc2:	7059      	strb	r1, [r3, #1]
 800cdc4:	d002      	beq.n	800cdcc <st_sssa8_ch_convolve_dw+0x760>
 800cdc6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cdca:	7099      	strb	r1, [r3, #2]
 800cdcc:	45ae      	cmp	lr, r5
 800cdce:	44cc      	add	ip, r9
 800cdd0:	d1c8      	bne.n	800cd64 <st_sssa8_ch_convolve_dw+0x6f8>
 800cdd2:	9c02      	ldr	r4, [sp, #8]
 800cdd4:	ee17 0a90 	vmov	r0, s15
 800cdd8:	e9dd 8a08 	ldrd	r8, sl, [sp, #32]
 800cddc:	e5e3      	b.n	800c9a6 <st_sssa8_ch_convolve_dw+0x33a>
 800cdde:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cde2:	f804 3b01 	strb.w	r3, [r4], #1
 800cde6:	4294      	cmp	r4, r2
 800cde8:	d0f0      	beq.n	800cdcc <st_sssa8_ch_convolve_dw+0x760>
 800cdea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdee:	f804 3b01 	strb.w	r3, [r4], #1
 800cdf2:	4294      	cmp	r4, r2
 800cdf4:	d1f3      	bne.n	800cdde <st_sssa8_ch_convolve_dw+0x772>
 800cdf6:	e7e9      	b.n	800cdcc <st_sssa8_ch_convolve_dw+0x760>
 800cdf8:	f1c7 0201 	rsb	r2, r7, #1
 800cdfc:	3602      	adds	r6, #2
 800cdfe:	fa05 f202 	lsl.w	r2, r5, r2
 800ce02:	f302 021f 	ssat	r2, #32, r2
 800ce06:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800ce08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ce0c:	fb52 f213 	smmulr	r2, r2, r3
 800ce10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce12:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ce16:	4413      	add	r3, r2
 800ce18:	f303 0307 	ssat	r3, #8, r3
 800ce1c:	9d03      	ldr	r5, [sp, #12]
 800ce1e:	f805 3b01 	strb.w	r3, [r5], #1
 800ce22:	e663      	b.n	800caec <st_sssa8_ch_convolve_dw+0x480>
 800ce24:	f1c6 0201 	rsb	r2, r6, #1
 800ce28:	9b02      	ldr	r3, [sp, #8]
 800ce2a:	fa00 f202 	lsl.w	r2, r0, r2
 800ce2e:	1d9d      	adds	r5, r3, #6
 800ce30:	f302 021f 	ssat	r2, #32, r2
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	fb52 f213 	smmulr	r2, r2, r3
 800ce3c:	9b08      	ldr	r3, [sp, #32]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	f303 0307 	ssat	r3, #8, r3
 800ce46:	7023      	strb	r3, [r4, #0]
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	1cd8      	adds	r0, r3, #3
 800ce4c:	e682      	b.n	800cb54 <st_sssa8_ch_convolve_dw+0x4e8>
 800ce4e:	f1c4 0401 	rsb	r4, r4, #1
 800ce52:	fa01 f204 	lsl.w	r2, r1, r4
 800ce56:	f302 021f 	ssat	r2, #32, r2
 800ce5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	fb52 f213 	smmulr	r2, r2, r3
 800ce62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4413      	add	r3, r2
 800ce68:	f303 0307 	ssat	r3, #8, r3
 800ce6c:	7003      	strb	r3, [r0, #0]
 800ce6e:	e687      	b.n	800cb80 <st_sssa8_ch_convolve_dw+0x514>
 800ce70:	f1c7 0201 	rsb	r2, r7, #1
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	fa04 f202 	lsl.w	r2, r4, r2
 800ce7a:	1d1e      	adds	r6, r3, #4
 800ce7c:	f302 021f 	ssat	r2, #32, r2
 800ce80:	9b07      	ldr	r3, [sp, #28]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	fb52 f213 	smmulr	r2, r2, r3
 800ce88:	9b06      	ldr	r3, [sp, #24]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f303 0307 	ssat	r3, #8, r3
 800ce92:	702b      	strb	r3, [r5, #0]
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	1c9c      	adds	r4, r3, #2
 800ce98:	e642      	b.n	800cb20 <st_sssa8_ch_convolve_dw+0x4b4>
 800ce9a:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	f000 82b6 	beq.w	800d40e <st_sssa8_ch_convolve_dw+0xda2>
 800cea2:	3a01      	subs	r2, #1
 800cea4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800cea6:	9257      	str	r2, [sp, #348]	; 0x15c
 800cea8:	2801      	cmp	r0, #1
 800ceaa:	f8bd 217c 	ldrh.w	r2, [sp, #380]	; 0x17c
 800ceae:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800ceb2:	f47f ad33 	bne.w	800c91c <st_sssa8_ch_convolve_dw+0x2b0>
 800ceb6:	2a01      	cmp	r2, #1
 800ceb8:	f000 82b3 	beq.w	800d422 <st_sssa8_ch_convolve_dw+0xdb6>
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cec0:	f9bd 5094 	ldrsh.w	r5, [sp, #148]	; 0x94
 800cec4:	9328      	str	r3, [sp, #160]	; 0xa0
 800cec6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cec8:	429f      	cmp	r7, r3
 800ceca:	f77f ad7d 	ble.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800cece:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ced0:	461c      	mov	r4, r3
 800ced2:	f8cd b008 	str.w	fp, [sp, #8]
 800ced6:	4618      	mov	r0, r3
 800ced8:	46b3      	mov	fp, r6
 800ceda:	f8cd a00c 	str.w	sl, [sp, #12]
 800cede:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800cee2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800cee6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800cee8:	f8dd a10c 	ldr.w	sl, [sp, #268]	; 0x10c
 800ceec:	3401      	adds	r4, #1
 800ceee:	fb00 5009 	mla	r0, r0, r9, r5
 800cef2:	4659      	mov	r1, fp
 800cef4:	4652      	mov	r2, sl
 800cef6:	b224      	sxth	r4, r4
 800cef8:	fb06 8000 	mla	r0, r6, r0, r8
 800cefc:	f005 ffc0 	bl	8012e80 <st_int8_copy>
 800cf00:	44d3      	add	fp, sl
 800cf02:	42a7      	cmp	r7, r4
 800cf04:	4620      	mov	r0, r4
 800cf06:	dcf1      	bgt.n	800ceec <st_sssa8_ch_convolve_dw+0x880>
 800cf08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800cf0a:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f43f ad5e 	beq.w	800c9d0 <st_sssa8_ch_convolve_dw+0x364>
 800cf14:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 8356 	beq.w	800d5c8 <st_sssa8_ch_convolve_dw+0xf5c>
 800cf1c:	ee18 3a10 	vmov	r3, s16
 800cf20:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800cf22:	9d86      	ldr	r5, [sp, #536]	; 0x218
 800cf24:	f04f 0900 	mov.w	r9, #0
 800cf28:	b21b      	sxth	r3, r3
 800cf2a:	9203      	str	r2, [sp, #12]
 800cf2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf2e:	9308      	str	r3, [sp, #32]
 800cf30:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800cf32:	992b      	ldr	r1, [sp, #172]	; 0xac
 800cf34:	f103 0610 	add.w	r6, r3, #16
 800cf38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cf3a:	9202      	str	r2, [sp, #8]
 800cf3c:	3348      	adds	r3, #72	; 0x48
 800cf3e:	9504      	str	r5, [sp, #16]
 800cf40:	f8cd a01c 	str.w	sl, [sp, #28]
 800cf44:	e081      	b.n	800d04a <st_sssa8_ch_convolve_dw+0x9de>
 800cf46:	f1a2 0a02 	sub.w	sl, r2, #2
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	9f04      	ldr	r7, [sp, #16]
 800cf4e:	3a01      	subs	r2, #1
 800cf50:	fa00 fa0a 	lsl.w	sl, r0, sl
 800cf54:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cf58:	f857 0b04 	ldr.w	r0, [r7], #4
 800cf5c:	f101 0802 	add.w	r8, r1, #2
 800cf60:	fb5c ac00 	smmla	ip, ip, r0, sl
 800cf64:	fa4c f202 	asr.w	r2, ip, r2
 800cf68:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf6c:	4402      	add	r2, r0
 800cf6e:	f302 0207 	ssat	r2, #8, r2
 800cf72:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cf76:	f80c 2b01 	strb.w	r2, [ip], #1
 800cf7a:	f9b8 2000 	ldrsh.w	r2, [r8]
 800cf7e:	2a15      	cmp	r2, #21
 800cf80:	f340 814d 	ble.w	800d21e <st_sssa8_ch_convolve_dw+0xbb2>
 800cf84:	6838      	ldr	r0, [r7, #0]
 800cf86:	2501      	movs	r5, #1
 800cf88:	1e97      	subs	r7, r2, #2
 800cf8a:	3a01      	subs	r2, #1
 800cf8c:	f8de e000 	ldr.w	lr, [lr]
 800cf90:	fa05 f707 	lsl.w	r7, r5, r7
 800cf94:	9d04      	ldr	r5, [sp, #16]
 800cf96:	fb54 7400 	smmla	r4, r4, r0, r7
 800cf9a:	4114      	asrs	r4, r2
 800cf9c:	9a02      	ldr	r2, [sp, #8]
 800cf9e:	f105 0808 	add.w	r8, r5, #8
 800cfa2:	1d08      	adds	r0, r1, #4
 800cfa4:	44a6      	add	lr, r4
 800cfa6:	f102 0408 	add.w	r4, r2, #8
 800cfaa:	f30e 0e07 	ssat	lr, #8, lr
 800cfae:	9a03      	ldr	r2, [sp, #12]
 800cfb0:	f88c e000 	strb.w	lr, [ip]
 800cfb4:	f102 0c02 	add.w	ip, r2, #2
 800cfb8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cfbc:	2a15      	cmp	r2, #21
 800cfbe:	f340 814c 	ble.w	800d25a <st_sssa8_ch_convolve_dw+0xbee>
 800cfc2:	f8d4 e000 	ldr.w	lr, [r4]
 800cfc6:	2501      	movs	r5, #1
 800cfc8:	1e94      	subs	r4, r2, #2
 800cfca:	3a01      	subs	r2, #1
 800cfcc:	f8d8 0000 	ldr.w	r0, [r8]
 800cfd0:	fa05 f404 	lsl.w	r4, r5, r4
 800cfd4:	9d04      	ldr	r5, [sp, #16]
 800cfd6:	f105 070c 	add.w	r7, r5, #12
 800cfda:	9d05      	ldr	r5, [sp, #20]
 800cfdc:	fb55 4000 	smmla	r0, r5, r0, r4
 800cfe0:	fa40 f202 	asr.w	r2, r0, r2
 800cfe4:	1d88      	adds	r0, r1, #6
 800cfe6:	4496      	add	lr, r2
 800cfe8:	9a02      	ldr	r2, [sp, #8]
 800cfea:	f102 040c 	add.w	r4, r2, #12
 800cfee:	f30e 0e07 	ssat	lr, #8, lr
 800cff2:	9a03      	ldr	r2, [sp, #12]
 800cff4:	f88c e000 	strb.w	lr, [ip]
 800cff8:	f102 0c03 	add.w	ip, r2, #3
 800cffc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d000:	2a15      	cmp	r2, #21
 800d002:	f340 8148 	ble.w	800d296 <st_sssa8_ch_convolve_dw+0xc2a>
 800d006:	6838      	ldr	r0, [r7, #0]
 800d008:	2501      	movs	r5, #1
 800d00a:	6827      	ldr	r7, [r4, #0]
 800d00c:	1e94      	subs	r4, r2, #2
 800d00e:	3a01      	subs	r2, #1
 800d010:	fa05 f404 	lsl.w	r4, r5, r4
 800d014:	9d06      	ldr	r5, [sp, #24]
 800d016:	fb55 4000 	smmla	r0, r5, r0, r4
 800d01a:	4110      	asrs	r0, r2
 800d01c:	4438      	add	r0, r7
 800d01e:	f300 0007 	ssat	r0, #8, r0
 800d022:	f88c 0000 	strb.w	r0, [ip]
 800d026:	9a04      	ldr	r2, [sp, #16]
 800d028:	3610      	adds	r6, #16
 800d02a:	3348      	adds	r3, #72	; 0x48
 800d02c:	f109 0904 	add.w	r9, r9, #4
 800d030:	3210      	adds	r2, #16
 800d032:	3108      	adds	r1, #8
 800d034:	9204      	str	r2, [sp, #16]
 800d036:	9a03      	ldr	r2, [sp, #12]
 800d038:	3204      	adds	r2, #4
 800d03a:	9203      	str	r2, [sp, #12]
 800d03c:	9a02      	ldr	r2, [sp, #8]
 800d03e:	3210      	adds	r2, #16
 800d040:	9202      	str	r2, [sp, #8]
 800d042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d044:	42b2      	cmp	r2, r6
 800d046:	f000 818b 	beq.w	800d360 <st_sssa8_ch_convolve_dw+0xcf4>
 800d04a:	9a07      	ldr	r2, [sp, #28]
 800d04c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d04e:	444a      	add	r2, r9
 800d050:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800d054:	f850 7009 	ldr.w	r7, [r0, r9]
 800d058:	f850 c002 	ldr.w	ip, [r0, r2]
 800d05c:	4abf      	ldr	r2, [pc, #764]	; (800d35c <st_sssa8_ch_convolve_dw+0xcf0>)
 800d05e:	fa1f fe87 	uxth.w	lr, r7
 800d062:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800d066:	ea0c 0202 	and.w	r2, ip, r2
 800d06a:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800d06e:	fa2b fc8e 	sxtab16	ip, fp, lr
 800d072:	ea42 4217 	orr.w	r2, r2, r7, lsr #16
 800d076:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800d07a:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800d07e:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800d082:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 800d086:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800d08a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800d08e:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800d092:	fa2b f782 	sxtab16	r7, fp, r2
 800d096:	fb20 4007 	smlad	r0, r0, r7, r4
 800d09a:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d09e:	f853 7c3c 	ldr.w	r7, [r3, #-60]
 800d0a2:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800d0a6:	fb27 4702 	smlad	r7, r7, r2, r4
 800d0aa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d0ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d0ae:	f854 4009 	ldr.w	r4, [r4, r9]
 800d0b2:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800d35c <st_sssa8_ch_convolve_dw+0xcf0>
 800d0b6:	f852 2009 	ldr.w	r2, [r2, r9]
 800d0ba:	ea04 0808 	and.w	r8, r4, r8
 800d0be:	f853 5c38 	ldr.w	r5, [r3, #-56]
 800d0c2:	ea48 4812 	orr.w	r8, r8, r2, lsr #16
 800d0c6:	b292      	uxth	r2, r2
 800d0c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d0cc:	fa2b f482 	sxtab16	r4, fp, r2
 800d0d0:	fb25 cc04 	smlad	ip, r5, r4, ip
 800d0d4:	fa2b f492 	sxtab16	r4, fp, r2, ror #8
 800d0d8:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800d0dc:	fb22 e404 	smlad	r4, r2, r4, lr
 800d0e0:	f853 5c30 	ldr.w	r5, [r3, #-48]
 800d0e4:	fa2b f288 	sxtab16	r2, fp, r8
 800d0e8:	fb25 0002 	smlad	r0, r5, r2, r0
 800d0ec:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800d0f0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800d0f4:	fb22 7708 	smlad	r7, r2, r8, r7
 800d0f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d0fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d0fc:	f855 e009 	ldr.w	lr, [r5, r9]
 800d100:	f8df a258 	ldr.w	sl, [pc, #600]	; 800d35c <st_sssa8_ch_convolve_dw+0xcf0>
 800d104:	f852 2009 	ldr.w	r2, [r2, r9]
 800d108:	ea0e 0a0a 	and.w	sl, lr, sl
 800d10c:	f853 5c28 	ldr.w	r5, [r3, #-40]
 800d110:	ea4a 4a12 	orr.w	sl, sl, r2, lsr #16
 800d114:	b292      	uxth	r2, r2
 800d116:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800d11a:	fa2b fe82 	sxtab16	lr, fp, r2
 800d11e:	fb25 cc0e 	smlad	ip, r5, lr, ip
 800d122:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d126:	f853 5c24 	ldr.w	r5, [r3, #-36]
 800d12a:	fb25 4402 	smlad	r4, r5, r2, r4
 800d12e:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800d132:	fa2b f28a 	sxtab16	r2, fp, sl
 800d136:	fb25 0002 	smlad	r0, r5, r2, r0
 800d13a:	fa2b fa9a 	sxtab16	sl, fp, sl, ror #8
 800d13e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800d142:	fb22 770a 	smlad	r7, r2, sl, r7
 800d146:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d148:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d14a:	f855 8009 	ldr.w	r8, [r5, r9]
 800d14e:	f8df e20c 	ldr.w	lr, [pc, #524]	; 800d35c <st_sssa8_ch_convolve_dw+0xcf0>
 800d152:	f852 2009 	ldr.w	r2, [r2, r9]
 800d156:	ea08 0e0e 	and.w	lr, r8, lr
 800d15a:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800d15e:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800d162:	b292      	uxth	r2, r2
 800d164:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800d168:	fa2b f882 	sxtab16	r8, fp, r2
 800d16c:	fb25 cc08 	smlad	ip, r5, r8, ip
 800d170:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800d174:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800d178:	fb25 4402 	smlad	r4, r5, r2, r4
 800d17c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800d180:	fa2b f28e 	sxtab16	r2, fp, lr
 800d184:	fb25 0002 	smlad	r0, r5, r2, r0
 800d188:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800d18c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800d190:	fb22 720e 	smlad	r2, r2, lr, r7
 800d194:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d196:	f833 8c08 	ldrh.w	r8, [r3, #-8]
 800d19a:	f855 7009 	ldr.w	r7, [r5, r9]
 800d19e:	9d08      	ldr	r5, [sp, #32]
 800d1a0:	fa4f fe87 	sxtb.w	lr, r7
 800d1a4:	f833 ac06 	ldrh.w	sl, [r3, #-6]
 800d1a8:	ebae 0e05 	sub.w	lr, lr, r5
 800d1ac:	fb18 cc0e 	smlabb	ip, r8, lr, ip
 800d1b0:	f347 2e07 	sbfx	lr, r7, #8, #8
 800d1b4:	ebae 0e05 	sub.w	lr, lr, r5
 800d1b8:	fb1a 440e 	smlabb	r4, sl, lr, r4
 800d1bc:	f347 4e07 	sbfx	lr, r7, #16, #8
 800d1c0:	ebc5 6727 	rsb	r7, r5, r7, asr #24
 800d1c4:	ebae 0e05 	sub.w	lr, lr, r5
 800d1c8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
 800d1cc:	fb15 000e 	smlabb	r0, r5, lr, r0
 800d1d0:	9005      	str	r0, [sp, #20]
 800d1d2:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800d1d6:	fb10 2207 	smlabb	r2, r0, r7, r2
 800d1da:	9206      	str	r2, [sp, #24]
 800d1dc:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d1e0:	2a15      	cmp	r2, #21
 800d1e2:	f73f aeb0 	bgt.w	800cf46 <st_sssa8_ch_convolve_dw+0x8da>
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	dd64      	ble.n	800d2b4 <st_sssa8_ch_convolve_dw+0xc48>
 800d1ea:	9f04      	ldr	r7, [sp, #16]
 800d1ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d1f0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d1f4:	f101 0802 	add.w	r8, r1, #2
 800d1f8:	f857 0b04 	ldr.w	r0, [r7], #4
 800d1fc:	f85e ab04 	ldr.w	sl, [lr], #4
 800d200:	fb5c ac00 	smmla	ip, ip, r0, sl
 800d204:	fa4c f202 	asr.w	r2, ip, r2
 800d208:	f302 0207 	ssat	r2, #8, r2
 800d20c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d210:	f80c 2b01 	strb.w	r2, [ip], #1
 800d214:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d218:	2a15      	cmp	r2, #21
 800d21a:	f73f aeb3 	bgt.w	800cf84 <st_sssa8_ch_convolve_dw+0x918>
 800d21e:	2a00      	cmp	r2, #0
 800d220:	f340 8083 	ble.w	800d32a <st_sssa8_ch_convolve_dw+0xcbe>
 800d224:	6838      	ldr	r0, [r7, #0]
 800d226:	0064      	lsls	r4, r4, #1
 800d228:	f8de 7000 	ldr.w	r7, [lr]
 800d22c:	9d04      	ldr	r5, [sp, #16]
 800d22e:	fb54 7400 	smmla	r4, r4, r0, r7
 800d232:	9802      	ldr	r0, [sp, #8]
 800d234:	fa44 f202 	asr.w	r2, r4, r2
 800d238:	f105 0808 	add.w	r8, r5, #8
 800d23c:	f100 0408 	add.w	r4, r0, #8
 800d240:	1d08      	adds	r0, r1, #4
 800d242:	f302 0207 	ssat	r2, #8, r2
 800d246:	f88c 2000 	strb.w	r2, [ip]
 800d24a:	9a03      	ldr	r2, [sp, #12]
 800d24c:	f102 0c02 	add.w	ip, r2, #2
 800d250:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d254:	2a15      	cmp	r2, #21
 800d256:	f73f aeb4 	bgt.w	800cfc2 <st_sssa8_ch_convolve_dw+0x956>
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	dd4a      	ble.n	800d2f4 <st_sssa8_ch_convolve_dw+0xc88>
 800d25e:	9805      	ldr	r0, [sp, #20]
 800d260:	6824      	ldr	r4, [r4, #0]
 800d262:	f8d8 e000 	ldr.w	lr, [r8]
 800d266:	0040      	lsls	r0, r0, #1
 800d268:	9d04      	ldr	r5, [sp, #16]
 800d26a:	fb50 400e 	smmla	r0, r0, lr, r4
 800d26e:	fa40 f202 	asr.w	r2, r0, r2
 800d272:	9802      	ldr	r0, [sp, #8]
 800d274:	f105 070c 	add.w	r7, r5, #12
 800d278:	f100 040c 	add.w	r4, r0, #12
 800d27c:	1d88      	adds	r0, r1, #6
 800d27e:	f302 0207 	ssat	r2, #8, r2
 800d282:	f88c 2000 	strb.w	r2, [ip]
 800d286:	9a03      	ldr	r2, [sp, #12]
 800d288:	f102 0c03 	add.w	ip, r2, #3
 800d28c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d290:	2a15      	cmp	r2, #21
 800d292:	f73f aeb8 	bgt.w	800d006 <st_sssa8_ch_convolve_dw+0x99a>
 800d296:	2a00      	cmp	r2, #0
 800d298:	dd1c      	ble.n	800d2d4 <st_sssa8_ch_convolve_dw+0xc68>
 800d29a:	9806      	ldr	r0, [sp, #24]
 800d29c:	683f      	ldr	r7, [r7, #0]
 800d29e:	6824      	ldr	r4, [r4, #0]
 800d2a0:	0040      	lsls	r0, r0, #1
 800d2a2:	fb50 4007 	smmla	r0, r0, r7, r4
 800d2a6:	fa40 f202 	asr.w	r2, r0, r2
 800d2aa:	f302 0207 	ssat	r2, #8, r2
 800d2ae:	f88c 2000 	strb.w	r2, [ip]
 800d2b2:	e6b8      	b.n	800d026 <st_sssa8_ch_convolve_dw+0x9ba>
 800d2b4:	f1c2 0201 	rsb	r2, r2, #1
 800d2b8:	f101 0802 	add.w	r8, r1, #2
 800d2bc:	fa0c f202 	lsl.w	r2, ip, r2
 800d2c0:	f302 021f 	ssat	r2, #32, r2
 800d2c4:	9f04      	ldr	r7, [sp, #16]
 800d2c6:	f857 0b04 	ldr.w	r0, [r7], #4
 800d2ca:	fb52 f210 	smmulr	r2, r2, r0
 800d2ce:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d2d2:	e649      	b.n	800cf68 <st_sssa8_ch_convolve_dw+0x8fc>
 800d2d4:	f1c2 0201 	rsb	r2, r2, #1
 800d2d8:	9806      	ldr	r0, [sp, #24]
 800d2da:	4090      	lsls	r0, r2
 800d2dc:	f300 021f 	ssat	r2, #32, r0
 800d2e0:	6838      	ldr	r0, [r7, #0]
 800d2e2:	fb52 f210 	smmulr	r2, r2, r0
 800d2e6:	6820      	ldr	r0, [r4, #0]
 800d2e8:	4402      	add	r2, r0
 800d2ea:	f302 0207 	ssat	r2, #8, r2
 800d2ee:	f88c 2000 	strb.w	r2, [ip]
 800d2f2:	e698      	b.n	800d026 <st_sssa8_ch_convolve_dw+0x9ba>
 800d2f4:	f1c2 0201 	rsb	r2, r2, #1
 800d2f8:	9805      	ldr	r0, [sp, #20]
 800d2fa:	4090      	lsls	r0, r2
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	1d88      	adds	r0, r1, #6
 800d300:	f302 021f 	ssat	r2, #32, r2
 800d304:	9d04      	ldr	r5, [sp, #16]
 800d306:	f8d8 e000 	ldr.w	lr, [r8]
 800d30a:	f105 070c 	add.w	r7, r5, #12
 800d30e:	fb52 f21e 	smmulr	r2, r2, lr
 800d312:	6824      	ldr	r4, [r4, #0]
 800d314:	4422      	add	r2, r4
 800d316:	9c02      	ldr	r4, [sp, #8]
 800d318:	340c      	adds	r4, #12
 800d31a:	f302 0207 	ssat	r2, #8, r2
 800d31e:	f88c 2000 	strb.w	r2, [ip]
 800d322:	9a03      	ldr	r2, [sp, #12]
 800d324:	f102 0c03 	add.w	ip, r2, #3
 800d328:	e668      	b.n	800cffc <st_sssa8_ch_convolve_dw+0x990>
 800d32a:	f1c2 0201 	rsb	r2, r2, #1
 800d32e:	1d08      	adds	r0, r1, #4
 800d330:	4094      	lsls	r4, r2
 800d332:	f304 021f 	ssat	r2, #32, r4
 800d336:	9d04      	ldr	r5, [sp, #16]
 800d338:	683c      	ldr	r4, [r7, #0]
 800d33a:	f105 0808 	add.w	r8, r5, #8
 800d33e:	fb52 f214 	smmulr	r2, r2, r4
 800d342:	f8de 4000 	ldr.w	r4, [lr]
 800d346:	4422      	add	r2, r4
 800d348:	9c02      	ldr	r4, [sp, #8]
 800d34a:	3408      	adds	r4, #8
 800d34c:	f302 0207 	ssat	r2, #8, r2
 800d350:	f88c 2000 	strb.w	r2, [ip]
 800d354:	9a03      	ldr	r2, [sp, #12]
 800d356:	f102 0c02 	add.w	ip, r2, #2
 800d35a:	e62d      	b.n	800cfb8 <st_sssa8_ch_convolve_dw+0x94c>
 800d35c:	ffff0000 	.word	0xffff0000
 800d360:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d368:	4413      	add	r3, r2
 800d36a:	9383      	str	r3, [sp, #524]	; 0x20c
 800d36c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d372:	2b00      	cmp	r3, #0
 800d374:	f43f ac2d 	beq.w	800cbd2 <st_sssa8_ch_convolve_dw+0x566>
 800d378:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800d37a:	e9dd 8c47 	ldrd	r8, ip, [sp, #284]	; 0x11c
 800d37e:	e9dd 3445 	ldrd	r3, r4, [sp, #276]	; 0x114
 800d382:	f1a3 0902 	sub.w	r9, r3, #2
 800d386:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d388:	9904      	ldr	r1, [sp, #16]
 800d38a:	4423      	add	r3, r4
 800d38c:	f8cd b00c 	str.w	fp, [sp, #12]
 800d390:	b29b      	uxth	r3, r3
 800d392:	9302      	str	r3, [sp, #8]
 800d394:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d396:	f103 0e01 	add.w	lr, r3, #1
 800d39a:	ee18 3a10 	vmov	r3, s16
 800d39e:	b218      	sxth	r0, r3
 800d3a0:	1c63      	adds	r3, r4, #1
 800d3a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3a4:	f858 6b04 	ldr.w	r6, [r8], #4
 800d3a8:	1915      	adds	r5, r2, r4
 800d3aa:	b29c      	uxth	r4, r3
 800d3ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8219 	beq.w	800d7e6 <st_sssa8_ch_convolve_dw+0x117a>
 800d3b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d3b6:	18cb      	adds	r3, r1, r3
 800d3b8:	f995 2000 	ldrsb.w	r2, [r5]
 800d3bc:	4455      	add	r5, sl
 800d3be:	f831 bb02 	ldrh.w	fp, [r1], #2
 800d3c2:	1a12      	subs	r2, r2, r0
 800d3c4:	4299      	cmp	r1, r3
 800d3c6:	fb1b 6602 	smlabb	r6, fp, r2, r6
 800d3ca:	d1f5      	bne.n	800d3b8 <st_sssa8_ch_convolve_dw+0xd4c>
 800d3cc:	f939 5f02 	ldrsh.w	r5, [r9, #2]!
 800d3d0:	2d15      	cmp	r5, #21
 800d3d2:	f340 80d1 	ble.w	800d578 <st_sssa8_ch_convolve_dw+0xf0c>
 800d3d6:	1ea9      	subs	r1, r5, #2
 800d3d8:	2201      	movs	r2, #1
 800d3da:	3d01      	subs	r5, #1
 800d3dc:	fa02 f101 	lsl.w	r1, r2, r1
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	fb56 1202 	smmla	r2, r6, r2, r1
 800d3e6:	fa42 f505 	asr.w	r5, r2, r5
 800d3ea:	f8dc 2000 	ldr.w	r2, [ip]
 800d3ee:	442a      	add	r2, r5
 800d3f0:	f302 0207 	ssat	r2, #8, r2
 800d3f4:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d3f8:	9a02      	ldr	r2, [sp, #8]
 800d3fa:	3704      	adds	r7, #4
 800d3fc:	f10c 0c04 	add.w	ip, ip, #4
 800d400:	f10e 0e01 	add.w	lr, lr, #1
 800d404:	4294      	cmp	r4, r2
 800d406:	f000 80c6 	beq.w	800d596 <st_sssa8_ch_convolve_dw+0xf2a>
 800d40a:	4619      	mov	r1, r3
 800d40c:	e7c8      	b.n	800d3a0 <st_sssa8_ch_convolve_dw+0xd34>
 800d40e:	9a58      	ldr	r2, [sp, #352]	; 0x160
 800d410:	3a01      	subs	r2, #1
 800d412:	9258      	str	r2, [sp, #352]	; 0x160
 800d414:	2201      	movs	r2, #1
 800d416:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800d41a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d41c:	2a01      	cmp	r2, #1
 800d41e:	f47f aa7d 	bne.w	800c91c <st_sssa8_ch_convolve_dw+0x2b0>
 800d422:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d424:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d426:	4290      	cmp	r0, r2
 800d428:	f340 81d9 	ble.w	800d7de <st_sssa8_ch_convolve_dw+0x1172>
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800d430:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800d432:	9328      	str	r3, [sp, #160]	; 0xa0
 800d434:	fb01 0104 	mla	r1, r1, r4, r0
 800d438:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d43a:	1acd      	subs	r5, r1, r3
 800d43c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d440:	42ab      	cmp	r3, r5
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	f6bf aac0 	bge.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d448:	f8cd b014 	str.w	fp, [sp, #20]
 800d44c:	4617      	mov	r7, r2
 800d44e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d452:	4690      	mov	r8, r2
 800d454:	4613      	mov	r3, r2
 800d456:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d458:	ee18 ba10 	vmov	fp, s16
 800d45c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d45e:	f8dd e010 	ldr.w	lr, [sp, #16]
 800d462:	429a      	cmp	r2, r3
 800d464:	fb03 f306 	mul.w	r3, r3, r6
 800d468:	4674      	mov	r4, lr
 800d46a:	bfcc      	ite	gt
 800d46c:	2700      	movgt	r7, #0
 800d46e:	2701      	movle	r7, #1
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	ea47 77d8 	orr.w	r7, r7, r8, lsr #31
 800d476:	9702      	str	r7, [sp, #8]
 800d478:	0fe3      	lsrs	r3, r4, #31
 800d47a:	4652      	mov	r2, sl
 800d47c:	4649      	mov	r1, r9
 800d47e:	4658      	mov	r0, fp
 800d480:	4576      	cmp	r6, lr
 800d482:	bfd8      	it	le
 800d484:	f043 0301 	orrle.w	r3, r3, #1
 800d488:	b91b      	cbnz	r3, 800d492 <st_sssa8_ch_convolve_dw+0xe26>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 80ec 	beq.w	800d66a <st_sssa8_ch_convolve_dw+0xffe>
 800d492:	f005 fc8d 	bl	8012db0 <st_int8_fill>
 800d496:	3401      	adds	r4, #1
 800d498:	44d1      	add	r9, sl
 800d49a:	b224      	sxth	r4, r4
 800d49c:	42ac      	cmp	r4, r5
 800d49e:	46a6      	mov	lr, r4
 800d4a0:	dbea      	blt.n	800d478 <st_sssa8_ch_convolve_dw+0xe0c>
 800d4a2:	f108 0801 	add.w	r8, r8, #1
 800d4a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4a8:	fa0f f888 	sxth.w	r8, r8
 800d4ac:	4542      	cmp	r2, r8
 800d4ae:	4643      	mov	r3, r8
 800d4b0:	dcd4      	bgt.n	800d45c <st_sssa8_ch_convolve_dw+0xdf0>
 800d4b2:	f8dd b014 	ldr.w	fp, [sp, #20]
 800d4b6:	f7ff ba87 	b.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d4ba:	4282      	cmp	r2, r0
 800d4bc:	f340 818f 	ble.w	800d7de <st_sssa8_ch_convolve_dw+0x1172>
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800d4c4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d4c6:	9328      	str	r3, [sp, #160]	; 0xa0
 800d4c8:	fb01 2100 	mla	r1, r1, r0, r2
 800d4cc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d4ce:	1acd      	subs	r5, r1, r3
 800d4d0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d4d4:	429d      	cmp	r5, r3
 800d4d6:	9303      	str	r3, [sp, #12]
 800d4d8:	f77f aa76 	ble.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d4dc:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 800d4e0:	f8cd b010 	str.w	fp, [sp, #16]
 800d4e4:	4647      	mov	r7, r8
 800d4e6:	4643      	mov	r3, r8
 800d4e8:	46c3      	mov	fp, r8
 800d4ea:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d4ee:	46d0      	mov	r8, sl
 800d4f0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d4f2:	ee18 aa10 	vmov	sl, s16
 800d4f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d4f8:	9903      	ldr	r1, [sp, #12]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	fb03 f306 	mul.w	r3, r3, r6
 800d500:	460c      	mov	r4, r1
 800d502:	bfcc      	ite	gt
 800d504:	2700      	movgt	r7, #0
 800d506:	2701      	movle	r7, #1
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 800d50e:	0fe3      	lsrs	r3, r4, #31
 800d510:	428e      	cmp	r6, r1
 800d512:	bfd8      	it	le
 800d514:	f043 0301 	orrle.w	r3, r3, #1
 800d518:	b903      	cbnz	r3, 800d51c <st_sssa8_ch_convolve_dw+0xeb0>
 800d51a:	b1bf      	cbz	r7, 800d54c <st_sssa8_ch_convolve_dw+0xee0>
 800d51c:	4642      	mov	r2, r8
 800d51e:	4649      	mov	r1, r9
 800d520:	4650      	mov	r0, sl
 800d522:	f005 fc45 	bl	8012db0 <st_int8_fill>
 800d526:	3401      	adds	r4, #1
 800d528:	44c1      	add	r9, r8
 800d52a:	b224      	sxth	r4, r4
 800d52c:	42ac      	cmp	r4, r5
 800d52e:	4621      	mov	r1, r4
 800d530:	dbed      	blt.n	800d50e <st_sssa8_ch_convolve_dw+0xea2>
 800d532:	f10b 0b01 	add.w	fp, fp, #1
 800d536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d538:	fa0f fb8b 	sxth.w	fp, fp
 800d53c:	455a      	cmp	r2, fp
 800d53e:	465b      	mov	r3, fp
 800d540:	dcd9      	bgt.n	800d4f6 <st_sssa8_ch_convolve_dw+0xe8a>
 800d542:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d546:	46c2      	mov	sl, r8
 800d548:	f7ff ba3e 	b.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d54c:	9b02      	ldr	r3, [sp, #8]
 800d54e:	440b      	add	r3, r1
 800d550:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 800d554:	fb02 1303 	mla	r3, r2, r3, r1
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d0e4      	beq.n	800d526 <st_sssa8_ch_convolve_dw+0xeba>
 800d55c:	eb03 0c02 	add.w	ip, r3, r2
 800d560:	4648      	mov	r0, r9
 800d562:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d566:	459c      	cmp	ip, r3
 800d568:	ea4f 2201 	mov.w	r2, r1, lsl #8
 800d56c:	fa32 f281 	uxtab16	r2, r2, r1
 800d570:	f820 2b02 	strh.w	r2, [r0], #2
 800d574:	d1f5      	bne.n	800d562 <st_sssa8_ch_convolve_dw+0xef6>
 800d576:	e7d6      	b.n	800d526 <st_sssa8_ch_convolve_dw+0xeba>
 800d578:	2d00      	cmp	r5, #0
 800d57a:	dd14      	ble.n	800d5a6 <st_sssa8_ch_convolve_dw+0xf3a>
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	0076      	lsls	r6, r6, #1
 800d580:	f8dc 1000 	ldr.w	r1, [ip]
 800d584:	fb56 1602 	smmla	r6, r6, r2, r1
 800d588:	fa46 f205 	asr.w	r2, r6, r5
 800d58c:	f302 0207 	ssat	r2, #8, r2
 800d590:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d594:	e730      	b.n	800d3f8 <st_sssa8_ch_convolve_dw+0xd8c>
 800d596:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d59a:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d59c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d59e:	4413      	add	r3, r2
 800d5a0:	9383      	str	r3, [sp, #524]	; 0x20c
 800d5a2:	f7ff bb16 	b.w	800cbd2 <st_sssa8_ch_convolve_dw+0x566>
 800d5a6:	f1c5 0501 	rsb	r5, r5, #1
 800d5aa:	fa06 f105 	lsl.w	r1, r6, r5
 800d5ae:	f301 011f 	ssat	r1, #32, r1
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	fb51 f112 	smmulr	r1, r1, r2
 800d5b8:	f8dc 2000 	ldr.w	r2, [ip]
 800d5bc:	440a      	add	r2, r1
 800d5be:	f302 0207 	ssat	r2, #8, r2
 800d5c2:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d5c6:	e717      	b.n	800d3f8 <st_sssa8_ch_convolve_dw+0xd8c>
 800d5c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f43f ab01 	beq.w	800cbd2 <st_sssa8_ch_convolve_dw+0x566>
 800d5d0:	f1ba 0f01 	cmp.w	sl, #1
 800d5d4:	f040 858a 	bne.w	800e0ec <st_sssa8_ch_convolve_dw+0x1a80>
 800d5d8:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d5da:	f103 0c01 	add.w	ip, r3, #1
 800d5de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d5e0:	1e9f      	subs	r7, r3, #2
 800d5e2:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d5e4:	6819      	ldr	r1, [r3, #0]
 800d5e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d5e8:	b183      	cbz	r3, 800d60c <st_sssa8_ch_convolve_dw+0xfa0>
 800d5ea:	ee18 3a10 	vmov	r3, s16
 800d5ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d5f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5f2:	b21e      	sxth	r6, r3
 800d5f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d5f6:	18d5      	adds	r5, r2, r3
 800d5f8:	f832 4b02 	ldrh.w	r4, [r2], #2
 800d5fc:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d600:	4295      	cmp	r5, r2
 800d602:	eba3 0306 	sub.w	r3, r3, r6
 800d606:	fb13 1104 	smlabb	r1, r3, r4, r1
 800d60a:	d1f5      	bne.n	800d5f8 <st_sssa8_ch_convolve_dw+0xf8c>
 800d60c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800d610:	2815      	cmp	r0, #21
 800d612:	dd10      	ble.n	800d636 <st_sssa8_ch_convolve_dw+0xfca>
 800d614:	1e83      	subs	r3, r0, #2
 800d616:	2201      	movs	r2, #1
 800d618:	3801      	subs	r0, #1
 800d61a:	409a      	lsls	r2, r3
 800d61c:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	fb51 2303 	smmla	r3, r1, r3, r2
 800d624:	4103      	asrs	r3, r0
 800d626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	4413      	add	r3, r2
 800d62c:	f303 0307 	ssat	r3, #8, r3
 800d630:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d634:	e7b1      	b.n	800d59a <st_sssa8_ch_convolve_dw+0xf2e>
 800d636:	2800      	cmp	r0, #0
 800d638:	dd0c      	ble.n	800d654 <st_sssa8_ch_convolve_dw+0xfe8>
 800d63a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d63c:	0049      	lsls	r1, r1, #1
 800d63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	fb51 2303 	smmla	r3, r1, r3, r2
 800d648:	4103      	asrs	r3, r0
 800d64a:	f303 0307 	ssat	r3, #8, r3
 800d64e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d652:	e7a2      	b.n	800d59a <st_sssa8_ch_convolve_dw+0xf2e>
 800d654:	f1c0 0301 	rsb	r3, r0, #1
 800d658:	fa01 f303 	lsl.w	r3, r1, r3
 800d65c:	f303 031f 	ssat	r3, #32, r3
 800d660:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800d662:	6812      	ldr	r2, [r2, #0]
 800d664:	fb53 f312 	smmulr	r3, r3, r2
 800d668:	e7dd      	b.n	800d626 <st_sssa8_ch_convolve_dw+0xfba>
 800d66a:	9b03      	ldr	r3, [sp, #12]
 800d66c:	eb03 000e 	add.w	r0, r3, lr
 800d670:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800d674:	fb02 3000 	mla	r0, r2, r0, r3
 800d678:	4617      	mov	r7, r2
 800d67a:	f005 fc01 	bl	8012e80 <st_int8_copy>
 800d67e:	e70a      	b.n	800d496 <st_sssa8_ch_convolve_dw+0xe2a>
 800d680:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d682:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800d684:	4282      	cmp	r2, r0
 800d686:	f340 80aa 	ble.w	800d7de <st_sssa8_ch_convolve_dw+0x1172>
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800d68e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d690:	9328      	str	r3, [sp, #160]	; 0xa0
 800d692:	fb01 2100 	mla	r1, r1, r0, r2
 800d696:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d698:	eba1 0803 	sub.w	r8, r1, r3
 800d69c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d6a0:	4598      	cmp	r8, r3
 800d6a2:	9306      	str	r3, [sp, #24]
 800d6a4:	f77f a990 	ble.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d6a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d6aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d6ae:	f8cd 8008 	str.w	r8, [sp, #8]
 800d6b2:	ee18 8a10 	vmov	r8, s16
 800d6b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d6b8:	f8dd b0f8 	ldr.w	fp, [sp, #248]	; 0xf8
 800d6bc:	9304      	str	r3, [sp, #16]
 800d6be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	fb03 f301 	mul.w	r3, r3, r1
 800d6c8:	bfcc      	ite	gt
 800d6ca:	2200      	movgt	r2, #0
 800d6cc:	2201      	movle	r2, #1
 800d6ce:	9305      	str	r3, [sp, #20]
 800d6d0:	9b04      	ldr	r3, [sp, #16]
 800d6d2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d6d6:	9a06      	ldr	r2, [sp, #24]
 800d6d8:	4615      	mov	r5, r2
 800d6da:	9303      	str	r3, [sp, #12]
 800d6dc:	0feb      	lsrs	r3, r5, #31
 800d6de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6e0:	4291      	cmp	r1, r2
 800d6e2:	bfd8      	it	le
 800d6e4:	f043 0301 	orrle.w	r3, r3, #1
 800d6e8:	b90b      	cbnz	r3, 800d6ee <st_sssa8_ch_convolve_dw+0x1082>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	b1a3      	cbz	r3, 800d718 <st_sssa8_ch_convolve_dw+0x10ac>
 800d6ee:	4652      	mov	r2, sl
 800d6f0:	4631      	mov	r1, r6
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	f005 fb5c 	bl	8012db0 <st_int8_fill>
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	9b02      	ldr	r3, [sp, #8]
 800d6fc:	4456      	add	r6, sl
 800d6fe:	b22d      	sxth	r5, r5
 800d700:	429d      	cmp	r5, r3
 800d702:	462a      	mov	r2, r5
 800d704:	dbea      	blt.n	800d6dc <st_sssa8_ch_convolve_dw+0x1070>
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d70a:	3301      	adds	r3, #1
 800d70c:	b21b      	sxth	r3, r3
 800d70e:	429a      	cmp	r2, r3
 800d710:	9304      	str	r3, [sp, #16]
 800d712:	dcd4      	bgt.n	800d6be <st_sssa8_ch_convolve_dw+0x1052>
 800d714:	f7ff b956 	b.w	800c9c4 <st_sssa8_ch_convolve_dw+0x358>
 800d718:	9b05      	ldr	r3, [sp, #20]
 800d71a:	441a      	add	r2, r3
 800d71c:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 800d720:	fb03 1702 	mla	r7, r3, r2, r1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d0e7      	beq.n	800d6f8 <st_sssa8_ch_convolve_dw+0x108c>
 800d728:	f1bb 0f00 	cmp.w	fp, #0
 800d72c:	d0e4      	beq.n	800d6f8 <st_sssa8_ch_convolve_dw+0x108c>
 800d72e:	18fb      	adds	r3, r7, r3
 800d730:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d734:	f106 0904 	add.w	r9, r6, #4
 800d738:	4630      	mov	r0, r6
 800d73a:	469e      	mov	lr, r3
 800d73c:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
 800d740:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
 800d744:	e9cd 5607 	strd	r5, r6, [sp, #28]
 800d748:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d74c:	f1ba 0f05 	cmp.w	sl, #5
 800d750:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800d754:	ea4f 6201 	mov.w	r2, r1, lsl #24
 800d758:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d75c:	ea4f 2132 	mov.w	r1, r2, ror #8
 800d760:	fa32 f281 	uxtab16	r2, r2, r1
 800d764:	d938      	bls.n	800d7d8 <st_sssa8_ch_convolve_dw+0x116c>
 800d766:	b3a3      	cbz	r3, 800d7d2 <st_sssa8_ch_convolve_dw+0x1166>
 800d768:	464d      	mov	r5, r9
 800d76a:	2401      	movs	r4, #1
 800d76c:	f849 2c04 	str.w	r2, [r9, #-4]
 800d770:	ebab 0603 	sub.w	r6, fp, r3
 800d774:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d778:	0871      	lsrs	r1, r6, #1
 800d77a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d77e:	e9c3 2200 	strd	r2, r2, [r3]
 800d782:	3308      	adds	r3, #8
 800d784:	4299      	cmp	r1, r3
 800d786:	d1fa      	bne.n	800d77e <st_sssa8_ch_convolve_dw+0x1112>
 800d788:	f026 0301 	bic.w	r3, r6, #1
 800d78c:	42b3      	cmp	r3, r6
 800d78e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800d792:	441c      	add	r4, r3
 800d794:	d014      	beq.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d796:	1c63      	adds	r3, r4, #1
 800d798:	602a      	str	r2, [r5, #0]
 800d79a:	459b      	cmp	fp, r3
 800d79c:	dd10      	ble.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d79e:	1ca3      	adds	r3, r4, #2
 800d7a0:	606a      	str	r2, [r5, #4]
 800d7a2:	459b      	cmp	fp, r3
 800d7a4:	dd0c      	ble.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d7a6:	1ce3      	adds	r3, r4, #3
 800d7a8:	60aa      	str	r2, [r5, #8]
 800d7aa:	459b      	cmp	fp, r3
 800d7ac:	dd08      	ble.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d7ae:	1d23      	adds	r3, r4, #4
 800d7b0:	60ea      	str	r2, [r5, #12]
 800d7b2:	459b      	cmp	fp, r3
 800d7b4:	dd04      	ble.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d7b6:	3405      	adds	r4, #5
 800d7b8:	612a      	str	r2, [r5, #16]
 800d7ba:	45a3      	cmp	fp, r4
 800d7bc:	dd00      	ble.n	800d7c0 <st_sssa8_ch_convolve_dw+0x1154>
 800d7be:	616a      	str	r2, [r5, #20]
 800d7c0:	45be      	cmp	lr, r7
 800d7c2:	4460      	add	r0, ip
 800d7c4:	44e1      	add	r9, ip
 800d7c6:	d1bf      	bne.n	800d748 <st_sssa8_ch_convolve_dw+0x10dc>
 800d7c8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d7cc:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 800d7d0:	e792      	b.n	800d6f8 <st_sssa8_ch_convolve_dw+0x108c>
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	461c      	mov	r4, r3
 800d7d6:	e7cb      	b.n	800d770 <st_sssa8_ch_convolve_dw+0x1104>
 800d7d8:	4605      	mov	r5, r0
 800d7da:	2400      	movs	r4, #0
 800d7dc:	e7db      	b.n	800d796 <st_sssa8_ch_convolve_dw+0x112a>
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	9328      	str	r3, [sp, #160]	; 0xa0
 800d7e2:	f7ff b8f1 	b.w	800c9c8 <st_sssa8_ch_convolve_dw+0x35c>
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	e5f0      	b.n	800d3cc <st_sssa8_ch_convolve_dw+0xd60>
 800d7ea:	b2ab      	uxth	r3, r5
 800d7ec:	9342      	str	r3, [sp, #264]	; 0x108
 800d7ee:	f7ff b9fd 	b.w	800cbec <st_sssa8_ch_convolve_dw+0x580>
 800d7f2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f6:	fb02 f000 	mul.w	r0, r2, r0
 800d7fa:	fb02 f303 	mul.w	r3, r2, r3
 800d7fe:	901c      	str	r0, [sp, #112]	; 0x70
 800d800:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800d802:	fb03 f000 	mul.w	r0, r3, r0
 800d806:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d80a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800d80c:	901b      	str	r0, [sp, #108]	; 0x6c
 800d80e:	2a00      	cmp	r2, #0
 800d810:	f43f a9f9 	beq.w	800cc06 <st_sssa8_ch_convolve_dw+0x59a>
 800d814:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d816:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d818:	f001 0203 	and.w	r2, r1, #3
 800d81c:	0888      	lsrs	r0, r1, #2
 800d81e:	4427      	add	r7, r4
 800d820:	9213      	str	r2, [sp, #76]	; 0x4c
 800d822:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d824:	9015      	str	r0, [sp, #84]	; 0x54
 800d826:	9716      	str	r7, [sp, #88]	; 0x58
 800d828:	2a00      	cmp	r2, #0
 800d82a:	f43f a9ec 	beq.w	800cc06 <st_sssa8_ch_convolve_dw+0x59a>
 800d82e:	441c      	add	r4, r3
 800d830:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800d834:	1e42      	subs	r2, r0, #1
 800d836:	19be      	adds	r6, r7, r6
 800d838:	942a      	str	r4, [sp, #168]	; 0xa8
 800d83a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800d83c:	b292      	uxth	r2, r2
 800d83e:	9520      	str	r5, [sp, #128]	; 0x80
 800d840:	1861      	adds	r1, r4, r1
 800d842:	191c      	adds	r4, r3, r4
 800d844:	9619      	str	r6, [sp, #100]	; 0x64
 800d846:	18cd      	adds	r5, r1, r3
 800d848:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800d84a:	1c53      	adds	r3, r2, #1
 800d84c:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d850:	3120      	adds	r1, #32
 800d852:	951f      	str	r5, [sp, #124]	; 0x7c
 800d854:	9422      	str	r4, [sp, #136]	; 0x88
 800d856:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d85a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800d85e:	9112      	str	r1, [sp, #72]	; 0x48
 800d860:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800d864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d866:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d868:	3a01      	subs	r2, #1
 800d86a:	9126      	str	r1, [sp, #152]	; 0x98
 800d86c:	b291      	uxth	r1, r2
 800d86e:	9124      	str	r1, [sp, #144]	; 0x90
 800d870:	0061      	lsls	r1, r4, #1
 800d872:	9121      	str	r1, [sp, #132]	; 0x84
 800d874:	0069      	lsls	r1, r5, #1
 800d876:	465d      	mov	r5, fp
 800d878:	911e      	str	r1, [sp, #120]	; 0x78
 800d87a:	9986      	ldr	r1, [sp, #536]	; 0x218
 800d87c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d880:	911a      	str	r1, [sp, #104]	; 0x68
 800d882:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800d886:	911d      	str	r1, [sp, #116]	; 0x74
 800d888:	0099      	lsls	r1, r3, #2
 800d88a:	9125      	str	r1, [sp, #148]	; 0x94
 800d88c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
 800d890:	9129      	str	r1, [sp, #164]	; 0xa4
 800d892:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800d894:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d898:	4663      	mov	r3, ip
 800d89a:	9128      	str	r1, [sp, #160]	; 0xa0
 800d89c:	0081      	lsls	r1, r0, #2
 800d89e:	9127      	str	r1, [sp, #156]	; 0x9c
 800d8a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d8a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d8a4:	9504      	str	r5, [sp, #16]
 800d8a6:	fb03 2301 	mla	r3, r3, r1, r2
 800d8aa:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	1859      	adds	r1, r3, r1
 800d8b0:	9307      	str	r3, [sp, #28]
 800d8b2:	9218      	str	r2, [sp, #96]	; 0x60
 800d8b4:	ee18 2a10 	vmov	r2, s16
 800d8b8:	9110      	str	r1, [sp, #64]	; 0x40
 800d8ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d8bc:	b212      	sxth	r2, r2
 800d8be:	1859      	adds	r1, r3, r1
 800d8c0:	4693      	mov	fp, r2
 800d8c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800d8c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d8c6:	4419      	add	r1, r3
 800d8c8:	910d      	str	r1, [sp, #52]	; 0x34
 800d8ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d8cc:	4419      	add	r1, r3
 800d8ce:	910c      	str	r1, [sp, #48]	; 0x30
 800d8d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d8d2:	1859      	adds	r1, r3, r1
 800d8d4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d8d6:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d8d8:	4419      	add	r1, r3
 800d8da:	910a      	str	r1, [sp, #40]	; 0x28
 800d8dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d8de:	4419      	add	r1, r3
 800d8e0:	9109      	str	r1, [sp, #36]	; 0x24
 800d8e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8e4:	18cb      	adds	r3, r1, r3
 800d8e6:	9308      	str	r3, [sp, #32]
 800d8e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 83d7 	beq.w	800e09e <st_sssa8_ch_convolve_dw+0x1a32>
 800d8f0:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d8f2:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800d8f4:	f103 0710 	add.w	r7, r3, #16
 800d8f8:	9e86      	ldr	r6, [sp, #536]	; 0x218
 800d8fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d8fc:	9203      	str	r2, [sp, #12]
 800d8fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d900:	3348      	adds	r3, #72	; 0x48
 800d902:	9d04      	ldr	r5, [sp, #16]
 800d904:	9202      	str	r2, [sp, #8]
 800d906:	2200      	movs	r2, #0
 800d908:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800d90c:	9604      	str	r6, [sp, #16]
 800d90e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800d912:	e083      	b.n	800da1c <st_sssa8_ch_convolve_dw+0x13b0>
 800d914:	f1a1 0902 	sub.w	r9, r1, #2
 800d918:	2401      	movs	r4, #1
 800d91a:	9804      	ldr	r0, [sp, #16]
 800d91c:	3901      	subs	r1, #1
 800d91e:	fa04 f909 	lsl.w	r9, r4, r9
 800d922:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d926:	f850 4b04 	ldr.w	r4, [r0], #4
 800d92a:	f10a 0b02 	add.w	fp, sl, #2
 800d92e:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800d932:	fa4c f101 	asr.w	r1, ip, r1
 800d936:	f858 4b04 	ldr.w	r4, [r8], #4
 800d93a:	4421      	add	r1, r4
 800d93c:	f301 0107 	ssat	r1, #8, r1
 800d940:	9c03      	ldr	r4, [sp, #12]
 800d942:	f804 1b01 	strb.w	r1, [r4], #1
 800d946:	f9bb 1000 	ldrsh.w	r1, [fp]
 800d94a:	2915      	cmp	r1, #21
 800d94c:	f340 8149 	ble.w	800dbe2 <st_sssa8_ch_convolve_dw+0x1576>
 800d950:	f1a1 0c02 	sub.w	ip, r1, #2
 800d954:	2601      	movs	r6, #1
 800d956:	3901      	subs	r1, #1
 800d958:	6800      	ldr	r0, [r0, #0]
 800d95a:	fa06 fc0c 	lsl.w	ip, r6, ip
 800d95e:	f8d8 8000 	ldr.w	r8, [r8]
 800d962:	9e04      	ldr	r6, [sp, #16]
 800d964:	fb5e ce00 	smmla	lr, lr, r0, ip
 800d968:	fa4e f001 	asr.w	r0, lr, r1
 800d96c:	f106 0908 	add.w	r9, r6, #8
 800d970:	f10a 0104 	add.w	r1, sl, #4
 800d974:	4440      	add	r0, r8
 800d976:	9e02      	ldr	r6, [sp, #8]
 800d978:	f106 0c08 	add.w	ip, r6, #8
 800d97c:	f300 0007 	ssat	r0, #8, r0
 800d980:	7020      	strb	r0, [r4, #0]
 800d982:	f9b1 1000 	ldrsh.w	r1, [r1]
 800d986:	9803      	ldr	r0, [sp, #12]
 800d988:	2915      	cmp	r1, #21
 800d98a:	f100 0402 	add.w	r4, r0, #2
 800d98e:	f340 8145 	ble.w	800dc1c <st_sssa8_ch_convolve_dw+0x15b0>
 800d992:	f8dc 8000 	ldr.w	r8, [ip]
 800d996:	2001      	movs	r0, #1
 800d998:	f1a1 0c02 	sub.w	ip, r1, #2
 800d99c:	3901      	subs	r1, #1
 800d99e:	f8d9 e000 	ldr.w	lr, [r9]
 800d9a2:	fa00 fc0c 	lsl.w	ip, r0, ip
 800d9a6:	9e05      	ldr	r6, [sp, #20]
 800d9a8:	9804      	ldr	r0, [sp, #16]
 800d9aa:	fb56 ce0e 	smmla	lr, r6, lr, ip
 800d9ae:	fa4e f101 	asr.w	r1, lr, r1
 800d9b2:	300c      	adds	r0, #12
 800d9b4:	f10a 0e06 	add.w	lr, sl, #6
 800d9b8:	4441      	add	r1, r8
 800d9ba:	9e02      	ldr	r6, [sp, #8]
 800d9bc:	f106 0c0c 	add.w	ip, r6, #12
 800d9c0:	f301 0107 	ssat	r1, #8, r1
 800d9c4:	7021      	strb	r1, [r4, #0]
 800d9c6:	9903      	ldr	r1, [sp, #12]
 800d9c8:	1ccc      	adds	r4, r1, #3
 800d9ca:	f9be 1000 	ldrsh.w	r1, [lr]
 800d9ce:	2915      	cmp	r1, #21
 800d9d0:	f340 8142 	ble.w	800dc58 <st_sssa8_ch_convolve_dw+0x15ec>
 800d9d4:	f8dc e000 	ldr.w	lr, [ip]
 800d9d8:	2601      	movs	r6, #1
 800d9da:	f1a1 0c02 	sub.w	ip, r1, #2
 800d9de:	3901      	subs	r1, #1
 800d9e0:	6800      	ldr	r0, [r0, #0]
 800d9e2:	fa06 fc0c 	lsl.w	ip, r6, ip
 800d9e6:	9e06      	ldr	r6, [sp, #24]
 800d9e8:	fb56 c000 	smmla	r0, r6, r0, ip
 800d9ec:	fa40 f101 	asr.w	r1, r0, r1
 800d9f0:	4471      	add	r1, lr
 800d9f2:	f301 0107 	ssat	r1, #8, r1
 800d9f6:	7021      	strb	r1, [r4, #0]
 800d9f8:	9904      	ldr	r1, [sp, #16]
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	3348      	adds	r3, #72	; 0x48
 800d9fe:	3204      	adds	r2, #4
 800da00:	3110      	adds	r1, #16
 800da02:	f10a 0a08 	add.w	sl, sl, #8
 800da06:	9104      	str	r1, [sp, #16]
 800da08:	9903      	ldr	r1, [sp, #12]
 800da0a:	3104      	adds	r1, #4
 800da0c:	9103      	str	r1, [sp, #12]
 800da0e:	9902      	ldr	r1, [sp, #8]
 800da10:	3110      	adds	r1, #16
 800da12:	9102      	str	r1, [sp, #8]
 800da14:	9912      	ldr	r1, [sp, #72]	; 0x48
 800da16:	428f      	cmp	r7, r1
 800da18:	f000 8174 	beq.w	800dd04 <st_sssa8_ch_convolve_dw+0x1698>
 800da1c:	9907      	ldr	r1, [sp, #28]
 800da1e:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800da22:	f851 c002 	ldr.w	ip, [r1, r2]
 800da26:	9910      	ldr	r1, [sp, #64]	; 0x40
 800da28:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800da2c:	f852 e001 	ldr.w	lr, [r2, r1]
 800da30:	49b3      	ldr	r1, [pc, #716]	; (800dd00 <st_sssa8_ch_convolve_dw+0x1694>)
 800da32:	ea0e 0101 	and.w	r1, lr, r1
 800da36:	ea41 411c 	orr.w	r1, r1, ip, lsr #16
 800da3a:	fa1f fc8c 	uxth.w	ip, ip
 800da3e:	ea4c 4e0e 	orr.w	lr, ip, lr, lsl #16
 800da42:	fa25 fc8e 	sxtab16	ip, r5, lr
 800da46:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800da4a:	fa25 fe9e 	sxtab16	lr, r5, lr, ror #8
 800da4e:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800da52:	f857 4c0c 	ldr.w	r4, [r7, #-12]
 800da56:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800da5a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800da5e:	f857 4c08 	ldr.w	r4, [r7, #-8]
 800da62:	fa25 f881 	sxtab16	r8, r5, r1
 800da66:	fb20 4808 	smlad	r8, r0, r8, r4
 800da6a:	fa25 f191 	sxtab16	r1, r5, r1, ror #8
 800da6e:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800da72:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800da76:	fb20 4401 	smlad	r4, r0, r1, r4
 800da7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da7c:	48a0      	ldr	r0, [pc, #640]	; (800dd00 <st_sssa8_ch_convolve_dw+0x1694>)
 800da7e:	f852 9001 	ldr.w	r9, [r2, r1]
 800da82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800da84:	f852 b001 	ldr.w	fp, [r2, r1]
 800da88:	f853 1c38 	ldr.w	r1, [r3, #-56]
 800da8c:	ea0b 0000 	and.w	r0, fp, r0
 800da90:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800da94:	fa1f f989 	uxth.w	r9, r9
 800da98:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800da9c:	fa25 fb89 	sxtab16	fp, r5, r9
 800daa0:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800daa4:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800daa8:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800daac:	fb21 ee09 	smlad	lr, r1, r9, lr
 800dab0:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800dab4:	fa25 f980 	sxtab16	r9, r5, r0
 800dab8:	fb21 8809 	smlad	r8, r1, r9, r8
 800dabc:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800dac0:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800dac4:	fb21 4400 	smlad	r4, r1, r0, r4
 800dac8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800daca:	488d      	ldr	r0, [pc, #564]	; (800dd00 <st_sssa8_ch_convolve_dw+0x1694>)
 800dacc:	f852 9001 	ldr.w	r9, [r2, r1]
 800dad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dad2:	f852 b001 	ldr.w	fp, [r2, r1]
 800dad6:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800dada:	ea0b 0000 	and.w	r0, fp, r0
 800dade:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800dae2:	fa1f f989 	uxth.w	r9, r9
 800dae6:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800daea:	fa25 fb89 	sxtab16	fp, r5, r9
 800daee:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800daf2:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800daf6:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800dafa:	fb21 ee09 	smlad	lr, r1, r9, lr
 800dafe:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800db02:	fa25 f980 	sxtab16	r9, r5, r0
 800db06:	fb21 8809 	smlad	r8, r1, r9, r8
 800db0a:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800db0e:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800db12:	fb21 4400 	smlad	r4, r1, r0, r4
 800db16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db18:	4879      	ldr	r0, [pc, #484]	; (800dd00 <st_sssa8_ch_convolve_dw+0x1694>)
 800db1a:	f852 9001 	ldr.w	r9, [r2, r1]
 800db1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db20:	f852 b001 	ldr.w	fp, [r2, r1]
 800db24:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800db28:	ea0b 0000 	and.w	r0, fp, r0
 800db2c:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800db30:	fa1f f989 	uxth.w	r9, r9
 800db34:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800db38:	fa25 fb89 	sxtab16	fp, r5, r9
 800db3c:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800db40:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800db44:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800db48:	fb21 ee09 	smlad	lr, r1, r9, lr
 800db4c:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800db50:	fa25 f980 	sxtab16	r9, r5, r0
 800db54:	fb21 8809 	smlad	r8, r1, r9, r8
 800db58:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800db5c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800db60:	fb21 4100 	smlad	r1, r1, r0, r4
 800db64:	9808      	ldr	r0, [sp, #32]
 800db66:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800db68:	5810      	ldr	r0, [r2, r0]
 800db6a:	f833 9c08 	ldrh.w	r9, [r3, #-8]
 800db6e:	b244      	sxtb	r4, r0
 800db70:	f833 bc06 	ldrh.w	fp, [r3, #-6]
 800db74:	1ba4      	subs	r4, r4, r6
 800db76:	fb19 cc04 	smlabb	ip, r9, r4, ip
 800db7a:	f340 2407 	sbfx	r4, r0, #8, #8
 800db7e:	1ba4      	subs	r4, r4, r6
 800db80:	fb1b ee04 	smlabb	lr, fp, r4, lr
 800db84:	f340 4407 	sbfx	r4, r0, #16, #8
 800db88:	ebc6 6020 	rsb	r0, r6, r0, asr #24
 800db8c:	1ba4      	subs	r4, r4, r6
 800db8e:	f833 6c04 	ldrh.w	r6, [r3, #-4]
 800db92:	fb16 8404 	smlabb	r4, r6, r4, r8
 800db96:	9405      	str	r4, [sp, #20]
 800db98:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 800db9c:	fb14 1100 	smlabb	r1, r4, r0, r1
 800dba0:	9106      	str	r1, [sp, #24]
 800dba2:	f9ba 1000 	ldrsh.w	r1, [sl]
 800dba6:	2915      	cmp	r1, #21
 800dba8:	f73f aeb4 	bgt.w	800d914 <st_sssa8_ch_convolve_dw+0x12a8>
 800dbac:	2900      	cmp	r1, #0
 800dbae:	dd63      	ble.n	800dc78 <st_sssa8_ch_convolve_dw+0x160c>
 800dbb0:	9804      	ldr	r0, [sp, #16]
 800dbb2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800dbb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dbba:	f10a 0b02 	add.w	fp, sl, #2
 800dbbe:	f850 4b04 	ldr.w	r4, [r0], #4
 800dbc2:	f858 9b04 	ldr.w	r9, [r8], #4
 800dbc6:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800dbca:	fa4c f101 	asr.w	r1, ip, r1
 800dbce:	f301 0107 	ssat	r1, #8, r1
 800dbd2:	9c03      	ldr	r4, [sp, #12]
 800dbd4:	f804 1b01 	strb.w	r1, [r4], #1
 800dbd8:	f9bb 1000 	ldrsh.w	r1, [fp]
 800dbdc:	2915      	cmp	r1, #21
 800dbde:	f73f aeb7 	bgt.w	800d950 <st_sssa8_ch_convolve_dw+0x12e4>
 800dbe2:	2900      	cmp	r1, #0
 800dbe4:	dd7a      	ble.n	800dcdc <st_sssa8_ch_convolve_dw+0x1670>
 800dbe6:	f8d8 c000 	ldr.w	ip, [r8]
 800dbea:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800dbee:	6800      	ldr	r0, [r0, #0]
 800dbf0:	9e04      	ldr	r6, [sp, #16]
 800dbf2:	fb5e c000 	smmla	r0, lr, r0, ip
 800dbf6:	4108      	asrs	r0, r1
 800dbf8:	9902      	ldr	r1, [sp, #8]
 800dbfa:	f106 0908 	add.w	r9, r6, #8
 800dbfe:	f101 0c08 	add.w	ip, r1, #8
 800dc02:	f10a 0104 	add.w	r1, sl, #4
 800dc06:	f300 0007 	ssat	r0, #8, r0
 800dc0a:	7020      	strb	r0, [r4, #0]
 800dc0c:	f9b1 1000 	ldrsh.w	r1, [r1]
 800dc10:	9803      	ldr	r0, [sp, #12]
 800dc12:	2915      	cmp	r1, #21
 800dc14:	f100 0402 	add.w	r4, r0, #2
 800dc18:	f73f aebb 	bgt.w	800d992 <st_sssa8_ch_convolve_dw+0x1326>
 800dc1c:	2900      	cmp	r1, #0
 800dc1e:	dd4b      	ble.n	800dcb8 <st_sssa8_ch_convolve_dw+0x164c>
 800dc20:	9805      	ldr	r0, [sp, #20]
 800dc22:	9e02      	ldr	r6, [sp, #8]
 800dc24:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800dc28:	9804      	ldr	r0, [sp, #16]
 800dc2a:	f8d9 8000 	ldr.w	r8, [r9]
 800dc2e:	f8dc c000 	ldr.w	ip, [ip]
 800dc32:	300c      	adds	r0, #12
 800dc34:	fb5e cc08 	smmla	ip, lr, r8, ip
 800dc38:	f10a 0e06 	add.w	lr, sl, #6
 800dc3c:	fa4c f101 	asr.w	r1, ip, r1
 800dc40:	f106 0c0c 	add.w	ip, r6, #12
 800dc44:	f301 0107 	ssat	r1, #8, r1
 800dc48:	7021      	strb	r1, [r4, #0]
 800dc4a:	9903      	ldr	r1, [sp, #12]
 800dc4c:	1ccc      	adds	r4, r1, #3
 800dc4e:	f9be 1000 	ldrsh.w	r1, [lr]
 800dc52:	2915      	cmp	r1, #21
 800dc54:	f73f aebe 	bgt.w	800d9d4 <st_sssa8_ch_convolve_dw+0x1368>
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	dd1d      	ble.n	800dc98 <st_sssa8_ch_convolve_dw+0x162c>
 800dc5c:	9e06      	ldr	r6, [sp, #24]
 800dc5e:	6800      	ldr	r0, [r0, #0]
 800dc60:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800dc64:	f8dc c000 	ldr.w	ip, [ip]
 800dc68:	fb5e c000 	smmla	r0, lr, r0, ip
 800dc6c:	fa40 f101 	asr.w	r1, r0, r1
 800dc70:	f301 0107 	ssat	r1, #8, r1
 800dc74:	7021      	strb	r1, [r4, #0]
 800dc76:	e6bf      	b.n	800d9f8 <st_sssa8_ch_convolve_dw+0x138c>
 800dc78:	f1c1 0101 	rsb	r1, r1, #1
 800dc7c:	f10a 0b02 	add.w	fp, sl, #2
 800dc80:	fa0c f101 	lsl.w	r1, ip, r1
 800dc84:	f301 011f 	ssat	r1, #32, r1
 800dc88:	9804      	ldr	r0, [sp, #16]
 800dc8a:	f850 4b04 	ldr.w	r4, [r0], #4
 800dc8e:	fb51 f114 	smmulr	r1, r1, r4
 800dc92:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dc96:	e64e      	b.n	800d936 <st_sssa8_ch_convolve_dw+0x12ca>
 800dc98:	f1c1 0101 	rsb	r1, r1, #1
 800dc9c:	9e06      	ldr	r6, [sp, #24]
 800dc9e:	408e      	lsls	r6, r1
 800dca0:	f306 011f 	ssat	r1, #32, r6
 800dca4:	6800      	ldr	r0, [r0, #0]
 800dca6:	fb51 f110 	smmulr	r1, r1, r0
 800dcaa:	f8dc 0000 	ldr.w	r0, [ip]
 800dcae:	4401      	add	r1, r0
 800dcb0:	f301 0107 	ssat	r1, #8, r1
 800dcb4:	7021      	strb	r1, [r4, #0]
 800dcb6:	e69f      	b.n	800d9f8 <st_sssa8_ch_convolve_dw+0x138c>
 800dcb8:	f1c1 0101 	rsb	r1, r1, #1
 800dcbc:	9805      	ldr	r0, [sp, #20]
 800dcbe:	f10a 0e06 	add.w	lr, sl, #6
 800dcc2:	4088      	lsls	r0, r1
 800dcc4:	f300 011f 	ssat	r1, #32, r0
 800dcc8:	9804      	ldr	r0, [sp, #16]
 800dcca:	f8d9 8000 	ldr.w	r8, [r9]
 800dcce:	300c      	adds	r0, #12
 800dcd0:	fb51 f118 	smmulr	r1, r1, r8
 800dcd4:	f8dc c000 	ldr.w	ip, [ip]
 800dcd8:	4461      	add	r1, ip
 800dcda:	e66e      	b.n	800d9ba <st_sssa8_ch_convolve_dw+0x134e>
 800dcdc:	f1c1 0101 	rsb	r1, r1, #1
 800dce0:	fa0e fe01 	lsl.w	lr, lr, r1
 800dce4:	f10a 0104 	add.w	r1, sl, #4
 800dce8:	f30e 0c1f 	ssat	ip, #32, lr
 800dcec:	9e04      	ldr	r6, [sp, #16]
 800dcee:	6800      	ldr	r0, [r0, #0]
 800dcf0:	f106 0908 	add.w	r9, r6, #8
 800dcf4:	fb5c f010 	smmulr	r0, ip, r0
 800dcf8:	f8d8 c000 	ldr.w	ip, [r8]
 800dcfc:	4460      	add	r0, ip
 800dcfe:	e63a      	b.n	800d976 <st_sssa8_ch_convolve_dw+0x130a>
 800dd00:	ffff0000 	.word	0xffff0000
 800dd04:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800dd06:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dd08:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800dd12:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd14:	9383      	str	r3, [sp, #524]	; 0x20c
 800dd16:	9504      	str	r5, [sp, #16]
 800dd18:	e9dd 7228 	ldrd	r7, r2, [sp, #160]	; 0xa0
 800dd1c:	e9dd 3826 	ldrd	r3, r8, [sp, #152]	; 0x98
 800dd20:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800dd22:	2800      	cmp	r0, #0
 800dd24:	f000 8147 	beq.w	800dfb6 <st_sssa8_ch_convolve_dw+0x194a>
 800dd28:	9807      	ldr	r0, [sp, #28]
 800dd2a:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800dd2c:	f910 4008 	ldrsb.w	r4, [r0, r8]
 800dd30:	eb00 0608 	add.w	r6, r0, r8
 800dd34:	f8b3 c000 	ldrh.w	ip, [r3]
 800dd38:	6838      	ldr	r0, [r7, #0]
 800dd3a:	eba4 040b 	sub.w	r4, r4, fp
 800dd3e:	fb1c 0404 	smlabb	r4, ip, r4, r0
 800dd42:	4630      	mov	r0, r6
 800dd44:	f916 c005 	ldrsb.w	ip, [r6, r5]
 800dd48:	442e      	add	r6, r5
 800dd4a:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800dd4e:	ebac 0c0b 	sub.w	ip, ip, fp
 800dd52:	eba6 0e0b 	sub.w	lr, r6, fp
 800dd56:	885e      	ldrh	r6, [r3, #2]
 800dd58:	fb1c 4c06 	smlabb	ip, ip, r6, r4
 800dd5c:	f910 4015 	ldrsb.w	r4, [r0, r5, lsl #1]
 800dd60:	889e      	ldrh	r6, [r3, #4]
 800dd62:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800dd66:	eba4 040b 	sub.w	r4, r4, fp
 800dd6a:	fb16 c404 	smlabb	r4, r6, r4, ip
 800dd6e:	1946      	adds	r6, r0, r5
 800dd70:	f910 c015 	ldrsb.w	ip, [r0, r5, lsl #1]
 800dd74:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800dd78:	ebac 0c0b 	sub.w	ip, ip, fp
 800dd7c:	eba6 0a0b 	sub.w	sl, r6, fp
 800dd80:	88de      	ldrh	r6, [r3, #6]
 800dd82:	fb1e 4406 	smlabb	r4, lr, r6, r4
 800dd86:	eb00 0645 	add.w	r6, r0, r5, lsl #1
 800dd8a:	8918      	ldrh	r0, [r3, #8]
 800dd8c:	fb1c 4000 	smlabb	r0, ip, r0, r4
 800dd90:	1974      	adds	r4, r6, r5
 800dd92:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800dd96:	f914 4015 	ldrsb.w	r4, [r4, r5, lsl #1]
 800dd9a:	eba4 0e0b 	sub.w	lr, r4, fp
 800dd9e:	895c      	ldrh	r4, [r3, #10]
 800dda0:	fb1a 0404 	smlabb	r4, sl, r4, r0
 800dda4:	f916 0015 	ldrsb.w	r0, [r6, r5, lsl #1]
 800dda8:	f916 6025 	ldrsb.w	r6, [r6, r5, lsl #2]
 800ddac:	eba0 000b 	sub.w	r0, r0, fp
 800ddb0:	eba6 060b 	sub.w	r6, r6, fp
 800ddb4:	fb10 400c 	smlabb	r0, r0, ip, r4
 800ddb8:	89dc      	ldrh	r4, [r3, #14]
 800ddba:	f9b9 c000 	ldrsh.w	ip, [r9]
 800ddbe:	fb1e 0004 	smlabb	r0, lr, r4, r0
 800ddc2:	f108 0401 	add.w	r4, r8, #1
 800ddc6:	f1bc 0f15 	cmp.w	ip, #21
 800ddca:	fa1f fa84 	uxth.w	sl, r4
 800ddce:	8a1c      	ldrh	r4, [r3, #16]
 800ddd0:	fb16 0604 	smlabb	r6, r6, r4, r0
 800ddd4:	f300 811e 	bgt.w	800e014 <st_sssa8_ch_convolve_dw+0x19a8>
 800ddd8:	f1bc 0f00 	cmp.w	ip, #0
 800dddc:	f340 814e 	ble.w	800e07c <st_sssa8_ch_convolve_dw+0x1a10>
 800dde0:	6808      	ldr	r0, [r1, #0]
 800dde2:	0076      	lsls	r6, r6, #1
 800dde4:	6814      	ldr	r4, [r2, #0]
 800dde6:	fb56 4600 	smmla	r6, r6, r0, r4
 800ddea:	fa46 f00c 	asr.w	r0, r6, ip
 800ddee:	f300 0007 	ssat	r0, #8, r0
 800ddf2:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800ddf4:	f806 0b01 	strb.w	r0, [r6], #1
 800ddf8:	9824      	ldr	r0, [sp, #144]	; 0x90
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f000 80d7 	beq.w	800dfae <st_sssa8_ch_convolve_dw+0x1942>
 800de00:	f108 0002 	add.w	r0, r8, #2
 800de04:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800de06:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800de0a:	b280      	uxth	r0, r0
 800de0c:	9002      	str	r0, [sp, #8]
 800de0e:	9807      	ldr	r0, [sp, #28]
 800de10:	eb00 040a 	add.w	r4, r0, sl
 800de14:	f910 000a 	ldrsb.w	r0, [r0, sl]
 800de18:	eba0 0c0b 	sub.w	ip, r0, fp
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800de22:	eb04 0e05 	add.w	lr, r4, r5
 800de26:	f914 c005 	ldrsb.w	ip, [r4, r5]
 800de2a:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800de2e:	ebac 0c0b 	sub.w	ip, ip, fp
 800de32:	ebae 080b 	sub.w	r8, lr, fp
 800de36:	f8b3 e014 	ldrh.w	lr, [r3, #20]
 800de3a:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800de3e:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800de42:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800de46:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800de4a:	ebae 0e0b 	sub.w	lr, lr, fp
 800de4e:	fb1e 000c 	smlabb	r0, lr, ip, r0
 800de52:	eb04 0c05 	add.w	ip, r4, r5
 800de56:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800de5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800de5e:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800de62:	ebae 0e0b 	sub.w	lr, lr, fp
 800de66:	ebac 0a0b 	sub.w	sl, ip, fp
 800de6a:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800de6e:	fb18 0c0c 	smlabb	ip, r8, ip, r0
 800de72:	8b58      	ldrh	r0, [r3, #26]
 800de74:	fb1e c000 	smlabb	r0, lr, r0, ip
 800de78:	eb04 0c05 	add.w	ip, r4, r5
 800de7c:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
 800de80:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800de84:	fb1a 0e0e 	smlabb	lr, sl, lr, r0
 800de88:	f914 0015 	ldrsb.w	r0, [r4, r5, lsl #1]
 800de8c:	ebac 080b 	sub.w	r8, ip, fp
 800de90:	f914 c025 	ldrsb.w	ip, [r4, r5, lsl #2]
 800de94:	eba0 000b 	sub.w	r0, r0, fp
 800de98:	8bdc      	ldrh	r4, [r3, #30]
 800de9a:	ebac 0c0b 	sub.w	ip, ip, fp
 800de9e:	fb10 e004 	smlabb	r0, r0, r4, lr
 800dea2:	8c1c      	ldrh	r4, [r3, #32]
 800dea4:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
 800dea8:	fb18 0004 	smlabb	r0, r8, r4, r0
 800deac:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 800deae:	f1be 0f15 	cmp.w	lr, #21
 800deb2:	fb1c 0c04 	smlabb	ip, ip, r4, r0
 800deb6:	f300 80ce 	bgt.w	800e056 <st_sssa8_ch_convolve_dw+0x19ea>
 800deba:	f1be 0f00 	cmp.w	lr, #0
 800debe:	f340 80f6 	ble.w	800e0ae <st_sssa8_ch_convolve_dw+0x1a42>
 800dec2:	6848      	ldr	r0, [r1, #4]
 800dec4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800dec8:	6854      	ldr	r4, [r2, #4]
 800deca:	fb5c 4c00 	smmla	ip, ip, r0, r4
 800dece:	fa4c f00e 	asr.w	r0, ip, lr
 800ded2:	f300 0007 	ssat	r0, #8, r0
 800ded6:	f806 0b01 	strb.w	r0, [r6], #1
 800deda:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800dedc:	2802      	cmp	r0, #2
 800dede:	d066      	beq.n	800dfae <st_sssa8_ch_convolve_dw+0x1942>
 800dee0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800dee4:	9d07      	ldr	r5, [sp, #28]
 800dee6:	9f02      	ldr	r7, [sp, #8]
 800dee8:	f8b3 e024 	ldrh.w	lr, [r3, #36]	; 0x24
 800deec:	19e8      	adds	r0, r5, r7
 800deee:	57ef      	ldrsb	r7, [r5, r7]
 800def0:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800def2:	eba7 070b 	sub.w	r7, r7, fp
 800def6:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
 800defa:	fb1e c707 	smlabb	r7, lr, r7, ip
 800defe:	eb00 0e05 	add.w	lr, r0, r5
 800df02:	f910 c005 	ldrsb.w	ip, [r0, r5]
 800df06:	2c15      	cmp	r4, #21
 800df08:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800df0c:	ebac 0c0b 	sub.w	ip, ip, fp
 800df10:	ebae 080b 	sub.w	r8, lr, fp
 800df14:	f8b3 e026 	ldrh.w	lr, [r3, #38]	; 0x26
 800df18:	fb1e 7c0c 	smlabb	ip, lr, ip, r7
 800df1c:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800df20:	f8b3 e028 	ldrh.w	lr, [r3, #40]	; 0x28
 800df24:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800df28:	eba7 070b 	sub.w	r7, r7, fp
 800df2c:	fb1e c707 	smlabb	r7, lr, r7, ip
 800df30:	eb00 0c05 	add.w	ip, r0, r5
 800df34:	f8b3 e02c 	ldrh.w	lr, [r3, #44]	; 0x2c
 800df38:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800df3c:	ebac 090b 	sub.w	r9, ip, fp
 800df40:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800df44:	fb1c 7c08 	smlabb	ip, ip, r8, r7
 800df48:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800df4c:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800df50:	eba7 070b 	sub.w	r7, r7, fp
 800df54:	fb1e c707 	smlabb	r7, lr, r7, ip
 800df58:	eb00 0c05 	add.w	ip, r0, r5
 800df5c:	f910 e015 	ldrsb.w	lr, [r0, r5, lsl #1]
 800df60:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800df64:	ebae 0e0b 	sub.w	lr, lr, fp
 800df68:	ebac 080b 	sub.w	r8, ip, fp
 800df6c:	f8b3 c02e 	ldrh.w	ip, [r3, #46]	; 0x2e
 800df70:	fb1c 7c09 	smlabb	ip, ip, r9, r7
 800df74:	f910 7025 	ldrsb.w	r7, [r0, r5, lsl #2]
 800df78:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800df7a:	eba7 070b 	sub.w	r7, r7, fp
 800df7e:	fb10 c00e 	smlabb	r0, r0, lr, ip
 800df82:	f8b3 c032 	ldrh.w	ip, [r3, #50]	; 0x32
 800df86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800df88:	fb1c 0008 	smlabb	r0, ip, r8, r0
 800df8c:	fb13 0007 	smlabb	r0, r3, r7, r0
 800df90:	dd54      	ble.n	800e03c <st_sssa8_ch_convolve_dw+0x19d0>
 800df92:	688b      	ldr	r3, [r1, #8]
 800df94:	2501      	movs	r5, #1
 800df96:	6891      	ldr	r1, [r2, #8]
 800df98:	1ea2      	subs	r2, r4, #2
 800df9a:	3c01      	subs	r4, #1
 800df9c:	fa05 f202 	lsl.w	r2, r5, r2
 800dfa0:	fb50 2303 	smmla	r3, r0, r3, r2
 800dfa4:	4123      	asrs	r3, r4
 800dfa6:	440b      	add	r3, r1
 800dfa8:	f303 0307 	ssat	r3, #8, r3
 800dfac:	7033      	strb	r3, [r6, #0]
 800dfae:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800dfb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfb2:	4413      	add	r3, r2
 800dfb4:	9383      	str	r3, [sp, #524]	; 0x20c
 800dfb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dfb8:	9907      	ldr	r1, [sp, #28]
 800dfba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dfbc:	4411      	add	r1, r2
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	9107      	str	r1, [sp, #28]
 800dfc2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dfc4:	b21b      	sxth	r3, r3
 800dfc6:	4411      	add	r1, r2
 800dfc8:	9318      	str	r3, [sp, #96]	; 0x60
 800dfca:	9110      	str	r1, [sp, #64]	; 0x40
 800dfcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dfce:	4411      	add	r1, r2
 800dfd0:	910f      	str	r1, [sp, #60]	; 0x3c
 800dfd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dfd4:	4411      	add	r1, r2
 800dfd6:	910d      	str	r1, [sp, #52]	; 0x34
 800dfd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfda:	4411      	add	r1, r2
 800dfdc:	910c      	str	r1, [sp, #48]	; 0x30
 800dfde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfe0:	4411      	add	r1, r2
 800dfe2:	910b      	str	r1, [sp, #44]	; 0x2c
 800dfe4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dfe6:	4411      	add	r1, r2
 800dfe8:	910a      	str	r1, [sp, #40]	; 0x28
 800dfea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfec:	4411      	add	r1, r2
 800dfee:	9109      	str	r1, [sp, #36]	; 0x24
 800dff0:	9908      	ldr	r1, [sp, #32]
 800dff2:	4411      	add	r1, r2
 800dff4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dff6:	4293      	cmp	r3, r2
 800dff8:	9108      	str	r1, [sp, #32]
 800dffa:	f6ff ac75 	blt.w	800d8e8 <st_sssa8_ch_convolve_dw+0x127c>
 800dffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e000:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800e002:	3301      	adds	r3, #1
 800e004:	9d04      	ldr	r5, [sp, #16]
 800e006:	b21b      	sxth	r3, r3
 800e008:	428b      	cmp	r3, r1
 800e00a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e00c:	f6ff ac48 	blt.w	800d8a0 <st_sssa8_ch_convolve_dw+0x1234>
 800e010:	f7fe bdf9 	b.w	800cc06 <st_sssa8_ch_convolve_dw+0x59a>
 800e014:	f1ac 0e02 	sub.w	lr, ip, #2
 800e018:	2001      	movs	r0, #1
 800e01a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e01e:	680c      	ldr	r4, [r1, #0]
 800e020:	fa00 fe0e 	lsl.w	lr, r0, lr
 800e024:	6810      	ldr	r0, [r2, #0]
 800e026:	fb56 e404 	smmla	r4, r6, r4, lr
 800e02a:	fa44 f40c 	asr.w	r4, r4, ip
 800e02e:	4420      	add	r0, r4
 800e030:	f300 0007 	ssat	r0, #8, r0
 800e034:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800e036:	f806 0b01 	strb.w	r0, [r6], #1
 800e03a:	e6dd      	b.n	800ddf8 <st_sssa8_ch_convolve_dw+0x178c>
 800e03c:	2c00      	cmp	r4, #0
 800e03e:	dd46      	ble.n	800e0ce <st_sssa8_ch_convolve_dw+0x1a62>
 800e040:	688b      	ldr	r3, [r1, #8]
 800e042:	0040      	lsls	r0, r0, #1
 800e044:	6892      	ldr	r2, [r2, #8]
 800e046:	fb50 2003 	smmla	r0, r0, r3, r2
 800e04a:	fa40 f304 	asr.w	r3, r0, r4
 800e04e:	f303 0307 	ssat	r3, #8, r3
 800e052:	7033      	strb	r3, [r6, #0]
 800e054:	e7ab      	b.n	800dfae <st_sssa8_ch_convolve_dw+0x1942>
 800e056:	f1ae 0802 	sub.w	r8, lr, #2
 800e05a:	2001      	movs	r0, #1
 800e05c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e060:	684c      	ldr	r4, [r1, #4]
 800e062:	fa00 f808 	lsl.w	r8, r0, r8
 800e066:	6850      	ldr	r0, [r2, #4]
 800e068:	fb5c 8404 	smmla	r4, ip, r4, r8
 800e06c:	fa44 f40e 	asr.w	r4, r4, lr
 800e070:	4420      	add	r0, r4
 800e072:	f300 0007 	ssat	r0, #8, r0
 800e076:	f806 0b01 	strb.w	r0, [r6], #1
 800e07a:	e72e      	b.n	800deda <st_sssa8_ch_convolve_dw+0x186e>
 800e07c:	f1cc 0c01 	rsb	ip, ip, #1
 800e080:	fa06 f40c 	lsl.w	r4, r6, ip
 800e084:	f304 041f 	ssat	r4, #32, r4
 800e088:	6808      	ldr	r0, [r1, #0]
 800e08a:	fb54 f410 	smmulr	r4, r4, r0
 800e08e:	6810      	ldr	r0, [r2, #0]
 800e090:	4420      	add	r0, r4
 800e092:	f300 0007 	ssat	r0, #8, r0
 800e096:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800e098:	f806 0b01 	strb.w	r0, [r6], #1
 800e09c:	e6ac      	b.n	800ddf8 <st_sssa8_ch_convolve_dw+0x178c>
 800e09e:	4698      	mov	r8, r3
 800e0a0:	9f7e      	ldr	r7, [sp, #504]	; 0x1f8
 800e0a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0a6:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800e0aa:	9986      	ldr	r1, [sp, #536]	; 0x218
 800e0ac:	e638      	b.n	800dd20 <st_sssa8_ch_convolve_dw+0x16b4>
 800e0ae:	f1ce 0e01 	rsb	lr, lr, #1
 800e0b2:	fa0c f40e 	lsl.w	r4, ip, lr
 800e0b6:	f304 041f 	ssat	r4, #32, r4
 800e0ba:	6848      	ldr	r0, [r1, #4]
 800e0bc:	fb54 f410 	smmulr	r4, r4, r0
 800e0c0:	6850      	ldr	r0, [r2, #4]
 800e0c2:	4420      	add	r0, r4
 800e0c4:	f300 0007 	ssat	r0, #8, r0
 800e0c8:	f806 0b01 	strb.w	r0, [r6], #1
 800e0cc:	e705      	b.n	800deda <st_sssa8_ch_convolve_dw+0x186e>
 800e0ce:	f1c4 0401 	rsb	r4, r4, #1
 800e0d2:	fa00 f304 	lsl.w	r3, r0, r4
 800e0d6:	f303 031f 	ssat	r3, #32, r3
 800e0da:	6889      	ldr	r1, [r1, #8]
 800e0dc:	fb53 f311 	smmulr	r3, r3, r1
 800e0e0:	6892      	ldr	r2, [r2, #8]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f303 0307 	ssat	r3, #8, r3
 800e0e8:	7033      	strb	r3, [r6, #0]
 800e0ea:	e760      	b.n	800dfae <st_sssa8_ch_convolve_dw+0x1942>
 800e0ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e0ee:	2400      	movs	r4, #0
 800e0f0:	f8dd 81f8 	ldr.w	r8, [sp, #504]	; 0x1f8
 800e0f4:	9304      	str	r3, [sp, #16]
 800e0f6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800e0fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e0fc:	9f86      	ldr	r7, [sp, #536]	; 0x218
 800e0fe:	f7ff b940 	b.w	800d382 <st_sssa8_ch_convolve_dw+0xd16>
 800e102:	bf00      	nop

0800e104 <st_sssa8_ch_convolve_rank1upd>:
 800e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	b085      	sub	sp, #20
 800e10a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800e10e:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800e112:	fb13 f304 	smulbb	r3, r3, r4
 800e116:	fb13 f500 	smulbb	r5, r3, r0
 800e11a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e11e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800e122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e124:	2a00      	cmp	r2, #0
 800e126:	d074      	beq.n	800e212 <st_sssa8_ch_convolve_rank1upd+0x10e>
 800e128:	b2ad      	uxth	r5, r5
 800e12a:	f1aa 0a04 	sub.w	sl, sl, #4
 800e12e:	460c      	mov	r4, r1
 800e130:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800e134:	ea4f 0995 	mov.w	r9, r5, lsr #2
 800e138:	f005 0503 	and.w	r5, r5, #3
 800e13c:	449a      	add	sl, r3
 800e13e:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 800e142:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 800e146:	1e69      	subs	r1, r5, #1
 800e148:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800e14c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800e150:	b289      	uxth	r1, r1
 800e152:	9100      	str	r1, [sp, #0]
 800e154:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800e158:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800e15c:	b292      	uxth	r2, r2
 800e15e:	9202      	str	r2, [sp, #8]
 800e160:	025a      	lsls	r2, r3, #9
 800e162:	3301      	adds	r3, #1
 800e164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e168:	025b      	lsls	r3, r3, #9
 800e16a:	9203      	str	r2, [sp, #12]
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800e172:	d953      	bls.n	800e21c <st_sssa8_ch_convolve_rank1upd+0x118>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800e17a:	2600      	movs	r6, #0
 800e17c:	eb04 0c03 	add.w	ip, r4, r3
 800e180:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800e184:	2200      	movs	r2, #0
 800e186:	f851 3b04 	ldr.w	r3, [r1], #4
 800e18a:	fa2f fe83 	sxtb16	lr, r3
 800e18e:	4281      	cmp	r1, r0
 800e190:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e194:	fa92 f21e 	qadd16	r2, r2, lr
 800e198:	fa2f f383 	sxtb16	r3, r3
 800e19c:	fa92 f213 	qadd16	r2, r2, r3
 800e1a0:	d1f1      	bne.n	800e186 <st_sssa8_ch_convolve_rank1upd+0x82>
 800e1a2:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800e1a6:	b213      	sxth	r3, r2
 800e1a8:	4560      	cmp	r0, ip
 800e1aa:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800e1ae:	4416      	add	r6, r2
 800e1b0:	d1e6      	bne.n	800e180 <st_sssa8_ch_convolve_rank1upd+0x7c>
 800e1b2:	9b01      	ldr	r3, [sp, #4]
 800e1b4:	18e1      	adds	r1, r4, r3
 800e1b6:	9c02      	ldr	r4, [sp, #8]
 800e1b8:	b374      	cbz	r4, 800e218 <st_sssa8_ch_convolve_rank1upd+0x114>
 800e1ba:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800e1c4:	fa2f f083 	sxtb16	r0, r3
 800e1c8:	428c      	cmp	r4, r1
 800e1ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e1ce:	fa92 f210 	qadd16	r2, r2, r0
 800e1d2:	fa2f f383 	sxtb16	r3, r3
 800e1d6:	fa92 f213 	qadd16	r2, r2, r3
 800e1da:	d1f1      	bne.n	800e1c0 <st_sssa8_ch_convolve_rank1upd+0xbc>
 800e1dc:	b213      	sxth	r3, r2
 800e1de:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800e1e2:	441e      	add	r6, r3
 800e1e4:	b16d      	cbz	r5, 800e202 <st_sssa8_ch_convolve_rank1upd+0xfe>
 800e1e6:	f994 3000 	ldrsb.w	r3, [r4]
 800e1ea:	441e      	add	r6, r3
 800e1ec:	9b00      	ldr	r3, [sp, #0]
 800e1ee:	b13b      	cbz	r3, 800e200 <st_sssa8_ch_convolve_rank1upd+0xfc>
 800e1f0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e1f4:	2d02      	cmp	r5, #2
 800e1f6:	441e      	add	r6, r3
 800e1f8:	d002      	beq.n	800e200 <st_sssa8_ch_convolve_rank1upd+0xfc>
 800e1fa:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800e1fe:	441e      	add	r6, r3
 800e200:	442c      	add	r4, r5
 800e202:	f858 3b04 	ldr.w	r3, [r8], #4
 800e206:	fb0b 3616 	mls	r6, fp, r6, r3
 800e20a:	45b8      	cmp	r8, r7
 800e20c:	f84a 6f04 	str.w	r6, [sl, #4]!
 800e210:	d1ad      	bne.n	800e16e <st_sssa8_ch_convolve_rank1upd+0x6a>
 800e212:	b005      	add	sp, #20
 800e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e218:	460c      	mov	r4, r1
 800e21a:	e7e3      	b.n	800e1e4 <st_sssa8_ch_convolve_rank1upd+0xe0>
 800e21c:	4621      	mov	r1, r4
 800e21e:	2600      	movs	r6, #0
 800e220:	464c      	mov	r4, r9
 800e222:	e7c9      	b.n	800e1b8 <st_sssa8_ch_convolve_rank1upd+0xb4>

0800e224 <st_sssa8_ch_convolve_WeightsPrefetch>:
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	fb02 fc01 	mul.w	ip, r2, r1
 800e22e:	f06f 0e09 	mvn.w	lr, #9
 800e232:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e234:	fb03 fc0c 	mul.w	ip, r3, ip
 800e238:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800e23c:	686e      	ldr	r6, [r5, #4]
 800e23e:	fb04 fc0c 	mul.w	ip, r4, ip
 800e242:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800e246:	fb0e 6e01 	mla	lr, lr, r1, r6
 800e24a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 800e24e:	ebbe 0f4c 	cmp.w	lr, ip, lsl #1
 800e252:	db15      	blt.n	800e280 <st_sssa8_ch_convolve_WeightsPrefetch+0x5c>
 800e254:	fb02 fc03 	mul.w	ip, r2, r3
 800e258:	2f01      	cmp	r7, #1
 800e25a:	fb0c fe04 	mul.w	lr, ip, r4
 800e25e:	d113      	bne.n	800e288 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800e260:	f1b8 0f01 	cmp.w	r8, #1
 800e264:	4626      	mov	r6, r4
 800e266:	d10f      	bne.n	800e288 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800e268:	f8cd e000 	str.w	lr, [sp]
 800e26c:	4663      	mov	r3, ip
 800e26e:	682c      	ldr	r4, [r5, #0]
 800e270:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800e274:	4632      	mov	r2, r6
 800e276:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e27a:	9401      	str	r4, [sp, #4]
 800e27c:	f002 fb18 	bl	80108b0 <st_sssa8_ch_fullW_prefetch>
 800e280:	2000      	movs	r0, #0
 800e282:	b002      	add	sp, #8
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e288:	fb03 f604 	mul.w	r6, r3, r4
 800e28c:	4694      	mov	ip, r2
 800e28e:	e7eb      	b.n	800e268 <st_sssa8_ch_convolve_WeightsPrefetch+0x44>

0800e290 <st_sssa8_ch_convolve>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	b09f      	sub	sp, #124	; 0x7c
 800e296:	4699      	mov	r9, r3
 800e298:	4683      	mov	fp, r0
 800e29a:	f8bd 60a4 	ldrh.w	r6, [sp, #164]	; 0xa4
 800e29e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e2a0:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 800e2a4:	921d      	str	r2, [sp, #116]	; 0x74
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	9117      	str	r1, [sp, #92]	; 0x5c
 800e2aa:	ebc6 7186 	rsb	r1, r6, r6, lsl #30
 800e2ae:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 800e2b2:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	9212      	str	r2, [sp, #72]	; 0x48
 800e2ba:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800e2be:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 800e2c2:	9316      	str	r3, [sp, #88]	; 0x58
 800e2c4:	9214      	str	r2, [sp, #80]	; 0x50
 800e2c6:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 800e2ca:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800e2ce:	9213      	str	r2, [sp, #76]	; 0x4c
 800e2d0:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 800e2d4:	f8bd a0ac 	ldrh.w	sl, [sp, #172]	; 0xac
 800e2d8:	9215      	str	r2, [sp, #84]	; 0x54
 800e2da:	f99d 20d4 	ldrsb.w	r2, [sp, #212]	; 0xd4
 800e2de:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800e2e0:	921a      	str	r2, [sp, #104]	; 0x68
 800e2e2:	f8bd 20e0 	ldrh.w	r2, [sp, #224]	; 0xe0
 800e2e6:	f99d 50d8 	ldrsb.w	r5, [sp, #216]	; 0xd8
 800e2ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800e2ec:	f8bd 20e4 	ldrh.w	r2, [sp, #228]	; 0xe4
 800e2f0:	921c      	str	r2, [sp, #112]	; 0x70
 800e2f2:	00b2      	lsls	r2, r6, #2
 800e2f4:	9218      	str	r2, [sp, #96]	; 0x60
 800e2f6:	2e00      	cmp	r6, #0
 800e2f8:	f000 80a7 	beq.w	800e44a <st_sssa8_ch_convolve+0x1ba>
 800e2fc:	46a4      	mov	ip, r4
 800e2fe:	0072      	lsls	r2, r6, #1
 800e300:	3104      	adds	r1, #4
 800e302:	2701      	movs	r7, #1
 800e304:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800e308:	9219      	str	r2, [sp, #100]	; 0x64
 800e30a:	f93c 2b02 	ldrsh.w	r2, [ip], #2
 800e30e:	1e50      	subs	r0, r2, #1
 800e310:	fa07 fe02 	lsl.w	lr, r7, r2
 800e314:	fa05 f202 	lsl.w	r2, r5, r2
 800e318:	b280      	uxth	r0, r0
 800e31a:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800e31e:	2814      	cmp	r0, #20
 800e320:	d84e      	bhi.n	800e3c0 <st_sssa8_ch_convolve+0x130>
 800e322:	4564      	cmp	r4, ip
 800e324:	f841 2c04 	str.w	r2, [r1, #-4]
 800e328:	f101 0104 	add.w	r1, r1, #4
 800e32c:	d1ed      	bne.n	800e30a <st_sssa8_ch_convolve+0x7a>
 800e32e:	4641      	mov	r1, r8
 800e330:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e332:	f06f 0009 	mvn.w	r0, #9
 800e336:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e338:	1aa4      	subs	r4, r4, r2
 800e33a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e33c:	fb00 5006 	mla	r0, r0, r6, r5
 800e340:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800e342:	1a89      	subs	r1, r1, r2
 800e344:	fb06 f209 	mul.w	r2, r6, r9
 800e348:	fb03 f202 	mul.w	r2, r3, r2
 800e34c:	fb0a f202 	mul.w	r2, sl, r2
 800e350:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800e354:	fb15 f209 	smulbb	r2, r5, r9
 800e358:	bfac      	ite	ge
 800e35a:	4640      	movge	r0, r8
 800e35c:	2000      	movlt	r0, #0
 800e35e:	2b01      	cmp	r3, #1
 800e360:	b292      	uxth	r2, r2
 800e362:	d108      	bne.n	800e376 <st_sssa8_ch_convolve+0xe6>
 800e364:	f1ba 0f01 	cmp.w	sl, #1
 800e368:	d105      	bne.n	800e376 <st_sssa8_ch_convolve+0xe6>
 800e36a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e36c:	2f01      	cmp	r7, #1
 800e36e:	d102      	bne.n	800e376 <st_sssa8_ch_convolve+0xe6>
 800e370:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e372:	2f01      	cmp	r7, #1
 800e374:	d04f      	beq.n	800e416 <st_sssa8_ch_convolve+0x186>
 800e376:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e378:	2d01      	cmp	r5, #1
 800e37a:	d128      	bne.n	800e3ce <st_sssa8_ch_convolve+0x13e>
 800e37c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e37e:	2d01      	cmp	r5, #1
 800e380:	d125      	bne.n	800e3ce <st_sssa8_ch_convolve+0x13e>
 800e382:	910c      	str	r1, [sp, #48]	; 0x30
 800e384:	9401      	str	r4, [sp, #4]
 800e386:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e388:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e38a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e38e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e390:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e392:	9307      	str	r3, [sp, #28]
 800e394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e396:	9400      	str	r4, [sp, #0]
 800e398:	9306      	str	r3, [sp, #24]
 800e39a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e39c:	9305      	str	r3, [sp, #20]
 800e39e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3a0:	e9cd 800d 	strd	r8, r0, [sp, #52]	; 0x34
 800e3a4:	e9cd a10a 	strd	sl, r1, [sp, #40]	; 0x28
 800e3a8:	9304      	str	r3, [sp, #16]
 800e3aa:	4658      	mov	r0, fp
 800e3ac:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e3ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e3b0:	e9cd 6902 	strd	r6, r9, [sp, #8]
 800e3b4:	f003 f8c8 	bl	8011548 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	b01f      	add	sp, #124	; 0x7c
 800e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c0:	4564      	cmp	r4, ip
 800e3c2:	f841 5c04 	str.w	r5, [r1, #-4]
 800e3c6:	f101 0104 	add.w	r1, r1, #4
 800e3ca:	d19e      	bne.n	800e30a <st_sssa8_ch_convolve+0x7a>
 800e3cc:	e7af      	b.n	800e32e <st_sssa8_ch_convolve+0x9e>
 800e3ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e3d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e3d4:	910e      	str	r1, [sp, #56]	; 0x38
 800e3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3da:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e3dc:	9308      	str	r3, [sp, #32]
 800e3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3e0:	9010      	str	r0, [sp, #64]	; 0x40
 800e3e2:	4658      	mov	r0, fp
 800e3e4:	9307      	str	r3, [sp, #28]
 800e3e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e3e8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e3ea:	9306      	str	r3, [sp, #24]
 800e3ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3ee:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3f6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800e3fa:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e3fc:	e9cd a10c 	strd	sl, r1, [sp, #48]	; 0x30
 800e400:	e9cd 9303 	strd	r9, r3, [sp, #12]
 800e404:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e406:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e408:	9400      	str	r4, [sp, #0]
 800e40a:	f003 fe8d 	bl	8012128 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>
 800e40e:	2000      	movs	r0, #0
 800e410:	b01f      	add	sp, #124	; 0x7c
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e418:	462a      	mov	r2, r5
 800e41a:	9401      	str	r4, [sp, #4]
 800e41c:	fb03 f202 	mul.w	r2, r3, r2
 800e420:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800e422:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e424:	9106      	str	r1, [sp, #24]
 800e426:	9305      	str	r3, [sp, #20]
 800e428:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e42a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e42c:	f8cd 9010 	str.w	r9, [sp, #16]
 800e430:	9400      	str	r4, [sp, #0]
 800e432:	e9cd 8007 	strd	r8, r0, [sp, #28]
 800e436:	e9cd 2602 	strd	r2, r6, [sp, #8]
 800e43a:	4658      	mov	r0, fp
 800e43c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e43e:	f002 fa77 	bl	8010930 <st_sssa8_ch_nn_mat_mult_nt_t>
 800e442:	2000      	movs	r0, #0
 800e444:	b01f      	add	sp, #124	; 0x7c
 800e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44a:	9619      	str	r6, [sp, #100]	; 0x64
 800e44c:	e770      	b.n	800e330 <st_sssa8_ch_convolve+0xa0>
 800e44e:	bf00      	nop

0800e450 <st_sssa8_ch_convolve_startNN>:
 800e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	ed2d 8b08 	vpush	{d8-d11}
 800e458:	b0cf      	sub	sp, #316	; 0x13c
 800e45a:	469a      	mov	sl, r3
 800e45c:	468b      	mov	fp, r1
 800e45e:	920a      	str	r2, [sp, #40]	; 0x28
 800e460:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 800e464:	f8bd 418c 	ldrh.w	r4, [sp, #396]	; 0x18c
 800e468:	4611      	mov	r1, r2
 800e46a:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800e46c:	ee09 2a10 	vmov	s18, r2
 800e470:	9009      	str	r0, [sp, #36]	; 0x24
 800e472:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e476:	f8bd 0188 	ldrh.w	r0, [sp, #392]	; 0x188
 800e47a:	f99d 81ac 	ldrsb.w	r8, [sp, #428]	; 0x1ac
 800e47e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e482:	460a      	mov	r2, r1
 800e484:	fb10 f304 	smulbb	r3, r0, r4
 800e488:	9019      	str	r0, [sp, #100]	; 0x64
 800e48a:	f8bd 01b8 	ldrh.w	r0, [sp, #440]	; 0x1b8
 800e48e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e492:	fb13 f30a 	smulbb	r3, r3, sl
 800e496:	f99d 61b0 	ldrsb.w	r6, [sp, #432]	; 0x1b0
 800e49a:	900f      	str	r0, [sp, #60]	; 0x3c
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	f8bd 01bc 	ldrh.w	r0, [sp, #444]	; 0x1bc
 800e4a2:	9420      	str	r4, [sp, #128]	; 0x80
 800e4a4:	9315      	str	r3, [sp, #84]	; 0x54
 800e4a6:	ebc1 7341 	rsb	r3, r1, r1, lsl #29
 800e4aa:	f8bd 1190 	ldrh.w	r1, [sp, #400]	; 0x190
 800e4ae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e4b2:	9514      	str	r5, [sp, #80]	; 0x50
 800e4b4:	9116      	str	r1, [sp, #88]	; 0x58
 800e4b6:	f8bd 1194 	ldrh.w	r1, [sp, #404]	; 0x194
 800e4ba:	ee0a 3a10 	vmov	s20, r3
 800e4be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e4c2:	901f      	str	r0, [sp, #124]	; 0x7c
 800e4c4:	9121      	str	r1, [sp, #132]	; 0x84
 800e4c6:	f8bd 1198 	ldrh.w	r1, [sp, #408]	; 0x198
 800e4ca:	931d      	str	r3, [sp, #116]	; 0x74
 800e4cc:	910e      	str	r1, [sp, #56]	; 0x38
 800e4ce:	f8bd 119c 	ldrh.w	r1, [sp, #412]	; 0x19c
 800e4d2:	911b      	str	r1, [sp, #108]	; 0x6c
 800e4d4:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	f000 866d 	beq.w	800f1b6 <st_sssa8_ch_convolve_startNN+0xd66>
 800e4dc:	1d18      	adds	r0, r3, #4
 800e4de:	2501      	movs	r5, #1
 800e4e0:	0053      	lsls	r3, r2, #1
 800e4e2:	eb01 0742 	add.w	r7, r1, r2, lsl #1
 800e4e6:	9318      	str	r3, [sp, #96]	; 0x60
 800e4e8:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800e4ec:	1e5a      	subs	r2, r3, #1
 800e4ee:	fa05 f403 	lsl.w	r4, r5, r3
 800e4f2:	fa06 f303 	lsl.w	r3, r6, r3
 800e4f6:	b292      	uxth	r2, r2
 800e4f8:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800e4fc:	2a14      	cmp	r2, #20
 800e4fe:	d85b      	bhi.n	800e5b8 <st_sssa8_ch_convolve_startNN+0x168>
 800e500:	428f      	cmp	r7, r1
 800e502:	f840 3c04 	str.w	r3, [r0, #-4]
 800e506:	f100 0004 	add.w	r0, r0, #4
 800e50a:	d1ed      	bne.n	800e4e8 <st_sssa8_ch_convolve_startNN+0x98>
 800e50c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e50e:	4639      	mov	r1, r7
 800e510:	9317      	str	r3, [sp, #92]	; 0x5c
 800e512:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e514:	aa2e      	add	r2, sp, #184	; 0xb8
 800e516:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800e518:	a83a      	add	r0, sp, #232	; 0xe8
 800e51a:	1acb      	subs	r3, r1, r3
 800e51c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e51e:	a944      	add	r1, sp, #272	; 0x110
 800e520:	9438      	str	r4, [sp, #224]	; 0xe0
 800e522:	931c      	str	r3, [sp, #112]	; 0x70
 800e524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e526:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800e52a:	932f      	str	r3, [sp, #188]	; 0xbc
 800e52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e52e:	9537      	str	r5, [sp, #220]	; 0xdc
 800e530:	9334      	str	r3, [sp, #208]	; 0xd0
 800e532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e534:	9333      	str	r3, [sp, #204]	; 0xcc
 800e536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e538:	9346      	str	r3, [sp, #280]	; 0x118
 800e53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e53c:	9347      	str	r3, [sp, #284]	; 0x11c
 800e53e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e540:	9348      	str	r3, [sp, #288]	; 0x120
 800e542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e544:	9349      	str	r3, [sp, #292]	; 0x124
 800e546:	ab36      	add	r3, sp, #216	; 0xd8
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	ab32      	add	r3, sp, #200	; 0xc8
 800e54c:	f001 f936 	bl	800f7bc <ai_padding_opt_init>
 800e550:	fb05 f304 	mul.w	r3, r5, r4
 800e554:	ee19 2a10 	vmov	r2, s18
 800e558:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e55a:	fb0a f303 	mul.w	r3, sl, r3
 800e55e:	ee19 0a10 	vmov	r0, s18
 800e562:	fb02 f303 	mul.w	r3, r2, r3
 800e566:	005b      	lsls	r3, r3, #1
 800e568:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e56c:	bfd4      	ite	le
 800e56e:	ebc9 0203 	rsble	r2, r9, r3
 800e572:	f5c9 52a0 	rsbgt	r2, r9, #5120	; 0x1400
 800e576:	fb0a f904 	mul.w	r9, sl, r4
 800e57a:	fb09 f305 	mul.w	r3, r9, r5
 800e57e:	2a00      	cmp	r2, #0
 800e580:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e584:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e586:	bfb8      	it	lt
 800e588:	3201      	addlt	r2, #1
 800e58a:	ee09 3a90 	vmov	s19, r3
 800e58e:	fb00 f301 	mul.w	r3, r0, r1
 800e592:	1054      	asrs	r4, r2, #1
 800e594:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800e598:	dc15      	bgt.n	800e5c6 <st_sssa8_ch_convolve_startNN+0x176>
 800e59a:	f01a 0f03 	tst.w	sl, #3
 800e59e:	f040 8165 	bne.w	800e86c <st_sssa8_ch_convolve_startNN+0x41c>
 800e5a2:	ee19 3a10 	vmov	r3, s18
 800e5a6:	460a      	mov	r2, r1
 800e5a8:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e5aa:	ee19 1a90 	vmov	r1, s19
 800e5ae:	f001 ff8f 	bl	80104d0 <st_int8_to16_dual_interleaved>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	932a      	str	r3, [sp, #168]	; 0xa8
 800e5b6:	e008      	b.n	800e5ca <st_sssa8_ch_convolve_startNN+0x17a>
 800e5b8:	428f      	cmp	r7, r1
 800e5ba:	f840 6c04 	str.w	r6, [r0, #-4]
 800e5be:	f100 0004 	add.w	r0, r0, #4
 800e5c2:	d191      	bne.n	800e4e8 <st_sssa8_ch_convolve_startNN+0x98>
 800e5c4:	e7a2      	b.n	800e50c <st_sssa8_ch_convolve_startNN+0xbc>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	932a      	str	r3, [sp, #168]	; 0xa8
 800e5ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e5cc:	ee19 1a10 	vmov	r1, s18
 800e5d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5d2:	fb02 f303 	mul.w	r3, r2, r3
 800e5d6:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e5d8:	fb01 2303 	mla	r3, r1, r3, r2
 800e5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	f080 8131 	bcs.w	800e846 <st_sssa8_ch_convolve_startNN+0x3f6>
 800e5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5e6:	fb03 f30b 	mul.w	r3, r3, fp
 800e5ea:	fb0a 2303 	mla	r3, sl, r3, r2
 800e5ee:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	bf2c      	ite	cs
 800e5f4:	2300      	movcs	r3, #0
 800e5f6:	2301      	movcc	r3, #1
 800e5f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e5fa:	ee19 1a10 	vmov	r1, s18
 800e5fe:	fb94 f2f2 	sdiv	r2, r4, r2
 800e602:	b292      	uxth	r2, r2
 800e604:	428a      	cmp	r2, r1
 800e606:	bf28      	it	cs
 800e608:	460a      	movcs	r2, r1
 800e60a:	2a01      	cmp	r2, #1
 800e60c:	921a      	str	r2, [sp, #104]	; 0x68
 800e60e:	f240 81fa 	bls.w	800ea06 <st_sssa8_ch_convolve_startNN+0x5b6>
 800e612:	4610      	mov	r0, r2
 800e614:	ee19 2a10 	vmov	r2, s18
 800e618:	fbb1 f1f0 	udiv	r1, r1, r0
 800e61c:	fb00 2211 	mls	r2, r0, r1, r2
 800e620:	b289      	uxth	r1, r1
 800e622:	b292      	uxth	r2, r2
 800e624:	9127      	str	r1, [sp, #156]	; 0x9c
 800e626:	2a00      	cmp	r2, #0
 800e628:	f000 810f 	beq.w	800e84a <st_sssa8_ch_convolve_startNN+0x3fa>
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f040 83b6 	bne.w	800ed9e <st_sssa8_ch_convolve_startNN+0x94e>
 800e632:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e634:	fa0f f688 	sxth.w	r6, r8
 800e638:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e63a:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800e63e:	fb03 f30a 	mul.w	r3, r3, sl
 800e642:	ee08 6a90 	vmov	s17, r6
 800e646:	fb02 f303 	mul.w	r3, r2, r3
 800e64a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e64c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e650:	9312      	str	r3, [sp, #72]	; 0x48
 800e652:	f00a 0303 	and.w	r3, sl, #3
 800e656:	930c      	str	r3, [sp, #48]	; 0x30
 800e658:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800e65c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e65e:	ee19 3a10 	vmov	r3, s18
 800e662:	e9cd 8322 	strd	r8, r3, [sp, #136]	; 0x88
 800e666:	465b      	mov	r3, fp
 800e668:	46d0      	mov	r8, sl
 800e66a:	46cb      	mov	fp, r9
 800e66c:	4699      	mov	r9, r3
 800e66e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e670:	b953      	cbnz	r3, 800e688 <st_sssa8_ch_convolve_startNN+0x238>
 800e672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e674:	2b00      	cmp	r3, #0
 800e676:	f040 81be 	bne.w	800e9f6 <st_sssa8_ch_convolve_startNN+0x5a6>
 800e67a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e67c:	ee19 1a90 	vmov	r1, s19
 800e680:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e682:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e684:	f001 ff24 	bl	80104d0 <st_int8_to16_dual_interleaved>
 800e688:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f000 80af 	beq.w	800e7ee <st_sssa8_ch_convolve_startNN+0x39e>
 800e690:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e692:	2400      	movs	r4, #0
 800e694:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e696:	425b      	negs	r3, r3
 800e698:	4626      	mov	r6, r4
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	9318      	str	r3, [sp, #96]	; 0x60
 800e69e:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800e6a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e6a2:	a83a      	add	r0, sp, #232	; 0xe8
 800e6a4:	f001 f8e4 	bl	800f870 <ai_padding_opt_phase1>
 800e6a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 81a0 	beq.w	800e9f0 <st_sssa8_ch_convolve_startNN+0x5a0>
 800e6b0:	b2a3      	uxth	r3, r4
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	931e      	str	r3, [sp, #120]	; 0x78
 800e6b6:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800e6ba:	1a9b      	subs	r3, r3, r2
 800e6bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e6be:	fb06 3302 	mla	r3, r6, r2, r3
 800e6c2:	460a      	mov	r2, r1
 800e6c4:	9308      	str	r3, [sp, #32]
 800e6c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6c8:	425b      	negs	r3, r3
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	9307      	str	r3, [sp, #28]
 800e6ce:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800e6d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e6d4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 80ec 	beq.w	800e8b4 <st_sssa8_ch_convolve_startNN+0x464>
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	933a      	str	r3, [sp, #232]	; 0xe8
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e6e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6e8:	9808      	ldr	r0, [sp, #32]
 800e6ea:	4283      	cmp	r3, r0
 800e6ec:	f280 80f0 	bge.w	800e8d0 <st_sssa8_ch_convolve_startNN+0x480>
 800e6f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6f2:	ee08 ba10 	vmov	s16, fp
 800e6f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e6f8:	46c3      	mov	fp, r8
 800e6fa:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800e6fe:	ee18 7a90 	vmov	r7, s17
 800e702:	fb02 3200 	mla	r2, r2, r0, r3
 800e706:	b28b      	uxth	r3, r1
 800e708:	930d      	str	r3, [sp, #52]	; 0x34
 800e70a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e70c:	1ad4      	subs	r4, r2, r3
 800e70e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e712:	930b      	str	r3, [sp, #44]	; 0x2c
 800e714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e716:	461a      	mov	r2, r3
 800e718:	9306      	str	r3, [sp, #24]
 800e71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e71c:	429c      	cmp	r4, r3
 800e71e:	dd27      	ble.n	800e770 <st_sssa8_ch_convolve_startNN+0x320>
 800e720:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e722:	4291      	cmp	r1, r2
 800e724:	fb09 f202 	mul.w	r2, r9, r2
 800e728:	bfcc      	ite	gt
 800e72a:	f04f 0800 	movgt.w	r8, #0
 800e72e:	f04f 0801 	movle.w	r8, #1
 800e732:	9210      	str	r2, [sp, #64]	; 0x40
 800e734:	9a06      	ldr	r2, [sp, #24]
 800e736:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800e73a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	f000 80a0 	beq.w	800e882 <st_sssa8_ch_convolve_startNN+0x432>
 800e742:	461e      	mov	r6, r3
 800e744:	469e      	mov	lr, r3
 800e746:	0ff3      	lsrs	r3, r6, #31
 800e748:	4629      	mov	r1, r5
 800e74a:	465a      	mov	r2, fp
 800e74c:	4638      	mov	r0, r7
 800e74e:	45f1      	cmp	r9, lr
 800e750:	bfd8      	it	le
 800e752:	f043 0301 	orrle.w	r3, r3, #1
 800e756:	b91b      	cbnz	r3, 800e760 <st_sssa8_ch_convolve_startNN+0x310>
 800e758:	f1b8 0f00 	cmp.w	r8, #0
 800e75c:	f000 813f 	beq.w	800e9de <st_sssa8_ch_convolve_startNN+0x58e>
 800e760:	f005 fb4e 	bl	8013e00 <st_dsp_arm_fill_q15>
 800e764:	3601      	adds	r6, #1
 800e766:	4455      	add	r5, sl
 800e768:	b236      	sxth	r6, r6
 800e76a:	42b4      	cmp	r4, r6
 800e76c:	46b6      	mov	lr, r6
 800e76e:	dcea      	bgt.n	800e746 <st_sssa8_ch_convolve_startNN+0x2f6>
 800e770:	9a06      	ldr	r2, [sp, #24]
 800e772:	9908      	ldr	r1, [sp, #32]
 800e774:	3201      	adds	r2, #1
 800e776:	b213      	sxth	r3, r2
 800e778:	428b      	cmp	r3, r1
 800e77a:	461a      	mov	r2, r3
 800e77c:	9306      	str	r3, [sp, #24]
 800e77e:	dbcc      	blt.n	800e71a <st_sssa8_ch_convolve_startNN+0x2ca>
 800e780:	46d8      	mov	r8, fp
 800e782:	ee18 ba10 	vmov	fp, s16
 800e786:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e788:	42ab      	cmp	r3, r5
 800e78a:	f000 80a7 	beq.w	800e8dc <st_sssa8_ch_convolve_startNN+0x48c>
 800e78e:	9b07      	ldr	r3, [sp, #28]
 800e790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e792:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e794:	4413      	add	r3, r2
 800e796:	3101      	adds	r1, #1
 800e798:	b29b      	uxth	r3, r3
 800e79a:	b209      	sxth	r1, r1
 800e79c:	9307      	str	r3, [sp, #28]
 800e79e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7a0:	460a      	mov	r2, r1
 800e7a2:	428b      	cmp	r3, r1
 800e7a4:	dc96      	bgt.n	800e6d4 <st_sssa8_ch_convolve_startNN+0x284>
 800e7a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e7a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e7aa:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e7ac:	4413      	add	r3, r2
 800e7ae:	3401      	adds	r4, #1
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	b224      	sxth	r4, r4
 800e7b4:	9318      	str	r3, [sp, #96]	; 0x60
 800e7b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7b8:	4626      	mov	r6, r4
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	f73f af71 	bgt.w	800e6a2 <st_sssa8_ch_convolve_startNN+0x252>
 800e7c0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e7c2:	42a9      	cmp	r1, r5
 800e7c4:	d013      	beq.n	800e7ee <st_sssa8_ch_convolve_startNN+0x39e>
 800e7c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7c8:	ee1a 2a10 	vmov	r2, s20
 800e7cc:	ee19 0a90 	vmov	r0, s19
 800e7d0:	9305      	str	r3, [sp, #20]
 800e7d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e7dc:	9302      	str	r3, [sp, #8]
 800e7de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	ee19 3a10 	vmov	r3, s18
 800e7ea:	f004 ff21 	bl	8013630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800e7ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e7f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e7f2:	1a9b      	subs	r3, r3, r2
 800e7f4:	b299      	uxth	r1, r3
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	428a      	cmp	r2, r1
 800e7fa:	9123      	str	r1, [sp, #140]	; 0x8c
 800e7fc:	bf28      	it	cs
 800e7fe:	460b      	movcs	r3, r1
 800e800:	b29b      	uxth	r3, r3
 800e802:	b1cb      	cbz	r3, 800e838 <st_sssa8_ch_convolve_startNN+0x3e8>
 800e804:	9960      	ldr	r1, [sp, #384]	; 0x180
 800e806:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e808:	fb00 1102 	mla	r1, r0, r2, r1
 800e80c:	9160      	str	r1, [sp, #384]	; 0x180
 800e80e:	ee1a 1a10 	vmov	r1, s20
 800e812:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e816:	ee0a 1a10 	vmov	s20, r1
 800e81a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e81c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e820:	911c      	str	r1, [sp, #112]	; 0x70
 800e822:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800e824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e828:	9169      	str	r1, [sp, #420]	; 0x1a4
 800e82a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e82c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e830:	911d      	str	r1, [sp, #116]	; 0x74
 800e832:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 800e834:	4411      	add	r1, r2
 800e836:	916d      	str	r1, [sp, #436]	; 0x1b4
 800e838:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e83a:	1e4a      	subs	r2, r1, #1
 800e83c:	b292      	uxth	r2, r2
 800e83e:	b179      	cbz	r1, 800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800e840:	9227      	str	r2, [sp, #156]	; 0x9c
 800e842:	931a      	str	r3, [sp, #104]	; 0x68
 800e844:	e713      	b.n	800e66e <st_sssa8_ch_convolve_startNN+0x21e>
 800e846:	2300      	movs	r3, #0
 800e848:	e6d6      	b.n	800e5f8 <st_sssa8_ch_convolve_startNN+0x1a8>
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f040 82ab 	bne.w	800eda6 <st_sssa8_ch_convolve_startNN+0x956>
 800e850:	1e4b      	subs	r3, r1, #1
 800e852:	b29b      	uxth	r3, r3
 800e854:	9327      	str	r3, [sp, #156]	; 0x9c
 800e856:	ee19 3a10 	vmov	r3, s18
 800e85a:	4283      	cmp	r3, r0
 800e85c:	f4bf aee9 	bcs.w	800e632 <st_sssa8_ch_convolve_startNN+0x1e2>
 800e860:	2000      	movs	r0, #0
 800e862:	b04f      	add	sp, #316	; 0x13c
 800e864:	ecbd 8b08 	vpop	{d8-d11}
 800e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86c:	460a      	mov	r2, r1
 800e86e:	ee19 3a10 	vmov	r3, s18
 800e872:	ee19 1a90 	vmov	r1, s19
 800e876:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e878:	f001 fcca 	bl	8010210 <st_int8_to16_dual>
 800e87c:	2301      	movs	r3, #1
 800e87e:	932a      	str	r3, [sp, #168]	; 0xa8
 800e880:	e6a3      	b.n	800e5ca <st_sssa8_ch_convolve_startNN+0x17a>
 800e882:	469c      	mov	ip, r3
 800e884:	461e      	mov	r6, r3
 800e886:	45e1      	cmp	r9, ip
 800e888:	465a      	mov	r2, fp
 800e88a:	4629      	mov	r1, r5
 800e88c:	4638      	mov	r0, r7
 800e88e:	bfcc      	ite	gt
 800e890:	2300      	movgt	r3, #0
 800e892:	2301      	movle	r3, #1
 800e894:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800e898:	d103      	bne.n	800e8a2 <st_sssa8_ch_convolve_startNN+0x452>
 800e89a:	f1b8 0f00 	cmp.w	r8, #0
 800e89e:	f000 8095 	beq.w	800e9cc <st_sssa8_ch_convolve_startNN+0x57c>
 800e8a2:	f005 faad 	bl	8013e00 <st_dsp_arm_fill_q15>
 800e8a6:	3601      	adds	r6, #1
 800e8a8:	4455      	add	r5, sl
 800e8aa:	b236      	sxth	r6, r6
 800e8ac:	42a6      	cmp	r6, r4
 800e8ae:	46b4      	mov	ip, r6
 800e8b0:	dbe9      	blt.n	800e886 <st_sssa8_ch_convolve_startNN+0x436>
 800e8b2:	e75d      	b.n	800e770 <st_sssa8_ch_convolve_startNN+0x320>
 800e8b4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d135      	bne.n	800e926 <st_sssa8_ch_convolve_startNN+0x4d6>
 800e8ba:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e8bc:	9808      	ldr	r0, [sp, #32]
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	933c      	str	r3, [sp, #240]	; 0xf0
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e8c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8ca:	4283      	cmp	r3, r0
 800e8cc:	f6ff af10 	blt.w	800e6f0 <st_sssa8_ch_convolve_startNN+0x2a0>
 800e8d0:	b28b      	uxth	r3, r1
 800e8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e8d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8d6:	42ab      	cmp	r3, r5
 800e8d8:	f47f af59 	bne.w	800e78e <st_sssa8_ch_convolve_startNN+0x33e>
 800e8dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8de:	ee1a 2a10 	vmov	r2, s20
 800e8e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e8e4:	ee19 0a90 	vmov	r0, s19
 800e8e8:	9305      	str	r3, [sp, #20]
 800e8ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8ec:	9304      	str	r3, [sp, #16]
 800e8ee:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8f4:	9302      	str	r3, [sp, #8]
 800e8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	ee19 3a10 	vmov	r3, s18
 800e902:	f004 fb71 	bl	8012fe8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800e906:	9b07      	ldr	r3, [sp, #28]
 800e908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e90a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e90c:	4413      	add	r3, r2
 800e90e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e910:	3101      	adds	r1, #1
 800e912:	9017      	str	r0, [sp, #92]	; 0x5c
 800e914:	b29b      	uxth	r3, r3
 800e916:	b209      	sxth	r1, r1
 800e918:	9307      	str	r3, [sp, #28]
 800e91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e91c:	460a      	mov	r2, r1
 800e91e:	428b      	cmp	r3, r1
 800e920:	f73f aed8 	bgt.w	800e6d4 <st_sssa8_ch_convolve_startNN+0x284>
 800e924:	e73f      	b.n	800e7a6 <st_sssa8_ch_convolve_startNN+0x356>
 800e926:	3b01      	subs	r3, #1
 800e928:	933b      	str	r3, [sp, #236]	; 0xec
 800e92a:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800e92e:	2b01      	cmp	r3, #1
 800e930:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e934:	f43f aed7 	beq.w	800e6e6 <st_sssa8_ch_convolve_startNN+0x296>
 800e938:	b28b      	uxth	r3, r1
 800e93a:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800e93e:	930d      	str	r3, [sp, #52]	; 0x34
 800e940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e942:	bb0b      	cbnz	r3, 800e988 <st_sssa8_ch_convolve_startNN+0x538>
 800e944:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e946:	9908      	ldr	r1, [sp, #32]
 800e948:	428b      	cmp	r3, r1
 800e94a:	f6bf af1c 	bge.w	800e786 <st_sssa8_ch_convolve_startNN+0x336>
 800e94e:	465a      	mov	r2, fp
 800e950:	464f      	mov	r7, r9
 800e952:	46ab      	mov	fp, r5
 800e954:	461e      	mov	r6, r3
 800e956:	4625      	mov	r5, r4
 800e958:	4618      	mov	r0, r3
 800e95a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e95c:	4689      	mov	r9, r1
 800e95e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e962:	3601      	adds	r6, #1
 800e964:	fb00 5007 	mla	r0, r0, r7, r5
 800e968:	4659      	mov	r1, fp
 800e96a:	9206      	str	r2, [sp, #24]
 800e96c:	b236      	sxth	r6, r6
 800e96e:	fb08 a000 	mla	r0, r8, r0, sl
 800e972:	f001 fbfd 	bl	8010170 <st_int8_to16_no_shift_interleaved>
 800e976:	44a3      	add	fp, r4
 800e978:	454e      	cmp	r6, r9
 800e97a:	4630      	mov	r0, r6
 800e97c:	9a06      	ldr	r2, [sp, #24]
 800e97e:	dbf0      	blt.n	800e962 <st_sssa8_ch_convolve_startNN+0x512>
 800e980:	465d      	mov	r5, fp
 800e982:	46b9      	mov	r9, r7
 800e984:	4693      	mov	fp, r2
 800e986:	e6fe      	b.n	800e786 <st_sssa8_ch_convolve_startNN+0x336>
 800e988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e98a:	9908      	ldr	r1, [sp, #32]
 800e98c:	428b      	cmp	r3, r1
 800e98e:	f6bf aefa 	bge.w	800e786 <st_sssa8_ch_convolve_startNN+0x336>
 800e992:	465a      	mov	r2, fp
 800e994:	464f      	mov	r7, r9
 800e996:	46ab      	mov	fp, r5
 800e998:	461e      	mov	r6, r3
 800e99a:	4625      	mov	r5, r4
 800e99c:	4618      	mov	r0, r3
 800e99e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e9a0:	4689      	mov	r9, r1
 800e9a2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e9a6:	3601      	adds	r6, #1
 800e9a8:	fb00 5007 	mla	r0, r0, r7, r5
 800e9ac:	4659      	mov	r1, fp
 800e9ae:	9206      	str	r2, [sp, #24]
 800e9b0:	b236      	sxth	r6, r6
 800e9b2:	fb08 a000 	mla	r0, r8, r0, sl
 800e9b6:	f001 fb45 	bl	8010044 <st_int8_to16_no_shift>
 800e9ba:	44a3      	add	fp, r4
 800e9bc:	454e      	cmp	r6, r9
 800e9be:	4630      	mov	r0, r6
 800e9c0:	9a06      	ldr	r2, [sp, #24]
 800e9c2:	dbf0      	blt.n	800e9a6 <st_sssa8_ch_convolve_startNN+0x556>
 800e9c4:	465d      	mov	r5, fp
 800e9c6:	46b9      	mov	r9, r7
 800e9c8:	4693      	mov	fp, r2
 800e9ca:	e6dc      	b.n	800e786 <st_sssa8_ch_convolve_startNN+0x336>
 800e9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9ce:	eb03 000c 	add.w	r0, r3, ip
 800e9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d4:	fb0b 3000 	mla	r0, fp, r0, r3
 800e9d8:	f001 fbca 	bl	8010170 <st_int8_to16_no_shift_interleaved>
 800e9dc:	e763      	b.n	800e8a6 <st_sssa8_ch_convolve_startNN+0x456>
 800e9de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9e0:	eb03 000e 	add.w	r0, r3, lr
 800e9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9e6:	fb0b 3000 	mla	r0, fp, r0, r3
 800e9ea:	f001 fb2b 	bl	8010044 <st_int8_to16_no_shift>
 800e9ee:	e6b9      	b.n	800e764 <st_sssa8_ch_convolve_startNN+0x314>
 800e9f0:	b2a3      	uxth	r3, r4
 800e9f2:	931e      	str	r3, [sp, #120]	; 0x78
 800e9f4:	e6d7      	b.n	800e7a6 <st_sssa8_ch_convolve_startNN+0x356>
 800e9f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e9f8:	ee19 1a90 	vmov	r1, s19
 800e9fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e9fe:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ea00:	f001 fc06 	bl	8010210 <st_int8_to16_dual>
 800ea04:	e640      	b.n	800e688 <st_sssa8_ch_convolve_startNN+0x238>
 800ea06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f43f af29 	beq.w	800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800ea0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea10:	fa0f f888 	sxth.w	r8, r8
 800ea14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ea16:	2400      	movs	r4, #0
 800ea18:	fb03 f30a 	mul.w	r3, r3, sl
 800ea1c:	ee08 9a90 	vmov	s17, r9
 800ea20:	4647      	mov	r7, r8
 800ea22:	4625      	mov	r5, r4
 800ea24:	fb02 f303 	mul.w	r3, r2, r3
 800ea28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea2a:	46d8      	mov	r8, fp
 800ea2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea30:	4693      	mov	fp, r2
 800ea32:	9311      	str	r3, [sp, #68]	; 0x44
 800ea34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea36:	425b      	negs	r3, r3
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea3c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800ea40:	9312      	str	r3, [sp, #72]	; 0x48
 800ea42:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800ea46:	4699      	mov	r9, r3
 800ea48:	a83a      	add	r0, sp, #232	; 0xe8
 800ea4a:	f000 ff11 	bl	800f870 <ai_padding_opt_phase1>
 800ea4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f000 819a 	beq.w	800ed8a <st_sssa8_ch_convolve_startNN+0x93a>
 800ea56:	b2a3      	uxth	r3, r4
 800ea58:	2000      	movs	r0, #0
 800ea5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea5c:	4601      	mov	r1, r0
 800ea5e:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800ea62:	1a9a      	subs	r2, r3, r2
 800ea64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea66:	fb05 2303 	mla	r3, r5, r3, r2
 800ea6a:	9308      	str	r3, [sp, #32]
 800ea6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea6e:	425a      	negs	r2, r3
 800ea70:	b293      	uxth	r3, r2
 800ea72:	930c      	str	r3, [sp, #48]	; 0x30
 800ea74:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800ea78:	9310      	str	r3, [sp, #64]	; 0x40
 800ea7a:	465b      	mov	r3, fp
 800ea7c:	46cb      	mov	fp, r9
 800ea7e:	4699      	mov	r9, r3
 800ea80:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	f000 80f6 	beq.w	800ec74 <st_sssa8_ch_convolve_startNN+0x824>
 800ea88:	3a01      	subs	r2, #1
 800ea8a:	923a      	str	r2, [sp, #232]	; 0xe8
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ea92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea94:	9a08      	ldr	r2, [sp, #32]
 800ea96:	4293      	cmp	r3, r2
 800ea98:	f280 80fa 	bge.w	800ec90 <st_sssa8_ch_convolve_startNN+0x840>
 800ea9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eaa0:	fb01 3102 	mla	r1, r1, r2, r3
 800eaa4:	b283      	uxth	r3, r0
 800eaa6:	930d      	str	r3, [sp, #52]	; 0x34
 800eaa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eaaa:	1acd      	subs	r5, r1, r3
 800eaac:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800eab0:	930b      	str	r3, [sp, #44]	; 0x2c
 800eab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eab4:	461a      	mov	r2, r3
 800eab6:	9306      	str	r3, [sp, #24]
 800eab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaba:	42ab      	cmp	r3, r5
 800eabc:	da20      	bge.n	800eb00 <st_sssa8_ch_convolve_startNN+0x6b0>
 800eabe:	9906      	ldr	r1, [sp, #24]
 800eac0:	461c      	mov	r4, r3
 800eac2:	469c      	mov	ip, r3
 800eac4:	0fce      	lsrs	r6, r1, #31
 800eac6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eac8:	4291      	cmp	r1, r2
 800eaca:	bfd8      	it	le
 800eacc:	f046 0601 	orrle.w	r6, r6, #1
 800ead0:	fb02 f208 	mul.w	r2, r2, r8
 800ead4:	9207      	str	r2, [sp, #28]
 800ead6:	45e0      	cmp	r8, ip
 800ead8:	4652      	mov	r2, sl
 800eada:	4649      	mov	r1, r9
 800eadc:	4638      	mov	r0, r7
 800eade:	bfcc      	ite	gt
 800eae0:	2300      	movgt	r3, #0
 800eae2:	2301      	movle	r3, #1
 800eae4:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800eae8:	d102      	bne.n	800eaf0 <st_sssa8_ch_convolve_startNN+0x6a0>
 800eaea:	2e00      	cmp	r6, #0
 800eaec:	f000 80b9 	beq.w	800ec62 <st_sssa8_ch_convolve_startNN+0x812>
 800eaf0:	f005 f986 	bl	8013e00 <st_dsp_arm_fill_q15>
 800eaf4:	3401      	adds	r4, #1
 800eaf6:	44d9      	add	r9, fp
 800eaf8:	b224      	sxth	r4, r4
 800eafa:	42ac      	cmp	r4, r5
 800eafc:	46a4      	mov	ip, r4
 800eafe:	dbea      	blt.n	800ead6 <st_sssa8_ch_convolve_startNN+0x686>
 800eb00:	9b06      	ldr	r3, [sp, #24]
 800eb02:	9908      	ldr	r1, [sp, #32]
 800eb04:	3301      	adds	r3, #1
 800eb06:	b21b      	sxth	r3, r3
 800eb08:	428b      	cmp	r3, r1
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	9306      	str	r3, [sp, #24]
 800eb0e:	dbd3      	blt.n	800eab8 <st_sssa8_ch_convolve_startNN+0x668>
 800eb10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb12:	454b      	cmp	r3, r9
 800eb14:	f000 80c2 	beq.w	800ec9c <st_sssa8_ch_convolve_startNN+0x84c>
 800eb18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb1e:	441a      	add	r2, r3
 800eb20:	3001      	adds	r0, #1
 800eb22:	b293      	uxth	r3, r2
 800eb24:	b200      	sxth	r0, r0
 800eb26:	930c      	str	r3, [sp, #48]	; 0x30
 800eb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4283      	cmp	r3, r0
 800eb2e:	dca7      	bgt.n	800ea80 <st_sssa8_ch_convolve_startNN+0x630>
 800eb30:	464b      	mov	r3, r9
 800eb32:	46d9      	mov	r9, fp
 800eb34:	469b      	mov	fp, r3
 800eb36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb3a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800eb3c:	441a      	add	r2, r3
 800eb3e:	3401      	adds	r4, #1
 800eb40:	b293      	uxth	r3, r2
 800eb42:	b224      	sxth	r4, r4
 800eb44:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb48:	4625      	mov	r5, r4
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	f73f af7c 	bgt.w	800ea48 <st_sssa8_ch_convolve_startNN+0x5f8>
 800eb50:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eb52:	4559      	cmp	r1, fp
 800eb54:	f43f ae84 	beq.w	800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800eb58:	ee19 3a10 	vmov	r3, s18
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f43f ae7f 	beq.w	800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800eb62:	ee1a 3a10 	vmov	r3, s20
 800eb66:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800eb68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eb6a:	f1a3 0b04 	sub.w	fp, r3, #4
 800eb6e:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800eb70:	f002 0a03 	and.w	sl, r2, #3
 800eb74:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 800eb76:	1c5f      	adds	r7, r3, #1
 800eb78:	f8df c648 	ldr.w	ip, [pc, #1608]	; 800f1c4 <st_sssa8_ch_convolve_startNN+0xd74>
 800eb7c:	f8dd e180 	ldr.w	lr, [sp, #384]	; 0x180
 800eb80:	f8cd b018 	str.w	fp, [sp, #24]
 800eb84:	e9dd 4317 	ldrd	r4, r3, [sp, #92]	; 0x5c
 800eb88:	4433      	add	r3, r6
 800eb8a:	930a      	str	r3, [sp, #40]	; 0x28
 800eb8c:	0893      	lsrs	r3, r2, #2
 800eb8e:	f10a 32ff 	add.w	r2, sl, #4294967295
 800eb92:	9309      	str	r3, [sp, #36]	; 0x24
 800eb94:	3b01      	subs	r3, #1
 800eb96:	b292      	uxth	r2, r2
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	9207      	str	r2, [sp, #28]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	009a      	lsls	r2, r3, #2
 800eba0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800eba4:	920b      	str	r2, [sp, #44]	; 0x2c
 800eba6:	9308      	str	r3, [sp, #32]
 800eba8:	9a06      	ldr	r2, [sp, #24]
 800ebaa:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ebae:	9206      	str	r2, [sp, #24]
 800ebb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	f000 80f0 	beq.w	800ed98 <st_sssa8_ch_convolve_startNN+0x948>
 800ebb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebba:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ebbc:	eb0e 0902 	add.w	r9, lr, r2
 800ebc0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ebc4:	fa2f fb82 	sxtb16	fp, r2
 800ebc8:	fa1f f88b 	uxth.w	r8, fp
 800ebcc:	6801      	ldr	r1, [r0, #0]
 800ebce:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ebd2:	fa2f f282 	sxtb16	r2, r2
 800ebd6:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 800ebda:	fb28 3101 	smlad	r1, r8, r1, r3
 800ebde:	ea02 030c 	and.w	r3, r2, ip
 800ebe2:	3008      	adds	r0, #8
 800ebe4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ebe8:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800ebec:	fb23 1302 	smlad	r3, r3, r2, r1
 800ebf0:	45ce      	cmp	lr, r9
 800ebf2:	d1e5      	bne.n	800ebc0 <st_sssa8_ch_convolve_startNN+0x770>
 800ebf4:	9a08      	ldr	r2, [sp, #32]
 800ebf6:	f1ba 0f00 	cmp.w	sl, #0
 800ebfa:	f000 80b4 	beq.w	800ed66 <st_sssa8_ch_convolve_startNN+0x916>
 800ebfe:	f999 1000 	ldrsb.w	r1, [r9]
 800ec02:	8810      	ldrh	r0, [r2, #0]
 800ec04:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ec08:	9907      	ldr	r1, [sp, #28]
 800ec0a:	b161      	cbz	r1, 800ec26 <st_sssa8_ch_convolve_startNN+0x7d6>
 800ec0c:	f999 1001 	ldrsb.w	r1, [r9, #1]
 800ec10:	f1ba 0f02 	cmp.w	sl, #2
 800ec14:	8850      	ldrh	r0, [r2, #2]
 800ec16:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ec1a:	d004      	beq.n	800ec26 <st_sssa8_ch_convolve_startNN+0x7d6>
 800ec1c:	8891      	ldrh	r1, [r2, #4]
 800ec1e:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800ec22:	fb11 3302 	smlabb	r3, r1, r2, r3
 800ec26:	eb09 0e0a 	add.w	lr, r9, sl
 800ec2a:	f936 0b02 	ldrsh.w	r0, [r6], #2
 800ec2e:	2815      	cmp	r0, #21
 800ec30:	f340 808c 	ble.w	800ed4c <st_sssa8_ch_convolve_startNN+0x8fc>
 800ec34:	1e81      	subs	r1, r0, #2
 800ec36:	2201      	movs	r2, #1
 800ec38:	3801      	subs	r0, #1
 800ec3a:	fa02 f101 	lsl.w	r1, r2, r1
 800ec3e:	682a      	ldr	r2, [r5, #0]
 800ec40:	fb53 1302 	smmla	r3, r3, r2, r1
 800ec44:	fa43 f200 	asr.w	r2, r3, r0
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f303 0307 	ssat	r3, #8, r3
 800ec50:	f807 3c01 	strb.w	r3, [r7, #-1]
 800ec54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec56:	3701      	adds	r7, #1
 800ec58:	3504      	adds	r5, #4
 800ec5a:	3404      	adds	r4, #4
 800ec5c:	42b3      	cmp	r3, r6
 800ec5e:	d1a3      	bne.n	800eba8 <st_sssa8_ch_convolve_startNN+0x758>
 800ec60:	e5fe      	b.n	800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800ec62:	9b07      	ldr	r3, [sp, #28]
 800ec64:	eb03 000c 	add.w	r0, r3, ip
 800ec68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec6a:	fb0a 3000 	mla	r0, sl, r0, r3
 800ec6e:	f001 f9e9 	bl	8010044 <st_int8_to16_no_shift>
 800ec72:	e73f      	b.n	800eaf4 <st_sssa8_ch_convolve_startNN+0x6a4>
 800ec74:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	d132      	bne.n	800ece0 <st_sssa8_ch_convolve_startNN+0x890>
 800ec7a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800ec7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec7e:	3a01      	subs	r2, #1
 800ec80:	923c      	str	r2, [sp, #240]	; 0xf0
 800ec82:	2201      	movs	r2, #1
 800ec84:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ec88:	9a08      	ldr	r2, [sp, #32]
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	f6ff af06 	blt.w	800ea9c <st_sssa8_ch_convolve_startNN+0x64c>
 800ec90:	b283      	uxth	r3, r0
 800ec92:	930d      	str	r3, [sp, #52]	; 0x34
 800ec94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec96:	454b      	cmp	r3, r9
 800ec98:	f47f af3e 	bne.w	800eb18 <st_sssa8_ch_convolve_startNN+0x6c8>
 800ec9c:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800ec9e:	ee1a 2a10 	vmov	r2, s20
 800eca2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca8:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ecaa:	9303      	str	r3, [sp, #12]
 800ecac:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800ecae:	9302      	str	r3, [sp, #8]
 800ecb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	ee19 3a10 	vmov	r3, s18
 800ecbc:	f000 fdf2 	bl	800f8a4 <st_sssa8_ch_nn_mat_mult_kernel>
 800ecc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ecc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecc6:	440b      	add	r3, r1
 800ecc8:	906d      	str	r0, [sp, #436]	; 0x1b4
 800ecca:	3201      	adds	r2, #1
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	b210      	sxth	r0, r2
 800ecd0:	930c      	str	r3, [sp, #48]	; 0x30
 800ecd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	4283      	cmp	r3, r0
 800ecd8:	dd5a      	ble.n	800ed90 <st_sssa8_ch_convolve_startNN+0x940>
 800ecda:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800ecde:	e6cf      	b.n	800ea80 <st_sssa8_ch_convolve_startNN+0x630>
 800ece0:	3a01      	subs	r2, #1
 800ece2:	923b      	str	r2, [sp, #236]	; 0xec
 800ece4:	f8bd 210c 	ldrh.w	r2, [sp, #268]	; 0x10c
 800ece8:	2a01      	cmp	r2, #1
 800ecea:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800ecee:	f43f aed0 	beq.w	800ea92 <st_sssa8_ch_convolve_startNN+0x642>
 800ecf2:	b283      	uxth	r3, r0
 800ecf4:	9908      	ldr	r1, [sp, #32]
 800ecf6:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800ecfa:	930d      	str	r3, [sp, #52]	; 0x34
 800ecfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecfe:	428b      	cmp	r3, r1
 800ed00:	f6bf af06 	bge.w	800eb10 <st_sssa8_ch_convolve_startNN+0x6c0>
 800ed04:	ee08 7a10 	vmov	s16, r7
 800ed08:	f8cd b01c 	str.w	fp, [sp, #28]
 800ed0c:	464f      	mov	r7, r9
 800ed0e:	46c3      	mov	fp, r8
 800ed10:	461d      	mov	r5, r3
 800ed12:	4618      	mov	r0, r3
 800ed14:	ee18 2a90 	vmov	r2, s17
 800ed18:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ed1a:	4688      	mov	r8, r1
 800ed1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ed20:	3501      	adds	r5, #1
 800ed22:	fb00 400b 	mla	r0, r0, fp, r4
 800ed26:	4639      	mov	r1, r7
 800ed28:	9206      	str	r2, [sp, #24]
 800ed2a:	b22d      	sxth	r5, r5
 800ed2c:	fb0a 9000 	mla	r0, sl, r0, r9
 800ed30:	f001 f988 	bl	8010044 <st_int8_to16_no_shift>
 800ed34:	4437      	add	r7, r6
 800ed36:	4545      	cmp	r5, r8
 800ed38:	4628      	mov	r0, r5
 800ed3a:	9a06      	ldr	r2, [sp, #24]
 800ed3c:	dbf0      	blt.n	800ed20 <st_sssa8_ch_convolve_startNN+0x8d0>
 800ed3e:	46b9      	mov	r9, r7
 800ed40:	46d8      	mov	r8, fp
 800ed42:	ee18 7a10 	vmov	r7, s16
 800ed46:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800ed4a:	e6e1      	b.n	800eb10 <st_sssa8_ch_convolve_startNN+0x6c0>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	dd0c      	ble.n	800ed6a <st_sssa8_ch_convolve_startNN+0x91a>
 800ed50:	682a      	ldr	r2, [r5, #0]
 800ed52:	005b      	lsls	r3, r3, #1
 800ed54:	6821      	ldr	r1, [r4, #0]
 800ed56:	fb53 1302 	smmla	r3, r3, r2, r1
 800ed5a:	4103      	asrs	r3, r0
 800ed5c:	f303 0307 	ssat	r3, #8, r3
 800ed60:	f807 3c01 	strb.w	r3, [r7, #-1]
 800ed64:	e776      	b.n	800ec54 <st_sssa8_ch_convolve_startNN+0x804>
 800ed66:	46ce      	mov	lr, r9
 800ed68:	e75f      	b.n	800ec2a <st_sssa8_ch_convolve_startNN+0x7da>
 800ed6a:	f1c0 0201 	rsb	r2, r0, #1
 800ed6e:	fa03 f202 	lsl.w	r2, r3, r2
 800ed72:	f302 021f 	ssat	r2, #32, r2
 800ed76:	682b      	ldr	r3, [r5, #0]
 800ed78:	fb52 f213 	smmulr	r2, r2, r3
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f303 0307 	ssat	r3, #8, r3
 800ed84:	f807 3c01 	strb.w	r3, [r7, #-1]
 800ed88:	e764      	b.n	800ec54 <st_sssa8_ch_convolve_startNN+0x804>
 800ed8a:	b2a3      	uxth	r3, r4
 800ed8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ed8e:	e6d2      	b.n	800eb36 <st_sssa8_ch_convolve_startNN+0x6e6>
 800ed90:	46d9      	mov	r9, fp
 800ed92:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800ed96:	e6ce      	b.n	800eb36 <st_sssa8_ch_convolve_startNN+0x6e6>
 800ed98:	46f1      	mov	r9, lr
 800ed9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed9c:	e72b      	b.n	800ebf6 <st_sssa8_ch_convolve_startNN+0x7a6>
 800ed9e:	460b      	mov	r3, r1
 800eda0:	3301      	adds	r3, #1
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	9327      	str	r3, [sp, #156]	; 0x9c
 800eda6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f43f ad59 	beq.w	800e860 <st_sssa8_ch_convolve_startNN+0x410>
 800edae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800edb0:	fa0f f788 	sxth.w	r7, r8
 800edb4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800edb6:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800edba:	fb03 f30a 	mul.w	r3, r3, sl
 800edbe:	2400      	movs	r4, #0
 800edc0:	ee08 9a90 	vmov	s17, r9
 800edc4:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
 800edc8:	fb02 f303 	mul.w	r3, r2, r3
 800edcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800edce:	4625      	mov	r5, r4
 800edd0:	46d0      	mov	r8, sl
 800edd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edd6:	9312      	str	r3, [sp, #72]	; 0x48
 800edd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800edda:	3b01      	subs	r3, #1
 800eddc:	b29b      	uxth	r3, r3
 800edde:	932d      	str	r3, [sp, #180]	; 0xb4
 800ede0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ede2:	425b      	negs	r3, r3
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	932b      	str	r3, [sp, #172]	; 0xac
 800ede8:	f00a 0303 	and.w	r3, sl, #3
 800edec:	930b      	str	r3, [sp, #44]	; 0x2c
 800edee:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800edf2:	46d9      	mov	r9, fp
 800edf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800edf6:	a83a      	add	r0, sp, #232	; 0xe8
 800edf8:	f000 fd3a 	bl	800f870 <ai_padding_opt_phase1>
 800edfc:	ee19 3a10 	vmov	r3, s18
 800ee00:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800ee02:	fb05 f303 	mul.w	r3, r5, r3
 800ee06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee08:	fb01 2303 	mla	r3, r1, r3, r2
 800ee0c:	931e      	str	r3, [sp, #120]	; 0x78
 800ee0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ee10:	b953      	cbnz	r3, 800ee28 <st_sssa8_ch_convolve_startNN+0x9d8>
 800ee12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f040 81c0 	bne.w	800f19a <st_sssa8_ch_convolve_startNN+0xd4a>
 800ee1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ee1c:	ee19 1a90 	vmov	r1, s19
 800ee20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee22:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ee24:	f001 fb54 	bl	80104d0 <st_int8_to16_dual_interleaved>
 800ee28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f000 81c0 	beq.w	800f1b0 <st_sssa8_ch_convolve_startNN+0xd60>
 800ee30:	b2a3      	uxth	r3, r4
 800ee32:	eef0 aa4a 	vmov.f32	s21, s20
 800ee36:	ee0b 7a10 	vmov	s22, r7
 800ee3a:	ed8d 9a26 	vstr	s18, [sp, #152]	; 0x98
 800ee3e:	932c      	str	r3, [sp, #176]	; 0xb0
 800ee40:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800ee44:	1a9b      	subs	r3, r3, r2
 800ee46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee48:	fb02 3305 	mla	r3, r2, r5, r3
 800ee4c:	9308      	str	r3, [sp, #32]
 800ee4e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800ee52:	9311      	str	r3, [sp, #68]	; 0x44
 800ee54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee56:	9325      	str	r3, [sp, #148]	; 0x94
 800ee58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ee5a:	9318      	str	r3, [sp, #96]	; 0x60
 800ee5c:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800ee5e:	9329      	str	r3, [sp, #164]	; 0xa4
 800ee60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee62:	9324      	str	r3, [sp, #144]	; 0x90
 800ee64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ee66:	9323      	str	r3, [sp, #140]	; 0x8c
 800ee68:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800ee6a:	9322      	str	r3, [sp, #136]	; 0x88
 800ee6c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800ee6e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800ee70:	923b      	str	r2, [sp, #236]	; 0xec
 800ee72:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800ee74:	933a      	str	r3, [sp, #232]	; 0xe8
 800ee76:	923c      	str	r2, [sp, #240]	; 0xf0
 800ee78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	f000 8137 	beq.w	800f0ee <st_sssa8_ch_convolve_startNN+0xc9e>
 800ee80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ee82:	2100      	movs	r1, #0
 800ee84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ee86:	4252      	negs	r2, r2
 800ee88:	b292      	uxth	r2, r2
 800ee8a:	9207      	str	r2, [sp, #28]
 800ee8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ee8e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee90:	460a      	mov	r2, r1
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d062      	beq.n	800ef5c <st_sssa8_ch_convolve_startNN+0xb0c>
 800ee96:	3b01      	subs	r3, #1
 800ee98:	933a      	str	r3, [sp, #232]	; 0xe8
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800eea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eea2:	9808      	ldr	r0, [sp, #32]
 800eea4:	4283      	cmp	r3, r0
 800eea6:	da66      	bge.n	800ef76 <st_sssa8_ch_convolve_startNN+0xb26>
 800eea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eeaa:	46c3      	mov	fp, r8
 800eeac:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eeae:	ee1b 7a10 	vmov	r7, s22
 800eeb2:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800eeb6:	fb02 3200 	mla	r2, r2, r0, r3
 800eeba:	b28b      	uxth	r3, r1
 800eebc:	930d      	str	r3, [sp, #52]	; 0x34
 800eebe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eec0:	1ad5      	subs	r5, r2, r3
 800eec2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800eec6:	930c      	str	r3, [sp, #48]	; 0x30
 800eec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eeca:	461a      	mov	r2, r3
 800eecc:	9306      	str	r3, [sp, #24]
 800eece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eed0:	42ab      	cmp	r3, r5
 800eed2:	da27      	bge.n	800ef24 <st_sssa8_ch_convolve_startNN+0xad4>
 800eed4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eed6:	4291      	cmp	r1, r2
 800eed8:	fb09 f202 	mul.w	r2, r9, r2
 800eedc:	bfcc      	ite	gt
 800eede:	f04f 0800 	movgt.w	r8, #0
 800eee2:	f04f 0801 	movle.w	r8, #1
 800eee6:	9210      	str	r2, [sp, #64]	; 0x40
 800eee8:	9a06      	ldr	r2, [sp, #24]
 800eeea:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800eeee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eef0:	2a00      	cmp	r2, #0
 800eef2:	d06a      	beq.n	800efca <st_sssa8_ch_convolve_startNN+0xb7a>
 800eef4:	461e      	mov	r6, r3
 800eef6:	469c      	mov	ip, r3
 800eef8:	45e1      	cmp	r9, ip
 800eefa:	4621      	mov	r1, r4
 800eefc:	465a      	mov	r2, fp
 800eefe:	4638      	mov	r0, r7
 800ef00:	bfcc      	ite	gt
 800ef02:	2300      	movgt	r3, #0
 800ef04:	2301      	movle	r3, #1
 800ef06:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800ef0a:	d103      	bne.n	800ef14 <st_sssa8_ch_convolve_startNN+0xac4>
 800ef0c:	f1b8 0f00 	cmp.w	r8, #0
 800ef10:	f000 80cd 	beq.w	800f0ae <st_sssa8_ch_convolve_startNN+0xc5e>
 800ef14:	f004 ff74 	bl	8013e00 <st_dsp_arm_fill_q15>
 800ef18:	3601      	adds	r6, #1
 800ef1a:	4454      	add	r4, sl
 800ef1c:	b236      	sxth	r6, r6
 800ef1e:	42b5      	cmp	r5, r6
 800ef20:	46b4      	mov	ip, r6
 800ef22:	dce9      	bgt.n	800eef8 <st_sssa8_ch_convolve_startNN+0xaa8>
 800ef24:	9a06      	ldr	r2, [sp, #24]
 800ef26:	9908      	ldr	r1, [sp, #32]
 800ef28:	3201      	adds	r2, #1
 800ef2a:	b213      	sxth	r3, r2
 800ef2c:	428b      	cmp	r3, r1
 800ef2e:	461a      	mov	r2, r3
 800ef30:	9306      	str	r3, [sp, #24]
 800ef32:	dbcc      	blt.n	800eece <st_sssa8_ch_convolve_startNN+0xa7e>
 800ef34:	46d8      	mov	r8, fp
 800ef36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef38:	42a3      	cmp	r3, r4
 800ef3a:	d021      	beq.n	800ef80 <st_sssa8_ch_convolve_startNN+0xb30>
 800ef3c:	9b07      	ldr	r3, [sp, #28]
 800ef3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef40:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ef42:	4413      	add	r3, r2
 800ef44:	3101      	adds	r1, #1
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	b209      	sxth	r1, r1
 800ef4a:	9307      	str	r3, [sp, #28]
 800ef4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef4e:	460a      	mov	r2, r1
 800ef50:	428b      	cmp	r3, r1
 800ef52:	f340 80b5 	ble.w	800f0c0 <st_sssa8_ch_convolve_startNN+0xc70>
 800ef56:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d19c      	bne.n	800ee96 <st_sssa8_ch_convolve_startNN+0xa46>
 800ef5c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d14a      	bne.n	800eff8 <st_sssa8_ch_convolve_startNN+0xba8>
 800ef62:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800ef64:	9808      	ldr	r0, [sp, #32]
 800ef66:	3b01      	subs	r3, #1
 800ef68:	933c      	str	r3, [sp, #240]	; 0xf0
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800ef70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef72:	4283      	cmp	r3, r0
 800ef74:	db98      	blt.n	800eea8 <st_sssa8_ch_convolve_startNN+0xa58>
 800ef76:	b28b      	uxth	r3, r1
 800ef78:	930d      	str	r3, [sp, #52]	; 0x34
 800ef7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	d1dd      	bne.n	800ef3c <st_sssa8_ch_convolve_startNN+0xaec>
 800ef80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef82:	ee1a 2a90 	vmov	r2, s21
 800ef86:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef88:	ee19 0a90 	vmov	r0, s19
 800ef8c:	9305      	str	r3, [sp, #20]
 800ef8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ef90:	9304      	str	r3, [sp, #16]
 800ef92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef94:	9303      	str	r3, [sp, #12]
 800ef96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef98:	9302      	str	r3, [sp, #8]
 800ef9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	ee19 3a10 	vmov	r3, s18
 800efa6:	f004 f81f 	bl	8012fe8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800efaa:	9b07      	ldr	r3, [sp, #28]
 800efac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800efb0:	4413      	add	r3, r2
 800efb2:	9017      	str	r0, [sp, #92]	; 0x5c
 800efb4:	3101      	adds	r1, #1
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	b209      	sxth	r1, r1
 800efba:	9307      	str	r3, [sp, #28]
 800efbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efbe:	460a      	mov	r2, r1
 800efc0:	428b      	cmp	r3, r1
 800efc2:	f340 8094 	ble.w	800f0ee <st_sssa8_ch_convolve_startNN+0xc9e>
 800efc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800efc8:	e7c5      	b.n	800ef56 <st_sssa8_ch_convolve_startNN+0xb06>
 800efca:	469e      	mov	lr, r3
 800efcc:	461e      	mov	r6, r3
 800efce:	0ff3      	lsrs	r3, r6, #31
 800efd0:	465a      	mov	r2, fp
 800efd2:	4621      	mov	r1, r4
 800efd4:	4638      	mov	r0, r7
 800efd6:	45f1      	cmp	r9, lr
 800efd8:	bfd8      	it	le
 800efda:	f043 0301 	orrle.w	r3, r3, #1
 800efde:	b913      	cbnz	r3, 800efe6 <st_sssa8_ch_convolve_startNN+0xb96>
 800efe0:	f1b8 0f00 	cmp.w	r8, #0
 800efe4:	d05a      	beq.n	800f09c <st_sssa8_ch_convolve_startNN+0xc4c>
 800efe6:	f004 ff0b 	bl	8013e00 <st_dsp_arm_fill_q15>
 800efea:	3601      	adds	r6, #1
 800efec:	4454      	add	r4, sl
 800efee:	b236      	sxth	r6, r6
 800eff0:	42ae      	cmp	r6, r5
 800eff2:	46b6      	mov	lr, r6
 800eff4:	dbeb      	blt.n	800efce <st_sssa8_ch_convolve_startNN+0xb7e>
 800eff6:	e795      	b.n	800ef24 <st_sssa8_ch_convolve_startNN+0xad4>
 800eff8:	3b01      	subs	r3, #1
 800effa:	933b      	str	r3, [sp, #236]	; 0xec
 800effc:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800f000:	2b01      	cmp	r3, #1
 800f002:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800f006:	f43f af4b 	beq.w	800eea0 <st_sssa8_ch_convolve_startNN+0xa50>
 800f00a:	b28b      	uxth	r3, r1
 800f00c:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800f010:	930d      	str	r3, [sp, #52]	; 0x34
 800f012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f014:	bb03      	cbnz	r3, 800f058 <st_sssa8_ch_convolve_startNN+0xc08>
 800f016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f018:	9908      	ldr	r1, [sp, #32]
 800f01a:	428b      	cmp	r3, r1
 800f01c:	da8b      	bge.n	800ef36 <st_sssa8_ch_convolve_startNN+0xae6>
 800f01e:	46a3      	mov	fp, r4
 800f020:	464f      	mov	r7, r9
 800f022:	462c      	mov	r4, r5
 800f024:	461e      	mov	r6, r3
 800f026:	4618      	mov	r0, r3
 800f028:	ee18 2a90 	vmov	r2, s17
 800f02c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f02e:	4689      	mov	r9, r1
 800f030:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f034:	3601      	adds	r6, #1
 800f036:	fb00 4007 	mla	r0, r0, r7, r4
 800f03a:	4659      	mov	r1, fp
 800f03c:	9206      	str	r2, [sp, #24]
 800f03e:	b236      	sxth	r6, r6
 800f040:	fb08 a000 	mla	r0, r8, r0, sl
 800f044:	f001 f894 	bl	8010170 <st_int8_to16_no_shift_interleaved>
 800f048:	44ab      	add	fp, r5
 800f04a:	454e      	cmp	r6, r9
 800f04c:	4630      	mov	r0, r6
 800f04e:	9a06      	ldr	r2, [sp, #24]
 800f050:	dbf0      	blt.n	800f034 <st_sssa8_ch_convolve_startNN+0xbe4>
 800f052:	465c      	mov	r4, fp
 800f054:	46b9      	mov	r9, r7
 800f056:	e76e      	b.n	800ef36 <st_sssa8_ch_convolve_startNN+0xae6>
 800f058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f05a:	9908      	ldr	r1, [sp, #32]
 800f05c:	428b      	cmp	r3, r1
 800f05e:	f6bf af6a 	bge.w	800ef36 <st_sssa8_ch_convolve_startNN+0xae6>
 800f062:	46a3      	mov	fp, r4
 800f064:	464f      	mov	r7, r9
 800f066:	462c      	mov	r4, r5
 800f068:	461e      	mov	r6, r3
 800f06a:	4618      	mov	r0, r3
 800f06c:	ee18 2a90 	vmov	r2, s17
 800f070:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f072:	4689      	mov	r9, r1
 800f074:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f078:	3601      	adds	r6, #1
 800f07a:	fb00 4007 	mla	r0, r0, r7, r4
 800f07e:	4659      	mov	r1, fp
 800f080:	9206      	str	r2, [sp, #24]
 800f082:	b236      	sxth	r6, r6
 800f084:	fb08 a000 	mla	r0, r8, r0, sl
 800f088:	f000 ffdc 	bl	8010044 <st_int8_to16_no_shift>
 800f08c:	44ab      	add	fp, r5
 800f08e:	454e      	cmp	r6, r9
 800f090:	4630      	mov	r0, r6
 800f092:	9a06      	ldr	r2, [sp, #24]
 800f094:	dbf0      	blt.n	800f078 <st_sssa8_ch_convolve_startNN+0xc28>
 800f096:	465c      	mov	r4, fp
 800f098:	46b9      	mov	r9, r7
 800f09a:	e74c      	b.n	800ef36 <st_sssa8_ch_convolve_startNN+0xae6>
 800f09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f09e:	eb03 000e 	add.w	r0, r3, lr
 800f0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a4:	fb0b 3000 	mla	r0, fp, r0, r3
 800f0a8:	f001 f862 	bl	8010170 <st_int8_to16_no_shift_interleaved>
 800f0ac:	e79d      	b.n	800efea <st_sssa8_ch_convolve_startNN+0xb9a>
 800f0ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0b0:	eb03 000c 	add.w	r0, r3, ip
 800f0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b6:	fb0b 3000 	mla	r0, fp, r0, r3
 800f0ba:	f000 ffc3 	bl	8010044 <st_int8_to16_no_shift>
 800f0be:	e72b      	b.n	800ef18 <st_sssa8_ch_convolve_startNN+0xac8>
 800f0c0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f0c2:	428c      	cmp	r4, r1
 800f0c4:	d013      	beq.n	800f0ee <st_sssa8_ch_convolve_startNN+0xc9e>
 800f0c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0c8:	ee1a 2a90 	vmov	r2, s21
 800f0cc:	ee19 0a90 	vmov	r0, s19
 800f0d0:	9305      	str	r3, [sp, #20]
 800f0d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f0d4:	9304      	str	r3, [sp, #16]
 800f0d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0d8:	9303      	str	r3, [sp, #12]
 800f0da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f0dc:	9302      	str	r3, [sp, #8]
 800f0de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	ee19 3a10 	vmov	r3, s18
 800f0ea:	f004 faa1 	bl	8013630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800f0ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f0f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f0f4:	1a9b      	subs	r3, r3, r2
 800f0f6:	4411      	add	r1, r2
 800f0f8:	911e      	str	r1, [sp, #120]	; 0x78
 800f0fa:	b299      	uxth	r1, r3
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	428a      	cmp	r2, r1
 800f100:	9126      	str	r1, [sp, #152]	; 0x98
 800f102:	bf28      	it	cs
 800f104:	460b      	movcs	r3, r1
 800f106:	b29b      	uxth	r3, r3
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d03d      	beq.n	800f188 <st_sssa8_ch_convolve_startNN+0xd38>
 800f10c:	ee1a 4a90 	vmov	r4, s21
 800f110:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800f112:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f114:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800f118:	fb01 0002 	mla	r0, r1, r2, r0
 800f11c:	ee0a 4a90 	vmov	s21, r4
 800f120:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f122:	9029      	str	r0, [sp, #164]	; 0xa4
 800f124:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800f128:	9423      	str	r4, [sp, #140]	; 0x8c
 800f12a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800f12c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800f130:	9422      	str	r4, [sp, #136]	; 0x88
 800f132:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800f134:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f138:	9224      	str	r2, [sp, #144]	; 0x90
 800f13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f13c:	bb32      	cbnz	r2, 800f18c <st_sssa8_ch_convolve_startNN+0xd3c>
 800f13e:	460a      	mov	r2, r1
 800f140:	ee19 1a90 	vmov	r1, s19
 800f144:	9318      	str	r3, [sp, #96]	; 0x60
 800f146:	f001 f9c3 	bl	80104d0 <st_int8_to16_dual_interleaved>
 800f14a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f14c:	3b01      	subs	r3, #1
 800f14e:	b29b      	uxth	r3, r3
 800f150:	461a      	mov	r2, r3
 800f152:	9325      	str	r3, [sp, #148]	; 0x94
 800f154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f158:	429a      	cmp	r2, r3
 800f15a:	f47f ae87 	bne.w	800ee6c <st_sssa8_ch_convolve_startNN+0xa1c>
 800f15e:	ee1b 7a10 	vmov	r7, s22
 800f162:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f164:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f166:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800f168:	4413      	add	r3, r2
 800f16a:	3401      	adds	r4, #1
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	b224      	sxth	r4, r4
 800f170:	932b      	str	r3, [sp, #172]	; 0xac
 800f172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f174:	4625      	mov	r5, r4
 800f176:	42a3      	cmp	r3, r4
 800f178:	f73f ae3d 	bgt.w	800edf6 <st_sssa8_ch_convolve_startNN+0x9a6>
 800f17c:	2000      	movs	r0, #0
 800f17e:	b04f      	add	sp, #316	; 0x13c
 800f180:	ecbd 8b08 	vpop	{d8-d11}
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	9318      	str	r3, [sp, #96]	; 0x60
 800f18a:	e7de      	b.n	800f14a <st_sssa8_ch_convolve_startNN+0xcfa>
 800f18c:	460a      	mov	r2, r1
 800f18e:	ee19 1a90 	vmov	r1, s19
 800f192:	9318      	str	r3, [sp, #96]	; 0x60
 800f194:	f001 f83c 	bl	8010210 <st_int8_to16_dual>
 800f198:	e7d7      	b.n	800f14a <st_sssa8_ch_convolve_startNN+0xcfa>
 800f19a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f19c:	ee19 1a90 	vmov	r1, s19
 800f1a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f1a2:	9860      	ldr	r0, [sp, #384]	; 0x180
 800f1a4:	f001 f834 	bl	8010210 <st_int8_to16_dual>
 800f1a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f47f ae40 	bne.w	800ee30 <st_sssa8_ch_convolve_startNN+0x9e0>
 800f1b0:	b2a3      	uxth	r3, r4
 800f1b2:	932c      	str	r3, [sp, #176]	; 0xb0
 800f1b4:	e7d5      	b.n	800f162 <st_sssa8_ch_convolve_startNN+0xd12>
 800f1b6:	ed8d aa17 	vstr	s20, [sp, #92]	; 0x5c
 800f1ba:	ed8d 9a18 	vstr	s18, [sp, #96]	; 0x60
 800f1be:	f7ff b9a8 	b.w	800e512 <st_sssa8_ch_convolve_startNN+0xc2>
 800f1c2:	bf00      	nop
 800f1c4:	ffff0000 	.word	0xffff0000

0800f1c8 <st_sssa8_fully_connected>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	b097      	sub	sp, #92	; 0x5c
 800f1ce:	460d      	mov	r5, r1
 800f1d0:	4683      	mov	fp, r0
 800f1d2:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800f1d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	9203      	str	r2, [sp, #12]
 800f1da:	9307      	str	r3, [sp, #28]
 800f1dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1de:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800f1e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f1e6:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800f1ea:	1e4a      	subs	r2, r1, #1
 800f1ec:	9104      	str	r1, [sp, #16]
 800f1ee:	920d      	str	r2, [sp, #52]	; 0x34
 800f1f0:	b292      	uxth	r2, r2
 800f1f2:	2a14      	cmp	r2, #20
 800f1f4:	f200 81b3 	bhi.w	800f55e <st_sssa8_fully_connected+0x396>
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	408b      	lsls	r3, r1
 800f1fc:	408a      	lsls	r2, r1
 800f1fe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f202:	9308      	str	r3, [sp, #32]
 800f204:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 81ae 	beq.w	800f568 <st_sssa8_fully_connected+0x3a0>
 800f20c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f20e:	b2b3      	uxth	r3, r6
 800f210:	9600      	str	r6, [sp, #0]
 800f212:	4658      	mov	r0, fp
 800f214:	0851      	lsrs	r1, r2, #1
 800f216:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800f21a:	9e03      	ldr	r6, [sp, #12]
 800f21c:	460c      	mov	r4, r1
 800f21e:	9115      	str	r1, [sp, #84]	; 0x54
 800f220:	4632      	mov	r2, r6
 800f222:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f224:	f003 fea8 	bl	8012f78 <st_int8_reordered_no_shift_zero>
 800f228:	4621      	mov	r1, r4
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	f000 8145 	beq.w	800f4ba <st_sssa8_fully_connected+0x2f2>
 800f230:	4634      	mov	r4, r6
 800f232:	f1a6 0310 	sub.w	r3, r6, #16
 800f236:	9e04      	ldr	r6, [sp, #16]
 800f238:	1e4a      	subs	r2, r1, #1
 800f23a:	2001      	movs	r0, #1
 800f23c:	091b      	lsrs	r3, r3, #4
 800f23e:	1eb1      	subs	r1, r6, #2
 800f240:	b292      	uxth	r2, r2
 800f242:	3301      	adds	r3, #1
 800f244:	fa00 f101 	lsl.w	r1, r0, r1
 800f248:	9112      	str	r1, [sp, #72]	; 0x48
 800f24a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f24c:	3110      	adds	r1, #16
 800f24e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f252:	920e      	str	r2, [sp, #56]	; 0x38
 800f254:	1ee2      	subs	r2, r4, #3
 800f256:	920f      	str	r2, [sp, #60]	; 0x3c
 800f258:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f25a:	3208      	adds	r2, #8
 800f25c:	9205      	str	r2, [sp, #20]
 800f25e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f260:	3202      	adds	r2, #2
 800f262:	9206      	str	r2, [sp, #24]
 800f264:	011a      	lsls	r2, r3, #4
 800f266:	9209      	str	r2, [sp, #36]	; 0x24
 800f268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f26a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800f26e:	9310      	str	r3, [sp, #64]	; 0x40
 800f270:	1f23      	subs	r3, r4, #4
 800f272:	9311      	str	r3, [sp, #68]	; 0x44
 800f274:	1b83      	subs	r3, r0, r6
 800f276:	9314      	str	r3, [sp, #80]	; 0x50
 800f278:	9a03      	ldr	r2, [sp, #12]
 800f27a:	9b05      	ldr	r3, [sp, #20]
 800f27c:	2a0f      	cmp	r2, #15
 800f27e:	eb05 0b02 	add.w	fp, r5, r2
 800f282:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800f286:	f340 8261 	ble.w	800f74c <st_sssa8_fully_connected+0x584>
 800f28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f28c:	465c      	mov	r4, fp
 800f28e:	18ae      	adds	r6, r5, r2
 800f290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f292:	682f      	ldr	r7, [r5, #0]
 800f294:	f8d4 a000 	ldr.w	sl, [r4]
 800f298:	ea4f 2037 	mov.w	r0, r7, ror #8
 800f29c:	f8d2 9000 	ldr.w	r9, [r2]
 800f2a0:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800f2a4:	fa2f f080 	sxtb16	r0, r0
 800f2a8:	fa2f fc8e 	sxtb16	ip, lr
 800f2ac:	fa2f f787 	sxtb16	r7, r7
 800f2b0:	fa2f fe8a 	sxtb16	lr, sl
 800f2b4:	fb29 1107 	smlad	r1, r9, r7, r1
 800f2b8:	fb29 390e 	smlad	r9, r9, lr, r3
 800f2bc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f2c0:	fb28 1100 	smlad	r1, r8, r0, r1
 800f2c4:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800f2c8:	6868      	ldr	r0, [r5, #4]
 800f2ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f2ce:	ea4f 2330 	mov.w	r3, r0, ror #8
 800f2d2:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800f2d6:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800f2da:	fa2f f383 	sxtb16	r3, r3
 800f2de:	fa2f f78a 	sxtb16	r7, sl
 800f2e2:	fa2f f080 	sxtb16	r0, r0
 800f2e6:	fa2f fa89 	sxtb16	sl, r9
 800f2ea:	fb28 1000 	smlad	r0, r8, r0, r1
 800f2ee:	fb28 e80a 	smlad	r8, r8, sl, lr
 800f2f2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800f2f6:	fb2c 0003 	smlad	r0, ip, r3, r0
 800f2fa:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800f2fe:	68ab      	ldr	r3, [r5, #8]
 800f300:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800f304:	ea4f 2133 	mov.w	r1, r3, ror #8
 800f308:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800f30c:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800f310:	fa2f f181 	sxtb16	r1, r1
 800f314:	fa2f f98e 	sxtb16	r9, lr
 800f318:	fa2f f383 	sxtb16	r3, r3
 800f31c:	fa2f fe88 	sxtb16	lr, r8
 800f320:	fb2c 0303 	smlad	r3, ip, r3, r0
 800f324:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800f328:	6957      	ldr	r7, [r2, #20]
 800f32a:	fb27 3301 	smlad	r3, r7, r1, r3
 800f32e:	fb27 ce09 	smlad	lr, r7, r9, ip
 800f332:	68e8      	ldr	r0, [r5, #12]
 800f334:	3410      	adds	r4, #16
 800f336:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800f33a:	3510      	adds	r5, #16
 800f33c:	ea4f 2130 	mov.w	r1, r0, ror #8
 800f340:	6997      	ldr	r7, [r2, #24]
 800f342:	fa2f f881 	sxtb16	r8, r1
 800f346:	fa2f f180 	sxtb16	r1, r0
 800f34a:	ea4f 203c 	mov.w	r0, ip, ror #8
 800f34e:	fa2f fc8c 	sxtb16	ip, ip
 800f352:	fa2f f080 	sxtb16	r0, r0
 800f356:	fb27 3101 	smlad	r1, r7, r1, r3
 800f35a:	fb27 e70c 	smlad	r7, r7, ip, lr
 800f35e:	69d3      	ldr	r3, [r2, #28]
 800f360:	3220      	adds	r2, #32
 800f362:	fb23 1108 	smlad	r1, r3, r8, r1
 800f366:	fb23 7300 	smlad	r3, r3, r0, r7
 800f36a:	42b5      	cmp	r5, r6
 800f36c:	d191      	bne.n	800f292 <st_sssa8_fully_connected+0xca>
 800f36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f370:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800f374:	4493      	add	fp, r2
 800f376:	4691      	mov	r9, r2
 800f378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f37a:	4591      	cmp	r9, r2
 800f37c:	f280 81e4 	bge.w	800f748 <st_sssa8_fully_connected+0x580>
 800f380:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f382:	4657      	mov	r7, sl
 800f384:	46d8      	mov	r8, fp
 800f386:	eba2 0209 	sub.w	r2, r2, r9
 800f38a:	0892      	lsrs	r2, r2, #2
 800f38c:	920c      	str	r2, [sp, #48]	; 0x30
 800f38e:	3201      	adds	r2, #1
 800f390:	0090      	lsls	r0, r2, #2
 800f392:	920b      	str	r2, [sp, #44]	; 0x2c
 800f394:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800f398:	900a      	str	r0, [sp, #40]	; 0x28
 800f39a:	f856 eb04 	ldr.w	lr, [r6], #4
 800f39e:	f858 0b04 	ldr.w	r0, [r8], #4
 800f3a2:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	ea4f 2530 	mov.w	r5, r0, ror #8
 800f3ac:	fa2f fc8c 	sxtb16	ip, ip
 800f3b0:	fa2f fe8e 	sxtb16	lr, lr
 800f3b4:	fa2f f585 	sxtb16	r5, r5
 800f3b8:	fa2f f080 	sxtb16	r0, r0
 800f3bc:	fb22 110e 	smlad	r1, r2, lr, r1
 800f3c0:	fb22 3300 	smlad	r3, r2, r0, r3
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	fb22 110c 	smlad	r1, r2, ip, r1
 800f3cc:	fb22 3305 	smlad	r3, r2, r5, r3
 800f3d0:	42a6      	cmp	r6, r4
 800f3d2:	d1e2      	bne.n	800f39a <st_sssa8_fully_connected+0x1d2>
 800f3d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3d6:	f109 0904 	add.w	r9, r9, #4
 800f3da:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800f3de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3e0:	4493      	add	fp, r2
 800f3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3e4:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800f3e8:	9d03      	ldr	r5, [sp, #12]
 800f3ea:	454d      	cmp	r5, r9
 800f3ec:	dd37      	ble.n	800f45e <st_sssa8_fully_connected+0x296>
 800f3ee:	f9ba 2000 	ldrsh.w	r2, [sl]
 800f3f2:	f994 0000 	ldrsb.w	r0, [r4]
 800f3f6:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f3fa:	f99b 0000 	ldrsb.w	r0, [fp]
 800f3fe:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f402:	f109 0201 	add.w	r2, r9, #1
 800f406:	42aa      	cmp	r2, r5
 800f408:	da25      	bge.n	800f456 <st_sssa8_fully_connected+0x28e>
 800f40a:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800f40e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f412:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f416:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800f41a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f41e:	f109 0202 	add.w	r2, r9, #2
 800f422:	42aa      	cmp	r2, r5
 800f424:	da17      	bge.n	800f456 <st_sssa8_fully_connected+0x28e>
 800f426:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800f42a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f42e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f432:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800f436:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f43a:	f109 0203 	add.w	r2, r9, #3
 800f43e:	4295      	cmp	r5, r2
 800f440:	dd09      	ble.n	800f456 <st_sssa8_fully_connected+0x28e>
 800f442:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800f446:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800f44a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800f44e:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800f452:	fb12 1100 	smlabb	r1, r2, r0, r1
 800f456:	9a03      	ldr	r2, [sp, #12]
 800f458:	eba2 0909 	sub.w	r9, r2, r9
 800f45c:	444c      	add	r4, r9
 800f45e:	9a04      	ldr	r2, [sp, #16]
 800f460:	2a15      	cmp	r2, #21
 800f462:	f340 8141 	ble.w	800f6e8 <st_sssa8_fully_connected+0x520>
 800f466:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f468:	9a07      	ldr	r2, [sp, #28]
 800f46a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f46c:	fb51 0102 	smmla	r1, r1, r2, r0
 800f470:	fb53 0302 	smmla	r3, r3, r2, r0
 800f474:	4129      	asrs	r1, r5
 800f476:	9a08      	ldr	r2, [sp, #32]
 800f478:	4411      	add	r1, r2
 800f47a:	f301 0107 	ssat	r1, #8, r1
 800f47e:	9806      	ldr	r0, [sp, #24]
 800f480:	412b      	asrs	r3, r5
 800f482:	f800 1c02 	strb.w	r1, [r0, #-2]
 800f486:	4413      	add	r3, r2
 800f488:	f303 0307 	ssat	r3, #8, r3
 800f48c:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f490:	9a03      	ldr	r2, [sp, #12]
 800f492:	9b05      	ldr	r3, [sp, #20]
 800f494:	18a5      	adds	r5, r4, r2
 800f496:	9a06      	ldr	r2, [sp, #24]
 800f498:	3308      	adds	r3, #8
 800f49a:	3202      	adds	r2, #2
 800f49c:	9305      	str	r3, [sp, #20]
 800f49e:	9206      	str	r2, [sp, #24]
 800f4a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	f47f aee8 	bne.w	800f278 <st_sssa8_fully_connected+0xb0>
 800f4a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f4aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800f4b0:	9225      	str	r2, [sp, #148]	; 0x94
 800f4b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f4b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4b8:	9324      	str	r3, [sp, #144]	; 0x90
 800f4ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4bc:	07db      	lsls	r3, r3, #31
 800f4be:	d54a      	bpl.n	800f556 <st_sssa8_fully_connected+0x38e>
 800f4c0:	9a03      	ldr	r2, [sp, #12]
 800f4c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f4c4:	0897      	lsrs	r7, r2, #2
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f000 8176 	beq.w	800f7b8 <st_sssa8_fully_connected+0x5f0>
 800f4cc:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800f4d0:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f4d2:	f855 2b04 	ldr.w	r2, [r5], #4
 800f4d6:	6801      	ldr	r1, [r0, #0]
 800f4d8:	fa2f f482 	sxtb16	r4, r2
 800f4dc:	ea4f 2232 	mov.w	r2, r2, ror #8
 800f4e0:	fa2f f282 	sxtb16	r2, r2
 800f4e4:	fb21 3304 	smlad	r3, r1, r4, r3
 800f4e8:	6841      	ldr	r1, [r0, #4]
 800f4ea:	3008      	adds	r0, #8
 800f4ec:	fb21 3302 	smlad	r3, r1, r2, r3
 800f4f0:	42b5      	cmp	r5, r6
 800f4f2:	d1ee      	bne.n	800f4d2 <st_sssa8_fully_connected+0x30a>
 800f4f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f4f6:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800f4fa:	9226      	str	r2, [sp, #152]	; 0x98
 800f4fc:	9a03      	ldr	r2, [sp, #12]
 800f4fe:	f012 0203 	ands.w	r2, r2, #3
 800f502:	d016      	beq.n	800f532 <st_sssa8_fully_connected+0x36a>
 800f504:	3a01      	subs	r2, #1
 800f506:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f508:	f996 1000 	ldrsb.w	r1, [r6]
 800f50c:	8800      	ldrh	r0, [r0, #0]
 800f50e:	b292      	uxth	r2, r2
 800f510:	fb10 3301 	smlabb	r3, r0, r1, r3
 800f514:	b16a      	cbz	r2, 800f532 <st_sssa8_fully_connected+0x36a>
 800f516:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f518:	2a01      	cmp	r2, #1
 800f51a:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800f51e:	8840      	ldrh	r0, [r0, #2]
 800f520:	fb10 3301 	smlabb	r3, r0, r1, r3
 800f524:	d005      	beq.n	800f532 <st_sssa8_fully_connected+0x36a>
 800f526:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f528:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800f52c:	8889      	ldrh	r1, [r1, #4]
 800f52e:	fb11 3302 	smlabb	r3, r1, r2, r3
 800f532:	9a04      	ldr	r2, [sp, #16]
 800f534:	2a15      	cmp	r2, #21
 800f536:	f340 811d 	ble.w	800f774 <st_sssa8_fully_connected+0x5ac>
 800f53a:	1e91      	subs	r1, r2, #2
 800f53c:	2201      	movs	r2, #1
 800f53e:	408a      	lsls	r2, r1
 800f540:	9907      	ldr	r1, [sp, #28]
 800f542:	fb53 2301 	smmla	r3, r3, r1, r2
 800f546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f548:	4113      	asrs	r3, r2
 800f54a:	9a08      	ldr	r2, [sp, #32]
 800f54c:	4413      	add	r3, r2
 800f54e:	f303 0307 	ssat	r3, #8, r3
 800f552:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f554:	7013      	strb	r3, [r2, #0]
 800f556:	2000      	movs	r0, #0
 800f558:	b017      	add	sp, #92	; 0x5c
 800f55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f55e:	9308      	str	r3, [sp, #32]
 800f560:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f562:	2b00      	cmp	r3, #0
 800f564:	f47f ae52 	bne.w	800f20c <st_sssa8_fully_connected+0x44>
 800f568:	4273      	negs	r3, r6
 800f56a:	b298      	uxth	r0, r3
 800f56c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800f570:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f572:	2b00      	cmp	r3, #0
 800f574:	d0ef      	beq.n	800f556 <st_sssa8_fully_connected+0x38e>
 800f576:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f578:	3301      	adds	r3, #1
 800f57a:	9903      	ldr	r1, [sp, #12]
 800f57c:	b236      	sxth	r6, r6
 800f57e:	18d3      	adds	r3, r2, r3
 800f580:	9c04      	ldr	r4, [sp, #16]
 800f582:	f1a1 0810 	sub.w	r8, r1, #16
 800f586:	f102 0e01 	add.w	lr, r2, #1
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	2201      	movs	r2, #1
 800f58e:	f028 080f 	bic.w	r8, r8, #15
 800f592:	1ea3      	subs	r3, r4, #2
 800f594:	468c      	mov	ip, r1
 800f596:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800f59a:	fa02 f303 	lsl.w	r3, r2, r3
 800f59e:	f108 0810 	add.w	r8, r8, #16
 800f5a2:	f1bc 0f0f 	cmp.w	ip, #15
 800f5a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800f5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ac:	eb0b 0308 	add.w	r3, fp, r8
 800f5b0:	9306      	str	r3, [sp, #24]
 800f5b2:	eba2 0304 	sub.w	r3, r2, r4
 800f5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5bc:	dd7e      	ble.n	800f6bc <st_sssa8_fully_connected+0x4f4>
 800f5be:	eb05 0708 	add.w	r7, r5, r8
 800f5c2:	462a      	mov	r2, r5
 800f5c4:	9d03      	ldr	r5, [sp, #12]
 800f5c6:	6811      	ldr	r1, [r2, #0]
 800f5c8:	682c      	ldr	r4, [r5, #0]
 800f5ca:	fa2f fb81 	sxtb16	fp, r1
 800f5ce:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800f5d2:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f5d6:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f5da:	fa2f f181 	sxtb16	r1, r1
 800f5de:	fa20 f484 	sxtab16	r4, r0, r4
 800f5e2:	fb24 340b 	smlad	r4, r4, fp, r3
 800f5e6:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800f5ea:	6851      	ldr	r1, [r2, #4]
 800f5ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f5f0:	fa2f f481 	sxtb16	r4, r1
 800f5f4:	ea4f 233a 	mov.w	r3, sl, ror #8
 800f5f8:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f5fc:	fa20 f383 	sxtab16	r3, r0, r3
 800f600:	fa2f f181 	sxtb16	r1, r1
 800f604:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f608:	fb2a ba04 	smlad	sl, sl, r4, fp
 800f60c:	fb23 a401 	smlad	r4, r3, r1, sl
 800f610:	6891      	ldr	r1, [r2, #8]
 800f612:	68ab      	ldr	r3, [r5, #8]
 800f614:	fa2f fb81 	sxtb16	fp, r1
 800f618:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800f61c:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f620:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f624:	fa2f f181 	sxtb16	r1, r1
 800f628:	fa20 f383 	sxtab16	r3, r0, r3
 800f62c:	fb23 430b 	smlad	r3, r3, fp, r4
 800f630:	fb2a 3301 	smlad	r3, sl, r1, r3
 800f634:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800f638:	3510      	adds	r5, #16
 800f63a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800f63e:	3210      	adds	r2, #16
 800f640:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800f644:	ea4f 2431 	mov.w	r4, r1, ror #8
 800f648:	fa2f fa8a 	sxtb16	sl, sl
 800f64c:	fa2f fb8b 	sxtb16	fp, fp
 800f650:	fa20 f181 	sxtab16	r1, r0, r1
 800f654:	fa20 f484 	sxtab16	r4, r0, r4
 800f658:	fb21 330a 	smlad	r3, r1, sl, r3
 800f65c:	fb24 330b 	smlad	r3, r4, fp, r3
 800f660:	4297      	cmp	r7, r2
 800f662:	d1b0      	bne.n	800f5c6 <st_sssa8_fully_connected+0x3fe>
 800f664:	4645      	mov	r5, r8
 800f666:	9f06      	ldr	r7, [sp, #24]
 800f668:	45ac      	cmp	ip, r5
 800f66a:	dd2c      	ble.n	800f6c6 <st_sssa8_fully_connected+0x4fe>
 800f66c:	ebac 0505 	sub.w	r5, ip, r5
 800f670:	4415      	add	r5, r2
 800f672:	4611      	mov	r1, r2
 800f674:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800f678:	3201      	adds	r2, #1
 800f67a:	7809      	ldrb	r1, [r1, #0]
 800f67c:	1ba4      	subs	r4, r4, r6
 800f67e:	42aa      	cmp	r2, r5
 800f680:	b249      	sxtb	r1, r1
 800f682:	fb14 3301 	smlabb	r3, r4, r1, r3
 800f686:	d1f4      	bne.n	800f672 <st_sssa8_fully_connected+0x4aa>
 800f688:	9a04      	ldr	r2, [sp, #16]
 800f68a:	2a15      	cmp	r2, #21
 800f68c:	dd1f      	ble.n	800f6ce <st_sssa8_fully_connected+0x506>
 800f68e:	9a07      	ldr	r2, [sp, #28]
 800f690:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f692:	fb53 1302 	smmla	r3, r3, r2, r1
 800f696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f698:	4113      	asrs	r3, r2
 800f69a:	9a08      	ldr	r2, [sp, #32]
 800f69c:	4413      	add	r3, r2
 800f69e:	f303 0307 	ssat	r3, #8, r3
 800f6a2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f6a6:	f10e 0e01 	add.w	lr, lr, #1
 800f6aa:	9b05      	ldr	r3, [sp, #20]
 800f6ac:	459e      	cmp	lr, r3
 800f6ae:	f43f af52 	beq.w	800f556 <st_sssa8_fully_connected+0x38e>
 800f6b2:	f1bc 0f0f 	cmp.w	ip, #15
 800f6b6:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6ba:	dc80      	bgt.n	800f5be <st_sssa8_fully_connected+0x3f6>
 800f6bc:	462a      	mov	r2, r5
 800f6be:	2500      	movs	r5, #0
 800f6c0:	9f03      	ldr	r7, [sp, #12]
 800f6c2:	45ac      	cmp	ip, r5
 800f6c4:	dcd2      	bgt.n	800f66c <st_sssa8_fully_connected+0x4a4>
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	9a04      	ldr	r2, [sp, #16]
 800f6ca:	2a15      	cmp	r2, #21
 800f6cc:	dcdf      	bgt.n	800f68e <st_sssa8_fully_connected+0x4c6>
 800f6ce:	2a00      	cmp	r2, #0
 800f6d0:	dd42      	ble.n	800f758 <st_sssa8_fully_connected+0x590>
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800f6d8:	fb53 4301 	smmla	r3, r3, r1, r4
 800f6dc:	4113      	asrs	r3, r2
 800f6de:	f303 0307 	ssat	r3, #8, r3
 800f6e2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f6e6:	e7de      	b.n	800f6a6 <st_sssa8_fully_connected+0x4de>
 800f6e8:	2a00      	cmp	r2, #0
 800f6ea:	dd13      	ble.n	800f714 <st_sssa8_fully_connected+0x54c>
 800f6ec:	0049      	lsls	r1, r1, #1
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800f6f4:	fb51 5100 	smmla	r1, r1, r0, r5
 800f6f8:	fb53 5300 	smmla	r3, r3, r0, r5
 800f6fc:	4111      	asrs	r1, r2
 800f6fe:	f301 0107 	ssat	r1, #8, r1
 800f702:	9806      	ldr	r0, [sp, #24]
 800f704:	4113      	asrs	r3, r2
 800f706:	f800 1c02 	strb.w	r1, [r0, #-2]
 800f70a:	f303 0307 	ssat	r3, #8, r3
 800f70e:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f712:	e6bd      	b.n	800f490 <st_sssa8_fully_connected+0x2c8>
 800f714:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f716:	fa01 f200 	lsl.w	r2, r1, r0
 800f71a:	f302 021f 	ssat	r2, #32, r2
 800f71e:	9907      	ldr	r1, [sp, #28]
 800f720:	fb52 f211 	smmulr	r2, r2, r1
 800f724:	4083      	lsls	r3, r0
 800f726:	f303 031f 	ssat	r3, #32, r3
 800f72a:	fb53 f311 	smmulr	r3, r3, r1
 800f72e:	9908      	ldr	r1, [sp, #32]
 800f730:	440a      	add	r2, r1
 800f732:	f302 0207 	ssat	r2, #8, r2
 800f736:	9806      	ldr	r0, [sp, #24]
 800f738:	440b      	add	r3, r1
 800f73a:	f800 2c02 	strb.w	r2, [r0, #-2]
 800f73e:	f303 0307 	ssat	r3, #8, r3
 800f742:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f746:	e6a3      	b.n	800f490 <st_sssa8_fully_connected+0x2c8>
 800f748:	4634      	mov	r4, r6
 800f74a:	e64d      	b.n	800f3e8 <st_sssa8_fully_connected+0x220>
 800f74c:	462e      	mov	r6, r5
 800f74e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800f752:	f04f 0900 	mov.w	r9, #0
 800f756:	e60f      	b.n	800f378 <st_sssa8_fully_connected+0x1b0>
 800f758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f75a:	4093      	lsls	r3, r2
 800f75c:	f303 031f 	ssat	r3, #32, r3
 800f760:	9a07      	ldr	r2, [sp, #28]
 800f762:	fb53 f312 	smmulr	r3, r3, r2
 800f766:	9a08      	ldr	r2, [sp, #32]
 800f768:	4413      	add	r3, r2
 800f76a:	f303 0307 	ssat	r3, #8, r3
 800f76e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f772:	e798      	b.n	800f6a6 <st_sssa8_fully_connected+0x4de>
 800f774:	2a00      	cmp	r2, #0
 800f776:	dd0d      	ble.n	800f794 <st_sssa8_fully_connected+0x5cc>
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800f77e:	fb53 0301 	smmla	r3, r3, r1, r0
 800f782:	4113      	asrs	r3, r2
 800f784:	f303 0307 	ssat	r3, #8, r3
 800f788:	2000      	movs	r0, #0
 800f78a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f78c:	7013      	strb	r3, [r2, #0]
 800f78e:	b017      	add	sp, #92	; 0x5c
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	f1c2 0201 	rsb	r2, r2, #1
 800f798:	4093      	lsls	r3, r2
 800f79a:	f303 031f 	ssat	r3, #32, r3
 800f79e:	9a07      	ldr	r2, [sp, #28]
 800f7a0:	fb53 f312 	smmulr	r3, r3, r2
 800f7a4:	9a08      	ldr	r2, [sp, #32]
 800f7a6:	441a      	add	r2, r3
 800f7a8:	f302 0307 	ssat	r3, #8, r2
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f7b0:	7013      	strb	r3, [r2, #0]
 800f7b2:	b017      	add	sp, #92	; 0x5c
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	462e      	mov	r6, r5
 800f7ba:	e69f      	b.n	800f4fc <st_sssa8_fully_connected+0x334>

0800f7bc <ai_padding_opt_init>:
 800f7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7c0:	2700      	movs	r7, #0
 800f7c2:	9c07      	ldr	r4, [sp, #28]
 800f7c4:	e9c0 7700 	strd	r7, r7, [r0]
 800f7c8:	6087      	str	r7, [r0, #8]
 800f7ca:	46b9      	mov	r9, r7
 800f7cc:	690d      	ldr	r5, [r1, #16]
 800f7ce:	f1c5 0c00 	rsb	ip, r5, #0
 800f7d2:	689d      	ldr	r5, [r3, #8]
 800f7d4:	42bd      	cmp	r5, r7
 800f7d6:	dd1c      	ble.n	800f812 <ai_padding_opt_init+0x56>
 800f7d8:	463e      	mov	r6, r7
 800f7da:	46be      	mov	lr, r7
 800f7dc:	e010      	b.n	800f800 <ai_padding_opt_init+0x44>
 800f7de:	6895      	ldr	r5, [r2, #8]
 800f7e0:	eba5 080c 	sub.w	r8, r5, ip
 800f7e4:	68a5      	ldr	r5, [r4, #8]
 800f7e6:	45a8      	cmp	r8, r5
 800f7e8:	da10      	bge.n	800f80c <ai_padding_opt_init+0x50>
 800f7ea:	f109 0901 	add.w	r9, r9, #1
 800f7ee:	f8c0 9008 	str.w	r9, [r0, #8]
 800f7f2:	688d      	ldr	r5, [r1, #8]
 800f7f4:	f10e 0e01 	add.w	lr, lr, #1
 800f7f8:	44ac      	add	ip, r5
 800f7fa:	689d      	ldr	r5, [r3, #8]
 800f7fc:	4575      	cmp	r5, lr
 800f7fe:	dd09      	ble.n	800f814 <ai_padding_opt_init+0x58>
 800f800:	f1bc 0f00 	cmp.w	ip, #0
 800f804:	daeb      	bge.n	800f7de <ai_padding_opt_init+0x22>
 800f806:	3601      	adds	r6, #1
 800f808:	6006      	str	r6, [r0, #0]
 800f80a:	e7f2      	b.n	800f7f2 <ai_padding_opt_init+0x36>
 800f80c:	3701      	adds	r7, #1
 800f80e:	6047      	str	r7, [r0, #4]
 800f810:	e7ef      	b.n	800f7f2 <ai_padding_opt_init+0x36>
 800f812:	463e      	mov	r6, r7
 800f814:	2500      	movs	r5, #0
 800f816:	f8c0 9014 	str.w	r9, [r0, #20]
 800f81a:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800f81e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800f822:	6205      	str	r5, [r0, #32]
 800f824:	694e      	ldr	r6, [r1, #20]
 800f826:	f1c6 0c00 	rsb	ip, r6, #0
 800f82a:	685e      	ldr	r6, [r3, #4]
 800f82c:	42ae      	cmp	r6, r5
 800f82e:	dd1c      	ble.n	800f86a <ai_padding_opt_init+0xae>
 800f830:	46ae      	mov	lr, r5
 800f832:	e00f      	b.n	800f854 <ai_padding_opt_init+0x98>
 800f834:	6855      	ldr	r5, [r2, #4]
 800f836:	6866      	ldr	r6, [r4, #4]
 800f838:	eba5 050c 	sub.w	r5, r5, ip
 800f83c:	42b5      	cmp	r5, r6
 800f83e:	da10      	bge.n	800f862 <ai_padding_opt_init+0xa6>
 800f840:	6a05      	ldr	r5, [r0, #32]
 800f842:	3501      	adds	r5, #1
 800f844:	6205      	str	r5, [r0, #32]
 800f846:	68cd      	ldr	r5, [r1, #12]
 800f848:	f10e 0e01 	add.w	lr, lr, #1
 800f84c:	44ac      	add	ip, r5
 800f84e:	685d      	ldr	r5, [r3, #4]
 800f850:	4575      	cmp	r5, lr
 800f852:	dd0a      	ble.n	800f86a <ai_padding_opt_init+0xae>
 800f854:	f1bc 0f00 	cmp.w	ip, #0
 800f858:	daec      	bge.n	800f834 <ai_padding_opt_init+0x78>
 800f85a:	6985      	ldr	r5, [r0, #24]
 800f85c:	3501      	adds	r5, #1
 800f85e:	6185      	str	r5, [r0, #24]
 800f860:	e7f1      	b.n	800f846 <ai_padding_opt_init+0x8a>
 800f862:	69c5      	ldr	r5, [r0, #28]
 800f864:	3501      	adds	r5, #1
 800f866:	61c5      	str	r5, [r0, #28]
 800f868:	e7ed      	b.n	800f846 <ai_padding_opt_init+0x8a>
 800f86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f86e:	bf00      	nop

0800f870 <ai_padding_opt_phase1>:
 800f870:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800f874:	b923      	cbnz	r3, 800f880 <ai_padding_opt_phase1+0x10>
 800f876:	b17a      	cbz	r2, 800f898 <ai_padding_opt_phase1+0x28>
 800f878:	3a01      	subs	r2, #1
 800f87a:	8483      	strh	r3, [r0, #36]	; 0x24
 800f87c:	61c2      	str	r2, [r0, #28]
 800f87e:	e004      	b.n	800f88a <ai_padding_opt_phase1+0x1a>
 800f880:	b152      	cbz	r2, 800f898 <ai_padding_opt_phase1+0x28>
 800f882:	2201      	movs	r2, #1
 800f884:	3b01      	subs	r3, #1
 800f886:	8482      	strh	r2, [r0, #36]	; 0x24
 800f888:	6183      	str	r3, [r0, #24]
 800f88a:	68c3      	ldr	r3, [r0, #12]
 800f88c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800f890:	6003      	str	r3, [r0, #0]
 800f892:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f896:	4770      	bx	lr
 800f898:	6a03      	ldr	r3, [r0, #32]
 800f89a:	2201      	movs	r2, #1
 800f89c:	3b01      	subs	r3, #1
 800f89e:	8482      	strh	r2, [r0, #36]	; 0x24
 800f8a0:	6203      	str	r3, [r0, #32]
 800f8a2:	e7f2      	b.n	800f88a <ai_padding_opt_phase1+0x1a>

0800f8a4 <st_sssa8_ch_nn_mat_mult_kernel>:
 800f8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a8:	b09d      	sub	sp, #116	; 0x74
 800f8aa:	085e      	lsrs	r6, r3, #1
 800f8ac:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800f8ae:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800f8b2:	441d      	add	r5, r3
 800f8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f8b6:	9111      	str	r1, [sp, #68]	; 0x44
 800f8b8:	9219      	str	r2, [sp, #100]	; 0x64
 800f8ba:	940b      	str	r4, [sp, #44]	; 0x2c
 800f8bc:	9518      	str	r5, [sp, #96]	; 0x60
 800f8be:	961b      	str	r6, [sp, #108]	; 0x6c
 800f8c0:	f000 8276 	beq.w	800fdb0 <st_sssa8_ch_nn_mat_mult_kernel+0x50c>
 800f8c4:	eb01 0744 	add.w	r7, r1, r4, lsl #1
 800f8c8:	4696      	mov	lr, r2
 800f8ca:	1e72      	subs	r2, r6, #1
 800f8cc:	460e      	mov	r6, r1
 800f8ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f8d0:	f1a4 0310 	sub.w	r3, r4, #16
 800f8d4:	b292      	uxth	r2, r2
 800f8d6:	f8df 8768 	ldr.w	r8, [pc, #1896]	; 8010040 <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800f8da:	3108      	adds	r1, #8
 800f8dc:	091b      	lsrs	r3, r3, #4
 800f8de:	4684      	mov	ip, r0
 800f8e0:	9714      	str	r7, [sp, #80]	; 0x50
 800f8e2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8e6:	4672      	mov	r2, lr
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	3208      	adds	r2, #8
 800f8ec:	9113      	str	r1, [sp, #76]	; 0x4c
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	3c03      	subs	r4, #3
 800f8f2:	920c      	str	r2, [sp, #48]	; 0x30
 800f8f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f8f6:	9412      	str	r4, [sp, #72]	; 0x48
 800f8f8:	3204      	adds	r2, #4
 800f8fa:	9206      	str	r2, [sp, #24]
 800f8fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f8fe:	3204      	adds	r2, #4
 800f900:	9207      	str	r2, [sp, #28]
 800f902:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f904:	3204      	adds	r2, #4
 800f906:	9208      	str	r2, [sp, #32]
 800f908:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f90a:	3201      	adds	r2, #1
 800f90c:	9209      	str	r2, [sp, #36]	; 0x24
 800f90e:	1c6a      	adds	r2, r5, #1
 800f910:	920a      	str	r2, [sp, #40]	; 0x28
 800f912:	011a      	lsls	r2, r3, #4
 800f914:	920d      	str	r2, [sp, #52]	; 0x34
 800f916:	eb06 1243 	add.w	r2, r6, r3, lsl #5
 800f91a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800f91e:	9216      	str	r2, [sp, #88]	; 0x58
 800f920:	9315      	str	r3, [sp, #84]	; 0x54
 800f922:	1f0b      	subs	r3, r1, #4
 800f924:	9317      	str	r3, [sp, #92]	; 0x5c
 800f926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f928:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f92a:	eb0c 0003 	add.w	r0, ip, r3
 800f92e:	2b0f      	cmp	r3, #15
 800f930:	e951 2b02 	ldrd	r2, fp, [r1, #-8]
 800f934:	9002      	str	r0, [sp, #8]
 800f936:	f340 8337 	ble.w	800ffa8 <st_sssa8_ch_nn_mat_mult_kernel+0x704>
 800f93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f93c:	4659      	mov	r1, fp
 800f93e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f940:	4463      	add	r3, ip
 800f942:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f944:	9000      	str	r0, [sp, #0]
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	4613      	mov	r3, r2
 800f94a:	f8dc 7000 	ldr.w	r7, [ip]
 800f94e:	9800      	ldr	r0, [sp, #0]
 800f950:	fa2f fa87 	sxtb16	sl, r7
 800f954:	f8d0 e000 	ldr.w	lr, [r0]
 800f958:	ea4f 2737 	mov.w	r7, r7, ror #8
 800f95c:	fa2f f787 	sxtb16	r7, r7
 800f960:	ea07 0008 	and.w	r0, r7, r8
 800f964:	fa1f f98a 	uxth.w	r9, sl
 800f968:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800f96c:	ea4f 2a3e 	mov.w	sl, lr, ror #8
 800f970:	fa2f fe8e 	sxtb16	lr, lr
 800f974:	fa1f f48e 	uxth.w	r4, lr
 800f978:	fa2f fa8a 	sxtb16	sl, sl
 800f97c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f980:	ea0a 0a08 	and.w	sl, sl, r8
 800f984:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800f988:	6837      	ldr	r7, [r6, #0]
 800f98a:	ea4a 4a1e 	orr.w	sl, sl, lr, lsr #16
 800f98e:	f8d5 e000 	ldr.w	lr, [r5]
 800f992:	fb29 220e 	smlad	r2, r9, lr, r2
 800f996:	fb29 3307 	smlad	r3, r9, r7, r3
 800f99a:	fb24 bb0e 	smlad	fp, r4, lr, fp
 800f99e:	fb24 1707 	smlad	r7, r4, r7, r1
 800f9a2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800f9a6:	6874      	ldr	r4, [r6, #4]
 800f9a8:	fb20 220e 	smlad	r2, r0, lr, r2
 800f9ac:	fb20 3304 	smlad	r3, r0, r4, r3
 800f9b0:	fb2a be0e 	smlad	lr, sl, lr, fp
 800f9b4:	fb2a 7704 	smlad	r7, sl, r4, r7
 800f9b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f9bc:	9800      	ldr	r0, [sp, #0]
 800f9be:	fa2f fa81 	sxtb16	sl, r1
 800f9c2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f9c6:	fa1f f48a 	uxth.w	r4, sl
 800f9ca:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f9ce:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800f9d2:	fa2f f181 	sxtb16	r1, r1
 800f9d6:	ea01 0008 	and.w	r0, r1, r8
 800f9da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f9de:	ea4f 2139 	mov.w	r1, r9, ror #8
 800f9e2:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800f9e6:	fa2f f989 	sxtb16	r9, r9
 800f9ea:	fa1f fa89 	uxth.w	sl, r9
 800f9ee:	fa2f f181 	sxtb16	r1, r1
 800f9f2:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800f9f6:	ea01 0108 	and.w	r1, r1, r8
 800f9fa:	ea41 4119 	orr.w	r1, r1, r9, lsr #16
 800f9fe:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800fa02:	fb24 220b 	smlad	r2, r4, fp, r2
 800fa06:	fb24 3409 	smlad	r4, r4, r9, r3
 800fa0a:	fb2a eb0b 	smlad	fp, sl, fp, lr
 800fa0e:	fb2a 7a09 	smlad	sl, sl, r9, r7
 800fa12:	68eb      	ldr	r3, [r5, #12]
 800fa14:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800fa18:	fb20 2203 	smlad	r2, r0, r3, r2
 800fa1c:	fb20 400e 	smlad	r0, r0, lr, r4
 800fa20:	fb21 bb03 	smlad	fp, r1, r3, fp
 800fa24:	fb21 aa0e 	smlad	sl, r1, lr, sl
 800fa28:	9b00      	ldr	r3, [sp, #0]
 800fa2a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800fa2e:	689f      	ldr	r7, [r3, #8]
 800fa30:	fa2f f381 	sxtb16	r3, r1
 800fa34:	b29c      	uxth	r4, r3
 800fa36:	ea4f 2131 	mov.w	r1, r1, ror #8
 800fa3a:	fa2f f181 	sxtb16	r1, r1
 800fa3e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fa42:	ea01 0108 	and.w	r1, r1, r8
 800fa46:	fa2f fe87 	sxtb16	lr, r7
 800fa4a:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800fa4e:	fa1f f98e 	uxth.w	r9, lr
 800fa52:	ea4f 2337 	mov.w	r3, r7, ror #8
 800fa56:	fa2f f383 	sxtb16	r3, r3
 800fa5a:	ea03 0708 	and.w	r7, r3, r8
 800fa5e:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
 800fa62:	692b      	ldr	r3, [r5, #16]
 800fa64:	ea47 471e 	orr.w	r7, r7, lr, lsr #16
 800fa68:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800fa6c:	fb24 2203 	smlad	r2, r4, r3, r2
 800fa70:	fb24 000e 	smlad	r0, r4, lr, r0
 800fa74:	fb29 b303 	smlad	r3, r9, r3, fp
 800fa78:	fb29 aa0e 	smlad	sl, r9, lr, sl
 800fa7c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800fa80:	6974      	ldr	r4, [r6, #20]
 800fa82:	fb21 220e 	smlad	r2, r1, lr, r2
 800fa86:	fb21 0004 	smlad	r0, r1, r4, r0
 800fa8a:	fb27 330e 	smlad	r3, r7, lr, r3
 800fa8e:	fb27 a704 	smlad	r7, r7, r4, sl
 800fa92:	9900      	ldr	r1, [sp, #0]
 800fa94:	f10c 0c10 	add.w	ip, ip, #16
 800fa98:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800fa9c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800faa0:	3110      	adds	r1, #16
 800faa2:	fa2f fe84 	sxtb16	lr, r4
 800faa6:	9100      	str	r1, [sp, #0]
 800faa8:	fa1f f18e 	uxth.w	r1, lr
 800faac:	ea4f 2434 	mov.w	r4, r4, ror #8
 800fab0:	f8d5 a018 	ldr.w	sl, [r5, #24]
 800fab4:	fa2f f484 	sxtb16	r4, r4
 800fab8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fabc:	ea04 0408 	and.w	r4, r4, r8
 800fac0:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800fac4:	ea4f 2e39 	mov.w	lr, r9, ror #8
 800fac8:	fa2f f989 	sxtb16	r9, r9
 800facc:	fa1f fb89 	uxth.w	fp, r9
 800fad0:	fa2f fe8e 	sxtb16	lr, lr
 800fad4:	ea4b 4b0e 	orr.w	fp, fp, lr, lsl #16
 800fad8:	ea0e 0e08 	and.w	lr, lr, r8
 800fadc:	ea4e 4e19 	orr.w	lr, lr, r9, lsr #16
 800fae0:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800fae4:	fb21 220a 	smlad	r2, r1, sl, r2
 800fae8:	fb21 0009 	smlad	r0, r1, r9, r0
 800faec:	fb2b 3a0a 	smlad	sl, fp, sl, r3
 800faf0:	fb2b 7909 	smlad	r9, fp, r9, r7
 800faf4:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800faf8:	3620      	adds	r6, #32
 800fafa:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800fafe:	3520      	adds	r5, #32
 800fb00:	fb24 220b 	smlad	r2, r4, fp, r2
 800fb04:	fb24 0307 	smlad	r3, r4, r7, r0
 800fb08:	fb2e ab0b 	smlad	fp, lr, fp, sl
 800fb0c:	fb2e 9107 	smlad	r1, lr, r7, r9
 800fb10:	9801      	ldr	r0, [sp, #4]
 800fb12:	4584      	cmp	ip, r0
 800fb14:	f47f af19 	bne.w	800f94a <st_sssa8_ch_nn_mat_mult_kernel+0xa6>
 800fb18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fb1a:	9802      	ldr	r0, [sp, #8]
 800fb1c:	9405      	str	r4, [sp, #20]
 800fb1e:	4420      	add	r0, r4
 800fb20:	9002      	str	r0, [sp, #8]
 800fb22:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fb24:	9004      	str	r0, [sp, #16]
 800fb26:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fb28:	9003      	str	r0, [sp, #12]
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fb2e:	42a0      	cmp	r0, r4
 800fb30:	da63      	bge.n	800fbfa <st_sssa8_ch_nn_mat_mult_kernel+0x356>
 800fb32:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800fb34:	9f01      	ldr	r7, [sp, #4]
 800fb36:	1a20      	subs	r0, r4, r0
 800fb38:	f8dd a008 	ldr.w	sl, [sp, #8]
 800fb3c:	0880      	lsrs	r0, r0, #2
 800fb3e:	900f      	str	r0, [sp, #60]	; 0x3c
 800fb40:	3001      	adds	r0, #1
 800fb42:	e9dd ce03 	ldrd	ip, lr, [sp, #12]
 800fb46:	0084      	lsls	r4, r0, #2
 800fb48:	900e      	str	r0, [sp, #56]	; 0x38
 800fb4a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800fb4e:	9410      	str	r4, [sp, #64]	; 0x40
 800fb50:	e9cd a000 	strd	sl, r0, [sp]
 800fb54:	9c00      	ldr	r4, [sp, #0]
 800fb56:	f857 0b04 	ldr.w	r0, [r7], #4
 800fb5a:	f854 9b04 	ldr.w	r9, [r4], #4
 800fb5e:	f8dc a000 	ldr.w	sl, [ip]
 800fb62:	9400      	str	r4, [sp, #0]
 800fb64:	fa2f f480 	sxtb16	r4, r0
 800fb68:	b2a6      	uxth	r6, r4
 800fb6a:	ea4f 2030 	mov.w	r0, r0, ror #8
 800fb6e:	fa2f f080 	sxtb16	r0, r0
 800fb72:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800fb76:	ea00 0008 	and.w	r0, r0, r8
 800fb7a:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800fb7e:	ea4f 2439 	mov.w	r4, r9, ror #8
 800fb82:	fa2f f989 	sxtb16	r9, r9
 800fb86:	fa1f f589 	uxth.w	r5, r9
 800fb8a:	fa2f f484 	sxtb16	r4, r4
 800fb8e:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800fb92:	ea04 0408 	and.w	r4, r4, r8
 800fb96:	ea44 4419 	orr.w	r4, r4, r9, lsr #16
 800fb9a:	f8de 9000 	ldr.w	r9, [lr]
 800fb9e:	fb26 220a 	smlad	r2, r6, sl, r2
 800fba2:	fb26 3309 	smlad	r3, r6, r9, r3
 800fba6:	fb25 bb0a 	smlad	fp, r5, sl, fp
 800fbaa:	fb25 1109 	smlad	r1, r5, r9, r1
 800fbae:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800fbb2:	f10e 0e08 	add.w	lr, lr, #8
 800fbb6:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 800fbba:	f10c 0c08 	add.w	ip, ip, #8
 800fbbe:	fb20 2205 	smlad	r2, r0, r5, r2
 800fbc2:	fb20 3306 	smlad	r3, r0, r6, r3
 800fbc6:	fb24 bb05 	smlad	fp, r4, r5, fp
 800fbca:	fb24 1106 	smlad	r1, r4, r6, r1
 800fbce:	9801      	ldr	r0, [sp, #4]
 800fbd0:	4287      	cmp	r7, r0
 800fbd2:	d1bf      	bne.n	800fb54 <st_sssa8_ch_nn_mat_mult_kernel+0x2b0>
 800fbd4:	9802      	ldr	r0, [sp, #8]
 800fbd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800fbd8:	4420      	add	r0, r4
 800fbda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fbdc:	9002      	str	r0, [sp, #8]
 800fbde:	9805      	ldr	r0, [sp, #20]
 800fbe0:	3004      	adds	r0, #4
 800fbe2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800fbe6:	9c04      	ldr	r4, [sp, #16]
 800fbe8:	9005      	str	r0, [sp, #20]
 800fbea:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fbec:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800fbf0:	9404      	str	r4, [sp, #16]
 800fbf2:	9c03      	ldr	r4, [sp, #12]
 800fbf4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800fbf8:	9003      	str	r0, [sp, #12]
 800fbfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fbfc:	9f05      	ldr	r7, [sp, #20]
 800fbfe:	42be      	cmp	r6, r7
 800fc00:	dd5e      	ble.n	800fcc0 <st_sssa8_ch_nn_mat_mult_kernel+0x41c>
 800fc02:	9801      	ldr	r0, [sp, #4]
 800fc04:	9c03      	ldr	r4, [sp, #12]
 800fc06:	f990 5000 	ldrsb.w	r5, [r0]
 800fc0a:	9802      	ldr	r0, [sp, #8]
 800fc0c:	f9b4 4000 	ldrsh.w	r4, [r4]
 800fc10:	f990 0000 	ldrsb.w	r0, [r0]
 800fc14:	fb14 2205 	smlabb	r2, r4, r5, r2
 800fc18:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800fc1c:	9c04      	ldr	r4, [sp, #16]
 800fc1e:	f9b4 4000 	ldrsh.w	r4, [r4]
 800fc22:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fc26:	1c78      	adds	r0, r7, #1
 800fc28:	fb14 3305 	smlabb	r3, r4, r5, r3
 800fc2c:	4286      	cmp	r6, r0
 800fc2e:	dd41      	ble.n	800fcb4 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800fc30:	9801      	ldr	r0, [sp, #4]
 800fc32:	9c03      	ldr	r4, [sp, #12]
 800fc34:	f990 5001 	ldrsb.w	r5, [r0, #1]
 800fc38:	9802      	ldr	r0, [sp, #8]
 800fc3a:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fc3e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800fc42:	fb14 2205 	smlabb	r2, r4, r5, r2
 800fc46:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800fc4a:	9c04      	ldr	r4, [sp, #16]
 800fc4c:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fc50:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fc54:	1cb8      	adds	r0, r7, #2
 800fc56:	fb14 3305 	smlabb	r3, r4, r5, r3
 800fc5a:	4286      	cmp	r6, r0
 800fc5c:	dd2a      	ble.n	800fcb4 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800fc5e:	9801      	ldr	r0, [sp, #4]
 800fc60:	9c03      	ldr	r4, [sp, #12]
 800fc62:	f990 5002 	ldrsb.w	r5, [r0, #2]
 800fc66:	9802      	ldr	r0, [sp, #8]
 800fc68:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800fc6c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800fc70:	fb14 2205 	smlabb	r2, r4, r5, r2
 800fc74:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800fc78:	9c04      	ldr	r4, [sp, #16]
 800fc7a:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800fc7e:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fc82:	1cf8      	adds	r0, r7, #3
 800fc84:	fb14 3305 	smlabb	r3, r4, r5, r3
 800fc88:	4286      	cmp	r6, r0
 800fc8a:	dd13      	ble.n	800fcb4 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800fc8c:	9d03      	ldr	r5, [sp, #12]
 800fc8e:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 800fc92:	9d02      	ldr	r5, [sp, #8]
 800fc94:	f995 4003 	ldrsb.w	r4, [r5, #3]
 800fc98:	9d04      	ldr	r5, [sp, #16]
 800fc9a:	fb10 bb04 	smlabb	fp, r0, r4, fp
 800fc9e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800fca2:	fb15 1104 	smlabb	r1, r5, r4, r1
 800fca6:	9c01      	ldr	r4, [sp, #4]
 800fca8:	f994 4003 	ldrsb.w	r4, [r4, #3]
 800fcac:	fb10 2204 	smlabb	r2, r0, r4, r2
 800fcb0:	fb15 3304 	smlabb	r3, r5, r4, r3
 800fcb4:	9c05      	ldr	r4, [sp, #20]
 800fcb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fcb8:	1b00      	subs	r0, r0, r4
 800fcba:	9c01      	ldr	r4, [sp, #4]
 800fcbc:	4404      	add	r4, r0
 800fcbe:	9401      	str	r4, [sp, #4]
 800fcc0:	9806      	ldr	r0, [sp, #24]
 800fcc2:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800fcc6:	2c15      	cmp	r4, #21
 800fcc8:	f340 8114 	ble.w	800fef4 <st_sssa8_ch_nn_mat_mult_kernel+0x650>
 800fccc:	1ea5      	subs	r5, r4, #2
 800fcce:	2001      	movs	r0, #1
 800fcd0:	3c01      	subs	r4, #1
 800fcd2:	fa00 f505 	lsl.w	r5, r0, r5
 800fcd6:	9807      	ldr	r0, [sp, #28]
 800fcd8:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800fcdc:	fb52 5200 	smmla	r2, r2, r0, r5
 800fce0:	fb53 5000 	smmla	r0, r3, r0, r5
 800fce4:	9b08      	ldr	r3, [sp, #32]
 800fce6:	4122      	asrs	r2, r4
 800fce8:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800fcec:	4432      	add	r2, r6
 800fcee:	f302 0207 	ssat	r2, #8, r2
 800fcf2:	4120      	asrs	r0, r4
 800fcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf6:	4430      	add	r0, r6
 800fcf8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fcfc:	f300 0007 	ssat	r0, #8, r0
 800fd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd02:	f803 0c01 	strb.w	r0, [r3, #-1]
 800fd06:	9b06      	ldr	r3, [sp, #24]
 800fd08:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800fd0c:	2b15      	cmp	r3, #21
 800fd0e:	f340 80d7 	ble.w	800fec0 <st_sssa8_ch_nn_mat_mult_kernel+0x61c>
 800fd12:	1e98      	subs	r0, r3, #2
 800fd14:	2201      	movs	r2, #1
 800fd16:	3b01      	subs	r3, #1
 800fd18:	fa02 f000 	lsl.w	r0, r2, r0
 800fd1c:	9a07      	ldr	r2, [sp, #28]
 800fd1e:	6814      	ldr	r4, [r2, #0]
 800fd20:	9a08      	ldr	r2, [sp, #32]
 800fd22:	fb5b 0904 	smmla	r9, fp, r4, r0
 800fd26:	6816      	ldr	r6, [r2, #0]
 800fd28:	fa49 f503 	asr.w	r5, r9, r3
 800fd2c:	fb51 0404 	smmla	r4, r1, r4, r0
 800fd30:	4435      	add	r5, r6
 800fd32:	f305 0507 	ssat	r5, #8, r5
 800fd36:	fa44 f303 	asr.w	r3, r4, r3
 800fd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd3c:	4433      	add	r3, r6
 800fd3e:	7015      	strb	r5, [r2, #0]
 800fd40:	f303 0307 	ssat	r3, #8, r3
 800fd44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd46:	7013      	strb	r3, [r2, #0]
 800fd48:	9a01      	ldr	r2, [sp, #4]
 800fd4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd4c:	9b06      	ldr	r3, [sp, #24]
 800fd4e:	440a      	add	r2, r1
 800fd50:	3304      	adds	r3, #4
 800fd52:	4694      	mov	ip, r2
 800fd54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd56:	9306      	str	r3, [sp, #24]
 800fd58:	3208      	adds	r2, #8
 800fd5a:	920c      	str	r2, [sp, #48]	; 0x30
 800fd5c:	9a07      	ldr	r2, [sp, #28]
 800fd5e:	3208      	adds	r2, #8
 800fd60:	9207      	str	r2, [sp, #28]
 800fd62:	9a08      	ldr	r2, [sp, #32]
 800fd64:	3208      	adds	r2, #8
 800fd66:	9208      	str	r2, [sp, #32]
 800fd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd6a:	3202      	adds	r2, #2
 800fd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800fd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd70:	3202      	adds	r2, #2
 800fd72:	920a      	str	r2, [sp, #40]	; 0x28
 800fd74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd76:	4293      	cmp	r3, r2
 800fd78:	f47f add5 	bne.w	800f926 <st_sssa8_ch_nn_mat_mult_kernel+0x82>
 800fd7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd7e:	4660      	mov	r0, ip
 800fd80:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fd82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fd86:	9228      	str	r2, [sp, #160]	; 0xa0
 800fd88:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fd8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fd8e:	9229      	str	r2, [sp, #164]	; 0xa4
 800fd90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800fd92:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800fd96:	922a      	str	r2, [sp, #168]	; 0xa8
 800fd98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fd9a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800fd9e:	9218      	str	r2, [sp, #96]	; 0x60
 800fda0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fda2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fda6:	9219      	str	r2, [sp, #100]	; 0x64
 800fda8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fdaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fdae:	9327      	str	r3, [sp, #156]	; 0x9c
 800fdb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fdb2:	07db      	lsls	r3, r3, #31
 800fdb4:	d57e      	bpl.n	800feb4 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800fdb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdb8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800fdba:	6819      	ldr	r1, [r3, #0]
 800fdbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdbe:	ea5f 0993 	movs.w	r9, r3, lsr #2
 800fdc2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800fdc6:	f000 8138 	beq.w	801003a <st_sssa8_ch_nn_mat_mult_kernel+0x796>
 800fdca:	4604      	mov	r4, r0
 800fdcc:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 800fdd0:	4646      	mov	r6, r8
 800fdd2:	460a      	mov	r2, r1
 800fdd4:	f8df e268 	ldr.w	lr, [pc, #616]	; 8010040 <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800fdd8:	f854 3b04 	ldr.w	r3, [r4], #4
 800fddc:	fa2f fa83 	sxtb16	sl, r3
 800fde0:	fa1f f08a 	uxth.w	r0, sl
 800fde4:	682f      	ldr	r7, [r5, #0]
 800fde6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800fdea:	fa2f f383 	sxtb16	r3, r3
 800fdee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800fdf2:	ea03 030e 	and.w	r3, r3, lr
 800fdf6:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 800fdfa:	fb20 1107 	smlad	r1, r0, r7, r1
 800fdfe:	6837      	ldr	r7, [r6, #0]
 800fe00:	fb20 2207 	smlad	r2, r0, r7, r2
 800fe04:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800fe08:	3608      	adds	r6, #8
 800fe0a:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800fe0e:	3508      	adds	r5, #8
 800fe10:	fb23 110a 	smlad	r1, r3, sl, r1
 800fe14:	fb23 2200 	smlad	r2, r3, r0, r2
 800fe18:	4564      	cmp	r4, ip
 800fe1a:	d1dd      	bne.n	800fdd8 <st_sssa8_ch_nn_mat_mult_kernel+0x534>
 800fe1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe1e:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 800fe22:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fe26:	9311      	str	r3, [sp, #68]	; 0x44
 800fe28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe2a:	f013 0303 	ands.w	r3, r3, #3
 800fe2e:	d020      	beq.n	800fe72 <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800fe30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800fe32:	3b01      	subs	r3, #1
 800fe34:	f99c 0000 	ldrsb.w	r0, [ip]
 800fe38:	882c      	ldrh	r4, [r5, #0]
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fe40:	f8b8 4000 	ldrh.w	r4, [r8]
 800fe44:	fb14 2200 	smlabb	r2, r4, r0, r2
 800fe48:	b19b      	cbz	r3, 800fe72 <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800fe4a:	f99c 0001 	ldrsb.w	r0, [ip, #1]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	886c      	ldrh	r4, [r5, #2]
 800fe52:	fb14 1100 	smlabb	r1, r4, r0, r1
 800fe56:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fe5a:	fb14 2200 	smlabb	r2, r4, r0, r2
 800fe5e:	d008      	beq.n	800fe72 <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800fe60:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800fe64:	88a8      	ldrh	r0, [r5, #4]
 800fe66:	fb10 1103 	smlabb	r1, r0, r3, r1
 800fe6a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800fe6e:	fb10 2203 	smlabb	r2, r0, r3, r2
 800fe72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fe74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe78:	2b15      	cmp	r3, #21
 800fe7a:	f340 80a0 	ble.w	800ffbe <st_sssa8_ch_nn_mat_mult_kernel+0x71a>
 800fe7e:	1e9e      	subs	r6, r3, #2
 800fe80:	1e5d      	subs	r5, r3, #1
 800fe82:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fe84:	2301      	movs	r3, #1
 800fe86:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800fe88:	6800      	ldr	r0, [r0, #0]
 800fe8a:	40b3      	lsls	r3, r6
 800fe8c:	6824      	ldr	r4, [r4, #0]
 800fe8e:	fb51 3100 	smmla	r1, r1, r0, r3
 800fe92:	fb52 3300 	smmla	r3, r2, r0, r3
 800fe96:	fa41 f205 	asr.w	r2, r1, r5
 800fe9a:	4422      	add	r2, r4
 800fe9c:	f302 0207 	ssat	r2, #8, r2
 800fea0:	412b      	asrs	r3, r5
 800fea2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800fea4:	4423      	add	r3, r4
 800fea6:	f800 2b01 	strb.w	r2, [r0], #1
 800feaa:	f303 0307 	ssat	r3, #8, r3
 800feae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800feb0:	902a      	str	r0, [sp, #168]	; 0xa8
 800feb2:	7013      	strb	r3, [r2, #0]
 800feb4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800feb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800feb8:	4418      	add	r0, r3
 800feba:	b01d      	add	sp, #116	; 0x74
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dd32      	ble.n	800ff2a <st_sssa8_ch_nn_mat_mult_kernel+0x686>
 800fec4:	004c      	lsls	r4, r1, #1
 800fec6:	9a07      	ldr	r2, [sp, #28]
 800fec8:	9908      	ldr	r1, [sp, #32]
 800feca:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800fece:	6812      	ldr	r2, [r2, #0]
 800fed0:	6809      	ldr	r1, [r1, #0]
 800fed2:	fb59 1902 	smmla	r9, r9, r2, r1
 800fed6:	fb54 1102 	smmla	r1, r4, r2, r1
 800feda:	fa49 f903 	asr.w	r9, r9, r3
 800fede:	f309 0907 	ssat	r9, #8, r9
 800fee2:	4119      	asrs	r1, r3
 800fee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fee6:	f883 9000 	strb.w	r9, [r3]
 800feea:	f301 0107 	ssat	r1, #8, r1
 800feee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef0:	7019      	strb	r1, [r3, #0]
 800fef2:	e729      	b.n	800fd48 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800fef4:	2c00      	cmp	r4, #0
 800fef6:	dd35      	ble.n	800ff64 <st_sssa8_ch_nn_mat_mult_kernel+0x6c0>
 800fef8:	0058      	lsls	r0, r3, #1
 800fefa:	9d08      	ldr	r5, [sp, #32]
 800fefc:	9b07      	ldr	r3, [sp, #28]
 800fefe:	0052      	lsls	r2, r2, #1
 800ff00:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ff04:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ff08:	fb52 5203 	smmla	r2, r2, r3, r5
 800ff0c:	fb50 5303 	smmla	r3, r0, r3, r5
 800ff10:	4122      	asrs	r2, r4
 800ff12:	f302 0207 	ssat	r2, #8, r2
 800ff16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff18:	4123      	asrs	r3, r4
 800ff1a:	f800 2c01 	strb.w	r2, [r0, #-1]
 800ff1e:	f303 0307 	ssat	r3, #8, r3
 800ff22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff24:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff28:	e6ed      	b.n	800fd06 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800ff2a:	f1c3 0301 	rsb	r3, r3, #1
 800ff2e:	fa0b f903 	lsl.w	r9, fp, r3
 800ff32:	f309 021f 	ssat	r2, #32, r9
 800ff36:	9807      	ldr	r0, [sp, #28]
 800ff38:	6800      	ldr	r0, [r0, #0]
 800ff3a:	fb52 f210 	smmulr	r2, r2, r0
 800ff3e:	4099      	lsls	r1, r3
 800ff40:	f301 011f 	ssat	r1, #32, r1
 800ff44:	fb51 f110 	smmulr	r1, r1, r0
 800ff48:	9808      	ldr	r0, [sp, #32]
 800ff4a:	6803      	ldr	r3, [r0, #0]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f303 0307 	ssat	r3, #8, r3
 800ff52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff54:	7013      	strb	r3, [r2, #0]
 800ff56:	6803      	ldr	r3, [r0, #0]
 800ff58:	440b      	add	r3, r1
 800ff5a:	f303 0307 	ssat	r3, #8, r3
 800ff5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff60:	7013      	strb	r3, [r2, #0]
 800ff62:	e6f1      	b.n	800fd48 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800ff64:	f1c4 0401 	rsb	r4, r4, #1
 800ff68:	40a2      	lsls	r2, r4
 800ff6a:	f302 021f 	ssat	r2, #32, r2
 800ff6e:	9807      	ldr	r0, [sp, #28]
 800ff70:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800ff74:	fb52 f215 	smmulr	r2, r2, r5
 800ff78:	fa03 f004 	lsl.w	r0, r3, r4
 800ff7c:	f300 001f 	ssat	r0, #32, r0
 800ff80:	fb50 f015 	smmulr	r0, r0, r5
 800ff84:	9c08      	ldr	r4, [sp, #32]
 800ff86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f303 0307 	ssat	r3, #8, r3
 800ff90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff92:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ff9a:	4403      	add	r3, r0
 800ff9c:	f303 0307 	ssat	r3, #8, r3
 800ffa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffa2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ffa6:	e6ae      	b.n	800fd06 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800ffa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffaa:	2000      	movs	r0, #0
 800ffac:	4659      	mov	r1, fp
 800ffae:	f8cd c004 	str.w	ip, [sp, #4]
 800ffb2:	9304      	str	r3, [sp, #16]
 800ffb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffb6:	9005      	str	r0, [sp, #20]
 800ffb8:	9303      	str	r3, [sp, #12]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	e5b6      	b.n	800fb2c <st_sssa8_ch_nn_mat_mult_kernel+0x288>
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd1b      	ble.n	800fffa <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 800ffc2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800ffc4:	0049      	lsls	r1, r1, #1
 800ffc6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800ffc8:	0052      	lsls	r2, r2, #1
 800ffca:	6800      	ldr	r0, [r0, #0]
 800ffcc:	6824      	ldr	r4, [r4, #0]
 800ffce:	fb51 4100 	smmla	r1, r1, r0, r4
 800ffd2:	fb52 4200 	smmla	r2, r2, r0, r4
 800ffd6:	fa41 f303 	asr.w	r3, r1, r3
 800ffda:	f303 0307 	ssat	r3, #8, r3
 800ffde:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ffe0:	f800 3b01 	strb.w	r3, [r0], #1
 800ffe4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ffe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffea:	fa42 f303 	asr.w	r3, r2, r3
 800ffee:	f303 0307 	ssat	r3, #8, r3
 800fff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fff4:	902a      	str	r0, [sp, #168]	; 0xa8
 800fff6:	7013      	strb	r3, [r2, #0]
 800fff8:	e75c      	b.n	800feb4 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800fffa:	f1c3 0001 	rsb	r0, r3, #1
 800fffe:	fa01 f300 	lsl.w	r3, r1, r0
 8010002:	f303 031f 	ssat	r3, #32, r3
 8010006:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010008:	6809      	ldr	r1, [r1, #0]
 801000a:	fb53 f311 	smmulr	r3, r3, r1
 801000e:	4082      	lsls	r2, r0
 8010010:	f302 021f 	ssat	r2, #32, r2
 8010014:	fb52 f211 	smmulr	r2, r2, r1
 8010018:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801001a:	6809      	ldr	r1, [r1, #0]
 801001c:	440b      	add	r3, r1
 801001e:	f303 0307 	ssat	r3, #8, r3
 8010022:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010024:	f801 3b01 	strb.w	r3, [r1], #1
 8010028:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4413      	add	r3, r2
 801002e:	f303 0307 	ssat	r3, #8, r3
 8010032:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010034:	912a      	str	r1, [sp, #168]	; 0xa8
 8010036:	7013      	strb	r3, [r2, #0]
 8010038:	e73c      	b.n	800feb4 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 801003a:	4684      	mov	ip, r0
 801003c:	460a      	mov	r2, r1
 801003e:	e6f3      	b.n	800fe28 <st_sssa8_ch_nn_mat_mult_kernel+0x584>
 8010040:	ffff0000 	.word	0xffff0000

08010044 <st_int8_to16_no_shift>:
 8010044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010048:	f1b2 0810 	subs.w	r8, r2, #16
 801004c:	f100 808c 	bmi.w	8010168 <st_int8_to16_no_shift+0x124>
 8010050:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010054:	4603      	mov	r3, r0
 8010056:	4c45      	ldr	r4, [pc, #276]	; (801016c <st_int8_to16_no_shift+0x128>)
 8010058:	f108 0801 	add.w	r8, r8, #1
 801005c:	eb01 1748 	add.w	r7, r1, r8, lsl #5
 8010060:	f8d3 e000 	ldr.w	lr, [r3]
 8010064:	3310      	adds	r3, #16
 8010066:	fa2f f69e 	sxtb16	r6, lr, ror #8
 801006a:	fa2f fe8e 	sxtb16	lr, lr
 801006e:	ea06 0504 	and.w	r5, r6, r4
 8010072:	fa1f f98e 	uxth.w	r9, lr
 8010076:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801007a:	3120      	adds	r1, #32
 801007c:	fa2f fa9c 	sxtb16	sl, ip, ror #8
 8010080:	ea49 4906 	orr.w	r9, r9, r6, lsl #16
 8010084:	ea45 4e1e 	orr.w	lr, r5, lr, lsr #16
 8010088:	ea0a 0504 	and.w	r5, sl, r4
 801008c:	fa2f fc8c 	sxtb16	ip, ip
 8010090:	fa1f f68c 	uxth.w	r6, ip
 8010094:	f841 9c20 	str.w	r9, [r1, #-32]
 8010098:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 801009c:	f841 ec1c 	str.w	lr, [r1, #-28]
 80100a0:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80100a4:	f841 cc14 	str.w	ip, [r1, #-20]
 80100a8:	f841 6c18 	str.w	r6, [r1, #-24]
 80100ac:	f853 ec08 	ldr.w	lr, [r3, #-8]
 80100b0:	f853 cc04 	ldr.w	ip, [r3, #-4]
 80100b4:	fa2f f59e 	sxtb16	r5, lr, ror #8
 80100b8:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80100bc:	ea05 0b04 	and.w	fp, r5, r4
 80100c0:	fa2f fe8e 	sxtb16	lr, lr
 80100c4:	fa2f fc8c 	sxtb16	ip, ip
 80100c8:	fa1f f98e 	uxth.w	r9, lr
 80100cc:	fa1f fa8c 	uxth.w	sl, ip
 80100d0:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 80100d4:	ea06 0504 	and.w	r5, r6, r4
 80100d8:	ea4b 4e1e 	orr.w	lr, fp, lr, lsr #16
 80100dc:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80100e0:	f841 9c10 	str.w	r9, [r1, #-16]
 80100e4:	f841 ec0c 	str.w	lr, [r1, #-12]
 80100e8:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 80100ec:	f841 6c08 	str.w	r6, [r1, #-8]
 80100f0:	428f      	cmp	r7, r1
 80100f2:	f841 cc04 	str.w	ip, [r1, #-4]
 80100f6:	d1b3      	bne.n	8010060 <st_int8_to16_no_shift+0x1c>
 80100f8:	ea4f 1708 	mov.w	r7, r8, lsl #4
 80100fc:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 8010100:	f1a2 0804 	sub.w	r8, r2, #4
 8010104:	45b8      	cmp	r8, r7
 8010106:	db23      	blt.n	8010150 <st_int8_to16_no_shift+0x10c>
 8010108:	eba8 0807 	sub.w	r8, r8, r7
 801010c:	4686      	mov	lr, r0
 801010e:	4e17      	ldr	r6, [pc, #92]	; (801016c <st_int8_to16_no_shift+0x128>)
 8010110:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8010114:	f108 0901 	add.w	r9, r8, #1
 8010118:	eb01 05c9 	add.w	r5, r1, r9, lsl #3
 801011c:	f85e 3b04 	ldr.w	r3, [lr], #4
 8010120:	3108      	adds	r1, #8
 8010122:	fa2f fa93 	sxtb16	sl, r3, ror #8
 8010126:	fa2f f383 	sxtb16	r3, r3
 801012a:	ea0a 0406 	and.w	r4, sl, r6
 801012e:	fa1f fc83 	uxth.w	ip, r3
 8010132:	428d      	cmp	r5, r1
 8010134:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 8010138:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 801013c:	f841 cc08 	str.w	ip, [r1, #-8]
 8010140:	f841 3c04 	str.w	r3, [r1, #-4]
 8010144:	d1ea      	bne.n	801011c <st_int8_to16_no_shift+0xd8>
 8010146:	3704      	adds	r7, #4
 8010148:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801014c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8010150:	42ba      	cmp	r2, r7
 8010152:	dd07      	ble.n	8010164 <st_int8_to16_no_shift+0x120>
 8010154:	1bd2      	subs	r2, r2, r7
 8010156:	4402      	add	r2, r0
 8010158:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801015c:	4290      	cmp	r0, r2
 801015e:	f821 3b02 	strh.w	r3, [r1], #2
 8010162:	d1f9      	bne.n	8010158 <st_int8_to16_no_shift+0x114>
 8010164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010168:	2700      	movs	r7, #0
 801016a:	e7c9      	b.n	8010100 <st_int8_to16_no_shift+0xbc>
 801016c:	ffff0000 	.word	0xffff0000

08010170 <st_int8_to16_no_shift_interleaved>:
 8010170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010172:	f1b2 0510 	subs.w	r5, r2, #16
 8010176:	d449      	bmi.n	801020c <st_int8_to16_no_shift_interleaved+0x9c>
 8010178:	092d      	lsrs	r5, r5, #4
 801017a:	4603      	mov	r3, r0
 801017c:	3501      	adds	r5, #1
 801017e:	eb01 1445 	add.w	r4, r1, r5, lsl #5
 8010182:	f8d3 e000 	ldr.w	lr, [r3]
 8010186:	3120      	adds	r1, #32
 8010188:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801018c:	3310      	adds	r3, #16
 801018e:	fa2f f69e 	sxtb16	r6, lr, ror #8
 8010192:	fa2f fe8e 	sxtb16	lr, lr
 8010196:	f841 6c20 	str.w	r6, [r1, #-32]
 801019a:	fa2f f69c 	sxtb16	r6, ip, ror #8
 801019e:	fa2f fc8c 	sxtb16	ip, ip
 80101a2:	f841 6c18 	str.w	r6, [r1, #-24]
 80101a6:	f841 ec1c 	str.w	lr, [r1, #-28]
 80101aa:	f841 cc14 	str.w	ip, [r1, #-20]
 80101ae:	428c      	cmp	r4, r1
 80101b0:	f853 ec08 	ldr.w	lr, [r3, #-8]
 80101b4:	f853 cc04 	ldr.w	ip, [r3, #-4]
 80101b8:	fa2f f79e 	sxtb16	r7, lr, ror #8
 80101bc:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80101c0:	fa2f fe8e 	sxtb16	lr, lr
 80101c4:	fa2f fc8c 	sxtb16	ip, ip
 80101c8:	f841 7c10 	str.w	r7, [r1, #-16]
 80101cc:	f841 ec0c 	str.w	lr, [r1, #-12]
 80101d0:	f841 6c08 	str.w	r6, [r1, #-8]
 80101d4:	f841 cc04 	str.w	ip, [r1, #-4]
 80101d8:	d1d3      	bne.n	8010182 <st_int8_to16_no_shift_interleaved+0x12>
 80101da:	012b      	lsls	r3, r5, #4
 80101dc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80101e0:	3a04      	subs	r2, #4
 80101e2:	429a      	cmp	r2, r3
 80101e4:	db11      	blt.n	801020a <st_int8_to16_no_shift_interleaved+0x9a>
 80101e6:	1ad2      	subs	r2, r2, r3
 80101e8:	0892      	lsrs	r2, r2, #2
 80101ea:	3201      	adds	r2, #1
 80101ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80101f0:	3108      	adds	r1, #8
 80101f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80101f6:	fa2f fc93 	sxtb16	ip, r3, ror #8
 80101fa:	428a      	cmp	r2, r1
 80101fc:	f841 cc08 	str.w	ip, [r1, #-8]
 8010200:	fa2f f383 	sxtb16	r3, r3
 8010204:	f841 3c04 	str.w	r3, [r1, #-4]
 8010208:	d1f2      	bne.n	80101f0 <st_int8_to16_no_shift_interleaved+0x80>
 801020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020c:	2300      	movs	r3, #0
 801020e:	e7e7      	b.n	80101e0 <st_int8_to16_no_shift_interleaved+0x70>

08010210 <st_int8_to16_dual>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	b08b      	sub	sp, #44	; 0x2c
 8010216:	4692      	mov	sl, r2
 8010218:	468b      	mov	fp, r1
 801021a:	eb00 0902 	add.w	r9, r0, r2
 801021e:	9309      	str	r3, [sp, #36]	; 0x24
 8010220:	085b      	lsrs	r3, r3, #1
 8010222:	9302      	str	r3, [sp, #8]
 8010224:	f000 810d 	beq.w	8010442 <st_int8_to16_dual+0x232>
 8010228:	3a10      	subs	r2, #16
 801022a:	f1aa 0304 	sub.w	r3, sl, #4
 801022e:	f8cd a004 	str.w	sl, [sp, #4]
 8010232:	9207      	str	r2, [sp, #28]
 8010234:	0912      	lsrs	r2, r2, #4
 8010236:	9306      	str	r3, [sp, #24]
 8010238:	3201      	adds	r2, #1
 801023a:	4ba4      	ldr	r3, [pc, #656]	; (80104cc <st_int8_to16_dual+0x2bc>)
 801023c:	0111      	lsls	r1, r2, #4
 801023e:	0192      	lsls	r2, r2, #6
 8010240:	9103      	str	r1, [sp, #12]
 8010242:	9208      	str	r2, [sp, #32]
 8010244:	9a07      	ldr	r2, [sp, #28]
 8010246:	2a00      	cmp	r2, #0
 8010248:	f2c0 8131 	blt.w	80104ae <st_int8_to16_dual+0x29e>
 801024c:	9a03      	ldr	r2, [sp, #12]
 801024e:	464d      	mov	r5, r9
 8010250:	1886      	adds	r6, r0, r2
 8010252:	465a      	mov	r2, fp
 8010254:	f8d0 c000 	ldr.w	ip, [r0]
 8010258:	3010      	adds	r0, #16
 801025a:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801025e:	fa2f fc8c 	sxtb16	ip, ip
 8010262:	fa1f fe8c 	uxth.w	lr, ip
 8010266:	682f      	ldr	r7, [r5, #0]
 8010268:	fa2f f197 	sxtb16	r1, r7, ror #8
 801026c:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 8010270:	401c      	ands	r4, r3
 8010272:	fa2f f787 	sxtb16	r7, r7
 8010276:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801027a:	f8c2 e000 	str.w	lr, [r2]
 801027e:	3510      	adds	r5, #16
 8010280:	3240      	adds	r2, #64	; 0x40
 8010282:	f842 4c38 	str.w	r4, [r2, #-56]
 8010286:	b2bc      	uxth	r4, r7
 8010288:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801028c:	4019      	ands	r1, r3
 801028e:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 8010292:	f842 4c3c 	str.w	r4, [r2, #-60]
 8010296:	f842 1c34 	str.w	r1, [r2, #-52]
 801029a:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 801029e:	4286      	cmp	r6, r0
 80102a0:	fa2f f49c 	sxtb16	r4, ip, ror #8
 80102a4:	fa2f fc8c 	sxtb16	ip, ip
 80102a8:	fa1f fe8c 	uxth.w	lr, ip
 80102ac:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 80102b0:	fa2f f197 	sxtb16	r1, r7, ror #8
 80102b4:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 80102b8:	ea04 0403 	and.w	r4, r4, r3
 80102bc:	fa2f f787 	sxtb16	r7, r7
 80102c0:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 80102c4:	f842 ec30 	str.w	lr, [r2, #-48]
 80102c8:	f842 4c28 	str.w	r4, [r2, #-40]
 80102cc:	b2bc      	uxth	r4, r7
 80102ce:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80102d2:	ea01 0103 	and.w	r1, r1, r3
 80102d6:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80102da:	f842 4c2c 	str.w	r4, [r2, #-44]
 80102de:	f842 1c24 	str.w	r1, [r2, #-36]
 80102e2:	f850 cc08 	ldr.w	ip, [r0, #-8]
 80102e6:	fa2f f49c 	sxtb16	r4, ip, ror #8
 80102ea:	fa2f fc8c 	sxtb16	ip, ip
 80102ee:	fa1f fe8c 	uxth.w	lr, ip
 80102f2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80102f6:	fa2f f197 	sxtb16	r1, r7, ror #8
 80102fa:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 80102fe:	ea04 0403 	and.w	r4, r4, r3
 8010302:	fa2f f787 	sxtb16	r7, r7
 8010306:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801030a:	f842 ec20 	str.w	lr, [r2, #-32]
 801030e:	f842 4c18 	str.w	r4, [r2, #-24]
 8010312:	b2bc      	uxth	r4, r7
 8010314:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010318:	ea01 0103 	and.w	r1, r1, r3
 801031c:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 8010320:	f842 4c1c 	str.w	r4, [r2, #-28]
 8010324:	f842 1c14 	str.w	r1, [r2, #-20]
 8010328:	f850 cc04 	ldr.w	ip, [r0, #-4]
 801032c:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8010330:	fa2f fc8c 	sxtb16	ip, ip
 8010334:	fa1f fe8c 	uxth.w	lr, ip
 8010338:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801033c:	fa2f f197 	sxtb16	r1, r7, ror #8
 8010340:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 8010344:	ea04 0403 	and.w	r4, r4, r3
 8010348:	fa2f f787 	sxtb16	r7, r7
 801034c:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 8010350:	f842 ec10 	str.w	lr, [r2, #-16]
 8010354:	f842 4c08 	str.w	r4, [r2, #-8]
 8010358:	b2bc      	uxth	r4, r7
 801035a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801035e:	ea01 0103 	and.w	r1, r1, r3
 8010362:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 8010366:	f842 4c0c 	str.w	r4, [r2, #-12]
 801036a:	f842 1c04 	str.w	r1, [r2, #-4]
 801036e:	f47f af71 	bne.w	8010254 <st_int8_to16_dual+0x44>
 8010372:	9a08      	ldr	r2, [sp, #32]
 8010374:	4493      	add	fp, r2
 8010376:	9a03      	ldr	r2, [sp, #12]
 8010378:	4690      	mov	r8, r2
 801037a:	4491      	add	r9, r2
 801037c:	9a06      	ldr	r2, [sp, #24]
 801037e:	4542      	cmp	r2, r8
 8010380:	f2c0 809b 	blt.w	80104ba <st_int8_to16_dual+0x2aa>
 8010384:	eba2 0a08 	sub.w	sl, r2, r8
 8010388:	46ce      	mov	lr, r9
 801038a:	465c      	mov	r4, fp
 801038c:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8010390:	f102 0a01 	add.w	sl, r2, #1
 8010394:	9204      	str	r2, [sp, #16]
 8010396:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 801039a:	ea4f 028a 	mov.w	r2, sl, lsl #2
 801039e:	9205      	str	r2, [sp, #20]
 80103a0:	f850 6b04 	ldr.w	r6, [r0], #4
 80103a4:	3410      	adds	r4, #16
 80103a6:	fa2f f196 	sxtb16	r1, r6, ror #8
 80103aa:	fa2f f686 	sxtb16	r6, r6
 80103ae:	fa1f fc86 	uxth.w	ip, r6
 80103b2:	f85e 5b04 	ldr.w	r5, [lr], #4
 80103b6:	fa2f f295 	sxtb16	r2, r5, ror #8
 80103ba:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 80103be:	4019      	ands	r1, r3
 80103c0:	fa2f f585 	sxtb16	r5, r5
 80103c4:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 80103c8:	42b8      	cmp	r0, r7
 80103ca:	f844 cc10 	str.w	ip, [r4, #-16]
 80103ce:	f844 1c08 	str.w	r1, [r4, #-8]
 80103d2:	b2a9      	uxth	r1, r5
 80103d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80103d8:	ea02 0203 	and.w	r2, r2, r3
 80103dc:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 80103e0:	f844 1c0c 	str.w	r1, [r4, #-12]
 80103e4:	f844 2c04 	str.w	r2, [r4, #-4]
 80103e8:	d1da      	bne.n	80103a0 <st_int8_to16_dual+0x190>
 80103ea:	9a05      	ldr	r2, [sp, #20]
 80103ec:	f108 0804 	add.w	r8, r8, #4
 80103f0:	eb0b 1b0a 	add.w	fp, fp, sl, lsl #4
 80103f4:	4491      	add	r9, r2
 80103f6:	9a04      	ldr	r2, [sp, #16]
 80103f8:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 80103fc:	9a01      	ldr	r2, [sp, #4]
 80103fe:	4542      	cmp	r2, r8
 8010400:	dd5f      	ble.n	80104c2 <st_int8_to16_dual+0x2b2>
 8010402:	eba2 0808 	sub.w	r8, r2, r8
 8010406:	4649      	mov	r1, r9
 8010408:	f10b 0204 	add.w	r2, fp, #4
 801040c:	eb07 0008 	add.w	r0, r7, r8
 8010410:	f917 4b01 	ldrsb.w	r4, [r7], #1
 8010414:	3204      	adds	r2, #4
 8010416:	f822 4c08 	strh.w	r4, [r2, #-8]
 801041a:	4287      	cmp	r7, r0
 801041c:	f911 4b01 	ldrsb.w	r4, [r1], #1
 8010420:	f822 4c06 	strh.w	r4, [r2, #-6]
 8010424:	d1f4      	bne.n	8010410 <st_int8_to16_dual+0x200>
 8010426:	44c1      	add	r9, r8
 8010428:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 801042c:	9a02      	ldr	r2, [sp, #8]
 801042e:	9901      	ldr	r1, [sp, #4]
 8010430:	3a01      	subs	r2, #1
 8010432:	4408      	add	r0, r1
 8010434:	4489      	add	r9, r1
 8010436:	b292      	uxth	r2, r2
 8010438:	9202      	str	r2, [sp, #8]
 801043a:	2a00      	cmp	r2, #0
 801043c:	f47f af02 	bne.w	8010244 <st_int8_to16_dual+0x34>
 8010440:	468a      	mov	sl, r1
 8010442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010444:	07db      	lsls	r3, r3, #31
 8010446:	d52f      	bpl.n	80104a8 <st_int8_to16_dual+0x298>
 8010448:	f1ba 0c04 	subs.w	ip, sl, #4
 801044c:	d43b      	bmi.n	80104c6 <st_int8_to16_dual+0x2b6>
 801044e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8010452:	4605      	mov	r5, r0
 8010454:	4e1d      	ldr	r6, [pc, #116]	; (80104cc <st_int8_to16_dual+0x2bc>)
 8010456:	f10c 0c01 	add.w	ip, ip, #1
 801045a:	eb0b 07cc 	add.w	r7, fp, ip, lsl #3
 801045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010462:	f10b 0b08 	add.w	fp, fp, #8
 8010466:	fa2f f493 	sxtb16	r4, r3, ror #8
 801046a:	fa2f f383 	sxtb16	r3, r3
 801046e:	ea04 0106 	and.w	r1, r4, r6
 8010472:	b29a      	uxth	r2, r3
 8010474:	455f      	cmp	r7, fp
 8010476:	ea41 4313 	orr.w	r3, r1, r3, lsr #16
 801047a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801047e:	f84b 3c04 	str.w	r3, [fp, #-4]
 8010482:	f84b 2c08 	str.w	r2, [fp, #-8]
 8010486:	d1ea      	bne.n	801045e <st_int8_to16_dual+0x24e>
 8010488:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801048c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8010490:	459a      	cmp	sl, r3
 8010492:	dd09      	ble.n	80104a8 <st_int8_to16_dual+0x298>
 8010494:	ebaa 0303 	sub.w	r3, sl, r3
 8010498:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801049c:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80104a0:	f82b 2b02 	strh.w	r2, [fp], #2
 80104a4:	459b      	cmp	fp, r3
 80104a6:	d1f9      	bne.n	801049c <st_int8_to16_dual+0x28c>
 80104a8:	b00b      	add	sp, #44	; 0x2c
 80104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ae:	f04f 0800 	mov.w	r8, #0
 80104b2:	9a06      	ldr	r2, [sp, #24]
 80104b4:	4542      	cmp	r2, r8
 80104b6:	f6bf af65 	bge.w	8010384 <st_int8_to16_dual+0x174>
 80104ba:	9a01      	ldr	r2, [sp, #4]
 80104bc:	4607      	mov	r7, r0
 80104be:	4542      	cmp	r2, r8
 80104c0:	dc9f      	bgt.n	8010402 <st_int8_to16_dual+0x1f2>
 80104c2:	4638      	mov	r0, r7
 80104c4:	e7b2      	b.n	801042c <st_int8_to16_dual+0x21c>
 80104c6:	2300      	movs	r3, #0
 80104c8:	e7e2      	b.n	8010490 <st_int8_to16_dual+0x280>
 80104ca:	bf00      	nop
 80104cc:	ffff0000 	.word	0xffff0000

080104d0 <st_int8_to16_dual_interleaved>:
 80104d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 80104d8:	b087      	sub	sp, #28
 80104da:	eb00 0802 	add.w	r8, r0, r2
 80104de:	9305      	str	r3, [sp, #20]
 80104e0:	f000 80ba 	beq.w	8010658 <st_int8_to16_dual_interleaved+0x188>
 80104e4:	f1a2 0310 	sub.w	r3, r2, #16
 80104e8:	1f14      	subs	r4, r2, #4
 80104ea:	9303      	str	r3, [sp, #12]
 80104ec:	091b      	lsrs	r3, r3, #4
 80104ee:	9402      	str	r4, [sp, #8]
 80104f0:	3301      	adds	r3, #1
 80104f2:	011c      	lsls	r4, r3, #4
 80104f4:	019b      	lsls	r3, r3, #6
 80104f6:	9400      	str	r4, [sp, #0]
 80104f8:	9304      	str	r3, [sp, #16]
 80104fa:	9b03      	ldr	r3, [sp, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f2c0 80d3 	blt.w	80106a8 <st_int8_to16_dual_interleaved+0x1d8>
 8010502:	9b00      	ldr	r3, [sp, #0]
 8010504:	4644      	mov	r4, r8
 8010506:	18c7      	adds	r7, r0, r3
 8010508:	460b      	mov	r3, r1
 801050a:	6806      	ldr	r6, [r0, #0]
 801050c:	3010      	adds	r0, #16
 801050e:	6825      	ldr	r5, [r4, #0]
 8010510:	3340      	adds	r3, #64	; 0x40
 8010512:	3410      	adds	r4, #16
 8010514:	4287      	cmp	r7, r0
 8010516:	fa2f fc96 	sxtb16	ip, r6, ror #8
 801051a:	fa2f f686 	sxtb16	r6, r6
 801051e:	f843 6c38 	str.w	r6, [r3, #-56]
 8010522:	fa2f f695 	sxtb16	r6, r5, ror #8
 8010526:	f843 cc40 	str.w	ip, [r3, #-64]
 801052a:	f843 6c3c 	str.w	r6, [r3, #-60]
 801052e:	fa2f f585 	sxtb16	r5, r5
 8010532:	f843 5c34 	str.w	r5, [r3, #-52]
 8010536:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 801053a:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 801053e:	fa2f fc96 	sxtb16	ip, r6, ror #8
 8010542:	fa2f f686 	sxtb16	r6, r6
 8010546:	f843 cc30 	str.w	ip, [r3, #-48]
 801054a:	f843 6c28 	str.w	r6, [r3, #-40]
 801054e:	fa2f f695 	sxtb16	r6, r5, ror #8
 8010552:	fa2f f585 	sxtb16	r5, r5
 8010556:	f843 6c2c 	str.w	r6, [r3, #-44]
 801055a:	f843 5c24 	str.w	r5, [r3, #-36]
 801055e:	f850 6c08 	ldr.w	r6, [r0, #-8]
 8010562:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8010566:	fa2f fc96 	sxtb16	ip, r6, ror #8
 801056a:	fa2f f686 	sxtb16	r6, r6
 801056e:	f843 cc20 	str.w	ip, [r3, #-32]
 8010572:	f843 6c18 	str.w	r6, [r3, #-24]
 8010576:	fa2f f695 	sxtb16	r6, r5, ror #8
 801057a:	fa2f f585 	sxtb16	r5, r5
 801057e:	f843 6c1c 	str.w	r6, [r3, #-28]
 8010582:	f843 5c14 	str.w	r5, [r3, #-20]
 8010586:	f850 6c04 	ldr.w	r6, [r0, #-4]
 801058a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801058e:	fa2f fc96 	sxtb16	ip, r6, ror #8
 8010592:	fa2f f686 	sxtb16	r6, r6
 8010596:	f843 cc10 	str.w	ip, [r3, #-16]
 801059a:	f843 6c08 	str.w	r6, [r3, #-8]
 801059e:	fa2f f695 	sxtb16	r6, r5, ror #8
 80105a2:	fa2f f585 	sxtb16	r5, r5
 80105a6:	f843 6c0c 	str.w	r6, [r3, #-12]
 80105aa:	f843 5c04 	str.w	r5, [r3, #-4]
 80105ae:	d1ac      	bne.n	801050a <st_int8_to16_dual_interleaved+0x3a>
 80105b0:	9b04      	ldr	r3, [sp, #16]
 80105b2:	4419      	add	r1, r3
 80105b4:	9b00      	ldr	r3, [sp, #0]
 80105b6:	469e      	mov	lr, r3
 80105b8:	4498      	add	r8, r3
 80105ba:	9b02      	ldr	r3, [sp, #8]
 80105bc:	4573      	cmp	r3, lr
 80105be:	db78      	blt.n	80106b2 <st_int8_to16_dual_interleaved+0x1e2>
 80105c0:	eba3 090e 	sub.w	r9, r3, lr
 80105c4:	4647      	mov	r7, r8
 80105c6:	460b      	mov	r3, r1
 80105c8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80105cc:	f109 0a01 	add.w	sl, r9, #1
 80105d0:	ea4f 048a 	mov.w	r4, sl, lsl #2
 80105d4:	eb00 068a 	add.w	r6, r0, sl, lsl #2
 80105d8:	9401      	str	r4, [sp, #4]
 80105da:	f850 5b04 	ldr.w	r5, [r0], #4
 80105de:	3310      	adds	r3, #16
 80105e0:	f857 4b04 	ldr.w	r4, [r7], #4
 80105e4:	fa2f fc95 	sxtb16	ip, r5, ror #8
 80105e8:	42b0      	cmp	r0, r6
 80105ea:	f843 cc10 	str.w	ip, [r3, #-16]
 80105ee:	fa2f f585 	sxtb16	r5, r5
 80105f2:	f843 5c08 	str.w	r5, [r3, #-8]
 80105f6:	fa2f f594 	sxtb16	r5, r4, ror #8
 80105fa:	fa2f f484 	sxtb16	r4, r4
 80105fe:	f843 5c0c 	str.w	r5, [r3, #-12]
 8010602:	f843 4c04 	str.w	r4, [r3, #-4]
 8010606:	d1e8      	bne.n	80105da <st_int8_to16_dual_interleaved+0x10a>
 8010608:	f10e 0e04 	add.w	lr, lr, #4
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	eb01 110a 	add.w	r1, r1, sl, lsl #4
 8010612:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8010616:	4498      	add	r8, r3
 8010618:	4572      	cmp	r2, lr
 801061a:	dd4d      	ble.n	80106b8 <st_int8_to16_dual_interleaved+0x1e8>
 801061c:	eba2 0e0e 	sub.w	lr, r2, lr
 8010620:	1d0b      	adds	r3, r1, #4
 8010622:	4644      	mov	r4, r8
 8010624:	eb06 000e 	add.w	r0, r6, lr
 8010628:	f916 5b01 	ldrsb.w	r5, [r6], #1
 801062c:	3304      	adds	r3, #4
 801062e:	f823 5c08 	strh.w	r5, [r3, #-8]
 8010632:	4286      	cmp	r6, r0
 8010634:	f914 5b01 	ldrsb.w	r5, [r4], #1
 8010638:	f823 5c06 	strh.w	r5, [r3, #-6]
 801063c:	d1f4      	bne.n	8010628 <st_int8_to16_dual_interleaved+0x158>
 801063e:	44f0      	add	r8, lr
 8010640:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8010644:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010648:	4410      	add	r0, r2
 801064a:	4490      	add	r8, r2
 801064c:	fa1f fb83 	uxth.w	fp, r3
 8010650:	f1bb 0f00 	cmp.w	fp, #0
 8010654:	f47f af51 	bne.w	80104fa <st_int8_to16_dual_interleaved+0x2a>
 8010658:	9b05      	ldr	r3, [sp, #20]
 801065a:	07db      	lsls	r3, r3, #31
 801065c:	d521      	bpl.n	80106a2 <st_int8_to16_dual_interleaved+0x1d2>
 801065e:	1f17      	subs	r7, r2, #4
 8010660:	d42c      	bmi.n	80106bc <st_int8_to16_dual_interleaved+0x1ec>
 8010662:	08bf      	lsrs	r7, r7, #2
 8010664:	4604      	mov	r4, r0
 8010666:	3701      	adds	r7, #1
 8010668:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 801066c:	3108      	adds	r1, #8
 801066e:	f854 3b04 	ldr.w	r3, [r4], #4
 8010672:	fa2f f593 	sxtb16	r5, r3, ror #8
 8010676:	428e      	cmp	r6, r1
 8010678:	f841 5c08 	str.w	r5, [r1, #-8]
 801067c:	fa2f f383 	sxtb16	r3, r3
 8010680:	f841 3c04 	str.w	r3, [r1, #-4]
 8010684:	d1f2      	bne.n	801066c <st_int8_to16_dual_interleaved+0x19c>
 8010686:	00bb      	lsls	r3, r7, #2
 8010688:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801068c:	429a      	cmp	r2, r3
 801068e:	dd08      	ble.n	80106a2 <st_int8_to16_dual_interleaved+0x1d2>
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010696:	f910 2b01 	ldrsb.w	r2, [r0], #1
 801069a:	f821 2b02 	strh.w	r2, [r1], #2
 801069e:	4299      	cmp	r1, r3
 80106a0:	d1f9      	bne.n	8010696 <st_int8_to16_dual_interleaved+0x1c6>
 80106a2:	b007      	add	sp, #28
 80106a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a8:	f04f 0e00 	mov.w	lr, #0
 80106ac:	9b02      	ldr	r3, [sp, #8]
 80106ae:	4573      	cmp	r3, lr
 80106b0:	da86      	bge.n	80105c0 <st_int8_to16_dual_interleaved+0xf0>
 80106b2:	4572      	cmp	r2, lr
 80106b4:	4606      	mov	r6, r0
 80106b6:	dcb1      	bgt.n	801061c <st_int8_to16_dual_interleaved+0x14c>
 80106b8:	4630      	mov	r0, r6
 80106ba:	e7c3      	b.n	8010644 <st_int8_to16_dual_interleaved+0x174>
 80106bc:	2300      	movs	r3, #0
 80106be:	e7e5      	b.n	801068c <st_int8_to16_dual_interleaved+0x1bc>

080106c0 <weights_2channels_prefetch>:
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	b087      	sub	sp, #28
 80106c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80106cc:	9302      	str	r3, [sp, #8]
 80106ce:	f340 80e6 	ble.w	801089e <weights_2channels_prefetch+0x1de>
 80106d2:	f1a8 0310 	sub.w	r3, r8, #16
 80106d6:	f1a8 0403 	sub.w	r4, r8, #3
 80106da:	f04f 0b00 	mov.w	fp, #0
 80106de:	091b      	lsrs	r3, r3, #4
 80106e0:	9403      	str	r4, [sp, #12]
 80106e2:	f1a8 0404 	sub.w	r4, r8, #4
 80106e6:	3301      	adds	r3, #1
 80106e8:	9405      	str	r4, [sp, #20]
 80106ea:	011c      	lsls	r4, r3, #4
 80106ec:	019b      	lsls	r3, r3, #6
 80106ee:	9400      	str	r4, [sp, #0]
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	f1b8 0f0f 	cmp.w	r8, #15
 80106f6:	f340 80d7 	ble.w	80108a8 <weights_2channels_prefetch+0x1e8>
 80106fa:	9b00      	ldr	r3, [sp, #0]
 80106fc:	460d      	mov	r5, r1
 80106fe:	18c6      	adds	r6, r0, r3
 8010700:	4613      	mov	r3, r2
 8010702:	6804      	ldr	r4, [r0, #0]
 8010704:	3010      	adds	r0, #16
 8010706:	682f      	ldr	r7, [r5, #0]
 8010708:	3340      	adds	r3, #64	; 0x40
 801070a:	fa2f fc84 	sxtb16	ip, r4
 801070e:	3510      	adds	r5, #16
 8010710:	f843 cc40 	str.w	ip, [r3, #-64]
 8010714:	ea4f 2434 	mov.w	r4, r4, ror #8
 8010718:	42b0      	cmp	r0, r6
 801071a:	fa2f f484 	sxtb16	r4, r4
 801071e:	f843 4c3c 	str.w	r4, [r3, #-60]
 8010722:	ea4f 2437 	mov.w	r4, r7, ror #8
 8010726:	fa2f f787 	sxtb16	r7, r7
 801072a:	fa2f f484 	sxtb16	r4, r4
 801072e:	f843 7c38 	str.w	r7, [r3, #-56]
 8010732:	f843 4c34 	str.w	r4, [r3, #-52]
 8010736:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 801073a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801073e:	ea4f 2c34 	mov.w	ip, r4, ror #8
 8010742:	fa2f f484 	sxtb16	r4, r4
 8010746:	fa2f fc8c 	sxtb16	ip, ip
 801074a:	f843 4c28 	str.w	r4, [r3, #-40]
 801074e:	f843 cc24 	str.w	ip, [r3, #-36]
 8010752:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8010756:	fa2f f787 	sxtb16	r7, r7
 801075a:	f843 7c30 	str.w	r7, [r3, #-48]
 801075e:	fa2f f78c 	sxtb16	r7, ip
 8010762:	f843 7c2c 	str.w	r7, [r3, #-44]
 8010766:	f850 7c08 	ldr.w	r7, [r0, #-8]
 801076a:	f855 4c08 	ldr.w	r4, [r5, #-8]
 801076e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8010772:	fa2f f787 	sxtb16	r7, r7
 8010776:	fa2f fc8c 	sxtb16	ip, ip
 801077a:	f843 7c20 	str.w	r7, [r3, #-32]
 801077e:	ea4f 2734 	mov.w	r7, r4, ror #8
 8010782:	f843 cc1c 	str.w	ip, [r3, #-28]
 8010786:	fa2f f787 	sxtb16	r7, r7
 801078a:	fa2f f484 	sxtb16	r4, r4
 801078e:	f843 7c14 	str.w	r7, [r3, #-20]
 8010792:	f843 4c18 	str.w	r4, [r3, #-24]
 8010796:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801079a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801079e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80107a2:	fa2f f787 	sxtb16	r7, r7
 80107a6:	fa2f fc8c 	sxtb16	ip, ip
 80107aa:	f843 7c10 	str.w	r7, [r3, #-16]
 80107ae:	ea4f 2734 	mov.w	r7, r4, ror #8
 80107b2:	f843 cc0c 	str.w	ip, [r3, #-12]
 80107b6:	fa2f f787 	sxtb16	r7, r7
 80107ba:	fa2f f484 	sxtb16	r4, r4
 80107be:	f843 7c04 	str.w	r7, [r3, #-4]
 80107c2:	f843 4c08 	str.w	r4, [r3, #-8]
 80107c6:	d19c      	bne.n	8010702 <weights_2channels_prefetch+0x42>
 80107c8:	9b04      	ldr	r3, [sp, #16]
 80107ca:	441a      	add	r2, r3
 80107cc:	9b00      	ldr	r3, [sp, #0]
 80107ce:	4419      	add	r1, r3
 80107d0:	469e      	mov	lr, r3
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	4573      	cmp	r3, lr
 80107d6:	dd65      	ble.n	80108a4 <weights_2channels_prefetch+0x1e4>
 80107d8:	9b05      	ldr	r3, [sp, #20]
 80107da:	4614      	mov	r4, r2
 80107dc:	460f      	mov	r7, r1
 80107de:	eba3 090e 	sub.w	r9, r3, lr
 80107e2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80107e6:	f109 0a01 	add.w	sl, r9, #1
 80107ea:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80107ee:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 80107f2:	9301      	str	r3, [sp, #4]
 80107f4:	f856 3b04 	ldr.w	r3, [r6], #4
 80107f8:	3410      	adds	r4, #16
 80107fa:	f857 5b04 	ldr.w	r5, [r7], #4
 80107fe:	fa2f fc83 	sxtb16	ip, r3
 8010802:	4286      	cmp	r6, r0
 8010804:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010808:	fa2f f383 	sxtb16	r3, r3
 801080c:	f844 3c0c 	str.w	r3, [r4, #-12]
 8010810:	ea4f 2335 	mov.w	r3, r5, ror #8
 8010814:	fa2f f585 	sxtb16	r5, r5
 8010818:	f844 cc10 	str.w	ip, [r4, #-16]
 801081c:	f844 5c08 	str.w	r5, [r4, #-8]
 8010820:	fa2f f383 	sxtb16	r3, r3
 8010824:	f844 3c04 	str.w	r3, [r4, #-4]
 8010828:	d1e4      	bne.n	80107f4 <weights_2channels_prefetch+0x134>
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	f10e 0e04 	add.w	lr, lr, #4
 8010830:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8010834:	4419      	add	r1, r3
 8010836:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801083a:	45f0      	cmp	r8, lr
 801083c:	dd29      	ble.n	8010892 <weights_2channels_prefetch+0x1d2>
 801083e:	f990 3000 	ldrsb.w	r3, [r0]
 8010842:	8013      	strh	r3, [r2, #0]
 8010844:	f991 3000 	ldrsb.w	r3, [r1]
 8010848:	8053      	strh	r3, [r2, #2]
 801084a:	f10e 0301 	add.w	r3, lr, #1
 801084e:	4598      	cmp	r8, r3
 8010850:	dd19      	ble.n	8010886 <weights_2channels_prefetch+0x1c6>
 8010852:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010856:	8093      	strh	r3, [r2, #4]
 8010858:	f991 3001 	ldrsb.w	r3, [r1, #1]
 801085c:	80d3      	strh	r3, [r2, #6]
 801085e:	f10e 0302 	add.w	r3, lr, #2
 8010862:	4598      	cmp	r8, r3
 8010864:	dd0f      	ble.n	8010886 <weights_2channels_prefetch+0x1c6>
 8010866:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801086a:	8113      	strh	r3, [r2, #8]
 801086c:	f10e 0303 	add.w	r3, lr, #3
 8010870:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8010874:	4598      	cmp	r8, r3
 8010876:	8154      	strh	r4, [r2, #10]
 8010878:	dd05      	ble.n	8010886 <weights_2channels_prefetch+0x1c6>
 801087a:	f990 3003 	ldrsb.w	r3, [r0, #3]
 801087e:	8193      	strh	r3, [r2, #12]
 8010880:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8010884:	81d3      	strh	r3, [r2, #14]
 8010886:	eba8 0e0e 	sub.w	lr, r8, lr
 801088a:	4470      	add	r0, lr
 801088c:	4471      	add	r1, lr
 801088e:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8010892:	f10b 0b01 	add.w	fp, fp, #1
 8010896:	9b02      	ldr	r3, [sp, #8]
 8010898:	455b      	cmp	r3, fp
 801089a:	f47f af2a 	bne.w	80106f2 <weights_2channels_prefetch+0x32>
 801089e:	b007      	add	sp, #28
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	4630      	mov	r0, r6
 80108a6:	e7c8      	b.n	801083a <weights_2channels_prefetch+0x17a>
 80108a8:	4606      	mov	r6, r0
 80108aa:	f04f 0e00 	mov.w	lr, #0
 80108ae:	e790      	b.n	80107d2 <weights_2channels_prefetch+0x112>

080108b0 <st_sssa8_ch_fullW_prefetch>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	b087      	sub	sp, #28
 80108b6:	461c      	mov	r4, r3
 80108b8:	4680      	mov	r8, r0
 80108ba:	4613      	mov	r3, r2
 80108bc:	104f      	asrs	r7, r1, #1
 80108be:	4620      	mov	r0, r4
 80108c0:	9103      	str	r1, [sp, #12]
 80108c2:	9704      	str	r7, [sp, #16]
 80108c4:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 80108c8:	eb08 0402 	add.w	r4, r8, r2
 80108cc:	d020      	beq.n	8010910 <st_sssa8_ch_fullW_prefetch+0x60>
 80108ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108d0:	4646      	mov	r6, r8
 80108d2:	4655      	mov	r5, sl
 80108d4:	f8cd 8014 	str.w	r8, [sp, #20]
 80108d8:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80108dc:	4680      	mov	r8, r0
 80108de:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80108e2:	469a      	mov	sl, r3
 80108e4:	462a      	mov	r2, r5
 80108e6:	4621      	mov	r1, r4
 80108e8:	4630      	mov	r0, r6
 80108ea:	4653      	mov	r3, sl
 80108ec:	f8cd 8000 	str.w	r8, [sp]
 80108f0:	445d      	add	r5, fp
 80108f2:	f7ff fee5 	bl	80106c0 <weights_2channels_prefetch>
 80108f6:	3f01      	subs	r7, #1
 80108f8:	444c      	add	r4, r9
 80108fa:	444e      	add	r6, r9
 80108fc:	d1f2      	bne.n	80108e4 <st_sssa8_ch_fullW_prefetch+0x34>
 80108fe:	9b04      	ldr	r3, [sp, #16]
 8010900:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010904:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8010908:	fb03 8809 	mla	r8, r3, r9, r8
 801090c:	fb03 aa0b 	mla	sl, r3, fp, sl
 8010910:	9b03      	ldr	r3, [sp, #12]
 8010912:	07db      	lsls	r3, r3, #31
 8010914:	d509      	bpl.n	801092a <st_sssa8_ch_fullW_prefetch+0x7a>
 8010916:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010918:	2b00      	cmp	r3, #0
 801091a:	dd06      	ble.n	801092a <st_sssa8_ch_fullW_prefetch+0x7a>
 801091c:	4443      	add	r3, r8
 801091e:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8010922:	4543      	cmp	r3, r8
 8010924:	f82a 2b02 	strh.w	r2, [sl], #2
 8010928:	d1f9      	bne.n	801091e <st_sssa8_ch_fullW_prefetch+0x6e>
 801092a:	b007      	add	sp, #28
 801092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010930 <st_sssa8_ch_nn_mat_mult_nt_t>:
 8010930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010934:	b0b5      	sub	sp, #212	; 0xd4
 8010936:	9027      	str	r0, [sp, #156]	; 0x9c
 8010938:	912d      	str	r1, [sp, #180]	; 0xb4
 801093a:	9233      	str	r2, [sp, #204]	; 0xcc
 801093c:	932e      	str	r3, [sp, #184]	; 0xb8
 801093e:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 8010942:	2c00      	cmp	r4, #0
 8010944:	bf18      	it	ne
 8010946:	4620      	movne	r0, r4
 8010948:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801094a:	2c01      	cmp	r4, #1
 801094c:	9045      	str	r0, [sp, #276]	; 0x114
 801094e:	f340 826b 	ble.w	8010e28 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 8010952:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8010954:	461e      	mov	r6, r3
 8010956:	4694      	mov	ip, r2
 8010958:	9f42      	ldr	r7, [sp, #264]	; 0x108
 801095a:	f1a4 0310 	sub.w	r3, r4, #16
 801095e:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8010960:	468e      	mov	lr, r1
 8010962:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8010964:	1ea0      	subs	r0, r4, #2
 8010966:	0919      	lsrs	r1, r3, #4
 8010968:	f023 030f 	bic.w	r3, r3, #15
 801096c:	9c42      	ldr	r4, [sp, #264]	; 0x108
 801096e:	f020 0201 	bic.w	r2, r0, #1
 8010972:	9032      	str	r0, [sp, #200]	; 0xc8
 8010974:	4630      	mov	r0, r6
 8010976:	3101      	adds	r1, #1
 8010978:	4432      	add	r2, r6
 801097a:	10a4      	asrs	r4, r4, #2
 801097c:	106d      	asrs	r5, r5, #1
 801097e:	1cd6      	adds	r6, r2, #3
 8010980:	f107 0214 	add.w	r2, r7, #20
 8010984:	942f      	str	r4, [sp, #188]	; 0xbc
 8010986:	18d3      	adds	r3, r2, r3
 8010988:	9629      	str	r6, [sp, #164]	; 0xa4
 801098a:	9e41      	ldr	r6, [sp, #260]	; 0x104
 801098c:	9318      	str	r3, [sp, #96]	; 0x60
 801098e:	f06f 0303 	mvn.w	r3, #3
 8010992:	0076      	lsls	r6, r6, #1
 8010994:	952a      	str	r5, [sp, #168]	; 0xa8
 8010996:	1bdb      	subs	r3, r3, r7
 8010998:	9613      	str	r6, [sp, #76]	; 0x4c
 801099a:	9319      	str	r3, [sp, #100]	; 0x64
 801099c:	f1a7 030f 	sub.w	r3, r7, #15
 80109a0:	9312      	str	r3, [sp, #72]	; 0x48
 80109a2:	f007 0303 	and.w	r3, r7, #3
 80109a6:	9330      	str	r3, [sp, #192]	; 0xc0
 80109a8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80109aa:	f003 0301 	and.w	r3, r3, #1
 80109ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80109b0:	007b      	lsls	r3, r7, #1
 80109b2:	9326      	str	r3, [sp, #152]	; 0x98
 80109b4:	00bb      	lsls	r3, r7, #2
 80109b6:	932c      	str	r3, [sp, #176]	; 0xb0
 80109b8:	1f3b      	subs	r3, r7, #4
 80109ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80109bc:	1c43      	adds	r3, r0, #1
 80109be:	931b      	str	r3, [sp, #108]	; 0x6c
 80109c0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80109c2:	3302      	adds	r3, #2
 80109c4:	9321      	str	r3, [sp, #132]	; 0x84
 80109c6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80109c8:	3304      	adds	r3, #4
 80109ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80109cc:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80109ce:	3304      	adds	r3, #4
 80109d0:	9320      	str	r3, [sp, #128]	; 0x80
 80109d2:	4663      	mov	r3, ip
 80109d4:	3304      	adds	r3, #4
 80109d6:	9322      	str	r3, [sp, #136]	; 0x88
 80109d8:	010b      	lsls	r3, r1, #4
 80109da:	9316      	str	r3, [sp, #88]	; 0x58
 80109dc:	018b      	lsls	r3, r1, #6
 80109de:	9325      	str	r3, [sp, #148]	; 0x94
 80109e0:	0123      	lsls	r3, r4, #4
 80109e2:	9331      	str	r3, [sp, #196]	; 0xc4
 80109e4:	fb06 f305 	mul.w	r3, r6, r5
 80109e8:	932b      	str	r3, [sp, #172]	; 0xac
 80109ea:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80109ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80109f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80109f2:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80109f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80109fa:	3901      	subs	r1, #1
 80109fc:	2b15      	cmp	r3, #21
 80109fe:	931a      	str	r3, [sp, #104]	; 0x68
 8010a00:	920a      	str	r2, [sp, #40]	; 0x28
 8010a02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010a04:	9101      	str	r1, [sp, #4]
 8010a06:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010a0a:	6812      	ldr	r2, [r2, #0]
 8010a0c:	910d      	str	r1, [sp, #52]	; 0x34
 8010a0e:	920e      	str	r2, [sp, #56]	; 0x38
 8010a10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a12:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010a16:	6812      	ldr	r2, [r2, #0]
 8010a18:	910f      	str	r1, [sp, #60]	; 0x3c
 8010a1a:	9210      	str	r2, [sp, #64]	; 0x40
 8010a1c:	f300 8402 	bgt.w	8011224 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	bfcc      	ite	gt
 8010a24:	2300      	movgt	r3, #0
 8010a26:	2301      	movle	r3, #1
 8010a28:	425b      	negs	r3, r3
 8010a2a:	9308      	str	r3, [sp, #32]
 8010a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a2e:	2b15      	cmp	r3, #21
 8010a30:	f300 82c4 	bgt.w	8010fbc <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	bfcc      	ite	gt
 8010a38:	2300      	movgt	r3, #0
 8010a3a:	2301      	movle	r3, #1
 8010a3c:	425b      	negs	r3, r3
 8010a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a40:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 82c0 	beq.w	8010fc8 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 8010a48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f040 8397 	bne.w	801117e <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 8010a50:	461a      	mov	r2, r3
 8010a52:	4619      	mov	r1, r3
 8010a54:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010a56:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010a5a:	18cb      	adds	r3, r1, r3
 8010a5c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8010a60:	6803      	ldr	r3, [r0, #0]
 8010a62:	18d3      	adds	r3, r2, r3
 8010a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a66:	2900      	cmp	r1, #0
 8010a68:	f000 8511 	beq.w	801148e <st_sssa8_ch_nn_mat_mult_nt_t+0xb5e>
 8010a6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010a6e:	2001      	movs	r0, #1
 8010a70:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8010a72:	1e93      	subs	r3, r2, #2
 8010a74:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8010a78:	9104      	str	r1, [sp, #16]
 8010a7a:	fa00 f303 	lsl.w	r3, r0, r3
 8010a7e:	931c      	str	r3, [sp, #112]	; 0x70
 8010a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a82:	3b02      	subs	r3, #2
 8010a84:	fa00 f303 	lsl.w	r3, r0, r3
 8010a88:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010a8a:	931d      	str	r3, [sp, #116]	; 0x74
 8010a8c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010a8e:	3b03      	subs	r3, #3
 8010a90:	9311      	str	r3, [sp, #68]	; 0x44
 8010a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a94:	4418      	add	r0, r3
 8010a96:	9303      	str	r3, [sp, #12]
 8010a98:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010a9a:	9002      	str	r0, [sp, #8]
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	9845      	ldr	r0, [sp, #276]	; 0x114
 8010aa0:	9315      	str	r3, [sp, #84]	; 0x54
 8010aa2:	1e53      	subs	r3, r2, #1
 8010aa4:	4420      	add	r0, r4
 8010aa6:	931e      	str	r3, [sp, #120]	; 0x78
 8010aa8:	f1c2 0301 	rsb	r3, r2, #1
 8010aac:	9014      	str	r0, [sp, #80]	; 0x50
 8010aae:	9324      	str	r3, [sp, #144]	; 0x90
 8010ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f340 8279 	ble.w	8010faa <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 8010ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aba:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010abc:	eb0b 0703 	add.w	r7, fp, r3
 8010ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010ac2:	f8cd b014 	str.w	fp, [sp, #20]
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	445b      	add	r3, fp
 8010aca:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8010acc:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8010ad0:	9301      	str	r3, [sp, #4]
 8010ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	f85b c007 	ldr.w	ip, [fp, r7]
 8010ada:	eb0b 0e07 	add.w	lr, fp, r7
 8010ade:	fa2f f58c 	sxtb16	r5, ip
 8010ae2:	6832      	ldr	r2, [r6, #0]
 8010ae4:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8010ae8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010aec:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8010af0:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8010af4:	fb25 0002 	smlad	r0, r5, r2, r0
 8010af8:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010afc:	fb25 350a 	smlad	r5, r5, sl, r3
 8010b00:	fb2c 5508 	smlad	r5, ip, r8, r5
 8010b04:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010b08:	fa2f fc83 	sxtb16	ip, r3
 8010b0c:	fa2f f393 	sxtb16	r3, r3, ror #8
 8010b10:	fb2c 4202 	smlad	r2, ip, r2, r4
 8010b14:	fb2c 110a 	smlad	r1, ip, sl, r1
 8010b18:	fb23 2209 	smlad	r2, r3, r9, r2
 8010b1c:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8010b20:	6974      	ldr	r4, [r6, #20]
 8010b22:	fb23 1808 	smlad	r8, r3, r8, r1
 8010b26:	f8de 1004 	ldr.w	r1, [lr, #4]
 8010b2a:	69b3      	ldr	r3, [r6, #24]
 8010b2c:	fa2f fc81 	sxtb16	ip, r1
 8010b30:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8010b34:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010b38:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010b3c:	fb21 0004 	smlad	r0, r1, r4, r0
 8010b40:	fb2c 5c03 	smlad	ip, ip, r3, r5
 8010b44:	fb21 cc0a 	smlad	ip, r1, sl, ip
 8010b48:	683d      	ldr	r5, [r7, #0]
 8010b4a:	fa2f f185 	sxtb16	r1, r5
 8010b4e:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010b52:	fb21 2909 	smlad	r9, r1, r9, r2
 8010b56:	fb21 8803 	smlad	r8, r1, r3, r8
 8010b5a:	fb25 9904 	smlad	r9, r5, r4, r9
 8010b5e:	6a34      	ldr	r4, [r6, #32]
 8010b60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010b62:	fb25 8a0a 	smlad	sl, r5, sl, r8
 8010b66:	f8de 2008 	ldr.w	r2, [lr, #8]
 8010b6a:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 8010b6e:	fa2f f182 	sxtb16	r1, r2
 8010b72:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8010b74:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010b78:	fb21 0004 	smlad	r0, r1, r4, r0
 8010b7c:	fb22 0003 	smlad	r0, r2, r3, r0
 8010b80:	fb21 c108 	smlad	r1, r1, r8, ip
 8010b84:	fb22 1205 	smlad	r2, r2, r5, r1
 8010b88:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8010b8c:	fa2f f18c 	sxtb16	r1, ip
 8010b90:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8010b94:	fb21 9404 	smlad	r4, r1, r4, r9
 8010b98:	fb21 aa08 	smlad	sl, r1, r8, sl
 8010b9c:	fb2c 4903 	smlad	r9, ip, r3, r4
 8010ba0:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 8010ba4:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8010ba6:	fb2c a505 	smlad	r5, ip, r5, sl
 8010baa:	f8de 300c 	ldr.w	r3, [lr, #12]
 8010bae:	3640      	adds	r6, #64	; 0x40
 8010bb0:	fa2f f183 	sxtb16	r1, r3
 8010bb4:	f856 ac08 	ldr.w	sl, [r6, #-8]
 8010bb8:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8010bbc:	fa2f f393 	sxtb16	r3, r3, ror #8
 8010bc0:	fb21 0008 	smlad	r0, r1, r8, r0
 8010bc4:	fb23 0004 	smlad	r0, r3, r4, r0
 8010bc8:	fb21 220a 	smlad	r2, r1, sl, r2
 8010bcc:	fb23 230e 	smlad	r3, r3, lr, r2
 8010bd0:	68b9      	ldr	r1, [r7, #8]
 8010bd2:	fa2f f281 	sxtb16	r2, r1
 8010bd6:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010bda:	fb22 9908 	smlad	r9, r2, r8, r9
 8010bde:	fb22 550a 	smlad	r5, r2, sl, r5
 8010be2:	fb21 9404 	smlad	r4, r1, r4, r9
 8010be6:	fb21 510e 	smlad	r1, r1, lr, r5
 8010bea:	3710      	adds	r7, #16
 8010bec:	9a01      	ldr	r2, [sp, #4]
 8010bee:	4297      	cmp	r7, r2
 8010bf0:	f47f af71 	bne.w	8010ad6 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8010bf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010bf6:	f8dd b014 	ldr.w	fp, [sp, #20]
 8010bfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010bfc:	4692      	mov	sl, r2
 8010bfe:	4493      	add	fp, r2
 8010c00:	9501      	str	r5, [sp, #4]
 8010c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c04:	4592      	cmp	sl, r2
 8010c06:	f280 81ce 	bge.w	8010fa6 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 8010c0a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010c0c:	f8cd a01c 	str.w	sl, [sp, #28]
 8010c10:	eba5 020a 	sub.w	r2, r5, sl
 8010c14:	46aa      	mov	sl, r5
 8010c16:	0892      	lsrs	r2, r2, #2
 8010c18:	4616      	mov	r6, r2
 8010c1a:	9206      	str	r2, [sp, #24]
 8010c1c:	9a01      	ldr	r2, [sp, #4]
 8010c1e:	3601      	adds	r6, #1
 8010c20:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 8010c24:	9605      	str	r6, [sp, #20]
 8010c26:	f85b 5b04 	ldr.w	r5, [fp], #4
 8010c2a:	3210      	adds	r2, #16
 8010c2c:	fa2f f685 	sxtb16	r6, r5
 8010c30:	f852 8c10 	ldr.w	r8, [r2, #-16]
 8010c34:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8010c38:	f852 ec08 	ldr.w	lr, [r2, #-8]
 8010c3c:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8010c40:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010c44:	fb26 0008 	smlad	r0, r6, r8, r0
 8010c48:	fb25 000c 	smlad	r0, r5, ip, r0
 8010c4c:	fb26 330e 	smlad	r3, r6, lr, r3
 8010c50:	fb25 3307 	smlad	r3, r5, r7, r3
 8010c54:	f85b 500a 	ldr.w	r5, [fp, sl]
 8010c58:	fa2f f685 	sxtb16	r6, r5
 8010c5c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010c60:	fb26 4408 	smlad	r4, r6, r8, r4
 8010c64:	fb26 110e 	smlad	r1, r6, lr, r1
 8010c68:	fb25 440c 	smlad	r4, r5, ip, r4
 8010c6c:	fb25 1107 	smlad	r1, r5, r7, r1
 8010c70:	45cb      	cmp	fp, r9
 8010c72:	d1d8      	bne.n	8010c26 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 8010c74:	9a01      	ldr	r2, [sp, #4]
 8010c76:	9d05      	ldr	r5, [sp, #20]
 8010c78:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010c7c:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8010c80:	9d06      	ldr	r5, [sp, #24]
 8010c82:	9201      	str	r2, [sp, #4]
 8010c84:	f10a 0204 	add.w	r2, sl, #4
 8010c88:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8010c8c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010c8e:	4552      	cmp	r2, sl
 8010c90:	dd58      	ble.n	8010d44 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 8010c92:	9f01      	ldr	r7, [sp, #4]
 8010c94:	f999 2000 	ldrsb.w	r2, [r9]
 8010c98:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8010c9c:	f9b7 6000 	ldrsh.w	r6, [r7]
 8010ca0:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010ca4:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010ca8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010caa:	f919 2002 	ldrsb.w	r2, [r9, r2]
 8010cae:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010cb2:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8010cb4:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010cb8:	f10a 0201 	add.w	r2, sl, #1
 8010cbc:	4295      	cmp	r5, r2
 8010cbe:	dd3d      	ble.n	8010d3c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010cc0:	eb09 0205 	add.w	r2, r9, r5
 8010cc4:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8010cc8:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8010ccc:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8010cd0:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010cd4:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010cd8:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8010cdc:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010ce0:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8010ce2:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010ce6:	f10a 0202 	add.w	r2, sl, #2
 8010cea:	f109 0502 	add.w	r5, r9, #2
 8010cee:	4296      	cmp	r6, r2
 8010cf0:	dd24      	ble.n	8010d3c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010cf2:	57aa      	ldrsb	r2, [r5, r6]
 8010cf4:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8010cf8:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8010cfc:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010d00:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010d04:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8010d08:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010d0c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8010d0e:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010d12:	f10a 0203 	add.w	r2, sl, #3
 8010d16:	f109 0503 	add.w	r5, r9, #3
 8010d1a:	4296      	cmp	r6, r2
 8010d1c:	dd0e      	ble.n	8010d3c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8010d1e:	57ad      	ldrsb	r5, [r5, r6]
 8010d20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010d24:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8010d28:	fb12 4405 	smlabb	r4, r2, r5, r4
 8010d2c:	fb16 1105 	smlabb	r1, r6, r5, r1
 8010d30:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8010d34:	fb12 0005 	smlabb	r0, r2, r5, r0
 8010d38:	fb16 3305 	smlabb	r3, r6, r5, r3
 8010d3c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010d3e:	eba2 020a 	sub.w	r2, r2, sl
 8010d42:	4491      	add	r9, r2
 8010d44:	9a08      	ldr	r2, [sp, #32]
 8010d46:	2a00      	cmp	r2, #0
 8010d48:	f040 80dd 	bne.w	8010f06 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 8010d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d4e:	0040      	lsls	r0, r0, #1
 8010d50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d52:	0064      	lsls	r4, r4, #1
 8010d54:	fb50 5002 	smmla	r0, r0, r2, r5
 8010d58:	fb54 5402 	smmla	r4, r4, r2, r5
 8010d5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d5e:	4110      	asrs	r0, r2
 8010d60:	f300 0007 	ssat	r0, #8, r0
 8010d64:	9d03      	ldr	r5, [sp, #12]
 8010d66:	4114      	asrs	r4, r2
 8010d68:	f805 0c01 	strb.w	r0, [r5, #-1]
 8010d6c:	f304 0407 	ssat	r4, #8, r4
 8010d70:	9a02      	ldr	r2, [sp, #8]
 8010d72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	f040 80ac 	bne.w	8010ed6 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 8010d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010d84:	0049      	lsls	r1, r1, #1
 8010d86:	fb53 0302 	smmla	r3, r3, r2, r0
 8010d8a:	fb51 0102 	smmla	r1, r1, r2, r0
 8010d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d90:	4113      	asrs	r3, r2
 8010d92:	f303 0307 	ssat	r3, #8, r3
 8010d96:	9803      	ldr	r0, [sp, #12]
 8010d98:	4111      	asrs	r1, r2
 8010d9a:	7003      	strb	r3, [r0, #0]
 8010d9c:	f301 0107 	ssat	r1, #8, r1
 8010da0:	9b02      	ldr	r3, [sp, #8]
 8010da2:	7019      	strb	r1, [r3, #0]
 8010da4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010da6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010da8:	eb09 0b03 	add.w	fp, r9, r3
 8010dac:	9b03      	ldr	r3, [sp, #12]
 8010dae:	4413      	add	r3, r2
 8010db0:	9303      	str	r3, [sp, #12]
 8010db2:	9b02      	ldr	r3, [sp, #8]
 8010db4:	4413      	add	r3, r2
 8010db6:	9302      	str	r3, [sp, #8]
 8010db8:	9b04      	ldr	r3, [sp, #16]
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	9304      	str	r3, [sp, #16]
 8010dbe:	f47f ae77 	bne.w	8010ab0 <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 8010dc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010dc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	9301      	str	r3, [sp, #4]
 8010dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f040 822b 	bne.w	801122a <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 8010dd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010dd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010dd8:	4413      	add	r3, r2
 8010dda:	9323      	str	r3, [sp, #140]	; 0x8c
 8010ddc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8010dde:	b11b      	cbz	r3, 8010de8 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 8010de0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010de2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010de4:	4413      	add	r3, r2
 8010de6:	9345      	str	r3, [sp, #276]	; 0x114
 8010de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010dea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010dec:	3204      	adds	r2, #4
 8010dee:	3302      	adds	r3, #2
 8010df0:	9221      	str	r2, [sp, #132]	; 0x84
 8010df2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010df4:	931b      	str	r3, [sp, #108]	; 0x6c
 8010df6:	3208      	adds	r2, #8
 8010df8:	921f      	str	r2, [sp, #124]	; 0x7c
 8010dfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010dfc:	3208      	adds	r2, #8
 8010dfe:	9220      	str	r2, [sp, #128]	; 0x80
 8010e00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010e02:	3208      	adds	r2, #8
 8010e04:	9222      	str	r2, [sp, #136]	; 0x88
 8010e06:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	f47f adf0 	bne.w	80109ee <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 8010e0e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010e10:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8010e12:	085a      	lsrs	r2, r3, #1
 8010e14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010e16:	fb02 3303 	mla	r3, r2, r3, r3
 8010e1a:	3201      	adds	r2, #1
 8010e1c:	4419      	add	r1, r3
 8010e1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8010e20:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010e24:	912d      	str	r1, [sp, #180]	; 0xb4
 8010e26:	932e      	str	r3, [sp, #184]	; 0xb8
 8010e28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e2a:	07db      	lsls	r3, r3, #31
 8010e2c:	d54f      	bpl.n	8010ece <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8010e2e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dd4c      	ble.n	8010ece <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8010e34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e36:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8010e3a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8010e3e:	2200      	movs	r2, #0
 8010e40:	441c      	add	r4, r3
 8010e42:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010e44:	f04f 0901 	mov.w	r9, #1
 8010e48:	4611      	mov	r1, r2
 8010e4a:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 8010e4e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8010e50:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8010e54:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010e56:	f8cd e004 	str.w	lr, [sp, #4]
 8010e5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e60:	4498      	add	r8, r3
 8010e62:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8010e64:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 8010e68:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8010e6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010e6e:	9e01      	ldr	r6, [sp, #4]
 8010e70:	f1be 0f00 	cmp.w	lr, #0
 8010e74:	6837      	ldr	r7, [r6, #0]
 8010e76:	dd0d      	ble.n	8010e94 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 8010e78:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8010e7a:	eb03 0b0e 	add.w	fp, r3, lr
 8010e7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8010e82:	f913 6b01 	ldrsb.w	r6, [r3], #1
 8010e86:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 8010e8a:	1a36      	subs	r6, r6, r0
 8010e8c:	455b      	cmp	r3, fp
 8010e8e:	fb0a 7706 	mla	r7, sl, r6, r7
 8010e92:	d1f6      	bne.n	8010e82 <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 8010e94:	f9b8 c000 	ldrsh.w	ip, [r8]
 8010e98:	f1bc 0f15 	cmp.w	ip, #21
 8010e9c:	f340 82fa 	ble.w	8011494 <st_sssa8_ch_nn_mat_mult_nt_t+0xb64>
 8010ea0:	f1ac 0a02 	sub.w	sl, ip, #2
 8010ea4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ea8:	682e      	ldr	r6, [r5, #0]
 8010eaa:	fa09 fa0a 	lsl.w	sl, r9, sl
 8010eae:	fb57 a606 	smmla	r6, r7, r6, sl
 8010eb2:	fa46 fc0c 	asr.w	ip, r6, ip
 8010eb6:	6826      	ldr	r6, [r4, #0]
 8010eb8:	4466      	add	r6, ip
 8010eba:	f306 0607 	ssat	r6, #8, r6
 8010ebe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010ec0:	54be      	strb	r6, [r7, r2]
 8010ec2:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	4432      	add	r2, r6
 8010ec8:	9e40      	ldr	r6, [sp, #256]	; 0x100
 8010eca:	428e      	cmp	r6, r1
 8010ecc:	d1cf      	bne.n	8010e6e <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 8010ece:	2000      	movs	r0, #0
 8010ed0:	b035      	add	sp, #212	; 0xd4
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed6:	3201      	adds	r2, #1
 8010ed8:	d02e      	beq.n	8010f38 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 8010eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010edc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010ede:	fb53 0302 	smmla	r3, r3, r2, r0
 8010ee2:	fb51 0102 	smmla	r1, r1, r2, r0
 8010ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ee8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010eea:	3a01      	subs	r2, #1
 8010eec:	4113      	asrs	r3, r2
 8010eee:	4403      	add	r3, r0
 8010ef0:	f303 0307 	ssat	r3, #8, r3
 8010ef4:	4111      	asrs	r1, r2
 8010ef6:	9a03      	ldr	r2, [sp, #12]
 8010ef8:	4401      	add	r1, r0
 8010efa:	7013      	strb	r3, [r2, #0]
 8010efc:	f301 0207 	ssat	r2, #8, r1
 8010f00:	9b02      	ldr	r3, [sp, #8]
 8010f02:	701a      	strb	r2, [r3, #0]
 8010f04:	e74e      	b.n	8010da4 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8010f06:	3201      	adds	r2, #1
 8010f08:	d031      	beq.n	8010f6e <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 8010f0a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010f0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f0e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8010f10:	fb50 5002 	smmla	r0, r0, r2, r5
 8010f14:	fb54 5402 	smmla	r4, r4, r2, r5
 8010f18:	4130      	asrs	r0, r6
 8010f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f1c:	4410      	add	r0, r2
 8010f1e:	f300 0007 	ssat	r0, #8, r0
 8010f22:	9d03      	ldr	r5, [sp, #12]
 8010f24:	4134      	asrs	r4, r6
 8010f26:	f805 0c01 	strb.w	r0, [r5, #-1]
 8010f2a:	18a2      	adds	r2, r4, r2
 8010f2c:	f302 0207 	ssat	r2, #8, r2
 8010f30:	9802      	ldr	r0, [sp, #8]
 8010f32:	f800 2c01 	strb.w	r2, [r0, #-1]
 8010f36:	e71e      	b.n	8010d76 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8010f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f3a:	f1c2 0201 	rsb	r2, r2, #1
 8010f3e:	4093      	lsls	r3, r2
 8010f40:	f303 031f 	ssat	r3, #32, r3
 8010f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010f46:	fb53 f310 	smmulr	r3, r3, r0
 8010f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8010f4e:	f302 021f 	ssat	r2, #32, r2
 8010f52:	fb52 f210 	smmulr	r2, r2, r0
 8010f56:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010f58:	440b      	add	r3, r1
 8010f5a:	f303 0307 	ssat	r3, #8, r3
 8010f5e:	9803      	ldr	r0, [sp, #12]
 8010f60:	440a      	add	r2, r1
 8010f62:	7003      	strb	r3, [r0, #0]
 8010f64:	f302 0207 	ssat	r2, #8, r2
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	701a      	strb	r2, [r3, #0]
 8010f6c:	e71a      	b.n	8010da4 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8010f6e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8010f70:	fa00 f205 	lsl.w	r2, r0, r5
 8010f74:	f302 021f 	ssat	r2, #32, r2
 8010f78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010f7a:	fb52 f216 	smmulr	r2, r2, r6
 8010f7e:	fa04 f005 	lsl.w	r0, r4, r5
 8010f82:	f300 001f 	ssat	r0, #32, r0
 8010f86:	fb50 f016 	smmulr	r0, r0, r6
 8010f8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010f8c:	4422      	add	r2, r4
 8010f8e:	f302 0207 	ssat	r2, #8, r2
 8010f92:	9d03      	ldr	r5, [sp, #12]
 8010f94:	4420      	add	r0, r4
 8010f96:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010f9a:	f300 0007 	ssat	r0, #8, r0
 8010f9e:	9a02      	ldr	r2, [sp, #8]
 8010fa0:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010fa4:	e6e7      	b.n	8010d76 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8010fa6:	46d9      	mov	r9, fp
 8010fa8:	e670      	b.n	8010c8c <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 8010faa:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010fac:	f04f 0a00 	mov.w	sl, #0
 8010fb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	4619      	mov	r1, r3
 8010fba:	e622      	b.n	8010c02 <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f47f ad40 	bne.w	8010a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010fc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010fca:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010fcc:	eb03 0a02 	add.w	sl, r3, r2
 8010fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f340 82b2 	ble.w	801153c <st_sssa8_ch_nn_mat_mult_nt_t+0xc0c>
 8010fd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010fda:	4650      	mov	r0, sl
 8010fdc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010fde:	18d5      	adds	r5, r2, r3
 8010fe0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010fe2:	6811      	ldr	r1, [r2, #0]
 8010fe4:	3210      	adds	r2, #16
 8010fe6:	6804      	ldr	r4, [r0, #0]
 8010fe8:	3340      	adds	r3, #64	; 0x40
 8010fea:	fa2f f681 	sxtb16	r6, r1
 8010fee:	3010      	adds	r0, #16
 8010ff0:	f843 6c40 	str.w	r6, [r3, #-64]
 8010ff4:	ea4f 2131 	mov.w	r1, r1, ror #8
 8010ff8:	42aa      	cmp	r2, r5
 8010ffa:	fa2f f181 	sxtb16	r1, r1
 8010ffe:	f843 1c3c 	str.w	r1, [r3, #-60]
 8011002:	ea4f 2134 	mov.w	r1, r4, ror #8
 8011006:	fa2f f484 	sxtb16	r4, r4
 801100a:	fa2f f181 	sxtb16	r1, r1
 801100e:	f843 4c38 	str.w	r4, [r3, #-56]
 8011012:	f843 1c34 	str.w	r1, [r3, #-52]
 8011016:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 801101a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801101e:	ea4f 2631 	mov.w	r6, r1, ror #8
 8011022:	fa2f f181 	sxtb16	r1, r1
 8011026:	fa2f f686 	sxtb16	r6, r6
 801102a:	f843 1c28 	str.w	r1, [r3, #-40]
 801102e:	f843 6c24 	str.w	r6, [r3, #-36]
 8011032:	ea4f 2634 	mov.w	r6, r4, ror #8
 8011036:	fa2f f484 	sxtb16	r4, r4
 801103a:	f843 4c30 	str.w	r4, [r3, #-48]
 801103e:	fa2f f486 	sxtb16	r4, r6
 8011042:	f843 4c2c 	str.w	r4, [r3, #-44]
 8011046:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801104a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801104e:	ea4f 2634 	mov.w	r6, r4, ror #8
 8011052:	fa2f f484 	sxtb16	r4, r4
 8011056:	fa2f f686 	sxtb16	r6, r6
 801105a:	f843 4c20 	str.w	r4, [r3, #-32]
 801105e:	ea4f 2431 	mov.w	r4, r1, ror #8
 8011062:	f843 6c1c 	str.w	r6, [r3, #-28]
 8011066:	fa2f f484 	sxtb16	r4, r4
 801106a:	fa2f f181 	sxtb16	r1, r1
 801106e:	f843 4c14 	str.w	r4, [r3, #-20]
 8011072:	f843 1c18 	str.w	r1, [r3, #-24]
 8011076:	f852 4c04 	ldr.w	r4, [r2, #-4]
 801107a:	f850 1c04 	ldr.w	r1, [r0, #-4]
 801107e:	ea4f 2634 	mov.w	r6, r4, ror #8
 8011082:	fa2f f484 	sxtb16	r4, r4
 8011086:	fa2f f686 	sxtb16	r6, r6
 801108a:	f843 4c10 	str.w	r4, [r3, #-16]
 801108e:	ea4f 2431 	mov.w	r4, r1, ror #8
 8011092:	f843 6c0c 	str.w	r6, [r3, #-12]
 8011096:	fa2f f484 	sxtb16	r4, r4
 801109a:	fa2f f181 	sxtb16	r1, r1
 801109e:	f843 4c04 	str.w	r4, [r3, #-4]
 80110a2:	f843 1c08 	str.w	r1, [r3, #-8]
 80110a6:	d19c      	bne.n	8010fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 80110a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80110aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80110ac:	9925      	ldr	r1, [sp, #148]	; 0x94
 80110ae:	449a      	add	sl, r3
 80110b0:	469c      	mov	ip, r3
 80110b2:	1857      	adds	r7, r2, r1
 80110b4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80110b6:	3b03      	subs	r3, #3
 80110b8:	4563      	cmp	r3, ip
 80110ba:	f340 823d 	ble.w	8011538 <st_sssa8_ch_nn_mat_mult_nt_t+0xc08>
 80110be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110c0:	463a      	mov	r2, r7
 80110c2:	4650      	mov	r0, sl
 80110c4:	eba3 030c 	sub.w	r3, r3, ip
 80110c8:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80110cc:	f108 0e01 	add.w	lr, r8, #1
 80110d0:	ea4f 098e 	mov.w	r9, lr, lsl #2
 80110d4:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 80110d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110dc:	3210      	adds	r2, #16
 80110de:	f850 1b04 	ldr.w	r1, [r0], #4
 80110e2:	fa2f f483 	sxtb16	r4, r3
 80110e6:	42b5      	cmp	r5, r6
 80110e8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80110ec:	fa2f f383 	sxtb16	r3, r3
 80110f0:	f842 3c0c 	str.w	r3, [r2, #-12]
 80110f4:	ea4f 2331 	mov.w	r3, r1, ror #8
 80110f8:	fa2f f181 	sxtb16	r1, r1
 80110fc:	f842 4c10 	str.w	r4, [r2, #-16]
 8011100:	f842 1c08 	str.w	r1, [r2, #-8]
 8011104:	fa2f f383 	sxtb16	r3, r3
 8011108:	f842 3c04 	str.w	r3, [r2, #-4]
 801110c:	d1e4      	bne.n	80110d8 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 801110e:	f10c 0304 	add.w	r3, ip, #4
 8011112:	44ca      	add	sl, r9
 8011114:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8011118:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 801111c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801111e:	4563      	cmp	r3, ip
 8011120:	f77f ac92 	ble.w	8010a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8011124:	f996 3000 	ldrsb.w	r3, [r6]
 8011128:	803b      	strh	r3, [r7, #0]
 801112a:	f10c 0301 	add.w	r3, ip, #1
 801112e:	f99a 2000 	ldrsb.w	r2, [sl]
 8011132:	807a      	strh	r2, [r7, #2]
 8011134:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011136:	429a      	cmp	r2, r3
 8011138:	f77f ac86 	ble.w	8010a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801113c:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8011140:	80bb      	strh	r3, [r7, #4]
 8011142:	f10c 0302 	add.w	r3, ip, #2
 8011146:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 801114a:	80fa      	strh	r2, [r7, #6]
 801114c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801114e:	429a      	cmp	r2, r3
 8011150:	f77f ac7a 	ble.w	8010a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8011154:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8011158:	f10c 0c03 	add.w	ip, ip, #3
 801115c:	813b      	strh	r3, [r7, #8]
 801115e:	4594      	cmp	ip, r2
 8011160:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8011164:	817b      	strh	r3, [r7, #10]
 8011166:	f6bf ac6f 	bge.w	8010a48 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801116a:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801116e:	81bb      	strh	r3, [r7, #12]
 8011170:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8011174:	81fb      	strh	r3, [r7, #14]
 8011176:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011178:	2b00      	cmp	r3, #0
 801117a:	f43f ac69 	beq.w	8010a50 <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 801117e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011180:	2800      	cmp	r0, #0
 8011182:	f000 81cd 	beq.w	8011520 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf0>
 8011186:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011188:	2300      	movs	r3, #0
 801118a:	f102 0110 	add.w	r1, r2, #16
 801118e:	461a      	mov	r2, r3
 8011190:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 8011194:	3801      	subs	r0, #1
 8011196:	f101 0110 	add.w	r1, r1, #16
 801119a:	eba3 0304 	sub.w	r3, r3, r4
 801119e:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 80111a2:	eba2 0204 	sub.w	r2, r2, r4
 80111a6:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 80111aa:	eba3 0304 	sub.w	r3, r3, r4
 80111ae:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 80111b2:	eba2 0204 	sub.w	r2, r2, r4
 80111b6:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 80111ba:	eba3 0304 	sub.w	r3, r3, r4
 80111be:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 80111c2:	eba2 0204 	sub.w	r2, r2, r4
 80111c6:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 80111ca:	eba3 0304 	sub.w	r3, r3, r4
 80111ce:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 80111d2:	eba2 0204 	sub.w	r2, r2, r4
 80111d6:	d1db      	bne.n	8011190 <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 80111d8:	9945      	ldr	r1, [sp, #276]	; 0x114
 80111da:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80111dc:	4401      	add	r1, r0
 80111de:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 80111e0:	b1cc      	cbz	r4, 8011216 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 80111e2:	f9b1 0000 	ldrsh.w	r0, [r1]
 80111e6:	2c01      	cmp	r4, #1
 80111e8:	eba3 0300 	sub.w	r3, r3, r0
 80111ec:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80111f0:	eba2 0200 	sub.w	r2, r2, r0
 80111f4:	d00f      	beq.n	8011216 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 80111f6:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 80111fa:	2c02      	cmp	r4, #2
 80111fc:	eba3 0300 	sub.w	r3, r3, r0
 8011200:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8011204:	eba2 0200 	sub.w	r2, r2, r0
 8011208:	d005      	beq.n	8011216 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801120a:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 801120e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8011212:	1a1b      	subs	r3, r3, r0
 8011214:	1a52      	subs	r2, r2, r1
 8011216:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8011218:	fb03 f101 	mul.w	r1, r3, r1
 801121c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801121e:	fb03 f202 	mul.w	r2, r3, r2
 8011222:	e417      	b.n	8010a54 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 8011224:	2301      	movs	r3, #1
 8011226:	9308      	str	r3, [sp, #32]
 8011228:	e400      	b.n	8010a2c <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 801122a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801122c:	2b00      	cmp	r3, #0
 801122e:	f340 817d 	ble.w	801152c <st_sssa8_ch_nn_mat_mult_nt_t+0xbfc>
 8011232:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011234:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 8011238:	eb0b 0003 	add.w	r0, fp, r3
 801123c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801123e:	f8db 1000 	ldr.w	r1, [fp]
 8011242:	681e      	ldr	r6, [r3, #0]
 8011244:	fa2f f481 	sxtb16	r4, r1
 8011248:	fa2f f191 	sxtb16	r1, r1, ror #8
 801124c:	fb24 5506 	smlad	r5, r4, r6, r5
 8011250:	685e      	ldr	r6, [r3, #4]
 8011252:	fb21 5606 	smlad	r6, r1, r6, r5
 8011256:	689d      	ldr	r5, [r3, #8]
 8011258:	fb24 2205 	smlad	r2, r4, r5, r2
 801125c:	68dc      	ldr	r4, [r3, #12]
 801125e:	fb21 2104 	smlad	r1, r1, r4, r2
 8011262:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011266:	691d      	ldr	r5, [r3, #16]
 8011268:	fa2f f482 	sxtb16	r4, r2
 801126c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011270:	fb24 6505 	smlad	r5, r4, r5, r6
 8011274:	695e      	ldr	r6, [r3, #20]
 8011276:	fb22 5606 	smlad	r6, r2, r6, r5
 801127a:	699d      	ldr	r5, [r3, #24]
 801127c:	fb24 1105 	smlad	r1, r4, r5, r1
 8011280:	69dc      	ldr	r4, [r3, #28]
 8011282:	fb22 1104 	smlad	r1, r2, r4, r1
 8011286:	f8db 2008 	ldr.w	r2, [fp, #8]
 801128a:	6a1d      	ldr	r5, [r3, #32]
 801128c:	fa2f f482 	sxtb16	r4, r2
 8011290:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011294:	fb24 6505 	smlad	r5, r4, r5, r6
 8011298:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801129a:	fb22 5606 	smlad	r6, r2, r6, r5
 801129e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80112a0:	fb24 1105 	smlad	r1, r4, r5, r1
 80112a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80112a6:	fb22 1104 	smlad	r1, r2, r4, r1
 80112aa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80112ae:	3340      	adds	r3, #64	; 0x40
 80112b0:	fa2f f482 	sxtb16	r4, r2
 80112b4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80112b8:	f10b 0b10 	add.w	fp, fp, #16
 80112bc:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 80112c0:	f853 cc08 	ldr.w	ip, [r3, #-8]
 80112c4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80112c8:	fa2f f292 	sxtb16	r2, r2, ror #8
 80112cc:	fb24 6505 	smlad	r5, r4, r5, r6
 80112d0:	fb22 550e 	smlad	r5, r2, lr, r5
 80112d4:	fb24 110c 	smlad	r1, r4, ip, r1
 80112d8:	fb22 1207 	smlad	r2, r2, r7, r1
 80112dc:	4583      	cmp	fp, r0
 80112de:	d1ae      	bne.n	801123e <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 80112e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80112e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80112e6:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 80112ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80112ec:	eb03 0e02 	add.w	lr, r3, r2
 80112f0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80112f2:	3b03      	subs	r3, #3
 80112f4:	4543      	cmp	r3, r8
 80112f6:	f340 8117 	ble.w	8011528 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf8>
 80112fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80112fe:	eba3 0a08 	sub.w	sl, r3, r8
 8011302:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011304:	4673      	mov	r3, lr
 8011306:	f8cd e008 	str.w	lr, [sp, #8]
 801130a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 801130e:	f10a 0901 	add.w	r9, sl, #1
 8011312:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8011316:	f850 2b04 	ldr.w	r2, [r0], #4
 801131a:	3310      	adds	r3, #16
 801131c:	fa2f f182 	sxtb16	r1, r2
 8011320:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8011324:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 8011328:	f853 ec08 	ldr.w	lr, [r3, #-8]
 801132c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8011330:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011334:	fb21 6604 	smlad	r6, r1, r4, r6
 8011338:	fb22 660b 	smlad	r6, r2, fp, r6
 801133c:	fb21 550e 	smlad	r5, r1, lr, r5
 8011340:	fb22 5507 	smlad	r5, r2, r7, r5
 8011344:	4560      	cmp	r0, ip
 8011346:	d1e6      	bne.n	8011316 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 8011348:	f8dd e008 	ldr.w	lr, [sp, #8]
 801134c:	f108 0804 	add.w	r8, r8, #4
 8011350:	950b      	str	r5, [sp, #44]	; 0x2c
 8011352:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 8011356:	960c      	str	r6, [sp, #48]	; 0x30
 8011358:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 801135c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801135e:	4543      	cmp	r3, r8
 8011360:	dd40      	ble.n	80113e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8011362:	f99c 3000 	ldrsb.w	r3, [ip]
 8011366:	f8be 2000 	ldrh.w	r2, [lr]
 801136a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801136c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801136e:	fb12 1103 	smlabb	r1, r2, r3, r1
 8011372:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011376:	fb12 0003 	smlabb	r0, r2, r3, r0
 801137a:	f108 0301 	add.w	r3, r8, #1
 801137e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011380:	910c      	str	r1, [sp, #48]	; 0x30
 8011382:	429a      	cmp	r2, r3
 8011384:	900b      	str	r0, [sp, #44]	; 0x2c
 8011386:	dd2d      	ble.n	80113e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8011388:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 801138c:	f8be 2004 	ldrh.w	r2, [lr, #4]
 8011390:	fb12 1103 	smlabb	r1, r2, r3, r1
 8011394:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8011398:	fb12 0003 	smlabb	r0, r2, r3, r0
 801139c:	f108 0302 	add.w	r3, r8, #2
 80113a0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80113a2:	910c      	str	r1, [sp, #48]	; 0x30
 80113a4:	429a      	cmp	r2, r3
 80113a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80113a8:	dd1c      	ble.n	80113e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80113aa:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 80113ae:	f108 0803 	add.w	r8, r8, #3
 80113b2:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80113b6:	fb12 1103 	smlabb	r1, r2, r3, r1
 80113ba:	f8be 200a 	ldrh.w	r2, [lr, #10]
 80113be:	fb12 0003 	smlabb	r0, r2, r3, r0
 80113c2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80113c4:	910c      	str	r1, [sp, #48]	; 0x30
 80113c6:	4543      	cmp	r3, r8
 80113c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80113ca:	dd0b      	ble.n	80113e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80113cc:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 80113d0:	f8be 200c 	ldrh.w	r2, [lr, #12]
 80113d4:	fb12 1203 	smlabb	r2, r2, r3, r1
 80113d8:	920c      	str	r2, [sp, #48]	; 0x30
 80113da:	f8be 200e 	ldrh.w	r2, [lr, #14]
 80113de:	fb12 0303 	smlabb	r3, r2, r3, r0
 80113e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80113e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113e6:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 80113ea:	2915      	cmp	r1, #21
 80113ec:	dd3d      	ble.n	801146a <st_sssa8_ch_nn_mat_mult_nt_t+0xb3a>
 80113ee:	1e8a      	subs	r2, r1, #2
 80113f0:	2301      	movs	r3, #1
 80113f2:	3901      	subs	r1, #1
 80113f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113f6:	fa03 f202 	lsl.w	r2, r3, r2
 80113fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011400:	fb50 2303 	smmla	r3, r0, r3, r2
 8011404:	fa43 f101 	asr.w	r1, r3, r1
 8011408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801140a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801140e:	440b      	add	r3, r1
 8011410:	f303 0307 	ssat	r3, #8, r3
 8011414:	9a01      	ldr	r2, [sp, #4]
 8011416:	7013      	strb	r3, [r2, #0]
 8011418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801141a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801141e:	2915      	cmp	r1, #21
 8011420:	dd13      	ble.n	801144a <st_sssa8_ch_nn_mat_mult_nt_t+0xb1a>
 8011422:	1e8a      	subs	r2, r1, #2
 8011424:	2301      	movs	r3, #1
 8011426:	3901      	subs	r1, #1
 8011428:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801142a:	fa03 f202 	lsl.w	r2, r3, r2
 801142e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	fb50 2303 	smmla	r3, r0, r3, r2
 8011436:	fa43 f101 	asr.w	r1, r3, r1
 801143a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	440b      	add	r3, r1
 8011440:	f303 0307 	ssat	r3, #8, r3
 8011444:	9a01      	ldr	r2, [sp, #4]
 8011446:	7053      	strb	r3, [r2, #1]
 8011448:	e4c4      	b.n	8010dd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801144a:	2900      	cmp	r1, #0
 801144c:	dd56      	ble.n	80114fc <st_sssa8_ch_nn_mat_mult_nt_t+0xbcc>
 801144e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011450:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011452:	0058      	lsls	r0, r3, #1
 8011454:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011456:	6812      	ldr	r2, [r2, #0]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	fb50 2303 	smmla	r3, r0, r3, r2
 801145e:	410b      	asrs	r3, r1
 8011460:	f303 0307 	ssat	r3, #8, r3
 8011464:	9a01      	ldr	r2, [sp, #4]
 8011466:	7053      	strb	r3, [r2, #1]
 8011468:	e4b4      	b.n	8010dd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801146a:	2900      	cmp	r1, #0
 801146c:	dd32      	ble.n	80114d4 <st_sssa8_ch_nn_mat_mult_nt_t+0xba4>
 801146e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011472:	0058      	lsls	r0, r3, #1
 8011474:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011476:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801147a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801147e:	fb50 2303 	smmla	r3, r0, r3, r2
 8011482:	410b      	asrs	r3, r1
 8011484:	f303 0307 	ssat	r3, #8, r3
 8011488:	9a01      	ldr	r2, [sp, #4]
 801148a:	7013      	strb	r3, [r2, #0]
 801148c:	e7c4      	b.n	8011418 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 801148e:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8011492:	e49b      	b.n	8010dcc <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8011494:	f1bc 0f00 	cmp.w	ip, #0
 8011498:	dd0c      	ble.n	80114b4 <st_sssa8_ch_nn_mat_mult_nt_t+0xb84>
 801149a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 801149e:	682e      	ldr	r6, [r5, #0]
 80114a0:	6827      	ldr	r7, [r4, #0]
 80114a2:	fb5a 7706 	smmla	r7, sl, r6, r7
 80114a6:	fa47 f60c 	asr.w	r6, r7, ip
 80114aa:	f306 0607 	ssat	r6, #8, r6
 80114ae:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80114b0:	54be      	strb	r6, [r7, r2]
 80114b2:	e506      	b.n	8010ec2 <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 80114b4:	f1cc 0c01 	rsb	ip, ip, #1
 80114b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80114bc:	f307 071f 	ssat	r7, #32, r7
 80114c0:	682e      	ldr	r6, [r5, #0]
 80114c2:	fb57 f716 	smmulr	r7, r7, r6
 80114c6:	6826      	ldr	r6, [r4, #0]
 80114c8:	443e      	add	r6, r7
 80114ca:	f306 0607 	ssat	r6, #8, r6
 80114ce:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80114d0:	54be      	strb	r6, [r7, r2]
 80114d2:	e4f6      	b.n	8010ec2 <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 80114d4:	f1c1 0101 	rsb	r1, r1, #1
 80114d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114da:	408a      	lsls	r2, r1
 80114dc:	f302 021f 	ssat	r2, #32, r2
 80114e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80114e2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80114e6:	fb52 f213 	smmulr	r2, r2, r3
 80114ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80114ec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80114f0:	4413      	add	r3, r2
 80114f2:	f303 0307 	ssat	r3, #8, r3
 80114f6:	9a01      	ldr	r2, [sp, #4]
 80114f8:	7013      	strb	r3, [r2, #0]
 80114fa:	e78d      	b.n	8011418 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 80114fc:	f1c1 0101 	rsb	r1, r1, #1
 8011500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011502:	408a      	lsls	r2, r1
 8011504:	f302 021f 	ssat	r2, #32, r2
 8011508:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	fb52 f213 	smmulr	r2, r2, r3
 8011510:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4413      	add	r3, r2
 8011516:	f303 0307 	ssat	r3, #8, r3
 801151a:	9a01      	ldr	r2, [sp, #4]
 801151c:	7053      	strb	r3, [r2, #1]
 801151e:	e459      	b.n	8010dd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8011520:	4602      	mov	r2, r0
 8011522:	9945      	ldr	r1, [sp, #276]	; 0x114
 8011524:	4603      	mov	r3, r0
 8011526:	e65a      	b.n	80111de <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 8011528:	4684      	mov	ip, r0
 801152a:	e717      	b.n	801135c <st_sssa8_ch_nn_mat_mult_nt_t+0xa2c>
 801152c:	4658      	mov	r0, fp
 801152e:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 8011532:	f04f 0800 	mov.w	r8, #0
 8011536:	e6db      	b.n	80112f0 <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 8011538:	462e      	mov	r6, r5
 801153a:	e5ef      	b.n	801111c <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 801153c:	9f45      	ldr	r7, [sp, #276]	; 0x114
 801153e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8011540:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 8011544:	e5b6      	b.n	80110b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>
 8011546:	bf00      	nop

08011548 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 8011548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154c:	b0c7      	sub	sp, #284	; 0x11c
 801154e:	469c      	mov	ip, r3
 8011550:	4688      	mov	r8, r1
 8011552:	902d      	str	r0, [sp, #180]	; 0xb4
 8011554:	9328      	str	r3, [sp, #160]	; 0xa0
 8011556:	9853      	ldr	r0, [sp, #332]	; 0x14c
 8011558:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 801155c:	f8bd 615c 	ldrh.w	r6, [sp, #348]	; 0x15c
 8011560:	fb00 f003 	mul.w	r0, r0, r3
 8011564:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011566:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 801156a:	9131      	str	r1, [sp, #196]	; 0xc4
 801156c:	962e      	str	r6, [sp, #184]	; 0xb8
 801156e:	f8bd 1168 	ldrh.w	r1, [sp, #360]	; 0x168
 8011572:	f8bd 6160 	ldrh.w	r6, [sp, #352]	; 0x160
 8011576:	9243      	str	r2, [sp, #268]	; 0x10c
 8011578:	9006      	str	r0, [sp, #24]
 801157a:	9745      	str	r7, [sp, #276]	; 0x114
 801157c:	960c      	str	r6, [sp, #48]	; 0x30
 801157e:	910a      	str	r1, [sp, #40]	; 0x28
 8011580:	e9dd 455d 	ldrd	r4, r5, [sp, #372]	; 0x174
 8011584:	2d00      	cmp	r5, #0
 8011586:	bf18      	it	ne
 8011588:	462c      	movne	r4, r5
 801158a:	f8bd 5158 	ldrh.w	r5, [sp, #344]	; 0x158
 801158e:	2b01      	cmp	r3, #1
 8011590:	945d      	str	r4, [sp, #372]	; 0x174
 8011592:	f8bd 4150 	ldrh.w	r4, [sp, #336]	; 0x150
 8011596:	9532      	str	r5, [sp, #200]	; 0xc8
 8011598:	9444      	str	r4, [sp, #272]	; 0x110
 801159a:	f340 82aa 	ble.w	8011af2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5aa>
 801159e:	3b02      	subs	r3, #2
 80115a0:	fb00 f101 	mul.w	r1, r0, r1
 80115a4:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 80115a6:	4696      	mov	lr, r2
 80115a8:	085b      	lsrs	r3, r3, #1
 80115aa:	9139      	str	r1, [sp, #228]	; 0xe4
 80115ac:	fb06 f404 	mul.w	r4, r6, r4
 80115b0:	460e      	mov	r6, r1
 80115b2:	3301      	adds	r3, #1
 80115b4:	1081      	asrs	r1, r0, #2
 80115b6:	1eaa      	subs	r2, r5, #2
 80115b8:	9407      	str	r4, [sp, #28]
 80115ba:	9337      	str	r3, [sp, #220]	; 0xdc
 80115bc:	f1a0 0310 	sub.w	r3, r0, #16
 80115c0:	9134      	str	r1, [sp, #208]	; 0xd0
 80115c2:	f000 0103 	and.w	r1, r0, #3
 80115c6:	9852      	ldr	r0, [sp, #328]	; 0x148
 80115c8:	0852      	lsrs	r2, r2, #1
 80115ca:	9135      	str	r1, [sp, #212]	; 0xd4
 80115cc:	0041      	lsls	r1, r0, #1
 80115ce:	9341      	str	r3, [sp, #260]	; 0x104
 80115d0:	091b      	lsrs	r3, r3, #4
 80115d2:	4608      	mov	r0, r1
 80115d4:	9120      	str	r1, [sp, #128]	; 0x80
 80115d6:	fb02 f104 	mul.w	r1, r2, r4
 80115da:	3301      	adds	r3, #1
 80115dc:	fb02 0000 	mla	r0, r2, r0, r0
 80115e0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80115e2:	9040      	str	r0, [sp, #256]	; 0x100
 80115e4:	0048      	lsls	r0, r1, #1
 80115e6:	903f      	str	r0, [sp, #252]	; 0xfc
 80115e8:	f06f 0003 	mvn.w	r0, #3
 80115ec:	1b00      	subs	r0, r0, r4
 80115ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80115f0:	1f20      	subs	r0, r4, #4
 80115f2:	9011      	str	r0, [sp, #68]	; 0x44
 80115f4:	1e68      	subs	r0, r5, #1
 80115f6:	901d      	str	r0, [sp, #116]	; 0x74
 80115f8:	9806      	ldr	r0, [sp, #24]
 80115fa:	380f      	subs	r0, #15
 80115fc:	900d      	str	r0, [sp, #52]	; 0x34
 80115fe:	f005 0001 	and.w	r0, r5, #1
 8011602:	903a      	str	r0, [sp, #232]	; 0xe8
 8011604:	0060      	lsls	r0, r4, #1
 8011606:	901e      	str	r0, [sp, #120]	; 0x78
 8011608:	0070      	lsls	r0, r6, #1
 801160a:	9036      	str	r0, [sp, #216]	; 0xd8
 801160c:	00b0      	lsls	r0, r6, #2
 801160e:	903b      	str	r0, [sp, #236]	; 0xec
 8011610:	9851      	ldr	r0, [sp, #324]	; 0x144
 8011612:	3002      	adds	r0, #2
 8011614:	9029      	str	r0, [sp, #164]	; 0xa4
 8011616:	9850      	ldr	r0, [sp, #320]	; 0x140
 8011618:	3004      	adds	r0, #4
 801161a:	9026      	str	r0, [sp, #152]	; 0x98
 801161c:	985c      	ldr	r0, [sp, #368]	; 0x170
 801161e:	3004      	adds	r0, #4
 8011620:	9027      	str	r0, [sp, #156]	; 0x9c
 8011622:	4670      	mov	r0, lr
 8011624:	3004      	adds	r0, #4
 8011626:	9030      	str	r0, [sp, #192]	; 0xc0
 8011628:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
 801162c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801162e:	9042      	str	r0, [sp, #264]	; 0x108
 8011630:	0110      	lsls	r0, r2, #4
 8011632:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8011634:	0092      	lsls	r2, r2, #2
 8011636:	903d      	str	r0, [sp, #244]	; 0xf4
 8011638:	923e      	str	r2, [sp, #248]	; 0xf8
 801163a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801163c:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 8011640:	fb06 f207 	mul.w	r2, r6, r7
 8011644:	923c      	str	r2, [sp, #240]	; 0xf0
 8011646:	011a      	lsls	r2, r3, #4
 8011648:	019b      	lsls	r3, r3, #6
 801164a:	920e      	str	r2, [sp, #56]	; 0x38
 801164c:	930f      	str	r3, [sp, #60]	; 0x3c
 801164e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011650:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8011654:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011658:	2b15      	cmp	r3, #21
 801165a:	931f      	str	r3, [sp, #124]	; 0x7c
 801165c:	921c      	str	r2, [sp, #112]	; 0x70
 801165e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011660:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011664:	6812      	ldr	r2, [r2, #0]
 8011666:	9121      	str	r1, [sp, #132]	; 0x84
 8011668:	9222      	str	r2, [sp, #136]	; 0x88
 801166a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801166c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011670:	6812      	ldr	r2, [r2, #0]
 8011672:	9123      	str	r1, [sp, #140]	; 0x8c
 8011674:	9224      	str	r2, [sp, #144]	; 0x90
 8011676:	f300 851b 	bgt.w	80120b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb68>
 801167a:	2b00      	cmp	r3, #0
 801167c:	bfcc      	ite	gt
 801167e:	2300      	movgt	r3, #0
 8011680:	2301      	movle	r3, #1
 8011682:	425b      	negs	r3, r3
 8011684:	9318      	str	r3, [sp, #96]	; 0x60
 8011686:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011688:	2b15      	cmp	r3, #21
 801168a:	f300 84a3 	bgt.w	8011fd4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa8c>
 801168e:	2b00      	cmp	r3, #0
 8011690:	bfcc      	ite	gt
 8011692:	2300      	movgt	r3, #0
 8011694:	2301      	movle	r3, #1
 8011696:	425b      	negs	r3, r3
 8011698:	9319      	str	r3, [sp, #100]	; 0x64
 801169a:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 801169c:	2b00      	cmp	r3, #0
 801169e:	f000 849f 	beq.w	8011fe0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa98>
 80116a2:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f040 84a9 	bne.w	8011ffc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab4>
 80116aa:	461c      	mov	r4, r3
 80116ac:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80116ae:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80116b2:	18a2      	adds	r2, r4, r2
 80116b4:	921a      	str	r2, [sp, #104]	; 0x68
 80116b6:	680a      	ldr	r2, [r1, #0]
 80116b8:	4413      	add	r3, r2
 80116ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80116bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 81f3 	beq.w	8011aaa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 80116c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80116c6:	2301      	movs	r3, #1
 80116c8:	3a02      	subs	r2, #2
 80116ca:	fa03 f202 	lsl.w	r2, r3, r2
 80116ce:	922a      	str	r2, [sp, #168]	; 0xa8
 80116d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116d2:	3a02      	subs	r2, #2
 80116d4:	4093      	lsls	r3, r2
 80116d6:	932b      	str	r3, [sp, #172]	; 0xac
 80116d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80116da:	f023 030f 	bic.w	r3, r3, #15
 80116de:	3314      	adds	r3, #20
 80116e0:	9312      	str	r3, [sp, #72]	; 0x48
 80116e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80116e4:	932c      	str	r3, [sp, #176]	; 0xb0
 80116e6:	9304      	str	r3, [sp, #16]
 80116e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80116ea:	9325      	str	r3, [sp, #148]	; 0x94
 80116ec:	2300      	movs	r3, #0
 80116ee:	9333      	str	r3, [sp, #204]	; 0xcc
 80116f0:	9b06      	ldr	r3, [sp, #24]
 80116f2:	3b04      	subs	r3, #4
 80116f4:	9310      	str	r3, [sp, #64]	; 0x40
 80116f6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	9338      	str	r3, [sp, #224]	; 0xe0
 80116fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011700:	2b00      	cmp	r3, #0
 8011702:	f340 81c3 	ble.w	8011a8c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x544>
 8011706:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011708:	9925      	ldr	r1, [sp, #148]	; 0x94
 801170a:	3301      	adds	r3, #1
 801170c:	18cb      	adds	r3, r1, r3
 801170e:	9314      	str	r3, [sp, #80]	; 0x50
 8011710:	1c4b      	adds	r3, r1, #1
 8011712:	9315      	str	r3, [sp, #84]	; 0x54
 8011714:	9b07      	ldr	r3, [sp, #28]
 8011716:	4413      	add	r3, r2
 8011718:	9316      	str	r3, [sp, #88]	; 0x58
 801171a:	2300      	movs	r3, #0
 801171c:	9317      	str	r3, [sp, #92]	; 0x5c
 801171e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 82ee 	beq.w	8011d02 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ba>
 8011726:	9b06      	ldr	r3, [sp, #24]
 8011728:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801172c:	3b03      	subs	r3, #3
 801172e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011730:	4665      	mov	r5, ip
 8011732:	930b      	str	r3, [sp, #44]	; 0x2c
 8011734:	4693      	mov	fp, r2
 8011736:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011738:	9304      	str	r3, [sp, #16]
 801173a:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 801173c:	9303      	str	r3, [sp, #12]
 801173e:	2300      	movs	r3, #0
 8011740:	9305      	str	r3, [sp, #20]
 8011742:	9907      	ldr	r1, [sp, #28]
 8011744:	9b04      	ldr	r3, [sp, #16]
 8011746:	1a5f      	subs	r7, r3, r1
 8011748:	990d      	ldr	r1, [sp, #52]	; 0x34
 801174a:	2900      	cmp	r1, #0
 801174c:	f340 826d 	ble.w	8011c2a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e2>
 8011750:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011752:	1d1c      	adds	r4, r3, #4
 8011754:	9803      	ldr	r0, [sp, #12]
 8011756:	18cb      	adds	r3, r1, r3
 8011758:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801175c:	9708      	str	r7, [sp, #32]
 801175e:	9302      	str	r3, [sp, #8]
 8011760:	f85a 6004 	ldr.w	r6, [sl, r4]
 8011764:	eb0a 0704 	add.w	r7, sl, r4
 8011768:	fa2f f186 	sxtb16	r1, r6
 801176c:	6803      	ldr	r3, [r0, #0]
 801176e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011772:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011776:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801177a:	fa2f f696 	sxtb16	r6, r6, ror #8
 801177e:	fb21 2203 	smlad	r2, r1, r3, r2
 8011782:	fb26 2208 	smlad	r2, r6, r8, r2
 8011786:	fb21 c109 	smlad	r1, r1, r9, ip
 801178a:	fb26 110e 	smlad	r1, r6, lr, r1
 801178e:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8011792:	fa2f fc86 	sxtb16	ip, r6
 8011796:	fa2f f696 	sxtb16	r6, r6, ror #8
 801179a:	fb2c b303 	smlad	r3, ip, r3, fp
 801179e:	fb2c 5509 	smlad	r5, ip, r9, r5
 80117a2:	fb26 3308 	smlad	r3, r6, r8, r3
 80117a6:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80117aa:	f8d0 b014 	ldr.w	fp, [r0, #20]
 80117ae:	fb26 5e0e 	smlad	lr, r6, lr, r5
 80117b2:	687d      	ldr	r5, [r7, #4]
 80117b4:	f8d0 c018 	ldr.w	ip, [r0, #24]
 80117b8:	fa2f f685 	sxtb16	r6, r5
 80117bc:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80117c0:	fa2f f595 	sxtb16	r5, r5, ror #8
 80117c4:	fb26 2208 	smlad	r2, r6, r8, r2
 80117c8:	fb25 220b 	smlad	r2, r5, fp, r2
 80117cc:	fb26 160c 	smlad	r6, r6, ip, r1
 80117d0:	fb25 6609 	smlad	r6, r5, r9, r6
 80117d4:	6821      	ldr	r1, [r4, #0]
 80117d6:	fa2f f581 	sxtb16	r5, r1
 80117da:	fa2f f191 	sxtb16	r1, r1, ror #8
 80117de:	fb25 3808 	smlad	r8, r5, r8, r3
 80117e2:	fb25 ee0c 	smlad	lr, r5, ip, lr
 80117e6:	fb21 880b 	smlad	r8, r1, fp, r8
 80117ea:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80117ee:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 80117f2:	fb21 e909 	smlad	r9, r1, r9, lr
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
 80117fc:	fa2f f583 	sxtb16	r5, r3
 8011800:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8011802:	fa2f f393 	sxtb16	r3, r3, ror #8
 8011806:	fb25 220b 	smlad	r2, r5, fp, r2
 801180a:	fb23 220c 	smlad	r2, r3, ip, r2
 801180e:	fb25 650e 	smlad	r5, r5, lr, r6
 8011812:	fb23 5301 	smlad	r3, r3, r1, r5
 8011816:	6866      	ldr	r6, [r4, #4]
 8011818:	fa2f f586 	sxtb16	r5, r6
 801181c:	fa2f f696 	sxtb16	r6, r6, ror #8
 8011820:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8011824:	fb25 990e 	smlad	r9, r5, lr, r9
 8011828:	fb26 b80c 	smlad	r8, r6, ip, fp
 801182c:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
 8011830:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 8011834:	fb26 9101 	smlad	r1, r6, r1, r9
 8011838:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 801183c:	3040      	adds	r0, #64	; 0x40
 801183e:	fa2f f58c 	sxtb16	r5, ip
 8011842:	f850 9c08 	ldr.w	r9, [r0, #-8]
 8011846:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801184a:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801184e:	fb25 220e 	smlad	r2, r5, lr, r2
 8011852:	fb2c 220b 	smlad	r2, ip, fp, r2
 8011856:	fb25 3309 	smlad	r3, r5, r9, r3
 801185a:	fb2c 3c07 	smlad	ip, ip, r7, r3
 801185e:	68a5      	ldr	r5, [r4, #8]
 8011860:	fa2f f385 	sxtb16	r3, r5
 8011864:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011868:	fb23 880e 	smlad	r8, r3, lr, r8
 801186c:	fb23 1109 	smlad	r1, r3, r9, r1
 8011870:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8011874:	fb25 1507 	smlad	r5, r5, r7, r1
 8011878:	3410      	adds	r4, #16
 801187a:	9b02      	ldr	r3, [sp, #8]
 801187c:	429c      	cmp	r4, r3
 801187e:	f47f af6f 	bne.w	8011760 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x218>
 8011882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011884:	9903      	ldr	r1, [sp, #12]
 8011886:	9f08      	ldr	r7, [sp, #32]
 8011888:	469a      	mov	sl, r3
 801188a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801188c:	441f      	add	r7, r3
 801188e:	4401      	add	r1, r0
 8011890:	9103      	str	r1, [sp, #12]
 8011892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011894:	459a      	cmp	sl, r3
 8011896:	f280 81c6 	bge.w	8011c26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6de>
 801189a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801189c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80118a0:	eba3 030a 	sub.w	r3, r3, sl
 80118a4:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80118a8:	089b      	lsrs	r3, r3, #2
 80118aa:	4619      	mov	r1, r3
 80118ac:	9308      	str	r3, [sp, #32]
 80118ae:	9b03      	ldr	r3, [sp, #12]
 80118b0:	3101      	adds	r1, #1
 80118b2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
 80118b6:	9102      	str	r1, [sp, #8]
 80118b8:	f857 1b04 	ldr.w	r1, [r7], #4
 80118bc:	3310      	adds	r3, #16
 80118be:	fa2f f081 	sxtb16	r0, r1
 80118c2:	f853 8c10 	ldr.w	r8, [r3, #-16]
 80118c6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80118ca:	f853 ec08 	ldr.w	lr, [r3, #-8]
 80118ce:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80118d2:	fa2f f191 	sxtb16	r1, r1, ror #8
 80118d6:	fb20 2208 	smlad	r2, r0, r8, r2
 80118da:	fb21 2206 	smlad	r2, r1, r6, r2
 80118de:	fb20 cc0e 	smlad	ip, r0, lr, ip
 80118e2:	fb21 cc04 	smlad	ip, r1, r4, ip
 80118e6:	f857 100a 	ldr.w	r1, [r7, sl]
 80118ea:	fa2f f081 	sxtb16	r0, r1
 80118ee:	fa2f f191 	sxtb16	r1, r1, ror #8
 80118f2:	fb20 bb08 	smlad	fp, r0, r8, fp
 80118f6:	fb20 550e 	smlad	r5, r0, lr, r5
 80118fa:	fb21 bb06 	smlad	fp, r1, r6, fp
 80118fe:	fb21 5504 	smlad	r5, r1, r4, r5
 8011902:	454f      	cmp	r7, r9
 8011904:	d1d8      	bne.n	80118b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x370>
 8011906:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801190a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 801190e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011912:	9908      	ldr	r1, [sp, #32]
 8011914:	9303      	str	r3, [sp, #12]
 8011916:	f10a 0304 	add.w	r3, sl, #4
 801191a:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 801191e:	9e06      	ldr	r6, [sp, #24]
 8011920:	4556      	cmp	r6, sl
 8011922:	dd58      	ble.n	80119d6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x48e>
 8011924:	9c03      	ldr	r4, [sp, #12]
 8011926:	f999 3000 	ldrsb.w	r3, [r9]
 801192a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801192e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011932:	9f07      	ldr	r7, [sp, #28]
 8011934:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011938:	fb11 cc03 	smlabb	ip, r1, r3, ip
 801193c:	f919 3007 	ldrsb.w	r3, [r9, r7]
 8011940:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011944:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011948:	f10a 0301 	add.w	r3, sl, #1
 801194c:	42b3      	cmp	r3, r6
 801194e:	da3b      	bge.n	80119c8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8011950:	eb09 0307 	add.w	r3, r9, r7
 8011954:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011958:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801195c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011960:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011964:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011968:	f999 3001 	ldrsb.w	r3, [r9, #1]
 801196c:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8011970:	f109 0102 	add.w	r1, r9, #2
 8011974:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011978:	f10a 0302 	add.w	r3, sl, #2
 801197c:	42b3      	cmp	r3, r6
 801197e:	da23      	bge.n	80119c8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8011980:	57cb      	ldrsb	r3, [r1, r7]
 8011982:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8011986:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801198a:	fb10 bb03 	smlabb	fp, r0, r3, fp
 801198e:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011992:	f999 3002 	ldrsb.w	r3, [r9, #2]
 8011996:	fb11 cc03 	smlabb	ip, r1, r3, ip
 801199a:	f109 0103 	add.w	r1, r9, #3
 801199e:	fb10 2203 	smlabb	r2, r0, r3, r2
 80119a2:	f10a 0303 	add.w	r3, sl, #3
 80119a6:	42b3      	cmp	r3, r6
 80119a8:	da0e      	bge.n	80119c8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 80119aa:	57cb      	ldrsb	r3, [r1, r7]
 80119ac:	f999 0003 	ldrsb.w	r0, [r9, #3]
 80119b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80119b4:	fb11 2200 	smlabb	r2, r1, r0, r2
 80119b8:	fb11 bb03 	smlabb	fp, r1, r3, fp
 80119bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c0:	fb11 cc00 	smlabb	ip, r1, r0, ip
 80119c4:	fb11 5503 	smlabb	r5, r1, r3, r5
 80119c8:	9b06      	ldr	r3, [sp, #24]
 80119ca:	9903      	ldr	r1, [sp, #12]
 80119cc:	eba3 030a 	sub.w	r3, r3, sl
 80119d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80119d4:	9303      	str	r3, [sp, #12]
 80119d6:	9904      	ldr	r1, [sp, #16]
 80119d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80119da:	9b05      	ldr	r3, [sp, #20]
 80119dc:	4401      	add	r1, r0
 80119de:	3301      	adds	r3, #1
 80119e0:	9104      	str	r1, [sp, #16]
 80119e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80119e4:	9305      	str	r3, [sp, #20]
 80119e6:	4299      	cmp	r1, r3
 80119e8:	f47f aeab 	bne.w	8011742 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1fa>
 80119ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f040 8139 	bne.w	8011c66 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x71e>
 80119f4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80119f6:	0052      	lsls	r2, r2, #1
 80119f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119fa:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80119fe:	fb52 1203 	smmla	r2, r2, r3, r1
 8011a02:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8011a06:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011a08:	410a      	asrs	r2, r1
 8011a0a:	f302 0307 	ssat	r3, #8, r2
 8011a0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a10:	fa4b fb01 	asr.w	fp, fp, r1
 8011a14:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011a18:	f30b 0307 	ssat	r3, #8, fp
 8011a1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011a22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f040 8103 	bne.w	8011c30 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e8>
 8011a2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011a2c:	ea4f 084c 	mov.w	r8, ip, lsl #1
 8011a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011a32:	006c      	lsls	r4, r5, #1
 8011a34:	fb58 2803 	smmla	r8, r8, r3, r2
 8011a38:	fb54 2403 	smmla	r4, r4, r3, r2
 8011a3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a3e:	fa48 f802 	asr.w	r8, r8, r2
 8011a42:	f308 0307 	ssat	r3, #8, r8
 8011a46:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011a48:	4114      	asrs	r4, r2
 8011a4a:	700b      	strb	r3, [r1, #0]
 8011a4c:	f304 0307 	ssat	r3, #8, r4
 8011a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a52:	7013      	strb	r3, [r2, #0]
 8011a54:	460a      	mov	r2, r1
 8011a56:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a5a:	440a      	add	r2, r1
 8011a5c:	3302      	adds	r3, #2
 8011a5e:	9215      	str	r2, [sp, #84]	; 0x54
 8011a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a62:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a64:	440a      	add	r2, r1
 8011a66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a68:	9214      	str	r2, [sp, #80]	; 0x50
 8011a6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011a6c:	440a      	add	r2, r1
 8011a6e:	9216      	str	r2, [sp, #88]	; 0x58
 8011a70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a72:	4293      	cmp	r3, r2
 8011a74:	f6ff ae53 	blt.w	801171e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1d6>
 8011a78:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8011a7a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8011a7c:	9940      	ldr	r1, [sp, #256]	; 0x100
 8011a7e:	4413      	add	r3, r2
 8011a80:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011a82:	440a      	add	r2, r1
 8011a84:	9225      	str	r2, [sp, #148]	; 0x94
 8011a86:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011a88:	18d3      	adds	r3, r2, r3
 8011a8a:	9304      	str	r3, [sp, #16]
 8011a8c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	f040 813d 	bne.w	8011d0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7c6>
 8011a94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011a96:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8011a98:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8011a9a:	440a      	add	r2, r1
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	922c      	str	r2, [sp, #176]	; 0xb0
 8011aa0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011aa2:	9333      	str	r3, [sp, #204]	; 0xcc
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	f47f ae26 	bne.w	80116f6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1ae>
 8011aaa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8011aac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8011aae:	4413      	add	r3, r2
 8011ab0:	932f      	str	r3, [sp, #188]	; 0xbc
 8011ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011ab4:	3302      	adds	r3, #2
 8011ab6:	9328      	str	r3, [sp, #160]	; 0xa0
 8011ab8:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8011aba:	b11b      	cbz	r3, 8011ac4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57c>
 8011abc:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8011abe:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8011ac0:	4413      	add	r3, r2
 8011ac2:	935d      	str	r3, [sp, #372]	; 0x174
 8011ac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011ac6:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011ac8:	3304      	adds	r3, #4
 8011aca:	9329      	str	r3, [sp, #164]	; 0xa4
 8011acc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ace:	3308      	adds	r3, #8
 8011ad0:	9326      	str	r3, [sp, #152]	; 0x98
 8011ad2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011ad4:	3308      	adds	r3, #8
 8011ad6:	9327      	str	r3, [sp, #156]	; 0x9c
 8011ad8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011ada:	3308      	adds	r3, #8
 8011adc:	9330      	str	r3, [sp, #192]	; 0xc0
 8011ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	f47f adb4 	bne.w	801164e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x106>
 8011ae6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8011ae8:	e9dd 2136 	ldrd	r2, r1, [sp, #216]	; 0xd8
 8011aec:	fb01 3302 	mla	r3, r1, r2, r3
 8011af0:	9331      	str	r3, [sp, #196]	; 0xc4
 8011af2:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011af4:	07db      	lsls	r3, r3, #31
 8011af6:	f140 8092 	bpl.w	8011c1e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011afa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	f000 808e 	beq.w	8011c1e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011b02:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011b04:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8011b08:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011b0a:	4499      	add	r9, r3
 8011b0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011b0e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011b12:	9307      	str	r3, [sp, #28]
 8011b14:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8011b16:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 8011b1a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8011b1c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8011b20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011b24:	4413      	add	r3, r2
 8011b26:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011b28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011b2c:	9308      	str	r3, [sp, #32]
 8011b2e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d074      	beq.n	8011c1e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011b34:	9953      	ldr	r1, [sp, #332]	; 0x14c
 8011b36:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8011b38:	9e5b      	ldr	r6, [sp, #364]	; 0x16c
 8011b3a:	fb01 f202 	mul.w	r2, r1, r2
 8011b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b40:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011b44:	fb01 f202 	mul.w	r2, r1, r2
 8011b48:	9906      	ldr	r1, [sp, #24]
 8011b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8011b4c:	468e      	mov	lr, r1
 8011b4e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011b50:	440a      	add	r2, r1
 8011b52:	4693      	mov	fp, r2
 8011b54:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011b56:	fb02 f303 	mul.w	r3, r2, r3
 8011b5a:	9305      	str	r3, [sp, #20]
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	9303      	str	r3, [sp, #12]
 8011b60:	2300      	movs	r3, #0
 8011b62:	f8cd b008 	str.w	fp, [sp, #8]
 8011b66:	f8cd b018 	str.w	fp, [sp, #24]
 8011b6a:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8011b6e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011b72:	9304      	str	r3, [sp, #16]
 8011b74:	9b07      	ldr	r3, [sp, #28]
 8011b76:	6819      	ldr	r1, [r3, #0]
 8011b78:	f1bb 0f00 	cmp.w	fp, #0
 8011b7c:	d01e      	beq.n	8011bbc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x674>
 8011b7e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8011b82:	2700      	movs	r7, #0
 8011b84:	9d02      	ldr	r5, [sp, #8]
 8011b86:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 8011b8a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8011b8e:	f1be 0f00 	cmp.w	lr, #0
 8011b92:	eba5 020e 	sub.w	r2, r5, lr
 8011b96:	dd0b      	ble.n	8011bb0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 8011b98:	f10c 30ff 	add.w	r0, ip, #4294967295
 8011b9c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8011ba0:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8011ba4:	1b9b      	subs	r3, r3, r6
 8011ba6:	42aa      	cmp	r2, r5
 8011ba8:	fb04 1103 	mla	r1, r4, r3, r1
 8011bac:	d1f6      	bne.n	8011b9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x654>
 8011bae:	44f4      	add	ip, lr
 8011bb0:	3701      	adds	r7, #1
 8011bb2:	4445      	add	r5, r8
 8011bb4:	45bb      	cmp	fp, r7
 8011bb6:	d1ea      	bne.n	8011b8e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x646>
 8011bb8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8011bbc:	9b08      	ldr	r3, [sp, #32]
 8011bbe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8011bc2:	2815      	cmp	r0, #21
 8011bc4:	f340 828f 	ble.w	80120e6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb9e>
 8011bc8:	1e83      	subs	r3, r0, #2
 8011bca:	1e42      	subs	r2, r0, #1
 8011bcc:	2001      	movs	r0, #1
 8011bce:	4098      	lsls	r0, r3
 8011bd0:	f8da 3000 	ldr.w	r3, [sl]
 8011bd4:	fb51 0303 	smmla	r3, r1, r3, r0
 8011bd8:	fa43 f202 	asr.w	r2, r3, r2
 8011bdc:	f8d9 3000 	ldr.w	r3, [r9]
 8011be0:	4413      	add	r3, r2
 8011be2:	f303 0307 	ssat	r3, #8, r3
 8011be6:	f888 3000 	strb.w	r3, [r8]
 8011bea:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bee:	4490      	add	r8, r2
 8011bf0:	9a02      	ldr	r2, [sp, #8]
 8011bf2:	9b04      	ldr	r3, [sp, #16]
 8011bf4:	440a      	add	r2, r1
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	9202      	str	r2, [sp, #8]
 8011bfa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8011bfc:	9304      	str	r3, [sp, #16]
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d1b8      	bne.n	8011b74 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 8011c02:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011c04:	9905      	ldr	r1, [sp, #20]
 8011c06:	9b03      	ldr	r3, [sp, #12]
 8011c08:	440a      	add	r2, r1
 8011c0a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	9228      	str	r2, [sp, #160]	; 0xa0
 8011c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c14:	9303      	str	r3, [sp, #12]
 8011c16:	4493      	add	fp, r2
 8011c18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d1a0      	bne.n	8011b60 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x618>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	b047      	add	sp, #284	; 0x11c
 8011c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c26:	46b9      	mov	r9, r7
 8011c28:	e679      	b.n	801191e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3d6>
 8011c2a:	f04f 0a00 	mov.w	sl, #0
 8011c2e:	e630      	b.n	8011892 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x34a>
 8011c30:	3301      	adds	r3, #1
 8011c32:	d034      	beq.n	8011c9e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x756>
 8011c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c36:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011c38:	fb5c 2803 	smmla	r8, ip, r3, r2
 8011c3c:	fb55 2403 	smmla	r4, r5, r3, r2
 8011c40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011c42:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011c44:	3b01      	subs	r3, #1
 8011c46:	fa48 f203 	asr.w	r2, r8, r3
 8011c4a:	440a      	add	r2, r1
 8011c4c:	f302 0207 	ssat	r2, #8, r2
 8011c50:	fa44 f303 	asr.w	r3, r4, r3
 8011c54:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011c56:	440b      	add	r3, r1
 8011c58:	7002      	strb	r2, [r0, #0]
 8011c5a:	f303 0307 	ssat	r3, #8, r3
 8011c5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c60:	7013      	strb	r3, [r2, #0]
 8011c62:	4602      	mov	r2, r0
 8011c64:	e6f7      	b.n	8011a56 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x50e>
 8011c66:	3301      	adds	r3, #1
 8011c68:	d02e      	beq.n	8011cc8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x780>
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011c6e:	fb52 1203 	smmla	r2, r2, r3, r1
 8011c72:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8011c76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011c78:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011c7a:	3b01      	subs	r3, #1
 8011c7c:	411a      	asrs	r2, r3
 8011c7e:	440a      	add	r2, r1
 8011c80:	f302 0207 	ssat	r2, #8, r2
 8011c84:	fa4b fb03 	asr.w	fp, fp, r3
 8011c88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c8a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011c8e:	eb0b 0301 	add.w	r3, fp, r1
 8011c92:	f303 0307 	ssat	r3, #8, r3
 8011c96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011c9c:	e6c1      	b.n	8011a22 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8011c9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011ca0:	f1c3 0301 	rsb	r3, r3, #1
 8011ca4:	fa0c f203 	lsl.w	r2, ip, r3
 8011ca8:	f302 021f 	ssat	r2, #32, r2
 8011cac:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011cae:	fb52 f211 	smmulr	r2, r2, r1
 8011cb2:	fa05 f303 	lsl.w	r3, r5, r3
 8011cb6:	f303 031f 	ssat	r3, #32, r3
 8011cba:	fb53 f311 	smmulr	r3, r3, r1
 8011cbe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011cc0:	440a      	add	r2, r1
 8011cc2:	f302 0207 	ssat	r2, #8, r2
 8011cc6:	e7c5      	b.n	8011c54 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70c>
 8011cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011cca:	f1c3 0301 	rsb	r3, r3, #1
 8011cce:	409a      	lsls	r2, r3
 8011cd0:	f302 021f 	ssat	r2, #32, r2
 8011cd4:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011cd6:	fb52 f211 	smmulr	r2, r2, r1
 8011cda:	fa0b f303 	lsl.w	r3, fp, r3
 8011cde:	f303 031f 	ssat	r3, #32, r3
 8011ce2:	fb53 f311 	smmulr	r3, r3, r1
 8011ce6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011ce8:	440a      	add	r2, r1
 8011cea:	f302 0207 	ssat	r2, #8, r2
 8011cee:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011cf0:	440b      	add	r3, r1
 8011cf2:	f800 2c01 	strb.w	r2, [r0, #-1]
 8011cf6:	f303 0307 	ssat	r3, #8, r3
 8011cfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cfc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011d00:	e68f      	b.n	8011a22 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8011d02:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8011d06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011d08:	4665      	mov	r5, ip
 8011d0a:	4693      	mov	fp, r2
 8011d0c:	e66e      	b.n	80119ec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a4>
 8011d0e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	f000 8143 	beq.w	8011f9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa54>
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011d1a:	4413      	add	r3, r2
 8011d1c:	9304      	str	r3, [sp, #16]
 8011d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 8141 	beq.w	8011fa8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa60>
 8011d26:	9b06      	ldr	r3, [sp, #24]
 8011d28:	f8dd 9174 	ldr.w	r9, [sp, #372]	; 0x174
 8011d2c:	3b03      	subs	r3, #3
 8011d2e:	9308      	str	r3, [sp, #32]
 8011d30:	9b04      	ldr	r3, [sp, #16]
 8011d32:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011d36:	9302      	str	r3, [sp, #8]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d3e:	9a02      	ldr	r2, [sp, #8]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	4611      	mov	r1, r2
 8011d44:	f340 8100 	ble.w	8011f48 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa00>
 8011d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d4a:	464b      	mov	r3, r9
 8011d4c:	188c      	adds	r4, r1, r2
 8011d4e:	6808      	ldr	r0, [r1, #0]
 8011d50:	681d      	ldr	r5, [r3, #0]
 8011d52:	fa2f f280 	sxtb16	r2, r0
 8011d56:	fa2f f090 	sxtb16	r0, r0, ror #8
 8011d5a:	fb22 a505 	smlad	r5, r2, r5, sl
 8011d5e:	685e      	ldr	r6, [r3, #4]
 8011d60:	fb20 5706 	smlad	r7, r0, r6, r5
 8011d64:	689d      	ldr	r5, [r3, #8]
 8011d66:	fb22 b205 	smlad	r2, r2, r5, fp
 8011d6a:	68dd      	ldr	r5, [r3, #12]
 8011d6c:	fb20 2005 	smlad	r0, r0, r5, r2
 8011d70:	684a      	ldr	r2, [r1, #4]
 8011d72:	691e      	ldr	r6, [r3, #16]
 8011d74:	fa2f f582 	sxtb16	r5, r2
 8011d78:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011d7c:	fb25 7606 	smlad	r6, r5, r6, r7
 8011d80:	695f      	ldr	r7, [r3, #20]
 8011d82:	fb22 6607 	smlad	r6, r2, r7, r6
 8011d86:	699f      	ldr	r7, [r3, #24]
 8011d88:	fb25 0007 	smlad	r0, r5, r7, r0
 8011d8c:	69dd      	ldr	r5, [r3, #28]
 8011d8e:	fb22 0205 	smlad	r2, r2, r5, r0
 8011d92:	688f      	ldr	r7, [r1, #8]
 8011d94:	6a1d      	ldr	r5, [r3, #32]
 8011d96:	fa2f f087 	sxtb16	r0, r7
 8011d9a:	fa2f f797 	sxtb16	r7, r7, ror #8
 8011d9e:	fb20 6505 	smlad	r5, r0, r5, r6
 8011da2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8011da4:	fb27 5606 	smlad	r6, r7, r6, r5
 8011da8:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8011dac:	fb20 200b 	smlad	r0, r0, fp, r2
 8011db0:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8011db4:	fb27 000b 	smlad	r0, r7, fp, r0
 8011db8:	68ca      	ldr	r2, [r1, #12]
 8011dba:	3340      	adds	r3, #64	; 0x40
 8011dbc:	fa2f fb82 	sxtb16	fp, r2
 8011dc0:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8011dc4:	3110      	adds	r1, #16
 8011dc6:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8011dca:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8011dce:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8011dd2:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011dd6:	fb2b 6505 	smlad	r5, fp, r5, r6
 8011dda:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8011dde:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8011de2:	fb22 bb07 	smlad	fp, r2, r7, fp
 8011de6:	42a1      	cmp	r1, r4
 8011de8:	d1b1      	bne.n	8011d4e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x806>
 8011dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dec:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8011df0:	4499      	add	r9, r3
 8011df2:	9b08      	ldr	r3, [sp, #32]
 8011df4:	459e      	cmp	lr, r3
 8011df6:	f280 80a5 	bge.w	8011f44 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9fc>
 8011dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	eba3 080e 	sub.w	r8, r3, lr
 8011e02:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8011e06:	f108 0301 	add.w	r3, r8, #1
 8011e0a:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8011e0e:	9305      	str	r3, [sp, #20]
 8011e10:	f854 3b04 	ldr.w	r3, [r4], #4
 8011e14:	3110      	adds	r1, #16
 8011e16:	fa2f f283 	sxtb16	r2, r3
 8011e1a:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8011e1e:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8011e22:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8011e26:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8011e2a:	fa2f f393 	sxtb16	r3, r3, ror #8
 8011e2e:	fb22 a000 	smlad	r0, r2, r0, sl
 8011e32:	fb23 0a07 	smlad	sl, r3, r7, r0
 8011e36:	fb22 b206 	smlad	r2, r2, r6, fp
 8011e3a:	fb23 2b05 	smlad	fp, r3, r5, r2
 8011e3e:	4564      	cmp	r4, ip
 8011e40:	d1e6      	bne.n	8011e10 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c8>
 8011e42:	9b05      	ldr	r3, [sp, #20]
 8011e44:	f10e 0e04 	add.w	lr, lr, #4
 8011e48:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8011e4c:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8011e50:	9906      	ldr	r1, [sp, #24]
 8011e52:	4571      	cmp	r1, lr
 8011e54:	dd38      	ble.n	8011ec8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x980>
 8011e56:	f99c 3000 	ldrsb.w	r3, [ip]
 8011e5a:	f8b9 2000 	ldrh.w	r2, [r9]
 8011e5e:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8011e62:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8011e66:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011e6a:	f10e 0301 	add.w	r3, lr, #1
 8011e6e:	4299      	cmp	r1, r3
 8011e70:	dd25      	ble.n	8011ebe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8011e72:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8011e76:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8011e7a:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8011e7e:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8011e82:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011e86:	f10e 0302 	add.w	r3, lr, #2
 8011e8a:	4299      	cmp	r1, r3
 8011e8c:	dd17      	ble.n	8011ebe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8011e8e:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8011e92:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8011e96:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8011e9a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8011e9e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011ea2:	f10e 0303 	add.w	r3, lr, #3
 8011ea6:	4299      	cmp	r1, r3
 8011ea8:	dd09      	ble.n	8011ebe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8011eaa:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8011eae:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8011eb2:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8011eb6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011eba:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011ebe:	9b06      	ldr	r3, [sp, #24]
 8011ec0:	eba3 0e0e 	sub.w	lr, r3, lr
 8011ec4:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8011ec8:	9a02      	ldr	r2, [sp, #8]
 8011eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	440a      	add	r2, r1
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	9202      	str	r2, [sp, #8]
 8011ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ed6:	9303      	str	r3, [sp, #12]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	f47f af2f 	bne.w	8011d3c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f4>
 8011ede:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011ee0:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8011ee4:	2915      	cmp	r1, #21
 8011ee6:	dd45      	ble.n	8011f74 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa2c>
 8011ee8:	1e8b      	subs	r3, r1, #2
 8011eea:	2201      	movs	r2, #1
 8011eec:	3901      	subs	r1, #1
 8011eee:	409a      	lsls	r2, r3
 8011ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ef2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011ef6:	fb5a 2303 	smmla	r3, sl, r3, r2
 8011efa:	fa43 f101 	asr.w	r1, r3, r1
 8011efe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011f00:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011f04:	440b      	add	r3, r1
 8011f06:	f303 0307 	ssat	r3, #8, r3
 8011f0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011f0c:	7013      	strb	r3, [r2, #0]
 8011f0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011f10:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011f14:	2915      	cmp	r1, #21
 8011f16:	dd1b      	ble.n	8011f50 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa08>
 8011f18:	1e8b      	subs	r3, r1, #2
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	3901      	subs	r1, #1
 8011f1e:	409a      	lsls	r2, r3
 8011f20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	fb5b 2303 	smmla	r3, fp, r3, r2
 8011f28:	fa43 f101 	asr.w	r1, r3, r1
 8011f2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	440b      	add	r3, r1
 8011f32:	f303 0307 	ssat	r3, #8, r3
 8011f36:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011f38:	7053      	strb	r3, [r2, #1]
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011f3e:	4413      	add	r3, r2
 8011f40:	9325      	str	r3, [sp, #148]	; 0x94
 8011f42:	e5a7      	b.n	8011a94 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x54c>
 8011f44:	46a4      	mov	ip, r4
 8011f46:	e783      	b.n	8011e50 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x908>
 8011f48:	4614      	mov	r4, r2
 8011f4a:	f04f 0e00 	mov.w	lr, #0
 8011f4e:	e750      	b.n	8011df2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8aa>
 8011f50:	2900      	cmp	r1, #0
 8011f52:	dd2c      	ble.n	8011fae <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa66>
 8011f54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011f56:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011f5a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	6812      	ldr	r2, [r2, #0]
 8011f60:	fb5b 2b03 	smmla	fp, fp, r3, r2
 8011f64:	fa4b f301 	asr.w	r3, fp, r1
 8011f68:	f303 0307 	ssat	r3, #8, r3
 8011f6c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011f6e:	7053      	strb	r3, [r2, #1]
 8011f70:	4613      	mov	r3, r2
 8011f72:	e7e3      	b.n	8011f3c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 8011f74:	2900      	cmp	r1, #0
 8011f76:	f340 809f 	ble.w	80120b8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb70>
 8011f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011f7c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8011f80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011f82:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011f86:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011f8a:	fb5a 2a03 	smmla	sl, sl, r3, r2
 8011f8e:	fa4a f301 	asr.w	r3, sl, r1
 8011f92:	f303 0307 	ssat	r3, #8, r3
 8011f96:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011f98:	7013      	strb	r3, [r2, #0]
 8011f9a:	e7b8      	b.n	8011f0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8011f9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f47f aebf 	bne.w	8011d26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 8011fa8:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011fac:	e797      	b.n	8011ede <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 8011fae:	f1c1 0101 	rsb	r1, r1, #1
 8011fb2:	fa0b f201 	lsl.w	r2, fp, r1
 8011fb6:	f302 021f 	ssat	r2, #32, r2
 8011fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	fb52 f213 	smmulr	r2, r2, r3
 8011fc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	f303 0307 	ssat	r3, #8, r3
 8011fcc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011fce:	7053      	strb	r3, [r2, #1]
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	e7b3      	b.n	8011f3c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	9319      	str	r3, [sp, #100]	; 0x64
 8011fd8:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	f47f ab61 	bne.w	80116a2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x15a>
 8011fe0:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011fe2:	9b06      	ldr	r3, [sp, #24]
 8011fe4:	4601      	mov	r1, r0
 8011fe6:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8011fec:	4421      	add	r1, r4
 8011fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ff0:	f7fe fb66 	bl	80106c0 <weights_2channels_prefetch>
 8011ff4:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f43f ab57 	beq.w	80116aa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x162>
 8011ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d06e      	beq.n	80120e0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb98>
 8012002:	2300      	movs	r3, #0
 8012004:	985d      	ldr	r0, [sp, #372]	; 0x174
 8012006:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8012008:	461c      	mov	r4, r3
 801200a:	461e      	mov	r6, r3
 801200c:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 801200e:	b33f      	cbz	r7, 8012060 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb18>
 8012010:	f100 0510 	add.w	r5, r0, #16
 8012014:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 8012018:	3f01      	subs	r7, #1
 801201a:	f105 0510 	add.w	r5, r5, #16
 801201e:	eba4 0402 	sub.w	r4, r4, r2
 8012022:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 8012026:	eba3 0302 	sub.w	r3, r3, r2
 801202a:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 801202e:	eba4 0402 	sub.w	r4, r4, r2
 8012032:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 8012036:	eba3 0302 	sub.w	r3, r3, r2
 801203a:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 801203e:	eba4 0402 	sub.w	r4, r4, r2
 8012042:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 8012046:	eba3 0302 	sub.w	r3, r3, r2
 801204a:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 801204e:	eba4 0402 	sub.w	r4, r4, r2
 8012052:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 8012056:	eba3 0302 	sub.w	r3, r3, r2
 801205a:	d1db      	bne.n	8012014 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 801205c:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801205e:	4410      	add	r0, r2
 8012060:	b1d9      	cbz	r1, 801209a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb52>
 8012062:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012066:	2901      	cmp	r1, #1
 8012068:	eba4 0402 	sub.w	r4, r4, r2
 801206c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012070:	eba3 0302 	sub.w	r3, r3, r2
 8012074:	d00f      	beq.n	8012096 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8012076:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801207a:	2902      	cmp	r1, #2
 801207c:	eba4 0402 	sub.w	r4, r4, r2
 8012080:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012084:	eba3 0302 	sub.w	r3, r3, r2
 8012088:	d005      	beq.n	8012096 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 801208a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801208e:	1aa4      	subs	r4, r4, r2
 8012090:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012094:	1a9b      	subs	r3, r3, r2
 8012096:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8012098:	4410      	add	r0, r2
 801209a:	3601      	adds	r6, #1
 801209c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801209e:	42b2      	cmp	r2, r6
 80120a0:	d1b4      	bne.n	801200c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac4>
 80120a2:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 80120a4:	fb02 f404 	mul.w	r4, r2, r4
 80120a8:	fb02 f303 	mul.w	r3, r2, r3
 80120ac:	f7ff bafe 	b.w	80116ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 80120b0:	2301      	movs	r3, #1
 80120b2:	9318      	str	r3, [sp, #96]	; 0x60
 80120b4:	f7ff bae7 	b.w	8011686 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x13e>
 80120b8:	f1c1 0101 	rsb	r1, r1, #1
 80120bc:	fa0a f201 	lsl.w	r2, sl, r1
 80120c0:	f302 021f 	ssat	r2, #32, r2
 80120c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80120c6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80120ca:	fb52 f213 	smmulr	r2, r2, r3
 80120ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80120d0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80120d4:	4413      	add	r3, r2
 80120d6:	f303 0307 	ssat	r3, #8, r3
 80120da:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80120dc:	7013      	strb	r3, [r2, #0]
 80120de:	e716      	b.n	8011f0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 80120e0:	461c      	mov	r4, r3
 80120e2:	f7ff bae3 	b.w	80116ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	dd0c      	ble.n	8012104 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbbc>
 80120ea:	0049      	lsls	r1, r1, #1
 80120ec:	f8da 3000 	ldr.w	r3, [sl]
 80120f0:	f8d9 2000 	ldr.w	r2, [r9]
 80120f4:	fb51 2303 	smmla	r3, r1, r3, r2
 80120f8:	4103      	asrs	r3, r0
 80120fa:	f303 0307 	ssat	r3, #8, r3
 80120fe:	f888 3000 	strb.w	r3, [r8]
 8012102:	e572      	b.n	8011bea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>
 8012104:	f1c0 0201 	rsb	r2, r0, #1
 8012108:	fa01 f202 	lsl.w	r2, r1, r2
 801210c:	f302 021f 	ssat	r2, #32, r2
 8012110:	f8da 3000 	ldr.w	r3, [sl]
 8012114:	fb52 f213 	smmulr	r2, r2, r3
 8012118:	f8d9 3000 	ldr.w	r3, [r9]
 801211c:	4413      	add	r3, r2
 801211e:	f303 0307 	ssat	r3, #8, r3
 8012122:	f888 3000 	strb.w	r3, [r8]
 8012126:	e560      	b.n	8011bea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>

08012128 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>:
 8012128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	b0cd      	sub	sp, #308	; 0x134
 801212e:	469c      	mov	ip, r3
 8012130:	4688      	mov	r8, r1
 8012132:	4696      	mov	lr, r2
 8012134:	931d      	str	r3, [sp, #116]	; 0x74
 8012136:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 801213a:	f8bd 5188 	ldrh.w	r5, [sp, #392]	; 0x188
 801213e:	9021      	str	r0, [sp, #132]	; 0x84
 8012140:	9325      	str	r3, [sp, #148]	; 0x94
 8012142:	f8bd 0184 	ldrh.w	r0, [sp, #388]	; 0x184
 8012146:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012148:	912f      	str	r1, [sp, #188]	; 0xbc
 801214a:	900a      	str	r0, [sp, #40]	; 0x28
 801214c:	fb03 f100 	mul.w	r1, r3, r0
 8012150:	f8bd 7168 	ldrh.w	r7, [sp, #360]	; 0x168
 8012154:	fb05 f000 	mul.w	r0, r5, r0
 8012158:	9249      	str	r2, [sp, #292]	; 0x124
 801215a:	ee07 0a90 	vmov	s15, r0
 801215e:	9858      	ldr	r0, [sp, #352]	; 0x160
 8012160:	f8bd 216c 	ldrh.w	r2, [sp, #364]	; 0x16c
 8012164:	9516      	str	r5, [sp, #88]	; 0x58
 8012166:	974a      	str	r7, [sp, #296]	; 0x128
 8012168:	9239      	str	r2, [sp, #228]	; 0xe4
 801216a:	e9dd 4665 	ldrd	r4, r6, [sp, #404]	; 0x194
 801216e:	2e00      	cmp	r6, #0
 8012170:	bf18      	it	ne
 8012172:	4634      	movne	r4, r6
 8012174:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 8012178:	2801      	cmp	r0, #1
 801217a:	9465      	str	r4, [sp, #404]	; 0x194
 801217c:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 8012180:	963b      	str	r6, [sp, #236]	; 0xec
 8012182:	943a      	str	r4, [sp, #232]	; 0xe8
 8012184:	f8bd 6180 	ldrh.w	r6, [sp, #384]	; 0x180
 8012188:	f8bd 4178 	ldrh.w	r4, [sp, #376]	; 0x178
 801218c:	964b      	str	r6, [sp, #300]	; 0x12c
 801218e:	9430      	str	r4, [sp, #192]	; 0xc0
 8012190:	f340 82c7 	ble.w	8012722 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5fa>
 8012194:	1e83      	subs	r3, r0, #2
 8012196:	fb01 f505 	mul.w	r5, r1, r5
 801219a:	1ea2      	subs	r2, r4, #2
 801219c:	085b      	lsrs	r3, r3, #1
 801219e:	9531      	str	r5, [sp, #196]	; 0xc4
 80121a0:	9d58      	ldr	r5, [sp, #352]	; 0x160
 80121a2:	0852      	lsrs	r2, r2, #1
 80121a4:	1c58      	adds	r0, r3, #1
 80121a6:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80121a8:	9038      	str	r0, [sp, #224]	; 0xe0
 80121aa:	3b10      	subs	r3, #16
 80121ac:	9859      	ldr	r0, [sp, #356]	; 0x164
 80121ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80121b0:	091b      	lsrs	r3, r3, #4
 80121b2:	fb00 f007 	mul.w	r0, r0, r7
 80121b6:	108f      	asrs	r7, r1, #2
 80121b8:	f001 0103 	and.w	r1, r1, #3
 80121bc:	3301      	adds	r3, #1
 80121be:	9008      	str	r0, [sp, #32]
 80121c0:	9134      	str	r1, [sp, #208]	; 0xd0
 80121c2:	0069      	lsls	r1, r5, #1
 80121c4:	9741      	str	r7, [sp, #260]	; 0x104
 80121c6:	460d      	mov	r5, r1
 80121c8:	9146      	str	r1, [sp, #280]	; 0x118
 80121ca:	fb02 f100 	mul.w	r1, r2, r0
 80121ce:	fb02 5505 	mla	r5, r2, r5, r5
 80121d2:	9545      	str	r5, [sp, #276]	; 0x114
 80121d4:	004d      	lsls	r5, r1, #1
 80121d6:	9544      	str	r5, [sp, #272]	; 0x110
 80121d8:	f06f 0503 	mvn.w	r5, #3
 80121dc:	1a2d      	subs	r5, r5, r0
 80121de:	9513      	str	r5, [sp, #76]	; 0x4c
 80121e0:	1f05      	subs	r5, r0, #4
 80121e2:	9510      	str	r5, [sp, #64]	; 0x40
 80121e4:	1e65      	subs	r5, r4, #1
 80121e6:	9535      	str	r5, [sp, #212]	; 0xd4
 80121e8:	9d59      	ldr	r5, [sp, #356]	; 0x164
 80121ea:	3d0f      	subs	r5, #15
 80121ec:	950c      	str	r5, [sp, #48]	; 0x30
 80121ee:	f004 0501 	and.w	r5, r4, #1
 80121f2:	953e      	str	r5, [sp, #248]	; 0xf8
 80121f4:	0045      	lsls	r5, r0, #1
 80121f6:	9537      	str	r5, [sp, #220]	; 0xdc
 80121f8:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 80121fa:	0068      	lsls	r0, r5, #1
 80121fc:	00ad      	lsls	r5, r5, #2
 80121fe:	9036      	str	r0, [sp, #216]	; 0xd8
 8012200:	953f      	str	r5, [sp, #252]	; 0xfc
 8012202:	9d57      	ldr	r5, [sp, #348]	; 0x15c
 8012204:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8012206:	3502      	adds	r5, #2
 8012208:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 801220c:	9520      	str	r5, [sp, #128]	; 0x80
 801220e:	9d56      	ldr	r5, [sp, #344]	; 0x158
 8012210:	9048      	str	r0, [sp, #288]	; 0x120
 8012212:	0138      	lsls	r0, r7, #4
 8012214:	3504      	adds	r5, #4
 8012216:	9042      	str	r0, [sp, #264]	; 0x108
 8012218:	9519      	str	r5, [sp, #100]	; 0x64
 801221a:	9d64      	ldr	r5, [sp, #400]	; 0x190
 801221c:	3504      	adds	r5, #4
 801221e:	951a      	str	r5, [sp, #104]	; 0x68
 8012220:	4675      	mov	r5, lr
 8012222:	3504      	adds	r5, #4
 8012224:	952e      	str	r5, [sp, #184]	; 0xb8
 8012226:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8012228:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801222a:	0088      	lsls	r0, r1, #2
 801222c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801222e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8012232:	9043      	str	r0, [sp, #268]	; 0x10c
 8012234:	fb06 f002 	mul.w	r0, r6, r2
 8012238:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801223a:	fb06 f202 	mul.w	r2, r6, r2
 801223e:	9040      	str	r0, [sp, #256]	; 0x100
 8012240:	9217      	str	r2, [sp, #92]	; 0x5c
 8012242:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012244:	fb02 f204 	mul.w	r2, r2, r4
 8012248:	920d      	str	r2, [sp, #52]	; 0x34
 801224a:	011a      	lsls	r2, r3, #4
 801224c:	019b      	lsls	r3, r3, #6
 801224e:	920e      	str	r2, [sp, #56]	; 0x38
 8012250:	930f      	str	r3, [sp, #60]	; 0x3c
 8012252:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012254:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012258:	f9b2 2000 	ldrsh.w	r2, [r2]
 801225c:	2b15      	cmp	r3, #21
 801225e:	9324      	str	r3, [sp, #144]	; 0x90
 8012260:	921f      	str	r2, [sp, #124]	; 0x7c
 8012262:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012264:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	9129      	str	r1, [sp, #164]	; 0xa4
 801226c:	922a      	str	r2, [sp, #168]	; 0xa8
 801226e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012270:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	912b      	str	r1, [sp, #172]	; 0xac
 8012278:	922c      	str	r2, [sp, #176]	; 0xb0
 801227a:	f300 8549 	bgt.w	8012d10 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe8>
 801227e:	2b00      	cmp	r3, #0
 8012280:	bfcc      	ite	gt
 8012282:	2300      	movgt	r3, #0
 8012284:	2301      	movle	r3, #1
 8012286:	425b      	negs	r3, r3
 8012288:	9327      	str	r3, [sp, #156]	; 0x9c
 801228a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801228c:	2b15      	cmp	r3, #21
 801228e:	f300 853b 	bgt.w	8012d08 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe0>
 8012292:	2b00      	cmp	r3, #0
 8012294:	bfcc      	ite	gt
 8012296:	2300      	movgt	r3, #0
 8012298:	2301      	movle	r3, #1
 801229a:	425b      	negs	r3, r3
 801229c:	9328      	str	r3, [sp, #160]	; 0xa0
 801229e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f000 84c7 	beq.w	8012c34 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb0c>
 80122a6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f040 84d2 	bne.w	8012c52 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb2a>
 80122ae:	461c      	mov	r4, r3
 80122b0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80122b2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80122b6:	18a2      	adds	r2, r4, r2
 80122b8:	9222      	str	r2, [sp, #136]	; 0x88
 80122ba:	680a      	ldr	r2, [r1, #0]
 80122bc:	4413      	add	r3, r2
 80122be:	9323      	str	r3, [sp, #140]	; 0x8c
 80122c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f000 8209 	beq.w	80126da <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5b2>
 80122c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80122ca:	2301      	movs	r3, #1
 80122cc:	3a02      	subs	r2, #2
 80122ce:	fa03 f202 	lsl.w	r2, r3, r2
 80122d2:	923c      	str	r2, [sp, #240]	; 0xf0
 80122d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80122d6:	3a02      	subs	r2, #2
 80122d8:	4093      	lsls	r3, r2
 80122da:	2200      	movs	r2, #0
 80122dc:	933d      	str	r3, [sp, #244]	; 0xf4
 80122de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80122e0:	921e      	str	r2, [sp, #120]	; 0x78
 80122e2:	f023 030f 	bic.w	r3, r3, #15
 80122e6:	9232      	str	r2, [sp, #200]	; 0xc8
 80122e8:	3314      	adds	r3, #20
 80122ea:	9312      	str	r3, [sp, #72]	; 0x48
 80122ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122ee:	9305      	str	r3, [sp, #20]
 80122f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122f2:	9318      	str	r3, [sp, #96]	; 0x60
 80122f4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f340 81e0 	ble.w	80126bc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x594>
 80122fc:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80122fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012300:	3301      	adds	r3, #1
 8012302:	18d3      	adds	r3, r2, r3
 8012304:	931b      	str	r3, [sp, #108]	; 0x6c
 8012306:	1c53      	adds	r3, r2, #1
 8012308:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801230a:	931c      	str	r3, [sp, #112]	; 0x70
 801230c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801230e:	4413      	add	r3, r2
 8012310:	9326      	str	r3, [sp, #152]	; 0x98
 8012312:	2300      	movs	r3, #0
 8012314:	9333      	str	r3, [sp, #204]	; 0xcc
 8012316:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012318:	3b04      	subs	r3, #4
 801231a:	9311      	str	r3, [sp, #68]	; 0x44
 801231c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801231e:	2b00      	cmp	r3, #0
 8012320:	f000 8312 	beq.w	8012948 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x820>
 8012324:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012326:	9a08      	ldr	r2, [sp, #32]
 8012328:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801232a:	4413      	add	r3, r2
 801232c:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8012330:	462c      	mov	r4, r5
 8012332:	462f      	mov	r7, r5
 8012334:	9314      	str	r3, [sp, #80]	; 0x50
 8012336:	4675      	mov	r5, lr
 8012338:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801233a:	46a1      	mov	r9, r4
 801233c:	9304      	str	r3, [sp, #16]
 801233e:	2300      	movs	r3, #0
 8012340:	9315      	str	r3, [sp, #84]	; 0x54
 8012342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012344:	2b00      	cmp	r3, #0
 8012346:	f000 815c 	beq.w	8012602 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4da>
 801234a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801234c:	3b03      	subs	r3, #3
 801234e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012352:	9305      	str	r3, [sp, #20]
 8012354:	2300      	movs	r3, #0
 8012356:	9306      	str	r3, [sp, #24]
 8012358:	9a08      	ldr	r2, [sp, #32]
 801235a:	9b05      	ldr	r3, [sp, #20]
 801235c:	1a9e      	subs	r6, r3, r2
 801235e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012360:	2a00      	cmp	r2, #0
 8012362:	f340 828e 	ble.w	8012882 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x75a>
 8012366:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012368:	1d18      	adds	r0, r3, #4
 801236a:	9904      	ldr	r1, [sp, #16]
 801236c:	18d3      	adds	r3, r2, r3
 801236e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8012372:	9607      	str	r6, [sp, #28]
 8012374:	9303      	str	r3, [sp, #12]
 8012376:	f85b 4000 	ldr.w	r4, [fp, r0]
 801237a:	eb0b 0600 	add.w	r6, fp, r0
 801237e:	fa2f f284 	sxtb16	r2, r4
 8012382:	680b      	ldr	r3, [r1, #0]
 8012384:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8012388:	f8d1 a008 	ldr.w	sl, [r1, #8]
 801238c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8012390:	fa2f f494 	sxtb16	r4, r4, ror #8
 8012394:	fb22 ee03 	smlad	lr, r2, r3, lr
 8012398:	fb24 ee08 	smlad	lr, r4, r8, lr
 801239c:	fb22 720a 	smlad	r2, r2, sl, r7
 80123a0:	fb24 220c 	smlad	r2, r4, ip, r2
 80123a4:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80123a8:	fa2f f784 	sxtb16	r7, r4
 80123ac:	fa2f f494 	sxtb16	r4, r4, ror #8
 80123b0:	fb27 5303 	smlad	r3, r7, r3, r5
 80123b4:	fb27 990a 	smlad	r9, r7, sl, r9
 80123b8:	fb24 3308 	smlad	r3, r4, r8, r3
 80123bc:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80123c0:	694f      	ldr	r7, [r1, #20]
 80123c2:	fb24 9c0c 	smlad	ip, r4, ip, r9
 80123c6:	6875      	ldr	r5, [r6, #4]
 80123c8:	f8d1 a018 	ldr.w	sl, [r1, #24]
 80123cc:	fa2f f485 	sxtb16	r4, r5
 80123d0:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80123d4:	fa2f f595 	sxtb16	r5, r5, ror #8
 80123d8:	fb24 ee08 	smlad	lr, r4, r8, lr
 80123dc:	fb25 ee07 	smlad	lr, r5, r7, lr
 80123e0:	fb24 240a 	smlad	r4, r4, sl, r2
 80123e4:	fb25 4409 	smlad	r4, r5, r9, r4
 80123e8:	6802      	ldr	r2, [r0, #0]
 80123ea:	fa2f f582 	sxtb16	r5, r2
 80123ee:	fa2f f292 	sxtb16	r2, r2, ror #8
 80123f2:	fb25 3808 	smlad	r8, r5, r8, r3
 80123f6:	fb25 cc0a 	smlad	ip, r5, sl, ip
 80123fa:	fb22 8707 	smlad	r7, r2, r7, r8
 80123fe:	6a0b      	ldr	r3, [r1, #32]
 8012400:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
 8012404:	fb22 c909 	smlad	r9, r2, r9, ip
 8012408:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801240c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801240e:	fa2f f58c 	sxtb16	r5, ip
 8012412:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 8012416:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801241a:	fb25 ee03 	smlad	lr, r5, r3, lr
 801241e:	fb2c ee08 	smlad	lr, ip, r8, lr
 8012422:	fb25 4502 	smlad	r5, r5, r2, r4
 8012426:	fb2c 5c0a 	smlad	ip, ip, sl, r5
 801242a:	6844      	ldr	r4, [r0, #4]
 801242c:	fa2f f584 	sxtb16	r5, r4
 8012430:	fa2f f494 	sxtb16	r4, r4, ror #8
 8012434:	fb25 7703 	smlad	r7, r5, r3, r7
 8012438:	fb25 9902 	smlad	r9, r5, r2, r9
 801243c:	fb24 7808 	smlad	r8, r4, r8, r7
 8012440:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8012442:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8012444:	fb24 9a0a 	smlad	sl, r4, sl, r9
 8012448:	68f7      	ldr	r7, [r6, #12]
 801244a:	3140      	adds	r1, #64	; 0x40
 801244c:	fa2f f487 	sxtb16	r4, r7
 8012450:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8012454:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8012458:	fa2f f797 	sxtb16	r7, r7, ror #8
 801245c:	fb24 ee03 	smlad	lr, r4, r3, lr
 8012460:	fb27 ee05 	smlad	lr, r7, r5, lr
 8012464:	fb24 cc02 	smlad	ip, r4, r2, ip
 8012468:	fb27 c706 	smlad	r7, r7, r6, ip
 801246c:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012470:	fa2f f489 	sxtb16	r4, r9
 8012474:	fa2f f999 	sxtb16	r9, r9, ror #8
 8012478:	fb24 8803 	smlad	r8, r4, r3, r8
 801247c:	fb24 aa02 	smlad	sl, r4, r2, sl
 8012480:	fb29 8505 	smlad	r5, r9, r5, r8
 8012484:	fb29 a906 	smlad	r9, r9, r6, sl
 8012488:	3010      	adds	r0, #16
 801248a:	9b03      	ldr	r3, [sp, #12]
 801248c:	4283      	cmp	r3, r0
 801248e:	f47f af72 	bne.w	8012376 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x24e>
 8012492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012494:	9a04      	ldr	r2, [sp, #16]
 8012496:	9e07      	ldr	r6, [sp, #28]
 8012498:	469b      	mov	fp, r3
 801249a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801249c:	441e      	add	r6, r3
 801249e:	440a      	add	r2, r1
 80124a0:	9204      	str	r2, [sp, #16]
 80124a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124a4:	459b      	cmp	fp, r3
 80124a6:	f280 81ea 	bge.w	801287e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x756>
 80124aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124ac:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80124b0:	eba3 030b 	sub.w	r3, r3, fp
 80124b4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80124b8:	089b      	lsrs	r3, r3, #2
 80124ba:	461a      	mov	r2, r3
 80124bc:	9307      	str	r3, [sp, #28]
 80124be:	9b04      	ldr	r3, [sp, #16]
 80124c0:	3201      	adds	r2, #1
 80124c2:	eb06 0a82 	add.w	sl, r6, r2, lsl #2
 80124c6:	9203      	str	r2, [sp, #12]
 80124c8:	f856 2b04 	ldr.w	r2, [r6], #4
 80124cc:	3310      	adds	r3, #16
 80124ce:	fa2f f182 	sxtb16	r1, r2
 80124d2:	f853 8c10 	ldr.w	r8, [r3, #-16]
 80124d6:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80124da:	f853 cc08 	ldr.w	ip, [r3, #-8]
 80124de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80124e2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80124e6:	fb21 ee08 	smlad	lr, r1, r8, lr
 80124ea:	fb22 ee04 	smlad	lr, r2, r4, lr
 80124ee:	fb21 770c 	smlad	r7, r1, ip, r7
 80124f2:	fb22 7700 	smlad	r7, r2, r0, r7
 80124f6:	f856 200b 	ldr.w	r2, [r6, fp]
 80124fa:	fa2f f182 	sxtb16	r1, r2
 80124fe:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012502:	fb21 5508 	smlad	r5, r1, r8, r5
 8012506:	fb21 990c 	smlad	r9, r1, ip, r9
 801250a:	fb22 5504 	smlad	r5, r2, r4, r5
 801250e:	fb22 9900 	smlad	r9, r2, r0, r9
 8012512:	45b2      	cmp	sl, r6
 8012514:	d1d8      	bne.n	80124c8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x3a0>
 8012516:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801251a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801251e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8012522:	9a07      	ldr	r2, [sp, #28]
 8012524:	9304      	str	r3, [sp, #16]
 8012526:	f10b 0304 	add.w	r3, fp, #4
 801252a:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 801252e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012530:	455b      	cmp	r3, fp
 8012532:	dd5b      	ble.n	80125ec <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4c4>
 8012534:	9804      	ldr	r0, [sp, #16]
 8012536:	f99a 3000 	ldrsb.w	r3, [sl]
 801253a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801253e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8012542:	9c08      	ldr	r4, [sp, #32]
 8012544:	fb12 7703 	smlabb	r7, r2, r3, r7
 8012548:	fb11 ee03 	smlabb	lr, r1, r3, lr
 801254c:	f91a 3004 	ldrsb.w	r3, [sl, r4]
 8012550:	fb12 9903 	smlabb	r9, r2, r3, r9
 8012554:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012556:	fb11 5503 	smlabb	r5, r1, r3, r5
 801255a:	f10b 0301 	add.w	r3, fp, #1
 801255e:	4293      	cmp	r3, r2
 8012560:	da3d      	bge.n	80125de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8012562:	eb0a 0304 	add.w	r3, sl, r4
 8012566:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801256a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801256e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012572:	fb11 5503 	smlabb	r5, r1, r3, r5
 8012576:	fb12 9903 	smlabb	r9, r2, r3, r9
 801257a:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 801257e:	fb11 ee03 	smlabb	lr, r1, r3, lr
 8012582:	9959      	ldr	r1, [sp, #356]	; 0x164
 8012584:	fb12 7703 	smlabb	r7, r2, r3, r7
 8012588:	f10b 0302 	add.w	r3, fp, #2
 801258c:	f10a 0202 	add.w	r2, sl, #2
 8012590:	428b      	cmp	r3, r1
 8012592:	da24      	bge.n	80125de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8012594:	5713      	ldrsb	r3, [r2, r4]
 8012596:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801259a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801259e:	fb11 5503 	smlabb	r5, r1, r3, r5
 80125a2:	fb12 9903 	smlabb	r9, r2, r3, r9
 80125a6:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80125aa:	fb11 ee03 	smlabb	lr, r1, r3, lr
 80125ae:	9959      	ldr	r1, [sp, #356]	; 0x164
 80125b0:	fb12 7703 	smlabb	r7, r2, r3, r7
 80125b4:	f10b 0303 	add.w	r3, fp, #3
 80125b8:	f10a 0203 	add.w	r2, sl, #3
 80125bc:	428b      	cmp	r3, r1
 80125be:	da0e      	bge.n	80125de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 80125c0:	5713      	ldrsb	r3, [r2, r4]
 80125c2:	f99a 1003 	ldrsb.w	r1, [sl, #3]
 80125c6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80125ca:	fb12 ee01 	smlabb	lr, r2, r1, lr
 80125ce:	fb12 5503 	smlabb	r5, r2, r3, r5
 80125d2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80125d6:	fb12 7701 	smlabb	r7, r2, r1, r7
 80125da:	fb12 9903 	smlabb	r9, r2, r3, r9
 80125de:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80125e0:	9a04      	ldr	r2, [sp, #16]
 80125e2:	eba3 030b 	sub.w	r3, r3, fp
 80125e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125ea:	9304      	str	r3, [sp, #16]
 80125ec:	9a05      	ldr	r2, [sp, #20]
 80125ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80125f0:	9b06      	ldr	r3, [sp, #24]
 80125f2:	440a      	add	r2, r1
 80125f4:	3301      	adds	r3, #1
 80125f6:	9205      	str	r2, [sp, #20]
 80125f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125fa:	9306      	str	r3, [sp, #24]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	f47f aeab 	bne.w	8012358 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x230>
 8012602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012604:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012608:	440a      	add	r2, r1
 801260a:	3301      	adds	r3, #1
 801260c:	9214      	str	r2, [sp, #80]	; 0x50
 801260e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012610:	9315      	str	r3, [sp, #84]	; 0x54
 8012612:	429a      	cmp	r2, r3
 8012614:	f47f ae95 	bne.w	8012342 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x21a>
 8012618:	46ab      	mov	fp, r5
 801261a:	464c      	mov	r4, r9
 801261c:	463d      	mov	r5, r7
 801261e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012620:	2b00      	cmp	r3, #0
 8012622:	f040 814c 	bne.w	80128be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x796>
 8012626:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012628:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801262c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801262e:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 8012632:	fb52 1203 	smmla	r2, r2, r3, r1
 8012636:	fb5a 1a03 	smmla	sl, sl, r3, r1
 801263a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801263c:	410a      	asrs	r2, r1
 801263e:	f302 0307 	ssat	r3, #8, r2
 8012642:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012644:	fa4a fa01 	asr.w	sl, sl, r1
 8012648:	f802 3c01 	strb.w	r3, [r2, #-1]
 801264c:	f30a 0307 	ssat	r3, #8, sl
 8012650:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012652:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012656:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012658:	2b00      	cmp	r3, #0
 801265a:	f040 8115 	bne.w	8012888 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x760>
 801265e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8012660:	006f      	lsls	r7, r5, #1
 8012662:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8012664:	0060      	lsls	r0, r4, #1
 8012666:	fb57 2703 	smmla	r7, r7, r3, r2
 801266a:	fb50 2003 	smmla	r0, r0, r3, r2
 801266e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012670:	4117      	asrs	r7, r2
 8012672:	f307 0307 	ssat	r3, #8, r7
 8012676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012678:	4110      	asrs	r0, r2
 801267a:	700b      	strb	r3, [r1, #0]
 801267c:	f300 0307 	ssat	r3, #8, r0
 8012680:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012682:	7013      	strb	r3, [r2, #0]
 8012684:	460a      	mov	r2, r1
 8012686:	9946      	ldr	r1, [sp, #280]	; 0x118
 8012688:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801268a:	440a      	add	r2, r1
 801268c:	3302      	adds	r3, #2
 801268e:	921c      	str	r2, [sp, #112]	; 0x70
 8012690:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012692:	9333      	str	r3, [sp, #204]	; 0xcc
 8012694:	440a      	add	r2, r1
 8012696:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8012698:	921b      	str	r2, [sp, #108]	; 0x6c
 801269a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801269c:	440a      	add	r2, r1
 801269e:	9226      	str	r2, [sp, #152]	; 0x98
 80126a0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80126a2:	4293      	cmp	r3, r2
 80126a4:	f6ff ae3a 	blt.w	801231c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1f4>
 80126a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80126aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80126ac:	4413      	add	r3, r2
 80126ae:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80126b0:	9318      	str	r3, [sp, #96]	; 0x60
 80126b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80126b4:	4413      	add	r3, r2
 80126b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80126b8:	18d3      	adds	r3, r2, r3
 80126ba:	9305      	str	r3, [sp, #20]
 80126bc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f040 8148 	bne.w	8012954 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x82c>
 80126c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80126c6:	9940      	ldr	r1, [sp, #256]	; 0x100
 80126c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80126ca:	440a      	add	r2, r1
 80126cc:	3301      	adds	r3, #1
 80126ce:	921e      	str	r2, [sp, #120]	; 0x78
 80126d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80126d2:	9332      	str	r3, [sp, #200]	; 0xc8
 80126d4:	429a      	cmp	r2, r3
 80126d6:	f47f ae0d 	bne.w	80122f4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1cc>
 80126da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80126dc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80126de:	4413      	add	r3, r2
 80126e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80126e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126e4:	3302      	adds	r3, #2
 80126e6:	931d      	str	r3, [sp, #116]	; 0x74
 80126e8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80126ea:	b11b      	cbz	r3, 80126f4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5cc>
 80126ec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80126ee:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80126f0:	4413      	add	r3, r2
 80126f2:	9365      	str	r3, [sp, #404]	; 0x194
 80126f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126f6:	9a48      	ldr	r2, [sp, #288]	; 0x120
 80126f8:	3304      	adds	r3, #4
 80126fa:	9320      	str	r3, [sp, #128]	; 0x80
 80126fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126fe:	3308      	adds	r3, #8
 8012700:	9319      	str	r3, [sp, #100]	; 0x64
 8012702:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012704:	3308      	adds	r3, #8
 8012706:	931a      	str	r3, [sp, #104]	; 0x68
 8012708:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801270a:	3308      	adds	r3, #8
 801270c:	932e      	str	r3, [sp, #184]	; 0xb8
 801270e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012710:	4293      	cmp	r3, r2
 8012712:	f47f ad9e 	bne.w	8012252 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x12a>
 8012716:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012718:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801271a:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801271c:	fb01 3302 	mla	r3, r1, r2, r3
 8012720:	932f      	str	r3, [sp, #188]	; 0xbc
 8012722:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012724:	07db      	lsls	r3, r3, #31
 8012726:	f140 80a6 	bpl.w	8012876 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 801272a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 80a2 	beq.w	8012876 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 8012732:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012734:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
 8012738:	9a58      	ldr	r2, [sp, #352]	; 0x160
 801273a:	449b      	add	fp, r3
 801273c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801273e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8012742:	930b      	str	r3, [sp, #44]	; 0x2c
 8012744:	9b56      	ldr	r3, [sp, #344]	; 0x158
 8012746:	eb03 088b 	add.w	r8, r3, fp, lsl #2
 801274a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801274c:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8012750:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012754:	4413      	add	r3, r2
 8012756:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8012758:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801275c:	930c      	str	r3, [sp, #48]	; 0x30
 801275e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 8088 	beq.w	8012876 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 8012766:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8012768:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801276a:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 801276c:	fb01 f202 	mul.w	r2, r1, r2
 8012770:	920d      	str	r2, [sp, #52]	; 0x34
 8012772:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8012774:	fb01 f202 	mul.w	r2, r1, r2
 8012778:	9959      	ldr	r1, [sp, #356]	; 0x164
 801277a:	9209      	str	r2, [sp, #36]	; 0x24
 801277c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801277e:	440a      	add	r2, r1
 8012780:	9203      	str	r2, [sp, #12]
 8012782:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8012784:	fb01 f202 	mul.w	r2, r1, r2
 8012788:	920e      	str	r2, [sp, #56]	; 0x38
 801278a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 801278c:	fb01 fe02 	mul.w	lr, r1, r2
 8012790:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012792:	fb02 f303 	mul.w	r3, r2, r3
 8012796:	46f1      	mov	r9, lr
 8012798:	468e      	mov	lr, r1
 801279a:	930f      	str	r3, [sp, #60]	; 0x3c
 801279c:	2300      	movs	r3, #0
 801279e:	9306      	str	r3, [sp, #24]
 80127a0:	9b03      	ldr	r3, [sp, #12]
 80127a2:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	2300      	movs	r3, #0
 80127aa:	9307      	str	r3, [sp, #28]
 80127ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ae:	6819      	ldr	r1, [r3, #0]
 80127b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80127b2:	b37b      	cbz	r3, 8012814 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ec>
 80127b4:	9b04      	ldr	r3, [sp, #16]
 80127b6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80127ba:	9305      	str	r3, [sp, #20]
 80127bc:	2300      	movs	r3, #0
 80127be:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 80127c0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80127c4:	9308      	str	r3, [sp, #32]
 80127c6:	f1b8 0f00 	cmp.w	r8, #0
 80127ca:	d017      	beq.n	80127fc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6d4>
 80127cc:	9d05      	ldr	r5, [sp, #20]
 80127ce:	f04f 0c00 	mov.w	ip, #0
 80127d2:	f1be 0f00 	cmp.w	lr, #0
 80127d6:	eba5 020e 	sub.w	r2, r5, lr
 80127da:	dd0a      	ble.n	80127f2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ca>
 80127dc:	1e78      	subs	r0, r7, #1
 80127de:	f912 3b01 	ldrsb.w	r3, [r2], #1
 80127e2:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 80127e6:	1b9b      	subs	r3, r3, r6
 80127e8:	42aa      	cmp	r2, r5
 80127ea:	fb04 1103 	mla	r1, r4, r3, r1
 80127ee:	d1f6      	bne.n	80127de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6b6>
 80127f0:	4477      	add	r7, lr
 80127f2:	f10c 0c01 	add.w	ip, ip, #1
 80127f6:	444d      	add	r5, r9
 80127f8:	45e0      	cmp	r8, ip
 80127fa:	d1ea      	bne.n	80127d2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6aa>
 80127fc:	9a05      	ldr	r2, [sp, #20]
 80127fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012800:	9b08      	ldr	r3, [sp, #32]
 8012802:	4402      	add	r2, r0
 8012804:	3301      	adds	r3, #1
 8012806:	9205      	str	r2, [sp, #20]
 8012808:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801280a:	9308      	str	r3, [sp, #32]
 801280c:	429a      	cmp	r2, r3
 801280e:	d1da      	bne.n	80127c6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x69e>
 8012810:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012816:	f9b3 0000 	ldrsh.w	r0, [r3]
 801281a:	2815      	cmp	r0, #21
 801281c:	f340 82a3 	ble.w	8012d66 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc3e>
 8012820:	1e83      	subs	r3, r0, #2
 8012822:	1e42      	subs	r2, r0, #1
 8012824:	2001      	movs	r0, #1
 8012826:	4098      	lsls	r0, r3
 8012828:	f8d8 3000 	ldr.w	r3, [r8]
 801282c:	fb51 0303 	smmla	r3, r1, r3, r0
 8012830:	fa43 f202 	asr.w	r2, r3, r2
 8012834:	f8db 3000 	ldr.w	r3, [fp]
 8012838:	4413      	add	r3, r2
 801283a:	f303 0307 	ssat	r3, #8, r3
 801283e:	f88a 3000 	strb.w	r3, [sl]
 8012842:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012844:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012846:	4492      	add	sl, r2
 8012848:	9a04      	ldr	r2, [sp, #16]
 801284a:	9b07      	ldr	r3, [sp, #28]
 801284c:	440a      	add	r2, r1
 801284e:	3301      	adds	r3, #1
 8012850:	9204      	str	r2, [sp, #16]
 8012852:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8012854:	9307      	str	r3, [sp, #28]
 8012856:	4293      	cmp	r3, r2
 8012858:	d1a8      	bne.n	80127ac <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x684>
 801285a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801285c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801285e:	9b06      	ldr	r3, [sp, #24]
 8012860:	440a      	add	r2, r1
 8012862:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012864:	3301      	adds	r3, #1
 8012866:	921d      	str	r2, [sp, #116]	; 0x74
 8012868:	9a03      	ldr	r2, [sp, #12]
 801286a:	9306      	str	r3, [sp, #24]
 801286c:	440a      	add	r2, r1
 801286e:	9203      	str	r2, [sp, #12]
 8012870:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8012872:	4293      	cmp	r3, r2
 8012874:	d194      	bne.n	80127a0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x678>
 8012876:	2000      	movs	r0, #0
 8012878:	b04d      	add	sp, #308	; 0x134
 801287a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287e:	46b2      	mov	sl, r6
 8012880:	e655      	b.n	801252e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x406>
 8012882:	f04f 0b00 	mov.w	fp, #0
 8012886:	e60c      	b.n	80124a2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x37a>
 8012888:	3301      	adds	r3, #1
 801288a:	d033      	beq.n	80128f4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7cc>
 801288c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801288e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8012890:	fb55 2703 	smmla	r7, r5, r3, r2
 8012894:	fb54 2003 	smmla	r0, r4, r3, r2
 8012898:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801289a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801289c:	3b01      	subs	r3, #1
 801289e:	fa47 f203 	asr.w	r2, r7, r3
 80128a2:	440a      	add	r2, r1
 80128a4:	f302 0207 	ssat	r2, #8, r2
 80128a8:	fa40 f303 	asr.w	r3, r0, r3
 80128ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80128ae:	440b      	add	r3, r1
 80128b0:	7002      	strb	r2, [r0, #0]
 80128b2:	f303 0307 	ssat	r3, #8, r3
 80128b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80128b8:	7013      	strb	r3, [r2, #0]
 80128ba:	4602      	mov	r2, r0
 80128bc:	e6e3      	b.n	8012686 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x55e>
 80128be:	3301      	adds	r3, #1
 80128c0:	d02d      	beq.n	801291e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7f6>
 80128c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80128c4:	993c      	ldr	r1, [sp, #240]	; 0xf0
 80128c6:	fb5e 1203 	smmla	r2, lr, r3, r1
 80128ca:	fb5b 1a03 	smmla	sl, fp, r3, r1
 80128ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80128d0:	992b      	ldr	r1, [sp, #172]	; 0xac
 80128d2:	3b01      	subs	r3, #1
 80128d4:	411a      	asrs	r2, r3
 80128d6:	440a      	add	r2, r1
 80128d8:	f302 0207 	ssat	r2, #8, r2
 80128dc:	fa4a f303 	asr.w	r3, sl, r3
 80128e0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80128e2:	440b      	add	r3, r1
 80128e4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80128e8:	f303 0307 	ssat	r3, #8, r3
 80128ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80128ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128f2:	e6b0      	b.n	8012656 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x52e>
 80128f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80128f6:	f1c3 0301 	rsb	r3, r3, #1
 80128fa:	fa05 f203 	lsl.w	r2, r5, r3
 80128fe:	f302 021f 	ssat	r2, #32, r2
 8012902:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012904:	fb52 f211 	smmulr	r2, r2, r1
 8012908:	fa04 f303 	lsl.w	r3, r4, r3
 801290c:	f303 031f 	ssat	r3, #32, r3
 8012910:	fb53 f311 	smmulr	r3, r3, r1
 8012914:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8012916:	440a      	add	r2, r1
 8012918:	f302 0207 	ssat	r2, #8, r2
 801291c:	e7c6      	b.n	80128ac <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x784>
 801291e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012920:	f1c3 0301 	rsb	r3, r3, #1
 8012924:	fa0e f203 	lsl.w	r2, lr, r3
 8012928:	f302 021f 	ssat	r2, #32, r2
 801292c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801292e:	fb52 f211 	smmulr	r2, r2, r1
 8012932:	fa0b f303 	lsl.w	r3, fp, r3
 8012936:	f303 031f 	ssat	r3, #32, r3
 801293a:	fb53 f311 	smmulr	r3, r3, r1
 801293e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012940:	440a      	add	r2, r1
 8012942:	f302 0207 	ssat	r2, #8, r2
 8012946:	e7cb      	b.n	80128e0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7b8>
 8012948:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801294a:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 801294e:	462c      	mov	r4, r5
 8012950:	46f3      	mov	fp, lr
 8012952:	e664      	b.n	801261e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4f6>
 8012954:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012956:	2b01      	cmp	r3, #1
 8012958:	f000 8167 	beq.w	8012c2a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb02>
 801295c:	9b05      	ldr	r3, [sp, #20]
 801295e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8012960:	4413      	add	r3, r2
 8012962:	9305      	str	r3, [sp, #20]
 8012964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012966:	2b00      	cmp	r3, #0
 8012968:	f000 812f 	beq.w	8012bca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xaa2>
 801296c:	2300      	movs	r3, #0
 801296e:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 8012972:	9307      	str	r3, [sp, #28]
 8012974:	9311      	str	r3, [sp, #68]	; 0x44
 8012976:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012978:	3b03      	subs	r3, #3
 801297a:	9309      	str	r3, [sp, #36]	; 0x24
 801297c:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801297e:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8012982:	3b04      	subs	r3, #4
 8012984:	930b      	str	r3, [sp, #44]	; 0x2c
 8012986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 80da 	beq.w	8012b42 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa1a>
 801298e:	9b05      	ldr	r3, [sp, #20]
 8012990:	9a07      	ldr	r2, [sp, #28]
 8012992:	4413      	add	r3, r2
 8012994:	9303      	str	r3, [sp, #12]
 8012996:	2300      	movs	r3, #0
 8012998:	9304      	str	r3, [sp, #16]
 801299a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801299c:	9a03      	ldr	r2, [sp, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	4611      	mov	r1, r2
 80129a2:	f340 810e 	ble.w	8012bc2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa9a>
 80129a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129a8:	464b      	mov	r3, r9
 80129aa:	188c      	adds	r4, r1, r2
 80129ac:	6808      	ldr	r0, [r1, #0]
 80129ae:	681d      	ldr	r5, [r3, #0]
 80129b0:	fa2f f280 	sxtb16	r2, r0
 80129b4:	fa2f f090 	sxtb16	r0, r0, ror #8
 80129b8:	fb22 a505 	smlad	r5, r2, r5, sl
 80129bc:	685e      	ldr	r6, [r3, #4]
 80129be:	fb20 5706 	smlad	r7, r0, r6, r5
 80129c2:	689d      	ldr	r5, [r3, #8]
 80129c4:	fb22 b205 	smlad	r2, r2, r5, fp
 80129c8:	68dd      	ldr	r5, [r3, #12]
 80129ca:	fb20 2005 	smlad	r0, r0, r5, r2
 80129ce:	684a      	ldr	r2, [r1, #4]
 80129d0:	691e      	ldr	r6, [r3, #16]
 80129d2:	fa2f f582 	sxtb16	r5, r2
 80129d6:	fa2f f292 	sxtb16	r2, r2, ror #8
 80129da:	fb25 7606 	smlad	r6, r5, r6, r7
 80129de:	695f      	ldr	r7, [r3, #20]
 80129e0:	fb22 6607 	smlad	r6, r2, r7, r6
 80129e4:	699f      	ldr	r7, [r3, #24]
 80129e6:	fb25 0007 	smlad	r0, r5, r7, r0
 80129ea:	69dd      	ldr	r5, [r3, #28]
 80129ec:	fb22 0205 	smlad	r2, r2, r5, r0
 80129f0:	688f      	ldr	r7, [r1, #8]
 80129f2:	6a1d      	ldr	r5, [r3, #32]
 80129f4:	fa2f f087 	sxtb16	r0, r7
 80129f8:	fa2f f797 	sxtb16	r7, r7, ror #8
 80129fc:	fb20 6505 	smlad	r5, r0, r5, r6
 8012a00:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8012a02:	fb27 5606 	smlad	r6, r7, r6, r5
 8012a06:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8012a0a:	fb20 200b 	smlad	r0, r0, fp, r2
 8012a0e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8012a12:	fb27 000b 	smlad	r0, r7, fp, r0
 8012a16:	68ca      	ldr	r2, [r1, #12]
 8012a18:	3340      	adds	r3, #64	; 0x40
 8012a1a:	fa2f fb82 	sxtb16	fp, r2
 8012a1e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012a22:	3110      	adds	r1, #16
 8012a24:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8012a28:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8012a2c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8012a30:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012a34:	fb2b 6505 	smlad	r5, fp, r5, r6
 8012a38:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8012a3c:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8012a40:	fb22 bb07 	smlad	fp, r2, r7, fp
 8012a44:	42a1      	cmp	r1, r4
 8012a46:	d1b1      	bne.n	80129ac <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x884>
 8012a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a4a:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8012a4e:	4499      	add	r9, r3
 8012a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a52:	459e      	cmp	lr, r3
 8012a54:	f280 80b3 	bge.w	8012bbe <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa96>
 8012a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a5a:	4649      	mov	r1, r9
 8012a5c:	eba3 080e 	sub.w	r8, r3, lr
 8012a60:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8012a64:	f108 0301 	add.w	r3, r8, #1
 8012a68:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8012a6c:	9306      	str	r3, [sp, #24]
 8012a6e:	f854 3b04 	ldr.w	r3, [r4], #4
 8012a72:	3110      	adds	r1, #16
 8012a74:	fa2f f283 	sxtb16	r2, r3
 8012a78:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8012a7c:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8012a80:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8012a84:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8012a88:	fa2f f393 	sxtb16	r3, r3, ror #8
 8012a8c:	fb22 a000 	smlad	r0, r2, r0, sl
 8012a90:	fb23 0a07 	smlad	sl, r3, r7, r0
 8012a94:	fb22 b206 	smlad	r2, r2, r6, fp
 8012a98:	fb23 2b05 	smlad	fp, r3, r5, r2
 8012a9c:	4564      	cmp	r4, ip
 8012a9e:	d1e6      	bne.n	8012a6e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x946>
 8012aa0:	9b06      	ldr	r3, [sp, #24]
 8012aa2:	f10e 0e04 	add.w	lr, lr, #4
 8012aa6:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8012aaa:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8012aae:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012ab0:	4573      	cmp	r3, lr
 8012ab2:	dd3b      	ble.n	8012b2c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa04>
 8012ab4:	f99c 3000 	ldrsb.w	r3, [ip]
 8012ab8:	f8b9 2000 	ldrh.w	r2, [r9]
 8012abc:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012ac0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8012ac4:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012ac8:	f10e 0301 	add.w	r3, lr, #1
 8012acc:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	dd27      	ble.n	8012b22 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012ad2:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8012ad6:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8012ada:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012ade:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8012ae2:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012ae6:	f10e 0302 	add.w	r3, lr, #2
 8012aea:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012aec:	429a      	cmp	r2, r3
 8012aee:	dd18      	ble.n	8012b22 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012af0:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8012af4:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8012af8:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012afc:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8012b00:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012b04:	f10e 0303 	add.w	r3, lr, #3
 8012b08:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	dd09      	ble.n	8012b22 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 8012b0e:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8012b12:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8012b16:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012b1a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8012b1e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012b22:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012b24:	eba3 0e0e 	sub.w	lr, r3, lr
 8012b28:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8012b2c:	9a03      	ldr	r2, [sp, #12]
 8012b2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b30:	9b04      	ldr	r3, [sp, #16]
 8012b32:	440a      	add	r2, r1
 8012b34:	3301      	adds	r3, #1
 8012b36:	9203      	str	r2, [sp, #12]
 8012b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b3a:	9304      	str	r3, [sp, #16]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	f47f af2c 	bne.w	801299a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x872>
 8012b42:	9a07      	ldr	r2, [sp, #28]
 8012b44:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b48:	440a      	add	r2, r1
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	9207      	str	r2, [sp, #28]
 8012b4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012b50:	9311      	str	r3, [sp, #68]	; 0x44
 8012b52:	429a      	cmp	r2, r3
 8012b54:	f47f af17 	bne.w	8012986 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x85e>
 8012b58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012b5a:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8012b5e:	2915      	cmp	r1, #21
 8012b60:	dd3a      	ble.n	8012bd8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xab0>
 8012b62:	1e8b      	subs	r3, r1, #2
 8012b64:	2201      	movs	r2, #1
 8012b66:	3901      	subs	r1, #1
 8012b68:	409a      	lsls	r2, r3
 8012b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b6c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012b70:	fb5a 2303 	smmla	r3, sl, r3, r2
 8012b74:	fa43 f101 	asr.w	r1, r3, r1
 8012b78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012b7a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012b7e:	440b      	add	r3, r1
 8012b80:	f303 0307 	ssat	r3, #8, r3
 8012b84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b86:	7013      	strb	r3, [r2, #0]
 8012b88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012b8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012b8e:	2915      	cmp	r1, #21
 8012b90:	dd39      	ble.n	8012c06 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xade>
 8012b92:	1e8b      	subs	r3, r1, #2
 8012b94:	2201      	movs	r2, #1
 8012b96:	3901      	subs	r1, #1
 8012b98:	409a      	lsls	r2, r3
 8012b9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	fb5b 2303 	smmla	r3, fp, r3, r2
 8012ba2:	fa43 f101 	asr.w	r1, r3, r1
 8012ba6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	440b      	add	r3, r1
 8012bac:	f303 0307 	ssat	r3, #8, r3
 8012bb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012bb2:	7053      	strb	r3, [r2, #1]
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012bb8:	4413      	add	r3, r2
 8012bba:	9318      	str	r3, [sp, #96]	; 0x60
 8012bbc:	e582      	b.n	80126c4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x59c>
 8012bbe:	46a4      	mov	ip, r4
 8012bc0:	e775      	b.n	8012aae <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x986>
 8012bc2:	4614      	mov	r4, r2
 8012bc4:	f04f 0e00 	mov.w	lr, #0
 8012bc8:	e742      	b.n	8012a50 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x928>
 8012bca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012bcc:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8012bd0:	2915      	cmp	r1, #21
 8012bd2:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8012bd6:	dcc4      	bgt.n	8012b62 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa3a>
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	f340 80b0 	ble.w	8012d3e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc16>
 8012bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012be0:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8012be4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012be6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012bea:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012bee:	fb54 2303 	smmla	r3, r4, r3, r2
 8012bf2:	410b      	asrs	r3, r1
 8012bf4:	f303 0307 	ssat	r3, #8, r3
 8012bf8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012bfa:	7013      	strb	r3, [r2, #0]
 8012bfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012bfe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012c02:	2915      	cmp	r1, #21
 8012c04:	dcc5      	bgt.n	8012b92 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa6a>
 8012c06:	2900      	cmp	r1, #0
 8012c08:	f340 8086 	ble.w	8012d18 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbf0>
 8012c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c0e:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8012c12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	6812      	ldr	r2, [r2, #0]
 8012c18:	fb54 2303 	smmla	r3, r4, r3, r2
 8012c1c:	410b      	asrs	r3, r1
 8012c1e:	f303 0307 	ssat	r3, #8, r3
 8012c22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c24:	7053      	strb	r3, [r2, #1]
 8012c26:	4613      	mov	r3, r2
 8012c28:	e7c5      	b.n	8012bb6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8012c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012c2e:	4413      	add	r3, r2
 8012c30:	9305      	str	r3, [sp, #20]
 8012c32:	e697      	b.n	8012964 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x83c>
 8012c34:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8012c36:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012c38:	4601      	mov	r1, r0
 8012c3a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	ee17 3a90 	vmov	r3, s15
 8012c42:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012c44:	4421      	add	r1, r4
 8012c46:	f7fd fd3b 	bl	80106c0 <weights_2channels_prefetch>
 8012c4a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f43f ab2e 	beq.w	80122ae <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x186>
 8012c52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f000 8095 	beq.w	8012d84 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc5c>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012c5e:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8012c60:	461c      	mov	r4, r3
 8012c62:	461e      	mov	r6, r3
 8012c64:	9f41      	ldr	r7, [sp, #260]	; 0x104
 8012c66:	b33f      	cbz	r7, 8012cb8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb90>
 8012c68:	f102 0510 	add.w	r5, r2, #16
 8012c6c:	f935 1c10 	ldrsh.w	r1, [r5, #-16]
 8012c70:	3f01      	subs	r7, #1
 8012c72:	f105 0510 	add.w	r5, r5, #16
 8012c76:	eba4 0401 	sub.w	r4, r4, r1
 8012c7a:	f935 1c18 	ldrsh.w	r1, [r5, #-24]
 8012c7e:	eba3 0301 	sub.w	r3, r3, r1
 8012c82:	f935 1c1e 	ldrsh.w	r1, [r5, #-30]
 8012c86:	eba4 0401 	sub.w	r4, r4, r1
 8012c8a:	f935 1c16 	ldrsh.w	r1, [r5, #-22]
 8012c8e:	eba3 0301 	sub.w	r3, r3, r1
 8012c92:	f935 1c1c 	ldrsh.w	r1, [r5, #-28]
 8012c96:	eba4 0401 	sub.w	r4, r4, r1
 8012c9a:	f935 1c14 	ldrsh.w	r1, [r5, #-20]
 8012c9e:	eba3 0301 	sub.w	r3, r3, r1
 8012ca2:	f935 1c1a 	ldrsh.w	r1, [r5, #-26]
 8012ca6:	eba4 0401 	sub.w	r4, r4, r1
 8012caa:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 8012cae:	eba3 0301 	sub.w	r3, r3, r1
 8012cb2:	d1db      	bne.n	8012c6c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb44>
 8012cb4:	9942      	ldr	r1, [sp, #264]	; 0x108
 8012cb6:	440a      	add	r2, r1
 8012cb8:	b1d8      	cbz	r0, 8012cf2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbca>
 8012cba:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012cbe:	2801      	cmp	r0, #1
 8012cc0:	eba4 0401 	sub.w	r4, r4, r1
 8012cc4:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8012cc8:	eba3 0301 	sub.w	r3, r3, r1
 8012ccc:	d00f      	beq.n	8012cee <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8012cce:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012cd2:	2802      	cmp	r0, #2
 8012cd4:	eba4 0401 	sub.w	r4, r4, r1
 8012cd8:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012cdc:	eba3 0301 	sub.w	r3, r3, r1
 8012ce0:	d005      	beq.n	8012cee <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8012ce2:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8012ce6:	1a64      	subs	r4, r4, r1
 8012ce8:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8012cec:	1a5b      	subs	r3, r3, r1
 8012cee:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8012cf0:	440a      	add	r2, r1
 8012cf2:	3601      	adds	r6, #1
 8012cf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012cf6:	42b1      	cmp	r1, r6
 8012cf8:	d1b4      	bne.n	8012c64 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb3c>
 8012cfa:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8012cfc:	fb02 f404 	mul.w	r4, r2, r4
 8012d00:	fb02 f303 	mul.w	r3, r2, r3
 8012d04:	f7ff bad4 	b.w	80122b0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8012d0c:	f7ff bac7 	b.w	801229e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x176>
 8012d10:	2301      	movs	r3, #1
 8012d12:	9327      	str	r3, [sp, #156]	; 0x9c
 8012d14:	f7ff bab9 	b.w	801228a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x162>
 8012d18:	f1c1 0101 	rsb	r1, r1, #1
 8012d1c:	fa0b f101 	lsl.w	r1, fp, r1
 8012d20:	f301 021f 	ssat	r2, #32, r1
 8012d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	fb52 f213 	smmulr	r2, r2, r3
 8012d2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4413      	add	r3, r2
 8012d32:	f303 0307 	ssat	r3, #8, r3
 8012d36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d38:	7053      	strb	r3, [r2, #1]
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	e73b      	b.n	8012bb6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8012d3e:	f1c1 0101 	rsb	r1, r1, #1
 8012d42:	fa0a f201 	lsl.w	r2, sl, r1
 8012d46:	f302 021f 	ssat	r2, #32, r2
 8012d4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012d50:	fb52 f213 	smmulr	r2, r2, r3
 8012d54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012d56:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f303 0307 	ssat	r3, #8, r3
 8012d60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d62:	7013      	strb	r3, [r2, #0]
 8012d64:	e710      	b.n	8012b88 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa60>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	dd0f      	ble.n	8012d8a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc62>
 8012d6a:	0049      	lsls	r1, r1, #1
 8012d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8012d70:	f8db 2000 	ldr.w	r2, [fp]
 8012d74:	fb51 2303 	smmla	r3, r1, r3, r2
 8012d78:	4103      	asrs	r3, r0
 8012d7a:	f303 0307 	ssat	r3, #8, r3
 8012d7e:	f88a 3000 	strb.w	r3, [sl]
 8012d82:	e55e      	b.n	8012842 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 8012d84:	461c      	mov	r4, r3
 8012d86:	f7ff ba93 	b.w	80122b0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8012d8a:	f1c0 0201 	rsb	r2, r0, #1
 8012d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8012d92:	f302 021f 	ssat	r2, #32, r2
 8012d96:	f8d8 3000 	ldr.w	r3, [r8]
 8012d9a:	fb52 f213 	smmulr	r2, r2, r3
 8012d9e:	f8db 3000 	ldr.w	r3, [fp]
 8012da2:	4413      	add	r3, r2
 8012da4:	f303 0307 	ssat	r3, #8, r3
 8012da8:	f88a 3000 	strb.w	r3, [sl]
 8012dac:	e549      	b.n	8012842 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 8012dae:	bf00      	nop

08012db0 <st_int8_fill>:
 8012db0:	078b      	lsls	r3, r1, #30
 8012db2:	468c      	mov	ip, r1
 8012db4:	d00a      	beq.n	8012dcc <st_int8_fill+0x1c>
 8012db6:	b912      	cbnz	r2, 8012dbe <st_int8_fill+0xe>
 8012db8:	e045      	b.n	8012e46 <st_int8_fill+0x96>
 8012dba:	2a00      	cmp	r2, #0
 8012dbc:	d044      	beq.n	8012e48 <st_int8_fill+0x98>
 8012dbe:	f80c 0b01 	strb.w	r0, [ip], #1
 8012dc2:	f01c 0f03 	tst.w	ip, #3
 8012dc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8012dca:	d1f6      	bne.n	8012dba <st_int8_fill+0xa>
 8012dcc:	b2c3      	uxtb	r3, r0
 8012dce:	0911      	lsrs	r1, r2, #4
 8012dd0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8012dda:	b2a4      	uxth	r4, r4
 8012ddc:	ea44 0403 	orr.w	r4, r4, r3
 8012de0:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8012de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012de8:	ea44 0403 	orr.w	r4, r4, r3
 8012dec:	d043      	beq.n	8012e76 <st_int8_fill+0xc6>
 8012dee:	1e4b      	subs	r3, r1, #1
 8012df0:	2b04      	cmp	r3, #4
 8012df2:	d92a      	bls.n	8012e4a <st_int8_fill+0x9a>
 8012df4:	f01c 0f07 	tst.w	ip, #7
 8012df8:	d127      	bne.n	8012e4a <st_int8_fill+0x9a>
 8012dfa:	f10c 0310 	add.w	r3, ip, #16
 8012dfe:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8012e02:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8012e06:	e943 4404 	strd	r4, r4, [r3, #-16]
 8012e0a:	e943 4402 	strd	r4, r4, [r3, #-8]
 8012e0e:	3310      	adds	r3, #16
 8012e10:	428b      	cmp	r3, r1
 8012e12:	d1f8      	bne.n	8012e06 <st_int8_fill+0x56>
 8012e14:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012e18:	44f4      	add	ip, lr
 8012e1a:	f002 0203 	and.w	r2, r2, #3
 8012e1e:	b15b      	cbz	r3, 8012e38 <st_int8_fill+0x88>
 8012e20:	1e59      	subs	r1, r3, #1
 8012e22:	f8cc 4000 	str.w	r4, [ip]
 8012e26:	d005      	beq.n	8012e34 <st_int8_fill+0x84>
 8012e28:	2901      	cmp	r1, #1
 8012e2a:	f8cc 4004 	str.w	r4, [ip, #4]
 8012e2e:	bf18      	it	ne
 8012e30:	f8cc 4008 	strne.w	r4, [ip, #8]
 8012e34:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8012e38:	b1e2      	cbz	r2, 8012e74 <st_int8_fill+0xc4>
 8012e3a:	4601      	mov	r1, r0
 8012e3c:	4660      	mov	r0, ip
 8012e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e42:	f001 b967 	b.w	8014114 <memset>
 8012e46:	4770      	bx	lr
 8012e48:	4770      	bx	lr
 8012e4a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8012e4e:	4663      	mov	r3, ip
 8012e50:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8012e54:	601c      	str	r4, [r3, #0]
 8012e56:	3310      	adds	r3, #16
 8012e58:	f843 4c0c 	str.w	r4, [r3, #-12]
 8012e5c:	f843 4c08 	str.w	r4, [r3, #-8]
 8012e60:	f843 4c04 	str.w	r4, [r3, #-4]
 8012e64:	4299      	cmp	r1, r3
 8012e66:	d1f5      	bne.n	8012e54 <st_int8_fill+0xa4>
 8012e68:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012e6c:	44f4      	add	ip, lr
 8012e6e:	f002 0203 	and.w	r2, r2, #3
 8012e72:	e7d4      	b.n	8012e1e <st_int8_fill+0x6e>
 8012e74:	bd10      	pop	{r4, pc}
 8012e76:	0893      	lsrs	r3, r2, #2
 8012e78:	f002 0203 	and.w	r2, r2, #3
 8012e7c:	e7cf      	b.n	8012e1e <st_int8_fill+0x6e>
 8012e7e:	bf00      	nop

08012e80 <st_int8_copy>:
 8012e80:	078b      	lsls	r3, r1, #30
 8012e82:	d00a      	beq.n	8012e9a <st_int8_copy+0x1a>
 8012e84:	b912      	cbnz	r2, 8012e8c <st_int8_copy+0xc>
 8012e86:	e04f      	b.n	8012f28 <st_int8_copy+0xa8>
 8012e88:	2a00      	cmp	r2, #0
 8012e8a:	d04e      	beq.n	8012f2a <st_int8_copy+0xaa>
 8012e8c:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8012e90:	3a01      	subs	r2, #1
 8012e92:	f801 3b01 	strb.w	r3, [r1], #1
 8012e96:	078b      	lsls	r3, r1, #30
 8012e98:	d1f6      	bne.n	8012e88 <st_int8_copy+0x8>
 8012e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e9e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8012ea2:	d065      	beq.n	8012f70 <st_int8_copy+0xf0>
 8012ea4:	ea41 0300 	orr.w	r3, r1, r0
 8012ea8:	075b      	lsls	r3, r3, #29
 8012eaa:	d13f      	bne.n	8012f2c <st_int8_copy+0xac>
 8012eac:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d93b      	bls.n	8012f2c <st_int8_copy+0xac>
 8012eb4:	f100 0310 	add.w	r3, r0, #16
 8012eb8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012ebc:	f101 0c10 	add.w	ip, r1, #16
 8012ec0:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8012ec4:	3310      	adds	r3, #16
 8012ec6:	f10c 0c10 	add.w	ip, ip, #16
 8012eca:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8012ece:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8012ed2:	4573      	cmp	r3, lr
 8012ed4:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8012ed8:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8012edc:	d1f2      	bne.n	8012ec4 <st_int8_copy+0x44>
 8012ede:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012ee2:	4421      	add	r1, r4
 8012ee4:	4420      	add	r0, r4
 8012ee6:	f002 0203 	and.w	r2, r2, #3
 8012eea:	b16b      	cbz	r3, 8012f08 <st_int8_copy+0x88>
 8012eec:	6804      	ldr	r4, [r0, #0]
 8012eee:	600c      	str	r4, [r1, #0]
 8012ef0:	1e5c      	subs	r4, r3, #1
 8012ef2:	d005      	beq.n	8012f00 <st_int8_copy+0x80>
 8012ef4:	6845      	ldr	r5, [r0, #4]
 8012ef6:	2c01      	cmp	r4, #1
 8012ef8:	604d      	str	r5, [r1, #4]
 8012efa:	d001      	beq.n	8012f00 <st_int8_copy+0x80>
 8012efc:	6884      	ldr	r4, [r0, #8]
 8012efe:	608c      	str	r4, [r1, #8]
 8012f00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012f04:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012f08:	b162      	cbz	r2, 8012f24 <st_int8_copy+0xa4>
 8012f0a:	f990 3000 	ldrsb.w	r3, [r0]
 8012f0e:	3a01      	subs	r2, #1
 8012f10:	700b      	strb	r3, [r1, #0]
 8012f12:	d007      	beq.n	8012f24 <st_int8_copy+0xa4>
 8012f14:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012f18:	2a01      	cmp	r2, #1
 8012f1a:	704b      	strb	r3, [r1, #1]
 8012f1c:	d002      	beq.n	8012f24 <st_int8_copy+0xa4>
 8012f1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8012f22:	708b      	strb	r3, [r1, #2]
 8012f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f28:	4770      	bx	lr
 8012f2a:	4770      	bx	lr
 8012f2c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012f30:	460b      	mov	r3, r1
 8012f32:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8012f36:	4684      	mov	ip, r0
 8012f38:	f8dc 8000 	ldr.w	r8, [ip]
 8012f3c:	3310      	adds	r3, #16
 8012f3e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8012f42:	f10c 0c10 	add.w	ip, ip, #16
 8012f46:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8012f4a:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8012f4e:	f843 8c10 	str.w	r8, [r3, #-16]
 8012f52:	f843 7c0c 	str.w	r7, [r3, #-12]
 8012f56:	f843 6c08 	str.w	r6, [r3, #-8]
 8012f5a:	f843 5c04 	str.w	r5, [r3, #-4]
 8012f5e:	459e      	cmp	lr, r3
 8012f60:	d1ea      	bne.n	8012f38 <st_int8_copy+0xb8>
 8012f62:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012f66:	4421      	add	r1, r4
 8012f68:	4420      	add	r0, r4
 8012f6a:	f002 0203 	and.w	r2, r2, #3
 8012f6e:	e7bc      	b.n	8012eea <st_int8_copy+0x6a>
 8012f70:	0893      	lsrs	r3, r2, #2
 8012f72:	f002 0203 	and.w	r2, r2, #3
 8012f76:	e7b8      	b.n	8012eea <st_int8_copy+0x6a>

08012f78 <st_int8_reordered_no_shift_zero>:
 8012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f7a:	0897      	lsrs	r7, r2, #2
 8012f7c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8012f80:	d02f      	beq.n	8012fe2 <st_int8_reordered_no_shift_zero+0x6a>
 8012f82:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8012f86:	460c      	mov	r4, r1
 8012f88:	f850 cb04 	ldr.w	ip, [r0], #4
 8012f8c:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8012f90:	fa2f fe8e 	sxtb16	lr, lr
 8012f94:	fade fe03 	ssub16	lr, lr, r3
 8012f98:	fa2f fc8c 	sxtb16	ip, ip
 8012f9c:	fadc fc03 	ssub16	ip, ip, r3
 8012fa0:	42a8      	cmp	r0, r5
 8012fa2:	f8c4 c000 	str.w	ip, [r4]
 8012fa6:	f8c4 e004 	str.w	lr, [r4, #4]
 8012faa:	f104 0408 	add.w	r4, r4, #8
 8012fae:	d1eb      	bne.n	8012f88 <st_int8_reordered_no_shift_zero+0x10>
 8012fb0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8012fb4:	f012 0203 	ands.w	r2, r2, #3
 8012fb8:	d012      	beq.n	8012fe0 <st_int8_reordered_no_shift_zero+0x68>
 8012fba:	f995 0000 	ldrsb.w	r0, [r5]
 8012fbe:	b273      	sxtb	r3, r6
 8012fc0:	3a01      	subs	r2, #1
 8012fc2:	eba0 0003 	sub.w	r0, r0, r3
 8012fc6:	8008      	strh	r0, [r1, #0]
 8012fc8:	d00a      	beq.n	8012fe0 <st_int8_reordered_no_shift_zero+0x68>
 8012fca:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8012fce:	2a01      	cmp	r2, #1
 8012fd0:	eba0 0003 	sub.w	r0, r0, r3
 8012fd4:	8048      	strh	r0, [r1, #2]
 8012fd6:	d003      	beq.n	8012fe0 <st_int8_reordered_no_shift_zero+0x68>
 8012fd8:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8012fdc:	1ad3      	subs	r3, r2, r3
 8012fde:	808b      	strh	r3, [r1, #4]
 8012fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	e7e6      	b.n	8012fb4 <st_int8_reordered_no_shift_zero+0x3c>
 8012fe6:	bf00      	nop

08012fe8 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	b09d      	sub	sp, #116	; 0x74
 8012fee:	4683      	mov	fp, r0
 8012ff0:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8012ff4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012ff6:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8012ffa:	441d      	add	r5, r3
 8012ffc:	9417      	str	r4, [sp, #92]	; 0x5c
 8012ffe:	0864      	lsrs	r4, r4, #1
 8013000:	9318      	str	r3, [sp, #96]	; 0x60
 8013002:	910c      	str	r1, [sp, #48]	; 0x30
 8013004:	9216      	str	r2, [sp, #88]	; 0x58
 8013006:	9008      	str	r0, [sp, #32]
 8013008:	9515      	str	r5, [sp, #84]	; 0x54
 801300a:	9419      	str	r4, [sp, #100]	; 0x64
 801300c:	f000 81d2 	beq.w	80133b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3cc>
 8013010:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8013014:	4617      	mov	r7, r2
 8013016:	1e62      	subs	r2, r4, #1
 8013018:	460c      	mov	r4, r1
 801301a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801301c:	f1a0 0310 	sub.w	r3, r0, #16
 8013020:	b292      	uxth	r2, r2
 8013022:	46d9      	mov	r9, fp
 8013024:	3108      	adds	r1, #8
 8013026:	091b      	lsrs	r3, r3, #4
 8013028:	960f      	str	r6, [sp, #60]	; 0x3c
 801302a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801302e:	463a      	mov	r2, r7
 8013030:	3301      	adds	r3, #1
 8013032:	3208      	adds	r2, #8
 8013034:	910e      	str	r1, [sp, #56]	; 0x38
 8013036:	4601      	mov	r1, r0
 8013038:	3803      	subs	r0, #3
 801303a:	9207      	str	r2, [sp, #28]
 801303c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801303e:	900d      	str	r0, [sp, #52]	; 0x34
 8013040:	3204      	adds	r2, #4
 8013042:	9202      	str	r2, [sp, #8]
 8013044:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8013046:	3204      	adds	r2, #4
 8013048:	9203      	str	r2, [sp, #12]
 801304a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801304c:	3204      	adds	r2, #4
 801304e:	9204      	str	r2, [sp, #16]
 8013050:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8013052:	3201      	adds	r2, #1
 8013054:	9205      	str	r2, [sp, #20]
 8013056:	1c6a      	adds	r2, r5, #1
 8013058:	9206      	str	r2, [sp, #24]
 801305a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 801305e:	9213      	str	r2, [sp, #76]	; 0x4c
 8013060:	019a      	lsls	r2, r3, #6
 8013062:	9210      	str	r2, [sp, #64]	; 0x40
 8013064:	011a      	lsls	r2, r3, #4
 8013066:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 801306a:	9212      	str	r2, [sp, #72]	; 0x48
 801306c:	9311      	str	r3, [sp, #68]	; 0x44
 801306e:	1f0b      	subs	r3, r1, #4
 8013070:	9314      	str	r3, [sp, #80]	; 0x50
 8013072:	9a07      	ldr	r2, [sp, #28]
 8013074:	9c08      	ldr	r4, [sp, #32]
 8013076:	f852 3c08 	ldr.w	r3, [r2, #-8]
 801307a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801307e:	2c0f      	cmp	r4, #15
 8013080:	931b      	str	r3, [sp, #108]	; 0x6c
 8013082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013084:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013086:	921b      	str	r2, [sp, #108]	; 0x6c
 8013088:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801308a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801308c:	f340 8285 	ble.w	801359a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5b2>
 8013090:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013092:	464d      	mov	r5, r9
 8013094:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013096:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013098:	f8d4 e000 	ldr.w	lr, [r4]
 801309c:	f8d7 a000 	ldr.w	sl, [r7]
 80130a0:	f8d5 c000 	ldr.w	ip, [r5]
 80130a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80130a8:	fb2c 330e 	smlad	r3, ip, lr, r3
 80130ac:	fb2c 000a 	smlad	r0, ip, sl, r0
 80130b0:	fb28 2e0e 	smlad	lr, r8, lr, r2
 80130b4:	fb28 110a 	smlad	r1, r8, sl, r1
 80130b8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80130bc:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80130c0:	68aa      	ldr	r2, [r5, #8]
 80130c2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 80130c6:	fb22 330c 	smlad	r3, r2, ip, r3
 80130ca:	fb22 0008 	smlad	r0, r2, r8, r0
 80130ce:	fb2b ee0c 	smlad	lr, fp, ip, lr
 80130d2:	fb2b 1808 	smlad	r8, fp, r8, r1
 80130d6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80130da:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80130de:	692a      	ldr	r2, [r5, #16]
 80130e0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80130e4:	fb22 330c 	smlad	r3, r2, ip, r3
 80130e8:	fb22 000b 	smlad	r0, r2, fp, r0
 80130ec:	fb2a ee0c 	smlad	lr, sl, ip, lr
 80130f0:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 80130f4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80130f8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80130fc:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8013100:	69e9      	ldr	r1, [r5, #28]
 8013102:	fb28 330c 	smlad	r3, r8, ip, r3
 8013106:	fb28 000a 	smlad	r0, r8, sl, r0
 801310a:	fb21 ec0c 	smlad	ip, r1, ip, lr
 801310e:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8013112:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8013116:	6939      	ldr	r1, [r7, #16]
 8013118:	f8d5 8020 	ldr.w	r8, [r5, #32]
 801311c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801311e:	fb28 330e 	smlad	r3, r8, lr, r3
 8013122:	fb28 0001 	smlad	r0, r8, r1, r0
 8013126:	fb22 cc0e 	smlad	ip, r2, lr, ip
 801312a:	fb22 a101 	smlad	r1, r2, r1, sl
 801312e:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8013132:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8013136:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 801313a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801313c:	fb28 330e 	smlad	r3, r8, lr, r3
 8013140:	fb28 000a 	smlad	r0, r8, sl, r0
 8013144:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8013148:	fb22 120a 	smlad	r2, r2, sl, r1
 801314c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8013150:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8013154:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8013158:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801315a:	fb28 330e 	smlad	r3, r8, lr, r3
 801315e:	fb28 080b 	smlad	r8, r8, fp, r0
 8013162:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8013166:	fb21 210b 	smlad	r1, r1, fp, r2
 801316a:	69e2      	ldr	r2, [r4, #28]
 801316c:	3720      	adds	r7, #32
 801316e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8013170:	3420      	adds	r4, #32
 8013172:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8013176:	3540      	adds	r5, #64	; 0x40
 8013178:	f857 bc04 	ldr.w	fp, [r7, #-4]
 801317c:	fb20 3302 	smlad	r3, r0, r2, r3
 8013180:	fb20 800b 	smlad	r0, r0, fp, r8
 8013184:	fb2c e202 	smlad	r2, ip, r2, lr
 8013188:	fb2c 110b 	smlad	r1, ip, fp, r1
 801318c:	42a6      	cmp	r6, r4
 801318e:	d183      	bne.n	8013098 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xb0>
 8013190:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013192:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8013196:	44a9      	add	r9, r5
 8013198:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801319a:	9501      	str	r5, [sp, #4]
 801319c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801319e:	45ab      	cmp	fp, r5
 80131a0:	f280 8204 	bge.w	80135ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 80131a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80131a6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80131aa:	eba5 050b 	sub.w	r5, r5, fp
 80131ae:	08ad      	lsrs	r5, r5, #2
 80131b0:	462e      	mov	r6, r5
 80131b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80131b4:	464d      	mov	r5, r9
 80131b6:	3601      	adds	r6, #1
 80131b8:	00f7      	lsls	r7, r6, #3
 80131ba:	960a      	str	r6, [sp, #40]	; 0x28
 80131bc:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 80131c0:	9709      	str	r7, [sp, #36]	; 0x24
 80131c2:	f8d4 e000 	ldr.w	lr, [r4]
 80131c6:	f8dc 7000 	ldr.w	r7, [ip]
 80131ca:	f8d5 a000 	ldr.w	sl, [r5]
 80131ce:	686e      	ldr	r6, [r5, #4]
 80131d0:	fb2a 330e 	smlad	r3, sl, lr, r3
 80131d4:	fb2a 0007 	smlad	r0, sl, r7, r0
 80131d8:	fb26 220e 	smlad	r2, r6, lr, r2
 80131dc:	fb26 1107 	smlad	r1, r6, r7, r1
 80131e0:	6867      	ldr	r7, [r4, #4]
 80131e2:	f10c 0c08 	add.w	ip, ip, #8
 80131e6:	68ae      	ldr	r6, [r5, #8]
 80131e8:	3408      	adds	r4, #8
 80131ea:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80131ee:	3510      	adds	r5, #16
 80131f0:	f85c ac04 	ldr.w	sl, [ip, #-4]
 80131f4:	fb26 3307 	smlad	r3, r6, r7, r3
 80131f8:	fb26 000a 	smlad	r0, r6, sl, r0
 80131fc:	fb2e 2207 	smlad	r2, lr, r7, r2
 8013200:	fb2e 110a 	smlad	r1, lr, sl, r1
 8013204:	4544      	cmp	r4, r8
 8013206:	d1dc      	bne.n	80131c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8013208:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801320a:	f10b 0b04 	add.w	fp, fp, #4
 801320e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013210:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8013214:	9c01      	ldr	r4, [sp, #4]
 8013216:	442c      	add	r4, r5
 8013218:	9401      	str	r4, [sp, #4]
 801321a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801321c:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8013220:	9f08      	ldr	r7, [sp, #32]
 8013222:	455f      	cmp	r7, fp
 8013224:	dd54      	ble.n	80132d0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 8013226:	f9b8 5000 	ldrsh.w	r5, [r8]
 801322a:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 801322e:	f9b9 6000 	ldrsh.w	r6, [r9]
 8013232:	fb05 2204 	mla	r2, r5, r4, r2
 8013236:	fb06 3305 	mla	r3, r6, r5, r3
 801323a:	9d01      	ldr	r5, [sp, #4]
 801323c:	f9b5 5000 	ldrsh.w	r5, [r5]
 8013240:	fb05 1104 	mla	r1, r5, r4, r1
 8013244:	f10b 0401 	add.w	r4, fp, #1
 8013248:	fb06 0005 	mla	r0, r6, r5, r0
 801324c:	42a7      	cmp	r7, r4
 801324e:	dd3a      	ble.n	80132c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8013250:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013254:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8013258:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 801325c:	fb05 2204 	mla	r2, r5, r4, r2
 8013260:	fb06 3305 	mla	r3, r6, r5, r3
 8013264:	9d01      	ldr	r5, [sp, #4]
 8013266:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 801326a:	fb05 1104 	mla	r1, r5, r4, r1
 801326e:	f10b 0402 	add.w	r4, fp, #2
 8013272:	fb06 0005 	mla	r0, r6, r5, r0
 8013276:	42a7      	cmp	r7, r4
 8013278:	dd25      	ble.n	80132c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 801327a:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 801327e:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8013282:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8013286:	fb05 2204 	mla	r2, r5, r4, r2
 801328a:	fb06 3305 	mla	r3, r6, r5, r3
 801328e:	9d01      	ldr	r5, [sp, #4]
 8013290:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 8013294:	fb05 1104 	mla	r1, r5, r4, r1
 8013298:	f10b 0403 	add.w	r4, fp, #3
 801329c:	fb06 0005 	mla	r0, r6, r5, r0
 80132a0:	42a7      	cmp	r7, r4
 80132a2:	dd10      	ble.n	80132c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 80132a4:	9c01      	ldr	r4, [sp, #4]
 80132a6:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 80132aa:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 80132ae:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 80132b2:	fb04 3305 	mla	r3, r4, r5, r3
 80132b6:	fb04 0006 	mla	r0, r4, r6, r0
 80132ba:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 80132be:	fb05 2204 	mla	r2, r5, r4, r2
 80132c2:	fb06 1104 	mla	r1, r6, r4, r1
 80132c6:	9c08      	ldr	r4, [sp, #32]
 80132c8:	eba4 0b0b 	sub.w	fp, r4, fp
 80132cc:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 80132d0:	9c02      	ldr	r4, [sp, #8]
 80132d2:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 80132d6:	2c15      	cmp	r4, #21
 80132d8:	f340 80e8 	ble.w	80134ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4c4>
 80132dc:	1ea6      	subs	r6, r4, #2
 80132de:	2501      	movs	r5, #1
 80132e0:	3c01      	subs	r4, #1
 80132e2:	fa05 f606 	lsl.w	r6, r5, r6
 80132e6:	9d03      	ldr	r5, [sp, #12]
 80132e8:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80132ec:	fb53 6305 	smmla	r3, r3, r5, r6
 80132f0:	fb50 6005 	smmla	r0, r0, r5, r6
 80132f4:	9d04      	ldr	r5, [sp, #16]
 80132f6:	4123      	asrs	r3, r4
 80132f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80132fc:	443b      	add	r3, r7
 80132fe:	f303 0307 	ssat	r3, #8, r3
 8013302:	4120      	asrs	r0, r4
 8013304:	9c05      	ldr	r4, [sp, #20]
 8013306:	4438      	add	r0, r7
 8013308:	f804 3c01 	strb.w	r3, [r4, #-1]
 801330c:	f300 0007 	ssat	r0, #8, r0
 8013310:	9b06      	ldr	r3, [sp, #24]
 8013312:	f803 0c01 	strb.w	r0, [r3, #-1]
 8013316:	9b02      	ldr	r3, [sp, #8]
 8013318:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801331c:	2b15      	cmp	r3, #21
 801331e:	f340 80e5 	ble.w	80134ec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x504>
 8013322:	1e9c      	subs	r4, r3, #2
 8013324:	2001      	movs	r0, #1
 8013326:	3b01      	subs	r3, #1
 8013328:	fa00 f404 	lsl.w	r4, r0, r4
 801332c:	9803      	ldr	r0, [sp, #12]
 801332e:	6800      	ldr	r0, [r0, #0]
 8013330:	fb52 4200 	smmla	r2, r2, r0, r4
 8013334:	fb51 4100 	smmla	r1, r1, r0, r4
 8013338:	9804      	ldr	r0, [sp, #16]
 801333a:	411a      	asrs	r2, r3
 801333c:	6805      	ldr	r5, [r0, #0]
 801333e:	442a      	add	r2, r5
 8013340:	f302 0207 	ssat	r2, #8, r2
 8013344:	4119      	asrs	r1, r3
 8013346:	9b05      	ldr	r3, [sp, #20]
 8013348:	4429      	add	r1, r5
 801334a:	701a      	strb	r2, [r3, #0]
 801334c:	f301 0107 	ssat	r1, #8, r1
 8013350:	9b06      	ldr	r3, [sp, #24]
 8013352:	7019      	strb	r1, [r3, #0]
 8013354:	9a07      	ldr	r2, [sp, #28]
 8013356:	9b02      	ldr	r3, [sp, #8]
 8013358:	3208      	adds	r2, #8
 801335a:	3304      	adds	r3, #4
 801335c:	9207      	str	r2, [sp, #28]
 801335e:	9a03      	ldr	r2, [sp, #12]
 8013360:	9302      	str	r3, [sp, #8]
 8013362:	3208      	adds	r2, #8
 8013364:	9203      	str	r2, [sp, #12]
 8013366:	9a04      	ldr	r2, [sp, #16]
 8013368:	3208      	adds	r2, #8
 801336a:	9204      	str	r2, [sp, #16]
 801336c:	9a05      	ldr	r2, [sp, #20]
 801336e:	3202      	adds	r2, #2
 8013370:	9205      	str	r2, [sp, #20]
 8013372:	9a06      	ldr	r2, [sp, #24]
 8013374:	3202      	adds	r2, #2
 8013376:	9206      	str	r2, [sp, #24]
 8013378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801337a:	4293      	cmp	r3, r2
 801337c:	f47f ae79 	bne.w	8013072 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x8a>
 8013380:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013382:	46cb      	mov	fp, r9
 8013384:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8013386:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801338a:	9229      	str	r2, [sp, #164]	; 0xa4
 801338c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801338e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013392:	922a      	str	r2, [sp, #168]	; 0xa8
 8013394:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8013396:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801339a:	922b      	str	r2, [sp, #172]	; 0xac
 801339c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801339e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80133a2:	9215      	str	r2, [sp, #84]	; 0x54
 80133a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80133a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80133aa:	9216      	str	r2, [sp, #88]	; 0x58
 80133ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80133ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80133b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80133b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133b6:	07db      	lsls	r3, r3, #31
 80133b8:	d56f      	bpl.n	801349a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80133ba:	9a08      	ldr	r2, [sp, #32]
 80133bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80133be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80133c0:	0896      	lsrs	r6, r2, #2
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 80133c8:	f000 812e 	beq.w	8013628 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 80133cc:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 80133d0:	463c      	mov	r4, r7
 80133d2:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 80133d6:	461a      	mov	r2, r3
 80133d8:	f8db 5000 	ldr.w	r5, [fp]
 80133dc:	f10b 0b08 	add.w	fp, fp, #8
 80133e0:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 80133e4:	f8d0 e000 	ldr.w	lr, [r0]
 80133e8:	fb25 330e 	smlad	r3, r5, lr, r3
 80133ec:	f8d4 e000 	ldr.w	lr, [r4]
 80133f0:	fb25 220e 	smlad	r2, r5, lr, r2
 80133f4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80133f8:	3408      	adds	r4, #8
 80133fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80133fe:	3008      	adds	r0, #8
 8013400:	fb21 330e 	smlad	r3, r1, lr, r3
 8013404:	fb21 2205 	smlad	r2, r1, r5, r2
 8013408:	45b3      	cmp	fp, r6
 801340a:	d1e5      	bne.n	80133d8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3f0>
 801340c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801340e:	4467      	add	r7, ip
 8013410:	4461      	add	r1, ip
 8013412:	910c      	str	r1, [sp, #48]	; 0x30
 8013414:	9908      	ldr	r1, [sp, #32]
 8013416:	f011 0103 	ands.w	r1, r1, #3
 801341a:	d01d      	beq.n	8013458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 801341c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801341e:	3901      	subs	r1, #1
 8013420:	f9b6 0000 	ldrsh.w	r0, [r6]
 8013424:	882c      	ldrh	r4, [r5, #0]
 8013426:	b289      	uxth	r1, r1
 8013428:	fb14 3300 	smlabb	r3, r4, r0, r3
 801342c:	883c      	ldrh	r4, [r7, #0]
 801342e:	fb14 2200 	smlabb	r2, r4, r0, r2
 8013432:	b189      	cbz	r1, 8013458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8013434:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8013438:	2901      	cmp	r1, #1
 801343a:	886c      	ldrh	r4, [r5, #2]
 801343c:	fb14 3300 	smlabb	r3, r4, r0, r3
 8013440:	887c      	ldrh	r4, [r7, #2]
 8013442:	fb14 2200 	smlabb	r2, r4, r0, r2
 8013446:	d007      	beq.n	8013458 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8013448:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 801344c:	88a8      	ldrh	r0, [r5, #4]
 801344e:	fb11 3300 	smlabb	r3, r1, r0, r3
 8013452:	88b8      	ldrh	r0, [r7, #4]
 8013454:	fb11 2200 	smlabb	r2, r1, r0, r2
 8013458:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801345a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801345e:	2915      	cmp	r1, #21
 8013460:	f340 80a6 	ble.w	80135b0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c8>
 8013464:	1e8d      	subs	r5, r1, #2
 8013466:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8013468:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801346a:	3901      	subs	r1, #1
 801346c:	2601      	movs	r6, #1
 801346e:	6800      	ldr	r0, [r0, #0]
 8013470:	6824      	ldr	r4, [r4, #0]
 8013472:	40ae      	lsls	r6, r5
 8013474:	fb53 6500 	smmla	r5, r3, r0, r6
 8013478:	fb52 6300 	smmla	r3, r2, r0, r6
 801347c:	fa45 f201 	asr.w	r2, r5, r1
 8013480:	4422      	add	r2, r4
 8013482:	f302 0207 	ssat	r2, #8, r2
 8013486:	410b      	asrs	r3, r1
 8013488:	982b      	ldr	r0, [sp, #172]	; 0xac
 801348a:	4423      	add	r3, r4
 801348c:	f800 2b01 	strb.w	r2, [r0], #1
 8013490:	f303 0307 	ssat	r3, #8, r3
 8013494:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013496:	902b      	str	r0, [sp, #172]	; 0xac
 8013498:	7013      	strb	r3, [r2, #0]
 801349a:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801349e:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 80134a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80134a4:	4418      	add	r0, r3
 80134a6:	b01d      	add	sp, #116	; 0x74
 80134a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ac:	2c00      	cmp	r4, #0
 80134ae:	dd34      	ble.n	801351a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x532>
 80134b0:	9d03      	ldr	r5, [sp, #12]
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	9e04      	ldr	r6, [sp, #16]
 80134b6:	0040      	lsls	r0, r0, #1
 80134b8:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80134bc:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80134c0:	fb53 6305 	smmla	r3, r3, r5, r6
 80134c4:	fb50 6005 	smmla	r0, r0, r5, r6
 80134c8:	4123      	asrs	r3, r4
 80134ca:	f303 0307 	ssat	r3, #8, r3
 80134ce:	4120      	asrs	r0, r4
 80134d0:	9c05      	ldr	r4, [sp, #20]
 80134d2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80134d6:	f300 0007 	ssat	r0, #8, r0
 80134da:	9b06      	ldr	r3, [sp, #24]
 80134dc:	f803 0c01 	strb.w	r0, [r3, #-1]
 80134e0:	9b02      	ldr	r3, [sp, #8]
 80134e2:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80134e6:	2b15      	cmp	r3, #21
 80134e8:	f73f af1b 	bgt.w	8013322 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	dd36      	ble.n	801355e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x576>
 80134f0:	9803      	ldr	r0, [sp, #12]
 80134f2:	0052      	lsls	r2, r2, #1
 80134f4:	9c04      	ldr	r4, [sp, #16]
 80134f6:	0049      	lsls	r1, r1, #1
 80134f8:	6800      	ldr	r0, [r0, #0]
 80134fa:	6824      	ldr	r4, [r4, #0]
 80134fc:	fb52 4200 	smmla	r2, r2, r0, r4
 8013500:	fb51 4100 	smmla	r1, r1, r0, r4
 8013504:	411a      	asrs	r2, r3
 8013506:	f302 0207 	ssat	r2, #8, r2
 801350a:	4119      	asrs	r1, r3
 801350c:	9b05      	ldr	r3, [sp, #20]
 801350e:	701a      	strb	r2, [r3, #0]
 8013510:	f301 0107 	ssat	r1, #8, r1
 8013514:	9b06      	ldr	r3, [sp, #24]
 8013516:	7019      	strb	r1, [r3, #0]
 8013518:	e71c      	b.n	8013354 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 801351a:	f1c4 0401 	rsb	r4, r4, #1
 801351e:	fa03 f504 	lsl.w	r5, r3, r4
 8013522:	f305 051f 	ssat	r5, #32, r5
 8013526:	9b03      	ldr	r3, [sp, #12]
 8013528:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801352c:	fb55 f516 	smmulr	r5, r5, r6
 8013530:	40a0      	lsls	r0, r4
 8013532:	f300 001f 	ssat	r0, #32, r0
 8013536:	fb50 f016 	smmulr	r0, r0, r6
 801353a:	9c04      	ldr	r4, [sp, #16]
 801353c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013540:	442b      	add	r3, r5
 8013542:	f303 0307 	ssat	r3, #8, r3
 8013546:	9d05      	ldr	r5, [sp, #20]
 8013548:	f805 3c01 	strb.w	r3, [r5, #-1]
 801354c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013550:	4403      	add	r3, r0
 8013552:	f303 0307 	ssat	r3, #8, r3
 8013556:	9806      	ldr	r0, [sp, #24]
 8013558:	f800 3c01 	strb.w	r3, [r0, #-1]
 801355c:	e6db      	b.n	8013316 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32e>
 801355e:	f1c3 0301 	rsb	r3, r3, #1
 8013562:	fa02 f003 	lsl.w	r0, r2, r3
 8013566:	f300 001f 	ssat	r0, #32, r0
 801356a:	9a03      	ldr	r2, [sp, #12]
 801356c:	6814      	ldr	r4, [r2, #0]
 801356e:	fb50 f014 	smmulr	r0, r0, r4
 8013572:	fa01 f303 	lsl.w	r3, r1, r3
 8013576:	f303 021f 	ssat	r2, #32, r3
 801357a:	fb52 f214 	smmulr	r2, r2, r4
 801357e:	9904      	ldr	r1, [sp, #16]
 8013580:	680b      	ldr	r3, [r1, #0]
 8013582:	4403      	add	r3, r0
 8013584:	f303 0307 	ssat	r3, #8, r3
 8013588:	9805      	ldr	r0, [sp, #20]
 801358a:	7003      	strb	r3, [r0, #0]
 801358c:	680b      	ldr	r3, [r1, #0]
 801358e:	4413      	add	r3, r2
 8013590:	f303 0307 	ssat	r3, #8, r3
 8013594:	9a06      	ldr	r2, [sp, #24]
 8013596:	7013      	strb	r3, [r2, #0]
 8013598:	e6dc      	b.n	8013354 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 801359a:	f04f 0b00 	mov.w	fp, #0
 801359e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80135a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80135a2:	45ab      	cmp	fp, r5
 80135a4:	9401      	str	r4, [sp, #4]
 80135a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80135a8:	f6ff adfc 	blt.w	80131a4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 80135ac:	46a0      	mov	r8, r4
 80135ae:	e637      	b.n	8013220 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 80135b0:	2900      	cmp	r1, #0
 80135b2:	dd1a      	ble.n	80135ea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x602>
 80135b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	0052      	lsls	r2, r2, #1
 80135ba:	6804      	ldr	r4, [r0, #0]
 80135bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80135be:	6805      	ldr	r5, [r0, #0]
 80135c0:	fb53 5004 	smmla	r0, r3, r4, r5
 80135c4:	fb52 5304 	smmla	r3, r2, r4, r5
 80135c8:	fa40 f201 	asr.w	r2, r0, r1
 80135cc:	f302 0207 	ssat	r2, #8, r2
 80135d0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80135d2:	f800 2b01 	strb.w	r2, [r0], #1
 80135d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80135d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80135dc:	4113      	asrs	r3, r2
 80135de:	f303 0307 	ssat	r3, #8, r3
 80135e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135e4:	902b      	str	r0, [sp, #172]	; 0xac
 80135e6:	7013      	strb	r3, [r2, #0]
 80135e8:	e757      	b.n	801349a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80135ea:	f1c1 0101 	rsb	r1, r1, #1
 80135ee:	408b      	lsls	r3, r1
 80135f0:	f303 031f 	ssat	r3, #32, r3
 80135f4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80135f6:	6800      	ldr	r0, [r0, #0]
 80135f8:	fb53 f310 	smmulr	r3, r3, r0
 80135fc:	408a      	lsls	r2, r1
 80135fe:	f302 021f 	ssat	r2, #32, r2
 8013602:	fb52 f210 	smmulr	r2, r2, r0
 8013606:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013608:	6809      	ldr	r1, [r1, #0]
 801360a:	440b      	add	r3, r1
 801360c:	f303 0307 	ssat	r3, #8, r3
 8013610:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013612:	f801 3b01 	strb.w	r3, [r1], #1
 8013616:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4413      	add	r3, r2
 801361c:	f303 0307 	ssat	r3, #8, r3
 8013620:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013622:	912b      	str	r1, [sp, #172]	; 0xac
 8013624:	7013      	strb	r3, [r2, #0]
 8013626:	e738      	b.n	801349a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8013628:	465e      	mov	r6, fp
 801362a:	461a      	mov	r2, r3
 801362c:	e6f2      	b.n	8013414 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x42c>
 801362e:	bf00      	nop

08013630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8013630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013634:	b093      	sub	sp, #76	; 0x4c
 8013636:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801363a:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801363e:	085d      	lsrs	r5, r3, #1
 8013640:	930e      	str	r3, [sp, #56]	; 0x38
 8013642:	9107      	str	r1, [sp, #28]
 8013644:	920d      	str	r2, [sp, #52]	; 0x34
 8013646:	9405      	str	r4, [sp, #20]
 8013648:	950f      	str	r5, [sp, #60]	; 0x3c
 801364a:	f000 81fc 	beq.w	8013a46 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 801364e:	4616      	mov	r6, r2
 8013650:	1e6a      	subs	r2, r5, #1
 8013652:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013654:	460f      	mov	r7, r1
 8013656:	b292      	uxth	r2, r2
 8013658:	f1a4 0310 	sub.w	r3, r4, #16
 801365c:	1d29      	adds	r1, r5, #4
 801365e:	f106 0a08 	add.w	sl, r6, #8
 8013662:	091b      	lsrs	r3, r3, #4
 8013664:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801366a:	3301      	adds	r3, #1
 801366c:	f102 0b02 	add.w	fp, r2, #2
 8013670:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013672:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8013676:	9509      	str	r5, [sp, #36]	; 0x24
 8013678:	3204      	adds	r2, #4
 801367a:	1ee5      	subs	r5, r4, #3
 801367c:	9202      	str	r2, [sp, #8]
 801367e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013680:	9508      	str	r5, [sp, #32]
 8013682:	3208      	adds	r2, #8
 8013684:	9204      	str	r2, [sp, #16]
 8013686:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013688:	3208      	adds	r2, #8
 801368a:	9201      	str	r2, [sp, #4]
 801368c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801368e:	3202      	adds	r2, #2
 8013690:	9203      	str	r2, [sp, #12]
 8013692:	019a      	lsls	r2, r3, #6
 8013694:	011b      	lsls	r3, r3, #4
 8013696:	920a      	str	r2, [sp, #40]	; 0x28
 8013698:	930b      	str	r3, [sp, #44]	; 0x2c
 801369a:	1f23      	subs	r3, r4, #4
 801369c:	930c      	str	r3, [sp, #48]	; 0x30
 801369e:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 80136a2:	9905      	ldr	r1, [sp, #20]
 80136a4:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 80136a8:	9311      	str	r3, [sp, #68]	; 0x44
 80136aa:	290f      	cmp	r1, #15
 80136ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136ae:	9211      	str	r2, [sp, #68]	; 0x44
 80136b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80136b2:	9c07      	ldr	r4, [sp, #28]
 80136b4:	f340 819c 	ble.w	80139f0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 80136b8:	4601      	mov	r1, r0
 80136ba:	f8d4 c000 	ldr.w	ip, [r4]
 80136be:	680e      	ldr	r6, [r1, #0]
 80136c0:	fb26 330c 	smlad	r3, r6, ip, r3
 80136c4:	684d      	ldr	r5, [r1, #4]
 80136c6:	fb25 220c 	smlad	r2, r5, ip, r2
 80136ca:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80136ce:	688e      	ldr	r6, [r1, #8]
 80136d0:	fb26 360c 	smlad	r6, r6, ip, r3
 80136d4:	68cd      	ldr	r5, [r1, #12]
 80136d6:	fb25 250c 	smlad	r5, r5, ip, r2
 80136da:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80136de:	690b      	ldr	r3, [r1, #16]
 80136e0:	fb23 660c 	smlad	r6, r3, ip, r6
 80136e4:	694a      	ldr	r2, [r1, #20]
 80136e6:	fb22 550c 	smlad	r5, r2, ip, r5
 80136ea:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80136ee:	698b      	ldr	r3, [r1, #24]
 80136f0:	fb23 630c 	smlad	r3, r3, ip, r6
 80136f4:	69ca      	ldr	r2, [r1, #28]
 80136f6:	fb22 520c 	smlad	r2, r2, ip, r5
 80136fa:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80136fe:	6a0e      	ldr	r6, [r1, #32]
 8013700:	fb26 330c 	smlad	r3, r6, ip, r3
 8013704:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8013706:	fb25 220c 	smlad	r2, r5, ip, r2
 801370a:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801370e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8013710:	fb26 360c 	smlad	r6, r6, ip, r3
 8013714:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8013716:	fb25 250c 	smlad	r5, r5, ip, r2
 801371a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801371e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8013720:	fb23 660c 	smlad	r6, r3, ip, r6
 8013724:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8013726:	fb22 550c 	smlad	r5, r2, ip, r5
 801372a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801372e:	3140      	adds	r1, #64	; 0x40
 8013730:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8013734:	3420      	adds	r4, #32
 8013736:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801373a:	fb23 630c 	smlad	r3, r3, ip, r6
 801373e:	fb22 520c 	smlad	r2, r2, ip, r5
 8013742:	42bc      	cmp	r4, r7
 8013744:	d1b9      	bne.n	80136ba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 8013746:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013748:	463c      	mov	r4, r7
 801374a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801374e:	4408      	add	r0, r1
 8013750:	9908      	ldr	r1, [sp, #32]
 8013752:	458e      	cmp	lr, r1
 8013754:	da25      	bge.n	80137a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8013756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013758:	eba1 090e 	sub.w	r9, r1, lr
 801375c:	4601      	mov	r1, r0
 801375e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8013762:	f109 0501 	add.w	r5, r9, #1
 8013766:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 801376a:	9506      	str	r5, [sp, #24]
 801376c:	6825      	ldr	r5, [r4, #0]
 801376e:	680e      	ldr	r6, [r1, #0]
 8013770:	fb26 3305 	smlad	r3, r6, r5, r3
 8013774:	684e      	ldr	r6, [r1, #4]
 8013776:	fb26 2505 	smlad	r5, r6, r5, r2
 801377a:	6866      	ldr	r6, [r4, #4]
 801377c:	3110      	adds	r1, #16
 801377e:	f851 cc08 	ldr.w	ip, [r1, #-8]
 8013782:	3408      	adds	r4, #8
 8013784:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013788:	fb2c 3306 	smlad	r3, ip, r6, r3
 801378c:	fb22 5206 	smlad	r2, r2, r6, r5
 8013790:	45a0      	cmp	r8, r4
 8013792:	d1eb      	bne.n	801376c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 8013794:	9906      	ldr	r1, [sp, #24]
 8013796:	f10e 0e04 	add.w	lr, lr, #4
 801379a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801379e:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80137a2:	9e05      	ldr	r6, [sp, #20]
 80137a4:	4576      	cmp	r6, lr
 80137a6:	dd30      	ble.n	801380a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 80137a8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80137ac:	8805      	ldrh	r5, [r0, #0]
 80137ae:	fb15 3301 	smlabb	r3, r5, r1, r3
 80137b2:	8845      	ldrh	r5, [r0, #2]
 80137b4:	fb11 2205 	smlabb	r2, r1, r5, r2
 80137b8:	f10e 0101 	add.w	r1, lr, #1
 80137bc:	428e      	cmp	r6, r1
 80137be:	dd1f      	ble.n	8013800 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80137c0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80137c4:	8885      	ldrh	r5, [r0, #4]
 80137c6:	fb15 3301 	smlabb	r3, r5, r1, r3
 80137ca:	88c5      	ldrh	r5, [r0, #6]
 80137cc:	fb11 2205 	smlabb	r2, r1, r5, r2
 80137d0:	f10e 0102 	add.w	r1, lr, #2
 80137d4:	428e      	cmp	r6, r1
 80137d6:	dd13      	ble.n	8013800 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80137d8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80137dc:	8905      	ldrh	r5, [r0, #8]
 80137de:	fb15 3301 	smlabb	r3, r5, r1, r3
 80137e2:	8945      	ldrh	r5, [r0, #10]
 80137e4:	fb11 2205 	smlabb	r2, r1, r5, r2
 80137e8:	f10e 0103 	add.w	r1, lr, #3
 80137ec:	428e      	cmp	r6, r1
 80137ee:	dd07      	ble.n	8013800 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80137f0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80137f4:	8984      	ldrh	r4, [r0, #12]
 80137f6:	fb14 3301 	smlabb	r3, r4, r1, r3
 80137fa:	89c4      	ldrh	r4, [r0, #14]
 80137fc:	fb11 2204 	smlabb	r2, r1, r4, r2
 8013800:	9905      	ldr	r1, [sp, #20]
 8013802:	eba1 0e0e 	sub.w	lr, r1, lr
 8013806:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801380a:	9902      	ldr	r1, [sp, #8]
 801380c:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 8013810:	2d15      	cmp	r5, #21
 8013812:	f340 80b0 	ble.w	8013976 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8013816:	9e04      	ldr	r6, [sp, #16]
 8013818:	1eac      	subs	r4, r5, #2
 801381a:	2101      	movs	r1, #1
 801381c:	3d01      	subs	r5, #1
 801381e:	f1a6 0e04 	sub.w	lr, r6, #4
 8013822:	fa01 f404 	lsl.w	r4, r1, r4
 8013826:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801382a:	fb53 4401 	smmla	r4, r3, r1, r4
 801382e:	9b01      	ldr	r3, [sp, #4]
 8013830:	fa44 f505 	asr.w	r5, r4, r5
 8013834:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8013838:	1f1e      	subs	r6, r3, #4
 801383a:	442c      	add	r4, r5
 801383c:	f304 0407 	ssat	r4, #8, r4
 8013840:	f80b 4c02 	strb.w	r4, [fp, #-2]
 8013844:	9b03      	ldr	r3, [sp, #12]
 8013846:	f9b3 3000 	ldrsh.w	r3, [r3]
 801384a:	2b15      	cmp	r3, #21
 801384c:	f340 8085 	ble.w	801395a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 8013850:	1e9c      	subs	r4, r3, #2
 8013852:	2501      	movs	r5, #1
 8013854:	3b01      	subs	r3, #1
 8013856:	6836      	ldr	r6, [r6, #0]
 8013858:	f8de 1000 	ldr.w	r1, [lr]
 801385c:	fa05 f404 	lsl.w	r4, r5, r4
 8013860:	fb52 4201 	smmla	r2, r2, r1, r4
 8013864:	411a      	asrs	r2, r3
 8013866:	4432      	add	r2, r6
 8013868:	f302 0207 	ssat	r2, #8, r2
 801386c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8013870:	9b02      	ldr	r3, [sp, #8]
 8013872:	f10b 0b02 	add.w	fp, fp, #2
 8013876:	f10a 0a08 	add.w	sl, sl, #8
 801387a:	3304      	adds	r3, #4
 801387c:	9302      	str	r3, [sp, #8]
 801387e:	9b04      	ldr	r3, [sp, #16]
 8013880:	3308      	adds	r3, #8
 8013882:	9304      	str	r3, [sp, #16]
 8013884:	9b01      	ldr	r3, [sp, #4]
 8013886:	3308      	adds	r3, #8
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	9b03      	ldr	r3, [sp, #12]
 801388c:	3304      	adds	r3, #4
 801388e:	9303      	str	r3, [sp, #12]
 8013890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013892:	459b      	cmp	fp, r3
 8013894:	f47f af03 	bne.w	801369e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 8013898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801389a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801389c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80138a0:	921e      	str	r2, [sp, #120]	; 0x78
 80138a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80138a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80138a8:	921f      	str	r2, [sp, #124]	; 0x7c
 80138aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80138b0:	9220      	str	r2, [sp, #128]	; 0x80
 80138b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80138b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80138b8:	920d      	str	r2, [sp, #52]	; 0x34
 80138ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80138bc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80138c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138c2:	07db      	lsls	r3, r3, #31
 80138c4:	d545      	bpl.n	8013952 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 80138c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	9b05      	ldr	r3, [sp, #20]
 80138cc:	089e      	lsrs	r6, r3, #2
 80138ce:	d014      	beq.n	80138fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 80138d0:	00f7      	lsls	r7, r6, #3
 80138d2:	9b07      	ldr	r3, [sp, #28]
 80138d4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80138d8:	6805      	ldr	r5, [r0, #0]
 80138da:	3008      	adds	r0, #8
 80138dc:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80138e0:	f8d3 c000 	ldr.w	ip, [r3]
 80138e4:	fb25 220c 	smlad	r2, r5, ip, r2
 80138e8:	685d      	ldr	r5, [r3, #4]
 80138ea:	3308      	adds	r3, #8
 80138ec:	fb24 2205 	smlad	r2, r4, r5, r2
 80138f0:	4286      	cmp	r6, r0
 80138f2:	d1f1      	bne.n	80138d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 80138f4:	9b07      	ldr	r3, [sp, #28]
 80138f6:	443b      	add	r3, r7
 80138f8:	9307      	str	r3, [sp, #28]
 80138fa:	9b05      	ldr	r3, [sp, #20]
 80138fc:	f013 0303 	ands.w	r3, r3, #3
 8013900:	d011      	beq.n	8013926 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8013902:	3b01      	subs	r3, #1
 8013904:	9e07      	ldr	r6, [sp, #28]
 8013906:	8804      	ldrh	r4, [r0, #0]
 8013908:	8835      	ldrh	r5, [r6, #0]
 801390a:	b29b      	uxth	r3, r3
 801390c:	fb15 2204 	smlabb	r2, r5, r4, r2
 8013910:	b14b      	cbz	r3, 8013926 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8013912:	8845      	ldrh	r5, [r0, #2]
 8013914:	2b01      	cmp	r3, #1
 8013916:	8874      	ldrh	r4, [r6, #2]
 8013918:	fb15 2204 	smlabb	r2, r5, r4, r2
 801391c:	d003      	beq.n	8013926 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801391e:	8880      	ldrh	r0, [r0, #4]
 8013920:	88b3      	ldrh	r3, [r6, #4]
 8013922:	fb10 2203 	smlabb	r2, r0, r3, r2
 8013926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013928:	f9b3 3000 	ldrsh.w	r3, [r3]
 801392c:	2b15      	cmp	r3, #21
 801392e:	dd62      	ble.n	80139f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 8013930:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8013932:	1e9e      	subs	r6, r3, #2
 8013934:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013936:	3b01      	subs	r3, #1
 8013938:	6825      	ldr	r5, [r4, #0]
 801393a:	2401      	movs	r4, #1
 801393c:	6800      	ldr	r0, [r0, #0]
 801393e:	40b4      	lsls	r4, r6
 8013940:	fb52 4200 	smmla	r2, r2, r0, r4
 8013944:	fa42 f303 	asr.w	r3, r2, r3
 8013948:	442b      	add	r3, r5
 801394a:	f303 0307 	ssat	r3, #8, r3
 801394e:	f801 3b01 	strb.w	r3, [r1], #1
 8013952:	4608      	mov	r0, r1
 8013954:	b013      	add	sp, #76	; 0x4c
 8013956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395a:	2b00      	cmp	r3, #0
 801395c:	dd21      	ble.n	80139a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 801395e:	f8de 1000 	ldr.w	r1, [lr]
 8013962:	0052      	lsls	r2, r2, #1
 8013964:	6834      	ldr	r4, [r6, #0]
 8013966:	fb52 4201 	smmla	r2, r2, r1, r4
 801396a:	411a      	asrs	r2, r3
 801396c:	f302 0307 	ssat	r3, #8, r2
 8013970:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8013974:	e77c      	b.n	8013870 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8013976:	2d00      	cmp	r5, #0
 8013978:	dd24      	ble.n	80139c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 801397a:	9e04      	ldr	r6, [sp, #16]
 801397c:	005b      	lsls	r3, r3, #1
 801397e:	9c01      	ldr	r4, [sp, #4]
 8013980:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8013984:	f1a6 0e04 	sub.w	lr, r6, #4
 8013988:	f854 4c08 	ldr.w	r4, [r4, #-8]
 801398c:	fb53 4301 	smmla	r3, r3, r1, r4
 8013990:	9c01      	ldr	r4, [sp, #4]
 8013992:	fa43 f505 	asr.w	r5, r3, r5
 8013996:	1f26      	subs	r6, r4, #4
 8013998:	f305 0507 	ssat	r5, #8, r5
 801399c:	f80b 5c02 	strb.w	r5, [fp, #-2]
 80139a0:	e750      	b.n	8013844 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 80139a2:	f1c3 0301 	rsb	r3, r3, #1
 80139a6:	fa02 f303 	lsl.w	r3, r2, r3
 80139aa:	f303 031f 	ssat	r3, #32, r3
 80139ae:	f8de 2000 	ldr.w	r2, [lr]
 80139b2:	fb53 f312 	smmulr	r3, r3, r2
 80139b6:	6832      	ldr	r2, [r6, #0]
 80139b8:	441a      	add	r2, r3
 80139ba:	f302 0207 	ssat	r2, #8, r2
 80139be:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80139c2:	e755      	b.n	8013870 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80139c4:	f1c5 0501 	rsb	r5, r5, #1
 80139c8:	40ab      	lsls	r3, r5
 80139ca:	f303 031f 	ssat	r3, #32, r3
 80139ce:	9904      	ldr	r1, [sp, #16]
 80139d0:	f1a1 0e04 	sub.w	lr, r1, #4
 80139d4:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80139d8:	fb53 f111 	smmulr	r1, r3, r1
 80139dc:	9c01      	ldr	r4, [sp, #4]
 80139de:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80139e2:	1f26      	subs	r6, r4, #4
 80139e4:	440b      	add	r3, r1
 80139e6:	f303 0307 	ssat	r3, #8, r3
 80139ea:	f80b 3c02 	strb.w	r3, [fp, #-2]
 80139ee:	e729      	b.n	8013844 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 80139f0:	f04f 0e00 	mov.w	lr, #0
 80139f4:	e6ac      	b.n	8013750 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	dd10      	ble.n	8013a1c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 80139fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80139fc:	0052      	lsls	r2, r2, #1
 80139fe:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8013a00:	6800      	ldr	r0, [r0, #0]
 8013a02:	6824      	ldr	r4, [r4, #0]
 8013a04:	fb52 4200 	smmla	r2, r2, r0, r4
 8013a08:	fa42 f303 	asr.w	r3, r2, r3
 8013a0c:	f303 0307 	ssat	r3, #8, r3
 8013a10:	f801 3b01 	strb.w	r3, [r1], #1
 8013a14:	4608      	mov	r0, r1
 8013a16:	b013      	add	sp, #76	; 0x4c
 8013a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1c:	f1c3 0301 	rsb	r3, r3, #1
 8013a20:	fa02 f303 	lsl.w	r3, r2, r3
 8013a24:	f303 031f 	ssat	r3, #32, r3
 8013a28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a2a:	6812      	ldr	r2, [r2, #0]
 8013a2c:	fb53 f312 	smmulr	r3, r3, r2
 8013a30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a32:	6812      	ldr	r2, [r2, #0]
 8013a34:	4413      	add	r3, r2
 8013a36:	f303 0307 	ssat	r3, #8, r3
 8013a3a:	f801 3b01 	strb.w	r3, [r1], #1
 8013a3e:	4608      	mov	r0, r1
 8013a40:	b013      	add	sp, #76	; 0x4c
 8013a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a46:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013a48:	e73a      	b.n	80138c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 8013a4a:	bf00      	nop

08013a4c <st_int8_avepool>:
 8013a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a50:	b095      	sub	sp, #84	; 0x54
 8013a52:	4699      	mov	r9, r3
 8013a54:	4692      	mov	sl, r2
 8013a56:	ee80 6a20 	vdiv.f32	s12, s0, s1
 8013a5a:	9102      	str	r1, [sp, #8]
 8013a5c:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8013a60:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8013a64:	910f      	str	r1, [sp, #60]	; 0x3c
 8013a66:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8013a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8013a6c:	9110      	str	r1, [sp, #64]	; 0x40
 8013a6e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8013a72:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8013a76:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8013a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013a7c:	9104      	str	r1, [sp, #16]
 8013a7e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8013a82:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 8013a86:	930e      	str	r3, [sp, #56]	; 0x38
 8013a88:	ee03 1a90 	vmov	s7, r1
 8013a8c:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 8013a90:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8013a94:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8013a98:	9211      	str	r2, [sp, #68]	; 0x44
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	f000 80b3 	beq.w	8013c06 <st_int8_avepool+0x1ba>
 8013aa0:	eeb4 0a60 	vcmp.f32	s0, s1
 8013aa4:	ee03 1a10 	vmov	s6, r1
 8013aa8:	4683      	mov	fp, r0
 8013aaa:	ee13 1a90 	vmov	r1, s7
 8013aae:	ee13 0a10 	vmov	r0, s6
 8013ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab6:	bf0c      	ite	eq
 8013ab8:	2201      	moveq	r2, #1
 8013aba:	2200      	movne	r2, #0
 8013abc:	4281      	cmp	r1, r0
 8013abe:	bf14      	ite	ne
 8013ac0:	2200      	movne	r2, #0
 8013ac2:	f002 0201 	andeq.w	r2, r2, #1
 8013ac6:	f1b8 0f01 	cmp.w	r8, #1
 8013aca:	9201      	str	r2, [sp, #4]
 8013acc:	f040 80c2 	bne.w	8013c54 <st_int8_avepool+0x208>
 8013ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ad2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8013c4c <st_int8_avepool+0x200>
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8013c50 <st_int8_avepool+0x204>
 8013adc:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	1a89      	subs	r1, r1, r2
 8013ae4:	4252      	negs	r2, r2
 8013ae6:	9306      	str	r3, [sp, #24]
 8013ae8:	b293      	uxth	r3, r2
 8013aea:	2200      	movs	r2, #0
 8013aec:	910d      	str	r1, [sp, #52]	; 0x34
 8013aee:	930c      	str	r3, [sp, #48]	; 0x30
 8013af0:	4613      	mov	r3, r2
 8013af2:	9904      	ldr	r1, [sp, #16]
 8013af4:	2900      	cmp	r1, #0
 8013af6:	f000 80a6 	beq.w	8013c46 <st_int8_avepool+0x1fa>
 8013afa:	b292      	uxth	r2, r2
 8013afc:	2100      	movs	r1, #0
 8013afe:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 8013b02:	9207      	str	r2, [sp, #28]
 8013b04:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8013b08:	9a04      	ldr	r2, [sp, #16]
 8013b0a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8013b0e:	4688      	mov	r8, r1
 8013b10:	fb02 f303 	mul.w	r3, r2, r3
 8013b14:	9a06      	ldr	r2, [sp, #24]
 8013b16:	9308      	str	r3, [sp, #32]
 8013b18:	fa0f fe82 	sxth.w	lr, r2
 8013b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	b21b      	sxth	r3, r3
 8013b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b26:	9303      	str	r3, [sp, #12]
 8013b28:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013b2c:	9305      	str	r3, [sp, #20]
 8013b2e:	b28b      	uxth	r3, r1
 8013b30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013b32:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8013b36:	930a      	str	r3, [sp, #40]	; 0x28
 8013b38:	4570      	cmp	r0, lr
 8013b3a:	9b08      	ldr	r3, [sp, #32]
 8013b3c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8013b40:	4498      	add	r8, r3
 8013b42:	da79      	bge.n	8013c38 <st_int8_avepool+0x1ec>
 8013b44:	2700      	movs	r7, #0
 8013b46:	46bc      	mov	ip, r7
 8013b48:	42a6      	cmp	r6, r4
 8013b4a:	da17      	bge.n	8013b7c <st_int8_avepool+0x130>
 8013b4c:	43c5      	mvns	r5, r0
 8013b4e:	4548      	cmp	r0, r9
 8013b50:	fb0a f200 	mul.w	r2, sl, r0
 8013b54:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8013b58:	da10      	bge.n	8013b7c <st_int8_avepool+0x130>
 8013b5a:	4432      	add	r2, r6
 8013b5c:	4633      	mov	r3, r6
 8013b5e:	445a      	add	r2, fp
 8013b60:	0419      	lsls	r1, r3, #16
 8013b62:	d406      	bmi.n	8013b72 <st_int8_avepool+0x126>
 8013b64:	b12d      	cbz	r5, 8013b72 <st_int8_avepool+0x126>
 8013b66:	4553      	cmp	r3, sl
 8013b68:	da03      	bge.n	8013b72 <st_int8_avepool+0x126>
 8013b6a:	f992 1000 	ldrsb.w	r1, [r2]
 8013b6e:	3701      	adds	r7, #1
 8013b70:	448c      	add	ip, r1
 8013b72:	3301      	adds	r3, #1
 8013b74:	3201      	adds	r2, #1
 8013b76:	b219      	sxth	r1, r3
 8013b78:	42a1      	cmp	r1, r4
 8013b7a:	dbf1      	blt.n	8013b60 <st_int8_avepool+0x114>
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	b200      	sxth	r0, r0
 8013b80:	4570      	cmp	r0, lr
 8013b82:	dbe1      	blt.n	8013b48 <st_int8_avepool+0xfc>
 8013b84:	9b01      	ldr	r3, [sp, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d140      	bne.n	8013c0c <st_int8_avepool+0x1c0>
 8013b8a:	ee07 ca90 	vmov	s15, ip
 8013b8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013b92:	ee07 7a90 	vmov	s15, r7
 8013b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b9e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013ba2:	eeb0 7a64 	vmov.f32	s14, s9
 8013ba6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013baa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb2:	fe65 7a25 	vselge.f32	s15, s10, s11
 8013bb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bbe:	ee17 3a90 	vmov	r3, s15
 8013bc2:	f303 0307 	ssat	r3, #8, r3
 8013bc6:	9a02      	ldr	r2, [sp, #8]
 8013bc8:	f802 3008 	strb.w	r3, [r2, r8]
 8013bcc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013bce:	9b05      	ldr	r3, [sp, #20]
 8013bd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013bd2:	4403      	add	r3, r0
 8013bd4:	9a03      	ldr	r2, [sp, #12]
 8013bd6:	3101      	adds	r1, #1
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	4402      	add	r2, r0
 8013bdc:	b209      	sxth	r1, r1
 8013bde:	9305      	str	r3, [sp, #20]
 8013be0:	b292      	uxth	r2, r2
 8013be2:	9b04      	ldr	r3, [sp, #16]
 8013be4:	4688      	mov	r8, r1
 8013be6:	9203      	str	r2, [sp, #12]
 8013be8:	428b      	cmp	r3, r1
 8013bea:	dca0      	bgt.n	8013b2e <st_int8_avepool+0xe2>
 8013bec:	9a07      	ldr	r2, [sp, #28]
 8013bee:	9b06      	ldr	r3, [sp, #24]
 8013bf0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013bf2:	3201      	adds	r2, #1
 8013bf4:	440b      	add	r3, r1
 8013bf6:	b212      	sxth	r2, r2
 8013bf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	4291      	cmp	r1, r2
 8013bfe:	9306      	str	r3, [sp, #24]
 8013c00:	4613      	mov	r3, r2
 8013c02:	f73f af76 	bgt.w	8013af2 <st_int8_avepool+0xa6>
 8013c06:	b015      	add	sp, #84	; 0x54
 8013c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0c:	f1bc 0f00 	cmp.w	ip, #0
 8013c10:	db09      	blt.n	8013c26 <st_int8_avepool+0x1da>
 8013c12:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 8013c16:	fbb3 f7f7 	udiv	r7, r3, r7
 8013c1a:	f307 0307 	ssat	r3, #8, r7
 8013c1e:	9a02      	ldr	r2, [sp, #8]
 8013c20:	f802 3008 	strb.w	r3, [r2, r8]
 8013c24:	e7d2      	b.n	8013bcc <st_int8_avepool+0x180>
 8013c26:	2f00      	cmp	r7, #0
 8013c28:	463b      	mov	r3, r7
 8013c2a:	bfb8      	it	lt
 8013c2c:	1c7b      	addlt	r3, r7, #1
 8013c2e:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8013c32:	fb93 f7f7 	sdiv	r7, r3, r7
 8013c36:	e7f0      	b.n	8013c1a <st_int8_avepool+0x1ce>
 8013c38:	9b01      	ldr	r3, [sp, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	f040 80df 	bne.w	8013dfe <st_int8_avepool+0x3b2>
 8013c40:	eef0 7a62 	vmov.f32	s15, s5
 8013c44:	e7ab      	b.n	8013b9e <st_int8_avepool+0x152>
 8013c46:	b293      	uxth	r3, r2
 8013c48:	9307      	str	r3, [sp, #28]
 8013c4a:	e7cf      	b.n	8013bec <st_int8_avepool+0x1a0>
 8013c4c:	befffffc 	.word	0xbefffffc
 8013c50:	7fc00000 	.word	0x7fc00000
 8013c54:	425b      	negs	r3, r3
 8013c56:	2200      	movs	r2, #0
 8013c58:	9904      	ldr	r1, [sp, #16]
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	f8cd b00c 	str.w	fp, [sp, #12]
 8013c60:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8013c4c <st_int8_avepool+0x200>
 8013c64:	46d3      	mov	fp, sl
 8013c66:	9308      	str	r3, [sp, #32]
 8013c68:	46ca      	mov	sl, r9
 8013c6a:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8013c50 <st_int8_avepool+0x204>
 8013c6e:	4613      	mov	r3, r2
 8013c70:	2900      	cmp	r1, #0
 8013c72:	f000 80a3 	beq.w	8013dbc <st_int8_avepool+0x370>
 8013c76:	b292      	uxth	r2, r2
 8013c78:	2100      	movs	r1, #0
 8013c7a:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8013c7e:	920c      	str	r2, [sp, #48]	; 0x30
 8013c80:	9a04      	ldr	r2, [sp, #16]
 8013c82:	fb03 f302 	mul.w	r3, r3, r2
 8013c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c88:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c8a:	4253      	negs	r3, r2
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	9306      	str	r3, [sp, #24]
 8013c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c92:	1a9b      	subs	r3, r3, r2
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	9307      	str	r3, [sp, #28]
 8013c98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	fa0f fe83 	sxth.w	lr, r3
 8013ca2:	b213      	sxth	r3, r2
 8013ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	f1b8 0f00 	cmp.w	r8, #0
 8013cac:	f000 80a4 	beq.w	8013df8 <st_int8_avepool+0x3ac>
 8013cb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013cb2:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 8013cb6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8013cba:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	b28a      	uxth	r2, r1
 8013cc2:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8013cc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8013cc8:	9a02      	ldr	r2, [sp, #8]
 8013cca:	fb08 2303 	mla	r3, r8, r3, r2
 8013cce:	9312      	str	r3, [sp, #72]	; 0x48
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	4699      	mov	r9, r3
 8013cd4:	9305      	str	r3, [sp, #20]
 8013cd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cd8:	4570      	cmp	r0, lr
 8013cda:	f280 8088 	bge.w	8013dee <st_int8_avepool+0x3a2>
 8013cde:	2700      	movs	r7, #0
 8013ce0:	46bc      	mov	ip, r7
 8013ce2:	42ae      	cmp	r6, r5
 8013ce4:	da1a      	bge.n	8013d1c <st_int8_avepool+0x2d0>
 8013ce6:	43c4      	mvns	r4, r0
 8013ce8:	4550      	cmp	r0, sl
 8013cea:	fb0b f300 	mul.w	r3, fp, r0
 8013cee:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8013cf2:	da13      	bge.n	8013d1c <st_int8_avepool+0x2d0>
 8013cf4:	199a      	adds	r2, r3, r6
 8013cf6:	9b03      	ldr	r3, [sp, #12]
 8013cf8:	fb08 9202 	mla	r2, r8, r2, r9
 8013cfc:	441a      	add	r2, r3
 8013cfe:	4633      	mov	r3, r6
 8013d00:	0419      	lsls	r1, r3, #16
 8013d02:	d406      	bmi.n	8013d12 <st_int8_avepool+0x2c6>
 8013d04:	b12c      	cbz	r4, 8013d12 <st_int8_avepool+0x2c6>
 8013d06:	459b      	cmp	fp, r3
 8013d08:	dd03      	ble.n	8013d12 <st_int8_avepool+0x2c6>
 8013d0a:	f992 1000 	ldrsb.w	r1, [r2]
 8013d0e:	3701      	adds	r7, #1
 8013d10:	448c      	add	ip, r1
 8013d12:	3301      	adds	r3, #1
 8013d14:	4442      	add	r2, r8
 8013d16:	b219      	sxth	r1, r3
 8013d18:	42a9      	cmp	r1, r5
 8013d1a:	dbf1      	blt.n	8013d00 <st_int8_avepool+0x2b4>
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	b200      	sxth	r0, r0
 8013d20:	4570      	cmp	r0, lr
 8013d22:	dbde      	blt.n	8013ce2 <st_int8_avepool+0x296>
 8013d24:	9b01      	ldr	r3, [sp, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d14b      	bne.n	8013dc2 <st_int8_avepool+0x376>
 8013d2a:	ee07 ca90 	vmov	s15, ip
 8013d2e:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8013d32:	ee07 7a90 	vmov	s15, r7
 8013d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d3a:	eec2 7a87 	vdiv.f32	s15, s5, s14
 8013d3e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013d42:	eeb0 7a44 	vmov.f32	s14, s8
 8013d46:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013d4a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8013d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d5e:	ee17 3a90 	vmov	r3, s15
 8013d62:	f303 0307 	ssat	r3, #8, r3
 8013d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d68:	f802 3009 	strb.w	r3, [r2, r9]
 8013d6c:	9b05      	ldr	r3, [sp, #20]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	b21b      	sxth	r3, r3
 8013d72:	4543      	cmp	r3, r8
 8013d74:	4699      	mov	r9, r3
 8013d76:	9305      	str	r3, [sp, #20]
 8013d78:	dbad      	blt.n	8013cd6 <st_int8_avepool+0x28a>
 8013d7a:	9a06      	ldr	r2, [sp, #24]
 8013d7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d80:	4402      	add	r2, r0
 8013d82:	9b07      	ldr	r3, [sp, #28]
 8013d84:	3101      	adds	r1, #1
 8013d86:	b292      	uxth	r2, r2
 8013d88:	4403      	add	r3, r0
 8013d8a:	b209      	sxth	r1, r1
 8013d8c:	9206      	str	r2, [sp, #24]
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	9a04      	ldr	r2, [sp, #16]
 8013d92:	9307      	str	r3, [sp, #28]
 8013d94:	460b      	mov	r3, r1
 8013d96:	4291      	cmp	r1, r2
 8013d98:	db86      	blt.n	8013ca8 <st_int8_avepool+0x25c>
 8013d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d9c:	9b08      	ldr	r3, [sp, #32]
 8013d9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013da0:	3201      	adds	r2, #1
 8013da2:	440b      	add	r3, r1
 8013da4:	b212      	sxth	r2, r2
 8013da6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	4291      	cmp	r1, r2
 8013dac:	9308      	str	r3, [sp, #32]
 8013dae:	4613      	mov	r3, r2
 8013db0:	f77f af29 	ble.w	8013c06 <st_int8_avepool+0x1ba>
 8013db4:	9904      	ldr	r1, [sp, #16]
 8013db6:	2900      	cmp	r1, #0
 8013db8:	f47f af5d 	bne.w	8013c76 <st_int8_avepool+0x22a>
 8013dbc:	b293      	uxth	r3, r2
 8013dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8013dc0:	e7eb      	b.n	8013d9a <st_int8_avepool+0x34e>
 8013dc2:	f1bc 0f00 	cmp.w	ip, #0
 8013dc6:	db09      	blt.n	8013ddc <st_int8_avepool+0x390>
 8013dc8:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8013dcc:	fbbc f7f7 	udiv	r7, ip, r7
 8013dd0:	f307 0707 	ssat	r7, #8, r7
 8013dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dd6:	f803 7009 	strb.w	r7, [r3, r9]
 8013dda:	e7c7      	b.n	8013d6c <st_int8_avepool+0x320>
 8013ddc:	2f00      	cmp	r7, #0
 8013dde:	463b      	mov	r3, r7
 8013de0:	bfb8      	it	lt
 8013de2:	1c7b      	addlt	r3, r7, #1
 8013de4:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8013de8:	fb93 f7f7 	sdiv	r7, r3, r7
 8013dec:	e7f0      	b.n	8013dd0 <st_int8_avepool+0x384>
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	b92b      	cbnz	r3, 8013dfe <st_int8_avepool+0x3b2>
 8013df2:	eef0 7a66 	vmov.f32	s15, s13
 8013df6:	e7a2      	b.n	8013d3e <st_int8_avepool+0x2f2>
 8013df8:	b28b      	uxth	r3, r1
 8013dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dfc:	e7bd      	b.n	8013d7a <st_int8_avepool+0x32e>
 8013dfe:	deff      	udf	#255	; 0xff

08013e00 <st_dsp_arm_fill_q15>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	b284      	uxth	r4, r0
 8013e04:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8013e08:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8013e0c:	d013      	beq.n	8013e36 <st_dsp_arm_fill_q15+0x36>
 8013e0e:	f10e 33ff 	add.w	r3, lr, #4294967295
 8013e12:	2b09      	cmp	r3, #9
 8013e14:	460b      	mov	r3, r1
 8013e16:	d919      	bls.n	8013e4c <st_dsp_arm_fill_q15+0x4c>
 8013e18:	f011 0f07 	tst.w	r1, #7
 8013e1c:	d116      	bne.n	8013e4c <st_dsp_arm_fill_q15+0x4c>
 8013e1e:	f04f 0c00 	mov.w	ip, #0
 8013e22:	f10c 0c01 	add.w	ip, ip, #1
 8013e26:	45e6      	cmp	lr, ip
 8013e28:	e9c3 4400 	strd	r4, r4, [r3]
 8013e2c:	f103 0308 	add.w	r3, r3, #8
 8013e30:	d1f7      	bne.n	8013e22 <st_dsp_arm_fill_q15+0x22>
 8013e32:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8013e36:	f012 0203 	ands.w	r2, r2, #3
 8013e3a:	d006      	beq.n	8013e4a <st_dsp_arm_fill_q15+0x4a>
 8013e3c:	3a01      	subs	r2, #1
 8013e3e:	8008      	strh	r0, [r1, #0]
 8013e40:	d003      	beq.n	8013e4a <st_dsp_arm_fill_q15+0x4a>
 8013e42:	2a01      	cmp	r2, #1
 8013e44:	8048      	strh	r0, [r1, #2]
 8013e46:	bf18      	it	ne
 8013e48:	8088      	strhne	r0, [r1, #4]
 8013e4a:	bd10      	pop	{r4, pc}
 8013e4c:	46f4      	mov	ip, lr
 8013e4e:	f1bc 0c01 	subs.w	ip, ip, #1
 8013e52:	601c      	str	r4, [r3, #0]
 8013e54:	605c      	str	r4, [r3, #4]
 8013e56:	f103 0308 	add.w	r3, r3, #8
 8013e5a:	d1f8      	bne.n	8013e4e <st_dsp_arm_fill_q15+0x4e>
 8013e5c:	e7e9      	b.n	8013e32 <st_dsp_arm_fill_q15+0x32>
 8013e5e:	bf00      	nop

08013e60 <ai_version_get>:
 8013e60:	0212      	lsls	r2, r2, #8
 8013e62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013e66:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8013e6a:	4770      	bx	lr

08013e6c <get_tensor_byte_size>:
 8013e6c:	b430      	push	{r4, r5}
 8013e6e:	6985      	ldr	r5, [r0, #24]
 8013e70:	68c4      	ldr	r4, [r0, #12]
 8013e72:	6941      	ldr	r1, [r0, #20]
 8013e74:	4b06      	ldr	r3, [pc, #24]	; (8013e90 <get_tensor_byte_size+0x24>)
 8013e76:	6828      	ldr	r0, [r5, #0]
 8013e78:	4a06      	ldr	r2, [pc, #24]	; (8013e94 <get_tensor_byte_size+0x28>)
 8013e7a:	4003      	ands	r3, r0
 8013e7c:	68c9      	ldr	r1, [r1, #12]
 8013e7e:	68e0      	ldr	r0, [r4, #12]
 8013e80:	4293      	cmp	r3, r2
 8013e82:	fb01 f000 	mul.w	r0, r1, r0
 8013e86:	d101      	bne.n	8013e8c <get_tensor_byte_size+0x20>
 8013e88:	3007      	adds	r0, #7
 8013e8a:	08c0      	lsrs	r0, r0, #3
 8013e8c:	bc30      	pop	{r4, r5}
 8013e8e:	4770      	bx	lr
 8013e90:	017fffff 	.word	0x017fffff
 8013e94:	000400c0 	.word	0x000400c0

08013e98 <ai_array_to_buffer_fmt>:
 8013e98:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8013e9c:	2b02      	cmp	r3, #2
 8013e9e:	d050      	beq.n	8013f42 <ai_array_to_buffer_fmt+0xaa>
 8013ea0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8013ea4:	4b29      	ldr	r3, [pc, #164]	; (8013f4c <ai_array_to_buffer_fmt+0xb4>)
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d00b      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013eaa:	dc1c      	bgt.n	8013ee6 <ai_array_to_buffer_fmt+0x4e>
 8013eac:	4b28      	ldr	r3, [pc, #160]	; (8013f50 <ai_array_to_buffer_fmt+0xb8>)
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d007      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013eb2:	dd0b      	ble.n	8013ecc <ai_array_to_buffer_fmt+0x34>
 8013eb4:	4b27      	ldr	r3, [pc, #156]	; (8013f54 <ai_array_to_buffer_fmt+0xbc>)
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d003      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013eba:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d131      	bne.n	8013f26 <ai_array_to_buffer_fmt+0x8e>
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013ec8:	4318      	orrs	r0, r3
 8013eca:	4770      	bx	lr
 8013ecc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d0f6      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013ed4:	dd2c      	ble.n	8013f30 <ai_array_to_buffer_fmt+0x98>
 8013ed6:	4b20      	ldr	r3, [pc, #128]	; (8013f58 <ai_array_to_buffer_fmt+0xc0>)
 8013ed8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013edc:	429a      	cmp	r2, r3
 8013ede:	bf18      	it	ne
 8013ee0:	2340      	movne	r3, #64	; 0x40
 8013ee2:	4318      	orrs	r0, r3
 8013ee4:	4770      	bx	lr
 8013ee6:	4b1d      	ldr	r3, [pc, #116]	; (8013f5c <ai_array_to_buffer_fmt+0xc4>)
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d0ea      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013eec:	dd0e      	ble.n	8013f0c <ai_array_to_buffer_fmt+0x74>
 8013eee:	4b1c      	ldr	r3, [pc, #112]	; (8013f60 <ai_array_to_buffer_fmt+0xc8>)
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d0e6      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013ef4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d0e2      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013efc:	4b19      	ldr	r3, [pc, #100]	; (8013f64 <ai_array_to_buffer_fmt+0xcc>)
 8013efe:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013f02:	429a      	cmp	r2, r3
 8013f04:	bf18      	it	ne
 8013f06:	2340      	movne	r3, #64	; 0x40
 8013f08:	4318      	orrs	r0, r3
 8013f0a:	4770      	bx	lr
 8013f0c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d0d6      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013f14:	3307      	adds	r3, #7
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d0d3      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013f1a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	bf18      	it	ne
 8013f22:	2340      	movne	r3, #64	; 0x40
 8013f24:	e7ce      	b.n	8013ec4 <ai_array_to_buffer_fmt+0x2c>
 8013f26:	4b10      	ldr	r3, [pc, #64]	; (8013f68 <ai_array_to_buffer_fmt+0xd0>)
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	bf18      	it	ne
 8013f2c:	2340      	movne	r3, #64	; 0x40
 8013f2e:	e7c9      	b.n	8013ec4 <ai_array_to_buffer_fmt+0x2c>
 8013f30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d0c4      	beq.n	8013ec2 <ai_array_to_buffer_fmt+0x2a>
 8013f38:	3380      	adds	r3, #128	; 0x80
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	bf18      	it	ne
 8013f3e:	2340      	movne	r3, #64	; 0x40
 8013f40:	e7c0      	b.n	8013ec4 <ai_array_to_buffer_fmt+0x2c>
 8013f42:	4b0a      	ldr	r3, [pc, #40]	; (8013f6c <ai_array_to_buffer_fmt+0xd4>)
 8013f44:	4003      	ands	r3, r0
 8013f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013f4a:	e7bb      	b.n	8013ec4 <ai_array_to_buffer_fmt+0x2c>
 8013f4c:	00840040 	.word	0x00840040
 8013f50:	00040840 	.word	0x00040840
 8013f54:	00041040 	.word	0x00041040
 8013f58:	00040447 	.word	0x00040447
 8013f5c:	00840840 	.word	0x00840840
 8013f60:	00841040 	.word	0x00841040
 8013f64:	0084084f 	.word	0x0084084f
 8013f68:	0004084f 	.word	0x0004084f
 8013f6c:	00803fff 	.word	0x00803fff

08013f70 <ai_array_get_byte_size>:
 8013f70:	b319      	cbz	r1, 8013fba <ai_array_get_byte_size+0x4a>
 8013f72:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013f76:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8013f7a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8013f7e:	11c0      	asrs	r0, r0, #7
 8013f80:	fb03 f101 	mul.w	r1, r3, r1
 8013f84:	2a04      	cmp	r2, #4
 8013f86:	f101 0107 	add.w	r1, r1, #7
 8013f8a:	f021 0107 	bic.w	r1, r1, #7
 8013f8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8013f92:	d00b      	beq.n	8013fac <ai_array_get_byte_size+0x3c>
 8013f94:	2a08      	cmp	r2, #8
 8013f96:	d002      	beq.n	8013f9e <ai_array_get_byte_size+0x2e>
 8013f98:	3107      	adds	r1, #7
 8013f9a:	08c8      	lsrs	r0, r1, #3
 8013f9c:	4770      	bx	lr
 8013f9e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013fa2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8013fa6:	3107      	adds	r1, #7
 8013fa8:	08c8      	lsrs	r0, r1, #3
 8013faa:	4770      	bx	lr
 8013fac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013fb0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8013fb4:	3107      	adds	r1, #7
 8013fb6:	08c8      	lsrs	r0, r1, #3
 8013fb8:	4770      	bx	lr
 8013fba:	4608      	mov	r0, r1
 8013fbc:	4770      	bx	lr
 8013fbe:	bf00      	nop

08013fc0 <ai_array_get_data_byte_size>:
 8013fc0:	b161      	cbz	r1, 8013fdc <ai_array_get_data_byte_size+0x1c>
 8013fc2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013fc6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8013fca:	fb03 f101 	mul.w	r1, r3, r1
 8013fce:	1dc8      	adds	r0, r1, #7
 8013fd0:	f020 0007 	bic.w	r0, r0, #7
 8013fd4:	40d0      	lsrs	r0, r2
 8013fd6:	3007      	adds	r0, #7
 8013fd8:	08c0      	lsrs	r0, r0, #3
 8013fda:	4770      	bx	lr
 8013fdc:	4608      	mov	r0, r1
 8013fde:	4770      	bx	lr

08013fe0 <core_tensor_clone>:
 8013fe0:	680b      	ldr	r3, [r1, #0]
 8013fe2:	6882      	ldr	r2, [r0, #8]
 8013fe4:	6003      	str	r3, [r0, #0]
 8013fe6:	684b      	ldr	r3, [r1, #4]
 8013fe8:	6043      	str	r3, [r0, #4]
 8013fea:	698b      	ldr	r3, [r1, #24]
 8013fec:	6183      	str	r3, [r0, #24]
 8013fee:	688b      	ldr	r3, [r1, #8]
 8013ff0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013ff4:	f363 221f 	bfi	r2, r3, #8, #24
 8013ff8:	b410      	push	{r4}
 8013ffa:	6082      	str	r2, [r0, #8]
 8013ffc:	b15b      	cbz	r3, 8014016 <core_tensor_clone+0x36>
 8013ffe:	2300      	movs	r3, #0
 8014000:	68cc      	ldr	r4, [r1, #12]
 8014002:	68c2      	ldr	r2, [r0, #12]
 8014004:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8014008:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801400c:	3301      	adds	r3, #1
 801400e:	6882      	ldr	r2, [r0, #8]
 8014010:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8014014:	d3f4      	bcc.n	8014000 <core_tensor_clone+0x20>
 8014016:	690b      	ldr	r3, [r1, #16]
 8014018:	6902      	ldr	r2, [r0, #16]
 801401a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801401e:	f363 221f 	bfi	r2, r3, #8, #24
 8014022:	6102      	str	r2, [r0, #16]
 8014024:	b15b      	cbz	r3, 801403e <core_tensor_clone+0x5e>
 8014026:	2300      	movs	r3, #0
 8014028:	694c      	ldr	r4, [r1, #20]
 801402a:	6942      	ldr	r2, [r0, #20]
 801402c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8014030:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8014034:	3301      	adds	r3, #1
 8014036:	6902      	ldr	r2, [r0, #16]
 8014038:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 801403c:	d3f4      	bcc.n	8014028 <core_tensor_clone+0x48>
 801403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014042:	4770      	bx	lr

08014044 <core_array_clone>:
 8014044:	4684      	mov	ip, r0
 8014046:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014048:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop

08014050 <__errno>:
 8014050:	4b01      	ldr	r3, [pc, #4]	; (8014058 <__errno+0x8>)
 8014052:	6818      	ldr	r0, [r3, #0]
 8014054:	4770      	bx	lr
 8014056:	bf00      	nop
 8014058:	2000134c 	.word	0x2000134c

0801405c <__libc_init_array>:
 801405c:	b570      	push	{r4, r5, r6, lr}
 801405e:	4d0d      	ldr	r5, [pc, #52]	; (8014094 <__libc_init_array+0x38>)
 8014060:	4c0d      	ldr	r4, [pc, #52]	; (8014098 <__libc_init_array+0x3c>)
 8014062:	1b64      	subs	r4, r4, r5
 8014064:	10a4      	asrs	r4, r4, #2
 8014066:	2600      	movs	r6, #0
 8014068:	42a6      	cmp	r6, r4
 801406a:	d109      	bne.n	8014080 <__libc_init_array+0x24>
 801406c:	4d0b      	ldr	r5, [pc, #44]	; (801409c <__libc_init_array+0x40>)
 801406e:	4c0c      	ldr	r4, [pc, #48]	; (80140a0 <__libc_init_array+0x44>)
 8014070:	f002 ff32 	bl	8016ed8 <_init>
 8014074:	1b64      	subs	r4, r4, r5
 8014076:	10a4      	asrs	r4, r4, #2
 8014078:	2600      	movs	r6, #0
 801407a:	42a6      	cmp	r6, r4
 801407c:	d105      	bne.n	801408a <__libc_init_array+0x2e>
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	f855 3b04 	ldr.w	r3, [r5], #4
 8014084:	4798      	blx	r3
 8014086:	3601      	adds	r6, #1
 8014088:	e7ee      	b.n	8014068 <__libc_init_array+0xc>
 801408a:	f855 3b04 	ldr.w	r3, [r5], #4
 801408e:	4798      	blx	r3
 8014090:	3601      	adds	r6, #1
 8014092:	e7f2      	b.n	801407a <__libc_init_array+0x1e>
 8014094:	08018dcc 	.word	0x08018dcc
 8014098:	08018dcc 	.word	0x08018dcc
 801409c:	08018dcc 	.word	0x08018dcc
 80140a0:	08018dd0 	.word	0x08018dd0

080140a4 <malloc>:
 80140a4:	4b02      	ldr	r3, [pc, #8]	; (80140b0 <malloc+0xc>)
 80140a6:	4601      	mov	r1, r0
 80140a8:	6818      	ldr	r0, [r3, #0]
 80140aa:	f000 b8a7 	b.w	80141fc <_malloc_r>
 80140ae:	bf00      	nop
 80140b0:	2000134c 	.word	0x2000134c

080140b4 <free>:
 80140b4:	4b02      	ldr	r3, [pc, #8]	; (80140c0 <free+0xc>)
 80140b6:	4601      	mov	r1, r0
 80140b8:	6818      	ldr	r0, [r3, #0]
 80140ba:	f000 b833 	b.w	8014124 <_free_r>
 80140be:	bf00      	nop
 80140c0:	2000134c 	.word	0x2000134c

080140c4 <memcpy>:
 80140c4:	440a      	add	r2, r1
 80140c6:	4291      	cmp	r1, r2
 80140c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80140cc:	d100      	bne.n	80140d0 <memcpy+0xc>
 80140ce:	4770      	bx	lr
 80140d0:	b510      	push	{r4, lr}
 80140d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140da:	4291      	cmp	r1, r2
 80140dc:	d1f9      	bne.n	80140d2 <memcpy+0xe>
 80140de:	bd10      	pop	{r4, pc}

080140e0 <memmove>:
 80140e0:	4288      	cmp	r0, r1
 80140e2:	b510      	push	{r4, lr}
 80140e4:	eb01 0402 	add.w	r4, r1, r2
 80140e8:	d902      	bls.n	80140f0 <memmove+0x10>
 80140ea:	4284      	cmp	r4, r0
 80140ec:	4623      	mov	r3, r4
 80140ee:	d807      	bhi.n	8014100 <memmove+0x20>
 80140f0:	1e43      	subs	r3, r0, #1
 80140f2:	42a1      	cmp	r1, r4
 80140f4:	d008      	beq.n	8014108 <memmove+0x28>
 80140f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140fe:	e7f8      	b.n	80140f2 <memmove+0x12>
 8014100:	4402      	add	r2, r0
 8014102:	4601      	mov	r1, r0
 8014104:	428a      	cmp	r2, r1
 8014106:	d100      	bne.n	801410a <memmove+0x2a>
 8014108:	bd10      	pop	{r4, pc}
 801410a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801410e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014112:	e7f7      	b.n	8014104 <memmove+0x24>

08014114 <memset>:
 8014114:	4402      	add	r2, r0
 8014116:	4603      	mov	r3, r0
 8014118:	4293      	cmp	r3, r2
 801411a:	d100      	bne.n	801411e <memset+0xa>
 801411c:	4770      	bx	lr
 801411e:	f803 1b01 	strb.w	r1, [r3], #1
 8014122:	e7f9      	b.n	8014118 <memset+0x4>

08014124 <_free_r>:
 8014124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014126:	2900      	cmp	r1, #0
 8014128:	d044      	beq.n	80141b4 <_free_r+0x90>
 801412a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801412e:	9001      	str	r0, [sp, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	f1a1 0404 	sub.w	r4, r1, #4
 8014136:	bfb8      	it	lt
 8014138:	18e4      	addlt	r4, r4, r3
 801413a:	f001 feb3 	bl	8015ea4 <__malloc_lock>
 801413e:	4a1e      	ldr	r2, [pc, #120]	; (80141b8 <_free_r+0x94>)
 8014140:	9801      	ldr	r0, [sp, #4]
 8014142:	6813      	ldr	r3, [r2, #0]
 8014144:	b933      	cbnz	r3, 8014154 <_free_r+0x30>
 8014146:	6063      	str	r3, [r4, #4]
 8014148:	6014      	str	r4, [r2, #0]
 801414a:	b003      	add	sp, #12
 801414c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014150:	f001 beae 	b.w	8015eb0 <__malloc_unlock>
 8014154:	42a3      	cmp	r3, r4
 8014156:	d908      	bls.n	801416a <_free_r+0x46>
 8014158:	6825      	ldr	r5, [r4, #0]
 801415a:	1961      	adds	r1, r4, r5
 801415c:	428b      	cmp	r3, r1
 801415e:	bf01      	itttt	eq
 8014160:	6819      	ldreq	r1, [r3, #0]
 8014162:	685b      	ldreq	r3, [r3, #4]
 8014164:	1949      	addeq	r1, r1, r5
 8014166:	6021      	streq	r1, [r4, #0]
 8014168:	e7ed      	b.n	8014146 <_free_r+0x22>
 801416a:	461a      	mov	r2, r3
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	b10b      	cbz	r3, 8014174 <_free_r+0x50>
 8014170:	42a3      	cmp	r3, r4
 8014172:	d9fa      	bls.n	801416a <_free_r+0x46>
 8014174:	6811      	ldr	r1, [r2, #0]
 8014176:	1855      	adds	r5, r2, r1
 8014178:	42a5      	cmp	r5, r4
 801417a:	d10b      	bne.n	8014194 <_free_r+0x70>
 801417c:	6824      	ldr	r4, [r4, #0]
 801417e:	4421      	add	r1, r4
 8014180:	1854      	adds	r4, r2, r1
 8014182:	42a3      	cmp	r3, r4
 8014184:	6011      	str	r1, [r2, #0]
 8014186:	d1e0      	bne.n	801414a <_free_r+0x26>
 8014188:	681c      	ldr	r4, [r3, #0]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	6053      	str	r3, [r2, #4]
 801418e:	4421      	add	r1, r4
 8014190:	6011      	str	r1, [r2, #0]
 8014192:	e7da      	b.n	801414a <_free_r+0x26>
 8014194:	d902      	bls.n	801419c <_free_r+0x78>
 8014196:	230c      	movs	r3, #12
 8014198:	6003      	str	r3, [r0, #0]
 801419a:	e7d6      	b.n	801414a <_free_r+0x26>
 801419c:	6825      	ldr	r5, [r4, #0]
 801419e:	1961      	adds	r1, r4, r5
 80141a0:	428b      	cmp	r3, r1
 80141a2:	bf04      	itt	eq
 80141a4:	6819      	ldreq	r1, [r3, #0]
 80141a6:	685b      	ldreq	r3, [r3, #4]
 80141a8:	6063      	str	r3, [r4, #4]
 80141aa:	bf04      	itt	eq
 80141ac:	1949      	addeq	r1, r1, r5
 80141ae:	6021      	streq	r1, [r4, #0]
 80141b0:	6054      	str	r4, [r2, #4]
 80141b2:	e7ca      	b.n	801414a <_free_r+0x26>
 80141b4:	b003      	add	sp, #12
 80141b6:	bd30      	pop	{r4, r5, pc}
 80141b8:	20001a90 	.word	0x20001a90

080141bc <sbrk_aligned>:
 80141bc:	b570      	push	{r4, r5, r6, lr}
 80141be:	4e0e      	ldr	r6, [pc, #56]	; (80141f8 <sbrk_aligned+0x3c>)
 80141c0:	460c      	mov	r4, r1
 80141c2:	6831      	ldr	r1, [r6, #0]
 80141c4:	4605      	mov	r5, r0
 80141c6:	b911      	cbnz	r1, 80141ce <sbrk_aligned+0x12>
 80141c8:	f000 fd5e 	bl	8014c88 <_sbrk_r>
 80141cc:	6030      	str	r0, [r6, #0]
 80141ce:	4621      	mov	r1, r4
 80141d0:	4628      	mov	r0, r5
 80141d2:	f000 fd59 	bl	8014c88 <_sbrk_r>
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	d00a      	beq.n	80141f0 <sbrk_aligned+0x34>
 80141da:	1cc4      	adds	r4, r0, #3
 80141dc:	f024 0403 	bic.w	r4, r4, #3
 80141e0:	42a0      	cmp	r0, r4
 80141e2:	d007      	beq.n	80141f4 <sbrk_aligned+0x38>
 80141e4:	1a21      	subs	r1, r4, r0
 80141e6:	4628      	mov	r0, r5
 80141e8:	f000 fd4e 	bl	8014c88 <_sbrk_r>
 80141ec:	3001      	adds	r0, #1
 80141ee:	d101      	bne.n	80141f4 <sbrk_aligned+0x38>
 80141f0:	f04f 34ff 	mov.w	r4, #4294967295
 80141f4:	4620      	mov	r0, r4
 80141f6:	bd70      	pop	{r4, r5, r6, pc}
 80141f8:	20001a94 	.word	0x20001a94

080141fc <_malloc_r>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	1ccd      	adds	r5, r1, #3
 8014202:	f025 0503 	bic.w	r5, r5, #3
 8014206:	3508      	adds	r5, #8
 8014208:	2d0c      	cmp	r5, #12
 801420a:	bf38      	it	cc
 801420c:	250c      	movcc	r5, #12
 801420e:	2d00      	cmp	r5, #0
 8014210:	4607      	mov	r7, r0
 8014212:	db01      	blt.n	8014218 <_malloc_r+0x1c>
 8014214:	42a9      	cmp	r1, r5
 8014216:	d905      	bls.n	8014224 <_malloc_r+0x28>
 8014218:	230c      	movs	r3, #12
 801421a:	603b      	str	r3, [r7, #0]
 801421c:	2600      	movs	r6, #0
 801421e:	4630      	mov	r0, r6
 8014220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014224:	4e2e      	ldr	r6, [pc, #184]	; (80142e0 <_malloc_r+0xe4>)
 8014226:	f001 fe3d 	bl	8015ea4 <__malloc_lock>
 801422a:	6833      	ldr	r3, [r6, #0]
 801422c:	461c      	mov	r4, r3
 801422e:	bb34      	cbnz	r4, 801427e <_malloc_r+0x82>
 8014230:	4629      	mov	r1, r5
 8014232:	4638      	mov	r0, r7
 8014234:	f7ff ffc2 	bl	80141bc <sbrk_aligned>
 8014238:	1c43      	adds	r3, r0, #1
 801423a:	4604      	mov	r4, r0
 801423c:	d14d      	bne.n	80142da <_malloc_r+0xde>
 801423e:	6834      	ldr	r4, [r6, #0]
 8014240:	4626      	mov	r6, r4
 8014242:	2e00      	cmp	r6, #0
 8014244:	d140      	bne.n	80142c8 <_malloc_r+0xcc>
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	4631      	mov	r1, r6
 801424a:	4638      	mov	r0, r7
 801424c:	eb04 0803 	add.w	r8, r4, r3
 8014250:	f000 fd1a 	bl	8014c88 <_sbrk_r>
 8014254:	4580      	cmp	r8, r0
 8014256:	d13a      	bne.n	80142ce <_malloc_r+0xd2>
 8014258:	6821      	ldr	r1, [r4, #0]
 801425a:	3503      	adds	r5, #3
 801425c:	1a6d      	subs	r5, r5, r1
 801425e:	f025 0503 	bic.w	r5, r5, #3
 8014262:	3508      	adds	r5, #8
 8014264:	2d0c      	cmp	r5, #12
 8014266:	bf38      	it	cc
 8014268:	250c      	movcc	r5, #12
 801426a:	4629      	mov	r1, r5
 801426c:	4638      	mov	r0, r7
 801426e:	f7ff ffa5 	bl	80141bc <sbrk_aligned>
 8014272:	3001      	adds	r0, #1
 8014274:	d02b      	beq.n	80142ce <_malloc_r+0xd2>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	442b      	add	r3, r5
 801427a:	6023      	str	r3, [r4, #0]
 801427c:	e00e      	b.n	801429c <_malloc_r+0xa0>
 801427e:	6822      	ldr	r2, [r4, #0]
 8014280:	1b52      	subs	r2, r2, r5
 8014282:	d41e      	bmi.n	80142c2 <_malloc_r+0xc6>
 8014284:	2a0b      	cmp	r2, #11
 8014286:	d916      	bls.n	80142b6 <_malloc_r+0xba>
 8014288:	1961      	adds	r1, r4, r5
 801428a:	42a3      	cmp	r3, r4
 801428c:	6025      	str	r5, [r4, #0]
 801428e:	bf18      	it	ne
 8014290:	6059      	strne	r1, [r3, #4]
 8014292:	6863      	ldr	r3, [r4, #4]
 8014294:	bf08      	it	eq
 8014296:	6031      	streq	r1, [r6, #0]
 8014298:	5162      	str	r2, [r4, r5]
 801429a:	604b      	str	r3, [r1, #4]
 801429c:	4638      	mov	r0, r7
 801429e:	f104 060b 	add.w	r6, r4, #11
 80142a2:	f001 fe05 	bl	8015eb0 <__malloc_unlock>
 80142a6:	f026 0607 	bic.w	r6, r6, #7
 80142aa:	1d23      	adds	r3, r4, #4
 80142ac:	1af2      	subs	r2, r6, r3
 80142ae:	d0b6      	beq.n	801421e <_malloc_r+0x22>
 80142b0:	1b9b      	subs	r3, r3, r6
 80142b2:	50a3      	str	r3, [r4, r2]
 80142b4:	e7b3      	b.n	801421e <_malloc_r+0x22>
 80142b6:	6862      	ldr	r2, [r4, #4]
 80142b8:	42a3      	cmp	r3, r4
 80142ba:	bf0c      	ite	eq
 80142bc:	6032      	streq	r2, [r6, #0]
 80142be:	605a      	strne	r2, [r3, #4]
 80142c0:	e7ec      	b.n	801429c <_malloc_r+0xa0>
 80142c2:	4623      	mov	r3, r4
 80142c4:	6864      	ldr	r4, [r4, #4]
 80142c6:	e7b2      	b.n	801422e <_malloc_r+0x32>
 80142c8:	4634      	mov	r4, r6
 80142ca:	6876      	ldr	r6, [r6, #4]
 80142cc:	e7b9      	b.n	8014242 <_malloc_r+0x46>
 80142ce:	230c      	movs	r3, #12
 80142d0:	603b      	str	r3, [r7, #0]
 80142d2:	4638      	mov	r0, r7
 80142d4:	f001 fdec 	bl	8015eb0 <__malloc_unlock>
 80142d8:	e7a1      	b.n	801421e <_malloc_r+0x22>
 80142da:	6025      	str	r5, [r4, #0]
 80142dc:	e7de      	b.n	801429c <_malloc_r+0xa0>
 80142de:	bf00      	nop
 80142e0:	20001a90 	.word	0x20001a90

080142e4 <__cvt>:
 80142e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142e6:	ed2d 8b02 	vpush	{d8}
 80142ea:	eeb0 8b40 	vmov.f64	d8, d0
 80142ee:	b085      	sub	sp, #20
 80142f0:	4617      	mov	r7, r2
 80142f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80142f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80142f6:	ee18 2a90 	vmov	r2, s17
 80142fa:	f025 0520 	bic.w	r5, r5, #32
 80142fe:	2a00      	cmp	r2, #0
 8014300:	bfb6      	itet	lt
 8014302:	222d      	movlt	r2, #45	; 0x2d
 8014304:	2200      	movge	r2, #0
 8014306:	eeb1 8b40 	vneglt.f64	d8, d0
 801430a:	2d46      	cmp	r5, #70	; 0x46
 801430c:	460c      	mov	r4, r1
 801430e:	701a      	strb	r2, [r3, #0]
 8014310:	d004      	beq.n	801431c <__cvt+0x38>
 8014312:	2d45      	cmp	r5, #69	; 0x45
 8014314:	d100      	bne.n	8014318 <__cvt+0x34>
 8014316:	3401      	adds	r4, #1
 8014318:	2102      	movs	r1, #2
 801431a:	e000      	b.n	801431e <__cvt+0x3a>
 801431c:	2103      	movs	r1, #3
 801431e:	ab03      	add	r3, sp, #12
 8014320:	9301      	str	r3, [sp, #4]
 8014322:	ab02      	add	r3, sp, #8
 8014324:	9300      	str	r3, [sp, #0]
 8014326:	4622      	mov	r2, r4
 8014328:	4633      	mov	r3, r6
 801432a:	eeb0 0b48 	vmov.f64	d0, d8
 801432e:	f000 fe27 	bl	8014f80 <_dtoa_r>
 8014332:	2d47      	cmp	r5, #71	; 0x47
 8014334:	d101      	bne.n	801433a <__cvt+0x56>
 8014336:	07fb      	lsls	r3, r7, #31
 8014338:	d51a      	bpl.n	8014370 <__cvt+0x8c>
 801433a:	2d46      	cmp	r5, #70	; 0x46
 801433c:	eb00 0204 	add.w	r2, r0, r4
 8014340:	d10c      	bne.n	801435c <__cvt+0x78>
 8014342:	7803      	ldrb	r3, [r0, #0]
 8014344:	2b30      	cmp	r3, #48	; 0x30
 8014346:	d107      	bne.n	8014358 <__cvt+0x74>
 8014348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014350:	bf1c      	itt	ne
 8014352:	f1c4 0401 	rsbne	r4, r4, #1
 8014356:	6034      	strne	r4, [r6, #0]
 8014358:	6833      	ldr	r3, [r6, #0]
 801435a:	441a      	add	r2, r3
 801435c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014364:	bf08      	it	eq
 8014366:	9203      	streq	r2, [sp, #12]
 8014368:	2130      	movs	r1, #48	; 0x30
 801436a:	9b03      	ldr	r3, [sp, #12]
 801436c:	4293      	cmp	r3, r2
 801436e:	d307      	bcc.n	8014380 <__cvt+0x9c>
 8014370:	9b03      	ldr	r3, [sp, #12]
 8014372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014374:	1a1b      	subs	r3, r3, r0
 8014376:	6013      	str	r3, [r2, #0]
 8014378:	b005      	add	sp, #20
 801437a:	ecbd 8b02 	vpop	{d8}
 801437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014380:	1c5c      	adds	r4, r3, #1
 8014382:	9403      	str	r4, [sp, #12]
 8014384:	7019      	strb	r1, [r3, #0]
 8014386:	e7f0      	b.n	801436a <__cvt+0x86>

08014388 <__exponent>:
 8014388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801438a:	4603      	mov	r3, r0
 801438c:	2900      	cmp	r1, #0
 801438e:	bfb8      	it	lt
 8014390:	4249      	neglt	r1, r1
 8014392:	f803 2b02 	strb.w	r2, [r3], #2
 8014396:	bfb4      	ite	lt
 8014398:	222d      	movlt	r2, #45	; 0x2d
 801439a:	222b      	movge	r2, #43	; 0x2b
 801439c:	2909      	cmp	r1, #9
 801439e:	7042      	strb	r2, [r0, #1]
 80143a0:	dd2a      	ble.n	80143f8 <__exponent+0x70>
 80143a2:	f10d 0407 	add.w	r4, sp, #7
 80143a6:	46a4      	mov	ip, r4
 80143a8:	270a      	movs	r7, #10
 80143aa:	46a6      	mov	lr, r4
 80143ac:	460a      	mov	r2, r1
 80143ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80143b2:	fb07 1516 	mls	r5, r7, r6, r1
 80143b6:	3530      	adds	r5, #48	; 0x30
 80143b8:	2a63      	cmp	r2, #99	; 0x63
 80143ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80143be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80143c2:	4631      	mov	r1, r6
 80143c4:	dcf1      	bgt.n	80143aa <__exponent+0x22>
 80143c6:	3130      	adds	r1, #48	; 0x30
 80143c8:	f1ae 0502 	sub.w	r5, lr, #2
 80143cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80143d0:	1c44      	adds	r4, r0, #1
 80143d2:	4629      	mov	r1, r5
 80143d4:	4561      	cmp	r1, ip
 80143d6:	d30a      	bcc.n	80143ee <__exponent+0x66>
 80143d8:	f10d 0209 	add.w	r2, sp, #9
 80143dc:	eba2 020e 	sub.w	r2, r2, lr
 80143e0:	4565      	cmp	r5, ip
 80143e2:	bf88      	it	hi
 80143e4:	2200      	movhi	r2, #0
 80143e6:	4413      	add	r3, r2
 80143e8:	1a18      	subs	r0, r3, r0
 80143ea:	b003      	add	sp, #12
 80143ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80143f6:	e7ed      	b.n	80143d4 <__exponent+0x4c>
 80143f8:	2330      	movs	r3, #48	; 0x30
 80143fa:	3130      	adds	r1, #48	; 0x30
 80143fc:	7083      	strb	r3, [r0, #2]
 80143fe:	70c1      	strb	r1, [r0, #3]
 8014400:	1d03      	adds	r3, r0, #4
 8014402:	e7f1      	b.n	80143e8 <__exponent+0x60>
 8014404:	0000      	movs	r0, r0
	...

08014408 <_printf_float>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	b08b      	sub	sp, #44	; 0x2c
 801440e:	460c      	mov	r4, r1
 8014410:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014414:	4616      	mov	r6, r2
 8014416:	461f      	mov	r7, r3
 8014418:	4605      	mov	r5, r0
 801441a:	f001 fcd7 	bl	8015dcc <_localeconv_r>
 801441e:	f8d0 b000 	ldr.w	fp, [r0]
 8014422:	4658      	mov	r0, fp
 8014424:	f7eb ff0c 	bl	8000240 <strlen>
 8014428:	2300      	movs	r3, #0
 801442a:	9308      	str	r3, [sp, #32]
 801442c:	f8d8 3000 	ldr.w	r3, [r8]
 8014430:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014434:	6822      	ldr	r2, [r4, #0]
 8014436:	3307      	adds	r3, #7
 8014438:	f023 0307 	bic.w	r3, r3, #7
 801443c:	f103 0108 	add.w	r1, r3, #8
 8014440:	f8c8 1000 	str.w	r1, [r8]
 8014444:	4682      	mov	sl, r0
 8014446:	e9d3 0100 	ldrd	r0, r1, [r3]
 801444a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801444e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80146b0 <_printf_float+0x2a8>
 8014452:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014456:	eeb0 6bc0 	vabs.f64	d6, d0
 801445a:	eeb4 6b47 	vcmp.f64	d6, d7
 801445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014462:	dd24      	ble.n	80144ae <_printf_float+0xa6>
 8014464:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446c:	d502      	bpl.n	8014474 <_printf_float+0x6c>
 801446e:	232d      	movs	r3, #45	; 0x2d
 8014470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014474:	4b90      	ldr	r3, [pc, #576]	; (80146b8 <_printf_float+0x2b0>)
 8014476:	4891      	ldr	r0, [pc, #580]	; (80146bc <_printf_float+0x2b4>)
 8014478:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801447c:	bf94      	ite	ls
 801447e:	4698      	movls	r8, r3
 8014480:	4680      	movhi	r8, r0
 8014482:	2303      	movs	r3, #3
 8014484:	6123      	str	r3, [r4, #16]
 8014486:	f022 0204 	bic.w	r2, r2, #4
 801448a:	2300      	movs	r3, #0
 801448c:	6022      	str	r2, [r4, #0]
 801448e:	9304      	str	r3, [sp, #16]
 8014490:	9700      	str	r7, [sp, #0]
 8014492:	4633      	mov	r3, r6
 8014494:	aa09      	add	r2, sp, #36	; 0x24
 8014496:	4621      	mov	r1, r4
 8014498:	4628      	mov	r0, r5
 801449a:	f000 f9d3 	bl	8014844 <_printf_common>
 801449e:	3001      	adds	r0, #1
 80144a0:	f040 808a 	bne.w	80145b8 <_printf_float+0x1b0>
 80144a4:	f04f 30ff 	mov.w	r0, #4294967295
 80144a8:	b00b      	add	sp, #44	; 0x2c
 80144aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80144b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b6:	d709      	bvc.n	80144cc <_printf_float+0xc4>
 80144b8:	ee10 3a90 	vmov	r3, s1
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bfbc      	itt	lt
 80144c0:	232d      	movlt	r3, #45	; 0x2d
 80144c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80144c6:	487e      	ldr	r0, [pc, #504]	; (80146c0 <_printf_float+0x2b8>)
 80144c8:	4b7e      	ldr	r3, [pc, #504]	; (80146c4 <_printf_float+0x2bc>)
 80144ca:	e7d5      	b.n	8014478 <_printf_float+0x70>
 80144cc:	6863      	ldr	r3, [r4, #4]
 80144ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80144d2:	9104      	str	r1, [sp, #16]
 80144d4:	1c59      	adds	r1, r3, #1
 80144d6:	d13c      	bne.n	8014552 <_printf_float+0x14a>
 80144d8:	2306      	movs	r3, #6
 80144da:	6063      	str	r3, [r4, #4]
 80144dc:	2300      	movs	r3, #0
 80144de:	9303      	str	r3, [sp, #12]
 80144e0:	ab08      	add	r3, sp, #32
 80144e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80144e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80144ea:	ab07      	add	r3, sp, #28
 80144ec:	6861      	ldr	r1, [r4, #4]
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	6022      	str	r2, [r4, #0]
 80144f2:	f10d 031b 	add.w	r3, sp, #27
 80144f6:	4628      	mov	r0, r5
 80144f8:	f7ff fef4 	bl	80142e4 <__cvt>
 80144fc:	9b04      	ldr	r3, [sp, #16]
 80144fe:	9907      	ldr	r1, [sp, #28]
 8014500:	2b47      	cmp	r3, #71	; 0x47
 8014502:	4680      	mov	r8, r0
 8014504:	d108      	bne.n	8014518 <_printf_float+0x110>
 8014506:	1cc8      	adds	r0, r1, #3
 8014508:	db02      	blt.n	8014510 <_printf_float+0x108>
 801450a:	6863      	ldr	r3, [r4, #4]
 801450c:	4299      	cmp	r1, r3
 801450e:	dd41      	ble.n	8014594 <_printf_float+0x18c>
 8014510:	f1a9 0902 	sub.w	r9, r9, #2
 8014514:	fa5f f989 	uxtb.w	r9, r9
 8014518:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801451c:	d820      	bhi.n	8014560 <_printf_float+0x158>
 801451e:	3901      	subs	r1, #1
 8014520:	464a      	mov	r2, r9
 8014522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014526:	9107      	str	r1, [sp, #28]
 8014528:	f7ff ff2e 	bl	8014388 <__exponent>
 801452c:	9a08      	ldr	r2, [sp, #32]
 801452e:	9004      	str	r0, [sp, #16]
 8014530:	1813      	adds	r3, r2, r0
 8014532:	2a01      	cmp	r2, #1
 8014534:	6123      	str	r3, [r4, #16]
 8014536:	dc02      	bgt.n	801453e <_printf_float+0x136>
 8014538:	6822      	ldr	r2, [r4, #0]
 801453a:	07d2      	lsls	r2, r2, #31
 801453c:	d501      	bpl.n	8014542 <_printf_float+0x13a>
 801453e:	3301      	adds	r3, #1
 8014540:	6123      	str	r3, [r4, #16]
 8014542:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d0a2      	beq.n	8014490 <_printf_float+0x88>
 801454a:	232d      	movs	r3, #45	; 0x2d
 801454c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014550:	e79e      	b.n	8014490 <_printf_float+0x88>
 8014552:	9904      	ldr	r1, [sp, #16]
 8014554:	2947      	cmp	r1, #71	; 0x47
 8014556:	d1c1      	bne.n	80144dc <_printf_float+0xd4>
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1bf      	bne.n	80144dc <_printf_float+0xd4>
 801455c:	2301      	movs	r3, #1
 801455e:	e7bc      	b.n	80144da <_printf_float+0xd2>
 8014560:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014564:	d118      	bne.n	8014598 <_printf_float+0x190>
 8014566:	2900      	cmp	r1, #0
 8014568:	6863      	ldr	r3, [r4, #4]
 801456a:	dd0b      	ble.n	8014584 <_printf_float+0x17c>
 801456c:	6121      	str	r1, [r4, #16]
 801456e:	b913      	cbnz	r3, 8014576 <_printf_float+0x16e>
 8014570:	6822      	ldr	r2, [r4, #0]
 8014572:	07d0      	lsls	r0, r2, #31
 8014574:	d502      	bpl.n	801457c <_printf_float+0x174>
 8014576:	3301      	adds	r3, #1
 8014578:	440b      	add	r3, r1
 801457a:	6123      	str	r3, [r4, #16]
 801457c:	2300      	movs	r3, #0
 801457e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014580:	9304      	str	r3, [sp, #16]
 8014582:	e7de      	b.n	8014542 <_printf_float+0x13a>
 8014584:	b913      	cbnz	r3, 801458c <_printf_float+0x184>
 8014586:	6822      	ldr	r2, [r4, #0]
 8014588:	07d2      	lsls	r2, r2, #31
 801458a:	d501      	bpl.n	8014590 <_printf_float+0x188>
 801458c:	3302      	adds	r3, #2
 801458e:	e7f4      	b.n	801457a <_printf_float+0x172>
 8014590:	2301      	movs	r3, #1
 8014592:	e7f2      	b.n	801457a <_printf_float+0x172>
 8014594:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014598:	9b08      	ldr	r3, [sp, #32]
 801459a:	4299      	cmp	r1, r3
 801459c:	db05      	blt.n	80145aa <_printf_float+0x1a2>
 801459e:	6823      	ldr	r3, [r4, #0]
 80145a0:	6121      	str	r1, [r4, #16]
 80145a2:	07d8      	lsls	r0, r3, #31
 80145a4:	d5ea      	bpl.n	801457c <_printf_float+0x174>
 80145a6:	1c4b      	adds	r3, r1, #1
 80145a8:	e7e7      	b.n	801457a <_printf_float+0x172>
 80145aa:	2900      	cmp	r1, #0
 80145ac:	bfd4      	ite	le
 80145ae:	f1c1 0202 	rsble	r2, r1, #2
 80145b2:	2201      	movgt	r2, #1
 80145b4:	4413      	add	r3, r2
 80145b6:	e7e0      	b.n	801457a <_printf_float+0x172>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	055a      	lsls	r2, r3, #21
 80145bc:	d407      	bmi.n	80145ce <_printf_float+0x1c6>
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	4642      	mov	r2, r8
 80145c2:	4631      	mov	r1, r6
 80145c4:	4628      	mov	r0, r5
 80145c6:	47b8      	blx	r7
 80145c8:	3001      	adds	r0, #1
 80145ca:	d12a      	bne.n	8014622 <_printf_float+0x21a>
 80145cc:	e76a      	b.n	80144a4 <_printf_float+0x9c>
 80145ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80145d2:	f240 80e2 	bls.w	801479a <_printf_float+0x392>
 80145d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80145da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80145de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e2:	d133      	bne.n	801464c <_printf_float+0x244>
 80145e4:	4a38      	ldr	r2, [pc, #224]	; (80146c8 <_printf_float+0x2c0>)
 80145e6:	2301      	movs	r3, #1
 80145e8:	4631      	mov	r1, r6
 80145ea:	4628      	mov	r0, r5
 80145ec:	47b8      	blx	r7
 80145ee:	3001      	adds	r0, #1
 80145f0:	f43f af58 	beq.w	80144a4 <_printf_float+0x9c>
 80145f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	db02      	blt.n	8014602 <_printf_float+0x1fa>
 80145fc:	6823      	ldr	r3, [r4, #0]
 80145fe:	07d8      	lsls	r0, r3, #31
 8014600:	d50f      	bpl.n	8014622 <_printf_float+0x21a>
 8014602:	4653      	mov	r3, sl
 8014604:	465a      	mov	r2, fp
 8014606:	4631      	mov	r1, r6
 8014608:	4628      	mov	r0, r5
 801460a:	47b8      	blx	r7
 801460c:	3001      	adds	r0, #1
 801460e:	f43f af49 	beq.w	80144a4 <_printf_float+0x9c>
 8014612:	f04f 0800 	mov.w	r8, #0
 8014616:	f104 091a 	add.w	r9, r4, #26
 801461a:	9b08      	ldr	r3, [sp, #32]
 801461c:	3b01      	subs	r3, #1
 801461e:	4543      	cmp	r3, r8
 8014620:	dc09      	bgt.n	8014636 <_printf_float+0x22e>
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	079b      	lsls	r3, r3, #30
 8014626:	f100 8108 	bmi.w	801483a <_printf_float+0x432>
 801462a:	68e0      	ldr	r0, [r4, #12]
 801462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801462e:	4298      	cmp	r0, r3
 8014630:	bfb8      	it	lt
 8014632:	4618      	movlt	r0, r3
 8014634:	e738      	b.n	80144a8 <_printf_float+0xa0>
 8014636:	2301      	movs	r3, #1
 8014638:	464a      	mov	r2, r9
 801463a:	4631      	mov	r1, r6
 801463c:	4628      	mov	r0, r5
 801463e:	47b8      	blx	r7
 8014640:	3001      	adds	r0, #1
 8014642:	f43f af2f 	beq.w	80144a4 <_printf_float+0x9c>
 8014646:	f108 0801 	add.w	r8, r8, #1
 801464a:	e7e6      	b.n	801461a <_printf_float+0x212>
 801464c:	9b07      	ldr	r3, [sp, #28]
 801464e:	2b00      	cmp	r3, #0
 8014650:	dc3c      	bgt.n	80146cc <_printf_float+0x2c4>
 8014652:	4a1d      	ldr	r2, [pc, #116]	; (80146c8 <_printf_float+0x2c0>)
 8014654:	2301      	movs	r3, #1
 8014656:	4631      	mov	r1, r6
 8014658:	4628      	mov	r0, r5
 801465a:	47b8      	blx	r7
 801465c:	3001      	adds	r0, #1
 801465e:	f43f af21 	beq.w	80144a4 <_printf_float+0x9c>
 8014662:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014666:	4313      	orrs	r3, r2
 8014668:	d102      	bne.n	8014670 <_printf_float+0x268>
 801466a:	6823      	ldr	r3, [r4, #0]
 801466c:	07d9      	lsls	r1, r3, #31
 801466e:	d5d8      	bpl.n	8014622 <_printf_float+0x21a>
 8014670:	4653      	mov	r3, sl
 8014672:	465a      	mov	r2, fp
 8014674:	4631      	mov	r1, r6
 8014676:	4628      	mov	r0, r5
 8014678:	47b8      	blx	r7
 801467a:	3001      	adds	r0, #1
 801467c:	f43f af12 	beq.w	80144a4 <_printf_float+0x9c>
 8014680:	f04f 0900 	mov.w	r9, #0
 8014684:	f104 0a1a 	add.w	sl, r4, #26
 8014688:	9b07      	ldr	r3, [sp, #28]
 801468a:	425b      	negs	r3, r3
 801468c:	454b      	cmp	r3, r9
 801468e:	dc01      	bgt.n	8014694 <_printf_float+0x28c>
 8014690:	9b08      	ldr	r3, [sp, #32]
 8014692:	e795      	b.n	80145c0 <_printf_float+0x1b8>
 8014694:	2301      	movs	r3, #1
 8014696:	4652      	mov	r2, sl
 8014698:	4631      	mov	r1, r6
 801469a:	4628      	mov	r0, r5
 801469c:	47b8      	blx	r7
 801469e:	3001      	adds	r0, #1
 80146a0:	f43f af00 	beq.w	80144a4 <_printf_float+0x9c>
 80146a4:	f109 0901 	add.w	r9, r9, #1
 80146a8:	e7ee      	b.n	8014688 <_printf_float+0x280>
 80146aa:	bf00      	nop
 80146ac:	f3af 8000 	nop.w
 80146b0:	ffffffff 	.word	0xffffffff
 80146b4:	7fefffff 	.word	0x7fefffff
 80146b8:	080189ec 	.word	0x080189ec
 80146bc:	080189f0 	.word	0x080189f0
 80146c0:	080189f8 	.word	0x080189f8
 80146c4:	080189f4 	.word	0x080189f4
 80146c8:	080189fc 	.word	0x080189fc
 80146cc:	9a08      	ldr	r2, [sp, #32]
 80146ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146d0:	429a      	cmp	r2, r3
 80146d2:	bfa8      	it	ge
 80146d4:	461a      	movge	r2, r3
 80146d6:	2a00      	cmp	r2, #0
 80146d8:	4691      	mov	r9, r2
 80146da:	dc38      	bgt.n	801474e <_printf_float+0x346>
 80146dc:	2300      	movs	r3, #0
 80146de:	9305      	str	r3, [sp, #20]
 80146e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80146e4:	f104 021a 	add.w	r2, r4, #26
 80146e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146ea:	9905      	ldr	r1, [sp, #20]
 80146ec:	9304      	str	r3, [sp, #16]
 80146ee:	eba3 0309 	sub.w	r3, r3, r9
 80146f2:	428b      	cmp	r3, r1
 80146f4:	dc33      	bgt.n	801475e <_printf_float+0x356>
 80146f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	db3c      	blt.n	8014778 <_printf_float+0x370>
 80146fe:	6823      	ldr	r3, [r4, #0]
 8014700:	07da      	lsls	r2, r3, #31
 8014702:	d439      	bmi.n	8014778 <_printf_float+0x370>
 8014704:	9b08      	ldr	r3, [sp, #32]
 8014706:	9a04      	ldr	r2, [sp, #16]
 8014708:	9907      	ldr	r1, [sp, #28]
 801470a:	1a9a      	subs	r2, r3, r2
 801470c:	eba3 0901 	sub.w	r9, r3, r1
 8014710:	4591      	cmp	r9, r2
 8014712:	bfa8      	it	ge
 8014714:	4691      	movge	r9, r2
 8014716:	f1b9 0f00 	cmp.w	r9, #0
 801471a:	dc35      	bgt.n	8014788 <_printf_float+0x380>
 801471c:	f04f 0800 	mov.w	r8, #0
 8014720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014724:	f104 0a1a 	add.w	sl, r4, #26
 8014728:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801472c:	1a9b      	subs	r3, r3, r2
 801472e:	eba3 0309 	sub.w	r3, r3, r9
 8014732:	4543      	cmp	r3, r8
 8014734:	f77f af75 	ble.w	8014622 <_printf_float+0x21a>
 8014738:	2301      	movs	r3, #1
 801473a:	4652      	mov	r2, sl
 801473c:	4631      	mov	r1, r6
 801473e:	4628      	mov	r0, r5
 8014740:	47b8      	blx	r7
 8014742:	3001      	adds	r0, #1
 8014744:	f43f aeae 	beq.w	80144a4 <_printf_float+0x9c>
 8014748:	f108 0801 	add.w	r8, r8, #1
 801474c:	e7ec      	b.n	8014728 <_printf_float+0x320>
 801474e:	4613      	mov	r3, r2
 8014750:	4631      	mov	r1, r6
 8014752:	4642      	mov	r2, r8
 8014754:	4628      	mov	r0, r5
 8014756:	47b8      	blx	r7
 8014758:	3001      	adds	r0, #1
 801475a:	d1bf      	bne.n	80146dc <_printf_float+0x2d4>
 801475c:	e6a2      	b.n	80144a4 <_printf_float+0x9c>
 801475e:	2301      	movs	r3, #1
 8014760:	4631      	mov	r1, r6
 8014762:	4628      	mov	r0, r5
 8014764:	9204      	str	r2, [sp, #16]
 8014766:	47b8      	blx	r7
 8014768:	3001      	adds	r0, #1
 801476a:	f43f ae9b 	beq.w	80144a4 <_printf_float+0x9c>
 801476e:	9b05      	ldr	r3, [sp, #20]
 8014770:	9a04      	ldr	r2, [sp, #16]
 8014772:	3301      	adds	r3, #1
 8014774:	9305      	str	r3, [sp, #20]
 8014776:	e7b7      	b.n	80146e8 <_printf_float+0x2e0>
 8014778:	4653      	mov	r3, sl
 801477a:	465a      	mov	r2, fp
 801477c:	4631      	mov	r1, r6
 801477e:	4628      	mov	r0, r5
 8014780:	47b8      	blx	r7
 8014782:	3001      	adds	r0, #1
 8014784:	d1be      	bne.n	8014704 <_printf_float+0x2fc>
 8014786:	e68d      	b.n	80144a4 <_printf_float+0x9c>
 8014788:	9a04      	ldr	r2, [sp, #16]
 801478a:	464b      	mov	r3, r9
 801478c:	4442      	add	r2, r8
 801478e:	4631      	mov	r1, r6
 8014790:	4628      	mov	r0, r5
 8014792:	47b8      	blx	r7
 8014794:	3001      	adds	r0, #1
 8014796:	d1c1      	bne.n	801471c <_printf_float+0x314>
 8014798:	e684      	b.n	80144a4 <_printf_float+0x9c>
 801479a:	9a08      	ldr	r2, [sp, #32]
 801479c:	2a01      	cmp	r2, #1
 801479e:	dc01      	bgt.n	80147a4 <_printf_float+0x39c>
 80147a0:	07db      	lsls	r3, r3, #31
 80147a2:	d537      	bpl.n	8014814 <_printf_float+0x40c>
 80147a4:	2301      	movs	r3, #1
 80147a6:	4642      	mov	r2, r8
 80147a8:	4631      	mov	r1, r6
 80147aa:	4628      	mov	r0, r5
 80147ac:	47b8      	blx	r7
 80147ae:	3001      	adds	r0, #1
 80147b0:	f43f ae78 	beq.w	80144a4 <_printf_float+0x9c>
 80147b4:	4653      	mov	r3, sl
 80147b6:	465a      	mov	r2, fp
 80147b8:	4631      	mov	r1, r6
 80147ba:	4628      	mov	r0, r5
 80147bc:	47b8      	blx	r7
 80147be:	3001      	adds	r0, #1
 80147c0:	f43f ae70 	beq.w	80144a4 <_printf_float+0x9c>
 80147c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80147c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80147cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d0:	d01b      	beq.n	801480a <_printf_float+0x402>
 80147d2:	9b08      	ldr	r3, [sp, #32]
 80147d4:	f108 0201 	add.w	r2, r8, #1
 80147d8:	3b01      	subs	r3, #1
 80147da:	4631      	mov	r1, r6
 80147dc:	4628      	mov	r0, r5
 80147de:	47b8      	blx	r7
 80147e0:	3001      	adds	r0, #1
 80147e2:	d10e      	bne.n	8014802 <_printf_float+0x3fa>
 80147e4:	e65e      	b.n	80144a4 <_printf_float+0x9c>
 80147e6:	2301      	movs	r3, #1
 80147e8:	464a      	mov	r2, r9
 80147ea:	4631      	mov	r1, r6
 80147ec:	4628      	mov	r0, r5
 80147ee:	47b8      	blx	r7
 80147f0:	3001      	adds	r0, #1
 80147f2:	f43f ae57 	beq.w	80144a4 <_printf_float+0x9c>
 80147f6:	f108 0801 	add.w	r8, r8, #1
 80147fa:	9b08      	ldr	r3, [sp, #32]
 80147fc:	3b01      	subs	r3, #1
 80147fe:	4543      	cmp	r3, r8
 8014800:	dcf1      	bgt.n	80147e6 <_printf_float+0x3de>
 8014802:	9b04      	ldr	r3, [sp, #16]
 8014804:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014808:	e6db      	b.n	80145c2 <_printf_float+0x1ba>
 801480a:	f04f 0800 	mov.w	r8, #0
 801480e:	f104 091a 	add.w	r9, r4, #26
 8014812:	e7f2      	b.n	80147fa <_printf_float+0x3f2>
 8014814:	2301      	movs	r3, #1
 8014816:	4642      	mov	r2, r8
 8014818:	e7df      	b.n	80147da <_printf_float+0x3d2>
 801481a:	2301      	movs	r3, #1
 801481c:	464a      	mov	r2, r9
 801481e:	4631      	mov	r1, r6
 8014820:	4628      	mov	r0, r5
 8014822:	47b8      	blx	r7
 8014824:	3001      	adds	r0, #1
 8014826:	f43f ae3d 	beq.w	80144a4 <_printf_float+0x9c>
 801482a:	f108 0801 	add.w	r8, r8, #1
 801482e:	68e3      	ldr	r3, [r4, #12]
 8014830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014832:	1a5b      	subs	r3, r3, r1
 8014834:	4543      	cmp	r3, r8
 8014836:	dcf0      	bgt.n	801481a <_printf_float+0x412>
 8014838:	e6f7      	b.n	801462a <_printf_float+0x222>
 801483a:	f04f 0800 	mov.w	r8, #0
 801483e:	f104 0919 	add.w	r9, r4, #25
 8014842:	e7f4      	b.n	801482e <_printf_float+0x426>

08014844 <_printf_common>:
 8014844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014848:	4616      	mov	r6, r2
 801484a:	4699      	mov	r9, r3
 801484c:	688a      	ldr	r2, [r1, #8]
 801484e:	690b      	ldr	r3, [r1, #16]
 8014850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014854:	4293      	cmp	r3, r2
 8014856:	bfb8      	it	lt
 8014858:	4613      	movlt	r3, r2
 801485a:	6033      	str	r3, [r6, #0]
 801485c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014860:	4607      	mov	r7, r0
 8014862:	460c      	mov	r4, r1
 8014864:	b10a      	cbz	r2, 801486a <_printf_common+0x26>
 8014866:	3301      	adds	r3, #1
 8014868:	6033      	str	r3, [r6, #0]
 801486a:	6823      	ldr	r3, [r4, #0]
 801486c:	0699      	lsls	r1, r3, #26
 801486e:	bf42      	ittt	mi
 8014870:	6833      	ldrmi	r3, [r6, #0]
 8014872:	3302      	addmi	r3, #2
 8014874:	6033      	strmi	r3, [r6, #0]
 8014876:	6825      	ldr	r5, [r4, #0]
 8014878:	f015 0506 	ands.w	r5, r5, #6
 801487c:	d106      	bne.n	801488c <_printf_common+0x48>
 801487e:	f104 0a19 	add.w	sl, r4, #25
 8014882:	68e3      	ldr	r3, [r4, #12]
 8014884:	6832      	ldr	r2, [r6, #0]
 8014886:	1a9b      	subs	r3, r3, r2
 8014888:	42ab      	cmp	r3, r5
 801488a:	dc26      	bgt.n	80148da <_printf_common+0x96>
 801488c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014890:	1e13      	subs	r3, r2, #0
 8014892:	6822      	ldr	r2, [r4, #0]
 8014894:	bf18      	it	ne
 8014896:	2301      	movne	r3, #1
 8014898:	0692      	lsls	r2, r2, #26
 801489a:	d42b      	bmi.n	80148f4 <_printf_common+0xb0>
 801489c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148a0:	4649      	mov	r1, r9
 80148a2:	4638      	mov	r0, r7
 80148a4:	47c0      	blx	r8
 80148a6:	3001      	adds	r0, #1
 80148a8:	d01e      	beq.n	80148e8 <_printf_common+0xa4>
 80148aa:	6823      	ldr	r3, [r4, #0]
 80148ac:	68e5      	ldr	r5, [r4, #12]
 80148ae:	6832      	ldr	r2, [r6, #0]
 80148b0:	f003 0306 	and.w	r3, r3, #6
 80148b4:	2b04      	cmp	r3, #4
 80148b6:	bf08      	it	eq
 80148b8:	1aad      	subeq	r5, r5, r2
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	6922      	ldr	r2, [r4, #16]
 80148be:	bf0c      	ite	eq
 80148c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80148c4:	2500      	movne	r5, #0
 80148c6:	4293      	cmp	r3, r2
 80148c8:	bfc4      	itt	gt
 80148ca:	1a9b      	subgt	r3, r3, r2
 80148cc:	18ed      	addgt	r5, r5, r3
 80148ce:	2600      	movs	r6, #0
 80148d0:	341a      	adds	r4, #26
 80148d2:	42b5      	cmp	r5, r6
 80148d4:	d11a      	bne.n	801490c <_printf_common+0xc8>
 80148d6:	2000      	movs	r0, #0
 80148d8:	e008      	b.n	80148ec <_printf_common+0xa8>
 80148da:	2301      	movs	r3, #1
 80148dc:	4652      	mov	r2, sl
 80148de:	4649      	mov	r1, r9
 80148e0:	4638      	mov	r0, r7
 80148e2:	47c0      	blx	r8
 80148e4:	3001      	adds	r0, #1
 80148e6:	d103      	bne.n	80148f0 <_printf_common+0xac>
 80148e8:	f04f 30ff 	mov.w	r0, #4294967295
 80148ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148f0:	3501      	adds	r5, #1
 80148f2:	e7c6      	b.n	8014882 <_printf_common+0x3e>
 80148f4:	18e1      	adds	r1, r4, r3
 80148f6:	1c5a      	adds	r2, r3, #1
 80148f8:	2030      	movs	r0, #48	; 0x30
 80148fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80148fe:	4422      	add	r2, r4
 8014900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014908:	3302      	adds	r3, #2
 801490a:	e7c7      	b.n	801489c <_printf_common+0x58>
 801490c:	2301      	movs	r3, #1
 801490e:	4622      	mov	r2, r4
 8014910:	4649      	mov	r1, r9
 8014912:	4638      	mov	r0, r7
 8014914:	47c0      	blx	r8
 8014916:	3001      	adds	r0, #1
 8014918:	d0e6      	beq.n	80148e8 <_printf_common+0xa4>
 801491a:	3601      	adds	r6, #1
 801491c:	e7d9      	b.n	80148d2 <_printf_common+0x8e>
	...

08014920 <_printf_i>:
 8014920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014924:	7e0f      	ldrb	r7, [r1, #24]
 8014926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014928:	2f78      	cmp	r7, #120	; 0x78
 801492a:	4691      	mov	r9, r2
 801492c:	4680      	mov	r8, r0
 801492e:	460c      	mov	r4, r1
 8014930:	469a      	mov	sl, r3
 8014932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014936:	d807      	bhi.n	8014948 <_printf_i+0x28>
 8014938:	2f62      	cmp	r7, #98	; 0x62
 801493a:	d80a      	bhi.n	8014952 <_printf_i+0x32>
 801493c:	2f00      	cmp	r7, #0
 801493e:	f000 80d8 	beq.w	8014af2 <_printf_i+0x1d2>
 8014942:	2f58      	cmp	r7, #88	; 0x58
 8014944:	f000 80a3 	beq.w	8014a8e <_printf_i+0x16e>
 8014948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801494c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014950:	e03a      	b.n	80149c8 <_printf_i+0xa8>
 8014952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014956:	2b15      	cmp	r3, #21
 8014958:	d8f6      	bhi.n	8014948 <_printf_i+0x28>
 801495a:	a101      	add	r1, pc, #4	; (adr r1, 8014960 <_printf_i+0x40>)
 801495c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014960:	080149b9 	.word	0x080149b9
 8014964:	080149cd 	.word	0x080149cd
 8014968:	08014949 	.word	0x08014949
 801496c:	08014949 	.word	0x08014949
 8014970:	08014949 	.word	0x08014949
 8014974:	08014949 	.word	0x08014949
 8014978:	080149cd 	.word	0x080149cd
 801497c:	08014949 	.word	0x08014949
 8014980:	08014949 	.word	0x08014949
 8014984:	08014949 	.word	0x08014949
 8014988:	08014949 	.word	0x08014949
 801498c:	08014ad9 	.word	0x08014ad9
 8014990:	080149fd 	.word	0x080149fd
 8014994:	08014abb 	.word	0x08014abb
 8014998:	08014949 	.word	0x08014949
 801499c:	08014949 	.word	0x08014949
 80149a0:	08014afb 	.word	0x08014afb
 80149a4:	08014949 	.word	0x08014949
 80149a8:	080149fd 	.word	0x080149fd
 80149ac:	08014949 	.word	0x08014949
 80149b0:	08014949 	.word	0x08014949
 80149b4:	08014ac3 	.word	0x08014ac3
 80149b8:	682b      	ldr	r3, [r5, #0]
 80149ba:	1d1a      	adds	r2, r3, #4
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	602a      	str	r2, [r5, #0]
 80149c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149c8:	2301      	movs	r3, #1
 80149ca:	e0a3      	b.n	8014b14 <_printf_i+0x1f4>
 80149cc:	6820      	ldr	r0, [r4, #0]
 80149ce:	6829      	ldr	r1, [r5, #0]
 80149d0:	0606      	lsls	r6, r0, #24
 80149d2:	f101 0304 	add.w	r3, r1, #4
 80149d6:	d50a      	bpl.n	80149ee <_printf_i+0xce>
 80149d8:	680e      	ldr	r6, [r1, #0]
 80149da:	602b      	str	r3, [r5, #0]
 80149dc:	2e00      	cmp	r6, #0
 80149de:	da03      	bge.n	80149e8 <_printf_i+0xc8>
 80149e0:	232d      	movs	r3, #45	; 0x2d
 80149e2:	4276      	negs	r6, r6
 80149e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149e8:	485e      	ldr	r0, [pc, #376]	; (8014b64 <_printf_i+0x244>)
 80149ea:	230a      	movs	r3, #10
 80149ec:	e019      	b.n	8014a22 <_printf_i+0x102>
 80149ee:	680e      	ldr	r6, [r1, #0]
 80149f0:	602b      	str	r3, [r5, #0]
 80149f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80149f6:	bf18      	it	ne
 80149f8:	b236      	sxthne	r6, r6
 80149fa:	e7ef      	b.n	80149dc <_printf_i+0xbc>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	6820      	ldr	r0, [r4, #0]
 8014a00:	1d19      	adds	r1, r3, #4
 8014a02:	6029      	str	r1, [r5, #0]
 8014a04:	0601      	lsls	r1, r0, #24
 8014a06:	d501      	bpl.n	8014a0c <_printf_i+0xec>
 8014a08:	681e      	ldr	r6, [r3, #0]
 8014a0a:	e002      	b.n	8014a12 <_printf_i+0xf2>
 8014a0c:	0646      	lsls	r6, r0, #25
 8014a0e:	d5fb      	bpl.n	8014a08 <_printf_i+0xe8>
 8014a10:	881e      	ldrh	r6, [r3, #0]
 8014a12:	4854      	ldr	r0, [pc, #336]	; (8014b64 <_printf_i+0x244>)
 8014a14:	2f6f      	cmp	r7, #111	; 0x6f
 8014a16:	bf0c      	ite	eq
 8014a18:	2308      	moveq	r3, #8
 8014a1a:	230a      	movne	r3, #10
 8014a1c:	2100      	movs	r1, #0
 8014a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a22:	6865      	ldr	r5, [r4, #4]
 8014a24:	60a5      	str	r5, [r4, #8]
 8014a26:	2d00      	cmp	r5, #0
 8014a28:	bfa2      	ittt	ge
 8014a2a:	6821      	ldrge	r1, [r4, #0]
 8014a2c:	f021 0104 	bicge.w	r1, r1, #4
 8014a30:	6021      	strge	r1, [r4, #0]
 8014a32:	b90e      	cbnz	r6, 8014a38 <_printf_i+0x118>
 8014a34:	2d00      	cmp	r5, #0
 8014a36:	d04d      	beq.n	8014ad4 <_printf_i+0x1b4>
 8014a38:	4615      	mov	r5, r2
 8014a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8014a42:	5dc7      	ldrb	r7, [r0, r7]
 8014a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a48:	4637      	mov	r7, r6
 8014a4a:	42bb      	cmp	r3, r7
 8014a4c:	460e      	mov	r6, r1
 8014a4e:	d9f4      	bls.n	8014a3a <_printf_i+0x11a>
 8014a50:	2b08      	cmp	r3, #8
 8014a52:	d10b      	bne.n	8014a6c <_printf_i+0x14c>
 8014a54:	6823      	ldr	r3, [r4, #0]
 8014a56:	07de      	lsls	r6, r3, #31
 8014a58:	d508      	bpl.n	8014a6c <_printf_i+0x14c>
 8014a5a:	6923      	ldr	r3, [r4, #16]
 8014a5c:	6861      	ldr	r1, [r4, #4]
 8014a5e:	4299      	cmp	r1, r3
 8014a60:	bfde      	ittt	le
 8014a62:	2330      	movle	r3, #48	; 0x30
 8014a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a6c:	1b52      	subs	r2, r2, r5
 8014a6e:	6122      	str	r2, [r4, #16]
 8014a70:	f8cd a000 	str.w	sl, [sp]
 8014a74:	464b      	mov	r3, r9
 8014a76:	aa03      	add	r2, sp, #12
 8014a78:	4621      	mov	r1, r4
 8014a7a:	4640      	mov	r0, r8
 8014a7c:	f7ff fee2 	bl	8014844 <_printf_common>
 8014a80:	3001      	adds	r0, #1
 8014a82:	d14c      	bne.n	8014b1e <_printf_i+0x1fe>
 8014a84:	f04f 30ff 	mov.w	r0, #4294967295
 8014a88:	b004      	add	sp, #16
 8014a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a8e:	4835      	ldr	r0, [pc, #212]	; (8014b64 <_printf_i+0x244>)
 8014a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014a94:	6829      	ldr	r1, [r5, #0]
 8014a96:	6823      	ldr	r3, [r4, #0]
 8014a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8014a9c:	6029      	str	r1, [r5, #0]
 8014a9e:	061d      	lsls	r5, r3, #24
 8014aa0:	d514      	bpl.n	8014acc <_printf_i+0x1ac>
 8014aa2:	07df      	lsls	r7, r3, #31
 8014aa4:	bf44      	itt	mi
 8014aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8014aaa:	6023      	strmi	r3, [r4, #0]
 8014aac:	b91e      	cbnz	r6, 8014ab6 <_printf_i+0x196>
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	f023 0320 	bic.w	r3, r3, #32
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	2310      	movs	r3, #16
 8014ab8:	e7b0      	b.n	8014a1c <_printf_i+0xfc>
 8014aba:	6823      	ldr	r3, [r4, #0]
 8014abc:	f043 0320 	orr.w	r3, r3, #32
 8014ac0:	6023      	str	r3, [r4, #0]
 8014ac2:	2378      	movs	r3, #120	; 0x78
 8014ac4:	4828      	ldr	r0, [pc, #160]	; (8014b68 <_printf_i+0x248>)
 8014ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014aca:	e7e3      	b.n	8014a94 <_printf_i+0x174>
 8014acc:	0659      	lsls	r1, r3, #25
 8014ace:	bf48      	it	mi
 8014ad0:	b2b6      	uxthmi	r6, r6
 8014ad2:	e7e6      	b.n	8014aa2 <_printf_i+0x182>
 8014ad4:	4615      	mov	r5, r2
 8014ad6:	e7bb      	b.n	8014a50 <_printf_i+0x130>
 8014ad8:	682b      	ldr	r3, [r5, #0]
 8014ada:	6826      	ldr	r6, [r4, #0]
 8014adc:	6961      	ldr	r1, [r4, #20]
 8014ade:	1d18      	adds	r0, r3, #4
 8014ae0:	6028      	str	r0, [r5, #0]
 8014ae2:	0635      	lsls	r5, r6, #24
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	d501      	bpl.n	8014aec <_printf_i+0x1cc>
 8014ae8:	6019      	str	r1, [r3, #0]
 8014aea:	e002      	b.n	8014af2 <_printf_i+0x1d2>
 8014aec:	0670      	lsls	r0, r6, #25
 8014aee:	d5fb      	bpl.n	8014ae8 <_printf_i+0x1c8>
 8014af0:	8019      	strh	r1, [r3, #0]
 8014af2:	2300      	movs	r3, #0
 8014af4:	6123      	str	r3, [r4, #16]
 8014af6:	4615      	mov	r5, r2
 8014af8:	e7ba      	b.n	8014a70 <_printf_i+0x150>
 8014afa:	682b      	ldr	r3, [r5, #0]
 8014afc:	1d1a      	adds	r2, r3, #4
 8014afe:	602a      	str	r2, [r5, #0]
 8014b00:	681d      	ldr	r5, [r3, #0]
 8014b02:	6862      	ldr	r2, [r4, #4]
 8014b04:	2100      	movs	r1, #0
 8014b06:	4628      	mov	r0, r5
 8014b08:	f7eb fba2 	bl	8000250 <memchr>
 8014b0c:	b108      	cbz	r0, 8014b12 <_printf_i+0x1f2>
 8014b0e:	1b40      	subs	r0, r0, r5
 8014b10:	6060      	str	r0, [r4, #4]
 8014b12:	6863      	ldr	r3, [r4, #4]
 8014b14:	6123      	str	r3, [r4, #16]
 8014b16:	2300      	movs	r3, #0
 8014b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b1c:	e7a8      	b.n	8014a70 <_printf_i+0x150>
 8014b1e:	6923      	ldr	r3, [r4, #16]
 8014b20:	462a      	mov	r2, r5
 8014b22:	4649      	mov	r1, r9
 8014b24:	4640      	mov	r0, r8
 8014b26:	47d0      	blx	sl
 8014b28:	3001      	adds	r0, #1
 8014b2a:	d0ab      	beq.n	8014a84 <_printf_i+0x164>
 8014b2c:	6823      	ldr	r3, [r4, #0]
 8014b2e:	079b      	lsls	r3, r3, #30
 8014b30:	d413      	bmi.n	8014b5a <_printf_i+0x23a>
 8014b32:	68e0      	ldr	r0, [r4, #12]
 8014b34:	9b03      	ldr	r3, [sp, #12]
 8014b36:	4298      	cmp	r0, r3
 8014b38:	bfb8      	it	lt
 8014b3a:	4618      	movlt	r0, r3
 8014b3c:	e7a4      	b.n	8014a88 <_printf_i+0x168>
 8014b3e:	2301      	movs	r3, #1
 8014b40:	4632      	mov	r2, r6
 8014b42:	4649      	mov	r1, r9
 8014b44:	4640      	mov	r0, r8
 8014b46:	47d0      	blx	sl
 8014b48:	3001      	adds	r0, #1
 8014b4a:	d09b      	beq.n	8014a84 <_printf_i+0x164>
 8014b4c:	3501      	adds	r5, #1
 8014b4e:	68e3      	ldr	r3, [r4, #12]
 8014b50:	9903      	ldr	r1, [sp, #12]
 8014b52:	1a5b      	subs	r3, r3, r1
 8014b54:	42ab      	cmp	r3, r5
 8014b56:	dcf2      	bgt.n	8014b3e <_printf_i+0x21e>
 8014b58:	e7eb      	b.n	8014b32 <_printf_i+0x212>
 8014b5a:	2500      	movs	r5, #0
 8014b5c:	f104 0619 	add.w	r6, r4, #25
 8014b60:	e7f5      	b.n	8014b4e <_printf_i+0x22e>
 8014b62:	bf00      	nop
 8014b64:	080189fe 	.word	0x080189fe
 8014b68:	08018a0f 	.word	0x08018a0f

08014b6c <iprintf>:
 8014b6c:	b40f      	push	{r0, r1, r2, r3}
 8014b6e:	4b0a      	ldr	r3, [pc, #40]	; (8014b98 <iprintf+0x2c>)
 8014b70:	b513      	push	{r0, r1, r4, lr}
 8014b72:	681c      	ldr	r4, [r3, #0]
 8014b74:	b124      	cbz	r4, 8014b80 <iprintf+0x14>
 8014b76:	69a3      	ldr	r3, [r4, #24]
 8014b78:	b913      	cbnz	r3, 8014b80 <iprintf+0x14>
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f001 f888 	bl	8015c90 <__sinit>
 8014b80:	ab05      	add	r3, sp, #20
 8014b82:	9a04      	ldr	r2, [sp, #16]
 8014b84:	68a1      	ldr	r1, [r4, #8]
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f001 fee5 	bl	8016958 <_vfiprintf_r>
 8014b8e:	b002      	add	sp, #8
 8014b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b94:	b004      	add	sp, #16
 8014b96:	4770      	bx	lr
 8014b98:	2000134c 	.word	0x2000134c

08014b9c <_puts_r>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	460e      	mov	r6, r1
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	b118      	cbz	r0, 8014bac <_puts_r+0x10>
 8014ba4:	6983      	ldr	r3, [r0, #24]
 8014ba6:	b90b      	cbnz	r3, 8014bac <_puts_r+0x10>
 8014ba8:	f001 f872 	bl	8015c90 <__sinit>
 8014bac:	69ab      	ldr	r3, [r5, #24]
 8014bae:	68ac      	ldr	r4, [r5, #8]
 8014bb0:	b913      	cbnz	r3, 8014bb8 <_puts_r+0x1c>
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f001 f86c 	bl	8015c90 <__sinit>
 8014bb8:	4b2c      	ldr	r3, [pc, #176]	; (8014c6c <_puts_r+0xd0>)
 8014bba:	429c      	cmp	r4, r3
 8014bbc:	d120      	bne.n	8014c00 <_puts_r+0x64>
 8014bbe:	686c      	ldr	r4, [r5, #4]
 8014bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bc2:	07db      	lsls	r3, r3, #31
 8014bc4:	d405      	bmi.n	8014bd2 <_puts_r+0x36>
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	0598      	lsls	r0, r3, #22
 8014bca:	d402      	bmi.n	8014bd2 <_puts_r+0x36>
 8014bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bce:	f001 f902 	bl	8015dd6 <__retarget_lock_acquire_recursive>
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	0719      	lsls	r1, r3, #28
 8014bd6:	d51d      	bpl.n	8014c14 <_puts_r+0x78>
 8014bd8:	6923      	ldr	r3, [r4, #16]
 8014bda:	b1db      	cbz	r3, 8014c14 <_puts_r+0x78>
 8014bdc:	3e01      	subs	r6, #1
 8014bde:	68a3      	ldr	r3, [r4, #8]
 8014be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014be4:	3b01      	subs	r3, #1
 8014be6:	60a3      	str	r3, [r4, #8]
 8014be8:	bb39      	cbnz	r1, 8014c3a <_puts_r+0x9e>
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	da38      	bge.n	8014c60 <_puts_r+0xc4>
 8014bee:	4622      	mov	r2, r4
 8014bf0:	210a      	movs	r1, #10
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f000 f878 	bl	8014ce8 <__swbuf_r>
 8014bf8:	3001      	adds	r0, #1
 8014bfa:	d011      	beq.n	8014c20 <_puts_r+0x84>
 8014bfc:	250a      	movs	r5, #10
 8014bfe:	e011      	b.n	8014c24 <_puts_r+0x88>
 8014c00:	4b1b      	ldr	r3, [pc, #108]	; (8014c70 <_puts_r+0xd4>)
 8014c02:	429c      	cmp	r4, r3
 8014c04:	d101      	bne.n	8014c0a <_puts_r+0x6e>
 8014c06:	68ac      	ldr	r4, [r5, #8]
 8014c08:	e7da      	b.n	8014bc0 <_puts_r+0x24>
 8014c0a:	4b1a      	ldr	r3, [pc, #104]	; (8014c74 <_puts_r+0xd8>)
 8014c0c:	429c      	cmp	r4, r3
 8014c0e:	bf08      	it	eq
 8014c10:	68ec      	ldreq	r4, [r5, #12]
 8014c12:	e7d5      	b.n	8014bc0 <_puts_r+0x24>
 8014c14:	4621      	mov	r1, r4
 8014c16:	4628      	mov	r0, r5
 8014c18:	f000 f8b8 	bl	8014d8c <__swsetup_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d0dd      	beq.n	8014bdc <_puts_r+0x40>
 8014c20:	f04f 35ff 	mov.w	r5, #4294967295
 8014c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c26:	07da      	lsls	r2, r3, #31
 8014c28:	d405      	bmi.n	8014c36 <_puts_r+0x9a>
 8014c2a:	89a3      	ldrh	r3, [r4, #12]
 8014c2c:	059b      	lsls	r3, r3, #22
 8014c2e:	d402      	bmi.n	8014c36 <_puts_r+0x9a>
 8014c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c32:	f001 f8d1 	bl	8015dd8 <__retarget_lock_release_recursive>
 8014c36:	4628      	mov	r0, r5
 8014c38:	bd70      	pop	{r4, r5, r6, pc}
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	da04      	bge.n	8014c48 <_puts_r+0xac>
 8014c3e:	69a2      	ldr	r2, [r4, #24]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	dc06      	bgt.n	8014c52 <_puts_r+0xb6>
 8014c44:	290a      	cmp	r1, #10
 8014c46:	d004      	beq.n	8014c52 <_puts_r+0xb6>
 8014c48:	6823      	ldr	r3, [r4, #0]
 8014c4a:	1c5a      	adds	r2, r3, #1
 8014c4c:	6022      	str	r2, [r4, #0]
 8014c4e:	7019      	strb	r1, [r3, #0]
 8014c50:	e7c5      	b.n	8014bde <_puts_r+0x42>
 8014c52:	4622      	mov	r2, r4
 8014c54:	4628      	mov	r0, r5
 8014c56:	f000 f847 	bl	8014ce8 <__swbuf_r>
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	d1bf      	bne.n	8014bde <_puts_r+0x42>
 8014c5e:	e7df      	b.n	8014c20 <_puts_r+0x84>
 8014c60:	6823      	ldr	r3, [r4, #0]
 8014c62:	250a      	movs	r5, #10
 8014c64:	1c5a      	adds	r2, r3, #1
 8014c66:	6022      	str	r2, [r4, #0]
 8014c68:	701d      	strb	r5, [r3, #0]
 8014c6a:	e7db      	b.n	8014c24 <_puts_r+0x88>
 8014c6c:	08018ad0 	.word	0x08018ad0
 8014c70:	08018af0 	.word	0x08018af0
 8014c74:	08018ab0 	.word	0x08018ab0

08014c78 <puts>:
 8014c78:	4b02      	ldr	r3, [pc, #8]	; (8014c84 <puts+0xc>)
 8014c7a:	4601      	mov	r1, r0
 8014c7c:	6818      	ldr	r0, [r3, #0]
 8014c7e:	f7ff bf8d 	b.w	8014b9c <_puts_r>
 8014c82:	bf00      	nop
 8014c84:	2000134c 	.word	0x2000134c

08014c88 <_sbrk_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d06      	ldr	r5, [pc, #24]	; (8014ca4 <_sbrk_r+0x1c>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	f7ed f87c 	bl	8001d90 <_sbrk>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_sbrk_r+0x1a>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_sbrk_r+0x1a>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	20001a9c 	.word	0x20001a9c

08014ca8 <siprintf>:
 8014ca8:	b40e      	push	{r1, r2, r3}
 8014caa:	b500      	push	{lr}
 8014cac:	b09c      	sub	sp, #112	; 0x70
 8014cae:	ab1d      	add	r3, sp, #116	; 0x74
 8014cb0:	9002      	str	r0, [sp, #8]
 8014cb2:	9006      	str	r0, [sp, #24]
 8014cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cb8:	4809      	ldr	r0, [pc, #36]	; (8014ce0 <siprintf+0x38>)
 8014cba:	9107      	str	r1, [sp, #28]
 8014cbc:	9104      	str	r1, [sp, #16]
 8014cbe:	4909      	ldr	r1, [pc, #36]	; (8014ce4 <siprintf+0x3c>)
 8014cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cc4:	9105      	str	r1, [sp, #20]
 8014cc6:	6800      	ldr	r0, [r0, #0]
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	a902      	add	r1, sp, #8
 8014ccc:	f001 fd1a 	bl	8016704 <_svfiprintf_r>
 8014cd0:	9b02      	ldr	r3, [sp, #8]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
 8014cd6:	b01c      	add	sp, #112	; 0x70
 8014cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cdc:	b003      	add	sp, #12
 8014cde:	4770      	bx	lr
 8014ce0:	2000134c 	.word	0x2000134c
 8014ce4:	ffff0208 	.word	0xffff0208

08014ce8 <__swbuf_r>:
 8014ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cea:	460e      	mov	r6, r1
 8014cec:	4614      	mov	r4, r2
 8014cee:	4605      	mov	r5, r0
 8014cf0:	b118      	cbz	r0, 8014cfa <__swbuf_r+0x12>
 8014cf2:	6983      	ldr	r3, [r0, #24]
 8014cf4:	b90b      	cbnz	r3, 8014cfa <__swbuf_r+0x12>
 8014cf6:	f000 ffcb 	bl	8015c90 <__sinit>
 8014cfa:	4b21      	ldr	r3, [pc, #132]	; (8014d80 <__swbuf_r+0x98>)
 8014cfc:	429c      	cmp	r4, r3
 8014cfe:	d12b      	bne.n	8014d58 <__swbuf_r+0x70>
 8014d00:	686c      	ldr	r4, [r5, #4]
 8014d02:	69a3      	ldr	r3, [r4, #24]
 8014d04:	60a3      	str	r3, [r4, #8]
 8014d06:	89a3      	ldrh	r3, [r4, #12]
 8014d08:	071a      	lsls	r2, r3, #28
 8014d0a:	d52f      	bpl.n	8014d6c <__swbuf_r+0x84>
 8014d0c:	6923      	ldr	r3, [r4, #16]
 8014d0e:	b36b      	cbz	r3, 8014d6c <__swbuf_r+0x84>
 8014d10:	6923      	ldr	r3, [r4, #16]
 8014d12:	6820      	ldr	r0, [r4, #0]
 8014d14:	1ac0      	subs	r0, r0, r3
 8014d16:	6963      	ldr	r3, [r4, #20]
 8014d18:	b2f6      	uxtb	r6, r6
 8014d1a:	4283      	cmp	r3, r0
 8014d1c:	4637      	mov	r7, r6
 8014d1e:	dc04      	bgt.n	8014d2a <__swbuf_r+0x42>
 8014d20:	4621      	mov	r1, r4
 8014d22:	4628      	mov	r0, r5
 8014d24:	f000 ff20 	bl	8015b68 <_fflush_r>
 8014d28:	bb30      	cbnz	r0, 8014d78 <__swbuf_r+0x90>
 8014d2a:	68a3      	ldr	r3, [r4, #8]
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	60a3      	str	r3, [r4, #8]
 8014d30:	6823      	ldr	r3, [r4, #0]
 8014d32:	1c5a      	adds	r2, r3, #1
 8014d34:	6022      	str	r2, [r4, #0]
 8014d36:	701e      	strb	r6, [r3, #0]
 8014d38:	6963      	ldr	r3, [r4, #20]
 8014d3a:	3001      	adds	r0, #1
 8014d3c:	4283      	cmp	r3, r0
 8014d3e:	d004      	beq.n	8014d4a <__swbuf_r+0x62>
 8014d40:	89a3      	ldrh	r3, [r4, #12]
 8014d42:	07db      	lsls	r3, r3, #31
 8014d44:	d506      	bpl.n	8014d54 <__swbuf_r+0x6c>
 8014d46:	2e0a      	cmp	r6, #10
 8014d48:	d104      	bne.n	8014d54 <__swbuf_r+0x6c>
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	f000 ff0b 	bl	8015b68 <_fflush_r>
 8014d52:	b988      	cbnz	r0, 8014d78 <__swbuf_r+0x90>
 8014d54:	4638      	mov	r0, r7
 8014d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d58:	4b0a      	ldr	r3, [pc, #40]	; (8014d84 <__swbuf_r+0x9c>)
 8014d5a:	429c      	cmp	r4, r3
 8014d5c:	d101      	bne.n	8014d62 <__swbuf_r+0x7a>
 8014d5e:	68ac      	ldr	r4, [r5, #8]
 8014d60:	e7cf      	b.n	8014d02 <__swbuf_r+0x1a>
 8014d62:	4b09      	ldr	r3, [pc, #36]	; (8014d88 <__swbuf_r+0xa0>)
 8014d64:	429c      	cmp	r4, r3
 8014d66:	bf08      	it	eq
 8014d68:	68ec      	ldreq	r4, [r5, #12]
 8014d6a:	e7ca      	b.n	8014d02 <__swbuf_r+0x1a>
 8014d6c:	4621      	mov	r1, r4
 8014d6e:	4628      	mov	r0, r5
 8014d70:	f000 f80c 	bl	8014d8c <__swsetup_r>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d0cb      	beq.n	8014d10 <__swbuf_r+0x28>
 8014d78:	f04f 37ff 	mov.w	r7, #4294967295
 8014d7c:	e7ea      	b.n	8014d54 <__swbuf_r+0x6c>
 8014d7e:	bf00      	nop
 8014d80:	08018ad0 	.word	0x08018ad0
 8014d84:	08018af0 	.word	0x08018af0
 8014d88:	08018ab0 	.word	0x08018ab0

08014d8c <__swsetup_r>:
 8014d8c:	4b32      	ldr	r3, [pc, #200]	; (8014e58 <__swsetup_r+0xcc>)
 8014d8e:	b570      	push	{r4, r5, r6, lr}
 8014d90:	681d      	ldr	r5, [r3, #0]
 8014d92:	4606      	mov	r6, r0
 8014d94:	460c      	mov	r4, r1
 8014d96:	b125      	cbz	r5, 8014da2 <__swsetup_r+0x16>
 8014d98:	69ab      	ldr	r3, [r5, #24]
 8014d9a:	b913      	cbnz	r3, 8014da2 <__swsetup_r+0x16>
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f000 ff77 	bl	8015c90 <__sinit>
 8014da2:	4b2e      	ldr	r3, [pc, #184]	; (8014e5c <__swsetup_r+0xd0>)
 8014da4:	429c      	cmp	r4, r3
 8014da6:	d10f      	bne.n	8014dc8 <__swsetup_r+0x3c>
 8014da8:	686c      	ldr	r4, [r5, #4]
 8014daa:	89a3      	ldrh	r3, [r4, #12]
 8014dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014db0:	0719      	lsls	r1, r3, #28
 8014db2:	d42c      	bmi.n	8014e0e <__swsetup_r+0x82>
 8014db4:	06dd      	lsls	r5, r3, #27
 8014db6:	d411      	bmi.n	8014ddc <__swsetup_r+0x50>
 8014db8:	2309      	movs	r3, #9
 8014dba:	6033      	str	r3, [r6, #0]
 8014dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014dc0:	81a3      	strh	r3, [r4, #12]
 8014dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc6:	e03e      	b.n	8014e46 <__swsetup_r+0xba>
 8014dc8:	4b25      	ldr	r3, [pc, #148]	; (8014e60 <__swsetup_r+0xd4>)
 8014dca:	429c      	cmp	r4, r3
 8014dcc:	d101      	bne.n	8014dd2 <__swsetup_r+0x46>
 8014dce:	68ac      	ldr	r4, [r5, #8]
 8014dd0:	e7eb      	b.n	8014daa <__swsetup_r+0x1e>
 8014dd2:	4b24      	ldr	r3, [pc, #144]	; (8014e64 <__swsetup_r+0xd8>)
 8014dd4:	429c      	cmp	r4, r3
 8014dd6:	bf08      	it	eq
 8014dd8:	68ec      	ldreq	r4, [r5, #12]
 8014dda:	e7e6      	b.n	8014daa <__swsetup_r+0x1e>
 8014ddc:	0758      	lsls	r0, r3, #29
 8014dde:	d512      	bpl.n	8014e06 <__swsetup_r+0x7a>
 8014de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014de2:	b141      	cbz	r1, 8014df6 <__swsetup_r+0x6a>
 8014de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014de8:	4299      	cmp	r1, r3
 8014dea:	d002      	beq.n	8014df2 <__swsetup_r+0x66>
 8014dec:	4630      	mov	r0, r6
 8014dee:	f7ff f999 	bl	8014124 <_free_r>
 8014df2:	2300      	movs	r3, #0
 8014df4:	6363      	str	r3, [r4, #52]	; 0x34
 8014df6:	89a3      	ldrh	r3, [r4, #12]
 8014df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dfc:	81a3      	strh	r3, [r4, #12]
 8014dfe:	2300      	movs	r3, #0
 8014e00:	6063      	str	r3, [r4, #4]
 8014e02:	6923      	ldr	r3, [r4, #16]
 8014e04:	6023      	str	r3, [r4, #0]
 8014e06:	89a3      	ldrh	r3, [r4, #12]
 8014e08:	f043 0308 	orr.w	r3, r3, #8
 8014e0c:	81a3      	strh	r3, [r4, #12]
 8014e0e:	6923      	ldr	r3, [r4, #16]
 8014e10:	b94b      	cbnz	r3, 8014e26 <__swsetup_r+0x9a>
 8014e12:	89a3      	ldrh	r3, [r4, #12]
 8014e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e1c:	d003      	beq.n	8014e26 <__swsetup_r+0x9a>
 8014e1e:	4621      	mov	r1, r4
 8014e20:	4630      	mov	r0, r6
 8014e22:	f000 ffff 	bl	8015e24 <__smakebuf_r>
 8014e26:	89a0      	ldrh	r0, [r4, #12]
 8014e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e2c:	f010 0301 	ands.w	r3, r0, #1
 8014e30:	d00a      	beq.n	8014e48 <__swsetup_r+0xbc>
 8014e32:	2300      	movs	r3, #0
 8014e34:	60a3      	str	r3, [r4, #8]
 8014e36:	6963      	ldr	r3, [r4, #20]
 8014e38:	425b      	negs	r3, r3
 8014e3a:	61a3      	str	r3, [r4, #24]
 8014e3c:	6923      	ldr	r3, [r4, #16]
 8014e3e:	b943      	cbnz	r3, 8014e52 <__swsetup_r+0xc6>
 8014e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e44:	d1ba      	bne.n	8014dbc <__swsetup_r+0x30>
 8014e46:	bd70      	pop	{r4, r5, r6, pc}
 8014e48:	0781      	lsls	r1, r0, #30
 8014e4a:	bf58      	it	pl
 8014e4c:	6963      	ldrpl	r3, [r4, #20]
 8014e4e:	60a3      	str	r3, [r4, #8]
 8014e50:	e7f4      	b.n	8014e3c <__swsetup_r+0xb0>
 8014e52:	2000      	movs	r0, #0
 8014e54:	e7f7      	b.n	8014e46 <__swsetup_r+0xba>
 8014e56:	bf00      	nop
 8014e58:	2000134c 	.word	0x2000134c
 8014e5c:	08018ad0 	.word	0x08018ad0
 8014e60:	08018af0 	.word	0x08018af0
 8014e64:	08018ab0 	.word	0x08018ab0

08014e68 <quorem>:
 8014e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e6c:	6903      	ldr	r3, [r0, #16]
 8014e6e:	690c      	ldr	r4, [r1, #16]
 8014e70:	42a3      	cmp	r3, r4
 8014e72:	4607      	mov	r7, r0
 8014e74:	f2c0 8081 	blt.w	8014f7a <quorem+0x112>
 8014e78:	3c01      	subs	r4, #1
 8014e7a:	f101 0814 	add.w	r8, r1, #20
 8014e7e:	f100 0514 	add.w	r5, r0, #20
 8014e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e86:	9301      	str	r3, [sp, #4]
 8014e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e90:	3301      	adds	r3, #1
 8014e92:	429a      	cmp	r2, r3
 8014e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ea0:	d331      	bcc.n	8014f06 <quorem+0x9e>
 8014ea2:	f04f 0e00 	mov.w	lr, #0
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	46ac      	mov	ip, r5
 8014eaa:	46f2      	mov	sl, lr
 8014eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8014eb0:	b293      	uxth	r3, r2
 8014eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8014eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014eba:	b29b      	uxth	r3, r3
 8014ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8014ec0:	f8dc a000 	ldr.w	sl, [ip]
 8014ec4:	0c12      	lsrs	r2, r2, #16
 8014ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8014eca:	fb06 e202 	mla	r2, r6, r2, lr
 8014ece:	9300      	str	r3, [sp, #0]
 8014ed0:	9b00      	ldr	r3, [sp, #0]
 8014ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014ed6:	b292      	uxth	r2, r2
 8014ed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8014ee4:	4581      	cmp	r9, r0
 8014ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014eea:	f84c 3b04 	str.w	r3, [ip], #4
 8014eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014ef2:	d2db      	bcs.n	8014eac <quorem+0x44>
 8014ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ef8:	b92b      	cbnz	r3, 8014f06 <quorem+0x9e>
 8014efa:	9b01      	ldr	r3, [sp, #4]
 8014efc:	3b04      	subs	r3, #4
 8014efe:	429d      	cmp	r5, r3
 8014f00:	461a      	mov	r2, r3
 8014f02:	d32e      	bcc.n	8014f62 <quorem+0xfa>
 8014f04:	613c      	str	r4, [r7, #16]
 8014f06:	4638      	mov	r0, r7
 8014f08:	f001 fa5a 	bl	80163c0 <__mcmp>
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	db24      	blt.n	8014f5a <quorem+0xf2>
 8014f10:	3601      	adds	r6, #1
 8014f12:	4628      	mov	r0, r5
 8014f14:	f04f 0c00 	mov.w	ip, #0
 8014f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8014f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8014f20:	b293      	uxth	r3, r2
 8014f22:	ebac 0303 	sub.w	r3, ip, r3
 8014f26:	0c12      	lsrs	r2, r2, #16
 8014f28:	fa13 f38e 	uxtah	r3, r3, lr
 8014f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f3a:	45c1      	cmp	r9, r8
 8014f3c:	f840 3b04 	str.w	r3, [r0], #4
 8014f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014f44:	d2e8      	bcs.n	8014f18 <quorem+0xb0>
 8014f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f4e:	b922      	cbnz	r2, 8014f5a <quorem+0xf2>
 8014f50:	3b04      	subs	r3, #4
 8014f52:	429d      	cmp	r5, r3
 8014f54:	461a      	mov	r2, r3
 8014f56:	d30a      	bcc.n	8014f6e <quorem+0x106>
 8014f58:	613c      	str	r4, [r7, #16]
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	b003      	add	sp, #12
 8014f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f62:	6812      	ldr	r2, [r2, #0]
 8014f64:	3b04      	subs	r3, #4
 8014f66:	2a00      	cmp	r2, #0
 8014f68:	d1cc      	bne.n	8014f04 <quorem+0x9c>
 8014f6a:	3c01      	subs	r4, #1
 8014f6c:	e7c7      	b.n	8014efe <quorem+0x96>
 8014f6e:	6812      	ldr	r2, [r2, #0]
 8014f70:	3b04      	subs	r3, #4
 8014f72:	2a00      	cmp	r2, #0
 8014f74:	d1f0      	bne.n	8014f58 <quorem+0xf0>
 8014f76:	3c01      	subs	r4, #1
 8014f78:	e7eb      	b.n	8014f52 <quorem+0xea>
 8014f7a:	2000      	movs	r0, #0
 8014f7c:	e7ee      	b.n	8014f5c <quorem+0xf4>
	...

08014f80 <_dtoa_r>:
 8014f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f84:	ed2d 8b02 	vpush	{d8}
 8014f88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014f8a:	b091      	sub	sp, #68	; 0x44
 8014f8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014f90:	ec59 8b10 	vmov	r8, r9, d0
 8014f94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014f96:	9106      	str	r1, [sp, #24]
 8014f98:	4606      	mov	r6, r0
 8014f9a:	9208      	str	r2, [sp, #32]
 8014f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f9e:	b975      	cbnz	r5, 8014fbe <_dtoa_r+0x3e>
 8014fa0:	2010      	movs	r0, #16
 8014fa2:	f7ff f87f 	bl	80140a4 <malloc>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	6270      	str	r0, [r6, #36]	; 0x24
 8014faa:	b920      	cbnz	r0, 8014fb6 <_dtoa_r+0x36>
 8014fac:	4baa      	ldr	r3, [pc, #680]	; (8015258 <_dtoa_r+0x2d8>)
 8014fae:	21ea      	movs	r1, #234	; 0xea
 8014fb0:	48aa      	ldr	r0, [pc, #680]	; (801525c <_dtoa_r+0x2dc>)
 8014fb2:	f001 fe57 	bl	8016c64 <__assert_func>
 8014fb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014fba:	6005      	str	r5, [r0, #0]
 8014fbc:	60c5      	str	r5, [r0, #12]
 8014fbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014fc0:	6819      	ldr	r1, [r3, #0]
 8014fc2:	b151      	cbz	r1, 8014fda <_dtoa_r+0x5a>
 8014fc4:	685a      	ldr	r2, [r3, #4]
 8014fc6:	604a      	str	r2, [r1, #4]
 8014fc8:	2301      	movs	r3, #1
 8014fca:	4093      	lsls	r3, r2
 8014fcc:	608b      	str	r3, [r1, #8]
 8014fce:	4630      	mov	r0, r6
 8014fd0:	f000 ffb4 	bl	8015f3c <_Bfree>
 8014fd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	601a      	str	r2, [r3, #0]
 8014fda:	f1b9 0300 	subs.w	r3, r9, #0
 8014fde:	bfbb      	ittet	lt
 8014fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014fe4:	9303      	strlt	r3, [sp, #12]
 8014fe6:	2300      	movge	r3, #0
 8014fe8:	2201      	movlt	r2, #1
 8014fea:	bfac      	ite	ge
 8014fec:	6023      	strge	r3, [r4, #0]
 8014fee:	6022      	strlt	r2, [r4, #0]
 8014ff0:	4b9b      	ldr	r3, [pc, #620]	; (8015260 <_dtoa_r+0x2e0>)
 8014ff2:	9c03      	ldr	r4, [sp, #12]
 8014ff4:	43a3      	bics	r3, r4
 8014ff6:	d11c      	bne.n	8015032 <_dtoa_r+0xb2>
 8014ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ffa:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ffe:	6013      	str	r3, [r2, #0]
 8015000:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015004:	ea53 0308 	orrs.w	r3, r3, r8
 8015008:	f000 84fd 	beq.w	8015a06 <_dtoa_r+0xa86>
 801500c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801500e:	b963      	cbnz	r3, 801502a <_dtoa_r+0xaa>
 8015010:	4b94      	ldr	r3, [pc, #592]	; (8015264 <_dtoa_r+0x2e4>)
 8015012:	e01f      	b.n	8015054 <_dtoa_r+0xd4>
 8015014:	4b94      	ldr	r3, [pc, #592]	; (8015268 <_dtoa_r+0x2e8>)
 8015016:	9301      	str	r3, [sp, #4]
 8015018:	3308      	adds	r3, #8
 801501a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	9801      	ldr	r0, [sp, #4]
 8015020:	b011      	add	sp, #68	; 0x44
 8015022:	ecbd 8b02 	vpop	{d8}
 8015026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502a:	4b8e      	ldr	r3, [pc, #568]	; (8015264 <_dtoa_r+0x2e4>)
 801502c:	9301      	str	r3, [sp, #4]
 801502e:	3303      	adds	r3, #3
 8015030:	e7f3      	b.n	801501a <_dtoa_r+0x9a>
 8015032:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015036:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503e:	d10b      	bne.n	8015058 <_dtoa_r+0xd8>
 8015040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015042:	2301      	movs	r3, #1
 8015044:	6013      	str	r3, [r2, #0]
 8015046:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015048:	2b00      	cmp	r3, #0
 801504a:	f000 84d9 	beq.w	8015a00 <_dtoa_r+0xa80>
 801504e:	4887      	ldr	r0, [pc, #540]	; (801526c <_dtoa_r+0x2ec>)
 8015050:	6018      	str	r0, [r3, #0]
 8015052:	1e43      	subs	r3, r0, #1
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	e7e2      	b.n	801501e <_dtoa_r+0x9e>
 8015058:	a90f      	add	r1, sp, #60	; 0x3c
 801505a:	aa0e      	add	r2, sp, #56	; 0x38
 801505c:	4630      	mov	r0, r6
 801505e:	eeb0 0b48 	vmov.f64	d0, d8
 8015062:	f001 fa53 	bl	801650c <__d2b>
 8015066:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801506a:	4605      	mov	r5, r0
 801506c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801506e:	2900      	cmp	r1, #0
 8015070:	d046      	beq.n	8015100 <_dtoa_r+0x180>
 8015072:	ee18 4a90 	vmov	r4, s17
 8015076:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801507a:	ec53 2b18 	vmov	r2, r3, d8
 801507e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8015082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015086:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801508a:	2400      	movs	r4, #0
 801508c:	ec43 2b16 	vmov	d6, r2, r3
 8015090:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015094:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015240 <_dtoa_r+0x2c0>
 8015098:	ee36 7b47 	vsub.f64	d7, d6, d7
 801509c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015248 <_dtoa_r+0x2c8>
 80150a0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80150a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015250 <_dtoa_r+0x2d0>
 80150a8:	ee07 1a90 	vmov	s15, r1
 80150ac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80150b0:	eeb0 7b46 	vmov.f64	d7, d6
 80150b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80150b8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80150bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80150c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c4:	ee16 ba90 	vmov	fp, s13
 80150c8:	940a      	str	r4, [sp, #40]	; 0x28
 80150ca:	d508      	bpl.n	80150de <_dtoa_r+0x15e>
 80150cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80150d0:	eeb4 6b47 	vcmp.f64	d6, d7
 80150d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150d8:	bf18      	it	ne
 80150da:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80150de:	f1bb 0f16 	cmp.w	fp, #22
 80150e2:	d82f      	bhi.n	8015144 <_dtoa_r+0x1c4>
 80150e4:	4b62      	ldr	r3, [pc, #392]	; (8015270 <_dtoa_r+0x2f0>)
 80150e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80150ea:	ed93 7b00 	vldr	d7, [r3]
 80150ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80150f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f6:	d501      	bpl.n	80150fc <_dtoa_r+0x17c>
 80150f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150fc:	2300      	movs	r3, #0
 80150fe:	e022      	b.n	8015146 <_dtoa_r+0x1c6>
 8015100:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015102:	4401      	add	r1, r0
 8015104:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015108:	2b20      	cmp	r3, #32
 801510a:	bfc1      	itttt	gt
 801510c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015110:	fa04 f303 	lslgt.w	r3, r4, r3
 8015114:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015118:	fa28 f804 	lsrgt.w	r8, r8, r4
 801511c:	bfd6      	itet	le
 801511e:	f1c3 0320 	rsble	r3, r3, #32
 8015122:	ea43 0808 	orrgt.w	r8, r3, r8
 8015126:	fa08 f803 	lslle.w	r8, r8, r3
 801512a:	ee07 8a90 	vmov	s15, r8
 801512e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015132:	3901      	subs	r1, #1
 8015134:	ee17 4a90 	vmov	r4, s15
 8015138:	ec53 2b17 	vmov	r2, r3, d7
 801513c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015140:	2401      	movs	r4, #1
 8015142:	e7a3      	b.n	801508c <_dtoa_r+0x10c>
 8015144:	2301      	movs	r3, #1
 8015146:	930b      	str	r3, [sp, #44]	; 0x2c
 8015148:	1a43      	subs	r3, r0, r1
 801514a:	1e5a      	subs	r2, r3, #1
 801514c:	bf45      	ittet	mi
 801514e:	f1c3 0301 	rsbmi	r3, r3, #1
 8015152:	9304      	strmi	r3, [sp, #16]
 8015154:	2300      	movpl	r3, #0
 8015156:	2300      	movmi	r3, #0
 8015158:	9205      	str	r2, [sp, #20]
 801515a:	bf54      	ite	pl
 801515c:	9304      	strpl	r3, [sp, #16]
 801515e:	9305      	strmi	r3, [sp, #20]
 8015160:	f1bb 0f00 	cmp.w	fp, #0
 8015164:	db18      	blt.n	8015198 <_dtoa_r+0x218>
 8015166:	9b05      	ldr	r3, [sp, #20]
 8015168:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801516c:	445b      	add	r3, fp
 801516e:	9305      	str	r3, [sp, #20]
 8015170:	2300      	movs	r3, #0
 8015172:	9a06      	ldr	r2, [sp, #24]
 8015174:	2a09      	cmp	r2, #9
 8015176:	d849      	bhi.n	801520c <_dtoa_r+0x28c>
 8015178:	2a05      	cmp	r2, #5
 801517a:	bfc4      	itt	gt
 801517c:	3a04      	subgt	r2, #4
 801517e:	9206      	strgt	r2, [sp, #24]
 8015180:	9a06      	ldr	r2, [sp, #24]
 8015182:	f1a2 0202 	sub.w	r2, r2, #2
 8015186:	bfcc      	ite	gt
 8015188:	2400      	movgt	r4, #0
 801518a:	2401      	movle	r4, #1
 801518c:	2a03      	cmp	r2, #3
 801518e:	d848      	bhi.n	8015222 <_dtoa_r+0x2a2>
 8015190:	e8df f002 	tbb	[pc, r2]
 8015194:	3a2c2e0b 	.word	0x3a2c2e0b
 8015198:	9b04      	ldr	r3, [sp, #16]
 801519a:	2200      	movs	r2, #0
 801519c:	eba3 030b 	sub.w	r3, r3, fp
 80151a0:	9304      	str	r3, [sp, #16]
 80151a2:	9209      	str	r2, [sp, #36]	; 0x24
 80151a4:	f1cb 0300 	rsb	r3, fp, #0
 80151a8:	e7e3      	b.n	8015172 <_dtoa_r+0x1f2>
 80151aa:	2200      	movs	r2, #0
 80151ac:	9207      	str	r2, [sp, #28]
 80151ae:	9a08      	ldr	r2, [sp, #32]
 80151b0:	2a00      	cmp	r2, #0
 80151b2:	dc39      	bgt.n	8015228 <_dtoa_r+0x2a8>
 80151b4:	f04f 0a01 	mov.w	sl, #1
 80151b8:	46d1      	mov	r9, sl
 80151ba:	4652      	mov	r2, sl
 80151bc:	f8cd a020 	str.w	sl, [sp, #32]
 80151c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80151c2:	2100      	movs	r1, #0
 80151c4:	6079      	str	r1, [r7, #4]
 80151c6:	2004      	movs	r0, #4
 80151c8:	f100 0c14 	add.w	ip, r0, #20
 80151cc:	4594      	cmp	ip, r2
 80151ce:	6879      	ldr	r1, [r7, #4]
 80151d0:	d92f      	bls.n	8015232 <_dtoa_r+0x2b2>
 80151d2:	4630      	mov	r0, r6
 80151d4:	930d      	str	r3, [sp, #52]	; 0x34
 80151d6:	f000 fe71 	bl	8015ebc <_Balloc>
 80151da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151dc:	9001      	str	r0, [sp, #4]
 80151de:	4602      	mov	r2, r0
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d149      	bne.n	8015278 <_dtoa_r+0x2f8>
 80151e4:	4b23      	ldr	r3, [pc, #140]	; (8015274 <_dtoa_r+0x2f4>)
 80151e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80151ea:	e6e1      	b.n	8014fb0 <_dtoa_r+0x30>
 80151ec:	2201      	movs	r2, #1
 80151ee:	e7dd      	b.n	80151ac <_dtoa_r+0x22c>
 80151f0:	2200      	movs	r2, #0
 80151f2:	9207      	str	r2, [sp, #28]
 80151f4:	9a08      	ldr	r2, [sp, #32]
 80151f6:	eb0b 0a02 	add.w	sl, fp, r2
 80151fa:	f10a 0901 	add.w	r9, sl, #1
 80151fe:	464a      	mov	r2, r9
 8015200:	2a01      	cmp	r2, #1
 8015202:	bfb8      	it	lt
 8015204:	2201      	movlt	r2, #1
 8015206:	e7db      	b.n	80151c0 <_dtoa_r+0x240>
 8015208:	2201      	movs	r2, #1
 801520a:	e7f2      	b.n	80151f2 <_dtoa_r+0x272>
 801520c:	2401      	movs	r4, #1
 801520e:	2200      	movs	r2, #0
 8015210:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015214:	f04f 3aff 	mov.w	sl, #4294967295
 8015218:	2100      	movs	r1, #0
 801521a:	46d1      	mov	r9, sl
 801521c:	2212      	movs	r2, #18
 801521e:	9108      	str	r1, [sp, #32]
 8015220:	e7ce      	b.n	80151c0 <_dtoa_r+0x240>
 8015222:	2201      	movs	r2, #1
 8015224:	9207      	str	r2, [sp, #28]
 8015226:	e7f5      	b.n	8015214 <_dtoa_r+0x294>
 8015228:	f8dd a020 	ldr.w	sl, [sp, #32]
 801522c:	46d1      	mov	r9, sl
 801522e:	4652      	mov	r2, sl
 8015230:	e7c6      	b.n	80151c0 <_dtoa_r+0x240>
 8015232:	3101      	adds	r1, #1
 8015234:	6079      	str	r1, [r7, #4]
 8015236:	0040      	lsls	r0, r0, #1
 8015238:	e7c6      	b.n	80151c8 <_dtoa_r+0x248>
 801523a:	bf00      	nop
 801523c:	f3af 8000 	nop.w
 8015240:	636f4361 	.word	0x636f4361
 8015244:	3fd287a7 	.word	0x3fd287a7
 8015248:	8b60c8b3 	.word	0x8b60c8b3
 801524c:	3fc68a28 	.word	0x3fc68a28
 8015250:	509f79fb 	.word	0x509f79fb
 8015254:	3fd34413 	.word	0x3fd34413
 8015258:	08018a2d 	.word	0x08018a2d
 801525c:	08018a44 	.word	0x08018a44
 8015260:	7ff00000 	.word	0x7ff00000
 8015264:	08018a29 	.word	0x08018a29
 8015268:	08018a20 	.word	0x08018a20
 801526c:	080189fd 	.word	0x080189fd
 8015270:	08018b98 	.word	0x08018b98
 8015274:	08018a9f 	.word	0x08018a9f
 8015278:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801527a:	9901      	ldr	r1, [sp, #4]
 801527c:	6011      	str	r1, [r2, #0]
 801527e:	f1b9 0f0e 	cmp.w	r9, #14
 8015282:	d86c      	bhi.n	801535e <_dtoa_r+0x3de>
 8015284:	2c00      	cmp	r4, #0
 8015286:	d06a      	beq.n	801535e <_dtoa_r+0x3de>
 8015288:	f1bb 0f00 	cmp.w	fp, #0
 801528c:	f340 80a0 	ble.w	80153d0 <_dtoa_r+0x450>
 8015290:	49c1      	ldr	r1, [pc, #772]	; (8015598 <_dtoa_r+0x618>)
 8015292:	f00b 020f 	and.w	r2, fp, #15
 8015296:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801529a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801529e:	ed92 7b00 	vldr	d7, [r2]
 80152a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80152a6:	f000 8087 	beq.w	80153b8 <_dtoa_r+0x438>
 80152aa:	4abc      	ldr	r2, [pc, #752]	; (801559c <_dtoa_r+0x61c>)
 80152ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80152b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80152b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80152b8:	f001 010f 	and.w	r1, r1, #15
 80152bc:	2203      	movs	r2, #3
 80152be:	48b7      	ldr	r0, [pc, #732]	; (801559c <_dtoa_r+0x61c>)
 80152c0:	2900      	cmp	r1, #0
 80152c2:	d17b      	bne.n	80153bc <_dtoa_r+0x43c>
 80152c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80152c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80152cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152d2:	2900      	cmp	r1, #0
 80152d4:	f000 80a2 	beq.w	801541c <_dtoa_r+0x49c>
 80152d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80152dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80152e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e8:	f140 8098 	bpl.w	801541c <_dtoa_r+0x49c>
 80152ec:	f1b9 0f00 	cmp.w	r9, #0
 80152f0:	f000 8094 	beq.w	801541c <_dtoa_r+0x49c>
 80152f4:	f1ba 0f00 	cmp.w	sl, #0
 80152f8:	dd2f      	ble.n	801535a <_dtoa_r+0x3da>
 80152fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80152fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015302:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015306:	f10b 37ff 	add.w	r7, fp, #4294967295
 801530a:	3201      	adds	r2, #1
 801530c:	4650      	mov	r0, sl
 801530e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015312:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015316:	ee07 2a90 	vmov	s15, r2
 801531a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801531e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015322:	ee15 4a90 	vmov	r4, s11
 8015326:	ec52 1b15 	vmov	r1, r2, d5
 801532a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801532e:	2800      	cmp	r0, #0
 8015330:	d177      	bne.n	8015422 <_dtoa_r+0x4a2>
 8015332:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015336:	ee36 6b47 	vsub.f64	d6, d6, d7
 801533a:	ec42 1b17 	vmov	d7, r1, r2
 801533e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015346:	f300 8263 	bgt.w	8015810 <_dtoa_r+0x890>
 801534a:	eeb1 7b47 	vneg.f64	d7, d7
 801534e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015356:	f100 8258 	bmi.w	801580a <_dtoa_r+0x88a>
 801535a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801535e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015360:	2a00      	cmp	r2, #0
 8015362:	f2c0 811d 	blt.w	80155a0 <_dtoa_r+0x620>
 8015366:	f1bb 0f0e 	cmp.w	fp, #14
 801536a:	f300 8119 	bgt.w	80155a0 <_dtoa_r+0x620>
 801536e:	4b8a      	ldr	r3, [pc, #552]	; (8015598 <_dtoa_r+0x618>)
 8015370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015374:	ed93 6b00 	vldr	d6, [r3]
 8015378:	9b08      	ldr	r3, [sp, #32]
 801537a:	2b00      	cmp	r3, #0
 801537c:	f280 80b7 	bge.w	80154ee <_dtoa_r+0x56e>
 8015380:	f1b9 0f00 	cmp.w	r9, #0
 8015384:	f300 80b3 	bgt.w	80154ee <_dtoa_r+0x56e>
 8015388:	f040 823f 	bne.w	801580a <_dtoa_r+0x88a>
 801538c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015390:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015398:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a0:	464c      	mov	r4, r9
 80153a2:	464f      	mov	r7, r9
 80153a4:	f280 8215 	bge.w	80157d2 <_dtoa_r+0x852>
 80153a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80153ac:	2331      	movs	r3, #49	; 0x31
 80153ae:	f808 3b01 	strb.w	r3, [r8], #1
 80153b2:	f10b 0b01 	add.w	fp, fp, #1
 80153b6:	e211      	b.n	80157dc <_dtoa_r+0x85c>
 80153b8:	2202      	movs	r2, #2
 80153ba:	e780      	b.n	80152be <_dtoa_r+0x33e>
 80153bc:	07cc      	lsls	r4, r1, #31
 80153be:	d504      	bpl.n	80153ca <_dtoa_r+0x44a>
 80153c0:	ed90 6b00 	vldr	d6, [r0]
 80153c4:	3201      	adds	r2, #1
 80153c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80153ca:	1049      	asrs	r1, r1, #1
 80153cc:	3008      	adds	r0, #8
 80153ce:	e777      	b.n	80152c0 <_dtoa_r+0x340>
 80153d0:	d022      	beq.n	8015418 <_dtoa_r+0x498>
 80153d2:	f1cb 0100 	rsb	r1, fp, #0
 80153d6:	4a70      	ldr	r2, [pc, #448]	; (8015598 <_dtoa_r+0x618>)
 80153d8:	f001 000f 	and.w	r0, r1, #15
 80153dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80153e0:	ed92 7b00 	vldr	d7, [r2]
 80153e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80153e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80153ec:	486b      	ldr	r0, [pc, #428]	; (801559c <_dtoa_r+0x61c>)
 80153ee:	1109      	asrs	r1, r1, #4
 80153f0:	2400      	movs	r4, #0
 80153f2:	2202      	movs	r2, #2
 80153f4:	b929      	cbnz	r1, 8015402 <_dtoa_r+0x482>
 80153f6:	2c00      	cmp	r4, #0
 80153f8:	f43f af6a 	beq.w	80152d0 <_dtoa_r+0x350>
 80153fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015400:	e766      	b.n	80152d0 <_dtoa_r+0x350>
 8015402:	07cf      	lsls	r7, r1, #31
 8015404:	d505      	bpl.n	8015412 <_dtoa_r+0x492>
 8015406:	ed90 6b00 	vldr	d6, [r0]
 801540a:	3201      	adds	r2, #1
 801540c:	2401      	movs	r4, #1
 801540e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015412:	1049      	asrs	r1, r1, #1
 8015414:	3008      	adds	r0, #8
 8015416:	e7ed      	b.n	80153f4 <_dtoa_r+0x474>
 8015418:	2202      	movs	r2, #2
 801541a:	e759      	b.n	80152d0 <_dtoa_r+0x350>
 801541c:	465f      	mov	r7, fp
 801541e:	4648      	mov	r0, r9
 8015420:	e775      	b.n	801530e <_dtoa_r+0x38e>
 8015422:	ec42 1b17 	vmov	d7, r1, r2
 8015426:	4a5c      	ldr	r2, [pc, #368]	; (8015598 <_dtoa_r+0x618>)
 8015428:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801542c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015430:	9a01      	ldr	r2, [sp, #4]
 8015432:	1814      	adds	r4, r2, r0
 8015434:	9a07      	ldr	r2, [sp, #28]
 8015436:	b352      	cbz	r2, 801548e <_dtoa_r+0x50e>
 8015438:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801543c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015440:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015444:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015448:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801544c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015450:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015454:	ee14 2a90 	vmov	r2, s9
 8015458:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801545c:	3230      	adds	r2, #48	; 0x30
 801545e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015462:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546a:	f808 2b01 	strb.w	r2, [r8], #1
 801546e:	d439      	bmi.n	80154e4 <_dtoa_r+0x564>
 8015470:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015474:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801547c:	d472      	bmi.n	8015564 <_dtoa_r+0x5e4>
 801547e:	45a0      	cmp	r8, r4
 8015480:	f43f af6b 	beq.w	801535a <_dtoa_r+0x3da>
 8015484:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015488:	ee26 6b03 	vmul.f64	d6, d6, d3
 801548c:	e7e0      	b.n	8015450 <_dtoa_r+0x4d0>
 801548e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015492:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015496:	4621      	mov	r1, r4
 8015498:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801549c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80154a0:	ee14 2a90 	vmov	r2, s9
 80154a4:	3230      	adds	r2, #48	; 0x30
 80154a6:	f808 2b01 	strb.w	r2, [r8], #1
 80154aa:	45a0      	cmp	r8, r4
 80154ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80154b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80154b4:	d118      	bne.n	80154e8 <_dtoa_r+0x568>
 80154b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80154ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80154be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80154c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c6:	dc4d      	bgt.n	8015564 <_dtoa_r+0x5e4>
 80154c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80154cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80154d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d4:	f57f af41 	bpl.w	801535a <_dtoa_r+0x3da>
 80154d8:	4688      	mov	r8, r1
 80154da:	3901      	subs	r1, #1
 80154dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80154e0:	2b30      	cmp	r3, #48	; 0x30
 80154e2:	d0f9      	beq.n	80154d8 <_dtoa_r+0x558>
 80154e4:	46bb      	mov	fp, r7
 80154e6:	e02a      	b.n	801553e <_dtoa_r+0x5be>
 80154e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80154ec:	e7d6      	b.n	801549c <_dtoa_r+0x51c>
 80154ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80154f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80154f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80154fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80154fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015502:	ee15 3a10 	vmov	r3, s10
 8015506:	3330      	adds	r3, #48	; 0x30
 8015508:	f808 3b01 	strb.w	r3, [r8], #1
 801550c:	9b01      	ldr	r3, [sp, #4]
 801550e:	eba8 0303 	sub.w	r3, r8, r3
 8015512:	4599      	cmp	r9, r3
 8015514:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015518:	eea3 7b46 	vfms.f64	d7, d3, d6
 801551c:	d133      	bne.n	8015586 <_dtoa_r+0x606>
 801551e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015522:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801552a:	dc1a      	bgt.n	8015562 <_dtoa_r+0x5e2>
 801552c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015534:	d103      	bne.n	801553e <_dtoa_r+0x5be>
 8015536:	ee15 3a10 	vmov	r3, s10
 801553a:	07d9      	lsls	r1, r3, #31
 801553c:	d411      	bmi.n	8015562 <_dtoa_r+0x5e2>
 801553e:	4629      	mov	r1, r5
 8015540:	4630      	mov	r0, r6
 8015542:	f000 fcfb 	bl	8015f3c <_Bfree>
 8015546:	2300      	movs	r3, #0
 8015548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801554a:	f888 3000 	strb.w	r3, [r8]
 801554e:	f10b 0301 	add.w	r3, fp, #1
 8015552:	6013      	str	r3, [r2, #0]
 8015554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015556:	2b00      	cmp	r3, #0
 8015558:	f43f ad61 	beq.w	801501e <_dtoa_r+0x9e>
 801555c:	f8c3 8000 	str.w	r8, [r3]
 8015560:	e55d      	b.n	801501e <_dtoa_r+0x9e>
 8015562:	465f      	mov	r7, fp
 8015564:	4643      	mov	r3, r8
 8015566:	4698      	mov	r8, r3
 8015568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801556c:	2a39      	cmp	r2, #57	; 0x39
 801556e:	d106      	bne.n	801557e <_dtoa_r+0x5fe>
 8015570:	9a01      	ldr	r2, [sp, #4]
 8015572:	429a      	cmp	r2, r3
 8015574:	d1f7      	bne.n	8015566 <_dtoa_r+0x5e6>
 8015576:	9901      	ldr	r1, [sp, #4]
 8015578:	2230      	movs	r2, #48	; 0x30
 801557a:	3701      	adds	r7, #1
 801557c:	700a      	strb	r2, [r1, #0]
 801557e:	781a      	ldrb	r2, [r3, #0]
 8015580:	3201      	adds	r2, #1
 8015582:	701a      	strb	r2, [r3, #0]
 8015584:	e7ae      	b.n	80154e4 <_dtoa_r+0x564>
 8015586:	ee27 7b04 	vmul.f64	d7, d7, d4
 801558a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015592:	d1b2      	bne.n	80154fa <_dtoa_r+0x57a>
 8015594:	e7d3      	b.n	801553e <_dtoa_r+0x5be>
 8015596:	bf00      	nop
 8015598:	08018b98 	.word	0x08018b98
 801559c:	08018b70 	.word	0x08018b70
 80155a0:	9907      	ldr	r1, [sp, #28]
 80155a2:	2900      	cmp	r1, #0
 80155a4:	f000 80d0 	beq.w	8015748 <_dtoa_r+0x7c8>
 80155a8:	9906      	ldr	r1, [sp, #24]
 80155aa:	2901      	cmp	r1, #1
 80155ac:	f300 80b4 	bgt.w	8015718 <_dtoa_r+0x798>
 80155b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80155b2:	2900      	cmp	r1, #0
 80155b4:	f000 80ac 	beq.w	8015710 <_dtoa_r+0x790>
 80155b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80155bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80155c0:	461c      	mov	r4, r3
 80155c2:	930a      	str	r3, [sp, #40]	; 0x28
 80155c4:	9b04      	ldr	r3, [sp, #16]
 80155c6:	4413      	add	r3, r2
 80155c8:	9304      	str	r3, [sp, #16]
 80155ca:	9b05      	ldr	r3, [sp, #20]
 80155cc:	2101      	movs	r1, #1
 80155ce:	4413      	add	r3, r2
 80155d0:	4630      	mov	r0, r6
 80155d2:	9305      	str	r3, [sp, #20]
 80155d4:	f000 fd6a 	bl	80160ac <__i2b>
 80155d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155da:	4607      	mov	r7, r0
 80155dc:	f1b8 0f00 	cmp.w	r8, #0
 80155e0:	dd0d      	ble.n	80155fe <_dtoa_r+0x67e>
 80155e2:	9a05      	ldr	r2, [sp, #20]
 80155e4:	2a00      	cmp	r2, #0
 80155e6:	dd0a      	ble.n	80155fe <_dtoa_r+0x67e>
 80155e8:	4542      	cmp	r2, r8
 80155ea:	9904      	ldr	r1, [sp, #16]
 80155ec:	bfa8      	it	ge
 80155ee:	4642      	movge	r2, r8
 80155f0:	1a89      	subs	r1, r1, r2
 80155f2:	9104      	str	r1, [sp, #16]
 80155f4:	9905      	ldr	r1, [sp, #20]
 80155f6:	eba8 0802 	sub.w	r8, r8, r2
 80155fa:	1a8a      	subs	r2, r1, r2
 80155fc:	9205      	str	r2, [sp, #20]
 80155fe:	b303      	cbz	r3, 8015642 <_dtoa_r+0x6c2>
 8015600:	9a07      	ldr	r2, [sp, #28]
 8015602:	2a00      	cmp	r2, #0
 8015604:	f000 80a5 	beq.w	8015752 <_dtoa_r+0x7d2>
 8015608:	2c00      	cmp	r4, #0
 801560a:	dd13      	ble.n	8015634 <_dtoa_r+0x6b4>
 801560c:	4639      	mov	r1, r7
 801560e:	4622      	mov	r2, r4
 8015610:	4630      	mov	r0, r6
 8015612:	930d      	str	r3, [sp, #52]	; 0x34
 8015614:	f000 fe0a 	bl	801622c <__pow5mult>
 8015618:	462a      	mov	r2, r5
 801561a:	4601      	mov	r1, r0
 801561c:	4607      	mov	r7, r0
 801561e:	4630      	mov	r0, r6
 8015620:	f000 fd5a 	bl	80160d8 <__multiply>
 8015624:	4629      	mov	r1, r5
 8015626:	900a      	str	r0, [sp, #40]	; 0x28
 8015628:	4630      	mov	r0, r6
 801562a:	f000 fc87 	bl	8015f3c <_Bfree>
 801562e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015632:	4615      	mov	r5, r2
 8015634:	1b1a      	subs	r2, r3, r4
 8015636:	d004      	beq.n	8015642 <_dtoa_r+0x6c2>
 8015638:	4629      	mov	r1, r5
 801563a:	4630      	mov	r0, r6
 801563c:	f000 fdf6 	bl	801622c <__pow5mult>
 8015640:	4605      	mov	r5, r0
 8015642:	2101      	movs	r1, #1
 8015644:	4630      	mov	r0, r6
 8015646:	f000 fd31 	bl	80160ac <__i2b>
 801564a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564c:	2b00      	cmp	r3, #0
 801564e:	4604      	mov	r4, r0
 8015650:	f340 8081 	ble.w	8015756 <_dtoa_r+0x7d6>
 8015654:	461a      	mov	r2, r3
 8015656:	4601      	mov	r1, r0
 8015658:	4630      	mov	r0, r6
 801565a:	f000 fde7 	bl	801622c <__pow5mult>
 801565e:	9b06      	ldr	r3, [sp, #24]
 8015660:	2b01      	cmp	r3, #1
 8015662:	4604      	mov	r4, r0
 8015664:	dd7a      	ble.n	801575c <_dtoa_r+0x7dc>
 8015666:	2300      	movs	r3, #0
 8015668:	930a      	str	r3, [sp, #40]	; 0x28
 801566a:	6922      	ldr	r2, [r4, #16]
 801566c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015670:	6910      	ldr	r0, [r2, #16]
 8015672:	f000 fccb 	bl	801600c <__hi0bits>
 8015676:	f1c0 0020 	rsb	r0, r0, #32
 801567a:	9b05      	ldr	r3, [sp, #20]
 801567c:	4418      	add	r0, r3
 801567e:	f010 001f 	ands.w	r0, r0, #31
 8015682:	f000 808c 	beq.w	801579e <_dtoa_r+0x81e>
 8015686:	f1c0 0220 	rsb	r2, r0, #32
 801568a:	2a04      	cmp	r2, #4
 801568c:	f340 8085 	ble.w	801579a <_dtoa_r+0x81a>
 8015690:	f1c0 001c 	rsb	r0, r0, #28
 8015694:	9b04      	ldr	r3, [sp, #16]
 8015696:	4403      	add	r3, r0
 8015698:	9304      	str	r3, [sp, #16]
 801569a:	9b05      	ldr	r3, [sp, #20]
 801569c:	4403      	add	r3, r0
 801569e:	4480      	add	r8, r0
 80156a0:	9305      	str	r3, [sp, #20]
 80156a2:	9b04      	ldr	r3, [sp, #16]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	dd05      	ble.n	80156b4 <_dtoa_r+0x734>
 80156a8:	4629      	mov	r1, r5
 80156aa:	461a      	mov	r2, r3
 80156ac:	4630      	mov	r0, r6
 80156ae:	f000 fe17 	bl	80162e0 <__lshift>
 80156b2:	4605      	mov	r5, r0
 80156b4:	9b05      	ldr	r3, [sp, #20]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	dd05      	ble.n	80156c6 <_dtoa_r+0x746>
 80156ba:	4621      	mov	r1, r4
 80156bc:	461a      	mov	r2, r3
 80156be:	4630      	mov	r0, r6
 80156c0:	f000 fe0e 	bl	80162e0 <__lshift>
 80156c4:	4604      	mov	r4, r0
 80156c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d06a      	beq.n	80157a2 <_dtoa_r+0x822>
 80156cc:	4621      	mov	r1, r4
 80156ce:	4628      	mov	r0, r5
 80156d0:	f000 fe76 	bl	80163c0 <__mcmp>
 80156d4:	2800      	cmp	r0, #0
 80156d6:	da64      	bge.n	80157a2 <_dtoa_r+0x822>
 80156d8:	2300      	movs	r3, #0
 80156da:	4629      	mov	r1, r5
 80156dc:	220a      	movs	r2, #10
 80156de:	4630      	mov	r0, r6
 80156e0:	f000 fc4e 	bl	8015f80 <__multadd>
 80156e4:	9b07      	ldr	r3, [sp, #28]
 80156e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156ea:	4605      	mov	r5, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	f000 8191 	beq.w	8015a14 <_dtoa_r+0xa94>
 80156f2:	4639      	mov	r1, r7
 80156f4:	2300      	movs	r3, #0
 80156f6:	220a      	movs	r2, #10
 80156f8:	4630      	mov	r0, r6
 80156fa:	f000 fc41 	bl	8015f80 <__multadd>
 80156fe:	f1ba 0f00 	cmp.w	sl, #0
 8015702:	4607      	mov	r7, r0
 8015704:	f300 808d 	bgt.w	8015822 <_dtoa_r+0x8a2>
 8015708:	9b06      	ldr	r3, [sp, #24]
 801570a:	2b02      	cmp	r3, #2
 801570c:	dc50      	bgt.n	80157b0 <_dtoa_r+0x830>
 801570e:	e088      	b.n	8015822 <_dtoa_r+0x8a2>
 8015710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015712:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015716:	e751      	b.n	80155bc <_dtoa_r+0x63c>
 8015718:	f109 34ff 	add.w	r4, r9, #4294967295
 801571c:	42a3      	cmp	r3, r4
 801571e:	bfbf      	itttt	lt
 8015720:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8015722:	1ae3      	sublt	r3, r4, r3
 8015724:	18d2      	addlt	r2, r2, r3
 8015726:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015728:	bfb6      	itet	lt
 801572a:	4623      	movlt	r3, r4
 801572c:	1b1c      	subge	r4, r3, r4
 801572e:	2400      	movlt	r4, #0
 8015730:	f1b9 0f00 	cmp.w	r9, #0
 8015734:	bfb5      	itete	lt
 8015736:	9a04      	ldrlt	r2, [sp, #16]
 8015738:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801573c:	eba2 0809 	sublt.w	r8, r2, r9
 8015740:	464a      	movge	r2, r9
 8015742:	bfb8      	it	lt
 8015744:	2200      	movlt	r2, #0
 8015746:	e73c      	b.n	80155c2 <_dtoa_r+0x642>
 8015748:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801574c:	9f07      	ldr	r7, [sp, #28]
 801574e:	461c      	mov	r4, r3
 8015750:	e744      	b.n	80155dc <_dtoa_r+0x65c>
 8015752:	461a      	mov	r2, r3
 8015754:	e770      	b.n	8015638 <_dtoa_r+0x6b8>
 8015756:	9b06      	ldr	r3, [sp, #24]
 8015758:	2b01      	cmp	r3, #1
 801575a:	dc18      	bgt.n	801578e <_dtoa_r+0x80e>
 801575c:	9b02      	ldr	r3, [sp, #8]
 801575e:	b9b3      	cbnz	r3, 801578e <_dtoa_r+0x80e>
 8015760:	9b03      	ldr	r3, [sp, #12]
 8015762:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015766:	b9a2      	cbnz	r2, 8015792 <_dtoa_r+0x812>
 8015768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801576c:	0d12      	lsrs	r2, r2, #20
 801576e:	0512      	lsls	r2, r2, #20
 8015770:	b18a      	cbz	r2, 8015796 <_dtoa_r+0x816>
 8015772:	9b04      	ldr	r3, [sp, #16]
 8015774:	3301      	adds	r3, #1
 8015776:	9304      	str	r3, [sp, #16]
 8015778:	9b05      	ldr	r3, [sp, #20]
 801577a:	3301      	adds	r3, #1
 801577c:	9305      	str	r3, [sp, #20]
 801577e:	2301      	movs	r3, #1
 8015780:	930a      	str	r3, [sp, #40]	; 0x28
 8015782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015784:	2b00      	cmp	r3, #0
 8015786:	f47f af70 	bne.w	801566a <_dtoa_r+0x6ea>
 801578a:	2001      	movs	r0, #1
 801578c:	e775      	b.n	801567a <_dtoa_r+0x6fa>
 801578e:	2300      	movs	r3, #0
 8015790:	e7f6      	b.n	8015780 <_dtoa_r+0x800>
 8015792:	9b02      	ldr	r3, [sp, #8]
 8015794:	e7f4      	b.n	8015780 <_dtoa_r+0x800>
 8015796:	920a      	str	r2, [sp, #40]	; 0x28
 8015798:	e7f3      	b.n	8015782 <_dtoa_r+0x802>
 801579a:	d082      	beq.n	80156a2 <_dtoa_r+0x722>
 801579c:	4610      	mov	r0, r2
 801579e:	301c      	adds	r0, #28
 80157a0:	e778      	b.n	8015694 <_dtoa_r+0x714>
 80157a2:	f1b9 0f00 	cmp.w	r9, #0
 80157a6:	dc37      	bgt.n	8015818 <_dtoa_r+0x898>
 80157a8:	9b06      	ldr	r3, [sp, #24]
 80157aa:	2b02      	cmp	r3, #2
 80157ac:	dd34      	ble.n	8015818 <_dtoa_r+0x898>
 80157ae:	46ca      	mov	sl, r9
 80157b0:	f1ba 0f00 	cmp.w	sl, #0
 80157b4:	d10d      	bne.n	80157d2 <_dtoa_r+0x852>
 80157b6:	4621      	mov	r1, r4
 80157b8:	4653      	mov	r3, sl
 80157ba:	2205      	movs	r2, #5
 80157bc:	4630      	mov	r0, r6
 80157be:	f000 fbdf 	bl	8015f80 <__multadd>
 80157c2:	4601      	mov	r1, r0
 80157c4:	4604      	mov	r4, r0
 80157c6:	4628      	mov	r0, r5
 80157c8:	f000 fdfa 	bl	80163c0 <__mcmp>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	f73f adeb 	bgt.w	80153a8 <_dtoa_r+0x428>
 80157d2:	9b08      	ldr	r3, [sp, #32]
 80157d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80157d8:	ea6f 0b03 	mvn.w	fp, r3
 80157dc:	f04f 0900 	mov.w	r9, #0
 80157e0:	4621      	mov	r1, r4
 80157e2:	4630      	mov	r0, r6
 80157e4:	f000 fbaa 	bl	8015f3c <_Bfree>
 80157e8:	2f00      	cmp	r7, #0
 80157ea:	f43f aea8 	beq.w	801553e <_dtoa_r+0x5be>
 80157ee:	f1b9 0f00 	cmp.w	r9, #0
 80157f2:	d005      	beq.n	8015800 <_dtoa_r+0x880>
 80157f4:	45b9      	cmp	r9, r7
 80157f6:	d003      	beq.n	8015800 <_dtoa_r+0x880>
 80157f8:	4649      	mov	r1, r9
 80157fa:	4630      	mov	r0, r6
 80157fc:	f000 fb9e 	bl	8015f3c <_Bfree>
 8015800:	4639      	mov	r1, r7
 8015802:	4630      	mov	r0, r6
 8015804:	f000 fb9a 	bl	8015f3c <_Bfree>
 8015808:	e699      	b.n	801553e <_dtoa_r+0x5be>
 801580a:	2400      	movs	r4, #0
 801580c:	4627      	mov	r7, r4
 801580e:	e7e0      	b.n	80157d2 <_dtoa_r+0x852>
 8015810:	46bb      	mov	fp, r7
 8015812:	4604      	mov	r4, r0
 8015814:	4607      	mov	r7, r0
 8015816:	e5c7      	b.n	80153a8 <_dtoa_r+0x428>
 8015818:	9b07      	ldr	r3, [sp, #28]
 801581a:	46ca      	mov	sl, r9
 801581c:	2b00      	cmp	r3, #0
 801581e:	f000 8100 	beq.w	8015a22 <_dtoa_r+0xaa2>
 8015822:	f1b8 0f00 	cmp.w	r8, #0
 8015826:	dd05      	ble.n	8015834 <_dtoa_r+0x8b4>
 8015828:	4639      	mov	r1, r7
 801582a:	4642      	mov	r2, r8
 801582c:	4630      	mov	r0, r6
 801582e:	f000 fd57 	bl	80162e0 <__lshift>
 8015832:	4607      	mov	r7, r0
 8015834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015836:	2b00      	cmp	r3, #0
 8015838:	d05d      	beq.n	80158f6 <_dtoa_r+0x976>
 801583a:	6879      	ldr	r1, [r7, #4]
 801583c:	4630      	mov	r0, r6
 801583e:	f000 fb3d 	bl	8015ebc <_Balloc>
 8015842:	4680      	mov	r8, r0
 8015844:	b928      	cbnz	r0, 8015852 <_dtoa_r+0x8d2>
 8015846:	4b82      	ldr	r3, [pc, #520]	; (8015a50 <_dtoa_r+0xad0>)
 8015848:	4602      	mov	r2, r0
 801584a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801584e:	f7ff bbaf 	b.w	8014fb0 <_dtoa_r+0x30>
 8015852:	693a      	ldr	r2, [r7, #16]
 8015854:	3202      	adds	r2, #2
 8015856:	0092      	lsls	r2, r2, #2
 8015858:	f107 010c 	add.w	r1, r7, #12
 801585c:	300c      	adds	r0, #12
 801585e:	f7fe fc31 	bl	80140c4 <memcpy>
 8015862:	2201      	movs	r2, #1
 8015864:	4641      	mov	r1, r8
 8015866:	4630      	mov	r0, r6
 8015868:	f000 fd3a 	bl	80162e0 <__lshift>
 801586c:	9b01      	ldr	r3, [sp, #4]
 801586e:	3301      	adds	r3, #1
 8015870:	9304      	str	r3, [sp, #16]
 8015872:	9b01      	ldr	r3, [sp, #4]
 8015874:	4453      	add	r3, sl
 8015876:	9308      	str	r3, [sp, #32]
 8015878:	9b02      	ldr	r3, [sp, #8]
 801587a:	f003 0301 	and.w	r3, r3, #1
 801587e:	46b9      	mov	r9, r7
 8015880:	9307      	str	r3, [sp, #28]
 8015882:	4607      	mov	r7, r0
 8015884:	9b04      	ldr	r3, [sp, #16]
 8015886:	4621      	mov	r1, r4
 8015888:	3b01      	subs	r3, #1
 801588a:	4628      	mov	r0, r5
 801588c:	9302      	str	r3, [sp, #8]
 801588e:	f7ff faeb 	bl	8014e68 <quorem>
 8015892:	4603      	mov	r3, r0
 8015894:	3330      	adds	r3, #48	; 0x30
 8015896:	9005      	str	r0, [sp, #20]
 8015898:	4649      	mov	r1, r9
 801589a:	4628      	mov	r0, r5
 801589c:	9309      	str	r3, [sp, #36]	; 0x24
 801589e:	f000 fd8f 	bl	80163c0 <__mcmp>
 80158a2:	463a      	mov	r2, r7
 80158a4:	4682      	mov	sl, r0
 80158a6:	4621      	mov	r1, r4
 80158a8:	4630      	mov	r0, r6
 80158aa:	f000 fda5 	bl	80163f8 <__mdiff>
 80158ae:	68c2      	ldr	r2, [r0, #12]
 80158b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b2:	4680      	mov	r8, r0
 80158b4:	bb0a      	cbnz	r2, 80158fa <_dtoa_r+0x97a>
 80158b6:	4601      	mov	r1, r0
 80158b8:	4628      	mov	r0, r5
 80158ba:	f000 fd81 	bl	80163c0 <__mcmp>
 80158be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c0:	4602      	mov	r2, r0
 80158c2:	4641      	mov	r1, r8
 80158c4:	4630      	mov	r0, r6
 80158c6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80158ca:	f000 fb37 	bl	8015f3c <_Bfree>
 80158ce:	9b06      	ldr	r3, [sp, #24]
 80158d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80158d6:	ea43 0102 	orr.w	r1, r3, r2
 80158da:	9b07      	ldr	r3, [sp, #28]
 80158dc:	430b      	orrs	r3, r1
 80158de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e0:	d10d      	bne.n	80158fe <_dtoa_r+0x97e>
 80158e2:	2b39      	cmp	r3, #57	; 0x39
 80158e4:	d029      	beq.n	801593a <_dtoa_r+0x9ba>
 80158e6:	f1ba 0f00 	cmp.w	sl, #0
 80158ea:	dd01      	ble.n	80158f0 <_dtoa_r+0x970>
 80158ec:	9b05      	ldr	r3, [sp, #20]
 80158ee:	3331      	adds	r3, #49	; 0x31
 80158f0:	9a02      	ldr	r2, [sp, #8]
 80158f2:	7013      	strb	r3, [r2, #0]
 80158f4:	e774      	b.n	80157e0 <_dtoa_r+0x860>
 80158f6:	4638      	mov	r0, r7
 80158f8:	e7b8      	b.n	801586c <_dtoa_r+0x8ec>
 80158fa:	2201      	movs	r2, #1
 80158fc:	e7e1      	b.n	80158c2 <_dtoa_r+0x942>
 80158fe:	f1ba 0f00 	cmp.w	sl, #0
 8015902:	db06      	blt.n	8015912 <_dtoa_r+0x992>
 8015904:	9906      	ldr	r1, [sp, #24]
 8015906:	ea41 0a0a 	orr.w	sl, r1, sl
 801590a:	9907      	ldr	r1, [sp, #28]
 801590c:	ea5a 0101 	orrs.w	r1, sl, r1
 8015910:	d120      	bne.n	8015954 <_dtoa_r+0x9d4>
 8015912:	2a00      	cmp	r2, #0
 8015914:	ddec      	ble.n	80158f0 <_dtoa_r+0x970>
 8015916:	4629      	mov	r1, r5
 8015918:	2201      	movs	r2, #1
 801591a:	4630      	mov	r0, r6
 801591c:	9304      	str	r3, [sp, #16]
 801591e:	f000 fcdf 	bl	80162e0 <__lshift>
 8015922:	4621      	mov	r1, r4
 8015924:	4605      	mov	r5, r0
 8015926:	f000 fd4b 	bl	80163c0 <__mcmp>
 801592a:	2800      	cmp	r0, #0
 801592c:	9b04      	ldr	r3, [sp, #16]
 801592e:	dc02      	bgt.n	8015936 <_dtoa_r+0x9b6>
 8015930:	d1de      	bne.n	80158f0 <_dtoa_r+0x970>
 8015932:	07da      	lsls	r2, r3, #31
 8015934:	d5dc      	bpl.n	80158f0 <_dtoa_r+0x970>
 8015936:	2b39      	cmp	r3, #57	; 0x39
 8015938:	d1d8      	bne.n	80158ec <_dtoa_r+0x96c>
 801593a:	9a02      	ldr	r2, [sp, #8]
 801593c:	2339      	movs	r3, #57	; 0x39
 801593e:	7013      	strb	r3, [r2, #0]
 8015940:	4643      	mov	r3, r8
 8015942:	4698      	mov	r8, r3
 8015944:	3b01      	subs	r3, #1
 8015946:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801594a:	2a39      	cmp	r2, #57	; 0x39
 801594c:	d051      	beq.n	80159f2 <_dtoa_r+0xa72>
 801594e:	3201      	adds	r2, #1
 8015950:	701a      	strb	r2, [r3, #0]
 8015952:	e745      	b.n	80157e0 <_dtoa_r+0x860>
 8015954:	2a00      	cmp	r2, #0
 8015956:	dd03      	ble.n	8015960 <_dtoa_r+0x9e0>
 8015958:	2b39      	cmp	r3, #57	; 0x39
 801595a:	d0ee      	beq.n	801593a <_dtoa_r+0x9ba>
 801595c:	3301      	adds	r3, #1
 801595e:	e7c7      	b.n	80158f0 <_dtoa_r+0x970>
 8015960:	9a04      	ldr	r2, [sp, #16]
 8015962:	9908      	ldr	r1, [sp, #32]
 8015964:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015968:	428a      	cmp	r2, r1
 801596a:	d02b      	beq.n	80159c4 <_dtoa_r+0xa44>
 801596c:	4629      	mov	r1, r5
 801596e:	2300      	movs	r3, #0
 8015970:	220a      	movs	r2, #10
 8015972:	4630      	mov	r0, r6
 8015974:	f000 fb04 	bl	8015f80 <__multadd>
 8015978:	45b9      	cmp	r9, r7
 801597a:	4605      	mov	r5, r0
 801597c:	f04f 0300 	mov.w	r3, #0
 8015980:	f04f 020a 	mov.w	r2, #10
 8015984:	4649      	mov	r1, r9
 8015986:	4630      	mov	r0, r6
 8015988:	d107      	bne.n	801599a <_dtoa_r+0xa1a>
 801598a:	f000 faf9 	bl	8015f80 <__multadd>
 801598e:	4681      	mov	r9, r0
 8015990:	4607      	mov	r7, r0
 8015992:	9b04      	ldr	r3, [sp, #16]
 8015994:	3301      	adds	r3, #1
 8015996:	9304      	str	r3, [sp, #16]
 8015998:	e774      	b.n	8015884 <_dtoa_r+0x904>
 801599a:	f000 faf1 	bl	8015f80 <__multadd>
 801599e:	4639      	mov	r1, r7
 80159a0:	4681      	mov	r9, r0
 80159a2:	2300      	movs	r3, #0
 80159a4:	220a      	movs	r2, #10
 80159a6:	4630      	mov	r0, r6
 80159a8:	f000 faea 	bl	8015f80 <__multadd>
 80159ac:	4607      	mov	r7, r0
 80159ae:	e7f0      	b.n	8015992 <_dtoa_r+0xa12>
 80159b0:	f1ba 0f00 	cmp.w	sl, #0
 80159b4:	9a01      	ldr	r2, [sp, #4]
 80159b6:	bfcc      	ite	gt
 80159b8:	46d0      	movgt	r8, sl
 80159ba:	f04f 0801 	movle.w	r8, #1
 80159be:	4490      	add	r8, r2
 80159c0:	f04f 0900 	mov.w	r9, #0
 80159c4:	4629      	mov	r1, r5
 80159c6:	2201      	movs	r2, #1
 80159c8:	4630      	mov	r0, r6
 80159ca:	9302      	str	r3, [sp, #8]
 80159cc:	f000 fc88 	bl	80162e0 <__lshift>
 80159d0:	4621      	mov	r1, r4
 80159d2:	4605      	mov	r5, r0
 80159d4:	f000 fcf4 	bl	80163c0 <__mcmp>
 80159d8:	2800      	cmp	r0, #0
 80159da:	dcb1      	bgt.n	8015940 <_dtoa_r+0x9c0>
 80159dc:	d102      	bne.n	80159e4 <_dtoa_r+0xa64>
 80159de:	9b02      	ldr	r3, [sp, #8]
 80159e0:	07db      	lsls	r3, r3, #31
 80159e2:	d4ad      	bmi.n	8015940 <_dtoa_r+0x9c0>
 80159e4:	4643      	mov	r3, r8
 80159e6:	4698      	mov	r8, r3
 80159e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159ec:	2a30      	cmp	r2, #48	; 0x30
 80159ee:	d0fa      	beq.n	80159e6 <_dtoa_r+0xa66>
 80159f0:	e6f6      	b.n	80157e0 <_dtoa_r+0x860>
 80159f2:	9a01      	ldr	r2, [sp, #4]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d1a4      	bne.n	8015942 <_dtoa_r+0x9c2>
 80159f8:	f10b 0b01 	add.w	fp, fp, #1
 80159fc:	2331      	movs	r3, #49	; 0x31
 80159fe:	e778      	b.n	80158f2 <_dtoa_r+0x972>
 8015a00:	4b14      	ldr	r3, [pc, #80]	; (8015a54 <_dtoa_r+0xad4>)
 8015a02:	f7ff bb27 	b.w	8015054 <_dtoa_r+0xd4>
 8015a06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	f47f ab03 	bne.w	8015014 <_dtoa_r+0x94>
 8015a0e:	4b12      	ldr	r3, [pc, #72]	; (8015a58 <_dtoa_r+0xad8>)
 8015a10:	f7ff bb20 	b.w	8015054 <_dtoa_r+0xd4>
 8015a14:	f1ba 0f00 	cmp.w	sl, #0
 8015a18:	dc03      	bgt.n	8015a22 <_dtoa_r+0xaa2>
 8015a1a:	9b06      	ldr	r3, [sp, #24]
 8015a1c:	2b02      	cmp	r3, #2
 8015a1e:	f73f aec7 	bgt.w	80157b0 <_dtoa_r+0x830>
 8015a22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a26:	4621      	mov	r1, r4
 8015a28:	4628      	mov	r0, r5
 8015a2a:	f7ff fa1d 	bl	8014e68 <quorem>
 8015a2e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015a32:	f808 3b01 	strb.w	r3, [r8], #1
 8015a36:	9a01      	ldr	r2, [sp, #4]
 8015a38:	eba8 0202 	sub.w	r2, r8, r2
 8015a3c:	4592      	cmp	sl, r2
 8015a3e:	ddb7      	ble.n	80159b0 <_dtoa_r+0xa30>
 8015a40:	4629      	mov	r1, r5
 8015a42:	2300      	movs	r3, #0
 8015a44:	220a      	movs	r2, #10
 8015a46:	4630      	mov	r0, r6
 8015a48:	f000 fa9a 	bl	8015f80 <__multadd>
 8015a4c:	4605      	mov	r5, r0
 8015a4e:	e7ea      	b.n	8015a26 <_dtoa_r+0xaa6>
 8015a50:	08018a9f 	.word	0x08018a9f
 8015a54:	080189fc 	.word	0x080189fc
 8015a58:	08018a20 	.word	0x08018a20

08015a5c <__sflush_r>:
 8015a5c:	898a      	ldrh	r2, [r1, #12]
 8015a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a62:	4605      	mov	r5, r0
 8015a64:	0710      	lsls	r0, r2, #28
 8015a66:	460c      	mov	r4, r1
 8015a68:	d458      	bmi.n	8015b1c <__sflush_r+0xc0>
 8015a6a:	684b      	ldr	r3, [r1, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	dc05      	bgt.n	8015a7c <__sflush_r+0x20>
 8015a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	dc02      	bgt.n	8015a7c <__sflush_r+0x20>
 8015a76:	2000      	movs	r0, #0
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a7e:	2e00      	cmp	r6, #0
 8015a80:	d0f9      	beq.n	8015a76 <__sflush_r+0x1a>
 8015a82:	2300      	movs	r3, #0
 8015a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a88:	682f      	ldr	r7, [r5, #0]
 8015a8a:	602b      	str	r3, [r5, #0]
 8015a8c:	d032      	beq.n	8015af4 <__sflush_r+0x98>
 8015a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a90:	89a3      	ldrh	r3, [r4, #12]
 8015a92:	075a      	lsls	r2, r3, #29
 8015a94:	d505      	bpl.n	8015aa2 <__sflush_r+0x46>
 8015a96:	6863      	ldr	r3, [r4, #4]
 8015a98:	1ac0      	subs	r0, r0, r3
 8015a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a9c:	b10b      	cbz	r3, 8015aa2 <__sflush_r+0x46>
 8015a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015aa0:	1ac0      	subs	r0, r0, r3
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015aa8:	6a21      	ldr	r1, [r4, #32]
 8015aaa:	4628      	mov	r0, r5
 8015aac:	47b0      	blx	r6
 8015aae:	1c43      	adds	r3, r0, #1
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	d106      	bne.n	8015ac2 <__sflush_r+0x66>
 8015ab4:	6829      	ldr	r1, [r5, #0]
 8015ab6:	291d      	cmp	r1, #29
 8015ab8:	d82c      	bhi.n	8015b14 <__sflush_r+0xb8>
 8015aba:	4a2a      	ldr	r2, [pc, #168]	; (8015b64 <__sflush_r+0x108>)
 8015abc:	40ca      	lsrs	r2, r1
 8015abe:	07d6      	lsls	r6, r2, #31
 8015ac0:	d528      	bpl.n	8015b14 <__sflush_r+0xb8>
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	6062      	str	r2, [r4, #4]
 8015ac6:	04d9      	lsls	r1, r3, #19
 8015ac8:	6922      	ldr	r2, [r4, #16]
 8015aca:	6022      	str	r2, [r4, #0]
 8015acc:	d504      	bpl.n	8015ad8 <__sflush_r+0x7c>
 8015ace:	1c42      	adds	r2, r0, #1
 8015ad0:	d101      	bne.n	8015ad6 <__sflush_r+0x7a>
 8015ad2:	682b      	ldr	r3, [r5, #0]
 8015ad4:	b903      	cbnz	r3, 8015ad8 <__sflush_r+0x7c>
 8015ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8015ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ada:	602f      	str	r7, [r5, #0]
 8015adc:	2900      	cmp	r1, #0
 8015ade:	d0ca      	beq.n	8015a76 <__sflush_r+0x1a>
 8015ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ae4:	4299      	cmp	r1, r3
 8015ae6:	d002      	beq.n	8015aee <__sflush_r+0x92>
 8015ae8:	4628      	mov	r0, r5
 8015aea:	f7fe fb1b 	bl	8014124 <_free_r>
 8015aee:	2000      	movs	r0, #0
 8015af0:	6360      	str	r0, [r4, #52]	; 0x34
 8015af2:	e7c1      	b.n	8015a78 <__sflush_r+0x1c>
 8015af4:	6a21      	ldr	r1, [r4, #32]
 8015af6:	2301      	movs	r3, #1
 8015af8:	4628      	mov	r0, r5
 8015afa:	47b0      	blx	r6
 8015afc:	1c41      	adds	r1, r0, #1
 8015afe:	d1c7      	bne.n	8015a90 <__sflush_r+0x34>
 8015b00:	682b      	ldr	r3, [r5, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d0c4      	beq.n	8015a90 <__sflush_r+0x34>
 8015b06:	2b1d      	cmp	r3, #29
 8015b08:	d001      	beq.n	8015b0e <__sflush_r+0xb2>
 8015b0a:	2b16      	cmp	r3, #22
 8015b0c:	d101      	bne.n	8015b12 <__sflush_r+0xb6>
 8015b0e:	602f      	str	r7, [r5, #0]
 8015b10:	e7b1      	b.n	8015a76 <__sflush_r+0x1a>
 8015b12:	89a3      	ldrh	r3, [r4, #12]
 8015b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b18:	81a3      	strh	r3, [r4, #12]
 8015b1a:	e7ad      	b.n	8015a78 <__sflush_r+0x1c>
 8015b1c:	690f      	ldr	r7, [r1, #16]
 8015b1e:	2f00      	cmp	r7, #0
 8015b20:	d0a9      	beq.n	8015a76 <__sflush_r+0x1a>
 8015b22:	0793      	lsls	r3, r2, #30
 8015b24:	680e      	ldr	r6, [r1, #0]
 8015b26:	bf08      	it	eq
 8015b28:	694b      	ldreq	r3, [r1, #20]
 8015b2a:	600f      	str	r7, [r1, #0]
 8015b2c:	bf18      	it	ne
 8015b2e:	2300      	movne	r3, #0
 8015b30:	eba6 0807 	sub.w	r8, r6, r7
 8015b34:	608b      	str	r3, [r1, #8]
 8015b36:	f1b8 0f00 	cmp.w	r8, #0
 8015b3a:	dd9c      	ble.n	8015a76 <__sflush_r+0x1a>
 8015b3c:	6a21      	ldr	r1, [r4, #32]
 8015b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b40:	4643      	mov	r3, r8
 8015b42:	463a      	mov	r2, r7
 8015b44:	4628      	mov	r0, r5
 8015b46:	47b0      	blx	r6
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	dc06      	bgt.n	8015b5a <__sflush_r+0xfe>
 8015b4c:	89a3      	ldrh	r3, [r4, #12]
 8015b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	f04f 30ff 	mov.w	r0, #4294967295
 8015b58:	e78e      	b.n	8015a78 <__sflush_r+0x1c>
 8015b5a:	4407      	add	r7, r0
 8015b5c:	eba8 0800 	sub.w	r8, r8, r0
 8015b60:	e7e9      	b.n	8015b36 <__sflush_r+0xda>
 8015b62:	bf00      	nop
 8015b64:	20400001 	.word	0x20400001

08015b68 <_fflush_r>:
 8015b68:	b538      	push	{r3, r4, r5, lr}
 8015b6a:	690b      	ldr	r3, [r1, #16]
 8015b6c:	4605      	mov	r5, r0
 8015b6e:	460c      	mov	r4, r1
 8015b70:	b913      	cbnz	r3, 8015b78 <_fflush_r+0x10>
 8015b72:	2500      	movs	r5, #0
 8015b74:	4628      	mov	r0, r5
 8015b76:	bd38      	pop	{r3, r4, r5, pc}
 8015b78:	b118      	cbz	r0, 8015b82 <_fflush_r+0x1a>
 8015b7a:	6983      	ldr	r3, [r0, #24]
 8015b7c:	b90b      	cbnz	r3, 8015b82 <_fflush_r+0x1a>
 8015b7e:	f000 f887 	bl	8015c90 <__sinit>
 8015b82:	4b14      	ldr	r3, [pc, #80]	; (8015bd4 <_fflush_r+0x6c>)
 8015b84:	429c      	cmp	r4, r3
 8015b86:	d11b      	bne.n	8015bc0 <_fflush_r+0x58>
 8015b88:	686c      	ldr	r4, [r5, #4]
 8015b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d0ef      	beq.n	8015b72 <_fflush_r+0xa>
 8015b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015b94:	07d0      	lsls	r0, r2, #31
 8015b96:	d404      	bmi.n	8015ba2 <_fflush_r+0x3a>
 8015b98:	0599      	lsls	r1, r3, #22
 8015b9a:	d402      	bmi.n	8015ba2 <_fflush_r+0x3a>
 8015b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b9e:	f000 f91a 	bl	8015dd6 <__retarget_lock_acquire_recursive>
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	f7ff ff59 	bl	8015a5c <__sflush_r>
 8015baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bac:	07da      	lsls	r2, r3, #31
 8015bae:	4605      	mov	r5, r0
 8015bb0:	d4e0      	bmi.n	8015b74 <_fflush_r+0xc>
 8015bb2:	89a3      	ldrh	r3, [r4, #12]
 8015bb4:	059b      	lsls	r3, r3, #22
 8015bb6:	d4dd      	bmi.n	8015b74 <_fflush_r+0xc>
 8015bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bba:	f000 f90d 	bl	8015dd8 <__retarget_lock_release_recursive>
 8015bbe:	e7d9      	b.n	8015b74 <_fflush_r+0xc>
 8015bc0:	4b05      	ldr	r3, [pc, #20]	; (8015bd8 <_fflush_r+0x70>)
 8015bc2:	429c      	cmp	r4, r3
 8015bc4:	d101      	bne.n	8015bca <_fflush_r+0x62>
 8015bc6:	68ac      	ldr	r4, [r5, #8]
 8015bc8:	e7df      	b.n	8015b8a <_fflush_r+0x22>
 8015bca:	4b04      	ldr	r3, [pc, #16]	; (8015bdc <_fflush_r+0x74>)
 8015bcc:	429c      	cmp	r4, r3
 8015bce:	bf08      	it	eq
 8015bd0:	68ec      	ldreq	r4, [r5, #12]
 8015bd2:	e7da      	b.n	8015b8a <_fflush_r+0x22>
 8015bd4:	08018ad0 	.word	0x08018ad0
 8015bd8:	08018af0 	.word	0x08018af0
 8015bdc:	08018ab0 	.word	0x08018ab0

08015be0 <std>:
 8015be0:	2300      	movs	r3, #0
 8015be2:	b510      	push	{r4, lr}
 8015be4:	4604      	mov	r4, r0
 8015be6:	e9c0 3300 	strd	r3, r3, [r0]
 8015bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015bee:	6083      	str	r3, [r0, #8]
 8015bf0:	8181      	strh	r1, [r0, #12]
 8015bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8015bf4:	81c2      	strh	r2, [r0, #14]
 8015bf6:	6183      	str	r3, [r0, #24]
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	2208      	movs	r2, #8
 8015bfc:	305c      	adds	r0, #92	; 0x5c
 8015bfe:	f7fe fa89 	bl	8014114 <memset>
 8015c02:	4b05      	ldr	r3, [pc, #20]	; (8015c18 <std+0x38>)
 8015c04:	6263      	str	r3, [r4, #36]	; 0x24
 8015c06:	4b05      	ldr	r3, [pc, #20]	; (8015c1c <std+0x3c>)
 8015c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c0a:	4b05      	ldr	r3, [pc, #20]	; (8015c20 <std+0x40>)
 8015c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c0e:	4b05      	ldr	r3, [pc, #20]	; (8015c24 <std+0x44>)
 8015c10:	6224      	str	r4, [r4, #32]
 8015c12:	6323      	str	r3, [r4, #48]	; 0x30
 8015c14:	bd10      	pop	{r4, pc}
 8015c16:	bf00      	nop
 8015c18:	08016bb9 	.word	0x08016bb9
 8015c1c:	08016bdb 	.word	0x08016bdb
 8015c20:	08016c13 	.word	0x08016c13
 8015c24:	08016c37 	.word	0x08016c37

08015c28 <_cleanup_r>:
 8015c28:	4901      	ldr	r1, [pc, #4]	; (8015c30 <_cleanup_r+0x8>)
 8015c2a:	f000 b8af 	b.w	8015d8c <_fwalk_reent>
 8015c2e:	bf00      	nop
 8015c30:	08015b69 	.word	0x08015b69

08015c34 <__sfmoreglue>:
 8015c34:	b570      	push	{r4, r5, r6, lr}
 8015c36:	2268      	movs	r2, #104	; 0x68
 8015c38:	1e4d      	subs	r5, r1, #1
 8015c3a:	4355      	muls	r5, r2
 8015c3c:	460e      	mov	r6, r1
 8015c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c42:	f7fe fadb 	bl	80141fc <_malloc_r>
 8015c46:	4604      	mov	r4, r0
 8015c48:	b140      	cbz	r0, 8015c5c <__sfmoreglue+0x28>
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8015c50:	300c      	adds	r0, #12
 8015c52:	60a0      	str	r0, [r4, #8]
 8015c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015c58:	f7fe fa5c 	bl	8014114 <memset>
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	bd70      	pop	{r4, r5, r6, pc}

08015c60 <__sfp_lock_acquire>:
 8015c60:	4801      	ldr	r0, [pc, #4]	; (8015c68 <__sfp_lock_acquire+0x8>)
 8015c62:	f000 b8b8 	b.w	8015dd6 <__retarget_lock_acquire_recursive>
 8015c66:	bf00      	nop
 8015c68:	20001a99 	.word	0x20001a99

08015c6c <__sfp_lock_release>:
 8015c6c:	4801      	ldr	r0, [pc, #4]	; (8015c74 <__sfp_lock_release+0x8>)
 8015c6e:	f000 b8b3 	b.w	8015dd8 <__retarget_lock_release_recursive>
 8015c72:	bf00      	nop
 8015c74:	20001a99 	.word	0x20001a99

08015c78 <__sinit_lock_acquire>:
 8015c78:	4801      	ldr	r0, [pc, #4]	; (8015c80 <__sinit_lock_acquire+0x8>)
 8015c7a:	f000 b8ac 	b.w	8015dd6 <__retarget_lock_acquire_recursive>
 8015c7e:	bf00      	nop
 8015c80:	20001a9a 	.word	0x20001a9a

08015c84 <__sinit_lock_release>:
 8015c84:	4801      	ldr	r0, [pc, #4]	; (8015c8c <__sinit_lock_release+0x8>)
 8015c86:	f000 b8a7 	b.w	8015dd8 <__retarget_lock_release_recursive>
 8015c8a:	bf00      	nop
 8015c8c:	20001a9a 	.word	0x20001a9a

08015c90 <__sinit>:
 8015c90:	b510      	push	{r4, lr}
 8015c92:	4604      	mov	r4, r0
 8015c94:	f7ff fff0 	bl	8015c78 <__sinit_lock_acquire>
 8015c98:	69a3      	ldr	r3, [r4, #24]
 8015c9a:	b11b      	cbz	r3, 8015ca4 <__sinit+0x14>
 8015c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ca0:	f7ff bff0 	b.w	8015c84 <__sinit_lock_release>
 8015ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8015caa:	4b13      	ldr	r3, [pc, #76]	; (8015cf8 <__sinit+0x68>)
 8015cac:	4a13      	ldr	r2, [pc, #76]	; (8015cfc <__sinit+0x6c>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015cb2:	42a3      	cmp	r3, r4
 8015cb4:	bf04      	itt	eq
 8015cb6:	2301      	moveq	r3, #1
 8015cb8:	61a3      	streq	r3, [r4, #24]
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f000 f820 	bl	8015d00 <__sfp>
 8015cc0:	6060      	str	r0, [r4, #4]
 8015cc2:	4620      	mov	r0, r4
 8015cc4:	f000 f81c 	bl	8015d00 <__sfp>
 8015cc8:	60a0      	str	r0, [r4, #8]
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f000 f818 	bl	8015d00 <__sfp>
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	60e0      	str	r0, [r4, #12]
 8015cd4:	2104      	movs	r1, #4
 8015cd6:	6860      	ldr	r0, [r4, #4]
 8015cd8:	f7ff ff82 	bl	8015be0 <std>
 8015cdc:	68a0      	ldr	r0, [r4, #8]
 8015cde:	2201      	movs	r2, #1
 8015ce0:	2109      	movs	r1, #9
 8015ce2:	f7ff ff7d 	bl	8015be0 <std>
 8015ce6:	68e0      	ldr	r0, [r4, #12]
 8015ce8:	2202      	movs	r2, #2
 8015cea:	2112      	movs	r1, #18
 8015cec:	f7ff ff78 	bl	8015be0 <std>
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	61a3      	str	r3, [r4, #24]
 8015cf4:	e7d2      	b.n	8015c9c <__sinit+0xc>
 8015cf6:	bf00      	nop
 8015cf8:	080189e8 	.word	0x080189e8
 8015cfc:	08015c29 	.word	0x08015c29

08015d00 <__sfp>:
 8015d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d02:	4607      	mov	r7, r0
 8015d04:	f7ff ffac 	bl	8015c60 <__sfp_lock_acquire>
 8015d08:	4b1e      	ldr	r3, [pc, #120]	; (8015d84 <__sfp+0x84>)
 8015d0a:	681e      	ldr	r6, [r3, #0]
 8015d0c:	69b3      	ldr	r3, [r6, #24]
 8015d0e:	b913      	cbnz	r3, 8015d16 <__sfp+0x16>
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7ff ffbd 	bl	8015c90 <__sinit>
 8015d16:	3648      	adds	r6, #72	; 0x48
 8015d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	d503      	bpl.n	8015d28 <__sfp+0x28>
 8015d20:	6833      	ldr	r3, [r6, #0]
 8015d22:	b30b      	cbz	r3, 8015d68 <__sfp+0x68>
 8015d24:	6836      	ldr	r6, [r6, #0]
 8015d26:	e7f7      	b.n	8015d18 <__sfp+0x18>
 8015d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d2c:	b9d5      	cbnz	r5, 8015d64 <__sfp+0x64>
 8015d2e:	4b16      	ldr	r3, [pc, #88]	; (8015d88 <__sfp+0x88>)
 8015d30:	60e3      	str	r3, [r4, #12]
 8015d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d36:	6665      	str	r5, [r4, #100]	; 0x64
 8015d38:	f000 f84c 	bl	8015dd4 <__retarget_lock_init_recursive>
 8015d3c:	f7ff ff96 	bl	8015c6c <__sfp_lock_release>
 8015d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015d48:	6025      	str	r5, [r4, #0]
 8015d4a:	61a5      	str	r5, [r4, #24]
 8015d4c:	2208      	movs	r2, #8
 8015d4e:	4629      	mov	r1, r5
 8015d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d54:	f7fe f9de 	bl	8014114 <memset>
 8015d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015d60:	4620      	mov	r0, r4
 8015d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d64:	3468      	adds	r4, #104	; 0x68
 8015d66:	e7d9      	b.n	8015d1c <__sfp+0x1c>
 8015d68:	2104      	movs	r1, #4
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	f7ff ff62 	bl	8015c34 <__sfmoreglue>
 8015d70:	4604      	mov	r4, r0
 8015d72:	6030      	str	r0, [r6, #0]
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d1d5      	bne.n	8015d24 <__sfp+0x24>
 8015d78:	f7ff ff78 	bl	8015c6c <__sfp_lock_release>
 8015d7c:	230c      	movs	r3, #12
 8015d7e:	603b      	str	r3, [r7, #0]
 8015d80:	e7ee      	b.n	8015d60 <__sfp+0x60>
 8015d82:	bf00      	nop
 8015d84:	080189e8 	.word	0x080189e8
 8015d88:	ffff0001 	.word	0xffff0001

08015d8c <_fwalk_reent>:
 8015d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d90:	4606      	mov	r6, r0
 8015d92:	4688      	mov	r8, r1
 8015d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015d98:	2700      	movs	r7, #0
 8015d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8015da2:	d505      	bpl.n	8015db0 <_fwalk_reent+0x24>
 8015da4:	6824      	ldr	r4, [r4, #0]
 8015da6:	2c00      	cmp	r4, #0
 8015da8:	d1f7      	bne.n	8015d9a <_fwalk_reent+0xe>
 8015daa:	4638      	mov	r0, r7
 8015dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015db0:	89ab      	ldrh	r3, [r5, #12]
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d907      	bls.n	8015dc6 <_fwalk_reent+0x3a>
 8015db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	d003      	beq.n	8015dc6 <_fwalk_reent+0x3a>
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	47c0      	blx	r8
 8015dc4:	4307      	orrs	r7, r0
 8015dc6:	3568      	adds	r5, #104	; 0x68
 8015dc8:	e7e9      	b.n	8015d9e <_fwalk_reent+0x12>
	...

08015dcc <_localeconv_r>:
 8015dcc:	4800      	ldr	r0, [pc, #0]	; (8015dd0 <_localeconv_r+0x4>)
 8015dce:	4770      	bx	lr
 8015dd0:	200014a0 	.word	0x200014a0

08015dd4 <__retarget_lock_init_recursive>:
 8015dd4:	4770      	bx	lr

08015dd6 <__retarget_lock_acquire_recursive>:
 8015dd6:	4770      	bx	lr

08015dd8 <__retarget_lock_release_recursive>:
 8015dd8:	4770      	bx	lr

08015dda <__swhatbuf_r>:
 8015dda:	b570      	push	{r4, r5, r6, lr}
 8015ddc:	460e      	mov	r6, r1
 8015dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015de2:	2900      	cmp	r1, #0
 8015de4:	b096      	sub	sp, #88	; 0x58
 8015de6:	4614      	mov	r4, r2
 8015de8:	461d      	mov	r5, r3
 8015dea:	da08      	bge.n	8015dfe <__swhatbuf_r+0x24>
 8015dec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015df0:	2200      	movs	r2, #0
 8015df2:	602a      	str	r2, [r5, #0]
 8015df4:	061a      	lsls	r2, r3, #24
 8015df6:	d410      	bmi.n	8015e1a <__swhatbuf_r+0x40>
 8015df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015dfc:	e00e      	b.n	8015e1c <__swhatbuf_r+0x42>
 8015dfe:	466a      	mov	r2, sp
 8015e00:	f000 ff70 	bl	8016ce4 <_fstat_r>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	dbf1      	blt.n	8015dec <__swhatbuf_r+0x12>
 8015e08:	9a01      	ldr	r2, [sp, #4]
 8015e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015e12:	425a      	negs	r2, r3
 8015e14:	415a      	adcs	r2, r3
 8015e16:	602a      	str	r2, [r5, #0]
 8015e18:	e7ee      	b.n	8015df8 <__swhatbuf_r+0x1e>
 8015e1a:	2340      	movs	r3, #64	; 0x40
 8015e1c:	2000      	movs	r0, #0
 8015e1e:	6023      	str	r3, [r4, #0]
 8015e20:	b016      	add	sp, #88	; 0x58
 8015e22:	bd70      	pop	{r4, r5, r6, pc}

08015e24 <__smakebuf_r>:
 8015e24:	898b      	ldrh	r3, [r1, #12]
 8015e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e28:	079d      	lsls	r5, r3, #30
 8015e2a:	4606      	mov	r6, r0
 8015e2c:	460c      	mov	r4, r1
 8015e2e:	d507      	bpl.n	8015e40 <__smakebuf_r+0x1c>
 8015e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e34:	6023      	str	r3, [r4, #0]
 8015e36:	6123      	str	r3, [r4, #16]
 8015e38:	2301      	movs	r3, #1
 8015e3a:	6163      	str	r3, [r4, #20]
 8015e3c:	b002      	add	sp, #8
 8015e3e:	bd70      	pop	{r4, r5, r6, pc}
 8015e40:	ab01      	add	r3, sp, #4
 8015e42:	466a      	mov	r2, sp
 8015e44:	f7ff ffc9 	bl	8015dda <__swhatbuf_r>
 8015e48:	9900      	ldr	r1, [sp, #0]
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	f7fe f9d5 	bl	80141fc <_malloc_r>
 8015e52:	b948      	cbnz	r0, 8015e68 <__smakebuf_r+0x44>
 8015e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e58:	059a      	lsls	r2, r3, #22
 8015e5a:	d4ef      	bmi.n	8015e3c <__smakebuf_r+0x18>
 8015e5c:	f023 0303 	bic.w	r3, r3, #3
 8015e60:	f043 0302 	orr.w	r3, r3, #2
 8015e64:	81a3      	strh	r3, [r4, #12]
 8015e66:	e7e3      	b.n	8015e30 <__smakebuf_r+0xc>
 8015e68:	4b0d      	ldr	r3, [pc, #52]	; (8015ea0 <__smakebuf_r+0x7c>)
 8015e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015e6c:	89a3      	ldrh	r3, [r4, #12]
 8015e6e:	6020      	str	r0, [r4, #0]
 8015e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e74:	81a3      	strh	r3, [r4, #12]
 8015e76:	9b00      	ldr	r3, [sp, #0]
 8015e78:	6163      	str	r3, [r4, #20]
 8015e7a:	9b01      	ldr	r3, [sp, #4]
 8015e7c:	6120      	str	r0, [r4, #16]
 8015e7e:	b15b      	cbz	r3, 8015e98 <__smakebuf_r+0x74>
 8015e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e84:	4630      	mov	r0, r6
 8015e86:	f000 ff3f 	bl	8016d08 <_isatty_r>
 8015e8a:	b128      	cbz	r0, 8015e98 <__smakebuf_r+0x74>
 8015e8c:	89a3      	ldrh	r3, [r4, #12]
 8015e8e:	f023 0303 	bic.w	r3, r3, #3
 8015e92:	f043 0301 	orr.w	r3, r3, #1
 8015e96:	81a3      	strh	r3, [r4, #12]
 8015e98:	89a0      	ldrh	r0, [r4, #12]
 8015e9a:	4305      	orrs	r5, r0
 8015e9c:	81a5      	strh	r5, [r4, #12]
 8015e9e:	e7cd      	b.n	8015e3c <__smakebuf_r+0x18>
 8015ea0:	08015c29 	.word	0x08015c29

08015ea4 <__malloc_lock>:
 8015ea4:	4801      	ldr	r0, [pc, #4]	; (8015eac <__malloc_lock+0x8>)
 8015ea6:	f7ff bf96 	b.w	8015dd6 <__retarget_lock_acquire_recursive>
 8015eaa:	bf00      	nop
 8015eac:	20001a98 	.word	0x20001a98

08015eb0 <__malloc_unlock>:
 8015eb0:	4801      	ldr	r0, [pc, #4]	; (8015eb8 <__malloc_unlock+0x8>)
 8015eb2:	f7ff bf91 	b.w	8015dd8 <__retarget_lock_release_recursive>
 8015eb6:	bf00      	nop
 8015eb8:	20001a98 	.word	0x20001a98

08015ebc <_Balloc>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	460d      	mov	r5, r1
 8015ec4:	b976      	cbnz	r6, 8015ee4 <_Balloc+0x28>
 8015ec6:	2010      	movs	r0, #16
 8015ec8:	f7fe f8ec 	bl	80140a4 <malloc>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	6260      	str	r0, [r4, #36]	; 0x24
 8015ed0:	b920      	cbnz	r0, 8015edc <_Balloc+0x20>
 8015ed2:	4b18      	ldr	r3, [pc, #96]	; (8015f34 <_Balloc+0x78>)
 8015ed4:	4818      	ldr	r0, [pc, #96]	; (8015f38 <_Balloc+0x7c>)
 8015ed6:	2166      	movs	r1, #102	; 0x66
 8015ed8:	f000 fec4 	bl	8016c64 <__assert_func>
 8015edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ee0:	6006      	str	r6, [r0, #0]
 8015ee2:	60c6      	str	r6, [r0, #12]
 8015ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ee6:	68f3      	ldr	r3, [r6, #12]
 8015ee8:	b183      	cbz	r3, 8015f0c <_Balloc+0x50>
 8015eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ef2:	b9b8      	cbnz	r0, 8015f24 <_Balloc+0x68>
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8015efa:	1d72      	adds	r2, r6, #5
 8015efc:	0092      	lsls	r2, r2, #2
 8015efe:	4620      	mov	r0, r4
 8015f00:	f000 fb60 	bl	80165c4 <_calloc_r>
 8015f04:	b160      	cbz	r0, 8015f20 <_Balloc+0x64>
 8015f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015f0a:	e00e      	b.n	8015f2a <_Balloc+0x6e>
 8015f0c:	2221      	movs	r2, #33	; 0x21
 8015f0e:	2104      	movs	r1, #4
 8015f10:	4620      	mov	r0, r4
 8015f12:	f000 fb57 	bl	80165c4 <_calloc_r>
 8015f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f18:	60f0      	str	r0, [r6, #12]
 8015f1a:	68db      	ldr	r3, [r3, #12]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d1e4      	bne.n	8015eea <_Balloc+0x2e>
 8015f20:	2000      	movs	r0, #0
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	6802      	ldr	r2, [r0, #0]
 8015f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f30:	e7f7      	b.n	8015f22 <_Balloc+0x66>
 8015f32:	bf00      	nop
 8015f34:	08018a2d 	.word	0x08018a2d
 8015f38:	08018b10 	.word	0x08018b10

08015f3c <_Bfree>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f40:	4605      	mov	r5, r0
 8015f42:	460c      	mov	r4, r1
 8015f44:	b976      	cbnz	r6, 8015f64 <_Bfree+0x28>
 8015f46:	2010      	movs	r0, #16
 8015f48:	f7fe f8ac 	bl	80140a4 <malloc>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8015f50:	b920      	cbnz	r0, 8015f5c <_Bfree+0x20>
 8015f52:	4b09      	ldr	r3, [pc, #36]	; (8015f78 <_Bfree+0x3c>)
 8015f54:	4809      	ldr	r0, [pc, #36]	; (8015f7c <_Bfree+0x40>)
 8015f56:	218a      	movs	r1, #138	; 0x8a
 8015f58:	f000 fe84 	bl	8016c64 <__assert_func>
 8015f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f60:	6006      	str	r6, [r0, #0]
 8015f62:	60c6      	str	r6, [r0, #12]
 8015f64:	b13c      	cbz	r4, 8015f76 <_Bfree+0x3a>
 8015f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015f68:	6862      	ldr	r2, [r4, #4]
 8015f6a:	68db      	ldr	r3, [r3, #12]
 8015f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f70:	6021      	str	r1, [r4, #0]
 8015f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015f76:	bd70      	pop	{r4, r5, r6, pc}
 8015f78:	08018a2d 	.word	0x08018a2d
 8015f7c:	08018b10 	.word	0x08018b10

08015f80 <__multadd>:
 8015f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	690d      	ldr	r5, [r1, #16]
 8015f86:	4607      	mov	r7, r0
 8015f88:	460c      	mov	r4, r1
 8015f8a:	461e      	mov	r6, r3
 8015f8c:	f101 0c14 	add.w	ip, r1, #20
 8015f90:	2000      	movs	r0, #0
 8015f92:	f8dc 3000 	ldr.w	r3, [ip]
 8015f96:	b299      	uxth	r1, r3
 8015f98:	fb02 6101 	mla	r1, r2, r1, r6
 8015f9c:	0c1e      	lsrs	r6, r3, #16
 8015f9e:	0c0b      	lsrs	r3, r1, #16
 8015fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8015fa4:	b289      	uxth	r1, r1
 8015fa6:	3001      	adds	r0, #1
 8015fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015fac:	4285      	cmp	r5, r0
 8015fae:	f84c 1b04 	str.w	r1, [ip], #4
 8015fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015fb6:	dcec      	bgt.n	8015f92 <__multadd+0x12>
 8015fb8:	b30e      	cbz	r6, 8015ffe <__multadd+0x7e>
 8015fba:	68a3      	ldr	r3, [r4, #8]
 8015fbc:	42ab      	cmp	r3, r5
 8015fbe:	dc19      	bgt.n	8015ff4 <__multadd+0x74>
 8015fc0:	6861      	ldr	r1, [r4, #4]
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	3101      	adds	r1, #1
 8015fc6:	f7ff ff79 	bl	8015ebc <_Balloc>
 8015fca:	4680      	mov	r8, r0
 8015fcc:	b928      	cbnz	r0, 8015fda <__multadd+0x5a>
 8015fce:	4602      	mov	r2, r0
 8015fd0:	4b0c      	ldr	r3, [pc, #48]	; (8016004 <__multadd+0x84>)
 8015fd2:	480d      	ldr	r0, [pc, #52]	; (8016008 <__multadd+0x88>)
 8015fd4:	21b5      	movs	r1, #181	; 0xb5
 8015fd6:	f000 fe45 	bl	8016c64 <__assert_func>
 8015fda:	6922      	ldr	r2, [r4, #16]
 8015fdc:	3202      	adds	r2, #2
 8015fde:	f104 010c 	add.w	r1, r4, #12
 8015fe2:	0092      	lsls	r2, r2, #2
 8015fe4:	300c      	adds	r0, #12
 8015fe6:	f7fe f86d 	bl	80140c4 <memcpy>
 8015fea:	4621      	mov	r1, r4
 8015fec:	4638      	mov	r0, r7
 8015fee:	f7ff ffa5 	bl	8015f3c <_Bfree>
 8015ff2:	4644      	mov	r4, r8
 8015ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ff8:	3501      	adds	r5, #1
 8015ffa:	615e      	str	r6, [r3, #20]
 8015ffc:	6125      	str	r5, [r4, #16]
 8015ffe:	4620      	mov	r0, r4
 8016000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016004:	08018a9f 	.word	0x08018a9f
 8016008:	08018b10 	.word	0x08018b10

0801600c <__hi0bits>:
 801600c:	0c03      	lsrs	r3, r0, #16
 801600e:	041b      	lsls	r3, r3, #16
 8016010:	b9d3      	cbnz	r3, 8016048 <__hi0bits+0x3c>
 8016012:	0400      	lsls	r0, r0, #16
 8016014:	2310      	movs	r3, #16
 8016016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801601a:	bf04      	itt	eq
 801601c:	0200      	lsleq	r0, r0, #8
 801601e:	3308      	addeq	r3, #8
 8016020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016024:	bf04      	itt	eq
 8016026:	0100      	lsleq	r0, r0, #4
 8016028:	3304      	addeq	r3, #4
 801602a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801602e:	bf04      	itt	eq
 8016030:	0080      	lsleq	r0, r0, #2
 8016032:	3302      	addeq	r3, #2
 8016034:	2800      	cmp	r0, #0
 8016036:	db05      	blt.n	8016044 <__hi0bits+0x38>
 8016038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801603c:	f103 0301 	add.w	r3, r3, #1
 8016040:	bf08      	it	eq
 8016042:	2320      	moveq	r3, #32
 8016044:	4618      	mov	r0, r3
 8016046:	4770      	bx	lr
 8016048:	2300      	movs	r3, #0
 801604a:	e7e4      	b.n	8016016 <__hi0bits+0xa>

0801604c <__lo0bits>:
 801604c:	6803      	ldr	r3, [r0, #0]
 801604e:	f013 0207 	ands.w	r2, r3, #7
 8016052:	4601      	mov	r1, r0
 8016054:	d00b      	beq.n	801606e <__lo0bits+0x22>
 8016056:	07da      	lsls	r2, r3, #31
 8016058:	d423      	bmi.n	80160a2 <__lo0bits+0x56>
 801605a:	0798      	lsls	r0, r3, #30
 801605c:	bf49      	itett	mi
 801605e:	085b      	lsrmi	r3, r3, #1
 8016060:	089b      	lsrpl	r3, r3, #2
 8016062:	2001      	movmi	r0, #1
 8016064:	600b      	strmi	r3, [r1, #0]
 8016066:	bf5c      	itt	pl
 8016068:	600b      	strpl	r3, [r1, #0]
 801606a:	2002      	movpl	r0, #2
 801606c:	4770      	bx	lr
 801606e:	b298      	uxth	r0, r3
 8016070:	b9a8      	cbnz	r0, 801609e <__lo0bits+0x52>
 8016072:	0c1b      	lsrs	r3, r3, #16
 8016074:	2010      	movs	r0, #16
 8016076:	b2da      	uxtb	r2, r3
 8016078:	b90a      	cbnz	r2, 801607e <__lo0bits+0x32>
 801607a:	3008      	adds	r0, #8
 801607c:	0a1b      	lsrs	r3, r3, #8
 801607e:	071a      	lsls	r2, r3, #28
 8016080:	bf04      	itt	eq
 8016082:	091b      	lsreq	r3, r3, #4
 8016084:	3004      	addeq	r0, #4
 8016086:	079a      	lsls	r2, r3, #30
 8016088:	bf04      	itt	eq
 801608a:	089b      	lsreq	r3, r3, #2
 801608c:	3002      	addeq	r0, #2
 801608e:	07da      	lsls	r2, r3, #31
 8016090:	d403      	bmi.n	801609a <__lo0bits+0x4e>
 8016092:	085b      	lsrs	r3, r3, #1
 8016094:	f100 0001 	add.w	r0, r0, #1
 8016098:	d005      	beq.n	80160a6 <__lo0bits+0x5a>
 801609a:	600b      	str	r3, [r1, #0]
 801609c:	4770      	bx	lr
 801609e:	4610      	mov	r0, r2
 80160a0:	e7e9      	b.n	8016076 <__lo0bits+0x2a>
 80160a2:	2000      	movs	r0, #0
 80160a4:	4770      	bx	lr
 80160a6:	2020      	movs	r0, #32
 80160a8:	4770      	bx	lr
	...

080160ac <__i2b>:
 80160ac:	b510      	push	{r4, lr}
 80160ae:	460c      	mov	r4, r1
 80160b0:	2101      	movs	r1, #1
 80160b2:	f7ff ff03 	bl	8015ebc <_Balloc>
 80160b6:	4602      	mov	r2, r0
 80160b8:	b928      	cbnz	r0, 80160c6 <__i2b+0x1a>
 80160ba:	4b05      	ldr	r3, [pc, #20]	; (80160d0 <__i2b+0x24>)
 80160bc:	4805      	ldr	r0, [pc, #20]	; (80160d4 <__i2b+0x28>)
 80160be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80160c2:	f000 fdcf 	bl	8016c64 <__assert_func>
 80160c6:	2301      	movs	r3, #1
 80160c8:	6144      	str	r4, [r0, #20]
 80160ca:	6103      	str	r3, [r0, #16]
 80160cc:	bd10      	pop	{r4, pc}
 80160ce:	bf00      	nop
 80160d0:	08018a9f 	.word	0x08018a9f
 80160d4:	08018b10 	.word	0x08018b10

080160d8 <__multiply>:
 80160d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160dc:	4691      	mov	r9, r2
 80160de:	690a      	ldr	r2, [r1, #16]
 80160e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	bfb8      	it	lt
 80160e8:	460b      	movlt	r3, r1
 80160ea:	460c      	mov	r4, r1
 80160ec:	bfbc      	itt	lt
 80160ee:	464c      	movlt	r4, r9
 80160f0:	4699      	movlt	r9, r3
 80160f2:	6927      	ldr	r7, [r4, #16]
 80160f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80160f8:	68a3      	ldr	r3, [r4, #8]
 80160fa:	6861      	ldr	r1, [r4, #4]
 80160fc:	eb07 060a 	add.w	r6, r7, sl
 8016100:	42b3      	cmp	r3, r6
 8016102:	b085      	sub	sp, #20
 8016104:	bfb8      	it	lt
 8016106:	3101      	addlt	r1, #1
 8016108:	f7ff fed8 	bl	8015ebc <_Balloc>
 801610c:	b930      	cbnz	r0, 801611c <__multiply+0x44>
 801610e:	4602      	mov	r2, r0
 8016110:	4b44      	ldr	r3, [pc, #272]	; (8016224 <__multiply+0x14c>)
 8016112:	4845      	ldr	r0, [pc, #276]	; (8016228 <__multiply+0x150>)
 8016114:	f240 115d 	movw	r1, #349	; 0x15d
 8016118:	f000 fda4 	bl	8016c64 <__assert_func>
 801611c:	f100 0514 	add.w	r5, r0, #20
 8016120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016124:	462b      	mov	r3, r5
 8016126:	2200      	movs	r2, #0
 8016128:	4543      	cmp	r3, r8
 801612a:	d321      	bcc.n	8016170 <__multiply+0x98>
 801612c:	f104 0314 	add.w	r3, r4, #20
 8016130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016134:	f109 0314 	add.w	r3, r9, #20
 8016138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801613c:	9202      	str	r2, [sp, #8]
 801613e:	1b3a      	subs	r2, r7, r4
 8016140:	3a15      	subs	r2, #21
 8016142:	f022 0203 	bic.w	r2, r2, #3
 8016146:	3204      	adds	r2, #4
 8016148:	f104 0115 	add.w	r1, r4, #21
 801614c:	428f      	cmp	r7, r1
 801614e:	bf38      	it	cc
 8016150:	2204      	movcc	r2, #4
 8016152:	9201      	str	r2, [sp, #4]
 8016154:	9a02      	ldr	r2, [sp, #8]
 8016156:	9303      	str	r3, [sp, #12]
 8016158:	429a      	cmp	r2, r3
 801615a:	d80c      	bhi.n	8016176 <__multiply+0x9e>
 801615c:	2e00      	cmp	r6, #0
 801615e:	dd03      	ble.n	8016168 <__multiply+0x90>
 8016160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016164:	2b00      	cmp	r3, #0
 8016166:	d05a      	beq.n	801621e <__multiply+0x146>
 8016168:	6106      	str	r6, [r0, #16]
 801616a:	b005      	add	sp, #20
 801616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016170:	f843 2b04 	str.w	r2, [r3], #4
 8016174:	e7d8      	b.n	8016128 <__multiply+0x50>
 8016176:	f8b3 a000 	ldrh.w	sl, [r3]
 801617a:	f1ba 0f00 	cmp.w	sl, #0
 801617e:	d024      	beq.n	80161ca <__multiply+0xf2>
 8016180:	f104 0e14 	add.w	lr, r4, #20
 8016184:	46a9      	mov	r9, r5
 8016186:	f04f 0c00 	mov.w	ip, #0
 801618a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801618e:	f8d9 1000 	ldr.w	r1, [r9]
 8016192:	fa1f fb82 	uxth.w	fp, r2
 8016196:	b289      	uxth	r1, r1
 8016198:	fb0a 110b 	mla	r1, sl, fp, r1
 801619c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80161a0:	f8d9 2000 	ldr.w	r2, [r9]
 80161a4:	4461      	add	r1, ip
 80161a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80161aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80161ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80161b2:	b289      	uxth	r1, r1
 80161b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80161b8:	4577      	cmp	r7, lr
 80161ba:	f849 1b04 	str.w	r1, [r9], #4
 80161be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80161c2:	d8e2      	bhi.n	801618a <__multiply+0xb2>
 80161c4:	9a01      	ldr	r2, [sp, #4]
 80161c6:	f845 c002 	str.w	ip, [r5, r2]
 80161ca:	9a03      	ldr	r2, [sp, #12]
 80161cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80161d0:	3304      	adds	r3, #4
 80161d2:	f1b9 0f00 	cmp.w	r9, #0
 80161d6:	d020      	beq.n	801621a <__multiply+0x142>
 80161d8:	6829      	ldr	r1, [r5, #0]
 80161da:	f104 0c14 	add.w	ip, r4, #20
 80161de:	46ae      	mov	lr, r5
 80161e0:	f04f 0a00 	mov.w	sl, #0
 80161e4:	f8bc b000 	ldrh.w	fp, [ip]
 80161e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80161ec:	fb09 220b 	mla	r2, r9, fp, r2
 80161f0:	4492      	add	sl, r2
 80161f2:	b289      	uxth	r1, r1
 80161f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80161f8:	f84e 1b04 	str.w	r1, [lr], #4
 80161fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016200:	f8be 1000 	ldrh.w	r1, [lr]
 8016204:	0c12      	lsrs	r2, r2, #16
 8016206:	fb09 1102 	mla	r1, r9, r2, r1
 801620a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801620e:	4567      	cmp	r7, ip
 8016210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016214:	d8e6      	bhi.n	80161e4 <__multiply+0x10c>
 8016216:	9a01      	ldr	r2, [sp, #4]
 8016218:	50a9      	str	r1, [r5, r2]
 801621a:	3504      	adds	r5, #4
 801621c:	e79a      	b.n	8016154 <__multiply+0x7c>
 801621e:	3e01      	subs	r6, #1
 8016220:	e79c      	b.n	801615c <__multiply+0x84>
 8016222:	bf00      	nop
 8016224:	08018a9f 	.word	0x08018a9f
 8016228:	08018b10 	.word	0x08018b10

0801622c <__pow5mult>:
 801622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016230:	4615      	mov	r5, r2
 8016232:	f012 0203 	ands.w	r2, r2, #3
 8016236:	4606      	mov	r6, r0
 8016238:	460f      	mov	r7, r1
 801623a:	d007      	beq.n	801624c <__pow5mult+0x20>
 801623c:	4c25      	ldr	r4, [pc, #148]	; (80162d4 <__pow5mult+0xa8>)
 801623e:	3a01      	subs	r2, #1
 8016240:	2300      	movs	r3, #0
 8016242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016246:	f7ff fe9b 	bl	8015f80 <__multadd>
 801624a:	4607      	mov	r7, r0
 801624c:	10ad      	asrs	r5, r5, #2
 801624e:	d03d      	beq.n	80162cc <__pow5mult+0xa0>
 8016250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016252:	b97c      	cbnz	r4, 8016274 <__pow5mult+0x48>
 8016254:	2010      	movs	r0, #16
 8016256:	f7fd ff25 	bl	80140a4 <malloc>
 801625a:	4602      	mov	r2, r0
 801625c:	6270      	str	r0, [r6, #36]	; 0x24
 801625e:	b928      	cbnz	r0, 801626c <__pow5mult+0x40>
 8016260:	4b1d      	ldr	r3, [pc, #116]	; (80162d8 <__pow5mult+0xac>)
 8016262:	481e      	ldr	r0, [pc, #120]	; (80162dc <__pow5mult+0xb0>)
 8016264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016268:	f000 fcfc 	bl	8016c64 <__assert_func>
 801626c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016270:	6004      	str	r4, [r0, #0]
 8016272:	60c4      	str	r4, [r0, #12]
 8016274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801627c:	b94c      	cbnz	r4, 8016292 <__pow5mult+0x66>
 801627e:	f240 2171 	movw	r1, #625	; 0x271
 8016282:	4630      	mov	r0, r6
 8016284:	f7ff ff12 	bl	80160ac <__i2b>
 8016288:	2300      	movs	r3, #0
 801628a:	f8c8 0008 	str.w	r0, [r8, #8]
 801628e:	4604      	mov	r4, r0
 8016290:	6003      	str	r3, [r0, #0]
 8016292:	f04f 0900 	mov.w	r9, #0
 8016296:	07eb      	lsls	r3, r5, #31
 8016298:	d50a      	bpl.n	80162b0 <__pow5mult+0x84>
 801629a:	4639      	mov	r1, r7
 801629c:	4622      	mov	r2, r4
 801629e:	4630      	mov	r0, r6
 80162a0:	f7ff ff1a 	bl	80160d8 <__multiply>
 80162a4:	4639      	mov	r1, r7
 80162a6:	4680      	mov	r8, r0
 80162a8:	4630      	mov	r0, r6
 80162aa:	f7ff fe47 	bl	8015f3c <_Bfree>
 80162ae:	4647      	mov	r7, r8
 80162b0:	106d      	asrs	r5, r5, #1
 80162b2:	d00b      	beq.n	80162cc <__pow5mult+0xa0>
 80162b4:	6820      	ldr	r0, [r4, #0]
 80162b6:	b938      	cbnz	r0, 80162c8 <__pow5mult+0x9c>
 80162b8:	4622      	mov	r2, r4
 80162ba:	4621      	mov	r1, r4
 80162bc:	4630      	mov	r0, r6
 80162be:	f7ff ff0b 	bl	80160d8 <__multiply>
 80162c2:	6020      	str	r0, [r4, #0]
 80162c4:	f8c0 9000 	str.w	r9, [r0]
 80162c8:	4604      	mov	r4, r0
 80162ca:	e7e4      	b.n	8016296 <__pow5mult+0x6a>
 80162cc:	4638      	mov	r0, r7
 80162ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162d2:	bf00      	nop
 80162d4:	08018c60 	.word	0x08018c60
 80162d8:	08018a2d 	.word	0x08018a2d
 80162dc:	08018b10 	.word	0x08018b10

080162e0 <__lshift>:
 80162e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162e4:	460c      	mov	r4, r1
 80162e6:	6849      	ldr	r1, [r1, #4]
 80162e8:	6923      	ldr	r3, [r4, #16]
 80162ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80162ee:	68a3      	ldr	r3, [r4, #8]
 80162f0:	4607      	mov	r7, r0
 80162f2:	4691      	mov	r9, r2
 80162f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80162f8:	f108 0601 	add.w	r6, r8, #1
 80162fc:	42b3      	cmp	r3, r6
 80162fe:	db0b      	blt.n	8016318 <__lshift+0x38>
 8016300:	4638      	mov	r0, r7
 8016302:	f7ff fddb 	bl	8015ebc <_Balloc>
 8016306:	4605      	mov	r5, r0
 8016308:	b948      	cbnz	r0, 801631e <__lshift+0x3e>
 801630a:	4602      	mov	r2, r0
 801630c:	4b2a      	ldr	r3, [pc, #168]	; (80163b8 <__lshift+0xd8>)
 801630e:	482b      	ldr	r0, [pc, #172]	; (80163bc <__lshift+0xdc>)
 8016310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016314:	f000 fca6 	bl	8016c64 <__assert_func>
 8016318:	3101      	adds	r1, #1
 801631a:	005b      	lsls	r3, r3, #1
 801631c:	e7ee      	b.n	80162fc <__lshift+0x1c>
 801631e:	2300      	movs	r3, #0
 8016320:	f100 0114 	add.w	r1, r0, #20
 8016324:	f100 0210 	add.w	r2, r0, #16
 8016328:	4618      	mov	r0, r3
 801632a:	4553      	cmp	r3, sl
 801632c:	db37      	blt.n	801639e <__lshift+0xbe>
 801632e:	6920      	ldr	r0, [r4, #16]
 8016330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016334:	f104 0314 	add.w	r3, r4, #20
 8016338:	f019 091f 	ands.w	r9, r9, #31
 801633c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016340:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016344:	d02f      	beq.n	80163a6 <__lshift+0xc6>
 8016346:	f1c9 0e20 	rsb	lr, r9, #32
 801634a:	468a      	mov	sl, r1
 801634c:	f04f 0c00 	mov.w	ip, #0
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	fa02 f209 	lsl.w	r2, r2, r9
 8016356:	ea42 020c 	orr.w	r2, r2, ip
 801635a:	f84a 2b04 	str.w	r2, [sl], #4
 801635e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016362:	4298      	cmp	r0, r3
 8016364:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016368:	d8f2      	bhi.n	8016350 <__lshift+0x70>
 801636a:	1b03      	subs	r3, r0, r4
 801636c:	3b15      	subs	r3, #21
 801636e:	f023 0303 	bic.w	r3, r3, #3
 8016372:	3304      	adds	r3, #4
 8016374:	f104 0215 	add.w	r2, r4, #21
 8016378:	4290      	cmp	r0, r2
 801637a:	bf38      	it	cc
 801637c:	2304      	movcc	r3, #4
 801637e:	f841 c003 	str.w	ip, [r1, r3]
 8016382:	f1bc 0f00 	cmp.w	ip, #0
 8016386:	d001      	beq.n	801638c <__lshift+0xac>
 8016388:	f108 0602 	add.w	r6, r8, #2
 801638c:	3e01      	subs	r6, #1
 801638e:	4638      	mov	r0, r7
 8016390:	612e      	str	r6, [r5, #16]
 8016392:	4621      	mov	r1, r4
 8016394:	f7ff fdd2 	bl	8015f3c <_Bfree>
 8016398:	4628      	mov	r0, r5
 801639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801639e:	f842 0f04 	str.w	r0, [r2, #4]!
 80163a2:	3301      	adds	r3, #1
 80163a4:	e7c1      	b.n	801632a <__lshift+0x4a>
 80163a6:	3904      	subs	r1, #4
 80163a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80163ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80163b0:	4298      	cmp	r0, r3
 80163b2:	d8f9      	bhi.n	80163a8 <__lshift+0xc8>
 80163b4:	e7ea      	b.n	801638c <__lshift+0xac>
 80163b6:	bf00      	nop
 80163b8:	08018a9f 	.word	0x08018a9f
 80163bc:	08018b10 	.word	0x08018b10

080163c0 <__mcmp>:
 80163c0:	b530      	push	{r4, r5, lr}
 80163c2:	6902      	ldr	r2, [r0, #16]
 80163c4:	690c      	ldr	r4, [r1, #16]
 80163c6:	1b12      	subs	r2, r2, r4
 80163c8:	d10e      	bne.n	80163e8 <__mcmp+0x28>
 80163ca:	f100 0314 	add.w	r3, r0, #20
 80163ce:	3114      	adds	r1, #20
 80163d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80163d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80163d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80163dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80163e0:	42a5      	cmp	r5, r4
 80163e2:	d003      	beq.n	80163ec <__mcmp+0x2c>
 80163e4:	d305      	bcc.n	80163f2 <__mcmp+0x32>
 80163e6:	2201      	movs	r2, #1
 80163e8:	4610      	mov	r0, r2
 80163ea:	bd30      	pop	{r4, r5, pc}
 80163ec:	4283      	cmp	r3, r0
 80163ee:	d3f3      	bcc.n	80163d8 <__mcmp+0x18>
 80163f0:	e7fa      	b.n	80163e8 <__mcmp+0x28>
 80163f2:	f04f 32ff 	mov.w	r2, #4294967295
 80163f6:	e7f7      	b.n	80163e8 <__mcmp+0x28>

080163f8 <__mdiff>:
 80163f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163fc:	460c      	mov	r4, r1
 80163fe:	4606      	mov	r6, r0
 8016400:	4611      	mov	r1, r2
 8016402:	4620      	mov	r0, r4
 8016404:	4690      	mov	r8, r2
 8016406:	f7ff ffdb 	bl	80163c0 <__mcmp>
 801640a:	1e05      	subs	r5, r0, #0
 801640c:	d110      	bne.n	8016430 <__mdiff+0x38>
 801640e:	4629      	mov	r1, r5
 8016410:	4630      	mov	r0, r6
 8016412:	f7ff fd53 	bl	8015ebc <_Balloc>
 8016416:	b930      	cbnz	r0, 8016426 <__mdiff+0x2e>
 8016418:	4b3a      	ldr	r3, [pc, #232]	; (8016504 <__mdiff+0x10c>)
 801641a:	4602      	mov	r2, r0
 801641c:	f240 2132 	movw	r1, #562	; 0x232
 8016420:	4839      	ldr	r0, [pc, #228]	; (8016508 <__mdiff+0x110>)
 8016422:	f000 fc1f 	bl	8016c64 <__assert_func>
 8016426:	2301      	movs	r3, #1
 8016428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801642c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016430:	bfa4      	itt	ge
 8016432:	4643      	movge	r3, r8
 8016434:	46a0      	movge	r8, r4
 8016436:	4630      	mov	r0, r6
 8016438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801643c:	bfa6      	itte	ge
 801643e:	461c      	movge	r4, r3
 8016440:	2500      	movge	r5, #0
 8016442:	2501      	movlt	r5, #1
 8016444:	f7ff fd3a 	bl	8015ebc <_Balloc>
 8016448:	b920      	cbnz	r0, 8016454 <__mdiff+0x5c>
 801644a:	4b2e      	ldr	r3, [pc, #184]	; (8016504 <__mdiff+0x10c>)
 801644c:	4602      	mov	r2, r0
 801644e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016452:	e7e5      	b.n	8016420 <__mdiff+0x28>
 8016454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016458:	6926      	ldr	r6, [r4, #16]
 801645a:	60c5      	str	r5, [r0, #12]
 801645c:	f104 0914 	add.w	r9, r4, #20
 8016460:	f108 0514 	add.w	r5, r8, #20
 8016464:	f100 0e14 	add.w	lr, r0, #20
 8016468:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801646c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016470:	f108 0210 	add.w	r2, r8, #16
 8016474:	46f2      	mov	sl, lr
 8016476:	2100      	movs	r1, #0
 8016478:	f859 3b04 	ldr.w	r3, [r9], #4
 801647c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016480:	fa1f f883 	uxth.w	r8, r3
 8016484:	fa11 f18b 	uxtah	r1, r1, fp
 8016488:	0c1b      	lsrs	r3, r3, #16
 801648a:	eba1 0808 	sub.w	r8, r1, r8
 801648e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016492:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016496:	fa1f f888 	uxth.w	r8, r8
 801649a:	1419      	asrs	r1, r3, #16
 801649c:	454e      	cmp	r6, r9
 801649e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80164a2:	f84a 3b04 	str.w	r3, [sl], #4
 80164a6:	d8e7      	bhi.n	8016478 <__mdiff+0x80>
 80164a8:	1b33      	subs	r3, r6, r4
 80164aa:	3b15      	subs	r3, #21
 80164ac:	f023 0303 	bic.w	r3, r3, #3
 80164b0:	3304      	adds	r3, #4
 80164b2:	3415      	adds	r4, #21
 80164b4:	42a6      	cmp	r6, r4
 80164b6:	bf38      	it	cc
 80164b8:	2304      	movcc	r3, #4
 80164ba:	441d      	add	r5, r3
 80164bc:	4473      	add	r3, lr
 80164be:	469e      	mov	lr, r3
 80164c0:	462e      	mov	r6, r5
 80164c2:	4566      	cmp	r6, ip
 80164c4:	d30e      	bcc.n	80164e4 <__mdiff+0xec>
 80164c6:	f10c 0203 	add.w	r2, ip, #3
 80164ca:	1b52      	subs	r2, r2, r5
 80164cc:	f022 0203 	bic.w	r2, r2, #3
 80164d0:	3d03      	subs	r5, #3
 80164d2:	45ac      	cmp	ip, r5
 80164d4:	bf38      	it	cc
 80164d6:	2200      	movcc	r2, #0
 80164d8:	441a      	add	r2, r3
 80164da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80164de:	b17b      	cbz	r3, 8016500 <__mdiff+0x108>
 80164e0:	6107      	str	r7, [r0, #16]
 80164e2:	e7a3      	b.n	801642c <__mdiff+0x34>
 80164e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80164e8:	fa11 f288 	uxtah	r2, r1, r8
 80164ec:	1414      	asrs	r4, r2, #16
 80164ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80164f2:	b292      	uxth	r2, r2
 80164f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80164f8:	f84e 2b04 	str.w	r2, [lr], #4
 80164fc:	1421      	asrs	r1, r4, #16
 80164fe:	e7e0      	b.n	80164c2 <__mdiff+0xca>
 8016500:	3f01      	subs	r7, #1
 8016502:	e7ea      	b.n	80164da <__mdiff+0xe2>
 8016504:	08018a9f 	.word	0x08018a9f
 8016508:	08018b10 	.word	0x08018b10

0801650c <__d2b>:
 801650c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016510:	4689      	mov	r9, r1
 8016512:	2101      	movs	r1, #1
 8016514:	ec57 6b10 	vmov	r6, r7, d0
 8016518:	4690      	mov	r8, r2
 801651a:	f7ff fccf 	bl	8015ebc <_Balloc>
 801651e:	4604      	mov	r4, r0
 8016520:	b930      	cbnz	r0, 8016530 <__d2b+0x24>
 8016522:	4602      	mov	r2, r0
 8016524:	4b25      	ldr	r3, [pc, #148]	; (80165bc <__d2b+0xb0>)
 8016526:	4826      	ldr	r0, [pc, #152]	; (80165c0 <__d2b+0xb4>)
 8016528:	f240 310a 	movw	r1, #778	; 0x30a
 801652c:	f000 fb9a 	bl	8016c64 <__assert_func>
 8016530:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016534:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016538:	bb35      	cbnz	r5, 8016588 <__d2b+0x7c>
 801653a:	2e00      	cmp	r6, #0
 801653c:	9301      	str	r3, [sp, #4]
 801653e:	d028      	beq.n	8016592 <__d2b+0x86>
 8016540:	4668      	mov	r0, sp
 8016542:	9600      	str	r6, [sp, #0]
 8016544:	f7ff fd82 	bl	801604c <__lo0bits>
 8016548:	9900      	ldr	r1, [sp, #0]
 801654a:	b300      	cbz	r0, 801658e <__d2b+0x82>
 801654c:	9a01      	ldr	r2, [sp, #4]
 801654e:	f1c0 0320 	rsb	r3, r0, #32
 8016552:	fa02 f303 	lsl.w	r3, r2, r3
 8016556:	430b      	orrs	r3, r1
 8016558:	40c2      	lsrs	r2, r0
 801655a:	6163      	str	r3, [r4, #20]
 801655c:	9201      	str	r2, [sp, #4]
 801655e:	9b01      	ldr	r3, [sp, #4]
 8016560:	61a3      	str	r3, [r4, #24]
 8016562:	2b00      	cmp	r3, #0
 8016564:	bf14      	ite	ne
 8016566:	2202      	movne	r2, #2
 8016568:	2201      	moveq	r2, #1
 801656a:	6122      	str	r2, [r4, #16]
 801656c:	b1d5      	cbz	r5, 80165a4 <__d2b+0x98>
 801656e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016572:	4405      	add	r5, r0
 8016574:	f8c9 5000 	str.w	r5, [r9]
 8016578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801657c:	f8c8 0000 	str.w	r0, [r8]
 8016580:	4620      	mov	r0, r4
 8016582:	b003      	add	sp, #12
 8016584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801658c:	e7d5      	b.n	801653a <__d2b+0x2e>
 801658e:	6161      	str	r1, [r4, #20]
 8016590:	e7e5      	b.n	801655e <__d2b+0x52>
 8016592:	a801      	add	r0, sp, #4
 8016594:	f7ff fd5a 	bl	801604c <__lo0bits>
 8016598:	9b01      	ldr	r3, [sp, #4]
 801659a:	6163      	str	r3, [r4, #20]
 801659c:	2201      	movs	r2, #1
 801659e:	6122      	str	r2, [r4, #16]
 80165a0:	3020      	adds	r0, #32
 80165a2:	e7e3      	b.n	801656c <__d2b+0x60>
 80165a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80165a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80165ac:	f8c9 0000 	str.w	r0, [r9]
 80165b0:	6918      	ldr	r0, [r3, #16]
 80165b2:	f7ff fd2b 	bl	801600c <__hi0bits>
 80165b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80165ba:	e7df      	b.n	801657c <__d2b+0x70>
 80165bc:	08018a9f 	.word	0x08018a9f
 80165c0:	08018b10 	.word	0x08018b10

080165c4 <_calloc_r>:
 80165c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165c6:	fba1 2402 	umull	r2, r4, r1, r2
 80165ca:	b94c      	cbnz	r4, 80165e0 <_calloc_r+0x1c>
 80165cc:	4611      	mov	r1, r2
 80165ce:	9201      	str	r2, [sp, #4]
 80165d0:	f7fd fe14 	bl	80141fc <_malloc_r>
 80165d4:	9a01      	ldr	r2, [sp, #4]
 80165d6:	4605      	mov	r5, r0
 80165d8:	b930      	cbnz	r0, 80165e8 <_calloc_r+0x24>
 80165da:	4628      	mov	r0, r5
 80165dc:	b003      	add	sp, #12
 80165de:	bd30      	pop	{r4, r5, pc}
 80165e0:	220c      	movs	r2, #12
 80165e2:	6002      	str	r2, [r0, #0]
 80165e4:	2500      	movs	r5, #0
 80165e6:	e7f8      	b.n	80165da <_calloc_r+0x16>
 80165e8:	4621      	mov	r1, r4
 80165ea:	f7fd fd93 	bl	8014114 <memset>
 80165ee:	e7f4      	b.n	80165da <_calloc_r+0x16>

080165f0 <_realloc_r>:
 80165f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f4:	4680      	mov	r8, r0
 80165f6:	4614      	mov	r4, r2
 80165f8:	460e      	mov	r6, r1
 80165fa:	b921      	cbnz	r1, 8016606 <_realloc_r+0x16>
 80165fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016600:	4611      	mov	r1, r2
 8016602:	f7fd bdfb 	b.w	80141fc <_malloc_r>
 8016606:	b92a      	cbnz	r2, 8016614 <_realloc_r+0x24>
 8016608:	f7fd fd8c 	bl	8014124 <_free_r>
 801660c:	4625      	mov	r5, r4
 801660e:	4628      	mov	r0, r5
 8016610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016614:	f000 fbac 	bl	8016d70 <_malloc_usable_size_r>
 8016618:	4284      	cmp	r4, r0
 801661a:	4607      	mov	r7, r0
 801661c:	d802      	bhi.n	8016624 <_realloc_r+0x34>
 801661e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016622:	d812      	bhi.n	801664a <_realloc_r+0x5a>
 8016624:	4621      	mov	r1, r4
 8016626:	4640      	mov	r0, r8
 8016628:	f7fd fde8 	bl	80141fc <_malloc_r>
 801662c:	4605      	mov	r5, r0
 801662e:	2800      	cmp	r0, #0
 8016630:	d0ed      	beq.n	801660e <_realloc_r+0x1e>
 8016632:	42bc      	cmp	r4, r7
 8016634:	4622      	mov	r2, r4
 8016636:	4631      	mov	r1, r6
 8016638:	bf28      	it	cs
 801663a:	463a      	movcs	r2, r7
 801663c:	f7fd fd42 	bl	80140c4 <memcpy>
 8016640:	4631      	mov	r1, r6
 8016642:	4640      	mov	r0, r8
 8016644:	f7fd fd6e 	bl	8014124 <_free_r>
 8016648:	e7e1      	b.n	801660e <_realloc_r+0x1e>
 801664a:	4635      	mov	r5, r6
 801664c:	e7df      	b.n	801660e <_realloc_r+0x1e>

0801664e <__ssputs_r>:
 801664e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016652:	688e      	ldr	r6, [r1, #8]
 8016654:	429e      	cmp	r6, r3
 8016656:	4682      	mov	sl, r0
 8016658:	460c      	mov	r4, r1
 801665a:	4690      	mov	r8, r2
 801665c:	461f      	mov	r7, r3
 801665e:	d838      	bhi.n	80166d2 <__ssputs_r+0x84>
 8016660:	898a      	ldrh	r2, [r1, #12]
 8016662:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016666:	d032      	beq.n	80166ce <__ssputs_r+0x80>
 8016668:	6825      	ldr	r5, [r4, #0]
 801666a:	6909      	ldr	r1, [r1, #16]
 801666c:	eba5 0901 	sub.w	r9, r5, r1
 8016670:	6965      	ldr	r5, [r4, #20]
 8016672:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801667a:	3301      	adds	r3, #1
 801667c:	444b      	add	r3, r9
 801667e:	106d      	asrs	r5, r5, #1
 8016680:	429d      	cmp	r5, r3
 8016682:	bf38      	it	cc
 8016684:	461d      	movcc	r5, r3
 8016686:	0553      	lsls	r3, r2, #21
 8016688:	d531      	bpl.n	80166ee <__ssputs_r+0xa0>
 801668a:	4629      	mov	r1, r5
 801668c:	f7fd fdb6 	bl	80141fc <_malloc_r>
 8016690:	4606      	mov	r6, r0
 8016692:	b950      	cbnz	r0, 80166aa <__ssputs_r+0x5c>
 8016694:	230c      	movs	r3, #12
 8016696:	f8ca 3000 	str.w	r3, [sl]
 801669a:	89a3      	ldrh	r3, [r4, #12]
 801669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166a0:	81a3      	strh	r3, [r4, #12]
 80166a2:	f04f 30ff 	mov.w	r0, #4294967295
 80166a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166aa:	6921      	ldr	r1, [r4, #16]
 80166ac:	464a      	mov	r2, r9
 80166ae:	f7fd fd09 	bl	80140c4 <memcpy>
 80166b2:	89a3      	ldrh	r3, [r4, #12]
 80166b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80166b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166bc:	81a3      	strh	r3, [r4, #12]
 80166be:	6126      	str	r6, [r4, #16]
 80166c0:	6165      	str	r5, [r4, #20]
 80166c2:	444e      	add	r6, r9
 80166c4:	eba5 0509 	sub.w	r5, r5, r9
 80166c8:	6026      	str	r6, [r4, #0]
 80166ca:	60a5      	str	r5, [r4, #8]
 80166cc:	463e      	mov	r6, r7
 80166ce:	42be      	cmp	r6, r7
 80166d0:	d900      	bls.n	80166d4 <__ssputs_r+0x86>
 80166d2:	463e      	mov	r6, r7
 80166d4:	6820      	ldr	r0, [r4, #0]
 80166d6:	4632      	mov	r2, r6
 80166d8:	4641      	mov	r1, r8
 80166da:	f7fd fd01 	bl	80140e0 <memmove>
 80166de:	68a3      	ldr	r3, [r4, #8]
 80166e0:	1b9b      	subs	r3, r3, r6
 80166e2:	60a3      	str	r3, [r4, #8]
 80166e4:	6823      	ldr	r3, [r4, #0]
 80166e6:	4433      	add	r3, r6
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	2000      	movs	r0, #0
 80166ec:	e7db      	b.n	80166a6 <__ssputs_r+0x58>
 80166ee:	462a      	mov	r2, r5
 80166f0:	f7ff ff7e 	bl	80165f0 <_realloc_r>
 80166f4:	4606      	mov	r6, r0
 80166f6:	2800      	cmp	r0, #0
 80166f8:	d1e1      	bne.n	80166be <__ssputs_r+0x70>
 80166fa:	6921      	ldr	r1, [r4, #16]
 80166fc:	4650      	mov	r0, sl
 80166fe:	f7fd fd11 	bl	8014124 <_free_r>
 8016702:	e7c7      	b.n	8016694 <__ssputs_r+0x46>

08016704 <_svfiprintf_r>:
 8016704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016708:	4698      	mov	r8, r3
 801670a:	898b      	ldrh	r3, [r1, #12]
 801670c:	061b      	lsls	r3, r3, #24
 801670e:	b09d      	sub	sp, #116	; 0x74
 8016710:	4607      	mov	r7, r0
 8016712:	460d      	mov	r5, r1
 8016714:	4614      	mov	r4, r2
 8016716:	d50e      	bpl.n	8016736 <_svfiprintf_r+0x32>
 8016718:	690b      	ldr	r3, [r1, #16]
 801671a:	b963      	cbnz	r3, 8016736 <_svfiprintf_r+0x32>
 801671c:	2140      	movs	r1, #64	; 0x40
 801671e:	f7fd fd6d 	bl	80141fc <_malloc_r>
 8016722:	6028      	str	r0, [r5, #0]
 8016724:	6128      	str	r0, [r5, #16]
 8016726:	b920      	cbnz	r0, 8016732 <_svfiprintf_r+0x2e>
 8016728:	230c      	movs	r3, #12
 801672a:	603b      	str	r3, [r7, #0]
 801672c:	f04f 30ff 	mov.w	r0, #4294967295
 8016730:	e0d1      	b.n	80168d6 <_svfiprintf_r+0x1d2>
 8016732:	2340      	movs	r3, #64	; 0x40
 8016734:	616b      	str	r3, [r5, #20]
 8016736:	2300      	movs	r3, #0
 8016738:	9309      	str	r3, [sp, #36]	; 0x24
 801673a:	2320      	movs	r3, #32
 801673c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016740:	f8cd 800c 	str.w	r8, [sp, #12]
 8016744:	2330      	movs	r3, #48	; 0x30
 8016746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80168f0 <_svfiprintf_r+0x1ec>
 801674a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801674e:	f04f 0901 	mov.w	r9, #1
 8016752:	4623      	mov	r3, r4
 8016754:	469a      	mov	sl, r3
 8016756:	f813 2b01 	ldrb.w	r2, [r3], #1
 801675a:	b10a      	cbz	r2, 8016760 <_svfiprintf_r+0x5c>
 801675c:	2a25      	cmp	r2, #37	; 0x25
 801675e:	d1f9      	bne.n	8016754 <_svfiprintf_r+0x50>
 8016760:	ebba 0b04 	subs.w	fp, sl, r4
 8016764:	d00b      	beq.n	801677e <_svfiprintf_r+0x7a>
 8016766:	465b      	mov	r3, fp
 8016768:	4622      	mov	r2, r4
 801676a:	4629      	mov	r1, r5
 801676c:	4638      	mov	r0, r7
 801676e:	f7ff ff6e 	bl	801664e <__ssputs_r>
 8016772:	3001      	adds	r0, #1
 8016774:	f000 80aa 	beq.w	80168cc <_svfiprintf_r+0x1c8>
 8016778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801677a:	445a      	add	r2, fp
 801677c:	9209      	str	r2, [sp, #36]	; 0x24
 801677e:	f89a 3000 	ldrb.w	r3, [sl]
 8016782:	2b00      	cmp	r3, #0
 8016784:	f000 80a2 	beq.w	80168cc <_svfiprintf_r+0x1c8>
 8016788:	2300      	movs	r3, #0
 801678a:	f04f 32ff 	mov.w	r2, #4294967295
 801678e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016792:	f10a 0a01 	add.w	sl, sl, #1
 8016796:	9304      	str	r3, [sp, #16]
 8016798:	9307      	str	r3, [sp, #28]
 801679a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801679e:	931a      	str	r3, [sp, #104]	; 0x68
 80167a0:	4654      	mov	r4, sl
 80167a2:	2205      	movs	r2, #5
 80167a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167a8:	4851      	ldr	r0, [pc, #324]	; (80168f0 <_svfiprintf_r+0x1ec>)
 80167aa:	f7e9 fd51 	bl	8000250 <memchr>
 80167ae:	9a04      	ldr	r2, [sp, #16]
 80167b0:	b9d8      	cbnz	r0, 80167ea <_svfiprintf_r+0xe6>
 80167b2:	06d0      	lsls	r0, r2, #27
 80167b4:	bf44      	itt	mi
 80167b6:	2320      	movmi	r3, #32
 80167b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167bc:	0711      	lsls	r1, r2, #28
 80167be:	bf44      	itt	mi
 80167c0:	232b      	movmi	r3, #43	; 0x2b
 80167c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167c6:	f89a 3000 	ldrb.w	r3, [sl]
 80167ca:	2b2a      	cmp	r3, #42	; 0x2a
 80167cc:	d015      	beq.n	80167fa <_svfiprintf_r+0xf6>
 80167ce:	9a07      	ldr	r2, [sp, #28]
 80167d0:	4654      	mov	r4, sl
 80167d2:	2000      	movs	r0, #0
 80167d4:	f04f 0c0a 	mov.w	ip, #10
 80167d8:	4621      	mov	r1, r4
 80167da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167de:	3b30      	subs	r3, #48	; 0x30
 80167e0:	2b09      	cmp	r3, #9
 80167e2:	d94e      	bls.n	8016882 <_svfiprintf_r+0x17e>
 80167e4:	b1b0      	cbz	r0, 8016814 <_svfiprintf_r+0x110>
 80167e6:	9207      	str	r2, [sp, #28]
 80167e8:	e014      	b.n	8016814 <_svfiprintf_r+0x110>
 80167ea:	eba0 0308 	sub.w	r3, r0, r8
 80167ee:	fa09 f303 	lsl.w	r3, r9, r3
 80167f2:	4313      	orrs	r3, r2
 80167f4:	9304      	str	r3, [sp, #16]
 80167f6:	46a2      	mov	sl, r4
 80167f8:	e7d2      	b.n	80167a0 <_svfiprintf_r+0x9c>
 80167fa:	9b03      	ldr	r3, [sp, #12]
 80167fc:	1d19      	adds	r1, r3, #4
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	9103      	str	r1, [sp, #12]
 8016802:	2b00      	cmp	r3, #0
 8016804:	bfbb      	ittet	lt
 8016806:	425b      	neglt	r3, r3
 8016808:	f042 0202 	orrlt.w	r2, r2, #2
 801680c:	9307      	strge	r3, [sp, #28]
 801680e:	9307      	strlt	r3, [sp, #28]
 8016810:	bfb8      	it	lt
 8016812:	9204      	strlt	r2, [sp, #16]
 8016814:	7823      	ldrb	r3, [r4, #0]
 8016816:	2b2e      	cmp	r3, #46	; 0x2e
 8016818:	d10c      	bne.n	8016834 <_svfiprintf_r+0x130>
 801681a:	7863      	ldrb	r3, [r4, #1]
 801681c:	2b2a      	cmp	r3, #42	; 0x2a
 801681e:	d135      	bne.n	801688c <_svfiprintf_r+0x188>
 8016820:	9b03      	ldr	r3, [sp, #12]
 8016822:	1d1a      	adds	r2, r3, #4
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	9203      	str	r2, [sp, #12]
 8016828:	2b00      	cmp	r3, #0
 801682a:	bfb8      	it	lt
 801682c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016830:	3402      	adds	r4, #2
 8016832:	9305      	str	r3, [sp, #20]
 8016834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016900 <_svfiprintf_r+0x1fc>
 8016838:	7821      	ldrb	r1, [r4, #0]
 801683a:	2203      	movs	r2, #3
 801683c:	4650      	mov	r0, sl
 801683e:	f7e9 fd07 	bl	8000250 <memchr>
 8016842:	b140      	cbz	r0, 8016856 <_svfiprintf_r+0x152>
 8016844:	2340      	movs	r3, #64	; 0x40
 8016846:	eba0 000a 	sub.w	r0, r0, sl
 801684a:	fa03 f000 	lsl.w	r0, r3, r0
 801684e:	9b04      	ldr	r3, [sp, #16]
 8016850:	4303      	orrs	r3, r0
 8016852:	3401      	adds	r4, #1
 8016854:	9304      	str	r3, [sp, #16]
 8016856:	f814 1b01 	ldrb.w	r1, [r4], #1
 801685a:	4826      	ldr	r0, [pc, #152]	; (80168f4 <_svfiprintf_r+0x1f0>)
 801685c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016860:	2206      	movs	r2, #6
 8016862:	f7e9 fcf5 	bl	8000250 <memchr>
 8016866:	2800      	cmp	r0, #0
 8016868:	d038      	beq.n	80168dc <_svfiprintf_r+0x1d8>
 801686a:	4b23      	ldr	r3, [pc, #140]	; (80168f8 <_svfiprintf_r+0x1f4>)
 801686c:	bb1b      	cbnz	r3, 80168b6 <_svfiprintf_r+0x1b2>
 801686e:	9b03      	ldr	r3, [sp, #12]
 8016870:	3307      	adds	r3, #7
 8016872:	f023 0307 	bic.w	r3, r3, #7
 8016876:	3308      	adds	r3, #8
 8016878:	9303      	str	r3, [sp, #12]
 801687a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801687c:	4433      	add	r3, r6
 801687e:	9309      	str	r3, [sp, #36]	; 0x24
 8016880:	e767      	b.n	8016752 <_svfiprintf_r+0x4e>
 8016882:	fb0c 3202 	mla	r2, ip, r2, r3
 8016886:	460c      	mov	r4, r1
 8016888:	2001      	movs	r0, #1
 801688a:	e7a5      	b.n	80167d8 <_svfiprintf_r+0xd4>
 801688c:	2300      	movs	r3, #0
 801688e:	3401      	adds	r4, #1
 8016890:	9305      	str	r3, [sp, #20]
 8016892:	4619      	mov	r1, r3
 8016894:	f04f 0c0a 	mov.w	ip, #10
 8016898:	4620      	mov	r0, r4
 801689a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801689e:	3a30      	subs	r2, #48	; 0x30
 80168a0:	2a09      	cmp	r2, #9
 80168a2:	d903      	bls.n	80168ac <_svfiprintf_r+0x1a8>
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d0c5      	beq.n	8016834 <_svfiprintf_r+0x130>
 80168a8:	9105      	str	r1, [sp, #20]
 80168aa:	e7c3      	b.n	8016834 <_svfiprintf_r+0x130>
 80168ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80168b0:	4604      	mov	r4, r0
 80168b2:	2301      	movs	r3, #1
 80168b4:	e7f0      	b.n	8016898 <_svfiprintf_r+0x194>
 80168b6:	ab03      	add	r3, sp, #12
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	462a      	mov	r2, r5
 80168bc:	4b0f      	ldr	r3, [pc, #60]	; (80168fc <_svfiprintf_r+0x1f8>)
 80168be:	a904      	add	r1, sp, #16
 80168c0:	4638      	mov	r0, r7
 80168c2:	f7fd fda1 	bl	8014408 <_printf_float>
 80168c6:	1c42      	adds	r2, r0, #1
 80168c8:	4606      	mov	r6, r0
 80168ca:	d1d6      	bne.n	801687a <_svfiprintf_r+0x176>
 80168cc:	89ab      	ldrh	r3, [r5, #12]
 80168ce:	065b      	lsls	r3, r3, #25
 80168d0:	f53f af2c 	bmi.w	801672c <_svfiprintf_r+0x28>
 80168d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168d6:	b01d      	add	sp, #116	; 0x74
 80168d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168dc:	ab03      	add	r3, sp, #12
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	462a      	mov	r2, r5
 80168e2:	4b06      	ldr	r3, [pc, #24]	; (80168fc <_svfiprintf_r+0x1f8>)
 80168e4:	a904      	add	r1, sp, #16
 80168e6:	4638      	mov	r0, r7
 80168e8:	f7fe f81a 	bl	8014920 <_printf_i>
 80168ec:	e7eb      	b.n	80168c6 <_svfiprintf_r+0x1c2>
 80168ee:	bf00      	nop
 80168f0:	08018c6c 	.word	0x08018c6c
 80168f4:	08018c76 	.word	0x08018c76
 80168f8:	08014409 	.word	0x08014409
 80168fc:	0801664f 	.word	0x0801664f
 8016900:	08018c72 	.word	0x08018c72

08016904 <__sfputc_r>:
 8016904:	6893      	ldr	r3, [r2, #8]
 8016906:	3b01      	subs	r3, #1
 8016908:	2b00      	cmp	r3, #0
 801690a:	b410      	push	{r4}
 801690c:	6093      	str	r3, [r2, #8]
 801690e:	da08      	bge.n	8016922 <__sfputc_r+0x1e>
 8016910:	6994      	ldr	r4, [r2, #24]
 8016912:	42a3      	cmp	r3, r4
 8016914:	db01      	blt.n	801691a <__sfputc_r+0x16>
 8016916:	290a      	cmp	r1, #10
 8016918:	d103      	bne.n	8016922 <__sfputc_r+0x1e>
 801691a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801691e:	f7fe b9e3 	b.w	8014ce8 <__swbuf_r>
 8016922:	6813      	ldr	r3, [r2, #0]
 8016924:	1c58      	adds	r0, r3, #1
 8016926:	6010      	str	r0, [r2, #0]
 8016928:	7019      	strb	r1, [r3, #0]
 801692a:	4608      	mov	r0, r1
 801692c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016930:	4770      	bx	lr

08016932 <__sfputs_r>:
 8016932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016934:	4606      	mov	r6, r0
 8016936:	460f      	mov	r7, r1
 8016938:	4614      	mov	r4, r2
 801693a:	18d5      	adds	r5, r2, r3
 801693c:	42ac      	cmp	r4, r5
 801693e:	d101      	bne.n	8016944 <__sfputs_r+0x12>
 8016940:	2000      	movs	r0, #0
 8016942:	e007      	b.n	8016954 <__sfputs_r+0x22>
 8016944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016948:	463a      	mov	r2, r7
 801694a:	4630      	mov	r0, r6
 801694c:	f7ff ffda 	bl	8016904 <__sfputc_r>
 8016950:	1c43      	adds	r3, r0, #1
 8016952:	d1f3      	bne.n	801693c <__sfputs_r+0xa>
 8016954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016958 <_vfiprintf_r>:
 8016958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695c:	460d      	mov	r5, r1
 801695e:	b09d      	sub	sp, #116	; 0x74
 8016960:	4614      	mov	r4, r2
 8016962:	4698      	mov	r8, r3
 8016964:	4606      	mov	r6, r0
 8016966:	b118      	cbz	r0, 8016970 <_vfiprintf_r+0x18>
 8016968:	6983      	ldr	r3, [r0, #24]
 801696a:	b90b      	cbnz	r3, 8016970 <_vfiprintf_r+0x18>
 801696c:	f7ff f990 	bl	8015c90 <__sinit>
 8016970:	4b89      	ldr	r3, [pc, #548]	; (8016b98 <_vfiprintf_r+0x240>)
 8016972:	429d      	cmp	r5, r3
 8016974:	d11b      	bne.n	80169ae <_vfiprintf_r+0x56>
 8016976:	6875      	ldr	r5, [r6, #4]
 8016978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801697a:	07d9      	lsls	r1, r3, #31
 801697c:	d405      	bmi.n	801698a <_vfiprintf_r+0x32>
 801697e:	89ab      	ldrh	r3, [r5, #12]
 8016980:	059a      	lsls	r2, r3, #22
 8016982:	d402      	bmi.n	801698a <_vfiprintf_r+0x32>
 8016984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016986:	f7ff fa26 	bl	8015dd6 <__retarget_lock_acquire_recursive>
 801698a:	89ab      	ldrh	r3, [r5, #12]
 801698c:	071b      	lsls	r3, r3, #28
 801698e:	d501      	bpl.n	8016994 <_vfiprintf_r+0x3c>
 8016990:	692b      	ldr	r3, [r5, #16]
 8016992:	b9eb      	cbnz	r3, 80169d0 <_vfiprintf_r+0x78>
 8016994:	4629      	mov	r1, r5
 8016996:	4630      	mov	r0, r6
 8016998:	f7fe f9f8 	bl	8014d8c <__swsetup_r>
 801699c:	b1c0      	cbz	r0, 80169d0 <_vfiprintf_r+0x78>
 801699e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169a0:	07dc      	lsls	r4, r3, #31
 80169a2:	d50e      	bpl.n	80169c2 <_vfiprintf_r+0x6a>
 80169a4:	f04f 30ff 	mov.w	r0, #4294967295
 80169a8:	b01d      	add	sp, #116	; 0x74
 80169aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ae:	4b7b      	ldr	r3, [pc, #492]	; (8016b9c <_vfiprintf_r+0x244>)
 80169b0:	429d      	cmp	r5, r3
 80169b2:	d101      	bne.n	80169b8 <_vfiprintf_r+0x60>
 80169b4:	68b5      	ldr	r5, [r6, #8]
 80169b6:	e7df      	b.n	8016978 <_vfiprintf_r+0x20>
 80169b8:	4b79      	ldr	r3, [pc, #484]	; (8016ba0 <_vfiprintf_r+0x248>)
 80169ba:	429d      	cmp	r5, r3
 80169bc:	bf08      	it	eq
 80169be:	68f5      	ldreq	r5, [r6, #12]
 80169c0:	e7da      	b.n	8016978 <_vfiprintf_r+0x20>
 80169c2:	89ab      	ldrh	r3, [r5, #12]
 80169c4:	0598      	lsls	r0, r3, #22
 80169c6:	d4ed      	bmi.n	80169a4 <_vfiprintf_r+0x4c>
 80169c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169ca:	f7ff fa05 	bl	8015dd8 <__retarget_lock_release_recursive>
 80169ce:	e7e9      	b.n	80169a4 <_vfiprintf_r+0x4c>
 80169d0:	2300      	movs	r3, #0
 80169d2:	9309      	str	r3, [sp, #36]	; 0x24
 80169d4:	2320      	movs	r3, #32
 80169d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169da:	f8cd 800c 	str.w	r8, [sp, #12]
 80169de:	2330      	movs	r3, #48	; 0x30
 80169e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016ba4 <_vfiprintf_r+0x24c>
 80169e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169e8:	f04f 0901 	mov.w	r9, #1
 80169ec:	4623      	mov	r3, r4
 80169ee:	469a      	mov	sl, r3
 80169f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169f4:	b10a      	cbz	r2, 80169fa <_vfiprintf_r+0xa2>
 80169f6:	2a25      	cmp	r2, #37	; 0x25
 80169f8:	d1f9      	bne.n	80169ee <_vfiprintf_r+0x96>
 80169fa:	ebba 0b04 	subs.w	fp, sl, r4
 80169fe:	d00b      	beq.n	8016a18 <_vfiprintf_r+0xc0>
 8016a00:	465b      	mov	r3, fp
 8016a02:	4622      	mov	r2, r4
 8016a04:	4629      	mov	r1, r5
 8016a06:	4630      	mov	r0, r6
 8016a08:	f7ff ff93 	bl	8016932 <__sfputs_r>
 8016a0c:	3001      	adds	r0, #1
 8016a0e:	f000 80aa 	beq.w	8016b66 <_vfiprintf_r+0x20e>
 8016a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a14:	445a      	add	r2, fp
 8016a16:	9209      	str	r2, [sp, #36]	; 0x24
 8016a18:	f89a 3000 	ldrb.w	r3, [sl]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f000 80a2 	beq.w	8016b66 <_vfiprintf_r+0x20e>
 8016a22:	2300      	movs	r3, #0
 8016a24:	f04f 32ff 	mov.w	r2, #4294967295
 8016a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a2c:	f10a 0a01 	add.w	sl, sl, #1
 8016a30:	9304      	str	r3, [sp, #16]
 8016a32:	9307      	str	r3, [sp, #28]
 8016a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a38:	931a      	str	r3, [sp, #104]	; 0x68
 8016a3a:	4654      	mov	r4, sl
 8016a3c:	2205      	movs	r2, #5
 8016a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a42:	4858      	ldr	r0, [pc, #352]	; (8016ba4 <_vfiprintf_r+0x24c>)
 8016a44:	f7e9 fc04 	bl	8000250 <memchr>
 8016a48:	9a04      	ldr	r2, [sp, #16]
 8016a4a:	b9d8      	cbnz	r0, 8016a84 <_vfiprintf_r+0x12c>
 8016a4c:	06d1      	lsls	r1, r2, #27
 8016a4e:	bf44      	itt	mi
 8016a50:	2320      	movmi	r3, #32
 8016a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a56:	0713      	lsls	r3, r2, #28
 8016a58:	bf44      	itt	mi
 8016a5a:	232b      	movmi	r3, #43	; 0x2b
 8016a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a60:	f89a 3000 	ldrb.w	r3, [sl]
 8016a64:	2b2a      	cmp	r3, #42	; 0x2a
 8016a66:	d015      	beq.n	8016a94 <_vfiprintf_r+0x13c>
 8016a68:	9a07      	ldr	r2, [sp, #28]
 8016a6a:	4654      	mov	r4, sl
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	f04f 0c0a 	mov.w	ip, #10
 8016a72:	4621      	mov	r1, r4
 8016a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a78:	3b30      	subs	r3, #48	; 0x30
 8016a7a:	2b09      	cmp	r3, #9
 8016a7c:	d94e      	bls.n	8016b1c <_vfiprintf_r+0x1c4>
 8016a7e:	b1b0      	cbz	r0, 8016aae <_vfiprintf_r+0x156>
 8016a80:	9207      	str	r2, [sp, #28]
 8016a82:	e014      	b.n	8016aae <_vfiprintf_r+0x156>
 8016a84:	eba0 0308 	sub.w	r3, r0, r8
 8016a88:	fa09 f303 	lsl.w	r3, r9, r3
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	9304      	str	r3, [sp, #16]
 8016a90:	46a2      	mov	sl, r4
 8016a92:	e7d2      	b.n	8016a3a <_vfiprintf_r+0xe2>
 8016a94:	9b03      	ldr	r3, [sp, #12]
 8016a96:	1d19      	adds	r1, r3, #4
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	9103      	str	r1, [sp, #12]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	bfbb      	ittet	lt
 8016aa0:	425b      	neglt	r3, r3
 8016aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8016aa6:	9307      	strge	r3, [sp, #28]
 8016aa8:	9307      	strlt	r3, [sp, #28]
 8016aaa:	bfb8      	it	lt
 8016aac:	9204      	strlt	r2, [sp, #16]
 8016aae:	7823      	ldrb	r3, [r4, #0]
 8016ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8016ab2:	d10c      	bne.n	8016ace <_vfiprintf_r+0x176>
 8016ab4:	7863      	ldrb	r3, [r4, #1]
 8016ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8016ab8:	d135      	bne.n	8016b26 <_vfiprintf_r+0x1ce>
 8016aba:	9b03      	ldr	r3, [sp, #12]
 8016abc:	1d1a      	adds	r2, r3, #4
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	9203      	str	r2, [sp, #12]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	bfb8      	it	lt
 8016ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8016aca:	3402      	adds	r4, #2
 8016acc:	9305      	str	r3, [sp, #20]
 8016ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016bb4 <_vfiprintf_r+0x25c>
 8016ad2:	7821      	ldrb	r1, [r4, #0]
 8016ad4:	2203      	movs	r2, #3
 8016ad6:	4650      	mov	r0, sl
 8016ad8:	f7e9 fbba 	bl	8000250 <memchr>
 8016adc:	b140      	cbz	r0, 8016af0 <_vfiprintf_r+0x198>
 8016ade:	2340      	movs	r3, #64	; 0x40
 8016ae0:	eba0 000a 	sub.w	r0, r0, sl
 8016ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8016ae8:	9b04      	ldr	r3, [sp, #16]
 8016aea:	4303      	orrs	r3, r0
 8016aec:	3401      	adds	r4, #1
 8016aee:	9304      	str	r3, [sp, #16]
 8016af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016af4:	482c      	ldr	r0, [pc, #176]	; (8016ba8 <_vfiprintf_r+0x250>)
 8016af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016afa:	2206      	movs	r2, #6
 8016afc:	f7e9 fba8 	bl	8000250 <memchr>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	d03f      	beq.n	8016b84 <_vfiprintf_r+0x22c>
 8016b04:	4b29      	ldr	r3, [pc, #164]	; (8016bac <_vfiprintf_r+0x254>)
 8016b06:	bb1b      	cbnz	r3, 8016b50 <_vfiprintf_r+0x1f8>
 8016b08:	9b03      	ldr	r3, [sp, #12]
 8016b0a:	3307      	adds	r3, #7
 8016b0c:	f023 0307 	bic.w	r3, r3, #7
 8016b10:	3308      	adds	r3, #8
 8016b12:	9303      	str	r3, [sp, #12]
 8016b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b16:	443b      	add	r3, r7
 8016b18:	9309      	str	r3, [sp, #36]	; 0x24
 8016b1a:	e767      	b.n	80169ec <_vfiprintf_r+0x94>
 8016b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b20:	460c      	mov	r4, r1
 8016b22:	2001      	movs	r0, #1
 8016b24:	e7a5      	b.n	8016a72 <_vfiprintf_r+0x11a>
 8016b26:	2300      	movs	r3, #0
 8016b28:	3401      	adds	r4, #1
 8016b2a:	9305      	str	r3, [sp, #20]
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	f04f 0c0a 	mov.w	ip, #10
 8016b32:	4620      	mov	r0, r4
 8016b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b38:	3a30      	subs	r2, #48	; 0x30
 8016b3a:	2a09      	cmp	r2, #9
 8016b3c:	d903      	bls.n	8016b46 <_vfiprintf_r+0x1ee>
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d0c5      	beq.n	8016ace <_vfiprintf_r+0x176>
 8016b42:	9105      	str	r1, [sp, #20]
 8016b44:	e7c3      	b.n	8016ace <_vfiprintf_r+0x176>
 8016b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	e7f0      	b.n	8016b32 <_vfiprintf_r+0x1da>
 8016b50:	ab03      	add	r3, sp, #12
 8016b52:	9300      	str	r3, [sp, #0]
 8016b54:	462a      	mov	r2, r5
 8016b56:	4b16      	ldr	r3, [pc, #88]	; (8016bb0 <_vfiprintf_r+0x258>)
 8016b58:	a904      	add	r1, sp, #16
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f7fd fc54 	bl	8014408 <_printf_float>
 8016b60:	4607      	mov	r7, r0
 8016b62:	1c78      	adds	r0, r7, #1
 8016b64:	d1d6      	bne.n	8016b14 <_vfiprintf_r+0x1bc>
 8016b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b68:	07d9      	lsls	r1, r3, #31
 8016b6a:	d405      	bmi.n	8016b78 <_vfiprintf_r+0x220>
 8016b6c:	89ab      	ldrh	r3, [r5, #12]
 8016b6e:	059a      	lsls	r2, r3, #22
 8016b70:	d402      	bmi.n	8016b78 <_vfiprintf_r+0x220>
 8016b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b74:	f7ff f930 	bl	8015dd8 <__retarget_lock_release_recursive>
 8016b78:	89ab      	ldrh	r3, [r5, #12]
 8016b7a:	065b      	lsls	r3, r3, #25
 8016b7c:	f53f af12 	bmi.w	80169a4 <_vfiprintf_r+0x4c>
 8016b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b82:	e711      	b.n	80169a8 <_vfiprintf_r+0x50>
 8016b84:	ab03      	add	r3, sp, #12
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	462a      	mov	r2, r5
 8016b8a:	4b09      	ldr	r3, [pc, #36]	; (8016bb0 <_vfiprintf_r+0x258>)
 8016b8c:	a904      	add	r1, sp, #16
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f7fd fec6 	bl	8014920 <_printf_i>
 8016b94:	e7e4      	b.n	8016b60 <_vfiprintf_r+0x208>
 8016b96:	bf00      	nop
 8016b98:	08018ad0 	.word	0x08018ad0
 8016b9c:	08018af0 	.word	0x08018af0
 8016ba0:	08018ab0 	.word	0x08018ab0
 8016ba4:	08018c6c 	.word	0x08018c6c
 8016ba8:	08018c76 	.word	0x08018c76
 8016bac:	08014409 	.word	0x08014409
 8016bb0:	08016933 	.word	0x08016933
 8016bb4:	08018c72 	.word	0x08018c72

08016bb8 <__sread>:
 8016bb8:	b510      	push	{r4, lr}
 8016bba:	460c      	mov	r4, r1
 8016bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc0:	f000 f8de 	bl	8016d80 <_read_r>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	bfab      	itete	ge
 8016bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bca:	89a3      	ldrhlt	r3, [r4, #12]
 8016bcc:	181b      	addge	r3, r3, r0
 8016bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bd2:	bfac      	ite	ge
 8016bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bd6:	81a3      	strhlt	r3, [r4, #12]
 8016bd8:	bd10      	pop	{r4, pc}

08016bda <__swrite>:
 8016bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bde:	461f      	mov	r7, r3
 8016be0:	898b      	ldrh	r3, [r1, #12]
 8016be2:	05db      	lsls	r3, r3, #23
 8016be4:	4605      	mov	r5, r0
 8016be6:	460c      	mov	r4, r1
 8016be8:	4616      	mov	r6, r2
 8016bea:	d505      	bpl.n	8016bf8 <__swrite+0x1e>
 8016bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bf0:	2302      	movs	r3, #2
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	f000 f898 	bl	8016d28 <_lseek_r>
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c02:	81a3      	strh	r3, [r4, #12]
 8016c04:	4632      	mov	r2, r6
 8016c06:	463b      	mov	r3, r7
 8016c08:	4628      	mov	r0, r5
 8016c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c0e:	f000 b817 	b.w	8016c40 <_write_r>

08016c12 <__sseek>:
 8016c12:	b510      	push	{r4, lr}
 8016c14:	460c      	mov	r4, r1
 8016c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c1a:	f000 f885 	bl	8016d28 <_lseek_r>
 8016c1e:	1c43      	adds	r3, r0, #1
 8016c20:	89a3      	ldrh	r3, [r4, #12]
 8016c22:	bf15      	itete	ne
 8016c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c2e:	81a3      	strheq	r3, [r4, #12]
 8016c30:	bf18      	it	ne
 8016c32:	81a3      	strhne	r3, [r4, #12]
 8016c34:	bd10      	pop	{r4, pc}

08016c36 <__sclose>:
 8016c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c3a:	f000 b831 	b.w	8016ca0 <_close_r>
	...

08016c40 <_write_r>:
 8016c40:	b538      	push	{r3, r4, r5, lr}
 8016c42:	4d07      	ldr	r5, [pc, #28]	; (8016c60 <_write_r+0x20>)
 8016c44:	4604      	mov	r4, r0
 8016c46:	4608      	mov	r0, r1
 8016c48:	4611      	mov	r1, r2
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	602a      	str	r2, [r5, #0]
 8016c4e:	461a      	mov	r2, r3
 8016c50:	f000 f938 	bl	8016ec4 <_write>
 8016c54:	1c43      	adds	r3, r0, #1
 8016c56:	d102      	bne.n	8016c5e <_write_r+0x1e>
 8016c58:	682b      	ldr	r3, [r5, #0]
 8016c5a:	b103      	cbz	r3, 8016c5e <_write_r+0x1e>
 8016c5c:	6023      	str	r3, [r4, #0]
 8016c5e:	bd38      	pop	{r3, r4, r5, pc}
 8016c60:	20001a9c 	.word	0x20001a9c

08016c64 <__assert_func>:
 8016c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c66:	4614      	mov	r4, r2
 8016c68:	461a      	mov	r2, r3
 8016c6a:	4b09      	ldr	r3, [pc, #36]	; (8016c90 <__assert_func+0x2c>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	4605      	mov	r5, r0
 8016c70:	68d8      	ldr	r0, [r3, #12]
 8016c72:	b14c      	cbz	r4, 8016c88 <__assert_func+0x24>
 8016c74:	4b07      	ldr	r3, [pc, #28]	; (8016c94 <__assert_func+0x30>)
 8016c76:	9100      	str	r1, [sp, #0]
 8016c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c7c:	4906      	ldr	r1, [pc, #24]	; (8016c98 <__assert_func+0x34>)
 8016c7e:	462b      	mov	r3, r5
 8016c80:	f000 f81e 	bl	8016cc0 <fiprintf>
 8016c84:	f000 f89b 	bl	8016dbe <abort>
 8016c88:	4b04      	ldr	r3, [pc, #16]	; (8016c9c <__assert_func+0x38>)
 8016c8a:	461c      	mov	r4, r3
 8016c8c:	e7f3      	b.n	8016c76 <__assert_func+0x12>
 8016c8e:	bf00      	nop
 8016c90:	2000134c 	.word	0x2000134c
 8016c94:	08018c7d 	.word	0x08018c7d
 8016c98:	08018c8a 	.word	0x08018c8a
 8016c9c:	08018cb8 	.word	0x08018cb8

08016ca0 <_close_r>:
 8016ca0:	b538      	push	{r3, r4, r5, lr}
 8016ca2:	4d06      	ldr	r5, [pc, #24]	; (8016cbc <_close_r+0x1c>)
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	4608      	mov	r0, r1
 8016caa:	602b      	str	r3, [r5, #0]
 8016cac:	f000 f8d2 	bl	8016e54 <_close>
 8016cb0:	1c43      	adds	r3, r0, #1
 8016cb2:	d102      	bne.n	8016cba <_close_r+0x1a>
 8016cb4:	682b      	ldr	r3, [r5, #0]
 8016cb6:	b103      	cbz	r3, 8016cba <_close_r+0x1a>
 8016cb8:	6023      	str	r3, [r4, #0]
 8016cba:	bd38      	pop	{r3, r4, r5, pc}
 8016cbc:	20001a9c 	.word	0x20001a9c

08016cc0 <fiprintf>:
 8016cc0:	b40e      	push	{r1, r2, r3}
 8016cc2:	b503      	push	{r0, r1, lr}
 8016cc4:	4601      	mov	r1, r0
 8016cc6:	ab03      	add	r3, sp, #12
 8016cc8:	4805      	ldr	r0, [pc, #20]	; (8016ce0 <fiprintf+0x20>)
 8016cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cce:	6800      	ldr	r0, [r0, #0]
 8016cd0:	9301      	str	r3, [sp, #4]
 8016cd2:	f7ff fe41 	bl	8016958 <_vfiprintf_r>
 8016cd6:	b002      	add	sp, #8
 8016cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cdc:	b003      	add	sp, #12
 8016cde:	4770      	bx	lr
 8016ce0:	2000134c 	.word	0x2000134c

08016ce4 <_fstat_r>:
 8016ce4:	b538      	push	{r3, r4, r5, lr}
 8016ce6:	4d07      	ldr	r5, [pc, #28]	; (8016d04 <_fstat_r+0x20>)
 8016ce8:	2300      	movs	r3, #0
 8016cea:	4604      	mov	r4, r0
 8016cec:	4608      	mov	r0, r1
 8016cee:	4611      	mov	r1, r2
 8016cf0:	602b      	str	r3, [r5, #0]
 8016cf2:	f000 f8b7 	bl	8016e64 <_fstat>
 8016cf6:	1c43      	adds	r3, r0, #1
 8016cf8:	d102      	bne.n	8016d00 <_fstat_r+0x1c>
 8016cfa:	682b      	ldr	r3, [r5, #0]
 8016cfc:	b103      	cbz	r3, 8016d00 <_fstat_r+0x1c>
 8016cfe:	6023      	str	r3, [r4, #0]
 8016d00:	bd38      	pop	{r3, r4, r5, pc}
 8016d02:	bf00      	nop
 8016d04:	20001a9c 	.word	0x20001a9c

08016d08 <_isatty_r>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4d06      	ldr	r5, [pc, #24]	; (8016d24 <_isatty_r+0x1c>)
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	4604      	mov	r4, r0
 8016d10:	4608      	mov	r0, r1
 8016d12:	602b      	str	r3, [r5, #0]
 8016d14:	f000 f8b6 	bl	8016e84 <_isatty>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_isatty_r+0x1a>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_isatty_r+0x1a>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	20001a9c 	.word	0x20001a9c

08016d28 <_lseek_r>:
 8016d28:	b538      	push	{r3, r4, r5, lr}
 8016d2a:	4d07      	ldr	r5, [pc, #28]	; (8016d48 <_lseek_r+0x20>)
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	4608      	mov	r0, r1
 8016d30:	4611      	mov	r1, r2
 8016d32:	2200      	movs	r2, #0
 8016d34:	602a      	str	r2, [r5, #0]
 8016d36:	461a      	mov	r2, r3
 8016d38:	f000 f8b4 	bl	8016ea4 <_lseek>
 8016d3c:	1c43      	adds	r3, r0, #1
 8016d3e:	d102      	bne.n	8016d46 <_lseek_r+0x1e>
 8016d40:	682b      	ldr	r3, [r5, #0]
 8016d42:	b103      	cbz	r3, 8016d46 <_lseek_r+0x1e>
 8016d44:	6023      	str	r3, [r4, #0]
 8016d46:	bd38      	pop	{r3, r4, r5, pc}
 8016d48:	20001a9c 	.word	0x20001a9c

08016d4c <__ascii_mbtowc>:
 8016d4c:	b082      	sub	sp, #8
 8016d4e:	b901      	cbnz	r1, 8016d52 <__ascii_mbtowc+0x6>
 8016d50:	a901      	add	r1, sp, #4
 8016d52:	b142      	cbz	r2, 8016d66 <__ascii_mbtowc+0x1a>
 8016d54:	b14b      	cbz	r3, 8016d6a <__ascii_mbtowc+0x1e>
 8016d56:	7813      	ldrb	r3, [r2, #0]
 8016d58:	600b      	str	r3, [r1, #0]
 8016d5a:	7812      	ldrb	r2, [r2, #0]
 8016d5c:	1e10      	subs	r0, r2, #0
 8016d5e:	bf18      	it	ne
 8016d60:	2001      	movne	r0, #1
 8016d62:	b002      	add	sp, #8
 8016d64:	4770      	bx	lr
 8016d66:	4610      	mov	r0, r2
 8016d68:	e7fb      	b.n	8016d62 <__ascii_mbtowc+0x16>
 8016d6a:	f06f 0001 	mvn.w	r0, #1
 8016d6e:	e7f8      	b.n	8016d62 <__ascii_mbtowc+0x16>

08016d70 <_malloc_usable_size_r>:
 8016d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d74:	1f18      	subs	r0, r3, #4
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	bfbc      	itt	lt
 8016d7a:	580b      	ldrlt	r3, [r1, r0]
 8016d7c:	18c0      	addlt	r0, r0, r3
 8016d7e:	4770      	bx	lr

08016d80 <_read_r>:
 8016d80:	b538      	push	{r3, r4, r5, lr}
 8016d82:	4d07      	ldr	r5, [pc, #28]	; (8016da0 <_read_r+0x20>)
 8016d84:	4604      	mov	r4, r0
 8016d86:	4608      	mov	r0, r1
 8016d88:	4611      	mov	r1, r2
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	602a      	str	r2, [r5, #0]
 8016d8e:	461a      	mov	r2, r3
 8016d90:	f000 f890 	bl	8016eb4 <_read>
 8016d94:	1c43      	adds	r3, r0, #1
 8016d96:	d102      	bne.n	8016d9e <_read_r+0x1e>
 8016d98:	682b      	ldr	r3, [r5, #0]
 8016d9a:	b103      	cbz	r3, 8016d9e <_read_r+0x1e>
 8016d9c:	6023      	str	r3, [r4, #0]
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}
 8016da0:	20001a9c 	.word	0x20001a9c

08016da4 <__ascii_wctomb>:
 8016da4:	b149      	cbz	r1, 8016dba <__ascii_wctomb+0x16>
 8016da6:	2aff      	cmp	r2, #255	; 0xff
 8016da8:	bf85      	ittet	hi
 8016daa:	238a      	movhi	r3, #138	; 0x8a
 8016dac:	6003      	strhi	r3, [r0, #0]
 8016dae:	700a      	strbls	r2, [r1, #0]
 8016db0:	f04f 30ff 	movhi.w	r0, #4294967295
 8016db4:	bf98      	it	ls
 8016db6:	2001      	movls	r0, #1
 8016db8:	4770      	bx	lr
 8016dba:	4608      	mov	r0, r1
 8016dbc:	4770      	bx	lr

08016dbe <abort>:
 8016dbe:	b508      	push	{r3, lr}
 8016dc0:	2006      	movs	r0, #6
 8016dc2:	f000 f82b 	bl	8016e1c <raise>
 8016dc6:	2001      	movs	r0, #1
 8016dc8:	f000 f884 	bl	8016ed4 <_exit>

08016dcc <_raise_r>:
 8016dcc:	291f      	cmp	r1, #31
 8016dce:	b538      	push	{r3, r4, r5, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	460d      	mov	r5, r1
 8016dd4:	d904      	bls.n	8016de0 <_raise_r+0x14>
 8016dd6:	2316      	movs	r3, #22
 8016dd8:	6003      	str	r3, [r0, #0]
 8016dda:	f04f 30ff 	mov.w	r0, #4294967295
 8016dde:	bd38      	pop	{r3, r4, r5, pc}
 8016de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016de2:	b112      	cbz	r2, 8016dea <_raise_r+0x1e>
 8016de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016de8:	b94b      	cbnz	r3, 8016dfe <_raise_r+0x32>
 8016dea:	4620      	mov	r0, r4
 8016dec:	f000 f830 	bl	8016e50 <_getpid_r>
 8016df0:	462a      	mov	r2, r5
 8016df2:	4601      	mov	r1, r0
 8016df4:	4620      	mov	r0, r4
 8016df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dfa:	f000 b817 	b.w	8016e2c <_kill_r>
 8016dfe:	2b01      	cmp	r3, #1
 8016e00:	d00a      	beq.n	8016e18 <_raise_r+0x4c>
 8016e02:	1c59      	adds	r1, r3, #1
 8016e04:	d103      	bne.n	8016e0e <_raise_r+0x42>
 8016e06:	2316      	movs	r3, #22
 8016e08:	6003      	str	r3, [r0, #0]
 8016e0a:	2001      	movs	r0, #1
 8016e0c:	e7e7      	b.n	8016dde <_raise_r+0x12>
 8016e0e:	2400      	movs	r4, #0
 8016e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016e14:	4628      	mov	r0, r5
 8016e16:	4798      	blx	r3
 8016e18:	2000      	movs	r0, #0
 8016e1a:	e7e0      	b.n	8016dde <_raise_r+0x12>

08016e1c <raise>:
 8016e1c:	4b02      	ldr	r3, [pc, #8]	; (8016e28 <raise+0xc>)
 8016e1e:	4601      	mov	r1, r0
 8016e20:	6818      	ldr	r0, [r3, #0]
 8016e22:	f7ff bfd3 	b.w	8016dcc <_raise_r>
 8016e26:	bf00      	nop
 8016e28:	2000134c 	.word	0x2000134c

08016e2c <_kill_r>:
 8016e2c:	b538      	push	{r3, r4, r5, lr}
 8016e2e:	4d07      	ldr	r5, [pc, #28]	; (8016e4c <_kill_r+0x20>)
 8016e30:	2300      	movs	r3, #0
 8016e32:	4604      	mov	r4, r0
 8016e34:	4608      	mov	r0, r1
 8016e36:	4611      	mov	r1, r2
 8016e38:	602b      	str	r3, [r5, #0]
 8016e3a:	f000 f82b 	bl	8016e94 <_kill>
 8016e3e:	1c43      	adds	r3, r0, #1
 8016e40:	d102      	bne.n	8016e48 <_kill_r+0x1c>
 8016e42:	682b      	ldr	r3, [r5, #0]
 8016e44:	b103      	cbz	r3, 8016e48 <_kill_r+0x1c>
 8016e46:	6023      	str	r3, [r4, #0]
 8016e48:	bd38      	pop	{r3, r4, r5, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20001a9c 	.word	0x20001a9c

08016e50 <_getpid_r>:
 8016e50:	f000 b810 	b.w	8016e74 <_getpid>

08016e54 <_close>:
 8016e54:	4b02      	ldr	r3, [pc, #8]	; (8016e60 <_close+0xc>)
 8016e56:	2258      	movs	r2, #88	; 0x58
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e5e:	4770      	bx	lr
 8016e60:	20001a9c 	.word	0x20001a9c

08016e64 <_fstat>:
 8016e64:	4b02      	ldr	r3, [pc, #8]	; (8016e70 <_fstat+0xc>)
 8016e66:	2258      	movs	r2, #88	; 0x58
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e6e:	4770      	bx	lr
 8016e70:	20001a9c 	.word	0x20001a9c

08016e74 <_getpid>:
 8016e74:	4b02      	ldr	r3, [pc, #8]	; (8016e80 <_getpid+0xc>)
 8016e76:	2258      	movs	r2, #88	; 0x58
 8016e78:	601a      	str	r2, [r3, #0]
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e7e:	4770      	bx	lr
 8016e80:	20001a9c 	.word	0x20001a9c

08016e84 <_isatty>:
 8016e84:	4b02      	ldr	r3, [pc, #8]	; (8016e90 <_isatty+0xc>)
 8016e86:	2258      	movs	r2, #88	; 0x58
 8016e88:	601a      	str	r2, [r3, #0]
 8016e8a:	2000      	movs	r0, #0
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop
 8016e90:	20001a9c 	.word	0x20001a9c

08016e94 <_kill>:
 8016e94:	4b02      	ldr	r3, [pc, #8]	; (8016ea0 <_kill+0xc>)
 8016e96:	2258      	movs	r2, #88	; 0x58
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e9e:	4770      	bx	lr
 8016ea0:	20001a9c 	.word	0x20001a9c

08016ea4 <_lseek>:
 8016ea4:	4b02      	ldr	r3, [pc, #8]	; (8016eb0 <_lseek+0xc>)
 8016ea6:	2258      	movs	r2, #88	; 0x58
 8016ea8:	601a      	str	r2, [r3, #0]
 8016eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8016eae:	4770      	bx	lr
 8016eb0:	20001a9c 	.word	0x20001a9c

08016eb4 <_read>:
 8016eb4:	4b02      	ldr	r3, [pc, #8]	; (8016ec0 <_read+0xc>)
 8016eb6:	2258      	movs	r2, #88	; 0x58
 8016eb8:	601a      	str	r2, [r3, #0]
 8016eba:	f04f 30ff 	mov.w	r0, #4294967295
 8016ebe:	4770      	bx	lr
 8016ec0:	20001a9c 	.word	0x20001a9c

08016ec4 <_write>:
 8016ec4:	4b02      	ldr	r3, [pc, #8]	; (8016ed0 <_write+0xc>)
 8016ec6:	2258      	movs	r2, #88	; 0x58
 8016ec8:	601a      	str	r2, [r3, #0]
 8016eca:	f04f 30ff 	mov.w	r0, #4294967295
 8016ece:	4770      	bx	lr
 8016ed0:	20001a9c 	.word	0x20001a9c

08016ed4 <_exit>:
 8016ed4:	e7fe      	b.n	8016ed4 <_exit>
	...

08016ed8 <_init>:
 8016ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eda:	bf00      	nop
 8016edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ede:	bc08      	pop	{r3}
 8016ee0:	469e      	mov	lr, r3
 8016ee2:	4770      	bx	lr

08016ee4 <_fini>:
 8016ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ee6:	bf00      	nop
 8016ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eea:	bc08      	pop	{r3}
 8016eec:	469e      	mov	lr, r3
 8016eee:	4770      	bx	lr
