
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a4  080081a4  00021d1c  2**0
                  CONTENTS
  4 .ARM          00000008  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081ac  080081ac  00021d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001d1c  20000000  080081b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20001d1c  08009ed0  00021d1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020b4  08009ed0  000220b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021d1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015567  00000000  00000000  00021d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  000372b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a205  00000000  00000000  0003c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a1a  00000000  00000000  00066515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101685  00000000  00000000  0007cf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e5b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e4  00000000  00000000  0017e604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001d1c 	.word	0x20001d1c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800758c 	.word	0x0800758c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001d20 	.word	0x20001d20
 800023c:	0800758c 	.word	0x0800758c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_DMA_Init+0x38>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <MX_DMA_Init+0x38>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_DMA_Init+0x38>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2044      	movs	r0, #68	; 0x44
 8000608:	f001 ff8b 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800060c:	2044      	movs	r0, #68	; 0x44
 800060e:	f001 ffa4 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_GPIO_Init+0x110>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <MX_GPIO_Init+0x110>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_GPIO_Init+0x110>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0310 	and.w	r3, r3, #16
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_GPIO_Init+0x110>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_GPIO_Init+0x110>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_GPIO_Init+0x110>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x110>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x110>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x110>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_GPIO_Init+0x110>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <MX_GPIO_Init+0x110>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_GPIO_Init+0x110>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0x110>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0x110>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0x110>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006ae:	2200      	movs	r2, #0
 80006b0:	f647 0110 	movw	r1, #30736	; 0x7810
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_GPIO_Init+0x114>)
 80006b6:	f002 fc93 	bl	8002fe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <MX_GPIO_Init+0x118>)
 80006c0:	f002 fc8e 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <MX_GPIO_Init+0x11c>)
 80006cc:	f002 fc88 	bl	8002fe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006d0:	f647 0310 	movw	r3, #30736	; 0x7810
 80006d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0x114>)
 80006ea:	f002 facd 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ee:	2310      	movs	r3, #16
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_GPIO_Init+0x118>)
 8000706:	f002 fabf 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800070a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800070e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_GPIO_Init+0x11c>)
 8000724:	f002 fab0 	bl	8002c88 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serialPortDebug,(uint8_t *)&ch,1,0xFFFF);//Blocking mode printing
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	2201      	movs	r2, #1
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <__io_putchar+0x20>)
 8000752:	f004 fe83 	bl	800545c <HAL_UART_Transmit>
  return ch;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20001f08 	.word	0x20001f08

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b0cd      	sub	sp, #308	; 0x134
 8000768:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 fd7e 	bl	800226a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f97f 	bl	8000a70 <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f7ff ff55 	bl	8000620 <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f7ff ff35 	bl	80005e4 <MX_DMA_Init>
  MX_SPI4_Init();
 800077a:	f000 fcfb 	bl	8001174 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 800077e:	f000 ff61 	bl	8001644 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000782:	f000 fc81 	bl	8001088 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000786:	f000 fcbd 	bl	8001104 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 800078a:	f000 fbcf 	bl	8000f2c <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 800078e:	f000 ff89 	bl	80016a4 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000792:	f000 ff13 	bl	80015bc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000796:	f001 f999 	bl	8001acc <W25qxx_Init>



  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 800079a:	48a4      	ldr	r0, [pc, #656]	; (8000a2c <main+0x2c8>)
 800079c:	f005 ff78 	bl	8006690 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	48a2      	ldr	r0, [pc, #648]	; (8000a30 <main+0x2cc>)
 80007a8:	f002 fc1a 	bl	8002fe0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f001 fdb9 	bl	8002324 <HAL_Delay>

  char readBytes[200]="ABC";
 80007b2:	4ba0      	ldr	r3, [pc, #640]	; (8000a34 <main+0x2d0>)
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	22c4      	movs	r2, #196	; 0xc4
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fed8 	bl	8006574 <memset>
  int i;
//  eraseSector_3ByteAdd_FM(localPortFM,0);
//  eraseSector_3ByteAdd_FM(shrdPortFM ,0);

  W25qxx_EraseBlock(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fac9 	bl	8001d5c <W25qxx_EraseBlock>

  W25qxx_ReadBytes(readBytes, 0, 16*10);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	22a0      	movs	r2, #160	; 0xa0
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fc89 	bl	80020e8 <W25qxx_ReadBytes>
//  for ( i=0; i<200; i++) {if(i%16==0) {printf("\r\n");} printf("%X ",readBytes[i]);}

  W25qxx_WriteBlock(IMG, 0, 0, sizeof(IMG));
 80007d6:	f641 43a2 	movw	r3, #7330	; 0x1ca2
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	4896      	ldr	r0, [pc, #600]	; (8000a38 <main+0x2d4>)
 80007e0:	f001 fc06 	bl	8001ff0 <W25qxx_WriteBlock>

  W25qxx_ReadBytes(readBytes, 0, 16*10);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	22a0      	movs	r2, #160	; 0xa0
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fc7c 	bl	80020e8 <W25qxx_ReadBytes>
//  for ( i=0; i<200; i++) {if(i%16==0) {printf("\r\n");} printf("%X ",readBytes[i]);}




  uint8_t emptyLoop=0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(fareDelay);
 80007f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fa:	f001 fd93 	bl	8002324 <HAL_Delay>

	  if (emptyLoop==1) {
 80007fe:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000802:	2b01      	cmp	r3, #1
 8000804:	d130      	bne.n	8000868 <main+0x104>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2110      	movs	r1, #16
 800080a:	488c      	ldr	r0, [pc, #560]	; (8000a3c <main+0x2d8>)
 800080c:	f002 fbe8 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	4889      	ldr	r0, [pc, #548]	; (8000a3c <main+0x2d8>)
 8000816:	f002 fbe3 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4887      	ldr	r0, [pc, #540]	; (8000a3c <main+0x2d8>)
 8000820:	f002 fbde 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4884      	ldr	r0, [pc, #528]	; (8000a3c <main+0x2d8>)
 800082a:	f002 fbd9 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 800082e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000832:	f001 fd77 	bl	8002324 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	4880      	ldr	r0, [pc, #512]	; (8000a3c <main+0x2d8>)
 800083c:	f002 fbd0 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2120      	movs	r1, #32
 8000844:	487d      	ldr	r0, [pc, #500]	; (8000a3c <main+0x2d8>)
 8000846:	f002 fbcb 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	487b      	ldr	r0, [pc, #492]	; (8000a3c <main+0x2d8>)
 8000850:	f002 fbc6 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4878      	ldr	r0, [pc, #480]	; (8000a3c <main+0x2d8>)
 800085a:	f002 fbc1 	bl	8002fe0 <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 800085e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000862:	f001 fd5f 	bl	8002324 <HAL_Delay>
 8000866:	e7c6      	b.n	80007f6 <main+0x92>
	  }
	  else {


	  		loop++;
 8000868:	4b75      	ldr	r3, [pc, #468]	; (8000a40 <main+0x2dc>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b73      	ldr	r3, [pc, #460]	; (8000a40 <main+0x2dc>)
 8000872:	801a      	strh	r2, [r3, #0]
	  		loop=(loop)%0x100;
 8000874:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <main+0x2dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b70      	ldr	r3, [pc, #448]	; (8000a40 <main+0x2dc>)
 800087e:	801a      	strh	r2, [r3, #0]
	  		printf("--------------------------\r\nNew Loop:%d \r\n",loop);
 8000880:	4b6f      	ldr	r3, [pc, #444]	; (8000a40 <main+0x2dc>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	486f      	ldr	r0, [pc, #444]	; (8000a44 <main+0x2e0>)
 8000888:	f005 fe7c 	bl	8006584 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  		writeSR(localPortFM,0x40);
 800088c:	4c6e      	ldr	r4, [pc, #440]	; (8000a48 <main+0x2e4>)
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	9315      	str	r3, [sp, #84]	; 0x54
 8000892:	4668      	mov	r0, sp
 8000894:	f104 0310 	add.w	r3, r4, #16
 8000898:	2254      	movs	r2, #84	; 0x54
 800089a:	4619      	mov	r1, r3
 800089c:	f005 fe5c 	bl	8006558 <memcpy>
 80008a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008a4:	f000 f9fc 	bl	8000ca0 <writeSR>
	  	chipSelect(localPortFM);
 80008a8:	4c67      	ldr	r4, [pc, #412]	; (8000a48 <main+0x2e4>)
 80008aa:	4668      	mov	r0, sp
 80008ac:	f104 0310 	add.w	r3, r4, #16
 80008b0:	2254      	movs	r2, #84	; 0x54
 80008b2:	4619      	mov	r1, r3
 80008b4:	f005 fe50 	bl	8006558 <memcpy>
 80008b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008bc:	f000 f934 	bl	8000b28 <chipSelect>
		HAL_SPI_Transmit(&localPortFM, (uint8_t *) &RDSR, 1, 100);
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	2201      	movs	r2, #1
 80008c4:	4961      	ldr	r1, [pc, #388]	; (8000a4c <main+0x2e8>)
 80008c6:	4860      	ldr	r0, [pc, #384]	; (8000a48 <main+0x2e4>)
 80008c8:	f003 fdcd 	bl	8004466 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&localPortFM, (uint8_t *) &SR, 1, 100);
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	2201      	movs	r2, #1
 80008d0:	495f      	ldr	r1, [pc, #380]	; (8000a50 <main+0x2ec>)
 80008d2:	485d      	ldr	r0, [pc, #372]	; (8000a48 <main+0x2e4>)
 80008d4:	f003 ff35 	bl	8004742 <HAL_SPI_Receive>
	  	chipDeSelect(localPortFM);
 80008d8:	4c5b      	ldr	r4, [pc, #364]	; (8000a48 <main+0x2e4>)
 80008da:	4668      	mov	r0, sp
 80008dc:	f104 0310 	add.w	r3, r4, #16
 80008e0:	2254      	movs	r2, #84	; 0x54
 80008e2:	4619      	mov	r1, r3
 80008e4:	f005 fe38 	bl	8006558 <memcpy>
 80008e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ec:	f000 f944 	bl	8000b78 <chipDeSelect>
		printf("SR of LocalFM:0x%02X \r\n", SR);
 80008f0:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <main+0x2ec>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4857      	ldr	r0, [pc, #348]	; (8000a54 <main+0x2f0>)
 80008f8:	f005 fe44 	bl	8006584 <iprintf>
		HAL_Delay(10);
 80008fc:	200a      	movs	r0, #10
 80008fe:	f001 fd11 	bl	8002324 <HAL_Delay>

		writeSR(shrdPortFM,0x40);
 8000902:	4c55      	ldr	r4, [pc, #340]	; (8000a58 <main+0x2f4>)
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	9315      	str	r3, [sp, #84]	; 0x54
 8000908:	4668      	mov	r0, sp
 800090a:	f104 0310 	add.w	r3, r4, #16
 800090e:	2254      	movs	r2, #84	; 0x54
 8000910:	4619      	mov	r1, r3
 8000912:	f005 fe21 	bl	8006558 <memcpy>
 8000916:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800091a:	f000 f9c1 	bl	8000ca0 <writeSR>
	  	chipSelect(shrdPortFM);
 800091e:	4c4e      	ldr	r4, [pc, #312]	; (8000a58 <main+0x2f4>)
 8000920:	4668      	mov	r0, sp
 8000922:	f104 0310 	add.w	r3, r4, #16
 8000926:	2254      	movs	r2, #84	; 0x54
 8000928:	4619      	mov	r1, r3
 800092a:	f005 fe15 	bl	8006558 <memcpy>
 800092e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000932:	f000 f8f9 	bl	8000b28 <chipSelect>
		HAL_SPI_Transmit(&shrdPortFM, (uint8_t *) &RDSR, 1, 100);
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	2201      	movs	r2, #1
 800093a:	4944      	ldr	r1, [pc, #272]	; (8000a4c <main+0x2e8>)
 800093c:	4846      	ldr	r0, [pc, #280]	; (8000a58 <main+0x2f4>)
 800093e:	f003 fd92 	bl	8004466 <HAL_SPI_Transmit>
		HAL_SPI_Receive (&shrdPortFM, (uint8_t *) &SR,   1, 100);
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	2201      	movs	r2, #1
 8000946:	4942      	ldr	r1, [pc, #264]	; (8000a50 <main+0x2ec>)
 8000948:	4843      	ldr	r0, [pc, #268]	; (8000a58 <main+0x2f4>)
 800094a:	f003 fefa 	bl	8004742 <HAL_SPI_Receive>
	  	chipDeSelect(shrdPortFM);
 800094e:	4c42      	ldr	r4, [pc, #264]	; (8000a58 <main+0x2f4>)
 8000950:	4668      	mov	r0, sp
 8000952:	f104 0310 	add.w	r3, r4, #16
 8000956:	2254      	movs	r2, #84	; 0x54
 8000958:	4619      	mov	r1, r3
 800095a:	f005 fdfd 	bl	8006558 <memcpy>
 800095e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000962:	f000 f909 	bl	8000b78 <chipDeSelect>
		printf("SR of SharedFM:0x%02X \r\n", SR);
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <main+0x2ec>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	483b      	ldr	r0, [pc, #236]	; (8000a5c <main+0x2f8>)
 800096e:	f005 fe09 	bl	8006584 <iprintf>
		HAL_Delay(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f001 fcd6 	bl	8002324 <HAL_Delay>

	printf("MemoryID:0x%lX \r\n", W25qxx_ReadID());
 8000978:	f000 ffb6 	bl	80018e8 <W25qxx_ReadID>
 800097c:	4603      	mov	r3, r0
 800097e:	4619      	mov	r1, r3
 8000980:	4837      	ldr	r0, [pc, #220]	; (8000a60 <main+0x2fc>)
 8000982:	f005 fdff 	bl	8006584 <iprintf>

  	HAL_Delay(tinyDelay);
 8000986:	2064      	movs	r0, #100	; 0x64
 8000988:	f001 fccc 	bl	8002324 <HAL_Delay>

  	adrs=loop;
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <main+0x2dc>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <main+0x300>)
 8000994:	601a      	str	r2, [r3, #0]

	printf("Local Memory: \r\n");
 8000996:	4834      	ldr	r0, [pc, #208]	; (8000a68 <main+0x304>)
 8000998:	f005 fe7a 	bl	8006690 <puts>
	write_3ByteAdd_FM(localPortFM,adrs,adrs);
 800099c:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <main+0x300>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <main+0x300>)
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	4c28      	ldr	r4, [pc, #160]	; (8000a48 <main+0x2e4>)
 80009a8:	9216      	str	r2, [sp, #88]	; 0x58
 80009aa:	9315      	str	r3, [sp, #84]	; 0x54
 80009ac:	4668      	mov	r0, sp
 80009ae:	f104 0310 	add.w	r3, r4, #16
 80009b2:	2254      	movs	r2, #84	; 0x54
 80009b4:	4619      	mov	r1, r3
 80009b6:	f005 fdcf 	bl	8006558 <memcpy>
 80009ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009be:	f000 f9b9 	bl	8000d34 <write_3ByteAdd_FM>
	read_3ByteAdd_FM(localPortFM,adrs);
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <main+0x300>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4c20      	ldr	r4, [pc, #128]	; (8000a48 <main+0x2e4>)
 80009c8:	9315      	str	r3, [sp, #84]	; 0x54
 80009ca:	4668      	mov	r0, sp
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	2254      	movs	r2, #84	; 0x54
 80009d2:	4619      	mov	r1, r3
 80009d4:	f005 fdc0 	bl	8006558 <memcpy>
 80009d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009dc:	f000 fa30 	bl	8000e40 <read_3ByteAdd_FM>
	printf("Shared Memory: \r\n");
 80009e0:	4822      	ldr	r0, [pc, #136]	; (8000a6c <main+0x308>)
 80009e2:	f005 fe55 	bl	8006690 <puts>
	write_3ByteAdd_FM(shrdPortFM,adrs,adrs);
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <main+0x300>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <main+0x300>)
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	4c19      	ldr	r4, [pc, #100]	; (8000a58 <main+0x2f4>)
 80009f2:	9216      	str	r2, [sp, #88]	; 0x58
 80009f4:	9315      	str	r3, [sp, #84]	; 0x54
 80009f6:	4668      	mov	r0, sp
 80009f8:	f104 0310 	add.w	r3, r4, #16
 80009fc:	2254      	movs	r2, #84	; 0x54
 80009fe:	4619      	mov	r1, r3
 8000a00:	f005 fdaa 	bl	8006558 <memcpy>
 8000a04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a08:	f000 f994 	bl	8000d34 <write_3ByteAdd_FM>
	read_3ByteAdd_FM(shrdPortFM,adrs);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <main+0x300>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4c11      	ldr	r4, [pc, #68]	; (8000a58 <main+0x2f4>)
 8000a12:	9315      	str	r3, [sp, #84]	; 0x54
 8000a14:	4668      	mov	r0, sp
 8000a16:	f104 0310 	add.w	r3, r4, #16
 8000a1a:	2254      	movs	r2, #84	; 0x54
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f005 fd9b 	bl	8006558 <memcpy>
 8000a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a26:	f000 fa0b 	bl	8000e40 <read_3ByteAdd_FM>
		HAL_Delay(fareDelay);
 8000a2a:	e6e4      	b.n	80007f6 <main+0x92>
 8000a2c:	080075a4 	.word	0x080075a4
 8000a30:	40020400 	.word	0x40020400
 8000a34:	00434241 	.word	0x00434241
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	20001d38 	.word	0x20001d38
 8000a44:	080075e0 	.word	0x080075e0
 8000a48:	20001e54 	.word	0x20001e54
 8000a4c:	20001ca5 	.word	0x20001ca5
 8000a50:	20001ca2 	.word	0x20001ca2
 8000a54:	0800760c 	.word	0x0800760c
 8000a58:	20001d8c 	.word	0x20001d8c
 8000a5c:	08007624 	.word	0x08007624
 8000a60:	08007640 	.word	0x08007640
 8000a64:	20001d3c 	.word	0x20001d3c
 8000a68:	08007654 	.word	0x08007654
 8000a6c:	08007664 	.word	0x08007664

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fd78 	bl	8006574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xb0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xb0>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xb0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <SystemClock_Config+0xb4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <SystemClock_Config+0xb4>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <SystemClock_Config+0xb4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fb5b 	bl	8003198 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 fa18 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fdf4 	bl	80036f4 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b12:	f000 fa03 	bl	8000f1c <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <chipSelect>:
  	  HAL_Delay(on_time);
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
  	  HAL_Delay(off_time);
}

void chipSelect(SPI_HandleTypeDef spiPort){
 8000b28:	b084      	sub	sp, #16
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	f107 0c08 	add.w	ip, r7, #8
 8000b32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(csDelay);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f001 fbf4 	bl	8002324 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Shared hspi1 PA4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <chipSelect+0x48>)
 8000b42:	f002 fa4d 	bl	8002fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // Shared hspi4 PA1
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <chipSelect+0x4c>)
 8000b4c:	f002 fa48 	bl	8002fe0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <chipSelect+0x4c>)
 8000b58:	f002 fa42 	bl	8002fe0 <HAL_GPIO_WritePin>
	HAL_Delay(csDelay);
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f001 fbe1 	bl	8002324 <HAL_Delay>
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40021000 	.word	0x40021000

08000b78 <chipDeSelect>:

void chipDeSelect(SPI_HandleTypeDef spiPort){
 8000b78:	b084      	sub	sp, #16
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	f107 0c08 	add.w	ip, r7, #8
 8000b82:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(csDelay);
 8000b86:	200a      	movs	r0, #10
 8000b88:	f001 fbcc 	bl	8002324 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // for sharedFM
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <chipDeSelect+0x48>)
 8000b92:	f002 fa25 	bl	8002fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // for localFM
 8000b96:	2201      	movs	r2, #1
 8000b98:	2110      	movs	r1, #16
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <chipDeSelect+0x4c>)
 8000b9c:	f002 fa20 	bl	8002fe0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <chipDeSelect+0x4c>)
 8000ba8:	f002 fa1a 	bl	8002fe0 <HAL_GPIO_WritePin>
	HAL_Delay(csDelay);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f001 fbb9 	bl	8002324 <HAL_Delay>
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bba:	b004      	add	sp, #16
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <WRENABLE_FM>:

void WRENABLE_FM(SPI_HandleTypeDef spiPort)
{
 8000bc8:	b084      	sub	sp, #16
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b096      	sub	sp, #88	; 0x58
 8000bce:	af16      	add	r7, sp, #88	; 0x58
 8000bd0:	f107 0c08 	add.w	ip, r7, #8
 8000bd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	chipSelect(spiPort);
 8000bd8:	4668      	mov	r0, sp
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2254      	movs	r2, #84	; 0x54
 8000be0:	4619      	mov	r1, r3
 8000be2:	f005 fcb9 	bl	8006558 <memcpy>
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bec:	f7ff ff9c 	bl	8000b28 <chipSelect>
	  HAL_Delay(csDelay);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f001 fb97 	bl	8002324 <HAL_Delay>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WREN, 1, 10);
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <WRENABLE_FM+0x68>)
 8000bfc:	f107 0008 	add.w	r0, r7, #8
 8000c00:	f003 fc31 	bl	8004466 <HAL_SPI_Transmit>
	  HAL_Delay(csDelay);
 8000c04:	200a      	movs	r0, #10
 8000c06:	f001 fb8d 	bl	8002324 <HAL_Delay>
	chipDeSelect(spiPort);
 8000c0a:	4668      	mov	r0, sp
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	2254      	movs	r2, #84	; 0x54
 8000c12:	4619      	mov	r1, r3
 8000c14:	f005 fca0 	bl	8006558 <memcpy>
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1e:	f7ff ffab 	bl	8000b78 <chipDeSelect>
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20001ca3 	.word	0x20001ca3

08000c34 <WRDISABLE_FM>:

void WRDISABLE_FM(SPI_HandleTypeDef spiPort)
{
 8000c34:	b084      	sub	sp, #16
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b096      	sub	sp, #88	; 0x58
 8000c3a:	af16      	add	r7, sp, #88	; 0x58
 8000c3c:	f107 0c08 	add.w	ip, r7, #8
 8000c40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	chipSelect(spiPort);
 8000c44:	4668      	mov	r0, sp
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	2254      	movs	r2, #84	; 0x54
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f005 fc83 	bl	8006558 <memcpy>
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	f7ff ff66 	bl	8000b28 <chipSelect>
	  HAL_Delay(csDelay);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f001 fb61 	bl	8002324 <HAL_Delay>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRDI, 1, 10);
 8000c62:	230a      	movs	r3, #10
 8000c64:	2201      	movs	r2, #1
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <WRDISABLE_FM+0x68>)
 8000c68:	f107 0008 	add.w	r0, r7, #8
 8000c6c:	f003 fbfb 	bl	8004466 <HAL_SPI_Transmit>
	  HAL_Delay(csDelay);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f001 fb57 	bl	8002324 <HAL_Delay>
	chipDeSelect(spiPort);
 8000c76:	4668      	mov	r0, sp
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	2254      	movs	r2, #84	; 0x54
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f005 fc6a 	bl	8006558 <memcpy>
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8a:	f7ff ff75 	bl	8000b78 <chipDeSelect>
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20001ca4 	.word	0x20001ca4

08000ca0 <writeSR>:

void writeSR(SPI_HandleTypeDef spiPort, uint8_t StatusR)
{
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b096      	sub	sp, #88	; 0x58
 8000ca6:	af16      	add	r7, sp, #88	; 0x58
 8000ca8:	f107 0c08 	add.w	ip, r7, #8
 8000cac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	WRENABLE_FM(spiPort);
 8000cb0:	4668      	mov	r0, sp
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2254      	movs	r2, #84	; 0x54
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f005 fc4d 	bl	8006558 <memcpy>
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc4:	f7ff ff80 	bl	8000bc8 <WRENABLE_FM>
	chipSelect(spiPort);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	2254      	movs	r2, #84	; 0x54
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f005 fc41 	bl	8006558 <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cdc:	f7ff ff24 	bl	8000b28 <chipSelect>
	HAL_Delay(csDelay);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f001 fb1f 	bl	8002324 <HAL_Delay>
	HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRSR, 1, 10);
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4911      	ldr	r1, [pc, #68]	; (8000d30 <writeSR+0x90>)
 8000cec:	f107 0008 	add.w	r0, r7, #8
 8000cf0:	f003 fbb9 	bl	8004466 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&spiPort, (uint8_t *) &StatusR, 1, 10);
 8000cf4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f107 0008 	add.w	r0, r7, #8
 8000d00:	f003 fbb1 	bl	8004466 <HAL_SPI_Transmit>
	HAL_Delay(csDelay);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f001 fb0d 	bl	8002324 <HAL_Delay>
//	  printf("SR written:0x%02X SR read:0x%02X \r\n",StatusR, ReadSR(spiPort));
	chipDeSelect(spiPort);
 8000d0a:	4668      	mov	r0, sp
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	2254      	movs	r2, #84	; 0x54
 8000d12:	4619      	mov	r1, r3
 8000d14:	f005 fc20 	bl	8006558 <memcpy>
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1e:	f7ff ff2b 	bl	8000b78 <chipDeSelect>
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d2a:	b004      	add	sp, #16
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20001ca6 	.word	0x20001ca6

08000d34 <write_3ByteAdd_FM>:
	chipDeSelect(spiPort);

	return SR;
}

void write_3ByteAdd_FM(SPI_HandleTypeDef spiPort, uint32_t Addr, uint8_t writeDataByte){
 8000d34:	b084      	sub	sp, #16
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b098      	sub	sp, #96	; 0x60
 8000d3a:	af16      	add	r7, sp, #88	; 0x58
 8000d3c:	f107 0c10 	add.w	ip, r7, #16
 8000d40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			uint8_t B1Add=Addr>> 16;
 8000d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	71fb      	strb	r3, [r7, #7]
			uint8_t B2Add=Addr>> 8;
 8000d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	71bb      	strb	r3, [r7, #6]
			uint8_t B3Add=Addr;
 8000d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	717b      	strb	r3, [r7, #5]

			WRENABLE_FM(spiPort);
 8000d5a:	4668      	mov	r0, sp
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	2254      	movs	r2, #84	; 0x54
 8000d62:	4619      	mov	r1, r3
 8000d64:	f005 fbf8 	bl	8006558 <memcpy>
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d6e:	f7ff ff2b 	bl	8000bc8 <WRENABLE_FM>
			chipSelect(spiPort);
 8000d72:	4668      	mov	r0, sp
 8000d74:	f107 0320 	add.w	r3, r7, #32
 8000d78:	2254      	movs	r2, #84	; 0x54
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f005 fbec 	bl	8006558 <memcpy>
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d86:	f7ff fecf 	bl	8000b28 <chipSelect>
	  		HAL_Delay(20);
 8000d8a:	2014      	movs	r0, #20
 8000d8c:	f001 faca 	bl	8002324 <HAL_Delay>

			  //Sending the write command
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRITE_3ByteAdd, 1, 100);
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	4928      	ldr	r1, [pc, #160]	; (8000e38 <write_3ByteAdd_FM+0x104>)
 8000d96:	f107 0010 	add.w	r0, r7, #16
 8000d9a:	f003 fb64 	bl	8004466 <HAL_SPI_Transmit>
			  //Sending the address
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B1Add, 1, 100);
 8000d9e:	1df9      	adds	r1, r7, #7
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	2201      	movs	r2, #1
 8000da4:	f107 0010 	add.w	r0, r7, #16
 8000da8:	f003 fb5d 	bl	8004466 <HAL_SPI_Transmit>
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B2Add, 1, 100);
 8000dac:	1db9      	adds	r1, r7, #6
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	f107 0010 	add.w	r0, r7, #16
 8000db6:	f003 fb56 	bl	8004466 <HAL_SPI_Transmit>
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B3Add, 1, 100);
 8000dba:	1d79      	adds	r1, r7, #5
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f107 0010 	add.w	r0, r7, #16
 8000dc4:	f003 fb4f 	bl	8004466 <HAL_SPI_Transmit>
			  //Sending the data byte
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &writeDataByte, 1, 100);
 8000dc8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f107 0010 	add.w	r0, r7, #16
 8000dd4:	f003 fb47 	bl	8004466 <HAL_SPI_Transmit>
//			  {
//				  printf("Waiting/r/n");
//			  } //wait

			  //printing into debug terminal
			  printf("Wrote 0x%02X in    FM address 0x%02X%02X%02X\r\n",writeDataByte,B1Add,B2Add,B3Add);
 8000dd8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000ddc:	4619      	mov	r1, r3
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	461a      	mov	r2, r3
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	797b      	ldrb	r3, [r7, #5]
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	4603      	mov	r3, r0
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <write_3ByteAdd_FM+0x108>)
 8000dee:	f005 fbc9 	bl	8006584 <iprintf>
	  		HAL_Delay(20);
 8000df2:	2014      	movs	r0, #20
 8000df4:	f001 fa96 	bl	8002324 <HAL_Delay>
			chipDeSelect(spiPort);
 8000df8:	4668      	mov	r0, sp
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2254      	movs	r2, #84	; 0x54
 8000e00:	4619      	mov	r1, r3
 8000e02:	f005 fba9 	bl	8006558 <memcpy>
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	f7ff feb4 	bl	8000b78 <chipDeSelect>
			WRDISABLE_FM(spiPort);
 8000e10:	4668      	mov	r0, sp
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2254      	movs	r2, #84	; 0x54
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f005 fb9d 	bl	8006558 <memcpy>
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e24:	f7ff ff06 	bl	8000c34 <WRDISABLE_FM>
	return;
 8000e28:	bf00      	nop
}
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20001ca8 	.word	0x20001ca8
 8000e3c:	08007678 	.word	0x08007678

08000e40 <read_3ByteAdd_FM>:

int read_3ByteAdd_FM(SPI_HandleTypeDef spiPort, uint32_t Addr){
 8000e40:	b084      	sub	sp, #16
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b098      	sub	sp, #96	; 0x60
 8000e46:	af16      	add	r7, sp, #88	; 0x58
 8000e48:	f107 0c10 	add.w	ip, r7, #16
 8000e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t readDataByte=0x77;
 8000e50:	2377      	movs	r3, #119	; 0x77
 8000e52:	71fb      	strb	r3, [r7, #7]

	uint8_t B1Add=Addr>> 16;
 8000e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	71bb      	strb	r3, [r7, #6]
	uint8_t B2Add=Addr>> 8;
 8000e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	717b      	strb	r3, [r7, #5]
	uint8_t B3Add=Addr;
 8000e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	713b      	strb	r3, [r7, #4]

	chipSelect(spiPort);
 8000e6a:	4668      	mov	r0, sp
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	2254      	movs	r2, #84	; 0x54
 8000e72:	4619      	mov	r1, r3
 8000e74:	f005 fb70 	bl	8006558 <memcpy>
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7e:	f7ff fe53 	bl	8000b28 <chipSelect>

	  //Sending the write command
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &READ_3ByteAdd, 1, 100);
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	2201      	movs	r2, #1
 8000e86:	4923      	ldr	r1, [pc, #140]	; (8000f14 <read_3ByteAdd_FM+0xd4>)
 8000e88:	f107 0010 	add.w	r0, r7, #16
 8000e8c:	f003 faeb 	bl	8004466 <HAL_SPI_Transmit>
	  //Sending the address
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B1Add, 1, 100);
 8000e90:	1db9      	adds	r1, r7, #6
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2201      	movs	r2, #1
 8000e96:	f107 0010 	add.w	r0, r7, #16
 8000e9a:	f003 fae4 	bl	8004466 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B2Add, 1, 100);
 8000e9e:	1d79      	adds	r1, r7, #5
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f107 0010 	add.w	r0, r7, #16
 8000ea8:	f003 fadd 	bl	8004466 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B3Add, 1, 100);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f107 0010 	add.w	r0, r7, #16
 8000eb6:	f003 fad6 	bl	8004466 <HAL_SPI_Transmit>
	  //Receiving the data byte
	  HAL_SPI_Receive(&spiPort, (uint8_t *) &readDataByte, 1, 100);
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f107 0010 	add.w	r0, r7, #16
 8000ec4:	f003 fc3d 	bl	8004742 <HAL_SPI_Receive>

	  //printing into debug terminal
	  printf("read  0x%02X from  FM address 0x%02X%02X%02X\r\n",readDataByte,B1Add,B2Add,B3Add);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	797b      	ldrb	r3, [r7, #5]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	793b      	ldrb	r3, [r7, #4]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4603      	mov	r3, r0
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <read_3ByteAdd_FM+0xd8>)
 8000edc:	f005 fb52 	bl	8006584 <iprintf>

		  HAL_Delay(10);
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f001 fa1f 	bl	8002324 <HAL_Delay>
		   chipDeSelect(spiPort);
 8000ee6:	4668      	mov	r0, sp
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	2254      	movs	r2, #84	; 0x54
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f005 fb32 	bl	8006558 <memcpy>
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efa:	f7ff fe3d 	bl	8000b78 <chipDeSelect>
		  HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f001 fa10 	bl	8002324 <HAL_Delay>

		  return readDataByte;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr
 8000f14:	20001ca7 	.word	0x20001ca7
 8000f18:	080076a8 	.word	0x080076a8

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <MX_QUADSPI_Init+0x54>)
 8000f34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f38:	22ff      	movs	r2, #255	; 0xff
 8000f3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f68:	f002 f854 	bl	8003014 <HAL_QSPI_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f72:	f7ff ffd3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20001d40 	.word	0x20001d40
 8000f80:	a0001000 	.word	0xa0001000

08000f84 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a35      	ldr	r2, [pc, #212]	; (8001078 <HAL_QSPI_MspInit+0xf4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d164      	bne.n	8001070 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000faa:	4a34      	ldr	r2, [pc, #208]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6393      	str	r3, [r2, #56]	; 0x38
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_QSPI_MspInit+0xf8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fee:	23c0      	movs	r3, #192	; 0xc0
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ffe:	2309      	movs	r3, #9
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	481d      	ldr	r0, [pc, #116]	; (8001080 <HAL_QSPI_MspInit+0xfc>)
 800100a:	f001 fe3d 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001020:	230a      	movs	r3, #10
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <HAL_QSPI_MspInit+0xfc>)
 800102c:	f001 fe2c 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001030:	2304      	movs	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001040:	2309      	movs	r3, #9
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <HAL_QSPI_MspInit+0x100>)
 800104c:	f001 fe1c 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001060:	230a      	movs	r3, #10
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <HAL_QSPI_MspInit+0x100>)
 800106c:	f001 fe0c 	bl	8002c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	a0001000 	.word	0xa0001000
 800107c:	40023800 	.word	0x40023800
 8001080:	40021400 	.word	0x40021400
 8001084:	40020400 	.word	0x40020400

08001088 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_SPI1_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_SPI1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_SPI1_Init+0x74>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_SPI1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI1_Init+0x74>)
 80010a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI1_Init+0x74>)
 80010be:	2210      	movs	r2, #16
 80010c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e8:	f003 f912 	bl	8004310 <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f7ff ff13 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001d8c 	.word	0x20001d8c
 8001100:	40013000 	.word	0x40013000

08001104 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_SPI3_Init+0x68>)
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <MX_SPI3_Init+0x6c>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_SPI3_Init+0x68>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_SPI3_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_SPI3_Init+0x68>)
 800111c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001120:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_SPI3_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_SPI3_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_SPI3_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_SPI3_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_SPI3_Init+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_SPI3_Init+0x68>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_SPI3_Init+0x68>)
 8001148:	2207      	movs	r2, #7
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_SPI3_Init+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_SPI3_Init+0x68>)
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_SPI3_Init+0x68>)
 800115a:	f003 f8d9 	bl	8004310 <HAL_SPI_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001164:	f7ff feda 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20001df0 	.word	0x20001df0
 8001170:	40003c00 	.word	0x40003c00

08001174 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_SPI4_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_SPI4_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_SPI4_Init+0x74>)
 8001180:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001184:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SPI4_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI4_Init+0x74>)
 800118e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001192:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI4_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_SPI4_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011aa:	2228      	movs	r2, #40	; 0x28
 80011ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_SPI4_Init+0x74>)
 80011d4:	f003 f89c 	bl	8004310 <HAL_SPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80011de:	f7ff fe9d 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20001e54 	.word	0x20001e54
 80011ec:	40013400 	.word	0x40013400

080011f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a54      	ldr	r2, [pc, #336]	; (8001360 <HAL_SPI_MspInit+0x170>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d128      	bne.n	8001264 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001212:	4b54      	ldr	r3, [pc, #336]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a53      	ldr	r2, [pc, #332]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <HAL_SPI_MspInit+0x174>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23e0      	movs	r3, #224	; 0xe0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4842      	ldr	r0, [pc, #264]	; (8001368 <HAL_SPI_MspInit+0x178>)
 800125e:	f001 fd13 	bl	8002c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001262:	e078      	b.n	8001356 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a40      	ldr	r2, [pc, #256]	; (800136c <HAL_SPI_MspInit+0x17c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d146      	bne.n	80012fc <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_SPI_MspInit+0x174>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a36      	ldr	r2, [pc, #216]	; (8001364 <HAL_SPI_MspInit+0x174>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <HAL_SPI_MspInit+0x174>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_SPI_MspInit+0x174>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_SPI_MspInit+0x174>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c8:	2306      	movs	r3, #6
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4825      	ldr	r0, [pc, #148]	; (8001368 <HAL_SPI_MspInit+0x178>)
 80012d4:	f001 fcd8 	bl	8002c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ea:	2306      	movs	r3, #6
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <HAL_SPI_MspInit+0x180>)
 80012f6:	f001 fcc7 	bl	8002c88 <HAL_GPIO_Init>
}
 80012fa:	e02c      	b.n	8001356 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_SPI_MspInit+0x184>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d127      	bne.n	8001356 <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <HAL_SPI_MspInit+0x174>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_SPI_MspInit+0x174>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_SPI_MspInit+0x174>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001336:	2364      	movs	r3, #100	; 0x64
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001346:	2305      	movs	r3, #5
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <HAL_SPI_MspInit+0x188>)
 8001352:	f001 fc99 	bl	8002c88 <HAL_GPIO_Init>
}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40013000 	.word	0x40013000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40003c00 	.word	0x40003c00
 8001370:	40020800 	.word	0x40020800
 8001374:	40013400 	.word	0x40013400
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 ff64 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <USART1_IRQHandler+0x10>)
 8001426:	f004 f89d 	bl	8005564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001f08 	.word	0x20001f08

08001434 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Stream5_IRQHandler+0x10>)
 800143a:	f001 f9e9 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20002018 	.word	0x20002018

08001448 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
	}

return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f94f 	bl	8000740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
	}
	return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f004 ffd6 	bl	8006504 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20080000 	.word	0x20080000
 8001584:	00000400 	.word	0x00000400
 8001588:	20001eb8 	.word	0x20001eb8
 800158c:	200020b8 	.word	0x200020b8

08001590 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SystemInit+0x28>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <SystemInit+0x28>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SystemInit+0x28>)
 80015a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015aa:	609a      	str	r2, [r3, #8]
#endif
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_TIM14_Init+0x40>)
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <MX_TIM14_Init+0x44>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_TIM14_Init+0x40>)
 80015c8:	2250      	movs	r2, #80	; 0x50
 80015ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_TIM14_Init+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_TIM14_Init+0x40>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_TIM14_Init+0x40>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_TIM14_Init+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM14_Init+0x40>)
 80015e8:	f003 fdf2 	bl	80051d0 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80015f2:	f7ff fc93 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20001ebc 	.word	0x20001ebc
 8001600:	40002000 	.word	0x40002000

08001604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_TIM_Base_MspInit+0x38>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10b      	bne.n	800162e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_TIM_Base_MspInit+0x3c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_TIM_Base_MspInit+0x3c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40002000 	.word	0x40002000
 8001640:	40023800 	.word	0x40023800

08001644 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_USART1_UART_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_USART1_UART_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_USART1_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART1_UART_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART1_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART1_UART_Init+0x58>)
 8001688:	f003 fe9a 	bl	80053c0 <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001692:	f7ff fc43 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001f08 	.word	0x20001f08
 80016a0:	40011000 	.word	0x40011000

080016a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <MX_USART2_UART_Init+0x5c>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USART2_UART_Init+0x58>)
 80016e8:	f003 fe6a 	bl	80053c0 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016f2:	f7ff fc13 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20001f90 	.word	0x20001f90
 8001700:	40004400 	.word	0x40004400

08001704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0b0      	sub	sp, #192	; 0xc0
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2290      	movs	r2, #144	; 0x90
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f004 ff25 	bl	8006574 <memset>
  if(uartHandle->Instance==USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_UART_MspInit+0x1a0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d173      	bne.n	800181c <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001734:	2340      	movs	r3, #64	; 0x40
 8001736:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001738:	2300      	movs	r3, #0
 800173a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f9bd 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f7ff fbe6 	bl	8000f1c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	4a54      	ldr	r2, [pc, #336]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6453      	str	r3, [r2, #68]	; 0x44
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a4e      	ldr	r2, [pc, #312]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001780:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179a:	2307      	movs	r3, #7
 800179c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017a4:	4619      	mov	r1, r3
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <HAL_UART_MspInit+0x1a8>)
 80017a8:	f001 fa6e 	bl	8002c88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80017ac:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017ae:	4a41      	ldr	r2, [pc, #260]	; (80018b4 <HAL_UART_MspInit+0x1b0>)
 80017b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c0:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ee:	4830      	ldr	r0, [pc, #192]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 80017f0:	f000 fece 	bl	8002590 <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80017fa:	f7ff fb8f 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 8001802:	675a      	str	r2, [r3, #116]	; 0x74
 8001804:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <HAL_UART_MspInit+0x1ac>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2025      	movs	r0, #37	; 0x25
 8001810:	f000 fe87 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001814:	2025      	movs	r0, #37	; 0x25
 8001816:	f000 fea0 	bl	800255a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800181a:	e03f      	b.n	800189c <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_UART_MspInit+0x1b4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d13a      	bne.n	800189c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800182a:	2300      	movs	r3, #0
 800182c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f944 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 800183e:	f7ff fb6d 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_UART_MspInit+0x1a4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001872:	230c      	movs	r3, #12
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188a:	2307      	movs	r3, #7
 800188c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_UART_MspInit+0x1a8>)
 8001898:	f001 f9f6 	bl	8002c88 <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	37c0      	adds	r7, #192	; 0xc0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	20002018 	.word	0x20002018
 80018b4:	40026488 	.word	0x40026488
 80018b8:	40004400 	.word	0x40004400

080018bc <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80018c6:	f107 020f 	add.w	r2, r7, #15
 80018ca:	1df9      	adds	r1, r7, #7
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2301      	movs	r3, #1
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <W25qxx_Spi+0x28>)
 80018d4:	f003 f865 	bl	80049a2 <HAL_SPI_TransmitReceive>
	return ret;	
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20001e54 	.word	0x20001e54

080018e8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2110      	movs	r1, #16
 8001902:	4813      	ldr	r0, [pc, #76]	; (8001950 <W25qxx_ReadID+0x68>)
 8001904:	f001 fb6c 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8001908:	209f      	movs	r0, #159	; 0x9f
 800190a:	f7ff ffd7 	bl	80018bc <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800190e:	20a5      	movs	r0, #165	; 0xa5
 8001910:	f7ff ffd4 	bl	80018bc <W25qxx_Spi>
 8001914:	4603      	mov	r3, r0
 8001916:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001918:	20a5      	movs	r0, #165	; 0xa5
 800191a:	f7ff ffcf 	bl	80018bc <W25qxx_Spi>
 800191e:	4603      	mov	r3, r0
 8001920:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001922:	20a5      	movs	r0, #165	; 0xa5
 8001924:	f7ff ffca 	bl	80018bc <W25qxx_Spi>
 8001928:	4603      	mov	r3, r0
 800192a:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2110      	movs	r1, #16
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <W25qxx_ReadID+0x68>)
 8001932:	f001 fb55 	bl	8002fe0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4313      	orrs	r3, r2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  return Temp;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000

08001954 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2110      	movs	r1, #16
 800195e:	4816      	ldr	r0, [pc, #88]	; (80019b8 <W25qxx_ReadUniqID+0x64>)
 8001960:	f001 fb3e 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8001964:	204b      	movs	r0, #75	; 0x4b
 8001966:	f7ff ffa9 	bl	80018bc <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e005      	b.n	800197c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001970:	20a5      	movs	r0, #165	; 0xa5
 8001972:	f7ff ffa3 	bl	80018bc <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	3301      	adds	r3, #1
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d9f6      	bls.n	8001970 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8001982:	2300      	movs	r3, #0
 8001984:	71bb      	strb	r3, [r7, #6]
 8001986:	e00b      	b.n	80019a0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001988:	79bc      	ldrb	r4, [r7, #6]
 800198a:	20a5      	movs	r0, #165	; 0xa5
 800198c:	f7ff ff96 	bl	80018bc <W25qxx_Spi>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <W25qxx_ReadUniqID+0x68>)
 8001996:	4423      	add	r3, r4
 8001998:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	3301      	adds	r3, #1
 800199e:	71bb      	strb	r3, [r7, #6]
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	d9f0      	bls.n	8001988 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2110      	movs	r1, #16
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <W25qxx_ReadUniqID+0x64>)
 80019ac:	f001 fb18 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	20002078 	.word	0x20002078

080019c0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2110      	movs	r1, #16
 80019c8:	4807      	ldr	r0, [pc, #28]	; (80019e8 <W25qxx_WriteEnable+0x28>)
 80019ca:	f001 fb09 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80019ce:	2006      	movs	r0, #6
 80019d0:	f7ff ff74 	bl	80018bc <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	2110      	movs	r1, #16
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <W25qxx_WriteEnable+0x28>)
 80019da:	f001 fb01 	bl	8002fe0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fca0 	bl	8002324 <HAL_Delay>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000

080019ec <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2110      	movs	r1, #16
 80019fe:	481c      	ldr	r0, [pc, #112]	; (8001a70 <W25qxx_ReadStatusRegister+0x84>)
 8001a00:	f001 faee 	bl	8002fe0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10c      	bne.n	8001a24 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f7ff ff56 	bl	80018bc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001a10:	20a5      	movs	r0, #165	; 0xa5
 8001a12:	f7ff ff53 	bl	80018bc <W25qxx_Spi>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <W25qxx_ReadStatusRegister+0x88>)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001a22:	e01b      	b.n	8001a5c <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d10c      	bne.n	8001a44 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001a2a:	2035      	movs	r0, #53	; 0x35
 8001a2c:	f7ff ff46 	bl	80018bc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001a30:	20a5      	movs	r0, #165	; 0xa5
 8001a32:	f7ff ff43 	bl	80018bc <W25qxx_Spi>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <W25qxx_ReadStatusRegister+0x88>)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001a42:	e00b      	b.n	8001a5c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001a44:	2015      	movs	r0, #21
 8001a46:	f7ff ff39 	bl	80018bc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001a4a:	20a5      	movs	r0, #165	; 0xa5
 8001a4c:	f7ff ff36 	bl	80018bc <W25qxx_Spi>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <W25qxx_ReadStatusRegister+0x88>)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2110      	movs	r1, #16
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <W25qxx_ReadStatusRegister+0x84>)
 8001a62:	f001 fabd 	bl	8002fe0 <HAL_GPIO_WritePin>
	return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	20002078 	.word	0x20002078

08001a78 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f000 fc51 	bl	8002324 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2110      	movs	r1, #16
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <W25qxx_WaitForWriteEnd+0x4c>)
 8001a88:	f001 faaa 	bl	8002fe0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001a8c:	2005      	movs	r0, #5
 8001a8e:	f7ff ff15 	bl	80018bc <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a92:	20a5      	movs	r0, #165	; 0xa5
 8001a94:	f7ff ff12 	bl	80018bc <W25qxx_Spi>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <W25qxx_WaitForWriteEnd+0x50>)
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 fc3e 	bl	8002324 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <W25qxx_WaitForWriteEnd+0x50>)
 8001aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <W25qxx_WaitForWriteEnd+0x4c>)
 8001abc:	f001 fa90 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	20002078 	.word	0x20002078

08001acc <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8001ad2:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <W25qxx_Init+0x230>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8001ada:	e002      	b.n	8001ae2 <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8001adc:	2064      	movs	r0, #100	; 0x64
 8001ade:	f000 fc21 	bl	8002324 <HAL_Delay>
	while(HAL_GetTick()<100)
 8001ae2:	f000 fc13 	bl	800230c <HAL_GetTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b63      	cmp	r3, #99	; 0x63
 8001aea:	d9f7      	bls.n	8001adc <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2110      	movs	r1, #16
 8001af0:	4883      	ldr	r0, [pc, #524]	; (8001d00 <W25qxx_Init+0x234>)
 8001af2:	f001 fa75 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f000 fc14 	bl	8002324 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 8001afc:	4881      	ldr	r0, [pc, #516]	; (8001d04 <W25qxx_Init+0x238>)
 8001afe:	f004 fdc7 	bl	8006690 <puts>
	#endif
	id=W25qxx_ReadID();
 8001b02:	f7ff fef1 	bl	80018e8 <W25qxx_ReadID>
 8001b06:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	487f      	ldr	r0, [pc, #508]	; (8001d08 <W25qxx_Init+0x23c>)
 8001b0c:	f004 fd3a 	bl	8006584 <iprintf>
	#endif
	switch(id&0x0000FFFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <W25qxx_Init+0x240>)
 8001b16:	4413      	add	r3, r2
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d87e      	bhi.n	8001c1a <W25qxx_Init+0x14e>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <W25qxx_Init+0x58>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001c07 	.word	0x08001c07
 8001b28:	08001bf3 	.word	0x08001bf3
 8001b2c:	08001bdf 	.word	0x08001bdf
 8001b30:	08001bcb 	.word	0x08001bcb
 8001b34:	08001bb7 	.word	0x08001bb7
 8001b38:	08001ba3 	.word	0x08001ba3
 8001b3c:	08001b8f 	.word	0x08001b8f
 8001b40:	08001b79 	.word	0x08001b79
 8001b44:	08001b63 	.word	0x08001b63
 8001b48:	08001b4d 	.word	0x08001b4d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <W25qxx_Init+0x230>)
 8001b4e:	220a      	movs	r2, #10
 8001b50:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8001b52:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <W25qxx_Init+0x230>)
 8001b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b58:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 8001b5a:	486d      	ldr	r0, [pc, #436]	; (8001d10 <W25qxx_Init+0x244>)
 8001b5c:	f004 fd98 	bl	8006690 <puts>
			#endif
		break;
 8001b60:	e064      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8001b62:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <W25qxx_Init+0x230>)
 8001b64:	2209      	movs	r2, #9
 8001b66:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <W25qxx_Init+0x230>)
 8001b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 8001b70:	4868      	ldr	r0, [pc, #416]	; (8001d14 <W25qxx_Init+0x248>)
 8001b72:	f004 fd8d 	bl	8006690 <puts>
			#endif
		break;
 8001b76:	e059      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8001b78:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <W25qxx_Init+0x230>)
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <W25qxx_Init+0x230>)
 8001b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b84:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 8001b86:	4864      	ldr	r0, [pc, #400]	; (8001d18 <W25qxx_Init+0x24c>)
 8001b88:	f004 fd82 	bl	8006690 <puts>
			#endif
		break;
 8001b8c:	e04e      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <W25qxx_Init+0x230>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <W25qxx_Init+0x230>)
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 8001b9a:	4860      	ldr	r0, [pc, #384]	; (8001d1c <W25qxx_Init+0x250>)
 8001b9c:	f004 fd78 	bl	8006690 <puts>
			#endif
		break;
 8001ba0:	e044      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <W25qxx_Init+0x230>)
 8001ba4:	2206      	movs	r2, #6
 8001ba6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001ba8:	4b54      	ldr	r3, [pc, #336]	; (8001cfc <W25qxx_Init+0x230>)
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 8001bae:	485c      	ldr	r0, [pc, #368]	; (8001d20 <W25qxx_Init+0x254>)
 8001bb0:	f004 fd6e 	bl	8006690 <puts>
			#endif
		break;
 8001bb4:	e03a      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <W25qxx_Init+0x230>)
 8001bb8:	2205      	movs	r2, #5
 8001bba:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <W25qxx_Init+0x230>)
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 8001bc2:	4858      	ldr	r0, [pc, #352]	; (8001d24 <W25qxx_Init+0x258>)
 8001bc4:	f004 fd64 	bl	8006690 <puts>
			#endif
		break;
 8001bc8:	e030      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <W25qxx_Init+0x230>)
 8001bcc:	2204      	movs	r2, #4
 8001bce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <W25qxx_Init+0x230>)
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 8001bd6:	4854      	ldr	r0, [pc, #336]	; (8001d28 <W25qxx_Init+0x25c>)
 8001bd8:	f004 fd5a 	bl	8006690 <puts>
			#endif
		break;
 8001bdc:	e026      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <W25qxx_Init+0x230>)
 8001be0:	2203      	movs	r2, #3
 8001be2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <W25qxx_Init+0x230>)
 8001be6:	2208      	movs	r2, #8
 8001be8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 8001bea:	4850      	ldr	r0, [pc, #320]	; (8001d2c <W25qxx_Init+0x260>)
 8001bec:	f004 fd50 	bl	8006690 <puts>
			#endif
		break;
 8001bf0:	e01c      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <W25qxx_Init+0x230>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <W25qxx_Init+0x230>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 8001bfe:	484c      	ldr	r0, [pc, #304]	; (8001d30 <W25qxx_Init+0x264>)
 8001c00:	f004 fd46 	bl	8006690 <puts>
			#endif
		break;
 8001c04:	e012      	b.n	8001c2c <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <W25qxx_Init+0x230>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <W25qxx_Init+0x230>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 8001c12:	4848      	ldr	r0, [pc, #288]	; (8001d34 <W25qxx_Init+0x268>)
 8001c14:	f004 fd3c 	bl	8006690 <puts>
			#endif
		break;
 8001c18:	e008      	b.n	8001c2c <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8001c1a:	4847      	ldr	r0, [pc, #284]	; (8001d38 <W25qxx_Init+0x26c>)
 8001c1c:	f004 fd38 	bl	8006690 <puts>
				#endif
			w25qxx.Lock=0;	
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <W25qxx_Init+0x230>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e063      	b.n	8001cf4 <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <W25qxx_Init+0x230>)
 8001c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c32:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <W25qxx_Init+0x230>)
 8001c36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c3a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <W25qxx_Init+0x230>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <W25qxx_Init+0x230>)
 8001c44:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <W25qxx_Init+0x230>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <W25qxx_Init+0x230>)
 8001c4c:	6912      	ldr	r2, [r2, #16]
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <W25qxx_Init+0x230>)
 8001c54:	8952      	ldrh	r2, [r2, #10]
 8001c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <W25qxx_Init+0x230>)
 8001c5c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <W25qxx_Init+0x230>)
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <W25qxx_Init+0x230>)
 8001c66:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <W25qxx_Init+0x230>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <W25qxx_Init+0x230>)
 8001c6e:	6912      	ldr	r2, [r2, #16]
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	0a9b      	lsrs	r3, r3, #10
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <W25qxx_Init+0x230>)
 8001c78:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001c7a:	f7ff fe6b 	bl	8001954 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff feb4 	bl	80019ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f7ff feb1 	bl	80019ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff feae 	bl	80019ec <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <W25qxx_Init+0x230>)
 8001c92:	895b      	ldrh	r3, [r3, #10]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <W25qxx_Init+0x270>)
 8001c98:	f004 fc74 	bl	8006584 <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <W25qxx_Init+0x230>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4827      	ldr	r0, [pc, #156]	; (8001d40 <W25qxx_Init+0x274>)
 8001ca4:	f004 fc6e 	bl	8006584 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <W25qxx_Init+0x230>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4825      	ldr	r0, [pc, #148]	; (8001d44 <W25qxx_Init+0x278>)
 8001cb0:	f004 fc68 	bl	8006584 <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <W25qxx_Init+0x230>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4823      	ldr	r0, [pc, #140]	; (8001d48 <W25qxx_Init+0x27c>)
 8001cbc:	f004 fc62 	bl	8006584 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <W25qxx_Init+0x230>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4821      	ldr	r0, [pc, #132]	; (8001d4c <W25qxx_Init+0x280>)
 8001cc8:	f004 fc5c 	bl	8006584 <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <W25qxx_Init+0x230>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481f      	ldr	r0, [pc, #124]	; (8001d50 <W25qxx_Init+0x284>)
 8001cd4:	f004 fc56 	bl	8006584 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <W25qxx_Init+0x230>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481d      	ldr	r0, [pc, #116]	; (8001d54 <W25qxx_Init+0x288>)
 8001ce0:	f004 fc50 	bl	8006584 <iprintf>
	printf("w25qxx Init Done\r\n");
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <W25qxx_Init+0x28c>)
 8001ce6:	f004 fcd3 	bl	8006690 <puts>
	#endif
	w25qxx.Lock=0;	
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <W25qxx_Init+0x230>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001cf2:	2301      	movs	r3, #1
}	
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20002078 	.word	0x20002078
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080078a0 	.word	0x080078a0
 8001d08:	080078b8 	.word	0x080078b8
 8001d0c:	ffffbfef 	.word	0xffffbfef
 8001d10:	080078cc 	.word	0x080078cc
 8001d14:	080078e4 	.word	0x080078e4
 8001d18:	080078fc 	.word	0x080078fc
 8001d1c:	08007914 	.word	0x08007914
 8001d20:	0800792c 	.word	0x0800792c
 8001d24:	08007944 	.word	0x08007944
 8001d28:	0800795c 	.word	0x0800795c
 8001d2c:	08007974 	.word	0x08007974
 8001d30:	0800798c 	.word	0x0800798c
 8001d34:	080079a4 	.word	0x080079a4
 8001d38:	080079bc 	.word	0x080079bc
 8001d3c:	080079d0 	.word	0x080079d0
 8001d40:	080079f0 	.word	0x080079f0
 8001d44:	08007a08 	.word	0x08007a08
 8001d48:	08007a28 	.word	0x08007a28
 8001d4c:	08007a44 	.word	0x08007a44
 8001d50:	08007a64 	.word	0x08007a64
 8001d54:	08007a80 	.word	0x08007a80
 8001d58:	08007aa0 	.word	0x08007aa0

08001d5c <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8001d64:	e002      	b.n	8001d6c <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fadc 	bl	8002324 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <W25qxx_EraseBlock+0xd0>)
 8001d6e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d0f7      	beq.n	8001d66 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <W25qxx_EraseBlock+0xd0>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	482b      	ldr	r0, [pc, #172]	; (8001e30 <W25qxx_EraseBlock+0xd4>)
 8001d82:	f004 fbff 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 8001d86:	2064      	movs	r0, #100	; 0x64
 8001d88:	f000 facc 	bl	8002324 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8001d8c:	f000 fabe 	bl	800230c <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 8001d92:	f7ff fe71 	bl	8001a78 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <W25qxx_EraseBlock+0xd0>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8001da4:	f7ff fe0c 	bl	80019c0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2110      	movs	r1, #16
 8001dac:	4821      	ldr	r0, [pc, #132]	; (8001e34 <W25qxx_EraseBlock+0xd8>)
 8001dae:	f001 f917 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8001db2:	20d8      	movs	r0, #216	; 0xd8
 8001db4:	f7ff fd82 	bl	80018bc <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <W25qxx_EraseBlock+0xd0>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d905      	bls.n	8001dcc <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0e1b      	lsrs	r3, r3, #24
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fd78 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fd72 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fd6c 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd67 	bl	80018bc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2110      	movs	r1, #16
 8001df2:	4810      	ldr	r0, [pc, #64]	; (8001e34 <W25qxx_EraseBlock+0xd8>)
 8001df4:	f001 f8f4 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001df8:	f7ff fe3e 	bl	8001a78 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 8001dfc:	f000 fa86 	bl	800230c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <W25qxx_EraseBlock+0xdc>)
 8001e0a:	f004 fbbb 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f000 fa88 	bl	8002324 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f000 fa85 	bl	8002324 <HAL_Delay>
	w25qxx.Lock=0;
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <W25qxx_EraseBlock+0xd0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20002078 	.word	0x20002078
 8001e30:	08007b44 	.word	0x08007b44
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08007b64 	.word	0x08007b64

08001e3c <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <W25qxx_BlockToPage+0x28>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <W25qxx_BlockToPage+0x28>)
 8001e50:	8952      	ldrh	r2, [r2, #10]
 8001e52:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20002078 	.word	0x20002078

08001e68 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001e76:	e002      	b.n	8001e7e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 fa53 	bl	8002324 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001e7e:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001e80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d0f7      	beq.n	8001e78 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8001e88:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001e98:	8952      	ldrh	r2, [r2, #10]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d802      	bhi.n	8001ea4 <W25qxx_WritePage+0x3c>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001ea6:	895b      	ldrh	r3, [r3, #10]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001eb8:	8952      	ldrh	r2, [r2, #10]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d905      	bls.n	8001eca <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001ec0:	895b      	ldrh	r3, [r3, #10]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	4841      	ldr	r0, [pc, #260]	; (8001fd8 <W25qxx_WritePage+0x170>)
 8001ed2:	f004 fb57 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 8001ed6:	2064      	movs	r0, #100	; 0x64
 8001ed8:	f000 fa24 	bl	8002324 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 8001edc:	f000 fa16 	bl	800230c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 8001ee2:	f7ff fdc9 	bl	8001a78 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001ee6:	f7ff fd6b 	bl	80019c0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2110      	movs	r1, #16
 8001eee:	483b      	ldr	r0, [pc, #236]	; (8001fdc <W25qxx_WritePage+0x174>)
 8001ef0:	f001 f876 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fce1 	bl	80018bc <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001efc:	895b      	ldrh	r3, [r3, #10]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d905      	bls.n	8001f20 <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	0e1b      	lsrs	r3, r3, #24
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fcce 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fcc8 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fcc2 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fcbd 	bl	80018bc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <W25qxx_WritePage+0x178>)
 8001f4c:	f002 fa8b 	bl	8004466 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2110      	movs	r1, #16
 8001f54:	4821      	ldr	r0, [pc, #132]	; (8001fdc <W25qxx_WritePage+0x174>)
 8001f56:	f001 f843 	bl	8002fe0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001f5a:	f7ff fd8d 	bl	8001a78 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8001f5e:	f000 f9d5 	bl	800230c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e018      	b.n	8001fa2 <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <W25qxx_WritePage+0x124>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d905      	bls.n	8001f8c <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 8001f80:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <W25qxx_WritePage+0x17c>)
 8001f82:	f004 fb85 	bl	8006690 <puts>
			W25qxx_Delay(10);			
 8001f86:	200a      	movs	r0, #10
 8001f88:	f000 f9cc 	bl	8002324 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <W25qxx_WritePage+0x180>)
 8001f98:	f004 faf4 	bl	8006584 <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3e2      	bcc.n	8001f70 <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 8001faa:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <W25qxx_WritePage+0x17c>)
 8001fac:	f004 fb70 	bl	8006690 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	480e      	ldr	r0, [pc, #56]	; (8001fec <W25qxx_WritePage+0x184>)
 8001fb4:	f004 fae6 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 8001fb8:	2064      	movs	r0, #100	; 0x64
 8001fba:	f000 f9b3 	bl	8002324 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 f9b0 	bl	8002324 <HAL_Delay>
	w25qxx.Lock=0;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <W25qxx_WritePage+0x16c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20002078 	.word	0x20002078
 8001fd8:	08007d80 	.word	0x08007d80
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	20001e54 	.word	0x20001e54
 8001fe4:	08007dbc 	.word	0x08007dbc
 8001fe8:	08007dc0 	.word	0x08007dc0
 8001fec:	08007dc8 	.word	0x08007dc8

08001ff0 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d802      	bhi.n	800200e <W25qxx_WriteBlock+0x1e>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	4830      	ldr	r0, [pc, #192]	; (80020dc <W25qxx_WriteBlock+0xec>)
 800201c:	f004 fab2 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 8002020:	2064      	movs	r0, #100	; 0x64
 8002022:	f000 f97f 	bl	8002324 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d306      	bcc.n	800203e <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 8002030:	482b      	ldr	r0, [pc, #172]	; (80020e0 <W25qxx_WriteBlock+0xf0>)
 8002032:	f004 fb2d 	bl	8006690 <puts>
		W25qxx_Delay(100);
 8002036:	2064      	movs	r0, #100	; 0x64
 8002038:	f000 f974 	bl	8002324 <HAL_Delay>
		#endif	
		return;
 800203c:	e048      	b.n	80020d0 <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d905      	bls.n	8002058 <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e001      	b.n	800205c <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f7ff feed 	bl	8001e3c <W25qxx_BlockToPage>
 8002062:	4602      	mov	r2, r0
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002066:	895b      	ldrh	r3, [r3, #10]
 8002068:	4619      	mov	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002070:	4413      	add	r3, r2
 8002072:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 8002076:	895b      	ldrh	r3, [r3, #10]
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002080:	fb01 f202 	mul.w	r2, r1, r2
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	69f9      	ldr	r1, [r7, #28]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff feea 	bl	8001e68 <W25qxx_WritePage>
		StartPage++;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 800209c:	895b      	ldrh	r3, [r3, #10]
 800209e:	461a      	mov	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1a9a      	subs	r2, r3, r2
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <W25qxx_WriteBlock+0xe8>)
 80020ac:	895b      	ldrh	r3, [r3, #10]
 80020ae:	461a      	mov	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	dce1      	bgt.n	8002088 <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <W25qxx_WriteBlock+0xf4>)
 80020c6:	f004 fae3 	bl	8006690 <puts>
	W25qxx_Delay(100);
 80020ca:	2064      	movs	r0, #100	; 0x64
 80020cc:	f000 f92a 	bl	8002324 <HAL_Delay>
	#endif	
}
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20002078 	.word	0x20002078
 80020dc:	08007e68 	.word	0x08007e68
 80020e0:	08007ea8 	.word	0x08007ea8
 80020e4:	08007ec8 	.word	0x08007ec8

080020e8 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80020f4:	e002      	b.n	80020fc <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 f914 	bl	8002324 <HAL_Delay>
	while(w25qxx.Lock==1)
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <W25qxx_ReadBytes+0x114>)
 80020fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002102:	2b01      	cmp	r3, #1
 8002104:	d0f7      	beq.n	80020f6 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <W25qxx_ReadBytes+0x114>)
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 800210e:	f000 f8fd 	bl	800230c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	4839      	ldr	r0, [pc, #228]	; (8002200 <W25qxx_ReadBytes+0x118>)
 800211a:	f004 fa33 	bl	8006584 <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2110      	movs	r1, #16
 8002122:	4838      	ldr	r0, [pc, #224]	; (8002204 <W25qxx_ReadBytes+0x11c>)
 8002124:	f000 ff5c 	bl	8002fe0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8002128:	200b      	movs	r0, #11
 800212a:	f7ff fbc7 	bl	80018bc <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <W25qxx_ReadBytes+0x114>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d905      	bls.n	8002142 <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0e1b      	lsrs	r3, r3, #24
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fbbd 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbb7 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fbb1 	bl	80018bc <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fbac 	bl	80018bc <W25qxx_Spi>
	W25qxx_Spi(0);
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff fba9 	bl	80018bc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	b29a      	uxth	r2, r3
 800216e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	4824      	ldr	r0, [pc, #144]	; (8002208 <W25qxx_ReadBytes+0x120>)
 8002176:	f002 fae4 	bl	8004742 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2110      	movs	r1, #16
 800217e:	4821      	ldr	r0, [pc, #132]	; (8002204 <W25qxx_ReadBytes+0x11c>)
 8002180:	f000 ff2e 	bl	8002fe0 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8002184:	f000 f8c2 	bl	800230c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e018      	b.n	80021c8 <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <W25qxx_ReadBytes+0xca>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d905      	bls.n	80021b2 <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 80021a6:	4819      	ldr	r0, [pc, #100]	; (800220c <W25qxx_ReadBytes+0x124>)
 80021a8:	f004 fa72 	bl	8006690 <puts>
			W25qxx_Delay(10);
 80021ac:	200a      	movs	r0, #10
 80021ae:	f000 f8b9 	bl	8002324 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <W25qxx_ReadBytes+0x128>)
 80021be:	f004 f9e1 	bl	8006584 <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3e2      	bcc.n	8002196 <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 80021d0:	480e      	ldr	r0, [pc, #56]	; (800220c <W25qxx_ReadBytes+0x124>)
 80021d2:	f004 fa5d 	bl	8006690 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 80021d6:	6939      	ldr	r1, [r7, #16]
 80021d8:	480e      	ldr	r0, [pc, #56]	; (8002214 <W25qxx_ReadBytes+0x12c>)
 80021da:	f004 f9d3 	bl	8006584 <iprintf>
	W25qxx_Delay(100);
 80021de:	2064      	movs	r0, #100	; 0x64
 80021e0:	f000 f8a0 	bl	8002324 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 f89d 	bl	8002324 <HAL_Delay>
	w25qxx.Lock=0;
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <W25qxx_ReadBytes+0x114>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20002078 	.word	0x20002078
 8002200:	08007f3c 	.word	0x08007f3c
 8002204:	40021000 	.word	0x40021000
 8002208:	20001e54 	.word	0x20001e54
 800220c:	08007dbc 	.word	0x08007dbc
 8002210:	08007dc0 	.word	0x08007dc0
 8002214:	08007f74 	.word	0x08007f74

08002218 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x12>
  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopFillZerobss+0x16>)
  movs  r1, #0
 800221e:	490e      	ldr	r1, [pc, #56]	; (8002258 <LoopFillZerobss+0x1a>)
  b  LoopCopyDataInit
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <LoopFillZerobss+0x1e>)

 8002222:	2300      	movs	r3, #0
CopyDataInit:
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
 8002226:	58d4      	ldr	r4, [r2, r3]
  adds  r1, r1, #4
 8002228:	50c4      	str	r4, [r0, r3]
    
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
 800222c:	18c4      	adds	r4, r0, r3
  adds  r2, r0, r1
 800222e:	428c      	cmp	r4, r1
  cmp  r2, r3
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x22>)
/* Zero fill the bss segment. */  
 8002234:	4c0b      	ldr	r4, [pc, #44]	; (8002264 <LoopFillZerobss+0x26>)
FillZerobss:
 8002236:	2300      	movs	r3, #0
  movs  r3, #0
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:
  str  r3, [r2], #4
    
LoopFillZerobss:
 800223a:	6013      	str	r3, [r2, #0]
  ldr  r3, = _ebss
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:
  cmp  r2, r3
  bcc  FillZerobss

 800223e:	42a2      	cmp	r2, r4
/* Call the clock system initialization function.*/
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
 8002242:	f7ff f9a5 	bl	8001590 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8002246:	f004 f963 	bl	8006510 <__libc_init_array>
  bx  lr    
.size  Reset_Handler, .-Reset_Handler
 800224a:	f7fe fa8b 	bl	8000764 <main>

 800224e:	4770      	bx	lr
Reset_Handler:  
 8002250:	20080000 	.word	0x20080000
/* Copy the data segment initializers from flash to SRAM */  
 8002254:	20000000 	.word	0x20000000
  movs  r1, #0
 8002258:	20001d1c 	.word	0x20001d1c
  b  LoopCopyDataInit
 800225c:	080081b4 	.word	0x080081b4
  b  LoopFillZerobss
 8002260:	20001d1c 	.word	0x20001d1c
/* Zero fill the bss segment. */  
 8002264:	200020b4 	.word	0x200020b4

08002268 <ADC_IRQHandler>:
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  .size  Default_Handler, .-Default_Handler
/******************************************************************************
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>

0800226a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226e:	2003      	movs	r0, #3
 8002270:	f000 f94c 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002274:	2000      	movs	r0, #0
 8002276:	f000 f805 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227a:	f7ff f87f 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f967 	bl	8002576 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f92f 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20001cac 	.word	0x20001cac
 80022dc:	20001cb4 	.word	0x20001cb4
 80022e0:	20001cb0 	.word	0x20001cb0

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20001cb4 	.word	0x20001cb4
 8002308:	200020a0 	.word	0x200020a0

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200020a0 	.word	0x200020a0

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20001cb4 	.word	0x20001cb4

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <__NVIC_SetPriorityGrouping+0x40>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	4313      	orrs	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x40>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	05fa0000 	.word	0x05fa0000

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff feb6 	bl	800230c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e099      	b.n	80026e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025cc:	e00f      	b.n	80025ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ce:	f7ff fe9d 	bl	800230c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d908      	bls.n	80025ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e078      	b.n	80026e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e8      	bne.n	80025ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_DMA_Init+0x158>)
 8002608:	4013      	ands	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2b04      	cmp	r3, #4
 8002646:	d107      	bne.n	8002658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4313      	orrs	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0307 	bic.w	r3, r3, #7
 800266e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2b04      	cmp	r3, #4
 8002680:	d117      	bne.n	80026b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00e      	beq.n	80026b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fa7b 	bl	8002b90 <DMA_CheckFifoParam>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ae:	2301      	movs	r3, #1
 80026b0:	e016      	b.n	80026e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa32 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 80026c0:	4603      	mov	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	223f      	movs	r2, #63	; 0x3f
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e010803f 	.word	0xe010803f

080026ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026fa:	f7ff fe07 	bl	800230c <HAL_GetTick>
 80026fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d008      	beq.n	800271e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e052      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0216 	bic.w	r2, r2, #22
 800272c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <HAL_DMA_Abort+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276e:	e013      	b.n	8002798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002770:	f7ff fdcc 	bl	800230c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d90c      	bls.n	8002798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e015      	b.n	80027c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e4      	bne.n	8002770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	223f      	movs	r2, #63	; 0x3f
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00c      	b.n	8002804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2205      	movs	r2, #5
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800281c:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <HAL_DMA_IRQHandler+0x248>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a8e      	ldr	r2, [pc, #568]	; (8002a5c <HAL_DMA_IRQHandler+0x24c>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2208      	movs	r2, #8
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01a      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2208      	movs	r2, #8
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0202 	orr.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d012      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2210      	movs	r2, #16
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d043      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2210      	movs	r2, #16
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
 800293e:	e01f      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e016      	b.n	8002980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2220      	movs	r2, #32
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 808f 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8087 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2220      	movs	r2, #32
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d136      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0216 	bic.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_DMA_IRQHandler+0x1da>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	223f      	movs	r2, #63	; 0x3f
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d07e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
        }
        return;
 8002a26:	e079      	b.n	8002b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e02c      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
 8002a56:	bf00      	nop
 8002a58:	20001cac 	.word	0x20001cac
 8002a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e01e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d307      	bcc.n	8002af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <HAL_DMA_IRQHandler+0x2cc>
 8002af6:	e000      	b.n	8002afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3b10      	subs	r3, #16
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <DMA_CalcBaseAndBitshift+0x60>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <DMA_CalcBaseAndBitshift+0x64>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d908      	bls.n	8002b64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58
 8002b62:	e006      	b.n	8002b72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	aaaaaaab 	.word	0xaaaaaaab
 8002b88:	08008104 	.word	0x08008104
 8002b8c:	fffffc00 	.word	0xfffffc00

08002b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d856      	bhi.n	8002c5e <DMA_CheckFifoParam+0xce>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <DMA_CheckFifoParam+0x28>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bdb 	.word	0x08002bdb
 8002bc0:	08002bc9 	.word	0x08002bc9
 8002bc4:	08002c5f 	.word	0x08002c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d046      	beq.n	8002c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e043      	b.n	8002c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be2:	d140      	bne.n	8002c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e03d      	b.n	8002c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d121      	bne.n	8002c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d837      	bhi.n	8002c6a <DMA_CheckFifoParam+0xda>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x70>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c17 	.word	0x08002c17
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002c29 	.word	0x08002c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e030      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d025      	beq.n	8002c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e022      	b.n	8002c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c36:	e01c      	b.n	8002c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d903      	bls.n	8002c46 <DMA_CheckFifoParam+0xb6>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d003      	beq.n	8002c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c44:	e018      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e015      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e00b      	b.n	8002c76 <DMA_CheckFifoParam+0xe6>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e00a      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e008      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e006      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
    }
  } 
  
  return status; 
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e175      	b.n	8002f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 8164 	bne.w	8002f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d005      	beq.n	8002cde <HAL_GPIO_Init+0x56>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d130      	bne.n	8002d40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 0201 	and.w	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d017      	beq.n	8002d7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80be 	beq.w	8002f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e2a:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_GPIO_Init+0x32c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d037      	beq.n	8002ec6 <HAL_GPIO_Init+0x23e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <HAL_GPIO_Init+0x330>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d031      	beq.n	8002ec2 <HAL_GPIO_Init+0x23a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02b      	beq.n	8002ebe <HAL_GPIO_Init+0x236>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <HAL_GPIO_Init+0x338>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d025      	beq.n	8002eba <HAL_GPIO_Init+0x232>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a54      	ldr	r2, [pc, #336]	; (8002fc4 <HAL_GPIO_Init+0x33c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01f      	beq.n	8002eb6 <HAL_GPIO_Init+0x22e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_GPIO_Init+0x340>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d019      	beq.n	8002eb2 <HAL_GPIO_Init+0x22a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_GPIO_Init+0x344>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0x226>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a51      	ldr	r2, [pc, #324]	; (8002fd0 <HAL_GPIO_Init+0x348>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00d      	beq.n	8002eaa <HAL_GPIO_Init+0x222>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a50      	ldr	r2, [pc, #320]	; (8002fd4 <HAL_GPIO_Init+0x34c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <HAL_GPIO_Init+0x21e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4f      	ldr	r2, [pc, #316]	; (8002fd8 <HAL_GPIO_Init+0x350>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_GPIO_Init+0x21a>
 8002e9e:	2309      	movs	r3, #9
 8002ea0:	e012      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ea2:	230a      	movs	r3, #10
 8002ea4:	e010      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	e00e      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00c      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eae:	2306      	movs	r3, #6
 8002eb0:	e00a      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e008      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f002 0203 	and.w	r2, r2, #3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ed8:	4935      	ldr	r1, [pc, #212]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	f67f ae86 	bls.w	8002ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020c00 	.word	0x40020c00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40021400 	.word	0x40021400
 8002fcc:	40021800 	.word	0x40021800
 8002fd0:	40021c00 	.word	0x40021c00
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40022400 	.word	0x40022400
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff f976 	bl	800230c <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e067      	b.n	80030fc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd ff9f 	bl	8000f84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003046:	f241 3188 	movw	r1, #5000	; 0x1388
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f85e 	bl	800310c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	021a      	lsls	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	2120      	movs	r1, #32
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f856 	bl	8003128 <QSPI_WaitFlagStateUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003080:	7afb      	ldrb	r3, [r7, #11]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d135      	bne.n	80030f2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_QSPI_Init+0xf0>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6852      	ldr	r2, [r2, #4]
 8003094:	0611      	lsls	r1, r2, #24
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	69d2      	ldr	r2, [r2, #28]
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6a12      	ldr	r2, [r2, #32]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_QSPI_Init+0xf4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6912      	ldr	r2, [r2, #16]
 80030be:	0411      	lsls	r1, r2, #16
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6952      	ldr	r2, [r2, #20]
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6992      	ldr	r2, [r2, #24]
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00ffff2f 	.word	0x00ffff2f
 8003108:	ffe0f8fe 	.word	0xffe0f8fe

0800310c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003138:	e01a      	b.n	8003170 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d016      	beq.n	8003170 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f8e3 	bl	800230c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2204      	movs	r2, #4
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e00e      	b.n	800318e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	429a      	cmp	r2, r3
 800318a:	d1d6      	bne.n	800313a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e29b      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8087 	beq.w	80032ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	4b96      	ldr	r3, [pc, #600]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c8:	4b93      	ldr	r3, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d112      	bne.n	80031fa <HAL_RCC_OscConfig+0x62>
 80031d4:	4b90      	ldr	r3, [pc, #576]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e0:	d10b      	bne.n	80031fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e2:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x130>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d168      	bne.n	80032c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e275      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x7a>
 8003204:	4b84      	ldr	r3, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a83      	ldr	r2, [pc, #524]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e02e      	b.n	8003270 <HAL_RCC_OscConfig+0xd8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x9c>
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7e      	ldr	r2, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7b      	ldr	r2, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xd8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xc0>
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a72      	ldr	r2, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xd8>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7ff f848 	bl	800230c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff f844 	bl	800230c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e229      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xe8>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff f834 	bl	800230c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f830 	bl	800230c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e215      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x110>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d069      	beq.n	80033aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d6:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x190>
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x17a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1e9      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	493d      	ldr	r1, [pc, #244]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e040      	b.n	80033aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a38      	ldr	r2, [pc, #224]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe ffe6 	bl	800230c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe ffe2 	bl	800230c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1c7      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4929      	ldr	r1, [pc, #164]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
 8003376:	e018      	b.n	80033aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe ffc2 	bl	800230c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338c:	f7fe ffbe 	bl	800230c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1a3      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d038      	beq.n	8003428 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d019      	beq.n	80033f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe ff9f 	bl	800230c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fe ff9b 	bl	800230c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e180      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x23a>
 80033f0:	e01a      	b.n	8003428 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_RCC_OscConfig+0x280>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe ff85 	bl	800230c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7fe ff81 	bl	800230c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d903      	bls.n	800341c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e166      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
 8003418:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b92      	ldr	r3, [pc, #584]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a4 	beq.w	800357e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b89      	ldr	r3, [pc, #548]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a88      	ldr	r2, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b86      	ldr	r3, [pc, #536]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345e:	4b83      	ldr	r3, [pc, #524]	; (800366c <HAL_RCC_OscConfig+0x4d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800346a:	4b80      	ldr	r3, [pc, #512]	; (800366c <HAL_RCC_OscConfig+0x4d4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7f      	ldr	r2, [pc, #508]	; (800366c <HAL_RCC_OscConfig+0x4d4>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe ff49 	bl	800230c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe ff45 	bl	800230c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	; 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e12a      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003490:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x4d4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x31a>
 80034a4:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a6f      	ldr	r2, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	e02d      	b.n	800350e <HAL_RCC_OscConfig+0x376>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x33c>
 80034ba:	4b6b      	ldr	r3, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a6a      	ldr	r2, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a67      	ldr	r2, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	e01c      	b.n	800350e <HAL_RCC_OscConfig+0x376>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x35e>
 80034dc:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a61      	ldr	r2, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a5e      	ldr	r2, [pc, #376]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x376>
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d015      	beq.n	8003542 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003516:	f7fe fef9 	bl	800230c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fef5 	bl	800230c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0d8      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCC_OscConfig+0x386>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe fee3 	bl	800230c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fedf 	bl	800230c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0c2      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a3c      	ldr	r2, [pc, #240]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80ae 	beq.w	80036e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d06d      	beq.n	8003670 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d14b      	bne.n	8003634 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe feb0 	bl	800230c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe feac 	bl	800230c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e091      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	019b      	lsls	r3, r3, #6
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	3b01      	subs	r3, #1
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	491b      	ldr	r1, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fe7e 	bl	800230c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fe7a 	bl	800230c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e05f      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x47c>
 8003632:	e057      	b.n	80036e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fe64 	bl	800230c <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fe60 	bl	800230c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e045      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_OscConfig+0x4d0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x4b0>
 8003666:	e03d      	b.n	80036e4 <HAL_RCC_OscConfig+0x54c>
 8003668:	40023800 	.word	0x40023800
 800366c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCC_OscConfig+0x558>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d030      	beq.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d129      	bne.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d122      	bne.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d119      	bne.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10f      	bne.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0d0      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 020f 	bic.w	r2, r3, #15
 8003722:	4965      	ldr	r1, [pc, #404]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800375e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d040      	beq.n	8003818 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e073      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4936      	ldr	r1, [pc, #216]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e8:	f7fe fd90 	bl	800230c <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fe fd8c 	bl	800230c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e053      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d210      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 020f 	bic.w	r2, r3, #15
 800382e:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4916      	ldr	r1, [pc, #88]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	490e      	ldr	r1, [pc, #56]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1d0>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fcec 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00
 80038bc:	40023800 	.word	0x40023800
 80038c0:	080080ec 	.word	0x080080ec
 80038c4:	20001cac 	.word	0x20001cac
 80038c8:	20001cb0 	.word	0x20001cb0

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b090      	sub	sp, #64	; 0x40
 80038d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
 80038d8:	2300      	movs	r3, #0
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	2300      	movs	r3, #0
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d00d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x40>
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	f200 80a1 	bhi.w	8003a38 <HAL_RCC_GetSysClockFreq+0x16c>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fe:	e09b      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003904:	e09b      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003906:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390a:	e098      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003916:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d028      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	2200      	movs	r2, #0
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	627a      	str	r2, [r7, #36]	; 0x24
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003934:	2100      	movs	r1, #0
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003938:	fb03 f201 	mul.w	r2, r3, r1
 800393c:	2300      	movs	r3, #0
 800393e:	fb00 f303 	mul.w	r3, r0, r3
 8003942:	4413      	add	r3, r2
 8003944:	4a43      	ldr	r2, [pc, #268]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8003946:	fba0 1202 	umull	r1, r2, r0, r2
 800394a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800394c:	460a      	mov	r2, r1
 800394e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003952:	4413      	add	r3, r2
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	2200      	movs	r2, #0
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	61fa      	str	r2, [r7, #28]
 800395e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003962:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003966:	f7fc fcbb 	bl	80002e0 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4613      	mov	r3, r2
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003972:	e053      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	2200      	movs	r2, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	617a      	str	r2, [r7, #20]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003986:	f04f 0b00 	mov.w	fp, #0
 800398a:	4652      	mov	r2, sl
 800398c:	465b      	mov	r3, fp
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	0159      	lsls	r1, r3, #5
 8003998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399c:	0150      	lsls	r0, r2, #5
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	ebb2 080a 	subs.w	r8, r2, sl
 80039a6:	eb63 090b 	sbc.w	r9, r3, fp
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039be:	ebb2 0408 	subs.w	r4, r2, r8
 80039c2:	eb63 0509 	sbc.w	r5, r3, r9
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	00eb      	lsls	r3, r5, #3
 80039d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d4:	00e2      	lsls	r2, r4, #3
 80039d6:	4614      	mov	r4, r2
 80039d8:	461d      	mov	r5, r3
 80039da:	eb14 030a 	adds.w	r3, r4, sl
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	eb45 030b 	adc.w	r3, r5, fp
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f2:	4629      	mov	r1, r5
 80039f4:	028b      	lsls	r3, r1, #10
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039fc:	4621      	mov	r1, r4
 80039fe:	028a      	lsls	r2, r1, #10
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	2200      	movs	r2, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	60fa      	str	r2, [r7, #12]
 8003a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a10:	f7fc fc66 	bl	80002e0 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3740      	adds	r7, #64	; 0x40
 8003a44:	46bd      	mov	sp, r7
 8003a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	017d7840 	.word	0x017d7840

08003a58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20001cac 	.word	0x20001cac

08003a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a74:	f7ff fff0 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	080080fc 	.word	0x080080fc

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a9c:	f7ff ffdc 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0b5b      	lsrs	r3, r3, #13
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	080080fc 	.word	0x080080fc

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d012      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ae8:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003af2:	6093      	str	r3, [r2, #8]
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	4964      	ldr	r1, [pc, #400]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d017      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	4959      	ldr	r1, [pc, #356]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b56:	4b4e      	ldr	r3, [pc, #312]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	494a      	ldr	r1, [pc, #296]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 808b 	beq.w	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb0:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fe fba0 	bl	800230c <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fe fb9c 	bl	800230c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e38f      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d035      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d02e      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c16:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d114      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fb64 	bl	800230c <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe fb60 	bl	800230c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e351      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ee      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c76:	d111      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c86:	400b      	ands	r3, r1
 8003c88:	4901      	ldr	r1, [pc, #4]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	0ffffcff 	.word	0x0ffffcff
 8003c9c:	4bac      	ldr	r3, [pc, #688]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4aab      	ldr	r2, [pc, #684]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ca6:	6093      	str	r3, [r2, #8]
 8003ca8:	4ba9      	ldr	r3, [pc, #676]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	49a6      	ldr	r1, [pc, #664]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc6:	4ba2      	ldr	r3, [pc, #648]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	4aa0      	ldr	r2, [pc, #640]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cd6:	4b9e      	ldr	r3, [pc, #632]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	499b      	ldr	r1, [pc, #620]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf4:	4b96      	ldr	r3, [pc, #600]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d02:	4993      	ldr	r1, [pc, #588]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d16:	4b8e      	ldr	r3, [pc, #568]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d24:	498a      	ldr	r1, [pc, #552]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d38:	4b85      	ldr	r3, [pc, #532]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	4982      	ldr	r1, [pc, #520]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d5a:	4b7d      	ldr	r3, [pc, #500]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4979      	ldr	r1, [pc, #484]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d7c:	4b74      	ldr	r3, [pc, #464]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4971      	ldr	r1, [pc, #452]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f023 020c 	bic.w	r2, r3, #12
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	4968      	ldr	r1, [pc, #416]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc0:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	4960      	ldr	r1, [pc, #384]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003de2:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	4957      	ldr	r1, [pc, #348]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e04:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	494f      	ldr	r1, [pc, #316]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	4946      	ldr	r1, [pc, #280]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e48:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	493e      	ldr	r1, [pc, #248]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	4935      	ldr	r1, [pc, #212]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e9a:	492d      	ldr	r1, [pc, #180]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebc:	4924      	ldr	r1, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	4914      	ldr	r1, [pc, #80]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f20:	490b      	ldr	r1, [pc, #44]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00f      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	4902      	ldr	r1, [pc, #8]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f60:	4b8a      	ldr	r3, [pc, #552]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	4986      	ldr	r1, [pc, #536]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f84:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f94:	497d      	ldr	r1, [pc, #500]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d006      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80d6 	beq.w	800415c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb0:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fe f9a6 	bl	800230c <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc4:	f7fe f9a2 	bl	800230c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e195      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004004:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	0e1b      	lsrs	r3, r3, #24
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	019a      	lsls	r2, r3, #6
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	071b      	lsls	r3, r3, #28
 800402a:	4958      	ldr	r1, [pc, #352]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800405c:	d129      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800405e:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800406c:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004072:	0f1b      	lsrs	r3, r3, #28
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	019a      	lsls	r2, r3, #6
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	061b      	lsls	r3, r3, #24
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	071b      	lsls	r3, r3, #28
 8004092:	493e      	ldr	r1, [pc, #248]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a0:	f023 021f 	bic.w	r2, r3, #31
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	3b01      	subs	r3, #1
 80040aa:	4938      	ldr	r1, [pc, #224]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01d      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040be:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040cc:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	0f1b      	lsrs	r3, r3, #28
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	019a      	lsls	r2, r3, #6
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	061b      	lsls	r3, r3, #24
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	071b      	lsls	r3, r3, #28
 80040f2:	4926      	ldr	r1, [pc, #152]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	019a      	lsls	r2, r3, #6
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	071b      	lsls	r3, r3, #28
 8004122:	491a      	ldr	r1, [pc, #104]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a17      	ldr	r2, [pc, #92]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004136:	f7fe f8e9 	bl	800230c <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800413e:	f7fe f8e5 	bl	800230c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0d8      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	f040 80ce 	bne.w	8004300 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a08      	ldr	r2, [pc, #32]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fe f8cc 	bl	800230c <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004176:	e00b      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004178:	f7fe f8c8 	bl	800230c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d904      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0bb      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004190:	4b5e      	ldr	r3, [pc, #376]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419c:	d0ec      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02e      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12a      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041c6:	4b51      	ldr	r3, [pc, #324]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041d4:	4b4d      	ldr	r3, [pc, #308]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	0f1b      	lsrs	r3, r3, #28
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	019a      	lsls	r2, r3, #6
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	071b      	lsls	r3, r3, #28
 80041fa:	4944      	ldr	r1, [pc, #272]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004202:	4b42      	ldr	r3, [pc, #264]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	493d      	ldr	r1, [pc, #244]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d022      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004230:	d11d      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	0e1b      	lsrs	r3, r3, #24
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	0f1b      	lsrs	r3, r3, #28
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4929      	ldr	r1, [pc, #164]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	019a      	lsls	r2, r3, #6
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	4917      	ldr	r1, [pc, #92]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4911      	ldr	r1, [pc, #68]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0e      	ldr	r2, [pc, #56]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fe f818 	bl	800230c <HAL_GetTick>
 80042dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042e0:	f7fe f814 	bl	800230c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	; 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e007      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042fe:	d1ef      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800

08004310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e09d      	b.n	800445e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d009      	beq.n	8004348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	61da      	str	r2, [r3, #28]
 800433a:	e005      	b.n	8004348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc ff44 	bl	80011f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004388:	d902      	bls.n	8004390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e002      	b.n	8004396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800439e:	d007      	beq.n	80043b0 <HAL_SPI_Init+0xa0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	ea42 0103 	orr.w	r1, r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 0204 	and.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800442c:	ea42 0103 	orr.w	r1, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b088      	sub	sp, #32
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_SPI_Transmit+0x22>
 8004484:	2302      	movs	r3, #2
 8004486:	e158      	b.n	800473a <HAL_SPI_Transmit+0x2d4>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004490:	f7fd ff3c 	bl	800230c <HAL_GetTick>
 8004494:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044aa:	e13d      	b.n	8004728 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x52>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044bc:	e134      	b.n	8004728 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d10f      	bne.n	800452a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004528:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d007      	beq.n	8004548 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004550:	d94b      	bls.n	80045ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Transmit+0xfa>
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d13e      	bne.n	80045de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	881a      	ldrh	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004584:	e02b      	b.n	80045de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b02      	cmp	r3, #2
 8004592:	d112      	bne.n	80045ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	1c9a      	adds	r2, r3, #2
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045b8:	e011      	b.n	80045de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ba:	f7fd fea7 	bl	800230c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d803      	bhi.n	80045d2 <HAL_SPI_Transmit+0x16c>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d102      	bne.n	80045d8 <HAL_SPI_Transmit+0x172>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045dc:	e0a4      	b.n	8004728 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ce      	bne.n	8004586 <HAL_SPI_Transmit+0x120>
 80045e8:	e07c      	b.n	80046e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_Transmit+0x192>
 80045f2:	8afb      	ldrh	r3, [r7, #22]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d170      	bne.n	80046da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d912      	bls.n	8004628 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b02      	subs	r3, #2
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004626:	e058      	b.n	80046da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800464e:	e044      	b.n	80046da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d12b      	bne.n	80046b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d912      	bls.n	800468e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b02      	subs	r3, #2
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800468c:	e025      	b.n	80046da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b4:	e011      	b.n	80046da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b6:	f7fd fe29 	bl	800230c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d803      	bhi.n	80046ce <HAL_SPI_Transmit+0x268>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d102      	bne.n	80046d4 <HAL_SPI_Transmit+0x26e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d8:	e026      	b.n	8004728 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1b5      	bne.n	8004650 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fd07 	bl	80050fc <SPI_EndRxTxTransaction>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e000      	b.n	8004728 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af02      	add	r7, sp, #8
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475e:	d112      	bne.n	8004786 <HAL_SPI_Receive+0x44>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10e      	bne.n	8004786 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2204      	movs	r2, #4
 800476c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f910 	bl	80049a2 <HAL_SPI_TransmitReceive>
 8004782:	4603      	mov	r3, r0
 8004784:	e109      	b.n	800499a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_SPI_Receive+0x52>
 8004790:	2302      	movs	r3, #2
 8004792:	e102      	b.n	800499a <HAL_SPI_Receive+0x258>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479c:	f7fd fdb6 	bl	800230c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047b2:	e0e9      	b.n	8004988 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Receive+0x7e>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047c4:	e0e0      	b.n	8004988 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2204      	movs	r2, #4
 80047ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004810:	d908      	bls.n	8004824 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	e007      	b.n	8004834 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004832:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483c:	d10f      	bne.n	800485e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d007      	beq.n	800487c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004884:	d867      	bhi.n	8004956 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004886:	e030      	b.n	80048ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d117      	bne.n	80048c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f103 020c 	add.w	r2, r3, #12
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048c4:	e011      	b.n	80048ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c6:	f7fd fd21 	bl	800230c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d803      	bhi.n	80048de <HAL_SPI_Receive+0x19c>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d102      	bne.n	80048e4 <HAL_SPI_Receive+0x1a2>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e8:	e04e      	b.n	8004988 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1c8      	bne.n	8004888 <HAL_SPI_Receive+0x146>
 80048f6:	e034      	b.n	8004962 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	b292      	uxth	r2, r2
 8004912:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004930:	e011      	b.n	8004956 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fd fceb 	bl	800230c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d803      	bhi.n	800494a <HAL_SPI_Receive+0x208>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d102      	bne.n	8004950 <HAL_SPI_Receive+0x20e>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004954:	e018      	b.n	8004988 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ca      	bne.n	80048f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fb4c 	bl	8005004 <SPI_EndRxTransaction>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
 8004984:	e000      	b.n	8004988 <HAL_SPI_Receive+0x246>
  }

error :
 8004986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	; 0x28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049b0:	2301      	movs	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x26>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e1fb      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x41e>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d0:	f7fd fc9c 	bl	800230c <HAL_GetTick>
 80049d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ec:	7efb      	ldrb	r3, [r7, #27]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d00e      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x6e>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f8:	d106      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x66>
 8004a02:	7efb      	ldrb	r3, [r7, #27]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d003      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a0e:	e1cd      	b.n	8004dac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x80>
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a28:	e1c0      	b.n	8004dac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d003      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2205      	movs	r2, #5
 8004a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	887a      	ldrh	r2, [r7, #2]
 8004a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	887a      	ldrh	r2, [r7, #2]
 8004a6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a80:	d802      	bhi.n	8004a88 <HAL_SPI_TransmitReceive+0xe6>
 8004a82:	8a3b      	ldrh	r3, [r7, #16]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d908      	bls.n	8004a9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	e007      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d007      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad0:	d97c      	bls.n	8004bcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x13e>
 8004ada:	8a7b      	ldrh	r3, [r7, #18]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d169      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b04:	e056      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d11b      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x1aa>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x1aa>
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d113      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d11c      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x1f2>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b90:	2301      	movs	r3, #1
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b94:	f7fd fbba 	bl	800230c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d807      	bhi.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d003      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bb2:	e0fb      	b.n	8004dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1a3      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x164>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d19d      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x164>
 8004bca:	e0df      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x23a>
 8004bd4:	8a7b      	ldrh	r3, [r7, #18]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 80cb 	bne.w	8004d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d912      	bls.n	8004c0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	881a      	ldrh	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b02      	subs	r3, #2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0a:	e0b2      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	e09e      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d134      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02f      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d12c      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d912      	bls.n	8004c82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b02      	subs	r3, #2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c80:	e012      	b.n	8004ca8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d148      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x3aa>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d042      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d923      	bls.n	8004d1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d81f      	bhi.n	8004d48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	e016      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f103 020c 	add.w	r2, r3, #12
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d4c:	f7fd fade 	bl	800230c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d803      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x3c2>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x3c8>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d70:	e01c      	b.n	8004dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f af5b 	bne.w	8004c34 <HAL_SPI_TransmitReceive+0x292>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f47f af54 	bne.w	8004c34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f9b3 	bl	80050fc <SPI_EndRxTxTransaction>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
 8004da8:	e000      	b.n	8004dac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	; 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dd8:	f7fd fa98 	bl	800230c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004de8:	f7fd fa90 	bl	800230c <HAL_GetTick>
 8004dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dee:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	015b      	lsls	r3, r3, #5
 8004df4:	0d1b      	lsrs	r3, r3, #20
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfe:	e054      	b.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d050      	beq.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e08:	f7fd fa80 	bl	800230c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d902      	bls.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d13d      	bne.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e36:	d111      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e40:	d004      	beq.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d107      	bne.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e64:	d10f      	bne.n	8004e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e017      	b.n	8004eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	bf0c      	ite	eq
 8004eba:	2301      	moveq	r3, #1
 8004ebc:	2300      	movne	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d19b      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20001cac 	.word	0x20001cac

08004ed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eea:	f7fd fa0f 	bl	800230c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004efa:	f7fd fa07 	bl	800230c <HAL_GetTick>
 8004efe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f08:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00da      	lsls	r2, r3, #3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	0d1b      	lsrs	r3, r3, #20
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f20:	e060      	b.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f28:	d107      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d050      	beq.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f42:	f7fd f9e3 	bl	800230c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d902      	bls.n	8004f58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d13d      	bne.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f70:	d111      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7a:	d004      	beq.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f84:	d107      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9e:	d10f      	bne.n	8004fc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d196      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3728      	adds	r7, #40	; 0x28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20001cac 	.word	0x20001cac

08005004 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005018:	d111      	bne.n	800503e <SPI_EndRxTransaction+0x3a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d004      	beq.n	800502e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d107      	bne.n	800503e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005046:	d112      	bne.n	800506e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	2180      	movs	r1, #128	; 0x80
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff feb8 	bl	8004dc8 <SPI_WaitFlagStateUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d021      	beq.n	80050a2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e03d      	b.n	80050ea <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <SPI_EndRxTransaction+0xf0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <SPI_EndRxTransaction+0xf4>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	0d5b      	lsrs	r3, r3, #21
 800507a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3b01      	subs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d0f2      	beq.n	8005084 <SPI_EndRxTransaction+0x80>
 800509e:	e000      	b.n	80050a2 <SPI_EndRxTransaction+0x9e>
        break;
 80050a0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d11d      	bne.n	80050e8 <SPI_EndRxTransaction+0xe4>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b4:	d004      	beq.n	80050c0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d113      	bne.n	80050e8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff ff03 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e000      	b.n	80050ea <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20001cac 	.word	0x20001cac
 80050f8:	165e9f81 	.word	0x165e9f81

080050fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fedf 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e046      	b.n	80051be <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <SPI_EndRxTxTransaction+0xcc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <SPI_EndRxTxTransaction+0xd0>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0d5b      	lsrs	r3, r3, #21
 800513c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d112      	bne.n	8005176 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	2180      	movs	r1, #128	; 0x80
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fe34 	bl	8004dc8 <SPI_WaitFlagStateUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516a:	f043 0220 	orr.w	r2, r3, #32
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e023      	b.n	80051be <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d0f2      	beq.n	8005176 <SPI_EndRxTxTransaction+0x7a>
 8005190:	e000      	b.n	8005194 <SPI_EndRxTxTransaction+0x98>
        break;
 8005192:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fe99 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e000      	b.n	80051be <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20001cac 	.word	0x20001cac
 80051cc:	165e9f81 	.word	0x165e9f81

080051d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e049      	b.n	8005276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fa04 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 f836 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a40      	ldr	r2, [pc, #256]	; (8005394 <TIM_Base_SetConfig+0x114>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <TIM_Base_SetConfig+0x118>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3c      	ldr	r2, [pc, #240]	; (800539c <TIM_Base_SetConfig+0x11c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <TIM_Base_SetConfig+0x120>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <TIM_Base_SetConfig+0x114>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d027      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2c      	ldr	r2, [pc, #176]	; (8005398 <TIM_Base_SetConfig+0x118>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d023      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2b      	ldr	r2, [pc, #172]	; (800539c <TIM_Base_SetConfig+0x11c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2a      	ldr	r2, [pc, #168]	; (80053a0 <TIM_Base_SetConfig+0x120>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a29      	ldr	r2, [pc, #164]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a28      	ldr	r2, [pc, #160]	; (80053a8 <TIM_Base_SetConfig+0x128>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a27      	ldr	r2, [pc, #156]	; (80053ac <TIM_Base_SetConfig+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <TIM_Base_SetConfig+0x130>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <TIM_Base_SetConfig+0x134>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <TIM_Base_SetConfig+0x138>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <TIM_Base_SetConfig+0x13c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <TIM_Base_SetConfig+0x114>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0xf8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40001c00 	.word	0x40001c00
 80053bc:	40002000 	.word	0x40002000

080053c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e040      	b.n	8005454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc f98e 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2224      	movs	r2, #36	; 0x24
 80053ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fbc2 	bl	8005b88 <UART_SetConfig>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e022      	b.n	8005454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fe1a 	bl	8006050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fea1 	bl	8006194 <UART_CheckIdleState>
 8005452:	4603      	mov	r3, r0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005470:	2b20      	cmp	r3, #32
 8005472:	d171      	bne.n	8005558 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Transmit+0x24>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e06a      	b.n	800555a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	; 0x21
 8005490:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005492:	f7fc ff3b 	bl	800230c <HAL_GetTick>
 8005496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b0:	d108      	bne.n	80054c4 <HAL_UART_Transmit+0x68>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e003      	b.n	80054cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054cc:	e02c      	b.n	8005528 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fea8 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e038      	b.n	800555a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	3302      	adds	r3, #2
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e007      	b.n	8005516 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1cc      	bne.n	80054ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 fe75 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e005      	b.n	800555a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b0ba      	sub	sp, #232	; 0xe8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800558a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800558e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005592:	4013      	ands	r3, r2
 8005594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d115      	bne.n	80055cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 82ac 	beq.w	8005b1a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
      }
      return;
 80055ca:	e2a6      	b.n	8005b1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8117 	beq.w	8005804 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055e6:	4b85      	ldr	r3, [pc, #532]	; (80057fc <HAL_UART_IRQHandler+0x298>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 810a 	beq.w	8005804 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d011      	beq.n	8005620 <HAL_UART_IRQHandler+0xbc>
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d011      	beq.n	8005650 <HAL_UART_IRQHandler+0xec>
 800562c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2202      	movs	r2, #2
 800563e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d011      	beq.n	8005680 <HAL_UART_IRQHandler+0x11c>
 800565c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2204      	movs	r2, #4
 800566e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005676:	f043 0202 	orr.w	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d017      	beq.n	80056bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2208      	movs	r2, #8
 80056aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	f043 0208 	orr.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d012      	beq.n	80056ee <HAL_UART_IRQHandler+0x18a>
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8212 	beq.w	8005b1e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d005      	beq.n	8005746 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800573a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005742:	2b00      	cmp	r3, #0
 8005744:	d04f      	beq.n	80057e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fe37 	bl	80063ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d141      	bne.n	80057de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800578a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800579e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1d9      	bne.n	800575a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d013      	beq.n	80057d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <HAL_UART_IRQHandler+0x29c>)
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fd f806 	bl	80027cc <HAL_DMA_Abort_IT>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d017      	beq.n	80057f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	e00f      	b.n	80057f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9b6 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00b      	b.n	80057f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9b2 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e007      	b.n	80057f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9ae 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80057f4:	e193      	b.n	8005b1e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f6:	bf00      	nop
    return;
 80057f8:	e191      	b.n	8005b1e <HAL_UART_IRQHandler+0x5ba>
 80057fa:	bf00      	nop
 80057fc:	04000120 	.word	0x04000120
 8005800:	08006483 	.word	0x08006483

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 814c 	bne.w	8005aa6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8145 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 813e 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2210      	movs	r2, #16
 8005830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	f040 80b6 	bne.w	80059ae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800584e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8165 	beq.w	8005b22 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800585e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005862:	429a      	cmp	r2, r3
 8005864:	f080 815d 	bcs.w	8005b22 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587c:	f000 8086 	beq.w	800598c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1da      	bne.n	8005880 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e1      	bne.n	80058ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800592a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800592c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	f023 0310 	bic.w	r3, r3, #16
 8005960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800596e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e4      	bne.n	800594c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc feb0 	bl	80026ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8d8 	bl	8005b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059ac:	e0b9      	b.n	8005b22 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80ab 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80059d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a6 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059fc:	647b      	str	r3, [r7, #68]	; 0x44
 80059fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a34:	633a      	str	r2, [r7, #48]	; 0x30
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e3      	bne.n	8005a10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e4      	bne.n	8005a5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f85c 	bl	8005b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa4:	e03f      	b.n	8005b26 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x56c>
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f853 	bl	8005b74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ace:	e02d      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00e      	beq.n	8005afa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
    }
    return;
 8005af8:	e017      	b.n	8005b2a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fccb 	bl	80064ae <UART_EndTransmit_IT>
    return;
 8005b18:	e008      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b1a:	bf00      	nop
 8005b1c:	e006      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b1e:	bf00      	nop
 8005b20:	e004      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005b2a:	bf00      	nop
  }

}
 8005b2c:	37e8      	adds	r7, #232	; 0xe8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4ba6      	ldr	r3, [pc, #664]	; (8005e4c <UART_SetConfig+0x2c4>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a94      	ldr	r2, [pc, #592]	; (8005e50 <UART_SetConfig+0x2c8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d120      	bne.n	8005c46 <UART_SetConfig+0xbe>
 8005c04:	4b93      	ldr	r3, [pc, #588]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d816      	bhi.n	8005c40 <UART_SetConfig+0xb8>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x90>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c2f 	.word	0x08005c2f
 8005c24:	08005c3b 	.word	0x08005c3b
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e150      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e14d      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c34:	2304      	movs	r3, #4
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e14a      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e147      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c40:	2310      	movs	r3, #16
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e144      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a83      	ldr	r2, [pc, #524]	; (8005e58 <UART_SetConfig+0x2d0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d132      	bne.n	8005cb6 <UART_SetConfig+0x12e>
 8005c50:	4b80      	ldr	r3, [pc, #512]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d828      	bhi.n	8005cb0 <UART_SetConfig+0x128>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0xdc>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c99 	.word	0x08005c99
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005cb1 	.word	0x08005cb1
 8005c70:	08005cb1 	.word	0x08005cb1
 8005c74:	08005ca5 	.word	0x08005ca5
 8005c78:	08005cb1 	.word	0x08005cb1
 8005c7c:	08005cb1 	.word	0x08005cb1
 8005c80:	08005cb1 	.word	0x08005cb1
 8005c84:	08005c9f 	.word	0x08005c9f
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005cab 	.word	0x08005cab
 8005c98:	2300      	movs	r3, #0
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e118      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e115      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e112      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005caa:	2308      	movs	r3, #8
 8005cac:	77fb      	strb	r3, [r7, #31]
 8005cae:	e10f      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e10c      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a68      	ldr	r2, [pc, #416]	; (8005e5c <UART_SetConfig+0x2d4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d120      	bne.n	8005d02 <UART_SetConfig+0x17a>
 8005cc0:	4b64      	ldr	r3, [pc, #400]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cca:	2b30      	cmp	r3, #48	; 0x30
 8005ccc:	d013      	beq.n	8005cf6 <UART_SetConfig+0x16e>
 8005cce:	2b30      	cmp	r3, #48	; 0x30
 8005cd0:	d814      	bhi.n	8005cfc <UART_SetConfig+0x174>
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d009      	beq.n	8005cea <UART_SetConfig+0x162>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d810      	bhi.n	8005cfc <UART_SetConfig+0x174>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <UART_SetConfig+0x15c>
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d006      	beq.n	8005cf0 <UART_SetConfig+0x168>
 8005ce2:	e00b      	b.n	8005cfc <UART_SetConfig+0x174>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e0f2      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e0ef      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e0ec      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e0e9      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e0e6      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a56      	ldr	r2, [pc, #344]	; (8005e60 <UART_SetConfig+0x2d8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d120      	bne.n	8005d4e <UART_SetConfig+0x1c6>
 8005d0c:	4b51      	ldr	r3, [pc, #324]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d16:	2bc0      	cmp	r3, #192	; 0xc0
 8005d18:	d013      	beq.n	8005d42 <UART_SetConfig+0x1ba>
 8005d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d1c:	d814      	bhi.n	8005d48 <UART_SetConfig+0x1c0>
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d009      	beq.n	8005d36 <UART_SetConfig+0x1ae>
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d810      	bhi.n	8005d48 <UART_SetConfig+0x1c0>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <UART_SetConfig+0x1a8>
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d006      	beq.n	8005d3c <UART_SetConfig+0x1b4>
 8005d2e:	e00b      	b.n	8005d48 <UART_SetConfig+0x1c0>
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e0cc      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e0c9      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e0c6      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d42:	2308      	movs	r3, #8
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e0c3      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e0c0      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a44      	ldr	r2, [pc, #272]	; (8005e64 <UART_SetConfig+0x2dc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d125      	bne.n	8005da4 <UART_SetConfig+0x21c>
 8005d58:	4b3e      	ldr	r3, [pc, #248]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d66:	d017      	beq.n	8005d98 <UART_SetConfig+0x210>
 8005d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6c:	d817      	bhi.n	8005d9e <UART_SetConfig+0x216>
 8005d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d72:	d00b      	beq.n	8005d8c <UART_SetConfig+0x204>
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d78:	d811      	bhi.n	8005d9e <UART_SetConfig+0x216>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <UART_SetConfig+0x1fe>
 8005d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d82:	d006      	beq.n	8005d92 <UART_SetConfig+0x20a>
 8005d84:	e00b      	b.n	8005d9e <UART_SetConfig+0x216>
 8005d86:	2300      	movs	r3, #0
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e0a1      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e09e      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d92:	2304      	movs	r3, #4
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e09b      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e098      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005d9e:	2310      	movs	r3, #16
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e095      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <UART_SetConfig+0x2e0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d125      	bne.n	8005dfa <UART_SetConfig+0x272>
 8005dae:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dbc:	d017      	beq.n	8005dee <UART_SetConfig+0x266>
 8005dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dc2:	d817      	bhi.n	8005df4 <UART_SetConfig+0x26c>
 8005dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc8:	d00b      	beq.n	8005de2 <UART_SetConfig+0x25a>
 8005dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dce:	d811      	bhi.n	8005df4 <UART_SetConfig+0x26c>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <UART_SetConfig+0x254>
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d006      	beq.n	8005de8 <UART_SetConfig+0x260>
 8005dda:	e00b      	b.n	8005df4 <UART_SetConfig+0x26c>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e076      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005de2:	2302      	movs	r3, #2
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e073      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005de8:	2304      	movs	r3, #4
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e070      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005dee:	2308      	movs	r3, #8
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e06d      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005df4:	2310      	movs	r3, #16
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e06a      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <UART_SetConfig+0x2e4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d138      	bne.n	8005e76 <UART_SetConfig+0x2ee>
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <UART_SetConfig+0x2cc>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e12:	d017      	beq.n	8005e44 <UART_SetConfig+0x2bc>
 8005e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e18:	d82a      	bhi.n	8005e70 <UART_SetConfig+0x2e8>
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1e:	d00b      	beq.n	8005e38 <UART_SetConfig+0x2b0>
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e24:	d824      	bhi.n	8005e70 <UART_SetConfig+0x2e8>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <UART_SetConfig+0x2aa>
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d006      	beq.n	8005e3e <UART_SetConfig+0x2b6>
 8005e30:	e01e      	b.n	8005e70 <UART_SetConfig+0x2e8>
 8005e32:	2300      	movs	r3, #0
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e04b      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e048      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005e3e:	2304      	movs	r3, #4
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e045      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005e44:	2308      	movs	r3, #8
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e042      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005e4a:	bf00      	nop
 8005e4c:	efff69f3 	.word	0xefff69f3
 8005e50:	40011000 	.word	0x40011000
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	40004800 	.word	0x40004800
 8005e60:	40004c00 	.word	0x40004c00
 8005e64:	40005000 	.word	0x40005000
 8005e68:	40011400 	.word	0x40011400
 8005e6c:	40007800 	.word	0x40007800
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e02c      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a72      	ldr	r2, [pc, #456]	; (8006044 <UART_SetConfig+0x4bc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d125      	bne.n	8005ecc <UART_SetConfig+0x344>
 8005e80:	4b71      	ldr	r3, [pc, #452]	; (8006048 <UART_SetConfig+0x4c0>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e8e:	d017      	beq.n	8005ec0 <UART_SetConfig+0x338>
 8005e90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e94:	d817      	bhi.n	8005ec6 <UART_SetConfig+0x33e>
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	d00b      	beq.n	8005eb4 <UART_SetConfig+0x32c>
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	d811      	bhi.n	8005ec6 <UART_SetConfig+0x33e>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <UART_SetConfig+0x326>
 8005ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eaa:	d006      	beq.n	8005eba <UART_SetConfig+0x332>
 8005eac:	e00b      	b.n	8005ec6 <UART_SetConfig+0x33e>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e00d      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e00a      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e007      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e004      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005ec6:	2310      	movs	r3, #16
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e001      	b.n	8005ed0 <UART_SetConfig+0x348>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d15b      	bne.n	8005f92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005eda:	7ffb      	ldrb	r3, [r7, #31]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d828      	bhi.n	8005f32 <UART_SetConfig+0x3aa>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x360>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	08005f33 	.word	0x08005f33
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f33 	.word	0x08005f33
 8005f00:	08005f33 	.word	0x08005f33
 8005f04:	08005f33 	.word	0x08005f33
 8005f08:	08005f2b 	.word	0x08005f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0c:	f7fd fdb0 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8005f10:	61b8      	str	r0, [r7, #24]
        break;
 8005f12:	e013      	b.n	8005f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fd fdc0 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8005f18:	61b8      	str	r0, [r7, #24]
        break;
 8005f1a:	e00f      	b.n	8005f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f1c:	4b4b      	ldr	r3, [pc, #300]	; (800604c <UART_SetConfig+0x4c4>)
 8005f1e:	61bb      	str	r3, [r7, #24]
        break;
 8005f20:	e00c      	b.n	8005f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f22:	f7fd fcd3 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005f26:	61b8      	str	r0, [r7, #24]
        break;
 8005f28:	e008      	b.n	8005f3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	61bb      	str	r3, [r7, #24]
        break;
 8005f30:	e004      	b.n	8005f3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	77bb      	strb	r3, [r7, #30]
        break;
 8005f3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d074      	beq.n	800602c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	005a      	lsls	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	d916      	bls.n	8005f8c <UART_SetConfig+0x404>
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d212      	bcs.n	8005f8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f023 030f 	bic.w	r3, r3, #15
 8005f6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	89fb      	ldrh	r3, [r7, #14]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	89fa      	ldrh	r2, [r7, #14]
 8005f88:	60da      	str	r2, [r3, #12]
 8005f8a:	e04f      	b.n	800602c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77bb      	strb	r3, [r7, #30]
 8005f90:	e04c      	b.n	800602c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d828      	bhi.n	8005fea <UART_SetConfig+0x462>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x418>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fd fd54 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	61b8      	str	r0, [r7, #24]
        break;
 8005fca:	e013      	b.n	8005ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fd fd64 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e00f      	b.n	8005ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b1d      	ldr	r3, [pc, #116]	; (800604c <UART_SetConfig+0x4c4>)
 8005fd6:	61bb      	str	r3, [r7, #24]
        break;
 8005fd8:	e00c      	b.n	8005ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fd fc77 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005fde:	61b8      	str	r0, [r7, #24]
        break;
 8005fe0:	e008      	b.n	8005ff4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	61bb      	str	r3, [r7, #24]
        break;
 8005fe8:	e004      	b.n	8005ff4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ff2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d018      	beq.n	800602c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	085a      	lsrs	r2, r3, #1
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	441a      	add	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d909      	bls.n	8006028 <UART_SetConfig+0x4a0>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601a:	d205      	bcs.n	8006028 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	e001      	b.n	800602c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006038:	7fbb      	ldrb	r3, [r7, #30]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40007c00 	.word	0x40007c00
 8006048:	40023800 	.word	0x40023800
 800604c:	00f42400 	.word	0x00f42400

08006050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01a      	beq.n	8006166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d10a      	bne.n	8006166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af02      	add	r7, sp, #8
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a4:	f7fc f8b2 	bl	800230c <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d10e      	bne.n	80061d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f831 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e027      	b.n	8006226 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d10e      	bne.n	8006202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f81b 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e011      	b.n	8006226 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	e0a7      	b.n	8006390 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	f000 80a3 	beq.w	8006390 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fc f85f 	bl	800230c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
 800625a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625c:	2b00      	cmp	r3, #0
 800625e:	d13f      	bne.n	80062e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006280:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800628c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	663b      	str	r3, [r7, #96]	; 0x60
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e068      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d050      	beq.n	8006390 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fc:	d148      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006306:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
 8006328:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e6      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	613b      	str	r3, [r7, #16]
   return(result);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	66bb      	str	r3, [r7, #104]	; 0x68
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800635a:	623a      	str	r2, [r7, #32]
 800635c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	69f9      	ldr	r1, [r7, #28]
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	61bb      	str	r3, [r7, #24]
   return(result);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e010      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f43f af48 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3770      	adds	r7, #112	; 0x70
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b095      	sub	sp, #84	; 0x54
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	61fb      	str	r3, [r7, #28]
   return(result);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	2b01      	cmp	r3, #1
 800642e:	d118      	bne.n	8006462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60bb      	str	r3, [r7, #8]
   return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006476:	bf00      	nop
 8006478:	3754      	adds	r7, #84	; 0x54
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fb51 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	613b      	str	r3, [r7, #16]
   return(result);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e6      	bne.n	80064b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fb1d 	bl	8005b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <__errno>:
 8006504:	4b01      	ldr	r3, [pc, #4]	; (800650c <__errno+0x8>)
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20001cb8 	.word	0x20001cb8

08006510 <__libc_init_array>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4d0d      	ldr	r5, [pc, #52]	; (8006548 <__libc_init_array+0x38>)
 8006514:	4c0d      	ldr	r4, [pc, #52]	; (800654c <__libc_init_array+0x3c>)
 8006516:	1b64      	subs	r4, r4, r5
 8006518:	10a4      	asrs	r4, r4, #2
 800651a:	2600      	movs	r6, #0
 800651c:	42a6      	cmp	r6, r4
 800651e:	d109      	bne.n	8006534 <__libc_init_array+0x24>
 8006520:	4d0b      	ldr	r5, [pc, #44]	; (8006550 <__libc_init_array+0x40>)
 8006522:	4c0c      	ldr	r4, [pc, #48]	; (8006554 <__libc_init_array+0x44>)
 8006524:	f001 f832 	bl	800758c <_init>
 8006528:	1b64      	subs	r4, r4, r5
 800652a:	10a4      	asrs	r4, r4, #2
 800652c:	2600      	movs	r6, #0
 800652e:	42a6      	cmp	r6, r4
 8006530:	d105      	bne.n	800653e <__libc_init_array+0x2e>
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	f855 3b04 	ldr.w	r3, [r5], #4
 8006538:	4798      	blx	r3
 800653a:	3601      	adds	r6, #1
 800653c:	e7ee      	b.n	800651c <__libc_init_array+0xc>
 800653e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006542:	4798      	blx	r3
 8006544:	3601      	adds	r6, #1
 8006546:	e7f2      	b.n	800652e <__libc_init_array+0x1e>
 8006548:	080081ac 	.word	0x080081ac
 800654c:	080081ac 	.word	0x080081ac
 8006550:	080081ac 	.word	0x080081ac
 8006554:	080081b0 	.word	0x080081b0

08006558 <memcpy>:
 8006558:	440a      	add	r2, r1
 800655a:	4291      	cmp	r1, r2
 800655c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006560:	d100      	bne.n	8006564 <memcpy+0xc>
 8006562:	4770      	bx	lr
 8006564:	b510      	push	{r4, lr}
 8006566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656e:	4291      	cmp	r1, r2
 8006570:	d1f9      	bne.n	8006566 <memcpy+0xe>
 8006572:	bd10      	pop	{r4, pc}

08006574 <memset>:
 8006574:	4402      	add	r2, r0
 8006576:	4603      	mov	r3, r0
 8006578:	4293      	cmp	r3, r2
 800657a:	d100      	bne.n	800657e <memset+0xa>
 800657c:	4770      	bx	lr
 800657e:	f803 1b01 	strb.w	r1, [r3], #1
 8006582:	e7f9      	b.n	8006578 <memset+0x4>

08006584 <iprintf>:
 8006584:	b40f      	push	{r0, r1, r2, r3}
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <iprintf+0x2c>)
 8006588:	b513      	push	{r0, r1, r4, lr}
 800658a:	681c      	ldr	r4, [r3, #0]
 800658c:	b124      	cbz	r4, 8006598 <iprintf+0x14>
 800658e:	69a3      	ldr	r3, [r4, #24]
 8006590:	b913      	cbnz	r3, 8006598 <iprintf+0x14>
 8006592:	4620      	mov	r0, r4
 8006594:	f000 fa5e 	bl	8006a54 <__sinit>
 8006598:	ab05      	add	r3, sp, #20
 800659a:	9a04      	ldr	r2, [sp, #16]
 800659c:	68a1      	ldr	r1, [r4, #8]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fc67 	bl	8006e74 <_vfiprintf_r>
 80065a6:	b002      	add	sp, #8
 80065a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ac:	b004      	add	sp, #16
 80065ae:	4770      	bx	lr
 80065b0:	20001cb8 	.word	0x20001cb8

080065b4 <_puts_r>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	460e      	mov	r6, r1
 80065b8:	4605      	mov	r5, r0
 80065ba:	b118      	cbz	r0, 80065c4 <_puts_r+0x10>
 80065bc:	6983      	ldr	r3, [r0, #24]
 80065be:	b90b      	cbnz	r3, 80065c4 <_puts_r+0x10>
 80065c0:	f000 fa48 	bl	8006a54 <__sinit>
 80065c4:	69ab      	ldr	r3, [r5, #24]
 80065c6:	68ac      	ldr	r4, [r5, #8]
 80065c8:	b913      	cbnz	r3, 80065d0 <_puts_r+0x1c>
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 fa42 	bl	8006a54 <__sinit>
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <_puts_r+0xd0>)
 80065d2:	429c      	cmp	r4, r3
 80065d4:	d120      	bne.n	8006618 <_puts_r+0x64>
 80065d6:	686c      	ldr	r4, [r5, #4]
 80065d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065da:	07db      	lsls	r3, r3, #31
 80065dc:	d405      	bmi.n	80065ea <_puts_r+0x36>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	0598      	lsls	r0, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_puts_r+0x36>
 80065e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e6:	f000 fad3 	bl	8006b90 <__retarget_lock_acquire_recursive>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	0719      	lsls	r1, r3, #28
 80065ee:	d51d      	bpl.n	800662c <_puts_r+0x78>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b1db      	cbz	r3, 800662c <_puts_r+0x78>
 80065f4:	3e01      	subs	r6, #1
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60a3      	str	r3, [r4, #8]
 8006600:	bb39      	cbnz	r1, 8006652 <_puts_r+0x9e>
 8006602:	2b00      	cmp	r3, #0
 8006604:	da38      	bge.n	8006678 <_puts_r+0xc4>
 8006606:	4622      	mov	r2, r4
 8006608:	210a      	movs	r1, #10
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f848 	bl	80066a0 <__swbuf_r>
 8006610:	3001      	adds	r0, #1
 8006612:	d011      	beq.n	8006638 <_puts_r+0x84>
 8006614:	250a      	movs	r5, #10
 8006616:	e011      	b.n	800663c <_puts_r+0x88>
 8006618:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <_puts_r+0xd4>)
 800661a:	429c      	cmp	r4, r3
 800661c:	d101      	bne.n	8006622 <_puts_r+0x6e>
 800661e:	68ac      	ldr	r4, [r5, #8]
 8006620:	e7da      	b.n	80065d8 <_puts_r+0x24>
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <_puts_r+0xd8>)
 8006624:	429c      	cmp	r4, r3
 8006626:	bf08      	it	eq
 8006628:	68ec      	ldreq	r4, [r5, #12]
 800662a:	e7d5      	b.n	80065d8 <_puts_r+0x24>
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f888 	bl	8006744 <__swsetup_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	d0dd      	beq.n	80065f4 <_puts_r+0x40>
 8006638:	f04f 35ff 	mov.w	r5, #4294967295
 800663c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800663e:	07da      	lsls	r2, r3, #31
 8006640:	d405      	bmi.n	800664e <_puts_r+0x9a>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	059b      	lsls	r3, r3, #22
 8006646:	d402      	bmi.n	800664e <_puts_r+0x9a>
 8006648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664a:	f000 faa2 	bl	8006b92 <__retarget_lock_release_recursive>
 800664e:	4628      	mov	r0, r5
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	2b00      	cmp	r3, #0
 8006654:	da04      	bge.n	8006660 <_puts_r+0xac>
 8006656:	69a2      	ldr	r2, [r4, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	dc06      	bgt.n	800666a <_puts_r+0xb6>
 800665c:	290a      	cmp	r1, #10
 800665e:	d004      	beq.n	800666a <_puts_r+0xb6>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	6022      	str	r2, [r4, #0]
 8006666:	7019      	strb	r1, [r3, #0]
 8006668:	e7c5      	b.n	80065f6 <_puts_r+0x42>
 800666a:	4622      	mov	r2, r4
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f817 	bl	80066a0 <__swbuf_r>
 8006672:	3001      	adds	r0, #1
 8006674:	d1bf      	bne.n	80065f6 <_puts_r+0x42>
 8006676:	e7df      	b.n	8006638 <_puts_r+0x84>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	250a      	movs	r5, #10
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	701d      	strb	r5, [r3, #0]
 8006682:	e7db      	b.n	800663c <_puts_r+0x88>
 8006684:	08008130 	.word	0x08008130
 8006688:	08008150 	.word	0x08008150
 800668c:	08008110 	.word	0x08008110

08006690 <puts>:
 8006690:	4b02      	ldr	r3, [pc, #8]	; (800669c <puts+0xc>)
 8006692:	4601      	mov	r1, r0
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	f7ff bf8d 	b.w	80065b4 <_puts_r>
 800669a:	bf00      	nop
 800669c:	20001cb8 	.word	0x20001cb8

080066a0 <__swbuf_r>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	460e      	mov	r6, r1
 80066a4:	4614      	mov	r4, r2
 80066a6:	4605      	mov	r5, r0
 80066a8:	b118      	cbz	r0, 80066b2 <__swbuf_r+0x12>
 80066aa:	6983      	ldr	r3, [r0, #24]
 80066ac:	b90b      	cbnz	r3, 80066b2 <__swbuf_r+0x12>
 80066ae:	f000 f9d1 	bl	8006a54 <__sinit>
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <__swbuf_r+0x98>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	d12b      	bne.n	8006710 <__swbuf_r+0x70>
 80066b8:	686c      	ldr	r4, [r5, #4]
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	071a      	lsls	r2, r3, #28
 80066c2:	d52f      	bpl.n	8006724 <__swbuf_r+0x84>
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	b36b      	cbz	r3, 8006724 <__swbuf_r+0x84>
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	6820      	ldr	r0, [r4, #0]
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	6963      	ldr	r3, [r4, #20]
 80066d0:	b2f6      	uxtb	r6, r6
 80066d2:	4283      	cmp	r3, r0
 80066d4:	4637      	mov	r7, r6
 80066d6:	dc04      	bgt.n	80066e2 <__swbuf_r+0x42>
 80066d8:	4621      	mov	r1, r4
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 f926 	bl	800692c <_fflush_r>
 80066e0:	bb30      	cbnz	r0, 8006730 <__swbuf_r+0x90>
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	60a3      	str	r3, [r4, #8]
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	6022      	str	r2, [r4, #0]
 80066ee:	701e      	strb	r6, [r3, #0]
 80066f0:	6963      	ldr	r3, [r4, #20]
 80066f2:	3001      	adds	r0, #1
 80066f4:	4283      	cmp	r3, r0
 80066f6:	d004      	beq.n	8006702 <__swbuf_r+0x62>
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	07db      	lsls	r3, r3, #31
 80066fc:	d506      	bpl.n	800670c <__swbuf_r+0x6c>
 80066fe:	2e0a      	cmp	r6, #10
 8006700:	d104      	bne.n	800670c <__swbuf_r+0x6c>
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	f000 f911 	bl	800692c <_fflush_r>
 800670a:	b988      	cbnz	r0, 8006730 <__swbuf_r+0x90>
 800670c:	4638      	mov	r0, r7
 800670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <__swbuf_r+0x9c>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <__swbuf_r+0x7a>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7cf      	b.n	80066ba <__swbuf_r+0x1a>
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <__swbuf_r+0xa0>)
 800671c:	429c      	cmp	r4, r3
 800671e:	bf08      	it	eq
 8006720:	68ec      	ldreq	r4, [r5, #12]
 8006722:	e7ca      	b.n	80066ba <__swbuf_r+0x1a>
 8006724:	4621      	mov	r1, r4
 8006726:	4628      	mov	r0, r5
 8006728:	f000 f80c 	bl	8006744 <__swsetup_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	d0cb      	beq.n	80066c8 <__swbuf_r+0x28>
 8006730:	f04f 37ff 	mov.w	r7, #4294967295
 8006734:	e7ea      	b.n	800670c <__swbuf_r+0x6c>
 8006736:	bf00      	nop
 8006738:	08008130 	.word	0x08008130
 800673c:	08008150 	.word	0x08008150
 8006740:	08008110 	.word	0x08008110

08006744 <__swsetup_r>:
 8006744:	4b32      	ldr	r3, [pc, #200]	; (8006810 <__swsetup_r+0xcc>)
 8006746:	b570      	push	{r4, r5, r6, lr}
 8006748:	681d      	ldr	r5, [r3, #0]
 800674a:	4606      	mov	r6, r0
 800674c:	460c      	mov	r4, r1
 800674e:	b125      	cbz	r5, 800675a <__swsetup_r+0x16>
 8006750:	69ab      	ldr	r3, [r5, #24]
 8006752:	b913      	cbnz	r3, 800675a <__swsetup_r+0x16>
 8006754:	4628      	mov	r0, r5
 8006756:	f000 f97d 	bl	8006a54 <__sinit>
 800675a:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <__swsetup_r+0xd0>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d10f      	bne.n	8006780 <__swsetup_r+0x3c>
 8006760:	686c      	ldr	r4, [r5, #4]
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006768:	0719      	lsls	r1, r3, #28
 800676a:	d42c      	bmi.n	80067c6 <__swsetup_r+0x82>
 800676c:	06dd      	lsls	r5, r3, #27
 800676e:	d411      	bmi.n	8006794 <__swsetup_r+0x50>
 8006770:	2309      	movs	r3, #9
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	e03e      	b.n	80067fe <__swsetup_r+0xba>
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <__swsetup_r+0xd4>)
 8006782:	429c      	cmp	r4, r3
 8006784:	d101      	bne.n	800678a <__swsetup_r+0x46>
 8006786:	68ac      	ldr	r4, [r5, #8]
 8006788:	e7eb      	b.n	8006762 <__swsetup_r+0x1e>
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <__swsetup_r+0xd8>)
 800678c:	429c      	cmp	r4, r3
 800678e:	bf08      	it	eq
 8006790:	68ec      	ldreq	r4, [r5, #12]
 8006792:	e7e6      	b.n	8006762 <__swsetup_r+0x1e>
 8006794:	0758      	lsls	r0, r3, #29
 8006796:	d512      	bpl.n	80067be <__swsetup_r+0x7a>
 8006798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800679a:	b141      	cbz	r1, 80067ae <__swsetup_r+0x6a>
 800679c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <__swsetup_r+0x66>
 80067a4:	4630      	mov	r0, r6
 80067a6:	f000 fa5b 	bl	8006c60 <_free_r>
 80067aa:	2300      	movs	r3, #0
 80067ac:	6363      	str	r3, [r4, #52]	; 0x34
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6063      	str	r3, [r4, #4]
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f043 0308 	orr.w	r3, r3, #8
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	b94b      	cbnz	r3, 80067de <__swsetup_r+0x9a>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	d003      	beq.n	80067de <__swsetup_r+0x9a>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4630      	mov	r0, r6
 80067da:	f000 fa01 	bl	8006be0 <__smakebuf_r>
 80067de:	89a0      	ldrh	r0, [r4, #12]
 80067e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e4:	f010 0301 	ands.w	r3, r0, #1
 80067e8:	d00a      	beq.n	8006800 <__swsetup_r+0xbc>
 80067ea:	2300      	movs	r3, #0
 80067ec:	60a3      	str	r3, [r4, #8]
 80067ee:	6963      	ldr	r3, [r4, #20]
 80067f0:	425b      	negs	r3, r3
 80067f2:	61a3      	str	r3, [r4, #24]
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	b943      	cbnz	r3, 800680a <__swsetup_r+0xc6>
 80067f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067fc:	d1ba      	bne.n	8006774 <__swsetup_r+0x30>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	0781      	lsls	r1, r0, #30
 8006802:	bf58      	it	pl
 8006804:	6963      	ldrpl	r3, [r4, #20]
 8006806:	60a3      	str	r3, [r4, #8]
 8006808:	e7f4      	b.n	80067f4 <__swsetup_r+0xb0>
 800680a:	2000      	movs	r0, #0
 800680c:	e7f7      	b.n	80067fe <__swsetup_r+0xba>
 800680e:	bf00      	nop
 8006810:	20001cb8 	.word	0x20001cb8
 8006814:	08008130 	.word	0x08008130
 8006818:	08008150 	.word	0x08008150
 800681c:	08008110 	.word	0x08008110

08006820 <__sflush_r>:
 8006820:	898a      	ldrh	r2, [r1, #12]
 8006822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	4605      	mov	r5, r0
 8006828:	0710      	lsls	r0, r2, #28
 800682a:	460c      	mov	r4, r1
 800682c:	d458      	bmi.n	80068e0 <__sflush_r+0xc0>
 800682e:	684b      	ldr	r3, [r1, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc05      	bgt.n	8006840 <__sflush_r+0x20>
 8006834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	dc02      	bgt.n	8006840 <__sflush_r+0x20>
 800683a:	2000      	movs	r0, #0
 800683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006842:	2e00      	cmp	r6, #0
 8006844:	d0f9      	beq.n	800683a <__sflush_r+0x1a>
 8006846:	2300      	movs	r3, #0
 8006848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800684c:	682f      	ldr	r7, [r5, #0]
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	d032      	beq.n	80068b8 <__sflush_r+0x98>
 8006852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	075a      	lsls	r2, r3, #29
 8006858:	d505      	bpl.n	8006866 <__sflush_r+0x46>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	1ac0      	subs	r0, r0, r3
 800685e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006860:	b10b      	cbz	r3, 8006866 <__sflush_r+0x46>
 8006862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006864:	1ac0      	subs	r0, r0, r3
 8006866:	2300      	movs	r3, #0
 8006868:	4602      	mov	r2, r0
 800686a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800686c:	6a21      	ldr	r1, [r4, #32]
 800686e:	4628      	mov	r0, r5
 8006870:	47b0      	blx	r6
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	d106      	bne.n	8006886 <__sflush_r+0x66>
 8006878:	6829      	ldr	r1, [r5, #0]
 800687a:	291d      	cmp	r1, #29
 800687c:	d82c      	bhi.n	80068d8 <__sflush_r+0xb8>
 800687e:	4a2a      	ldr	r2, [pc, #168]	; (8006928 <__sflush_r+0x108>)
 8006880:	40ca      	lsrs	r2, r1
 8006882:	07d6      	lsls	r6, r2, #31
 8006884:	d528      	bpl.n	80068d8 <__sflush_r+0xb8>
 8006886:	2200      	movs	r2, #0
 8006888:	6062      	str	r2, [r4, #4]
 800688a:	04d9      	lsls	r1, r3, #19
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	6022      	str	r2, [r4, #0]
 8006890:	d504      	bpl.n	800689c <__sflush_r+0x7c>
 8006892:	1c42      	adds	r2, r0, #1
 8006894:	d101      	bne.n	800689a <__sflush_r+0x7a>
 8006896:	682b      	ldr	r3, [r5, #0]
 8006898:	b903      	cbnz	r3, 800689c <__sflush_r+0x7c>
 800689a:	6560      	str	r0, [r4, #84]	; 0x54
 800689c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689e:	602f      	str	r7, [r5, #0]
 80068a0:	2900      	cmp	r1, #0
 80068a2:	d0ca      	beq.n	800683a <__sflush_r+0x1a>
 80068a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <__sflush_r+0x92>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f9d7 	bl	8006c60 <_free_r>
 80068b2:	2000      	movs	r0, #0
 80068b4:	6360      	str	r0, [r4, #52]	; 0x34
 80068b6:	e7c1      	b.n	800683c <__sflush_r+0x1c>
 80068b8:	6a21      	ldr	r1, [r4, #32]
 80068ba:	2301      	movs	r3, #1
 80068bc:	4628      	mov	r0, r5
 80068be:	47b0      	blx	r6
 80068c0:	1c41      	adds	r1, r0, #1
 80068c2:	d1c7      	bne.n	8006854 <__sflush_r+0x34>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0c4      	beq.n	8006854 <__sflush_r+0x34>
 80068ca:	2b1d      	cmp	r3, #29
 80068cc:	d001      	beq.n	80068d2 <__sflush_r+0xb2>
 80068ce:	2b16      	cmp	r3, #22
 80068d0:	d101      	bne.n	80068d6 <__sflush_r+0xb6>
 80068d2:	602f      	str	r7, [r5, #0]
 80068d4:	e7b1      	b.n	800683a <__sflush_r+0x1a>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	e7ad      	b.n	800683c <__sflush_r+0x1c>
 80068e0:	690f      	ldr	r7, [r1, #16]
 80068e2:	2f00      	cmp	r7, #0
 80068e4:	d0a9      	beq.n	800683a <__sflush_r+0x1a>
 80068e6:	0793      	lsls	r3, r2, #30
 80068e8:	680e      	ldr	r6, [r1, #0]
 80068ea:	bf08      	it	eq
 80068ec:	694b      	ldreq	r3, [r1, #20]
 80068ee:	600f      	str	r7, [r1, #0]
 80068f0:	bf18      	it	ne
 80068f2:	2300      	movne	r3, #0
 80068f4:	eba6 0807 	sub.w	r8, r6, r7
 80068f8:	608b      	str	r3, [r1, #8]
 80068fa:	f1b8 0f00 	cmp.w	r8, #0
 80068fe:	dd9c      	ble.n	800683a <__sflush_r+0x1a>
 8006900:	6a21      	ldr	r1, [r4, #32]
 8006902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006904:	4643      	mov	r3, r8
 8006906:	463a      	mov	r2, r7
 8006908:	4628      	mov	r0, r5
 800690a:	47b0      	blx	r6
 800690c:	2800      	cmp	r0, #0
 800690e:	dc06      	bgt.n	800691e <__sflush_r+0xfe>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e78e      	b.n	800683c <__sflush_r+0x1c>
 800691e:	4407      	add	r7, r0
 8006920:	eba8 0800 	sub.w	r8, r8, r0
 8006924:	e7e9      	b.n	80068fa <__sflush_r+0xda>
 8006926:	bf00      	nop
 8006928:	20400001 	.word	0x20400001

0800692c <_fflush_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	690b      	ldr	r3, [r1, #16]
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
 8006934:	b913      	cbnz	r3, 800693c <_fflush_r+0x10>
 8006936:	2500      	movs	r5, #0
 8006938:	4628      	mov	r0, r5
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	b118      	cbz	r0, 8006946 <_fflush_r+0x1a>
 800693e:	6983      	ldr	r3, [r0, #24]
 8006940:	b90b      	cbnz	r3, 8006946 <_fflush_r+0x1a>
 8006942:	f000 f887 	bl	8006a54 <__sinit>
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <_fflush_r+0x6c>)
 8006948:	429c      	cmp	r4, r3
 800694a:	d11b      	bne.n	8006984 <_fflush_r+0x58>
 800694c:	686c      	ldr	r4, [r5, #4]
 800694e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0ef      	beq.n	8006936 <_fflush_r+0xa>
 8006956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006958:	07d0      	lsls	r0, r2, #31
 800695a:	d404      	bmi.n	8006966 <_fflush_r+0x3a>
 800695c:	0599      	lsls	r1, r3, #22
 800695e:	d402      	bmi.n	8006966 <_fflush_r+0x3a>
 8006960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006962:	f000 f915 	bl	8006b90 <__retarget_lock_acquire_recursive>
 8006966:	4628      	mov	r0, r5
 8006968:	4621      	mov	r1, r4
 800696a:	f7ff ff59 	bl	8006820 <__sflush_r>
 800696e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006970:	07da      	lsls	r2, r3, #31
 8006972:	4605      	mov	r5, r0
 8006974:	d4e0      	bmi.n	8006938 <_fflush_r+0xc>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	059b      	lsls	r3, r3, #22
 800697a:	d4dd      	bmi.n	8006938 <_fflush_r+0xc>
 800697c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697e:	f000 f908 	bl	8006b92 <__retarget_lock_release_recursive>
 8006982:	e7d9      	b.n	8006938 <_fflush_r+0xc>
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <_fflush_r+0x70>)
 8006986:	429c      	cmp	r4, r3
 8006988:	d101      	bne.n	800698e <_fflush_r+0x62>
 800698a:	68ac      	ldr	r4, [r5, #8]
 800698c:	e7df      	b.n	800694e <_fflush_r+0x22>
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <_fflush_r+0x74>)
 8006990:	429c      	cmp	r4, r3
 8006992:	bf08      	it	eq
 8006994:	68ec      	ldreq	r4, [r5, #12]
 8006996:	e7da      	b.n	800694e <_fflush_r+0x22>
 8006998:	08008130 	.word	0x08008130
 800699c:	08008150 	.word	0x08008150
 80069a0:	08008110 	.word	0x08008110

080069a4 <std>:
 80069a4:	2300      	movs	r3, #0
 80069a6:	b510      	push	{r4, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	e9c0 3300 	strd	r3, r3, [r0]
 80069ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069b2:	6083      	str	r3, [r0, #8]
 80069b4:	8181      	strh	r1, [r0, #12]
 80069b6:	6643      	str	r3, [r0, #100]	; 0x64
 80069b8:	81c2      	strh	r2, [r0, #14]
 80069ba:	6183      	str	r3, [r0, #24]
 80069bc:	4619      	mov	r1, r3
 80069be:	2208      	movs	r2, #8
 80069c0:	305c      	adds	r0, #92	; 0x5c
 80069c2:	f7ff fdd7 	bl	8006574 <memset>
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <std+0x38>)
 80069c8:	6263      	str	r3, [r4, #36]	; 0x24
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <std+0x3c>)
 80069cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <std+0x40>)
 80069d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <std+0x44>)
 80069d4:	6224      	str	r4, [r4, #32]
 80069d6:	6323      	str	r3, [r4, #48]	; 0x30
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	0800741d 	.word	0x0800741d
 80069e0:	0800743f 	.word	0x0800743f
 80069e4:	08007477 	.word	0x08007477
 80069e8:	0800749b 	.word	0x0800749b

080069ec <_cleanup_r>:
 80069ec:	4901      	ldr	r1, [pc, #4]	; (80069f4 <_cleanup_r+0x8>)
 80069ee:	f000 b8af 	b.w	8006b50 <_fwalk_reent>
 80069f2:	bf00      	nop
 80069f4:	0800692d 	.word	0x0800692d

080069f8 <__sfmoreglue>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	2268      	movs	r2, #104	; 0x68
 80069fc:	1e4d      	subs	r5, r1, #1
 80069fe:	4355      	muls	r5, r2
 8006a00:	460e      	mov	r6, r1
 8006a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a06:	f000 f997 	bl	8006d38 <_malloc_r>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	b140      	cbz	r0, 8006a20 <__sfmoreglue+0x28>
 8006a0e:	2100      	movs	r1, #0
 8006a10:	e9c0 1600 	strd	r1, r6, [r0]
 8006a14:	300c      	adds	r0, #12
 8006a16:	60a0      	str	r0, [r4, #8]
 8006a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a1c:	f7ff fdaa 	bl	8006574 <memset>
 8006a20:	4620      	mov	r0, r4
 8006a22:	bd70      	pop	{r4, r5, r6, pc}

08006a24 <__sfp_lock_acquire>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sfp_lock_acquire+0x8>)
 8006a26:	f000 b8b3 	b.w	8006b90 <__retarget_lock_acquire_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	200020a5 	.word	0x200020a5

08006a30 <__sfp_lock_release>:
 8006a30:	4801      	ldr	r0, [pc, #4]	; (8006a38 <__sfp_lock_release+0x8>)
 8006a32:	f000 b8ae 	b.w	8006b92 <__retarget_lock_release_recursive>
 8006a36:	bf00      	nop
 8006a38:	200020a5 	.word	0x200020a5

08006a3c <__sinit_lock_acquire>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__sinit_lock_acquire+0x8>)
 8006a3e:	f000 b8a7 	b.w	8006b90 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	200020a6 	.word	0x200020a6

08006a48 <__sinit_lock_release>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__sinit_lock_release+0x8>)
 8006a4a:	f000 b8a2 	b.w	8006b92 <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	200020a6 	.word	0x200020a6

08006a54 <__sinit>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4604      	mov	r4, r0
 8006a58:	f7ff fff0 	bl	8006a3c <__sinit_lock_acquire>
 8006a5c:	69a3      	ldr	r3, [r4, #24]
 8006a5e:	b11b      	cbz	r3, 8006a68 <__sinit+0x14>
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f7ff bff0 	b.w	8006a48 <__sinit_lock_release>
 8006a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <__sinit+0x68>)
 8006a70:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <__sinit+0x6c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	bf04      	itt	eq
 8006a7a:	2301      	moveq	r3, #1
 8006a7c:	61a3      	streq	r3, [r4, #24]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f820 	bl	8006ac4 <__sfp>
 8006a84:	6060      	str	r0, [r4, #4]
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 f81c 	bl	8006ac4 <__sfp>
 8006a8c:	60a0      	str	r0, [r4, #8]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 f818 	bl	8006ac4 <__sfp>
 8006a94:	2200      	movs	r2, #0
 8006a96:	60e0      	str	r0, [r4, #12]
 8006a98:	2104      	movs	r1, #4
 8006a9a:	6860      	ldr	r0, [r4, #4]
 8006a9c:	f7ff ff82 	bl	80069a4 <std>
 8006aa0:	68a0      	ldr	r0, [r4, #8]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	2109      	movs	r1, #9
 8006aa6:	f7ff ff7d 	bl	80069a4 <std>
 8006aaa:	68e0      	ldr	r0, [r4, #12]
 8006aac:	2202      	movs	r2, #2
 8006aae:	2112      	movs	r1, #18
 8006ab0:	f7ff ff78 	bl	80069a4 <std>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	61a3      	str	r3, [r4, #24]
 8006ab8:	e7d2      	b.n	8006a60 <__sinit+0xc>
 8006aba:	bf00      	nop
 8006abc:	0800810c 	.word	0x0800810c
 8006ac0:	080069ed 	.word	0x080069ed

08006ac4 <__sfp>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	f7ff ffac 	bl	8006a24 <__sfp_lock_acquire>
 8006acc:	4b1e      	ldr	r3, [pc, #120]	; (8006b48 <__sfp+0x84>)
 8006ace:	681e      	ldr	r6, [r3, #0]
 8006ad0:	69b3      	ldr	r3, [r6, #24]
 8006ad2:	b913      	cbnz	r3, 8006ada <__sfp+0x16>
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff ffbd 	bl	8006a54 <__sinit>
 8006ada:	3648      	adds	r6, #72	; 0x48
 8006adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	d503      	bpl.n	8006aec <__sfp+0x28>
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	b30b      	cbz	r3, 8006b2c <__sfp+0x68>
 8006ae8:	6836      	ldr	r6, [r6, #0]
 8006aea:	e7f7      	b.n	8006adc <__sfp+0x18>
 8006aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006af0:	b9d5      	cbnz	r5, 8006b28 <__sfp+0x64>
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <__sfp+0x88>)
 8006af4:	60e3      	str	r3, [r4, #12]
 8006af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006afa:	6665      	str	r5, [r4, #100]	; 0x64
 8006afc:	f000 f847 	bl	8006b8e <__retarget_lock_init_recursive>
 8006b00:	f7ff ff96 	bl	8006a30 <__sfp_lock_release>
 8006b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b0c:	6025      	str	r5, [r4, #0]
 8006b0e:	61a5      	str	r5, [r4, #24]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4629      	mov	r1, r5
 8006b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b18:	f7ff fd2c 	bl	8006574 <memset>
 8006b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b24:	4620      	mov	r0, r4
 8006b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b28:	3468      	adds	r4, #104	; 0x68
 8006b2a:	e7d9      	b.n	8006ae0 <__sfp+0x1c>
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f7ff ff62 	bl	80069f8 <__sfmoreglue>
 8006b34:	4604      	mov	r4, r0
 8006b36:	6030      	str	r0, [r6, #0]
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1d5      	bne.n	8006ae8 <__sfp+0x24>
 8006b3c:	f7ff ff78 	bl	8006a30 <__sfp_lock_release>
 8006b40:	230c      	movs	r3, #12
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	e7ee      	b.n	8006b24 <__sfp+0x60>
 8006b46:	bf00      	nop
 8006b48:	0800810c 	.word	0x0800810c
 8006b4c:	ffff0001 	.word	0xffff0001

08006b50 <_fwalk_reent>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	4606      	mov	r6, r0
 8006b56:	4688      	mov	r8, r1
 8006b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b5c:	2700      	movs	r7, #0
 8006b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b62:	f1b9 0901 	subs.w	r9, r9, #1
 8006b66:	d505      	bpl.n	8006b74 <_fwalk_reent+0x24>
 8006b68:	6824      	ldr	r4, [r4, #0]
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	d1f7      	bne.n	8006b5e <_fwalk_reent+0xe>
 8006b6e:	4638      	mov	r0, r7
 8006b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b74:	89ab      	ldrh	r3, [r5, #12]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d907      	bls.n	8006b8a <_fwalk_reent+0x3a>
 8006b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	d003      	beq.n	8006b8a <_fwalk_reent+0x3a>
 8006b82:	4629      	mov	r1, r5
 8006b84:	4630      	mov	r0, r6
 8006b86:	47c0      	blx	r8
 8006b88:	4307      	orrs	r7, r0
 8006b8a:	3568      	adds	r5, #104	; 0x68
 8006b8c:	e7e9      	b.n	8006b62 <_fwalk_reent+0x12>

08006b8e <__retarget_lock_init_recursive>:
 8006b8e:	4770      	bx	lr

08006b90 <__retarget_lock_acquire_recursive>:
 8006b90:	4770      	bx	lr

08006b92 <__retarget_lock_release_recursive>:
 8006b92:	4770      	bx	lr

08006b94 <__swhatbuf_r>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	460e      	mov	r6, r1
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	b096      	sub	sp, #88	; 0x58
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	da08      	bge.n	8006bb8 <__swhatbuf_r+0x24>
 8006ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	061a      	lsls	r2, r3, #24
 8006bb0:	d410      	bmi.n	8006bd4 <__swhatbuf_r+0x40>
 8006bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb6:	e00e      	b.n	8006bd6 <__swhatbuf_r+0x42>
 8006bb8:	466a      	mov	r2, sp
 8006bba:	f000 fc95 	bl	80074e8 <_fstat_r>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	dbf1      	blt.n	8006ba6 <__swhatbuf_r+0x12>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bcc:	425a      	negs	r2, r3
 8006bce:	415a      	adcs	r2, r3
 8006bd0:	602a      	str	r2, [r5, #0]
 8006bd2:	e7ee      	b.n	8006bb2 <__swhatbuf_r+0x1e>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	b016      	add	sp, #88	; 0x58
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006be0 <__smakebuf_r>:
 8006be0:	898b      	ldrh	r3, [r1, #12]
 8006be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be4:	079d      	lsls	r5, r3, #30
 8006be6:	4606      	mov	r6, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	d507      	bpl.n	8006bfc <__smakebuf_r+0x1c>
 8006bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	6163      	str	r3, [r4, #20]
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	ab01      	add	r3, sp, #4
 8006bfe:	466a      	mov	r2, sp
 8006c00:	f7ff ffc8 	bl	8006b94 <__swhatbuf_r>
 8006c04:	9900      	ldr	r1, [sp, #0]
 8006c06:	4605      	mov	r5, r0
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 f895 	bl	8006d38 <_malloc_r>
 8006c0e:	b948      	cbnz	r0, 8006c24 <__smakebuf_r+0x44>
 8006c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c14:	059a      	lsls	r2, r3, #22
 8006c16:	d4ef      	bmi.n	8006bf8 <__smakebuf_r+0x18>
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	e7e3      	b.n	8006bec <__smakebuf_r+0xc>
 8006c24:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <__smakebuf_r+0x7c>)
 8006c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	6020      	str	r0, [r4, #0]
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	9b00      	ldr	r3, [sp, #0]
 8006c34:	6163      	str	r3, [r4, #20]
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	6120      	str	r0, [r4, #16]
 8006c3a:	b15b      	cbz	r3, 8006c54 <__smakebuf_r+0x74>
 8006c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c40:	4630      	mov	r0, r6
 8006c42:	f000 fc63 	bl	800750c <_isatty_r>
 8006c46:	b128      	cbz	r0, 8006c54 <__smakebuf_r+0x74>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	89a0      	ldrh	r0, [r4, #12]
 8006c56:	4305      	orrs	r5, r0
 8006c58:	81a5      	strh	r5, [r4, #12]
 8006c5a:	e7cd      	b.n	8006bf8 <__smakebuf_r+0x18>
 8006c5c:	080069ed 	.word	0x080069ed

08006c60 <_free_r>:
 8006c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d044      	beq.n	8006cf0 <_free_r+0x90>
 8006c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6a:	9001      	str	r0, [sp, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c72:	bfb8      	it	lt
 8006c74:	18e4      	addlt	r4, r4, r3
 8006c76:	f000 fc6b 	bl	8007550 <__malloc_lock>
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <_free_r+0x94>)
 8006c7c:	9801      	ldr	r0, [sp, #4]
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	b933      	cbnz	r3, 8006c90 <_free_r+0x30>
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	6014      	str	r4, [r2, #0]
 8006c86:	b003      	add	sp, #12
 8006c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c8c:	f000 bc66 	b.w	800755c <__malloc_unlock>
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d908      	bls.n	8006ca6 <_free_r+0x46>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	1961      	adds	r1, r4, r5
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf01      	itttt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	1949      	addeq	r1, r1, r5
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	e7ed      	b.n	8006c82 <_free_r+0x22>
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b10b      	cbz	r3, 8006cb0 <_free_r+0x50>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d9fa      	bls.n	8006ca6 <_free_r+0x46>
 8006cb0:	6811      	ldr	r1, [r2, #0]
 8006cb2:	1855      	adds	r5, r2, r1
 8006cb4:	42a5      	cmp	r5, r4
 8006cb6:	d10b      	bne.n	8006cd0 <_free_r+0x70>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	4421      	add	r1, r4
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	d1e0      	bne.n	8006c86 <_free_r+0x26>
 8006cc4:	681c      	ldr	r4, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	4421      	add	r1, r4
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	e7da      	b.n	8006c86 <_free_r+0x26>
 8006cd0:	d902      	bls.n	8006cd8 <_free_r+0x78>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	e7d6      	b.n	8006c86 <_free_r+0x26>
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	bf04      	itt	eq
 8006ce0:	6819      	ldreq	r1, [r3, #0]
 8006ce2:	685b      	ldreq	r3, [r3, #4]
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	bf04      	itt	eq
 8006ce8:	1949      	addeq	r1, r1, r5
 8006cea:	6021      	streq	r1, [r4, #0]
 8006cec:	6054      	str	r4, [r2, #4]
 8006cee:	e7ca      	b.n	8006c86 <_free_r+0x26>
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bd30      	pop	{r4, r5, pc}
 8006cf4:	200020a8 	.word	0x200020a8

08006cf8 <sbrk_aligned>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4e0e      	ldr	r6, [pc, #56]	; (8006d34 <sbrk_aligned+0x3c>)
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	6831      	ldr	r1, [r6, #0]
 8006d00:	4605      	mov	r5, r0
 8006d02:	b911      	cbnz	r1, 8006d0a <sbrk_aligned+0x12>
 8006d04:	f000 fb7a 	bl	80073fc <_sbrk_r>
 8006d08:	6030      	str	r0, [r6, #0]
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 fb75 	bl	80073fc <_sbrk_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d00a      	beq.n	8006d2c <sbrk_aligned+0x34>
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d007      	beq.n	8006d30 <sbrk_aligned+0x38>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fb6a 	bl	80073fc <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d101      	bne.n	8006d30 <sbrk_aligned+0x38>
 8006d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d30:	4620      	mov	r0, r4
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	200020ac 	.word	0x200020ac

08006d38 <_malloc_r>:
 8006d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	1ccd      	adds	r5, r1, #3
 8006d3e:	f025 0503 	bic.w	r5, r5, #3
 8006d42:	3508      	adds	r5, #8
 8006d44:	2d0c      	cmp	r5, #12
 8006d46:	bf38      	it	cc
 8006d48:	250c      	movcc	r5, #12
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	db01      	blt.n	8006d54 <_malloc_r+0x1c>
 8006d50:	42a9      	cmp	r1, r5
 8006d52:	d905      	bls.n	8006d60 <_malloc_r+0x28>
 8006d54:	230c      	movs	r3, #12
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	2600      	movs	r6, #0
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	4e2e      	ldr	r6, [pc, #184]	; (8006e1c <_malloc_r+0xe4>)
 8006d62:	f000 fbf5 	bl	8007550 <__malloc_lock>
 8006d66:	6833      	ldr	r3, [r6, #0]
 8006d68:	461c      	mov	r4, r3
 8006d6a:	bb34      	cbnz	r4, 8006dba <_malloc_r+0x82>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7ff ffc2 	bl	8006cf8 <sbrk_aligned>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	4604      	mov	r4, r0
 8006d78:	d14d      	bne.n	8006e16 <_malloc_r+0xde>
 8006d7a:	6834      	ldr	r4, [r6, #0]
 8006d7c:	4626      	mov	r6, r4
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	d140      	bne.n	8006e04 <_malloc_r+0xcc>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4631      	mov	r1, r6
 8006d86:	4638      	mov	r0, r7
 8006d88:	eb04 0803 	add.w	r8, r4, r3
 8006d8c:	f000 fb36 	bl	80073fc <_sbrk_r>
 8006d90:	4580      	cmp	r8, r0
 8006d92:	d13a      	bne.n	8006e0a <_malloc_r+0xd2>
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	3503      	adds	r5, #3
 8006d98:	1a6d      	subs	r5, r5, r1
 8006d9a:	f025 0503 	bic.w	r5, r5, #3
 8006d9e:	3508      	adds	r5, #8
 8006da0:	2d0c      	cmp	r5, #12
 8006da2:	bf38      	it	cc
 8006da4:	250c      	movcc	r5, #12
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ffa5 	bl	8006cf8 <sbrk_aligned>
 8006dae:	3001      	adds	r0, #1
 8006db0:	d02b      	beq.n	8006e0a <_malloc_r+0xd2>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	442b      	add	r3, r5
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	e00e      	b.n	8006dd8 <_malloc_r+0xa0>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	1b52      	subs	r2, r2, r5
 8006dbe:	d41e      	bmi.n	8006dfe <_malloc_r+0xc6>
 8006dc0:	2a0b      	cmp	r2, #11
 8006dc2:	d916      	bls.n	8006df2 <_malloc_r+0xba>
 8006dc4:	1961      	adds	r1, r4, r5
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	6025      	str	r5, [r4, #0]
 8006dca:	bf18      	it	ne
 8006dcc:	6059      	strne	r1, [r3, #4]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	bf08      	it	eq
 8006dd2:	6031      	streq	r1, [r6, #0]
 8006dd4:	5162      	str	r2, [r4, r5]
 8006dd6:	604b      	str	r3, [r1, #4]
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f104 060b 	add.w	r6, r4, #11
 8006dde:	f000 fbbd 	bl	800755c <__malloc_unlock>
 8006de2:	f026 0607 	bic.w	r6, r6, #7
 8006de6:	1d23      	adds	r3, r4, #4
 8006de8:	1af2      	subs	r2, r6, r3
 8006dea:	d0b6      	beq.n	8006d5a <_malloc_r+0x22>
 8006dec:	1b9b      	subs	r3, r3, r6
 8006dee:	50a3      	str	r3, [r4, r2]
 8006df0:	e7b3      	b.n	8006d5a <_malloc_r+0x22>
 8006df2:	6862      	ldr	r2, [r4, #4]
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	bf0c      	ite	eq
 8006df8:	6032      	streq	r2, [r6, #0]
 8006dfa:	605a      	strne	r2, [r3, #4]
 8006dfc:	e7ec      	b.n	8006dd8 <_malloc_r+0xa0>
 8006dfe:	4623      	mov	r3, r4
 8006e00:	6864      	ldr	r4, [r4, #4]
 8006e02:	e7b2      	b.n	8006d6a <_malloc_r+0x32>
 8006e04:	4634      	mov	r4, r6
 8006e06:	6876      	ldr	r6, [r6, #4]
 8006e08:	e7b9      	b.n	8006d7e <_malloc_r+0x46>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f000 fba4 	bl	800755c <__malloc_unlock>
 8006e14:	e7a1      	b.n	8006d5a <_malloc_r+0x22>
 8006e16:	6025      	str	r5, [r4, #0]
 8006e18:	e7de      	b.n	8006dd8 <_malloc_r+0xa0>
 8006e1a:	bf00      	nop
 8006e1c:	200020a8 	.word	0x200020a8

08006e20 <__sfputc_r>:
 8006e20:	6893      	ldr	r3, [r2, #8]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	b410      	push	{r4}
 8006e28:	6093      	str	r3, [r2, #8]
 8006e2a:	da08      	bge.n	8006e3e <__sfputc_r+0x1e>
 8006e2c:	6994      	ldr	r4, [r2, #24]
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	db01      	blt.n	8006e36 <__sfputc_r+0x16>
 8006e32:	290a      	cmp	r1, #10
 8006e34:	d103      	bne.n	8006e3e <__sfputc_r+0x1e>
 8006e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e3a:	f7ff bc31 	b.w	80066a0 <__swbuf_r>
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	1c58      	adds	r0, r3, #1
 8006e42:	6010      	str	r0, [r2, #0]
 8006e44:	7019      	strb	r1, [r3, #0]
 8006e46:	4608      	mov	r0, r1
 8006e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <__sfputs_r>:
 8006e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e50:	4606      	mov	r6, r0
 8006e52:	460f      	mov	r7, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	18d5      	adds	r5, r2, r3
 8006e58:	42ac      	cmp	r4, r5
 8006e5a:	d101      	bne.n	8006e60 <__sfputs_r+0x12>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e007      	b.n	8006e70 <__sfputs_r+0x22>
 8006e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e64:	463a      	mov	r2, r7
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ffda 	bl	8006e20 <__sfputc_r>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d1f3      	bne.n	8006e58 <__sfputs_r+0xa>
 8006e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e74 <_vfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	460d      	mov	r5, r1
 8006e7a:	b09d      	sub	sp, #116	; 0x74
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	4698      	mov	r8, r3
 8006e80:	4606      	mov	r6, r0
 8006e82:	b118      	cbz	r0, 8006e8c <_vfiprintf_r+0x18>
 8006e84:	6983      	ldr	r3, [r0, #24]
 8006e86:	b90b      	cbnz	r3, 8006e8c <_vfiprintf_r+0x18>
 8006e88:	f7ff fde4 	bl	8006a54 <__sinit>
 8006e8c:	4b89      	ldr	r3, [pc, #548]	; (80070b4 <_vfiprintf_r+0x240>)
 8006e8e:	429d      	cmp	r5, r3
 8006e90:	d11b      	bne.n	8006eca <_vfiprintf_r+0x56>
 8006e92:	6875      	ldr	r5, [r6, #4]
 8006e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d405      	bmi.n	8006ea6 <_vfiprintf_r+0x32>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	059a      	lsls	r2, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_vfiprintf_r+0x32>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea2:	f7ff fe75 	bl	8006b90 <__retarget_lock_acquire_recursive>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	071b      	lsls	r3, r3, #28
 8006eaa:	d501      	bpl.n	8006eb0 <_vfiprintf_r+0x3c>
 8006eac:	692b      	ldr	r3, [r5, #16]
 8006eae:	b9eb      	cbnz	r3, 8006eec <_vfiprintf_r+0x78>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff fc46 	bl	8006744 <__swsetup_r>
 8006eb8:	b1c0      	cbz	r0, 8006eec <_vfiprintf_r+0x78>
 8006eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebc:	07dc      	lsls	r4, r3, #31
 8006ebe:	d50e      	bpl.n	8006ede <_vfiprintf_r+0x6a>
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	b01d      	add	sp, #116	; 0x74
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	4b7b      	ldr	r3, [pc, #492]	; (80070b8 <_vfiprintf_r+0x244>)
 8006ecc:	429d      	cmp	r5, r3
 8006ece:	d101      	bne.n	8006ed4 <_vfiprintf_r+0x60>
 8006ed0:	68b5      	ldr	r5, [r6, #8]
 8006ed2:	e7df      	b.n	8006e94 <_vfiprintf_r+0x20>
 8006ed4:	4b79      	ldr	r3, [pc, #484]	; (80070bc <_vfiprintf_r+0x248>)
 8006ed6:	429d      	cmp	r5, r3
 8006ed8:	bf08      	it	eq
 8006eda:	68f5      	ldreq	r5, [r6, #12]
 8006edc:	e7da      	b.n	8006e94 <_vfiprintf_r+0x20>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	0598      	lsls	r0, r3, #22
 8006ee2:	d4ed      	bmi.n	8006ec0 <_vfiprintf_r+0x4c>
 8006ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ee6:	f7ff fe54 	bl	8006b92 <__retarget_lock_release_recursive>
 8006eea:	e7e9      	b.n	8006ec0 <_vfiprintf_r+0x4c>
 8006eec:	2300      	movs	r3, #0
 8006eee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef0:	2320      	movs	r3, #32
 8006ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006efa:	2330      	movs	r3, #48	; 0x30
 8006efc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070c0 <_vfiprintf_r+0x24c>
 8006f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f04:	f04f 0901 	mov.w	r9, #1
 8006f08:	4623      	mov	r3, r4
 8006f0a:	469a      	mov	sl, r3
 8006f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f10:	b10a      	cbz	r2, 8006f16 <_vfiprintf_r+0xa2>
 8006f12:	2a25      	cmp	r2, #37	; 0x25
 8006f14:	d1f9      	bne.n	8006f0a <_vfiprintf_r+0x96>
 8006f16:	ebba 0b04 	subs.w	fp, sl, r4
 8006f1a:	d00b      	beq.n	8006f34 <_vfiprintf_r+0xc0>
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff ff93 	bl	8006e4e <__sfputs_r>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f000 80aa 	beq.w	8007082 <_vfiprintf_r+0x20e>
 8006f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f30:	445a      	add	r2, fp
 8006f32:	9209      	str	r2, [sp, #36]	; 0x24
 8006f34:	f89a 3000 	ldrb.w	r3, [sl]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80a2 	beq.w	8007082 <_vfiprintf_r+0x20e>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295
 8006f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f48:	f10a 0a01 	add.w	sl, sl, #1
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	9307      	str	r3, [sp, #28]
 8006f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f54:	931a      	str	r3, [sp, #104]	; 0x68
 8006f56:	4654      	mov	r4, sl
 8006f58:	2205      	movs	r2, #5
 8006f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5e:	4858      	ldr	r0, [pc, #352]	; (80070c0 <_vfiprintf_r+0x24c>)
 8006f60:	f7f9 f96e 	bl	8000240 <memchr>
 8006f64:	9a04      	ldr	r2, [sp, #16]
 8006f66:	b9d8      	cbnz	r0, 8006fa0 <_vfiprintf_r+0x12c>
 8006f68:	06d1      	lsls	r1, r2, #27
 8006f6a:	bf44      	itt	mi
 8006f6c:	2320      	movmi	r3, #32
 8006f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f72:	0713      	lsls	r3, r2, #28
 8006f74:	bf44      	itt	mi
 8006f76:	232b      	movmi	r3, #43	; 0x2b
 8006f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f80:	2b2a      	cmp	r3, #42	; 0x2a
 8006f82:	d015      	beq.n	8006fb0 <_vfiprintf_r+0x13c>
 8006f84:	9a07      	ldr	r2, [sp, #28]
 8006f86:	4654      	mov	r4, sl
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f04f 0c0a 	mov.w	ip, #10
 8006f8e:	4621      	mov	r1, r4
 8006f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f94:	3b30      	subs	r3, #48	; 0x30
 8006f96:	2b09      	cmp	r3, #9
 8006f98:	d94e      	bls.n	8007038 <_vfiprintf_r+0x1c4>
 8006f9a:	b1b0      	cbz	r0, 8006fca <_vfiprintf_r+0x156>
 8006f9c:	9207      	str	r2, [sp, #28]
 8006f9e:	e014      	b.n	8006fca <_vfiprintf_r+0x156>
 8006fa0:	eba0 0308 	sub.w	r3, r0, r8
 8006fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	46a2      	mov	sl, r4
 8006fae:	e7d2      	b.n	8006f56 <_vfiprintf_r+0xe2>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	1d19      	adds	r1, r3, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	9103      	str	r1, [sp, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfbb      	ittet	lt
 8006fbc:	425b      	neglt	r3, r3
 8006fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc2:	9307      	strge	r3, [sp, #28]
 8006fc4:	9307      	strlt	r3, [sp, #28]
 8006fc6:	bfb8      	it	lt
 8006fc8:	9204      	strlt	r2, [sp, #16]
 8006fca:	7823      	ldrb	r3, [r4, #0]
 8006fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8006fce:	d10c      	bne.n	8006fea <_vfiprintf_r+0x176>
 8006fd0:	7863      	ldrb	r3, [r4, #1]
 8006fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd4:	d135      	bne.n	8007042 <_vfiprintf_r+0x1ce>
 8006fd6:	9b03      	ldr	r3, [sp, #12]
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	9203      	str	r2, [sp, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfb8      	it	lt
 8006fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe6:	3402      	adds	r4, #2
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070d0 <_vfiprintf_r+0x25c>
 8006fee:	7821      	ldrb	r1, [r4, #0]
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7f9 f924 	bl	8000240 <memchr>
 8006ff8:	b140      	cbz	r0, 800700c <_vfiprintf_r+0x198>
 8006ffa:	2340      	movs	r3, #64	; 0x40
 8006ffc:	eba0 000a 	sub.w	r0, r0, sl
 8007000:	fa03 f000 	lsl.w	r0, r3, r0
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	4303      	orrs	r3, r0
 8007008:	3401      	adds	r4, #1
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007010:	482c      	ldr	r0, [pc, #176]	; (80070c4 <_vfiprintf_r+0x250>)
 8007012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007016:	2206      	movs	r2, #6
 8007018:	f7f9 f912 	bl	8000240 <memchr>
 800701c:	2800      	cmp	r0, #0
 800701e:	d03f      	beq.n	80070a0 <_vfiprintf_r+0x22c>
 8007020:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <_vfiprintf_r+0x254>)
 8007022:	bb1b      	cbnz	r3, 800706c <_vfiprintf_r+0x1f8>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	3307      	adds	r3, #7
 8007028:	f023 0307 	bic.w	r3, r3, #7
 800702c:	3308      	adds	r3, #8
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	443b      	add	r3, r7
 8007034:	9309      	str	r3, [sp, #36]	; 0x24
 8007036:	e767      	b.n	8006f08 <_vfiprintf_r+0x94>
 8007038:	fb0c 3202 	mla	r2, ip, r2, r3
 800703c:	460c      	mov	r4, r1
 800703e:	2001      	movs	r0, #1
 8007040:	e7a5      	b.n	8006f8e <_vfiprintf_r+0x11a>
 8007042:	2300      	movs	r3, #0
 8007044:	3401      	adds	r4, #1
 8007046:	9305      	str	r3, [sp, #20]
 8007048:	4619      	mov	r1, r3
 800704a:	f04f 0c0a 	mov.w	ip, #10
 800704e:	4620      	mov	r0, r4
 8007050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007054:	3a30      	subs	r2, #48	; 0x30
 8007056:	2a09      	cmp	r2, #9
 8007058:	d903      	bls.n	8007062 <_vfiprintf_r+0x1ee>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0c5      	beq.n	8006fea <_vfiprintf_r+0x176>
 800705e:	9105      	str	r1, [sp, #20]
 8007060:	e7c3      	b.n	8006fea <_vfiprintf_r+0x176>
 8007062:	fb0c 2101 	mla	r1, ip, r1, r2
 8007066:	4604      	mov	r4, r0
 8007068:	2301      	movs	r3, #1
 800706a:	e7f0      	b.n	800704e <_vfiprintf_r+0x1da>
 800706c:	ab03      	add	r3, sp, #12
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	462a      	mov	r2, r5
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <_vfiprintf_r+0x258>)
 8007074:	a904      	add	r1, sp, #16
 8007076:	4630      	mov	r0, r6
 8007078:	f3af 8000 	nop.w
 800707c:	4607      	mov	r7, r0
 800707e:	1c78      	adds	r0, r7, #1
 8007080:	d1d6      	bne.n	8007030 <_vfiprintf_r+0x1bc>
 8007082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007084:	07d9      	lsls	r1, r3, #31
 8007086:	d405      	bmi.n	8007094 <_vfiprintf_r+0x220>
 8007088:	89ab      	ldrh	r3, [r5, #12]
 800708a:	059a      	lsls	r2, r3, #22
 800708c:	d402      	bmi.n	8007094 <_vfiprintf_r+0x220>
 800708e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007090:	f7ff fd7f 	bl	8006b92 <__retarget_lock_release_recursive>
 8007094:	89ab      	ldrh	r3, [r5, #12]
 8007096:	065b      	lsls	r3, r3, #25
 8007098:	f53f af12 	bmi.w	8006ec0 <_vfiprintf_r+0x4c>
 800709c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800709e:	e711      	b.n	8006ec4 <_vfiprintf_r+0x50>
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	462a      	mov	r2, r5
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <_vfiprintf_r+0x258>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 f880 	bl	80071b0 <_printf_i>
 80070b0:	e7e4      	b.n	800707c <_vfiprintf_r+0x208>
 80070b2:	bf00      	nop
 80070b4:	08008130 	.word	0x08008130
 80070b8:	08008150 	.word	0x08008150
 80070bc:	08008110 	.word	0x08008110
 80070c0:	08008170 	.word	0x08008170
 80070c4:	0800817a 	.word	0x0800817a
 80070c8:	00000000 	.word	0x00000000
 80070cc:	08006e4f 	.word	0x08006e4f
 80070d0:	08008176 	.word	0x08008176

080070d4 <_printf_common>:
 80070d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	4616      	mov	r6, r2
 80070da:	4699      	mov	r9, r3
 80070dc:	688a      	ldr	r2, [r1, #8]
 80070de:	690b      	ldr	r3, [r1, #16]
 80070e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	bfb8      	it	lt
 80070e8:	4613      	movlt	r3, r2
 80070ea:	6033      	str	r3, [r6, #0]
 80070ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070f0:	4607      	mov	r7, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	b10a      	cbz	r2, 80070fa <_printf_common+0x26>
 80070f6:	3301      	adds	r3, #1
 80070f8:	6033      	str	r3, [r6, #0]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	0699      	lsls	r1, r3, #26
 80070fe:	bf42      	ittt	mi
 8007100:	6833      	ldrmi	r3, [r6, #0]
 8007102:	3302      	addmi	r3, #2
 8007104:	6033      	strmi	r3, [r6, #0]
 8007106:	6825      	ldr	r5, [r4, #0]
 8007108:	f015 0506 	ands.w	r5, r5, #6
 800710c:	d106      	bne.n	800711c <_printf_common+0x48>
 800710e:	f104 0a19 	add.w	sl, r4, #25
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	6832      	ldr	r2, [r6, #0]
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	42ab      	cmp	r3, r5
 800711a:	dc26      	bgt.n	800716a <_printf_common+0x96>
 800711c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007120:	1e13      	subs	r3, r2, #0
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	bf18      	it	ne
 8007126:	2301      	movne	r3, #1
 8007128:	0692      	lsls	r2, r2, #26
 800712a:	d42b      	bmi.n	8007184 <_printf_common+0xb0>
 800712c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007130:	4649      	mov	r1, r9
 8007132:	4638      	mov	r0, r7
 8007134:	47c0      	blx	r8
 8007136:	3001      	adds	r0, #1
 8007138:	d01e      	beq.n	8007178 <_printf_common+0xa4>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	68e5      	ldr	r5, [r4, #12]
 800713e:	6832      	ldr	r2, [r6, #0]
 8007140:	f003 0306 	and.w	r3, r3, #6
 8007144:	2b04      	cmp	r3, #4
 8007146:	bf08      	it	eq
 8007148:	1aad      	subeq	r5, r5, r2
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	6922      	ldr	r2, [r4, #16]
 800714e:	bf0c      	ite	eq
 8007150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007154:	2500      	movne	r5, #0
 8007156:	4293      	cmp	r3, r2
 8007158:	bfc4      	itt	gt
 800715a:	1a9b      	subgt	r3, r3, r2
 800715c:	18ed      	addgt	r5, r5, r3
 800715e:	2600      	movs	r6, #0
 8007160:	341a      	adds	r4, #26
 8007162:	42b5      	cmp	r5, r6
 8007164:	d11a      	bne.n	800719c <_printf_common+0xc8>
 8007166:	2000      	movs	r0, #0
 8007168:	e008      	b.n	800717c <_printf_common+0xa8>
 800716a:	2301      	movs	r3, #1
 800716c:	4652      	mov	r2, sl
 800716e:	4649      	mov	r1, r9
 8007170:	4638      	mov	r0, r7
 8007172:	47c0      	blx	r8
 8007174:	3001      	adds	r0, #1
 8007176:	d103      	bne.n	8007180 <_printf_common+0xac>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007180:	3501      	adds	r5, #1
 8007182:	e7c6      	b.n	8007112 <_printf_common+0x3e>
 8007184:	18e1      	adds	r1, r4, r3
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	2030      	movs	r0, #48	; 0x30
 800718a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800718e:	4422      	add	r2, r4
 8007190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007198:	3302      	adds	r3, #2
 800719a:	e7c7      	b.n	800712c <_printf_common+0x58>
 800719c:	2301      	movs	r3, #1
 800719e:	4622      	mov	r2, r4
 80071a0:	4649      	mov	r1, r9
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	3001      	adds	r0, #1
 80071a8:	d0e6      	beq.n	8007178 <_printf_common+0xa4>
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7d9      	b.n	8007162 <_printf_common+0x8e>
	...

080071b0 <_printf_i>:
 80071b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b4:	7e0f      	ldrb	r7, [r1, #24]
 80071b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071b8:	2f78      	cmp	r7, #120	; 0x78
 80071ba:	4691      	mov	r9, r2
 80071bc:	4680      	mov	r8, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	469a      	mov	sl, r3
 80071c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071c6:	d807      	bhi.n	80071d8 <_printf_i+0x28>
 80071c8:	2f62      	cmp	r7, #98	; 0x62
 80071ca:	d80a      	bhi.n	80071e2 <_printf_i+0x32>
 80071cc:	2f00      	cmp	r7, #0
 80071ce:	f000 80d8 	beq.w	8007382 <_printf_i+0x1d2>
 80071d2:	2f58      	cmp	r7, #88	; 0x58
 80071d4:	f000 80a3 	beq.w	800731e <_printf_i+0x16e>
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071e0:	e03a      	b.n	8007258 <_printf_i+0xa8>
 80071e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071e6:	2b15      	cmp	r3, #21
 80071e8:	d8f6      	bhi.n	80071d8 <_printf_i+0x28>
 80071ea:	a101      	add	r1, pc, #4	; (adr r1, 80071f0 <_printf_i+0x40>)
 80071ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071f0:	08007249 	.word	0x08007249
 80071f4:	0800725d 	.word	0x0800725d
 80071f8:	080071d9 	.word	0x080071d9
 80071fc:	080071d9 	.word	0x080071d9
 8007200:	080071d9 	.word	0x080071d9
 8007204:	080071d9 	.word	0x080071d9
 8007208:	0800725d 	.word	0x0800725d
 800720c:	080071d9 	.word	0x080071d9
 8007210:	080071d9 	.word	0x080071d9
 8007214:	080071d9 	.word	0x080071d9
 8007218:	080071d9 	.word	0x080071d9
 800721c:	08007369 	.word	0x08007369
 8007220:	0800728d 	.word	0x0800728d
 8007224:	0800734b 	.word	0x0800734b
 8007228:	080071d9 	.word	0x080071d9
 800722c:	080071d9 	.word	0x080071d9
 8007230:	0800738b 	.word	0x0800738b
 8007234:	080071d9 	.word	0x080071d9
 8007238:	0800728d 	.word	0x0800728d
 800723c:	080071d9 	.word	0x080071d9
 8007240:	080071d9 	.word	0x080071d9
 8007244:	08007353 	.word	0x08007353
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007258:	2301      	movs	r3, #1
 800725a:	e0a3      	b.n	80073a4 <_printf_i+0x1f4>
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	6829      	ldr	r1, [r5, #0]
 8007260:	0606      	lsls	r6, r0, #24
 8007262:	f101 0304 	add.w	r3, r1, #4
 8007266:	d50a      	bpl.n	800727e <_printf_i+0xce>
 8007268:	680e      	ldr	r6, [r1, #0]
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	2e00      	cmp	r6, #0
 800726e:	da03      	bge.n	8007278 <_printf_i+0xc8>
 8007270:	232d      	movs	r3, #45	; 0x2d
 8007272:	4276      	negs	r6, r6
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007278:	485e      	ldr	r0, [pc, #376]	; (80073f4 <_printf_i+0x244>)
 800727a:	230a      	movs	r3, #10
 800727c:	e019      	b.n	80072b2 <_printf_i+0x102>
 800727e:	680e      	ldr	r6, [r1, #0]
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007286:	bf18      	it	ne
 8007288:	b236      	sxthne	r6, r6
 800728a:	e7ef      	b.n	800726c <_printf_i+0xbc>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	6029      	str	r1, [r5, #0]
 8007294:	0601      	lsls	r1, r0, #24
 8007296:	d501      	bpl.n	800729c <_printf_i+0xec>
 8007298:	681e      	ldr	r6, [r3, #0]
 800729a:	e002      	b.n	80072a2 <_printf_i+0xf2>
 800729c:	0646      	lsls	r6, r0, #25
 800729e:	d5fb      	bpl.n	8007298 <_printf_i+0xe8>
 80072a0:	881e      	ldrh	r6, [r3, #0]
 80072a2:	4854      	ldr	r0, [pc, #336]	; (80073f4 <_printf_i+0x244>)
 80072a4:	2f6f      	cmp	r7, #111	; 0x6f
 80072a6:	bf0c      	ite	eq
 80072a8:	2308      	moveq	r3, #8
 80072aa:	230a      	movne	r3, #10
 80072ac:	2100      	movs	r1, #0
 80072ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072b2:	6865      	ldr	r5, [r4, #4]
 80072b4:	60a5      	str	r5, [r4, #8]
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	bfa2      	ittt	ge
 80072ba:	6821      	ldrge	r1, [r4, #0]
 80072bc:	f021 0104 	bicge.w	r1, r1, #4
 80072c0:	6021      	strge	r1, [r4, #0]
 80072c2:	b90e      	cbnz	r6, 80072c8 <_printf_i+0x118>
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	d04d      	beq.n	8007364 <_printf_i+0x1b4>
 80072c8:	4615      	mov	r5, r2
 80072ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ce:	fb03 6711 	mls	r7, r3, r1, r6
 80072d2:	5dc7      	ldrb	r7, [r0, r7]
 80072d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072d8:	4637      	mov	r7, r6
 80072da:	42bb      	cmp	r3, r7
 80072dc:	460e      	mov	r6, r1
 80072de:	d9f4      	bls.n	80072ca <_printf_i+0x11a>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d10b      	bne.n	80072fc <_printf_i+0x14c>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	07de      	lsls	r6, r3, #31
 80072e8:	d508      	bpl.n	80072fc <_printf_i+0x14c>
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	6861      	ldr	r1, [r4, #4]
 80072ee:	4299      	cmp	r1, r3
 80072f0:	bfde      	ittt	le
 80072f2:	2330      	movle	r3, #48	; 0x30
 80072f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072fc:	1b52      	subs	r2, r2, r5
 80072fe:	6122      	str	r2, [r4, #16]
 8007300:	f8cd a000 	str.w	sl, [sp]
 8007304:	464b      	mov	r3, r9
 8007306:	aa03      	add	r2, sp, #12
 8007308:	4621      	mov	r1, r4
 800730a:	4640      	mov	r0, r8
 800730c:	f7ff fee2 	bl	80070d4 <_printf_common>
 8007310:	3001      	adds	r0, #1
 8007312:	d14c      	bne.n	80073ae <_printf_i+0x1fe>
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	b004      	add	sp, #16
 800731a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731e:	4835      	ldr	r0, [pc, #212]	; (80073f4 <_printf_i+0x244>)
 8007320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007324:	6829      	ldr	r1, [r5, #0]
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	f851 6b04 	ldr.w	r6, [r1], #4
 800732c:	6029      	str	r1, [r5, #0]
 800732e:	061d      	lsls	r5, r3, #24
 8007330:	d514      	bpl.n	800735c <_printf_i+0x1ac>
 8007332:	07df      	lsls	r7, r3, #31
 8007334:	bf44      	itt	mi
 8007336:	f043 0320 	orrmi.w	r3, r3, #32
 800733a:	6023      	strmi	r3, [r4, #0]
 800733c:	b91e      	cbnz	r6, 8007346 <_printf_i+0x196>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f023 0320 	bic.w	r3, r3, #32
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	2310      	movs	r3, #16
 8007348:	e7b0      	b.n	80072ac <_printf_i+0xfc>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f043 0320 	orr.w	r3, r3, #32
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	2378      	movs	r3, #120	; 0x78
 8007354:	4828      	ldr	r0, [pc, #160]	; (80073f8 <_printf_i+0x248>)
 8007356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800735a:	e7e3      	b.n	8007324 <_printf_i+0x174>
 800735c:	0659      	lsls	r1, r3, #25
 800735e:	bf48      	it	mi
 8007360:	b2b6      	uxthmi	r6, r6
 8007362:	e7e6      	b.n	8007332 <_printf_i+0x182>
 8007364:	4615      	mov	r5, r2
 8007366:	e7bb      	b.n	80072e0 <_printf_i+0x130>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	6826      	ldr	r6, [r4, #0]
 800736c:	6961      	ldr	r1, [r4, #20]
 800736e:	1d18      	adds	r0, r3, #4
 8007370:	6028      	str	r0, [r5, #0]
 8007372:	0635      	lsls	r5, r6, #24
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	d501      	bpl.n	800737c <_printf_i+0x1cc>
 8007378:	6019      	str	r1, [r3, #0]
 800737a:	e002      	b.n	8007382 <_printf_i+0x1d2>
 800737c:	0670      	lsls	r0, r6, #25
 800737e:	d5fb      	bpl.n	8007378 <_printf_i+0x1c8>
 8007380:	8019      	strh	r1, [r3, #0]
 8007382:	2300      	movs	r3, #0
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	4615      	mov	r5, r2
 8007388:	e7ba      	b.n	8007300 <_printf_i+0x150>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	602a      	str	r2, [r5, #0]
 8007390:	681d      	ldr	r5, [r3, #0]
 8007392:	6862      	ldr	r2, [r4, #4]
 8007394:	2100      	movs	r1, #0
 8007396:	4628      	mov	r0, r5
 8007398:	f7f8 ff52 	bl	8000240 <memchr>
 800739c:	b108      	cbz	r0, 80073a2 <_printf_i+0x1f2>
 800739e:	1b40      	subs	r0, r0, r5
 80073a0:	6060      	str	r0, [r4, #4]
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	6123      	str	r3, [r4, #16]
 80073a6:	2300      	movs	r3, #0
 80073a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ac:	e7a8      	b.n	8007300 <_printf_i+0x150>
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	462a      	mov	r2, r5
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	47d0      	blx	sl
 80073b8:	3001      	adds	r0, #1
 80073ba:	d0ab      	beq.n	8007314 <_printf_i+0x164>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	079b      	lsls	r3, r3, #30
 80073c0:	d413      	bmi.n	80073ea <_printf_i+0x23a>
 80073c2:	68e0      	ldr	r0, [r4, #12]
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	4298      	cmp	r0, r3
 80073c8:	bfb8      	it	lt
 80073ca:	4618      	movlt	r0, r3
 80073cc:	e7a4      	b.n	8007318 <_printf_i+0x168>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4632      	mov	r2, r6
 80073d2:	4649      	mov	r1, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	47d0      	blx	sl
 80073d8:	3001      	adds	r0, #1
 80073da:	d09b      	beq.n	8007314 <_printf_i+0x164>
 80073dc:	3501      	adds	r5, #1
 80073de:	68e3      	ldr	r3, [r4, #12]
 80073e0:	9903      	ldr	r1, [sp, #12]
 80073e2:	1a5b      	subs	r3, r3, r1
 80073e4:	42ab      	cmp	r3, r5
 80073e6:	dcf2      	bgt.n	80073ce <_printf_i+0x21e>
 80073e8:	e7eb      	b.n	80073c2 <_printf_i+0x212>
 80073ea:	2500      	movs	r5, #0
 80073ec:	f104 0619 	add.w	r6, r4, #25
 80073f0:	e7f5      	b.n	80073de <_printf_i+0x22e>
 80073f2:	bf00      	nop
 80073f4:	08008181 	.word	0x08008181
 80073f8:	08008192 	.word	0x08008192

080073fc <_sbrk_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_sbrk_r+0x1c>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7fa f88c 	bl	8001524 <_sbrk>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_sbrk_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_sbrk_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	200020b0 	.word	0x200020b0

0800741c <__sread>:
 800741c:	b510      	push	{r4, lr}
 800741e:	460c      	mov	r4, r1
 8007420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007424:	f000 f8a0 	bl	8007568 <_read_r>
 8007428:	2800      	cmp	r0, #0
 800742a:	bfab      	itete	ge
 800742c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800742e:	89a3      	ldrhlt	r3, [r4, #12]
 8007430:	181b      	addge	r3, r3, r0
 8007432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007436:	bfac      	ite	ge
 8007438:	6563      	strge	r3, [r4, #84]	; 0x54
 800743a:	81a3      	strhlt	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__swrite>:
 800743e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007442:	461f      	mov	r7, r3
 8007444:	898b      	ldrh	r3, [r1, #12]
 8007446:	05db      	lsls	r3, r3, #23
 8007448:	4605      	mov	r5, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4616      	mov	r6, r2
 800744e:	d505      	bpl.n	800745c <__swrite+0x1e>
 8007450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007454:	2302      	movs	r3, #2
 8007456:	2200      	movs	r2, #0
 8007458:	f000 f868 	bl	800752c <_lseek_r>
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007466:	81a3      	strh	r3, [r4, #12]
 8007468:	4632      	mov	r2, r6
 800746a:	463b      	mov	r3, r7
 800746c:	4628      	mov	r0, r5
 800746e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	f000 b817 	b.w	80074a4 <_write_r>

08007476 <__sseek>:
 8007476:	b510      	push	{r4, lr}
 8007478:	460c      	mov	r4, r1
 800747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747e:	f000 f855 	bl	800752c <_lseek_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	bf15      	itete	ne
 8007488:	6560      	strne	r0, [r4, #84]	; 0x54
 800748a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800748e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007492:	81a3      	strheq	r3, [r4, #12]
 8007494:	bf18      	it	ne
 8007496:	81a3      	strhne	r3, [r4, #12]
 8007498:	bd10      	pop	{r4, pc}

0800749a <__sclose>:
 800749a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749e:	f000 b813 	b.w	80074c8 <_close_r>
	...

080074a4 <_write_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	; (80074c4 <_write_r+0x20>)
 80074a8:	4604      	mov	r4, r0
 80074aa:	4608      	mov	r0, r1
 80074ac:	4611      	mov	r1, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7f9 ffe5 	bl	8001482 <_write>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_write_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_write_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	200020b0 	.word	0x200020b0

080074c8 <_close_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	; (80074e4 <_close_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7f9 fff1 	bl	80014ba <_close>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_close_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_close_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200020b0 	.word	0x200020b0

080074e8 <_fstat_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <_fstat_r+0x20>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f7f9 ffec 	bl	80014d2 <_fstat>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d102      	bne.n	8007504 <_fstat_r+0x1c>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b103      	cbz	r3, 8007504 <_fstat_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	bf00      	nop
 8007508:	200020b0 	.word	0x200020b0

0800750c <_isatty_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d06      	ldr	r5, [pc, #24]	; (8007528 <_isatty_r+0x1c>)
 8007510:	2300      	movs	r3, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7f9 ffeb 	bl	80014f2 <_isatty>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_isatty_r+0x1a>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_isatty_r+0x1a>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	200020b0 	.word	0x200020b0

0800752c <_lseek_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	; (800754c <_lseek_r+0x20>)
 8007530:	4604      	mov	r4, r0
 8007532:	4608      	mov	r0, r1
 8007534:	4611      	mov	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f7f9 ffe4 	bl	8001508 <_lseek>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_lseek_r+0x1e>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_lseek_r+0x1e>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200020b0 	.word	0x200020b0

08007550 <__malloc_lock>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__malloc_lock+0x8>)
 8007552:	f7ff bb1d 	b.w	8006b90 <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	200020a4 	.word	0x200020a4

0800755c <__malloc_unlock>:
 800755c:	4801      	ldr	r0, [pc, #4]	; (8007564 <__malloc_unlock+0x8>)
 800755e:	f7ff bb18 	b.w	8006b92 <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	200020a4 	.word	0x200020a4

08007568 <_read_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	; (8007588 <_read_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7f9 ff66 	bl	8001448 <_read>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_read_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_read_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	200020b0 	.word	0x200020b0

0800758c <_init>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr

08007598 <_fini>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr
