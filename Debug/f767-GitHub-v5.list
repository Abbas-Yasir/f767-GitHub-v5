
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ec  080080ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f4  080080f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080080fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000078  08008174  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08008174  00020448  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154ff  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  000355a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00039528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a205  00000000  00000000  0003a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a13  00000000  00000000  00064805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010167b  00000000  00000000  0007b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005460  00000000  00000000  0017c8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080074d4 	.word	0x080074d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080074d4 	.word	0x080074d4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_DMA_Init+0x38>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <MX_DMA_Init+0x38>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_DMA_Init+0x38>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2044      	movs	r0, #68	; 0x44
 8000608:	f001 fd61 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800060c:	2044      	movs	r0, #68	; 0x44
 800060e:	f001 fd7a 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_GPIO_Init+0x110>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <MX_GPIO_Init+0x110>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_GPIO_Init+0x110>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0310 	and.w	r3, r3, #16
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_GPIO_Init+0x110>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_GPIO_Init+0x110>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_GPIO_Init+0x110>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x110>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x110>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x110>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_GPIO_Init+0x110>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <MX_GPIO_Init+0x110>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_GPIO_Init+0x110>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0x110>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0x110>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0x110>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006ae:	2200      	movs	r2, #0
 80006b0:	f647 0110 	movw	r1, #30736	; 0x7810
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_GPIO_Init+0x114>)
 80006b6:	f002 fa69 	bl	8002b8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <MX_GPIO_Init+0x118>)
 80006c0:	f002 fa64 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <MX_GPIO_Init+0x11c>)
 80006cc:	f002 fa5e 	bl	8002b8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006d0:	f647 0310 	movw	r3, #30736	; 0x7810
 80006d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0x114>)
 80006ea:	f002 f8a3 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ee:	2310      	movs	r3, #16
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_GPIO_Init+0x118>)
 8000706:	f002 f895 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800070a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800070e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_GPIO_Init+0x11c>)
 8000724:	f002 f886 	bl	8002834 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serialPortDebug,(uint8_t *)&ch,1,0xFFFF);//Blocking mode printing
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	2201      	movs	r2, #1
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <__io_putchar+0x20>)
 8000752:	f004 fc59 	bl	8005008 <HAL_UART_Transmit>
  return ch;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000029c 	.word	0x2000029c

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b09b      	sub	sp, #108	; 0x6c
 8000768:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 fb54 	bl	8001e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f977 	bl	8000a60 <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f7ff ff55 	bl	8000620 <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f7ff ff35 	bl	80005e4 <MX_DMA_Init>
  MX_SPI4_Init();
 800077a:	f000 fd6f 	bl	800125c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 800077e:	f000 ffd5 	bl	800172c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000782:	f000 fcf5 	bl	8001170 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000786:	f000 fd31 	bl	80011ec <MX_SPI3_Init>
  MX_QUADSPI_Init();
 800078a:	f000 fc43 	bl	8001014 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 800078e:	f000 fffd 	bl	800178c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000792:	f000 ff87 	bl	80016a4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000796:	f001 f9cd 	bl	8001b34 <W25qxx_Init>



  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 800079a:	48a2      	ldr	r0, [pc, #648]	; (8000a24 <main+0x2c0>)
 800079c:	f005 fd4e 	bl	800623c <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	48a0      	ldr	r0, [pc, #640]	; (8000a28 <main+0x2c4>)
 80007a8:	f002 f9f0 	bl	8002b8c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f001 fb8f 	bl	8001ed0 <HAL_Delay>


  eraseSector_3ByteAdd_FM(localPortFM,0);
 80007b2:	4c9e      	ldr	r4, [pc, #632]	; (8000a2c <main+0x2c8>)
 80007b4:	2300      	movs	r3, #0
 80007b6:	9315      	str	r3, [sp, #84]	; 0x54
 80007b8:	4668      	mov	r0, sp
 80007ba:	f104 0310 	add.w	r3, r4, #16
 80007be:	2254      	movs	r2, #84	; 0x54
 80007c0:	4619      	mov	r1, r3
 80007c2:	f005 fc9f 	bl	8006104 <memcpy>
 80007c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007ca:	f000 fb9f 	bl	8000f0c <eraseSector_3ByteAdd_FM>
  eraseSector_3ByteAdd_FM(shrdPortFM ,0);
 80007ce:	4c98      	ldr	r4, [pc, #608]	; (8000a30 <main+0x2cc>)
 80007d0:	2300      	movs	r3, #0
 80007d2:	9315      	str	r3, [sp, #84]	; 0x54
 80007d4:	4668      	mov	r0, sp
 80007d6:	f104 0310 	add.w	r3, r4, #16
 80007da:	2254      	movs	r2, #84	; 0x54
 80007dc:	4619      	mov	r1, r3
 80007de:	f005 fc91 	bl	8006104 <memcpy>
 80007e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007e6:	f000 fb91 	bl	8000f0c <eraseSector_3ByteAdd_FM>

  uint8_t emptyLoop=0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(fareDelay);
 80007ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f2:	f001 fb6d 	bl	8001ed0 <HAL_Delay>

	  if (emptyLoop==1) {
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d130      	bne.n	800085e <main+0xfa>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	488c      	ldr	r0, [pc, #560]	; (8000a34 <main+0x2d0>)
 8000802:	f002 f9c3 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2120      	movs	r1, #32
 800080a:	488a      	ldr	r0, [pc, #552]	; (8000a34 <main+0x2d0>)
 800080c:	f002 f9be 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4887      	ldr	r0, [pc, #540]	; (8000a34 <main+0x2d0>)
 8000816:	f002 f9b9 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4885      	ldr	r0, [pc, #532]	; (8000a34 <main+0x2d0>)
 8000820:	f002 f9b4 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 8000824:	f241 3088 	movw	r0, #5000	; 0x1388
 8000828:	f001 fb52 	bl	8001ed0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2110      	movs	r1, #16
 8000830:	4880      	ldr	r0, [pc, #512]	; (8000a34 <main+0x2d0>)
 8000832:	f002 f9ab 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	487e      	ldr	r0, [pc, #504]	; (8000a34 <main+0x2d0>)
 800083c:	f002 f9a6 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	487b      	ldr	r0, [pc, #492]	; (8000a34 <main+0x2d0>)
 8000846:	f002 f9a1 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4879      	ldr	r0, [pc, #484]	; (8000a34 <main+0x2d0>)
 8000850:	f002 f99c 	bl	8002b8c <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 8000854:	f241 3088 	movw	r0, #5000	; 0x1388
 8000858:	f001 fb3a 	bl	8001ed0 <HAL_Delay>
 800085c:	e7c7      	b.n	80007ee <main+0x8a>
	  }
	  else {


	  		loop++;
 800085e:	4b76      	ldr	r3, [pc, #472]	; (8000a38 <main+0x2d4>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b74      	ldr	r3, [pc, #464]	; (8000a38 <main+0x2d4>)
 8000868:	801a      	strh	r2, [r3, #0]
	  		loop=(loop)%0x100;
 800086a:	4b73      	ldr	r3, [pc, #460]	; (8000a38 <main+0x2d4>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b71      	ldr	r3, [pc, #452]	; (8000a38 <main+0x2d4>)
 8000874:	801a      	strh	r2, [r3, #0]
	  		printf("--------------------------\r\nNew Loop:%d \r\n",loop);
 8000876:	4b70      	ldr	r3, [pc, #448]	; (8000a38 <main+0x2d4>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	486f      	ldr	r0, [pc, #444]	; (8000a3c <main+0x2d8>)
 800087e:	f005 fc57 	bl	8006130 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  		writeSR(localPortFM,0x40);
 8000882:	4c6a      	ldr	r4, [pc, #424]	; (8000a2c <main+0x2c8>)
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	9315      	str	r3, [sp, #84]	; 0x54
 8000888:	4668      	mov	r0, sp
 800088a:	f104 0310 	add.w	r3, r4, #16
 800088e:	2254      	movs	r2, #84	; 0x54
 8000890:	4619      	mov	r1, r3
 8000892:	f005 fc37 	bl	8006104 <memcpy>
 8000896:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800089a:	f000 f9f9 	bl	8000c90 <writeSR>
	  	chipSelect(localPortFM);
 800089e:	4c63      	ldr	r4, [pc, #396]	; (8000a2c <main+0x2c8>)
 80008a0:	4668      	mov	r0, sp
 80008a2:	f104 0310 	add.w	r3, r4, #16
 80008a6:	2254      	movs	r2, #84	; 0x54
 80008a8:	4619      	mov	r1, r3
 80008aa:	f005 fc2b 	bl	8006104 <memcpy>
 80008ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008b2:	f000 f931 	bl	8000b18 <chipSelect>
		HAL_SPI_Transmit(&localPortFM, (uint8_t *) &RDSR, 1, 100);
 80008b6:	2364      	movs	r3, #100	; 0x64
 80008b8:	2201      	movs	r2, #1
 80008ba:	4961      	ldr	r1, [pc, #388]	; (8000a40 <main+0x2dc>)
 80008bc:	485b      	ldr	r0, [pc, #364]	; (8000a2c <main+0x2c8>)
 80008be:	f003 fba8 	bl	8004012 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&localPortFM, (uint8_t *) &SR, 1, 100);
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2201      	movs	r2, #1
 80008c6:	495f      	ldr	r1, [pc, #380]	; (8000a44 <main+0x2e0>)
 80008c8:	4858      	ldr	r0, [pc, #352]	; (8000a2c <main+0x2c8>)
 80008ca:	f003 fd10 	bl	80042ee <HAL_SPI_Receive>
	  	chipDeSelect(localPortFM);
 80008ce:	4c57      	ldr	r4, [pc, #348]	; (8000a2c <main+0x2c8>)
 80008d0:	4668      	mov	r0, sp
 80008d2:	f104 0310 	add.w	r3, r4, #16
 80008d6:	2254      	movs	r2, #84	; 0x54
 80008d8:	4619      	mov	r1, r3
 80008da:	f005 fc13 	bl	8006104 <memcpy>
 80008de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008e2:	f000 f941 	bl	8000b68 <chipDeSelect>
		printf("SR of LocalFM:0x%02X \r\n", SR);
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <main+0x2e0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4856      	ldr	r0, [pc, #344]	; (8000a48 <main+0x2e4>)
 80008ee:	f005 fc1f 	bl	8006130 <iprintf>
		HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f001 faec 	bl	8001ed0 <HAL_Delay>

		writeSR(shrdPortFM,0x40);
 80008f8:	4c4d      	ldr	r4, [pc, #308]	; (8000a30 <main+0x2cc>)
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	9315      	str	r3, [sp, #84]	; 0x54
 80008fe:	4668      	mov	r0, sp
 8000900:	f104 0310 	add.w	r3, r4, #16
 8000904:	2254      	movs	r2, #84	; 0x54
 8000906:	4619      	mov	r1, r3
 8000908:	f005 fbfc 	bl	8006104 <memcpy>
 800090c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000910:	f000 f9be 	bl	8000c90 <writeSR>
	  	chipSelect(shrdPortFM);
 8000914:	4c46      	ldr	r4, [pc, #280]	; (8000a30 <main+0x2cc>)
 8000916:	4668      	mov	r0, sp
 8000918:	f104 0310 	add.w	r3, r4, #16
 800091c:	2254      	movs	r2, #84	; 0x54
 800091e:	4619      	mov	r1, r3
 8000920:	f005 fbf0 	bl	8006104 <memcpy>
 8000924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000928:	f000 f8f6 	bl	8000b18 <chipSelect>
		HAL_SPI_Transmit(&shrdPortFM, (uint8_t *) &RDSR, 1, 100);
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2201      	movs	r2, #1
 8000930:	4943      	ldr	r1, [pc, #268]	; (8000a40 <main+0x2dc>)
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <main+0x2cc>)
 8000934:	f003 fb6d 	bl	8004012 <HAL_SPI_Transmit>
		HAL_SPI_Receive (&shrdPortFM, (uint8_t *) &SR,   1, 100);
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	2201      	movs	r2, #1
 800093c:	4941      	ldr	r1, [pc, #260]	; (8000a44 <main+0x2e0>)
 800093e:	483c      	ldr	r0, [pc, #240]	; (8000a30 <main+0x2cc>)
 8000940:	f003 fcd5 	bl	80042ee <HAL_SPI_Receive>
	  	chipDeSelect(shrdPortFM);
 8000944:	4c3a      	ldr	r4, [pc, #232]	; (8000a30 <main+0x2cc>)
 8000946:	4668      	mov	r0, sp
 8000948:	f104 0310 	add.w	r3, r4, #16
 800094c:	2254      	movs	r2, #84	; 0x54
 800094e:	4619      	mov	r1, r3
 8000950:	f005 fbd8 	bl	8006104 <memcpy>
 8000954:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000958:	f000 f906 	bl	8000b68 <chipDeSelect>
		printf("SR of SharedFM:0x%02X \r\n", SR);
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <main+0x2e0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	483a      	ldr	r0, [pc, #232]	; (8000a4c <main+0x2e8>)
 8000964:	f005 fbe4 	bl	8006130 <iprintf>
		HAL_Delay(10);
 8000968:	200a      	movs	r0, #10
 800096a:	f001 fab1 	bl	8001ed0 <HAL_Delay>

	printf("MemoryID:0x%lX \r\n", W25qxx_ReadID());
 800096e:	f001 f82f 	bl	80019d0 <W25qxx_ReadID>
 8000972:	4603      	mov	r3, r0
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	; (8000a50 <main+0x2ec>)
 8000978:	f005 fbda 	bl	8006130 <iprintf>

  	HAL_Delay(tinyDelay);
 800097c:	2064      	movs	r0, #100	; 0x64
 800097e:	f001 faa7 	bl	8001ed0 <HAL_Delay>

  	adrs=loop;
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <main+0x2d4>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x2f0>)
 800098a:	601a      	str	r2, [r3, #0]

	printf("Local Memory: \r\n");
 800098c:	4832      	ldr	r0, [pc, #200]	; (8000a58 <main+0x2f4>)
 800098e:	f005 fc55 	bl	800623c <puts>
	write_3ByteAdd_FM(localPortFM,adrs,adrs);
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <main+0x2f0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <main+0x2f0>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	4c23      	ldr	r4, [pc, #140]	; (8000a2c <main+0x2c8>)
 800099e:	9216      	str	r2, [sp, #88]	; 0x58
 80009a0:	9315      	str	r3, [sp, #84]	; 0x54
 80009a2:	4668      	mov	r0, sp
 80009a4:	f104 0310 	add.w	r3, r4, #16
 80009a8:	2254      	movs	r2, #84	; 0x54
 80009aa:	4619      	mov	r1, r3
 80009ac:	f005 fbaa 	bl	8006104 <memcpy>
 80009b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009b4:	f000 f9b6 	bl	8000d24 <write_3ByteAdd_FM>
	read_3ByteAdd_FM(localPortFM,adrs);
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <main+0x2f0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4c1b      	ldr	r4, [pc, #108]	; (8000a2c <main+0x2c8>)
 80009be:	9315      	str	r3, [sp, #84]	; 0x54
 80009c0:	4668      	mov	r0, sp
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	2254      	movs	r2, #84	; 0x54
 80009c8:	4619      	mov	r1, r3
 80009ca:	f005 fb9b 	bl	8006104 <memcpy>
 80009ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009d2:	f000 fa2d 	bl	8000e30 <read_3ByteAdd_FM>
	printf("Shared Memory: \r\n");
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <main+0x2f8>)
 80009d8:	f005 fc30 	bl	800623c <puts>
	write_3ByteAdd_FM(shrdPortFM,adrs,adrs);
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <main+0x2f0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <main+0x2f0>)
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	4c12      	ldr	r4, [pc, #72]	; (8000a30 <main+0x2cc>)
 80009e8:	9216      	str	r2, [sp, #88]	; 0x58
 80009ea:	9315      	str	r3, [sp, #84]	; 0x54
 80009ec:	4668      	mov	r0, sp
 80009ee:	f104 0310 	add.w	r3, r4, #16
 80009f2:	2254      	movs	r2, #84	; 0x54
 80009f4:	4619      	mov	r1, r3
 80009f6:	f005 fb85 	bl	8006104 <memcpy>
 80009fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009fe:	f000 f991 	bl	8000d24 <write_3ByteAdd_FM>
	read_3ByteAdd_FM(shrdPortFM,adrs);
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <main+0x2f0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <main+0x2cc>)
 8000a08:	9315      	str	r3, [sp, #84]	; 0x54
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f104 0310 	add.w	r3, r4, #16
 8000a10:	2254      	movs	r2, #84	; 0x54
 8000a12:	4619      	mov	r1, r3
 8000a14:	f005 fb76 	bl	8006104 <memcpy>
 8000a18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a1c:	f000 fa08 	bl	8000e30 <read_3ByteAdd_FM>
		HAL_Delay(fareDelay);
 8000a20:	e6e5      	b.n	80007ee <main+0x8a>
 8000a22:	bf00      	nop
 8000a24:	080074ec 	.word	0x080074ec
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	200001e8 	.word	0x200001e8
 8000a30:	20000120 	.word	0x20000120
 8000a34:	40020000 	.word	0x40020000
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	08007528 	.word	0x08007528
 8000a40:	20000003 	.word	0x20000003
 8000a44:	20000000 	.word	0x20000000
 8000a48:	08007554 	.word	0x08007554
 8000a4c:	0800756c 	.word	0x0800756c
 8000a50:	08007588 	.word	0x08007588
 8000a54:	20000098 	.word	0x20000098
 8000a58:	0800759c 	.word	0x0800759c
 8000a5c:	080075ac 	.word	0x080075ac

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2234      	movs	r2, #52	; 0x34
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 fb56 	bl	8006120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <SystemClock_Config+0xb0>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <SystemClock_Config+0xb0>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <SystemClock_Config+0xb0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <SystemClock_Config+0xb4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <SystemClock_Config+0xb4>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <SystemClock_Config+0xb4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f939 	bl	8002d44 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 fa94 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fbd2 	bl	80032a0 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b02:	f000 fa7f 	bl	8001004 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <chipSelect>:
  	  HAL_Delay(on_time);
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
  	  HAL_Delay(off_time);
}

void chipSelect(SPI_HandleTypeDef spiPort){
 8000b18:	b084      	sub	sp, #16
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	f107 0c08 	add.w	ip, r7, #8
 8000b22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(csDelay);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f001 f9d2 	bl	8001ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Shared hspi1 PA4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <chipSelect+0x48>)
 8000b32:	f002 f82b 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); // Shared hspi4 PA1
 8000b36:	2200      	movs	r2, #0
 8000b38:	2110      	movs	r1, #16
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <chipSelect+0x4c>)
 8000b3c:	f002 f826 	bl	8002b8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <chipSelect+0x4c>)
 8000b48:	f002 f820 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(csDelay);
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f001 f9bf 	bl	8001ed0 <HAL_Delay>
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40021000 	.word	0x40021000

08000b68 <chipDeSelect>:

void chipDeSelect(SPI_HandleTypeDef spiPort){
 8000b68:	b084      	sub	sp, #16
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	f107 0c08 	add.w	ip, r7, #8
 8000b72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(csDelay);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f001 f9aa 	bl	8001ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // for sharedFM
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <chipDeSelect+0x48>)
 8000b82:	f002 f803 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // for localFM
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <chipDeSelect+0x4c>)
 8000b8c:	f001 fffe 	bl	8002b8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b96:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <chipDeSelect+0x4c>)
 8000b98:	f001 fff8 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(csDelay);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f001 f997 	bl	8001ed0 <HAL_Delay>
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <WRENABLE_FM>:

void WRENABLE_FM(SPI_HandleTypeDef spiPort)
{
 8000bb8:	b084      	sub	sp, #16
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b096      	sub	sp, #88	; 0x58
 8000bbe:	af16      	add	r7, sp, #88	; 0x58
 8000bc0:	f107 0c08 	add.w	ip, r7, #8
 8000bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	chipSelect(spiPort);
 8000bc8:	4668      	mov	r0, sp
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2254      	movs	r2, #84	; 0x54
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f005 fa97 	bl	8006104 <memcpy>
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bdc:	f7ff ff9c 	bl	8000b18 <chipSelect>
	  HAL_Delay(csDelay);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f001 f975 	bl	8001ed0 <HAL_Delay>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WREN, 1, 10);
 8000be6:	230a      	movs	r3, #10
 8000be8:	2201      	movs	r2, #1
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <WRENABLE_FM+0x68>)
 8000bec:	f107 0008 	add.w	r0, r7, #8
 8000bf0:	f003 fa0f 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_Delay(csDelay);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f001 f96b 	bl	8001ed0 <HAL_Delay>
	chipDeSelect(spiPort);
 8000bfa:	4668      	mov	r0, sp
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	2254      	movs	r2, #84	; 0x54
 8000c02:	4619      	mov	r1, r3
 8000c04:	f005 fa7e 	bl	8006104 <memcpy>
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0e:	f7ff ffab 	bl	8000b68 <chipDeSelect>
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c1a:	b004      	add	sp, #16
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000001 	.word	0x20000001

08000c24 <WRDISABLE_FM>:

void WRDISABLE_FM(SPI_HandleTypeDef spiPort)
{
 8000c24:	b084      	sub	sp, #16
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b096      	sub	sp, #88	; 0x58
 8000c2a:	af16      	add	r7, sp, #88	; 0x58
 8000c2c:	f107 0c08 	add.w	ip, r7, #8
 8000c30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	chipSelect(spiPort);
 8000c34:	4668      	mov	r0, sp
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	2254      	movs	r2, #84	; 0x54
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f005 fa61 	bl	8006104 <memcpy>
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c48:	f7ff ff66 	bl	8000b18 <chipSelect>
	  HAL_Delay(csDelay);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f001 f93f 	bl	8001ed0 <HAL_Delay>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRDI, 1, 10);
 8000c52:	230a      	movs	r3, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <WRDISABLE_FM+0x68>)
 8000c58:	f107 0008 	add.w	r0, r7, #8
 8000c5c:	f003 f9d9 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_Delay(csDelay);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f001 f935 	bl	8001ed0 <HAL_Delay>
	chipDeSelect(spiPort);
 8000c66:	4668      	mov	r0, sp
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2254      	movs	r2, #84	; 0x54
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f005 fa48 	bl	8006104 <memcpy>
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7a:	f7ff ff75 	bl	8000b68 <chipDeSelect>
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000002 	.word	0x20000002

08000c90 <writeSR>:

void writeSR(SPI_HandleTypeDef spiPort, uint8_t StatusR)
{
 8000c90:	b084      	sub	sp, #16
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b096      	sub	sp, #88	; 0x58
 8000c96:	af16      	add	r7, sp, #88	; 0x58
 8000c98:	f107 0c08 	add.w	ip, r7, #8
 8000c9c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	WRENABLE_FM(spiPort);
 8000ca0:	4668      	mov	r0, sp
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2254      	movs	r2, #84	; 0x54
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f005 fa2b 	bl	8006104 <memcpy>
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb4:	f7ff ff80 	bl	8000bb8 <WRENABLE_FM>
	chipSelect(spiPort);
 8000cb8:	4668      	mov	r0, sp
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	2254      	movs	r2, #84	; 0x54
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f005 fa1f 	bl	8006104 <memcpy>
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ccc:	f7ff ff24 	bl	8000b18 <chipSelect>
	HAL_Delay(csDelay);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 f8fd 	bl	8001ed0 <HAL_Delay>
	HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRSR, 1, 10);
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4911      	ldr	r1, [pc, #68]	; (8000d20 <writeSR+0x90>)
 8000cdc:	f107 0008 	add.w	r0, r7, #8
 8000ce0:	f003 f997 	bl	8004012 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&spiPort, (uint8_t *) &StatusR, 1, 10);
 8000ce4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000ce8:	230a      	movs	r3, #10
 8000cea:	2201      	movs	r2, #1
 8000cec:	f107 0008 	add.w	r0, r7, #8
 8000cf0:	f003 f98f 	bl	8004012 <HAL_SPI_Transmit>
	HAL_Delay(csDelay);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f001 f8eb 	bl	8001ed0 <HAL_Delay>
//	  printf("SR written:0x%02X SR read:0x%02X \r\n",StatusR, ReadSR(spiPort));
	chipDeSelect(spiPort);
 8000cfa:	4668      	mov	r0, sp
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	2254      	movs	r2, #84	; 0x54
 8000d02:	4619      	mov	r1, r3
 8000d04:	f005 f9fe 	bl	8006104 <memcpy>
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0e:	f7ff ff2b 	bl	8000b68 <chipDeSelect>
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1a:	b004      	add	sp, #16
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000004 	.word	0x20000004

08000d24 <write_3ByteAdd_FM>:
	chipDeSelect(spiPort);

	return SR;
}

void write_3ByteAdd_FM(SPI_HandleTypeDef spiPort, uint32_t Addr, uint8_t writeDataByte){
 8000d24:	b084      	sub	sp, #16
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b098      	sub	sp, #96	; 0x60
 8000d2a:	af16      	add	r7, sp, #88	; 0x58
 8000d2c:	f107 0c10 	add.w	ip, r7, #16
 8000d30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			uint8_t B1Add=Addr>> 16;
 8000d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	71fb      	strb	r3, [r7, #7]
			uint8_t B2Add=Addr>> 8;
 8000d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	71bb      	strb	r3, [r7, #6]
			uint8_t B3Add=Addr;
 8000d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	717b      	strb	r3, [r7, #5]

			WRENABLE_FM(spiPort);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	2254      	movs	r2, #84	; 0x54
 8000d52:	4619      	mov	r1, r3
 8000d54:	f005 f9d6 	bl	8006104 <memcpy>
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5e:	f7ff ff2b 	bl	8000bb8 <WRENABLE_FM>
			chipSelect(spiPort);
 8000d62:	4668      	mov	r0, sp
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	2254      	movs	r2, #84	; 0x54
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f005 f9ca 	bl	8006104 <memcpy>
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d76:	f7ff fecf 	bl	8000b18 <chipSelect>
	  		HAL_Delay(20);
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f001 f8a8 	bl	8001ed0 <HAL_Delay>

			  //Sending the write command
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &WRITE_3ByteAdd, 1, 100);
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	4928      	ldr	r1, [pc, #160]	; (8000e28 <write_3ByteAdd_FM+0x104>)
 8000d86:	f107 0010 	add.w	r0, r7, #16
 8000d8a:	f003 f942 	bl	8004012 <HAL_SPI_Transmit>
			  //Sending the address
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B1Add, 1, 100);
 8000d8e:	1df9      	adds	r1, r7, #7
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	f107 0010 	add.w	r0, r7, #16
 8000d98:	f003 f93b 	bl	8004012 <HAL_SPI_Transmit>
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B2Add, 1, 100);
 8000d9c:	1db9      	adds	r1, r7, #6
 8000d9e:	2364      	movs	r3, #100	; 0x64
 8000da0:	2201      	movs	r2, #1
 8000da2:	f107 0010 	add.w	r0, r7, #16
 8000da6:	f003 f934 	bl	8004012 <HAL_SPI_Transmit>
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B3Add, 1, 100);
 8000daa:	1d79      	adds	r1, r7, #5
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2201      	movs	r2, #1
 8000db0:	f107 0010 	add.w	r0, r7, #16
 8000db4:	f003 f92d 	bl	8004012 <HAL_SPI_Transmit>
			  //Sending the data byte
			  HAL_SPI_Transmit(&spiPort, (uint8_t *) &writeDataByte, 1, 100);
 8000db8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f107 0010 	add.w	r0, r7, #16
 8000dc4:	f003 f925 	bl	8004012 <HAL_SPI_Transmit>
//			  {
//				  printf("Waiting/r/n");
//			  } //wait

			  //printing into debug terminal
			  printf("Wrote 0x%02X in    FM address 0x%02X%02X%02X\r\n",writeDataByte,B1Add,B2Add,B3Add);
 8000dc8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000dcc:	4619      	mov	r1, r3
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <write_3ByteAdd_FM+0x108>)
 8000dde:	f005 f9a7 	bl	8006130 <iprintf>
	  		HAL_Delay(20);
 8000de2:	2014      	movs	r0, #20
 8000de4:	f001 f874 	bl	8001ed0 <HAL_Delay>
			chipDeSelect(spiPort);
 8000de8:	4668      	mov	r0, sp
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2254      	movs	r2, #84	; 0x54
 8000df0:	4619      	mov	r1, r3
 8000df2:	f005 f987 	bl	8006104 <memcpy>
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfc:	f7ff feb4 	bl	8000b68 <chipDeSelect>
			WRDISABLE_FM(spiPort);
 8000e00:	4668      	mov	r0, sp
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2254      	movs	r2, #84	; 0x54
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f005 f97b 	bl	8006104 <memcpy>
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e14:	f7ff ff06 	bl	8000c24 <WRDISABLE_FM>
	return;
 8000e18:	bf00      	nop
}
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000006 	.word	0x20000006
 8000e2c:	080075c0 	.word	0x080075c0

08000e30 <read_3ByteAdd_FM>:

int read_3ByteAdd_FM(SPI_HandleTypeDef spiPort, uint32_t Addr){
 8000e30:	b084      	sub	sp, #16
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b098      	sub	sp, #96	; 0x60
 8000e36:	af16      	add	r7, sp, #88	; 0x58
 8000e38:	f107 0c10 	add.w	ip, r7, #16
 8000e3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t readDataByte=0x77;
 8000e40:	2377      	movs	r3, #119	; 0x77
 8000e42:	71fb      	strb	r3, [r7, #7]

	uint8_t B1Add=Addr>> 16;
 8000e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	71bb      	strb	r3, [r7, #6]
	uint8_t B2Add=Addr>> 8;
 8000e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	717b      	strb	r3, [r7, #5]
	uint8_t B3Add=Addr;
 8000e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	713b      	strb	r3, [r7, #4]

	chipSelect(spiPort);
 8000e5a:	4668      	mov	r0, sp
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	2254      	movs	r2, #84	; 0x54
 8000e62:	4619      	mov	r1, r3
 8000e64:	f005 f94e 	bl	8006104 <memcpy>
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	f7ff fe53 	bl	8000b18 <chipSelect>

	  //Sending the write command
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &READ_3ByteAdd, 1, 100);
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2201      	movs	r2, #1
 8000e76:	4923      	ldr	r1, [pc, #140]	; (8000f04 <read_3ByteAdd_FM+0xd4>)
 8000e78:	f107 0010 	add.w	r0, r7, #16
 8000e7c:	f003 f8c9 	bl	8004012 <HAL_SPI_Transmit>
	  //Sending the address
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B1Add, 1, 100);
 8000e80:	1db9      	adds	r1, r7, #6
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	2201      	movs	r2, #1
 8000e86:	f107 0010 	add.w	r0, r7, #16
 8000e8a:	f003 f8c2 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B2Add, 1, 100);
 8000e8e:	1d79      	adds	r1, r7, #5
 8000e90:	2364      	movs	r3, #100	; 0x64
 8000e92:	2201      	movs	r2, #1
 8000e94:	f107 0010 	add.w	r0, r7, #16
 8000e98:	f003 f8bb 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B3Add, 1, 100);
 8000e9c:	1d39      	adds	r1, r7, #4
 8000e9e:	2364      	movs	r3, #100	; 0x64
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f107 0010 	add.w	r0, r7, #16
 8000ea6:	f003 f8b4 	bl	8004012 <HAL_SPI_Transmit>
	  //Receiving the data byte
	  HAL_SPI_Receive(&spiPort, (uint8_t *) &readDataByte, 1, 100);
 8000eaa:	1df9      	adds	r1, r7, #7
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f107 0010 	add.w	r0, r7, #16
 8000eb4:	f003 fa1b 	bl	80042ee <HAL_SPI_Receive>

	  //printing into debug terminal
	  printf("read  0x%02X from  FM address 0x%02X%02X%02X\r\n",readDataByte,B1Add,B2Add,B3Add);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <read_3ByteAdd_FM+0xd8>)
 8000ecc:	f005 f930 	bl	8006130 <iprintf>

		  HAL_Delay(10);
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f000 fffd 	bl	8001ed0 <HAL_Delay>
		   chipDeSelect(spiPort);
 8000ed6:	4668      	mov	r0, sp
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	2254      	movs	r2, #84	; 0x54
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f005 f910 	bl	8006104 <memcpy>
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eea:	f7ff fe3d 	bl	8000b68 <chipDeSelect>
		  HAL_Delay(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f000 ffee 	bl	8001ed0 <HAL_Delay>

		  return readDataByte;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr
 8000f04:	20000005 	.word	0x20000005
 8000f08:	080075f0 	.word	0x080075f0

08000f0c <eraseSector_3ByteAdd_FM>:

void eraseSector_3ByteAdd_FM(SPI_HandleTypeDef spiPort, uint32_t StartingAddr)
{
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b098      	sub	sp, #96	; 0x60
 8000f12:	af16      	add	r7, sp, #88	; 0x58
 8000f14:	f107 0c10 	add.w	ip, r7, #16
 8000f18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t B1Add=StartingAddr>> 16;
 8000f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	71fb      	strb	r3, [r7, #7]
	uint8_t B2Add=StartingAddr>> 8;
 8000f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t B3Add=StartingAddr;
 8000f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	717b      	strb	r3, [r7, #5]

	WRENABLE_FM(spiPort);
 8000f32:	4668      	mov	r0, sp
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	2254      	movs	r2, #84	; 0x54
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f005 f8e2 	bl	8006104 <memcpy>
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f46:	f7ff fe37 	bl	8000bb8 <WRENABLE_FM>
	chipSelect(spiPort);
 8000f4a:	4668      	mov	r0, sp
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	2254      	movs	r2, #84	; 0x54
 8000f52:	4619      	mov	r1, r3
 8000f54:	f005 f8d6 	bl	8006104 <memcpy>
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	f7ff fddb 	bl	8000b18 <chipSelect>

	  HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f000 ffb4 	bl	8001ed0 <HAL_Delay>
	  //Sending the write command
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &SECTORERASE_3ByteAdd, 1, 10);
 8000f68:	230a      	movs	r3, #10
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4920      	ldr	r1, [pc, #128]	; (8000ff0 <eraseSector_3ByteAdd_FM+0xe4>)
 8000f6e:	f107 0010 	add.w	r0, r7, #16
 8000f72:	f003 f84e 	bl	8004012 <HAL_SPI_Transmit>
	  //Sending the address
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B1Add, 1, 10);
 8000f76:	1df9      	adds	r1, r7, #7
 8000f78:	230a      	movs	r3, #10
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f107 0010 	add.w	r0, r7, #16
 8000f80:	f003 f847 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B2Add, 1, 10);
 8000f84:	1db9      	adds	r1, r7, #6
 8000f86:	230a      	movs	r3, #10
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f107 0010 	add.w	r0, r7, #16
 8000f8e:	f003 f840 	bl	8004012 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&spiPort, (uint8_t *) &B3Add, 1, 10);
 8000f92:	1d79      	adds	r1, r7, #5
 8000f94:	230a      	movs	r3, #10
 8000f96:	2201      	movs	r2, #1
 8000f98:	f107 0010 	add.w	r0, r7, #16
 8000f9c:	f003 f839 	bl	8004012 <HAL_SPI_Transmit>

	  chipDeSelect(spiPort);
 8000fa0:	4668      	mov	r0, sp
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2254      	movs	r2, #84	; 0x54
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f005 f8ab 	bl	8006104 <memcpy>
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb4:	f7ff fdd8 	bl	8000b68 <chipDeSelect>
	  HAL_Delay(2000);
 8000fb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fbc:	f000 ff88 	bl	8001ed0 <HAL_Delay>

	  StringLength=sprintf(txString,"Erasing sector %X in FM \r\n",StartingAddr);
 8000fc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc2:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <eraseSector_3ByteAdd_FM+0xe8>)
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <eraseSector_3ByteAdd_FM+0xec>)
 8000fc6:	f005 f941 	bl	800624c <siprintf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <eraseSector_3ByteAdd_FM+0xf0>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&serialPortDebug, (uint8_t *) &txString, StringLength, 100);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <eraseSector_3ByteAdd_FM+0xf0>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <eraseSector_3ByteAdd_FM+0xec>)
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <eraseSector_3ByteAdd_FM+0xf4>)
 8000fde:	f004 f813 	bl	8005008 <HAL_UART_Transmit>

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fec:	b004      	add	sp, #16
 8000fee:	4770      	bx	lr
 8000ff0:	20000007 	.word	0x20000007
 8000ff4:	08007620 	.word	0x08007620
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	2000009c 	.word	0x2000009c
 8001000:	2000029c 	.word	0x2000029c

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_QUADSPI_Init+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001026:	2201      	movs	r2, #1
 8001028:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001032:	2201      	movs	r2, #1
 8001034:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001050:	f001 fdb6 	bl	8002bc0 <HAL_QSPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800105a:	f7ff ffd3 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000d4 	.word	0x200000d4
 8001068:	a0001000 	.word	0xa0001000

0800106c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a35      	ldr	r2, [pc, #212]	; (8001160 <HAL_QSPI_MspInit+0xf4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d164      	bne.n	8001158 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 8001090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6393      	str	r3, [r2, #56]	; 0x38
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a28      	ldr	r2, [pc, #160]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_QSPI_MspInit+0xf8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010e6:	2309      	movs	r3, #9
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	481d      	ldr	r0, [pc, #116]	; (8001168 <HAL_QSPI_MspInit+0xfc>)
 80010f2:	f001 fb9f 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001108:	230a      	movs	r3, #10
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4815      	ldr	r0, [pc, #84]	; (8001168 <HAL_QSPI_MspInit+0xfc>)
 8001114:	f001 fb8e 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001128:	2309      	movs	r3, #9
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <HAL_QSPI_MspInit+0x100>)
 8001134:	f001 fb7e 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001148:	230a      	movs	r3, #10
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <HAL_QSPI_MspInit+0x100>)
 8001154:	f001 fb6e 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	a0001000 	.word	0xa0001000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400
 800116c:	40020400 	.word	0x40020400

08001170 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_SPI1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_SPI1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_SPI1_Init+0x74>)
 800117c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_SPI1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_SPI1_Init+0x74>)
 800118a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800118e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_SPI1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_SPI1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_SPI1_Init+0x74>)
 800119e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011a6:	2210      	movs	r2, #16
 80011a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011be:	2207      	movs	r2, #7
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_SPI1_Init+0x74>)
 80011d0:	f002 fe74 	bl	8003ebc <HAL_SPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f7ff ff13 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000120 	.word	0x20000120
 80011e8:	40013000 	.word	0x40013000

080011ec <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_SPI3_Init+0x68>)
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <MX_SPI3_Init+0x6c>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_SPI3_Init+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_SPI3_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_SPI3_Init+0x68>)
 8001204:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001208:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_SPI3_Init+0x68>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_SPI3_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_SPI3_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_SPI3_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SPI3_Init+0x68>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_SPI3_Init+0x68>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SPI3_Init+0x68>)
 8001230:	2207      	movs	r2, #7
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_SPI3_Init+0x68>)
 8001236:	2200      	movs	r2, #0
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SPI3_Init+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_SPI3_Init+0x68>)
 8001242:	f002 fe3b 	bl	8003ebc <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800124c:	f7ff feda 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000184 	.word	0x20000184
 8001258:	40003c00 	.word	0x40003c00

0800125c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_SPI4_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001276:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800127a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_SPI4_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_SPI4_Init+0x74>)
 800128a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001292:	2228      	movs	r2, #40	; 0x28
 8001294:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_SPI4_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_SPI4_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_SPI4_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_SPI4_Init+0x74>)
 80012aa:	2207      	movs	r2, #7
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_SPI4_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_SPI4_Init+0x74>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_SPI4_Init+0x74>)
 80012bc:	f002 fdfe 	bl	8003ebc <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f7ff fe9d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001e8 	.word	0x200001e8
 80012d4:	40013400 	.word	0x40013400

080012d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_SPI_MspInit+0x170>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fa:	4b54      	ldr	r3, [pc, #336]	; (800144c <HAL_SPI_MspInit+0x174>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23e0      	movs	r3, #224	; 0xe0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133a:	2305      	movs	r3, #5
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4842      	ldr	r0, [pc, #264]	; (8001450 <HAL_SPI_MspInit+0x178>)
 8001346:	f001 fa75 	bl	8002834 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800134a:	e078      	b.n	800143e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_SPI_MspInit+0x17c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d146      	bne.n	80013e4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_SPI_MspInit+0x174>)
 800135c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_SPI_MspInit+0x174>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <HAL_SPI_MspInit+0x174>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b0:	2306      	movs	r3, #6
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4825      	ldr	r0, [pc, #148]	; (8001450 <HAL_SPI_MspInit+0x178>)
 80013bc:	f001 fa3a 	bl	8002834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d2:	2306      	movs	r3, #6
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	481e      	ldr	r0, [pc, #120]	; (8001458 <HAL_SPI_MspInit+0x180>)
 80013de:	f001 fa29 	bl	8002834 <HAL_GPIO_Init>
}
 80013e2:	e02c      	b.n	800143e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_SPI_MspInit+0x184>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d127      	bne.n	800143e <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_SPI_MspInit+0x174>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_SPI_MspInit+0x174>)
 80013f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_SPI_MspInit+0x174>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_SPI_MspInit+0x174>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_SPI_MspInit+0x174>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800142e:	2305      	movs	r3, #5
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_SPI_MspInit+0x188>)
 800143a:	f001 f9fb 	bl	8002834 <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	3738      	adds	r7, #56	; 0x38
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013000 	.word	0x40013000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40003c00 	.word	0x40003c00
 8001458:	40020800 	.word	0x40020800
 800145c:	40013400 	.word	0x40013400
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x44>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x44>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x44>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x44>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x44>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x44>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 fcc6 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART1_IRQHandler+0x10>)
 800150e:	f003 fdff 	bl	8005110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000029c 	.word	0x2000029c

0800151c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA2_Stream5_IRQHandler+0x10>)
 8001522:	f000 ff4b 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200003ac 	.word	0x200003ac

08001530 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00a      	b.n	8001558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001542:	f3af 8000 	nop.w
 8001546:	4601      	mov	r1, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	b2ca      	uxtb	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf0      	blt.n	8001542 <_read+0x12>
	}

return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e009      	b.n	8001590 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f8db 	bl	8000740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf1      	blt.n	800157c <_write+0x12>
	}
	return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_close>:

int _close(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	return -1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ca:	605a      	str	r2, [r3, #4]
	return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_isatty>:

int _isatty(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f004 fd38 	bl	80060b0 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20080000 	.word	0x20080000
 800166c:	00000400 	.word	0x00000400
 8001670:	2000024c 	.word	0x2000024c
 8001674:	20000448 	.word	0x20000448

08001678 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <SystemInit+0x28>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <SystemInit+0x28>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SystemInit+0x28>)
 800168e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001692:	609a      	str	r2, [r3, #8]
#endif
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <MX_TIM14_Init+0x44>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016b0:	2250      	movs	r2, #80	; 0x50
 80016b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM14_Init+0x40>)
 80016d0:	f003 fb54 	bl	8004d7c <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80016da:	f7ff fc93 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000250 	.word	0x20000250
 80016e8:	40002000 	.word	0x40002000

080016ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_TIM_Base_MspInit+0x38>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_TIM_Base_MspInit+0x3c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_TIM_Base_MspInit+0x3c>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_TIM_Base_MspInit+0x3c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40002000 	.word	0x40002000
 8001728:	40023800 	.word	0x40023800

0800172c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <MX_USART1_UART_Init+0x5c>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001770:	f003 fbfc 	bl	8004f6c <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800177a:	f7ff fc43 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000029c 	.word	0x2000029c
 8001788:	40011000 	.word	0x40011000

0800178c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <MX_USART2_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017d0:	f003 fbcc 	bl	8004f6c <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017da:	f7ff fc13 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000324 	.word	0x20000324
 80017e8:	40004400 	.word	0x40004400

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0b0      	sub	sp, #192	; 0xc0
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2290      	movs	r2, #144	; 0x90
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fc87 	bl	8006120 <memset>
  if(uartHandle->Instance==USART1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5d      	ldr	r2, [pc, #372]	; (800198c <HAL_UART_MspInit+0x1a0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d173      	bne.n	8001904 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001820:	2300      	movs	r3, #0
 8001822:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4618      	mov	r0, r3
 800182a:	f001 ff1f 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001834:	f7ff fbe6 	bl	8001004 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6453      	str	r3, [r2, #68]	; 0x44
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001868:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001882:	2307      	movs	r3, #7
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800188c:	4619      	mov	r1, r3
 800188e:	4841      	ldr	r0, [pc, #260]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001890:	f000 ffd0 	bl	8002834 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 8001896:	4a41      	ldr	r2, [pc, #260]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001898:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 800189c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80018c2:	4b35      	ldr	r3, [pc, #212]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018d6:	4830      	ldr	r0, [pc, #192]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018d8:	f000 fc30 	bl	800213c <HAL_DMA_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80018e2:	f7ff fb8f 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018ea:	675a      	str	r2, [r3, #116]	; 0x74
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2025      	movs	r0, #37	; 0x25
 80018f8:	f000 fbe9 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018fc:	2025      	movs	r0, #37	; 0x25
 80018fe:	f000 fc02 	bl	8002106 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001902:	e03f      	b.n	8001984 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_UART_MspInit+0x1b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13a      	bne.n	8001984 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001912:	2300      	movs	r3, #0
 8001914:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fea6 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8001926:	f7ff fb6d 	bl	8001004 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800195a:	230c      	movs	r3, #12
 800195c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001972:	2307      	movs	r3, #7
 8001974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800197c:	4619      	mov	r1, r3
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001980:	f000 ff58 	bl	8002834 <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	37c0      	adds	r7, #192	; 0xc0
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40011000 	.word	0x40011000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	200003ac 	.word	0x200003ac
 800199c:	40026488 	.word	0x40026488
 80019a0:	40004400 	.word	0x40004400

080019a4 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80019ae:	f107 020f 	add.w	r2, r7, #15
 80019b2:	1df9      	adds	r1, r7, #7
 80019b4:	2364      	movs	r3, #100	; 0x64
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <W25qxx_Spi+0x28>)
 80019bc:	f002 fdc7 	bl	800454e <HAL_SPI_TransmitReceive>
	return ret;	
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000120 	.word	0x20000120

080019d0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2110      	movs	r1, #16
 80019ea:	4813      	ldr	r0, [pc, #76]	; (8001a38 <W25qxx_ReadID+0x68>)
 80019ec:	f001 f8ce 	bl	8002b8c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80019f0:	209f      	movs	r0, #159	; 0x9f
 80019f2:	f7ff ffd7 	bl	80019a4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80019f6:	20a5      	movs	r0, #165	; 0xa5
 80019f8:	f7ff ffd4 	bl	80019a4 <W25qxx_Spi>
 80019fc:	4603      	mov	r3, r0
 80019fe:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a00:	20a5      	movs	r0, #165	; 0xa5
 8001a02:	f7ff ffcf 	bl	80019a4 <W25qxx_Spi>
 8001a06:	4603      	mov	r3, r0
 8001a08:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a0a:	20a5      	movs	r0, #165	; 0xa5
 8001a0c:	f7ff ffca 	bl	80019a4 <W25qxx_Spi>
 8001a10:	4603      	mov	r3, r0
 8001a12:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2110      	movs	r1, #16
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <W25qxx_ReadID+0x68>)
 8001a1a:	f001 f8b7 	bl	8002b8c <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4313      	orrs	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  return Temp;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40020000 	.word	0x40020000

08001a3c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2110      	movs	r1, #16
 8001a46:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <W25qxx_ReadUniqID+0x64>)
 8001a48:	f001 f8a0 	bl	8002b8c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8001a4c:	204b      	movs	r0, #75	; 0x4b
 8001a4e:	f7ff ffa9 	bl	80019a4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	e005      	b.n	8001a64 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a58:	20a5      	movs	r0, #165	; 0xa5
 8001a5a:	f7ff ffa3 	bl	80019a4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	3301      	adds	r3, #1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d9f6      	bls.n	8001a58 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	e00b      	b.n	8001a88 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001a70:	79bc      	ldrb	r4, [r7, #6]
 8001a72:	20a5      	movs	r0, #165	; 0xa5
 8001a74:	f7ff ff96 	bl	80019a4 <W25qxx_Spi>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <W25qxx_ReadUniqID+0x68>)
 8001a7e:	4423      	add	r3, r4
 8001a80:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	3301      	adds	r3, #1
 8001a86:	71bb      	strb	r3, [r7, #6]
 8001a88:	79bb      	ldrb	r3, [r7, #6]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d9f0      	bls.n	8001a70 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2110      	movs	r1, #16
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <W25qxx_ReadUniqID+0x64>)
 8001a94:	f001 f87a 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	2000040c 	.word	0x2000040c

08001aa8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2110      	movs	r1, #16
 8001aba:	481c      	ldr	r0, [pc, #112]	; (8001b2c <W25qxx_ReadStatusRegister+0x84>)
 8001abc:	f001 f866 	bl	8002b8c <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10c      	bne.n	8001ae0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001ac6:	2005      	movs	r0, #5
 8001ac8:	f7ff ff6c 	bl	80019a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001acc:	20a5      	movs	r0, #165	; 0xa5
 8001ace:	f7ff ff69 	bl	80019a4 <W25qxx_Spi>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <W25qxx_ReadStatusRegister+0x88>)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001ade:	e01b      	b.n	8001b18 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d10c      	bne.n	8001b00 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001ae6:	2035      	movs	r0, #53	; 0x35
 8001ae8:	f7ff ff5c 	bl	80019a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001aec:	20a5      	movs	r0, #165	; 0xa5
 8001aee:	f7ff ff59 	bl	80019a4 <W25qxx_Spi>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <W25qxx_ReadStatusRegister+0x88>)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001afe:	e00b      	b.n	8001b18 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001b00:	2015      	movs	r0, #21
 8001b02:	f7ff ff4f 	bl	80019a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001b06:	20a5      	movs	r0, #165	; 0xa5
 8001b08:	f7ff ff4c 	bl	80019a4 <W25qxx_Spi>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <W25qxx_ReadStatusRegister+0x88>)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <W25qxx_ReadStatusRegister+0x84>)
 8001b1e:	f001 f835 	bl	8002b8c <HAL_GPIO_WritePin>
	return status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	2000040c 	.word	0x2000040c

08001b34 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8001b3a:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <W25qxx_Init+0x230>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8001b42:	e002      	b.n	8001b4a <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8001b44:	2064      	movs	r0, #100	; 0x64
 8001b46:	f000 f9c3 	bl	8001ed0 <HAL_Delay>
	while(HAL_GetTick()<100)
 8001b4a:	f000 f9b5 	bl	8001eb8 <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b63      	cmp	r3, #99	; 0x63
 8001b52:	d9f7      	bls.n	8001b44 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2110      	movs	r1, #16
 8001b58:	4883      	ldr	r0, [pc, #524]	; (8001d68 <W25qxx_Init+0x234>)
 8001b5a:	f001 f817 	bl	8002b8c <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001b5e:	2064      	movs	r0, #100	; 0x64
 8001b60:	f000 f9b6 	bl	8001ed0 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 8001b64:	4881      	ldr	r0, [pc, #516]	; (8001d6c <W25qxx_Init+0x238>)
 8001b66:	f004 fb69 	bl	800623c <puts>
	#endif
	id=W25qxx_ReadID();
 8001b6a:	f7ff ff31 	bl	80019d0 <W25qxx_ReadID>
 8001b6e:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	487f      	ldr	r0, [pc, #508]	; (8001d70 <W25qxx_Init+0x23c>)
 8001b74:	f004 fadc 	bl	8006130 <iprintf>
	#endif
	switch(id&0x0000FFFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <W25qxx_Init+0x240>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d87e      	bhi.n	8001c82 <W25qxx_Init+0x14e>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <W25qxx_Init+0x58>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001c6f 	.word	0x08001c6f
 8001b90:	08001c5b 	.word	0x08001c5b
 8001b94:	08001c47 	.word	0x08001c47
 8001b98:	08001c33 	.word	0x08001c33
 8001b9c:	08001c1f 	.word	0x08001c1f
 8001ba0:	08001c0b 	.word	0x08001c0b
 8001ba4:	08001bf7 	.word	0x08001bf7
 8001ba8:	08001be1 	.word	0x08001be1
 8001bac:	08001bcb 	.word	0x08001bcb
 8001bb0:	08001bb5 	.word	0x08001bb5
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <W25qxx_Init+0x230>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8001bba:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <W25qxx_Init+0x230>)
 8001bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 8001bc2:	486d      	ldr	r0, [pc, #436]	; (8001d78 <W25qxx_Init+0x244>)
 8001bc4:	f004 fb3a 	bl	800623c <puts>
			#endif
		break;
 8001bc8:	e064      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <W25qxx_Init+0x230>)
 8001bcc:	2209      	movs	r2, #9
 8001bce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <W25qxx_Init+0x230>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 8001bd8:	4868      	ldr	r0, [pc, #416]	; (8001d7c <W25qxx_Init+0x248>)
 8001bda:	f004 fb2f 	bl	800623c <puts>
			#endif
		break;
 8001bde:	e059      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8001be0:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <W25qxx_Init+0x230>)
 8001be2:	2208      	movs	r2, #8
 8001be4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <W25qxx_Init+0x230>)
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 8001bee:	4864      	ldr	r0, [pc, #400]	; (8001d80 <W25qxx_Init+0x24c>)
 8001bf0:	f004 fb24 	bl	800623c <puts>
			#endif
		break;
 8001bf4:	e04e      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <W25qxx_Init+0x230>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <W25qxx_Init+0x230>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 8001c02:	4860      	ldr	r0, [pc, #384]	; (8001d84 <W25qxx_Init+0x250>)
 8001c04:	f004 fb1a 	bl	800623c <puts>
			#endif
		break;
 8001c08:	e044      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8001c0a:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <W25qxx_Init+0x230>)
 8001c0c:	2206      	movs	r2, #6
 8001c0e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001c10:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <W25qxx_Init+0x230>)
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <W25qxx_Init+0x254>)
 8001c18:	f004 fb10 	bl	800623c <puts>
			#endif
		break;
 8001c1c:	e03a      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <W25qxx_Init+0x230>)
 8001c20:	2205      	movs	r2, #5
 8001c22:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001c24:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <W25qxx_Init+0x230>)
 8001c26:	2220      	movs	r2, #32
 8001c28:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 8001c2a:	4858      	ldr	r0, [pc, #352]	; (8001d8c <W25qxx_Init+0x258>)
 8001c2c:	f004 fb06 	bl	800623c <puts>
			#endif
		break;
 8001c30:	e030      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8001c32:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <W25qxx_Init+0x230>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001c38:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <W25qxx_Init+0x230>)
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 8001c3e:	4854      	ldr	r0, [pc, #336]	; (8001d90 <W25qxx_Init+0x25c>)
 8001c40:	f004 fafc 	bl	800623c <puts>
			#endif
		break;
 8001c44:	e026      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <W25qxx_Init+0x230>)
 8001c48:	2203      	movs	r2, #3
 8001c4a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <W25qxx_Init+0x230>)
 8001c4e:	2208      	movs	r2, #8
 8001c50:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 8001c52:	4850      	ldr	r0, [pc, #320]	; (8001d94 <W25qxx_Init+0x260>)
 8001c54:	f004 faf2 	bl	800623c <puts>
			#endif
		break;
 8001c58:	e01c      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <W25qxx_Init+0x230>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <W25qxx_Init+0x230>)
 8001c62:	2204      	movs	r2, #4
 8001c64:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 8001c66:	484c      	ldr	r0, [pc, #304]	; (8001d98 <W25qxx_Init+0x264>)
 8001c68:	f004 fae8 	bl	800623c <puts>
			#endif
		break;
 8001c6c:	e012      	b.n	8001c94 <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <W25qxx_Init+0x230>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <W25qxx_Init+0x230>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 8001c7a:	4848      	ldr	r0, [pc, #288]	; (8001d9c <W25qxx_Init+0x268>)
 8001c7c:	f004 fade 	bl	800623c <puts>
			#endif
		break;
 8001c80:	e008      	b.n	8001c94 <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8001c82:	4847      	ldr	r0, [pc, #284]	; (8001da0 <W25qxx_Init+0x26c>)
 8001c84:	f004 fada 	bl	800623c <puts>
				#endif
			w25qxx.Lock=0;	
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <W25qxx_Init+0x230>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e063      	b.n	8001d5c <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <W25qxx_Init+0x230>)
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <W25qxx_Init+0x230>)
 8001c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <W25qxx_Init+0x230>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <W25qxx_Init+0x230>)
 8001cac:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <W25qxx_Init+0x230>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <W25qxx_Init+0x230>)
 8001cb4:	6912      	ldr	r2, [r2, #16]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <W25qxx_Init+0x230>)
 8001cbc:	8952      	ldrh	r2, [r2, #10]
 8001cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <W25qxx_Init+0x230>)
 8001cc4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001cc6:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <W25qxx_Init+0x230>)
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <W25qxx_Init+0x230>)
 8001cce:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <W25qxx_Init+0x230>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <W25qxx_Init+0x230>)
 8001cd6:	6912      	ldr	r2, [r2, #16]
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	0a9b      	lsrs	r3, r3, #10
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <W25qxx_Init+0x230>)
 8001ce0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001ce2:	f7ff feab 	bl	8001a3c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fede 	bl	8001aa8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7ff fedb 	bl	8001aa8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7ff fed8 	bl	8001aa8 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <W25qxx_Init+0x230>)
 8001cfa:	895b      	ldrh	r3, [r3, #10]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4829      	ldr	r0, [pc, #164]	; (8001da4 <W25qxx_Init+0x270>)
 8001d00:	f004 fa16 	bl	8006130 <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <W25qxx_Init+0x230>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <W25qxx_Init+0x274>)
 8001d0c:	f004 fa10 	bl	8006130 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <W25qxx_Init+0x230>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4825      	ldr	r0, [pc, #148]	; (8001dac <W25qxx_Init+0x278>)
 8001d18:	f004 fa0a 	bl	8006130 <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <W25qxx_Init+0x230>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4823      	ldr	r0, [pc, #140]	; (8001db0 <W25qxx_Init+0x27c>)
 8001d24:	f004 fa04 	bl	8006130 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <W25qxx_Init+0x230>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4821      	ldr	r0, [pc, #132]	; (8001db4 <W25qxx_Init+0x280>)
 8001d30:	f004 f9fe 	bl	8006130 <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <W25qxx_Init+0x230>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481f      	ldr	r0, [pc, #124]	; (8001db8 <W25qxx_Init+0x284>)
 8001d3c:	f004 f9f8 	bl	8006130 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <W25qxx_Init+0x230>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4619      	mov	r1, r3
 8001d46:	481d      	ldr	r0, [pc, #116]	; (8001dbc <W25qxx_Init+0x288>)
 8001d48:	f004 f9f2 	bl	8006130 <iprintf>
	printf("w25qxx Init Done\r\n");
 8001d4c:	481c      	ldr	r0, [pc, #112]	; (8001dc0 <W25qxx_Init+0x28c>)
 8001d4e:	f004 fa75 	bl	800623c <puts>
	#endif
	w25qxx.Lock=0;	
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <W25qxx_Init+0x230>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001d5a:	2301      	movs	r3, #1
}	
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000040c 	.word	0x2000040c
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	080077e8 	.word	0x080077e8
 8001d70:	08007800 	.word	0x08007800
 8001d74:	ffffbfef 	.word	0xffffbfef
 8001d78:	08007814 	.word	0x08007814
 8001d7c:	0800782c 	.word	0x0800782c
 8001d80:	08007844 	.word	0x08007844
 8001d84:	0800785c 	.word	0x0800785c
 8001d88:	08007874 	.word	0x08007874
 8001d8c:	0800788c 	.word	0x0800788c
 8001d90:	080078a4 	.word	0x080078a4
 8001d94:	080078bc 	.word	0x080078bc
 8001d98:	080078d4 	.word	0x080078d4
 8001d9c:	080078ec 	.word	0x080078ec
 8001da0:	08007904 	.word	0x08007904
 8001da4:	08007918 	.word	0x08007918
 8001da8:	08007938 	.word	0x08007938
 8001dac:	08007950 	.word	0x08007950
 8001db0:	08007970 	.word	0x08007970
 8001db4:	0800798c 	.word	0x0800798c
 8001db8:	080079ac 	.word	0x080079ac
 8001dbc:	080079c8 	.word	0x080079c8
 8001dc0:	080079e8 	.word	0x080079e8

08001dc4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>
  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  movs  r1, #0
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
  b  LoopCopyDataInit
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)

 8001dce:	2300      	movs	r3, #0
CopyDataInit:
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  adds  r1, r1, #4
 8001dd4:	50c4      	str	r4, [r0, r3]
    
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
 8001dd8:	18c4      	adds	r4, r0, r3
  adds  r2, r0, r1
 8001dda:	428c      	cmp	r4, r1
  cmp  r2, r3
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
/* Zero fill the bss segment. */  
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
FillZerobss:
 8001de2:	2300      	movs	r3, #0
  movs  r3, #0
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:
  str  r3, [r2], #4
    
LoopFillZerobss:
 8001de6:	6013      	str	r3, [r2, #0]
  ldr  r3, = _ebss
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:
  cmp  r2, r3
  bcc  FillZerobss

 8001dea:	42a2      	cmp	r2, r4
/* Call the clock system initialization function.*/
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
 8001dee:	f7ff fc43 	bl	8001678 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f004 f963 	bl	80060bc <__libc_init_array>
  bx  lr    
.size  Reset_Handler, .-Reset_Handler
 8001df6:	f7fe fcb5 	bl	8000764 <main>

 8001dfa:	4770      	bx	lr
Reset_Handler:  
 8001dfc:	20080000 	.word	0x20080000
/* Copy the data segment initializers from flash to SRAM */  
 8001e00:	20000000 	.word	0x20000000
  movs  r1, #0
 8001e04:	20000078 	.word	0x20000078
  b  LoopCopyDataInit
 8001e08:	080080fc 	.word	0x080080fc
  b  LoopFillZerobss
 8001e0c:	20000078 	.word	0x20000078
/* Zero fill the bss segment. */  
 8001e10:	20000448 	.word	0x20000448

08001e14 <ADC_IRQHandler>:
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  .size  Default_Handler, .-Default_Handler
/******************************************************************************
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>

08001e16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f000 f94c 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f000 f805 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e26:	f7ff fb1d 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f967 	bl	8002122 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f92f 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	20000434 	.word	0x20000434

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000434 	.word	0x20000434

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000010 	.word	0x20000010

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	05fa0000 	.word	0x05fa0000

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feb6 	bl	8001eb8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e099      	b.n	800228c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	e00f      	b.n	800219a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217a:	f7ff fe9d 	bl	8001eb8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b05      	cmp	r3, #5
 8002186:	d908      	bls.n	800219a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e078      	b.n	800228c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e8      	bne.n	800217a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_DMA_Init+0x158>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4313      	orrs	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d117      	bne.n	800225e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa7b 	bl	800273c <DMA_CheckFifoParam>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225a:	2301      	movs	r3, #1
 800225c:	e016      	b.n	800228c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa32 	bl	80026d0 <DMA_CalcBaseAndBitshift>
 800226c:	4603      	mov	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	223f      	movs	r2, #63	; 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	e010803f 	.word	0xe010803f

08002298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a6:	f7ff fe07 	bl	8001eb8 <HAL_GetTick>
 80022aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d008      	beq.n	80022ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e052      	b.n	8002370 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0216 	bic.w	r2, r2, #22
 80022d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <HAL_DMA_Abort+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0208 	bic.w	r2, r2, #8
 8002308:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231a:	e013      	b.n	8002344 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231c:	f7ff fdcc 	bl	8001eb8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d90c      	bls.n	8002344 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e015      	b.n	8002370 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e4      	bne.n	800231c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	223f      	movs	r2, #63	; 0x3f
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d004      	beq.n	8002396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00c      	b.n	80023b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023c8:	4b8e      	ldr	r3, [pc, #568]	; (8002604 <HAL_DMA_IRQHandler+0x248>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a8e      	ldr	r2, [pc, #568]	; (8002608 <HAL_DMA_IRQHandler+0x24c>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2208      	movs	r2, #8
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2208      	movs	r2, #8
 8002416:	409a      	lsls	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	2201      	movs	r2, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2201      	movs	r2, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	2204      	movs	r2, #4
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2210      	movs	r2, #16
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d043      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d03c      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2210      	movs	r2, #16
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d024      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e01f      	b.n	800252c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e016      	b.n	800252c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d107      	bne.n	800251c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0208 	bic.w	r2, r2, #8
 800251a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2220      	movs	r2, #32
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 808f 	beq.w	800265c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8087 	beq.w	800265c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2220      	movs	r2, #32
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d136      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0216 	bic.w	r2, r2, #22
 8002574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_DMA_IRQHandler+0x1da>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	223f      	movs	r2, #63	; 0x3f
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d07e      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
        }
        return;
 80025d2:	e079      	b.n	80026c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01d      	beq.n	800261e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d031      	beq.n	800265c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e02c      	b.n	800265c <HAL_DMA_IRQHandler+0x2a0>
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e01e      	b.n	800265c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10f      	bne.n	800264c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	d032      	beq.n	80026ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d022      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2205      	movs	r2, #5
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	d307      	bcc.n	80026a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f2      	bne.n	8002688 <HAL_DMA_IRQHandler+0x2cc>
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
 80026c6:	e000      	b.n	80026ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80026c8:	bf00      	nop
    }
  }
}
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b10      	subs	r3, #16
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <DMA_CalcBaseAndBitshift+0x60>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <DMA_CalcBaseAndBitshift+0x64>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d908      	bls.n	8002710 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 8002706:	4013      	ands	r3, r2
 8002708:	1d1a      	adds	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	; 0x58
 800270e:	e006      	b.n	800271e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	0800804c 	.word	0x0800804c
 8002738:	fffffc00 	.word	0xfffffc00

0800273c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d856      	bhi.n	800280a <DMA_CheckFifoParam+0xce>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <DMA_CheckFifoParam+0x28>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	08002787 	.word	0x08002787
 800276c:	08002775 	.word	0x08002775
 8002770:	0800280b 	.word	0x0800280b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d046      	beq.n	800280e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e043      	b.n	800280e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800278e:	d140      	bne.n	8002812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e03d      	b.n	8002812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	d121      	bne.n	80027e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d837      	bhi.n	8002816 <DMA_CheckFifoParam+0xda>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <DMA_CheckFifoParam+0x70>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027c3 	.word	0x080027c3
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	080027d5 	.word	0x080027d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e030      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d025      	beq.n	800281a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e022      	b.n	800281a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027dc:	d11f      	bne.n	800281e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e2:	e01c      	b.n	800281e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d903      	bls.n	80027f2 <DMA_CheckFifoParam+0xb6>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d003      	beq.n	80027f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f0:	e018      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      break;
 80027f6:	e015      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e00b      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 800280a:	bf00      	nop
 800280c:	e00a      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e008      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e006      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e004      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;   
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
    }
  } 
  
  return status; 
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e175      	b.n	8002b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8164 	bne.w	8002b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x56>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80be 	beq.w	8002b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_GPIO_Init+0x328>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d037      	beq.n	8002a72 <HAL_GPIO_Init+0x23e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_GPIO_Init+0x23a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x236>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_GPIO_Init+0x338>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x232>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <HAL_GPIO_Init+0x33c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x22e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a53      	ldr	r2, [pc, #332]	; (8002b74 <HAL_GPIO_Init+0x340>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x22a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x344>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <HAL_GPIO_Init+0x348>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x34c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a4a:	2309      	movs	r3, #9
 8002a4c:	e012      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a4e:	230a      	movs	r3, #10
 8002a50:	e010      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00e      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00c      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00a      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5e:	2305      	movs	r3, #5
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_GPIO_Init+0x328>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f ae86 	bls.w	8002854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021400 	.word	0x40021400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40021c00 	.word	0x40021c00
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022400 	.word	0x40022400
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff f976 	bl	8001eb8 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e067      	b.n	8002ca8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe fa3d 	bl	800106c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002bf2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f85e 	bl	8002cb8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2120      	movs	r1, #32
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f856 	bl	8002cd4 <QSPI_WaitFlagStateUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d135      	bne.n	8002c9e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_QSPI_Init+0xf0>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6852      	ldr	r2, [r2, #4]
 8002c40:	0611      	lsls	r1, r2, #24
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	69d2      	ldr	r2, [r2, #28]
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a12      	ldr	r2, [r2, #32]
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_QSPI_Init+0xf4>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6912      	ldr	r2, [r2, #16]
 8002c6a:	0411      	lsls	r1, r2, #16
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6952      	ldr	r2, [r2, #20]
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6992      	ldr	r2, [r2, #24]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	00ffff2f 	.word	0x00ffff2f
 8002cb4:	ffe0f8fe 	.word	0xffe0f8fe

08002cb8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ce4:	e01a      	b.n	8002d1c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d016      	beq.n	8002d1c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7ff f8e3 	bl	8001eb8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2204      	movs	r2, #4
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e00e      	b.n	8002d3a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1d6      	bne.n	8002ce6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e29b      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8087 	beq.w	8002e76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d68:	4b96      	ldr	r3, [pc, #600]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d00c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d74:	4b93      	ldr	r3, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d112      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62>
 8002d80:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8c:	d10b      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8e:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d06c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x130>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d168      	bne.n	8002e74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e275      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x7a>
 8002db0:	4b84      	ldr	r3, [pc, #528]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a83      	ldr	r2, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e02e      	b.n	8002e1c <HAL_RCC_OscConfig+0xd8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x9c>
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7e      	ldr	r2, [pc, #504]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7b      	ldr	r2, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xd8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0xc0>
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xd8>
 8002e04:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff f848 	bl	8001eb8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff f844 	bl	8001eb8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e229      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xe8>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f834 	bl	8001eb8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7ff f830 	bl	8001eb8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e215      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x110>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d069      	beq.n	8002f56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e82:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x190>
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x17a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1e9      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	493d      	ldr	r1, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e040      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d023      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe ffe6 	bl	8001eb8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe ffe2 	bl	8001eb8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1c7      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4929      	ldr	r1, [pc, #164]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
 8002f22:	e018      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe ffc2 	bl	8001eb8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe ffbe 	bl	8001eb8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1a3      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d038      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d019      	beq.n	8002f9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fe ff9f 	bl	8001eb8 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe ff9b 	bl	8001eb8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e180      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x23a>
 8002f9c:	e01a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe ff85 	bl	8001eb8 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe ff81 	bl	8001eb8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d903      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e166      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
 8002fc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	4b92      	ldr	r3, [pc, #584]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a4 	beq.w	800312a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b8c      	ldr	r3, [pc, #560]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a88      	ldr	r2, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b86      	ldr	r3, [pc, #536]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300a:	4b83      	ldr	r3, [pc, #524]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003016:	4b80      	ldr	r3, [pc, #512]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7f      	ldr	r2, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe ff49 	bl	8001eb8 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe ff45 	bl	8001eb8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e12a      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x31a>
 8003050:	4b70      	ldr	r3, [pc, #448]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a6f      	ldr	r2, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	e02d      	b.n	80030ba <HAL_RCC_OscConfig+0x376>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x33c>
 8003066:	4b6b      	ldr	r3, [pc, #428]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a67      	ldr	r2, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x376>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x35e>
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x376>
 80030a2:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe fef9 	bl	8001eb8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fef5 	bl	8001eb8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0d8      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x386>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fee3 	bl	8001eb8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe fedf 	bl	8001eb8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0c2      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80ae 	beq.w	8003290 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003134:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d06d      	beq.n	800321c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d14b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe feb0 	bl	8001eb8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe feac 	bl	8001eb8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e091      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	491b      	ldr	r1, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fe7e 	bl	8001eb8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe fe7a 	bl	8001eb8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e05f      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x47c>
 80031de:	e057      	b.n	8003290 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fe64 	bl	8001eb8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fe60 	bl	8001eb8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e045      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4b0>
 8003212:	e03d      	b.n	8003290 <HAL_RCC_OscConfig+0x54c>
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_RCC_OscConfig+0x558>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d030      	beq.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d129      	bne.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d122      	bne.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003252:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003254:	4293      	cmp	r3, r2
 8003256:	d119      	bne.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d10f      	bne.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d0      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d910      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 020f 	bic.w	r2, r3, #15
 80032ce:	4965      	ldr	r1, [pc, #404]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003322:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	494d      	ldr	r1, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d040      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d115      	bne.n	8003382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e073      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06b      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 0203 	bic.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4936      	ldr	r1, [pc, #216]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fe fd90 	bl	8001eb8 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fe fd8c 	bl	8001eb8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e053      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 020c 	and.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1eb      	bne.n	800339c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c4:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d210      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 020f 	bic.w	r2, r3, #15
 80033da:	4922      	ldr	r1, [pc, #136]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e032      	b.n	800345a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003432:	f000 f821 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003436:	4602      	mov	r2, r0
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	490a      	ldr	r1, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1cc>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1d0>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fcec 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00
 8003468:	40023800 	.word	0x40023800
 800346c:	08008034 	.word	0x08008034
 8003470:	20000008 	.word	0x20000008
 8003474:	2000000c 	.word	0x2000000c

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b090      	sub	sp, #64	; 0x40
 800347e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003488:	2300      	movs	r3, #0
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d00d      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x40>
 800349c:	2b08      	cmp	r3, #8
 800349e:	f200 80a1 	bhi.w	80035e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034aa:	e09b      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_GetSysClockFreq+0x184>)
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b0:	e09b      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b6:	e098      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034c2:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d028      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	2200      	movs	r2, #0
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	627a      	str	r2, [r7, #36]	; 0x24
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e0:	2100      	movs	r1, #0
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e4:	fb03 f201 	mul.w	r2, r3, r1
 80034e8:	2300      	movs	r3, #0
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	4a43      	ldr	r2, [pc, #268]	; (8003600 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f2:	fba0 1202 	umull	r1, r2, r0, r2
 80034f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f8:	460a      	mov	r2, r1
 80034fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	4413      	add	r3, r2
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003504:	2200      	movs	r2, #0
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	61fa      	str	r2, [r7, #28]
 800350a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003512:	f7fc fee5 	bl	80002e0 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4613      	mov	r3, r2
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	e053      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	2200      	movs	r2, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	617a      	str	r2, [r7, #20]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003532:	f04f 0b00 	mov.w	fp, #0
 8003536:	4652      	mov	r2, sl
 8003538:	465b      	mov	r3, fp
 800353a:	f04f 0000 	mov.w	r0, #0
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	0159      	lsls	r1, r3, #5
 8003544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003548:	0150      	lsls	r0, r2, #5
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	ebb2 080a 	subs.w	r8, r2, sl
 8003552:	eb63 090b 	sbc.w	r9, r3, fp
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003562:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003566:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800356a:	ebb2 0408 	subs.w	r4, r2, r8
 800356e:	eb63 0509 	sbc.w	r5, r3, r9
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	00eb      	lsls	r3, r5, #3
 800357c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003580:	00e2      	lsls	r2, r4, #3
 8003582:	4614      	mov	r4, r2
 8003584:	461d      	mov	r5, r3
 8003586:	eb14 030a 	adds.w	r3, r4, sl
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	eb45 030b 	adc.w	r3, r5, fp
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800359e:	4629      	mov	r1, r5
 80035a0:	028b      	lsls	r3, r1, #10
 80035a2:	4621      	mov	r1, r4
 80035a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a8:	4621      	mov	r1, r4
 80035aa:	028a      	lsls	r2, r1, #10
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	2200      	movs	r2, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	60fa      	str	r2, [r7, #12]
 80035b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035bc:	f7fc fe90 	bl	80002e0 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4613      	mov	r3, r2
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80035d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035e2:	e002      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetSysClockFreq+0x184>)
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3740      	adds	r7, #64	; 0x40
 80035f0:	46bd      	mov	sp, r7
 80035f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	00f42400 	.word	0x00f42400
 8003600:	017d7840 	.word	0x017d7840

08003604 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_RCC_GetHCLKFreq+0x14>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003620:	f7ff fff0 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	0a9b      	lsrs	r3, r3, #10
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	08008044 	.word	0x08008044

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff ffdc 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0b5b      	lsrs	r3, r3, #13
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	08008044 	.word	0x08008044

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003694:	4b69      	ldr	r3, [pc, #420]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a68      	ldr	r2, [pc, #416]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800369e:	6093      	str	r3, [r2, #8]
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	4964      	ldr	r1, [pc, #400]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d017      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	4959      	ldr	r1, [pc, #356]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003708:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	494a      	ldr	r1, [pc, #296]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 808b 	beq.w	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6413      	str	r3, [r2, #64]	; 0x40
 800375c:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003768:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fe fba0 	bl	8001eb8 <HAL_GetTick>
 8003778:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fb9c 	bl	8001eb8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e38f      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d035      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d02e      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d114      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fb64 	bl	8001eb8 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe fb60 	bl	8001eb8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e351      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003822:	d111      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003832:	400b      	ands	r3, r1
 8003834:	4901      	ldr	r1, [pc, #4]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
 800383a:	e00b      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	0ffffcff 	.word	0x0ffffcff
 8003848:	4bac      	ldr	r3, [pc, #688]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4aab      	ldr	r2, [pc, #684]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003852:	6093      	str	r3, [r2, #8]
 8003854:	4ba9      	ldr	r3, [pc, #676]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	49a6      	ldr	r1, [pc, #664]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	4313      	orrs	r3, r2
 8003864:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003872:	4ba2      	ldr	r3, [pc, #648]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	4aa0      	ldr	r2, [pc, #640]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003882:	4b9e      	ldr	r3, [pc, #632]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	499b      	ldr	r1, [pc, #620]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a0:	4b96      	ldr	r3, [pc, #600]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ae:	4993      	ldr	r1, [pc, #588]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038c2:	4b8e      	ldr	r3, [pc, #568]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d0:	498a      	ldr	r1, [pc, #552]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e4:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f2:	4982      	ldr	r1, [pc, #520]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003906:	4b7d      	ldr	r3, [pc, #500]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4979      	ldr	r1, [pc, #484]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003928:	4b74      	ldr	r3, [pc, #464]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4971      	ldr	r1, [pc, #452]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394a:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f023 020c 	bic.w	r2, r3, #12
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	4968      	ldr	r1, [pc, #416]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396c:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4960      	ldr	r1, [pc, #384]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	4957      	ldr	r1, [pc, #348]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	494f      	ldr	r1, [pc, #316]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	4946      	ldr	r1, [pc, #280]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039f4:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	493e      	ldr	r1, [pc, #248]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a16:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	4935      	ldr	r1, [pc, #212]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a38:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a46:	492d      	ldr	r1, [pc, #180]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a68:	4924      	ldr	r1, [pc, #144]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	4914      	ldr	r1, [pc, #80]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	4902      	ldr	r1, [pc, #8]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b0c:	4b8a      	ldr	r3, [pc, #552]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	4986      	ldr	r1, [pc, #536]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b30:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	497d      	ldr	r1, [pc, #500]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80d6 	beq.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b5c:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a75      	ldr	r2, [pc, #468]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fe f9a6 	bl	8001eb8 <HAL_GetTick>
 8003b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b70:	f7fe f9a2 	bl	8001eb8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e195      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d021      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ba2:	4b65      	ldr	r3, [pc, #404]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bb0:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	0e1b      	lsrs	r3, r3, #24
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	4958      	ldr	r1, [pc, #352]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02e      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c08:	d129      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c0a:	4b4b      	ldr	r3, [pc, #300]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c18:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1e:	0f1b      	lsrs	r3, r3, #28
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	493e      	ldr	r1, [pc, #248]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c46:	4b3c      	ldr	r3, [pc, #240]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4c:	f023 021f 	bic.w	r2, r3, #31
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4938      	ldr	r1, [pc, #224]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01d      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c6a:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7e:	0f1b      	lsrs	r3, r3, #28
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	019a      	lsls	r2, r3, #6
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	4926      	ldr	r1, [pc, #152]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	019a      	lsls	r2, r3, #6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	491a      	ldr	r1, [pc, #104]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce2:	f7fe f8e9 	bl	8001eb8 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cea:	f7fe f8e5 	bl	8001eb8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b64      	cmp	r3, #100	; 0x64
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e0d8      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 80ce 	bne.w	8003eac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fe f8cc 	bl	8001eb8 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d22:	e00b      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d24:	f7fe f8c8 	bl	8001eb8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d904      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0bb      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d3c:	4b5e      	ldr	r3, [pc, #376]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d48:	d0ec      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02e      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d12a      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d72:	4b51      	ldr	r3, [pc, #324]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d80:	4b4d      	ldr	r3, [pc, #308]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	0f1b      	lsrs	r3, r3, #28
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	019a      	lsls	r2, r3, #6
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	061b      	lsls	r3, r3, #24
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	071b      	lsls	r3, r3, #28
 8003da6:	4944      	ldr	r1, [pc, #272]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dae:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	493d      	ldr	r1, [pc, #244]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ddc:	d11d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	0f1b      	lsrs	r3, r3, #28
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	019a      	lsls	r2, r3, #6
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	4929      	ldr	r1, [pc, #164]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d028      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	019a      	lsls	r2, r3, #6
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	071b      	lsls	r3, r3, #28
 8003e5a:	4917      	ldr	r1, [pc, #92]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4911      	ldr	r1, [pc, #68]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fe f818 	bl	8001eb8 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e8c:	f7fe f814 	bl	8001eb8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e007      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eaa:	d1ef      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e09d      	b.n	800400a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ede:	d009      	beq.n	8003ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
 8003ee6:	e005      	b.n	8003ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd f9e2 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f34:	d902      	bls.n	8003f3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e002      	b.n	8003f42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f4a:	d007      	beq.n	8003f5c <HAL_SPI_Init+0xa0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	ea42 0103 	orr.w	r1, r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	f003 0204 	and.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fd8:	ea42 0103 	orr.w	r1, r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_SPI_Transmit+0x22>
 8004030:	2302      	movs	r3, #2
 8004032:	e158      	b.n	80042e6 <HAL_SPI_Transmit+0x2d4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403c:	f7fd ff3c 	bl	8001eb8 <HAL_GetTick>
 8004040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d002      	beq.n	8004058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004056:	e13d      	b.n	80042d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x52>
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004068:	e134      	b.n	80042d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b4:	d10f      	bne.n	80040d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d007      	beq.n	80040f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fc:	d94b      	bls.n	8004196 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_Transmit+0xfa>
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d13e      	bne.n	800418a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004130:	e02b      	b.n	800418a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d112      	bne.n	8004166 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	881a      	ldrh	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004164:	e011      	b.n	800418a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004166:	f7fd fea7 	bl	8001eb8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <HAL_SPI_Transmit+0x16c>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x172>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004188:	e0a4      	b.n	80042d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ce      	bne.n	8004132 <HAL_SPI_Transmit+0x120>
 8004194:	e07c      	b.n	8004290 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x192>
 800419e:	8afb      	ldrh	r3, [r7, #22]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d170      	bne.n	8004286 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d912      	bls.n	80041d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b02      	subs	r3, #2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d2:	e058      	b.n	8004286 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041fa:	e044      	b.n	8004286 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d12b      	bne.n	8004262 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d912      	bls.n	800423a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	881a      	ldrh	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b02      	subs	r3, #2
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004238:	e025      	b.n	8004286 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004260:	e011      	b.n	8004286 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004262:	f7fd fe29 	bl	8001eb8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d803      	bhi.n	800427a <HAL_SPI_Transmit+0x268>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d102      	bne.n	8004280 <HAL_SPI_Transmit+0x26e>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004284:	e026      	b.n	80042d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1b5      	bne.n	80041fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fd07 	bl	8004ca8 <SPI_EndRxTxTransaction>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e000      	b.n	80042d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80042d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430a:	d112      	bne.n	8004332 <HAL_SPI_Receive+0x44>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f910 	bl	800454e <HAL_SPI_TransmitReceive>
 800432e:	4603      	mov	r3, r0
 8004330:	e109      	b.n	8004546 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_SPI_Receive+0x52>
 800433c:	2302      	movs	r3, #2
 800433e:	e102      	b.n	8004546 <HAL_SPI_Receive+0x258>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004348:	f7fd fdb6 	bl	8001eb8 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d002      	beq.n	8004360 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800435e:	e0e9      	b.n	8004534 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Receive+0x7e>
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004370:	e0e0      	b.n	8004534 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2204      	movs	r2, #4
 8004376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d908      	bls.n	80043d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	e007      	b.n	80043e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	d10f      	bne.n	800440a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d007      	beq.n	8004428 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004430:	d867      	bhi.n	8004502 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004432:	e030      	b.n	8004496 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d117      	bne.n	8004472 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f103 020c 	add.w	r2, r3, #12
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004470:	e011      	b.n	8004496 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004472:	f7fd fd21 	bl	8001eb8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d803      	bhi.n	800448a <HAL_SPI_Receive+0x19c>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d102      	bne.n	8004490 <HAL_SPI_Receive+0x1a2>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004494:	e04e      	b.n	8004534 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1c8      	bne.n	8004434 <HAL_SPI_Receive+0x146>
 80044a2:	e034      	b.n	800450e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d115      	bne.n	80044de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	b292      	uxth	r2, r2
 80044be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80044dc:	e011      	b.n	8004502 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044de:	f7fd fceb 	bl	8001eb8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d803      	bhi.n	80044f6 <HAL_SPI_Receive+0x208>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d102      	bne.n	80044fc <HAL_SPI_Receive+0x20e>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004500:	e018      	b.n	8004534 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ca      	bne.n	80044a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fb4c 	bl	8004bb0 <SPI_EndRxTransaction>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	e000      	b.n	8004534 <HAL_SPI_Receive+0x246>
  }

error :
 8004532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004544:	7dfb      	ldrb	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800455c:	2301      	movs	r3, #1
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x26>
 8004570:	2302      	movs	r3, #2
 8004572:	e1fb      	b.n	800496c <HAL_SPI_TransmitReceive+0x41e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800457c:	f7fd fc9c 	bl	8001eb8 <HAL_GetTick>
 8004580:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004588:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004598:	7efb      	ldrb	r3, [r7, #27]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d00e      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x6e>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a4:	d106      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x66>
 80045ae:	7efb      	ldrb	r3, [r7, #27]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d003      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045ba:	e1cd      	b.n	8004958 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x80>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x80>
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045d4:	e1c0      	b.n	8004958 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d003      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2205      	movs	r2, #5
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	887a      	ldrh	r2, [r7, #2]
 8004602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462c:	d802      	bhi.n	8004634 <HAL_SPI_TransmitReceive+0xe6>
 800462e:	8a3b      	ldrh	r3, [r7, #16]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d908      	bls.n	8004646 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e007      	b.n	8004656 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004654:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d007      	beq.n	8004674 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800467c:	d97c      	bls.n	8004778 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_SPI_TransmitReceive+0x13e>
 8004686:	8a7b      	ldrh	r3, [r7, #18]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d169      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	881a      	ldrh	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	1c9a      	adds	r2, r3, #2
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b0:	e056      	b.n	8004760 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x1aa>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x1aa>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d113      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d11c      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x1f2>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	b292      	uxth	r2, r2
 800471e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004740:	f7fd fbba 	bl	8001eb8 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474c:	429a      	cmp	r2, r3
 800474e:	d807      	bhi.n	8004760 <HAL_SPI_TransmitReceive+0x212>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d003      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800475e:	e0fb      	b.n	8004958 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1a3      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x164>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d19d      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x164>
 8004776:	e0df      	b.n	8004938 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x23a>
 8004780:	8a7b      	ldrh	r3, [r7, #18]
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 80cb 	bne.w	800491e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d912      	bls.n	80047b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b02      	subs	r3, #2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b6:	e0b2      	b.n	800491e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047de:	e09e      	b.n	800491e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d134      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x30a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02f      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x30a>
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d12c      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d912      	bls.n	800482e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b02      	subs	r3, #2
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800482c:	e012      	b.n	8004854 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d148      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x3aa>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d042      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d923      	bls.n	80048c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b02      	subs	r3, #2
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d81f      	bhi.n	80048f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	e016      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f103 020c 	add.w	r2, r3, #12
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f4:	2301      	movs	r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048f8:	f7fd fade 	bl	8001eb8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004904:	429a      	cmp	r2, r3
 8004906:	d803      	bhi.n	8004910 <HAL_SPI_TransmitReceive+0x3c2>
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d102      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x3c8>
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800491c:	e01c      	b.n	8004958 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f af5b 	bne.w	80047e0 <HAL_SPI_TransmitReceive+0x292>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	f47f af54 	bne.w	80047e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f9b3 	bl	8004ca8 <SPI_EndRxTxTransaction>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
 8004954:	e000      	b.n	8004958 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800496c:	4618      	mov	r0, r3
 800496e:	3728      	adds	r7, #40	; 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004984:	f7fd fa98 	bl	8001eb8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4413      	add	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004994:	f7fd fa90 	bl	8001eb8 <HAL_GetTick>
 8004998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	015b      	lsls	r3, r3, #5
 80049a0:	0d1b      	lsrs	r3, r3, #20
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049aa:	e054      	b.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d050      	beq.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b4:	f7fd fa80 	bl	8001eb8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d902      	bls.n	80049ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d13d      	bne.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e2:	d111      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ec:	d004      	beq.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f6:	d107      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a10:	d10f      	bne.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e017      	b.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d19b      	bne.n	80049ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000008 	.word	0x20000008

08004a84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a96:	f7fd fa0f 	bl	8001eb8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004aa6:	f7fd fa07 	bl	8001eb8 <HAL_GetTick>
 8004aaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	0d1b      	lsrs	r3, r3, #20
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004acc:	e060      	b.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ad4:	d107      	bne.n	8004ae6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d050      	beq.n	8004b90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aee:	f7fd f9e3 	bl	8001eb8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d902      	bls.n	8004b04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d13d      	bne.n	8004b80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1c:	d111      	bne.n	8004b42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b26:	d004      	beq.n	8004b32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d107      	bne.n	8004b42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4a:	d10f      	bne.n	8004b6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e010      	b.n	8004ba2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d196      	bne.n	8004ace <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3728      	adds	r7, #40	; 0x28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000008 	.word	0x20000008

08004bb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc4:	d111      	bne.n	8004bea <SPI_EndRxTransaction+0x3a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d004      	beq.n	8004bda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d107      	bne.n	8004bea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d112      	bne.n	8004c1a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff feb8 	bl	8004974 <SPI_WaitFlagStateUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e03d      	b.n	8004c96 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <SPI_EndRxTransaction+0xf0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <SPI_EndRxTransaction+0xf4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0d5b      	lsrs	r3, r3, #21
 8004c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d0f2      	beq.n	8004c30 <SPI_EndRxTransaction+0x80>
 8004c4a:	e000      	b.n	8004c4e <SPI_EndRxTransaction+0x9e>
        break;
 8004c4c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c56:	d11d      	bne.n	8004c94 <SPI_EndRxTransaction+0xe4>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d004      	beq.n	8004c6c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d113      	bne.n	8004c94 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff ff03 	bl	8004a84 <SPI_WaitFifoStateUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e000      	b.n	8004c96 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000008 	.word	0x20000008
 8004ca4:	165e9f81 	.word	0x165e9f81

08004ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fedf 	bl	8004a84 <SPI_WaitFifoStateUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e046      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <SPI_EndRxTxTransaction+0xcc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <SPI_EndRxTxTransaction+0xd0>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0d5b      	lsrs	r3, r3, #21
 8004ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfa:	d112      	bne.n	8004d22 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fe34 	bl	8004974 <SPI_WaitFlagStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e023      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d0f2      	beq.n	8004d22 <SPI_EndRxTxTransaction+0x7a>
 8004d3c:	e000      	b.n	8004d40 <SPI_EndRxTxTransaction+0x98>
        break;
 8004d3e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fe99 	bl	8004a84 <SPI_WaitFifoStateUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	f043 0220 	orr.w	r2, r3, #32
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e000      	b.n	8004d6a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000008 	.word	0x20000008
 8004d78:	165e9f81 	.word	0x165e9f81

08004d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e049      	b.n	8004e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc fca2 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 f836 	bl	8004e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d00f      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d027      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d023      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d017      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <TIM_Base_SetConfig+0x128>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	; (8004f58 <TIM_Base_SetConfig+0x12c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <TIM_Base_SetConfig+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <TIM_Base_SetConfig+0x134>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <TIM_Base_SetConfig+0x138>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <TIM_Base_SetConfig+0x13c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	615a      	str	r2, [r3, #20]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800
 8004f60:	40001800 	.word	0x40001800
 8004f64:	40001c00 	.word	0x40001c00
 8004f68:	40002000 	.word	0x40002000

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e040      	b.n	8005000 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fc2c 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fbc2 	bl	8005734 <UART_SetConfig>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e022      	b.n	8005000 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fe1a 	bl	8005bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fea1 	bl	8005d40 <UART_CheckIdleState>
 8004ffe:	4603      	mov	r3, r0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501c:	2b20      	cmp	r3, #32
 800501e:	d171      	bne.n	8005104 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Transmit+0x24>
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e06a      	b.n	8005106 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2221      	movs	r2, #33	; 0x21
 800503c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503e:	f7fc ff3b 	bl	8001eb8 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	88fa      	ldrh	r2, [r7, #6]
 8005050:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d108      	bne.n	8005070 <HAL_UART_Transmit+0x68>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e003      	b.n	8005078 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005078:	e02c      	b.n	80050d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fea8 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e038      	b.n	8005106 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	3302      	adds	r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e007      	b.n	80050c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1cc      	bne.n	800507a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fe75 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e005      	b.n	8005106 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b0ba      	sub	sp, #232	; 0xe8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800513a:	f640 030f 	movw	r3, #2063	; 0x80f
 800513e:	4013      	ands	r3, r2
 8005140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800514c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 82ac 	beq.w	80056c6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      }
      return;
 8005176:	e2a6      	b.n	80056c6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8117 	beq.w	80053b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800518e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_UART_IRQHandler+0x298>)
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 810a 	beq.w	80053b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <HAL_UART_IRQHandler+0xbc>
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2201      	movs	r2, #1
 80051ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_UART_IRQHandler+0xec>
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2202      	movs	r2, #2
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <HAL_UART_IRQHandler+0x11c>
 8005208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2204      	movs	r2, #4
 800521a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005222:	f043 0202 	orr.w	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	f043 0208 	orr.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	2b00      	cmp	r3, #0
 8005272:	d012      	beq.n	800529a <HAL_UART_IRQHandler+0x18a>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8212 	beq.w	80056ca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04f      	beq.n	8005392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fe37 	bl	8005f66 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d141      	bne.n	800538a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800533e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800534a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d9      	bne.n	8005306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <HAL_UART_IRQHandler+0x29c>)
 8005360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd f806 	bl	8002378 <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d017      	beq.n	80053a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00f      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9b6 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00b      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9b2 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e007      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9ae 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80053a0:	e193      	b.n	80056ca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a2:	bf00      	nop
    return;
 80053a4:	e191      	b.n	80056ca <HAL_UART_IRQHandler+0x5ba>
 80053a6:	bf00      	nop
 80053a8:	04000120 	.word	0x04000120
 80053ac:	0800602f 	.word	0x0800602f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 814c 	bne.w	8005652 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8145 	beq.w	8005652 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 813e 	beq.w	8005652 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	f040 80b6 	bne.w	800555a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8165 	beq.w	80056ce <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800540a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800540e:	429a      	cmp	r2, r3
 8005410:	f080 815d 	bcs.w	80056ce <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800541a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	f000 8086 	beq.w	8005538 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1da      	bne.n	800542c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800549a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e1      	bne.n	8005476 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800551a:	65bb      	str	r3, [r7, #88]	; 0x58
 800551c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e4      	bne.n	80054f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	4618      	mov	r0, r3
 8005534:	f7fc feb0 	bl	8002298 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800554a:	b29b      	uxth	r3, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8d8 	bl	8005708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005558:	e0b9      	b.n	80056ce <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005566:	b29b      	uxth	r3, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80ab 	beq.w	80056d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800557c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a6 	beq.w	80056d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800559a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e4      	bne.n	8005586 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	623b      	str	r3, [r7, #32]
   return(result);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055e0:	633a      	str	r2, [r7, #48]	; 0x30
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60fb      	str	r3, [r7, #12]
   return(result);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	69b9      	ldr	r1, [r7, #24]
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	617b      	str	r3, [r7, #20]
   return(result);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e4      	bne.n	8005608 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f85c 	bl	8005708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005650:	e03f      	b.n	80056d2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <HAL_UART_IRQHandler+0x56c>
 800565e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005672:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f853 	bl	8005720 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800567a:	e02d      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01c      	beq.n	80056d6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
    }
    return;
 80056a4:	e017      	b.n	80056d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d012      	beq.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fccb 	bl	800605a <UART_EndTransmit_IT>
    return;
 80056c4:	e008      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80056c6:	bf00      	nop
 80056c8:	e006      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80056ca:	bf00      	nop
 80056cc:	e004      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80056d6:	bf00      	nop
  }

}
 80056d8:	37e8      	adds	r7, #232	; 0xe8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop

080056e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4ba6      	ldr	r3, [pc, #664]	; (80059f8 <UART_SetConfig+0x2c4>)
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	430b      	orrs	r3, r1
 800576a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a94      	ldr	r2, [pc, #592]	; (80059fc <UART_SetConfig+0x2c8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d120      	bne.n	80057f2 <UART_SetConfig+0xbe>
 80057b0:	4b93      	ldr	r3, [pc, #588]	; (8005a00 <UART_SetConfig+0x2cc>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d816      	bhi.n	80057ec <UART_SetConfig+0xb8>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x90>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057db 	.word	0x080057db
 80057d0:	080057e7 	.word	0x080057e7
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e150      	b.n	8005a7c <UART_SetConfig+0x348>
 80057da:	2302      	movs	r3, #2
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e14d      	b.n	8005a7c <UART_SetConfig+0x348>
 80057e0:	2304      	movs	r3, #4
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e14a      	b.n	8005a7c <UART_SetConfig+0x348>
 80057e6:	2308      	movs	r3, #8
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e147      	b.n	8005a7c <UART_SetConfig+0x348>
 80057ec:	2310      	movs	r3, #16
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e144      	b.n	8005a7c <UART_SetConfig+0x348>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a83      	ldr	r2, [pc, #524]	; (8005a04 <UART_SetConfig+0x2d0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d132      	bne.n	8005862 <UART_SetConfig+0x12e>
 80057fc:	4b80      	ldr	r3, [pc, #512]	; (8005a00 <UART_SetConfig+0x2cc>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d828      	bhi.n	800585c <UART_SetConfig+0x128>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <UART_SetConfig+0xdc>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005845 	.word	0x08005845
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800585d 	.word	0x0800585d
 800581c:	0800585d 	.word	0x0800585d
 8005820:	08005851 	.word	0x08005851
 8005824:	0800585d 	.word	0x0800585d
 8005828:	0800585d 	.word	0x0800585d
 800582c:	0800585d 	.word	0x0800585d
 8005830:	0800584b 	.word	0x0800584b
 8005834:	0800585d 	.word	0x0800585d
 8005838:	0800585d 	.word	0x0800585d
 800583c:	0800585d 	.word	0x0800585d
 8005840:	08005857 	.word	0x08005857
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e118      	b.n	8005a7c <UART_SetConfig+0x348>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e115      	b.n	8005a7c <UART_SetConfig+0x348>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e112      	b.n	8005a7c <UART_SetConfig+0x348>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e10f      	b.n	8005a7c <UART_SetConfig+0x348>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e10c      	b.n	8005a7c <UART_SetConfig+0x348>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a68      	ldr	r2, [pc, #416]	; (8005a08 <UART_SetConfig+0x2d4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d120      	bne.n	80058ae <UART_SetConfig+0x17a>
 800586c:	4b64      	ldr	r3, [pc, #400]	; (8005a00 <UART_SetConfig+0x2cc>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d013      	beq.n	80058a2 <UART_SetConfig+0x16e>
 800587a:	2b30      	cmp	r3, #48	; 0x30
 800587c:	d814      	bhi.n	80058a8 <UART_SetConfig+0x174>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d009      	beq.n	8005896 <UART_SetConfig+0x162>
 8005882:	2b20      	cmp	r3, #32
 8005884:	d810      	bhi.n	80058a8 <UART_SetConfig+0x174>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <UART_SetConfig+0x15c>
 800588a:	2b10      	cmp	r3, #16
 800588c:	d006      	beq.n	800589c <UART_SetConfig+0x168>
 800588e:	e00b      	b.n	80058a8 <UART_SetConfig+0x174>
 8005890:	2300      	movs	r3, #0
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e0f2      	b.n	8005a7c <UART_SetConfig+0x348>
 8005896:	2302      	movs	r3, #2
 8005898:	77fb      	strb	r3, [r7, #31]
 800589a:	e0ef      	b.n	8005a7c <UART_SetConfig+0x348>
 800589c:	2304      	movs	r3, #4
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e0ec      	b.n	8005a7c <UART_SetConfig+0x348>
 80058a2:	2308      	movs	r3, #8
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e0e9      	b.n	8005a7c <UART_SetConfig+0x348>
 80058a8:	2310      	movs	r3, #16
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e0e6      	b.n	8005a7c <UART_SetConfig+0x348>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a56      	ldr	r2, [pc, #344]	; (8005a0c <UART_SetConfig+0x2d8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d120      	bne.n	80058fa <UART_SetConfig+0x1c6>
 80058b8:	4b51      	ldr	r3, [pc, #324]	; (8005a00 <UART_SetConfig+0x2cc>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058c2:	2bc0      	cmp	r3, #192	; 0xc0
 80058c4:	d013      	beq.n	80058ee <UART_SetConfig+0x1ba>
 80058c6:	2bc0      	cmp	r3, #192	; 0xc0
 80058c8:	d814      	bhi.n	80058f4 <UART_SetConfig+0x1c0>
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d009      	beq.n	80058e2 <UART_SetConfig+0x1ae>
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	d810      	bhi.n	80058f4 <UART_SetConfig+0x1c0>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <UART_SetConfig+0x1a8>
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d006      	beq.n	80058e8 <UART_SetConfig+0x1b4>
 80058da:	e00b      	b.n	80058f4 <UART_SetConfig+0x1c0>
 80058dc:	2300      	movs	r3, #0
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e0cc      	b.n	8005a7c <UART_SetConfig+0x348>
 80058e2:	2302      	movs	r3, #2
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e0c9      	b.n	8005a7c <UART_SetConfig+0x348>
 80058e8:	2304      	movs	r3, #4
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e0c6      	b.n	8005a7c <UART_SetConfig+0x348>
 80058ee:	2308      	movs	r3, #8
 80058f0:	77fb      	strb	r3, [r7, #31]
 80058f2:	e0c3      	b.n	8005a7c <UART_SetConfig+0x348>
 80058f4:	2310      	movs	r3, #16
 80058f6:	77fb      	strb	r3, [r7, #31]
 80058f8:	e0c0      	b.n	8005a7c <UART_SetConfig+0x348>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a44      	ldr	r2, [pc, #272]	; (8005a10 <UART_SetConfig+0x2dc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d125      	bne.n	8005950 <UART_SetConfig+0x21c>
 8005904:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <UART_SetConfig+0x2cc>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d017      	beq.n	8005944 <UART_SetConfig+0x210>
 8005914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005918:	d817      	bhi.n	800594a <UART_SetConfig+0x216>
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d00b      	beq.n	8005938 <UART_SetConfig+0x204>
 8005920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005924:	d811      	bhi.n	800594a <UART_SetConfig+0x216>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <UART_SetConfig+0x1fe>
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	d006      	beq.n	800593e <UART_SetConfig+0x20a>
 8005930:	e00b      	b.n	800594a <UART_SetConfig+0x216>
 8005932:	2300      	movs	r3, #0
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e0a1      	b.n	8005a7c <UART_SetConfig+0x348>
 8005938:	2302      	movs	r3, #2
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e09e      	b.n	8005a7c <UART_SetConfig+0x348>
 800593e:	2304      	movs	r3, #4
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e09b      	b.n	8005a7c <UART_SetConfig+0x348>
 8005944:	2308      	movs	r3, #8
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e098      	b.n	8005a7c <UART_SetConfig+0x348>
 800594a:	2310      	movs	r3, #16
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e095      	b.n	8005a7c <UART_SetConfig+0x348>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <UART_SetConfig+0x2e0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d125      	bne.n	80059a6 <UART_SetConfig+0x272>
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <UART_SetConfig+0x2cc>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005968:	d017      	beq.n	800599a <UART_SetConfig+0x266>
 800596a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800596e:	d817      	bhi.n	80059a0 <UART_SetConfig+0x26c>
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005974:	d00b      	beq.n	800598e <UART_SetConfig+0x25a>
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d811      	bhi.n	80059a0 <UART_SetConfig+0x26c>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <UART_SetConfig+0x254>
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d006      	beq.n	8005994 <UART_SetConfig+0x260>
 8005986:	e00b      	b.n	80059a0 <UART_SetConfig+0x26c>
 8005988:	2301      	movs	r3, #1
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e076      	b.n	8005a7c <UART_SetConfig+0x348>
 800598e:	2302      	movs	r3, #2
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e073      	b.n	8005a7c <UART_SetConfig+0x348>
 8005994:	2304      	movs	r3, #4
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e070      	b.n	8005a7c <UART_SetConfig+0x348>
 800599a:	2308      	movs	r3, #8
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e06d      	b.n	8005a7c <UART_SetConfig+0x348>
 80059a0:	2310      	movs	r3, #16
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e06a      	b.n	8005a7c <UART_SetConfig+0x348>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <UART_SetConfig+0x2e4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d138      	bne.n	8005a22 <UART_SetConfig+0x2ee>
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <UART_SetConfig+0x2cc>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059be:	d017      	beq.n	80059f0 <UART_SetConfig+0x2bc>
 80059c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059c4:	d82a      	bhi.n	8005a1c <UART_SetConfig+0x2e8>
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ca:	d00b      	beq.n	80059e4 <UART_SetConfig+0x2b0>
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	d824      	bhi.n	8005a1c <UART_SetConfig+0x2e8>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <UART_SetConfig+0x2aa>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d006      	beq.n	80059ea <UART_SetConfig+0x2b6>
 80059dc:	e01e      	b.n	8005a1c <UART_SetConfig+0x2e8>
 80059de:	2300      	movs	r3, #0
 80059e0:	77fb      	strb	r3, [r7, #31]
 80059e2:	e04b      	b.n	8005a7c <UART_SetConfig+0x348>
 80059e4:	2302      	movs	r3, #2
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e048      	b.n	8005a7c <UART_SetConfig+0x348>
 80059ea:	2304      	movs	r3, #4
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e045      	b.n	8005a7c <UART_SetConfig+0x348>
 80059f0:	2308      	movs	r3, #8
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e042      	b.n	8005a7c <UART_SetConfig+0x348>
 80059f6:	bf00      	nop
 80059f8:	efff69f3 	.word	0xefff69f3
 80059fc:	40011000 	.word	0x40011000
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40004400 	.word	0x40004400
 8005a08:	40004800 	.word	0x40004800
 8005a0c:	40004c00 	.word	0x40004c00
 8005a10:	40005000 	.word	0x40005000
 8005a14:	40011400 	.word	0x40011400
 8005a18:	40007800 	.word	0x40007800
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e02c      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a72      	ldr	r2, [pc, #456]	; (8005bf0 <UART_SetConfig+0x4bc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d125      	bne.n	8005a78 <UART_SetConfig+0x344>
 8005a2c:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <UART_SetConfig+0x4c0>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a3a:	d017      	beq.n	8005a6c <UART_SetConfig+0x338>
 8005a3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a40:	d817      	bhi.n	8005a72 <UART_SetConfig+0x33e>
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a46:	d00b      	beq.n	8005a60 <UART_SetConfig+0x32c>
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4c:	d811      	bhi.n	8005a72 <UART_SetConfig+0x33e>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <UART_SetConfig+0x326>
 8005a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a56:	d006      	beq.n	8005a66 <UART_SetConfig+0x332>
 8005a58:	e00b      	b.n	8005a72 <UART_SetConfig+0x33e>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e00d      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a60:	2302      	movs	r3, #2
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e00a      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a66:	2304      	movs	r3, #4
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e007      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e004      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a72:	2310      	movs	r3, #16
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e001      	b.n	8005a7c <UART_SetConfig+0x348>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a84:	d15b      	bne.n	8005b3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a86:	7ffb      	ldrb	r3, [r7, #31]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d828      	bhi.n	8005ade <UART_SetConfig+0x3aa>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x360>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005adf 	.word	0x08005adf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005adf 	.word	0x08005adf
 8005ab0:	08005adf 	.word	0x08005adf
 8005ab4:	08005ad7 	.word	0x08005ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fd fdb0 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8005abc:	61b8      	str	r0, [r7, #24]
        break;
 8005abe:	e013      	b.n	8005ae8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fd fdc0 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	61b8      	str	r0, [r7, #24]
        break;
 8005ac6:	e00f      	b.n	8005ae8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <UART_SetConfig+0x4c4>)
 8005aca:	61bb      	str	r3, [r7, #24]
        break;
 8005acc:	e00c      	b.n	8005ae8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ace:	f7fd fcd3 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005ad2:	61b8      	str	r0, [r7, #24]
        break;
 8005ad4:	e008      	b.n	8005ae8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	61bb      	str	r3, [r7, #24]
        break;
 8005adc:	e004      	b.n	8005ae8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ae6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d074      	beq.n	8005bd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	005a      	lsls	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d916      	bls.n	8005b38 <UART_SetConfig+0x404>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d212      	bcs.n	8005b38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f023 030f 	bic.w	r3, r3, #15
 8005b1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	89fa      	ldrh	r2, [r7, #14]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e04f      	b.n	8005bd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	77bb      	strb	r3, [r7, #30]
 8005b3c:	e04c      	b.n	8005bd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d828      	bhi.n	8005b96 <UART_SetConfig+0x462>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x418>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fd fd54 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8005b74:	61b8      	str	r0, [r7, #24]
        break;
 8005b76:	e013      	b.n	8005ba0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fd fd64 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61b8      	str	r0, [r7, #24]
        break;
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <UART_SetConfig+0x4c4>)
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00c      	b.n	8005ba0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fd fc77 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61b8      	str	r0, [r7, #24]
        break;
 8005b8c:	e008      	b.n	8005ba0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	61bb      	str	r3, [r7, #24]
        break;
 8005b94:	e004      	b.n	8005ba0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9e:	bf00      	nop
    }

    if (pclk != 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085a      	lsrs	r2, r3, #1
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	441a      	add	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b0f      	cmp	r3, #15
 8005bbe:	d909      	bls.n	8005bd4 <UART_SetConfig+0x4a0>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d205      	bcs.n	8005bd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e001      	b.n	8005bd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005be4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40007c00 	.word	0x40007c00
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfa:	d10a      	bne.n	8005d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d50:	f7fc f8b2 	bl	8001eb8 <HAL_GetTick>
 8005d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d10e      	bne.n	8005d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f831 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e027      	b.n	8005dd2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d10e      	bne.n	8005dae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f81b 	bl	8005dda <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e011      	b.n	8005dd2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b09c      	sub	sp, #112	; 0x70
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	603b      	str	r3, [r7, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dea:	e0a7      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	f000 80a3 	beq.w	8005f3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fc f85f 	bl	8001eb8 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d13f      	bne.n	8005e8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e20:	667b      	str	r3, [r7, #100]	; 0x64
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e6      	bne.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	663b      	str	r3, [r7, #96]	; 0x60
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e5      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e068      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d050      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d148      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e6      	bne.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f06:	623a      	str	r2, [r7, #32]
 8005f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e5      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e010      	b.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	f43f af48 	beq.w	8005dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3770      	adds	r7, #112	; 0x70
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b095      	sub	sp, #84	; 0x54
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e6      	bne.n	8005f6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f023 0301 	bic.w	r3, r3, #1
 8005fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d118      	bne.n	800600e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0310 	bic.w	r3, r3, #16
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	613b      	str	r3, [r7, #16]
   return(result);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006022:	bf00      	nop
 8006024:	3754      	adds	r7, #84	; 0x54
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fb51 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b088      	sub	sp, #32
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	613b      	str	r3, [r7, #16]
   return(result);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fb1d 	bl	80056e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a6:	bf00      	nop
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <__errno>:
 80060b0:	4b01      	ldr	r3, [pc, #4]	; (80060b8 <__errno+0x8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000014 	.word	0x20000014

080060bc <__libc_init_array>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4d0d      	ldr	r5, [pc, #52]	; (80060f4 <__libc_init_array+0x38>)
 80060c0:	4c0d      	ldr	r4, [pc, #52]	; (80060f8 <__libc_init_array+0x3c>)
 80060c2:	1b64      	subs	r4, r4, r5
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	2600      	movs	r6, #0
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	d109      	bne.n	80060e0 <__libc_init_array+0x24>
 80060cc:	4d0b      	ldr	r5, [pc, #44]	; (80060fc <__libc_init_array+0x40>)
 80060ce:	4c0c      	ldr	r4, [pc, #48]	; (8006100 <__libc_init_array+0x44>)
 80060d0:	f001 fa00 	bl	80074d4 <_init>
 80060d4:	1b64      	subs	r4, r4, r5
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	2600      	movs	r6, #0
 80060da:	42a6      	cmp	r6, r4
 80060dc:	d105      	bne.n	80060ea <__libc_init_array+0x2e>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e4:	4798      	blx	r3
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7ee      	b.n	80060c8 <__libc_init_array+0xc>
 80060ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ee:	4798      	blx	r3
 80060f0:	3601      	adds	r6, #1
 80060f2:	e7f2      	b.n	80060da <__libc_init_array+0x1e>
 80060f4:	080080f4 	.word	0x080080f4
 80060f8:	080080f4 	.word	0x080080f4
 80060fc:	080080f4 	.word	0x080080f4
 8006100:	080080f8 	.word	0x080080f8

08006104 <memcpy>:
 8006104:	440a      	add	r2, r1
 8006106:	4291      	cmp	r1, r2
 8006108:	f100 33ff 	add.w	r3, r0, #4294967295
 800610c:	d100      	bne.n	8006110 <memcpy+0xc>
 800610e:	4770      	bx	lr
 8006110:	b510      	push	{r4, lr}
 8006112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611a:	4291      	cmp	r1, r2
 800611c:	d1f9      	bne.n	8006112 <memcpy+0xe>
 800611e:	bd10      	pop	{r4, pc}

08006120 <memset>:
 8006120:	4402      	add	r2, r0
 8006122:	4603      	mov	r3, r0
 8006124:	4293      	cmp	r3, r2
 8006126:	d100      	bne.n	800612a <memset+0xa>
 8006128:	4770      	bx	lr
 800612a:	f803 1b01 	strb.w	r1, [r3], #1
 800612e:	e7f9      	b.n	8006124 <memset+0x4>

08006130 <iprintf>:
 8006130:	b40f      	push	{r0, r1, r2, r3}
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <iprintf+0x2c>)
 8006134:	b513      	push	{r0, r1, r4, lr}
 8006136:	681c      	ldr	r4, [r3, #0]
 8006138:	b124      	cbz	r4, 8006144 <iprintf+0x14>
 800613a:	69a3      	ldr	r3, [r4, #24]
 800613c:	b913      	cbnz	r3, 8006144 <iprintf+0x14>
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fa7e 	bl	8006640 <__sinit>
 8006144:	ab05      	add	r3, sp, #20
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	68a1      	ldr	r1, [r4, #8]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fde3 	bl	8006d18 <_vfiprintf_r>
 8006152:	b002      	add	sp, #8
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	b004      	add	sp, #16
 800615a:	4770      	bx	lr
 800615c:	20000014 	.word	0x20000014

08006160 <_puts_r>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	460e      	mov	r6, r1
 8006164:	4605      	mov	r5, r0
 8006166:	b118      	cbz	r0, 8006170 <_puts_r+0x10>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_puts_r+0x10>
 800616c:	f000 fa68 	bl	8006640 <__sinit>
 8006170:	69ab      	ldr	r3, [r5, #24]
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	b913      	cbnz	r3, 800617c <_puts_r+0x1c>
 8006176:	4628      	mov	r0, r5
 8006178:	f000 fa62 	bl	8006640 <__sinit>
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <_puts_r+0xd0>)
 800617e:	429c      	cmp	r4, r3
 8006180:	d120      	bne.n	80061c4 <_puts_r+0x64>
 8006182:	686c      	ldr	r4, [r5, #4]
 8006184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006186:	07db      	lsls	r3, r3, #31
 8006188:	d405      	bmi.n	8006196 <_puts_r+0x36>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	0598      	lsls	r0, r3, #22
 800618e:	d402      	bmi.n	8006196 <_puts_r+0x36>
 8006190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006192:	f000 faf3 	bl	800677c <__retarget_lock_acquire_recursive>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	0719      	lsls	r1, r3, #28
 800619a:	d51d      	bpl.n	80061d8 <_puts_r+0x78>
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	b1db      	cbz	r3, 80061d8 <_puts_r+0x78>
 80061a0:	3e01      	subs	r6, #1
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061a8:	3b01      	subs	r3, #1
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	bb39      	cbnz	r1, 80061fe <_puts_r+0x9e>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da38      	bge.n	8006224 <_puts_r+0xc4>
 80061b2:	4622      	mov	r2, r4
 80061b4:	210a      	movs	r1, #10
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 f868 	bl	800628c <__swbuf_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d011      	beq.n	80061e4 <_puts_r+0x84>
 80061c0:	250a      	movs	r5, #10
 80061c2:	e011      	b.n	80061e8 <_puts_r+0x88>
 80061c4:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <_puts_r+0xd4>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <_puts_r+0x6e>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7da      	b.n	8006184 <_puts_r+0x24>
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <_puts_r+0xd8>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7d5      	b.n	8006184 <_puts_r+0x24>
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f8a8 	bl	8006330 <__swsetup_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d0dd      	beq.n	80061a0 <_puts_r+0x40>
 80061e4:	f04f 35ff 	mov.w	r5, #4294967295
 80061e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ea:	07da      	lsls	r2, r3, #31
 80061ec:	d405      	bmi.n	80061fa <_puts_r+0x9a>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	059b      	lsls	r3, r3, #22
 80061f2:	d402      	bmi.n	80061fa <_puts_r+0x9a>
 80061f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f6:	f000 fac2 	bl	800677e <__retarget_lock_release_recursive>
 80061fa:	4628      	mov	r0, r5
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da04      	bge.n	800620c <_puts_r+0xac>
 8006202:	69a2      	ldr	r2, [r4, #24]
 8006204:	429a      	cmp	r2, r3
 8006206:	dc06      	bgt.n	8006216 <_puts_r+0xb6>
 8006208:	290a      	cmp	r1, #10
 800620a:	d004      	beq.n	8006216 <_puts_r+0xb6>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	7019      	strb	r1, [r3, #0]
 8006214:	e7c5      	b.n	80061a2 <_puts_r+0x42>
 8006216:	4622      	mov	r2, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f837 	bl	800628c <__swbuf_r>
 800621e:	3001      	adds	r0, #1
 8006220:	d1bf      	bne.n	80061a2 <_puts_r+0x42>
 8006222:	e7df      	b.n	80061e4 <_puts_r+0x84>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	250a      	movs	r5, #10
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	701d      	strb	r5, [r3, #0]
 800622e:	e7db      	b.n	80061e8 <_puts_r+0x88>
 8006230:	08008078 	.word	0x08008078
 8006234:	08008098 	.word	0x08008098
 8006238:	08008058 	.word	0x08008058

0800623c <puts>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <puts+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f7ff bf8d 	b.w	8006160 <_puts_r>
 8006246:	bf00      	nop
 8006248:	20000014 	.word	0x20000014

0800624c <siprintf>:
 800624c:	b40e      	push	{r1, r2, r3}
 800624e:	b500      	push	{lr}
 8006250:	b09c      	sub	sp, #112	; 0x70
 8006252:	ab1d      	add	r3, sp, #116	; 0x74
 8006254:	9002      	str	r0, [sp, #8]
 8006256:	9006      	str	r0, [sp, #24]
 8006258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800625c:	4809      	ldr	r0, [pc, #36]	; (8006284 <siprintf+0x38>)
 800625e:	9107      	str	r1, [sp, #28]
 8006260:	9104      	str	r1, [sp, #16]
 8006262:	4909      	ldr	r1, [pc, #36]	; (8006288 <siprintf+0x3c>)
 8006264:	f853 2b04 	ldr.w	r2, [r3], #4
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	a902      	add	r1, sp, #8
 8006270:	f000 fc28 	bl	8006ac4 <_svfiprintf_r>
 8006274:	9b02      	ldr	r3, [sp, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	b01c      	add	sp, #112	; 0x70
 800627c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006280:	b003      	add	sp, #12
 8006282:	4770      	bx	lr
 8006284:	20000014 	.word	0x20000014
 8006288:	ffff0208 	.word	0xffff0208

0800628c <__swbuf_r>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	4614      	mov	r4, r2
 8006292:	4605      	mov	r5, r0
 8006294:	b118      	cbz	r0, 800629e <__swbuf_r+0x12>
 8006296:	6983      	ldr	r3, [r0, #24]
 8006298:	b90b      	cbnz	r3, 800629e <__swbuf_r+0x12>
 800629a:	f000 f9d1 	bl	8006640 <__sinit>
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <__swbuf_r+0x98>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d12b      	bne.n	80062fc <__swbuf_r+0x70>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	69a3      	ldr	r3, [r4, #24]
 80062a8:	60a3      	str	r3, [r4, #8]
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	071a      	lsls	r2, r3, #28
 80062ae:	d52f      	bpl.n	8006310 <__swbuf_r+0x84>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	b36b      	cbz	r3, 8006310 <__swbuf_r+0x84>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1ac0      	subs	r0, r0, r3
 80062ba:	6963      	ldr	r3, [r4, #20]
 80062bc:	b2f6      	uxtb	r6, r6
 80062be:	4283      	cmp	r3, r0
 80062c0:	4637      	mov	r7, r6
 80062c2:	dc04      	bgt.n	80062ce <__swbuf_r+0x42>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f926 	bl	8006518 <_fflush_r>
 80062cc:	bb30      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	6022      	str	r2, [r4, #0]
 80062da:	701e      	strb	r6, [r3, #0]
 80062dc:	6963      	ldr	r3, [r4, #20]
 80062de:	3001      	adds	r0, #1
 80062e0:	4283      	cmp	r3, r0
 80062e2:	d004      	beq.n	80062ee <__swbuf_r+0x62>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	07db      	lsls	r3, r3, #31
 80062e8:	d506      	bpl.n	80062f8 <__swbuf_r+0x6c>
 80062ea:	2e0a      	cmp	r6, #10
 80062ec:	d104      	bne.n	80062f8 <__swbuf_r+0x6c>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f911 	bl	8006518 <_fflush_r>
 80062f6:	b988      	cbnz	r0, 800631c <__swbuf_r+0x90>
 80062f8:	4638      	mov	r0, r7
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <__swbuf_r+0x9c>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <__swbuf_r+0x7a>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7cf      	b.n	80062a6 <__swbuf_r+0x1a>
 8006306:	4b09      	ldr	r3, [pc, #36]	; (800632c <__swbuf_r+0xa0>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7ca      	b.n	80062a6 <__swbuf_r+0x1a>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f80c 	bl	8006330 <__swsetup_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d0cb      	beq.n	80062b4 <__swbuf_r+0x28>
 800631c:	f04f 37ff 	mov.w	r7, #4294967295
 8006320:	e7ea      	b.n	80062f8 <__swbuf_r+0x6c>
 8006322:	bf00      	nop
 8006324:	08008078 	.word	0x08008078
 8006328:	08008098 	.word	0x08008098
 800632c:	08008058 	.word	0x08008058

08006330 <__swsetup_r>:
 8006330:	4b32      	ldr	r3, [pc, #200]	; (80063fc <__swsetup_r+0xcc>)
 8006332:	b570      	push	{r4, r5, r6, lr}
 8006334:	681d      	ldr	r5, [r3, #0]
 8006336:	4606      	mov	r6, r0
 8006338:	460c      	mov	r4, r1
 800633a:	b125      	cbz	r5, 8006346 <__swsetup_r+0x16>
 800633c:	69ab      	ldr	r3, [r5, #24]
 800633e:	b913      	cbnz	r3, 8006346 <__swsetup_r+0x16>
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f97d 	bl	8006640 <__sinit>
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <__swsetup_r+0xd0>)
 8006348:	429c      	cmp	r4, r3
 800634a:	d10f      	bne.n	800636c <__swsetup_r+0x3c>
 800634c:	686c      	ldr	r4, [r5, #4]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006354:	0719      	lsls	r1, r3, #28
 8006356:	d42c      	bmi.n	80063b2 <__swsetup_r+0x82>
 8006358:	06dd      	lsls	r5, r3, #27
 800635a:	d411      	bmi.n	8006380 <__swsetup_r+0x50>
 800635c:	2309      	movs	r3, #9
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	e03e      	b.n	80063ea <__swsetup_r+0xba>
 800636c:	4b25      	ldr	r3, [pc, #148]	; (8006404 <__swsetup_r+0xd4>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d101      	bne.n	8006376 <__swsetup_r+0x46>
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	e7eb      	b.n	800634e <__swsetup_r+0x1e>
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <__swsetup_r+0xd8>)
 8006378:	429c      	cmp	r4, r3
 800637a:	bf08      	it	eq
 800637c:	68ec      	ldreq	r4, [r5, #12]
 800637e:	e7e6      	b.n	800634e <__swsetup_r+0x1e>
 8006380:	0758      	lsls	r0, r3, #29
 8006382:	d512      	bpl.n	80063aa <__swsetup_r+0x7a>
 8006384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006386:	b141      	cbz	r1, 800639a <__swsetup_r+0x6a>
 8006388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800638c:	4299      	cmp	r1, r3
 800638e:	d002      	beq.n	8006396 <__swsetup_r+0x66>
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fa5b 	bl	800684c <_free_r>
 8006396:	2300      	movs	r3, #0
 8006398:	6363      	str	r3, [r4, #52]	; 0x34
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	2300      	movs	r3, #0
 80063a4:	6063      	str	r3, [r4, #4]
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0308 	orr.w	r3, r3, #8
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	b94b      	cbnz	r3, 80063ca <__swsetup_r+0x9a>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d003      	beq.n	80063ca <__swsetup_r+0x9a>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 fa01 	bl	80067cc <__smakebuf_r>
 80063ca:	89a0      	ldrh	r0, [r4, #12]
 80063cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d0:	f010 0301 	ands.w	r3, r0, #1
 80063d4:	d00a      	beq.n	80063ec <__swsetup_r+0xbc>
 80063d6:	2300      	movs	r3, #0
 80063d8:	60a3      	str	r3, [r4, #8]
 80063da:	6963      	ldr	r3, [r4, #20]
 80063dc:	425b      	negs	r3, r3
 80063de:	61a3      	str	r3, [r4, #24]
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	b943      	cbnz	r3, 80063f6 <__swsetup_r+0xc6>
 80063e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063e8:	d1ba      	bne.n	8006360 <__swsetup_r+0x30>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	0781      	lsls	r1, r0, #30
 80063ee:	bf58      	it	pl
 80063f0:	6963      	ldrpl	r3, [r4, #20]
 80063f2:	60a3      	str	r3, [r4, #8]
 80063f4:	e7f4      	b.n	80063e0 <__swsetup_r+0xb0>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e7f7      	b.n	80063ea <__swsetup_r+0xba>
 80063fa:	bf00      	nop
 80063fc:	20000014 	.word	0x20000014
 8006400:	08008078 	.word	0x08008078
 8006404:	08008098 	.word	0x08008098
 8006408:	08008058 	.word	0x08008058

0800640c <__sflush_r>:
 800640c:	898a      	ldrh	r2, [r1, #12]
 800640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	0710      	lsls	r0, r2, #28
 8006416:	460c      	mov	r4, r1
 8006418:	d458      	bmi.n	80064cc <__sflush_r+0xc0>
 800641a:	684b      	ldr	r3, [r1, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dc05      	bgt.n	800642c <__sflush_r+0x20>
 8006420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc02      	bgt.n	800642c <__sflush_r+0x20>
 8006426:	2000      	movs	r0, #0
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800642e:	2e00      	cmp	r6, #0
 8006430:	d0f9      	beq.n	8006426 <__sflush_r+0x1a>
 8006432:	2300      	movs	r3, #0
 8006434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006438:	682f      	ldr	r7, [r5, #0]
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	d032      	beq.n	80064a4 <__sflush_r+0x98>
 800643e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	075a      	lsls	r2, r3, #29
 8006444:	d505      	bpl.n	8006452 <__sflush_r+0x46>
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	1ac0      	subs	r0, r0, r3
 800644a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800644c:	b10b      	cbz	r3, 8006452 <__sflush_r+0x46>
 800644e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006450:	1ac0      	subs	r0, r0, r3
 8006452:	2300      	movs	r3, #0
 8006454:	4602      	mov	r2, r0
 8006456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	d106      	bne.n	8006472 <__sflush_r+0x66>
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	291d      	cmp	r1, #29
 8006468:	d82c      	bhi.n	80064c4 <__sflush_r+0xb8>
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <__sflush_r+0x108>)
 800646c:	40ca      	lsrs	r2, r1
 800646e:	07d6      	lsls	r6, r2, #31
 8006470:	d528      	bpl.n	80064c4 <__sflush_r+0xb8>
 8006472:	2200      	movs	r2, #0
 8006474:	6062      	str	r2, [r4, #4]
 8006476:	04d9      	lsls	r1, r3, #19
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	d504      	bpl.n	8006488 <__sflush_r+0x7c>
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	d101      	bne.n	8006486 <__sflush_r+0x7a>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	b903      	cbnz	r3, 8006488 <__sflush_r+0x7c>
 8006486:	6560      	str	r0, [r4, #84]	; 0x54
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	602f      	str	r7, [r5, #0]
 800648c:	2900      	cmp	r1, #0
 800648e:	d0ca      	beq.n	8006426 <__sflush_r+0x1a>
 8006490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006494:	4299      	cmp	r1, r3
 8006496:	d002      	beq.n	800649e <__sflush_r+0x92>
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f9d7 	bl	800684c <_free_r>
 800649e:	2000      	movs	r0, #0
 80064a0:	6360      	str	r0, [r4, #52]	; 0x34
 80064a2:	e7c1      	b.n	8006428 <__sflush_r+0x1c>
 80064a4:	6a21      	ldr	r1, [r4, #32]
 80064a6:	2301      	movs	r3, #1
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b0      	blx	r6
 80064ac:	1c41      	adds	r1, r0, #1
 80064ae:	d1c7      	bne.n	8006440 <__sflush_r+0x34>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c4      	beq.n	8006440 <__sflush_r+0x34>
 80064b6:	2b1d      	cmp	r3, #29
 80064b8:	d001      	beq.n	80064be <__sflush_r+0xb2>
 80064ba:	2b16      	cmp	r3, #22
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0xb6>
 80064be:	602f      	str	r7, [r5, #0]
 80064c0:	e7b1      	b.n	8006426 <__sflush_r+0x1a>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	e7ad      	b.n	8006428 <__sflush_r+0x1c>
 80064cc:	690f      	ldr	r7, [r1, #16]
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	d0a9      	beq.n	8006426 <__sflush_r+0x1a>
 80064d2:	0793      	lsls	r3, r2, #30
 80064d4:	680e      	ldr	r6, [r1, #0]
 80064d6:	bf08      	it	eq
 80064d8:	694b      	ldreq	r3, [r1, #20]
 80064da:	600f      	str	r7, [r1, #0]
 80064dc:	bf18      	it	ne
 80064de:	2300      	movne	r3, #0
 80064e0:	eba6 0807 	sub.w	r8, r6, r7
 80064e4:	608b      	str	r3, [r1, #8]
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	dd9c      	ble.n	8006426 <__sflush_r+0x1a>
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f0:	4643      	mov	r3, r8
 80064f2:	463a      	mov	r2, r7
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	2800      	cmp	r0, #0
 80064fa:	dc06      	bgt.n	800650a <__sflush_r+0xfe>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	e78e      	b.n	8006428 <__sflush_r+0x1c>
 800650a:	4407      	add	r7, r0
 800650c:	eba8 0800 	sub.w	r8, r8, r0
 8006510:	e7e9      	b.n	80064e6 <__sflush_r+0xda>
 8006512:	bf00      	nop
 8006514:	20400001 	.word	0x20400001

08006518 <_fflush_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b913      	cbnz	r3, 8006528 <_fflush_r+0x10>
 8006522:	2500      	movs	r5, #0
 8006524:	4628      	mov	r0, r5
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	b118      	cbz	r0, 8006532 <_fflush_r+0x1a>
 800652a:	6983      	ldr	r3, [r0, #24]
 800652c:	b90b      	cbnz	r3, 8006532 <_fflush_r+0x1a>
 800652e:	f000 f887 	bl	8006640 <__sinit>
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <_fflush_r+0x6c>)
 8006534:	429c      	cmp	r4, r3
 8006536:	d11b      	bne.n	8006570 <_fflush_r+0x58>
 8006538:	686c      	ldr	r4, [r5, #4]
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ef      	beq.n	8006522 <_fflush_r+0xa>
 8006542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006544:	07d0      	lsls	r0, r2, #31
 8006546:	d404      	bmi.n	8006552 <_fflush_r+0x3a>
 8006548:	0599      	lsls	r1, r3, #22
 800654a:	d402      	bmi.n	8006552 <_fflush_r+0x3a>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f000 f915 	bl	800677c <__retarget_lock_acquire_recursive>
 8006552:	4628      	mov	r0, r5
 8006554:	4621      	mov	r1, r4
 8006556:	f7ff ff59 	bl	800640c <__sflush_r>
 800655a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655c:	07da      	lsls	r2, r3, #31
 800655e:	4605      	mov	r5, r0
 8006560:	d4e0      	bmi.n	8006524 <_fflush_r+0xc>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	059b      	lsls	r3, r3, #22
 8006566:	d4dd      	bmi.n	8006524 <_fflush_r+0xc>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f000 f908 	bl	800677e <__retarget_lock_release_recursive>
 800656e:	e7d9      	b.n	8006524 <_fflush_r+0xc>
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <_fflush_r+0x70>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <_fflush_r+0x62>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7df      	b.n	800653a <_fflush_r+0x22>
 800657a:	4b04      	ldr	r3, [pc, #16]	; (800658c <_fflush_r+0x74>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7da      	b.n	800653a <_fflush_r+0x22>
 8006584:	08008078 	.word	0x08008078
 8006588:	08008098 	.word	0x08008098
 800658c:	08008058 	.word	0x08008058

08006590 <std>:
 8006590:	2300      	movs	r3, #0
 8006592:	b510      	push	{r4, lr}
 8006594:	4604      	mov	r4, r0
 8006596:	e9c0 3300 	strd	r3, r3, [r0]
 800659a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800659e:	6083      	str	r3, [r0, #8]
 80065a0:	8181      	strh	r1, [r0, #12]
 80065a2:	6643      	str	r3, [r0, #100]	; 0x64
 80065a4:	81c2      	strh	r2, [r0, #14]
 80065a6:	6183      	str	r3, [r0, #24]
 80065a8:	4619      	mov	r1, r3
 80065aa:	2208      	movs	r2, #8
 80065ac:	305c      	adds	r0, #92	; 0x5c
 80065ae:	f7ff fdb7 	bl	8006120 <memset>
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <std+0x38>)
 80065b4:	6263      	str	r3, [r4, #36]	; 0x24
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <std+0x3c>)
 80065b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <std+0x40>)
 80065bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <std+0x44>)
 80065c0:	6224      	str	r4, [r4, #32]
 80065c2:	6323      	str	r3, [r4, #48]	; 0x30
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	080072c1 	.word	0x080072c1
 80065cc:	080072e3 	.word	0x080072e3
 80065d0:	0800731b 	.word	0x0800731b
 80065d4:	0800733f 	.word	0x0800733f

080065d8 <_cleanup_r>:
 80065d8:	4901      	ldr	r1, [pc, #4]	; (80065e0 <_cleanup_r+0x8>)
 80065da:	f000 b8af 	b.w	800673c <_fwalk_reent>
 80065de:	bf00      	nop
 80065e0:	08006519 	.word	0x08006519

080065e4 <__sfmoreglue>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	2268      	movs	r2, #104	; 0x68
 80065e8:	1e4d      	subs	r5, r1, #1
 80065ea:	4355      	muls	r5, r2
 80065ec:	460e      	mov	r6, r1
 80065ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065f2:	f000 f997 	bl	8006924 <_malloc_r>
 80065f6:	4604      	mov	r4, r0
 80065f8:	b140      	cbz	r0, 800660c <__sfmoreglue+0x28>
 80065fa:	2100      	movs	r1, #0
 80065fc:	e9c0 1600 	strd	r1, r6, [r0]
 8006600:	300c      	adds	r0, #12
 8006602:	60a0      	str	r0, [r4, #8]
 8006604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006608:	f7ff fd8a 	bl	8006120 <memset>
 800660c:	4620      	mov	r0, r4
 800660e:	bd70      	pop	{r4, r5, r6, pc}

08006610 <__sfp_lock_acquire>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__sfp_lock_acquire+0x8>)
 8006612:	f000 b8b3 	b.w	800677c <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	20000439 	.word	0x20000439

0800661c <__sfp_lock_release>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__sfp_lock_release+0x8>)
 800661e:	f000 b8ae 	b.w	800677e <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	20000439 	.word	0x20000439

08006628 <__sinit_lock_acquire>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__sinit_lock_acquire+0x8>)
 800662a:	f000 b8a7 	b.w	800677c <__retarget_lock_acquire_recursive>
 800662e:	bf00      	nop
 8006630:	2000043a 	.word	0x2000043a

08006634 <__sinit_lock_release>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sinit_lock_release+0x8>)
 8006636:	f000 b8a2 	b.w	800677e <__retarget_lock_release_recursive>
 800663a:	bf00      	nop
 800663c:	2000043a 	.word	0x2000043a

08006640 <__sinit>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
 8006644:	f7ff fff0 	bl	8006628 <__sinit_lock_acquire>
 8006648:	69a3      	ldr	r3, [r4, #24]
 800664a:	b11b      	cbz	r3, 8006654 <__sinit+0x14>
 800664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006650:	f7ff bff0 	b.w	8006634 <__sinit_lock_release>
 8006654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006658:	6523      	str	r3, [r4, #80]	; 0x50
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <__sinit+0x68>)
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <__sinit+0x6c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	62a2      	str	r2, [r4, #40]	; 0x28
 8006662:	42a3      	cmp	r3, r4
 8006664:	bf04      	itt	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	61a3      	streq	r3, [r4, #24]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f820 	bl	80066b0 <__sfp>
 8006670:	6060      	str	r0, [r4, #4]
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f81c 	bl	80066b0 <__sfp>
 8006678:	60a0      	str	r0, [r4, #8]
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f818 	bl	80066b0 <__sfp>
 8006680:	2200      	movs	r2, #0
 8006682:	60e0      	str	r0, [r4, #12]
 8006684:	2104      	movs	r1, #4
 8006686:	6860      	ldr	r0, [r4, #4]
 8006688:	f7ff ff82 	bl	8006590 <std>
 800668c:	68a0      	ldr	r0, [r4, #8]
 800668e:	2201      	movs	r2, #1
 8006690:	2109      	movs	r1, #9
 8006692:	f7ff ff7d 	bl	8006590 <std>
 8006696:	68e0      	ldr	r0, [r4, #12]
 8006698:	2202      	movs	r2, #2
 800669a:	2112      	movs	r1, #18
 800669c:	f7ff ff78 	bl	8006590 <std>
 80066a0:	2301      	movs	r3, #1
 80066a2:	61a3      	str	r3, [r4, #24]
 80066a4:	e7d2      	b.n	800664c <__sinit+0xc>
 80066a6:	bf00      	nop
 80066a8:	08008054 	.word	0x08008054
 80066ac:	080065d9 	.word	0x080065d9

080066b0 <__sfp>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	4607      	mov	r7, r0
 80066b4:	f7ff ffac 	bl	8006610 <__sfp_lock_acquire>
 80066b8:	4b1e      	ldr	r3, [pc, #120]	; (8006734 <__sfp+0x84>)
 80066ba:	681e      	ldr	r6, [r3, #0]
 80066bc:	69b3      	ldr	r3, [r6, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__sfp+0x16>
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff ffbd 	bl	8006640 <__sinit>
 80066c6:	3648      	adds	r6, #72	; 0x48
 80066c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	d503      	bpl.n	80066d8 <__sfp+0x28>
 80066d0:	6833      	ldr	r3, [r6, #0]
 80066d2:	b30b      	cbz	r3, 8006718 <__sfp+0x68>
 80066d4:	6836      	ldr	r6, [r6, #0]
 80066d6:	e7f7      	b.n	80066c8 <__sfp+0x18>
 80066d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066dc:	b9d5      	cbnz	r5, 8006714 <__sfp+0x64>
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <__sfp+0x88>)
 80066e0:	60e3      	str	r3, [r4, #12]
 80066e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066e6:	6665      	str	r5, [r4, #100]	; 0x64
 80066e8:	f000 f847 	bl	800677a <__retarget_lock_init_recursive>
 80066ec:	f7ff ff96 	bl	800661c <__sfp_lock_release>
 80066f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066f8:	6025      	str	r5, [r4, #0]
 80066fa:	61a5      	str	r5, [r4, #24]
 80066fc:	2208      	movs	r2, #8
 80066fe:	4629      	mov	r1, r5
 8006700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006704:	f7ff fd0c 	bl	8006120 <memset>
 8006708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800670c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006710:	4620      	mov	r0, r4
 8006712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006714:	3468      	adds	r4, #104	; 0x68
 8006716:	e7d9      	b.n	80066cc <__sfp+0x1c>
 8006718:	2104      	movs	r1, #4
 800671a:	4638      	mov	r0, r7
 800671c:	f7ff ff62 	bl	80065e4 <__sfmoreglue>
 8006720:	4604      	mov	r4, r0
 8006722:	6030      	str	r0, [r6, #0]
 8006724:	2800      	cmp	r0, #0
 8006726:	d1d5      	bne.n	80066d4 <__sfp+0x24>
 8006728:	f7ff ff78 	bl	800661c <__sfp_lock_release>
 800672c:	230c      	movs	r3, #12
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	e7ee      	b.n	8006710 <__sfp+0x60>
 8006732:	bf00      	nop
 8006734:	08008054 	.word	0x08008054
 8006738:	ffff0001 	.word	0xffff0001

0800673c <_fwalk_reent>:
 800673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006740:	4606      	mov	r6, r0
 8006742:	4688      	mov	r8, r1
 8006744:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006748:	2700      	movs	r7, #0
 800674a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800674e:	f1b9 0901 	subs.w	r9, r9, #1
 8006752:	d505      	bpl.n	8006760 <_fwalk_reent+0x24>
 8006754:	6824      	ldr	r4, [r4, #0]
 8006756:	2c00      	cmp	r4, #0
 8006758:	d1f7      	bne.n	800674a <_fwalk_reent+0xe>
 800675a:	4638      	mov	r0, r7
 800675c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006760:	89ab      	ldrh	r3, [r5, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d907      	bls.n	8006776 <_fwalk_reent+0x3a>
 8006766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800676a:	3301      	adds	r3, #1
 800676c:	d003      	beq.n	8006776 <_fwalk_reent+0x3a>
 800676e:	4629      	mov	r1, r5
 8006770:	4630      	mov	r0, r6
 8006772:	47c0      	blx	r8
 8006774:	4307      	orrs	r7, r0
 8006776:	3568      	adds	r5, #104	; 0x68
 8006778:	e7e9      	b.n	800674e <_fwalk_reent+0x12>

0800677a <__retarget_lock_init_recursive>:
 800677a:	4770      	bx	lr

0800677c <__retarget_lock_acquire_recursive>:
 800677c:	4770      	bx	lr

0800677e <__retarget_lock_release_recursive>:
 800677e:	4770      	bx	lr

08006780 <__swhatbuf_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	460e      	mov	r6, r1
 8006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006788:	2900      	cmp	r1, #0
 800678a:	b096      	sub	sp, #88	; 0x58
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	da08      	bge.n	80067a4 <__swhatbuf_r+0x24>
 8006792:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	602a      	str	r2, [r5, #0]
 800679a:	061a      	lsls	r2, r3, #24
 800679c:	d410      	bmi.n	80067c0 <__swhatbuf_r+0x40>
 800679e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067a2:	e00e      	b.n	80067c2 <__swhatbuf_r+0x42>
 80067a4:	466a      	mov	r2, sp
 80067a6:	f000 fdf1 	bl	800738c <_fstat_r>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	dbf1      	blt.n	8006792 <__swhatbuf_r+0x12>
 80067ae:	9a01      	ldr	r2, [sp, #4]
 80067b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067b8:	425a      	negs	r2, r3
 80067ba:	415a      	adcs	r2, r3
 80067bc:	602a      	str	r2, [r5, #0]
 80067be:	e7ee      	b.n	800679e <__swhatbuf_r+0x1e>
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	2000      	movs	r0, #0
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	b016      	add	sp, #88	; 0x58
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080067cc <__smakebuf_r>:
 80067cc:	898b      	ldrh	r3, [r1, #12]
 80067ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067d0:	079d      	lsls	r5, r3, #30
 80067d2:	4606      	mov	r6, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	d507      	bpl.n	80067e8 <__smakebuf_r+0x1c>
 80067d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	2301      	movs	r3, #1
 80067e2:	6163      	str	r3, [r4, #20]
 80067e4:	b002      	add	sp, #8
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	ab01      	add	r3, sp, #4
 80067ea:	466a      	mov	r2, sp
 80067ec:	f7ff ffc8 	bl	8006780 <__swhatbuf_r>
 80067f0:	9900      	ldr	r1, [sp, #0]
 80067f2:	4605      	mov	r5, r0
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f895 	bl	8006924 <_malloc_r>
 80067fa:	b948      	cbnz	r0, 8006810 <__smakebuf_r+0x44>
 80067fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006800:	059a      	lsls	r2, r3, #22
 8006802:	d4ef      	bmi.n	80067e4 <__smakebuf_r+0x18>
 8006804:	f023 0303 	bic.w	r3, r3, #3
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7e3      	b.n	80067d8 <__smakebuf_r+0xc>
 8006810:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <__smakebuf_r+0x7c>)
 8006812:	62b3      	str	r3, [r6, #40]	; 0x28
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	6020      	str	r0, [r4, #0]
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	6163      	str	r3, [r4, #20]
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	6120      	str	r0, [r4, #16]
 8006826:	b15b      	cbz	r3, 8006840 <__smakebuf_r+0x74>
 8006828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682c:	4630      	mov	r0, r6
 800682e:	f000 fdbf 	bl	80073b0 <_isatty_r>
 8006832:	b128      	cbz	r0, 8006840 <__smakebuf_r+0x74>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	89a0      	ldrh	r0, [r4, #12]
 8006842:	4305      	orrs	r5, r0
 8006844:	81a5      	strh	r5, [r4, #12]
 8006846:	e7cd      	b.n	80067e4 <__smakebuf_r+0x18>
 8006848:	080065d9 	.word	0x080065d9

0800684c <_free_r>:
 800684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800684e:	2900      	cmp	r1, #0
 8006850:	d044      	beq.n	80068dc <_free_r+0x90>
 8006852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006856:	9001      	str	r0, [sp, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f1a1 0404 	sub.w	r4, r1, #4
 800685e:	bfb8      	it	lt
 8006860:	18e4      	addlt	r4, r4, r3
 8006862:	f000 fde1 	bl	8007428 <__malloc_lock>
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <_free_r+0x94>)
 8006868:	9801      	ldr	r0, [sp, #4]
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x30>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	b003      	add	sp, #12
 8006874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006878:	f000 bddc 	b.w	8007434 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x46>
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	1961      	adds	r1, r4, r5
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1949      	addeq	r1, r1, r5
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x22>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x50>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x46>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1855      	adds	r5, r2, r1
 80068a0:	42a5      	cmp	r5, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x70>
 80068a4:	6824      	ldr	r4, [r4, #0]
 80068a6:	4421      	add	r1, r4
 80068a8:	1854      	adds	r4, r2, r1
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x26>
 80068b0:	681c      	ldr	r4, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	4421      	add	r1, r4
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x26>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x78>
 80068be:	230c      	movs	r3, #12
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x26>
 80068c4:	6825      	ldr	r5, [r4, #0]
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x26>
 80068dc:	b003      	add	sp, #12
 80068de:	bd30      	pop	{r4, r5, pc}
 80068e0:	2000043c 	.word	0x2000043c

080068e4 <sbrk_aligned>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4e0e      	ldr	r6, [pc, #56]	; (8006920 <sbrk_aligned+0x3c>)
 80068e8:	460c      	mov	r4, r1
 80068ea:	6831      	ldr	r1, [r6, #0]
 80068ec:	4605      	mov	r5, r0
 80068ee:	b911      	cbnz	r1, 80068f6 <sbrk_aligned+0x12>
 80068f0:	f000 fcd6 	bl	80072a0 <_sbrk_r>
 80068f4:	6030      	str	r0, [r6, #0]
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fcd1 	bl	80072a0 <_sbrk_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d00a      	beq.n	8006918 <sbrk_aligned+0x34>
 8006902:	1cc4      	adds	r4, r0, #3
 8006904:	f024 0403 	bic.w	r4, r4, #3
 8006908:	42a0      	cmp	r0, r4
 800690a:	d007      	beq.n	800691c <sbrk_aligned+0x38>
 800690c:	1a21      	subs	r1, r4, r0
 800690e:	4628      	mov	r0, r5
 8006910:	f000 fcc6 	bl	80072a0 <_sbrk_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d101      	bne.n	800691c <sbrk_aligned+0x38>
 8006918:	f04f 34ff 	mov.w	r4, #4294967295
 800691c:	4620      	mov	r0, r4
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	20000440 	.word	0x20000440

08006924 <_malloc_r>:
 8006924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006928:	1ccd      	adds	r5, r1, #3
 800692a:	f025 0503 	bic.w	r5, r5, #3
 800692e:	3508      	adds	r5, #8
 8006930:	2d0c      	cmp	r5, #12
 8006932:	bf38      	it	cc
 8006934:	250c      	movcc	r5, #12
 8006936:	2d00      	cmp	r5, #0
 8006938:	4607      	mov	r7, r0
 800693a:	db01      	blt.n	8006940 <_malloc_r+0x1c>
 800693c:	42a9      	cmp	r1, r5
 800693e:	d905      	bls.n	800694c <_malloc_r+0x28>
 8006940:	230c      	movs	r3, #12
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	2600      	movs	r6, #0
 8006946:	4630      	mov	r0, r6
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	4e2e      	ldr	r6, [pc, #184]	; (8006a08 <_malloc_r+0xe4>)
 800694e:	f000 fd6b 	bl	8007428 <__malloc_lock>
 8006952:	6833      	ldr	r3, [r6, #0]
 8006954:	461c      	mov	r4, r3
 8006956:	bb34      	cbnz	r4, 80069a6 <_malloc_r+0x82>
 8006958:	4629      	mov	r1, r5
 800695a:	4638      	mov	r0, r7
 800695c:	f7ff ffc2 	bl	80068e4 <sbrk_aligned>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	4604      	mov	r4, r0
 8006964:	d14d      	bne.n	8006a02 <_malloc_r+0xde>
 8006966:	6834      	ldr	r4, [r6, #0]
 8006968:	4626      	mov	r6, r4
 800696a:	2e00      	cmp	r6, #0
 800696c:	d140      	bne.n	80069f0 <_malloc_r+0xcc>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	4631      	mov	r1, r6
 8006972:	4638      	mov	r0, r7
 8006974:	eb04 0803 	add.w	r8, r4, r3
 8006978:	f000 fc92 	bl	80072a0 <_sbrk_r>
 800697c:	4580      	cmp	r8, r0
 800697e:	d13a      	bne.n	80069f6 <_malloc_r+0xd2>
 8006980:	6821      	ldr	r1, [r4, #0]
 8006982:	3503      	adds	r5, #3
 8006984:	1a6d      	subs	r5, r5, r1
 8006986:	f025 0503 	bic.w	r5, r5, #3
 800698a:	3508      	adds	r5, #8
 800698c:	2d0c      	cmp	r5, #12
 800698e:	bf38      	it	cc
 8006990:	250c      	movcc	r5, #12
 8006992:	4629      	mov	r1, r5
 8006994:	4638      	mov	r0, r7
 8006996:	f7ff ffa5 	bl	80068e4 <sbrk_aligned>
 800699a:	3001      	adds	r0, #1
 800699c:	d02b      	beq.n	80069f6 <_malloc_r+0xd2>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	442b      	add	r3, r5
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	e00e      	b.n	80069c4 <_malloc_r+0xa0>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	1b52      	subs	r2, r2, r5
 80069aa:	d41e      	bmi.n	80069ea <_malloc_r+0xc6>
 80069ac:	2a0b      	cmp	r2, #11
 80069ae:	d916      	bls.n	80069de <_malloc_r+0xba>
 80069b0:	1961      	adds	r1, r4, r5
 80069b2:	42a3      	cmp	r3, r4
 80069b4:	6025      	str	r5, [r4, #0]
 80069b6:	bf18      	it	ne
 80069b8:	6059      	strne	r1, [r3, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	bf08      	it	eq
 80069be:	6031      	streq	r1, [r6, #0]
 80069c0:	5162      	str	r2, [r4, r5]
 80069c2:	604b      	str	r3, [r1, #4]
 80069c4:	4638      	mov	r0, r7
 80069c6:	f104 060b 	add.w	r6, r4, #11
 80069ca:	f000 fd33 	bl	8007434 <__malloc_unlock>
 80069ce:	f026 0607 	bic.w	r6, r6, #7
 80069d2:	1d23      	adds	r3, r4, #4
 80069d4:	1af2      	subs	r2, r6, r3
 80069d6:	d0b6      	beq.n	8006946 <_malloc_r+0x22>
 80069d8:	1b9b      	subs	r3, r3, r6
 80069da:	50a3      	str	r3, [r4, r2]
 80069dc:	e7b3      	b.n	8006946 <_malloc_r+0x22>
 80069de:	6862      	ldr	r2, [r4, #4]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	bf0c      	ite	eq
 80069e4:	6032      	streq	r2, [r6, #0]
 80069e6:	605a      	strne	r2, [r3, #4]
 80069e8:	e7ec      	b.n	80069c4 <_malloc_r+0xa0>
 80069ea:	4623      	mov	r3, r4
 80069ec:	6864      	ldr	r4, [r4, #4]
 80069ee:	e7b2      	b.n	8006956 <_malloc_r+0x32>
 80069f0:	4634      	mov	r4, r6
 80069f2:	6876      	ldr	r6, [r6, #4]
 80069f4:	e7b9      	b.n	800696a <_malloc_r+0x46>
 80069f6:	230c      	movs	r3, #12
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4638      	mov	r0, r7
 80069fc:	f000 fd1a 	bl	8007434 <__malloc_unlock>
 8006a00:	e7a1      	b.n	8006946 <_malloc_r+0x22>
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	e7de      	b.n	80069c4 <_malloc_r+0xa0>
 8006a06:	bf00      	nop
 8006a08:	2000043c 	.word	0x2000043c

08006a0c <__ssputs_r>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	688e      	ldr	r6, [r1, #8]
 8006a12:	429e      	cmp	r6, r3
 8006a14:	4682      	mov	sl, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	4690      	mov	r8, r2
 8006a1a:	461f      	mov	r7, r3
 8006a1c:	d838      	bhi.n	8006a90 <__ssputs_r+0x84>
 8006a1e:	898a      	ldrh	r2, [r1, #12]
 8006a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a24:	d032      	beq.n	8006a8c <__ssputs_r+0x80>
 8006a26:	6825      	ldr	r5, [r4, #0]
 8006a28:	6909      	ldr	r1, [r1, #16]
 8006a2a:	eba5 0901 	sub.w	r9, r5, r1
 8006a2e:	6965      	ldr	r5, [r4, #20]
 8006a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a38:	3301      	adds	r3, #1
 8006a3a:	444b      	add	r3, r9
 8006a3c:	106d      	asrs	r5, r5, #1
 8006a3e:	429d      	cmp	r5, r3
 8006a40:	bf38      	it	cc
 8006a42:	461d      	movcc	r5, r3
 8006a44:	0553      	lsls	r3, r2, #21
 8006a46:	d531      	bpl.n	8006aac <__ssputs_r+0xa0>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7ff ff6b 	bl	8006924 <_malloc_r>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	b950      	cbnz	r0, 8006a68 <__ssputs_r+0x5c>
 8006a52:	230c      	movs	r3, #12
 8006a54:	f8ca 3000 	str.w	r3, [sl]
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a68:	6921      	ldr	r1, [r4, #16]
 8006a6a:	464a      	mov	r2, r9
 8006a6c:	f7ff fb4a 	bl	8006104 <memcpy>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	6126      	str	r6, [r4, #16]
 8006a7e:	6165      	str	r5, [r4, #20]
 8006a80:	444e      	add	r6, r9
 8006a82:	eba5 0509 	sub.w	r5, r5, r9
 8006a86:	6026      	str	r6, [r4, #0]
 8006a88:	60a5      	str	r5, [r4, #8]
 8006a8a:	463e      	mov	r6, r7
 8006a8c:	42be      	cmp	r6, r7
 8006a8e:	d900      	bls.n	8006a92 <__ssputs_r+0x86>
 8006a90:	463e      	mov	r6, r7
 8006a92:	6820      	ldr	r0, [r4, #0]
 8006a94:	4632      	mov	r2, r6
 8006a96:	4641      	mov	r1, r8
 8006a98:	f000 fcac 	bl	80073f4 <memmove>
 8006a9c:	68a3      	ldr	r3, [r4, #8]
 8006a9e:	1b9b      	subs	r3, r3, r6
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	4433      	add	r3, r6
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e7db      	b.n	8006a64 <__ssputs_r+0x58>
 8006aac:	462a      	mov	r2, r5
 8006aae:	f000 fcc7 	bl	8007440 <_realloc_r>
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d1e1      	bne.n	8006a7c <__ssputs_r+0x70>
 8006ab8:	6921      	ldr	r1, [r4, #16]
 8006aba:	4650      	mov	r0, sl
 8006abc:	f7ff fec6 	bl	800684c <_free_r>
 8006ac0:	e7c7      	b.n	8006a52 <__ssputs_r+0x46>
	...

08006ac4 <_svfiprintf_r>:
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	4698      	mov	r8, r3
 8006aca:	898b      	ldrh	r3, [r1, #12]
 8006acc:	061b      	lsls	r3, r3, #24
 8006ace:	b09d      	sub	sp, #116	; 0x74
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	d50e      	bpl.n	8006af6 <_svfiprintf_r+0x32>
 8006ad8:	690b      	ldr	r3, [r1, #16]
 8006ada:	b963      	cbnz	r3, 8006af6 <_svfiprintf_r+0x32>
 8006adc:	2140      	movs	r1, #64	; 0x40
 8006ade:	f7ff ff21 	bl	8006924 <_malloc_r>
 8006ae2:	6028      	str	r0, [r5, #0]
 8006ae4:	6128      	str	r0, [r5, #16]
 8006ae6:	b920      	cbnz	r0, 8006af2 <_svfiprintf_r+0x2e>
 8006ae8:	230c      	movs	r3, #12
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	e0d1      	b.n	8006c96 <_svfiprintf_r+0x1d2>
 8006af2:	2340      	movs	r3, #64	; 0x40
 8006af4:	616b      	str	r3, [r5, #20]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9309      	str	r3, [sp, #36]	; 0x24
 8006afa:	2320      	movs	r3, #32
 8006afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b04:	2330      	movs	r3, #48	; 0x30
 8006b06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cb0 <_svfiprintf_r+0x1ec>
 8006b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b0e:	f04f 0901 	mov.w	r9, #1
 8006b12:	4623      	mov	r3, r4
 8006b14:	469a      	mov	sl, r3
 8006b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b1a:	b10a      	cbz	r2, 8006b20 <_svfiprintf_r+0x5c>
 8006b1c:	2a25      	cmp	r2, #37	; 0x25
 8006b1e:	d1f9      	bne.n	8006b14 <_svfiprintf_r+0x50>
 8006b20:	ebba 0b04 	subs.w	fp, sl, r4
 8006b24:	d00b      	beq.n	8006b3e <_svfiprintf_r+0x7a>
 8006b26:	465b      	mov	r3, fp
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f7ff ff6d 	bl	8006a0c <__ssputs_r>
 8006b32:	3001      	adds	r0, #1
 8006b34:	f000 80aa 	beq.w	8006c8c <_svfiprintf_r+0x1c8>
 8006b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b3a:	445a      	add	r2, fp
 8006b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80a2 	beq.w	8006c8c <_svfiprintf_r+0x1c8>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b52:	f10a 0a01 	add.w	sl, sl, #1
 8006b56:	9304      	str	r3, [sp, #16]
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b60:	4654      	mov	r4, sl
 8006b62:	2205      	movs	r2, #5
 8006b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b68:	4851      	ldr	r0, [pc, #324]	; (8006cb0 <_svfiprintf_r+0x1ec>)
 8006b6a:	f7f9 fb69 	bl	8000240 <memchr>
 8006b6e:	9a04      	ldr	r2, [sp, #16]
 8006b70:	b9d8      	cbnz	r0, 8006baa <_svfiprintf_r+0xe6>
 8006b72:	06d0      	lsls	r0, r2, #27
 8006b74:	bf44      	itt	mi
 8006b76:	2320      	movmi	r3, #32
 8006b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b7c:	0711      	lsls	r1, r2, #28
 8006b7e:	bf44      	itt	mi
 8006b80:	232b      	movmi	r3, #43	; 0x2b
 8006b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b86:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b8c:	d015      	beq.n	8006bba <_svfiprintf_r+0xf6>
 8006b8e:	9a07      	ldr	r2, [sp, #28]
 8006b90:	4654      	mov	r4, sl
 8006b92:	2000      	movs	r0, #0
 8006b94:	f04f 0c0a 	mov.w	ip, #10
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b9e:	3b30      	subs	r3, #48	; 0x30
 8006ba0:	2b09      	cmp	r3, #9
 8006ba2:	d94e      	bls.n	8006c42 <_svfiprintf_r+0x17e>
 8006ba4:	b1b0      	cbz	r0, 8006bd4 <_svfiprintf_r+0x110>
 8006ba6:	9207      	str	r2, [sp, #28]
 8006ba8:	e014      	b.n	8006bd4 <_svfiprintf_r+0x110>
 8006baa:	eba0 0308 	sub.w	r3, r0, r8
 8006bae:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	46a2      	mov	sl, r4
 8006bb8:	e7d2      	b.n	8006b60 <_svfiprintf_r+0x9c>
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	1d19      	adds	r1, r3, #4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	9103      	str	r1, [sp, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfbb      	ittet	lt
 8006bc6:	425b      	neglt	r3, r3
 8006bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bcc:	9307      	strge	r3, [sp, #28]
 8006bce:	9307      	strlt	r3, [sp, #28]
 8006bd0:	bfb8      	it	lt
 8006bd2:	9204      	strlt	r2, [sp, #16]
 8006bd4:	7823      	ldrb	r3, [r4, #0]
 8006bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd8:	d10c      	bne.n	8006bf4 <_svfiprintf_r+0x130>
 8006bda:	7863      	ldrb	r3, [r4, #1]
 8006bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bde:	d135      	bne.n	8006c4c <_svfiprintf_r+0x188>
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	1d1a      	adds	r2, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	9203      	str	r2, [sp, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bfb8      	it	lt
 8006bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf0:	3402      	adds	r4, #2
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cc0 <_svfiprintf_r+0x1fc>
 8006bf8:	7821      	ldrb	r1, [r4, #0]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	f7f9 fb1f 	bl	8000240 <memchr>
 8006c02:	b140      	cbz	r0, 8006c16 <_svfiprintf_r+0x152>
 8006c04:	2340      	movs	r3, #64	; 0x40
 8006c06:	eba0 000a 	sub.w	r0, r0, sl
 8006c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	4303      	orrs	r3, r0
 8006c12:	3401      	adds	r4, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1a:	4826      	ldr	r0, [pc, #152]	; (8006cb4 <_svfiprintf_r+0x1f0>)
 8006c1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c20:	2206      	movs	r2, #6
 8006c22:	f7f9 fb0d 	bl	8000240 <memchr>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d038      	beq.n	8006c9c <_svfiprintf_r+0x1d8>
 8006c2a:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <_svfiprintf_r+0x1f4>)
 8006c2c:	bb1b      	cbnz	r3, 8006c76 <_svfiprintf_r+0x1b2>
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	3307      	adds	r3, #7
 8006c32:	f023 0307 	bic.w	r3, r3, #7
 8006c36:	3308      	adds	r3, #8
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3c:	4433      	add	r3, r6
 8006c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c40:	e767      	b.n	8006b12 <_svfiprintf_r+0x4e>
 8006c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c46:	460c      	mov	r4, r1
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7a5      	b.n	8006b98 <_svfiprintf_r+0xd4>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	3401      	adds	r4, #1
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0c0a 	mov.w	ip, #10
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c5e:	3a30      	subs	r2, #48	; 0x30
 8006c60:	2a09      	cmp	r2, #9
 8006c62:	d903      	bls.n	8006c6c <_svfiprintf_r+0x1a8>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0c5      	beq.n	8006bf4 <_svfiprintf_r+0x130>
 8006c68:	9105      	str	r1, [sp, #20]
 8006c6a:	e7c3      	b.n	8006bf4 <_svfiprintf_r+0x130>
 8006c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c70:	4604      	mov	r4, r0
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7f0      	b.n	8006c58 <_svfiprintf_r+0x194>
 8006c76:	ab03      	add	r3, sp, #12
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <_svfiprintf_r+0x1f8>)
 8006c7e:	a904      	add	r1, sp, #16
 8006c80:	4638      	mov	r0, r7
 8006c82:	f3af 8000 	nop.w
 8006c86:	1c42      	adds	r2, r0, #1
 8006c88:	4606      	mov	r6, r0
 8006c8a:	d1d6      	bne.n	8006c3a <_svfiprintf_r+0x176>
 8006c8c:	89ab      	ldrh	r3, [r5, #12]
 8006c8e:	065b      	lsls	r3, r3, #25
 8006c90:	f53f af2c 	bmi.w	8006aec <_svfiprintf_r+0x28>
 8006c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c96:	b01d      	add	sp, #116	; 0x74
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	ab03      	add	r3, sp, #12
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <_svfiprintf_r+0x1f8>)
 8006ca4:	a904      	add	r1, sp, #16
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f000 f9d4 	bl	8007054 <_printf_i>
 8006cac:	e7eb      	b.n	8006c86 <_svfiprintf_r+0x1c2>
 8006cae:	bf00      	nop
 8006cb0:	080080b8 	.word	0x080080b8
 8006cb4:	080080c2 	.word	0x080080c2
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	08006a0d 	.word	0x08006a0d
 8006cc0:	080080be 	.word	0x080080be

08006cc4 <__sfputc_r>:
 8006cc4:	6893      	ldr	r3, [r2, #8]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	b410      	push	{r4}
 8006ccc:	6093      	str	r3, [r2, #8]
 8006cce:	da08      	bge.n	8006ce2 <__sfputc_r+0x1e>
 8006cd0:	6994      	ldr	r4, [r2, #24]
 8006cd2:	42a3      	cmp	r3, r4
 8006cd4:	db01      	blt.n	8006cda <__sfputc_r+0x16>
 8006cd6:	290a      	cmp	r1, #10
 8006cd8:	d103      	bne.n	8006ce2 <__sfputc_r+0x1e>
 8006cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cde:	f7ff bad5 	b.w	800628c <__swbuf_r>
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	1c58      	adds	r0, r3, #1
 8006ce6:	6010      	str	r0, [r2, #0]
 8006ce8:	7019      	strb	r1, [r3, #0]
 8006cea:	4608      	mov	r0, r1
 8006cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <__sfputs_r>:
 8006cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	18d5      	adds	r5, r2, r3
 8006cfc:	42ac      	cmp	r4, r5
 8006cfe:	d101      	bne.n	8006d04 <__sfputs_r+0x12>
 8006d00:	2000      	movs	r0, #0
 8006d02:	e007      	b.n	8006d14 <__sfputs_r+0x22>
 8006d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d08:	463a      	mov	r2, r7
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff ffda 	bl	8006cc4 <__sfputc_r>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d1f3      	bne.n	8006cfc <__sfputs_r+0xa>
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d18 <_vfiprintf_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	b09d      	sub	sp, #116	; 0x74
 8006d20:	4614      	mov	r4, r2
 8006d22:	4698      	mov	r8, r3
 8006d24:	4606      	mov	r6, r0
 8006d26:	b118      	cbz	r0, 8006d30 <_vfiprintf_r+0x18>
 8006d28:	6983      	ldr	r3, [r0, #24]
 8006d2a:	b90b      	cbnz	r3, 8006d30 <_vfiprintf_r+0x18>
 8006d2c:	f7ff fc88 	bl	8006640 <__sinit>
 8006d30:	4b89      	ldr	r3, [pc, #548]	; (8006f58 <_vfiprintf_r+0x240>)
 8006d32:	429d      	cmp	r5, r3
 8006d34:	d11b      	bne.n	8006d6e <_vfiprintf_r+0x56>
 8006d36:	6875      	ldr	r5, [r6, #4]
 8006d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3a:	07d9      	lsls	r1, r3, #31
 8006d3c:	d405      	bmi.n	8006d4a <_vfiprintf_r+0x32>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	059a      	lsls	r2, r3, #22
 8006d42:	d402      	bmi.n	8006d4a <_vfiprintf_r+0x32>
 8006d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d46:	f7ff fd19 	bl	800677c <__retarget_lock_acquire_recursive>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	071b      	lsls	r3, r3, #28
 8006d4e:	d501      	bpl.n	8006d54 <_vfiprintf_r+0x3c>
 8006d50:	692b      	ldr	r3, [r5, #16]
 8006d52:	b9eb      	cbnz	r3, 8006d90 <_vfiprintf_r+0x78>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7ff faea 	bl	8006330 <__swsetup_r>
 8006d5c:	b1c0      	cbz	r0, 8006d90 <_vfiprintf_r+0x78>
 8006d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d60:	07dc      	lsls	r4, r3, #31
 8006d62:	d50e      	bpl.n	8006d82 <_vfiprintf_r+0x6a>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	b01d      	add	sp, #116	; 0x74
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	4b7b      	ldr	r3, [pc, #492]	; (8006f5c <_vfiprintf_r+0x244>)
 8006d70:	429d      	cmp	r5, r3
 8006d72:	d101      	bne.n	8006d78 <_vfiprintf_r+0x60>
 8006d74:	68b5      	ldr	r5, [r6, #8]
 8006d76:	e7df      	b.n	8006d38 <_vfiprintf_r+0x20>
 8006d78:	4b79      	ldr	r3, [pc, #484]	; (8006f60 <_vfiprintf_r+0x248>)
 8006d7a:	429d      	cmp	r5, r3
 8006d7c:	bf08      	it	eq
 8006d7e:	68f5      	ldreq	r5, [r6, #12]
 8006d80:	e7da      	b.n	8006d38 <_vfiprintf_r+0x20>
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	0598      	lsls	r0, r3, #22
 8006d86:	d4ed      	bmi.n	8006d64 <_vfiprintf_r+0x4c>
 8006d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d8a:	f7ff fcf8 	bl	800677e <__retarget_lock_release_recursive>
 8006d8e:	e7e9      	b.n	8006d64 <_vfiprintf_r+0x4c>
 8006d90:	2300      	movs	r3, #0
 8006d92:	9309      	str	r3, [sp, #36]	; 0x24
 8006d94:	2320      	movs	r3, #32
 8006d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d9e:	2330      	movs	r3, #48	; 0x30
 8006da0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f64 <_vfiprintf_r+0x24c>
 8006da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006da8:	f04f 0901 	mov.w	r9, #1
 8006dac:	4623      	mov	r3, r4
 8006dae:	469a      	mov	sl, r3
 8006db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db4:	b10a      	cbz	r2, 8006dba <_vfiprintf_r+0xa2>
 8006db6:	2a25      	cmp	r2, #37	; 0x25
 8006db8:	d1f9      	bne.n	8006dae <_vfiprintf_r+0x96>
 8006dba:	ebba 0b04 	subs.w	fp, sl, r4
 8006dbe:	d00b      	beq.n	8006dd8 <_vfiprintf_r+0xc0>
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ff93 	bl	8006cf2 <__sfputs_r>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f000 80aa 	beq.w	8006f26 <_vfiprintf_r+0x20e>
 8006dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd4:	445a      	add	r2, fp
 8006dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80a2 	beq.w	8006f26 <_vfiprintf_r+0x20e>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295
 8006de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dec:	f10a 0a01 	add.w	sl, sl, #1
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006df8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dfa:	4654      	mov	r4, sl
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e02:	4858      	ldr	r0, [pc, #352]	; (8006f64 <_vfiprintf_r+0x24c>)
 8006e04:	f7f9 fa1c 	bl	8000240 <memchr>
 8006e08:	9a04      	ldr	r2, [sp, #16]
 8006e0a:	b9d8      	cbnz	r0, 8006e44 <_vfiprintf_r+0x12c>
 8006e0c:	06d1      	lsls	r1, r2, #27
 8006e0e:	bf44      	itt	mi
 8006e10:	2320      	movmi	r3, #32
 8006e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e16:	0713      	lsls	r3, r2, #28
 8006e18:	bf44      	itt	mi
 8006e1a:	232b      	movmi	r3, #43	; 0x2b
 8006e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e20:	f89a 3000 	ldrb.w	r3, [sl]
 8006e24:	2b2a      	cmp	r3, #42	; 0x2a
 8006e26:	d015      	beq.n	8006e54 <_vfiprintf_r+0x13c>
 8006e28:	9a07      	ldr	r2, [sp, #28]
 8006e2a:	4654      	mov	r4, sl
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f04f 0c0a 	mov.w	ip, #10
 8006e32:	4621      	mov	r1, r4
 8006e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e38:	3b30      	subs	r3, #48	; 0x30
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d94e      	bls.n	8006edc <_vfiprintf_r+0x1c4>
 8006e3e:	b1b0      	cbz	r0, 8006e6e <_vfiprintf_r+0x156>
 8006e40:	9207      	str	r2, [sp, #28]
 8006e42:	e014      	b.n	8006e6e <_vfiprintf_r+0x156>
 8006e44:	eba0 0308 	sub.w	r3, r0, r8
 8006e48:	fa09 f303 	lsl.w	r3, r9, r3
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	46a2      	mov	sl, r4
 8006e52:	e7d2      	b.n	8006dfa <_vfiprintf_r+0xe2>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	1d19      	adds	r1, r3, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bfbb      	ittet	lt
 8006e60:	425b      	neglt	r3, r3
 8006e62:	f042 0202 	orrlt.w	r2, r2, #2
 8006e66:	9307      	strge	r3, [sp, #28]
 8006e68:	9307      	strlt	r3, [sp, #28]
 8006e6a:	bfb8      	it	lt
 8006e6c:	9204      	strlt	r2, [sp, #16]
 8006e6e:	7823      	ldrb	r3, [r4, #0]
 8006e70:	2b2e      	cmp	r3, #46	; 0x2e
 8006e72:	d10c      	bne.n	8006e8e <_vfiprintf_r+0x176>
 8006e74:	7863      	ldrb	r3, [r4, #1]
 8006e76:	2b2a      	cmp	r3, #42	; 0x2a
 8006e78:	d135      	bne.n	8006ee6 <_vfiprintf_r+0x1ce>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	1d1a      	adds	r2, r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	9203      	str	r2, [sp, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfb8      	it	lt
 8006e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e8a:	3402      	adds	r4, #2
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f74 <_vfiprintf_r+0x25c>
 8006e92:	7821      	ldrb	r1, [r4, #0]
 8006e94:	2203      	movs	r2, #3
 8006e96:	4650      	mov	r0, sl
 8006e98:	f7f9 f9d2 	bl	8000240 <memchr>
 8006e9c:	b140      	cbz	r0, 8006eb0 <_vfiprintf_r+0x198>
 8006e9e:	2340      	movs	r3, #64	; 0x40
 8006ea0:	eba0 000a 	sub.w	r0, r0, sl
 8006ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	4303      	orrs	r3, r0
 8006eac:	3401      	adds	r4, #1
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb4:	482c      	ldr	r0, [pc, #176]	; (8006f68 <_vfiprintf_r+0x250>)
 8006eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eba:	2206      	movs	r2, #6
 8006ebc:	f7f9 f9c0 	bl	8000240 <memchr>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d03f      	beq.n	8006f44 <_vfiprintf_r+0x22c>
 8006ec4:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <_vfiprintf_r+0x254>)
 8006ec6:	bb1b      	cbnz	r3, 8006f10 <_vfiprintf_r+0x1f8>
 8006ec8:	9b03      	ldr	r3, [sp, #12]
 8006eca:	3307      	adds	r3, #7
 8006ecc:	f023 0307 	bic.w	r3, r3, #7
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed6:	443b      	add	r3, r7
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eda:	e767      	b.n	8006dac <_vfiprintf_r+0x94>
 8006edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	e7a5      	b.n	8006e32 <_vfiprintf_r+0x11a>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	3401      	adds	r4, #1
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	4619      	mov	r1, r3
 8006eee:	f04f 0c0a 	mov.w	ip, #10
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef8:	3a30      	subs	r2, #48	; 0x30
 8006efa:	2a09      	cmp	r2, #9
 8006efc:	d903      	bls.n	8006f06 <_vfiprintf_r+0x1ee>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0c5      	beq.n	8006e8e <_vfiprintf_r+0x176>
 8006f02:	9105      	str	r1, [sp, #20]
 8006f04:	e7c3      	b.n	8006e8e <_vfiprintf_r+0x176>
 8006f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e7f0      	b.n	8006ef2 <_vfiprintf_r+0x1da>
 8006f10:	ab03      	add	r3, sp, #12
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	462a      	mov	r2, r5
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <_vfiprintf_r+0x258>)
 8006f18:	a904      	add	r1, sp, #16
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f3af 8000 	nop.w
 8006f20:	4607      	mov	r7, r0
 8006f22:	1c78      	adds	r0, r7, #1
 8006f24:	d1d6      	bne.n	8006ed4 <_vfiprintf_r+0x1bc>
 8006f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f28:	07d9      	lsls	r1, r3, #31
 8006f2a:	d405      	bmi.n	8006f38 <_vfiprintf_r+0x220>
 8006f2c:	89ab      	ldrh	r3, [r5, #12]
 8006f2e:	059a      	lsls	r2, r3, #22
 8006f30:	d402      	bmi.n	8006f38 <_vfiprintf_r+0x220>
 8006f32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f34:	f7ff fc23 	bl	800677e <__retarget_lock_release_recursive>
 8006f38:	89ab      	ldrh	r3, [r5, #12]
 8006f3a:	065b      	lsls	r3, r3, #25
 8006f3c:	f53f af12 	bmi.w	8006d64 <_vfiprintf_r+0x4c>
 8006f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f42:	e711      	b.n	8006d68 <_vfiprintf_r+0x50>
 8006f44:	ab03      	add	r3, sp, #12
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	462a      	mov	r2, r5
 8006f4a:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <_vfiprintf_r+0x258>)
 8006f4c:	a904      	add	r1, sp, #16
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 f880 	bl	8007054 <_printf_i>
 8006f54:	e7e4      	b.n	8006f20 <_vfiprintf_r+0x208>
 8006f56:	bf00      	nop
 8006f58:	08008078 	.word	0x08008078
 8006f5c:	08008098 	.word	0x08008098
 8006f60:	08008058 	.word	0x08008058
 8006f64:	080080b8 	.word	0x080080b8
 8006f68:	080080c2 	.word	0x080080c2
 8006f6c:	00000000 	.word	0x00000000
 8006f70:	08006cf3 	.word	0x08006cf3
 8006f74:	080080be 	.word	0x080080be

08006f78 <_printf_common>:
 8006f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	4699      	mov	r9, r3
 8006f80:	688a      	ldr	r2, [r1, #8]
 8006f82:	690b      	ldr	r3, [r1, #16]
 8006f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	bfb8      	it	lt
 8006f8c:	4613      	movlt	r3, r2
 8006f8e:	6033      	str	r3, [r6, #0]
 8006f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f94:	4607      	mov	r7, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	b10a      	cbz	r2, 8006f9e <_printf_common+0x26>
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	6033      	str	r3, [r6, #0]
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	0699      	lsls	r1, r3, #26
 8006fa2:	bf42      	ittt	mi
 8006fa4:	6833      	ldrmi	r3, [r6, #0]
 8006fa6:	3302      	addmi	r3, #2
 8006fa8:	6033      	strmi	r3, [r6, #0]
 8006faa:	6825      	ldr	r5, [r4, #0]
 8006fac:	f015 0506 	ands.w	r5, r5, #6
 8006fb0:	d106      	bne.n	8006fc0 <_printf_common+0x48>
 8006fb2:	f104 0a19 	add.w	sl, r4, #25
 8006fb6:	68e3      	ldr	r3, [r4, #12]
 8006fb8:	6832      	ldr	r2, [r6, #0]
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	dc26      	bgt.n	800700e <_printf_common+0x96>
 8006fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fc4:	1e13      	subs	r3, r2, #0
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	bf18      	it	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	0692      	lsls	r2, r2, #26
 8006fce:	d42b      	bmi.n	8007028 <_printf_common+0xb0>
 8006fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	47c0      	blx	r8
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d01e      	beq.n	800701c <_printf_common+0xa4>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	68e5      	ldr	r5, [r4, #12]
 8006fe2:	6832      	ldr	r2, [r6, #0]
 8006fe4:	f003 0306 	and.w	r3, r3, #6
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	bf08      	it	eq
 8006fec:	1aad      	subeq	r5, r5, r2
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	6922      	ldr	r2, [r4, #16]
 8006ff2:	bf0c      	ite	eq
 8006ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff8:	2500      	movne	r5, #0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	bfc4      	itt	gt
 8006ffe:	1a9b      	subgt	r3, r3, r2
 8007000:	18ed      	addgt	r5, r5, r3
 8007002:	2600      	movs	r6, #0
 8007004:	341a      	adds	r4, #26
 8007006:	42b5      	cmp	r5, r6
 8007008:	d11a      	bne.n	8007040 <_printf_common+0xc8>
 800700a:	2000      	movs	r0, #0
 800700c:	e008      	b.n	8007020 <_printf_common+0xa8>
 800700e:	2301      	movs	r3, #1
 8007010:	4652      	mov	r2, sl
 8007012:	4649      	mov	r1, r9
 8007014:	4638      	mov	r0, r7
 8007016:	47c0      	blx	r8
 8007018:	3001      	adds	r0, #1
 800701a:	d103      	bne.n	8007024 <_printf_common+0xac>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007024:	3501      	adds	r5, #1
 8007026:	e7c6      	b.n	8006fb6 <_printf_common+0x3e>
 8007028:	18e1      	adds	r1, r4, r3
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	2030      	movs	r0, #48	; 0x30
 800702e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007032:	4422      	add	r2, r4
 8007034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800703c:	3302      	adds	r3, #2
 800703e:	e7c7      	b.n	8006fd0 <_printf_common+0x58>
 8007040:	2301      	movs	r3, #1
 8007042:	4622      	mov	r2, r4
 8007044:	4649      	mov	r1, r9
 8007046:	4638      	mov	r0, r7
 8007048:	47c0      	blx	r8
 800704a:	3001      	adds	r0, #1
 800704c:	d0e6      	beq.n	800701c <_printf_common+0xa4>
 800704e:	3601      	adds	r6, #1
 8007050:	e7d9      	b.n	8007006 <_printf_common+0x8e>
	...

08007054 <_printf_i>:
 8007054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	7e0f      	ldrb	r7, [r1, #24]
 800705a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800705c:	2f78      	cmp	r7, #120	; 0x78
 800705e:	4691      	mov	r9, r2
 8007060:	4680      	mov	r8, r0
 8007062:	460c      	mov	r4, r1
 8007064:	469a      	mov	sl, r3
 8007066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800706a:	d807      	bhi.n	800707c <_printf_i+0x28>
 800706c:	2f62      	cmp	r7, #98	; 0x62
 800706e:	d80a      	bhi.n	8007086 <_printf_i+0x32>
 8007070:	2f00      	cmp	r7, #0
 8007072:	f000 80d8 	beq.w	8007226 <_printf_i+0x1d2>
 8007076:	2f58      	cmp	r7, #88	; 0x58
 8007078:	f000 80a3 	beq.w	80071c2 <_printf_i+0x16e>
 800707c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007084:	e03a      	b.n	80070fc <_printf_i+0xa8>
 8007086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800708a:	2b15      	cmp	r3, #21
 800708c:	d8f6      	bhi.n	800707c <_printf_i+0x28>
 800708e:	a101      	add	r1, pc, #4	; (adr r1, 8007094 <_printf_i+0x40>)
 8007090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007094:	080070ed 	.word	0x080070ed
 8007098:	08007101 	.word	0x08007101
 800709c:	0800707d 	.word	0x0800707d
 80070a0:	0800707d 	.word	0x0800707d
 80070a4:	0800707d 	.word	0x0800707d
 80070a8:	0800707d 	.word	0x0800707d
 80070ac:	08007101 	.word	0x08007101
 80070b0:	0800707d 	.word	0x0800707d
 80070b4:	0800707d 	.word	0x0800707d
 80070b8:	0800707d 	.word	0x0800707d
 80070bc:	0800707d 	.word	0x0800707d
 80070c0:	0800720d 	.word	0x0800720d
 80070c4:	08007131 	.word	0x08007131
 80070c8:	080071ef 	.word	0x080071ef
 80070cc:	0800707d 	.word	0x0800707d
 80070d0:	0800707d 	.word	0x0800707d
 80070d4:	0800722f 	.word	0x0800722f
 80070d8:	0800707d 	.word	0x0800707d
 80070dc:	08007131 	.word	0x08007131
 80070e0:	0800707d 	.word	0x0800707d
 80070e4:	0800707d 	.word	0x0800707d
 80070e8:	080071f7 	.word	0x080071f7
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	1d1a      	adds	r2, r3, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0a3      	b.n	8007248 <_printf_i+0x1f4>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	6829      	ldr	r1, [r5, #0]
 8007104:	0606      	lsls	r6, r0, #24
 8007106:	f101 0304 	add.w	r3, r1, #4
 800710a:	d50a      	bpl.n	8007122 <_printf_i+0xce>
 800710c:	680e      	ldr	r6, [r1, #0]
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	2e00      	cmp	r6, #0
 8007112:	da03      	bge.n	800711c <_printf_i+0xc8>
 8007114:	232d      	movs	r3, #45	; 0x2d
 8007116:	4276      	negs	r6, r6
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711c:	485e      	ldr	r0, [pc, #376]	; (8007298 <_printf_i+0x244>)
 800711e:	230a      	movs	r3, #10
 8007120:	e019      	b.n	8007156 <_printf_i+0x102>
 8007122:	680e      	ldr	r6, [r1, #0]
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	f010 0f40 	tst.w	r0, #64	; 0x40
 800712a:	bf18      	it	ne
 800712c:	b236      	sxthne	r6, r6
 800712e:	e7ef      	b.n	8007110 <_printf_i+0xbc>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	6820      	ldr	r0, [r4, #0]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	6029      	str	r1, [r5, #0]
 8007138:	0601      	lsls	r1, r0, #24
 800713a:	d501      	bpl.n	8007140 <_printf_i+0xec>
 800713c:	681e      	ldr	r6, [r3, #0]
 800713e:	e002      	b.n	8007146 <_printf_i+0xf2>
 8007140:	0646      	lsls	r6, r0, #25
 8007142:	d5fb      	bpl.n	800713c <_printf_i+0xe8>
 8007144:	881e      	ldrh	r6, [r3, #0]
 8007146:	4854      	ldr	r0, [pc, #336]	; (8007298 <_printf_i+0x244>)
 8007148:	2f6f      	cmp	r7, #111	; 0x6f
 800714a:	bf0c      	ite	eq
 800714c:	2308      	moveq	r3, #8
 800714e:	230a      	movne	r3, #10
 8007150:	2100      	movs	r1, #0
 8007152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007156:	6865      	ldr	r5, [r4, #4]
 8007158:	60a5      	str	r5, [r4, #8]
 800715a:	2d00      	cmp	r5, #0
 800715c:	bfa2      	ittt	ge
 800715e:	6821      	ldrge	r1, [r4, #0]
 8007160:	f021 0104 	bicge.w	r1, r1, #4
 8007164:	6021      	strge	r1, [r4, #0]
 8007166:	b90e      	cbnz	r6, 800716c <_printf_i+0x118>
 8007168:	2d00      	cmp	r5, #0
 800716a:	d04d      	beq.n	8007208 <_printf_i+0x1b4>
 800716c:	4615      	mov	r5, r2
 800716e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007172:	fb03 6711 	mls	r7, r3, r1, r6
 8007176:	5dc7      	ldrb	r7, [r0, r7]
 8007178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800717c:	4637      	mov	r7, r6
 800717e:	42bb      	cmp	r3, r7
 8007180:	460e      	mov	r6, r1
 8007182:	d9f4      	bls.n	800716e <_printf_i+0x11a>
 8007184:	2b08      	cmp	r3, #8
 8007186:	d10b      	bne.n	80071a0 <_printf_i+0x14c>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	07de      	lsls	r6, r3, #31
 800718c:	d508      	bpl.n	80071a0 <_printf_i+0x14c>
 800718e:	6923      	ldr	r3, [r4, #16]
 8007190:	6861      	ldr	r1, [r4, #4]
 8007192:	4299      	cmp	r1, r3
 8007194:	bfde      	ittt	le
 8007196:	2330      	movle	r3, #48	; 0x30
 8007198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800719c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071a0:	1b52      	subs	r2, r2, r5
 80071a2:	6122      	str	r2, [r4, #16]
 80071a4:	f8cd a000 	str.w	sl, [sp]
 80071a8:	464b      	mov	r3, r9
 80071aa:	aa03      	add	r2, sp, #12
 80071ac:	4621      	mov	r1, r4
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7ff fee2 	bl	8006f78 <_printf_common>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d14c      	bne.n	8007252 <_printf_i+0x1fe>
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	b004      	add	sp, #16
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	4835      	ldr	r0, [pc, #212]	; (8007298 <_printf_i+0x244>)
 80071c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071c8:	6829      	ldr	r1, [r5, #0]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80071d0:	6029      	str	r1, [r5, #0]
 80071d2:	061d      	lsls	r5, r3, #24
 80071d4:	d514      	bpl.n	8007200 <_printf_i+0x1ac>
 80071d6:	07df      	lsls	r7, r3, #31
 80071d8:	bf44      	itt	mi
 80071da:	f043 0320 	orrmi.w	r3, r3, #32
 80071de:	6023      	strmi	r3, [r4, #0]
 80071e0:	b91e      	cbnz	r6, 80071ea <_printf_i+0x196>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	f023 0320 	bic.w	r3, r3, #32
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	2310      	movs	r3, #16
 80071ec:	e7b0      	b.n	8007150 <_printf_i+0xfc>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f043 0320 	orr.w	r3, r3, #32
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	2378      	movs	r3, #120	; 0x78
 80071f8:	4828      	ldr	r0, [pc, #160]	; (800729c <_printf_i+0x248>)
 80071fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071fe:	e7e3      	b.n	80071c8 <_printf_i+0x174>
 8007200:	0659      	lsls	r1, r3, #25
 8007202:	bf48      	it	mi
 8007204:	b2b6      	uxthmi	r6, r6
 8007206:	e7e6      	b.n	80071d6 <_printf_i+0x182>
 8007208:	4615      	mov	r5, r2
 800720a:	e7bb      	b.n	8007184 <_printf_i+0x130>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	6826      	ldr	r6, [r4, #0]
 8007210:	6961      	ldr	r1, [r4, #20]
 8007212:	1d18      	adds	r0, r3, #4
 8007214:	6028      	str	r0, [r5, #0]
 8007216:	0635      	lsls	r5, r6, #24
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	d501      	bpl.n	8007220 <_printf_i+0x1cc>
 800721c:	6019      	str	r1, [r3, #0]
 800721e:	e002      	b.n	8007226 <_printf_i+0x1d2>
 8007220:	0670      	lsls	r0, r6, #25
 8007222:	d5fb      	bpl.n	800721c <_printf_i+0x1c8>
 8007224:	8019      	strh	r1, [r3, #0]
 8007226:	2300      	movs	r3, #0
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	4615      	mov	r5, r2
 800722c:	e7ba      	b.n	80071a4 <_printf_i+0x150>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	602a      	str	r2, [r5, #0]
 8007234:	681d      	ldr	r5, [r3, #0]
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	2100      	movs	r1, #0
 800723a:	4628      	mov	r0, r5
 800723c:	f7f9 f800 	bl	8000240 <memchr>
 8007240:	b108      	cbz	r0, 8007246 <_printf_i+0x1f2>
 8007242:	1b40      	subs	r0, r0, r5
 8007244:	6060      	str	r0, [r4, #4]
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	2300      	movs	r3, #0
 800724c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007250:	e7a8      	b.n	80071a4 <_printf_i+0x150>
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	462a      	mov	r2, r5
 8007256:	4649      	mov	r1, r9
 8007258:	4640      	mov	r0, r8
 800725a:	47d0      	blx	sl
 800725c:	3001      	adds	r0, #1
 800725e:	d0ab      	beq.n	80071b8 <_printf_i+0x164>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	079b      	lsls	r3, r3, #30
 8007264:	d413      	bmi.n	800728e <_printf_i+0x23a>
 8007266:	68e0      	ldr	r0, [r4, #12]
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	4298      	cmp	r0, r3
 800726c:	bfb8      	it	lt
 800726e:	4618      	movlt	r0, r3
 8007270:	e7a4      	b.n	80071bc <_printf_i+0x168>
 8007272:	2301      	movs	r3, #1
 8007274:	4632      	mov	r2, r6
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d09b      	beq.n	80071b8 <_printf_i+0x164>
 8007280:	3501      	adds	r5, #1
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	9903      	ldr	r1, [sp, #12]
 8007286:	1a5b      	subs	r3, r3, r1
 8007288:	42ab      	cmp	r3, r5
 800728a:	dcf2      	bgt.n	8007272 <_printf_i+0x21e>
 800728c:	e7eb      	b.n	8007266 <_printf_i+0x212>
 800728e:	2500      	movs	r5, #0
 8007290:	f104 0619 	add.w	r6, r4, #25
 8007294:	e7f5      	b.n	8007282 <_printf_i+0x22e>
 8007296:	bf00      	nop
 8007298:	080080c9 	.word	0x080080c9
 800729c:	080080da 	.word	0x080080da

080072a0 <_sbrk_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d06      	ldr	r5, [pc, #24]	; (80072bc <_sbrk_r+0x1c>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7fa f9ae 	bl	800160c <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_sbrk_r+0x1a>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_sbrk_r+0x1a>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	20000444 	.word	0x20000444

080072c0 <__sread>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	460c      	mov	r4, r1
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	f000 f8ea 	bl	80074a0 <_read_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	bfab      	itete	ge
 80072d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072d2:	89a3      	ldrhlt	r3, [r4, #12]
 80072d4:	181b      	addge	r3, r3, r0
 80072d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072da:	bfac      	ite	ge
 80072dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072de:	81a3      	strhlt	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__swrite>:
 80072e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	461f      	mov	r7, r3
 80072e8:	898b      	ldrh	r3, [r1, #12]
 80072ea:	05db      	lsls	r3, r3, #23
 80072ec:	4605      	mov	r5, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4616      	mov	r6, r2
 80072f2:	d505      	bpl.n	8007300 <__swrite+0x1e>
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	2302      	movs	r3, #2
 80072fa:	2200      	movs	r2, #0
 80072fc:	f000 f868 	bl	80073d0 <_lseek_r>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	4632      	mov	r2, r6
 800730e:	463b      	mov	r3, r7
 8007310:	4628      	mov	r0, r5
 8007312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	f000 b817 	b.w	8007348 <_write_r>

0800731a <__sseek>:
 800731a:	b510      	push	{r4, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007322:	f000 f855 	bl	80073d0 <_lseek_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	bf15      	itete	ne
 800732c:	6560      	strne	r0, [r4, #84]	; 0x54
 800732e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007336:	81a3      	strheq	r3, [r4, #12]
 8007338:	bf18      	it	ne
 800733a:	81a3      	strhne	r3, [r4, #12]
 800733c:	bd10      	pop	{r4, pc}

0800733e <__sclose>:
 800733e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007342:	f000 b813 	b.w	800736c <_close_r>
	...

08007348 <_write_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4d07      	ldr	r5, [pc, #28]	; (8007368 <_write_r+0x20>)
 800734c:	4604      	mov	r4, r0
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	2200      	movs	r2, #0
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7fa f907 	bl	800156a <_write>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_write_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_write_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000444 	.word	0x20000444

0800736c <_close_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	; (8007388 <_close_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fa f913 	bl	80015a2 <_close>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_close_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_close_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000444 	.word	0x20000444

0800738c <_fstat_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	; (80073ac <_fstat_r+0x20>)
 8007390:	2300      	movs	r3, #0
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	4611      	mov	r1, r2
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	f7fa f90e 	bl	80015ba <_fstat>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d102      	bne.n	80073a8 <_fstat_r+0x1c>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	b103      	cbz	r3, 80073a8 <_fstat_r+0x1c>
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	20000444 	.word	0x20000444

080073b0 <_isatty_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d06      	ldr	r5, [pc, #24]	; (80073cc <_isatty_r+0x1c>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fa f90d 	bl	80015da <_isatty>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_isatty_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_isatty_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000444 	.word	0x20000444

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d07      	ldr	r5, [pc, #28]	; (80073f0 <_lseek_r+0x20>)
 80073d4:	4604      	mov	r4, r0
 80073d6:	4608      	mov	r0, r1
 80073d8:	4611      	mov	r1, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fa f906 	bl	80015f0 <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000444 	.word	0x20000444

080073f4 <memmove>:
 80073f4:	4288      	cmp	r0, r1
 80073f6:	b510      	push	{r4, lr}
 80073f8:	eb01 0402 	add.w	r4, r1, r2
 80073fc:	d902      	bls.n	8007404 <memmove+0x10>
 80073fe:	4284      	cmp	r4, r0
 8007400:	4623      	mov	r3, r4
 8007402:	d807      	bhi.n	8007414 <memmove+0x20>
 8007404:	1e43      	subs	r3, r0, #1
 8007406:	42a1      	cmp	r1, r4
 8007408:	d008      	beq.n	800741c <memmove+0x28>
 800740a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800740e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007412:	e7f8      	b.n	8007406 <memmove+0x12>
 8007414:	4402      	add	r2, r0
 8007416:	4601      	mov	r1, r0
 8007418:	428a      	cmp	r2, r1
 800741a:	d100      	bne.n	800741e <memmove+0x2a>
 800741c:	bd10      	pop	{r4, pc}
 800741e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007426:	e7f7      	b.n	8007418 <memmove+0x24>

08007428 <__malloc_lock>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__malloc_lock+0x8>)
 800742a:	f7ff b9a7 	b.w	800677c <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	20000438 	.word	0x20000438

08007434 <__malloc_unlock>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__malloc_unlock+0x8>)
 8007436:	f7ff b9a2 	b.w	800677e <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	20000438 	.word	0x20000438

08007440 <_realloc_r>:
 8007440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007444:	4680      	mov	r8, r0
 8007446:	4614      	mov	r4, r2
 8007448:	460e      	mov	r6, r1
 800744a:	b921      	cbnz	r1, 8007456 <_realloc_r+0x16>
 800744c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007450:	4611      	mov	r1, r2
 8007452:	f7ff ba67 	b.w	8006924 <_malloc_r>
 8007456:	b92a      	cbnz	r2, 8007464 <_realloc_r+0x24>
 8007458:	f7ff f9f8 	bl	800684c <_free_r>
 800745c:	4625      	mov	r5, r4
 800745e:	4628      	mov	r0, r5
 8007460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007464:	f000 f82e 	bl	80074c4 <_malloc_usable_size_r>
 8007468:	4284      	cmp	r4, r0
 800746a:	4607      	mov	r7, r0
 800746c:	d802      	bhi.n	8007474 <_realloc_r+0x34>
 800746e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007472:	d812      	bhi.n	800749a <_realloc_r+0x5a>
 8007474:	4621      	mov	r1, r4
 8007476:	4640      	mov	r0, r8
 8007478:	f7ff fa54 	bl	8006924 <_malloc_r>
 800747c:	4605      	mov	r5, r0
 800747e:	2800      	cmp	r0, #0
 8007480:	d0ed      	beq.n	800745e <_realloc_r+0x1e>
 8007482:	42bc      	cmp	r4, r7
 8007484:	4622      	mov	r2, r4
 8007486:	4631      	mov	r1, r6
 8007488:	bf28      	it	cs
 800748a:	463a      	movcs	r2, r7
 800748c:	f7fe fe3a 	bl	8006104 <memcpy>
 8007490:	4631      	mov	r1, r6
 8007492:	4640      	mov	r0, r8
 8007494:	f7ff f9da 	bl	800684c <_free_r>
 8007498:	e7e1      	b.n	800745e <_realloc_r+0x1e>
 800749a:	4635      	mov	r5, r6
 800749c:	e7df      	b.n	800745e <_realloc_r+0x1e>
	...

080074a0 <_read_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_read_r+0x20>)
 80074a4:	4604      	mov	r4, r0
 80074a6:	4608      	mov	r0, r1
 80074a8:	4611      	mov	r1, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	602a      	str	r2, [r5, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7fa f83e 	bl	8001530 <_read>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_read_r+0x1e>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_read_r+0x1e>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000444 	.word	0x20000444

080074c4 <_malloc_usable_size_r>:
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f18      	subs	r0, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfbc      	itt	lt
 80074ce:	580b      	ldrlt	r3, [r1, r0]
 80074d0:	18c0      	addlt	r0, r0, r3
 80074d2:	4770      	bx	lr

080074d4 <_init>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr

080074e0 <_fini>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr
