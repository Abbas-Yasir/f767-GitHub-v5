
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ffc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f8  08017200  08017200  00027200  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189f8  080189f8  00031150  2**0
                  CONTENTS
  4 .ARM          00000008  080189f8  080189f8  000289f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a00  08018a00  00031150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a00  08018a00  00028a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a04  08018a04  00028a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001150  20000000  08018a08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20001150  08019b58  00031150  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200016dc  08019b58  000316dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cca0  00000000  00000000  0003117e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f60  00000000  00000000  0004de1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00051d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000531d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c72e  00000000  00000000  00054480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c939  00000000  00000000  00080bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e410  00000000  00000000  0009d4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab8f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006488  00000000  00000000  001ab948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001b1dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001b1e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001150 	.word	0x20001150
 800021c:	00000000 	.word	0x00000000
 8000220:	080171e4 	.word	0x080171e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001154 	.word	0x20001154
 800023c:	080171e4 	.word	0x080171e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b9a8 	b.w	8000658 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f83a 	bl	8000388 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__aeabi_f2lz>:
 8000320:	ee07 0a90 	vmov	s15, r0
 8000324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032c:	d401      	bmi.n	8000332 <__aeabi_f2lz+0x12>
 800032e:	f000 b80b 	b.w	8000348 <__aeabi_f2ulz>
 8000332:	eef1 7a67 	vneg.f32	s15, s15
 8000336:	b508      	push	{r3, lr}
 8000338:	ee17 0a90 	vmov	r0, s15
 800033c:	f000 f804 	bl	8000348 <__aeabi_f2ulz>
 8000340:	4240      	negs	r0, r0
 8000342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000346:	bd08      	pop	{r3, pc}

08000348 <__aeabi_f2ulz>:
 8000348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000378 <__aeabi_f2ulz+0x30>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000380 <__aeabi_f2ulz+0x38>
 8000354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800035c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000360:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000364:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000368:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800036c:	ee16 1a10 	vmov	r1, s12
 8000370:	ee17 0a90 	vmov	r0, s15
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	00000000 	.word	0x00000000
 800037c:	3df00000 	.word	0x3df00000
 8000380:	00000000 	.word	0x00000000
 8000384:	41f00000 	.word	0x41f00000

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CRC_Init+0x3c>)
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <MX_CRC_Init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CRC_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CRC_Init+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CRC_Init+0x3c>)
 8000686:	f003 fd81 	bl	800418c <HAL_CRC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000690:	f001 f8d0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000116c 	.word	0x2000116c
 800069c:	40023000 	.word	0x40023000

080006a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_CRC_MspInit+0x38>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023000 	.word	0x40023000
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2044      	movs	r0, #68	; 0x44
 8000704:	f003 fd0b 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000708:	2044      	movs	r0, #68	; 0x44
 800070a:	f003 fd24 	bl	8004156 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a43      	ldr	r2, [pc, #268]	; (8000844 <MX_GPIO_Init+0x128>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <MX_GPIO_Init+0x128>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0x128>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_GPIO_Init+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <MX_GPIO_Init+0x128>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <MX_GPIO_Init+0x128>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0x128>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007c2:	2200      	movs	r2, #0
 80007c4:	f647 0110 	movw	r1, #30736	; 0x7810
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007ca:	f004 faf1 	bl	8004db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_GPIO_Init+0x130>)
 80007d4:	f004 faec 	bl	8004db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80007de:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_GPIO_Init+0x134>)
 80007e0:	f004 fae6 	bl	8004db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007e4:	f647 0310 	movw	r3, #30736	; 0x7810
 80007e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007fe:	f004 f92b 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000802:	2310      	movs	r3, #16
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0x130>)
 800081a:	f004 f91d 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800081e:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_GPIO_Init+0x134>)
 8000838:	f004 f90e 	bl	8004a58 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40021000 	.word	0x40021000
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400

08000854 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
}
 8000862:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <SCB_EnableICache+0x48>)
 8000866:	2200      	movs	r2, #0
 8000868:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000872:	f3bf 8f6f 	isb	sy
}
 8000876:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <SCB_EnableICache+0x48>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <SCB_EnableICache+0x48>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
}
 800088e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SCB_EnableDCache+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <SCB_EnableDCache+0x84>)
 80008b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0b5b      	lsrs	r3, r3, #13
 80008c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008de:	4911      	ldr	r1, [pc, #68]	; (8000924 <SCB_EnableDCache+0x84>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ef      	bne.n	80008d0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	60fa      	str	r2, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e5      	bne.n	80008c6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SCB_EnableDCache+0x84>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SCB_EnableDCache+0x84>)
 8000906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d027      	beq.n	8000992 <in_func+0x6a>
//    	read_bulk_4ByteAdd_SharedFM(dev->fp, buff, nbyte);
//    	read_bulk_4ByteAdd_LocalFM(dev->fp, buff, nbyte);
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f001 fd9c 	bl	8002488 <W25qxx_ReadBytes>

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	3b01      	subs	r3, #1
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4911      	ldr	r1, [pc, #68]	; (80009a8 <in_func+0x80>)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <in_func+0x84>)
 8000966:	f014 f8ef 	bl	8014b48 <siprintf>
 800096a:	4603      	mov	r3, r0
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <in_func+0x88>)
 8000970:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <in_func+0x88>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	490c      	ldr	r1, [pc, #48]	; (80009ac <in_func+0x84>)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <in_func+0x8c>)
 800097e:	f006 fb27 	bl	8006fd0 <HAL_UART_Transmit>

    	dev->fp += nbyte;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	441a      	add	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

        return nbyte;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	e006      	b.n	80009a0 <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	441a      	add	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]
        return nbyte;
 800099e:	88fb      	ldrh	r3, [r7, #6]
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08017200 	.word	0x08017200
 80009ac:	20001198 	.word	0x20001198
 80009b0:	20001194 	.word	0x20001194
 80009b4:	200013ec 	.word	0x200013ec

080009b8 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c8:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4611      	mov	r1, r2
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	8912      	ldrh	r2, [r2, #8]
 80009dc:	fb01 f202 	mul.w	r2, r1, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	8809      	ldrh	r1, [r1, #0]
 80009e4:	440a      	add	r2, r1
 80009e6:	4413      	add	r3, r2
 80009e8:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	885a      	ldrh	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	83fb      	strh	r3, [r7, #30]
 8000a06:	e010      	b.n	8000a2a <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0e:	6a38      	ldr	r0, [r7, #32]
 8000a10:	f013 fac2 	bl	8013f98 <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	8abb      	ldrh	r3, [r7, #20]
 8000a1e:	6a3a      	ldr	r2, [r7, #32]
 8000a20:	4413      	add	r3, r2
 8000a22:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a24:	8bfb      	ldrh	r3, [r7, #30]
 8000a26:	3301      	adds	r3, #1
 8000a28:	83fb      	strh	r3, [r7, #30]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	8bfa      	ldrh	r2, [r7, #30]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d9e9      	bls.n	8000a08 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	f5ad 3da2 	sub.w	sp, sp, #82944	; 0x14400
 8000a46:	b0e3      	sub	sp, #396	; 0x18c
 8000a48:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4ac1      	ldr	r2, [pc, #772]	; (8000d54 <main+0x314>)
 8000a4e:	443a      	add	r2, r7
 8000a50:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x24;
 8000a52:	2324      	movs	r3, #36	; 0x24
 8000a54:	4ac0      	ldr	r2, [pc, #768]	; (8000d58 <main+0x318>)
 8000a56:	443a      	add	r2, r7
 8000a58:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 5100;
 8000a5a:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8000a5e:	4abf      	ldr	r2, [pc, #764]	; (8000d5c <main+0x31c>)
 8000a60:	443a      	add	r2, r7
 8000a62:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	4abe      	ldr	r2, [pc, #760]	; (8000d60 <main+0x320>)
 8000a68:	443a      	add	r2, r7
 8000a6a:	6013      	str	r3, [r2, #0]
	  ai_i32 nbatch_ICU;

	  uint32_t timestamp;
	  uint32_t timestamp_ICU;

	  uint8_t prediction = 0xFF;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	4abd      	ldr	r2, [pc, #756]	; (8000d64 <main+0x324>)
 8000a70:	443a      	add	r2, r7
 8000a72:	7013      	strb	r3, [r2, #0]
	  // Buffers used to store input and output tensors
	  ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 8000a74:	4bbc      	ldr	r3, [pc, #752]	; (8000d68 <main+0x328>)
 8000a76:	443b      	add	r3, r7
 8000a78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000a80:	4bb9      	ldr	r3, [pc, #740]	; (8000d68 <main+0x328>)
 8000a82:	443b      	add	r3, r7
 8000a84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000a88:	4ab8      	ldr	r2, [pc, #736]	; (8000d6c <main+0x32c>)
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	4bb6      	ldr	r3, [pc, #728]	; (8000d68 <main+0x328>)
 8000a8e:	443b      	add	r3, r7
 8000a90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	4bb3      	ldr	r3, [pc, #716]	; (8000d68 <main+0x328>)
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	4bb0      	ldr	r3, [pc, #704]	; (8000d68 <main+0x328>)
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	4bad      	ldr	r3, [pc, #692]	; (8000d68 <main+0x328>)
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	4baa      	ldr	r3, [pc, #680]	; (8000d68 <main+0x328>)
 8000abe:	443b      	add	r3, r7
 8000ac0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	751a      	strb	r2, [r3, #20]
 8000ac8:	4ba7      	ldr	r3, [pc, #668]	; (8000d68 <main+0x328>)
 8000aca:	443b      	add	r3, r7
 8000acc:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	f361 231f 	bfi	r3, r1, #8, #24
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4ba3      	ldr	r3, [pc, #652]	; (8000d68 <main+0x328>)
 8000adc:	443b      	add	r3, r7
 8000ade:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000ae2:	4aa3      	ldr	r2, [pc, #652]	; (8000d70 <main+0x330>)
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aee:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <main+0x328>)
 8000af0:	443b      	add	r3, r7
 8000af2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000af6:	4a9f      	ldr	r2, [pc, #636]	; (8000d74 <main+0x334>)
 8000af8:	443a      	add	r2, r7
 8000afa:	619a      	str	r2, [r3, #24]
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000afc:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <main+0x328>)
 8000afe:	443b      	add	r3, r7
 8000b00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b04:	4a99      	ldr	r2, [pc, #612]	; (8000d6c <main+0x32c>)
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <main+0x328>)
 8000b0a:	443b      	add	r3, r7
 8000b0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	4b94      	ldr	r3, [pc, #592]	; (8000d68 <main+0x328>)
 8000b16:	443b      	add	r3, r7
 8000b18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <main+0x328>)
 8000b22:	443b      	add	r3, r7
 8000b24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <main+0x328>)
 8000b2e:	443b      	add	r3, r7
 8000b30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b34:	2201      	movs	r2, #1
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <main+0x328>)
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b40:	2201      	movs	r2, #1
 8000b42:	751a      	strb	r2, [r3, #20]
 8000b44:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <main+0x328>)
 8000b46:	443b      	add	r3, r7
 8000b48:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8000b4c:	6953      	ldr	r3, [r2, #20]
 8000b4e:	2104      	movs	r1, #4
 8000b50:	f361 231f 	bfi	r3, r1, #8, #24
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b84      	ldr	r3, [pc, #528]	; (8000d68 <main+0x328>)
 8000b58:	443b      	add	r3, r7
 8000b5a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000b5e:	4a84      	ldr	r2, [pc, #528]	; (8000d70 <main+0x330>)
 8000b60:	461c      	mov	r4, r3
 8000b62:	4613      	mov	r3, r2
 8000b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b6a:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <main+0x328>)
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000b72:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <main+0x338>)
 8000b74:	443a      	add	r2, r7
 8000b76:	619a      	str	r2, [r3, #24]


	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000b78:	f007 fe20 	bl	80087bc <ai_sine_model_data_weights_get>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <main+0x328>)
 8000b80:	443b      	add	r3, r7
 8000b82:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fde3 	bl	8008754 <ai_sine_model_data_weights_buffer_get>
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000b8e:	4b76      	ldr	r3, [pc, #472]	; (8000d68 <main+0x328>)
 8000b90:	443b      	add	r3, r7
 8000b92:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b96:	331c      	adds	r3, #28
 8000b98:	f507 32a2 	add.w	r2, r7, #82944	; 0x14400
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fda4 	bl	80086ec <ai_sine_model_data_activations_buffer_get>
	  // Buffers used to store input and output tensors
	  ai_i8 image[AI_NETWORK_IN_1_SIZE_BYTES];
	  ai_i8 out_data_ICU[AI_NETWORK_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle icu_tflite = AI_HANDLE_NULL;
 8000ba4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000ba8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input_ICU[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8000bb0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bb4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bb8:	4a70      	ldr	r2, [pc, #448]	; (8000d7c <main+0x33c>)
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000be4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000be8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bf2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	751a      	strb	r2, [r3, #20]
 8000bfa:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bfe:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000c02:	6953      	ldr	r3, [r2, #20]
 8000c04:	2104      	movs	r1, #4
 8000c06:	f361 231f 	bfi	r3, r1, #8, #24
 8000c0a:	6153      	str	r3, [r2, #20]
 8000c0c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000c14:	4a5a      	ldr	r2, [pc, #360]	; (8000d80 <main+0x340>)
 8000c16:	461c      	mov	r4, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c20:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c24:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <main+0x344>)
 8000c2a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000c2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c32:	443b      	add	r3, r7
 8000c34:	6193      	str	r3, [r2, #24]
	  ai_buffer ai_output_ICU[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8000c36:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c3e:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <main+0x33c>)
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c6e:	2202      	movs	r2, #2
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	751a      	strb	r2, [r3, #20]
 8000c7e:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c82:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000c86:	6953      	ldr	r3, [r2, #20]
 8000c88:	2104      	movs	r1, #4
 8000c8a:	f361 231f 	bfi	r3, r1, #8, #24
 8000c8e:	6153      	str	r3, [r2, #20]
 8000c90:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000c94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8000c98:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <main+0x348>)
 8000c9a:	461c      	mov	r4, r3
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ca4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000ca8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000cac:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <main+0x34c>)
 8000cae:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000cb2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cb6:	443b      	add	r3, r7
 8000cb8:	6193      	str	r3, [r2, #24]

	  // Set working memory and get weights/biases from model
//	  ai_network_params ai_params_ICU = AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations_ICU));
	  ai_network_params ai_params_ICU = {
			  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000cba:	f007 fbbf 	bl	800843c <ai_network_data_weights_get>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cc4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f007 fb82 	bl	80083d4 <ai_network_data_weights_buffer_get>
			  AI_NETWORK_DATA_ACTIVATIONS(activations_ICU)
 8000cd0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cd4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000cd8:	f103 021c 	add.w	r2, r3, #28
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <main+0x350>)
 8000cde:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000ce2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ce6:	443b      	add	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f007 fb3e 	bl	800836c <ai_network_data_activations_buffer_get>
	  };



	  //		ai_input_ICU[0].n_batches = 1;
	  		ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 8000cf0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000cf4:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <main+0x354>)
 8000cfa:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000cfe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d02:	443b      	add	r3, r7
 8000d04:	6053      	str	r3, [r2, #4]
	  //		ai_output_ICU[0].n_batches = 1;
	  		ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 8000d06:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000d0a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0x358>)
 8000d10:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000d14:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d18:	443b      	add	r3, r7
 8000d1a:	6053      	str	r3, [r2, #4]
	  		//End of ICU part 2


	  	  // Set pointers wrapper structs to our data buffers
	  //	  ai_input[0].n_batches = 1;
	  	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <main+0x328>)
 8000d1e:	443b      	add	r3, r7
 8000d20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <main+0x35c>)
 8000d26:	443a      	add	r2, r7
 8000d28:	605a      	str	r2, [r3, #4]
	  //	  ai_output[0].n_batches = 1;
	  	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <main+0x328>)
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <main+0x360>)
 8000d34:	443a      	add	r2, r7
 8000d36:	605a      	str	r2, [r3, #4]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d38:	f7ff fd8c 	bl	8000854 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d3c:	f7ff fdb0 	bl	80008a0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f003 f891 	bl	8003e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 fd0e 	bl	8001764 <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f7ff fce8 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4c:	f7ff fcc8 	bl	80006e0 <MX_DMA_Init>
 8000d50:	e028      	b.n	8000da4 <main+0x364>
 8000d52:	bf00      	nop
 8000d54:	00014564 	.word	0x00014564
 8000d58:	00014563 	.word	0x00014563
 8000d5c:	0001455c 	.word	0x0001455c
 8000d60:	0001457c 	.word	0x0001457c
 8000d64:	0001457b 	.word	0x0001457b
 8000d68:	00014580 	.word	0x00014580
 8000d6c:	01821040 	.word	0x01821040
 8000d70:	08017528 	.word	0x08017528
 8000d74:	000143c8 	.word	0x000143c8
 8000d78:	0001439c 	.word	0x0001439c
 8000d7c:	00840440 	.word	0x00840440
 8000d80:	08017538 	.word	0x08017538
 8000d84:	fffece70 	.word	0xfffece70
 8000d88:	08017548 	.word	0x08017548
 8000d8c:	fffece44 	.word	0xfffece44
 8000d90:	ffff19a4 	.word	0xffff19a4
 8000d94:	fffecea4 	.word	0xfffecea4
 8000d98:	fffecea0 	.word	0xfffecea0
 8000d9c:	000143fc 	.word	0x000143fc
 8000da0:	000143f8 	.word	0x000143f8
  MX_SPI4_Init();
 8000da4:	f000 fe72 	bl	8001a8c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000da8:	f001 f8a2 	bl	8001ef0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000dac:	f000 fdf8 	bl	80019a0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000db0:	f000 fe34 	bl	8001a1c <MX_SPI3_Init>
  MX_QUADSPI_Init();
 8000db4:	f000 fd46 	bl	8001844 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000db8:	f001 f8ca 	bl	8001f50 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000dbc:	f001 f840 	bl	8001e40 <MX_TIM14_Init>
  MX_CRC_Init();
 8000dc0:	f7ff fc4c 	bl	800065c <MX_CRC_Init>
  MX_TIM13_Init();
 8000dc4:	f001 f818 	bl	8001df8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000dc8:	f001 fa96 	bl	80022f8 <W25qxx_Init>

//  HAL_Delay(5000);

  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 8000dcc:	4896      	ldr	r0, [pc, #600]	; (8001028 <main+0x5e8>)
 8000dce:	f013 fea3 	bl	8014b18 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	4894      	ldr	r0, [pc, #592]	; (800102c <main+0x5ec>)
 8000dda:	f003 ffe9 	bl	8004db0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f003 f89e 	bl	8003f20 <HAL_Delay>

  char readBytes[5000]="ABC";
 8000de4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8000de8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8000dec:	4a90      	ldr	r2, [pc, #576]	; (8001030 <main+0x5f0>)
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	3304      	adds	r3, #4
 8000df2:	f241 3284 	movw	r2, #4996	; 0x1384
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f013 f8f5 	bl	8013fe8 <memset>
//	uint8_t* Target;
#define Target  Space

//	W25qxx_EraseBlock(0);

	HAL_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f003 f88e 	bl	8003f20 <HAL_Delay>
	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 8000e04:	4b8b      	ldr	r3, [pc, #556]	; (8001034 <main+0x5f4>)
 8000e06:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000e0a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e0e:	443b      	add	r3, r7
 8000e10:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fb36 	bl	8002488 <W25qxx_ReadBytes>

	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f003 f87f 	bl	8003f20 <HAL_Delay>
//	W25qxx_WriteBlock(Target, 0, 0, sizeof(Target));

	StringLength=sprintf(txString,"\r\nTarget size=%d,Space size=%d, Earth size=%d\r\n",sizeof(Target),sizeof(Space),sizeof(Earth));
 8000e22:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000e2c:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000e30:	4981      	ldr	r1, [pc, #516]	; (8001038 <main+0x5f8>)
 8000e32:	4882      	ldr	r0, [pc, #520]	; (800103c <main+0x5fc>)
 8000e34:	f013 fe88 	bl	8014b48 <siprintf>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <main+0x600>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000e40:	4b7f      	ldr	r3, [pc, #508]	; (8001040 <main+0x600>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	2364      	movs	r3, #100	; 0x64
 8000e48:	497c      	ldr	r1, [pc, #496]	; (800103c <main+0x5fc>)
 8000e4a:	487e      	ldr	r0, [pc, #504]	; (8001044 <main+0x604>)
 8000e4c:	f006 f8c0 	bl	8006fd0 <HAL_UART_Transmit>


	compression_ratio = 1;
 8000e50:	4b7d      	ldr	r3, [pc, #500]	; (8001048 <main+0x608>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]




	  // Greetings!
	  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI\r\n");
 8000e56:	4b7d      	ldr	r3, [pc, #500]	; (800104c <main+0x60c>)
 8000e58:	443b      	add	r3, r7
 8000e5a:	497d      	ldr	r1, [pc, #500]	; (8001050 <main+0x610>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f013 fe73 	bl	8014b48 <siprintf>
 8000e62:	4b7c      	ldr	r3, [pc, #496]	; (8001054 <main+0x614>)
 8000e64:	443b      	add	r3, r7
 8000e66:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000e68:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <main+0x614>)
 8000e6a:	443b      	add	r3, r7
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4976      	ldr	r1, [pc, #472]	; (800104c <main+0x60c>)
 8000e72:	4439      	add	r1, r7
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	4873      	ldr	r0, [pc, #460]	; (8001044 <main+0x604>)
 8000e78:	f006 f8aa 	bl	8006fd0 <HAL_UART_Transmit>


	  // Create instance of neural network
	  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000e7c:	4b76      	ldr	r3, [pc, #472]	; (8001058 <main+0x618>)
 8000e7e:	443b      	add	r3, r7
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fbd0 	bl	8008628 <ai_sine_model_create>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a74      	ldr	r2, [pc, #464]	; (800105c <main+0x61c>)
 8000e8c:	443a      	add	r2, r7
 8000e8e:	6013      	str	r3, [r2, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 8000e90:	4b72      	ldr	r3, [pc, #456]	; (800105c <main+0x61c>)
 8000e92:	443b      	add	r3, r7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d013      	beq.n	8000ec2 <main+0x482>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <main+0x60c>)
 8000e9c:	443b      	add	r3, r7
 8000e9e:	4970      	ldr	r1, [pc, #448]	; (8001060 <main+0x620>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f013 fe51 	bl	8014b48 <siprintf>
 8000ea6:	4b6b      	ldr	r3, [pc, #428]	; (8001054 <main+0x614>)
 8000ea8:	443b      	add	r3, r7
 8000eaa:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000eac:	4b69      	ldr	r3, [pc, #420]	; (8001054 <main+0x614>)
 8000eae:	443b      	add	r3, r7
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4965      	ldr	r1, [pc, #404]	; (800104c <main+0x60c>)
 8000eb6:	4439      	add	r1, r7
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	4862      	ldr	r0, [pc, #392]	; (8001044 <main+0x604>)
 8000ebc:	f006 f888 	bl	8006fd0 <HAL_UART_Transmit>
	    while(1);
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x480>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <main+0x60c>)
 8000ec4:	443b      	add	r3, r7
 8000ec6:	4967      	ldr	r1, [pc, #412]	; (8001064 <main+0x624>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f013 fe3d 	bl	8014b48 <siprintf>
 8000ece:	4b61      	ldr	r3, [pc, #388]	; (8001054 <main+0x614>)
 8000ed0:	443b      	add	r3, r7
 8000ed2:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000ed4:	4b5f      	ldr	r3, [pc, #380]	; (8001054 <main+0x614>)
 8000ed6:	443b      	add	r3, r7
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	495b      	ldr	r1, [pc, #364]	; (800104c <main+0x60c>)
 8000ede:	4439      	add	r1, r7
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	4858      	ldr	r0, [pc, #352]	; (8001044 <main+0x604>)
 8000ee4:	f006 f874 	bl	8006fd0 <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_sine_model_init(sine_model, &ai_params))
 8000ee8:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <main+0x628>)
 8000eea:	443b      	add	r3, r7
 8000eec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	; (800106c <main+0x62c>)
 8000ef4:	443a      	add	r2, r7
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fbab 	bl	8008654 <ai_sine_model_init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f083 0301 	eor.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d013      	beq.n	8000f32 <main+0x4f2>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000f0a:	4b50      	ldr	r3, [pc, #320]	; (800104c <main+0x60c>)
 8000f0c:	443b      	add	r3, r7
 8000f0e:	4958      	ldr	r1, [pc, #352]	; (8001070 <main+0x630>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f013 fe19 	bl	8014b48 <siprintf>
 8000f16:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <main+0x614>)
 8000f18:	443b      	add	r3, r7
 8000f1a:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8000f1c:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <main+0x614>)
 8000f1e:	443b      	add	r3, r7
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4949      	ldr	r1, [pc, #292]	; (800104c <main+0x60c>)
 8000f26:	4439      	add	r1, r7
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	4846      	ldr	r0, [pc, #280]	; (8001044 <main+0x604>)
 8000f2c:	f006 f850 	bl	8006fd0 <HAL_UART_Transmit>
	    while(1);
 8000f30:	e7fe      	b.n	8000f30 <main+0x4f0>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <main+0x60c>)
 8000f34:	443b      	add	r3, r7
 8000f36:	494f      	ldr	r1, [pc, #316]	; (8001074 <main+0x634>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f013 fe05 	bl	8014b48 <siprintf>
 8000f3e:	4b45      	ldr	r3, [pc, #276]	; (8001054 <main+0x614>)
 8000f40:	443b      	add	r3, r7
 8000f42:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <main+0x614>)
 8000f46:	443b      	add	r3, r7
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	493f      	ldr	r1, [pc, #252]	; (800104c <main+0x60c>)
 8000f4e:	4439      	add	r1, r7
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	483c      	ldr	r0, [pc, #240]	; (8001044 <main+0x604>)
 8000f54:	f006 f83c 	bl	8006fd0 <HAL_UART_Transmit>
	  }


	  // Create instance of neural network
	  ai_err_ICU = ai_network_create(&icu_tflite, AI_NETWORK_DATA_CONFIG);
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <main+0x638>)
 8000f5a:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000f5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f62:	443b      	add	r3, r7
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 f99e 	bl	80082a8 <ai_network_create>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <main+0x628>)
 8000f70:	443b      	add	r3, r7
 8000f72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f76:	601a      	str	r2, [r3, #0]
	  if (ai_err_ICU.type != AI_ERROR_NONE)
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <main+0x628>)
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d013      	beq.n	8000fae <main+0x56e>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <main+0x60c>)
 8000f88:	443b      	add	r3, r7
 8000f8a:	4935      	ldr	r1, [pc, #212]	; (8001060 <main+0x620>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f013 fddb 	bl	8014b48 <siprintf>
 8000f92:	4b30      	ldr	r3, [pc, #192]	; (8001054 <main+0x614>)
 8000f94:	443b      	add	r3, r7
 8000f96:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000f98:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <main+0x614>)
 8000f9a:	443b      	add	r3, r7
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	492a      	ldr	r1, [pc, #168]	; (800104c <main+0x60c>)
 8000fa2:	4439      	add	r1, r7
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	4827      	ldr	r0, [pc, #156]	; (8001044 <main+0x604>)
 8000fa8:	f006 f812 	bl	8006fd0 <HAL_UART_Transmit>
	    while(1);
 8000fac:	e7fe      	b.n	8000fac <main+0x56c>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <main+0x60c>)
 8000fb0:	443b      	add	r3, r7
 8000fb2:	492c      	ldr	r1, [pc, #176]	; (8001064 <main+0x624>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f013 fdc7 	bl	8014b48 <siprintf>
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <main+0x614>)
 8000fbc:	443b      	add	r3, r7
 8000fbe:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <main+0x614>)
 8000fc2:	443b      	add	r3, r7
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4920      	ldr	r1, [pc, #128]	; (800104c <main+0x60c>)
 8000fca:	4439      	add	r1, r7
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	481d      	ldr	r0, [pc, #116]	; (8001044 <main+0x604>)
 8000fd0:	f005 fffe 	bl	8006fd0 <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_network_init(icu_tflite, &ai_params_ICU))
 8000fd4:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000fd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <main+0x63c>)
 8000fe0:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000fe4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000fe8:	443b      	add	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f007 f971 	bl	80082d4 <ai_network_init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f083 0301 	eor.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d040      	beq.n	8001080 <main+0x640>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <main+0x60c>)
 8001000:	443b      	add	r3, r7
 8001002:	491b      	ldr	r1, [pc, #108]	; (8001070 <main+0x630>)
 8001004:	4618      	mov	r0, r3
 8001006:	f013 fd9f 	bl	8014b48 <siprintf>
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <main+0x614>)
 800100c:	443b      	add	r3, r7
 800100e:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <main+0x614>)
 8001012:	443b      	add	r3, r7
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <main+0x60c>)
 800101a:	4439      	add	r1, r7
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <main+0x604>)
 8001020:	f005 ffd6 	bl	8006fd0 <HAL_UART_Transmit>
	    while(1);
 8001024:	e7fe      	b.n	8001024 <main+0x5e4>
 8001026:	bf00      	nop
 8001028:	08017228 	.word	0x08017228
 800102c:	40020400 	.word	0x40020400
 8001030:	00434241 	.word	0x00434241
 8001034:	fffeba84 	.word	0xfffeba84
 8001038:	08017264 	.word	0x08017264
 800103c:	20001198 	.word	0x20001198
 8001040:	20001194 	.word	0x20001194
 8001044:	200013ec 	.word	0x200013ec
 8001048:	20001190 	.word	0x20001190
 800104c:	00014488 	.word	0x00014488
 8001050:	08017294 	.word	0x08017294
 8001054:	0001457c 	.word	0x0001457c
 8001058:	000143f4 	.word	0x000143f4
 800105c:	00014484 	.word	0x00014484
 8001060:	080172ac 	.word	0x080172ac
 8001064:	080172d4 	.word	0x080172d4
 8001068:	00014580 	.word	0x00014580
 800106c:	00014364 	.word	0x00014364
 8001070:	080172ec 	.word	0x080172ec
 8001074:	08017310 	.word	0x08017310
 8001078:	fffece9c 	.word	0xfffece9c
 800107c:	fffece0c 	.word	0xfffece0c
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <main+0x6ac>)
 8001082:	443b      	add	r3, r7
 8001084:	491a      	ldr	r1, [pc, #104]	; (80010f0 <main+0x6b0>)
 8001086:	4618      	mov	r0, r3
 8001088:	f013 fd5e 	bl	8014b48 <siprintf>
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <main+0x6b4>)
 800108e:	443b      	add	r3, r7
 8001090:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <main+0x6b4>)
 8001094:	443b      	add	r3, r7
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29a      	uxth	r2, r3
 800109a:	4914      	ldr	r1, [pc, #80]	; (80010ec <main+0x6ac>)
 800109c:	4439      	add	r1, r7
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <main+0x6b8>)
 80010a2:	f005 ff95 	bl	8006fd0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		work = (void*)malloc(sz_work);
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <main+0x6bc>)
 80010a8:	443b      	add	r3, r7
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	f012 ff64 	bl	8013f78 <malloc>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <main+0x6c0>)
 80010b4:	443a      	add	r2, r7
 80010b6:	6013      	str	r3, [r2, #0]
	  	count++;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <main+0x6c4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <main+0x6c4>)
 80010c0:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <main+0x6c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10b      	bne.n	80010e2 <main+0x6a2>
	  		W25qxx_ReadBytes( readBytes, 0, sizeof(Target) );
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <main+0x6c8>)
 80010cc:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80010d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010d4:	443b      	add	r3, r7
 80010d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f9d3 	bl	8002488 <W25qxx_ReadBytes>
	  	}

		  // Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	4a09      	ldr	r2, [pc, #36]	; (800110c <main+0x6cc>)
 80010e6:	443a      	add	r2, r7
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e022      	b.n	8001132 <main+0x6f2>
 80010ec:	00014488 	.word	0x00014488
 80010f0:	08017310 	.word	0x08017310
 80010f4:	0001457c 	.word	0x0001457c
 80010f8:	200013ec 	.word	0x200013ec
 80010fc:	0001455c 	.word	0x0001455c
 8001100:	00014558 	.word	0x00014558
 8001104:	200011d4 	.word	0x200011d4
 8001108:	fffeba84 	.word	0xfffeba84
 800110c:	00014574 	.word	0x00014574
			{
			  ((ai_float *)in_data)[i] = (ai_float)1.0f;
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <main+0x934>)
 8001112:	443b      	add	r3, r7
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4a97      	ldr	r2, [pc, #604]	; (8001378 <main+0x938>)
 800111a:	443a      	add	r2, r7
 800111c:	4413      	add	r3, r2
 800111e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001122:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001124:	4b93      	ldr	r3, [pc, #588]	; (8001374 <main+0x934>)
 8001126:	443b      	add	r3, r7
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a91      	ldr	r2, [pc, #580]	; (8001374 <main+0x934>)
 800112e:	443a      	add	r2, r7
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b90      	ldr	r3, [pc, #576]	; (8001374 <main+0x934>)
 8001134:	443b      	add	r3, r7
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0e9      	beq.n	8001110 <main+0x6d0>
			}

			// Get current timestamp
			timestamp = htim13.Instance->CNT;
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <main+0x93c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	4a8f      	ldr	r2, [pc, #572]	; (8001380 <main+0x940>)
 8001144:	443a      	add	r2, r7
 8001146:	6013      	str	r3, [r2, #0]

			// Perform inference
			nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001148:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <main+0x944>)
 800114a:	443b      	add	r3, r7
 800114c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a8d      	ldr	r2, [pc, #564]	; (8001388 <main+0x948>)
 8001154:	443a      	add	r2, r7
 8001156:	498d      	ldr	r1, [pc, #564]	; (800138c <main+0x94c>)
 8001158:	4439      	add	r1, r7
 800115a:	4618      	mov	r0, r3
 800115c:	f007 fab6 	bl	80086cc <ai_sine_model_run>
 8001160:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <main+0x950>)
 8001162:	443b      	add	r3, r7
 8001164:	6018      	str	r0, [r3, #0]
			if (nbatch != 1) {
 8001166:	4b8a      	ldr	r3, [pc, #552]	; (8001390 <main+0x950>)
 8001168:	443b      	add	r3, r7
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d012      	beq.n	8001196 <main+0x756>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001170:	4b88      	ldr	r3, [pc, #544]	; (8001394 <main+0x954>)
 8001172:	443b      	add	r3, r7
 8001174:	4988      	ldr	r1, [pc, #544]	; (8001398 <main+0x958>)
 8001176:	4618      	mov	r0, r3
 8001178:	f013 fce6 	bl	8014b48 <siprintf>
 800117c:	4b87      	ldr	r3, [pc, #540]	; (800139c <main+0x95c>)
 800117e:	443b      	add	r3, r7
 8001180:	6018      	str	r0, [r3, #0]
			  HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <main+0x95c>)
 8001184:	443b      	add	r3, r7
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	4982      	ldr	r1, [pc, #520]	; (8001394 <main+0x954>)
 800118c:	4439      	add	r1, r7
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	4883      	ldr	r0, [pc, #524]	; (80013a0 <main+0x960>)
 8001192:	f005 ff1d 	bl	8006fd0 <HAL_UART_Transmit>
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 8001196:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <main+0x964>)
 8001198:	443b      	add	r3, r7
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a82      	ldr	r2, [pc, #520]	; (80013a8 <main+0x968>)
 800119e:	443a      	add	r2, r7
 80011a0:	6013      	str	r3, [r2, #0]

			// Print output of neural network along with inference time (microseconds)
			buf_len = sprintf(buf,
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <main+0x968>)
 80011a4:	443b      	add	r3, r7
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
							  "Output: %f | Duration: %lu\r\n",
							  y_val,
							  htim13.Instance->CNT - timestamp);
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <main+0x93c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			buf_len = sprintf(buf,
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <main+0x940>)
 80011b6:	443b      	add	r3, r7
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4875      	ldr	r0, [pc, #468]	; (8001394 <main+0x954>)
 80011be:	4438      	add	r0, r7
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	ec53 2b17 	vmov	r2, r3, d7
 80011c6:	4979      	ldr	r1, [pc, #484]	; (80013ac <main+0x96c>)
 80011c8:	f013 fcbe 	bl	8014b48 <siprintf>
 80011cc:	4b73      	ldr	r3, [pc, #460]	; (800139c <main+0x95c>)
 80011ce:	443b      	add	r3, r7
 80011d0:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80011d2:	4b72      	ldr	r3, [pc, #456]	; (800139c <main+0x95c>)
 80011d4:	443b      	add	r3, r7
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	496e      	ldr	r1, [pc, #440]	; (8001394 <main+0x954>)
 80011dc:	4439      	add	r1, r7
 80011de:	2364      	movs	r3, #100	; 0x64
 80011e0:	486f      	ldr	r0, [pc, #444]	; (80013a0 <main+0x960>)
 80011e2:	f005 fef5 	bl	8006fd0 <HAL_UART_Transmit>

			// Wait before doing it again
			HAL_Delay(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ea:	f002 fe99 	bl	8003f20 <HAL_Delay>


	  	handshakeCAM = 0;
 80011ee:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <main+0x970>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	  	 // 	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
	  	  //		HAL_UART_Receive(&huart3, (uint8_t *) &handshakeCAM, 1, 1000);												/* Wait for CAM to command ICU, expects 0x29*/
	  	  //		__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_RXNE);

	  	  		//if (handshakeCAM == 0x29) {
	  	  			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 80011f4:	496f      	ldr	r1, [pc, #444]	; (80013b4 <main+0x974>)
 80011f6:	4870      	ldr	r0, [pc, #448]	; (80013b8 <main+0x978>)
 80011f8:	f013 fca6 	bl	8014b48 <siprintf>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b6e      	ldr	r3, [pc, #440]	; (80013bc <main+0x97c>)
 8001202:	701a      	strb	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001204:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <main+0x97c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b29a      	uxth	r2, r3
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	496a      	ldr	r1, [pc, #424]	; (80013b8 <main+0x978>)
 800120e:	4864      	ldr	r0, [pc, #400]	; (80013a0 <main+0x960>)
 8001210:	f005 fede 	bl	8006fd0 <HAL_UART_Transmit>

	  	  			HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f002 fe82 	bl	8003f20 <HAL_Delay>
	  	  			devid.fp=0;
 800121c:	2300      	movs	r3, #0
 800121e:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <main+0x980>)
 8001220:	443a      	add	r2, r7
 8001222:	6013      	str	r3, [r2, #0]
//	  	  			devid.fp= Space;

	  				StringLength=sprintf(txString,"\r\n");
 8001224:	4967      	ldr	r1, [pc, #412]	; (80013c4 <main+0x984>)
 8001226:	4864      	ldr	r0, [pc, #400]	; (80013b8 <main+0x978>)
 8001228:	f013 fc8e 	bl	8014b48 <siprintf>
 800122c:	4603      	mov	r3, r0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <main+0x97c>)
 8001232:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001234:	4b61      	ldr	r3, [pc, #388]	; (80013bc <main+0x97c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	495e      	ldr	r1, [pc, #376]	; (80013b8 <main+0x978>)
 800123e:	4858      	ldr	r0, [pc, #352]	; (80013a0 <main+0x960>)
 8001240:	f005 fec6 	bl	8006fd0 <HAL_UART_Transmit>

	  	//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

	  	  			res = jd_prepare(&jdec, in_func, work, sz_work, &devid);													/* Prepare to decompress */
 8001244:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <main+0x988>)
 8001246:	443b      	add	r3, r7
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29a      	uxth	r2, r3
 800124c:	485f      	ldr	r0, [pc, #380]	; (80013cc <main+0x98c>)
 800124e:	4438      	add	r0, r7
 8001250:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <main+0x980>)
 8001252:	443b      	add	r3, r7
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	4a5d      	ldr	r2, [pc, #372]	; (80013d0 <main+0x990>)
 800125a:	443a      	add	r2, r7
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	495d      	ldr	r1, [pc, #372]	; (80013d4 <main+0x994>)
 8001260:	f002 fad0 	bl	8003804 <jd_prepare>
 8001264:	4603      	mov	r3, r0
 8001266:	4a5c      	ldr	r2, [pc, #368]	; (80013d8 <main+0x998>)
 8001268:	443a      	add	r2, r7
 800126a:	7013      	strb	r3, [r2, #0]
	  	  			if (res == JDR_OK)
 800126c:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <main+0x998>)
 800126e:	443b      	add	r3, r7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 80e2 	bne.w	800143c <main+0x9fc>
	  	  			{																					/* Ready to decompress. Image info is available here. */
	  	  				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <main+0x99c>)
 800127a:	443b      	add	r3, r7
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <main+0x9a0>)
 8001282:	443b      	add	r3, r7
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <main+0x9a4>)
 800128a:	443b      	add	r3, r7
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <main+0x988>)
 8001292:	443b      	add	r3, r7
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4603      	mov	r3, r0
 800129c:	460a      	mov	r2, r1
 800129e:	4952      	ldr	r1, [pc, #328]	; (80013e8 <main+0x9a8>)
 80012a0:	4845      	ldr	r0, [pc, #276]	; (80013b8 <main+0x978>)
 80012a2:	f013 fc51 	bl	8014b48 <siprintf>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b44      	ldr	r3, [pc, #272]	; (80013bc <main+0x97c>)
 80012ac:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <main+0x97c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	4940      	ldr	r1, [pc, #256]	; (80013b8 <main+0x978>)
 80012b8:	4839      	ldr	r0, [pc, #228]	; (80013a0 <main+0x960>)
 80012ba:	f005 fe89 	bl	8006fd0 <HAL_UART_Transmit>

	  	  				image_size = N_BPP  * jdec.width * jdec.height;
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <main+0x99c>)
 80012c0:	443b      	add	r3, r7
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <main+0x9a0>)
 80012c6:	443a      	add	r2, r7
 80012c8:	8812      	ldrh	r2, [r2, #0]
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a47      	ldr	r2, [pc, #284]	; (80013ec <main+0x9ac>)
 80012d0:	443a      	add	r2, r7
 80012d2:	6013      	str	r3, [r2, #0]
	  	  				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <main+0x9ac>)
 80012d6:	443b      	add	r3, r7
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f012 fe4c 	bl	8013f78 <malloc>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a43      	ldr	r2, [pc, #268]	; (80013f0 <main+0x9b0>)
 80012e4:	443a      	add	r2, r7
 80012e6:	6013      	str	r3, [r2, #0]
	  	  		        devid.wfbuf = jdec.width;
 80012e8:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <main+0x99c>)
 80012ea:	443b      	add	r3, r7
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	4a41      	ldr	r2, [pc, #260]	; (80013f4 <main+0x9b4>)
 80012f0:	443a      	add	r2, r7
 80012f2:	8013      	strh	r3, [r2, #0]

	  					Width = jdec.width;
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <main+0x99c>)
 80012f6:	443b      	add	r3, r7
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <main+0x9b8>)
 80012fe:	601a      	str	r2, [r3, #0]
	  					Height = jdec.height;
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <main+0x9a0>)
 8001302:	443b      	add	r3, r7
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <main+0x9bc>)
 800130a:	601a      	str	r2, [r3, #0]

	  	  				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 800130c:	493c      	ldr	r1, [pc, #240]	; (8001400 <main+0x9c0>)
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <main+0x978>)
 8001310:	f013 fc1a 	bl	8014b48 <siprintf>
 8001314:	4603      	mov	r3, r0
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x97c>)
 800131a:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <main+0x97c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b29a      	uxth	r2, r3
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	4924      	ldr	r1, [pc, #144]	; (80013b8 <main+0x978>)
 8001326:	481e      	ldr	r0, [pc, #120]	; (80013a0 <main+0x960>)
 8001328:	f005 fe52 	bl	8006fd0 <HAL_UART_Transmit>

	  	  				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <main+0x9c4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <main+0x98c>)
 8001334:	443b      	add	r3, r7
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <main+0x9c8>)
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fd19 	bl	8003d70 <jd_decomp>
 800133e:	4603      	mov	r3, r0
 8001340:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <main+0x998>)
 8001342:	443a      	add	r2, r7
 8001344:	7013      	strb	r3, [r2, #0]
	  	  				if (res == JDR_OK) {
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <main+0x998>)
 8001348:	443b      	add	r3, r7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d160      	bne.n	8001412 <main+0x9d2>
	  	  					StringLength=sprintf(txString,"Decompression - Success\r\n");
 8001350:	492e      	ldr	r1, [pc, #184]	; (800140c <main+0x9cc>)
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <main+0x978>)
 8001354:	f013 fbf8 	bl	8014b48 <siprintf>
 8001358:	4603      	mov	r3, r0
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <main+0x97c>)
 800135e:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <main+0x97c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b29a      	uxth	r2, r3
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <main+0x978>)
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <main+0x960>)
 800136c:	f005 fe30 	bl	8006fd0 <HAL_UART_Transmit>
 8001370:	e04e      	b.n	8001410 <main+0x9d0>
 8001372:	bf00      	nop
 8001374:	00014574 	.word	0x00014574
 8001378:	000143fc 	.word	0x000143fc
 800137c:	20001354 	.word	0x20001354
 8001380:	00014554 	.word	0x00014554
 8001384:	00014580 	.word	0x00014580
 8001388:	000143ac 	.word	0x000143ac
 800138c:	000143d8 	.word	0x000143d8
 8001390:	00014550 	.word	0x00014550
 8001394:	00014488 	.word	0x00014488
 8001398:	08017324 	.word	0x08017324
 800139c:	0001457c 	.word	0x0001457c
 80013a0:	200013ec 	.word	0x200013ec
 80013a4:	000143f8 	.word	0x000143f8
 80013a8:	0001454c 	.word	0x0001454c
 80013ac:	08017348 	.word	0x08017348
 80013b0:	200011ca 	.word	0x200011ca
 80013b4:	08017368 	.word	0x08017368
 80013b8:	20001198 	.word	0x20001198
 80013bc:	20001194 	.word	0x20001194
 80013c0:	000144bc 	.word	0x000144bc
 80013c4:	0801738c 	.word	0x0801738c
 80013c8:	0001455c 	.word	0x0001455c
 80013cc:	000144c8 	.word	0x000144c8
 80013d0:	00014558 	.word	0x00014558
 80013d4:	08000929 	.word	0x08000929
 80013d8:	0001454b 	.word	0x0001454b
 80013dc:	000144e4 	.word	0x000144e4
 80013e0:	000144e6 	.word	0x000144e6
 80013e4:	00014534 	.word	0x00014534
 80013e8:	08017390 	.word	0x08017390
 80013ec:	00014564 	.word	0x00014564
 80013f0:	000144c0 	.word	0x000144c0
 80013f4:	000144c4 	.word	0x000144c4
 80013f8:	200011cc 	.word	0x200011cc
 80013fc:	200011d0 	.word	0x200011d0
 8001400:	080173dc 	.word	0x080173dc
 8001404:	20001190 	.word	0x20001190
 8001408:	080009b9 	.word	0x080009b9
 800140c:	0801740c 	.word	0x0801740c
 8001410:	e028      	b.n	8001464 <main+0xa24>
	  	  				}
	  	  				else{
	  	  					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 8001412:	4b93      	ldr	r3, [pc, #588]	; (8001660 <main+0xc20>)
 8001414:	443b      	add	r3, r7
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4992      	ldr	r1, [pc, #584]	; (8001664 <main+0xc24>)
 800141c:	4892      	ldr	r0, [pc, #584]	; (8001668 <main+0xc28>)
 800141e:	f013 fb93 	bl	8014b48 <siprintf>
 8001422:	4603      	mov	r3, r0
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <main+0xc2c>)
 8001428:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800142a:	4b90      	ldr	r3, [pc, #576]	; (800166c <main+0xc2c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b29a      	uxth	r2, r3
 8001430:	2364      	movs	r3, #100	; 0x64
 8001432:	498d      	ldr	r1, [pc, #564]	; (8001668 <main+0xc28>)
 8001434:	488e      	ldr	r0, [pc, #568]	; (8001670 <main+0xc30>)
 8001436:	f005 fdcb 	bl	8006fd0 <HAL_UART_Transmit>
 800143a:	e013      	b.n	8001464 <main+0xa24>
	  	  				}
	  	  			}
	  	  			else{
	  	  			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 800143c:	4b88      	ldr	r3, [pc, #544]	; (8001660 <main+0xc20>)
 800143e:	443b      	add	r3, r7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	498b      	ldr	r1, [pc, #556]	; (8001674 <main+0xc34>)
 8001446:	4888      	ldr	r0, [pc, #544]	; (8001668 <main+0xc28>)
 8001448:	f013 fb7e 	bl	8014b48 <siprintf>
 800144c:	4603      	mov	r3, r0
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b86      	ldr	r3, [pc, #536]	; (800166c <main+0xc2c>)
 8001452:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001454:	4b85      	ldr	r3, [pc, #532]	; (800166c <main+0xc2c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b29a      	uxth	r2, r3
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	4982      	ldr	r1, [pc, #520]	; (8001668 <main+0xc28>)
 800145e:	4884      	ldr	r0, [pc, #528]	; (8001670 <main+0xc30>)
 8001460:	f005 fdb6 	bl	8006fd0 <HAL_UART_Transmit>
	  	  			}

	  	  			HAL_Delay(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f002 fd5a 	bl	8003f20 <HAL_Delay>
//					ai_input_ICU[0].data = AI_HANDLE_PTR(image);
////	  				ai_output_ICU[0].n_batches = 1;
//					ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);

	  	  			// Image Classification Section
	  	  		    for (uint32_t  ii = 0; ii < AI_NETWORK_IN_1_SIZE; ii++)
 800146c:	2300      	movs	r3, #0
 800146e:	4a82      	ldr	r2, [pc, #520]	; (8001678 <main+0xc38>)
 8001470:	443a      	add	r2, r7
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e019      	b.n	80014aa <main+0xa6a>
	  	  		    {
//	  	  		    	image[ii] = *(devid.fbuf + ii);
	  	  		        ((ai_u8 *)image)[ii] = *(devid.fbuf + ii);
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <main+0xc3c>)
 8001478:	443b      	add	r3, r7
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <main+0xc38>)
 800147e:	443b      	add	r3, r7
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	441a      	add	r2, r3
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <main+0xc40>)
 8001486:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 800148a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800148e:	443b      	add	r3, r7
 8001490:	4979      	ldr	r1, [pc, #484]	; (8001678 <main+0xc38>)
 8001492:	4439      	add	r1, r7
 8001494:	6809      	ldr	r1, [r1, #0]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
	  	  		    for (uint32_t  ii = 0; ii < AI_NETWORK_IN_1_SIZE; ii++)
 800149c:	4b76      	ldr	r3, [pc, #472]	; (8001678 <main+0xc38>)
 800149e:	443b      	add	r3, r7
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a74      	ldr	r2, [pc, #464]	; (8001678 <main+0xc38>)
 80014a6:	443a      	add	r2, r7
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b73      	ldr	r3, [pc, #460]	; (8001678 <main+0xc38>)
 80014ac:	443b      	add	r3, r7
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80014b4:	d3df      	bcc.n	8001476 <main+0xa36>
	  	  		    }


	  	  		// Get current timestamp
	  	  		timestamp_ICU = htim14.Instance->CNT;
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <main+0xc44>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	4a72      	ldr	r2, [pc, #456]	; (8001688 <main+0xc48>)
 80014be:	443a      	add	r2, r7
 80014c0:	6013      	str	r3, [r2, #0]




	  	  		    // Perform inference
	  	  		    nbatch_ICU = ai_network_run(icu_tflite, &ai_input_ICU[0], &ai_output_ICU[0]);
 80014c2:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80014c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	4a6f      	ldr	r2, [pc, #444]	; (800168c <main+0xc4c>)
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <main+0xc50>)
 80014d0:	4413      	add	r3, r2
 80014d2:	19da      	adds	r2, r3, r7
 80014d4:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <main+0xc54>)
 80014d6:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80014da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014de:	443b      	add	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	f006 ff33 	bl	800834c <ai_network_run>
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <main+0xc58>)
 80014e8:	443b      	add	r3, r7
 80014ea:	6018      	str	r0, [r3, #0]

	  	  		    if (nbatch_ICU != 1) {
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <main+0xc58>)
 80014ee:	443b      	add	r3, r7
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d016      	beq.n	8001524 <main+0xae4>
	  	  		      buf_len = sprintf(buf, "Error: could not run inference. nbatch_ICU=%lu\r\n",(int32_t)nbatch_ICU);
 80014f6:	4b69      	ldr	r3, [pc, #420]	; (800169c <main+0xc5c>)
 80014f8:	443b      	add	r3, r7
 80014fa:	4a67      	ldr	r2, [pc, #412]	; (8001698 <main+0xc58>)
 80014fc:	443a      	add	r2, r7
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	4967      	ldr	r1, [pc, #412]	; (80016a0 <main+0xc60>)
 8001502:	4618      	mov	r0, r3
 8001504:	f013 fb20 	bl	8014b48 <siprintf>
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <main+0xc64>)
 800150a:	443b      	add	r3, r7
 800150c:	6018      	str	r0, [r3, #0]
	  	  		      HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <main+0xc64>)
 8001510:	443b      	add	r3, r7
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4961      	ldr	r1, [pc, #388]	; (800169c <main+0xc5c>)
 8001518:	4439      	add	r1, r7
 800151a:	2364      	movs	r3, #100	; 0x64
 800151c:	4854      	ldr	r0, [pc, #336]	; (8001670 <main+0xc30>)
 800151e:	f005 fd57 	bl	8006fd0 <HAL_UART_Transmit>
 8001522:	e012      	b.n	800154a <main+0xb0a>
	  	  		    }
	  	  		    else
	  	  		    {
	  	  		  	    buf_len = sprintf(buf, "\r\nRunning ICU tflite done!\r\n");
 8001524:	4b5d      	ldr	r3, [pc, #372]	; (800169c <main+0xc5c>)
 8001526:	443b      	add	r3, r7
 8001528:	495f      	ldr	r1, [pc, #380]	; (80016a8 <main+0xc68>)
 800152a:	4618      	mov	r0, r3
 800152c:	f013 fb0c 	bl	8014b48 <siprintf>
 8001530:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <main+0xc64>)
 8001532:	443b      	add	r3, r7
 8001534:	6018      	str	r0, [r3, #0]
	  	  		  	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <main+0xc64>)
 8001538:	443b      	add	r3, r7
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4957      	ldr	r1, [pc, #348]	; (800169c <main+0xc5c>)
 8001540:	4439      	add	r1, r7
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	484a      	ldr	r0, [pc, #296]	; (8001670 <main+0xc30>)
 8001546:	f005 fd43 	bl	8006fd0 <HAL_UART_Transmit>
	  	  		    }

	  	  		    float max_val = -1;
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <main+0xc6c>)
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <main+0xc70>)
 800154e:	443a      	add	r2, r7
 8001550:	6013      	str	r3, [r2, #0]

	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <main+0xc74>)
 8001556:	443a      	add	r2, r7
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e049      	b.n	80015f0 <main+0xbb0>
	  	  		    {
	  	  		        if(max_val < out_data_ICU[i])
 800155c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8001560:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <main+0xc74>)
 8001566:	443b      	add	r3, r7
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	f993 3000 	ldrsb.w	r3, [r3]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001578:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <main+0xc70>)
 800157a:	443b      	add	r3, r7
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	d52b      	bpl.n	80015e2 <main+0xba2>
	  	  		        {
	  	  		            max_val = out_data_ICU[i];
 800158a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 800158e:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001592:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <main+0xc74>)
 8001594:	443b      	add	r3, r7
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	f993 3000 	ldrsb.w	r3, [r3]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <main+0xc70>)
 80015a8:	443b      	add	r3, r7
 80015aa:	edc3 7a00 	vstr	s15, [r3]
	  	  		            prediction = i;
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <main+0xc74>)
 80015b0:	443b      	add	r3, r7
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <main+0xc78>)
 80015b6:	443a      	add	r2, r7
 80015b8:	7013      	strb	r3, [r2, #0]

	  						StringLength=sprintf(txString,"\r\n\nIndex:  %ld ", (long)prediction);
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <main+0xc78>)
 80015bc:	443b      	add	r3, r7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	493e      	ldr	r1, [pc, #248]	; (80016bc <main+0xc7c>)
 80015c4:	4828      	ldr	r0, [pc, #160]	; (8001668 <main+0xc28>)
 80015c6:	f013 fabf 	bl	8014b48 <siprintf>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <main+0xc2c>)
 80015d0:	701a      	strb	r2, [r3, #0]
	  						HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0xc2c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	4923      	ldr	r1, [pc, #140]	; (8001668 <main+0xc28>)
 80015dc:	4824      	ldr	r0, [pc, #144]	; (8001670 <main+0xc30>)
 80015de:	f005 fcf7 	bl	8006fd0 <HAL_UART_Transmit>
	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <main+0xc74>)
 80015e4:	443b      	add	r3, r7
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <main+0xc74>)
 80015ec:	443a      	add	r2, r7
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <main+0xc74>)
 80015f2:	443b      	add	r3, r7
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	ddb0      	ble.n	800155c <main+0xb1c>
	  	  		    }

	  	  		    prediction = prediction;

	  	  		// Print output of neural network along with inference time (microseconds)
	  	  		StringLength = sprintf(txString,"Output: %f | Duration: %lu\r\n", prediction, htim14.Instance->CNT - timestamp_ICU);
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <main+0xc78>)
 80015fc:	443b      	add	r3, r7
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <main+0xc44>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <main+0xc48>)
 8001608:	443b      	add	r3, r7
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	460a      	mov	r2, r1
 8001610:	492b      	ldr	r1, [pc, #172]	; (80016c0 <main+0xc80>)
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <main+0xc28>)
 8001614:	f013 fa98 	bl	8014b48 <siprintf>
 8001618:	4603      	mov	r3, r0
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <main+0xc2c>)
 800161e:	701a      	strb	r2, [r3, #0]
	  	  		HAL_UART_Transmit(&debugPort, (uint8_t *)txString, buf_len, 100);
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <main+0xc64>)
 8001622:	443b      	add	r3, r7
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29a      	uxth	r2, r3
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	490f      	ldr	r1, [pc, #60]	; (8001668 <main+0xc28>)
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <main+0xc30>)
 800162e:	f005 fccf 	bl	8006fd0 <HAL_UART_Transmit>


	  	  		    if (prediction == 1)
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <main+0xc78>)
 8001634:	443b      	add	r3, r7
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d145      	bne.n	80016c8 <main+0xc88>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Space \r\n");
 800163c:	4921      	ldr	r1, [pc, #132]	; (80016c4 <main+0xc84>)
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <main+0xc28>)
 8001640:	f013 fa82 	bl	8014b48 <siprintf>
 8001644:	4603      	mov	r3, r0
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <main+0xc2c>)
 800164a:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <main+0xc2c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <main+0xc28>)
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <main+0xc30>)
 8001658:	f005 fcba 	bl	8006fd0 <HAL_UART_Transmit>
 800165c:	e05a      	b.n	8001714 <main+0xcd4>
 800165e:	bf00      	nop
 8001660:	0001454b 	.word	0x0001454b
 8001664:	08017428 	.word	0x08017428
 8001668:	20001198 	.word	0x20001198
 800166c:	20001194 	.word	0x20001194
 8001670:	200013ec 	.word	0x200013ec
 8001674:	08017448 	.word	0x08017448
 8001678:	00014570 	.word	0x00014570
 800167c:	000144c0 	.word	0x000144c0
 8001680:	fffecea4 	.word	0xfffecea4
 8001684:	200013a0 	.word	0x200013a0
 8001688:	00014544 	.word	0x00014544
 800168c:	fffece54 	.word	0xfffece54
 8001690:	00014580 	.word	0x00014580
 8001694:	fffece80 	.word	0xfffece80
 8001698:	00014540 	.word	0x00014540
 800169c:	00014488 	.word	0x00014488
 80016a0:	0801747c 	.word	0x0801747c
 80016a4:	0001457c 	.word	0x0001457c
 80016a8:	080174b0 	.word	0x080174b0
 80016ac:	bf800000 	.word	0xbf800000
 80016b0:	0001456c 	.word	0x0001456c
 80016b4:	00014568 	.word	0x00014568
 80016b8:	0001457b 	.word	0x0001457b
 80016bc:	080174d0 	.word	0x080174d0
 80016c0:	08017348 	.word	0x08017348
 80016c4:	080174e0 	.word	0x080174e0
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Space_ICU, 1, 100);
	  	  		    }
	  	  		    else if (prediction == 0)
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <main+0xd00>)
 80016ca:	443b      	add	r3, r7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d110      	bne.n	80016f4 <main+0xcb4>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Earth \r\n");
 80016d2:	491c      	ldr	r1, [pc, #112]	; (8001744 <main+0xd04>)
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <main+0xd08>)
 80016d6:	f013 fa37 	bl	8014b48 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <main+0xd0c>)
 80016e0:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <main+0xd0c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	4917      	ldr	r1, [pc, #92]	; (8001748 <main+0xd08>)
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <main+0xd10>)
 80016ee:	f005 fc6f 	bl	8006fd0 <HAL_UART_Transmit>
 80016f2:	e00f      	b.n	8001714 <main+0xcd4>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Earth_ICU, 1, 100);
	  	  		    }
	  	  		    else
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nError Prediction \r\n");
 80016f4:	4917      	ldr	r1, [pc, #92]	; (8001754 <main+0xd14>)
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <main+0xd08>)
 80016f8:	f013 fa26 	bl	8014b48 <siprintf>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <main+0xd0c>)
 8001702:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <main+0xd0c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <main+0xd08>)
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <main+0xd10>)
 8001710:	f005 fc5e 	bl	8006fd0 <HAL_UART_Transmit>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Error_ICU, 1, 100);
	  	  		    }



	  	  	  	if (count == 10000) {
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <main+0xd18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f242 7210 	movw	r2, #10000	; 0x2710
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <main+0xce6>
	  	  	  		count = 0;																									/* Reset to zero to prevent overflowing bugs */
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <main+0xd18>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
	  	  	  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  		free(work);   /* Discard work area */
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <main+0xd1c>)
 8001728:	443b      	add	r3, r7
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	f012 fc2c 	bl	8013f88 <free>
	  	  		free(devid.fbuf);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <main+0xd20>)
 8001732:	443b      	add	r3, r7
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f012 fc26 	bl	8013f88 <free>
  {
 800173c:	e4b3      	b.n	80010a6 <main+0x666>
 800173e:	bf00      	nop
 8001740:	0001457b 	.word	0x0001457b
 8001744:	080174f8 	.word	0x080174f8
 8001748:	20001198 	.word	0x20001198
 800174c:	20001194 	.word	0x20001194
 8001750:	200013ec 	.word	0x200013ec
 8001754:	08017510 	.word	0x08017510
 8001758:	200011d4 	.word	0x200011d4
 800175c:	00014558 	.word	0x00014558
 8001760:	000144c0 	.word	0x000144c0

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	; 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2234      	movs	r2, #52	; 0x34
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f012 fc38 	bl	8013fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <SystemClock_Config+0xc8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <SystemClock_Config+0xc8>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <SystemClock_Config+0xc8>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <SystemClock_Config+0xcc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <SystemClock_Config+0xcc>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <SystemClock_Config+0xcc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	2310      	movs	r3, #16
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d0:	2308      	movs	r3, #8
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80017d4:	23a0      	movs	r3, #160	; 0xa0
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fbbd 	bl	8004f68 <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f4:	f000 f81e 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fe55 	bl	80054c4 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001820:	f000 f808 	bl	8001834 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3750      	adds	r7, #80	; 0x50
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_QUADSPI_Init+0x50>)
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <MX_QUADSPI_Init+0x54>)
 800184c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001850:	22ff      	movs	r2, #255	; 0xff
 8001852:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001856:	2201      	movs	r2, #1
 8001858:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_QUADSPI_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001862:	2201      	movs	r2, #1
 8001864:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_QUADSPI_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_QUADSPI_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_QUADSPI_Init+0x50>)
 8001880:	f003 fab0 	bl	8004de4 <HAL_QSPI_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800188a:	f7ff ffd3 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200011d8 	.word	0x200011d8
 8001898:	a0001000 	.word	0xa0001000

0800189c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a35      	ldr	r2, [pc, #212]	; (8001990 <HAL_QSPI_MspInit+0xf4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d164      	bne.n	8001988 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a34      	ldr	r2, [pc, #208]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_QSPI_MspInit+0xf8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001916:	2309      	movs	r3, #9
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	481d      	ldr	r0, [pc, #116]	; (8001998 <HAL_QSPI_MspInit+0xfc>)
 8001922:	f003 f899 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001938:	230a      	movs	r3, #10
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <HAL_QSPI_MspInit+0xfc>)
 8001944:	f003 f888 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001948:	2304      	movs	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001958:	2309      	movs	r3, #9
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_QSPI_MspInit+0x100>)
 8001964:	f003 f878 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001968:	2340      	movs	r3, #64	; 0x40
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001978:	230a      	movs	r3, #10
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <HAL_QSPI_MspInit+0x100>)
 8001984:	f003 f868 	bl	8004a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	a0001000 	.word	0xa0001000
 8001994:	40023800 	.word	0x40023800
 8001998:	40021400 	.word	0x40021400
 800199c:	40020400 	.word	0x40020400

080019a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <MX_SPI1_Init+0x78>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019d6:	2210      	movs	r2, #16
 80019d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_SPI1_Init+0x74>)
 80019fa:	2208      	movs	r2, #8
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_SPI1_Init+0x74>)
 8001a00:	f004 fbae 	bl	8006160 <HAL_SPI_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a0a:	f7ff ff13 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20001224 	.word	0x20001224
 8001a18:	40013000 	.word	0x40013000

08001a1c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a22:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <MX_SPI3_Init+0x6c>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_SPI3_Init+0x68>)
 8001a72:	f004 fb75 	bl	8006160 <HAL_SPI_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001a7c:	f7ff feda 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20001288 	.word	0x20001288
 8001a88:	40003c00 	.word	0x40003c00

08001a8c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <MX_SPI4_Init+0x78>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001aa6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aaa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abe:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ac2:	2228      	movs	r2, #40	; 0x28
 8001ac4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ada:	2207      	movs	r2, #7
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_SPI4_Init+0x74>)
 8001aec:	f004 fb38 	bl	8006160 <HAL_SPI_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001af6:	f7ff fe9d 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200012ec 	.word	0x200012ec
 8001b04:	40013400 	.word	0x40013400

08001b08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	; 0x38
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a54      	ldr	r2, [pc, #336]	; (8001c78 <HAL_SPI_MspInit+0x170>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d128      	bne.n	8001b7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a53      	ldr	r2, [pc, #332]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b5a:	23e0      	movs	r3, #224	; 0xe0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	4842      	ldr	r0, [pc, #264]	; (8001c80 <HAL_SPI_MspInit+0x178>)
 8001b76:	f002 ff6f 	bl	8004a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001b7a:	e078      	b.n	8001c6e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <HAL_SPI_MspInit+0x17c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d146      	bne.n	8001c14 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001be0:	2306      	movs	r3, #6
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4825      	ldr	r0, [pc, #148]	; (8001c80 <HAL_SPI_MspInit+0x178>)
 8001bec:	f002 ff34 	bl	8004a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c02:	2306      	movs	r3, #6
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481e      	ldr	r0, [pc, #120]	; (8001c88 <HAL_SPI_MspInit+0x180>)
 8001c0e:	f002 ff23 	bl	8004a58 <HAL_GPIO_Init>
}
 8001c12:	e02c      	b.n	8001c6e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_SPI_MspInit+0x184>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d127      	bne.n	8001c6e <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_SPI_MspInit+0x174>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c5e:	2305      	movs	r3, #5
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <HAL_SPI_MspInit+0x188>)
 8001c6a:	f002 fef5 	bl	8004a58 <HAL_GPIO_Init>
}
 8001c6e:	bf00      	nop
 8001c70:	3738      	adds	r7, #56	; 0x38
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40013000 	.word	0x40013000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40003c00 	.word	0x40003c00
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40013400 	.word	0x40013400
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f002 f8d6 	bl	8003ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f005 f9cb 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200013ec 	.word	0x200013ec

08001d4c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA2_Stream5_IRQHandler+0x10>)
 8001d52:	f002 fc45 	bl	80045e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200014fc 	.word	0x200014fc

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f012 f8c8 	bl	8013f24 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20080000 	.word	0x20080000
 8001dc0:	00000800 	.word	0x00000800
 8001dc4:	20001350 	.word	0x20001350
 8001dc8:	200016e0 	.word	0x200016e0

08001dcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <SystemInit+0x28>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <SystemInit+0x28>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SystemInit+0x28>)
 8001de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de6:	609a      	str	r2, [r3, #8]
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <MX_TIM13_Init+0x44>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e04:	224f      	movs	r2, #79	; 0x4f
 8001e06:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_TIM13_Init+0x40>)
 8001e24:	f004 ff8e 	bl	8006d44 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001e2e:	f7ff fd01 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20001354 	.word	0x20001354
 8001e3c:	40001c00 	.word	0x40001c00

08001e40 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <MX_TIM14_Init+0x44>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e4c:	224f      	movs	r2, #79	; 0x4f
 8001e4e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM14_Init+0x40>)
 8001e6c:	f004 ff6a 	bl	8006d44 <HAL_TIM_Base_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001e76:	f7ff fcdd 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200013a0 	.word	0x200013a0
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_TIM_Base_MspInit+0x5c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001eb2:	e010      	b.n	8001ed6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_TIM_Base_MspInit+0x64>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_TIM_Base_MspInit+0x60>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40001c00 	.word	0x40001c00
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40002000 	.word	0x40002000

08001ef0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001ef6:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MX_USART1_UART_Init+0x5c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART1_UART_Init+0x58>)
 8001f34:	f004 fffe 	bl	8006f34 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f3e:	f7ff fc79 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200013ec 	.word	0x200013ec
 8001f4c:	40011000 	.word	0x40011000

08001f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <MX_USART2_UART_Init+0x5c>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART2_UART_Init+0x58>)
 8001f94:	f004 ffce 	bl	8006f34 <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f9e:	f7ff fc49 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20001474 	.word	0x20001474
 8001fac:	40004400 	.word	0x40004400

08001fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0b0      	sub	sp, #192	; 0xc0
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2290      	movs	r2, #144	; 0x90
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f012 f809 	bl	8013fe8 <memset>
  if(uartHandle->Instance==USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <HAL_UART_MspInit+0x1a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d173      	bne.n	80020c8 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe0:	2340      	movs	r3, #64	; 0x40
 8001fe2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fc8f 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ff8:	f7ff fc1c 	bl	8001834 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	4a54      	ldr	r2, [pc, #336]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6453      	str	r3, [r2, #68]	; 0x44
 8002008:	4b52      	ldr	r3, [pc, #328]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800202c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002046:	2307      	movs	r3, #7
 8002048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002050:	4619      	mov	r1, r3
 8002052:	4841      	ldr	r0, [pc, #260]	; (8002158 <HAL_UART_MspInit+0x1a8>)
 8002054:	f002 fd00 	bl	8004a58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <HAL_UART_MspInit+0x1ac>)
 800205a:	4a41      	ldr	r2, [pc, #260]	; (8002160 <HAL_UART_MspInit+0x1b0>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002064:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_UART_MspInit+0x1ac>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002078:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_UART_MspInit+0x1ac>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_UART_MspInit+0x1ac>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800209a:	4830      	ldr	r0, [pc, #192]	; (800215c <HAL_UART_MspInit+0x1ac>)
 800209c:	f002 f960 	bl	8004360 <HAL_DMA_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80020a6:	f7ff fbc5 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_UART_MspInit+0x1ac>)
 80020ae:	675a      	str	r2, [r3, #116]	; 0x74
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_UART_MspInit+0x1ac>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2025      	movs	r0, #37	; 0x25
 80020bc:	f002 f82f 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c0:	2025      	movs	r0, #37	; 0x25
 80020c2:	f002 f848 	bl	8004156 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020c6:	e03f      	b.n	8002148 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_UART_MspInit+0x1b4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d13a      	bne.n	8002148 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fc16 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_MspInit+0x13e>
      Error_Handler();
 80020ea:	f7ff fba3 	bl	8001834 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_UART_MspInit+0x1a4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211e:	230c      	movs	r3, #12
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002136:	2307      	movs	r3, #7
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_UART_MspInit+0x1a8>)
 8002144:	f002 fc88 	bl	8004a58 <HAL_GPIO_Init>
}
 8002148:	bf00      	nop
 800214a:	37c0      	adds	r7, #192	; 0xc0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40011000 	.word	0x40011000
 8002154:	40023800 	.word	0x40023800
 8002158:	40020000 	.word	0x40020000
 800215c:	200014fc 	.word	0x200014fc
 8002160:	40026488 	.word	0x40026488
 8002164:	40004400 	.word	0x40004400

08002168 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002172:	f107 020f 	add.w	r2, r7, #15
 8002176:	1df9      	adds	r1, r7, #7
 8002178:	2364      	movs	r3, #100	; 0x64
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	4804      	ldr	r0, [pc, #16]	; (8002190 <W25qxx_Spi+0x28>)
 8002180:	f004 f9c9 	bl	8006516 <HAL_SPI_TransmitReceive>
	return ret;	
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200012ec 	.word	0x200012ec

08002194 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2110      	movs	r1, #16
 80021ae:	4813      	ldr	r0, [pc, #76]	; (80021fc <W25qxx_ReadID+0x68>)
 80021b0:	f002 fdfe 	bl	8004db0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80021b4:	209f      	movs	r0, #159	; 0x9f
 80021b6:	f7ff ffd7 	bl	8002168 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021ba:	20a5      	movs	r0, #165	; 0xa5
 80021bc:	f7ff ffd4 	bl	8002168 <W25qxx_Spi>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021c4:	20a5      	movs	r0, #165	; 0xa5
 80021c6:	f7ff ffcf 	bl	8002168 <W25qxx_Spi>
 80021ca:	4603      	mov	r3, r0
 80021cc:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021ce:	20a5      	movs	r0, #165	; 0xa5
 80021d0:	f7ff ffca 	bl	8002168 <W25qxx_Spi>
 80021d4:	4603      	mov	r3, r0
 80021d6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	2110      	movs	r1, #16
 80021dc:	4807      	ldr	r0, [pc, #28]	; (80021fc <W25qxx_ReadID+0x68>)
 80021de:	f002 fde7 	bl	8004db0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	4313      	orrs	r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  return Temp;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000

08002200 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2110      	movs	r1, #16
 800220a:	4816      	ldr	r0, [pc, #88]	; (8002264 <W25qxx_ReadUniqID+0x64>)
 800220c:	f002 fdd0 	bl	8004db0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002210:	204b      	movs	r0, #75	; 0x4b
 8002212:	f7ff ffa9 	bl	8002168 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	e005      	b.n	8002228 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800221c:	20a5      	movs	r0, #165	; 0xa5
 800221e:	f7ff ffa3 	bl	8002168 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	3301      	adds	r3, #1
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d9f6      	bls.n	800221c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 800222e:	2300      	movs	r3, #0
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	e00b      	b.n	800224c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002234:	79bc      	ldrb	r4, [r7, #6]
 8002236:	20a5      	movs	r0, #165	; 0xa5
 8002238:	f7ff ff96 	bl	8002168 <W25qxx_Spi>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <W25qxx_ReadUniqID+0x68>)
 8002242:	4423      	add	r3, r4
 8002244:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	3301      	adds	r3, #1
 800224a:	71bb      	strb	r3, [r7, #6]
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b07      	cmp	r3, #7
 8002250:	d9f0      	bls.n	8002234 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2110      	movs	r1, #16
 8002256:	4803      	ldr	r0, [pc, #12]	; (8002264 <W25qxx_ReadUniqID+0x64>)
 8002258:	f002 fdaa 	bl	8004db0 <HAL_GPIO_WritePin>
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	2000155c 	.word	0x2000155c

0800226c <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	2110      	movs	r1, #16
 800227e:	481c      	ldr	r0, [pc, #112]	; (80022f0 <W25qxx_ReadStatusRegister+0x84>)
 8002280:	f002 fd96 	bl	8004db0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10c      	bne.n	80022a4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800228a:	2005      	movs	r0, #5
 800228c:	f7ff ff6c 	bl	8002168 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002290:	20a5      	movs	r0, #165	; 0xa5
 8002292:	f7ff ff69 	bl	8002168 <W25qxx_Spi>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <W25qxx_ReadStatusRegister+0x88>)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80022a2:	e01b      	b.n	80022dc <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d10c      	bne.n	80022c4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80022aa:	2035      	movs	r0, #53	; 0x35
 80022ac:	f7ff ff5c 	bl	8002168 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022b0:	20a5      	movs	r0, #165	; 0xa5
 80022b2:	f7ff ff59 	bl	8002168 <W25qxx_Spi>
 80022b6:	4603      	mov	r3, r0
 80022b8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <W25qxx_ReadStatusRegister+0x88>)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80022c2:	e00b      	b.n	80022dc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80022c4:	2015      	movs	r0, #21
 80022c6:	f7ff ff4f 	bl	8002168 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022ca:	20a5      	movs	r0, #165	; 0xa5
 80022cc:	f7ff ff4c 	bl	8002168 <W25qxx_Spi>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <W25qxx_ReadStatusRegister+0x88>)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	2110      	movs	r1, #16
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <W25qxx_ReadStatusRegister+0x84>)
 80022e2:	f002 fd65 	bl	8004db0 <HAL_GPIO_WritePin>
	return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	2000155c 	.word	0x2000155c

080022f8 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <W25qxx_Init+0x184>)
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002306:	e002      	b.n	800230e <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8002308:	2064      	movs	r0, #100	; 0x64
 800230a:	f001 fe09 	bl	8003f20 <HAL_Delay>
	while(HAL_GetTick()<100)
 800230e:	f001 fdfb 	bl	8003f08 <HAL_GetTick>
 8002312:	4603      	mov	r3, r0
 8002314:	2b63      	cmp	r3, #99	; 0x63
 8002316:	d9f7      	bls.n	8002308 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	2110      	movs	r1, #16
 800231c:	4858      	ldr	r0, [pc, #352]	; (8002480 <W25qxx_Init+0x188>)
 800231e:	f002 fd47 	bl	8004db0 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8002322:	2064      	movs	r0, #100	; 0x64
 8002324:	f001 fdfc 	bl	8003f20 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002328:	f7ff ff34 	bl	8002194 <W25qxx_ReadID>
 800232c:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <W25qxx_Init+0x18c>)
 8002334:	4413      	add	r3, r2
 8002336:	2b09      	cmp	r3, #9
 8002338:	d85f      	bhi.n	80023fa <W25qxx_Init+0x102>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <W25qxx_Init+0x48>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023ed 	.word	0x080023ed
 8002344:	080023df 	.word	0x080023df
 8002348:	080023d1 	.word	0x080023d1
 800234c:	080023c3 	.word	0x080023c3
 8002350:	080023b5 	.word	0x080023b5
 8002354:	080023a7 	.word	0x080023a7
 8002358:	08002399 	.word	0x08002399
 800235c:	08002389 	.word	0x08002389
 8002360:	08002379 	.word	0x08002379
 8002364:	08002369 	.word	0x08002369
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <W25qxx_Init+0x184>)
 800236a:	220a      	movs	r2, #10
 800236c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <W25qxx_Init+0x184>)
 8002370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002374:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8002376:	e046      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8002378:	4b40      	ldr	r3, [pc, #256]	; (800247c <W25qxx_Init+0x184>)
 800237a:	2209      	movs	r2, #9
 800237c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 800237e:	4b3f      	ldr	r3, [pc, #252]	; (800247c <W25qxx_Init+0x184>)
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8002386:	e03e      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <W25qxx_Init+0x184>)
 800238a:	2208      	movs	r2, #8
 800238c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <W25qxx_Init+0x184>)
 8002390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002394:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8002396:	e036      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <W25qxx_Init+0x184>)
 800239a:	2207      	movs	r2, #7
 800239c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <W25qxx_Init+0x184>)
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80023a4:	e02f      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <W25qxx_Init+0x184>)
 80023a8:	2206      	movs	r2, #6
 80023aa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <W25qxx_Init+0x184>)
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80023b2:	e028      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <W25qxx_Init+0x184>)
 80023b6:	2205      	movs	r2, #5
 80023b8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <W25qxx_Init+0x184>)
 80023bc:	2220      	movs	r2, #32
 80023be:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80023c0:	e021      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	; (800247c <W25qxx_Init+0x184>)
 80023c4:	2204      	movs	r2, #4
 80023c6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <W25qxx_Init+0x184>)
 80023ca:	2210      	movs	r2, #16
 80023cc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 80023ce:	e01a      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <W25qxx_Init+0x184>)
 80023d2:	2203      	movs	r2, #3
 80023d4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <W25qxx_Init+0x184>)
 80023d8:	2208      	movs	r2, #8
 80023da:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 80023dc:	e013      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <W25qxx_Init+0x184>)
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <W25qxx_Init+0x184>)
 80023e6:	2204      	movs	r2, #4
 80023e8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 80023ea:	e00c      	b.n	8002406 <W25qxx_Init+0x10e>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <W25qxx_Init+0x184>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <W25qxx_Init+0x184>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 80023f8:	e005      	b.n	8002406 <W25qxx_Init+0x10e>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <W25qxx_Init+0x184>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8002402:	2300      	movs	r3, #0
 8002404:	e036      	b.n	8002474 <W25qxx_Init+0x17c>
				
	}		
	w25qxx.PageSize=256;
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <W25qxx_Init+0x184>)
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <W25qxx_Init+0x184>)
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <W25qxx_Init+0x184>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <W25qxx_Init+0x184>)
 800241e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <W25qxx_Init+0x184>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <W25qxx_Init+0x184>)
 8002426:	6912      	ldr	r2, [r2, #16]
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <W25qxx_Init+0x184>)
 800242e:	8952      	ldrh	r2, [r2, #10]
 8002430:	fbb3 f3f2 	udiv	r3, r3, r2
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <W25qxx_Init+0x184>)
 8002436:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <W25qxx_Init+0x184>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4a0f      	ldr	r2, [pc, #60]	; (800247c <W25qxx_Init+0x184>)
 8002440:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <W25qxx_Init+0x184>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <W25qxx_Init+0x184>)
 8002448:	6912      	ldr	r2, [r2, #16]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <W25qxx_Init+0x184>)
 8002452:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002454:	f7ff fed4 	bl	8002200 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff ff07 	bl	800226c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800245e:	2002      	movs	r0, #2
 8002460:	f7ff ff04 	bl	800226c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002464:	2003      	movs	r0, #3
 8002466:	f7ff ff01 	bl	800226c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <W25qxx_Init+0x184>)
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002472:	2301      	movs	r3, #1
}	
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000155c 	.word	0x2000155c
 8002480:	40021000 	.word	0x40021000
 8002484:	ffffbfef 	.word	0xffffbfef

08002488 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8002494:	e002      	b.n	800249c <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8002496:	2001      	movs	r0, #1
 8002498:	f001 fd42 	bl	8003f20 <HAL_Delay>
	while(w25qxx.Lock==1)
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <W25qxx_ReadBytes+0xa4>)
 800249e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d0f7      	beq.n	8002496 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <W25qxx_ReadBytes+0xa4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2110      	movs	r1, #16
 80024b2:	481f      	ldr	r0, [pc, #124]	; (8002530 <W25qxx_ReadBytes+0xa8>)
 80024b4:	f002 fc7c 	bl	8004db0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80024b8:	200b      	movs	r0, #11
 80024ba:	f7ff fe55 	bl	8002168 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <W25qxx_ReadBytes+0xa4>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d905      	bls.n	80024d2 <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0e1b      	lsrs	r3, r3, #24
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fe4b 	bl	8002168 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fe45 	bl	8002168 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fe3f 	bl	8002168 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fe3a 	bl	8002168 <W25qxx_Spi>
	W25qxx_Spi(0);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fe37 	bl	8002168 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <W25qxx_ReadBytes+0xac>)
 8002506:	f003 fed6 	bl	80062b6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	2110      	movs	r1, #16
 800250e:	4808      	ldr	r0, [pc, #32]	; (8002530 <W25qxx_ReadBytes+0xa8>)
 8002510:	f002 fc4e 	bl	8004db0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f001 fd03 	bl	8003f20 <HAL_Delay>
	w25qxx.Lock=0;
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <W25qxx_ReadBytes+0xa4>)
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000155c 	.word	0x2000155c
 8002530:	40021000 	.word	0x40021000
 8002534:	200012ec 	.word	0x200012ec

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800253c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800253e:	e003      	b.n	8002548 <LoopCopyDataInit>

08002540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002546:	3104      	adds	r1, #4

08002548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800254c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800254e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002550:	d3f6      	bcc.n	8002540 <CopyDataInit>
  ldr  r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002554:	e002      	b.n	800255c <LoopFillZerobss>

08002556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002558:	f842 3b04 	str.w	r3, [r2], #4

0800255c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800255e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002560:	d3f9      	bcc.n	8002556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002562:	f7ff fc33 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f011 fce3 	bl	8013f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe fa69 	bl	8000a40 <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002570:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002574:	08018a08 	.word	0x08018a08
  ldr  r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800257c:	20001150 	.word	0x20001150
  ldr  r2, =_sbss
 8002580:	20001150 	.word	0x20001150
  ldr  r3, = _ebss
 8002584:	200016dc 	.word	0x200016dc

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>

0800258a <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	3303      	adds	r3, #3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f023 0303 	bic.w	r3, r3, #3
 80025a4:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80025ac:	887a      	ldrh	r2, [r7, #2]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d810      	bhi.n	80025d4 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c8:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	441a      	add	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 80025f2:	e047      	b.n	8002684 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d801      	bhi.n	80025fe <create_qt_tbl+0x1a>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e046      	b.n	800268c <create_qt_tbl+0xa8>
		ndata -= 65;
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	3b41      	subs	r3, #65	; 0x41
 8002602:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 800260e:	7f7b      	ldrb	r3, [r7, #29]
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <create_qt_tbl+0x38>
 8002618:	2306      	movs	r3, #6
 800261a:	e037      	b.n	800268c <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 800261c:	7f7b      	ldrb	r3, [r7, #29]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 8002626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff ffad 	bl	800258a <alloc_pool>
 8002630:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <create_qt_tbl+0x58>
 8002638:	2303      	movs	r3, #3
 800263a:	e027      	b.n	800268c <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 800263c:	8bfa      	ldrh	r2, [r7, #30]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3214      	adds	r2, #20
 8002642:	69b9      	ldr	r1, [r7, #24]
 8002644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002648:	2300      	movs	r3, #0
 800264a:	83fb      	strh	r3, [r7, #30]
 800264c:	e017      	b.n	800267e <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 800264e:	8bfb      	ldrh	r3, [r7, #30]
 8002650:	4a10      	ldr	r2, [pc, #64]	; (8002694 <create_qt_tbl+0xb0>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4619      	mov	r1, r3
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <create_qt_tbl+0xb4>)
 8002664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002668:	fb03 f101 	mul.w	r1, r3, r1
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	460a      	mov	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002678:	8bfb      	ldrh	r3, [r7, #30]
 800267a:	3301      	adds	r3, #1
 800267c:	83fb      	strh	r3, [r7, #30]
 800267e:	8bfb      	ldrh	r3, [r7, #30]
 8002680:	2b3f      	cmp	r3, #63	; 0x3f
 8002682:	d9e4      	bls.n	800264e <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1b4      	bne.n	80025f4 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	080177b4 	.word	0x080177b4
 8002698:	080177f4 	.word	0x080177f4

0800269c <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 80026aa:	e0c3      	b.n	8002834 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d801      	bhi.n	80026b6 <create_huffman_tbl+0x1a>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e0c3      	b.n	800283e <create_huffman_tbl+0x1a2>
		ndata -= 17;
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	3b11      	subs	r3, #17
 80026ba:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 80026c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026cc:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <create_huffman_tbl+0x3c>
 80026d4:	2306      	movs	r3, #6
 80026d6:	e0b2      	b.n	800283e <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 80026d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	83fb      	strh	r3, [r7, #30]
 80026e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 80026ee:	2110      	movs	r1, #16
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff ff4a 	bl	800258a <alloc_pool>
 80026f6:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <create_huffman_tbl+0x66>
 80026fe:	2303      	movs	r3, #3
 8002700:	e09d      	b.n	800283e <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 8002702:	8bb9      	ldrh	r1, [r7, #28]
 8002704:	8bfa      	ldrh	r2, [r7, #30]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	0049      	lsls	r1, r1, #1
 800270a:	440a      	add	r2, r1
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002714:	2300      	movs	r3, #0
 8002716:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800271a:	853b      	strh	r3, [r7, #40]	; 0x28
 800271c:	e00f      	b.n	800273e <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	1c53      	adds	r3, r2, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	440b      	add	r3, r1
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b29a      	uxth	r2, r3
 8002732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002734:	4413      	add	r3, r2
 8002736:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002738:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800273a:	3301      	adds	r3, #1
 800273c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800273e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d9ec      	bls.n	800271e <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ff1c 	bl	800258a <alloc_pool>
 8002752:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <create_huffman_tbl+0xc2>
 800275a:	2303      	movs	r3, #3
 800275c:	e06f      	b.n	800283e <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 800275e:	8bb9      	ldrh	r1, [r7, #28]
 8002760:	8bfa      	ldrh	r2, [r7, #30]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	0049      	lsls	r1, r1, #1
 8002766:	440a      	add	r2, r1
 8002768:	320c      	adds	r2, #12
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002774:	2300      	movs	r3, #0
 8002776:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800277a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800277c:	e01a      	b.n	80027b4 <create_huffman_tbl+0x118>
			b = pb[i];
 800277e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002788:	e009      	b.n	800279e <create_huffman_tbl+0x102>
 800278a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	847a      	strh	r2, [r7, #34]	; 0x22
 8002790:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002792:	1c51      	adds	r1, r2, #1
 8002794:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002796:	0052      	lsls	r2, r2, #1
 8002798:	6979      	ldr	r1, [r7, #20]
 800279a:	440a      	add	r2, r1
 800279c:	8013      	strh	r3, [r2, #0]
 800279e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	857a      	strh	r2, [r7, #42]	; 0x2a
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <create_huffman_tbl+0xee>
			hc <<= 1;
 80027a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 80027ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027b0:	3301      	adds	r3, #1
 80027b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80027b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d9e1      	bls.n	800277e <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027be:	429a      	cmp	r2, r3
 80027c0:	d201      	bcs.n	80027c6 <create_huffman_tbl+0x12a>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e03b      	b.n	800283e <create_huffman_tbl+0x1a2>
		ndata -= np;
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 80027ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027d0:	4619      	mov	r1, r3
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff fed9 	bl	800258a <alloc_pool>
 80027d8:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <create_huffman_tbl+0x148>
 80027e0:	2303      	movs	r3, #3
 80027e2:	e02c      	b.n	800283e <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 80027e4:	8bb9      	ldrh	r1, [r7, #28]
 80027e6:	8bfa      	ldrh	r2, [r7, #30]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0049      	lsls	r1, r1, #1
 80027ec:	440a      	add	r2, r1
 80027ee:	3210      	adds	r2, #16
 80027f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80027f6:	2300      	movs	r3, #0
 80027f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80027fa:	e017      	b.n	800282c <create_huffman_tbl+0x190>
			d = *data++;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 8002808:	8bfb      	ldrh	r3, [r7, #30]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d105      	bne.n	800281a <create_huffman_tbl+0x17e>
 800280e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002812:	2b0b      	cmp	r3, #11
 8002814:	d901      	bls.n	800281a <create_huffman_tbl+0x17e>
 8002816:	2306      	movs	r3, #6
 8002818:	e011      	b.n	800283e <create_huffman_tbl+0x1a2>
			*pd++ = d;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	627a      	str	r2, [r7, #36]	; 0x24
 8002820:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002824:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002828:	3301      	adds	r3, #1
 800282a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800282c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800282e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002830:	429a      	cmp	r2, r3
 8002832:	d3e3      	bcc.n	80027fc <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f af38 	bne.w	80026ac <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3730      	adds	r7, #48	; 0x30
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7b1b      	ldrb	r3, [r3, #12]
 8002854:	75fb      	strb	r3, [r7, #23]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	81fb      	strh	r3, [r7, #14]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	75bb      	strb	r3, [r7, #22]
 8002868:	2300      	movs	r3, #0
 800286a:	817b      	strh	r3, [r7, #10]
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d137      	bne.n	80028e6 <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	4603      	mov	r3, r0
 8002892:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002894:	89fb      	ldrh	r3, [r7, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <bitext+0x60>
 800289a:	f06f 0301 	mvn.w	r3, #1
 800289e:	e041      	b.n	8002924 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3301      	adds	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 80028ac:	897b      	ldrh	r3, [r7, #10]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 80028b2:	2300      	movs	r3, #0
 80028b4:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <bitext+0x7e>
 80028be:	f06f 0305 	mvn.w	r3, #5
 80028c2:	e02f      	b.n	8002924 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 80028c4:	23ff      	movs	r3, #255	; 0xff
 80028c6:	75bb      	strb	r3, [r7, #22]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	7dba      	ldrb	r2, [r7, #22]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e008      	b.n	80028e2 <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 80028d6:	7dbb      	ldrb	r3, [r7, #22]
 80028d8:	2bff      	cmp	r3, #255	; 0xff
 80028da:	d102      	bne.n	80028e2 <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 80028dc:	2301      	movs	r3, #1
 80028de:	817b      	strh	r3, [r7, #10]
 80028e0:	e013      	b.n	800290a <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 80028e6:	89bb      	ldrh	r3, [r7, #12]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 80028ec:	7dba      	ldrb	r2, [r7, #22]
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	4013      	ands	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <bitext+0xb8>
 80028f8:	89bb      	ldrh	r3, [r7, #12]
 80028fa:	3301      	adds	r3, #1
 80028fc:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	603b      	str	r3, [r7, #0]
	} while (nbit);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1af      	bne.n	8002870 <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7dfa      	ldrb	r2, [r7, #23]
 8002914:	731a      	strb	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	89fa      	ldrh	r2, [r7, #14]
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]

	return (int)v;
 8002922:	89bb      	ldrh	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	83fb      	strh	r3, [r7, #30]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002956:	2300      	movs	r3, #0
 8002958:	837b      	strh	r3, [r7, #26]
 800295a:	8b7b      	ldrh	r3, [r7, #26]
 800295c:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 800295e:	2310      	movs	r3, #16
 8002960:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 8002962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002966:	2b00      	cmp	r3, #0
 8002968:	d13c      	bne.n	80029e4 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 800296a:	8bfb      	ldrh	r3, [r7, #30]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297e:	6a39      	ldr	r1, [r7, #32]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	4798      	blx	r3
 8002984:	4603      	mov	r3, r0
 8002986:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002988:	8bfb      	ldrh	r3, [r7, #30]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <huffext+0x6e>
 800298e:	f06f 0301 	mvn.w	r3, #1
 8002992:	e066      	b.n	8002a62 <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	3301      	adds	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 800299a:	8bfb      	ldrh	r3, [r7, #30]
 800299c:	3b01      	subs	r3, #1
 800299e:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 80029a0:	8b7b      	ldrh	r3, [r7, #26]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 80029a6:	2300      	movs	r3, #0
 80029a8:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <huffext+0x8c>
 80029b2:	f06f 0305 	mvn.w	r3, #5
 80029b6:	e054      	b.n	8002a62 <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 80029b8:	23ff      	movs	r3, #255	; 0xff
 80029ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e00a      	b.n	80029de <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 80029d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	d102      	bne.n	80029de <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 80029d8:	2301      	movs	r3, #1
 80029da:	837b      	strh	r3, [r7, #26]
 80029dc:	e03c      	b.n	8002a58 <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 80029e4:	8bbb      	ldrh	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 80029ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80029ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f2:	4013      	ands	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <huffext+0xd4>
 80029fa:	8bbb      	ldrh	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 8002a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	82fb      	strh	r3, [r7, #22]
 8002a14:	e01a      	b.n	8002a4c <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	8bba      	ldrh	r2, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d10d      	bne.n	8002a40 <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a2a:	731a      	strb	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8bfa      	ldrh	r2, [r7, #30]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	e010      	b.n	8002a62 <huffext+0x136>
			}
			hdata++;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002a46:	8afb      	ldrh	r3, [r7, #22]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	82fb      	strh	r3, [r7, #22]
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e1      	bne.n	8002a16 <huffext+0xea>
		}
		bl--;
 8002a52:	8b3b      	ldrh	r3, [r7, #24]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8002a58:	8b3b      	ldrh	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d181      	bne.n	8002962 <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 8002a5e:	f06f 0305 	mvn.w	r3, #5
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b095      	sub	sp, #84	; 0x54
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 8002a76:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8002a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a7c:	f241 1351 	movw	r3, #4433	; 0x1151
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
 8002a82:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
 8002a88:	f641 5390 	movw	r3, #7568	; 0x1d90
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a94:	e0b8      	b.n	8002c08 <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 8002ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	4413      	add	r3, r2
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	131b      	asrs	r3, r3, #12
 8002ad0:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	4413      	add	r3, r2
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	4413      	add	r3, r2
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b08:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b16:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1c:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002b3e:	6a3a      	ldr	r2, [r7, #32]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	131b      	asrs	r3, r3, #12
 8002b4c:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	4413      	add	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	4413      	add	r3, r2
 8002b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	131b      	asrs	r3, r3, #12
 8002b64:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	131b      	asrs	r3, r3, #12
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	131b      	asrs	r3, r3, #12
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	1ad2      	subs	r2, r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8002b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	33e0      	adds	r3, #224	; 0xe0
 8002ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	1a8a      	subs	r2, r1, r2
 8002bae:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3320      	adds	r3, #32
 8002bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	440a      	add	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	33c0      	adds	r3, #192	; 0xc0
 8002bc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	1a8a      	subs	r2, r1, r2
 8002bc6:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3340      	adds	r3, #64	; 0x40
 8002bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	33a0      	adds	r3, #160	; 0xa0
 8002bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	1a8a      	subs	r2, r1, r2
 8002bde:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	440a      	add	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3380      	adds	r3, #128	; 0x80
 8002bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	1a8a      	subs	r2, r1, r2
 8002bf6:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c02:	3301      	adds	r3, #1
 8002c04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	f67f af42 	bls.w	8002a96 <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3b20      	subs	r3, #32
 8002c16:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c1e:	e0e9      	b.n	8002df4 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 8002c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	4413      	add	r3, r2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	131b      	asrs	r3, r3, #12
 8002c5a:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c60:	4413      	add	r3, r2
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	4413      	add	r3, r2
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	4413      	add	r3, r2
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	131b      	asrs	r3, r3, #12
 8002cd2:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	4413      	add	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	4413      	add	r3, r2
 8002ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	131b      	asrs	r3, r3, #12
 8002cea:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	131b      	asrs	r3, r3, #12
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	131b      	asrs	r3, r3, #12
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	1ad2      	subs	r2, r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 8002d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	121b      	asrs	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2e:	4a37      	ldr	r2, [pc, #220]	; (8002e0c <block_idct+0x3a0>)
 8002d30:	5cd2      	ldrb	r2, [r2, r3]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8002d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	121b      	asrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3307      	adds	r3, #7
 8002d48:	4930      	ldr	r1, [pc, #192]	; (8002e0c <block_idct+0x3a0>)
 8002d4a:	5c8a      	ldrb	r2, [r1, r2]
 8002d4c:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	121b      	asrs	r3, r3, #8
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	492a      	ldr	r1, [pc, #168]	; (8002e0c <block_idct+0x3a0>)
 8002d62:	5c8a      	ldrb	r2, [r1, r2]
 8002d64:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 8002d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	121b      	asrs	r3, r3, #8
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3306      	adds	r3, #6
 8002d78:	4924      	ldr	r1, [pc, #144]	; (8002e0c <block_idct+0x3a0>)
 8002d7a:	5c8a      	ldrb	r2, [r1, r2]
 8002d7c:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	121b      	asrs	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3302      	adds	r3, #2
 8002d90:	491e      	ldr	r1, [pc, #120]	; (8002e0c <block_idct+0x3a0>)
 8002d92:	5c8a      	ldrb	r2, [r1, r2]
 8002d94:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 8002d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	121b      	asrs	r3, r3, #8
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3305      	adds	r3, #5
 8002da8:	4918      	ldr	r1, [pc, #96]	; (8002e0c <block_idct+0x3a0>)
 8002daa:	5c8a      	ldrb	r2, [r1, r2]
 8002dac:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 8002dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	121b      	asrs	r3, r3, #8
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <block_idct+0x3a0>)
 8002dc2:	5c8a      	ldrb	r2, [r1, r2]
 8002dc4:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 8002dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	121b      	asrs	r3, r3, #8
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <block_idct+0x3a0>)
 8002dda:	5c8a      	ldrb	r2, [r1, r2]
 8002ddc:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	3308      	adds	r3, #8
 8002de2:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3320      	adds	r3, #32
 8002de8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	3301      	adds	r3, #1
 8002df0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	f67f af11 	bls.w	8002c20 <block_idct+0x1b4>
	}
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	3754      	adds	r7, #84	; 0x54
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	08017874 	.word	0x08017874

08002e10 <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	; 0x40
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7b9b      	ldrb	r3, [r3, #14]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7bdb      	ldrb	r3, [r3, #15]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	fb12 f303 	smulbb	r3, r2, r3
 8002e2e:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 8002e30:	2302      	movs	r3, #2
 8002e32:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e3e:	e11b      	b.n	8003078 <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 8002e40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d306      	bcc.n	8002e56 <mcu_load+0x46>
 8002e48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	e000      	b.n	8002e58 <mcu_load+0x48>
 8002e56:	2300      	movs	r3, #0
 8002e58:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8002e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8002e68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3204      	adds	r2, #4
 8002e6e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002e72:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8002e74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3206      	adds	r2, #6
 8002e7a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002e7e:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 8002e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002e8a:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fd4a 	bl	800292c <huffext>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da04      	bge.n	8002eac <mcu_load+0x9c>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e0ed      	b.n	8003088 <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8002eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02a      	beq.n	8002f18 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fcbe 	bl	8002846 <bitext>
 8002eca:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da04      	bge.n	8002edc <mcu_load+0xcc>
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e0d5      	b.n	8003088 <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 8002ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <mcu_load+0xee>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 8002efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	4413      	add	r3, r2
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 8002f06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f0a:	b211      	sxth	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	460a      	mov	r2, r1
 8002f16:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 8002f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	7c1b      	ldrb	r3, [r3, #16]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3214      	adds	r2, #20
 8002f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2a:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	121a      	asrs	r2, r3, #8
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f40:	e007      	b.n	8002f52 <mcu_load+0x142>
 8002f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	86ba      	strh	r2, [r7, #52]	; 0x34
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4c:	4413      	add	r3, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f54:	2b3f      	cmp	r3, #63	; 0x3f
 8002f56:	d9f4      	bls.n	8002f42 <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8002f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 8002f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 8002f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fcd0 	bl	800292c <huffext>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d055      	beq.n	8003042 <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da04      	bge.n	8002fa6 <mcu_load+0x196>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e070      	b.n	8003088 <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	81fb      	strh	r3, [r7, #14]
			if (z) {
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8002fb4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	4413      	add	r3, r2
 8002fba:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8002fbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fbe:	2b3f      	cmp	r3, #63	; 0x3f
 8002fc0:	d901      	bls.n	8002fc6 <mcu_load+0x1b6>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	e060      	b.n	8003088 <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02f      	beq.n	8003034 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fc35 	bl	8002846 <bitext>
 8002fdc:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da04      	bge.n	8002fee <mcu_load+0x1de>
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	425b      	negs	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	e04c      	b.n	8003088 <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 8002ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <mcu_load+0x200>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 8003010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <mcu_load+0x280>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003024:	fb03 f202 	mul.w	r2, r3, r2
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800302e:	440b      	add	r3, r1
 8003030:	1212      	asrs	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 8003034:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003036:	3301      	adds	r3, #1
 8003038:	86bb      	strh	r3, [r7, #52]	; 0x34
 800303a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800303c:	2b3f      	cmp	r3, #63	; 0x3f
 800303e:	d99f      	bls.n	8002f80 <mcu_load+0x170>
 8003040:	e000      	b.n	8003044 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 8003042:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7b5b      	ldrb	r3, [r3, #13]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d10b      	bne.n	8003064 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	da00      	bge.n	8003056 <mcu_load+0x246>
 8003054:	33ff      	adds	r3, #255	; 0xff
 8003056:	121b      	asrs	r3, r3, #8
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3b80      	subs	r3, #128	; 0x80
 800305c:	b2da      	uxtb	r2, r3
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e003      	b.n	800306c <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8003064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003068:	f7ff fd00 	bl	8002a6c <block_idct>
		}

		bp += 64;				/* Next block */
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	3340      	adds	r3, #64	; 0x40
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 8003072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003074:	3301      	adds	r3, #1
 8003076:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003078:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800307a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800307c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800307e:	440b      	add	r3, r1
 8003080:	429a      	cmp	r2, r3
 8003082:	f6ff aedd 	blt.w	8002e40 <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3740      	adds	r7, #64	; 0x40
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	080177b4 	.word	0x080177b4
 8003094:	00000000 	.word	0x00000000

08003098 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b098      	sub	sp, #96	; 0x60
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	460b      	mov	r3, r1
 80030a8:	80fb      	strh	r3, [r7, #6]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	7b9b      	ldrb	r3, [r3, #14]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	863b      	strh	r3, [r7, #48]	; 0x30
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7bdb      	ldrb	r3, [r3, #15]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030ca:	4413      	add	r3, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	8b92      	ldrh	r2, [r2, #28]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	dd05      	ble.n	80030e0 <mcu_output+0x48>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8b9a      	ldrh	r2, [r3, #28]
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	e000      	b.n	80030e2 <mcu_output+0x4a>
 80030e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 80030e4:	88ba      	ldrh	r2, [r7, #4]
 80030e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030e8:	4413      	add	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	8bd2      	ldrh	r2, [r2, #30]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	dd05      	ble.n	80030fe <mcu_output+0x66>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8bda      	ldrh	r2, [r3, #30]
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	e000      	b.n	8003100 <mcu_output+0x68>
 80030fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003100:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 8003102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	7b52      	ldrb	r2, [r2, #13]
 8003108:	4113      	asrs	r3, r2
 800310a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800310c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	7b52      	ldrb	r2, [r2, #13]
 8003112:	4113      	asrs	r3, r2
 8003114:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 8003116:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <mcu_output+0x8a>
 800311c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <mcu_output+0x8e>
 8003122:	2300      	movs	r3, #0
 8003124:	e2f0      	b.n	8003708 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	7b52      	ldrb	r2, [r2, #13]
 800312c:	4113      	asrs	r3, r2
 800312e:	80fb      	strh	r3, [r7, #6]
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	7b52      	ldrb	r2, [r2, #13]
 8003136:	4113      	asrs	r3, r2
 8003138:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	82bb      	strh	r3, [r7, #20]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003142:	4413      	add	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	833b      	strh	r3, [r7, #24]
 8003150:	88ba      	ldrh	r2, [r7, #4]
 8003152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003154:	4413      	add	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	7b5b      	ldrb	r3, [r3, #13]
 8003162:	2b03      	cmp	r3, #3
 8003164:	f000 81a3 	beq.w	80034ae <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316c:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 800316e:	2300      	movs	r3, #0
 8003170:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003174:	e0e3      	b.n	800333e <mcu_output+0x2a6>
			pc = jd->mcubuf;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317a:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 800317c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	461a      	mov	r2, r3
 8003184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003186:	4413      	add	r3, r2
 8003188:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 800318a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800318c:	2b10      	cmp	r3, #16
 800318e:	d111      	bne.n	80031b4 <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8003190:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	3320      	adds	r3, #32
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	461a      	mov	r2, r3
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	4413      	add	r3, r2
 80031a2:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 80031a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031a8:	2b07      	cmp	r3, #7
 80031aa:	d90c      	bls.n	80031c6 <mcu_output+0x12e>
 80031ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ae:	3340      	adds	r3, #64	; 0x40
 80031b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b2:	e008      	b.n	80031c6 <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 80031b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80031b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	461a      	mov	r2, r3
 80031c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c2:	4413      	add	r3, r2
 80031c4:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80031cc:	e0ac      	b.n	8003328 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 80031ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b80      	subs	r3, #128	; 0x80
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	3340      	adds	r3, #64	; 0x40
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b80      	subs	r3, #128	; 0x80
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 80031e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d10e      	bne.n	800320c <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80031ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d102      	bne.n	80031fc <mcu_output+0x164>
 80031f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80031fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003206:	4413      	add	r3, r2
 8003208:	657b      	str	r3, [r7, #84]	; 0x54
 800320a:	e002      	b.n	8003212 <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	3301      	adds	r3, #1
 8003210:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	65ba      	str	r2, [r7, #88]	; 0x58
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 800321c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003228:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8003508 <mcu_output+0x470>
 800322c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003230:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003234:	ee17 3a90 	vmov	r3, s15
 8003238:	b21b      	sxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003240:	fb03 f202 	mul.w	r2, r3, r2
 8003244:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003248:	fb92 f3f3 	sdiv	r3, r2, r3
 800324c:	b29a      	uxth	r2, r3
 800324e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003250:	4413      	add	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	6539      	str	r1, [r7, #80]	; 0x50
 800325e:	49b2      	ldr	r1, [pc, #712]	; (8003528 <mcu_output+0x490>)
 8003260:	5c8a      	ldrb	r2, [r1, r2]
 8003262:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003266:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003272:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003510 <mcu_output+0x478>
 8003276:	ee27 7b06 	vmul.f64	d7, d7, d6
 800327a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	b21b      	sxth	r3, r3
 8003284:	4619      	mov	r1, r3
 8003286:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800328a:	fb03 f101 	mul.w	r1, r3, r1
 800328e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800329a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003518 <mcu_output+0x480>
 800329e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80032a6:	ee17 3a90 	vmov	r3, s15
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	4419      	add	r1, r3
 80032b8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80032bc:	fb91 f3f3 	sdiv	r3, r1, r3
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	6539      	str	r1, [r7, #80]	; 0x50
 80032d0:	4995      	ldr	r1, [pc, #596]	; (8003528 <mcu_output+0x490>)
 80032d2:	5c8a      	ldrb	r2, [r1, r2]
 80032d4:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 80032d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032e2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8003520 <mcu_output+0x488>
 80032e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80032ee:	ee17 3a90 	vmov	r3, s15
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80032fa:	fb03 f202 	mul.w	r2, r3, r2
 80032fe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003302:	fb92 f3f3 	sdiv	r3, r2, r3
 8003306:	b29a      	uxth	r2, r3
 8003308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800330a:	4413      	add	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	1c59      	adds	r1, r3, #1
 8003316:	6539      	str	r1, [r7, #80]	; 0x50
 8003318:	4983      	ldr	r1, [pc, #524]	; (8003528 <mcu_output+0x490>)
 800331a:	5c8a      	ldrb	r2, [r1, r2]
 800331c:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 800331e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003322:	3301      	adds	r3, #1
 8003324:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003328:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800332c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800332e:	429a      	cmp	r2, r3
 8003330:	f4ff af4d 	bcc.w	80031ce <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 8003334:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003338:	3301      	adds	r3, #1
 800333a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800333e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003344:	429a      	cmp	r2, r3
 8003346:	f4ff af16 	bcc.w	8003176 <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	7b5b      	ldrb	r3, [r3, #13]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8189 	beq.w	8003666 <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	7b5b      	ldrb	r3, [r3, #13]
 8003358:	b29b      	uxth	r3, r3
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	7b5b      	ldrb	r3, [r3, #13]
 8003362:	461a      	mov	r2, r3
 8003364:	2301      	movs	r3, #1
 8003366:	4093      	lsls	r3, r2
 8003368:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 800336a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800336c:	8c3b      	ldrh	r3, [r7, #32]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	0052      	lsls	r2, r2, #1
 8003376:	4413      	add	r3, r2
 8003378:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8003380:	2300      	movs	r3, #0
 8003382:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003386:	e08b      	b.n	80034a0 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8003388:	2300      	movs	r3, #0
 800338a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800338e:	e07b      	b.n	8003488 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003394:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003398:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033a2:	441a      	add	r2, r3
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80033ca:	e034      	b.n	8003436 <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033d2:	e022      	b.n	800341a <mcu_output+0x382>
							r += *rgb24++;
 80033d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	653a      	str	r2, [r7, #80]	; 0x50
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033e2:	4413      	add	r3, r2
 80033e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 80033e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	653a      	str	r2, [r7, #80]	; 0x50
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033f6:	4413      	add	r3, r2
 80033f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 80033fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	653a      	str	r2, [r7, #80]	; 0x50
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b29a      	uxth	r2, r3
 8003406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800340a:	4413      	add	r3, r2
 800340c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 8003410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003414:	3301      	adds	r3, #1
 8003416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800341a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800341e:	8c3b      	ldrh	r3, [r7, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d3d7      	bcc.n	80033d4 <mcu_output+0x33c>
						}
						rgb24 += a;
 8003424:	8bfb      	ldrh	r3, [r7, #30]
 8003426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003428:	4413      	add	r3, r2
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 800342c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003430:	3301      	adds	r3, #1
 8003432:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003436:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800343a:	8c3b      	ldrh	r3, [r7, #32]
 800343c:	429a      	cmp	r2, r3
 800343e:	d3c5      	bcc.n	80033cc <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 8003440:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8003444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003446:	fa42 f103 	asr.w	r1, r2, r3
 800344a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	643a      	str	r2, [r7, #64]	; 0x40
 8003450:	b2ca      	uxtb	r2, r1
 8003452:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 8003454:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800345a:	fa42 f103 	asr.w	r1, r2, r3
 800345e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	643a      	str	r2, [r7, #64]	; 0x40
 8003464:	b2ca      	uxtb	r2, r1
 8003466:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 8003468:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800346c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800346e:	fa42 f103 	asr.w	r1, r2, r3
 8003472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	643a      	str	r2, [r7, #64]	; 0x40
 8003478:	b2ca      	uxtb	r2, r1
 800347a:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 800347c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003480:	8c3b      	ldrh	r3, [r7, #32]
 8003482:	4413      	add	r3, r2
 8003484:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003488:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800348c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800348e:	429a      	cmp	r2, r3
 8003490:	f4ff af7e 	bcc.w	8003390 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 8003494:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003498:	8c3b      	ldrh	r3, [r7, #32]
 800349a:	4413      	add	r3, r2
 800349c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80034a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80034a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034a6:	429a      	cmp	r2, r3
 80034a8:	f4ff af6e 	bcc.w	8003388 <mcu_output+0x2f0>
 80034ac:	e0db      	b.n	8003666 <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80034ba:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80034bc:	fb01 f202 	mul.w	r2, r1, r2
 80034c0:	4413      	add	r3, r2
 80034c2:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b80      	subs	r3, #128	; 0x80
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	3340      	adds	r3, #64	; 0x40
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b80      	subs	r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 80034de:	2300      	movs	r3, #0
 80034e0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80034e4:	e0b9      	b.n	800365a <mcu_output+0x5c2>
			py = jd->mcubuf;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ea:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 80034ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d102      	bne.n	80034fa <mcu_output+0x462>
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	3380      	adds	r3, #128	; 0x80
 80034f8:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003500:	e0a0      	b.n	8003644 <mcu_output+0x5ac>
 8003502:	bf00      	nop
 8003504:	f3af 8000 	nop.w
 8003508:	8d4fdf3b 	.word	0x8d4fdf3b
 800350c:	3ff66e97 	.word	0x3ff66e97
 8003510:	9374bc6a 	.word	0x9374bc6a
 8003514:	3fd60418 	.word	0x3fd60418
 8003518:	872b020c 	.word	0x872b020c
 800351c:	3fe6d916 	.word	0x3fe6d916
 8003520:	ac083127 	.word	0xac083127
 8003524:	3ffc5a1c 	.word	0x3ffc5a1c
 8003528:	08017874 	.word	0x08017874
				yy = *py;	/* Get Y component */
 800352c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 8003532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003534:	3340      	adds	r3, #64	; 0x40
 8003536:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 8003538:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003544:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003710 <mcu_output+0x678>
 8003548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800354c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003550:	ee17 3a90 	vmov	r3, s15
 8003554:	b21b      	sxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800355c:	fb03 f202 	mul.w	r2, r3, r2
 8003560:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003564:	fb92 f3f3 	sdiv	r3, r2, r3
 8003568:	b29a      	uxth	r2, r3
 800356a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	6539      	str	r1, [r7, #80]	; 0x50
 800357a:	496d      	ldr	r1, [pc, #436]	; (8003730 <mcu_output+0x698>)
 800357c:	5c8a      	ldrb	r2, [r1, r2]
 800357e:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003582:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800358e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003718 <mcu_output+0x680>
 8003592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003596:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800359a:	ee17 3a90 	vmov	r3, s15
 800359e:	b21b      	sxth	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80035a6:	fb03 f101 	mul.w	r1, r3, r1
 80035aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035b6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003720 <mcu_output+0x688>
 80035ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035c2:	ee17 3a90 	vmov	r3, s15
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	4419      	add	r1, r3
 80035d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80035d8:	fb91 f3f3 	sdiv	r3, r1, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	1c59      	adds	r1, r3, #1
 80035ea:	6539      	str	r1, [r7, #80]	; 0x50
 80035ec:	4950      	ldr	r1, [pc, #320]	; (8003730 <mcu_output+0x698>)
 80035ee:	5c8a      	ldrb	r2, [r1, r2]
 80035f0:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 80035f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80035fe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003728 <mcu_output+0x690>
 8003602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003606:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800360a:	ee17 3a90 	vmov	r3, s15
 800360e:	b21b      	sxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003616:	fb03 f202 	mul.w	r2, r3, r2
 800361a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800361e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003622:	b29a      	uxth	r2, r3
 8003624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003626:	4413      	add	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	6539      	str	r1, [r7, #80]	; 0x50
 8003634:	493e      	ldr	r1, [pc, #248]	; (8003730 <mcu_output+0x698>)
 8003636:	5c8a      	ldrb	r2, [r1, r2]
 8003638:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 800363a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800363e:	3308      	adds	r3, #8
 8003640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003644:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003648:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800364a:	429a      	cmp	r2, r3
 800364c:	f4ff af6e 	bcc.w	800352c <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003650:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003654:	3308      	adds	r3, #8
 8003656:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800365a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800365e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003660:	429a      	cmp	r2, r3
 8003662:	f4ff af40 	bcc.w	80034e6 <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 8003666:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	7b52      	ldrb	r2, [r2, #13]
 800366c:	4113      	asrs	r3, r2
 800366e:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003670:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003672:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003674:	429a      	cmp	r2, r3
 8003676:	d23a      	bcs.n	80036ee <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003682:	2300      	movs	r3, #0
 8003684:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003686:	e02e      	b.n	80036e6 <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003688:	2300      	movs	r3, #0
 800368a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800368c:	e01a      	b.n	80036c4 <mcu_output+0x62c>
				*d++ = *s++;
 800368e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003690:	1c53      	adds	r3, r2, #1
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	63b9      	str	r1, [r7, #56]	; 0x38
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 800369e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a0:	1c53      	adds	r3, r2, #1
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 80036ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b0:	1c53      	adds	r3, r2, #1
 80036b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	63b9      	str	r1, [r7, #56]	; 0x38
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 80036be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036c0:	3301      	adds	r3, #1
 80036c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3e0      	bcc.n	800368e <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 80036cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80036ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	4413      	add	r3, r2
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 80036e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80036e2:	3301      	adds	r3, #1
 80036e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d3cc      	bcc.n	8003688 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80036f2:	f107 0214 	add.w	r2, r7, #20
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	4798      	blx	r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	3760      	adds	r7, #96	; 0x60
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	8d4fdf3b 	.word	0x8d4fdf3b
 8003714:	3ff66e97 	.word	0x3ff66e97
 8003718:	9374bc6a 	.word	0x9374bc6a
 800371c:	3fd60418 	.word	0x3fd60418
 8003720:	872b020c 	.word	0x872b020c
 8003724:	3fe6d916 	.word	0x3fe6d916
 8003728:	ac083127 	.word	0xac083127
 800372c:	3ffc5a1c 	.word	0x3ffc5a1c
 8003730:	08017874 	.word	0x08017874

08003734 <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	82bb      	strh	r3, [r7, #20]
	d = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003750:	2300      	movs	r3, #0
 8003752:	82fb      	strh	r3, [r7, #22]
 8003754:	e025      	b.n	80037a2 <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 8003756:	8abb      	ldrh	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d110      	bne.n	800377e <restart+0x4a>
			dp = jd->inbuf;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	4603      	mov	r3, r0
 8003772:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 8003774:	8abb      	ldrh	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <restart+0x50>
 800377a:	2302      	movs	r3, #2
 800377c:	e03d      	b.n	80037fa <restart+0xc6>
		} else {
			dp++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 8003784:	8abb      	ldrh	r3, [r7, #20]
 8003786:	3b01      	subs	r3, #1
 8003788:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 800378a:	8a7b      	ldrh	r3, [r7, #18]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	b21a      	sxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b21b      	sxth	r3, r3
 8003796:	4313      	orrs	r3, r2
 8003798:	b21b      	sxth	r3, r3
 800379a:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 800379c:	8afb      	ldrh	r3, [r7, #22]
 800379e:	3301      	adds	r3, #1
 80037a0:	82fb      	strh	r3, [r7, #22]
 80037a2:	8afb      	ldrh	r3, [r7, #22]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9d6      	bls.n	8003756 <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8aba      	ldrh	r2, [r7, #20]
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 80037ba:	8a7a      	ldrh	r2, [r7, #18]
 80037bc:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 80037c0:	4013      	ands	r3, r2
 80037c2:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d107      	bne.n	80037da <restart+0xa6>
 80037ca:	8a7a      	ldrh	r2, [r7, #18]
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	4053      	eors	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 80037da:	2306      	movs	r3, #6
 80037dc:	e00d      	b.n	80037fa <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	829a      	strh	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	82da      	strh	r2, [r3, #22]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <jd_prepare+0x18>
 8003818:	2305      	movs	r3, #5
 800381a:	e2a4      	b.n	8003d66 <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	887a      	ldrh	r2, [r7, #2]
 8003826:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 800383c:	2300      	movs	r3, #0
 800383e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003840:	e026      	b.n	8003890 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 8003842:	2300      	movs	r3, #0
 8003844:	843b      	strh	r3, [r7, #32]
 8003846:	e01d      	b.n	8003884 <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003848:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800384a:	8c3a      	ldrh	r2, [r7, #32]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	0049      	lsls	r1, r1, #1
 8003850:	440a      	add	r2, r1
 8003852:	3208      	adds	r2, #8
 8003854:	2100      	movs	r1, #0
 8003856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 800385a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800385c:	8c3a      	ldrh	r2, [r7, #32]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0049      	lsls	r1, r1, #1
 8003862:	440a      	add	r2, r1
 8003864:	320c      	adds	r2, #12
 8003866:	2100      	movs	r1, #0
 8003868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 800386c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800386e:	8c3a      	ldrh	r2, [r7, #32]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	0049      	lsls	r1, r1, #1
 8003874:	440a      	add	r2, r1
 8003876:	3210      	adds	r2, #16
 8003878:	2100      	movs	r1, #0
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 800387e:	8c3b      	ldrh	r3, [r7, #32]
 8003880:	3301      	adds	r3, #1
 8003882:	843b      	strh	r3, [r7, #32]
 8003884:	8c3b      	ldrh	r3, [r7, #32]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d9de      	bls.n	8003848 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 800388a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800388c:	3301      	adds	r3, #1
 800388e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003892:	2b01      	cmp	r3, #1
 8003894:	d9d5      	bls.n	8003842 <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 8003896:	2300      	movs	r3, #0
 8003898:	847b      	strh	r3, [r7, #34]	; 0x22
 800389a:	e008      	b.n	80038ae <jd_prepare+0xaa>
 800389c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	847a      	strh	r2, [r7, #34]	; 0x22
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3214      	adds	r2, #20
 80038a8:	2100      	movs	r1, #0
 80038aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80038ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d9f3      	bls.n	800389c <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 80038b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7fe fe66 	bl	800258a <alloc_pool>
 80038be:	61b8      	str	r0, [r7, #24]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <jd_prepare+0xcc>
 80038cc:	2303      	movs	r3, #3
 80038ce:	e24a      	b.n	8003d66 <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	2202      	movs	r2, #2
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	4798      	blx	r3
 80038dc:	4603      	mov	r3, r0
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d001      	beq.n	80038e6 <jd_prepare+0xe2>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e23f      	b.n	8003d66 <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3301      	adds	r3, #1
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	f113 0f28 	cmn.w	r3, #40	; 0x28
 80038fe:	d001      	beq.n	8003904 <jd_prepare+0x100>
 8003900:	2306      	movs	r3, #6
 8003902:	e230      	b.n	8003d66 <jd_prepare+0x562>
	ofs = 2;
 8003904:	2302      	movs	r3, #2
 8003906:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	2204      	movs	r2, #4
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	4798      	blx	r3
 8003914:	4603      	mov	r3, r0
 8003916:	2b04      	cmp	r3, #4
 8003918:	d001      	beq.n	800391e <jd_prepare+0x11a>
 800391a:	2302      	movs	r3, #2
 800391c:	e223      	b.n	8003d66 <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b21a      	sxth	r2, r3
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3301      	adds	r3, #1
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b21b      	sxth	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	b21b      	sxth	r3, r3
 8003932:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	3302      	adds	r3, #2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b21a      	sxth	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3303      	adds	r3, #3
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b21b      	sxth	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b21b      	sxth	r3, r3
 800394a:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 800394c:	8bfb      	ldrh	r3, [r7, #30]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d904      	bls.n	800395c <jd_prepare+0x158>
 8003952:	8afb      	ldrh	r3, [r7, #22]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	b29b      	uxth	r3, r3
 8003958:	2bff      	cmp	r3, #255	; 0xff
 800395a:	d001      	beq.n	8003960 <jd_prepare+0x15c>
 800395c:	2306      	movs	r3, #6
 800395e:	e202      	b.n	8003d66 <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003960:	8bfb      	ldrh	r3, [r7, #30]
 8003962:	3b02      	subs	r3, #2
 8003964:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003966:	8bfa      	ldrh	r2, [r7, #30]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3bc0      	subs	r3, #192	; 0xc0
 8003976:	2b1d      	cmp	r3, #29
 8003978:	f200 81e3 	bhi.w	8003d42 <jd_prepare+0x53e>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <jd_prepare+0x180>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039fd 	.word	0x080039fd
 8003988:	08003d3f 	.word	0x08003d3f
 800398c:	08003d3f 	.word	0x08003d3f
 8003990:	08003d3f 	.word	0x08003d3f
 8003994:	08003b39 	.word	0x08003b39
 8003998:	08003d3f 	.word	0x08003d3f
 800399c:	08003d3f 	.word	0x08003d3f
 80039a0:	08003d3f 	.word	0x08003d3f
 80039a4:	08003d43 	.word	0x08003d43
 80039a8:	08003d3f 	.word	0x08003d3f
 80039ac:	08003d3f 	.word	0x08003d3f
 80039b0:	08003d3f 	.word	0x08003d3f
 80039b4:	08003d43 	.word	0x08003d43
 80039b8:	08003d3f 	.word	0x08003d3f
 80039bc:	08003d3f 	.word	0x08003d3f
 80039c0:	08003d3f 	.word	0x08003d3f
 80039c4:	08003d43 	.word	0x08003d43
 80039c8:	08003d43 	.word	0x08003d43
 80039cc:	08003d43 	.word	0x08003d43
 80039d0:	08003d43 	.word	0x08003d43
 80039d4:	08003d43 	.word	0x08003d43
 80039d8:	08003d43 	.word	0x08003d43
 80039dc:	08003d43 	.word	0x08003d43
 80039e0:	08003d43 	.word	0x08003d43
 80039e4:	08003d43 	.word	0x08003d43
 80039e8:	08003d3f 	.word	0x08003d3f
 80039ec:	08003bbd 	.word	0x08003bbd
 80039f0:	08003b7b 	.word	0x08003b7b
 80039f4:	08003d43 	.word	0x08003d43
 80039f8:	08003af7 	.word	0x08003af7
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80039fc:	8bfb      	ldrh	r3, [r7, #30]
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d901      	bls.n	8003a08 <jd_prepare+0x204>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e1ae      	b.n	8003d66 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	8bfa      	ldrh	r2, [r7, #30]
 8003a0e:	69b9      	ldr	r1, [r7, #24]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	4798      	blx	r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	8bfb      	ldrh	r3, [r7, #30]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d001      	beq.n	8003a22 <jd_prepare+0x21e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e1a1      	b.n	8003d66 <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3303      	adds	r3, #3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	b21a      	sxth	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3301      	adds	r3, #1
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	b21a      	sxth	r2, r3
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	3305      	adds	r3, #5
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d001      	beq.n	8003a68 <jd_prepare+0x264>
 8003a64:	2308      	movs	r3, #8
 8003a66:	e17e      	b.n	8003d66 <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8003a68:	2300      	movs	r3, #0
 8003a6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a6c:	e03f      	b.n	8003aee <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8003a6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	3307      	adds	r3, #7
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 8003a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d116      	bne.n	8003ab6 <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8003a88:	7c7b      	ldrb	r3, [r7, #17]
 8003a8a:	2b11      	cmp	r3, #17
 8003a8c:	d007      	beq.n	8003a9e <jd_prepare+0x29a>
 8003a8e:	7c7b      	ldrb	r3, [r7, #17]
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	d004      	beq.n	8003a9e <jd_prepare+0x29a>
 8003a94:	7c7b      	ldrb	r3, [r7, #17]
 8003a96:	2b21      	cmp	r3, #33	; 0x21
 8003a98:	d001      	beq.n	8003a9e <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	e163      	b.n	8003d66 <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8003a9e:	7c7b      	ldrb	r3, [r7, #17]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	739a      	strb	r2, [r3, #14]
 8003aa8:	7c7b      	ldrb	r3, [r7, #17]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	73da      	strb	r2, [r3, #15]
 8003ab4:	e004      	b.n	8003ac0 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 8003ab6:	7c7b      	ldrb	r3, [r7, #17]
 8003ab8:	2b11      	cmp	r3, #17
 8003aba:	d001      	beq.n	8003ac0 <jd_prepare+0x2bc>
 8003abc:	2308      	movs	r3, #8
 8003abe:	e152      	b.n	8003d66 <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8003ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3308      	adds	r3, #8
 8003aca:	461a      	mov	r2, r3
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 8003ad4:	7c7b      	ldrb	r3, [r7, #17]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d901      	bls.n	8003ade <jd_prepare+0x2da>
 8003ada:	2308      	movs	r3, #8
 8003adc:	e143      	b.n	8003d66 <jd_prepare+0x562>
				jd->qtid[i] = b;
 8003ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	7c7a      	ldrb	r2, [r7, #17]
 8003ae6:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 8003ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003aea:	3301      	adds	r3, #1
 8003aec:	847b      	strh	r3, [r7, #34]	; 0x22
 8003aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d9bc      	bls.n	8003a6e <jd_prepare+0x26a>
			}
			break;
 8003af4:	e136      	b.n	8003d64 <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003af6:	8bfb      	ldrh	r3, [r7, #30]
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d901      	bls.n	8003b02 <jd_prepare+0x2fe>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e131      	b.n	8003d66 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	8bfa      	ldrh	r2, [r7, #30]
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	4798      	blx	r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	8bfb      	ldrh	r3, [r7, #30]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d001      	beq.n	8003b1c <jd_prepare+0x318>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e124      	b.n	8003d66 <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	b21a      	sxth	r2, r3
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3301      	adds	r3, #1
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	835a      	strh	r2, [r3, #26]
			break;
 8003b36:	e115      	b.n	8003d64 <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003b38:	8bfb      	ldrh	r3, [r7, #30]
 8003b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3e:	d901      	bls.n	8003b44 <jd_prepare+0x340>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e110      	b.n	8003d66 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	8bfa      	ldrh	r2, [r7, #30]
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	4798      	blx	r3
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	8bfb      	ldrh	r3, [r7, #30]
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d001      	beq.n	8003b5e <jd_prepare+0x35a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e103      	b.n	8003d66 <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8003b5e:	8bfb      	ldrh	r3, [r7, #30]
 8003b60:	461a      	mov	r2, r3
 8003b62:	69b9      	ldr	r1, [r7, #24]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7fe fd99 	bl	800269c <create_huffman_tbl>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003b6e:	7d7b      	ldrb	r3, [r7, #21]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80f4 	beq.w	8003d5e <jd_prepare+0x55a>
 8003b76:	7d7b      	ldrb	r3, [r7, #21]
 8003b78:	e0f5      	b.n	8003d66 <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003b7a:	8bfb      	ldrh	r3, [r7, #30]
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d901      	bls.n	8003b86 <jd_prepare+0x382>
 8003b82:	2304      	movs	r3, #4
 8003b84:	e0ef      	b.n	8003d66 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	8bfa      	ldrh	r2, [r7, #30]
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	4798      	blx	r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	8bfb      	ldrh	r3, [r7, #30]
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d001      	beq.n	8003ba0 <jd_prepare+0x39c>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0e2      	b.n	8003d66 <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8003ba0:	8bfb      	ldrh	r3, [r7, #30]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7fe fd1c 	bl	80025e4 <create_qt_tbl>
 8003bac:	4603      	mov	r3, r0
 8003bae:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003bb0:	7d7b      	ldrb	r3, [r7, #21]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80d5 	beq.w	8003d62 <jd_prepare+0x55e>
 8003bb8:	7d7b      	ldrb	r3, [r7, #21]
 8003bba:	e0d4      	b.n	8003d66 <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003bbc:	8bfb      	ldrh	r3, [r7, #30]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc2:	d901      	bls.n	8003bc8 <jd_prepare+0x3c4>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e0ce      	b.n	8003d66 <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	8bfa      	ldrh	r2, [r7, #30]
 8003bce:	69b9      	ldr	r1, [r7, #24]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d001      	beq.n	8003be2 <jd_prepare+0x3de>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0c1      	b.n	8003d66 <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8b9b      	ldrh	r3, [r3, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <jd_prepare+0x3ee>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8bdb      	ldrh	r3, [r3, #30]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <jd_prepare+0x3f2>
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	e0b7      	b.n	8003d66 <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d001      	beq.n	8003c02 <jd_prepare+0x3fe>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	e0b1      	b.n	8003d66 <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c06:	e036      	b.n	8003c76 <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8003c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	461a      	mov	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 8003c18:	7c7b      	ldrb	r3, [r7, #17]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <jd_prepare+0x424>
 8003c1e:	7c7b      	ldrb	r3, [r7, #17]
 8003c20:	2b11      	cmp	r3, #17
 8003c22:	d001      	beq.n	8003c28 <jd_prepare+0x424>
 8003c24:	2308      	movs	r3, #8
 8003c26:	e09e      	b.n	8003d66 <jd_prepare+0x562>
				b = i ? 1 : 0;
 8003c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 8003c36:	7c7a      	ldrb	r2, [r7, #17]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3204      	adds	r2, #4
 8003c3c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <jd_prepare+0x44e>
 8003c44:	7c7b      	ldrb	r3, [r7, #17]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 8003c52:	2306      	movs	r3, #6
 8003c54:	e087      	b.n	8003d66 <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 8003c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	7c1b      	ldrb	r3, [r3, #16]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3214      	adds	r2, #20
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	e07a      	b.n	8003d66 <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8003c70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c72:	3301      	adds	r3, #1
 8003c74:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d9c5      	bls.n	8003c08 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	7bdb      	ldrb	r3, [r3, #15]
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	7b9b      	ldrb	r3, [r3, #14]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	fb12 f303 	smulbb	r3, r2, r3
 8003c8c:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8003c8e:	8a7b      	ldrh	r3, [r7, #18]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <jd_prepare+0x494>
 8003c94:	2306      	movs	r3, #6
 8003c96:	e066      	b.n	8003d66 <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8003c98:	8a7b      	ldrh	r3, [r7, #18]
 8003c9a:	01db      	lsls	r3, r3, #7
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3340      	adds	r3, #64	; 0x40
 8003ca0:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 8003ca2:	8bfb      	ldrh	r3, [r7, #30]
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	d802      	bhi.n	8003cae <jd_prepare+0x4aa>
 8003ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cac:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8003cae:	8bfb      	ldrh	r3, [r7, #30]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7fe fc69 	bl	800258a <alloc_pool>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <jd_prepare+0x4c6>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04d      	b.n	8003d66 <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 8003cca:	8a7b      	ldrh	r3, [r7, #18]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7fe fc57 	bl	800258a <alloc_pool>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <jd_prepare+0x4ea>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e03b      	b.n	8003d66 <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	4411      	add	r1, r2
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8003d20:	b292      	uxth	r2, r2
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	4798      	blx	r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	3b01      	subs	r3, #1
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	441a      	add	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e013      	b.n	8003d66 <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8003d3e:	2308      	movs	r3, #8
 8003d40:	e011      	b.n	8003d66 <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	8bfa      	ldrh	r2, [r7, #30]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	4798      	blx	r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	8bfb      	ldrh	r3, [r7, #30]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f43f add7 	beq.w	8003908 <jd_prepare+0x104>
				return JDR_INP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e003      	b.n	8003d66 <jd_prepare+0x562>
			break;
 8003d5e:	bf00      	nop
 8003d60:	e5d2      	b.n	8003908 <jd_prepare+0x104>
			break;
 8003d62:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003d64:	e5d0      	b.n	8003908 <jd_prepare+0x104>
			}
		}
	}
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3728      	adds	r7, #40	; 0x28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d901      	bls.n	8003d88 <jd_decomp+0x18>
 8003d84:	2305      	movs	r3, #5
 8003d86:	e06a      	b.n	8003e5e <jd_decomp+0xee>
	jd->scale = scale;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	79fa      	ldrb	r2, [r7, #7]
 8003d8c:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	7b9b      	ldrb	r3, [r3, #14]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	82bb      	strh	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	7bdb      	ldrb	r3, [r3, #15]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	829a      	strh	r2, [r3, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	82da      	strh	r2, [r3, #22]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	833b      	strh	r3, [r7, #24]
 8003dc0:	8b3b      	ldrh	r3, [r7, #24]
 8003dc2:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	83bb      	strh	r3, [r7, #28]
 8003dcc:	e041      	b.n	8003e52 <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003dce:	2300      	movs	r3, #0
 8003dd0:	83fb      	strh	r3, [r7, #30]
 8003dd2:	e035      	b.n	8003e40 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8b5b      	ldrh	r3, [r3, #26]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <jd_decomp+0x9a>
 8003ddc:	8b7b      	ldrh	r3, [r7, #26]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	837a      	strh	r2, [r7, #26]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	8b52      	ldrh	r2, [r2, #26]
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10f      	bne.n	8003e0a <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 8003dea:	8b3b      	ldrh	r3, [r7, #24]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	833a      	strh	r2, [r7, #24]
 8003df0:	4619      	mov	r1, r3
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fc9e 	bl	8003734 <restart>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <jd_decomp+0x96>
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	e02b      	b.n	8003e5e <jd_decomp+0xee>
				rst = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff f800 	bl	8002e10 <mcu_load>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <jd_decomp+0xae>
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	e01f      	b.n	8003e5e <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 8003e1e:	8bbb      	ldrh	r3, [r7, #28]
 8003e20:	8bfa      	ldrh	r2, [r7, #30]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff f937 	bl	8003098 <mcu_output>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <jd_decomp+0xc8>
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	e012      	b.n	8003e5e <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003e38:	8bfa      	ldrh	r2, [r7, #30]
 8003e3a:	8abb      	ldrh	r3, [r7, #20]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	83fb      	strh	r3, [r7, #30]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8b9b      	ldrh	r3, [r3, #28]
 8003e44:	8bfa      	ldrh	r2, [r7, #30]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d3c4      	bcc.n	8003dd4 <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003e4a:	8bba      	ldrh	r2, [r7, #28]
 8003e4c:	8a7b      	ldrh	r3, [r7, #18]
 8003e4e:	4413      	add	r3, r2
 8003e50:	83bb      	strh	r3, [r7, #28]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8bdb      	ldrh	r3, [r3, #30]
 8003e56:	8bba      	ldrh	r2, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3b8      	bcc.n	8003dce <jd_decomp+0x5e>
		}
	}

	return rc;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f000 f94c 	bl	8004108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e70:	2000      	movs	r0, #0
 8003e72:	f000 f805 	bl	8003e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e76:	f7fd ff0d 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_InitTick+0x54>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_InitTick+0x58>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f967 	bl	8004172 <HAL_SYSTICK_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00e      	b.n	8003ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b0f      	cmp	r3, #15
 8003eb2:	d80a      	bhi.n	8003eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f000 f92f 	bl	800411e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ec0:	4a06      	ldr	r2, [pc, #24]	; (8003edc <HAL_InitTick+0x5c>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000008 	.word	0x20000008
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_IncTick+0x20>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_IncTick+0x24>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_IncTick+0x24>)
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000008 	.word	0x20000008
 8003f04:	20001584 	.word	0x20001584

08003f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_GetTick+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20001584 	.word	0x20001584

08003f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f28:	f7ff ffee 	bl	8003f08 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d005      	beq.n	8003f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_Delay+0x44>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f46:	bf00      	nop
 8003f48:	f7ff ffde 	bl	8003f08 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d8f7      	bhi.n	8003f48 <HAL_Delay+0x28>
  {
  }
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000008 	.word	0x20000008

08003f68 <__NVIC_SetPriorityGrouping>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	60d3      	str	r3, [r2, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	05fa0000 	.word	0x05fa0000

08003fb0 <__NVIC_GetPriorityGrouping>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 0307 	and.w	r3, r3, #7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_EnableIRQ>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db0b      	blt.n	8003ff6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4907      	ldr	r1, [pc, #28]	; (8004004 <__NVIC_EnableIRQ+0x38>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2001      	movs	r0, #1
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_SetPriority>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db0a      	blt.n	8004032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	490c      	ldr	r1, [pc, #48]	; (8004054 <__NVIC_SetPriority+0x4c>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	440b      	add	r3, r1
 800402c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004030:	e00a      	b.n	8004048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4908      	ldr	r1, [pc, #32]	; (8004058 <__NVIC_SetPriority+0x50>)
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3b04      	subs	r3, #4
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	440b      	add	r3, r1
 8004046:	761a      	strb	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <NVIC_EncodePriority>:
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	bf28      	it	cs
 800407a:	2304      	movcs	r3, #4
 800407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3304      	adds	r3, #4
 8004082:	2b06      	cmp	r3, #6
 8004084:	d902      	bls.n	800408c <NVIC_EncodePriority+0x30>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3b03      	subs	r3, #3
 800408a:	e000      	b.n	800408e <NVIC_EncodePriority+0x32>
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43d9      	mvns	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	4313      	orrs	r3, r2
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ff8e 	bl	8004008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff29 	bl	8003f68 <__NVIC_SetPriorityGrouping>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004130:	f7ff ff3e 	bl	8003fb0 <__NVIC_GetPriorityGrouping>
 8004134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	f7ff ff8e 	bl	800405c <NVIC_EncodePriority>
 8004140:	4602      	mov	r2, r0
 8004142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff5d 	bl	8004008 <__NVIC_SetPriority>
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff31 	bl	8003fcc <__NVIC_EnableIRQ>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ffa2 	bl	80040c4 <SysTick_Config>
 8004180:	4603      	mov	r3, r0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e054      	b.n	8004248 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f5b      	ldrb	r3, [r3, #29]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fa76 	bl	80006a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_CRC_Init+0xc4>)
 80041c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0218 	bic.w	r2, r2, #24
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	e00c      	b.n	80041f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6899      	ldr	r1, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f834 	bl	8004254 <HAL_CRCEx_Polynomial_Set>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e028      	b.n	8004248 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	795b      	ldrb	r3, [r3, #5]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	611a      	str	r2, [r3, #16]
 8004208:	e004      	b.n	8004214 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6912      	ldr	r2, [r2, #16]
 8004212:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	04c11db7 	.word	0x04c11db7

08004254 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004264:	231f      	movs	r3, #31
 8004266:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004268:	bf00      	nop
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	613a      	str	r2, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_CRCEx_Polynomial_Set+0x34>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b18      	cmp	r3, #24
 800428c:	d846      	bhi.n	800431c <HAL_CRCEx_Polynomial_Set+0xc8>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	08004323 	.word	0x08004323
 8004298:	0800431d 	.word	0x0800431d
 800429c:	0800431d 	.word	0x0800431d
 80042a0:	0800431d 	.word	0x0800431d
 80042a4:	0800431d 	.word	0x0800431d
 80042a8:	0800431d 	.word	0x0800431d
 80042ac:	0800431d 	.word	0x0800431d
 80042b0:	0800431d 	.word	0x0800431d
 80042b4:	08004311 	.word	0x08004311
 80042b8:	0800431d 	.word	0x0800431d
 80042bc:	0800431d 	.word	0x0800431d
 80042c0:	0800431d 	.word	0x0800431d
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	08004305 	.word	0x08004305
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	0800431d 	.word	0x0800431d
 80042e0:	0800431d 	.word	0x0800431d
 80042e4:	0800431d 	.word	0x0800431d
 80042e8:	0800431d 	.word	0x0800431d
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	080042f9 	.word	0x080042f9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d913      	bls.n	8004326 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004302:	e010      	b.n	8004326 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b07      	cmp	r3, #7
 8004308:	d90f      	bls.n	800432a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800430e:	e00c      	b.n	800432a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0f      	cmp	r3, #15
 8004314:	d90b      	bls.n	800432e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800431a:	e008      	b.n	800432e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	e006      	b.n	8004330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004322:	bf00      	nop
 8004324:	e004      	b.n	8004330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800432e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 0118 	bic.w	r1, r3, #24
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff fdcc 	bl	8003f08 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e099      	b.n	80044b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	e00f      	b.n	80043be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439e:	f7ff fdb3 	bl	8003f08 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d908      	bls.n	80043be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e078      	b.n	80044b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e8      	bne.n	800439e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_DMA_Init+0x158>)
 80043d8:	4013      	ands	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2b04      	cmp	r3, #4
 8004450:	d117      	bne.n	8004482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa7b 	bl	8004960 <DMA_CheckFifoParam>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800447e:	2301      	movs	r3, #1
 8004480:	e016      	b.n	80044b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa32 	bl	80048f4 <DMA_CalcBaseAndBitshift>
 8004490:	4603      	mov	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	223f      	movs	r2, #63	; 0x3f
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e010803f 	.word	0xe010803f

080044bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ca:	f7ff fd1d 	bl	8003f08 <HAL_GetTick>
 80044ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d008      	beq.n	80044ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e052      	b.n	8004594 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0216 	bic.w	r2, r2, #22
 80044fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_DMA_Abort+0x62>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0208 	bic.w	r2, r2, #8
 800452c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800453e:	e013      	b.n	8004568 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004540:	f7ff fce2 	bl	8003f08 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b05      	cmp	r3, #5
 800454c:	d90c      	bls.n	8004568 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2203      	movs	r2, #3
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e015      	b.n	8004594 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e4      	bne.n	8004540 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	223f      	movs	r2, #63	; 0x3f
 800457c:	409a      	lsls	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d004      	beq.n	80045ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00c      	b.n	80045d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2205      	movs	r2, #5
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80045ec:	4b8e      	ldr	r3, [pc, #568]	; (8004828 <HAL_DMA_IRQHandler+0x248>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8e      	ldr	r2, [pc, #568]	; (800482c <HAL_DMA_IRQHandler+0x24c>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	2208      	movs	r2, #8
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01a      	beq.n	800464c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	2208      	movs	r2, #8
 800463a:	409a      	lsls	r2, r3
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	2201      	movs	r2, #1
 8004670:	409a      	lsls	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2204      	movs	r2, #4
 8004688:	409a      	lsls	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	2204      	movs	r2, #4
 80046a6:	409a      	lsls	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	2210      	movs	r2, #16
 80046be:	409a      	lsls	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d043      	beq.n	8004750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d03c      	beq.n	8004750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	2210      	movs	r2, #16
 80046dc:	409a      	lsls	r2, r3
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d018      	beq.n	8004722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d024      	beq.n	8004750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
 800470e:	e01f      	b.n	8004750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
 8004720:	e016      	b.n	8004750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0208 	bic.w	r2, r2, #8
 800473e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	2220      	movs	r2, #32
 8004756:	409a      	lsls	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 808f 	beq.w	8004880 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8087 	beq.w	8004880 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	2220      	movs	r2, #32
 8004778:	409a      	lsls	r2, r3
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b05      	cmp	r3, #5
 8004788:	d136      	bne.n	80047f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0216 	bic.w	r2, r2, #22
 8004798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <HAL_DMA_IRQHandler+0x1da>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0208 	bic.w	r2, r2, #8
 80047c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	223f      	movs	r2, #63	; 0x3f
 80047d0:	409a      	lsls	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d07e      	beq.n	80048ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
        }
        return;
 80047f6:	e079      	b.n	80048ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	2b00      	cmp	r3, #0
 800481a:	d031      	beq.n	8004880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	e02c      	b.n	8004880 <HAL_DMA_IRQHandler+0x2a0>
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000
 800482c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
 8004840:	e01e      	b.n	8004880 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10f      	bne.n	8004870 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0210 	bic.w	r2, r2, #16
 800485e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	d032      	beq.n	80048ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d022      	beq.n	80048da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2205      	movs	r2, #5
 8004898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d307      	bcc.n	80048c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f2      	bne.n	80048ac <HAL_DMA_IRQHandler+0x2cc>
 80048c6:	e000      	b.n	80048ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
 80048ea:	e000      	b.n	80048ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80048ec:	bf00      	nop
    }
  }
}
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	3b10      	subs	r3, #16
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <DMA_CalcBaseAndBitshift+0x60>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <DMA_CalcBaseAndBitshift+0x64>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d908      	bls.n	8004934 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <DMA_CalcBaseAndBitshift+0x68>)
 800492a:	4013      	ands	r3, r2
 800492c:	1d1a      	adds	r2, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	; 0x58
 8004932:	e006      	b.n	8004942 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <DMA_CalcBaseAndBitshift+0x68>)
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	aaaaaaab 	.word	0xaaaaaaab
 8004958:	08017c74 	.word	0x08017c74
 800495c:	fffffc00 	.word	0xfffffc00

08004960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11f      	bne.n	80049ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d856      	bhi.n	8004a2e <DMA_CheckFifoParam+0xce>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <DMA_CheckFifoParam+0x28>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004999 	.word	0x08004999
 800498c:	080049ab 	.word	0x080049ab
 8004990:	08004999 	.word	0x08004999
 8004994:	08004a2f 	.word	0x08004a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d046      	beq.n	8004a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a8:	e043      	b.n	8004a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049b2:	d140      	bne.n	8004a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b8:	e03d      	b.n	8004a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d121      	bne.n	8004a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d837      	bhi.n	8004a3a <DMA_CheckFifoParam+0xda>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <DMA_CheckFifoParam+0x70>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049e7 	.word	0x080049e7
 80049d8:	080049e1 	.word	0x080049e1
 80049dc:	080049f9 	.word	0x080049f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	e030      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d025      	beq.n	8004a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f6:	e022      	b.n	8004a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a00:	d11f      	bne.n	8004a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a06:	e01c      	b.n	8004a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d903      	bls.n	8004a16 <DMA_CheckFifoParam+0xb6>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a14:	e018      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1a:	e015      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2c:	e00b      	b.n	8004a46 <DMA_CheckFifoParam+0xe6>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e00a      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;
 8004a32:	bf00      	nop
 8004a34:	e008      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;
 8004a36:	bf00      	nop
 8004a38:	e006      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e004      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
    }
  } 
  
  return status; 
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e175      	b.n	8004d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	f040 8164 	bne.w	8004d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d005      	beq.n	8004aae <HAL_GPIO_Init+0x56>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d130      	bne.n	8004b10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0201 	and.w	r2, r3, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d017      	beq.n	8004b4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2203      	movs	r2, #3
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d123      	bne.n	8004ba0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	08da      	lsrs	r2, r3, #3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3208      	adds	r2, #8
 8004b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	220f      	movs	r2, #15
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	08da      	lsrs	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3208      	adds	r2, #8
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80be 	beq.w	8004d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bec:	6453      	str	r3, [r2, #68]	; 0x44
 8004bee:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bfa:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_GPIO_Init+0x328>)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	3302      	adds	r3, #2
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	220f      	movs	r2, #15
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_GPIO_Init+0x32c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d037      	beq.n	8004c96 <HAL_GPIO_Init+0x23e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a57      	ldr	r2, [pc, #348]	; (8004d88 <HAL_GPIO_Init+0x330>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <HAL_GPIO_Init+0x23a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <HAL_GPIO_Init+0x334>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02b      	beq.n	8004c8e <HAL_GPIO_Init+0x236>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_GPIO_Init+0x338>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d025      	beq.n	8004c8a <HAL_GPIO_Init+0x232>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a54      	ldr	r2, [pc, #336]	; (8004d94 <HAL_GPIO_Init+0x33c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <HAL_GPIO_Init+0x22e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a53      	ldr	r2, [pc, #332]	; (8004d98 <HAL_GPIO_Init+0x340>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d019      	beq.n	8004c82 <HAL_GPIO_Init+0x22a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a52      	ldr	r2, [pc, #328]	; (8004d9c <HAL_GPIO_Init+0x344>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_GPIO_Init+0x226>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a51      	ldr	r2, [pc, #324]	; (8004da0 <HAL_GPIO_Init+0x348>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00d      	beq.n	8004c7a <HAL_GPIO_Init+0x222>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a50      	ldr	r2, [pc, #320]	; (8004da4 <HAL_GPIO_Init+0x34c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <HAL_GPIO_Init+0x21e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4f      	ldr	r2, [pc, #316]	; (8004da8 <HAL_GPIO_Init+0x350>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_GPIO_Init+0x21a>
 8004c6e:	2309      	movs	r3, #9
 8004c70:	e012      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c72:	230a      	movs	r3, #10
 8004c74:	e010      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c76:	2308      	movs	r3, #8
 8004c78:	e00e      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e00c      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c7e:	2306      	movs	r3, #6
 8004c80:	e00a      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c82:	2305      	movs	r3, #5
 8004c84:	e008      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c86:	2304      	movs	r3, #4
 8004c88:	e006      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e004      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e002      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c96:	2300      	movs	r3, #0
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f002 0203 	and.w	r2, r2, #3
 8004c9e:	0092      	lsls	r2, r2, #2
 8004ca0:	4093      	lsls	r3, r2
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ca8:	4935      	ldr	r1, [pc, #212]	; (8004d80 <HAL_GPIO_Init+0x328>)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	3302      	adds	r3, #2
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cda:	4a34      	ldr	r2, [pc, #208]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d0a:	4b28      	ldr	r3, [pc, #160]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	f67f ae86 	bls.w	8004a78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40013800 	.word	0x40013800
 8004d84:	40020000 	.word	0x40020000
 8004d88:	40020400 	.word	0x40020400
 8004d8c:	40020800 	.word	0x40020800
 8004d90:	40020c00 	.word	0x40020c00
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40021400 	.word	0x40021400
 8004d9c:	40021800 	.word	0x40021800
 8004da0:	40021c00 	.word	0x40021c00
 8004da4:	40022000 	.word	0x40022000
 8004da8:	40022400 	.word	0x40022400
 8004dac:	40013c00 	.word	0x40013c00

08004db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc0:	787b      	ldrb	r3, [r7, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dcc:	e003      	b.n	8004dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	041a      	lsls	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	619a      	str	r2, [r3, #24]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004dec:	f7ff f88c 	bl	8003f08 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e067      	b.n	8004ecc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc fd43 	bl	800189c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004e16:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f85e 	bl	8004edc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	021a      	lsls	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2120      	movs	r1, #32
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f856 	bl	8004ef8 <QSPI_WaitFlagStateUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004e50:	7afb      	ldrb	r3, [r7, #11]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d135      	bne.n	8004ec2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_QSPI_Init+0xf0>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	0611      	lsls	r1, r2, #24
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	69d2      	ldr	r2, [r2, #28]
 8004e70:	4311      	orrs	r1, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6a12      	ldr	r2, [r2, #32]
 8004e76:	4311      	orrs	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_QSPI_Init+0xf4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6912      	ldr	r2, [r2, #16]
 8004e8e:	0411      	lsls	r1, r2, #16
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6952      	ldr	r2, [r2, #20]
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6992      	ldr	r2, [r2, #24]
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004eca:	7afb      	ldrb	r3, [r7, #11]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	00ffff2f 	.word	0x00ffff2f
 8004ed8:	ffe0f8fe 	.word	0xffe0f8fe

08004edc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f08:	e01a      	b.n	8004f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d016      	beq.n	8004f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe fff9 	bl	8003f08 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00e      	b.n	8004f5e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1d6      	bne.n	8004f0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e29b      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8087 	beq.w	800509a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f8c:	4b96      	ldr	r3, [pc, #600]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d00c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f98:	4b93      	ldr	r3, [pc, #588]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d112      	bne.n	8004fca <HAL_RCC_OscConfig+0x62>
 8004fa4:	4b90      	ldr	r3, [pc, #576]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb0:	d10b      	bne.n	8004fca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb2:	4b8d      	ldr	r3, [pc, #564]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d06c      	beq.n	8005098 <HAL_RCC_OscConfig+0x130>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d168      	bne.n	8005098 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e275      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x7a>
 8004fd4:	4b84      	ldr	r3, [pc, #528]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a83      	ldr	r2, [pc, #524]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e02e      	b.n	8005040 <HAL_RCC_OscConfig+0xd8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0x9c>
 8004fea:	4b7f      	ldr	r3, [pc, #508]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7e      	ldr	r2, [pc, #504]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b7c      	ldr	r3, [pc, #496]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7b      	ldr	r2, [pc, #492]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e01d      	b.n	8005040 <HAL_RCC_OscConfig+0xd8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0xc0>
 800500e:	4b76      	ldr	r3, [pc, #472]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a75      	ldr	r2, [pc, #468]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a72      	ldr	r2, [pc, #456]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0xd8>
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6e      	ldr	r2, [pc, #440]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b6c      	ldr	r3, [pc, #432]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6b      	ldr	r2, [pc, #428]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800503a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe ff5e 	bl	8003f08 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005050:	f7fe ff5a 	bl	8003f08 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e229      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b61      	ldr	r3, [pc, #388]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0xe8>
 800506e:	e014      	b.n	800509a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe ff4a 	bl	8003f08 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7fe ff46 	bl	8003f08 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e215      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	4b57      	ldr	r3, [pc, #348]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x110>
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d069      	beq.n	800517a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a6:	4b50      	ldr	r3, [pc, #320]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b2:	4b4d      	ldr	r3, [pc, #308]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d11c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x190>
 80050be:	4b4a      	ldr	r3, [pc, #296]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d116      	bne.n	80050f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	4b47      	ldr	r3, [pc, #284]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x17a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1e9      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	493d      	ldr	r1, [pc, #244]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	e040      	b.n	800517a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d023      	beq.n	8005148 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005100:	4b39      	ldr	r3, [pc, #228]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a38      	ldr	r2, [pc, #224]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fe fefc 	bl	8003f08 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7fe fef8 	bl	8003f08 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1c7      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4929      	ldr	r1, [pc, #164]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
 8005146:	e018      	b.n	800517a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fe fed8 	bl	8003f08 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515c:	f7fe fed4 	bl	8003f08 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1a3      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d038      	beq.n	80051f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fe feb5 	bl	8003f08 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fe feb1 	bl	8003f08 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e180      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x23a>
 80051c0:	e01a      	b.n	80051f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_RCC_OscConfig+0x280>)
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fe fe9b 	bl	8003f08 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	e00a      	b.n	80051ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fe fe97 	bl	8003f08 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d903      	bls.n	80051ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e166      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
 80051e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	4b92      	ldr	r3, [pc, #584]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ee      	bne.n	80051d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a4 	beq.w	800534e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005206:	4b8c      	ldr	r3, [pc, #560]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005212:	4b89      	ldr	r3, [pc, #548]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4a88      	ldr	r2, [pc, #544]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521c:	6413      	str	r3, [r2, #64]	; 0x40
 800521e:	4b86      	ldr	r3, [pc, #536]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522e:	4b83      	ldr	r3, [pc, #524]	; (800543c <HAL_RCC_OscConfig+0x4d4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d118      	bne.n	800526c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800523a:	4b80      	ldr	r3, [pc, #512]	; (800543c <HAL_RCC_OscConfig+0x4d4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7f      	ldr	r2, [pc, #508]	; (800543c <HAL_RCC_OscConfig+0x4d4>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005246:	f7fe fe5f 	bl	8003f08 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fe fe5b 	bl	8003f08 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b64      	cmp	r3, #100	; 0x64
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e12a      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005260:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCC_OscConfig+0x4d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x31a>
 8005274:	4b70      	ldr	r3, [pc, #448]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	4a6f      	ldr	r2, [pc, #444]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	; 0x70
 8005280:	e02d      	b.n	80052de <HAL_RCC_OscConfig+0x376>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x33c>
 800528a:	4b6b      	ldr	r3, [pc, #428]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a6a      	ldr	r2, [pc, #424]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	; 0x70
 8005296:	4b68      	ldr	r3, [pc, #416]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a67      	ldr	r2, [pc, #412]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70
 80052a2:	e01c      	b.n	80052de <HAL_RCC_OscConfig+0x376>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	d10c      	bne.n	80052c6 <HAL_RCC_OscConfig+0x35e>
 80052ac:	4b62      	ldr	r3, [pc, #392]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	6713      	str	r3, [r2, #112]	; 0x70
 80052b8:	4b5f      	ldr	r3, [pc, #380]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	4a5e      	ldr	r2, [pc, #376]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6713      	str	r3, [r2, #112]	; 0x70
 80052c4:	e00b      	b.n	80052de <HAL_RCC_OscConfig+0x376>
 80052c6:	4b5c      	ldr	r3, [pc, #368]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a5b      	ldr	r2, [pc, #364]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
 80052d2:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	4a58      	ldr	r2, [pc, #352]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80052d8:	f023 0304 	bic.w	r3, r3, #4
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d015      	beq.n	8005312 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7fe fe0f 	bl	8003f08 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fe fe0b 	bl	8003f08 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0d8      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	4b4c      	ldr	r3, [pc, #304]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ee      	beq.n	80052ee <HAL_RCC_OscConfig+0x386>
 8005310:	e014      	b.n	800533c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005312:	f7fe fdf9 	bl	8003f08 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f7fe fdf5 	bl	8003f08 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	; 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e0c2      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005330:	4b41      	ldr	r3, [pc, #260]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ee      	bne.n	800531a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005342:	4b3d      	ldr	r3, [pc, #244]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a3c      	ldr	r2, [pc, #240]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80ae 	beq.w	80054b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005358:	4b37      	ldr	r3, [pc, #220]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b08      	cmp	r3, #8
 8005362:	d06d      	beq.n	8005440 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d14b      	bne.n	8005404 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536c:	4b32      	ldr	r3, [pc, #200]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a31      	ldr	r2, [pc, #196]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fe fdc6 	bl	8003f08 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005380:	f7fe fdc2 	bl	8003f08 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e091      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	491b      	ldr	r1, [pc, #108]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80053d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fe fd94 	bl	8003f08 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fe fd90 	bl	8003f08 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e05f      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x47c>
 8005402:	e057      	b.n	80054b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800540a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fe fd7a 	bl	8003f08 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005418:	f7fe fd76 	bl	8003f08 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e045      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_OscConfig+0x4d0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x4b0>
 8005436:	e03d      	b.n	80054b4 <HAL_RCC_OscConfig+0x54c>
 8005438:	40023800 	.word	0x40023800
 800543c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005440:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <HAL_RCC_OscConfig+0x558>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d030      	beq.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d129      	bne.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d122      	bne.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005476:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005478:	4293      	cmp	r3, r2
 800547a:	d119      	bne.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d10f      	bne.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0d0      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d910      	bls.n	800550c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b67      	ldr	r3, [pc, #412]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 020f 	bic.w	r2, r3, #15
 80054f2:	4965      	ldr	r1, [pc, #404]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0b8      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a58      	ldr	r2, [pc, #352]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 800552a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800552e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4a52      	ldr	r2, [pc, #328]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005546:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b50      	ldr	r3, [pc, #320]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	494d      	ldr	r1, [pc, #308]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d040      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d115      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d107      	bne.n	8005596 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e073      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005596:	4b3d      	ldr	r3, [pc, #244]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e06b      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a6:	4b39      	ldr	r3, [pc, #228]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 0203 	bic.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4936      	ldr	r1, [pc, #216]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b8:	f7fe fca6 	bl	8003f08 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7fe fca2 	bl	8003f08 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e053      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 020c 	and.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1eb      	bne.n	80055c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d210      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b24      	ldr	r3, [pc, #144]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 020f 	bic.w	r2, r3, #15
 80055fe:	4922      	ldr	r1, [pc, #136]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e032      	b.n	800567e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4916      	ldr	r1, [pc, #88]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	490e      	ldr	r1, [pc, #56]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005656:	f000 f821 	bl	800569c <HAL_RCC_GetSysClockFreq>
 800565a:	4602      	mov	r2, r0
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x1cc>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <HAL_RCC_ClockConfig+0x1d0>)
 8005670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1d4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fc02 	bl	8003e80 <HAL_InitTick>

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023c00 	.word	0x40023c00
 800568c:	40023800 	.word	0x40023800
 8005690:	0801779c 	.word	0x0801779c
 8005694:	20000000 	.word	0x20000000
 8005698:	20000004 	.word	0x20000004

0800569c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a0:	b094      	sub	sp, #80	; 0x50
 80056a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	2300      	movs	r3, #0
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	2300      	movs	r3, #0
 80056ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b4:	4b79      	ldr	r3, [pc, #484]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d00d      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x40>
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	f200 80e1 	bhi.w	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ce:	e0db      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056d4:	e0db      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80056d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056da:	e0d8      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056dc:	4b6f      	ldr	r3, [pc, #444]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056e6:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d063      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	2200      	movs	r2, #0
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
 8005706:	2300      	movs	r3, #0
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4621      	mov	r1, r4
 8005728:	1a51      	subs	r1, r2, r1
 800572a:	6139      	str	r1, [r7, #16]
 800572c:	4629      	mov	r1, r5
 800572e:	eb63 0301 	sbc.w	r3, r3, r1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005740:	4659      	mov	r1, fp
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574a:	4651      	mov	r1, sl
 800574c:	018a      	lsls	r2, r1, #6
 800574e:	4651      	mov	r1, sl
 8005750:	ebb2 0801 	subs.w	r8, r2, r1
 8005754:	4659      	mov	r1, fp
 8005756:	eb63 0901 	sbc.w	r9, r3, r1
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576e:	4690      	mov	r8, r2
 8005770:	4699      	mov	r9, r3
 8005772:	4623      	mov	r3, r4
 8005774:	eb18 0303 	adds.w	r3, r8, r3
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	462b      	mov	r3, r5
 800577c:	eb49 0303 	adc.w	r3, r9, r3
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800578e:	4629      	mov	r1, r5
 8005790:	024b      	lsls	r3, r1, #9
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005798:	4621      	mov	r1, r4
 800579a:	024a      	lsls	r2, r1, #9
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ac:	f7fa fda0 	bl	80002f0 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4613      	mov	r3, r2
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b8:	e058      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ba:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	2200      	movs	r2, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	4611      	mov	r1, r2
 80057c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	0159      	lsls	r1, r3, #5
 80057e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e6:	0150      	lsls	r0, r2, #5
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4641      	mov	r1, r8
 80057ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f2:	4649      	mov	r1, r9
 80057f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800580c:	ebb2 040a 	subs.w	r4, r2, sl
 8005810:	eb63 050b 	sbc.w	r5, r3, fp
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00eb      	lsls	r3, r5, #3
 800581e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	4614      	mov	r4, r2
 8005826:	461d      	mov	r5, r3
 8005828:	4643      	mov	r3, r8
 800582a:	18e3      	adds	r3, r4, r3
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	464b      	mov	r3, r9
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005842:	4629      	mov	r1, r5
 8005844:	028b      	lsls	r3, r1, #10
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800584c:	4621      	mov	r1, r4
 800584e:	028a      	lsls	r2, r1, #10
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005856:	2200      	movs	r2, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005860:	f7fa fd46 	bl	80002f0 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800587c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005886:	e002      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800588a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005890:	4618      	mov	r0, r3
 8005892:	3750      	adds	r7, #80	; 0x50
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	007a1200 	.word	0x007a1200

080058a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	080177ac 	.word	0x080177ac

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	080177ac 	.word	0x080177ac

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005938:	4b69      	ldr	r3, [pc, #420]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a68      	ldr	r2, [pc, #416]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	4b66      	ldr	r3, [pc, #408]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	4964      	ldr	r1, [pc, #400]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800595a:	2301      	movs	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800596a:	4b5d      	ldr	r3, [pc, #372]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005978:	4959      	ldr	r1, [pc, #356]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005988:	d101      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005996:	2301      	movs	r3, #1
 8005998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d017      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059a6:	4b4e      	ldr	r3, [pc, #312]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	494a      	ldr	r1, [pc, #296]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c4:	d101      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 808b 	beq.w	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059f4:	4b3a      	ldr	r3, [pc, #232]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	4a39      	ldr	r2, [pc, #228]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fe:	6413      	str	r3, [r2, #64]	; 0x40
 8005a00:	4b37      	ldr	r3, [pc, #220]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a0c:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a18:	f7fe fa76 	bl	8003f08 <HAL_GetTick>
 8005a1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fe fa72 	bl	8003f08 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e38f      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a32:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a3e:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d035      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d02e      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a5c:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d114      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a90:	f7fe fa3a 	bl	8003f08 <HAL_GetTick>
 8005a94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a96:	e00a      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7fe fa36 	bl	8003f08 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e351      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ee      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac6:	d111      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	4901      	ldr	r1, [pc, #4]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40007000 	.word	0x40007000
 8005ae8:	0ffffcff 	.word	0x0ffffcff
 8005aec:	4bac      	ldr	r3, [pc, #688]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4aab      	ldr	r2, [pc, #684]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005af6:	6093      	str	r3, [r2, #8]
 8005af8:	4ba9      	ldr	r3, [pc, #676]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b04:	49a6      	ldr	r1, [pc, #664]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b16:	4ba2      	ldr	r3, [pc, #648]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1c:	4aa0      	ldr	r2, [pc, #640]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b26:	4b9e      	ldr	r3, [pc, #632]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	499b      	ldr	r1, [pc, #620]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b44:	4b96      	ldr	r3, [pc, #600]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b52:	4993      	ldr	r1, [pc, #588]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b66:	4b8e      	ldr	r3, [pc, #568]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b74:	498a      	ldr	r1, [pc, #552]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b88:	4b85      	ldr	r3, [pc, #532]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b96:	4982      	ldr	r1, [pc, #520]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005baa:	4b7d      	ldr	r3, [pc, #500]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4979      	ldr	r1, [pc, #484]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bcc:	4b74      	ldr	r3, [pc, #464]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	4971      	ldr	r1, [pc, #452]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bee:	4b6c      	ldr	r3, [pc, #432]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f023 020c 	bic.w	r2, r3, #12
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfc:	4968      	ldr	r1, [pc, #416]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1e:	4960      	ldr	r1, [pc, #384]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c32:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c40:	4957      	ldr	r1, [pc, #348]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c54:	4b52      	ldr	r3, [pc, #328]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	494f      	ldr	r1, [pc, #316]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c76:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	4946      	ldr	r1, [pc, #280]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca6:	493e      	ldr	r1, [pc, #248]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc8:	4935      	ldr	r1, [pc, #212]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cdc:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cea:	492d      	ldr	r1, [pc, #180]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d011      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005cfe:	4b28      	ldr	r3, [pc, #160]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0c:	4924      	ldr	r1, [pc, #144]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4c:	4914      	ldr	r1, [pc, #80]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d70:	490b      	ldr	r1, [pc, #44]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d94:	4902      	ldr	r1, [pc, #8]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d9c:	e002      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005db0:	4b8a      	ldr	r3, [pc, #552]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005db6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	4986      	ldr	r1, [pc, #536]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005dd4:	4b81      	ldr	r3, [pc, #516]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de4:	497d      	ldr	r1, [pc, #500]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d006      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80d6 	beq.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e00:	4b76      	ldr	r3, [pc, #472]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a75      	ldr	r2, [pc, #468]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fe f87c 	bl	8003f08 <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e14:	f7fe f878 	bl	8003f08 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e195      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e26:	4b6d      	ldr	r3, [pc, #436]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d021      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11d      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e46:	4b65      	ldr	r3, [pc, #404]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e54:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5a:	0e1b      	lsrs	r3, r3, #24
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	019a      	lsls	r2, r3, #6
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	071b      	lsls	r3, r3, #28
 8005e7a:	4958      	ldr	r1, [pc, #352]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d02e      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eac:	d129      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005eae:	4b4b      	ldr	r3, [pc, #300]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ebc:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	0f1b      	lsrs	r3, r3, #28
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	019a      	lsls	r2, r3, #6
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	061b      	lsls	r3, r3, #24
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	071b      	lsls	r3, r3, #28
 8005ee2:	493e      	ldr	r1, [pc, #248]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005eea:	4b3c      	ldr	r3, [pc, #240]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef0:	f023 021f 	bic.w	r2, r3, #31
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	4938      	ldr	r1, [pc, #224]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01d      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f0e:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f14:	0e1b      	lsrs	r3, r3, #24
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f1c:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	431a      	orrs	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	4926      	ldr	r1, [pc, #152]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	019a      	lsls	r2, r3, #6
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	041b      	lsls	r3, r3, #16
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	061b      	lsls	r3, r3, #24
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	071b      	lsls	r3, r3, #28
 8005f72:	491a      	ldr	r1, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f7a:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f86:	f7fd ffbf 	bl	8003f08 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f8e:	f7fd ffbb 	bl	8003f08 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	; 0x64
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e0d8      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	f040 80ce 	bne.w	8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fb4:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc0:	f7fd ffa2 	bl	8003f08 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fc8:	f7fd ff9e 	bl	8003f08 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	; 0x64
 8005fd4:	d904      	bls.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0bb      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005fda:	bf00      	nop
 8005fdc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fe0:	4b5e      	ldr	r3, [pc, #376]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fec:	d0ec      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02e      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d12a      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006016:	4b51      	ldr	r3, [pc, #324]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006024:	4b4d      	ldr	r3, [pc, #308]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	0f1b      	lsrs	r3, r3, #28
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	019a      	lsls	r2, r3, #6
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	061b      	lsls	r3, r3, #24
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	071b      	lsls	r3, r3, #28
 800604a:	4944      	ldr	r1, [pc, #272]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006052:	4b42      	ldr	r3, [pc, #264]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006058:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	3b01      	subs	r3, #1
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	493d      	ldr	r1, [pc, #244]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d022      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006080:	d11d      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006082:	4b36      	ldr	r3, [pc, #216]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	0e1b      	lsrs	r3, r3, #24
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006090:	4b32      	ldr	r3, [pc, #200]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	0f1b      	lsrs	r3, r3, #28
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	019a      	lsls	r2, r3, #6
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	431a      	orrs	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	061b      	lsls	r3, r3, #24
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	071b      	lsls	r3, r3, #28
 80060b6:	4929      	ldr	r1, [pc, #164]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d028      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060ca:	4b24      	ldr	r3, [pc, #144]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	0e1b      	lsrs	r3, r3, #24
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060d8:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	019a      	lsls	r2, r3, #6
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	041b      	lsls	r3, r3, #16
 80060f0:	431a      	orrs	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	061b      	lsls	r3, r3, #24
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	071b      	lsls	r3, r3, #28
 80060fe:	4917      	ldr	r1, [pc, #92]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4911      	ldr	r1, [pc, #68]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800611c:	4b0f      	ldr	r3, [pc, #60]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0e      	ldr	r2, [pc, #56]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006128:	f7fd feee 	bl	8003f08 <HAL_GetTick>
 800612c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006130:	f7fd feea 	bl	8003f08 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b64      	cmp	r3, #100	; 0x64
 800613c:	d901      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e007      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800614a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800614e:	d1ef      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800

08006160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e09d      	b.n	80062ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b00      	cmp	r3, #0
 8006178:	d108      	bne.n	800618c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d009      	beq.n	8006198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	61da      	str	r2, [r3, #28]
 800618a:	e005      	b.n	8006198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fca8 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d8:	d902      	bls.n	80061e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e002      	b.n	80061e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061ee:	d007      	beq.n	8006200 <HAL_SPI_Init+0xa0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	ea42 0103 	orr.w	r1, r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	f003 0204 	and.w	r2, r3, #4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800627c:	ea42 0103 	orr.w	r1, r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800629c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d2:	d112      	bne.n	80062fa <HAL_SPI_Receive+0x44>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10e      	bne.n	80062fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2204      	movs	r2, #4
 80062e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f910 	bl	8006516 <HAL_SPI_TransmitReceive>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e109      	b.n	800650e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_SPI_Receive+0x52>
 8006304:	2302      	movs	r3, #2
 8006306:	e102      	b.n	800650e <HAL_SPI_Receive+0x258>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006310:	f7fd fdfa 	bl	8003f08 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006322:	2302      	movs	r3, #2
 8006324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006326:	e0e9      	b.n	80064fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Receive+0x7e>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006338:	e0e0      	b.n	80064fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2204      	movs	r2, #4
 800633e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006384:	d908      	bls.n	8006398 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	e007      	b.n	80063a8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b0:	d10f      	bne.n	80063d2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d007      	beq.n	80063f0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063f8:	d867      	bhi.n	80064ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063fa:	e030      	b.n	800645e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d117      	bne.n	800643a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f103 020c 	add.w	r2, r3, #12
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	7812      	ldrb	r2, [r2, #0]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006438:	e011      	b.n	800645e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800643a:	f7fd fd65 	bl	8003f08 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d803      	bhi.n	8006452 <HAL_SPI_Receive+0x19c>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d102      	bne.n	8006458 <HAL_SPI_Receive+0x1a2>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800645c:	e04e      	b.n	80064fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1c8      	bne.n	80063fc <HAL_SPI_Receive+0x146>
 800646a:	e034      	b.n	80064d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d115      	bne.n	80064a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	b292      	uxth	r2, r2
 8006486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	1c9a      	adds	r2, r3, #2
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80064a4:	e011      	b.n	80064ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a6:	f7fd fd2f 	bl	8003f08 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d803      	bhi.n	80064be <HAL_SPI_Receive+0x208>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Receive+0x20e>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064c8:	e018      	b.n	80064fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ca      	bne.n	800646c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fb4c 	bl	8006b78 <SPI_EndRxTransaction>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
 80064f8:	e000      	b.n	80064fc <HAL_SPI_Receive+0x246>
  }

error :
 80064fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b08a      	sub	sp, #40	; 0x28
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006524:	2301      	movs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_SPI_TransmitReceive+0x26>
 8006538:	2302      	movs	r3, #2
 800653a:	e1fb      	b.n	8006934 <HAL_SPI_TransmitReceive+0x41e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006544:	f7fd fce0 	bl	8003f08 <HAL_GetTick>
 8006548:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006550:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800655c:	887b      	ldrh	r3, [r7, #2]
 800655e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006560:	7efb      	ldrb	r3, [r7, #27]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d00e      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x6e>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800656c:	d106      	bne.n	800657c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <HAL_SPI_TransmitReceive+0x66>
 8006576:	7efb      	ldrb	r3, [r7, #27]
 8006578:	2b04      	cmp	r3, #4
 800657a:	d003      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800657c:	2302      	movs	r3, #2
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006582:	e1cd      	b.n	8006920 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x80>
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800659c:	e1c0      	b.n	8006920 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d003      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2205      	movs	r2, #5
 80065ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	887a      	ldrh	r2, [r7, #2]
 80065c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	887a      	ldrh	r2, [r7, #2]
 80065de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f4:	d802      	bhi.n	80065fc <HAL_SPI_TransmitReceive+0xe6>
 80065f6:	8a3b      	ldrh	r3, [r7, #16]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d908      	bls.n	800660e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	e007      	b.n	800661e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d007      	beq.n	800663c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006644:	d97c      	bls.n	8006740 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x13e>
 800664e:	8a7b      	ldrh	r3, [r7, #18]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d169      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	881a      	ldrh	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	1c9a      	adds	r2, r3, #2
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006678:	e056      	b.n	8006728 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d11b      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x1aa>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x1aa>
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2b01      	cmp	r3, #1
 8006696:	d113      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d11c      	bne.n	8006708 <HAL_SPI_TransmitReceive+0x1f2>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	b292      	uxth	r2, r2
 80066e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006704:	2301      	movs	r3, #1
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006708:	f7fd fbfe 	bl	8003f08 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	429a      	cmp	r2, r3
 8006716:	d807      	bhi.n	8006728 <HAL_SPI_TransmitReceive+0x212>
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d003      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006726:	e0fb      	b.n	8006920 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1a3      	bne.n	800667a <HAL_SPI_TransmitReceive+0x164>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d19d      	bne.n	800667a <HAL_SPI_TransmitReceive+0x164>
 800673e:	e0df      	b.n	8006900 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x23a>
 8006748:	8a7b      	ldrh	r3, [r7, #18]
 800674a:	2b01      	cmp	r3, #1
 800674c:	f040 80cb 	bne.w	80068e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d912      	bls.n	8006780 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b02      	subs	r3, #2
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800677e:	e0b2      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a6:	e09e      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d134      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x30a>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02f      	beq.n	8006820 <HAL_SPI_TransmitReceive+0x30a>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d12c      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d912      	bls.n	80067f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b02      	subs	r3, #2
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067f4:	e012      	b.n	800681c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d148      	bne.n	80068c0 <HAL_SPI_TransmitReceive+0x3aa>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d042      	beq.n	80068c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d923      	bls.n	800688e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	b292      	uxth	r2, r2
 8006852:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b02      	subs	r3, #2
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b01      	cmp	r3, #1
 800687a:	d81f      	bhi.n	80068bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	e016      	b.n	80068bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f103 020c 	add.w	r2, r3, #12
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068bc:	2301      	movs	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068c0:	f7fd fb22 	bl	8003f08 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d803      	bhi.n	80068d8 <HAL_SPI_TransmitReceive+0x3c2>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d102      	bne.n	80068de <HAL_SPI_TransmitReceive+0x3c8>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80068e4:	e01c      	b.n	8006920 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f af5b 	bne.w	80067a8 <HAL_SPI_TransmitReceive+0x292>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f47f af54 	bne.w	80067a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f9b3 	bl	8006c70 <SPI_EndRxTxTransaction>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
 800691c:	e000      	b.n	8006920 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800691e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800694c:	f7fd fadc 	bl	8003f08 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4413      	add	r3, r2
 800695a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800695c:	f7fd fad4 	bl	8003f08 <HAL_GetTick>
 8006960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006962:	4b39      	ldr	r3, [pc, #228]	; (8006a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	015b      	lsls	r3, r3, #5
 8006968:	0d1b      	lsrs	r3, r3, #20
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	fb02 f303 	mul.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006972:	e054      	b.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697a:	d050      	beq.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800697c:	f7fd fac4 	bl	8003f08 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	429a      	cmp	r2, r3
 800698a:	d902      	bls.n	8006992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d13d      	bne.n	8006a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069aa:	d111      	bne.n	80069d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	d004      	beq.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d107      	bne.n	80069d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d8:	d10f      	bne.n	80069fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e017      	b.n	8006a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4013      	ands	r3, r2
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d19b      	bne.n	8006974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000000 	.word	0x20000000

08006a4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a5e:	f7fd fa53 	bl	8003f08 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006a6e:	f7fd fa4b 	bl	8003f08 <HAL_GetTick>
 8006a72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a7c:	4b3d      	ldr	r3, [pc, #244]	; (8006b74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00da      	lsls	r2, r3, #3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	0d1b      	lsrs	r3, r3, #20
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a94:	e060      	b.n	8006b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a9c:	d107      	bne.n	8006aae <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d050      	beq.n	8006b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ab6:	f7fd fa27 	bl	8003f08 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d902      	bls.n	8006acc <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d13d      	bne.n	8006b48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ada:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ae4:	d111      	bne.n	8006b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aee:	d004      	beq.n	8006afa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af8:	d107      	bne.n	8006b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	d10f      	bne.n	8006b34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e010      	b.n	8006b6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d196      	bne.n	8006a96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3728      	adds	r7, #40	; 0x28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000000 	.word	0x20000000

08006b78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8c:	d111      	bne.n	8006bb2 <SPI_EndRxTransaction+0x3a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b96:	d004      	beq.n	8006ba2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d107      	bne.n	8006bb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bba:	d112      	bne.n	8006be2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff feb8 	bl	800693c <SPI_WaitFlagStateUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d021      	beq.n	8006c16 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e03d      	b.n	8006c5e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <SPI_EndRxTransaction+0xf0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <SPI_EndRxTransaction+0xf4>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	0d5b      	lsrs	r3, r3, #21
 8006bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d0f2      	beq.n	8006bf8 <SPI_EndRxTransaction+0x80>
 8006c12:	e000      	b.n	8006c16 <SPI_EndRxTransaction+0x9e>
        break;
 8006c14:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c1e:	d11d      	bne.n	8006c5c <SPI_EndRxTransaction+0xe4>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c28:	d004      	beq.n	8006c34 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d113      	bne.n	8006c5c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff ff03 	bl	8006a4c <SPI_WaitFifoStateUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e000      	b.n	8006c5e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000000 	.word	0x20000000
 8006c6c:	165e9f81 	.word	0x165e9f81

08006c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff fedf 	bl	8006a4c <SPI_WaitFifoStateUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e046      	b.n	8006d32 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <SPI_EndRxTxTransaction+0xcc>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <SPI_EndRxTxTransaction+0xd0>)
 8006caa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cae:	0d5b      	lsrs	r3, r3, #21
 8006cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc2:	d112      	bne.n	8006cea <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fe34 	bl	800693c <SPI_WaitFlagStateUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d016      	beq.n	8006d08 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e023      	b.n	8006d32 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	2b80      	cmp	r3, #128	; 0x80
 8006d02:	d0f2      	beq.n	8006cea <SPI_EndRxTxTransaction+0x7a>
 8006d04:	e000      	b.n	8006d08 <SPI_EndRxTxTransaction+0x98>
        break;
 8006d06:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fe99 	bl	8006a4c <SPI_WaitFifoStateUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e000      	b.n	8006d32 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000000 	.word	0x20000000
 8006d40:	165e9f81 	.word	0x165e9f81

08006d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e049      	b.n	8006dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb f88c 	bl	8001e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f000 f836 	bl	8006df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a40      	ldr	r2, [pc, #256]	; (8006f08 <TIM_Base_SetConfig+0x114>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d013      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e12:	d00f      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a3d      	ldr	r2, [pc, #244]	; (8006f0c <TIM_Base_SetConfig+0x118>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00b      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a3c      	ldr	r2, [pc, #240]	; (8006f10 <TIM_Base_SetConfig+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a3b      	ldr	r2, [pc, #236]	; (8006f14 <TIM_Base_SetConfig+0x120>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <TIM_Base_SetConfig+0x124>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d108      	bne.n	8006e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2f      	ldr	r2, [pc, #188]	; (8006f08 <TIM_Base_SetConfig+0x114>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d027      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <TIM_Base_SetConfig+0x118>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d023      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <TIM_Base_SetConfig+0x11c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01f      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <TIM_Base_SetConfig+0x120>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <TIM_Base_SetConfig+0x124>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d017      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <TIM_Base_SetConfig+0x128>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a27      	ldr	r2, [pc, #156]	; (8006f20 <TIM_Base_SetConfig+0x12c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a26      	ldr	r2, [pc, #152]	; (8006f24 <TIM_Base_SetConfig+0x130>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a25      	ldr	r2, [pc, #148]	; (8006f28 <TIM_Base_SetConfig+0x134>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a24      	ldr	r2, [pc, #144]	; (8006f2c <TIM_Base_SetConfig+0x138>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <TIM_Base_SetConfig+0x13c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d108      	bne.n	8006eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <TIM_Base_SetConfig+0x114>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_Base_SetConfig+0xf8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a0c      	ldr	r2, [pc, #48]	; (8006f18 <TIM_Base_SetConfig+0x124>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d103      	bne.n	8006ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	615a      	str	r2, [r3, #20]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40000800 	.word	0x40000800
 8006f14:	40000c00 	.word	0x40000c00
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800
 8006f28:	40001800 	.word	0x40001800
 8006f2c:	40001c00 	.word	0x40001c00
 8006f30:	40002000 	.word	0x40002000

08006f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e040      	b.n	8006fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fb f82a 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2224      	movs	r2, #36	; 0x24
 8006f60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fbc2 	bl	80076fc <UART_SetConfig>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e022      	b.n	8006fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fe1a 	bl	8007bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fea1 	bl	8007d08 <UART_CheckIdleState>
 8006fc6:	4603      	mov	r3, r0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d171      	bne.n	80070cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_Transmit+0x24>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e06a      	b.n	80070ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2221      	movs	r2, #33	; 0x21
 8007004:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007006:	f7fc ff7f 	bl	8003f08 <HAL_GetTick>
 800700a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007024:	d108      	bne.n	8007038 <HAL_UART_Transmit+0x68>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	e003      	b.n	8007040 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007040:	e02c      	b.n	800709c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2200      	movs	r2, #0
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fea8 	bl	8007da2 <UART_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e038      	b.n	80070ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007070:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3302      	adds	r3, #2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e007      	b.n	800708a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	3301      	adds	r3, #1
 8007088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1cc      	bne.n	8007042 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fe75 	bl	8007da2 <UART_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e005      	b.n	80070ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b0ba      	sub	sp, #232	; 0xe8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007102:	f640 030f 	movw	r3, #2063	; 0x80f
 8007106:	4013      	ands	r3, r2
 8007108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800710c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d115      	bne.n	8007140 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 82ac 	beq.w	800768e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
      }
      return;
 800713e:	e2a6      	b.n	800768e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8117 	beq.w	8007378 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800715a:	4b85      	ldr	r3, [pc, #532]	; (8007370 <HAL_UART_IRQHandler+0x298>)
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 810a 	beq.w	8007378 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <HAL_UART_IRQHandler+0xbc>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2201      	movs	r2, #1
 8007182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718a:	f043 0201 	orr.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <HAL_UART_IRQHandler+0xec>
 80071a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2202      	movs	r2, #2
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ba:	f043 0204 	orr.w	r2, r3, #4
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <HAL_UART_IRQHandler+0x11c>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2204      	movs	r2, #4
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	f043 0202 	orr.w	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d017      	beq.n	8007230 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800720c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007210:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2208      	movs	r2, #8
 800721e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007226:	f043 0208 	orr.w	r2, r3, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_UART_IRQHandler+0x18a>
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00c      	beq.n	8007262 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007258:	f043 0220 	orr.w	r2, r3, #32
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8212 	beq.w	8007692 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800726e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800727a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d005      	beq.n	80072ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04f      	beq.n	800735a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fe37 	bl	8007f2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d141      	bne.n	8007352 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1d9      	bne.n	80072ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731e:	2b00      	cmp	r3, #0
 8007320:	d013      	beq.n	800734a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007326:	4a13      	ldr	r2, [pc, #76]	; (8007374 <HAL_UART_IRQHandler+0x29c>)
 8007328:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd f934 	bl	800459c <HAL_DMA_Abort_IT>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	e00f      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9b6 	bl	80076bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	e00b      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9b2 	bl	80076bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	e007      	b.n	800736a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9ae 	bl	80076bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007368:	e193      	b.n	8007692 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736a:	bf00      	nop
    return;
 800736c:	e191      	b.n	8007692 <HAL_UART_IRQHandler+0x5ba>
 800736e:	bf00      	nop
 8007370:	04000120 	.word	0x04000120
 8007374:	08007ff7 	.word	0x08007ff7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 814c 	bne.w	800761a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8145 	beq.w	800761a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 813e 	beq.w	800761a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2210      	movs	r2, #16
 80073a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	f040 80b6 	bne.w	8007522 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8165 	beq.w	8007696 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073d6:	429a      	cmp	r2, r3
 80073d8:	f080 815d 	bcs.w	8007696 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f0:	f000 8086 	beq.w	8007500 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800740c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800741e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007422:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800742a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1da      	bne.n	80073f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800744e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800746a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e1      	bne.n	800743e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800748a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800748c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800749e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d0:	f023 0310 	bic.w	r3, r3, #16
 80074d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e4      	bne.n	80074c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc ffde 	bl	80044bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007512:	b29b      	uxth	r3, r3
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8d8 	bl	80076d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007520:	e0b9      	b.n	8007696 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800752e:	b29b      	uxth	r3, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80ab 	beq.w	800769a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80a6 	beq.w	800769a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007570:	647b      	str	r3, [r7, #68]	; 0x44
 8007572:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e4      	bne.n	800754e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	623b      	str	r3, [r7, #32]
   return(result);
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075a8:	633a      	str	r2, [r7, #48]	; 0x30
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	69b9      	ldr	r1, [r7, #24]
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e4      	bne.n	80075d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800760c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f85c 	bl	80076d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007618:	e03f      	b.n	800769a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00e      	beq.n	8007644 <HAL_UART_IRQHandler+0x56c>
 8007626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800763a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f853 	bl	80076e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007642:	e02d      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00e      	beq.n	800766e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01c      	beq.n	800769e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
    }
    return;
 800766c:	e017      	b.n	800769e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d012      	beq.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00c      	beq.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fccb 	bl	8008022 <UART_EndTransmit_IT>
    return;
 800768c:	e008      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800768e:	bf00      	nop
 8007690:	e006      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007692:	bf00      	nop
 8007694:	e004      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007696:	bf00      	nop
 8007698:	e002      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 800769e:	bf00      	nop
  }

}
 80076a0:	37e8      	adds	r7, #232	; 0xe8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4ba6      	ldr	r3, [pc, #664]	; (80079c0 <UART_SetConfig+0x2c4>)
 8007728:	4013      	ands	r3, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	6979      	ldr	r1, [r7, #20]
 8007730:	430b      	orrs	r3, r1
 8007732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	430a      	orrs	r2, r1
 800776c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a94      	ldr	r2, [pc, #592]	; (80079c4 <UART_SetConfig+0x2c8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d120      	bne.n	80077ba <UART_SetConfig+0xbe>
 8007778:	4b93      	ldr	r3, [pc, #588]	; (80079c8 <UART_SetConfig+0x2cc>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d816      	bhi.n	80077b4 <UART_SetConfig+0xb8>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0x90>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	0800779d 	.word	0x0800779d
 8007790:	080077a9 	.word	0x080077a9
 8007794:	080077a3 	.word	0x080077a3
 8007798:	080077af 	.word	0x080077af
 800779c:	2301      	movs	r3, #1
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e150      	b.n	8007a44 <UART_SetConfig+0x348>
 80077a2:	2302      	movs	r3, #2
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e14d      	b.n	8007a44 <UART_SetConfig+0x348>
 80077a8:	2304      	movs	r3, #4
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e14a      	b.n	8007a44 <UART_SetConfig+0x348>
 80077ae:	2308      	movs	r3, #8
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e147      	b.n	8007a44 <UART_SetConfig+0x348>
 80077b4:	2310      	movs	r3, #16
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e144      	b.n	8007a44 <UART_SetConfig+0x348>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a83      	ldr	r2, [pc, #524]	; (80079cc <UART_SetConfig+0x2d0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d132      	bne.n	800782a <UART_SetConfig+0x12e>
 80077c4:	4b80      	ldr	r3, [pc, #512]	; (80079c8 <UART_SetConfig+0x2cc>)
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b0c      	cmp	r3, #12
 80077d0:	d828      	bhi.n	8007824 <UART_SetConfig+0x128>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0xdc>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	0800780d 	.word	0x0800780d
 80077dc:	08007825 	.word	0x08007825
 80077e0:	08007825 	.word	0x08007825
 80077e4:	08007825 	.word	0x08007825
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007825 	.word	0x08007825
 80077f0:	08007825 	.word	0x08007825
 80077f4:	08007825 	.word	0x08007825
 80077f8:	08007813 	.word	0x08007813
 80077fc:	08007825 	.word	0x08007825
 8007800:	08007825 	.word	0x08007825
 8007804:	08007825 	.word	0x08007825
 8007808:	0800781f 	.word	0x0800781f
 800780c:	2300      	movs	r3, #0
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e118      	b.n	8007a44 <UART_SetConfig+0x348>
 8007812:	2302      	movs	r3, #2
 8007814:	77fb      	strb	r3, [r7, #31]
 8007816:	e115      	b.n	8007a44 <UART_SetConfig+0x348>
 8007818:	2304      	movs	r3, #4
 800781a:	77fb      	strb	r3, [r7, #31]
 800781c:	e112      	b.n	8007a44 <UART_SetConfig+0x348>
 800781e:	2308      	movs	r3, #8
 8007820:	77fb      	strb	r3, [r7, #31]
 8007822:	e10f      	b.n	8007a44 <UART_SetConfig+0x348>
 8007824:	2310      	movs	r3, #16
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e10c      	b.n	8007a44 <UART_SetConfig+0x348>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a68      	ldr	r2, [pc, #416]	; (80079d0 <UART_SetConfig+0x2d4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d120      	bne.n	8007876 <UART_SetConfig+0x17a>
 8007834:	4b64      	ldr	r3, [pc, #400]	; (80079c8 <UART_SetConfig+0x2cc>)
 8007836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800783e:	2b30      	cmp	r3, #48	; 0x30
 8007840:	d013      	beq.n	800786a <UART_SetConfig+0x16e>
 8007842:	2b30      	cmp	r3, #48	; 0x30
 8007844:	d814      	bhi.n	8007870 <UART_SetConfig+0x174>
 8007846:	2b20      	cmp	r3, #32
 8007848:	d009      	beq.n	800785e <UART_SetConfig+0x162>
 800784a:	2b20      	cmp	r3, #32
 800784c:	d810      	bhi.n	8007870 <UART_SetConfig+0x174>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <UART_SetConfig+0x15c>
 8007852:	2b10      	cmp	r3, #16
 8007854:	d006      	beq.n	8007864 <UART_SetConfig+0x168>
 8007856:	e00b      	b.n	8007870 <UART_SetConfig+0x174>
 8007858:	2300      	movs	r3, #0
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e0f2      	b.n	8007a44 <UART_SetConfig+0x348>
 800785e:	2302      	movs	r3, #2
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e0ef      	b.n	8007a44 <UART_SetConfig+0x348>
 8007864:	2304      	movs	r3, #4
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e0ec      	b.n	8007a44 <UART_SetConfig+0x348>
 800786a:	2308      	movs	r3, #8
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e0e9      	b.n	8007a44 <UART_SetConfig+0x348>
 8007870:	2310      	movs	r3, #16
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e0e6      	b.n	8007a44 <UART_SetConfig+0x348>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a56      	ldr	r2, [pc, #344]	; (80079d4 <UART_SetConfig+0x2d8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d120      	bne.n	80078c2 <UART_SetConfig+0x1c6>
 8007880:	4b51      	ldr	r3, [pc, #324]	; (80079c8 <UART_SetConfig+0x2cc>)
 8007882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800788a:	2bc0      	cmp	r3, #192	; 0xc0
 800788c:	d013      	beq.n	80078b6 <UART_SetConfig+0x1ba>
 800788e:	2bc0      	cmp	r3, #192	; 0xc0
 8007890:	d814      	bhi.n	80078bc <UART_SetConfig+0x1c0>
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d009      	beq.n	80078aa <UART_SetConfig+0x1ae>
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d810      	bhi.n	80078bc <UART_SetConfig+0x1c0>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <UART_SetConfig+0x1a8>
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d006      	beq.n	80078b0 <UART_SetConfig+0x1b4>
 80078a2:	e00b      	b.n	80078bc <UART_SetConfig+0x1c0>
 80078a4:	2300      	movs	r3, #0
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0cc      	b.n	8007a44 <UART_SetConfig+0x348>
 80078aa:	2302      	movs	r3, #2
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0c9      	b.n	8007a44 <UART_SetConfig+0x348>
 80078b0:	2304      	movs	r3, #4
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e0c6      	b.n	8007a44 <UART_SetConfig+0x348>
 80078b6:	2308      	movs	r3, #8
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e0c3      	b.n	8007a44 <UART_SetConfig+0x348>
 80078bc:	2310      	movs	r3, #16
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e0c0      	b.n	8007a44 <UART_SetConfig+0x348>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a44      	ldr	r2, [pc, #272]	; (80079d8 <UART_SetConfig+0x2dc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d125      	bne.n	8007918 <UART_SetConfig+0x21c>
 80078cc:	4b3e      	ldr	r3, [pc, #248]	; (80079c8 <UART_SetConfig+0x2cc>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078da:	d017      	beq.n	800790c <UART_SetConfig+0x210>
 80078dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e0:	d817      	bhi.n	8007912 <UART_SetConfig+0x216>
 80078e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e6:	d00b      	beq.n	8007900 <UART_SetConfig+0x204>
 80078e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ec:	d811      	bhi.n	8007912 <UART_SetConfig+0x216>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <UART_SetConfig+0x1fe>
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f6:	d006      	beq.n	8007906 <UART_SetConfig+0x20a>
 80078f8:	e00b      	b.n	8007912 <UART_SetConfig+0x216>
 80078fa:	2300      	movs	r3, #0
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e0a1      	b.n	8007a44 <UART_SetConfig+0x348>
 8007900:	2302      	movs	r3, #2
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e09e      	b.n	8007a44 <UART_SetConfig+0x348>
 8007906:	2304      	movs	r3, #4
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e09b      	b.n	8007a44 <UART_SetConfig+0x348>
 800790c:	2308      	movs	r3, #8
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e098      	b.n	8007a44 <UART_SetConfig+0x348>
 8007912:	2310      	movs	r3, #16
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e095      	b.n	8007a44 <UART_SetConfig+0x348>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2f      	ldr	r2, [pc, #188]	; (80079dc <UART_SetConfig+0x2e0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d125      	bne.n	800796e <UART_SetConfig+0x272>
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <UART_SetConfig+0x2cc>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800792c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007930:	d017      	beq.n	8007962 <UART_SetConfig+0x266>
 8007932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007936:	d817      	bhi.n	8007968 <UART_SetConfig+0x26c>
 8007938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793c:	d00b      	beq.n	8007956 <UART_SetConfig+0x25a>
 800793e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007942:	d811      	bhi.n	8007968 <UART_SetConfig+0x26c>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <UART_SetConfig+0x254>
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794c:	d006      	beq.n	800795c <UART_SetConfig+0x260>
 800794e:	e00b      	b.n	8007968 <UART_SetConfig+0x26c>
 8007950:	2301      	movs	r3, #1
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e076      	b.n	8007a44 <UART_SetConfig+0x348>
 8007956:	2302      	movs	r3, #2
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e073      	b.n	8007a44 <UART_SetConfig+0x348>
 800795c:	2304      	movs	r3, #4
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e070      	b.n	8007a44 <UART_SetConfig+0x348>
 8007962:	2308      	movs	r3, #8
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e06d      	b.n	8007a44 <UART_SetConfig+0x348>
 8007968:	2310      	movs	r3, #16
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e06a      	b.n	8007a44 <UART_SetConfig+0x348>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <UART_SetConfig+0x2e4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d138      	bne.n	80079ea <UART_SetConfig+0x2ee>
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <UART_SetConfig+0x2cc>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007982:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007986:	d017      	beq.n	80079b8 <UART_SetConfig+0x2bc>
 8007988:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800798c:	d82a      	bhi.n	80079e4 <UART_SetConfig+0x2e8>
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007992:	d00b      	beq.n	80079ac <UART_SetConfig+0x2b0>
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007998:	d824      	bhi.n	80079e4 <UART_SetConfig+0x2e8>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <UART_SetConfig+0x2aa>
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	d006      	beq.n	80079b2 <UART_SetConfig+0x2b6>
 80079a4:	e01e      	b.n	80079e4 <UART_SetConfig+0x2e8>
 80079a6:	2300      	movs	r3, #0
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e04b      	b.n	8007a44 <UART_SetConfig+0x348>
 80079ac:	2302      	movs	r3, #2
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e048      	b.n	8007a44 <UART_SetConfig+0x348>
 80079b2:	2304      	movs	r3, #4
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e045      	b.n	8007a44 <UART_SetConfig+0x348>
 80079b8:	2308      	movs	r3, #8
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e042      	b.n	8007a44 <UART_SetConfig+0x348>
 80079be:	bf00      	nop
 80079c0:	efff69f3 	.word	0xefff69f3
 80079c4:	40011000 	.word	0x40011000
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40004400 	.word	0x40004400
 80079d0:	40004800 	.word	0x40004800
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40005000 	.word	0x40005000
 80079dc:	40011400 	.word	0x40011400
 80079e0:	40007800 	.word	0x40007800
 80079e4:	2310      	movs	r3, #16
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e02c      	b.n	8007a44 <UART_SetConfig+0x348>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a72      	ldr	r2, [pc, #456]	; (8007bb8 <UART_SetConfig+0x4bc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d125      	bne.n	8007a40 <UART_SetConfig+0x344>
 80079f4:	4b71      	ldr	r3, [pc, #452]	; (8007bbc <UART_SetConfig+0x4c0>)
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a02:	d017      	beq.n	8007a34 <UART_SetConfig+0x338>
 8007a04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a08:	d817      	bhi.n	8007a3a <UART_SetConfig+0x33e>
 8007a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0e:	d00b      	beq.n	8007a28 <UART_SetConfig+0x32c>
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	d811      	bhi.n	8007a3a <UART_SetConfig+0x33e>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <UART_SetConfig+0x326>
 8007a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a1e:	d006      	beq.n	8007a2e <UART_SetConfig+0x332>
 8007a20:	e00b      	b.n	8007a3a <UART_SetConfig+0x33e>
 8007a22:	2300      	movs	r3, #0
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e00d      	b.n	8007a44 <UART_SetConfig+0x348>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e00a      	b.n	8007a44 <UART_SetConfig+0x348>
 8007a2e:	2304      	movs	r3, #4
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e007      	b.n	8007a44 <UART_SetConfig+0x348>
 8007a34:	2308      	movs	r3, #8
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e004      	b.n	8007a44 <UART_SetConfig+0x348>
 8007a3a:	2310      	movs	r3, #16
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e001      	b.n	8007a44 <UART_SetConfig+0x348>
 8007a40:	2310      	movs	r3, #16
 8007a42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4c:	d15b      	bne.n	8007b06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d828      	bhi.n	8007aa6 <UART_SetConfig+0x3aa>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0x360>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007aa7 	.word	0x08007aa7
 8007a6c:	08007a97 	.word	0x08007a97
 8007a70:	08007aa7 	.word	0x08007aa7
 8007a74:	08007aa7 	.word	0x08007aa7
 8007a78:	08007aa7 	.word	0x08007aa7
 8007a7c:	08007a9f 	.word	0x08007a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a80:	f7fd ff1e 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8007a84:	61b8      	str	r0, [r7, #24]
        break;
 8007a86:	e013      	b.n	8007ab0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a88:	f7fd ff2e 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 8007a8c:	61b8      	str	r0, [r7, #24]
        break;
 8007a8e:	e00f      	b.n	8007ab0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a90:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <UART_SetConfig+0x4c4>)
 8007a92:	61bb      	str	r3, [r7, #24]
        break;
 8007a94:	e00c      	b.n	8007ab0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a96:	f7fd fe01 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8007a9a:	61b8      	str	r0, [r7, #24]
        break;
 8007a9c:	e008      	b.n	8007ab0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa2:	61bb      	str	r3, [r7, #24]
        break;
 8007aa4:	e004      	b.n	8007ab0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	77bb      	strb	r3, [r7, #30]
        break;
 8007aae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d074      	beq.n	8007ba0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	005a      	lsls	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b0f      	cmp	r3, #15
 8007ad0:	d916      	bls.n	8007b00 <UART_SetConfig+0x404>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad8:	d212      	bcs.n	8007b00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f023 030f 	bic.w	r3, r3, #15
 8007ae2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	89fb      	ldrh	r3, [r7, #14]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	89fa      	ldrh	r2, [r7, #14]
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	e04f      	b.n	8007ba0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	77bb      	strb	r3, [r7, #30]
 8007b04:	e04c      	b.n	8007ba0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b06:	7ffb      	ldrb	r3, [r7, #31]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d828      	bhi.n	8007b5e <UART_SetConfig+0x462>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <UART_SetConfig+0x418>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b5f 	.word	0x08007b5f
 8007b24:	08007b4f 	.word	0x08007b4f
 8007b28:	08007b5f 	.word	0x08007b5f
 8007b2c:	08007b5f 	.word	0x08007b5f
 8007b30:	08007b5f 	.word	0x08007b5f
 8007b34:	08007b57 	.word	0x08007b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b38:	f7fd fec2 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8007b3c:	61b8      	str	r0, [r7, #24]
        break;
 8007b3e:	e013      	b.n	8007b68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b40:	f7fd fed2 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 8007b44:	61b8      	str	r0, [r7, #24]
        break;
 8007b46:	e00f      	b.n	8007b68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <UART_SetConfig+0x4c4>)
 8007b4a:	61bb      	str	r3, [r7, #24]
        break;
 8007b4c:	e00c      	b.n	8007b68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7fd fda5 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8007b52:	61b8      	str	r0, [r7, #24]
        break;
 8007b54:	e008      	b.n	8007b68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	61bb      	str	r3, [r7, #24]
        break;
 8007b5c:	e004      	b.n	8007b68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	77bb      	strb	r3, [r7, #30]
        break;
 8007b66:	bf00      	nop
    }

    if (pclk != 0U)
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	085a      	lsrs	r2, r3, #1
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	441a      	add	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d909      	bls.n	8007b9c <UART_SetConfig+0x4a0>
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8e:	d205      	bcs.n	8007b9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e001      	b.n	8007ba0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007bac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40007c00 	.word	0x40007c00
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	00f42400 	.word	0x00f42400

08007bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc2:	d10a      	bne.n	8007cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d18:	f7fc f8f6 	bl	8003f08 <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d10e      	bne.n	8007d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f831 	bl	8007da2 <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e027      	b.n	8007d9a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10e      	bne.n	8007d76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f81b 	bl	8007da2 <UART_WaitOnFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e011      	b.n	8007d9a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b09c      	sub	sp, #112	; 0x70
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db2:	e0a7      	b.n	8007f04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	f000 80a3 	beq.w	8007f04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbe:	f7fc f8a3 	bl	8003f08 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d13f      	bne.n	8007e54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007de8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007df8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e26:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e068      	b.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d050      	beq.n	8007f04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e70:	d148      	bne.n	8007f04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e6      	bne.n	8007e7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ece:	623a      	str	r2, [r7, #32]
 8007ed0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	69f9      	ldr	r1, [r7, #28]
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e5      	bne.n	8007eae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e010      	b.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69da      	ldr	r2, [r3, #28]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bf0c      	ite	eq
 8007f14:	2301      	moveq	r3, #1
 8007f16:	2300      	movne	r3, #0
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	f43f af48 	beq.w	8007db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3770      	adds	r7, #112	; 0x70
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b095      	sub	sp, #84	; 0x54
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
 8007f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e6      	bne.n	8007f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d118      	bne.n	8007fd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 0310 	bic.w	r3, r3, #16
 8007fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6979      	ldr	r1, [r7, #20]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fea:	bf00      	nop
 8007fec:	3754      	adds	r7, #84	; 0x54
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff fb51 	bl	80076bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b088      	sub	sp, #32
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	60bb      	str	r3, [r7, #8]
   return(result);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6979      	ldr	r1, [r7, #20]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	613b      	str	r3, [r7, #16]
   return(result);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff fb1d 	bl	80076a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806e:	bf00      	nop
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	2101      	movs	r1, #1
 8008086:	484a      	ldr	r0, [pc, #296]	; (80081b0 <network_configure_activations+0x138>)
 8008088:	f000 fc3c 	bl	8008904 <ai_platform_get_activations_map>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8084 	beq.w	800819c <network_configure_activations+0x124>
    /* Updating activations (byte) offsets */
    
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 8008094:	4b46      	ldr	r3, [pc, #280]	; (80081b0 <network_configure_activations+0x138>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800809c:	4a45      	ldr	r2, [pc, #276]	; (80081b4 <network_configure_activations+0x13c>)
 800809e:	6093      	str	r3, [r2, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 80080a0:	4b43      	ldr	r3, [pc, #268]	; (80081b0 <network_configure_activations+0x138>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80080a8:	4a42      	ldr	r2, [pc, #264]	; (80081b4 <network_configure_activations+0x13c>)
 80080aa:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 80080ac:	4b40      	ldr	r3, [pc, #256]	; (80081b0 <network_configure_activations+0x138>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80080b4:	4a40      	ldr	r2, [pc, #256]	; (80081b8 <network_configure_activations+0x140>)
 80080b6:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 80080b8:	4b3d      	ldr	r3, [pc, #244]	; (80081b0 <network_configure_activations+0x138>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80080c0:	4a3d      	ldr	r2, [pc, #244]	; (80081b8 <network_configure_activations+0x140>)
 80080c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80080c4:	4b3a      	ldr	r3, [pc, #232]	; (80081b0 <network_configure_activations+0x138>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3308      	adds	r3, #8
 80080ca:	4a3c      	ldr	r2, [pc, #240]	; (80081bc <network_configure_activations+0x144>)
 80080cc:	6093      	str	r3, [r2, #8]
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80080ce:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <network_configure_activations+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	4a39      	ldr	r2, [pc, #228]	; (80081bc <network_configure_activations+0x144>)
 80080d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 19772);
 80080d8:	4b35      	ldr	r3, [pc, #212]	; (80081b0 <network_configure_activations+0x138>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f644 533c 	movw	r3, #19772	; 0x4d3c
 80080e0:	4413      	add	r3, r2
 80080e2:	4a37      	ldr	r2, [pc, #220]	; (80081c0 <network_configure_activations+0x148>)
 80080e4:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 19772);
 80080e6:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <network_configure_activations+0x138>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f644 533c 	movw	r3, #19772	; 0x4d3c
 80080ee:	4413      	add	r3, r2
 80080f0:	4a33      	ldr	r2, [pc, #204]	; (80081c0 <network_configure_activations+0x148>)
 80080f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 80080f4:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <network_configure_activations+0x138>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	f644 6340 	movw	r3, #20032	; 0x4e40
 80080fc:	4413      	add	r3, r2
 80080fe:	4a31      	ldr	r2, [pc, #196]	; (80081c4 <network_configure_activations+0x14c>)
 8008100:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 8008102:	4b2b      	ldr	r3, [pc, #172]	; (80081b0 <network_configure_activations+0x138>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	f644 6340 	movw	r3, #20032	; 0x4e40
 800810a:	4413      	add	r3, r2
 800810c:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <network_configure_activations+0x14c>)
 800810e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch2_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 8008110:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <network_configure_activations+0x138>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008118:	4413      	add	r3, r2
 800811a:	4a2b      	ldr	r2, [pc, #172]	; (80081c8 <network_configure_activations+0x150>)
 800811c:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch2_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 800811e:	4b24      	ldr	r3, [pc, #144]	; (80081b0 <network_configure_activations+0x138>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f644 6340 	movw	r3, #20032	; 0x4e40
 8008126:	4413      	add	r3, r2
 8008128:	4a27      	ldr	r2, [pc, #156]	; (80081c8 <network_configure_activations+0x150>)
 800812a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800812c:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <network_configure_activations+0x138>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a26      	ldr	r2, [pc, #152]	; (80081cc <network_configure_activations+0x154>)
 8008132:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008134:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <network_configure_activations+0x138>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a24      	ldr	r2, [pc, #144]	; (80081cc <network_configure_activations+0x154>)
 800813a:	60d3      	str	r3, [r2, #12]
    
    dense_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8);
 800813c:	4b1c      	ldr	r3, [pc, #112]	; (80081b0 <network_configure_activations+0x138>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	4a23      	ldr	r2, [pc, #140]	; (80081d0 <network_configure_activations+0x158>)
 8008144:	6093      	str	r3, [r2, #8]
    dense_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8008146:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <network_configure_activations+0x138>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	4a20      	ldr	r2, [pc, #128]	; (80081d0 <network_configure_activations+0x158>)
 800814e:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8008150:	4b17      	ldr	r3, [pc, #92]	; (80081b0 <network_configure_activations+0x138>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3318      	adds	r3, #24
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <network_configure_activations+0x15c>)
 8008158:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <network_configure_activations+0x138>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3318      	adds	r3, #24
 8008160:	4a1c      	ldr	r2, [pc, #112]	; (80081d4 <network_configure_activations+0x15c>)
 8008162:	60d3      	str	r3, [r2, #12]
    
    dense_3_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008164:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <network_configure_activations+0x138>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <network_configure_activations+0x160>)
 800816a:	6093      	str	r3, [r2, #8]
    dense_3_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <network_configure_activations+0x138>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a19      	ldr	r2, [pc, #100]	; (80081d8 <network_configure_activations+0x160>)
 8008172:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <network_configure_activations+0x138>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	4a18      	ldr	r2, [pc, #96]	; (80081dc <network_configure_activations+0x164>)
 800817c:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <network_configure_activations+0x138>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	4a15      	ldr	r2, [pc, #84]	; (80081dc <network_configure_activations+0x164>)
 8008186:	60d3      	str	r3, [r2, #12]
    
    nl_4_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <network_configure_activations+0x138>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <network_configure_activations+0x168>)
 800818e:	6093      	str	r3, [r2, #8]
    nl_4_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <network_configure_activations+0x138>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <network_configure_activations+0x168>)
 8008196:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008198:	2301      	movs	r3, #1
 800819a:	e005      	b.n	80081a8 <network_configure_activations+0x130>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800819c:	2213      	movs	r2, #19
 800819e:	2130      	movs	r1, #48	; 0x30
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fc07 	bl	80089b4 <ai_platform_network_set_error>
  return false;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20001588 	.word	0x20001588
 80081b4:	2000000c 	.word	0x2000000c
 80081b8:	2000001c 	.word	0x2000001c
 80081bc:	2000002c 	.word	0x2000002c
 80081c0:	200000cc 	.word	0x200000cc
 80081c4:	200000dc 	.word	0x200000dc
 80081c8:	200000ec 	.word	0x200000ec
 80081cc:	2000003c 	.word	0x2000003c
 80081d0:	200000fc 	.word	0x200000fc
 80081d4:	2000004c 	.word	0x2000004c
 80081d8:	2000005c 	.word	0x2000005c
 80081dc:	2000006c 	.word	0x2000006c
 80081e0:	2000007c 	.word	0x2000007c

080081e4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	2101      	movs	r1, #1
 80081f2:	4828      	ldr	r0, [pc, #160]	; (8008294 <network_configure_weights+0xb0>)
 80081f4:	f000 fb2e 	bl	8008854 <ai_platform_get_weights_map>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d03f      	beq.n	800827e <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80081fe:	4b26      	ldr	r3, [pc, #152]	; (8008298 <network_configure_weights+0xb4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008206:	4a24      	ldr	r2, [pc, #144]	; (8008298 <network_configure_weights+0xb4>)
 8008208:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800820a:	4b22      	ldr	r3, [pc, #136]	; (8008294 <network_configure_weights+0xb0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a22      	ldr	r2, [pc, #136]	; (8008298 <network_configure_weights+0xb4>)
 8008210:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8008212:	4b20      	ldr	r3, [pc, #128]	; (8008294 <network_configure_weights+0xb0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a20      	ldr	r2, [pc, #128]	; (8008298 <network_configure_weights+0xb4>)
 8008218:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800821a:	4b20      	ldr	r3, [pc, #128]	; (800829c <network_configure_weights+0xb8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <network_configure_weights+0xb8>)
 8008224:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 72);
 8008226:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <network_configure_weights+0xb0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3348      	adds	r3, #72	; 0x48
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <network_configure_weights+0xb8>)
 800822e:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 72);
 8008230:	4b18      	ldr	r3, [pc, #96]	; (8008294 <network_configure_weights+0xb0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3348      	adds	r3, #72	; 0x48
 8008236:	4a19      	ldr	r2, [pc, #100]	; (800829c <network_configure_weights+0xb8>)
 8008238:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <network_configure_weights+0xbc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008242:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <network_configure_weights+0xbc>)
 8008244:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 104);
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <network_configure_weights+0xb0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3368      	adds	r3, #104	; 0x68
 800824c:	4a14      	ldr	r2, [pc, #80]	; (80082a0 <network_configure_weights+0xbc>)
 800824e:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 104);
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <network_configure_weights+0xb0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3368      	adds	r3, #104	; 0x68
 8008256:	4a12      	ldr	r2, [pc, #72]	; (80082a0 <network_configure_weights+0xbc>)
 8008258:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <network_configure_weights+0xc0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008262:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <network_configure_weights+0xc0>)
 8008264:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <network_configure_weights+0xb0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3378      	adds	r3, #120	; 0x78
 800826c:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <network_configure_weights+0xc0>)
 800826e:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8008270:	4b08      	ldr	r3, [pc, #32]	; (8008294 <network_configure_weights+0xb0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3378      	adds	r3, #120	; 0x78
 8008276:	4a0b      	ldr	r2, [pc, #44]	; (80082a4 <network_configure_weights+0xc0>)
 8008278:	60d3      	str	r3, [r2, #12]
    
    return true;
 800827a:	2301      	movs	r3, #1
 800827c:	e005      	b.n	800828a <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800827e:	2212      	movs	r2, #18
 8008280:	2130      	movs	r1, #48	; 0x30
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb96 	bl	80089b4 <ai_platform_network_set_error>
  return false;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000158c 	.word	0x2000158c
 8008298:	2000008c 	.word	0x2000008c
 800829c:	2000009c 	.word	0x2000009c
 80082a0:	200000ac 	.word	0x200000ac
 80082a4:	200000bc 	.word	0x200000bc

080082a8 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80082b2:	2300      	movs	r3, #0
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	2305      	movs	r3, #5
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	2301      	movs	r3, #1
 80082bc:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <ai_network_create+0x28>)
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb7d 	bl	80089c0 <ai_platform_network_create>
 80082c6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	2000083c 	.word	0x2000083c

080082d4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fd21 	bl	8008d28 <ai_platform_network_init>
 80082e6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <ai_network_init+0x1e>
 80082ee:	2300      	movs	r3, #0
 80082f0:	e028      	b.n	8008344 <ai_network_init+0x70>

  ai_bool ok = true;
 80082f2:	2301      	movs	r3, #1
 80082f4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff ff73 	bl	80081e4 <network_configure_weights>
 80082fe:	4603      	mov	r3, r0
 8008300:	461a      	mov	r2, r3
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	4013      	ands	r3, r2
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf14      	ite	ne
 800830a:	2301      	movne	r3, #1
 800830c:	2300      	moveq	r3, #0
 800830e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff feb0 	bl	8008078 <network_configure_activations>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fe78 	bl	8009020 <ai_platform_network_post_init>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	4013      	ands	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	bf14      	ite	ne
 800833c:	2301      	movne	r3, #1
 800833e:	2300      	moveq	r3, #0
 8008340:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008342:	7afb      	ldrb	r3, [r7, #11]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 ff6b 	bl	8009238 <ai_platform_network_process>
 8008362:	4603      	mov	r3, r0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800836c:	b4b0      	push	{r4, r5, r7}
 800836e:	b08f      	sub	sp, #60	; 0x3c
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008376:	4b15      	ldr	r3, [pc, #84]	; (80083cc <ai_network_data_activations_buffer_get+0x60>)
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	623b      	str	r3, [r7, #32]
 800837e:	2300      	movs	r3, #0
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	2300      	movs	r3, #0
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
 8008386:	f24e 4340 	movw	r3, #58432	; 0xe440
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2204      	movs	r2, #4
 8008396:	f362 231f 	bfi	r3, r2, #8, #24
 800839a:	633b      	str	r3, [r7, #48]	; 0x30
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <ai_network_data_activations_buffer_get+0x64>)
 800839e:	f107 040c 	add.w	r4, r7, #12
 80083a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	461d      	mov	r5, r3
 80083b2:	f107 041c 	add.w	r4, r7, #28
 80083b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80083be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	373c      	adds	r7, #60	; 0x3c
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bcb0      	pop	{r4, r5, r7}
 80083ca:	4770      	bx	lr
 80083cc:	00040440 	.word	0x00040440
 80083d0:	0801773c 	.word	0x0801773c

080083d4 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 80083d4:	b4b0      	push	{r4, r5, r7}
 80083d6:	b08f      	sub	sp, #60	; 0x3c
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <ai_network_data_weights_buffer_get+0x60>)
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	623b      	str	r3, [r7, #32]
 80083e6:	2300      	movs	r3, #0
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ea:	2300      	movs	r3, #0
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ee:	2380      	movs	r3, #128	; 0x80
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	2204      	movs	r2, #4
 80083fc:	f362 231f 	bfi	r3, r2, #8, #24
 8008400:	633b      	str	r3, [r7, #48]	; 0x30
 8008402:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <ai_network_data_weights_buffer_get+0x64>)
 8008404:	f107 040c 	add.w	r4, r7, #12
 8008408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800840a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800840e:	f107 030c 	add.w	r3, r7, #12
 8008412:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	461d      	mov	r5, r3
 8008418:	f107 041c 	add.w	r4, r7, #28
 800841c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800841e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008420:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008424:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	373c      	adds	r7, #60	; 0x3c
 800842c:	46bd      	mov	sp, r7
 800842e:	bcb0      	pop	{r4, r5, r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	40040440 	.word	0x40040440
 8008438:	0801774c 	.word	0x0801774c

0800843c <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <ai_network_data_weights_get+0x10>)

}
 8008442:	4618      	mov	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	200008e0 	.word	0x200008e0

08008450 <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	2101      	movs	r1, #1
 800845e:	4825      	ldr	r0, [pc, #148]	; (80084f4 <sine_model_configure_activations+0xa4>)
 8008460:	f000 fa50 	bl	8008904 <ai_platform_get_activations_map>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d039      	beq.n	80084de <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    dense_input_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <sine_model_configure_activations+0xa4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	333c      	adds	r3, #60	; 0x3c
 8008470:	4a21      	ldr	r2, [pc, #132]	; (80084f8 <sine_model_configure_activations+0xa8>)
 8008472:	6093      	str	r3, [r2, #8]
    dense_input_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8008474:	4b1f      	ldr	r3, [pc, #124]	; (80084f4 <sine_model_configure_activations+0xa4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	333c      	adds	r3, #60	; 0x3c
 800847a:	4a1f      	ldr	r2, [pc, #124]	; (80084f8 <sine_model_configure_activations+0xa8>)
 800847c:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800847e:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <sine_model_configure_activations+0xa4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3340      	adds	r3, #64	; 0x40
 8008484:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <sine_model_configure_activations+0xac>)
 8008486:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <sine_model_configure_activations+0xa4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3340      	adds	r3, #64	; 0x40
 800848e:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <sine_model_configure_activations+0xac>)
 8008490:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8008492:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <sine_model_configure_activations+0xa4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3340      	adds	r3, #64	; 0x40
 8008498:	4a19      	ldr	r2, [pc, #100]	; (8008500 <sine_model_configure_activations+0xb0>)
 800849a:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 800849c:	4b15      	ldr	r3, [pc, #84]	; (80084f4 <sine_model_configure_activations+0xa4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3340      	adds	r3, #64	; 0x40
 80084a2:	4a17      	ldr	r2, [pc, #92]	; (8008500 <sine_model_configure_activations+0xb0>)
 80084a4:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a16      	ldr	r2, [pc, #88]	; (8008504 <sine_model_configure_activations+0xb4>)
 80084ac:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 80084ae:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a14      	ldr	r2, [pc, #80]	; (8008504 <sine_model_configure_activations+0xb4>)
 80084b4:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3340      	adds	r3, #64	; 0x40
 80084bc:	4a12      	ldr	r2, [pc, #72]	; (8008508 <sine_model_configure_activations+0xb8>)
 80084be:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 80084c0:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3340      	adds	r3, #64	; 0x40
 80084c6:	4a10      	ldr	r2, [pc, #64]	; (8008508 <sine_model_configure_activations+0xb8>)
 80084c8:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a0f      	ldr	r2, [pc, #60]	; (800850c <sine_model_configure_activations+0xbc>)
 80084d0:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <sine_model_configure_activations+0xa4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a0d      	ldr	r2, [pc, #52]	; (800850c <sine_model_configure_activations+0xbc>)
 80084d8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80084da:	2301      	movs	r3, #1
 80084dc:	e005      	b.n	80084ea <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80084de:	2213      	movs	r2, #19
 80084e0:	2130      	movs	r1, #48	; 0x30
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa66 	bl	80089b4 <ai_platform_network_set_error>
  return false;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20001640 	.word	0x20001640
 80084f8:	200008ec 	.word	0x200008ec
 80084fc:	200008fc 	.word	0x200008fc
 8008500:	2000090c 	.word	0x2000090c
 8008504:	2000091c 	.word	0x2000091c
 8008508:	2000092c 	.word	0x2000092c
 800850c:	2000093c 	.word	0x2000093c

08008510 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	2101      	movs	r1, #1
 800851e:	483b      	ldr	r0, [pc, #236]	; (800860c <sine_model_configure_weights+0xfc>)
 8008520:	f000 f998 	bl	8008854 <ai_platform_get_weights_map>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d065      	beq.n	80085f6 <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800852a:	4b39      	ldr	r3, [pc, #228]	; (8008610 <sine_model_configure_weights+0x100>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008532:	4a37      	ldr	r2, [pc, #220]	; (8008610 <sine_model_configure_weights+0x100>)
 8008534:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8008536:	4b35      	ldr	r3, [pc, #212]	; (800860c <sine_model_configure_weights+0xfc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a35      	ldr	r2, [pc, #212]	; (8008610 <sine_model_configure_weights+0x100>)
 800853c:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 800853e:	4b33      	ldr	r3, [pc, #204]	; (800860c <sine_model_configure_weights+0xfc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a33      	ldr	r2, [pc, #204]	; (8008610 <sine_model_configure_weights+0x100>)
 8008544:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008546:	4b33      	ldr	r3, [pc, #204]	; (8008614 <sine_model_configure_weights+0x104>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800854e:	4a31      	ldr	r2, [pc, #196]	; (8008614 <sine_model_configure_weights+0x104>)
 8008550:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <sine_model_configure_weights+0xfc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3340      	adds	r3, #64	; 0x40
 8008558:	4a2e      	ldr	r2, [pc, #184]	; (8008614 <sine_model_configure_weights+0x104>)
 800855a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 800855c:	4b2b      	ldr	r3, [pc, #172]	; (800860c <sine_model_configure_weights+0xfc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3340      	adds	r3, #64	; 0x40
 8008562:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <sine_model_configure_weights+0x104>)
 8008564:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008566:	4b2c      	ldr	r3, [pc, #176]	; (8008618 <sine_model_configure_weights+0x108>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800856e:	4a2a      	ldr	r2, [pc, #168]	; (8008618 <sine_model_configure_weights+0x108>)
 8008570:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8008572:	4b26      	ldr	r3, [pc, #152]	; (800860c <sine_model_configure_weights+0xfc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3380      	adds	r3, #128	; 0x80
 8008578:	4a27      	ldr	r2, [pc, #156]	; (8008618 <sine_model_configure_weights+0x108>)
 800857a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 800857c:	4b23      	ldr	r3, [pc, #140]	; (800860c <sine_model_configure_weights+0xfc>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3380      	adds	r3, #128	; 0x80
 8008582:	4a25      	ldr	r2, [pc, #148]	; (8008618 <sine_model_configure_weights+0x108>)
 8008584:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <sine_model_configure_weights+0x10c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800858e:	4a23      	ldr	r2, [pc, #140]	; (800861c <sine_model_configure_weights+0x10c>)
 8008590:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8008592:	4b1e      	ldr	r3, [pc, #120]	; (800860c <sine_model_configure_weights+0xfc>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800859a:	4a20      	ldr	r2, [pc, #128]	; (800861c <sine_model_configure_weights+0x10c>)
 800859c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800859e:	4b1b      	ldr	r3, [pc, #108]	; (800860c <sine_model_configure_weights+0xfc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80085a6:	4a1d      	ldr	r2, [pc, #116]	; (800861c <sine_model_configure_weights+0x10c>)
 80085a8:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80085aa:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <sine_model_configure_weights+0x110>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b2:	4a1b      	ldr	r2, [pc, #108]	; (8008620 <sine_model_configure_weights+0x110>)
 80085b4:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 80085b6:	4b15      	ldr	r3, [pc, #84]	; (800860c <sine_model_configure_weights+0xfc>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80085be:	4a18      	ldr	r2, [pc, #96]	; (8008620 <sine_model_configure_weights+0x110>)
 80085c0:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <sine_model_configure_weights+0xfc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80085ca:	4a15      	ldr	r2, [pc, #84]	; (8008620 <sine_model_configure_weights+0x110>)
 80085cc:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80085ce:	4b15      	ldr	r3, [pc, #84]	; (8008624 <sine_model_configure_weights+0x114>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d6:	4a13      	ldr	r2, [pc, #76]	; (8008624 <sine_model_configure_weights+0x114>)
 80085d8:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <sine_model_configure_weights+0xfc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e2:	4a10      	ldr	r2, [pc, #64]	; (8008624 <sine_model_configure_weights+0x114>)
 80085e4:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <sine_model_configure_weights+0xfc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ee:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <sine_model_configure_weights+0x114>)
 80085f0:	60d3      	str	r3, [r2, #12]
    
    return true;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e005      	b.n	8008602 <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80085f6:	2212      	movs	r2, #18
 80085f8:	2130      	movs	r1, #48	; 0x30
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9da 	bl	80089b4 <ai_platform_network_set_error>
  return false;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20001644 	.word	0x20001644
 8008610:	2000094c 	.word	0x2000094c
 8008614:	2000095c 	.word	0x2000095c
 8008618:	2000096c 	.word	0x2000096c
 800861c:	2000097c 	.word	0x2000097c
 8008620:	2000098c 	.word	0x2000098c
 8008624:	2000099c 	.word	0x2000099c

08008628 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af02      	add	r7, sp, #8
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008632:	2300      	movs	r3, #0
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2305      	movs	r3, #5
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2301      	movs	r3, #1
 800863c:	4a04      	ldr	r2, [pc, #16]	; (8008650 <ai_sine_model_create+0x28>)
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9bd 	bl	80089c0 <ai_platform_network_create>
 8008646:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000ed0 	.word	0x20000ed0

08008654 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb61 	bl	8008d28 <ai_platform_network_init>
 8008666:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <ai_sine_model_init+0x1e>
 800866e:	2300      	movs	r3, #0
 8008670:	e028      	b.n	80086c4 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8008672:	2301      	movs	r3, #1
 8008674:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff ff49 	bl	8008510 <sine_model_configure_weights>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	4013      	ands	r3, r2
 8008686:	2b00      	cmp	r3, #0
 8008688:	bf14      	ite	ne
 800868a:	2301      	movne	r3, #1
 800868c:	2300      	moveq	r3, #0
 800868e:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fedc 	bl	8008450 <sine_model_configure_activations>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	4013      	ands	r3, r2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bf14      	ite	ne
 80086a4:	2301      	movne	r3, #1
 80086a6:	2300      	moveq	r3, #0
 80086a8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fcb8 	bl	8009020 <ai_platform_network_post_init>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	4013      	ands	r3, r2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80086c2:	7afb      	ldrb	r3, [r7, #11]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 fdab 	bl	8009238 <ai_platform_network_process>
 80086e2:	4603      	mov	r3, r0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 80086ec:	b4b0      	push	{r4, r5, r7}
 80086ee:	b08f      	sub	sp, #60	; 0x3c
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80086f6:	4b15      	ldr	r3, [pc, #84]	; (800874c <ai_sine_model_data_activations_buffer_get+0x60>)
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	623b      	str	r3, [r7, #32]
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	2300      	movs	r3, #0
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
 8008706:	2380      	movs	r3, #128	; 0x80
 8008708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	2204      	movs	r2, #4
 8008714:	f362 231f 	bfi	r3, r2, #8, #24
 8008718:	633b      	str	r3, [r7, #48]	; 0x30
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <ai_sine_model_data_activations_buffer_get+0x64>)
 800871c:	f107 040c 	add.w	r4, r7, #12
 8008720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008726:	f107 030c 	add.w	r3, r7, #12
 800872a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	461d      	mov	r5, r3
 8008730:	f107 041c 	add.w	r4, r7, #28
 8008734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008738:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800873c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	373c      	adds	r7, #60	; 0x3c
 8008744:	46bd      	mov	sp, r7
 8008746:	bcb0      	pop	{r4, r5, r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	00040440 	.word	0x00040440
 8008750:	0801776c 	.word	0x0801776c

08008754 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8008754:	b4b0      	push	{r4, r5, r7}
 8008756:	b08f      	sub	sp, #60	; 0x3c
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <ai_sine_model_data_weights_buffer_get+0x60>)
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	623b      	str	r3, [r7, #32]
 8008766:	2300      	movs	r3, #0
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
 800876a:	2300      	movs	r3, #0
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
 800876e:	f240 5304 	movw	r3, #1284	; 0x504
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008774:	2301      	movs	r3, #1
 8008776:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	2204      	movs	r2, #4
 800877e:	f362 231f 	bfi	r3, r2, #8, #24
 8008782:	633b      	str	r3, [r7, #48]	; 0x30
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <ai_sine_model_data_weights_buffer_get+0x64>)
 8008786:	f107 040c 	add.w	r4, r7, #12
 800878a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800878c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008790:	f107 030c 	add.w	r3, r7, #12
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	461d      	mov	r5, r3
 800879a:	f107 041c 	add.w	r4, r7, #28
 800879e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80087a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	373c      	adds	r7, #60	; 0x3c
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bcb0      	pop	{r4, r5, r7}
 80087b2:	4770      	bx	lr
 80087b4:	40040440 	.word	0x40040440
 80087b8:	0801777c 	.word	0x0801777c

080087bc <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <ai_sine_model_data_weights_get+0x10>)

}
 80087c2:	4618      	mov	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20000f74 	.word	0x20000f74

080087d0 <ai_buffer_get_size>:
 80087d0:	b368      	cbz	r0, 800882e <ai_buffer_get_size+0x5e>
 80087d2:	4b17      	ldr	r3, [pc, #92]	; (8008830 <ai_buffer_get_size+0x60>)
 80087d4:	4a17      	ldr	r2, [pc, #92]	; (8008834 <ai_buffer_get_size+0x64>)
 80087d6:	b410      	push	{r4}
 80087d8:	6804      	ldr	r4, [r0, #0]
 80087da:	4023      	ands	r3, r4
 80087dc:	4293      	cmp	r3, r2
 80087de:	d123      	bne.n	8008828 <ai_buffer_get_size+0x58>
 80087e0:	b311      	cbz	r1, 8008828 <ai_buffer_get_size+0x58>
 80087e2:	6984      	ldr	r4, [r0, #24]
 80087e4:	6862      	ldr	r2, [r4, #4]
 80087e6:	321f      	adds	r2, #31
 80087e8:	f022 021f 	bic.w	r2, r2, #31
 80087ec:	7d03      	ldrb	r3, [r0, #20]
 80087ee:	6941      	ldr	r1, [r0, #20]
 80087f0:	f1a3 0301 	sub.w	r3, r3, #1
 80087f4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80087f8:	fab3 f383 	clz	r3, r3
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008802:	da0c      	bge.n	800881e <ai_buffer_get_size+0x4e>
 8008804:	2b01      	cmp	r3, #1
 8008806:	d103      	bne.n	8008810 <ai_buffer_get_size+0x40>
 8008808:	2802      	cmp	r0, #2
 800880a:	f04f 0302 	mov.w	r3, #2
 800880e:	d006      	beq.n	800881e <ai_buffer_get_size+0x4e>
 8008810:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008814:	3301      	adds	r3, #1
 8008816:	4298      	cmp	r0, r3
 8008818:	fb01 f202 	mul.w	r2, r1, r2
 800881c:	d1f2      	bne.n	8008804 <ai_buffer_get_size+0x34>
 800881e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	6984      	ldr	r4, [r0, #24]
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	e7de      	b.n	80087ec <ai_buffer_get_size+0x1c>
 800882e:	4770      	bx	lr
 8008830:	017fffff 	.word	0x017fffff
 8008834:	000400c0 	.word	0x000400c0

08008838 <ai_buffer_array_sane>:
 8008838:	b138      	cbz	r0, 800884a <ai_buffer_array_sane+0x12>
 800883a:	6843      	ldr	r3, [r0, #4]
 800883c:	b123      	cbz	r3, 8008848 <ai_buffer_array_sane+0x10>
 800883e:	8840      	ldrh	r0, [r0, #2]
 8008840:	3800      	subs	r0, #0
 8008842:	bf18      	it	ne
 8008844:	2001      	movne	r0, #1
 8008846:	4770      	bx	lr
 8008848:	4618      	mov	r0, r3
 800884a:	4770      	bx	lr

0800884c <_ai_platform_acquire_crc>:
 800884c:	2001      	movs	r0, #1
 800884e:	4770      	bx	lr

08008850 <_ai_platform_release_crc>:
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <ai_platform_get_weights_map>:
 8008854:	2900      	cmp	r1, #0
 8008856:	bf18      	it	ne
 8008858:	2800      	cmpne	r0, #0
 800885a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885c:	bf0c      	ite	eq
 800885e:	2401      	moveq	r4, #1
 8008860:	2400      	movne	r4, #0
 8008862:	2a00      	cmp	r2, #0
 8008864:	bf08      	it	eq
 8008866:	f044 0401 	orreq.w	r4, r4, #1
 800886a:	b114      	cbz	r4, 8008872 <ai_platform_get_weights_map+0x1e>
 800886c:	2400      	movs	r4, #0
 800886e:	4620      	mov	r0, r4
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008872:	4616      	mov	r6, r2
 8008874:	4b22      	ldr	r3, [pc, #136]	; (8008900 <ai_platform_get_weights_map+0xac>)
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	4605      	mov	r5, r0
 800887a:	460f      	mov	r7, r1
 800887c:	429a      	cmp	r2, r3
 800887e:	d022      	beq.n	80088c6 <ai_platform_get_weights_map+0x72>
 8008880:	6870      	ldr	r0, [r6, #4]
 8008882:	2800      	cmp	r0, #0
 8008884:	d0f2      	beq.n	800886c <ai_platform_get_weights_map+0x18>
 8008886:	6806      	ldr	r6, [r0, #0]
 8008888:	429e      	cmp	r6, r3
 800888a:	d006      	beq.n	800889a <ai_platform_get_weights_map+0x46>
 800888c:	f1a1 0401 	sub.w	r4, r1, #1
 8008890:	6028      	str	r0, [r5, #0]
 8008892:	fab4 f484 	clz	r4, r4
 8008896:	0964      	lsrs	r4, r4, #5
 8008898:	e7e9      	b.n	800886e <ai_platform_get_weights_map+0x1a>
 800889a:	3d04      	subs	r5, #4
 800889c:	4602      	mov	r2, r0
 800889e:	4621      	mov	r1, r4
 80088a0:	e000      	b.n	80088a4 <ai_platform_get_weights_map+0x50>
 80088a2:	4619      	mov	r1, r3
 80088a4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80088a8:	42b3      	cmp	r3, r6
 80088aa:	d025      	beq.n	80088f8 <ai_platform_get_weights_map+0xa4>
 80088ac:	f845 3f04 	str.w	r3, [r5, #4]!
 80088b0:	1c4b      	adds	r3, r1, #1
 80088b2:	429f      	cmp	r7, r3
 80088b4:	d8f5      	bhi.n	80088a2 <ai_platform_get_weights_map+0x4e>
 80088b6:	d1da      	bne.n	800886e <ai_platform_get_weights_map+0x1a>
 80088b8:	3102      	adds	r1, #2
 80088ba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80088be:	42b3      	cmp	r3, r6
 80088c0:	d1d5      	bne.n	800886e <ai_platform_get_weights_map+0x1a>
 80088c2:	2401      	movs	r4, #1
 80088c4:	e7d3      	b.n	800886e <ai_platform_get_weights_map+0x1a>
 80088c6:	1d30      	adds	r0, r6, #4
 80088c8:	f7ff ffb6 	bl	8008838 <ai_buffer_array_sane>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0cd      	beq.n	800886c <ai_platform_get_weights_map+0x18>
 80088d0:	88f3      	ldrh	r3, [r6, #6]
 80088d2:	429f      	cmp	r7, r3
 80088d4:	d1ca      	bne.n	800886c <ai_platform_get_weights_map+0x18>
 80088d6:	3d04      	subs	r5, #4
 80088d8:	4622      	mov	r2, r4
 80088da:	68b3      	ldr	r3, [r6, #8]
 80088dc:	4423      	add	r3, r4
 80088de:	341c      	adds	r4, #28
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b123      	cbz	r3, 80088ee <ai_platform_get_weights_map+0x9a>
 80088e4:	3201      	adds	r2, #1
 80088e6:	f845 3f04 	str.w	r3, [r5, #4]!
 80088ea:	4297      	cmp	r7, r2
 80088ec:	d8f5      	bhi.n	80088da <ai_platform_get_weights_map+0x86>
 80088ee:	1abc      	subs	r4, r7, r2
 80088f0:	fab4 f484 	clz	r4, r4
 80088f4:	0964      	lsrs	r4, r4, #5
 80088f6:	e7ba      	b.n	800886e <ai_platform_get_weights_map+0x1a>
 80088f8:	428f      	cmp	r7, r1
 80088fa:	d1b8      	bne.n	800886e <ai_platform_get_weights_map+0x1a>
 80088fc:	e7e1      	b.n	80088c2 <ai_platform_get_weights_map+0x6e>
 80088fe:	bf00      	nop
 8008900:	a1facade 	.word	0xa1facade

08008904 <ai_platform_get_activations_map>:
 8008904:	2900      	cmp	r1, #0
 8008906:	bf18      	it	ne
 8008908:	2800      	cmpne	r0, #0
 800890a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890c:	bf0c      	ite	eq
 800890e:	2401      	moveq	r4, #1
 8008910:	2400      	movne	r4, #0
 8008912:	2a00      	cmp	r2, #0
 8008914:	bf08      	it	eq
 8008916:	f044 0401 	orreq.w	r4, r4, #1
 800891a:	b114      	cbz	r4, 8008922 <ai_platform_get_activations_map+0x1e>
 800891c:	2400      	movs	r4, #0
 800891e:	4620      	mov	r0, r4
 8008920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008922:	4616      	mov	r6, r2
 8008924:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <ai_platform_get_activations_map+0xac>)
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	4605      	mov	r5, r0
 800892a:	460f      	mov	r7, r1
 800892c:	429a      	cmp	r2, r3
 800892e:	d022      	beq.n	8008976 <ai_platform_get_activations_map+0x72>
 8008930:	6a30      	ldr	r0, [r6, #32]
 8008932:	2800      	cmp	r0, #0
 8008934:	d0f2      	beq.n	800891c <ai_platform_get_activations_map+0x18>
 8008936:	6806      	ldr	r6, [r0, #0]
 8008938:	429e      	cmp	r6, r3
 800893a:	d006      	beq.n	800894a <ai_platform_get_activations_map+0x46>
 800893c:	f1a1 0401 	sub.w	r4, r1, #1
 8008940:	6028      	str	r0, [r5, #0]
 8008942:	fab4 f484 	clz	r4, r4
 8008946:	0964      	lsrs	r4, r4, #5
 8008948:	e7e9      	b.n	800891e <ai_platform_get_activations_map+0x1a>
 800894a:	3d04      	subs	r5, #4
 800894c:	4602      	mov	r2, r0
 800894e:	4621      	mov	r1, r4
 8008950:	e000      	b.n	8008954 <ai_platform_get_activations_map+0x50>
 8008952:	4619      	mov	r1, r3
 8008954:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8008958:	42b3      	cmp	r3, r6
 800895a:	d026      	beq.n	80089aa <ai_platform_get_activations_map+0xa6>
 800895c:	f845 3f04 	str.w	r3, [r5, #4]!
 8008960:	1c4b      	adds	r3, r1, #1
 8008962:	429f      	cmp	r7, r3
 8008964:	d8f5      	bhi.n	8008952 <ai_platform_get_activations_map+0x4e>
 8008966:	d1da      	bne.n	800891e <ai_platform_get_activations_map+0x1a>
 8008968:	3102      	adds	r1, #2
 800896a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800896e:	42b3      	cmp	r3, r6
 8008970:	d1d5      	bne.n	800891e <ai_platform_get_activations_map+0x1a>
 8008972:	2401      	movs	r4, #1
 8008974:	e7d3      	b.n	800891e <ai_platform_get_activations_map+0x1a>
 8008976:	f106 000c 	add.w	r0, r6, #12
 800897a:	f7ff ff5d 	bl	8008838 <ai_buffer_array_sane>
 800897e:	2800      	cmp	r0, #0
 8008980:	d0cc      	beq.n	800891c <ai_platform_get_activations_map+0x18>
 8008982:	89f3      	ldrh	r3, [r6, #14]
 8008984:	429f      	cmp	r7, r3
 8008986:	d1c9      	bne.n	800891c <ai_platform_get_activations_map+0x18>
 8008988:	3d04      	subs	r5, #4
 800898a:	4622      	mov	r2, r4
 800898c:	6933      	ldr	r3, [r6, #16]
 800898e:	4423      	add	r3, r4
 8008990:	341c      	adds	r4, #28
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	b123      	cbz	r3, 80089a0 <ai_platform_get_activations_map+0x9c>
 8008996:	3201      	adds	r2, #1
 8008998:	f845 3f04 	str.w	r3, [r5, #4]!
 800899c:	4297      	cmp	r7, r2
 800899e:	d8f5      	bhi.n	800898c <ai_platform_get_activations_map+0x88>
 80089a0:	1abc      	subs	r4, r7, r2
 80089a2:	fab4 f484 	clz	r4, r4
 80089a6:	0964      	lsrs	r4, r4, #5
 80089a8:	e7b9      	b.n	800891e <ai_platform_get_activations_map+0x1a>
 80089aa:	428f      	cmp	r7, r1
 80089ac:	d1b7      	bne.n	800891e <ai_platform_get_activations_map+0x1a>
 80089ae:	e7e0      	b.n	8008972 <ai_platform_get_activations_map+0x6e>
 80089b0:	a1facade 	.word	0xa1facade

080089b4 <ai_platform_network_set_error>:
 80089b4:	b110      	cbz	r0, 80089bc <ai_platform_network_set_error+0x8>
 80089b6:	3010      	adds	r0, #16
 80089b8:	f001 b978 	b.w	8009cac <core_set_error>
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop

080089c0 <ai_platform_network_create>:
 80089c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089c4:	b083      	sub	sp, #12
 80089c6:	4604      	mov	r4, r0
 80089c8:	4615      	mov	r5, r2
 80089ca:	461e      	mov	r6, r3
 80089cc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80089d0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80089d4:	f7ff ff3a 	bl	800884c <_ai_platform_acquire_crc>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f000 80ba 	beq.w	8008b52 <ai_platform_network_create+0x192>
 80089de:	4bb3      	ldr	r3, [pc, #716]	; (8008cac <ai_platform_network_create+0x2ec>)
 80089e0:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80089e4:	4601      	mov	r1, r0
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ec:	eb03 020c 	add.w	r2, r3, ip
 80089f0:	2a01      	cmp	r2, #1
 80089f2:	f240 80a5 	bls.w	8008b40 <ai_platform_network_create+0x180>
 80089f6:	f240 4249 	movw	r2, #1097	; 0x449
 80089fa:	4293      	cmp	r3, r2
 80089fc:	f000 80a0 	beq.w	8008b40 <ai_platform_network_create+0x180>
 8008a00:	4aab      	ldr	r2, [pc, #684]	; (8008cb0 <ai_platform_network_create+0x2f0>)
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a08:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008a0c:	f000 80b7 	beq.w	8008b7e <ai_platform_network_create+0x1be>
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	f240 4c83 	movw	ip, #1155	; 0x483
 8008a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a1a:	4563      	cmp	r3, ip
 8008a1c:	f000 809f 	beq.w	8008b5e <ai_platform_network_create+0x19e>
 8008a20:	6813      	ldr	r3, [r2, #0]
 8008a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a26:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008a2a:	f040 8090 	bne.w	8008b4e <ai_platform_network_create+0x18e>
 8008a2e:	4ba1      	ldr	r3, [pc, #644]	; (8008cb4 <ai_platform_network_create+0x2f4>)
 8008a30:	2218      	movs	r2, #24
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	2a18      	cmp	r2, #24
 8008a38:	f040 8089 	bne.w	8008b4e <ai_platform_network_create+0x18e>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	d1fc      	bne.n	8008a40 <ai_platform_network_create+0x80>
 8008a46:	4608      	mov	r0, r1
 8008a48:	f7ff ff02 	bl	8008850 <_ai_platform_release_crc>
 8008a4c:	4a9a      	ldr	r2, [pc, #616]	; (8008cb8 <ai_platform_network_create+0x2f8>)
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	f7ff fef9 	bl	800884c <_ai_platform_acquire_crc>
 8008a5a:	4b94      	ldr	r3, [pc, #592]	; (8008cac <ai_platform_network_create+0x2ec>)
 8008a5c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a66:	189a      	adds	r2, r3, r2
 8008a68:	2a01      	cmp	r2, #1
 8008a6a:	f240 809e 	bls.w	8008baa <ai_platform_network_create+0x1ea>
 8008a6e:	f240 4249 	movw	r2, #1097	; 0x449
 8008a72:	4293      	cmp	r3, r2
 8008a74:	f000 8099 	beq.w	8008baa <ai_platform_network_create+0x1ea>
 8008a78:	4a8d      	ldr	r2, [pc, #564]	; (8008cb0 <ai_platform_network_create+0x2f0>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a80:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008a84:	f000 809f 	beq.w	8008bc6 <ai_platform_network_create+0x206>
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	f240 4183 	movw	r1, #1155	; 0x483
 8008a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a92:	428b      	cmp	r3, r1
 8008a94:	f000 80c0 	beq.w	8008c18 <ai_platform_network_create+0x258>
 8008a98:	6813      	ldr	r3, [r2, #0]
 8008a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a9e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008aa2:	f000 80d9 	beq.w	8008c58 <ai_platform_network_create+0x298>
 8008aa6:	f7ff fed3 	bl	8008850 <_ai_platform_release_crc>
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	f000 80b1 	beq.w	8008c12 <ai_platform_network_create+0x252>
 8008ab0:	4b82      	ldr	r3, [pc, #520]	; (8008cbc <ai_platform_network_create+0x2fc>)
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	6025      	str	r5, [r4, #0]
 8008ab6:	f001 f8f7 	bl	8009ca8 <core_init>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	f000 8095 	beq.w	8008bea <ai_platform_network_create+0x22a>
 8008ac0:	4a7d      	ldr	r2, [pc, #500]	; (8008cb8 <ai_platform_network_create+0x2f8>)
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	f7ff febf 	bl	800884c <_ai_platform_acquire_crc>
 8008ace:	4b77      	ldr	r3, [pc, #476]	; (8008cac <ai_platform_network_create+0x2ec>)
 8008ad0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ada:	185a      	adds	r2, r3, r1
 8008adc:	2a01      	cmp	r2, #1
 8008ade:	f240 80ad 	bls.w	8008c3c <ai_platform_network_create+0x27c>
 8008ae2:	f240 4249 	movw	r2, #1097	; 0x449
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f000 80a8 	beq.w	8008c3c <ai_platform_network_create+0x27c>
 8008aec:	4a70      	ldr	r2, [pc, #448]	; (8008cb0 <ai_platform_network_create+0x2f0>)
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008af4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008af8:	f000 80bc 	beq.w	8008c74 <ai_platform_network_create+0x2b4>
 8008afc:	6813      	ldr	r3, [r2, #0]
 8008afe:	f240 4183 	movw	r1, #1155	; 0x483
 8008b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b06:	428b      	cmp	r3, r1
 8008b08:	f000 80e2 	beq.w	8008cd0 <ai_platform_network_create+0x310>
 8008b0c:	6813      	ldr	r3, [r2, #0]
 8008b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b12:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008b16:	f000 80ed 	beq.w	8008cf4 <ai_platform_network_create+0x334>
 8008b1a:	f7ff fe99 	bl	8008850 <_ai_platform_release_crc>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	f00b f906 	bl	8013d34 <ai_version_get>
 8008b28:	4681      	mov	r9, r0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2105      	movs	r1, #5
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f00b f900 	bl	8013d34 <ai_version_get>
 8008b34:	4581      	cmp	r9, r0
 8008b36:	f000 80af 	beq.w	8008c98 <ai_platform_network_create+0x2d8>
 8008b3a:	f04f 0901 	mov.w	r9, #1
 8008b3e:	e056      	b.n	8008bee <ai_platform_network_create+0x22e>
 8008b40:	4b5c      	ldr	r3, [pc, #368]	; (8008cb4 <ai_platform_network_create+0x2f4>)
 8008b42:	2218      	movs	r2, #24
 8008b44:	609a      	str	r2, [r3, #8]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	2a18      	cmp	r2, #24
 8008b4a:	d028      	beq.n	8008b9e <ai_platform_network_create+0x1de>
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	f7ff fe7f 	bl	8008850 <_ai_platform_release_crc>
 8008b52:	f244 1333 	movw	r3, #16691	; 0x4133
 8008b56:	4618      	mov	r0, r3
 8008b58:	b003      	add	sp, #12
 8008b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b5e:	4a58      	ldr	r2, [pc, #352]	; (8008cc0 <ai_platform_network_create+0x300>)
 8008b60:	2318      	movs	r3, #24
 8008b62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b6a:	2b18      	cmp	r3, #24
 8008b6c:	d1ef      	bne.n	8008b4e <ai_platform_network_create+0x18e>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1fb      	bne.n	8008b74 <ai_platform_network_create+0x1b4>
 8008b7c:	e763      	b.n	8008a46 <ai_platform_network_create+0x86>
 8008b7e:	4a50      	ldr	r2, [pc, #320]	; (8008cc0 <ai_platform_network_create+0x300>)
 8008b80:	2318      	movs	r3, #24
 8008b82:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b86:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b8a:	2b18      	cmp	r3, #24
 8008b8c:	d1df      	bne.n	8008b4e <ai_platform_network_create+0x18e>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1fb      	bne.n	8008b94 <ai_platform_network_create+0x1d4>
 8008b9c:	e753      	b.n	8008a46 <ai_platform_network_create+0x86>
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	609a      	str	r2, [r3, #8]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	d1fc      	bne.n	8008ba2 <ai_platform_network_create+0x1e2>
 8008ba8:	e74d      	b.n	8008a46 <ai_platform_network_create+0x86>
 8008baa:	4a42      	ldr	r2, [pc, #264]	; (8008cb4 <ai_platform_network_create+0x2f4>)
 8008bac:	2301      	movs	r3, #1
 8008bae:	6093      	str	r3, [r2, #8]
 8008bb0:	6891      	ldr	r1, [r2, #8]
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d1fc      	bne.n	8008bb0 <ai_platform_network_create+0x1f0>
 8008bb6:	4b43      	ldr	r3, [pc, #268]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	f43f af71 	beq.w	8008aa6 <ai_platform_network_create+0xe6>
 8008bc4:	e7fe      	b.n	8008bc4 <ai_platform_network_create+0x204>
 8008bc6:	4a3e      	ldr	r2, [pc, #248]	; (8008cc0 <ai_platform_network_create+0x300>)
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008bce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1fb      	bne.n	8008bce <ai_platform_network_create+0x20e>
 8008bd6:	4b3b      	ldr	r3, [pc, #236]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008bd8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008bdc:	4b3a      	ldr	r3, [pc, #232]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008bde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008be2:	429a      	cmp	r2, r3
 8008be4:	f43f af5f 	beq.w	8008aa6 <ai_platform_network_create+0xe6>
 8008be8:	e7fe      	b.n	8008be8 <ai_platform_network_create+0x228>
 8008bea:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	2410      	movs	r4, #16
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f00b f89b 	bl	8013d34 <ai_version_get>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	64a8      	str	r0, [r5, #72]	; 0x48
 8008c02:	f369 0307 	bfi	r3, r9, #0, #8
 8008c06:	f364 231f 	bfi	r3, r4, #8, #24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	b003      	add	sp, #12
 8008c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c12:	f241 0310 	movw	r3, #4112	; 0x1010
 8008c16:	e79e      	b.n	8008b56 <ai_platform_network_create+0x196>
 8008c18:	4a29      	ldr	r2, [pc, #164]	; (8008cc0 <ai_platform_network_create+0x300>)
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008c20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1fb      	bne.n	8008c20 <ai_platform_network_create+0x260>
 8008c28:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008c2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008c2e:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008c30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008c34:	429a      	cmp	r2, r3
 8008c36:	f43f af36 	beq.w	8008aa6 <ai_platform_network_create+0xe6>
 8008c3a:	e7fe      	b.n	8008c3a <ai_platform_network_create+0x27a>
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <ai_platform_network_create+0x2f4>)
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6093      	str	r3, [r2, #8]
 8008c42:	6893      	ldr	r3, [r2, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1fc      	bne.n	8008c42 <ai_platform_network_create+0x282>
 8008c48:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	f43f af62 	beq.w	8008b1a <ai_platform_network_create+0x15a>
 8008c56:	e7fe      	b.n	8008c56 <ai_platform_network_create+0x296>
 8008c58:	4a16      	ldr	r2, [pc, #88]	; (8008cb4 <ai_platform_network_create+0x2f4>)
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	6093      	str	r3, [r2, #8]
 8008c5e:	6893      	ldr	r3, [r2, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1fc      	bne.n	8008c5e <ai_platform_network_create+0x29e>
 8008c64:	4b17      	ldr	r3, [pc, #92]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008c6a:	6812      	ldr	r2, [r2, #0]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	f43f af1a 	beq.w	8008aa6 <ai_platform_network_create+0xe6>
 8008c72:	e7fe      	b.n	8008c72 <ai_platform_network_create+0x2b2>
 8008c74:	4a12      	ldr	r2, [pc, #72]	; (8008cc0 <ai_platform_network_create+0x300>)
 8008c76:	2301      	movs	r3, #1
 8008c78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008c7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1fb      	bne.n	8008c7c <ai_platform_network_create+0x2bc>
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <ai_platform_network_create+0x304>)
 8008c86:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <ai_platform_network_create+0x308>)
 8008c8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008c90:	429a      	cmp	r2, r3
 8008c92:	f43f af42 	beq.w	8008b1a <ai_platform_network_create+0x15a>
 8008c96:	e7fe      	b.n	8008c96 <ai_platform_network_create+0x2d6>
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <ai_platform_network_create+0x30c>)
 8008c9a:	a801      	add	r0, sp, #4
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f002 fe1d 	bl	800b8dc <ai_check_custom_types>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d034      	beq.n	8008d10 <ai_platform_network_create+0x350>
 8008ca6:	2400      	movs	r4, #0
 8008ca8:	46a1      	mov	r9, r4
 8008caa:	e7a3      	b.n	8008bf4 <ai_platform_network_create+0x234>
 8008cac:	e0042000 	.word	0xe0042000
 8008cb0:	5c001000 	.word	0x5c001000
 8008cb4:	40023000 	.word	0x40023000
 8008cb8:	e0002000 	.word	0xe0002000
 8008cbc:	a1c00100 	.word	0xa1c00100
 8008cc0:	58024000 	.word	0x58024000
 8008cc4:	f407a5c2 	.word	0xf407a5c2
 8008cc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ccc:	84048403 	.word	0x84048403
 8008cd0:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <ai_platform_network_create+0x358>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008cd8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	d1fb      	bne.n	8008cd8 <ai_platform_network_create+0x318>
 8008ce0:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <ai_platform_network_create+0x35c>)
 8008ce2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008ce6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008cea:	4b0d      	ldr	r3, [pc, #52]	; (8008d20 <ai_platform_network_create+0x360>)
 8008cec:	429a      	cmp	r2, r3
 8008cee:	f43f af14 	beq.w	8008b1a <ai_platform_network_create+0x15a>
 8008cf2:	e7fe      	b.n	8008cf2 <ai_platform_network_create+0x332>
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <ai_platform_network_create+0x364>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	609a      	str	r2, [r3, #8]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	d1fc      	bne.n	8008cfa <ai_platform_network_create+0x33a>
 8008d00:	4a06      	ldr	r2, [pc, #24]	; (8008d1c <ai_platform_network_create+0x35c>)
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <ai_platform_network_create+0x360>)
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f43f af06 	beq.w	8008b1a <ai_platform_network_create+0x15a>
 8008d0e:	e7fe      	b.n	8008d0e <ai_platform_network_create+0x34e>
 8008d10:	f04f 0902 	mov.w	r9, #2
 8008d14:	e76b      	b.n	8008bee <ai_platform_network_create+0x22e>
 8008d16:	bf00      	nop
 8008d18:	58024000 	.word	0x58024000
 8008d1c:	f407a5c2 	.word	0xf407a5c2
 8008d20:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d24:	40023000 	.word	0x40023000

08008d28 <ai_platform_network_init>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d04f      	beq.n	8008dd0 <ai_platform_network_init+0xa8>
 8008d30:	4bad      	ldr	r3, [pc, #692]	; (8008fe8 <ai_platform_network_init+0x2c0>)
 8008d32:	4604      	mov	r4, r0
 8008d34:	6802      	ldr	r2, [r0, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d14a      	bne.n	8008dd0 <ai_platform_network_init+0xa8>
 8008d3a:	4aac      	ldr	r2, [pc, #688]	; (8008fec <ai_platform_network_init+0x2c4>)
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	f7ff fd81 	bl	800884c <_ai_platform_acquire_crc>
 8008d4a:	4ba9      	ldr	r3, [pc, #676]	; (8008ff0 <ai_platform_network_init+0x2c8>)
 8008d4c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d56:	189a      	adds	r2, r3, r2
 8008d58:	2a01      	cmp	r2, #1
 8008d5a:	d975      	bls.n	8008e48 <ai_platform_network_init+0x120>
 8008d5c:	f240 4249 	movw	r2, #1097	; 0x449
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d071      	beq.n	8008e48 <ai_platform_network_init+0x120>
 8008d64:	4aa3      	ldr	r2, [pc, #652]	; (8008ff4 <ai_platform_network_init+0x2cc>)
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d6c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008d70:	f000 8088 	beq.w	8008e84 <ai_platform_network_init+0x15c>
 8008d74:	6813      	ldr	r3, [r2, #0]
 8008d76:	f240 4183 	movw	r1, #1155	; 0x483
 8008d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d7e:	428b      	cmp	r3, r1
 8008d80:	f000 80cc 	beq.w	8008f1c <ai_platform_network_init+0x1f4>
 8008d84:	6813      	ldr	r3, [r2, #0]
 8008d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d8a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008d8e:	f000 80f5 	beq.w	8008f7c <ai_platform_network_init+0x254>
 8008d92:	f7ff fd5d 	bl	8008850 <_ai_platform_release_crc>
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	f000 80fe 	beq.w	8008f98 <ai_platform_network_init+0x270>
 8008d9c:	4b96      	ldr	r3, [pc, #600]	; (8008ff8 <ai_platform_network_init+0x2d0>)
 8008d9e:	682a      	ldr	r2, [r5, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	f040 8081 	bne.w	8008ea8 <ai_platform_network_init+0x180>
 8008da6:	692b      	ldr	r3, [r5, #16]
 8008da8:	89ae      	ldrh	r6, [r5, #12]
 8008daa:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8008dae:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8008db2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008db4:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8008db8:	2303      	movs	r3, #3
 8008dba:	84a6      	strh	r6, [r4, #36]	; 0x24
 8008dbc:	4626      	mov	r6, r4
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8008dc4:	60e3      	str	r3, [r4, #12]
 8008dc6:	f002 fdb1 	bl	800b92c <ai_layers_init_all>
 8008dca:	4630      	mov	r0, r6
 8008dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd0:	4a86      	ldr	r2, [pc, #536]	; (8008fec <ai_platform_network_init+0x2c4>)
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	f7ff fd37 	bl	800884c <_ai_platform_acquire_crc>
 8008dde:	4b84      	ldr	r3, [pc, #528]	; (8008ff0 <ai_platform_network_init+0x2c8>)
 8008de0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dea:	185a      	adds	r2, r3, r1
 8008dec:	2a01      	cmp	r2, #1
 8008dee:	d91e      	bls.n	8008e2e <ai_platform_network_init+0x106>
 8008df0:	f240 4249 	movw	r2, #1097	; 0x449
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01a      	beq.n	8008e2e <ai_platform_network_init+0x106>
 8008df8:	4a7e      	ldr	r2, [pc, #504]	; (8008ff4 <ai_platform_network_init+0x2cc>)
 8008dfa:	6813      	ldr	r3, [r2, #0]
 8008dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008e04:	d02d      	beq.n	8008e62 <ai_platform_network_init+0x13a>
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	f240 4183 	movw	r1, #1155	; 0x483
 8008e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e10:	428b      	cmp	r3, r1
 8008e12:	d072      	beq.n	8008efa <ai_platform_network_init+0x1d2>
 8008e14:	6813      	ldr	r3, [r2, #0]
 8008e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008e1e:	f000 809f 	beq.w	8008f60 <ai_platform_network_init+0x238>
 8008e22:	2600      	movs	r6, #0
 8008e24:	f7ff fd14 	bl	8008850 <_ai_platform_release_crc>
 8008e28:	4630      	mov	r0, r6
 8008e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2e:	4a73      	ldr	r2, [pc, #460]	; (8008ffc <ai_platform_network_init+0x2d4>)
 8008e30:	2301      	movs	r3, #1
 8008e32:	6093      	str	r3, [r2, #8]
 8008e34:	6893      	ldr	r3, [r2, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1fc      	bne.n	8008e34 <ai_platform_network_init+0x10c>
 8008e3a:	4971      	ldr	r1, [pc, #452]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008e3c:	4b71      	ldr	r3, [pc, #452]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008e3e:	6011      	str	r1, [r2, #0]
 8008e40:	6812      	ldr	r2, [r2, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d0ed      	beq.n	8008e22 <ai_platform_network_init+0xfa>
 8008e46:	e7fe      	b.n	8008e46 <ai_platform_network_init+0x11e>
 8008e48:	4a6c      	ldr	r2, [pc, #432]	; (8008ffc <ai_platform_network_init+0x2d4>)
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	6093      	str	r3, [r2, #8]
 8008e4e:	6893      	ldr	r3, [r2, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1fc      	bne.n	8008e4e <ai_platform_network_init+0x126>
 8008e54:	4b6a      	ldr	r3, [pc, #424]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	4b6a      	ldr	r3, [pc, #424]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d098      	beq.n	8008d92 <ai_platform_network_init+0x6a>
 8008e60:	e7fe      	b.n	8008e60 <ai_platform_network_init+0x138>
 8008e62:	4a69      	ldr	r2, [pc, #420]	; (8009008 <ai_platform_network_init+0x2e0>)
 8008e64:	2301      	movs	r3, #1
 8008e66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1fb      	bne.n	8008e6a <ai_platform_network_init+0x142>
 8008e72:	4963      	ldr	r1, [pc, #396]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008e74:	4b63      	ldr	r3, [pc, #396]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008e76:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008e7a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d0cf      	beq.n	8008e22 <ai_platform_network_init+0xfa>
 8008e82:	e7fe      	b.n	8008e82 <ai_platform_network_init+0x15a>
 8008e84:	4a60      	ldr	r2, [pc, #384]	; (8009008 <ai_platform_network_init+0x2e0>)
 8008e86:	2301      	movs	r3, #1
 8008e88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1fb      	bne.n	8008e8c <ai_platform_network_init+0x164>
 8008e94:	4b5a      	ldr	r3, [pc, #360]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008e96:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008e9a:	4b5a      	ldr	r3, [pc, #360]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008e9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	f43f af76 	beq.w	8008d92 <ai_platform_network_init+0x6a>
 8008ea6:	e7fe      	b.n	8008ea6 <ai_platform_network_init+0x17e>
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f105 081c 	add.w	r8, r5, #28
 8008eb0:	686e      	ldr	r6, [r5, #4]
 8008eb2:	f7ff fc8d 	bl	80087d0 <ai_buffer_get_size>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	2101      	movs	r1, #1
 8008eba:	4640      	mov	r0, r8
 8008ebc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8008ec0:	f7ff fc86 	bl	80087d0 <ai_buffer_get_size>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	d13b      	bne.n	8008f40 <ai_platform_network_init+0x218>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d079      	beq.n	8008fc0 <ai_platform_network_init+0x298>
 8008ecc:	f1b9 0f00 	cmp.w	r9, #0
 8008ed0:	d07a      	beq.n	8008fc8 <ai_platform_network_init+0x2a0>
 8008ed2:	f04f 0c01 	mov.w	ip, #1
 8008ed6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008ed8:	2600      	movs	r6, #0
 8008eda:	83e7      	strh	r7, [r4, #30]
 8008edc:	4563      	cmp	r3, ip
 8008ede:	83a6      	strh	r6, [r4, #28]
 8008ee0:	d361      	bcc.n	8008fa6 <ai_platform_network_init+0x27e>
 8008ee2:	f1bc 0f00 	cmp.w	ip, #0
 8008ee6:	d07c      	beq.n	8008fe2 <ai_platform_network_init+0x2ba>
 8008ee8:	4647      	mov	r7, r8
 8008eea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008eec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ef0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008ef4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008ef8:	e75e      	b.n	8008db8 <ai_platform_network_init+0x90>
 8008efa:	4a43      	ldr	r2, [pc, #268]	; (8009008 <ai_platform_network_init+0x2e0>)
 8008efc:	2301      	movs	r3, #1
 8008efe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f02:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1fb      	bne.n	8008f02 <ai_platform_network_init+0x1da>
 8008f0a:	493d      	ldr	r1, [pc, #244]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008f0c:	4b3d      	ldr	r3, [pc, #244]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008f0e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008f12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d083      	beq.n	8008e22 <ai_platform_network_init+0xfa>
 8008f1a:	e7fe      	b.n	8008f1a <ai_platform_network_init+0x1f2>
 8008f1c:	4a3a      	ldr	r2, [pc, #232]	; (8009008 <ai_platform_network_init+0x2e0>)
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1fb      	bne.n	8008f24 <ai_platform_network_init+0x1fc>
 8008f2c:	4b34      	ldr	r3, [pc, #208]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008f2e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008f32:	4b34      	ldr	r3, [pc, #208]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008f34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	f43f af2a 	beq.w	8008d92 <ai_platform_network_init+0x6a>
 8008f3e:	e7fe      	b.n	8008f3e <ai_platform_network_init+0x216>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d137      	bne.n	8008fb4 <ai_platform_network_init+0x28c>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4684      	mov	ip, r0
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	d044      	beq.n	8008fd6 <ai_platform_network_init+0x2ae>
 8008f4c:	8be6      	ldrh	r6, [r4, #30]
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d15c      	bne.n	800900c <ai_platform_network_init+0x2e4>
 8008f52:	2212      	movs	r2, #18
 8008f54:	2116      	movs	r1, #22
 8008f56:	f104 0010 	add.w	r0, r4, #16
 8008f5a:	f000 fea7 	bl	8009cac <core_set_error>
 8008f5e:	e763      	b.n	8008e28 <ai_platform_network_init+0x100>
 8008f60:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <ai_platform_network_init+0x2d4>)
 8008f62:	2301      	movs	r3, #1
 8008f64:	6093      	str	r3, [r2, #8]
 8008f66:	6893      	ldr	r3, [r2, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1fc      	bne.n	8008f66 <ai_platform_network_init+0x23e>
 8008f6c:	4924      	ldr	r1, [pc, #144]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008f70:	6011      	str	r1, [r2, #0]
 8008f72:	6812      	ldr	r2, [r2, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f43f af54 	beq.w	8008e22 <ai_platform_network_init+0xfa>
 8008f7a:	e7fe      	b.n	8008f7a <ai_platform_network_init+0x252>
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <ai_platform_network_init+0x2d4>)
 8008f7e:	2301      	movs	r3, #1
 8008f80:	6093      	str	r3, [r2, #8]
 8008f82:	6893      	ldr	r3, [r2, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1fc      	bne.n	8008f82 <ai_platform_network_init+0x25a>
 8008f88:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <ai_platform_network_init+0x2d8>)
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <ai_platform_network_init+0x2dc>)
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	f43f aefe 	beq.w	8008d92 <ai_platform_network_init+0x6a>
 8008f96:	e7fe      	b.n	8008f96 <ai_platform_network_init+0x26e>
 8008f98:	2110      	movs	r1, #16
 8008f9a:	2211      	movs	r2, #17
 8008f9c:	462e      	mov	r6, r5
 8008f9e:	1860      	adds	r0, r4, r1
 8008fa0:	f000 fe84 	bl	8009cac <core_set_error>
 8008fa4:	e740      	b.n	8008e28 <ai_platform_network_init+0x100>
 8008fa6:	2213      	movs	r2, #19
 8008fa8:	2116      	movs	r1, #22
 8008faa:	f104 0010 	add.w	r0, r4, #16
 8008fae:	f000 fe7d 	bl	8009cac <core_set_error>
 8008fb2:	e739      	b.n	8008e28 <ai_platform_network_init+0x100>
 8008fb4:	f1b9 0f00 	cmp.w	r9, #0
 8008fb8:	d006      	beq.n	8008fc8 <ai_platform_network_init+0x2a0>
 8008fba:	f04f 0c01 	mov.w	ip, #1
 8008fbe:	e7c3      	b.n	8008f48 <ai_platform_network_init+0x220>
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4684      	mov	ip, r0
 8008fc6:	e786      	b.n	8008ed6 <ai_platform_network_init+0x1ae>
 8008fc8:	2110      	movs	r1, #16
 8008fca:	2213      	movs	r2, #19
 8008fcc:	2600      	movs	r6, #0
 8008fce:	1860      	adds	r0, r4, r1
 8008fd0:	f000 fe6c 	bl	8009cac <core_set_error>
 8008fd4:	e728      	b.n	8008e28 <ai_platform_network_init+0x100>
 8008fd6:	2110      	movs	r1, #16
 8008fd8:	2212      	movs	r2, #18
 8008fda:	1860      	adds	r0, r4, r1
 8008fdc:	f000 fe66 	bl	8009cac <core_set_error>
 8008fe0:	e722      	b.n	8008e28 <ai_platform_network_init+0x100>
 8008fe2:	4666      	mov	r6, ip
 8008fe4:	e6e8      	b.n	8008db8 <ai_platform_network_init+0x90>
 8008fe6:	bf00      	nop
 8008fe8:	a1c00100 	.word	0xa1c00100
 8008fec:	e0002000 	.word	0xe0002000
 8008ff0:	e0042000 	.word	0xe0042000
 8008ff4:	5c001000 	.word	0x5c001000
 8008ff8:	a1facade 	.word	0xa1facade
 8008ffc:	40023000 	.word	0x40023000
 8009000:	f407a5c2 	.word	0xf407a5c2
 8009004:	b5e8b5cd 	.word	0xb5e8b5cd
 8009008:	58024000 	.word	0x58024000
 800900c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800900e:	6a26      	ldr	r6, [r4, #32]
 8009010:	2701      	movs	r7, #1
 8009012:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009014:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009018:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800901c:	e75b      	b.n	8008ed6 <ai_platform_network_init+0x1ae>
 800901e:	bf00      	nop

08009020 <ai_platform_network_post_init>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	2800      	cmp	r0, #0
 8009024:	d04a      	beq.n	80090bc <ai_platform_network_post_init+0x9c>
 8009026:	4b7c      	ldr	r3, [pc, #496]	; (8009218 <ai_platform_network_post_init+0x1f8>)
 8009028:	4604      	mov	r4, r0
 800902a:	6802      	ldr	r2, [r0, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d145      	bne.n	80090bc <ai_platform_network_post_init+0x9c>
 8009030:	4a7a      	ldr	r2, [pc, #488]	; (800921c <ai_platform_network_post_init+0x1fc>)
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	f7ff fc07 	bl	800884c <_ai_platform_acquire_crc>
 800903e:	4b78      	ldr	r3, [pc, #480]	; (8009220 <ai_platform_network_post_init+0x200>)
 8009040:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800904a:	189a      	adds	r2, r3, r2
 800904c:	2a01      	cmp	r2, #1
 800904e:	d96e      	bls.n	800912e <ai_platform_network_post_init+0x10e>
 8009050:	f240 4249 	movw	r2, #1097	; 0x449
 8009054:	4293      	cmp	r3, r2
 8009056:	d06a      	beq.n	800912e <ai_platform_network_post_init+0x10e>
 8009058:	4a72      	ldr	r2, [pc, #456]	; (8009224 <ai_platform_network_post_init+0x204>)
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009060:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009064:	f000 8081 	beq.w	800916a <ai_platform_network_post_init+0x14a>
 8009068:	6813      	ldr	r3, [r2, #0]
 800906a:	f240 4183 	movw	r1, #1155	; 0x483
 800906e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009072:	428b      	cmp	r3, r1
 8009074:	f000 80a3 	beq.w	80091be <ai_platform_network_post_init+0x19e>
 8009078:	6813      	ldr	r3, [r2, #0]
 800907a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800907e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009082:	f000 80bb 	beq.w	80091fc <ai_platform_network_post_init+0x1dc>
 8009086:	f7ff fbe3 	bl	8008850 <_ai_platform_release_crc>
 800908a:	68e3      	ldr	r3, [r4, #12]
 800908c:	f013 0502 	ands.w	r5, r3, #2
 8009090:	d07d      	beq.n	800918e <ai_platform_network_post_init+0x16e>
 8009092:	4620      	mov	r0, r4
 8009094:	f002 fc58 	bl	800b948 <ai_layers_post_init_all>
 8009098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800909a:	b16b      	cbz	r3, 80090b8 <ai_platform_network_post_init+0x98>
 800909c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800909e:	e007      	b.n	80090b0 <ai_platform_network_post_init+0x90>
 80090a0:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80090a4:	4798      	blx	r3
 80090a6:	692b      	ldr	r3, [r5, #16]
 80090a8:	b133      	cbz	r3, 80090b8 <ai_platform_network_post_init+0x98>
 80090aa:	42ab      	cmp	r3, r5
 80090ac:	461d      	mov	r5, r3
 80090ae:	d003      	beq.n	80090b8 <ai_platform_network_post_init+0x98>
 80090b0:	4629      	mov	r1, r5
 80090b2:	2000      	movs	r0, #0
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d1f3      	bne.n	80090a0 <ai_platform_network_post_init+0x80>
 80090b8:	2001      	movs	r0, #1
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	4a57      	ldr	r2, [pc, #348]	; (800921c <ai_platform_network_post_init+0x1fc>)
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	f7ff fbc1 	bl	800884c <_ai_platform_acquire_crc>
 80090ca:	4b55      	ldr	r3, [pc, #340]	; (8009220 <ai_platform_network_post_init+0x200>)
 80090cc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090d6:	185a      	adds	r2, r3, r1
 80090d8:	2a01      	cmp	r2, #1
 80090da:	d91b      	bls.n	8009114 <ai_platform_network_post_init+0xf4>
 80090dc:	f240 4249 	movw	r2, #1097	; 0x449
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d017      	beq.n	8009114 <ai_platform_network_post_init+0xf4>
 80090e4:	4a4f      	ldr	r2, [pc, #316]	; (8009224 <ai_platform_network_post_init+0x204>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80090f0:	d02a      	beq.n	8009148 <ai_platform_network_post_init+0x128>
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	f240 4183 	movw	r1, #1155	; 0x483
 80090f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090fc:	428b      	cmp	r3, r1
 80090fe:	d04d      	beq.n	800919c <ai_platform_network_post_init+0x17c>
 8009100:	6813      	ldr	r3, [r2, #0]
 8009102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009106:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800910a:	d06a      	beq.n	80091e2 <ai_platform_network_post_init+0x1c2>
 800910c:	f7ff fba0 	bl	8008850 <_ai_platform_release_crc>
 8009110:	2000      	movs	r0, #0
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	4a44      	ldr	r2, [pc, #272]	; (8009228 <ai_platform_network_post_init+0x208>)
 8009116:	2301      	movs	r3, #1
 8009118:	6093      	str	r3, [r2, #8]
 800911a:	6893      	ldr	r3, [r2, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1fc      	bne.n	800911a <ai_platform_network_post_init+0xfa>
 8009120:	4942      	ldr	r1, [pc, #264]	; (800922c <ai_platform_network_post_init+0x20c>)
 8009122:	4b43      	ldr	r3, [pc, #268]	; (8009230 <ai_platform_network_post_init+0x210>)
 8009124:	6011      	str	r1, [r2, #0]
 8009126:	6812      	ldr	r2, [r2, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d0ef      	beq.n	800910c <ai_platform_network_post_init+0xec>
 800912c:	e7fe      	b.n	800912c <ai_platform_network_post_init+0x10c>
 800912e:	4a3e      	ldr	r2, [pc, #248]	; (8009228 <ai_platform_network_post_init+0x208>)
 8009130:	2301      	movs	r3, #1
 8009132:	6093      	str	r3, [r2, #8]
 8009134:	6893      	ldr	r3, [r2, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1fc      	bne.n	8009134 <ai_platform_network_post_init+0x114>
 800913a:	493c      	ldr	r1, [pc, #240]	; (800922c <ai_platform_network_post_init+0x20c>)
 800913c:	4b3c      	ldr	r3, [pc, #240]	; (8009230 <ai_platform_network_post_init+0x210>)
 800913e:	6011      	str	r1, [r2, #0]
 8009140:	6812      	ldr	r2, [r2, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d09f      	beq.n	8009086 <ai_platform_network_post_init+0x66>
 8009146:	e7fe      	b.n	8009146 <ai_platform_network_post_init+0x126>
 8009148:	4a3a      	ldr	r2, [pc, #232]	; (8009234 <ai_platform_network_post_init+0x214>)
 800914a:	2301      	movs	r3, #1
 800914c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009150:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1fb      	bne.n	8009150 <ai_platform_network_post_init+0x130>
 8009158:	4934      	ldr	r1, [pc, #208]	; (800922c <ai_platform_network_post_init+0x20c>)
 800915a:	4b35      	ldr	r3, [pc, #212]	; (8009230 <ai_platform_network_post_init+0x210>)
 800915c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009160:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009164:	429a      	cmp	r2, r3
 8009166:	d0d1      	beq.n	800910c <ai_platform_network_post_init+0xec>
 8009168:	e7fe      	b.n	8009168 <ai_platform_network_post_init+0x148>
 800916a:	4a32      	ldr	r2, [pc, #200]	; (8009234 <ai_platform_network_post_init+0x214>)
 800916c:	2301      	movs	r3, #1
 800916e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009172:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1fb      	bne.n	8009172 <ai_platform_network_post_init+0x152>
 800917a:	492c      	ldr	r1, [pc, #176]	; (800922c <ai_platform_network_post_init+0x20c>)
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <ai_platform_network_post_init+0x210>)
 800917e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009182:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009186:	429a      	cmp	r2, r3
 8009188:	f43f af7d 	beq.w	8009086 <ai_platform_network_post_init+0x66>
 800918c:	e7fe      	b.n	800918c <ai_platform_network_post_init+0x16c>
 800918e:	2210      	movs	r2, #16
 8009190:	2111      	movs	r1, #17
 8009192:	18a0      	adds	r0, r4, r2
 8009194:	f000 fd8a 	bl	8009cac <core_set_error>
 8009198:	4628      	mov	r0, r5
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	4a25      	ldr	r2, [pc, #148]	; (8009234 <ai_platform_network_post_init+0x214>)
 800919e:	2301      	movs	r3, #1
 80091a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80091a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1fb      	bne.n	80091a4 <ai_platform_network_post_init+0x184>
 80091ac:	491f      	ldr	r1, [pc, #124]	; (800922c <ai_platform_network_post_init+0x20c>)
 80091ae:	4b20      	ldr	r3, [pc, #128]	; (8009230 <ai_platform_network_post_init+0x210>)
 80091b0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80091b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d0a7      	beq.n	800910c <ai_platform_network_post_init+0xec>
 80091bc:	e7fe      	b.n	80091bc <ai_platform_network_post_init+0x19c>
 80091be:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <ai_platform_network_post_init+0x214>)
 80091c0:	2301      	movs	r3, #1
 80091c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80091c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1fb      	bne.n	80091c6 <ai_platform_network_post_init+0x1a6>
 80091ce:	4917      	ldr	r1, [pc, #92]	; (800922c <ai_platform_network_post_init+0x20c>)
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <ai_platform_network_post_init+0x210>)
 80091d2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80091d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091da:	429a      	cmp	r2, r3
 80091dc:	f43f af53 	beq.w	8009086 <ai_platform_network_post_init+0x66>
 80091e0:	e7fe      	b.n	80091e0 <ai_platform_network_post_init+0x1c0>
 80091e2:	4a11      	ldr	r2, [pc, #68]	; (8009228 <ai_platform_network_post_init+0x208>)
 80091e4:	2301      	movs	r3, #1
 80091e6:	6093      	str	r3, [r2, #8]
 80091e8:	6893      	ldr	r3, [r2, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1fc      	bne.n	80091e8 <ai_platform_network_post_init+0x1c8>
 80091ee:	490f      	ldr	r1, [pc, #60]	; (800922c <ai_platform_network_post_init+0x20c>)
 80091f0:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <ai_platform_network_post_init+0x210>)
 80091f2:	6011      	str	r1, [r2, #0]
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d088      	beq.n	800910c <ai_platform_network_post_init+0xec>
 80091fa:	e7fe      	b.n	80091fa <ai_platform_network_post_init+0x1da>
 80091fc:	4a0a      	ldr	r2, [pc, #40]	; (8009228 <ai_platform_network_post_init+0x208>)
 80091fe:	2301      	movs	r3, #1
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	6893      	ldr	r3, [r2, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1fc      	bne.n	8009202 <ai_platform_network_post_init+0x1e2>
 8009208:	4908      	ldr	r1, [pc, #32]	; (800922c <ai_platform_network_post_init+0x20c>)
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <ai_platform_network_post_init+0x210>)
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	f43f af38 	beq.w	8009086 <ai_platform_network_post_init+0x66>
 8009216:	e7fe      	b.n	8009216 <ai_platform_network_post_init+0x1f6>
 8009218:	a1c00100 	.word	0xa1c00100
 800921c:	e0002000 	.word	0xe0002000
 8009220:	e0042000 	.word	0xe0042000
 8009224:	5c001000 	.word	0x5c001000
 8009228:	40023000 	.word	0x40023000
 800922c:	f407a5c2 	.word	0xf407a5c2
 8009230:	b5e8b5cd 	.word	0xb5e8b5cd
 8009234:	58024000 	.word	0x58024000

08009238 <ai_platform_network_process>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b085      	sub	sp, #20
 800923e:	460e      	mov	r6, r1
 8009240:	4605      	mov	r5, r0
 8009242:	9202      	str	r2, [sp, #8]
 8009244:	b120      	cbz	r0, 8009250 <ai_platform_network_process+0x18>
 8009246:	4bb5      	ldr	r3, [pc, #724]	; (800951c <ai_platform_network_process+0x2e4>)
 8009248:	6802      	ldr	r2, [r0, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	bf18      	it	ne
 800924e:	2500      	movne	r5, #0
 8009250:	4ab3      	ldr	r2, [pc, #716]	; (8009520 <ai_platform_network_process+0x2e8>)
 8009252:	6813      	ldr	r3, [r2, #0]
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	f7ff faf7 	bl	800884c <_ai_platform_acquire_crc>
 800925e:	4bb1      	ldr	r3, [pc, #708]	; (8009524 <ai_platform_network_process+0x2ec>)
 8009260:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800926a:	185a      	adds	r2, r3, r1
 800926c:	2a01      	cmp	r2, #1
 800926e:	f240 8147 	bls.w	8009500 <ai_platform_network_process+0x2c8>
 8009272:	f240 4249 	movw	r2, #1097	; 0x449
 8009276:	4293      	cmp	r3, r2
 8009278:	f000 8142 	beq.w	8009500 <ai_platform_network_process+0x2c8>
 800927c:	4aaa      	ldr	r2, [pc, #680]	; (8009528 <ai_platform_network_process+0x2f0>)
 800927e:	6813      	ldr	r3, [r2, #0]
 8009280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009284:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009288:	f000 8167 	beq.w	800955a <ai_platform_network_process+0x322>
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	f240 4183 	movw	r1, #1155	; 0x483
 8009292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009296:	428b      	cmp	r3, r1
 8009298:	f000 8191 	beq.w	80095be <ai_platform_network_process+0x386>
 800929c:	6813      	ldr	r3, [r2, #0]
 800929e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092a2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80092a6:	f000 816a 	beq.w	800957e <ai_platform_network_process+0x346>
 80092aa:	f7ff fad1 	bl	8008850 <_ai_platform_release_crc>
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	f000 8197 	beq.w	80095e2 <ai_platform_network_process+0x3aa>
 80092b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 813e 	beq.w	8009538 <ai_platform_network_process+0x300>
 80092bc:	68eb      	ldr	r3, [r5, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	616a      	str	r2, [r5, #20]
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	f040 813a 	bne.w	8009544 <ai_platform_network_process+0x30c>
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	f000 8169 	beq.w	80095a8 <ai_platform_network_process+0x370>
 80092d6:	fab8 f788 	clz	r7, r8
 80092da:	097f      	lsrs	r7, r7, #5
 80092dc:	f1b8 0f00 	cmp.w	r8, #0
 80092e0:	f000 8162 	beq.w	80095a8 <ai_platform_network_process+0x370>
 80092e4:	f8b8 3000 	ldrh.w	r3, [r8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 815d 	beq.w	80095a8 <ai_platform_network_process+0x370>
 80092ee:	69b3      	ldr	r3, [r6, #24]
 80092f0:	9503      	str	r5, [sp, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d072      	beq.n	80093e4 <ai_platform_network_process+0x1ac>
 80092fe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009302:	2c00      	cmp	r4, #0
 8009304:	d06e      	beq.n	80093e4 <ai_platform_network_process+0x1ac>
 8009306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800930a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800930e:	f8d3 a000 	ldr.w	sl, [r3]
 8009312:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8009316:	f000 8146 	beq.w	80095a6 <ai_platform_network_process+0x36e>
 800931a:	69a3      	ldr	r3, [r4, #24]
 800931c:	2101      	movs	r1, #1
 800931e:	4630      	mov	r0, r6
 8009320:	685d      	ldr	r5, [r3, #4]
 8009322:	f7ff fa55 	bl	80087d0 <ai_buffer_get_size>
 8009326:	4285      	cmp	r5, r0
 8009328:	f0c0 815d 	bcc.w	80095e6 <ai_platform_network_process+0x3ae>
 800932c:	68e0      	ldr	r0, [r4, #12]
 800932e:	69b1      	ldr	r1, [r6, #24]
 8009330:	68c2      	ldr	r2, [r0, #12]
 8009332:	68cb      	ldr	r3, [r1, #12]
 8009334:	429a      	cmp	r2, r3
 8009336:	f040 8156 	bne.w	80095e6 <ai_platform_network_process+0x3ae>
 800933a:	6882      	ldr	r2, [r0, #8]
 800933c:	688b      	ldr	r3, [r1, #8]
 800933e:	429a      	cmp	r2, r3
 8009340:	f040 8151 	bne.w	80095e6 <ai_platform_network_process+0x3ae>
 8009344:	6842      	ldr	r2, [r0, #4]
 8009346:	684b      	ldr	r3, [r1, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	f040 814c 	bne.w	80095e6 <ai_platform_network_process+0x3ae>
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009354:	f00a fd9e 	bl	8013e94 <ai_array_get_data_byte_size>
 8009358:	4605      	mov	r5, r0
 800935a:	4620      	mov	r0, r4
 800935c:	f00a fcf0 	bl	8013d40 <get_tensor_byte_size>
 8009360:	4285      	cmp	r5, r0
 8009362:	f0c0 8140 	bcc.w	80095e6 <ai_platform_network_process+0x3ae>
 8009366:	69a3      	ldr	r3, [r4, #24]
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	f00a fcff 	bl	8013d6c <ai_array_to_buffer_fmt>
 800936e:	6833      	ldr	r3, [r6, #0]
 8009370:	4058      	eors	r0, r3
 8009372:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009376:	f040 81fa 	bne.w	800976e <ai_platform_network_process+0x536>
 800937a:	6873      	ldr	r3, [r6, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 81ed 	beq.w	800975c <ai_platform_network_process+0x524>
 8009382:	69b3      	ldr	r3, [r6, #24]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 81df 	beq.w	800974a <ai_platform_network_process+0x512>
 800938c:	9a01      	ldr	r2, [sp, #4]
 800938e:	4620      	mov	r0, r4
 8009390:	3701      	adds	r7, #1
 8009392:	361c      	adds	r6, #28
 8009394:	429a      	cmp	r2, r3
 8009396:	bf38      	it	cc
 8009398:	461a      	movcc	r2, r3
 800939a:	9201      	str	r2, [sp, #4]
 800939c:	f00a fcd0 	bl	8013d40 <get_tensor_byte_size>
 80093a0:	f8c9 0008 	str.w	r0, [r9, #8]
 80093a4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	fb00 f303 	mul.w	r3, r0, r3
 80093ae:	f8c9 300c 	str.w	r3, [r9, #12]
 80093b2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80093b6:	440b      	add	r3, r1
 80093b8:	f8c9 1004 	str.w	r1, [r9, #4]
 80093bc:	f84a 300b 	str.w	r3, [sl, fp]
 80093c0:	69a0      	ldr	r0, [r4, #24]
 80093c2:	6803      	ldr	r3, [r0, #0]
 80093c4:	009a      	lsls	r2, r3, #2
 80093c6:	f100 80e8 	bmi.w	800959a <ai_platform_network_process+0x362>
 80093ca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	4419      	add	r1, r3
 80093d2:	6081      	str	r1, [r0, #8]
 80093d4:	69a3      	ldr	r3, [r4, #24]
 80093d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80093da:	60da      	str	r2, [r3, #12]
 80093dc:	f8b8 3000 	ldrh.w	r3, [r8]
 80093e0:	42bb      	cmp	r3, r7
 80093e2:	d888      	bhi.n	80092f6 <ai_platform_network_process+0xbe>
 80093e4:	9d03      	ldr	r5, [sp, #12]
 80093e6:	9b02      	ldr	r3, [sp, #8]
 80093e8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 81c8 	beq.w	8009780 <ai_platform_network_process+0x548>
 80093f0:	2a01      	cmp	r2, #1
 80093f2:	f240 81a2 	bls.w	800973a <ai_platform_network_process+0x502>
 80093f6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80093fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 819b 	beq.w	800973a <ai_platform_network_process+0x502>
 8009404:	2600      	movs	r6, #0
 8009406:	9f02      	ldr	r7, [sp, #8]
 8009408:	9502      	str	r5, [sp, #8]
 800940a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80f7 	beq.w	8009602 <ai_platform_network_process+0x3ca>
 8009414:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009418:	2c00      	cmp	r4, #0
 800941a:	f000 80f2 	beq.w	8009602 <ai_platform_network_process+0x3ca>
 800941e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009422:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 8009426:	f8d3 8000 	ldr.w	r8, [r3]
 800942a:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 800942e:	f000 81b4 	beq.w	800979a <ai_platform_network_process+0x562>
 8009432:	69a3      	ldr	r3, [r4, #24]
 8009434:	2101      	movs	r1, #1
 8009436:	4638      	mov	r0, r7
 8009438:	685d      	ldr	r5, [r3, #4]
 800943a:	f7ff f9c9 	bl	80087d0 <ai_buffer_get_size>
 800943e:	4285      	cmp	r5, r0
 8009440:	f0c0 817a 	bcc.w	8009738 <ai_platform_network_process+0x500>
 8009444:	68e0      	ldr	r0, [r4, #12]
 8009446:	69b9      	ldr	r1, [r7, #24]
 8009448:	68c2      	ldr	r2, [r0, #12]
 800944a:	68cb      	ldr	r3, [r1, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	f040 8173 	bne.w	8009738 <ai_platform_network_process+0x500>
 8009452:	6882      	ldr	r2, [r0, #8]
 8009454:	688b      	ldr	r3, [r1, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	f040 816e 	bne.w	8009738 <ai_platform_network_process+0x500>
 800945c:	6842      	ldr	r2, [r0, #4]
 800945e:	684b      	ldr	r3, [r1, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	f040 8169 	bne.w	8009738 <ai_platform_network_process+0x500>
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800946c:	f00a fd12 	bl	8013e94 <ai_array_get_data_byte_size>
 8009470:	9003      	str	r0, [sp, #12]
 8009472:	4620      	mov	r0, r4
 8009474:	f00a fc64 	bl	8013d40 <get_tensor_byte_size>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	4283      	cmp	r3, r0
 800947c:	f0c0 815c 	bcc.w	8009738 <ai_platform_network_process+0x500>
 8009480:	69a3      	ldr	r3, [r4, #24]
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	f00a fc72 	bl	8013d6c <ai_array_to_buffer_fmt>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	4058      	eors	r0, r3
 800948c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009490:	f040 817a 	bne.w	8009788 <ai_platform_network_process+0x550>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8193 	beq.w	80097c2 <ai_platform_network_process+0x58a>
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8185 	beq.w	80097b0 <ai_platform_network_process+0x578>
 80094a6:	9a01      	ldr	r2, [sp, #4]
 80094a8:	4620      	mov	r0, r4
 80094aa:	3601      	adds	r6, #1
 80094ac:	371c      	adds	r7, #28
 80094ae:	429a      	cmp	r2, r3
 80094b0:	bf38      	it	cc
 80094b2:	461a      	movcc	r2, r3
 80094b4:	9201      	str	r2, [sp, #4]
 80094b6:	f00a fc43 	bl	8013d40 <get_tensor_byte_size>
 80094ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80094be:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	fb00 f303 	mul.w	r3, r0, r3
 80094c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80094cc:	f857 1c18 	ldr.w	r1, [r7, #-24]
 80094d0:	440b      	add	r3, r1
 80094d2:	f8ca 1004 	str.w	r1, [sl, #4]
 80094d6:	f848 300b 	str.w	r3, [r8, fp]
 80094da:	69a0      	ldr	r0, [r4, #24]
 80094dc:	6803      	ldr	r3, [r0, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	f100 808a 	bmi.w	80095f8 <ai_platform_network_process+0x3c0>
 80094e4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	4419      	add	r1, r3
 80094ec:	6081      	str	r1, [r0, #8]
 80094ee:	69a3      	ldr	r3, [r4, #24]
 80094f0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80094fa:	429e      	cmp	r6, r3
 80094fc:	d385      	bcc.n	800940a <ai_platform_network_process+0x1d2>
 80094fe:	e080      	b.n	8009602 <ai_platform_network_process+0x3ca>
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <ai_platform_network_process+0x2f4>)
 8009502:	2301      	movs	r3, #1
 8009504:	6093      	str	r3, [r2, #8]
 8009506:	6893      	ldr	r3, [r2, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1fc      	bne.n	8009506 <ai_platform_network_process+0x2ce>
 800950c:	4b08      	ldr	r3, [pc, #32]	; (8009530 <ai_platform_network_process+0x2f8>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <ai_platform_network_process+0x2fc>)
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	f43f aec8 	beq.w	80092aa <ai_platform_network_process+0x72>
 800951a:	e7fe      	b.n	800951a <ai_platform_network_process+0x2e2>
 800951c:	a1c00100 	.word	0xa1c00100
 8009520:	e0002000 	.word	0xe0002000
 8009524:	e0042000 	.word	0xe0042000
 8009528:	5c001000 	.word	0x5c001000
 800952c:	40023000 	.word	0x40023000
 8009530:	f407a5c2 	.word	0xf407a5c2
 8009534:	b5e8b5cd 	.word	0xb5e8b5cd
 8009538:	68ea      	ldr	r2, [r5, #12]
 800953a:	616b      	str	r3, [r5, #20]
 800953c:	f002 0203 	and.w	r2, r2, #3
 8009540:	2a03      	cmp	r2, #3
 8009542:	d031      	beq.n	80095a8 <ai_platform_network_process+0x370>
 8009544:	2230      	movs	r2, #48	; 0x30
 8009546:	2111      	movs	r1, #17
 8009548:	f105 0010 	add.w	r0, r5, #16
 800954c:	2400      	movs	r4, #0
 800954e:	f000 fbad 	bl	8009cac <core_set_error>
 8009552:	4620      	mov	r0, r4
 8009554:	b005      	add	sp, #20
 8009556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955a:	4a9e      	ldr	r2, [pc, #632]	; (80097d4 <ai_platform_network_process+0x59c>)
 800955c:	2301      	movs	r3, #1
 800955e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009562:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1fb      	bne.n	8009562 <ai_platform_network_process+0x32a>
 800956a:	4b9b      	ldr	r3, [pc, #620]	; (80097d8 <ai_platform_network_process+0x5a0>)
 800956c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009570:	4b9a      	ldr	r3, [pc, #616]	; (80097dc <ai_platform_network_process+0x5a4>)
 8009572:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009576:	429a      	cmp	r2, r3
 8009578:	f43f ae97 	beq.w	80092aa <ai_platform_network_process+0x72>
 800957c:	e7fe      	b.n	800957c <ai_platform_network_process+0x344>
 800957e:	4a98      	ldr	r2, [pc, #608]	; (80097e0 <ai_platform_network_process+0x5a8>)
 8009580:	2301      	movs	r3, #1
 8009582:	6093      	str	r3, [r2, #8]
 8009584:	6893      	ldr	r3, [r2, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1fc      	bne.n	8009584 <ai_platform_network_process+0x34c>
 800958a:	4b93      	ldr	r3, [pc, #588]	; (80097d8 <ai_platform_network_process+0x5a0>)
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	4b93      	ldr	r3, [pc, #588]	; (80097dc <ai_platform_network_process+0x5a4>)
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	f43f ae89 	beq.w	80092aa <ai_platform_network_process+0x72>
 8009598:	e7fe      	b.n	8009598 <ai_platform_network_process+0x360>
 800959a:	f8b8 3000 	ldrh.w	r3, [r8]
 800959e:	429f      	cmp	r7, r3
 80095a0:	f4ff aea9 	bcc.w	80092f6 <ai_platform_network_process+0xbe>
 80095a4:	e71e      	b.n	80093e4 <ai_platform_network_process+0x1ac>
 80095a6:	9d03      	ldr	r5, [sp, #12]
 80095a8:	2400      	movs	r4, #0
 80095aa:	2217      	movs	r2, #23
 80095ac:	2112      	movs	r1, #18
 80095ae:	f105 0010 	add.w	r0, r5, #16
 80095b2:	f000 fb7b 	bl	8009cac <core_set_error>
 80095b6:	4620      	mov	r0, r4
 80095b8:	b005      	add	sp, #20
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	4a85      	ldr	r2, [pc, #532]	; (80097d4 <ai_platform_network_process+0x59c>)
 80095c0:	2301      	movs	r3, #1
 80095c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1fb      	bne.n	80095c6 <ai_platform_network_process+0x38e>
 80095ce:	4b82      	ldr	r3, [pc, #520]	; (80097d8 <ai_platform_network_process+0x5a0>)
 80095d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095d4:	4b81      	ldr	r3, [pc, #516]	; (80097dc <ai_platform_network_process+0x5a4>)
 80095d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095da:	429a      	cmp	r2, r3
 80095dc:	f43f ae65 	beq.w	80092aa <ai_platform_network_process+0x72>
 80095e0:	e7fe      	b.n	80095e0 <ai_platform_network_process+0x3a8>
 80095e2:	462c      	mov	r4, r5
 80095e4:	e7b5      	b.n	8009552 <ai_platform_network_process+0x31a>
 80095e6:	9d03      	ldr	r5, [sp, #12]
 80095e8:	2218      	movs	r2, #24
 80095ea:	2112      	movs	r1, #18
 80095ec:	2400      	movs	r4, #0
 80095ee:	f105 0010 	add.w	r0, r5, #16
 80095f2:	f000 fb5b 	bl	8009cac <core_set_error>
 80095f6:	e7ac      	b.n	8009552 <ai_platform_network_process+0x31a>
 80095f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80095fc:	429e      	cmp	r6, r3
 80095fe:	f4ff af04 	bcc.w	800940a <ai_platform_network_process+0x1d2>
 8009602:	9d02      	ldr	r5, [sp, #8]
 8009604:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009608:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800960a:	82ab      	strh	r3, [r5, #20]
 800960c:	2a00      	cmp	r2, #0
 800960e:	f040 808d 	bne.w	800972c <ai_platform_network_process+0x4f4>
 8009612:	4616      	mov	r6, r2
 8009614:	4617      	mov	r7, r2
 8009616:	8aec      	ldrh	r4, [r5, #22]
 8009618:	429c      	cmp	r4, r3
 800961a:	d29a      	bcs.n	8009552 <ai_platform_network_process+0x31a>
 800961c:	46ab      	mov	fp, r5
 800961e:	2e00      	cmp	r6, #0
 8009620:	d030      	beq.n	8009684 <ai_platform_network_process+0x44c>
 8009622:	f04f 0800 	mov.w	r8, #0
 8009626:	e014      	b.n	8009652 <ai_platform_network_process+0x41a>
 8009628:	6882      	ldr	r2, [r0, #8]
 800962a:	68c5      	ldr	r5, [r0, #12]
 800962c:	6863      	ldr	r3, [r4, #4]
 800962e:	1b52      	subs	r2, r2, r5
 8009630:	4413      	add	r3, r2
 8009632:	6083      	str	r3, [r0, #8]
 8009634:	698b      	ldr	r3, [r1, #24]
 8009636:	6862      	ldr	r2, [r4, #4]
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	f859 200a 	ldr.w	r2, [r9, sl]
 800963e:	f108 0801 	add.w	r8, r8, #1
 8009642:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009646:	440b      	add	r3, r1
 8009648:	4293      	cmp	r3, r2
 800964a:	d301      	bcc.n	8009650 <ai_platform_network_process+0x418>
 800964c:	68e3      	ldr	r3, [r4, #12]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	8833      	ldrh	r3, [r6, #0]
 8009654:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009658:	4543      	cmp	r3, r8
 800965a:	d913      	bls.n	8009684 <ai_platform_network_process+0x44c>
 800965c:	6873      	ldr	r3, [r6, #4]
 800965e:	b18b      	cbz	r3, 8009684 <ai_platform_network_process+0x44c>
 8009660:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009664:	b171      	cbz	r1, 8009684 <ai_platform_network_process+0x44c>
 8009666:	6988      	ldr	r0, [r1, #24]
 8009668:	68b2      	ldr	r2, [r6, #8]
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	f8d2 9000 	ldr.w	r9, [r2]
 8009670:	009d      	lsls	r5, r3, #2
 8009672:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009676:	d5d7      	bpl.n	8009628 <ai_platform_network_process+0x3f0>
 8009678:	6880      	ldr	r0, [r0, #8]
 800967a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800967e:	f00a fc8b 	bl	8013f98 <memcpy>
 8009682:	e7da      	b.n	800963a <ai_platform_network_process+0x402>
 8009684:	4658      	mov	r0, fp
 8009686:	f002 f973 	bl	800b970 <ai_layers_forward_all>
 800968a:	2f00      	cmp	r7, #0
 800968c:	d03f      	beq.n	800970e <ai_platform_network_process+0x4d6>
 800968e:	2400      	movs	r4, #0
 8009690:	e016      	b.n	80096c0 <ai_platform_network_process+0x488>
 8009692:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009696:	f859 100a 	ldr.w	r1, [r9, sl]
 800969a:	4413      	add	r3, r2
 800969c:	428b      	cmp	r3, r1
 800969e:	d302      	bcc.n	80096a6 <ai_platform_network_process+0x46e>
 80096a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096a4:	1acb      	subs	r3, r1, r3
 80096a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80096aa:	6981      	ldr	r1, [r0, #24]
 80096ac:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80096b0:	1b52      	subs	r2, r2, r5
 80096b2:	4413      	add	r3, r2
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	6983      	ldr	r3, [r0, #24]
 80096b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80096bc:	60da      	str	r2, [r3, #12]
 80096be:	3401      	adds	r4, #1
 80096c0:	883b      	ldrh	r3, [r7, #0]
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	d923      	bls.n	800970e <ai_platform_network_process+0x4d6>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	b30b      	cbz	r3, 800970e <ai_platform_network_process+0x4d6>
 80096ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80096ce:	b1f0      	cbz	r0, 800970e <ai_platform_network_process+0x4d6>
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80096d6:	6983      	ldr	r3, [r0, #24]
 80096d8:	f8d2 9000 	ldr.w	r9, [r2]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	d5d5      	bpl.n	8009692 <ai_platform_network_process+0x45a>
 80096e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80096ea:	6899      	ldr	r1, [r3, #8]
 80096ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096f0:	f00a fc52 	bl	8013f98 <memcpy>
 80096f4:	f859 200a 	ldr.w	r2, [r9, sl]
 80096f8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80096fc:	440b      	add	r3, r1
 80096fe:	4293      	cmp	r3, r2
 8009700:	d302      	bcc.n	8009708 <ai_platform_network_process+0x4d0>
 8009702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f8c8 3004 	str.w	r3, [r8, #4]
 800970c:	e7d7      	b.n	80096be <ai_platform_network_process+0x486>
 800970e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009712:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009716:	3401      	adds	r4, #1
 8009718:	b2a4      	uxth	r4, r4
 800971a:	42a3      	cmp	r3, r4
 800971c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009720:	f63f af7d 	bhi.w	800961e <ai_platform_network_process+0x3e6>
 8009724:	4620      	mov	r0, r4
 8009726:	b005      	add	sp, #20
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	2a01      	cmp	r2, #1
 800972e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009730:	d03c      	beq.n	80097ac <ai_platform_network_process+0x574>
 8009732:	f106 070c 	add.w	r7, r6, #12
 8009736:	e76e      	b.n	8009616 <ai_platform_network_process+0x3de>
 8009738:	9d02      	ldr	r5, [sp, #8]
 800973a:	2218      	movs	r2, #24
 800973c:	2113      	movs	r1, #19
 800973e:	f105 0010 	add.w	r0, r5, #16
 8009742:	2400      	movs	r4, #0
 8009744:	f000 fab2 	bl	8009cac <core_set_error>
 8009748:	e703      	b.n	8009552 <ai_platform_network_process+0x31a>
 800974a:	9d03      	ldr	r5, [sp, #12]
 800974c:	4604      	mov	r4, r0
 800974e:	2221      	movs	r2, #33	; 0x21
 8009750:	2112      	movs	r1, #18
 8009752:	f105 0010 	add.w	r0, r5, #16
 8009756:	f000 faa9 	bl	8009cac <core_set_error>
 800975a:	e6fa      	b.n	8009552 <ai_platform_network_process+0x31a>
 800975c:	9d03      	ldr	r5, [sp, #12]
 800975e:	4604      	mov	r4, r0
 8009760:	2217      	movs	r2, #23
 8009762:	2112      	movs	r1, #18
 8009764:	f105 0010 	add.w	r0, r5, #16
 8009768:	f000 faa0 	bl	8009cac <core_set_error>
 800976c:	e6f1      	b.n	8009552 <ai_platform_network_process+0x31a>
 800976e:	9d03      	ldr	r5, [sp, #12]
 8009770:	2219      	movs	r2, #25
 8009772:	2112      	movs	r1, #18
 8009774:	2400      	movs	r4, #0
 8009776:	f105 0010 	add.w	r0, r5, #16
 800977a:	f000 fa97 	bl	8009cac <core_set_error>
 800977e:	e6e8      	b.n	8009552 <ai_platform_network_process+0x31a>
 8009780:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009784:	82ab      	strh	r3, [r5, #20]
 8009786:	e741      	b.n	800960c <ai_platform_network_process+0x3d4>
 8009788:	9d02      	ldr	r5, [sp, #8]
 800978a:	2219      	movs	r2, #25
 800978c:	2113      	movs	r1, #19
 800978e:	2400      	movs	r4, #0
 8009790:	f105 0010 	add.w	r0, r5, #16
 8009794:	f000 fa8a 	bl	8009cac <core_set_error>
 8009798:	e6db      	b.n	8009552 <ai_platform_network_process+0x31a>
 800979a:	9d02      	ldr	r5, [sp, #8]
 800979c:	2217      	movs	r2, #23
 800979e:	2113      	movs	r1, #19
 80097a0:	4654      	mov	r4, sl
 80097a2:	f105 0010 	add.w	r0, r5, #16
 80097a6:	f000 fa81 	bl	8009cac <core_set_error>
 80097aa:	e6d2      	b.n	8009552 <ai_platform_network_process+0x31a>
 80097ac:	2700      	movs	r7, #0
 80097ae:	e732      	b.n	8009616 <ai_platform_network_process+0x3de>
 80097b0:	9d02      	ldr	r5, [sp, #8]
 80097b2:	4604      	mov	r4, r0
 80097b4:	2221      	movs	r2, #33	; 0x21
 80097b6:	2113      	movs	r1, #19
 80097b8:	f105 0010 	add.w	r0, r5, #16
 80097bc:	f000 fa76 	bl	8009cac <core_set_error>
 80097c0:	e6c7      	b.n	8009552 <ai_platform_network_process+0x31a>
 80097c2:	9d02      	ldr	r5, [sp, #8]
 80097c4:	4604      	mov	r4, r0
 80097c6:	2217      	movs	r2, #23
 80097c8:	2113      	movs	r1, #19
 80097ca:	f105 0010 	add.w	r0, r5, #16
 80097ce:	f000 fa6d 	bl	8009cac <core_set_error>
 80097d2:	e6be      	b.n	8009552 <ai_platform_network_process+0x31a>
 80097d4:	58024000 	.word	0x58024000
 80097d8:	f407a5c2 	.word	0xf407a5c2
 80097dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80097e0:	40023000 	.word	0x40023000

080097e4 <node_convert>:
 80097e4:	6982      	ldr	r2, [r0, #24]
 80097e6:	8813      	ldrh	r3, [r2, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d049      	beq.n	8009880 <node_convert+0x9c>
 80097ec:	6852      	ldr	r2, [r2, #4]
 80097ee:	6850      	ldr	r0, [r2, #4]
 80097f0:	b100      	cbz	r0, 80097f4 <node_convert+0x10>
 80097f2:	6800      	ldr	r0, [r0, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	f000 813b 	beq.w	8009a70 <node_convert+0x28c>
 80097fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097fe:	6915      	ldr	r5, [r2, #16]
 8009800:	b105      	cbz	r5, 8009804 <node_convert+0x20>
 8009802:	682d      	ldr	r5, [r5, #0]
 8009804:	6883      	ldr	r3, [r0, #8]
 8009806:	0a1b      	lsrs	r3, r3, #8
 8009808:	f000 80ec 	beq.w	80099e4 <node_convert+0x200>
 800980c:	68c1      	ldr	r1, [r0, #12]
 800980e:	2401      	movs	r4, #1
 8009810:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009814:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009818:	428b      	cmp	r3, r1
 800981a:	fb02 f404 	mul.w	r4, r2, r4
 800981e:	d1f9      	bne.n	8009814 <node_convert+0x30>
 8009820:	6982      	ldr	r2, [r0, #24]
 8009822:	69af      	ldr	r7, [r5, #24]
 8009824:	6813      	ldr	r3, [r2, #0]
 8009826:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800982a:	2901      	cmp	r1, #1
 800982c:	d02a      	beq.n	8009884 <node_convert+0xa0>
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	68bd      	ldr	r5, [r7, #8]
 8009832:	2800      	cmp	r0, #0
 8009834:	d068      	beq.n	8009908 <node_convert+0x124>
 8009836:	6846      	ldr	r6, [r0, #4]
 8009838:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 800983c:	6892      	ldr	r2, [r2, #8]
 800983e:	2e00      	cmp	r6, #0
 8009840:	f000 80b7 	beq.w	80099b2 <node_convert+0x1ce>
 8009844:	8843      	ldrh	r3, [r0, #2]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8088 	beq.w	800995c <node_convert+0x178>
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	ed93 7a00 	vldr	s14, [r3]
 8009852:	6873      	ldr	r3, [r6, #4]
 8009854:	2900      	cmp	r1, #0
 8009856:	f000 80c3 	beq.w	80099e0 <node_convert+0x1fc>
 800985a:	f993 1000 	ldrsb.w	r1, [r3]
 800985e:	b16c      	cbz	r4, 800987c <node_convert+0x98>
 8009860:	4414      	add	r4, r2
 8009862:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8009866:	1a5b      	subs	r3, r3, r1
 8009868:	4294      	cmp	r4, r2
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009876:	ece5 7a01 	vstmia	r5!, {s15}
 800987a:	d1f2      	bne.n	8009862 <node_convert+0x7e>
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	deff      	udf	#255	; 0xff
 8009884:	682e      	ldr	r6, [r5, #0]
 8009886:	6895      	ldr	r5, [r2, #8]
 8009888:	2e00      	cmp	r6, #0
 800988a:	f000 80ad 	beq.w	80099e8 <node_convert+0x204>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6871      	ldr	r1, [r6, #4]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8009898:	2900      	cmp	r1, #0
 800989a:	d064      	beq.n	8009966 <node_convert+0x182>
 800989c:	8870      	ldrh	r0, [r6, #2]
 800989e:	2800      	cmp	r0, #0
 80098a0:	d067      	beq.n	8009972 <node_convert+0x18e>
 80098a2:	6808      	ldr	r0, [r1, #0]
 80098a4:	edd0 7a00 	vldr	s15, [r0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80d6 	beq.w	8009a5a <node_convert+0x276>
 80098ae:	684b      	ldr	r3, [r1, #4]
 80098b0:	f993 3000 	ldrsb.w	r3, [r3]
 80098b4:	ee06 3a90 	vmov	s13, r3
 80098b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80098bc:	2c00      	cmp	r4, #0
 80098be:	d0dd      	beq.n	800987c <node_convert+0x98>
 80098c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098c4:	4414      	add	r4, r2
 80098c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80098ca:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8009a78 <node_convert+0x294>
 80098ce:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80098d2:	ecb5 7a01 	vldmia	r5!, {s14}
 80098d6:	eef0 7a66 	vmov.f32	s15, s13
 80098da:	eee7 7a06 	vfma.f32	s15, s14, s12
 80098de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e6:	bfac      	ite	ge
 80098e8:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 80098ec:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 80098f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098f4:	ee17 3a90 	vmov	r3, s15
 80098f8:	f303 0307 	ssat	r3, #8, r3
 80098fc:	f802 3b01 	strb.w	r3, [r2], #1
 8009900:	42a2      	cmp	r2, r4
 8009902:	d1e6      	bne.n	80098d2 <node_convert+0xee>
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800990c:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8009910:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8009914:	6890      	ldr	r0, [r2, #8]
 8009916:	1b8e      	subs	r6, r1, r6
 8009918:	2908      	cmp	r1, #8
 800991a:	4622      	mov	r2, r4
 800991c:	4629      	mov	r1, r5
 800991e:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8009922:	eba6 0603 	sub.w	r6, r6, r3
 8009926:	f000 808a 	beq.w	8009a3e <node_convert+0x25a>
 800992a:	f00a f939 	bl	8013ba0 <st_dsp_arm_q15_to_float>
 800992e:	2e00      	cmp	r6, #0
 8009930:	d0a4      	beq.n	800987c <node_convert+0x98>
 8009932:	ee07 6a90 	vmov	s15, r6
 8009936:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800993a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800993e:	f00d faaf 	bl	8016ea0 <powf>
 8009942:	2c00      	cmp	r4, #0
 8009944:	d09a      	beq.n	800987c <node_convert+0x98>
 8009946:	2300      	movs	r3, #0
 8009948:	ecf5 7a01 	vldmia	r5!, {s15}
 800994c:	3301      	adds	r3, #1
 800994e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009952:	429c      	cmp	r4, r3
 8009954:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009958:	d1f6      	bne.n	8009948 <node_convert+0x164>
 800995a:	e78f      	b.n	800987c <node_convert+0x98>
 800995c:	b359      	cbz	r1, 80099b6 <node_convert+0x1d2>
 800995e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009a7c <node_convert+0x298>
 8009962:	4619      	mov	r1, r3
 8009964:	e77b      	b.n	800985e <node_convert+0x7a>
 8009966:	b133      	cbz	r3, 8009976 <node_convert+0x192>
 8009968:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009a7c <node_convert+0x298>
 800996c:	eef0 7a66 	vmov.f32	s15, s13
 8009970:	e7a4      	b.n	80098bc <node_convert+0xd8>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1f8      	bne.n	8009968 <node_convert+0x184>
 8009976:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800997a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009a7c <node_convert+0x298>
 800997e:	2c00      	cmp	r4, #0
 8009980:	f43f af7c 	beq.w	800987c <node_convert+0x98>
 8009984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009988:	4414      	add	r4, r2
 800998a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800998e:	ecb5 7a01 	vldmia	r5!, {s14}
 8009992:	eef0 7a66 	vmov.f32	s15, s13
 8009996:	eee7 7a06 	vfma.f32	s15, s14, s12
 800999a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800999e:	ee17 3a90 	vmov	r3, s15
 80099a2:	f383 0308 	usat	r3, #8, r3
 80099a6:	f802 3b01 	strb.w	r3, [r2], #1
 80099aa:	42a2      	cmp	r2, r4
 80099ac:	d1ef      	bne.n	800998e <node_convert+0x1aa>
 80099ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b2:	2900      	cmp	r1, #0
 80099b4:	d146      	bne.n	8009a44 <node_convert+0x260>
 80099b6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009a7c <node_convert+0x298>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	f43f af5e 	beq.w	800987c <node_convert+0x98>
 80099c0:	4414      	add	r4, r2
 80099c2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80099c6:	1a5b      	subs	r3, r3, r1
 80099c8:	42a2      	cmp	r2, r4
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099d6:	ece5 7a01 	vstmia	r5!, {s15}
 80099da:	d1f2      	bne.n	80099c2 <node_convert+0x1de>
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e0:	7819      	ldrb	r1, [r3, #0]
 80099e2:	e7ea      	b.n	80099ba <node_convert+0x1d6>
 80099e4:	2401      	movs	r4, #1
 80099e6:	e71b      	b.n	8009820 <node_convert+0x3c>
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 80099ee:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80099f2:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 80099f6:	eba8 0303 	sub.w	r3, r8, r3
 80099fa:	3340      	adds	r3, #64	; 0x40
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	d014      	beq.n	8009a2a <node_convert+0x246>
 8009a00:	425b      	negs	r3, r3
 8009a02:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009a06:	ee00 3a90 	vmov	s1, r3
 8009a0a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8009a0e:	f00d fa47 	bl	8016ea0 <powf>
 8009a12:	b154      	cbz	r4, 8009a2a <node_convert+0x246>
 8009a14:	4633      	mov	r3, r6
 8009a16:	462a      	mov	r2, r5
 8009a18:	ecf2 7a01 	vldmia	r2!, {s15}
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009a28:	d1f6      	bne.n	8009a18 <node_convert+0x234>
 8009a2a:	f1b8 0f08 	cmp.w	r8, #8
 8009a2e:	d00d      	beq.n	8009a4c <node_convert+0x268>
 8009a30:	4622      	mov	r2, r4
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	4628      	mov	r0, r5
 8009a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	f009 bf2f 	b.w	801389c <st_dsp_arm_float_to_q15>
 8009a3e:	f00a f915 	bl	8013c6c <st_dsp_arm_q7_to_float>
 8009a42:	e774      	b.n	800992e <node_convert+0x14a>
 8009a44:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009a7c <node_convert+0x298>
 8009a48:	4631      	mov	r1, r6
 8009a4a:	e708      	b.n	800985e <node_convert+0x7a>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	68b9      	ldr	r1, [r7, #8]
 8009a50:	4628      	mov	r0, r5
 8009a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	f009 bfd7 	b.w	8013a08 <st_dsp_arm_float_to_q7>
 8009a5a:	684b      	ldr	r3, [r1, #4]
 8009a5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	ee06 3a90 	vmov	s13, r3
 8009a66:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009a6a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009a6e:	e786      	b.n	800997e <node_convert+0x19a>
 8009a70:	2300      	movs	r3, #0
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	deff      	udf	#255	; 0xff
 8009a76:	bf00      	nop
 8009a78:	3efffffc 	.word	0x3efffffc
 8009a7c:	00000000 	.word	0x00000000

08009a80 <node_convert_integer>:
 8009a80:	6982      	ldr	r2, [r0, #24]
 8009a82:	8813      	ldrh	r3, [r2, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d058      	beq.n	8009b3a <node_convert_integer+0xba>
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	6852      	ldr	r2, [r2, #4]
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	6856      	ldr	r6, [r2, #4]
 8009a90:	b106      	cbz	r6, 8009a94 <node_convert_integer+0x14>
 8009a92:	6836      	ldr	r6, [r6, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	f000 8100 	beq.w	8009c9a <node_convert_integer+0x21a>
 8009a9a:	6915      	ldr	r5, [r2, #16]
 8009a9c:	b105      	cbz	r5, 8009aa0 <node_convert_integer+0x20>
 8009a9e:	682d      	ldr	r5, [r5, #0]
 8009aa0:	68b3      	ldr	r3, [r6, #8]
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	f000 80d3 	beq.w	8009c4e <node_convert_integer+0x1ce>
 8009aa8:	68f0      	ldr	r0, [r6, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009ab0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ab4:	4298      	cmp	r0, r3
 8009ab6:	fb01 f202 	mul.w	r2, r1, r2
 8009aba:	d1f9      	bne.n	8009ab0 <node_convert_integer+0x30>
 8009abc:	6833      	ldr	r3, [r6, #0]
 8009abe:	682c      	ldr	r4, [r5, #0]
 8009ac0:	b17b      	cbz	r3, 8009ae2 <node_convert_integer+0x62>
 8009ac2:	6859      	ldr	r1, [r3, #4]
 8009ac4:	b169      	cbz	r1, 8009ae2 <node_convert_integer+0x62>
 8009ac6:	8858      	ldrh	r0, [r3, #2]
 8009ac8:	b158      	cbz	r0, 8009ae2 <node_convert_integer+0x62>
 8009aca:	6809      	ldr	r1, [r1, #0]
 8009acc:	ed91 7a00 	vldr	s14, [r1]
 8009ad0:	b15c      	cbz	r4, 8009aea <node_convert_integer+0x6a>
 8009ad2:	6861      	ldr	r1, [r4, #4]
 8009ad4:	b149      	cbz	r1, 8009aea <node_convert_integer+0x6a>
 8009ad6:	8860      	ldrh	r0, [r4, #2]
 8009ad8:	b138      	cbz	r0, 8009aea <node_convert_integer+0x6a>
 8009ada:	6809      	ldr	r1, [r1, #0]
 8009adc:	edd1 7a00 	vldr	s15, [r1]
 8009ae0:	e005      	b.n	8009aee <node_convert_integer+0x6e>
 8009ae2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009ca0 <node_convert_integer+0x220>
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	d1f3      	bne.n	8009ad2 <node_convert_integer+0x52>
 8009aea:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8009ca0 <node_convert_integer+0x220>
 8009aee:	69b0      	ldr	r0, [r6, #24]
 8009af0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009af4:	69ad      	ldr	r5, [r5, #24]
 8009af6:	6806      	ldr	r6, [r0, #0]
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	0236      	lsls	r6, r6, #8
 8009afc:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 8009b00:	d41d      	bmi.n	8009b3e <node_convert_integer+0xbe>
 8009b02:	2900      	cmp	r1, #0
 8009b04:	f040 8081 	bne.w	8009c0a <node_convert_integer+0x18a>
 8009b08:	6880      	ldr	r0, [r0, #8]
 8009b0a:	68a9      	ldr	r1, [r5, #8]
 8009b0c:	b13b      	cbz	r3, 8009b1e <node_convert_integer+0x9e>
 8009b0e:	685d      	ldr	r5, [r3, #4]
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	f000 80a7 	beq.w	8009c64 <node_convert_integer+0x1e4>
 8009b16:	885b      	ldrh	r3, [r3, #2]
 8009b18:	b10b      	cbz	r3, 8009b1e <node_convert_integer+0x9e>
 8009b1a:	686b      	ldr	r3, [r5, #4]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b13c      	cbz	r4, 8009b30 <node_convert_integer+0xb0>
 8009b20:	6865      	ldr	r5, [r4, #4]
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	f000 80ad 	beq.w	8009c82 <node_convert_integer+0x202>
 8009b28:	8864      	ldrh	r4, [r4, #2]
 8009b2a:	b10c      	cbz	r4, 8009b30 <node_convert_integer+0xb0>
 8009b2c:	686c      	ldr	r4, [r5, #4]
 8009b2e:	7824      	ldrb	r4, [r4, #0]
 8009b30:	9400      	str	r4, [sp, #0]
 8009b32:	f002 f83b 	bl	800bbac <forward_lite_node_convert_integer_iu8ou8>
 8009b36:	b002      	add	sp, #8
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	deff      	udf	#255	; 0xff
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d042      	beq.n	8009bc8 <node_convert_integer+0x148>
 8009b42:	6886      	ldr	r6, [r0, #8]
 8009b44:	68a9      	ldr	r1, [r5, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d07f      	beq.n	8009c4a <node_convert_integer+0x1ca>
 8009b4a:	6858      	ldr	r0, [r3, #4]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f000 8092 	beq.w	8009c76 <node_convert_integer+0x1f6>
 8009b52:	885d      	ldrh	r5, [r3, #2]
 8009b54:	b115      	cbz	r5, 8009b5c <node_convert_integer+0xdc>
 8009b56:	6843      	ldr	r3, [r0, #4]
 8009b58:	f993 5000 	ldrsb.w	r5, [r3]
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	d078      	beq.n	8009c52 <node_convert_integer+0x1d2>
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d07b      	beq.n	8009c5e <node_convert_integer+0x1de>
 8009b66:	8860      	ldrh	r0, [r4, #2]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d075      	beq.n	8009c58 <node_convert_integer+0x1d8>
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8009b72:	ee06 3a90 	vmov	s13, r3
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	d0dd      	beq.n	8009b36 <node_convert_integer+0xb6>
 8009b7a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b7e:	4432      	add	r2, r6
 8009b80:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009b84:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009ca4 <node_convert_integer+0x224>
 8009b88:	f916 3b01 	ldrsb.w	r3, [r6], #1
 8009b8c:	1b5b      	subs	r3, r3, r5
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b96:	eef0 7a66 	vmov.f32	s15, s13
 8009b9a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009b9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	bfcc      	ite	gt
 8009ba8:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8009bac:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 8009bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bb4:	ee17 3a90 	vmov	r3, s15
 8009bb8:	f303 0307 	ssat	r3, #8, r3
 8009bbc:	4296      	cmp	r6, r2
 8009bbe:	f801 3b01 	strb.w	r3, [r1], #1
 8009bc2:	d1e1      	bne.n	8009b88 <node_convert_integer+0x108>
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	6880      	ldr	r0, [r0, #8]
 8009bca:	68a9      	ldr	r1, [r5, #8]
 8009bcc:	b13b      	cbz	r3, 8009bde <node_convert_integer+0x15e>
 8009bce:	685d      	ldr	r5, [r3, #4]
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	d04c      	beq.n	8009c6e <node_convert_integer+0x1ee>
 8009bd4:	885b      	ldrh	r3, [r3, #2]
 8009bd6:	b113      	cbz	r3, 8009bde <node_convert_integer+0x15e>
 8009bd8:	686b      	ldr	r3, [r5, #4]
 8009bda:	f993 3000 	ldrsb.w	r3, [r3]
 8009bde:	b134      	cbz	r4, 8009bee <node_convert_integer+0x16e>
 8009be0:	6865      	ldr	r5, [r4, #4]
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	d04b      	beq.n	8009c7e <node_convert_integer+0x1fe>
 8009be6:	8864      	ldrh	r4, [r4, #2]
 8009be8:	b10c      	cbz	r4, 8009bee <node_convert_integer+0x16e>
 8009bea:	686c      	ldr	r4, [r5, #4]
 8009bec:	7824      	ldrb	r4, [r4, #0]
 8009bee:	eeb4 7a67 	vcmp.f32	s14, s15
 8009bf2:	9400      	str	r4, [sp, #0]
 8009bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf8:	d103      	bne.n	8009c02 <node_convert_integer+0x182>
 8009bfa:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8009bfe:	42a5      	cmp	r5, r4
 8009c00:	d048      	beq.n	8009c94 <node_convert_integer+0x214>
 8009c02:	f002 f875 	bl	800bcf0 <forward_lite_node_convert_integer_is8ou8>
 8009c06:	b002      	add	sp, #8
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	b133      	cbz	r3, 8009c1a <node_convert_integer+0x19a>
 8009c0c:	6859      	ldr	r1, [r3, #4]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	d039      	beq.n	8009c86 <node_convert_integer+0x206>
 8009c12:	885b      	ldrh	r3, [r3, #2]
 8009c14:	b10b      	cbz	r3, 8009c1a <node_convert_integer+0x19a>
 8009c16:	684b      	ldr	r3, [r1, #4]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	b134      	cbz	r4, 8009c2a <node_convert_integer+0x1aa>
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	b361      	cbz	r1, 8009c7a <node_convert_integer+0x1fa>
 8009c20:	8864      	ldrh	r4, [r4, #2]
 8009c22:	b114      	cbz	r4, 8009c2a <node_convert_integer+0x1aa>
 8009c24:	6849      	ldr	r1, [r1, #4]
 8009c26:	f991 4000 	ldrsb.w	r4, [r1]
 8009c2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8009c2e:	6880      	ldr	r0, [r0, #8]
 8009c30:	68a9      	ldr	r1, [r5, #8]
 8009c32:	9400      	str	r4, [sp, #0]
 8009c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c38:	d103      	bne.n	8009c42 <node_convert_integer+0x1c2>
 8009c3a:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8009c3e:	42ab      	cmp	r3, r5
 8009c40:	d025      	beq.n	8009c8e <node_convert_integer+0x20e>
 8009c42:	f001 ffdd 	bl	800bc00 <forward_lite_node_convert_integer_iu8os8>
 8009c46:	b002      	add	sp, #8
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
 8009c4a:	461d      	mov	r5, r3
 8009c4c:	e786      	b.n	8009b5c <node_convert_integer+0xdc>
 8009c4e:	2201      	movs	r2, #1
 8009c50:	e734      	b.n	8009abc <node_convert_integer+0x3c>
 8009c52:	ee06 4a90 	vmov	s13, r4
 8009c56:	e78e      	b.n	8009b76 <node_convert_integer+0xf6>
 8009c58:	ee06 0a90 	vmov	s13, r0
 8009c5c:	e78b      	b.n	8009b76 <node_convert_integer+0xf6>
 8009c5e:	ee06 3a90 	vmov	s13, r3
 8009c62:	e788      	b.n	8009b76 <node_convert_integer+0xf6>
 8009c64:	462b      	mov	r3, r5
 8009c66:	2c00      	cmp	r4, #0
 8009c68:	f47f af5a 	bne.w	8009b20 <node_convert_integer+0xa0>
 8009c6c:	e760      	b.n	8009b30 <node_convert_integer+0xb0>
 8009c6e:	462b      	mov	r3, r5
 8009c70:	2c00      	cmp	r4, #0
 8009c72:	d1b5      	bne.n	8009be0 <node_convert_integer+0x160>
 8009c74:	e7bb      	b.n	8009bee <node_convert_integer+0x16e>
 8009c76:	4605      	mov	r5, r0
 8009c78:	e770      	b.n	8009b5c <node_convert_integer+0xdc>
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	e7d5      	b.n	8009c2a <node_convert_integer+0x1aa>
 8009c7e:	462c      	mov	r4, r5
 8009c80:	e7b5      	b.n	8009bee <node_convert_integer+0x16e>
 8009c82:	462c      	mov	r4, r5
 8009c84:	e754      	b.n	8009b30 <node_convert_integer+0xb0>
 8009c86:	460b      	mov	r3, r1
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d1c7      	bne.n	8009c1c <node_convert_integer+0x19c>
 8009c8c:	e7cd      	b.n	8009c2a <node_convert_integer+0x1aa>
 8009c8e:	f001 fff7 	bl	800bc80 <forward_lite_node_convert_integer_iu8os8_fast>
 8009c92:	e750      	b.n	8009b36 <node_convert_integer+0xb6>
 8009c94:	f002 f856 	bl	800bd44 <forward_lite_node_convert_integer_is8ou8_fast>
 8009c98:	e74d      	b.n	8009b36 <node_convert_integer+0xb6>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	deff      	udf	#255	; 0xff
 8009ca0:	00000000 	.word	0x00000000
 8009ca4:	3efffffc 	.word	0x3efffffc

08009ca8 <core_init>:
 8009ca8:	2001      	movs	r0, #1
 8009caa:	4770      	bx	lr

08009cac <core_set_error>:
 8009cac:	4603      	mov	r3, r0
 8009cae:	7800      	ldrb	r0, [r0, #0]
 8009cb0:	b108      	cbz	r0, 8009cb6 <core_set_error+0xa>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	4770      	bx	lr
 8009cb6:	7019      	strb	r1, [r3, #0]
 8009cb8:	2001      	movs	r0, #1
 8009cba:	6819      	ldr	r1, [r3, #0]
 8009cbc:	f362 211f 	bfi	r1, r2, #8, #24
 8009cc0:	6019      	str	r1, [r3, #0]
 8009cc2:	4770      	bx	lr

08009cc4 <forward_dense>:
 8009cc4:	6983      	ldr	r3, [r0, #24]
 8009cc6:	881a      	ldrh	r2, [r3, #0]
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	f000 80f7 	beq.w	8009ebc <forward_dense+0x1f8>
 8009cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd2:	ed2d 8b0e 	vpush	{d8-d14}
 8009cd6:	6858      	ldr	r0, [r3, #4]
 8009cd8:	b09b      	sub	sp, #108	; 0x6c
 8009cda:	6847      	ldr	r7, [r0, #4]
 8009cdc:	b107      	cbz	r7, 8009ce0 <forward_dense+0x1c>
 8009cde:	683f      	ldr	r7, [r7, #0]
 8009ce0:	2a01      	cmp	r2, #1
 8009ce2:	f000 8523 	beq.w	800a72c <forward_dense+0xa68>
 8009ce6:	6905      	ldr	r5, [r0, #16]
 8009ce8:	b105      	cbz	r5, 8009cec <forward_dense+0x28>
 8009cea:	682d      	ldr	r5, [r5, #0]
 8009cec:	2a02      	cmp	r2, #2
 8009cee:	f000 80e7 	beq.w	8009ec0 <forward_dense+0x1fc>
 8009cf2:	69c3      	ldr	r3, [r0, #28]
 8009cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8509 	beq.w	800a70e <forward_dense+0xa4a>
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	8b03      	ldrh	r3, [r0, #24]
 8009d00:	6809      	ldr	r1, [r1, #0]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	910c      	str	r1, [sp, #48]	; 0x30
 8009d06:	f240 8505 	bls.w	800a714 <forward_dense+0xa50>
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d10:	460b      	mov	r3, r1
 8009d12:	6999      	ldr	r1, [r3, #24]
 8009d14:	2a03      	cmp	r2, #3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68ec      	ldr	r4, [r5, #12]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009d20:	9314      	str	r3, [sp, #80]	; 0x50
 8009d22:	680b      	ldr	r3, [r1, #0]
 8009d24:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 8009d28:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009d2c:	fb0c fb06 	mul.w	fp, ip, r6
 8009d30:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8009d34:	fa4e f40c 	asr.w	r4, lr, ip
 8009d38:	9413      	str	r4, [sp, #76]	; 0x4c
 8009d3a:	f000 84f4 	beq.w	800a726 <forward_dense+0xa62>
 8009d3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009d40:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	f000 84dc 	beq.w	800a702 <forward_dense+0xa3e>
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	f000 84d8 	beq.w	800a702 <forward_dense+0xa3e>
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009d58:	f000 84bf 	beq.w	800a6da <forward_dense+0xa16>
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	f000 84bc 	beq.w	800a6da <forward_dense+0xa16>
 8009d62:	f04f 0a00 	mov.w	sl, #0
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	fb0b f408 	mul.w	r4, fp, r8
 8009d6c:	69aa      	ldr	r2, [r5, #24]
 8009d6e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d74:	6892      	ldr	r2, [r2, #8]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8009d7c:	9204      	str	r2, [sp, #16]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	428a      	cmp	r2, r1
 8009d82:	910f      	str	r1, [sp, #60]	; 0x3c
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	ea4f 0386 	mov.w	r3, r6, lsl #2
 8009d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d8c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f080 849a 	bcs.w	800a6ca <forward_dense+0xa06>
 8009d96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d98:	4bbf      	ldr	r3, [pc, #764]	; (800a098 <forward_dense+0x3d4>)
 8009d9a:	08d0      	lsrs	r0, r2, #3
 8009d9c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a09c <forward_dense+0x3d8>
 8009da0:	4413      	add	r3, r2
 8009da2:	9007      	str	r0, [sp, #28]
 8009da4:	0099      	lsls	r1, r3, #2
 8009da6:	f1a2 0310 	sub.w	r3, r2, #16
 8009daa:	091b      	lsrs	r3, r3, #4
 8009dac:	f101 0420 	add.w	r4, r1, #32
 8009db0:	9115      	str	r1, [sp, #84]	; 0x54
 8009db2:	0949      	lsrs	r1, r1, #5
 8009db4:	3301      	adds	r3, #1
 8009db6:	940e      	str	r4, [sp, #56]	; 0x38
 8009db8:	445c      	add	r4, fp
 8009dba:	9116      	str	r1, [sp, #88]	; 0x58
 8009dbc:	019b      	lsls	r3, r3, #6
 8009dbe:	46a1      	mov	r9, r4
 8009dc0:	940a      	str	r4, [sp, #40]	; 0x28
 8009dc2:	9319      	str	r3, [sp, #100]	; 0x64
 8009dc4:	f022 0301 	bic.w	r3, r2, #1
 8009dc8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	9318      	str	r3, [sp, #96]	; 0x60
 8009dd4:	00cb      	lsls	r3, r1, #3
 8009dd6:	3310      	adds	r3, #16
 8009dd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dda:	f002 0301 	and.w	r3, r2, #1
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	4653      	mov	r3, sl
 8009de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dea:	6992      	ldr	r2, [r2, #24]
 8009dec:	6897      	ldr	r7, [r2, #8]
 8009dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	f000 8270 	beq.w	800a2d6 <forward_dense+0x612>
 8009df6:	6992      	ldr	r2, [r2, #24]
 8009df8:	6895      	ldr	r5, [r2, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 826f 	beq.w	800a2de <forward_dense+0x61a>
 8009e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e02:	2a04      	cmp	r2, #4
 8009e04:	f000 837a 	beq.w	800a4fc <forward_dense+0x838>
 8009e08:	9a01      	ldr	r2, [sp, #4]
 8009e0a:	9904      	ldr	r1, [sp, #16]
 8009e0c:	428a      	cmp	r2, r1
 8009e0e:	d93f      	bls.n	8009e90 <forward_dense+0x1cc>
 8009e10:	468e      	mov	lr, r1
 8009e12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e14:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e16:	3201      	adds	r2, #1
 8009e18:	eb01 0a0b 	add.w	sl, r1, fp
 8009e1c:	f10b 0104 	add.w	r1, fp, #4
 8009e20:	9110      	str	r1, [sp, #64]	; 0x40
 8009e22:	00d1      	lsls	r1, r2, #3
 8009e24:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 8009e28:	f8cd a018 	str.w	sl, [sp, #24]
 8009e2c:	9111      	str	r1, [sp, #68]	; 0x44
 8009e2e:	9212      	str	r2, [sp, #72]	; 0x48
 8009e30:	f1aa 0204 	sub.w	r2, sl, #4
 8009e34:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8009e38:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	f000 8128 	beq.w	800a090 <forward_dense+0x3cc>
 8009e40:	ecf5 4a01 	vldmia	r5!, {s9}
 8009e44:	f1ba 0f07 	cmp.w	sl, #7
 8009e48:	d83d      	bhi.n	8009ec6 <forward_dense+0x202>
 8009e4a:	45cb      	cmp	fp, r9
 8009e4c:	d211      	bcs.n	8009e72 <forward_dense+0x1ae>
 8009e4e:	eddf 7a93 	vldr	s15, [pc, #588]	; 800a09c <forward_dense+0x3d8>
 8009e52:	4659      	mov	r1, fp
 8009e54:	4638      	mov	r0, r7
 8009e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e5a:	ecf1 6a01 	vldmia	r1!, {s13}
 8009e5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009e62:	4549      	cmp	r1, r9
 8009e64:	ed92 6a00 	vldr	s12, [r2]
 8009e68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e6c:	d3f3      	bcc.n	8009e56 <forward_dense+0x192>
 8009e6e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8009e72:	9a02      	ldr	r2, [sp, #8]
 8009e74:	ecee 4a01 	vstmia	lr!, {s9}
 8009e78:	4417      	add	r7, r2
 8009e7a:	9a01      	ldr	r2, [sp, #4]
 8009e7c:	4596      	cmp	lr, r2
 8009e7e:	d3dc      	bcc.n	8009e3a <forward_dense+0x176>
 8009e80:	9904      	ldr	r1, [sp, #16]
 8009e82:	1a52      	subs	r2, r2, r1
 8009e84:	3a01      	subs	r2, #1
 8009e86:	f022 0203 	bic.w	r2, r2, #3
 8009e8a:	3204      	adds	r2, #4
 8009e8c:	188a      	adds	r2, r1, r2
 8009e8e:	9204      	str	r2, [sp, #16]
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e94:	9804      	ldr	r0, [sp, #16]
 8009e96:	440a      	add	r2, r1
 8009e98:	9905      	ldr	r1, [sp, #20]
 8009e9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009e9c:	9201      	str	r2, [sp, #4]
 8009e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	4411      	add	r1, r2
 8009ea4:	4491      	add	r9, r2
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	9903      	ldr	r1, [sp, #12]
 8009eaa:	4411      	add	r1, r2
 8009eac:	9103      	str	r1, [sp, #12]
 8009eae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009eb0:	468b      	mov	fp, r1
 8009eb2:	f080 840a 	bcs.w	800a6ca <forward_dense+0xa06>
 8009eb6:	4411      	add	r1, r2
 8009eb8:	910a      	str	r1, [sp, #40]	; 0x28
 8009eba:	e795      	b.n	8009de8 <forward_dense+0x124>
 8009ebc:	6853      	ldr	r3, [r2, #4]
 8009ebe:	deff      	udf	#255	; 0xff
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	deff      	udf	#255	; 0xff
 8009ec6:	f007 0203 	and.w	r2, r7, #3
 8009eca:	2a02      	cmp	r2, #2
 8009ecc:	f000 81e7 	beq.w	800a29e <forward_dense+0x5da>
 8009ed0:	2a03      	cmp	r2, #3
 8009ed2:	f000 80e5 	beq.w	800a0a0 <forward_dense+0x3dc>
 8009ed6:	2a01      	cmp	r2, #1
 8009ed8:	f000 81f0 	beq.w	800a2bc <forward_dense+0x5f8>
 8009edc:	9a06      	ldr	r2, [sp, #24]
 8009ede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a09c <forward_dense+0x3d8>
 8009ee2:	4593      	cmp	fp, r2
 8009ee4:	f200 83f6 	bhi.w	800a6d4 <forward_dense+0xa10>
 8009ee8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009eea:	f107 0208 	add.w	r2, r7, #8
 8009eee:	f10b 0120 	add.w	r1, fp, #32
 8009ef2:	19c4      	adds	r4, r0, r7
 8009ef4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8009ef8:	3208      	adds	r2, #8
 8009efa:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8009efe:	3120      	adds	r1, #32
 8009f00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f04:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 8009f08:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 8009f0c:	edd0 7a00 	vldr	s15, [r0]
 8009f10:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8009f14:	ee67 7a82 	vmul.f32	s15, s15, s4
 8009f18:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8009f1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f20:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 8009f24:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8009f28:	ed90 2a00 	vldr	s4, [r0]
 8009f2c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8009f30:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009f34:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8009f38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f3c:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8009f40:	edd0 2a00 	vldr	s5, [r0]
 8009f44:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8009f48:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f50:	ed90 3a00 	vldr	s6, [r0]
 8009f54:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8009f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f5c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009f60:	edd0 3a00 	vldr	s7, [r0]
 8009f64:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8009f68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f6c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009f70:	ed90 4a00 	vldr	s8, [r0]
 8009f74:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8009f78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f7c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009f80:	ed90 5a00 	vldr	s10, [r0]
 8009f84:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8009f88:	4294      	cmp	r4, r2
 8009f8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f8e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009f92:	edd0 5a00 	vldr	s11, [r0]
 8009f96:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009f9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009f9e:	d1a9      	bne.n	8009ef4 <forward_dense+0x230>
 8009fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fa2:	18b9      	adds	r1, r7, r2
 8009fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fa6:	454a      	cmp	r2, r9
 8009fa8:	d26f      	bcs.n	800a08a <forward_dense+0x3c6>
 8009faa:	7808      	ldrb	r0, [r1, #0]
 8009fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fb0:	edd0 7a00 	vldr	s15, [r0]
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	ecb0 6a01 	vldmia	r0!, {s12}
 8009fba:	4581      	cmp	r9, r0
 8009fbc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009fc0:	d963      	bls.n	800a08a <forward_dense+0x3c6>
 8009fc2:	7848      	ldrb	r0, [r1, #1]
 8009fc4:	ed92 6a01 	vldr	s12, [r2, #4]
 8009fc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fcc:	edd0 7a00 	vldr	s15, [r0]
 8009fd0:	f102 0008 	add.w	r0, r2, #8
 8009fd4:	4581      	cmp	r9, r0
 8009fd6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009fda:	d956      	bls.n	800a08a <forward_dense+0x3c6>
 8009fdc:	7888      	ldrb	r0, [r1, #2]
 8009fde:	ed92 6a02 	vldr	s12, [r2, #8]
 8009fe2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fe6:	edd0 7a00 	vldr	s15, [r0]
 8009fea:	f102 000c 	add.w	r0, r2, #12
 8009fee:	4581      	cmp	r9, r0
 8009ff0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009ff4:	d949      	bls.n	800a08a <forward_dense+0x3c6>
 8009ff6:	78c8      	ldrb	r0, [r1, #3]
 8009ff8:	ed92 6a03 	vldr	s12, [r2, #12]
 8009ffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a000:	edd0 7a00 	vldr	s15, [r0]
 800a004:	f102 0010 	add.w	r0, r2, #16
 800a008:	4581      	cmp	r9, r0
 800a00a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a00e:	d93c      	bls.n	800a08a <forward_dense+0x3c6>
 800a010:	7908      	ldrb	r0, [r1, #4]
 800a012:	ed92 6a04 	vldr	s12, [r2, #16]
 800a016:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a01a:	edd0 7a00 	vldr	s15, [r0]
 800a01e:	f102 0014 	add.w	r0, r2, #20
 800a022:	4581      	cmp	r9, r0
 800a024:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a028:	d92f      	bls.n	800a08a <forward_dense+0x3c6>
 800a02a:	7948      	ldrb	r0, [r1, #5]
 800a02c:	ed92 6a05 	vldr	s12, [r2, #20]
 800a030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a034:	edd0 7a00 	vldr	s15, [r0]
 800a038:	f102 0018 	add.w	r0, r2, #24
 800a03c:	4581      	cmp	r9, r0
 800a03e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a042:	d922      	bls.n	800a08a <forward_dense+0x3c6>
 800a044:	7988      	ldrb	r0, [r1, #6]
 800a046:	ed92 6a06 	vldr	s12, [r2, #24]
 800a04a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a04e:	edd0 7a00 	vldr	s15, [r0]
 800a052:	f102 001c 	add.w	r0, r2, #28
 800a056:	4581      	cmp	r9, r0
 800a058:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a05c:	d915      	bls.n	800a08a <forward_dense+0x3c6>
 800a05e:	79c8      	ldrb	r0, [r1, #7]
 800a060:	ed92 6a07 	vldr	s12, [r2, #28]
 800a064:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a068:	edd0 7a00 	vldr	s15, [r0]
 800a06c:	f102 0020 	add.w	r0, r2, #32
 800a070:	4581      	cmp	r9, r0
 800a072:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a076:	d908      	bls.n	800a08a <forward_dense+0x3c6>
 800a078:	edd2 7a08 	vldr	s15, [r2, #32]
 800a07c:	7a0a      	ldrb	r2, [r1, #8]
 800a07e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a082:	ed92 6a00 	vldr	s12, [r2]
 800a086:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a08a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800a08e:	e6f0      	b.n	8009e72 <forward_dense+0x1ae>
 800a090:	eddf 4a02 	vldr	s9, [pc, #8]	; 800a09c <forward_dense+0x3d8>
 800a094:	e6d6      	b.n	8009e44 <forward_dense+0x180>
 800a096:	bf00      	nop
 800a098:	3ffffff8 	.word	0x3ffffff8
 800a09c:	00000000 	.word	0x00000000
 800a0a0:	eef0 6a47 	vmov.f32	s13, s14
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	4694      	mov	ip, r2
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800a0b0:	ecf4 7a01 	vldmia	r4!, {s15}
 800a0b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0b8:	ed90 6a00 	vldr	s12, [r0]
 800a0bc:	9806      	ldr	r0, [sp, #24]
 800a0be:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a0c2:	4284      	cmp	r4, r0
 800a0c4:	d866      	bhi.n	800a194 <forward_dense+0x4d0>
 800a0c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c8:	f102 0611 	add.w	r6, r2, #17
 800a0cc:	3209      	adds	r2, #9
 800a0ce:	eba0 0801 	sub.w	r8, r0, r1
 800a0d2:	3124      	adds	r1, #36	; 0x24
 800a0d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800a0d8:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800a0dc:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a0e0:	3208      	adds	r2, #8
 800a0e2:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a0e6:	3120      	adds	r1, #32
 800a0e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0ec:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 800a0f0:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800a0f4:	edd0 7a00 	vldr	s15, [r0]
 800a0f8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a0fc:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a100:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a108:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800a10c:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 800a110:	ed90 2a00 	vldr	s4, [r0]
 800a114:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a118:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a11c:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a120:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a124:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800a128:	edd0 2a00 	vldr	s5, [r0]
 800a12c:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a130:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a134:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a138:	ed90 3a00 	vldr	s6, [r0]
 800a13c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a144:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a148:	edd0 3a00 	vldr	s7, [r0]
 800a14c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a154:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a158:	ed90 4a00 	vldr	s8, [r0]
 800a15c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a160:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a164:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a168:	ed90 5a00 	vldr	s10, [r0]
 800a16c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a170:	4296      	cmp	r6, r2
 800a172:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a176:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a17a:	edd0 5a00 	vldr	s11, [r0]
 800a17e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a182:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a186:	d1a9      	bne.n	800a0dc <forward_dense+0x418>
 800a188:	f108 0801 	add.w	r8, r8, #1
 800a18c:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800a190:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 800a194:	454c      	cmp	r4, r9
 800a196:	f4bf af78 	bcs.w	800a08a <forward_dense+0x3c6>
 800a19a:	f89c 2000 	ldrb.w	r2, [ip]
 800a19e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a1a2:	edd2 7a00 	vldr	s15, [r2]
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	ecb2 6a01 	vldmia	r2!, {s12}
 800a1ac:	4591      	cmp	r9, r2
 800a1ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1b2:	f67f af6a 	bls.w	800a08a <forward_dense+0x3c6>
 800a1b6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800a1ba:	ed94 6a01 	vldr	s12, [r4, #4]
 800a1be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a1c2:	edd2 7a00 	vldr	s15, [r2]
 800a1c6:	f104 0208 	add.w	r2, r4, #8
 800a1ca:	4591      	cmp	r9, r2
 800a1cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1d0:	f67f af5b 	bls.w	800a08a <forward_dense+0x3c6>
 800a1d4:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800a1d8:	ed94 6a02 	vldr	s12, [r4, #8]
 800a1dc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a1e0:	edd2 7a00 	vldr	s15, [r2]
 800a1e4:	f104 020c 	add.w	r2, r4, #12
 800a1e8:	4591      	cmp	r9, r2
 800a1ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1ee:	f67f af4c 	bls.w	800a08a <forward_dense+0x3c6>
 800a1f2:	f89c 2003 	ldrb.w	r2, [ip, #3]
 800a1f6:	ed94 6a03 	vldr	s12, [r4, #12]
 800a1fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a1fe:	edd2 7a00 	vldr	s15, [r2]
 800a202:	f104 0210 	add.w	r2, r4, #16
 800a206:	4591      	cmp	r9, r2
 800a208:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a20c:	f67f af3d 	bls.w	800a08a <forward_dense+0x3c6>
 800a210:	f89c 2004 	ldrb.w	r2, [ip, #4]
 800a214:	ed94 6a04 	vldr	s12, [r4, #16]
 800a218:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a21c:	edd2 7a00 	vldr	s15, [r2]
 800a220:	f104 0214 	add.w	r2, r4, #20
 800a224:	4591      	cmp	r9, r2
 800a226:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a22a:	f67f af2e 	bls.w	800a08a <forward_dense+0x3c6>
 800a22e:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800a232:	ed94 6a05 	vldr	s12, [r4, #20]
 800a236:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a23a:	edd2 7a00 	vldr	s15, [r2]
 800a23e:	f104 0218 	add.w	r2, r4, #24
 800a242:	4591      	cmp	r9, r2
 800a244:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a248:	f67f af1f 	bls.w	800a08a <forward_dense+0x3c6>
 800a24c:	f89c 2006 	ldrb.w	r2, [ip, #6]
 800a250:	ed94 6a06 	vldr	s12, [r4, #24]
 800a254:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a258:	edd2 7a00 	vldr	s15, [r2]
 800a25c:	f104 021c 	add.w	r2, r4, #28
 800a260:	4591      	cmp	r9, r2
 800a262:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a266:	f67f af10 	bls.w	800a08a <forward_dense+0x3c6>
 800a26a:	f89c 2007 	ldrb.w	r2, [ip, #7]
 800a26e:	ed94 6a07 	vldr	s12, [r4, #28]
 800a272:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a276:	edd2 7a00 	vldr	s15, [r2]
 800a27a:	f104 0220 	add.w	r2, r4, #32
 800a27e:	4591      	cmp	r9, r2
 800a280:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a284:	f67f af01 	bls.w	800a08a <forward_dense+0x3c6>
 800a288:	f89c 2008 	ldrb.w	r2, [ip, #8]
 800a28c:	edd4 7a08 	vldr	s15, [r4, #32]
 800a290:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a294:	ed92 6a00 	vldr	s12, [r2]
 800a298:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a29c:	e6f5      	b.n	800a08a <forward_dense+0x3c6>
 800a29e:	eef0 6a47 	vmov.f32	s13, s14
 800a2a2:	4659      	mov	r1, fp
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a2aa:	ecf1 7a01 	vldmia	r1!, {s15}
 800a2ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2b2:	ed90 6a00 	vldr	s12, [r0]
 800a2b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a2ba:	e6f5      	b.n	800a0a8 <forward_dense+0x3e4>
 800a2bc:	463a      	mov	r2, r7
 800a2be:	eddb 7a00 	vldr	s15, [fp]
 800a2c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a2c4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a2c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2cc:	edd0 6a00 	vldr	s13, [r0]
 800a2d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a2d4:	e7e7      	b.n	800a2a6 <forward_dense+0x5e2>
 800a2d6:	4615      	mov	r5, r2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f47f ad91 	bne.w	8009e00 <forward_dense+0x13c>
 800a2de:	9a01      	ldr	r2, [sp, #4]
 800a2e0:	9904      	ldr	r1, [sp, #16]
 800a2e2:	428a      	cmp	r2, r1
 800a2e4:	f67f add4 	bls.w	8009e90 <forward_dense+0x1cc>
 800a2e8:	4690      	mov	r8, r2
 800a2ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a2ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f000 0c0f 	and.w	ip, r0, #15
 800a2f4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a2f8:	eb0b 0602 	add.w	r6, fp, r2
 800a2fc:	4692      	mov	sl, r2
 800a2fe:	9306      	str	r3, [sp, #24]
 800a300:	2d00      	cmp	r5, #0
 800a302:	f000 81d7 	beq.w	800a6b4 <forward_dense+0x9f0>
 800a306:	280f      	cmp	r0, #15
 800a308:	ecb5 0a01 	vldmia	r5!, {s0}
 800a30c:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 800a09c <forward_dense+0x3d8>
 800a310:	f240 81d7 	bls.w	800a6c2 <forward_dense+0x9fe>
 800a314:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800a318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a31c:	4601      	mov	r1, r0
 800a31e:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800a322:	3910      	subs	r1, #16
 800a324:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a328:	3340      	adds	r3, #64	; 0x40
 800a32a:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 800a32e:	290f      	cmp	r1, #15
 800a330:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a334:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800a338:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800a33c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a340:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800a344:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a348:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 800a34c:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800a350:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800a354:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800a358:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800a35c:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800a360:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a364:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a368:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a36c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a370:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a374:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800a378:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800a37c:	eeee 7a06 	vfma.f32	s15, s28, s12
 800a380:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 800a384:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 800a388:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a38c:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 800a390:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800a394:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 800a398:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a39c:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 800a3a0:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800a3a4:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a3a8:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a3ac:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a3b0:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a3b4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a3b8:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800a3bc:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800a3c0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a3c4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a3c8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a3cc:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a3d0:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a3d4:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a3d8:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a3dc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a3e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a3e4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a3e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a3ec:	d897      	bhi.n	800a31e <forward_dense+0x65a>
 800a3ee:	eb07 010a 	add.w	r1, r7, sl
 800a3f2:	4663      	mov	r3, ip
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d075      	beq.n	800a4e6 <forward_dense+0x822>
 800a3fa:	ed92 6a00 	vldr	s12, [r2]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	edd1 7a00 	vldr	s15, [r1]
 800a404:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a408:	d06d      	beq.n	800a4e6 <forward_dense+0x822>
 800a40a:	ed92 6a01 	vldr	s12, [r2, #4]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	edd1 7a01 	vldr	s15, [r1, #4]
 800a414:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a418:	d065      	beq.n	800a4e6 <forward_dense+0x822>
 800a41a:	ed92 6a02 	vldr	s12, [r2, #8]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	edd1 7a02 	vldr	s15, [r1, #8]
 800a424:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a428:	d05d      	beq.n	800a4e6 <forward_dense+0x822>
 800a42a:	ed92 6a03 	vldr	s12, [r2, #12]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	edd1 7a03 	vldr	s15, [r1, #12]
 800a434:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a438:	d055      	beq.n	800a4e6 <forward_dense+0x822>
 800a43a:	ed92 6a04 	vldr	s12, [r2, #16]
 800a43e:	2b05      	cmp	r3, #5
 800a440:	edd1 7a04 	vldr	s15, [r1, #16]
 800a444:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a448:	d04d      	beq.n	800a4e6 <forward_dense+0x822>
 800a44a:	ed92 6a05 	vldr	s12, [r2, #20]
 800a44e:	2b06      	cmp	r3, #6
 800a450:	edd1 7a05 	vldr	s15, [r1, #20]
 800a454:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a458:	d045      	beq.n	800a4e6 <forward_dense+0x822>
 800a45a:	ed92 6a06 	vldr	s12, [r2, #24]
 800a45e:	2b07      	cmp	r3, #7
 800a460:	edd1 7a06 	vldr	s15, [r1, #24]
 800a464:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a468:	d03d      	beq.n	800a4e6 <forward_dense+0x822>
 800a46a:	ed92 6a07 	vldr	s12, [r2, #28]
 800a46e:	2b08      	cmp	r3, #8
 800a470:	edd1 7a07 	vldr	s15, [r1, #28]
 800a474:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a478:	d035      	beq.n	800a4e6 <forward_dense+0x822>
 800a47a:	ed92 6a08 	vldr	s12, [r2, #32]
 800a47e:	2b09      	cmp	r3, #9
 800a480:	edd1 7a08 	vldr	s15, [r1, #32]
 800a484:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a488:	d02d      	beq.n	800a4e6 <forward_dense+0x822>
 800a48a:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800a48e:	2b0a      	cmp	r3, #10
 800a490:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a494:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a498:	d025      	beq.n	800a4e6 <forward_dense+0x822>
 800a49a:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 800a49e:	2b0b      	cmp	r3, #11
 800a4a0:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a4a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4a8:	d01d      	beq.n	800a4e6 <forward_dense+0x822>
 800a4aa:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800a4ae:	2b0c      	cmp	r3, #12
 800a4b0:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a4b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4b8:	d015      	beq.n	800a4e6 <forward_dense+0x822>
 800a4ba:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 800a4be:	3b0d      	subs	r3, #13
 800a4c0:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a4c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4c8:	d00d      	beq.n	800a4e6 <forward_dense+0x822>
 800a4ca:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a4d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4d8:	d005      	beq.n	800a4e6 <forward_dense+0x822>
 800a4da:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800a4de:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a4e2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a4e6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a4ea:	4477      	add	r7, lr
 800a4ec:	ece4 6a01 	vstmia	r4!, {s13}
 800a4f0:	4544      	cmp	r4, r8
 800a4f2:	f4ff af05 	bcc.w	800a300 <forward_dense+0x63c>
 800a4f6:	9b06      	ldr	r3, [sp, #24]
 800a4f8:	9a01      	ldr	r2, [sp, #4]
 800a4fa:	e4c1      	b.n	8009e80 <forward_dense+0x1bc>
 800a4fc:	9901      	ldr	r1, [sp, #4]
 800a4fe:	9a04      	ldr	r2, [sp, #16]
 800a500:	4291      	cmp	r1, r2
 800a502:	f67f acc5 	bls.w	8009e90 <forward_dense+0x1cc>
 800a506:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a508:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a50c:	4691      	mov	r9, r2
 800a50e:	eb07 0c01 	add.w	ip, r7, r1
 800a512:	9903      	ldr	r1, [sp, #12]
 800a514:	3901      	subs	r1, #1
 800a516:	9106      	str	r1, [sp, #24]
 800a518:	2d00      	cmp	r5, #0
 800a51a:	f000 80c0 	beq.w	800a69e <forward_dense+0x9da>
 800a51e:	9a07      	ldr	r2, [sp, #28]
 800a520:	ecb5 2a01 	vldmia	r5!, {s4}
 800a524:	eddf 6a83 	vldr	s13, [pc, #524]	; 800a734 <forward_dense+0xa70>
 800a528:	2a00      	cmp	r2, #0
 800a52a:	f000 80c0 	beq.w	800a6ae <forward_dense+0x9ea>
 800a52e:	1d39      	adds	r1, r7, #4
 800a530:	f10b 0220 	add.w	r2, fp, #32
 800a534:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800a538:	3104      	adds	r1, #4
 800a53a:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800a53e:	3220      	adds	r2, #32
 800a540:	f006 0e0f 	and.w	lr, r6, #15
 800a544:	0936      	lsrs	r6, r6, #4
 800a546:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 800a54a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a54e:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 800a552:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a556:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 800a55a:	edde 7a00 	vldr	s15, [lr]
 800a55e:	edd6 2a00 	vldr	s5, [r6]
 800a562:	0926      	lsrs	r6, r4, #4
 800a564:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800a568:	f004 040f 	and.w	r4, r4, #15
 800a56c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a570:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 800a574:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a578:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800a57c:	eee2 7aa3 	vfma.f32	s15, s5, s7
 800a580:	edd6 2a00 	vldr	s5, [r6]
 800a584:	edd4 3a00 	vldr	s7, [r4]
 800a588:	0904      	lsrs	r4, r0, #4
 800a58a:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 800a58e:	f000 000f 	and.w	r0, r0, #15
 800a592:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a596:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800a59a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a59e:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 800a5a2:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 800a5a6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a5aa:	eee3 7aa4 	vfma.f32	s15, s7, s9
 800a5ae:	edd4 3a00 	vldr	s7, [r4]
 800a5b2:	edd0 4a00 	vldr	s9, [r0]
 800a5b6:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 800a5ba:	4561      	cmp	r1, ip
 800a5bc:	ea4f 1410 	mov.w	r4, r0, lsr #4
 800a5c0:	f000 000f 	and.w	r0, r0, #15
 800a5c4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a5c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5d0:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800a5d4:	edd4 4a00 	vldr	s9, [r4]
 800a5d8:	edd0 5a00 	vldr	s11, [r0]
 800a5dc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a5e0:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a5e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5e8:	d1a4      	bne.n	800a534 <forward_dense+0x870>
 800a5ea:	f1ac 0804 	sub.w	r8, ip, #4
 800a5ee:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a5f2:	9a03      	ldr	r2, [sp, #12]
 800a5f4:	4596      	cmp	lr, r2
 800a5f6:	d229      	bcs.n	800a64c <forward_dense+0x988>
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	f10e 0108 	add.w	r1, lr, #8
 800a5fe:	f108 34ff 	add.w	r4, r8, #4294967295
 800a602:	eba2 060e 	sub.w	r6, r2, lr
 800a606:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 800a60a:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 800a60e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800a612:	3108      	adds	r1, #8
 800a614:	ed11 5a03 	vldr	s10, [r1, #-12]
 800a618:	f002 000f 	and.w	r0, r2, #15
 800a61c:	0912      	lsrs	r2, r2, #4
 800a61e:	ed11 6a04 	vldr	s12, [r1, #-16]
 800a622:	42a6      	cmp	r6, r4
 800a624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a628:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a62c:	edd0 7a00 	vldr	s15, [r0]
 800a630:	edd2 5a00 	vldr	s11, [r2]
 800a634:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a638:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a63c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a640:	d1e5      	bne.n	800a60e <forward_dense+0x94a>
 800a642:	f10a 0a01 	add.w	sl, sl, #1
 800a646:	44d0      	add	r8, sl
 800a648:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a64c:	9a08      	ldr	r2, [sp, #32]
 800a64e:	b1ca      	cbz	r2, 800a684 <forward_dense+0x9c0>
 800a650:	f898 2000 	ldrb.w	r2, [r8]
 800a654:	edde 7a00 	vldr	s15, [lr]
 800a658:	0912      	lsrs	r2, r2, #4
 800a65a:	9902      	ldr	r1, [sp, #8]
 800a65c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a660:	440f      	add	r7, r1
 800a662:	448c      	add	ip, r1
 800a664:	ed92 6a00 	vldr	s12, [r2]
 800a668:	9a01      	ldr	r2, [sp, #4]
 800a66a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a66e:	ee32 2a26 	vadd.f32	s4, s4, s13
 800a672:	eca9 2a01 	vstmia	r9!, {s4}
 800a676:	454a      	cmp	r2, r9
 800a678:	f63f af4e 	bhi.w	800a518 <forward_dense+0x854>
 800a67c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a680:	f7ff bbfe 	b.w	8009e80 <forward_dense+0x1bc>
 800a684:	9a02      	ldr	r2, [sp, #8]
 800a686:	ee72 6a26 	vadd.f32	s13, s4, s13
 800a68a:	4417      	add	r7, r2
 800a68c:	4494      	add	ip, r2
 800a68e:	9a01      	ldr	r2, [sp, #4]
 800a690:	ece9 6a01 	vstmia	r9!, {s13}
 800a694:	4591      	cmp	r9, r2
 800a696:	d2f1      	bcs.n	800a67c <forward_dense+0x9b8>
 800a698:	2d00      	cmp	r5, #0
 800a69a:	f47f af40 	bne.w	800a51e <forward_dense+0x85a>
 800a69e:	9a07      	ldr	r2, [sp, #28]
 800a6a0:	eeb0 2a47 	vmov.f32	s4, s14
 800a6a4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a734 <forward_dense+0xa70>
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	f47f af40 	bne.w	800a52e <forward_dense+0x86a>
 800a6ae:	46de      	mov	lr, fp
 800a6b0:	46b8      	mov	r8, r7
 800a6b2:	e79e      	b.n	800a5f2 <forward_dense+0x92e>
 800a6b4:	280f      	cmp	r0, #15
 800a6b6:	eeb0 0a47 	vmov.f32	s0, s14
 800a6ba:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a734 <forward_dense+0xa70>
 800a6be:	f63f ae29 	bhi.w	800a314 <forward_dense+0x650>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	465a      	mov	r2, fp
 800a6c8:	e695      	b.n	800a3f6 <forward_dense+0x732>
 800a6ca:	b01b      	add	sp, #108	; 0x6c
 800a6cc:	ecbd 8b0e 	vpop	{d8-d14}
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	465a      	mov	r2, fp
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	e465      	b.n	8009fa6 <forward_dense+0x2e2>
 800a6da:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	f43f ab40 	beq.w	8009d66 <forward_dense+0xa2>
 800a6e6:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a6ea:	f009 fbab 	bl	8013e44 <ai_array_get_byte_size>
 800a6ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4651      	mov	r1, sl
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f009 fc4e 	bl	8013f98 <memcpy>
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	f7ff bb32 	b.w	8009d66 <forward_dense+0xa2>
 800a702:	2b04      	cmp	r3, #4
 800a704:	d00b      	beq.n	800a71e <forward_dense+0xa5a>
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	f7ff bb27 	b.w	8009d5c <forward_dense+0x98>
 800a70e:	930c      	str	r3, [sp, #48]	; 0x30
 800a710:	f7ff baff 	b.w	8009d12 <forward_dense+0x4e>
 800a714:	2300      	movs	r3, #0
 800a716:	930b      	str	r3, [sp, #44]	; 0x2c
 800a718:	460b      	mov	r3, r1
 800a71a:	f7ff bafa 	b.w	8009d12 <forward_dense+0x4e>
 800a71e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800a722:	f7ff bb20 	b.w	8009d66 <forward_dense+0xa2>
 800a726:	2300      	movs	r3, #0
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	deff      	udf	#255	; 0xff
 800a72c:	2300      	movs	r3, #0
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	deff      	udf	#255	; 0xff
 800a732:	bf00      	nop
 800a734:	00000000 	.word	0x00000000

0800a738 <func_dummy>:
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop

0800a73c <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800a73c:	6982      	ldr	r2, [r0, #24]
 800a73e:	8813      	ldrh	r3, [r2, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 81a3 	beq.w	800aa8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 800a746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	ed2d 8b04 	vpush	{d8-d9}
 800a74e:	6851      	ldr	r1, [r2, #4]
 800a750:	b0d9      	sub	sp, #356	; 0x164
 800a752:	4680      	mov	r8, r0
 800a754:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800a758:	f1ba 0f00 	cmp.w	sl, #0
 800a75c:	d001      	beq.n	800a762 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26>
 800a75e:	f8da a000 	ldr.w	sl, [sl]
 800a762:	2b01      	cmp	r3, #1
 800a764:	f000 8369 	beq.w	800ae3a <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fe>
 800a768:	690a      	ldr	r2, [r1, #16]
 800a76a:	9218      	str	r2, [sp, #96]	; 0x60
 800a76c:	b10a      	cbz	r2, 800a772 <forward_conv2d_nl_pool_integer_SSSA_ch+0x36>
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	9218      	str	r2, [sp, #96]	; 0x60
 800a772:	2b02      	cmp	r3, #2
 800a774:	f000 8187 	beq.w	800aa86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x34a>
 800a778:	69ca      	ldr	r2, [r1, #28]
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	f000 82f4 	beq.w	800ad68 <forward_conv2d_nl_pool_integer_SSSA_ch+0x62c>
 800a780:	8b08      	ldrh	r0, [r1, #24]
 800a782:	f8d2 b000 	ldr.w	fp, [r2]
 800a786:	2801      	cmp	r0, #1
 800a788:	f200 8182 	bhi.w	800aa90 <forward_conv2d_nl_pool_integer_SSSA_ch+0x354>
 800a78c:	2000      	movs	r0, #0
 800a78e:	901d      	str	r0, [sp, #116]	; 0x74
 800a790:	2b03      	cmp	r3, #3
 800a792:	f000 8355 	beq.w	800ae40 <forward_conv2d_nl_pool_integer_SSSA_ch+0x704>
 800a796:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 834c 	beq.w	800ae36 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fa>
 800a79e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 800a7a2:	6818      	ldr	r0, [r3, #0]
 800a7a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a7a8:	9133      	str	r1, [sp, #204]	; 0xcc
 800a7aa:	901a      	str	r0, [sp, #104]	; 0x68
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	f000 82d6 	beq.w	800ad5e <forward_conv2d_nl_pool_integer_SSSA_ch+0x622>
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	9319      	str	r3, [sp, #100]	; 0x64
 800a7b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a7ba:	f8da 000c 	ldr.w	r0, [sl, #12]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	6845      	ldr	r5, [r0, #4]
 800a7c2:	461e      	mov	r6, r3
 800a7c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a7c6:	9516      	str	r5, [sp, #88]	; 0x58
 800a7c8:	b2b6      	uxth	r6, r6
 800a7ca:	68e4      	ldr	r4, [r4, #12]
 800a7cc:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 800a7d0:	ee08 6a90 	vmov	s17, r6
 800a7d4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800a7d8:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 800a7dc:	ee08 6a10 	vmov	s16, r6
 800a7e0:	68e6      	ldr	r6, [r4, #12]
 800a7e2:	68a4      	ldr	r4, [r4, #8]
 800a7e4:	9322      	str	r3, [sp, #136]	; 0x88
 800a7e6:	9439      	str	r4, [sp, #228]	; 0xe4
 800a7e8:	680b      	ldr	r3, [r1, #0]
 800a7ea:	f8db c00c 	ldr.w	ip, [fp, #12]
 800a7ee:	f8d8 7054 	ldr.w	r7, [r8, #84]	; 0x54
 800a7f2:	961e      	str	r6, [sp, #120]	; 0x78
 800a7f4:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800a7f8:	903d      	str	r0, [sp, #244]	; 0xf4
 800a7fa:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 800a7fe:	9037      	str	r0, [sp, #220]	; 0xdc
 800a800:	b2a8      	uxth	r0, r5
 800a802:	9038      	str	r0, [sp, #224]	; 0xe0
 800a804:	b298      	uxth	r0, r3
 800a806:	9017      	str	r0, [sp, #92]	; 0x5c
 800a808:	8888      	ldrh	r0, [r1, #4]
 800a80a:	6889      	ldr	r1, [r1, #8]
 800a80c:	902e      	str	r0, [sp, #184]	; 0xb8
 800a80e:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
 800a812:	902f      	str	r0, [sp, #188]	; 0xbc
 800a814:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
 800a818:	9030      	str	r0, [sp, #192]	; 0xc0
 800a81a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800a81e:	9020      	str	r0, [sp, #128]	; 0x80
 800a820:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a824:	9029      	str	r0, [sp, #164]	; 0xa4
 800a826:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800a82a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a82c:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 800a830:	903a      	str	r0, [sp, #232]	; 0xe8
 800a832:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800a836:	903b      	str	r0, [sp, #236]	; 0xec
 800a838:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800a83c:	9026      	str	r0, [sp, #152]	; 0x98
 800a83e:	6838      	ldr	r0, [r7, #0]
 800a840:	902b      	str	r0, [sp, #172]	; 0xac
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	903c      	str	r0, [sp, #240]	; 0xf0
 800a846:	2a00      	cmp	r2, #0
 800a848:	f000 8264 	beq.w	800ad14 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800a84c:	6892      	ldr	r2, [r2, #8]
 800a84e:	2a00      	cmp	r2, #0
 800a850:	f000 8260 	beq.w	800ad14 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 800a854:	6990      	ldr	r0, [r2, #24]
 800a856:	2800      	cmp	r0, #0
 800a858:	bf08      	it	eq
 800a85a:	4602      	moveq	r2, r0
 800a85c:	922a      	str	r2, [sp, #168]	; 0xa8
 800a85e:	b29b      	uxth	r3, r3
 800a860:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a862:	b2aa      	uxth	r2, r5
 800a864:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800a868:	fa13 f181 	uxtah	r1, r3, r1
 800a86c:	4423      	add	r3, r4
 800a86e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a870:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 800a874:	4421      	add	r1, r4
 800a876:	9321      	str	r3, [sp, #132]	; 0x84
 800a878:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a87a:	ac4d      	add	r4, sp, #308	; 0x134
 800a87c:	6987      	ldr	r7, [r0, #24]
 800a87e:	1acd      	subs	r5, r1, r3
 800a880:	f240 4101 	movw	r1, #1025	; 0x401
 800a884:	f8cd c150 	str.w	ip, [sp, #336]	; 0x150
 800a888:	fbb5 f3f2 	udiv	r3, r5, r2
 800a88c:	aa49      	add	r2, sp, #292	; 0x124
 800a88e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a890:	9315      	str	r3, [sp, #84]	; 0x54
 800a892:	2300      	movs	r3, #0
 800a894:	9256      	str	r2, [sp, #344]	; 0x158
 800a896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a89a:	69ad      	ldr	r5, [r5, #24]
 800a89c:	9351      	str	r3, [sp, #324]	; 0x144
 800a89e:	9345      	str	r3, [sp, #276]	; 0x114
 800a8a0:	9349      	str	r3, [sp, #292]	; 0x124
 800a8a2:	9348      	str	r3, [sp, #288]	; 0x120
 800a8a4:	934c      	str	r3, [sp, #304]	; 0x130
 800a8a6:	9357      	str	r3, [sp, #348]	; 0x15c
 800a8a8:	952c      	str	r5, [sp, #176]	; 0xb0
 800a8aa:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 800a8ae:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 800a8b2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a8b6:	e9cd 2152 	strd	r2, r1, [sp, #328]	; 0x148
 800a8ba:	f240 4102 	movw	r1, #1026	; 0x402
 800a8be:	931f      	str	r3, [sp, #124]	; 0x7c
 800a8c0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800a8c4:	9155      	str	r1, [sp, #340]	; 0x154
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	a851      	add	r0, sp, #324	; 0x144
 800a8ca:	9331      	str	r3, [sp, #196]	; 0xc4
 800a8cc:	f009 faf2 	bl	8013eb4 <core_tensor_clone>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f009 fb20 	bl	8013f18 <core_array_clone>
 800a8d8:	9457      	str	r4, [sp, #348]	; 0x15c
 800a8da:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a8de:	f8da 2000 	ldr.w	r2, [sl]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f9bd 40ac 	ldrsh.w	r4, [sp, #172]	; 0xac
 800a8e8:	931c      	str	r3, [sp, #112]	; 0x70
 800a8ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a8ec:	f8db 0000 	ldr.w	r0, [fp]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	9327      	str	r3, [sp, #156]	; 0x9c
 800a8f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	f000 81c9 	beq.w	800ac92 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800a900:	6851      	ldr	r1, [r2, #4]
 800a902:	2900      	cmp	r1, #0
 800a904:	f000 81c5 	beq.w	800ac92 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800a908:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800a90c:	f1bc 0f00 	cmp.w	ip, #0
 800a910:	f000 81bf 	beq.w	800ac92 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 800a914:	6809      	ldr	r1, [r1, #0]
 800a916:	ed91 0a00 	vldr	s0, [r1]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 81b6 	beq.w	800ac8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800a920:	6859      	ldr	r1, [r3, #4]
 800a922:	2900      	cmp	r1, #0
 800a924:	f000 81b2 	beq.w	800ac8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800a928:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800a92c:	f1bc 0f00 	cmp.w	ip, #0
 800a930:	f000 81ac 	beq.w	800ac8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 800a934:	6809      	ldr	r1, [r1, #0]
 800a936:	edd1 0a00 	vldr	s1, [r1]
 800a93a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a93c:	2901      	cmp	r1, #1
 800a93e:	f040 81a2 	bne.w	800ac86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800a942:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a944:	2901      	cmp	r1, #1
 800a946:	f040 819e 	bne.w	800ac86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800a94a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a94c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800a94e:	4329      	orrs	r1, r5
 800a950:	f040 8199 	bne.w	800ac86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800a954:	e9dd 1537 	ldrd	r1, r5, [sp, #220]	; 0xdc
 800a958:	2901      	cmp	r1, #1
 800a95a:	bf08      	it	eq
 800a95c:	2d01      	cmpeq	r5, #1
 800a95e:	bf0c      	ite	eq
 800a960:	2101      	moveq	r1, #1
 800a962:	2100      	movne	r1, #0
 800a964:	9124      	str	r1, [sp, #144]	; 0x90
 800a966:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a968:	f8da c018 	ldr.w	ip, [sl, #24]
 800a96c:	f8db e018 	ldr.w	lr, [fp, #24]
 800a970:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a974:	6989      	ldr	r1, [r1, #24]
 800a976:	951d      	str	r5, [sp, #116]	; 0x74
 800a978:	6889      	ldr	r1, [r1, #8]
 800a97a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a97e:	9132      	str	r1, [sp, #200]	; 0xc8
 800a980:	952d      	str	r5, [sp, #180]	; 0xb4
 800a982:	2a00      	cmp	r2, #0
 800a984:	f000 81c0 	beq.w	800ad08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800a988:	6851      	ldr	r1, [r2, #4]
 800a98a:	2900      	cmp	r1, #0
 800a98c:	f000 81e5 	beq.w	800ad5a <forward_conv2d_nl_pool_integer_SSSA_ch+0x61e>
 800a990:	8852      	ldrh	r2, [r2, #2]
 800a992:	2a00      	cmp	r2, #0
 800a994:	f000 81b8 	beq.w	800ad08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800a998:	684a      	ldr	r2, [r1, #4]
 800a99a:	f992 2000 	ldrsb.w	r2, [r2]
 800a99e:	9234      	str	r2, [sp, #208]	; 0xd0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 81b5 	beq.w	800ad10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	f000 81d4 	beq.w	800ad56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x61a>
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 81ad 	beq.w	800ad10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800a9b6:	6853      	ldr	r3, [r2, #4]
 800a9b8:	f993 3000 	ldrsb.w	r3, [r3]
 800a9bc:	9336      	str	r3, [sp, #216]	; 0xd8
 800a9be:	b110      	cbz	r0, 800a9c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800a9c0:	6840      	ldr	r0, [r0, #4]
 800a9c2:	b100      	cbz	r0, 800a9c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800a9c4:	6800      	ldr	r0, [r0, #0]
 800a9c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f000 81bd 	beq.w	800ad48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2317      	moveq	r3, #23
 800a9da:	2300      	movne	r3, #0
 800a9dc:	9328      	str	r3, [sp, #160]	; 0xa0
 800a9de:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a9e0:	ee18 1a90 	vmov	r1, s17
 800a9e4:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800a9ee:	9335      	str	r3, [sp, #212]	; 0xd4
 800a9f0:	f001 fa2e 	bl	800be50 <align_factor_ch>
 800a9f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a9f6:	9543      	str	r5, [sp, #268]	; 0x10c
 800a9f8:	698b      	ldr	r3, [r1, #24]
 800a9fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9fe:	f009 fa21 	bl	8013e44 <ai_array_get_byte_size>
 800aa02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa04:	9044      	str	r0, [sp, #272]	; 0x110
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8106 	beq.w	800ac18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4dc>
 800aa0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa0e:	f04f 0b00 	mov.w	fp, #0
 800aa12:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800aa16:	fb02 f10a 	mul.w	r1, r2, sl
 800aa1a:	b292      	uxth	r2, r2
 800aa1c:	9422      	str	r4, [sp, #136]	; 0x88
 800aa1e:	9125      	str	r1, [sp, #148]	; 0x94
 800aa20:	9224      	str	r2, [sp, #144]	; 0x90
 800aa22:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800aa26:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
 800aa2a:	2901      	cmp	r1, #1
 800aa2c:	bf08      	it	eq
 800aa2e:	2a01      	cmpeq	r2, #1
 800aa30:	ee18 1a10 	vmov	r1, s16
 800aa34:	bf14      	ite	ne
 800aa36:	2201      	movne	r2, #1
 800aa38:	2200      	moveq	r2, #0
 800aa3a:	2907      	cmp	r1, #7
 800aa3c:	bf88      	it	hi
 800aa3e:	f042 0201 	orrhi.w	r2, r2, #1
 800aa42:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800aa44:	923e      	str	r2, [sp, #248]	; 0xf8
 800aa46:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800aa48:	fb01 f202 	mul.w	r2, r1, r2
 800aa4c:	fb03 f202 	mul.w	r2, r3, r2
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	923d      	str	r2, [sp, #244]	; 0xf4
 800aa56:	933f      	str	r3, [sp, #252]	; 0xfc
 800aa58:	b28b      	uxth	r3, r1
 800aa5a:	ee09 3a10 	vmov	s18, r3
 800aa5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa60:	e9cd 3b1a 	strd	r3, fp, [sp, #104]	; 0x68
 800aa64:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800aa68:	931c      	str	r3, [sp, #112]	; 0x70
 800aa6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f340 80de 	ble.w	800ac30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4f4>
 800aa74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800aa76:	2b17      	cmp	r3, #23
 800aa78:	f000 8112 	beq.w	800aca0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x564>
 800aa7c:	2b18      	cmp	r3, #24
 800aa7e:	d00a      	beq.n	800aa96 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 800aa80:	2b16      	cmp	r3, #22
 800aa82:	d00c      	beq.n	800aa9e <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 800aa84:	e7fe      	b.n	800aa84 <forward_conv2d_nl_pool_integer_SSSA_ch+0x348>
 800aa86:	2300      	movs	r3, #0
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	deff      	udf	#255	; 0xff
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	deff      	udf	#255	; 0xff
 800aa90:	6850      	ldr	r0, [r2, #4]
 800aa92:	901d      	str	r0, [sp, #116]	; 0x74
 800aa94:	e67c      	b.n	800a790 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800aa96:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8168 	beq.w	800ad6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x632>
 800aa9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	d103      	bne.n	800aaac <forward_conv2d_nl_pool_integer_SSSA_ch+0x370>
 800aaa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 819d 	beq.w	800ade6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6aa>
 800aaac:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800aab0:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800aab4:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800aab8:	2201      	movs	r2, #1
 800aaba:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800aabe:	ee19 1a10 	vmov	r1, s18
 800aac2:	9211      	str	r2, [sp, #68]	; 0x44
 800aac4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aac6:	9210      	str	r2, [sp, #64]	; 0x40
 800aac8:	68b2      	ldr	r2, [r6, #8]
 800aaca:	edcd 8a01 	vstr	s17, [sp, #4]
 800aace:	920f      	str	r2, [sp, #60]	; 0x3c
 800aad0:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 800aad4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800aad6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aad8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800aada:	930a      	str	r3, [sp, #40]	; 0x28
 800aadc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800aae2:	9308      	str	r3, [sp, #32]
 800aae4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800aaea:	9306      	str	r3, [sp, #24]
 800aaec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaee:	9305      	str	r3, [sp, #20]
 800aaf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800aafa:	930e      	str	r3, [sp, #56]	; 0x38
 800aafc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800aafe:	930d      	str	r3, [sp, #52]	; 0x34
 800ab00:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800ab02:	930c      	str	r3, [sp, #48]	; 0x30
 800ab04:	ee18 3a10 	vmov	r3, s16
 800ab08:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800ab0c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ab0e:	f003 f8dd 	bl	800dccc <st_sssa8_ch_convolve>
 800ab12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab16:	4293      	cmp	r3, r2
 800ab18:	f000 80be 	beq.w	800ac98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55c>
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab20:	429a      	cmp	r2, r3
 800ab22:	9321      	str	r3, [sp, #132]	; 0x84
 800ab24:	bf28      	it	cs
 800ab26:	461a      	movcs	r2, r3
 800ab28:	921a      	str	r2, [sp, #104]	; 0x68
 800ab2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 809b 	bne.w	800ac68 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52c>
 800ab32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab34:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800ab36:	4413      	add	r3, r2
 800ab38:	931d      	str	r3, [sp, #116]	; 0x74
 800ab3a:	3401      	adds	r4, #1
 800ab3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ab3e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ab40:	4649      	mov	r1, r9
 800ab42:	b224      	sxth	r4, r4
 800ab44:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab46:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800ab48:	47a8      	blx	r5
 800ab4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	db39      	blt.n	800abc4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800ab50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ab52:	2201      	movs	r2, #1
 800ab54:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800ab58:	a851      	add	r0, sp, #324	; 0x144
 800ab5a:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800ab5e:	9308      	str	r3, [sp, #32]
 800ab60:	fa1f f38b 	uxth.w	r3, fp
 800ab64:	9207      	str	r2, [sp, #28]
 800ab66:	1ae4      	subs	r4, r4, r3
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	fa1f f38a 	uxth.w	r3, sl
 800ab6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab70:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ab72:	b224      	sxth	r4, r4
 800ab74:	9303      	str	r3, [sp, #12]
 800ab76:	3201      	adds	r2, #1
 800ab78:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 800ab7c:	9216      	str	r2, [sp, #88]	; 0x58
 800ab7e:	9306      	str	r3, [sp, #24]
 800ab80:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800ab84:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
 800ab8e:	9201      	str	r2, [sp, #4]
 800ab90:	1a52      	subs	r2, r2, r1
 800ab92:	9302      	str	r3, [sp, #8]
 800ab94:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	ee18 3a90 	vmov	r3, s17
 800aba2:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 800aba4:	47a8      	blx	r5
 800aba6:	4652      	mov	r2, sl
 800aba8:	fa0f f38b 	sxth.w	r3, fp
 800abac:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abb4:	b21a      	sxth	r2, r3
 800abb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	9222      	str	r2, [sp, #136]	; 0x88
 800abbc:	68da      	ldr	r2, [r3, #12]
 800abbe:	688b      	ldr	r3, [r1, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	608b      	str	r3, [r1, #8]
 800abc4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800abc8:	68b2      	ldr	r2, [r6, #8]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	eb02 0a03 	add.w	sl, r2, r3
 800abd0:	f8c6 a008 	str.w	sl, [r6, #8]
 800abd4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800abd8:	b13b      	cbz	r3, 800abea <forward_conv2d_nl_pool_integer_SSSA_ch+0x4ae>
 800abda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4413      	add	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]
 800abe6:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800abea:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800abee:	4648      	mov	r0, r9
 800abf0:	f009 f8a6 	bl	8013d40 <get_tensor_byte_size>
 800abf4:	4458      	add	r0, fp
 800abf6:	4582      	cmp	sl, r0
 800abf8:	d306      	bcc.n	800ac08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800abfa:	68f3      	ldr	r3, [r6, #12]
 800abfc:	60b3      	str	r3, [r6, #8]
 800abfe:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800ac02:	b10b      	cbz	r3, 800ac08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	60bb      	str	r3, [r7, #8]
 800ac08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	9315      	str	r3, [sp, #84]	; 0x54
 800ac10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac12:	4293      	cmp	r3, r2
 800ac14:	f4ff af29 	bcc.w	800aa6a <forward_conv2d_nl_pool_integer_SSSA_ch+0x32e>
 800ac18:	68f3      	ldr	r3, [r6, #12]
 800ac1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ac1c:	60b3      	str	r3, [r6, #8]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	60bb      	str	r3, [r7, #8]
 800ac22:	68d3      	ldr	r3, [r2, #12]
 800ac24:	6093      	str	r3, [r2, #8]
 800ac26:	b059      	add	sp, #356	; 0x164
 800ac28:	ecbd 8b04 	vpop	{d8-d9}
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da89      	bge.n	800ab4a <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800ac36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ac38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ac3c:	fb03 1314 	mls	r3, r3, r4, r1
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d901      	bls.n	800ac48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	4403      	add	r3, r0
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d202      	bcs.n	800ac52 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800ac4c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ac4e:	42a0      	cmp	r0, r4
 800ac50:	d169      	bne.n	800ad26 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 800ac52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac54:	b2a4      	uxth	r4, r4
 800ac56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ac58:	4413      	add	r3, r2
 800ac5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac5c:	1b1b      	subs	r3, r3, r4
 800ac5e:	4414      	add	r4, r2
 800ac60:	b21b      	sxth	r3, r3
 800ac62:	b224      	sxth	r4, r4
 800ac64:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac66:	e770      	b.n	800ab4a <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800ac68:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	1a5b      	subs	r3, r3, r1
 800ac6e:	d505      	bpl.n	800ac7c <forward_conv2d_nl_pool_integer_SSSA_ch+0x540>
 800ac70:	1a8a      	subs	r2, r1, r2
 800ac72:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800ac74:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ac76:	fb00 1202 	mla	r2, r0, r2, r1
 800ac7a:	921d      	str	r2, [sp, #116]	; 0x74
 800ac7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac84:	e759      	b.n	800ab3a <forward_conv2d_nl_pool_integer_SSSA_ch+0x3fe>
 800ac86:	2100      	movs	r1, #0
 800ac88:	9124      	str	r1, [sp, #144]	; 0x90
 800ac8a:	e66c      	b.n	800a966 <forward_conv2d_nl_pool_integer_SSSA_ch+0x22a>
 800ac8c:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800ae48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800ac90:	e653      	b.n	800a93a <forward_conv2d_nl_pool_integer_SSSA_ch+0x1fe>
 800ac92:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ae48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800ac96:	e640      	b.n	800a91a <forward_conv2d_nl_pool_integer_SSSA_ch+0x1de>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac9c:	9321      	str	r3, [sp, #132]	; 0x84
 800ac9e:	e744      	b.n	800ab2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ee>
 800aca0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800aca2:	429c      	cmp	r4, r3
 800aca4:	d103      	bne.n	800acae <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 800aca6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80b4 	beq.w	800ae16 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 800acae:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800acb2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800acb6:	2101      	movs	r1, #1
 800acb8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800acba:	910f      	str	r1, [sp, #60]	; 0x3c
 800acbc:	9924      	ldr	r1, [sp, #144]	; 0x90
 800acbe:	9010      	str	r0, [sp, #64]	; 0x40
 800acc0:	910e      	str	r1, [sp, #56]	; 0x38
 800acc2:	68b1      	ldr	r1, [r6, #8]
 800acc4:	edcd 8a01 	vstr	s17, [sp, #4]
 800acc8:	910d      	str	r1, [sp, #52]	; 0x34
 800acca:	ee19 1a10 	vmov	r1, s18
 800acce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acd2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800acd4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800acd8:	930c      	str	r3, [sp, #48]	; 0x30
 800acda:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800acdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800acde:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800ace0:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 800ace4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ace6:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ace8:	9308      	str	r3, [sp, #32]
 800acea:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800acec:	9307      	str	r3, [sp, #28]
 800acee:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800acf0:	9306      	str	r3, [sp, #24]
 800acf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acf4:	9305      	str	r3, [sp, #20]
 800acf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	ee18 3a10 	vmov	r3, s16
 800ad02:	f001 f9d1 	bl	800c0a8 <st_sssa8_ch_convolve_dw>
 800ad06:	e704      	b.n	800ab12 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800ad08:	9234      	str	r2, [sp, #208]	; 0xd0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f47f ae4b 	bne.w	800a9a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 800ad10:	9336      	str	r3, [sp, #216]	; 0xd8
 800ad12:	e654      	b.n	800a9be <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800ad14:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800ad18:	922a      	str	r2, [sp, #168]	; 0xa8
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	f43f ad9f 	beq.w	800a85e <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800ad20:	6892      	ldr	r2, [r2, #8]
 800ad22:	922a      	str	r2, [sp, #168]	; 0xa8
 800ad24:	e59b      	b.n	800a85e <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	4402      	add	r2, r0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d291      	bcs.n	800ac52 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800ad2e:	3901      	subs	r1, #1
 800ad30:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4402      	add	r2, r0
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d3f6      	bcc.n	800ad32 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800ad44:	9515      	str	r5, [sp, #84]	; 0x54
 800ad46:	e784      	b.n	800ac52 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800ad48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bf0c      	ite	eq
 800ad4e:	2318      	moveq	r3, #24
 800ad50:	2316      	movne	r3, #22
 800ad52:	9328      	str	r3, [sp, #160]	; 0xa0
 800ad54:	e643      	b.n	800a9de <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a2>
 800ad56:	9236      	str	r2, [sp, #216]	; 0xd8
 800ad58:	e631      	b.n	800a9be <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800ad5a:	9134      	str	r1, [sp, #208]	; 0xd0
 800ad5c:	e620      	b.n	800a9a0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x264>
 800ad5e:	4b3b      	ldr	r3, [pc, #236]	; (800ae4c <forward_conv2d_nl_pool_integer_SSSA_ch+0x710>)
 800ad60:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800ad64:	9333      	str	r3, [sp, #204]	; 0xcc
 800ad66:	e526      	b.n	800a7b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 800ad68:	4693      	mov	fp, r2
 800ad6a:	921d      	str	r2, [sp, #116]	; 0x74
 800ad6c:	e510      	b.n	800a790 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800ad6e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ad70:	ee18 0a10 	vmov	r0, s16
 800ad74:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800ad76:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ad78:	f8bd b0a4 	ldrh.w	fp, [sp, #164]	; 0xa4
 800ad7c:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800ad80:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ad82:	9503      	str	r5, [sp, #12]
 800ad84:	9302      	str	r3, [sp, #8]
 800ad86:	465b      	mov	r3, fp
 800ad88:	9201      	str	r2, [sp, #4]
 800ad8a:	ee18 2a90 	vmov	r2, s17
 800ad8e:	f8cd a000 	str.w	sl, [sp]
 800ad92:	f002 fed5 	bl	800db40 <st_sssa8_ch_convolve_rank1upd>
 800ad96:	2101      	movs	r1, #1
 800ad98:	9510      	str	r5, [sp, #64]	; 0x40
 800ad9a:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad9c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ad9e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ada0:	910e      	str	r1, [sp, #56]	; 0x38
 800ada2:	68b3      	ldr	r3, [r6, #8]
 800ada4:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800ada6:	930d      	str	r3, [sp, #52]	; 0x34
 800ada8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800adaa:	9208      	str	r2, [sp, #32]
 800adac:	930b      	str	r3, [sp, #44]	; 0x2c
 800adae:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800adb0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800adb2:	910c      	str	r1, [sp, #48]	; 0x30
 800adb4:	ee19 1a10 	vmov	r1, s18
 800adb8:	9200      	str	r2, [sp, #0]
 800adba:	981d      	ldr	r0, [sp, #116]	; 0x74
 800adbc:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800adc0:	edcd 8a01 	vstr	s17, [sp, #4]
 800adc4:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 800adc8:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800adca:	ee18 3a10 	vmov	r3, s16
 800adce:	9507      	str	r5, [sp, #28]
 800add0:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800add2:	9506      	str	r5, [sp, #24]
 800add4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800add6:	9505      	str	r5, [sp, #20]
 800add8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800adda:	e9cd ba02 	strd	fp, sl, [sp, #8]
 800adde:	9504      	str	r5, [sp, #16]
 800ade0:	f003 f854 	bl	800de8c <st_sssa8_ch_convolve_startNN>
 800ade4:	e695      	b.n	800ab12 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800ade6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800ade8:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800adec:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800adf0:	ee18 2a10 	vmov	r2, s16
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	ee18 1a90 	vmov	r1, s17
 800adfa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800adfc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800ae04:	f8cd b000 	str.w	fp, [sp]
 800ae08:	f8cd a00c 	str.w	sl, [sp, #12]
 800ae0c:	9340      	str	r3, [sp, #256]	; 0x100
 800ae0e:	f002 ff27 	bl	800dc60 <st_sssa8_ch_convolve_WeightsPrefetch>
 800ae12:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800ae14:	e650      	b.n	800aab8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800ae16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ae18:	ee18 1a90 	vmov	r1, s17
 800ae1c:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800ae26:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800ae28:	9241      	str	r2, [sp, #260]	; 0x104
 800ae2a:	9340      	str	r3, [sp, #256]	; 0x100
 800ae2c:	f001 f874 	bl	800bf18 <st_sssa8_ch_conv_dw_Wadapt>
 800ae30:	e9dd 3240 	ldrd	r3, r2, [sp, #256]	; 0x100
 800ae34:	e73f      	b.n	800acb6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	deff      	udf	#255	; 0xff
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	deff      	udf	#255	; 0xff
 800ae40:	2300      	movs	r3, #0
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	deff      	udf	#255	; 0xff
 800ae46:	bf00      	nop
 800ae48:	00000000 	.word	0x00000000
 800ae4c:	0800a739 	.word	0x0800a739

0800ae50 <forward_dense_integer_SSSA>:
 800ae50:	6982      	ldr	r2, [r0, #24]
 800ae52:	8813      	ldrh	r3, [r2, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 80c8 	beq.w	800afea <forward_dense_integer_SSSA+0x19a>
 800ae5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5e:	6852      	ldr	r2, [r2, #4]
 800ae60:	b093      	sub	sp, #76	; 0x4c
 800ae62:	6854      	ldr	r4, [r2, #4]
 800ae64:	b104      	cbz	r4, 800ae68 <forward_dense_integer_SSSA+0x18>
 800ae66:	6824      	ldr	r4, [r4, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	f000 8161 	beq.w	800b130 <forward_dense_integer_SSSA+0x2e0>
 800ae6e:	6911      	ldr	r1, [r2, #16]
 800ae70:	b101      	cbz	r1, 800ae74 <forward_dense_integer_SSSA+0x24>
 800ae72:	6809      	ldr	r1, [r1, #0]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	f000 815e 	beq.w	800b136 <forward_dense_integer_SSSA+0x2e6>
 800ae7a:	69d5      	ldr	r5, [r2, #28]
 800ae7c:	2d00      	cmp	r5, #0
 800ae7e:	f000 8108 	beq.w	800b092 <forward_dense_integer_SSSA+0x242>
 800ae82:	8b16      	ldrh	r6, [r2, #24]
 800ae84:	6828      	ldr	r0, [r5, #0]
 800ae86:	2e01      	cmp	r6, #1
 800ae88:	f240 812d 	bls.w	800b0e6 <forward_dense_integer_SSSA+0x296>
 800ae8c:	686d      	ldr	r5, [r5, #4]
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	f000 8154 	beq.w	800b13c <forward_dense_integer_SSSA+0x2ec>
 800ae94:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800ae98:	69ab      	ldr	r3, [r5, #24]
 800ae9a:	f1b9 0f00 	cmp.w	r9, #0
 800ae9e:	f000 810f 	beq.w	800b0c0 <forward_dense_integer_SSSA+0x270>
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	68e2      	ldr	r2, [r4, #12]
 800aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea8:	68cb      	ldr	r3, [r1, #12]
 800aeaa:	6856      	ldr	r6, [r2, #4]
 800aeac:	f8d9 9000 	ldr.w	r9, [r9]
 800aeb0:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800aeb4:	698d      	ldr	r5, [r1, #24]
 800aeb6:	960f      	str	r6, [sp, #60]	; 0x3c
 800aeb8:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	fb03 f302 	mul.w	r3, r3, r2
 800aec2:	b2b2      	uxth	r2, r6
 800aec4:	930c      	str	r3, [sp, #48]	; 0x30
 800aec6:	fa1f f38a 	uxth.w	r3, sl
 800aeca:	f1b9 0f00 	cmp.w	r9, #0
 800aece:	d003      	beq.n	800aed8 <forward_dense_integer_SSSA+0x88>
 800aed0:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800aed4:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800aed8:	6827      	ldr	r7, [r4, #0]
 800aeda:	f8d0 b000 	ldr.w	fp, [r0]
 800aede:	680c      	ldr	r4, [r1, #0]
 800aee0:	6981      	ldr	r1, [r0, #24]
 800aee2:	2f00      	cmp	r7, #0
 800aee4:	f000 8083 	beq.w	800afee <forward_dense_integer_SSSA+0x19e>
 800aee8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800aeec:	f1bc 0f00 	cmp.w	ip, #0
 800aef0:	f000 80b1 	beq.w	800b056 <forward_dense_integer_SSSA+0x206>
 800aef4:	8878      	ldrh	r0, [r7, #2]
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f000 809c 	beq.w	800b034 <forward_dense_integer_SSSA+0x1e4>
 800aefc:	f8dc 6000 	ldr.w	r6, [ip]
 800af00:	edd6 7a00 	vldr	s15, [r6]
 800af04:	2c00      	cmp	r4, #0
 800af06:	f000 809a 	beq.w	800b03e <forward_dense_integer_SSSA+0x1ee>
 800af0a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	f000 80a9 	beq.w	800b068 <forward_dense_integer_SSSA+0x218>
 800af16:	8860      	ldrh	r0, [r4, #2]
 800af18:	2800      	cmp	r0, #0
 800af1a:	d074      	beq.n	800b006 <forward_dense_integer_SSSA+0x1b6>
 800af1c:	68ae      	ldr	r6, [r5, #8]
 800af1e:	f8de 5008 	ldr.w	r5, [lr, #8]
 800af22:	6889      	ldr	r1, [r1, #8]
 800af24:	950d      	str	r5, [sp, #52]	; 0x34
 800af26:	f8d8 5000 	ldr.w	r5, [r8]
 800af2a:	ed95 0a00 	vldr	s0, [r5]
 800af2e:	f1bc 0f00 	cmp.w	ip, #0
 800af32:	d076      	beq.n	800b022 <forward_dense_integer_SSSA+0x1d2>
 800af34:	8878      	ldrh	r0, [r7, #2]
 800af36:	2800      	cmp	r0, #0
 800af38:	f000 80a3 	beq.w	800b082 <forward_dense_integer_SSSA+0x232>
 800af3c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800af40:	f990 7000 	ldrsb.w	r7, [r0]
 800af44:	2c00      	cmp	r4, #0
 800af46:	f000 80eb 	beq.w	800b120 <forward_dense_integer_SSSA+0x2d0>
 800af4a:	f1b8 0f00 	cmp.w	r8, #0
 800af4e:	f000 809d 	beq.w	800b08c <forward_dense_integer_SSSA+0x23c>
 800af52:	8860      	ldrh	r0, [r4, #2]
 800af54:	2800      	cmp	r0, #0
 800af56:	d167      	bne.n	800b028 <forward_dense_integer_SSSA+0x1d8>
 800af58:	900a      	str	r0, [sp, #40]	; 0x28
 800af5a:	910e      	str	r1, [sp, #56]	; 0x38
 800af5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af60:	f1bb 0f00 	cmp.w	fp, #0
 800af64:	f000 80de 	beq.w	800b124 <forward_dense_integer_SSSA+0x2d4>
 800af68:	f8db 0004 	ldr.w	r0, [fp, #4]
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f000 80d9 	beq.w	800b124 <forward_dense_integer_SSSA+0x2d4>
 800af72:	6800      	ldr	r0, [r0, #0]
 800af74:	2400      	movs	r4, #0
 800af76:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800af7a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800af7e:	9411      	str	r4, [sp, #68]	; 0x44
 800af80:	ed90 7a00 	vldr	s14, [r0]
 800af84:	4640      	mov	r0, r8
 800af86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af8a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800af8e:	f000 ff0d 	bl	800bdac <align_factor>
 800af92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af94:	9011      	str	r0, [sp, #68]	; 0x44
 800af96:	b32b      	cbz	r3, 800afe4 <forward_dense_integer_SSSA+0x194>
 800af98:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800af9c:	4699      	mov	r9, r3
 800af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa0:	fa1f fa8a 	uxth.w	sl, sl
 800afa4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800afa6:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800afaa:	970d      	str	r7, [sp, #52]	; 0x34
 800afac:	461f      	mov	r7, r3
 800afae:	9a08      	ldr	r2, [sp, #32]
 800afb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb4:	3401      	adds	r4, #1
 800afb6:	4628      	mov	r0, r5
 800afb8:	9605      	str	r6, [sp, #20]
 800afba:	9306      	str	r3, [sp, #24]
 800afbc:	4456      	add	r6, sl
 800afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc0:	445d      	add	r5, fp
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc6:	9303      	str	r3, [sp, #12]
 800afc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afca:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800afce:	ab11      	add	r3, sp, #68	; 0x44
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	463b      	mov	r3, r7
 800afd4:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800afd8:	f003 fe14 	bl	800ec04 <st_sssa8_fully_connected>
 800afdc:	454c      	cmp	r4, r9
 800afde:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800afe2:	d1e6      	bne.n	800afb2 <forward_dense_integer_SSSA+0x162>
 800afe4:	b013      	add	sp, #76	; 0x4c
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	deff      	udf	#255	; 0xff
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d056      	beq.n	800b0a0 <forward_dense_integer_SSSA+0x250>
 800aff2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800aff6:	f1b8 0f00 	cmp.w	r8, #0
 800affa:	d05d      	beq.n	800b0b8 <forward_dense_integer_SSSA+0x268>
 800affc:	8860      	ldrh	r0, [r4, #2]
 800affe:	2800      	cmp	r0, #0
 800b000:	d173      	bne.n	800b0ea <forward_dense_integer_SSSA+0x29a>
 800b002:	eddf 7a50 	vldr	s15, [pc, #320]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b006:	68ae      	ldr	r6, [r5, #8]
 800b008:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b00c:	6889      	ldr	r1, [r1, #8]
 800b00e:	950d      	str	r5, [sp, #52]	; 0x34
 800b010:	2f00      	cmp	r7, #0
 800b012:	d041      	beq.n	800b098 <forward_dense_integer_SSSA+0x248>
 800b014:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b018:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b01c:	f1bc 0f00 	cmp.w	ip, #0
 800b020:	d188      	bne.n	800af34 <forward_dense_integer_SSSA+0xe4>
 800b022:	4667      	mov	r7, ip
 800b024:	2800      	cmp	r0, #0
 800b026:	d097      	beq.n	800af58 <forward_dense_integer_SSSA+0x108>
 800b028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b02c:	f990 0000 	ldrsb.w	r0, [r0]
 800b030:	900a      	str	r0, [sp, #40]	; 0x28
 800b032:	e792      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b034:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b038:	2c00      	cmp	r4, #0
 800b03a:	f47f af66 	bne.w	800af0a <forward_dense_integer_SSSA+0xba>
 800b03e:	68ae      	ldr	r6, [r5, #8]
 800b040:	f8de 5008 	ldr.w	r5, [lr, #8]
 800b044:	6889      	ldr	r1, [r1, #8]
 800b046:	950d      	str	r5, [sp, #52]	; 0x34
 800b048:	2800      	cmp	r0, #0
 800b04a:	d15a      	bne.n	800b102 <forward_dense_integer_SSSA+0x2b2>
 800b04c:	4607      	mov	r7, r0
 800b04e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b052:	900a      	str	r0, [sp, #40]	; 0x28
 800b054:	e781      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b056:	b31c      	cbz	r4, 800b0a0 <forward_dense_integer_SSSA+0x250>
 800b058:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b05c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b060:	f1b8 0f00 	cmp.w	r8, #0
 800b064:	f47f af57 	bne.w	800af16 <forward_dense_integer_SSSA+0xc6>
 800b068:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b06c:	68ae      	ldr	r6, [r5, #8]
 800b06e:	6889      	ldr	r1, [r1, #8]
 800b070:	900d      	str	r0, [sp, #52]	; 0x34
 800b072:	f1bc 0f00 	cmp.w	ip, #0
 800b076:	d00e      	beq.n	800b096 <forward_dense_integer_SSSA+0x246>
 800b078:	8878      	ldrh	r0, [r7, #2]
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d149      	bne.n	800b112 <forward_dense_integer_SSSA+0x2c2>
 800b07e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b082:	2700      	movs	r7, #0
 800b084:	f1b8 0f00 	cmp.w	r8, #0
 800b088:	f47f af63 	bne.w	800af52 <forward_dense_integer_SSSA+0x102>
 800b08c:	2000      	movs	r0, #0
 800b08e:	900a      	str	r0, [sp, #40]	; 0x28
 800b090:	e763      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b092:	4628      	mov	r0, r5
 800b094:	e6fb      	b.n	800ae8e <forward_dense_integer_SSSA+0x3e>
 800b096:	4667      	mov	r7, ip
 800b098:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b09c:	970a      	str	r7, [sp, #40]	; 0x28
 800b09e:	e75c      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b0a0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b0a4:	4627      	mov	r7, r4
 800b0a6:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ae:	68ae      	ldr	r6, [r5, #8]
 800b0b0:	6889      	ldr	r1, [r1, #8]
 800b0b2:	900d      	str	r0, [sp, #52]	; 0x34
 800b0b4:	970a      	str	r7, [sp, #40]	; 0x28
 800b0b6:	e750      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b0b8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b0bc:	4647      	mov	r7, r8
 800b0be:	e7f2      	b.n	800b0a6 <forward_dense_integer_SSSA+0x256>
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	68e2      	ldr	r2, [r4, #12]
 800b0c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0c6:	68cb      	ldr	r3, [r1, #12]
 800b0c8:	6856      	ldr	r6, [r2, #4]
 800b0ca:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800b0ce:	698d      	ldr	r5, [r1, #24]
 800b0d0:	960f      	str	r6, [sp, #60]	; 0x3c
 800b0d2:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	fb03 f302 	mul.w	r3, r3, r2
 800b0dc:	b2b2      	uxth	r2, r6
 800b0de:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e0:	fa1f f38a 	uxth.w	r3, sl
 800b0e4:	e6f8      	b.n	800aed8 <forward_dense_integer_SSSA+0x88>
 800b0e6:	2500      	movs	r5, #0
 800b0e8:	e6d1      	b.n	800ae8e <forward_dense_integer_SSSA+0x3e>
 800b0ea:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b0ee:	68ae      	ldr	r6, [r5, #8]
 800b0f0:	900d      	str	r0, [sp, #52]	; 0x34
 800b0f2:	f8d8 0000 	ldr.w	r0, [r8]
 800b0f6:	6889      	ldr	r1, [r1, #8]
 800b0f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b0fc:	ed90 0a00 	vldr	s0, [r0]
 800b100:	e792      	b.n	800b028 <forward_dense_integer_SSSA+0x1d8>
 800b102:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b106:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b10a:	f990 7000 	ldrsb.w	r7, [r0]
 800b10e:	940a      	str	r4, [sp, #40]	; 0x28
 800b110:	e723      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b112:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b116:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800b144 <forward_dense_integer_SSSA+0x2f4>
 800b11a:	f990 7000 	ldrsb.w	r7, [r0]
 800b11e:	e7b5      	b.n	800b08c <forward_dense_integer_SSSA+0x23c>
 800b120:	940a      	str	r4, [sp, #40]	; 0x28
 800b122:	e71a      	b.n	800af5a <forward_dense_integer_SSSA+0x10a>
 800b124:	2300      	movs	r3, #0
 800b126:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800b12a:	9311      	str	r3, [sp, #68]	; 0x44
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	deff      	udf	#255	; 0xff
 800b130:	2300      	movs	r3, #0
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	deff      	udf	#255	; 0xff
 800b136:	2300      	movs	r3, #0
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	deff      	udf	#255	; 0xff
 800b13c:	2300      	movs	r3, #0
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	deff      	udf	#255	; 0xff
 800b142:	bf00      	nop
 800b144:	00000000 	.word	0x00000000

0800b148 <nl_func_sm_channel_f32>:
 800b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14c:	ed2d 8b02 	vpush	{d8}
 800b150:	6989      	ldr	r1, [r1, #24]
 800b152:	2a01      	cmp	r2, #1
 800b154:	6983      	ldr	r3, [r0, #24]
 800b156:	4617      	mov	r7, r2
 800b158:	688d      	ldr	r5, [r1, #8]
 800b15a:	689e      	ldr	r6, [r3, #8]
 800b15c:	ed95 8a00 	vldr	s16, [r5]
 800b160:	d930      	bls.n	800b1c4 <nl_func_sm_channel_f32+0x7c>
 800b162:	1d2b      	adds	r3, r5, #4
 800b164:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800b168:	ecf3 7a01 	vldmia	r3!, {s15}
 800b16c:	429a      	cmp	r2, r3
 800b16e:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800b172:	d1f9      	bne.n	800b168 <nl_func_sm_channel_f32+0x20>
 800b174:	2400      	movs	r4, #0
 800b176:	eddf 8a16 	vldr	s17, [pc, #88]	; 800b1d0 <nl_func_sm_channel_f32+0x88>
 800b17a:	46b0      	mov	r8, r6
 800b17c:	ecb5 0a01 	vldmia	r5!, {s0}
 800b180:	3401      	adds	r4, #1
 800b182:	ee30 0a48 	vsub.f32	s0, s0, s16
 800b186:	f00b fdfd 	bl	8016d84 <expf>
 800b18a:	42a7      	cmp	r7, r4
 800b18c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800b190:	eca8 0a01 	vstmia	r8!, {s0}
 800b194:	d8f2      	bhi.n	800b17c <nl_func_sm_channel_f32+0x34>
 800b196:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19e:	d00d      	beq.n	800b1bc <nl_func_sm_channel_f32+0x74>
 800b1a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800b1aa:	edd6 7a00 	vldr	s15, [r6]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	429f      	cmp	r7, r3
 800b1b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1b6:	ece6 7a01 	vstmia	r6!, {s15}
 800b1ba:	d8f6      	bhi.n	800b1aa <nl_func_sm_channel_f32+0x62>
 800b1bc:	ecbd 8b02 	vpop	{d8}
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	d1d5      	bne.n	800b174 <nl_func_sm_channel_f32+0x2c>
 800b1c8:	ecbd 8b02 	vpop	{d8}
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d0:	00000000 	.word	0x00000000

0800b1d4 <nl_func_relu_generic_array_f32>:
 800b1d4:	b430      	push	{r4, r5}
 800b1d6:	edd3 6a02 	vldr	s13, [r3, #8]
 800b1da:	ed93 7a00 	vldr	s14, [r3]
 800b1de:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b1e2:	ed93 6a01 	vldr	s12, [r3, #4]
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	d430      	bmi.n	800b24e <nl_func_relu_generic_array_f32+0x7a>
 800b1ec:	698c      	ldr	r4, [r1, #24]
 800b1ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b1f2:	6981      	ldr	r1, [r0, #24]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	68a0      	ldr	r0, [r4, #8]
 800b1f8:	6889      	ldr	r1, [r1, #8]
 800b1fa:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4290      	cmp	r0, r2
 800b202:	d822      	bhi.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b204:	3304      	adds	r3, #4
 800b206:	3204      	adds	r2, #4
 800b208:	4419      	add	r1, r3
 800b20a:	e00e      	b.n	800b22a <nl_func_relu_generic_array_f32+0x56>
 800b20c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b210:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800b214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b218:	db01      	blt.n	800b21e <nl_func_relu_generic_array_f32+0x4a>
 800b21a:	ee65 7a86 	vmul.f32	s15, s11, s12
 800b21e:	3b08      	subs	r3, #8
 800b220:	ed61 7a01 	vstmdb	r1!, {s15}
 800b224:	68a0      	ldr	r0, [r4, #8]
 800b226:	4298      	cmp	r0, r3
 800b228:	d80f      	bhi.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b22a:	4613      	mov	r3, r2
 800b22c:	ed72 7a01 	vldmdb	r2!, {s15}
 800b230:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	dae8      	bge.n	800b20c <nl_func_relu_generic_array_f32+0x38>
 800b23a:	eef0 7a66 	vmov.f32	s15, s13
 800b23e:	3b08      	subs	r3, #8
 800b240:	ed61 7a01 	vstmdb	r1!, {s15}
 800b244:	68a0      	ldr	r0, [r4, #8]
 800b246:	4298      	cmp	r0, r3
 800b248:	d9ef      	bls.n	800b22a <nl_func_relu_generic_array_f32+0x56>
 800b24a:	bc30      	pop	{r4, r5}
 800b24c:	4770      	bx	lr
 800b24e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b252:	698d      	ldr	r5, [r1, #24]
 800b254:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b258:	6983      	ldr	r3, [r0, #24]
 800b25a:	68a8      	ldr	r0, [r5, #8]
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	4411      	add	r1, r2
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b268:	ea4f 0181 	mov.w	r1, r1, lsl #2
 800b26c:	d019      	beq.n	800b2a2 <nl_func_relu_generic_array_f32+0xce>
 800b26e:	4298      	cmp	r0, r3
 800b270:	d8eb      	bhi.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b272:	3104      	adds	r1, #4
 800b274:	3304      	adds	r3, #4
 800b276:	440a      	add	r2, r1
 800b278:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b27c:	1f19      	subs	r1, r3, #4
 800b27e:	f1a3 0408 	sub.w	r4, r3, #8
 800b282:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b286:	460b      	mov	r3, r1
 800b288:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b290:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b294:	d823      	bhi.n	800b2de <nl_func_relu_generic_array_f32+0x10a>
 800b296:	ed62 6a01 	vstmdb	r2!, {s13}
 800b29a:	68a9      	ldr	r1, [r5, #8]
 800b29c:	42a1      	cmp	r1, r4
 800b29e:	d9eb      	bls.n	800b278 <nl_func_relu_generic_array_f32+0xa4>
 800b2a0:	e7d3      	b.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b2a2:	4298      	cmp	r0, r3
 800b2a4:	d8d1      	bhi.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b2a6:	3104      	adds	r1, #4
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	f04f 0c00 	mov.w	ip, #0
 800b2ae:	440a      	add	r2, r1
 800b2b0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b2b4:	1f19      	subs	r1, r3, #4
 800b2b6:	f1a3 0408 	sub.w	r4, r3, #8
 800b2ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2be:	460b      	mov	r3, r1
 800b2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c4:	dc05      	bgt.n	800b2d2 <nl_func_relu_generic_array_f32+0xfe>
 800b2c6:	f842 cd04 	str.w	ip, [r2, #-4]!
 800b2ca:	68a9      	ldr	r1, [r5, #8]
 800b2cc:	42a1      	cmp	r1, r4
 800b2ce:	d9ef      	bls.n	800b2b0 <nl_func_relu_generic_array_f32+0xdc>
 800b2d0:	e7bb      	b.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b2d2:	ed62 7a01 	vstmdb	r2!, {s15}
 800b2d6:	68a9      	ldr	r1, [r5, #8]
 800b2d8:	42a1      	cmp	r1, r4
 800b2da:	d9e9      	bls.n	800b2b0 <nl_func_relu_generic_array_f32+0xdc>
 800b2dc:	e7b5      	b.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b2de:	ed62 7a01 	vstmdb	r2!, {s15}
 800b2e2:	68a9      	ldr	r1, [r5, #8]
 800b2e4:	42a1      	cmp	r1, r4
 800b2e6:	d9c7      	bls.n	800b278 <nl_func_relu_generic_array_f32+0xa4>
 800b2e8:	e7af      	b.n	800b24a <nl_func_relu_generic_array_f32+0x76>
 800b2ea:	bf00      	nop

0800b2ec <forward_relu>:
 800b2ec:	6982      	ldr	r2, [r0, #24]
 800b2ee:	8813      	ldrh	r3, [r2, #0]
 800b2f0:	b30b      	cbz	r3, 800b336 <forward_relu+0x4a>
 800b2f2:	6852      	ldr	r2, [r2, #4]
 800b2f4:	6851      	ldr	r1, [r2, #4]
 800b2f6:	b101      	cbz	r1, 800b2fa <forward_relu+0xe>
 800b2f8:	6809      	ldr	r1, [r1, #0]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	f000 808d 	beq.w	800b41a <forward_relu+0x12e>
 800b300:	b470      	push	{r4, r5, r6}
 800b302:	6916      	ldr	r6, [r2, #16]
 800b304:	b106      	cbz	r6, 800b308 <forward_relu+0x1c>
 800b306:	6836      	ldr	r6, [r6, #0]
 800b308:	69c0      	ldr	r0, [r0, #28]
 800b30a:	b1b0      	cbz	r0, 800b33a <forward_relu+0x4e>
 800b30c:	6842      	ldr	r2, [r0, #4]
 800b30e:	688b      	ldr	r3, [r1, #8]
 800b310:	2a01      	cmp	r2, #1
 800b312:	d03d      	beq.n	800b390 <forward_relu+0xa4>
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	d071      	beq.n	800b3fc <forward_relu+0x110>
 800b318:	68cd      	ldr	r5, [r1, #12]
 800b31a:	2201      	movs	r2, #1
 800b31c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b320:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b324:	42ab      	cmp	r3, r5
 800b326:	fb04 f202 	mul.w	r2, r4, r2
 800b32a:	d1f9      	bne.n	800b320 <forward_relu+0x34>
 800b32c:	6883      	ldr	r3, [r0, #8]
 800b32e:	4630      	mov	r0, r6
 800b330:	bc70      	pop	{r4, r5, r6}
 800b332:	f7ff bf4f 	b.w	800b1d4 <nl_func_relu_generic_array_f32>
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	deff      	udf	#255	; 0xff
 800b33a:	688b      	ldr	r3, [r1, #8]
 800b33c:	0a1b      	lsrs	r3, r3, #8
 800b33e:	d05f      	beq.n	800b400 <forward_relu+0x114>
 800b340:	68cc      	ldr	r4, [r1, #12]
 800b342:	2201      	movs	r2, #1
 800b344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b348:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800b34c:	429c      	cmp	r4, r3
 800b34e:	fb00 f202 	mul.w	r2, r0, r2
 800b352:	d1f9      	bne.n	800b348 <forward_relu+0x5c>
 800b354:	698c      	ldr	r4, [r1, #24]
 800b356:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b35a:	69b1      	ldr	r1, [r6, #24]
 800b35c:	4413      	add	r3, r2
 800b35e:	68a0      	ldr	r0, [r4, #8]
 800b360:	6889      	ldr	r1, [r1, #8]
 800b362:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800b366:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b36a:	4290      	cmp	r0, r2
 800b36c:	d80e      	bhi.n	800b38c <forward_relu+0xa0>
 800b36e:	3204      	adds	r2, #4
 800b370:	3104      	adds	r1, #4
 800b372:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b420 <forward_relu+0x134>
 800b376:	4613      	mov	r3, r2
 800b378:	ed72 7a01 	vldmdb	r2!, {s15}
 800b37c:	3b08      	subs	r3, #8
 800b37e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b382:	ed61 7a01 	vstmdb	r1!, {s15}
 800b386:	68a0      	ldr	r0, [r4, #8]
 800b388:	4298      	cmp	r0, r3
 800b38a:	d9f4      	bls.n	800b376 <forward_relu+0x8a>
 800b38c:	bc70      	pop	{r4, r5, r6}
 800b38e:	4770      	bx	lr
 800b390:	0a1b      	lsrs	r3, r3, #8
 800b392:	d03a      	beq.n	800b40a <forward_relu+0x11e>
 800b394:	68cd      	ldr	r5, [r1, #12]
 800b396:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b39a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	fb04 f202 	mul.w	r2, r4, r2
 800b3a4:	d1f9      	bne.n	800b39a <forward_relu+0xae>
 800b3a6:	698c      	ldr	r4, [r1, #24]
 800b3a8:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800b3ac:	6883      	ldr	r3, [r0, #8]
 800b3ae:	4411      	add	r1, r2
 800b3b0:	68a0      	ldr	r0, [r4, #8]
 800b3b2:	69b5      	ldr	r5, [r6, #24]
 800b3b4:	ed93 7a00 	vldr	s14, [r3]
 800b3b8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b3bc:	68aa      	ldr	r2, [r5, #8]
 800b3be:	4298      	cmp	r0, r3
 800b3c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b3c4:	d8e2      	bhi.n	800b38c <forward_relu+0xa0>
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	3204      	adds	r2, #4
 800b3ca:	2500      	movs	r5, #0
 800b3cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b3d0:	1f19      	subs	r1, r3, #4
 800b3d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3da:	d507      	bpl.n	800b3ec <forward_relu+0x100>
 800b3dc:	3b08      	subs	r3, #8
 800b3de:	ed62 7a01 	vstmdb	r2!, {s15}
 800b3e2:	68a0      	ldr	r0, [r4, #8]
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	d8d1      	bhi.n	800b38c <forward_relu+0xa0>
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	e7ef      	b.n	800b3cc <forward_relu+0xe0>
 800b3ec:	3b08      	subs	r3, #8
 800b3ee:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b3f2:	68a0      	ldr	r0, [r4, #8]
 800b3f4:	4298      	cmp	r0, r3
 800b3f6:	d8c9      	bhi.n	800b38c <forward_relu+0xa0>
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	e7e7      	b.n	800b3cc <forward_relu+0xe0>
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	e795      	b.n	800b32c <forward_relu+0x40>
 800b400:	698c      	ldr	r4, [r1, #24]
 800b402:	69b3      	ldr	r3, [r6, #24]
 800b404:	68a2      	ldr	r2, [r4, #8]
 800b406:	6899      	ldr	r1, [r3, #8]
 800b408:	e7b1      	b.n	800b36e <forward_relu+0x82>
 800b40a:	6883      	ldr	r3, [r0, #8]
 800b40c:	698c      	ldr	r4, [r1, #24]
 800b40e:	69b2      	ldr	r2, [r6, #24]
 800b410:	ed93 7a00 	vldr	s14, [r3]
 800b414:	6892      	ldr	r2, [r2, #8]
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	e7d5      	b.n	800b3c6 <forward_relu+0xda>
 800b41a:	2300      	movs	r3, #0
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	deff      	udf	#255	; 0xff
 800b420:	00000000 	.word	0x00000000

0800b424 <forward_sm>:
 800b424:	6982      	ldr	r2, [r0, #24]
 800b426:	8813      	ldrh	r3, [r2, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d054      	beq.n	800b4d6 <forward_sm+0xb2>
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	6852      	ldr	r2, [r2, #4]
 800b432:	b083      	sub	sp, #12
 800b434:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800b438:	f1b8 0f00 	cmp.w	r8, #0
 800b43c:	d001      	beq.n	800b442 <forward_sm+0x1e>
 800b43e:	f8d8 8000 	ldr.w	r8, [r8]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d04b      	beq.n	800b4de <forward_sm+0xba>
 800b446:	6913      	ldr	r3, [r2, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d04b      	beq.n	800b4e4 <forward_sm+0xc0>
 800b44c:	6818      	ldr	r0, [r3, #0]
 800b44e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b452:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b456:	68c2      	ldr	r2, [r0, #12]
 800b458:	0a1b      	lsrs	r3, r3, #8
 800b45a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800b45e:	6857      	ldr	r7, [r2, #4]
 800b460:	d03b      	beq.n	800b4da <forward_sm+0xb6>
 800b462:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b466:	2501      	movs	r5, #1
 800b468:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b46c:	4299      	cmp	r1, r3
 800b46e:	fb02 f505 	mul.w	r5, r2, r5
 800b472:	d1f9      	bne.n	800b468 <forward_sm+0x44>
 800b474:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800b478:	eba5 030a 	sub.w	r3, r5, sl
 800b47c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800b480:	1bed      	subs	r5, r5, r7
 800b482:	68b4      	ldr	r4, [r6, #8]
 800b484:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b488:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b48c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b490:	68f3      	ldr	r3, [r6, #12]
 800b492:	429c      	cmp	r4, r3
 800b494:	d317      	bcc.n	800b4c6 <forward_sm+0xa2>
 800b496:	00bf      	lsls	r7, r7, #2
 800b498:	4652      	mov	r2, sl
 800b49a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800b49e:	427f      	negs	r7, r7
 800b4a0:	f1cb 0b00 	rsb	fp, fp, #0
 800b4a4:	46ba      	mov	sl, r7
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	60b4      	str	r4, [r6, #8]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8c9 5008 	str.w	r5, [r9, #8]
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	9201      	str	r2, [sp, #4]
 800b4b6:	445c      	add	r4, fp
 800b4b8:	f7ff fe46 	bl	800b148 <nl_func_sm_channel_f32>
 800b4bc:	68f3      	ldr	r3, [r6, #12]
 800b4be:	4455      	add	r5, sl
 800b4c0:	9a01      	ldr	r2, [sp, #4]
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	d2f0      	bcs.n	800b4a8 <forward_sm+0x84>
 800b4c6:	60b3      	str	r3, [r6, #8]
 800b4c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b4cc:	f8c9 3008 	str.w	r3, [r9, #8]
 800b4d0:	b003      	add	sp, #12
 800b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	deff      	udf	#255	; 0xff
 800b4da:	2501      	movs	r5, #1
 800b4dc:	e7ca      	b.n	800b474 <forward_sm+0x50>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	deff      	udf	#255	; 0xff
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	deff      	udf	#255	; 0xff

0800b4e8 <forward_pad>:
 800b4e8:	6982      	ldr	r2, [r0, #24]
 800b4ea:	8813      	ldrh	r3, [r2, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d052      	beq.n	800b596 <forward_pad+0xae>
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f4:	ed2d 8b02 	vpush	{d8}
 800b4f8:	6852      	ldr	r2, [r2, #4]
 800b4fa:	b091      	sub	sp, #68	; 0x44
 800b4fc:	6857      	ldr	r7, [r2, #4]
 800b4fe:	b107      	cbz	r7, 800b502 <forward_pad+0x1a>
 800b500:	683f      	ldr	r7, [r7, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	f000 81e7 	beq.w	800b8d6 <forward_pad+0x3ee>
 800b508:	6913      	ldr	r3, [r2, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 81e1 	beq.w	800b8d2 <forward_pad+0x3ea>
 800b510:	681d      	ldr	r5, [r3, #0]
 800b512:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800b516:	68aa      	ldr	r2, [r5, #8]
 800b518:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b51a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800b51e:	f8de 100c 	ldr.w	r1, [lr, #12]
 800b522:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b526:	bf38      	it	cc
 800b528:	2201      	movcc	r2, #1
 800b52a:	9102      	str	r1, [sp, #8]
 800b52c:	bf28      	it	cs
 800b52e:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 800b532:	f9b6 1000 	ldrsh.w	r1, [r6]
 800b536:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800b53a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800b53e:	9103      	str	r1, [sp, #12]
 800b540:	9201      	str	r2, [sp, #4]
 800b542:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800b546:	7f03      	ldrb	r3, [r0, #28]
 800b548:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	6895      	ldr	r5, [r2, #8]
 800b550:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800b554:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 800b558:	68f7      	ldr	r7, [r6, #12]
 800b55a:	f8dc 8008 	ldr.w	r8, [ip, #8]
 800b55e:	fb07 f404 	mul.w	r4, r7, r4
 800b562:	463e      	mov	r6, r7
 800b564:	9708      	str	r7, [sp, #32]
 800b566:	9f03      	ldr	r7, [sp, #12]
 800b568:	940d      	str	r4, [sp, #52]	; 0x34
 800b56a:	fb06 f607 	mul.w	r6, r6, r7
 800b56e:	68d4      	ldr	r4, [r2, #12]
 800b570:	fb0b f709 	mul.w	r7, fp, r9
 800b574:	9405      	str	r4, [sp, #20]
 800b576:	960c      	str	r6, [sp, #48]	; 0x30
 800b578:	6894      	ldr	r4, [r2, #8]
 800b57a:	fb0b f601 	mul.w	r6, fp, r1
 800b57e:	d00c      	beq.n	800b59a <forward_pad+0xb2>
 800b580:	2b02      	cmp	r3, #2
 800b582:	f000 8106 	beq.w	800b792 <forward_pad+0x2aa>
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 80a8 	beq.w	800b6dc <forward_pad+0x1f4>
 800b58c:	b011      	add	sp, #68	; 0x44
 800b58e:	ecbd 8b02 	vpop	{d8}
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	deff      	udf	#255	; 0xff
 800b59a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b59e:	930e      	str	r3, [sp, #56]	; 0x38
 800b5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a2:	eb05 0903 	add.w	r9, r5, r3
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dd6a      	ble.n	800b682 <forward_pad+0x19a>
 800b5ac:	f8de 3008 	ldr.w	r3, [lr, #8]
 800b5b0:	ee08 8a10 	vmov	s16, r8
 800b5b4:	9805      	ldr	r0, [sp, #20]
 800b5b6:	4419      	add	r1, r3
 800b5b8:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b5bc:	4407      	add	r7, r0
 800b5be:	9801      	ldr	r0, [sp, #4]
 800b5c0:	950f      	str	r5, [sp, #60]	; 0x3c
 800b5c2:	fb01 f000 	mul.w	r0, r1, r0
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	9007      	str	r0, [sp, #28]
 800b5ca:	19b8      	adds	r0, r7, r6
 800b5cc:	900a      	str	r0, [sp, #40]	; 0x28
 800b5ce:	eb09 0006 	add.w	r0, r9, r6
 800b5d2:	9e03      	ldr	r6, [sp, #12]
 800b5d4:	9001      	str	r0, [sp, #4]
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	4611      	mov	r1, r2
 800b5da:	fb02 0206 	mla	r2, r2, r6, r0
 800b5de:	460f      	mov	r7, r1
 800b5e0:	fb0b 5202 	mla	r2, fp, r2, r5
 800b5e4:	9204      	str	r2, [sp, #16]
 800b5e6:	1e9a      	subs	r2, r3, #2
 800b5e8:	fb04 f303 	mul.w	r3, r4, r3
 800b5ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5ee:	fb04 8302 	mla	r3, r4, r2, r8
 800b5f2:	9303      	str	r3, [sp, #12]
 800b5f4:	fb0b f301 	mul.w	r3, fp, r1
 800b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9306      	str	r3, [sp, #24]
 800b5fe:	f1cb 0300 	rsb	r3, fp, #0
 800b602:	4698      	mov	r8, r3
 800b604:	9b01      	ldr	r3, [sp, #4]
 800b606:	454b      	cmp	r3, r9
 800b608:	d00b      	beq.n	800b622 <forward_pad+0x13a>
 800b60a:	ee18 5a10 	vmov	r5, s16
 800b60e:	4443      	add	r3, r8
 800b610:	4425      	add	r5, r4
 800b612:	4622      	mov	r2, r4
 800b614:	4618      	mov	r0, r3
 800b616:	4629      	mov	r1, r5
 800b618:	f008 fcbe 	bl	8013f98 <memcpy>
 800b61c:	4548      	cmp	r0, r9
 800b61e:	4603      	mov	r3, r0
 800b620:	d1f5      	bne.n	800b60e <forward_pad+0x126>
 800b622:	ee18 3a10 	vmov	r3, s16
 800b626:	9a05      	ldr	r2, [sp, #20]
 800b628:	ee18 1a10 	vmov	r1, s16
 800b62c:	9801      	ldr	r0, [sp, #4]
 800b62e:	4413      	add	r3, r2
 800b630:	ee08 3a10 	vmov	s16, r3
 800b634:	f008 fcb0 	bl	8013f98 <memcpy>
 800b638:	9b07      	ldr	r3, [sp, #28]
 800b63a:	429f      	cmp	r7, r3
 800b63c:	dd0d      	ble.n	800b65a <forward_pad+0x172>
 800b63e:	461d      	mov	r5, r3
 800b640:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 800b644:	3501      	adds	r5, #1
 800b646:	4651      	mov	r1, sl
 800b648:	4630      	mov	r0, r6
 800b64a:	4622      	mov	r2, r4
 800b64c:	f008 fca4 	bl	8013f98 <memcpy>
 800b650:	42af      	cmp	r7, r5
 800b652:	ebaa 0a04 	sub.w	sl, sl, r4
 800b656:	445e      	add	r6, fp
 800b658:	d1f4      	bne.n	800b644 <forward_pad+0x15c>
 800b65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b65c:	9901      	ldr	r1, [sp, #4]
 800b65e:	4491      	add	r9, r2
 800b660:	9b06      	ldr	r3, [sp, #24]
 800b662:	4411      	add	r1, r2
 800b664:	9a04      	ldr	r2, [sp, #16]
 800b666:	3301      	adds	r3, #1
 800b668:	9101      	str	r1, [sp, #4]
 800b66a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b66c:	9306      	str	r3, [sp, #24]
 800b66e:	440a      	add	r2, r1
 800b670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b672:	9204      	str	r2, [sp, #16]
 800b674:	9a03      	ldr	r2, [sp, #12]
 800b676:	440a      	add	r2, r1
 800b678:	9203      	str	r2, [sp, #12]
 800b67a:	9a02      	ldr	r2, [sp, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d1c1      	bne.n	800b604 <forward_pad+0x11c>
 800b680:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b684:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800b688:	42a5      	cmp	r5, r4
 800b68a:	d00c      	beq.n	800b6a6 <forward_pad+0x1be>
 800b68c:	9b08      	ldr	r3, [sp, #32]
 800b68e:	462e      	mov	r6, r5
 800b690:	425f      	negs	r7, r3
 800b692:	4698      	mov	r8, r3
 800b694:	4621      	mov	r1, r4
 800b696:	4630      	mov	r0, r6
 800b698:	443c      	add	r4, r7
 800b69a:	4446      	add	r6, r8
 800b69c:	4642      	mov	r2, r8
 800b69e:	f008 fc7b 	bl	8013f98 <memcpy>
 800b6a2:	42a6      	cmp	r6, r4
 800b6a4:	d1f6      	bne.n	800b694 <forward_pad+0x1ac>
 800b6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6a8:	9a08      	ldr	r2, [sp, #32]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	fb02 5503 	mla	r5, r2, r3, r5
 800b6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6b2:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 800b6b6:	42a5      	cmp	r5, r4
 800b6b8:	f43f af68 	beq.w	800b58c <forward_pad+0xa4>
 800b6bc:	4617      	mov	r7, r2
 800b6be:	4256      	negs	r6, r2
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	443c      	add	r4, r7
 800b6c6:	4435      	add	r5, r6
 800b6c8:	463a      	mov	r2, r7
 800b6ca:	f008 fc65 	bl	8013f98 <memcpy>
 800b6ce:	42a5      	cmp	r5, r4
 800b6d0:	d1f6      	bne.n	800b6c0 <forward_pad+0x1d8>
 800b6d2:	b011      	add	sp, #68	; 0x44
 800b6d4:	ecbd 8b02 	vpop	{d8}
 800b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6dc:	f8dc 1000 	ldr.w	r1, [ip]
 800b6e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b6e2:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800b6e6:	2908      	cmp	r1, #8
 800b6e8:	f000 80b5 	beq.w	800b856 <forward_pad+0x36e>
 800b6ec:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b6f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	dd0a      	ble.n	800b70c <forward_pad+0x224>
 800b6f6:	4693      	mov	fp, r2
 800b6f8:	469a      	mov	sl, r3
 800b6fa:	44ca      	add	sl, r9
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	464a      	mov	r2, r9
 800b700:	68a1      	ldr	r1, [r4, #8]
 800b702:	f008 fc49 	bl	8013f98 <memcpy>
 800b706:	45d3      	cmp	fp, sl
 800b708:	444d      	add	r5, r9
 800b70a:	dcf6      	bgt.n	800b6fa <forward_pad+0x212>
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd2c      	ble.n	800b76c <forward_pad+0x284>
 800b712:	f04f 0a00 	mov.w	sl, #0
 800b716:	f8dd b014 	ldr.w	fp, [sp, #20]
 800b71a:	f8cd a004 	str.w	sl, [sp, #4]
 800b71e:	2e00      	cmp	r6, #0
 800b720:	dd0a      	ble.n	800b738 <forward_pad+0x250>
 800b722:	f04f 0a00 	mov.w	sl, #0
 800b726:	44ca      	add	sl, r9
 800b728:	4628      	mov	r0, r5
 800b72a:	464a      	mov	r2, r9
 800b72c:	68a1      	ldr	r1, [r4, #8]
 800b72e:	f008 fc33 	bl	8013f98 <memcpy>
 800b732:	4556      	cmp	r6, sl
 800b734:	444d      	add	r5, r9
 800b736:	dcf6      	bgt.n	800b726 <forward_pad+0x23e>
 800b738:	4641      	mov	r1, r8
 800b73a:	4628      	mov	r0, r5
 800b73c:	465a      	mov	r2, fp
 800b73e:	44d8      	add	r8, fp
 800b740:	f008 fc2a 	bl	8013f98 <memcpy>
 800b744:	2f00      	cmp	r7, #0
 800b746:	445d      	add	r5, fp
 800b748:	dd0a      	ble.n	800b760 <forward_pad+0x278>
 800b74a:	f04f 0a00 	mov.w	sl, #0
 800b74e:	44ca      	add	sl, r9
 800b750:	4628      	mov	r0, r5
 800b752:	464a      	mov	r2, r9
 800b754:	68a1      	ldr	r1, [r4, #8]
 800b756:	f008 fc1f 	bl	8013f98 <memcpy>
 800b75a:	4557      	cmp	r7, sl
 800b75c:	444d      	add	r5, r9
 800b75e:	dcf6      	bgt.n	800b74e <forward_pad+0x266>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	9a02      	ldr	r2, [sp, #8]
 800b764:	3301      	adds	r3, #1
 800b766:	429a      	cmp	r2, r3
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	d1d8      	bne.n	800b71e <forward_pad+0x236>
 800b76c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b76e:	2f00      	cmp	r7, #0
 800b770:	f77f af0c 	ble.w	800b58c <forward_pad+0xa4>
 800b774:	2600      	movs	r6, #0
 800b776:	444e      	add	r6, r9
 800b778:	4628      	mov	r0, r5
 800b77a:	464a      	mov	r2, r9
 800b77c:	68a1      	ldr	r1, [r4, #8]
 800b77e:	f008 fc0b 	bl	8013f98 <memcpy>
 800b782:	42b7      	cmp	r7, r6
 800b784:	444d      	add	r5, r9
 800b786:	dcf6      	bgt.n	800b776 <forward_pad+0x28e>
 800b788:	b011      	add	sp, #68	; 0x44
 800b78a:	ecbd 8b02 	vpop	{d8}
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	442f      	add	r7, r5
 800b798:	2b00      	cmp	r3, #0
 800b79a:	9706      	str	r7, [sp, #24]
 800b79c:	dd32      	ble.n	800b804 <forward_pad+0x31c>
 800b79e:	fb04 f309 	mul.w	r3, r4, r9
 800b7a2:	9507      	str	r5, [sp, #28]
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	dd09      	ble.n	800b7c2 <forward_pad+0x2da>
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	4425      	add	r5, r4
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4641      	mov	r1, r8
 800b7b8:	f008 fbee 	bl	8013f98 <memcpy>
 800b7bc:	42ae      	cmp	r6, r5
 800b7be:	4427      	add	r7, r4
 800b7c0:	dcf6      	bgt.n	800b7b0 <forward_pad+0x2c8>
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4498      	add	r8, r3
 800b7cc:	441f      	add	r7, r3
 800b7ce:	f008 fbe3 	bl	8013f98 <memcpy>
 800b7d2:	f1b9 0f00 	cmp.w	r9, #0
 800b7d6:	eba8 0a04 	sub.w	sl, r8, r4
 800b7da:	dd0c      	ble.n	800b7f6 <forward_pad+0x30e>
 800b7dc:	46bb      	mov	fp, r7
 800b7de:	2500      	movs	r5, #0
 800b7e0:	3501      	adds	r5, #1
 800b7e2:	4658      	mov	r0, fp
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4651      	mov	r1, sl
 800b7e8:	f008 fbd6 	bl	8013f98 <memcpy>
 800b7ec:	45a9      	cmp	r9, r5
 800b7ee:	44a3      	add	fp, r4
 800b7f0:	d1f6      	bne.n	800b7e0 <forward_pad+0x2f8>
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	441f      	add	r7, r3
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	9a02      	ldr	r2, [sp, #8]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	d1d3      	bne.n	800b7aa <forward_pad+0x2c2>
 800b802:	9d07      	ldr	r5, [sp, #28]
 800b804:	9b06      	ldr	r3, [sp, #24]
 800b806:	429d      	cmp	r5, r3
 800b808:	d00a      	beq.n	800b820 <forward_pad+0x338>
 800b80a:	461f      	mov	r7, r3
 800b80c:	462c      	mov	r4, r5
 800b80e:	9e08      	ldr	r6, [sp, #32]
 800b810:	4620      	mov	r0, r4
 800b812:	4434      	add	r4, r6
 800b814:	4632      	mov	r2, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f008 fbbe 	bl	8013f98 <memcpy>
 800b81c:	42a7      	cmp	r7, r4
 800b81e:	d1f7      	bne.n	800b810 <forward_pad+0x328>
 800b820:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b826:	4413      	add	r3, r2
 800b828:	9a08      	ldr	r2, [sp, #32]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	fb02 5503 	mla	r5, r2, r3, r5
 800b830:	442c      	add	r4, r5
 800b832:	42a5      	cmp	r5, r4
 800b834:	f43f aeaa 	beq.w	800b58c <forward_pad+0xa4>
 800b838:	4617      	mov	r7, r2
 800b83a:	4256      	negs	r6, r2
 800b83c:	4620      	mov	r0, r4
 800b83e:	4434      	add	r4, r6
 800b840:	463a      	mov	r2, r7
 800b842:	4629      	mov	r1, r5
 800b844:	f008 fba8 	bl	8013f98 <memcpy>
 800b848:	42a5      	cmp	r5, r4
 800b84a:	d1f7      	bne.n	800b83c <forward_pad+0x354>
 800b84c:	b011      	add	sp, #68	; 0x44
 800b84e:	ecbd 8b02 	vpop	{d8}
 800b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b856:	68a2      	ldr	r2, [r4, #8]
 800b858:	4629      	mov	r1, r5
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	f992 9000 	ldrsb.w	r9, [r2]
 800b860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b862:	4648      	mov	r0, r9
 800b864:	18ac      	adds	r4, r5, r2
 800b866:	9403      	str	r4, [sp, #12]
 800b868:	f006 ffc0 	bl	80127ec <st_int8_fill>
 800b86c:	9b02      	ldr	r3, [sp, #8]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	dd25      	ble.n	800b8be <forward_pad+0x3d6>
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	eb06 0a07 	add.w	sl, r6, r7
 800b878:	4625      	mov	r5, r4
 800b87a:	9601      	str	r6, [sp, #4]
 800b87c:	469b      	mov	fp, r3
 800b87e:	9b05      	ldr	r3, [sp, #20]
 800b880:	4434      	add	r4, r6
 800b882:	449a      	add	sl, r3
 800b884:	461e      	mov	r6, r3
 800b886:	4629      	mov	r1, r5
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	4648      	mov	r0, r9
 800b88c:	f10b 0b01 	add.w	fp, fp, #1
 800b890:	f006 ffac 	bl	80127ec <st_int8_fill>
 800b894:	4621      	mov	r1, r4
 800b896:	4640      	mov	r0, r8
 800b898:	4632      	mov	r2, r6
 800b89a:	f007 f80f 	bl	80128bc <st_int8_copy>
 800b89e:	19a1      	adds	r1, r4, r6
 800b8a0:	463a      	mov	r2, r7
 800b8a2:	4648      	mov	r0, r9
 800b8a4:	f006 ffa2 	bl	80127ec <st_int8_fill>
 800b8a8:	9b02      	ldr	r3, [sp, #8]
 800b8aa:	4455      	add	r5, sl
 800b8ac:	44b0      	add	r8, r6
 800b8ae:	455b      	cmp	r3, fp
 800b8b0:	4454      	add	r4, sl
 800b8b2:	d1e8      	bne.n	800b886 <forward_pad+0x39e>
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	fb0a 3302 	mla	r3, sl, r2, r3
 800b8bc:	9303      	str	r3, [sp, #12]
 800b8be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	9903      	ldr	r1, [sp, #12]
 800b8c4:	b011      	add	sp, #68	; 0x44
 800b8c6:	ecbd 8b02 	vpop	{d8}
 800b8ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ce:	f006 bf8d 	b.w	80127ec <st_int8_fill>
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	deff      	udf	#255	; 0xff
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	deff      	udf	#255	; 0xff

0800b8dc <ai_check_custom_types>:
 800b8dc:	b082      	sub	sp, #8
 800b8de:	4b12      	ldr	r3, [pc, #72]	; (800b928 <ai_check_custom_types+0x4c>)
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	b118      	cbz	r0, 800b8ec <ai_check_custom_types+0x10>
 800b8e4:	7803      	ldrb	r3, [r0, #0]
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d002      	beq.n	800b8f0 <ai_check_custom_types+0x14>
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	b002      	add	sp, #8
 800b8ee:	4770      	bx	lr
 800b8f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d004      	beq.n	800b902 <ai_check_custom_types+0x26>
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f080 0001 	eor.w	r0, r0, #1
 800b8fe:	b002      	add	sp, #8
 800b900:	4770      	bx	lr
 800b902:	7842      	ldrb	r2, [r0, #1]
 800b904:	3001      	adds	r0, #1
 800b906:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d1f4      	bne.n	800b8f8 <ai_check_custom_types+0x1c>
 800b90e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b912:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b916:	429a      	cmp	r2, r3
 800b918:	d1ee      	bne.n	800b8f8 <ai_check_custom_types+0x1c>
 800b91a:	7842      	ldrb	r2, [r0, #1]
 800b91c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b920:	429a      	cmp	r2, r3
 800b922:	d1e9      	bne.n	800b8f8 <ai_check_custom_types+0x1c>
 800b924:	2000      	movs	r0, #0
 800b926:	e7e8      	b.n	800b8fa <ai_check_custom_types+0x1e>
 800b928:	84048403 	.word	0x84048403

0800b92c <ai_layers_init_all>:
 800b92c:	2100      	movs	r1, #0
 800b92e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b930:	b13b      	cbz	r3, 800b942 <ai_layers_init_all+0x16>
 800b932:	691a      	ldr	r2, [r3, #16]
 800b934:	3101      	adds	r1, #1
 800b936:	60d8      	str	r0, [r3, #12]
 800b938:	429a      	cmp	r2, r3
 800b93a:	4613      	mov	r3, r2
 800b93c:	d001      	beq.n	800b942 <ai_layers_init_all+0x16>
 800b93e:	2a00      	cmp	r2, #0
 800b940:	d1f6      	bne.n	800b930 <ai_layers_init_all+0x4>
 800b942:	4608      	mov	r0, r1
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop

0800b948 <ai_layers_post_init_all>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	2500      	movs	r5, #0
 800b94c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b94e:	b16c      	cbz	r4, 800b96c <ai_layers_post_init_all+0x24>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	07db      	lsls	r3, r3, #31
 800b954:	d504      	bpl.n	800b960 <ai_layers_post_init_all+0x18>
 800b956:	6a23      	ldr	r3, [r4, #32]
 800b958:	4620      	mov	r0, r4
 800b95a:	b10b      	cbz	r3, 800b960 <ai_layers_post_init_all+0x18>
 800b95c:	3501      	adds	r5, #1
 800b95e:	4798      	blx	r3
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	42a3      	cmp	r3, r4
 800b964:	461c      	mov	r4, r3
 800b966:	d001      	beq.n	800b96c <ai_layers_post_init_all+0x24>
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f0      	bne.n	800b94e <ai_layers_post_init_all+0x6>
 800b96c:	4628      	mov	r0, r5
 800b96e:	bd38      	pop	{r3, r4, r5, pc}

0800b970 <ai_layers_forward_all>:
 800b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b974:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b976:	4604      	mov	r4, r0
 800b978:	2f00      	cmp	r7, #0
 800b97a:	d02c      	beq.n	800b9d6 <ai_layers_forward_all+0x66>
 800b97c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800b97e:	b1e1      	cbz	r1, 800b9ba <ai_layers_forward_all+0x4a>
 800b980:	2600      	movs	r6, #0
 800b982:	6381      	str	r1, [r0, #56]	; 0x38
 800b984:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b986:	2001      	movs	r0, #1
 800b988:	47b8      	blx	r7
 800b98a:	46b0      	mov	r8, r6
 800b98c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b98e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b990:	2002      	movs	r0, #2
 800b992:	47b8      	blx	r7
 800b994:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b996:	4628      	mov	r0, r5
 800b998:	696b      	ldr	r3, [r5, #20]
 800b99a:	4798      	blx	r3
 800b99c:	692b      	ldr	r3, [r5, #16]
 800b99e:	2003      	movs	r0, #3
 800b9a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	d00c      	beq.n	800b9c2 <ai_layers_forward_all+0x52>
 800b9a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	47b8      	blx	r7
 800b9ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	d1ec      	bne.n	800b98e <ai_layers_forward_all+0x1e>
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	4630      	mov	r0, r6
 800b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	2003      	movs	r0, #3
 800b9c6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800b9ca:	3601      	adds	r6, #1
 800b9cc:	47b8      	blx	r7
 800b9ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d1dc      	bne.n	800b98e <ai_layers_forward_all+0x1e>
 800b9d4:	e7ee      	b.n	800b9b4 <ai_layers_forward_all+0x44>
 800b9d6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b9d8:	b19d      	cbz	r5, 800ba02 <ai_layers_forward_all+0x92>
 800b9da:	463e      	mov	r6, r7
 800b9dc:	6385      	str	r5, [r0, #56]	; 0x38
 800b9de:	e003      	b.n	800b9e8 <ai_layers_forward_all+0x78>
 800b9e0:	3601      	adds	r6, #1
 800b9e2:	63a5      	str	r5, [r4, #56]	; 0x38
 800b9e4:	2d00      	cmp	r5, #0
 800b9e6:	d0e5      	beq.n	800b9b4 <ai_layers_forward_all+0x44>
 800b9e8:	696b      	ldr	r3, [r5, #20]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	4798      	blx	r3
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	692d      	ldr	r5, [r5, #16]
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	d1f4      	bne.n	800b9e0 <ai_layers_forward_all+0x70>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	462e      	mov	r6, r5
 800ba04:	e7d6      	b.n	800b9b4 <ai_layers_forward_all+0x44>
 800ba06:	bf00      	nop

0800ba08 <pool_func_ap_array_integer_INT8>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	b093      	sub	sp, #76	; 0x4c
 800ba0e:	468c      	mov	ip, r1
 800ba10:	469a      	mov	sl, r3
 800ba12:	6804      	ldr	r4, [r0, #0]
 800ba14:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800ba18:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800ba1c:	910e      	str	r1, [sp, #56]	; 0x38
 800ba1e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800ba22:	930d      	str	r3, [sp, #52]	; 0x34
 800ba24:	910f      	str	r1, [sp, #60]	; 0x3c
 800ba26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ba28:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800ba2c:	6980      	ldr	r0, [r0, #24]
 800ba2e:	9110      	str	r1, [sp, #64]	; 0x40
 800ba30:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800ba34:	6999      	ldr	r1, [r3, #24]
 800ba36:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 800ba3a:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 800ba3e:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2c00      	cmp	r4, #0
 800ba46:	d05c      	beq.n	800bb02 <pool_func_ap_array_integer_INT8+0xfa>
 800ba48:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ba4c:	f1b9 0f00 	cmp.w	r9, #0
 800ba50:	d041      	beq.n	800bad6 <pool_func_ap_array_integer_INT8+0xce>
 800ba52:	8865      	ldrh	r5, [r4, #2]
 800ba54:	2d00      	cmp	r5, #0
 800ba56:	d06d      	beq.n	800bb34 <pool_func_ap_array_integer_INT8+0x12c>
 800ba58:	f8d9 6000 	ldr.w	r6, [r9]
 800ba5c:	ed96 0a00 	vldr	s0, [r6]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d06b      	beq.n	800bb3c <pool_func_ap_array_integer_INT8+0x134>
 800ba64:	685e      	ldr	r6, [r3, #4]
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	d03c      	beq.n	800bae4 <pool_func_ap_array_integer_INT8+0xdc>
 800ba6a:	885d      	ldrh	r5, [r3, #2]
 800ba6c:	9511      	str	r5, [sp, #68]	; 0x44
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	d050      	beq.n	800bb14 <pool_func_ap_array_integer_INT8+0x10c>
 800ba72:	6835      	ldr	r5, [r6, #0]
 800ba74:	6880      	ldr	r0, [r0, #8]
 800ba76:	6889      	ldr	r1, [r1, #8]
 800ba78:	edd5 0a00 	vldr	s1, [r5]
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	d052      	beq.n	800bb28 <pool_func_ap_array_integer_INT8+0x120>
 800ba82:	8864      	ldrh	r4, [r4, #2]
 800ba84:	2c00      	cmp	r4, #0
 800ba86:	d037      	beq.n	800baf8 <pool_func_ap_array_integer_INT8+0xf0>
 800ba88:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800ba8c:	f994 4000 	ldrsb.w	r4, [r4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d04d      	beq.n	800bb30 <pool_func_ap_array_integer_INT8+0x128>
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	d032      	beq.n	800bafe <pool_func_ap_array_integer_INT8+0xf6>
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	9311      	str	r3, [sp, #68]	; 0x44
 800ba9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d046      	beq.n	800bb30 <pool_func_ap_array_integer_INT8+0x128>
 800baa2:	6873      	ldr	r3, [r6, #4]
 800baa4:	f993 5000 	ldrsb.w	r5, [r3]
 800baa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baaa:	f8cd a000 	str.w	sl, [sp]
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bab2:	9303      	str	r3, [sp, #12]
 800bab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab6:	9302      	str	r3, [sp, #8]
 800bab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	4613      	mov	r3, r2
 800babe:	4662      	mov	r2, ip
 800bac0:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800bac4:	e9cd e807 	strd	lr, r8, [sp, #28]
 800bac8:	e9cd b705 	strd	fp, r7, [sp, #20]
 800bacc:	f007 fcdc 	bl	8013488 <st_int8_avepool>
 800bad0:	b013      	add	sp, #76	; 0x4c
 800bad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d03c      	beq.n	800bb54 <pool_func_ap_array_integer_INT8+0x14c>
 800bada:	685e      	ldr	r6, [r3, #4]
 800badc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bae0:	2e00      	cmp	r6, #0
 800bae2:	d1c2      	bne.n	800ba6a <pool_func_ap_array_integer_INT8+0x62>
 800bae4:	6880      	ldr	r0, [r0, #8]
 800bae6:	6889      	ldr	r1, [r1, #8]
 800bae8:	f1b9 0f00 	cmp.w	r9, #0
 800baec:	d02d      	beq.n	800bb4a <pool_func_ap_array_integer_INT8+0x142>
 800baee:	8864      	ldrh	r4, [r4, #2]
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	d151      	bne.n	800bb98 <pool_func_ap_array_integer_INT8+0x190>
 800baf4:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800baf8:	2400      	movs	r4, #0
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	d1cc      	bne.n	800ba98 <pool_func_ap_array_integer_INT8+0x90>
 800bafe:	2500      	movs	r5, #0
 800bb00:	e7d2      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb02:	b33b      	cbz	r3, 800bb54 <pool_func_ap_array_integer_INT8+0x14c>
 800bb04:	685e      	ldr	r6, [r3, #4]
 800bb06:	b376      	cbz	r6, 800bb66 <pool_func_ap_array_integer_INT8+0x15e>
 800bb08:	885d      	ldrh	r5, [r3, #2]
 800bb0a:	9511      	str	r5, [sp, #68]	; 0x44
 800bb0c:	2d00      	cmp	r5, #0
 800bb0e:	d133      	bne.n	800bb78 <pool_func_ap_array_integer_INT8+0x170>
 800bb10:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb14:	6880      	ldr	r0, [r0, #8]
 800bb16:	6889      	ldr	r1, [r1, #8]
 800bb18:	b1c4      	cbz	r4, 800bb4c <pool_func_ap_array_integer_INT8+0x144>
 800bb1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb1e:	eddf 0a22 	vldr	s1, [pc, #136]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb22:	f1b9 0f00 	cmp.w	r9, #0
 800bb26:	d1ac      	bne.n	800ba82 <pool_func_ap_array_integer_INT8+0x7a>
 800bb28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb2a:	464c      	mov	r4, r9
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1b8      	bne.n	800baa2 <pool_func_ap_array_integer_INT8+0x9a>
 800bb30:	461d      	mov	r5, r3
 800bb32:	e7b9      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb34:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d193      	bne.n	800ba64 <pool_func_ap_array_integer_INT8+0x5c>
 800bb3c:	6880      	ldr	r0, [r0, #8]
 800bb3e:	6889      	ldr	r1, [r1, #8]
 800bb40:	bb15      	cbnz	r5, 800bb88 <pool_func_ap_array_integer_INT8+0x180>
 800bb42:	462c      	mov	r4, r5
 800bb44:	eddf 0a18 	vldr	s1, [pc, #96]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb48:	e7ae      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb4a:	464c      	mov	r4, r9
 800bb4c:	eddf 0a16 	vldr	s1, [pc, #88]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb50:	4625      	mov	r5, r4
 800bb52:	e7a9      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb54:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb58:	461c      	mov	r4, r3
 800bb5a:	6880      	ldr	r0, [r0, #8]
 800bb5c:	461d      	mov	r5, r3
 800bb5e:	eef0 0a40 	vmov.f32	s1, s0
 800bb62:	6889      	ldr	r1, [r1, #8]
 800bb64:	e7a0      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb66:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb6a:	4634      	mov	r4, r6
 800bb6c:	6880      	ldr	r0, [r0, #8]
 800bb6e:	4635      	mov	r5, r6
 800bb70:	eef0 0a40 	vmov.f32	s1, s0
 800bb74:	6889      	ldr	r1, [r1, #8]
 800bb76:	e797      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb78:	6833      	ldr	r3, [r6, #0]
 800bb7a:	6880      	ldr	r0, [r0, #8]
 800bb7c:	6889      	ldr	r1, [r1, #8]
 800bb7e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb82:	edd3 0a00 	vldr	s1, [r3]
 800bb86:	e78c      	b.n	800baa2 <pool_func_ap_array_integer_INT8+0x9a>
 800bb88:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800bb8c:	461d      	mov	r5, r3
 800bb8e:	eddf 0a06 	vldr	s1, [pc, #24]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bb92:	f994 4000 	ldrsb.w	r4, [r4]
 800bb96:	e787      	b.n	800baa8 <pool_func_ap_array_integer_INT8+0xa0>
 800bb98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb9c:	eddf 0a02 	vldr	s1, [pc, #8]	; 800bba8 <pool_func_ap_array_integer_INT8+0x1a0>
 800bba0:	f993 4000 	ldrsb.w	r4, [r3]
 800bba4:	e7ab      	b.n	800bafe <pool_func_ap_array_integer_INT8+0xf6>
 800bba6:	bf00      	nop
 800bba8:	00000000 	.word	0x00000000

0800bbac <forward_lite_node_convert_integer_iu8ou8>:
 800bbac:	ee07 3a90 	vmov	s15, r3
 800bbb0:	f89d 3000 	ldrb.w	r3, [sp]
 800bbb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bbb8:	ee06 3a90 	vmov	s13, r3
 800bbbc:	1883      	adds	r3, r0, r2
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bbc6:	4298      	cmp	r0, r3
 800bbc8:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bbcc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800bbd0:	d215      	bcs.n	800bbfe <forward_lite_node_convert_integer_iu8ou8+0x52>
 800bbd2:	3801      	subs	r0, #1
 800bbd4:	440a      	add	r2, r1
 800bbd6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bbda:	eef0 7a66 	vmov.f32	s15, s13
 800bbde:	ee07 3a10 	vmov	s14, r3
 800bbe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bbe6:	eee7 7a00 	vfma.f32	s15, s14, s0
 800bbea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbee:	ee17 3a90 	vmov	r3, s15
 800bbf2:	f383 0308 	usat	r3, #8, r3
 800bbf6:	f801 3b01 	strb.w	r3, [r1], #1
 800bbfa:	4291      	cmp	r1, r2
 800bbfc:	d1eb      	bne.n	800bbd6 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 800bbfe:	4770      	bx	lr

0800bc00 <forward_lite_node_convert_integer_iu8os8>:
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	f99d 3000 	ldrsb.w	r3, [sp]
 800bc08:	ee06 3a90 	vmov	s13, r3
 800bc0c:	1883      	adds	r3, r0, r2
 800bc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc12:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bc16:	4298      	cmp	r0, r3
 800bc18:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800bc1c:	d22d      	bcs.n	800bc7a <forward_lite_node_convert_integer_iu8os8+0x7a>
 800bc1e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800bc22:	3801      	subs	r0, #1
 800bc24:	440a      	add	r2, r1
 800bc26:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bc7c <forward_lite_node_convert_integer_iu8os8+0x7c>
 800bc2a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bc2e:	eef0 7a66 	vmov.f32	s15, s13
 800bc32:	ee07 3a10 	vmov	s14, r3
 800bc36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc3a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800bc3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc42:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800bc46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800bc52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc56:	dd08      	ble.n	800bc6a <forward_lite_node_convert_integer_iu8os8+0x6a>
 800bc58:	ee17 3a10 	vmov	r3, s14
 800bc5c:	f303 0307 	ssat	r3, #8, r3
 800bc60:	f801 3b01 	strb.w	r3, [r1], #1
 800bc64:	4291      	cmp	r1, r2
 800bc66:	d1e0      	bne.n	800bc2a <forward_lite_node_convert_integer_iu8os8+0x2a>
 800bc68:	4770      	bx	lr
 800bc6a:	ee17 3a90 	vmov	r3, s15
 800bc6e:	f303 0307 	ssat	r3, #8, r3
 800bc72:	f801 3b01 	strb.w	r3, [r1], #1
 800bc76:	4291      	cmp	r1, r2
 800bc78:	d1d7      	bne.n	800bc2a <forward_lite_node_convert_integer_iu8os8+0x2a>
 800bc7a:	4770      	bx	lr
 800bc7c:	3efffffc 	.word	0x3efffffc

0800bc80 <forward_lite_node_convert_integer_iu8os8_fast>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	1095      	asrs	r5, r2, #2
 800bc84:	2d00      	cmp	r5, #0
 800bc86:	dd31      	ble.n	800bcec <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800bc88:	00ae      	lsls	r6, r5, #2
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bc90:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800bc94:	f850 3b04 	ldr.w	r3, [r0], #4
 800bc98:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800bc9c:	fa3f fc8c 	uxtb16	ip, ip
 800bca0:	fadc fc0e 	ssub16	ip, ip, lr
 800bca4:	fa3f f383 	uxtb16	r3, r3
 800bca8:	fad3 f30e 	ssub16	r3, r3, lr
 800bcac:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800bcb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bcb4:	42a8      	cmp	r0, r5
 800bcb6:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800bcba:	ea43 030c 	orr.w	r3, r3, ip
 800bcbe:	f844 3b04 	str.w	r3, [r4], #4
 800bcc2:	d1e7      	bne.n	800bc94 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800bcc4:	4431      	add	r1, r6
 800bcc6:	f012 0203 	ands.w	r2, r2, #3
 800bcca:	d00e      	beq.n	800bcea <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800bccc:	782b      	ldrb	r3, [r5, #0]
 800bcce:	3a01      	subs	r2, #1
 800bcd0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800bcd4:	700b      	strb	r3, [r1, #0]
 800bcd6:	d008      	beq.n	800bcea <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800bcd8:	786b      	ldrb	r3, [r5, #1]
 800bcda:	2a01      	cmp	r2, #1
 800bcdc:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800bce0:	704b      	strb	r3, [r1, #1]
 800bce2:	d002      	beq.n	800bcea <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800bce4:	78ab      	ldrb	r3, [r5, #2]
 800bce6:	3b80      	subs	r3, #128	; 0x80
 800bce8:	708b      	strb	r3, [r1, #2]
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	4605      	mov	r5, r0
 800bcee:	e7ea      	b.n	800bcc6 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800bcf0 <forward_lite_node_convert_integer_is8ou8>:
 800bcf0:	ee07 3a90 	vmov	s15, r3
 800bcf4:	f89d 3000 	ldrb.w	r3, [sp]
 800bcf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bcfc:	ee06 3a90 	vmov	s13, r3
 800bd00:	1883      	adds	r3, r0, r2
 800bd02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bd10:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800bd14:	d215      	bcs.n	800bd42 <forward_lite_node_convert_integer_is8ou8+0x52>
 800bd16:	3801      	subs	r0, #1
 800bd18:	440a      	add	r2, r1
 800bd1a:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800bd1e:	eef0 7a66 	vmov.f32	s15, s13
 800bd22:	ee07 3a10 	vmov	s14, r3
 800bd26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd2a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800bd2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd32:	ee17 3a90 	vmov	r3, s15
 800bd36:	f383 0308 	usat	r3, #8, r3
 800bd3a:	f801 3b01 	strb.w	r3, [r1], #1
 800bd3e:	4291      	cmp	r1, r2
 800bd40:	d1eb      	bne.n	800bd1a <forward_lite_node_convert_integer_is8ou8+0x2a>
 800bd42:	4770      	bx	lr

0800bd44 <forward_lite_node_convert_integer_is8ou8_fast>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	1095      	asrs	r5, r2, #2
 800bd48:	2d00      	cmp	r5, #0
 800bd4a:	dd2d      	ble.n	800bda8 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800bd4c:	00ae      	lsls	r6, r5, #2
 800bd4e:	460c      	mov	r4, r1
 800bd50:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800bd54:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800bd58:	f850 3b04 	ldr.w	r3, [r0], #4
 800bd5c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800bd60:	fa2f fc8c 	sxtb16	ip, ip
 800bd64:	fa9c fc0e 	sadd16	ip, ip, lr
 800bd68:	fa2f f383 	sxtb16	r3, r3
 800bd6c:	fa93 f30e 	sadd16	r3, r3, lr
 800bd70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bd74:	42a8      	cmp	r0, r5
 800bd76:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800bd7a:	f844 3b04 	str.w	r3, [r4], #4
 800bd7e:	d1eb      	bne.n	800bd58 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800bd80:	4431      	add	r1, r6
 800bd82:	f012 0203 	ands.w	r2, r2, #3
 800bd86:	d00e      	beq.n	800bda6 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800bd88:	782b      	ldrb	r3, [r5, #0]
 800bd8a:	3a01      	subs	r2, #1
 800bd8c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800bd90:	700b      	strb	r3, [r1, #0]
 800bd92:	d008      	beq.n	800bda6 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800bd94:	786b      	ldrb	r3, [r5, #1]
 800bd96:	2a01      	cmp	r2, #1
 800bd98:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800bd9c:	704b      	strb	r3, [r1, #1]
 800bd9e:	d002      	beq.n	800bda6 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800bda0:	78ab      	ldrb	r3, [r5, #2]
 800bda2:	3b80      	subs	r3, #128	; 0x80
 800bda4:	708b      	strb	r3, [r1, #2]
 800bda6:	bd70      	pop	{r4, r5, r6, pc}
 800bda8:	4605      	mov	r5, r0
 800bdaa:	e7ea      	b.n	800bd82 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800bdac <align_factor>:
 800bdac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	b508      	push	{r3, lr}
 800bdb4:	eeb4 0a67 	vcmp.f32	s0, s15
 800bdb8:	2300      	movs	r3, #0
 800bdba:	8003      	strh	r3, [r0, #0]
 800bdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc0:	d524      	bpl.n	800be0c <align_factor+0x60>
 800bdc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdca:	dd1f      	ble.n	800be0c <align_factor+0x60>
 800bdcc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e005      	b.n	800bde0 <align_factor+0x34>
 800bdd4:	8013      	strh	r3, [r2, #0]
 800bdd6:	b28b      	uxth	r3, r1
 800bdd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bddc:	2b21      	cmp	r3, #33	; 0x21
 800bdde:	d02b      	beq.n	800be38 <align_factor+0x8c>
 800bde0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bde4:	1c59      	adds	r1, r3, #1
 800bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdea:	d4f3      	bmi.n	800bdd4 <align_factor+0x28>
 800bdec:	eddf 7a17 	vldr	s15, [pc, #92]	; 800be4c <align_factor+0xa0>
 800bdf0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bdf4:	ee17 0a90 	vmov	r0, s15
 800bdf8:	f7f4 fa92 	bl	8000320 <__aeabi_f2lz>
 800bdfc:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800be00:	d003      	beq.n	800be0a <align_factor+0x5e>
 800be02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800be06:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800be0a:	bd08      	pop	{r3, pc}
 800be0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be18:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800be1c:	e005      	b.n	800be2a <align_factor+0x7e>
 800be1e:	8013      	strh	r3, [r2, #0]
 800be20:	b28b      	uxth	r3, r1
 800be22:	ee20 0a07 	vmul.f32	s0, s0, s14
 800be26:	4283      	cmp	r3, r0
 800be28:	d00a      	beq.n	800be40 <align_factor+0x94>
 800be2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800be2e:	1e59      	subs	r1, r3, #1
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	dcf3      	bgt.n	800be1e <align_factor+0x72>
 800be36:	e7d9      	b.n	800bdec <align_factor+0x40>
 800be38:	2300      	movs	r3, #0
 800be3a:	4618      	mov	r0, r3
 800be3c:	8013      	strh	r3, [r2, #0]
 800be3e:	bd08      	pop	{r3, pc}
 800be40:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800be44:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be48:	8013      	strh	r3, [r2, #0]
 800be4a:	e7cf      	b.n	800bdec <align_factor+0x40>
 800be4c:	4f000000 	.word	0x4f000000

0800be50 <align_factor_ch>:
 800be50:	2900      	cmp	r1, #0
 800be52:	d05d      	beq.n	800bf10 <align_factor_ch+0xc0>
 800be54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be58:	ed2d 8b04 	vpush	{d8-d9}
 800be5c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800be60:	4604      	mov	r4, r0
 800be62:	4691      	mov	r9, r2
 800be64:	4698      	mov	r8, r3
 800be66:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800be6a:	eddf 9a2a 	vldr	s19, [pc, #168]	; 800bf14 <align_factor_ch+0xc4>
 800be6e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800be72:	2700      	movs	r7, #0
 800be74:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800be78:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800be7c:	ecf4 7a01 	vldmia	r4!, {s15}
 800be80:	ee69 7a27 	vmul.f32	s15, s18, s15
 800be84:	eef4 7a68 	vcmp.f32	s15, s17
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	d528      	bpl.n	800bee0 <align_factor_ch+0x90>
 800be8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be96:	dd23      	ble.n	800bee0 <align_factor_ch+0x90>
 800be98:	2200      	movs	r2, #0
 800be9a:	e003      	b.n	800bea4 <align_factor_ch+0x54>
 800be9c:	2a20      	cmp	r2, #32
 800be9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bea2:	d031      	beq.n	800bf08 <align_factor_ch+0xb8>
 800bea4:	eef4 7ac8 	vcmpe.f32	s15, s16
 800bea8:	b213      	sxth	r3, r2
 800beaa:	3201      	adds	r2, #1
 800beac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb0:	d4f4      	bmi.n	800be9c <align_factor_ch+0x4c>
 800beb2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800beb6:	f8a8 3000 	strh.w	r3, [r8]
 800beba:	ee17 0a90 	vmov	r0, s15
 800bebe:	f7f4 fa2f 	bl	8000320 <__aeabi_f2lz>
 800bec2:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800bec6:	bf18      	it	ne
 800bec8:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800becc:	42a5      	cmp	r5, r4
 800bece:	f108 0802 	add.w	r8, r8, #2
 800bed2:	f849 0b04 	str.w	r0, [r9], #4
 800bed6:	d1d1      	bne.n	800be7c <align_factor_ch+0x2c>
 800bed8:	ecbd 8b04 	vpop	{d8-d9}
 800bedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee0:	2300      	movs	r3, #0
 800bee2:	e005      	b.n	800bef0 <align_factor_ch+0xa0>
 800bee4:	b213      	sxth	r3, r2
 800bee6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800beea:	f113 0f1f 	cmn.w	r3, #31
 800beee:	d006      	beq.n	800befe <align_factor_ch+0xae>
 800bef0:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befa:	dcf3      	bgt.n	800bee4 <align_factor_ch+0x94>
 800befc:	e7d9      	b.n	800beb2 <align_factor_ch+0x62>
 800befe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf02:	f06f 031d 	mvn.w	r3, #29
 800bf06:	e7d4      	b.n	800beb2 <align_factor_ch+0x62>
 800bf08:	2000      	movs	r0, #0
 800bf0a:	f8a8 7000 	strh.w	r7, [r8]
 800bf0e:	e7dd      	b.n	800becc <align_factor_ch+0x7c>
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	4f000000 	.word	0x4f000000

0800bf18 <st_sssa8_ch_conv_dw_Wadapt>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	b089      	sub	sp, #36	; 0x24
 800bf1e:	461e      	mov	r6, r3
 800bf20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bf28:	9005      	str	r0, [sp, #20]
 800bf2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800bf2e:	9203      	str	r2, [sp, #12]
 800bf30:	088c      	lsrs	r4, r1, #2
 800bf32:	9402      	str	r4, [sp, #8]
 800bf34:	d05a      	beq.n	800bfec <st_sssa8_ch_conv_dw_Wadapt+0xd4>
 800bf36:	fb06 f902 	mul.w	r9, r6, r2
 800bf3a:	4615      	mov	r5, r2
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	1e60      	subs	r0, r4, #1
 800bf40:	f3c9 094f 	ubfx	r9, r9, #1, #16
 800bf44:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800bf48:	f107 0a04 	add.w	sl, r7, #4
 800bf4c:	b280      	uxth	r0, r0
 800bf4e:	f109 32ff 	add.w	r2, r9, #4294967295
 800bf52:	46b8      	mov	r8, r7
 800bf54:	fb15 fb06 	smulbb	fp, r5, r6
 800bf58:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 800bf5c:	b292      	uxth	r2, r2
 800bf5e:	4f51      	ldr	r7, [pc, #324]	; (800c0a4 <st_sssa8_ch_conv_dw_Wadapt+0x18c>)
 800bf60:	f00b 0b01 	and.w	fp, fp, #1
 800bf64:	468c      	mov	ip, r1
 800bf66:	fb02 1201 	mla	r2, r2, r1, r1
 800bf6a:	0054      	lsls	r4, r2, #1
 800bf6c:	9401      	str	r4, [sp, #4]
 800bf6e:	4644      	mov	r4, r8
 800bf70:	9307      	str	r3, [sp, #28]
 800bf72:	f1b9 0f00 	cmp.w	r9, #0
 800bf76:	d02b      	beq.n	800bfd0 <st_sssa8_ch_conv_dw_Wadapt+0xb8>
 800bf78:	4648      	mov	r0, r9
 800bf7a:	9907      	ldr	r1, [sp, #28]
 800bf7c:	3801      	subs	r0, #1
 800bf7e:	f854 500c 	ldr.w	r5, [r4, ip]
 800bf82:	1d0a      	adds	r2, r1, #4
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	b280      	uxth	r0, r0
 800bf88:	4474      	add	r4, lr
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	ea05 0207 	and.w	r2, r5, r7
 800bf90:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800bf9a:	9d07      	ldr	r5, [sp, #28]
 800bf9c:	fa2f f683 	sxtb16	r6, r3
 800bfa0:	600e      	str	r6, [r1, #0]
 800bfa2:	1d29      	adds	r1, r5, #4
 800bfa4:	fa2f f393 	sxtb16	r3, r3, ror #8
 800bfa8:	9107      	str	r1, [sp, #28]
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	fa2f f182 	sxtb16	r1, r2
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	f843 1c04 	str.w	r1, [r3, #-4]
 800bfb8:	fa2f f292 	sxtb16	r2, r2, ror #8
 800bfbc:	9307      	str	r3, [sp, #28]
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	9307      	str	r3, [sp, #28]
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1d7      	bne.n	800bf7a <st_sssa8_ch_conv_dw_Wadapt+0x62>
 800bfca:	9b01      	ldr	r3, [sp, #4]
 800bfcc:	eb03 0408 	add.w	r4, r3, r8
 800bfd0:	9907      	ldr	r1, [sp, #28]
 800bfd2:	f1bb 0f00 	cmp.w	fp, #0
 800bfd6:	d12e      	bne.n	800c036 <st_sssa8_ch_conv_dw_Wadapt+0x11e>
 800bfd8:	460b      	mov	r3, r1
 800bfda:	f108 0804 	add.w	r8, r8, #4
 800bfde:	45d0      	cmp	r8, sl
 800bfe0:	d1c5      	bne.n	800bf6e <st_sssa8_ch_conv_dw_Wadapt+0x56>
 800bfe2:	9a02      	ldr	r2, [sp, #8]
 800bfe4:	4661      	mov	r1, ip
 800bfe6:	0092      	lsls	r2, r2, #2
 800bfe8:	b292      	uxth	r2, r2
 800bfea:	9202      	str	r2, [sp, #8]
 800bfec:	f011 0203 	ands.w	r2, r1, #3
 800bff0:	d037      	beq.n	800c062 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800bff2:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800bff6:	fb10 f404 	smulbb	r4, r0, r4
 800bffa:	b2a4      	uxth	r4, r4
 800bffc:	b38c      	cbz	r4, 800c062 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800bffe:	2901      	cmp	r1, #1
 800c000:	d132      	bne.n	800c068 <st_sssa8_ch_conv_dw_Wadapt+0x150>
 800c002:	0067      	lsls	r7, r4, #1
 800c004:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c008:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800c00c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c010:	4665      	mov	r5, ip
 800c012:	4620      	mov	r0, r4
 800c014:	1c69      	adds	r1, r5, #1
 800c016:	eb0e 0205 	add.w	r2, lr, r5
 800c01a:	462e      	mov	r6, r5
 800c01c:	b28d      	uxth	r5, r1
 800c01e:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800c022:	f823 1b02 	strh.w	r1, [r3], #2
 800c026:	4283      	cmp	r3, r0
 800c028:	d1f9      	bne.n	800c01e <st_sssa8_ch_conv_dw_Wadapt+0x106>
 800c02a:	4566      	cmp	r6, ip
 800c02c:	4623      	mov	r3, r4
 800c02e:	4438      	add	r0, r7
 800c030:	d017      	beq.n	800c062 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c032:	443c      	add	r4, r7
 800c034:	e7ee      	b.n	800c014 <st_sssa8_ch_conv_dw_Wadapt+0xfc>
 800c036:	6824      	ldr	r4, [r4, #0]
 800c038:	f101 0308 	add.w	r3, r1, #8
 800c03c:	b2a2      	uxth	r2, r4
 800c03e:	ea07 2004 	and.w	r0, r7, r4, lsl #8
 800c042:	4310      	orrs	r0, r2
 800c044:	ea04 0207 	and.w	r2, r4, r7
 800c048:	fa2f f080 	sxtb16	r0, r0
 800c04c:	ea42 6214 	orr.w	r2, r2, r4, lsr #24
 800c050:	8008      	strh	r0, [r1, #0]
 800c052:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 800c056:	0c00      	lsrs	r0, r0, #16
 800c058:	808a      	strh	r2, [r1, #4]
 800c05a:	0c12      	lsrs	r2, r2, #16
 800c05c:	8048      	strh	r0, [r1, #2]
 800c05e:	80ca      	strh	r2, [r1, #6]
 800c060:	e7bb      	b.n	800bfda <st_sssa8_ch_conv_dw_Wadapt+0xc2>
 800c062:	b009      	add	sp, #36	; 0x24
 800c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	9802      	ldr	r0, [sp, #8]
 800c06a:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 800c06e:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c072:	0064      	lsls	r4, r4, #1
 800c074:	4402      	add	r2, r0
 800c076:	463d      	mov	r5, r7
 800c078:	4684      	mov	ip, r0
 800c07a:	b296      	uxth	r6, r2
 800c07c:	f10c 0001 	add.w	r0, ip, #1
 800c080:	eb0e 020c 	add.w	r2, lr, ip
 800c084:	fa1f fc80 	uxth.w	ip, r0
 800c088:	f992 0000 	ldrsb.w	r0, [r2]
 800c08c:	440a      	add	r2, r1
 800c08e:	f823 0b02 	strh.w	r0, [r3], #2
 800c092:	42ab      	cmp	r3, r5
 800c094:	d1f8      	bne.n	800c088 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800c096:	45b4      	cmp	ip, r6
 800c098:	4425      	add	r5, r4
 800c09a:	463b      	mov	r3, r7
 800c09c:	d0e1      	beq.n	800c062 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800c09e:	4427      	add	r7, r4
 800c0a0:	e7ec      	b.n	800c07c <st_sssa8_ch_conv_dw_Wadapt+0x164>
 800c0a2:	bf00      	nop
 800c0a4:	ffff0000 	.word	0xffff0000

0800c0a8 <st_sssa8_ch_convolve_dw>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	ed2d 8b02 	vpush	{d8}
 800c0b0:	b0eb      	sub	sp, #428	; 0x1ac
 800c0b2:	9211      	str	r2, [sp, #68]	; 0x44
 800c0b4:	9322      	str	r3, [sp, #136]	; 0x88
 800c0b6:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	; 0x1e4
 800c0ba:	f8bd 31e0 	ldrh.w	r3, [sp, #480]	; 0x1e0
 800c0be:	f8bd 41dc 	ldrh.w	r4, [sp, #476]	; 0x1dc
 800c0c2:	fb02 f803 	mul.w	r8, r2, r3
 800c0c6:	f99d 6208 	ldrsb.w	r6, [sp, #520]	; 0x208
 800c0ca:	9238      	str	r2, [sp, #224]	; 0xe0
 800c0cc:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800c0d0:	f8bd 21e8 	ldrh.w	r2, [sp, #488]	; 0x1e8
 800c0d4:	9023      	str	r0, [sp, #140]	; 0x8c
 800c0d6:	9237      	str	r2, [sp, #220]	; 0xdc
 800c0d8:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
 800c0dc:	9886      	ldr	r0, [sp, #536]	; 0x218
 800c0de:	923c      	str	r2, [sp, #240]	; 0xf0
 800c0e0:	fb04 5208 	mla	r2, r4, r8, r5
 800c0e4:	910d      	str	r1, [sp, #52]	; 0x34
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c0ec:	9335      	str	r3, [sp, #212]	; 0xd4
 800c0ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c0f2:	9434      	str	r4, [sp, #208]	; 0xd0
 800c0f4:	920c      	str	r2, [sp, #48]	; 0x30
 800c0f6:	00a4      	lsls	r4, r4, #2
 800c0f8:	f8bd 21f0 	ldrh.w	r2, [sp, #496]	; 0x1f0
 800c0fc:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800c100:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c104:	922a      	str	r2, [sp, #168]	; 0xa8
 800c106:	f8bd 21f4 	ldrh.w	r2, [sp, #500]	; 0x1f4
 800c10a:	930e      	str	r3, [sp, #56]	; 0x38
 800c10c:	923d      	str	r2, [sp, #244]	; 0xf4
 800c10e:	f99d 2204 	ldrsb.w	r2, [sp, #516]	; 0x204
 800c112:	ee08 2a10 	vmov	s16, r2
 800c116:	f8bd 2210 	ldrh.w	r2, [sp, #528]	; 0x210
 800c11a:	922d      	str	r2, [sp, #180]	; 0xb4
 800c11c:	f8bd 2214 	ldrh.w	r2, [sp, #532]	; 0x214
 800c120:	9239      	str	r2, [sp, #228]	; 0xe4
 800c122:	004a      	lsls	r2, r1, #1
 800c124:	9214      	str	r2, [sp, #80]	; 0x50
 800c126:	b1d1      	cbz	r1, 800c15e <st_sssa8_ch_convolve_dw+0xb6>
 800c128:	461a      	mov	r2, r3
 800c12a:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800c12c:	f04f 0e01 	mov.w	lr, #1
 800c130:	1d11      	adds	r1, r2, #4
 800c132:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c134:	eb03 0c02 	add.w	ip, r3, r2
 800c138:	f933 2b02 	ldrsh.w	r2, [r3], #2
 800c13c:	1e50      	subs	r0, r2, #1
 800c13e:	fa0e f702 	lsl.w	r7, lr, r2
 800c142:	fa06 f202 	lsl.w	r2, r6, r2
 800c146:	b280      	uxth	r0, r0
 800c148:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800c14c:	2814      	cmp	r0, #20
 800c14e:	f200 827e 	bhi.w	800c64e <st_sssa8_ch_convolve_dw+0x5a6>
 800c152:	4563      	cmp	r3, ip
 800c154:	f841 2c04 	str.w	r2, [r1, #-4]
 800c158:	f101 0104 	add.w	r1, r1, #4
 800c15c:	d1ec      	bne.n	800c138 <st_sssa8_ch_convolve_dw+0x90>
 800c15e:	ee18 3a10 	vmov	r3, s16
 800c162:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800c164:	425b      	negs	r3, r3
 800c166:	1b16      	subs	r6, r2, r4
 800c168:	b29a      	uxth	r2, r3
 800c16a:	0076      	lsls	r6, r6, #1
 800c16c:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800c170:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c172:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c174:	ea53 0c02 	orrs.w	ip, r3, r2
 800c178:	d10a      	bne.n	800c190 <st_sssa8_ch_convolve_dw+0xe8>
 800c17a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c17c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c17e:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800c180:	4293      	cmp	r3, r2
 800c182:	bf08      	it	eq
 800c184:	2903      	cmpeq	r1, #3
 800c186:	d103      	bne.n	800c190 <st_sssa8_ch_convolve_dw+0xe8>
 800c188:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	f001 804f 	beq.w	800d22e <st_sssa8_ch_convolve_dw+0x1186>
 800c190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c192:	aa4a      	add	r2, sp, #296	; 0x128
 800c194:	a960      	add	r1, sp, #384	; 0x180
 800c196:	a856      	add	r0, sp, #344	; 0x158
 800c198:	934c      	str	r3, [sp, #304]	; 0x130
 800c19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c19c:	934b      	str	r3, [sp, #300]	; 0x12c
 800c19e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c1a0:	9350      	str	r3, [sp, #320]	; 0x140
 800c1a2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c1a4:	934f      	str	r3, [sp, #316]	; 0x13c
 800c1a6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c1a8:	9354      	str	r3, [sp, #336]	; 0x150
 800c1aa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c1ac:	9353      	str	r3, [sp, #332]	; 0x14c
 800c1ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c1b0:	9362      	str	r3, [sp, #392]	; 0x188
 800c1b2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800c1b4:	9363      	str	r3, [sp, #396]	; 0x18c
 800c1b6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c1b8:	9364      	str	r3, [sp, #400]	; 0x190
 800c1ba:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800c1bc:	9365      	str	r3, [sp, #404]	; 0x194
 800c1be:	ab52      	add	r3, sp, #328	; 0x148
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	ab4e      	add	r3, sp, #312	; 0x138
 800c1c4:	f003 f818 	bl	800f1f8 <ai_padding_opt_init>
 800c1c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c1ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c1cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1d0:	079a      	lsls	r2, r3, #30
 800c1d2:	9327      	str	r3, [sp, #156]	; 0x9c
 800c1d4:	f000 8243 	beq.w	800c65e <st_sssa8_ch_convolve_dw+0x5b6>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	933e      	str	r3, [sp, #248]	; 0xf8
 800c1dc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 822f 	beq.w	800c642 <st_sssa8_ch_convolve_dw+0x59a>
 800c1e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1e6:	f3c8 004f 	ubfx	r0, r8, #1, #16
 800c1ea:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c1ec:	186b      	adds	r3, r5, r1
 800c1ee:	9015      	str	r0, [sp, #84]	; 0x54
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800c1f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1f6:	eb01 0309 	add.w	r3, r1, r9
 800c1fa:	08b9      	lsrs	r1, r7, #2
 800c1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c1fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c200:	9136      	str	r1, [sp, #216]	; 0xd8
 800c202:	3901      	subs	r1, #1
 800c204:	fb12 f303 	smulbb	r3, r2, r3
 800c208:	1e42      	subs	r2, r0, #1
 800c20a:	b289      	uxth	r1, r1
 800c20c:	b298      	uxth	r0, r3
 800c20e:	f003 0301 	and.w	r3, r3, #1
 800c212:	b292      	uxth	r2, r2
 800c214:	9316      	str	r3, [sp, #88]	; 0x58
 800c216:	1e43      	subs	r3, r0, #1
 800c218:	9031      	str	r0, [sp, #196]	; 0xc4
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	3301      	adds	r3, #1
 800c21e:	0058      	lsls	r0, r3, #1
 800c220:	1c4b      	adds	r3, r1, #1
 800c222:	9026      	str	r0, [sp, #152]	; 0x98
 800c224:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c226:	4420      	add	r0, r4
 800c228:	192c      	adds	r4, r5, r4
 800c22a:	1986      	adds	r6, r0, r6
 800c22c:	9024      	str	r0, [sp, #144]	; 0x90
 800c22e:	941c      	str	r4, [sp, #112]	; 0x70
 800c230:	4604      	mov	r4, r0
 800c232:	962b      	str	r6, [sp, #172]	; 0xac
 800c234:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800c236:	4270      	negs	r0, r6
 800c238:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c23a:	fa1f fc80 	uxth.w	ip, r0
 800c23e:	08b0      	lsrs	r0, r6, #2
 800c240:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 800c244:	f106 3cff 	add.w	ip, r6, #4294967295
 800c248:	0080      	lsls	r0, r0, #2
 800c24a:	f026 0603 	bic.w	r6, r6, #3
 800c24e:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800c252:	9030      	str	r0, [sp, #192]	; 0xc0
 800c254:	1c50      	adds	r0, r2, #1
 800c256:	9633      	str	r6, [sp, #204]	; 0xcc
 800c258:	0100      	lsls	r0, r0, #4
 800c25a:	9021      	str	r0, [sp, #132]	; 0x84
 800c25c:	fb02 7007 	mla	r0, r2, r7, r7
 800c260:	0112      	lsls	r2, r2, #4
 800c262:	923a      	str	r2, [sp, #232]	; 0xe8
 800c264:	eb05 0c40 	add.w	ip, r5, r0, lsl #1
 800c268:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800c26a:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800c26e:	3220      	adds	r2, #32
 800c270:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
 800c274:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c276:	19ca      	adds	r2, r1, r7
 800c278:	4629      	mov	r1, r5
 800c27a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c27e:	442a      	add	r2, r5
 800c280:	921d      	str	r2, [sp, #116]	; 0x74
 800c282:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 800c286:	1955      	adds	r5, r2, r5
 800c288:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800c28c:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800c290:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c292:	9519      	str	r5, [sp, #100]	; 0x64
 800c294:	2500      	movs	r5, #0
 800c296:	943b      	str	r4, [sp, #236]	; 0xec
 800c298:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800c29a:	fb04 f402 	mul.w	r4, r4, r2
 800c29e:	9443      	str	r4, [sp, #268]	; 0x10c
 800c2a0:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800c2a2:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
 800c2a6:	2a03      	cmp	r2, #3
 800c2a8:	bf08      	it	eq
 800c2aa:	2803      	cmpeq	r0, #3
 800c2ac:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c2ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c2b0:	eba2 0206 	sub.w	r2, r2, r6
 800c2b4:	bf0c      	ite	eq
 800c2b6:	2401      	moveq	r4, #1
 800c2b8:	2400      	movne	r4, #0
 800c2ba:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800c2bc:	9232      	str	r2, [sp, #200]	; 0xc8
 800c2be:	942c      	str	r4, [sp, #176]	; 0xb0
 800c2c0:	f007 0403 	and.w	r4, r7, #3
 800c2c4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800c2c6:	9429      	str	r4, [sp, #164]	; 0xa4
 800c2c8:	0094      	lsls	r4, r2, #2
 800c2ca:	3a01      	subs	r2, #1
 800c2cc:	9241      	str	r2, [sp, #260]	; 0x104
 800c2ce:	009a      	lsls	r2, r3, #2
 800c2d0:	943f      	str	r4, [sp, #252]	; 0xfc
 800c2d2:	462c      	mov	r4, r5
 800c2d4:	9212      	str	r2, [sp, #72]	; 0x48
 800c2d6:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c2d8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800c2dc:	9244      	str	r2, [sp, #272]	; 0x110
 800c2de:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800c2e2:	9245      	str	r2, [sp, #276]	; 0x114
 800c2e4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800c2e8:	9248      	str	r2, [sp, #288]	; 0x120
 800c2ea:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800c2ec:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800c2f0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c2f2:	9247      	str	r2, [sp, #284]	; 0x11c
 800c2f4:	009a      	lsls	r2, r3, #2
 800c2f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2f8:	9246      	str	r2, [sp, #280]	; 0x118
 800c2fa:	18cb      	adds	r3, r1, r3
 800c2fc:	931e      	str	r3, [sp, #120]	; 0x78
 800c2fe:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
 800c302:	9318      	str	r3, [sp, #96]	; 0x60
 800c304:	a856      	add	r0, sp, #344	; 0x158
 800c306:	f002 ffd1 	bl	800f2ac <ai_padding_opt_phase1>
 800c30a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 878a 	beq.w	800d226 <st_sssa8_ch_convolve_dw+0x117e>
 800c312:	b2ab      	uxth	r3, r5
 800c314:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c316:	f8dd b124 	ldr.w	fp, [sp, #292]	; 0x124
 800c31a:	9342      	str	r3, [sp, #264]	; 0x108
 800c31c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c31e:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800c326:	fb02 3304 	mla	r3, r2, r4, r3
 800c32a:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 800c32e:	9310      	str	r3, [sp, #64]	; 0x40
 800c330:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c332:	922e      	str	r2, [sp, #184]	; 0xb8
 800c334:	425b      	negs	r3, r3
 800c336:	b29b      	uxth	r3, r3
 800c338:	9325      	str	r3, [sp, #148]	; 0x94
 800c33a:	2300      	movs	r3, #0
 800c33c:	4619      	mov	r1, r3
 800c33e:	9a56      	ldr	r2, [sp, #344]	; 0x158
 800c340:	2a00      	cmp	r2, #0
 800c342:	f000 82c8 	beq.w	800c8d6 <st_sssa8_ch_convolve_dw+0x82e>
 800c346:	3a01      	subs	r2, #1
 800c348:	9256      	str	r2, [sp, #344]	; 0x158
 800c34a:	2201      	movs	r2, #1
 800c34c:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800c350:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c352:	2a01      	cmp	r2, #1
 800c354:	f000 8583 	beq.w	800ce5e <st_sssa8_ch_convolve_dw+0xdb6>
 800c358:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c35a:	2a04      	cmp	r2, #4
 800c35c:	f000 86ae 	beq.w	800d0bc <st_sssa8_ch_convolve_dw+0x1014>
 800c360:	2a02      	cmp	r2, #2
 800c362:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800c364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c366:	f000 85c6 	beq.w	800cef6 <st_sssa8_ch_convolve_dw+0xe4e>
 800c36a:	4282      	cmp	r2, r0
 800c36c:	f340 8755 	ble.w	800d21a <st_sssa8_ch_convolve_dw+0x1172>
 800c370:	b29b      	uxth	r3, r3
 800c372:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c374:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c376:	9328      	str	r3, [sp, #160]	; 0xa0
 800c378:	fb01 2100 	mla	r1, r1, r0, r2
 800c37c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c37e:	1acd      	subs	r5, r1, r3
 800c380:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c384:	429d      	cmp	r5, r3
 800c386:	9307      	str	r3, [sp, #28]
 800c388:	dd3c      	ble.n	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800c38a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c38c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c390:	46d3      	mov	fp, sl
 800c392:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c396:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800c39a:	9503      	str	r5, [sp, #12]
 800c39c:	9305      	str	r3, [sp, #20]
 800c39e:	9a05      	ldr	r2, [sp, #20]
 800c3a0:	46da      	mov	sl, fp
 800c3a2:	ee18 0a10 	vmov	r0, s16
 800c3a6:	0fd1      	lsrs	r1, r2, #31
 800c3a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	bfd8      	it	le
 800c3ae:	f041 0101 	orrle.w	r1, r1, #1
 800c3b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3b4:	9104      	str	r1, [sp, #16]
 800c3b6:	4693      	mov	fp, r2
 800c3b8:	9907      	ldr	r1, [sp, #28]
 800c3ba:	fb03 f302 	mul.w	r3, r3, r2
 800c3be:	460c      	mov	r4, r1
 800c3c0:	9306      	str	r3, [sp, #24]
 800c3c2:	0fe3      	lsrs	r3, r4, #31
 800c3c4:	458b      	cmp	fp, r1
 800c3c6:	bfd8      	it	le
 800c3c8:	f043 0301 	orrle.w	r3, r3, #1
 800c3cc:	b91b      	cbnz	r3, 800c3d6 <st_sssa8_ch_convolve_dw+0x32e>
 800c3ce:	9b04      	ldr	r3, [sp, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 81c8 	beq.w	800c766 <st_sssa8_ch_convolve_dw+0x6be>
 800c3d6:	4652      	mov	r2, sl
 800c3d8:	4641      	mov	r1, r8
 800c3da:	9002      	str	r0, [sp, #8]
 800c3dc:	f006 fa06 	bl	80127ec <st_int8_fill>
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	3401      	adds	r4, #1
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	44d0      	add	r8, sl
 800c3e8:	b224      	sxth	r4, r4
 800c3ea:	429c      	cmp	r4, r3
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	dbe8      	blt.n	800c3c2 <st_sssa8_ch_convolve_dw+0x31a>
 800c3f0:	9b05      	ldr	r3, [sp, #20]
 800c3f2:	46d3      	mov	fp, sl
 800c3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	b21b      	sxth	r3, r3
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	9305      	str	r3, [sp, #20]
 800c3fe:	dcce      	bgt.n	800c39e <st_sssa8_ch_convolve_dw+0x2f6>
 800c400:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800c404:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 82a2 	bne.w	800c950 <st_sssa8_ch_convolve_dw+0x8a8>
 800c40c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f000 85f8 	beq.w	800d004 <st_sssa8_ch_convolve_dw+0xf5c>
 800c414:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800c416:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800c41a:	3310      	adds	r3, #16
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c420:	9302      	str	r3, [sp, #8]
 800c422:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c424:	9303      	str	r3, [sp, #12]
 800c426:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c428:	330c      	adds	r3, #12
 800c42a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c42e:	f103 020c 	add.w	r2, r3, #12
 800c432:	920a      	str	r2, [sp, #40]	; 0x28
 800c434:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c436:	3208      	adds	r2, #8
 800c438:	9209      	str	r2, [sp, #36]	; 0x24
 800c43a:	f103 0208 	add.w	r2, r3, #8
 800c43e:	3304      	adds	r3, #4
 800c440:	9208      	str	r2, [sp, #32]
 800c442:	9306      	str	r3, [sp, #24]
 800c444:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c446:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c44c:	3204      	adds	r2, #4
 800c44e:	3320      	adds	r3, #32
 800c450:	9207      	str	r2, [sp, #28]
 800c452:	931f      	str	r3, [sp, #124]	; 0x7c
 800c454:	ee18 3a10 	vmov	r3, s16
 800c458:	b21b      	sxth	r3, r3
 800c45a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c45c:	9b05      	ldr	r3, [sp, #20]
 800c45e:	9e04      	ldr	r6, [sp, #16]
 800c460:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 800c464:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c46a:	eb03 020c 	add.w	r2, r3, ip
 800c46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c470:	b3cb      	cbz	r3, 800c4e6 <st_sssa8_ch_convolve_dw+0x43e>
 800c472:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c474:	f106 0310 	add.w	r3, r6, #16
 800c478:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800c47c:	19f7      	adds	r7, r6, r7
 800c47e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800c482:	f852 900a 	ldr.w	r9, [r2, sl]
 800c486:	f8df e910 	ldr.w	lr, [pc, #2320]	; 800cd98 <st_sssa8_ch_convolve_dw+0xcf0>
 800c48a:	f8d2 8000 	ldr.w	r8, [r2]
 800c48e:	4462      	add	r2, ip
 800c490:	ea09 0e0e 	and.w	lr, r9, lr
 800c494:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800c498:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800c49c:	fa1f f888 	uxth.w	r8, r8
 800c4a0:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
 800c4a4:	fa2b f988 	sxtab16	r9, fp, r8
 800c4a8:	fb26 5509 	smlad	r5, r6, r9, r5
 800c4ac:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800c4b0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800c4b4:	fb26 4408 	smlad	r4, r6, r8, r4
 800c4b8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800c4bc:	fa2b f88e 	sxtab16	r8, fp, lr
 800c4c0:	fb26 0008 	smlad	r0, r6, r8, r0
 800c4c4:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800c4c8:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800c4cc:	fb26 110e 	smlad	r1, r6, lr, r1
 800c4d0:	3310      	adds	r3, #16
 800c4d2:	429f      	cmp	r7, r3
 800c4d4:	d1d5      	bne.n	800c482 <st_sssa8_ch_convolve_dw+0x3da>
 800c4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4d8:	9e04      	ldr	r6, [sp, #16]
 800c4da:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800c4de:	441e      	add	r6, r3
 800c4e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c4e2:	eb0c 0203 	add.w	r2, ip, r3
 800c4e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 80bd 	bne.w	800c668 <st_sssa8_ch_convolve_dw+0x5c0>
 800c4ee:	9604      	str	r6, [sp, #16]
 800c4f0:	9e02      	ldr	r6, [sp, #8]
 800c4f2:	f9b6 7000 	ldrsh.w	r7, [r6]
 800c4f6:	2f15      	cmp	r7, #21
 800c4f8:	f340 80da 	ble.w	800c6b0 <st_sssa8_ch_convolve_dw+0x608>
 800c4fc:	1eba      	subs	r2, r7, #2
 800c4fe:	2301      	movs	r3, #1
 800c500:	3f01      	subs	r7, #1
 800c502:	3602      	adds	r6, #2
 800c504:	fa03 f202 	lsl.w	r2, r3, r2
 800c508:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c50a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c50e:	fb55 2203 	smmla	r2, r5, r3, r2
 800c512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c514:	fa42 f707 	asr.w	r7, r2, r7
 800c518:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c51c:	443a      	add	r2, r7
 800c51e:	f302 0207 	ssat	r2, #8, r2
 800c522:	9d03      	ldr	r5, [sp, #12]
 800c524:	f805 2b01 	strb.w	r2, [r5], #1
 800c528:	f9b6 7000 	ldrsh.w	r7, [r6]
 800c52c:	2f15      	cmp	r7, #21
 800c52e:	f340 80d8 	ble.w	800c6e2 <st_sssa8_ch_convolve_dw+0x63a>
 800c532:	1eba      	subs	r2, r7, #2
 800c534:	2301      	movs	r3, #1
 800c536:	3f01      	subs	r7, #1
 800c538:	fa03 f202 	lsl.w	r2, r3, r2
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	fb54 2203 	smmla	r2, r4, r3, r2
 800c544:	9b06      	ldr	r3, [sp, #24]
 800c546:	fa42 f707 	asr.w	r7, r2, r7
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	443a      	add	r2, r7
 800c550:	1d1e      	adds	r6, r3, #4
 800c552:	f302 0207 	ssat	r2, #8, r2
 800c556:	9b03      	ldr	r3, [sp, #12]
 800c558:	702a      	strb	r2, [r5, #0]
 800c55a:	1c9c      	adds	r4, r3, #2
 800c55c:	f9b6 6000 	ldrsh.w	r6, [r6]
 800c560:	2e15      	cmp	r6, #21
 800c562:	f340 80d7 	ble.w	800c714 <st_sssa8_ch_convolve_dw+0x66c>
 800c566:	1eb2      	subs	r2, r6, #2
 800c568:	2301      	movs	r3, #1
 800c56a:	3e01      	subs	r6, #1
 800c56c:	fa03 f202 	lsl.w	r2, r3, r2
 800c570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	fb50 2203 	smmla	r2, r0, r3, r2
 800c578:	9b08      	ldr	r3, [sp, #32]
 800c57a:	fa42 f606 	asr.w	r6, r2, r6
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	4432      	add	r2, r6
 800c584:	1d9d      	adds	r5, r3, #6
 800c586:	f302 0207 	ssat	r2, #8, r2
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	7022      	strb	r2, [r4, #0]
 800c58e:	1cd8      	adds	r0, r3, #3
 800c590:	f9b5 4000 	ldrsh.w	r4, [r5]
 800c594:	2c15      	cmp	r4, #21
 800c596:	f340 80d6 	ble.w	800c746 <st_sssa8_ch_convolve_dw+0x69e>
 800c59a:	1ea2      	subs	r2, r4, #2
 800c59c:	2301      	movs	r3, #1
 800c59e:	3c01      	subs	r4, #1
 800c5a0:	fa03 f202 	lsl.w	r2, r3, r2
 800c5a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	fb51 2303 	smmla	r3, r1, r3, r2
 800c5ac:	fa43 f404 	asr.w	r4, r3, r4
 800c5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4414      	add	r4, r2
 800c5b6:	f304 0407 	ssat	r4, #8, r4
 800c5ba:	7004      	strb	r4, [r0, #0]
 800c5bc:	9b05      	ldr	r3, [sp, #20]
 800c5be:	f10c 0c04 	add.w	ip, ip, #4
 800c5c2:	3310      	adds	r3, #16
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	9b02      	ldr	r3, [sp, #8]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	9302      	str	r3, [sp, #8]
 800c5cc:	9b03      	ldr	r3, [sp, #12]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	9303      	str	r3, [sp, #12]
 800c5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d4:	3310      	adds	r3, #16
 800c5d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5da:	3310      	adds	r3, #16
 800c5dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	3310      	adds	r3, #16
 800c5e8:	9308      	str	r3, [sp, #32]
 800c5ea:	9b07      	ldr	r3, [sp, #28]
 800c5ec:	3310      	adds	r3, #16
 800c5ee:	9307      	str	r3, [sp, #28]
 800c5f0:	9b06      	ldr	r3, [sp, #24]
 800c5f2:	3310      	adds	r3, #16
 800c5f4:	9306      	str	r3, [sp, #24]
 800c5f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5f8:	4563      	cmp	r3, ip
 800c5fa:	f47f af2f 	bne.w	800c45c <st_sssa8_ch_convolve_dw+0x3b4>
 800c5fe:	461a      	mov	r2, r3
 800c600:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c602:	4413      	add	r3, r2
 800c604:	9383      	str	r3, [sp, #524]	; 0x20c
 800c606:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f040 83d3 	bne.w	800cdb4 <st_sssa8_ch_convolve_dw+0xd0c>
 800c60e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c610:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c614:	440a      	add	r2, r1
 800c616:	3301      	adds	r3, #1
 800c618:	b292      	uxth	r2, r2
 800c61a:	b21b      	sxth	r3, r3
 800c61c:	9225      	str	r2, [sp, #148]	; 0x94
 800c61e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c620:	4619      	mov	r1, r3
 800c622:	429a      	cmp	r2, r3
 800c624:	f73f ae8b 	bgt.w	800c33e <st_sssa8_ch_convolve_dw+0x296>
 800c628:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800c62a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800c62c:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800c62e:	4413      	add	r3, r2
 800c630:	3501      	adds	r5, #1
 800c632:	b29b      	uxth	r3, r3
 800c634:	b22d      	sxth	r5, r5
 800c636:	9340      	str	r3, [sp, #256]	; 0x100
 800c638:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800c63a:	462c      	mov	r4, r5
 800c63c:	42ab      	cmp	r3, r5
 800c63e:	f73f ae61 	bgt.w	800c304 <st_sssa8_ch_convolve_dw+0x25c>
 800c642:	2000      	movs	r0, #0
 800c644:	b06b      	add	sp, #428	; 0x1ac
 800c646:	ecbd 8b02 	vpop	{d8}
 800c64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64e:	4563      	cmp	r3, ip
 800c650:	f841 6c04 	str.w	r6, [r1, #-4]
 800c654:	f101 0104 	add.w	r1, r1, #4
 800c658:	f47f ad6e 	bne.w	800c138 <st_sssa8_ch_convolve_dw+0x90>
 800c65c:	e57f      	b.n	800c15e <st_sssa8_ch_convolve_dw+0xb6>
 800c65e:	109b      	asrs	r3, r3, #2
 800c660:	933e      	str	r3, [sp, #248]	; 0xf8
 800c662:	2304      	movs	r3, #4
 800c664:	9327      	str	r3, [sp, #156]	; 0x9c
 800c666:	e5b9      	b.n	800c1dc <st_sssa8_ch_convolve_dw+0x134>
 800c668:	6813      	ldr	r3, [r2, #0]
 800c66a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c66c:	b25a      	sxtb	r2, r3
 800c66e:	f8b6 9000 	ldrh.w	r9, [r6]
 800c672:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800c676:	1bd2      	subs	r2, r2, r7
 800c678:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800c67c:	fb19 5502 	smlabb	r5, r9, r2, r5
 800c680:	f343 2207 	sbfx	r2, r3, #8, #8
 800c684:	1bd2      	subs	r2, r2, r7
 800c686:	fb1e 4402 	smlabb	r4, lr, r2, r4
 800c68a:	f343 4207 	sbfx	r2, r3, #16, #8
 800c68e:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800c692:	1bd2      	subs	r2, r2, r7
 800c694:	fb18 0002 	smlabb	r0, r8, r2, r0
 800c698:	88f2      	ldrh	r2, [r6, #6]
 800c69a:	fb12 1103 	smlabb	r1, r2, r3, r1
 800c69e:	f106 0308 	add.w	r3, r6, #8
 800c6a2:	9e02      	ldr	r6, [sp, #8]
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	f9b6 7000 	ldrsh.w	r7, [r6]
 800c6aa:	2f15      	cmp	r7, #21
 800c6ac:	f73f af26 	bgt.w	800c4fc <st_sssa8_ch_convolve_dw+0x454>
 800c6b0:	2f00      	cmp	r7, #0
 800c6b2:	f340 80bf 	ble.w	800c834 <st_sssa8_ch_convolve_dw+0x78c>
 800c6b6:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c6b8:	006d      	lsls	r5, r5, #1
 800c6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6bc:	3602      	adds	r6, #2
 800c6be:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c6c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c6c6:	fb55 2503 	smmla	r5, r5, r3, r2
 800c6ca:	fa45 f307 	asr.w	r3, r5, r7
 800c6ce:	f303 0307 	ssat	r3, #8, r3
 800c6d2:	9d03      	ldr	r5, [sp, #12]
 800c6d4:	f805 3b01 	strb.w	r3, [r5], #1
 800c6d8:	f9b6 7000 	ldrsh.w	r7, [r6]
 800c6dc:	2f15      	cmp	r7, #21
 800c6de:	f73f af28 	bgt.w	800c532 <st_sssa8_ch_convolve_dw+0x48a>
 800c6e2:	2f00      	cmp	r7, #0
 800c6e4:	f340 80e2 	ble.w	800c8ac <st_sssa8_ch_convolve_dw+0x804>
 800c6e8:	9b07      	ldr	r3, [sp, #28]
 800c6ea:	0064      	lsls	r4, r4, #1
 800c6ec:	9a06      	ldr	r2, [sp, #24]
 800c6ee:	9e02      	ldr	r6, [sp, #8]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6812      	ldr	r2, [r2, #0]
 800c6f4:	3604      	adds	r6, #4
 800c6f6:	fb54 2403 	smmla	r4, r4, r3, r2
 800c6fa:	fa44 f307 	asr.w	r3, r4, r7
 800c6fe:	f303 0307 	ssat	r3, #8, r3
 800c702:	702b      	strb	r3, [r5, #0]
 800c704:	f9b6 6000 	ldrsh.w	r6, [r6]
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	2e15      	cmp	r6, #21
 800c70c:	f103 0402 	add.w	r4, r3, #2
 800c710:	f73f af29 	bgt.w	800c566 <st_sssa8_ch_convolve_dw+0x4be>
 800c714:	2e00      	cmp	r6, #0
 800c716:	f340 80a3 	ble.w	800c860 <st_sssa8_ch_convolve_dw+0x7b8>
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	0040      	lsls	r0, r0, #1
 800c71e:	9a08      	ldr	r2, [sp, #32]
 800c720:	9d02      	ldr	r5, [sp, #8]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	3506      	adds	r5, #6
 800c728:	fb50 2003 	smmla	r0, r0, r3, r2
 800c72c:	fa40 f306 	asr.w	r3, r0, r6
 800c730:	f303 0307 	ssat	r3, #8, r3
 800c734:	7023      	strb	r3, [r4, #0]
 800c736:	f9b5 4000 	ldrsh.w	r4, [r5]
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	2c15      	cmp	r4, #21
 800c73e:	f103 0003 	add.w	r0, r3, #3
 800c742:	f73f af2a 	bgt.w	800c59a <st_sssa8_ch_convolve_dw+0x4f2>
 800c746:	2c00      	cmp	r4, #0
 800c748:	f340 809f 	ble.w	800c88a <st_sssa8_ch_convolve_dw+0x7e2>
 800c74c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c74e:	0049      	lsls	r1, r1, #1
 800c750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6812      	ldr	r2, [r2, #0]
 800c756:	fb51 2103 	smmla	r1, r1, r3, r2
 800c75a:	fa41 f304 	asr.w	r3, r1, r4
 800c75e:	f303 0307 	ssat	r3, #8, r3
 800c762:	7003      	strb	r3, [r0, #0]
 800c764:	e72a      	b.n	800c5bc <st_sssa8_ch_convolve_dw+0x514>
 800c766:	9b06      	ldr	r3, [sp, #24]
 800c768:	4419      	add	r1, r3
 800c76a:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800c76e:	fb03 2501 	mla	r5, r3, r1, r2
 800c772:	2b00      	cmp	r3, #0
 800c774:	f43f ae35 	beq.w	800c3e2 <st_sssa8_ch_convolve_dw+0x33a>
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	f43f ae31 	beq.w	800c3e2 <st_sssa8_ch_convolve_dw+0x33a>
 800c780:	46c4      	mov	ip, r8
 800c782:	4642      	mov	r2, r8
 800c784:	ee07 0a90 	vmov	s15, r0
 800c788:	f8cd 8020 	str.w	r8, [sp, #32]
 800c78c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c790:	eb05 0e03 	add.w	lr, r5, r3
 800c794:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 800c798:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800c79a:	9402      	str	r4, [sp, #8]
 800c79c:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 800c7a0:	3501      	adds	r5, #1
 800c7a2:	4614      	mov	r4, r2
 800c7a4:	42aa      	cmp	r2, r5
 800c7a6:	f105 31ff 	add.w	r1, r5, #4294967295
 800c7aa:	444a      	add	r2, r9
 800c7ac:	bf34      	ite	cc
 800c7ae:	2300      	movcc	r3, #0
 800c7b0:	2301      	movcs	r3, #1
 800c7b2:	428a      	cmp	r2, r1
 800c7b4:	bf98      	it	ls
 800c7b6:	f043 0301 	orrls.w	r3, r3, #1
 800c7ba:	b373      	cbz	r3, 800c81a <st_sssa8_ch_convolve_dw+0x772>
 800c7bc:	f1ba 0f07 	cmp.w	sl, #7
 800c7c0:	d92b      	bls.n	800c81a <st_sssa8_ch_convolve_dw+0x772>
 800c7c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	eb00 060c 	add.w	r6, r0, ip
 800c7cc:	f363 0107 	bfi	r1, r3, #0, #8
 800c7d0:	f363 210f 	bfi	r1, r3, #8, #8
 800c7d4:	f363 4117 	bfi	r1, r3, #16, #8
 800c7d8:	f363 611f 	bfi	r1, r3, #24, #8
 800c7dc:	4663      	mov	r3, ip
 800c7de:	f843 1b04 	str.w	r1, [r3], #4
 800c7e2:	42b3      	cmp	r3, r6
 800c7e4:	d1fb      	bne.n	800c7de <st_sssa8_ch_convolve_dw+0x736>
 800c7e6:	45b9      	cmp	r9, r7
 800c7e8:	eb04 0307 	add.w	r3, r4, r7
 800c7ec:	d00c      	beq.n	800c808 <st_sssa8_ch_convolve_dw+0x760>
 800c7ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c7f2:	55e1      	strb	r1, [r4, r7]
 800c7f4:	f1b8 0f00 	cmp.w	r8, #0
 800c7f8:	d006      	beq.n	800c808 <st_sssa8_ch_convolve_dw+0x760>
 800c7fa:	f1b8 0f01 	cmp.w	r8, #1
 800c7fe:	7059      	strb	r1, [r3, #1]
 800c800:	d002      	beq.n	800c808 <st_sssa8_ch_convolve_dw+0x760>
 800c802:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c806:	7099      	strb	r1, [r3, #2]
 800c808:	45ae      	cmp	lr, r5
 800c80a:	44cc      	add	ip, r9
 800c80c:	d1c8      	bne.n	800c7a0 <st_sssa8_ch_convolve_dw+0x6f8>
 800c80e:	9c02      	ldr	r4, [sp, #8]
 800c810:	ee17 0a90 	vmov	r0, s15
 800c814:	e9dd 8a08 	ldrd	r8, sl, [sp, #32]
 800c818:	e5e3      	b.n	800c3e2 <st_sssa8_ch_convolve_dw+0x33a>
 800c81a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c81e:	f804 3b01 	strb.w	r3, [r4], #1
 800c822:	4294      	cmp	r4, r2
 800c824:	d0f0      	beq.n	800c808 <st_sssa8_ch_convolve_dw+0x760>
 800c826:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c82a:	f804 3b01 	strb.w	r3, [r4], #1
 800c82e:	4294      	cmp	r4, r2
 800c830:	d1f3      	bne.n	800c81a <st_sssa8_ch_convolve_dw+0x772>
 800c832:	e7e9      	b.n	800c808 <st_sssa8_ch_convolve_dw+0x760>
 800c834:	f1c7 0201 	rsb	r2, r7, #1
 800c838:	3602      	adds	r6, #2
 800c83a:	fa05 f202 	lsl.w	r2, r5, r2
 800c83e:	f302 021f 	ssat	r2, #32, r2
 800c842:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c844:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c848:	fb52 f213 	smmulr	r2, r2, r3
 800c84c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c84e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c852:	4413      	add	r3, r2
 800c854:	f303 0307 	ssat	r3, #8, r3
 800c858:	9d03      	ldr	r5, [sp, #12]
 800c85a:	f805 3b01 	strb.w	r3, [r5], #1
 800c85e:	e663      	b.n	800c528 <st_sssa8_ch_convolve_dw+0x480>
 800c860:	f1c6 0201 	rsb	r2, r6, #1
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	fa00 f202 	lsl.w	r2, r0, r2
 800c86a:	1d9d      	adds	r5, r3, #6
 800c86c:	f302 021f 	ssat	r2, #32, r2
 800c870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	fb52 f213 	smmulr	r2, r2, r3
 800c878:	9b08      	ldr	r3, [sp, #32]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4413      	add	r3, r2
 800c87e:	f303 0307 	ssat	r3, #8, r3
 800c882:	7023      	strb	r3, [r4, #0]
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	1cd8      	adds	r0, r3, #3
 800c888:	e682      	b.n	800c590 <st_sssa8_ch_convolve_dw+0x4e8>
 800c88a:	f1c4 0401 	rsb	r4, r4, #1
 800c88e:	fa01 f204 	lsl.w	r2, r1, r4
 800c892:	f302 021f 	ssat	r2, #32, r2
 800c896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	fb52 f213 	smmulr	r2, r2, r3
 800c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f303 0307 	ssat	r3, #8, r3
 800c8a8:	7003      	strb	r3, [r0, #0]
 800c8aa:	e687      	b.n	800c5bc <st_sssa8_ch_convolve_dw+0x514>
 800c8ac:	f1c7 0201 	rsb	r2, r7, #1
 800c8b0:	9b02      	ldr	r3, [sp, #8]
 800c8b2:	fa04 f202 	lsl.w	r2, r4, r2
 800c8b6:	1d1e      	adds	r6, r3, #4
 800c8b8:	f302 021f 	ssat	r2, #32, r2
 800c8bc:	9b07      	ldr	r3, [sp, #28]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	fb52 f213 	smmulr	r2, r2, r3
 800c8c4:	9b06      	ldr	r3, [sp, #24]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f303 0307 	ssat	r3, #8, r3
 800c8ce:	702b      	strb	r3, [r5, #0]
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	1c9c      	adds	r4, r3, #2
 800c8d4:	e642      	b.n	800c55c <st_sssa8_ch_convolve_dw+0x4b4>
 800c8d6:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	f000 82b6 	beq.w	800ce4a <st_sssa8_ch_convolve_dw+0xda2>
 800c8de:	3a01      	subs	r2, #1
 800c8e0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800c8e2:	9257      	str	r2, [sp, #348]	; 0x15c
 800c8e4:	2801      	cmp	r0, #1
 800c8e6:	f8bd 217c 	ldrh.w	r2, [sp, #380]	; 0x17c
 800c8ea:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800c8ee:	f47f ad33 	bne.w	800c358 <st_sssa8_ch_convolve_dw+0x2b0>
 800c8f2:	2a01      	cmp	r2, #1
 800c8f4:	f000 82b3 	beq.w	800ce5e <st_sssa8_ch_convolve_dw+0xdb6>
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c8fc:	f9bd 5094 	ldrsh.w	r5, [sp, #148]	; 0x94
 800c900:	9328      	str	r3, [sp, #160]	; 0xa0
 800c902:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c904:	429f      	cmp	r7, r3
 800c906:	f77f ad7d 	ble.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800c90a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c90c:	461c      	mov	r4, r3
 800c90e:	f8cd b008 	str.w	fp, [sp, #8]
 800c912:	4618      	mov	r0, r3
 800c914:	46b3      	mov	fp, r6
 800c916:	f8cd a00c 	str.w	sl, [sp, #12]
 800c91a:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800c91e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800c922:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800c924:	f8dd a10c 	ldr.w	sl, [sp, #268]	; 0x10c
 800c928:	3401      	adds	r4, #1
 800c92a:	fb00 5009 	mla	r0, r0, r9, r5
 800c92e:	4659      	mov	r1, fp
 800c930:	4652      	mov	r2, sl
 800c932:	b224      	sxth	r4, r4
 800c934:	fb06 8000 	mla	r0, r6, r0, r8
 800c938:	f005 ffc0 	bl	80128bc <st_int8_copy>
 800c93c:	44d3      	add	fp, sl
 800c93e:	42a7      	cmp	r7, r4
 800c940:	4620      	mov	r0, r4
 800c942:	dcf1      	bgt.n	800c928 <st_sssa8_ch_convolve_dw+0x880>
 800c944:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c946:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f43f ad5e 	beq.w	800c40c <st_sssa8_ch_convolve_dw+0x364>
 800c950:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8356 	beq.w	800d004 <st_sssa8_ch_convolve_dw+0xf5c>
 800c958:	ee18 3a10 	vmov	r3, s16
 800c95c:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800c95e:	9d86      	ldr	r5, [sp, #536]	; 0x218
 800c960:	f04f 0900 	mov.w	r9, #0
 800c964:	b21b      	sxth	r3, r3
 800c966:	9203      	str	r2, [sp, #12]
 800c968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c96a:	9308      	str	r3, [sp, #32]
 800c96c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800c96e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c970:	f103 0610 	add.w	r6, r3, #16
 800c974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c976:	9202      	str	r2, [sp, #8]
 800c978:	3348      	adds	r3, #72	; 0x48
 800c97a:	9504      	str	r5, [sp, #16]
 800c97c:	f8cd a01c 	str.w	sl, [sp, #28]
 800c980:	e081      	b.n	800ca86 <st_sssa8_ch_convolve_dw+0x9de>
 800c982:	f1a2 0a02 	sub.w	sl, r2, #2
 800c986:	2001      	movs	r0, #1
 800c988:	9f04      	ldr	r7, [sp, #16]
 800c98a:	3a01      	subs	r2, #1
 800c98c:	fa00 fa0a 	lsl.w	sl, r0, sl
 800c990:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c994:	f857 0b04 	ldr.w	r0, [r7], #4
 800c998:	f101 0802 	add.w	r8, r1, #2
 800c99c:	fb5c ac00 	smmla	ip, ip, r0, sl
 800c9a0:	fa4c f202 	asr.w	r2, ip, r2
 800c9a4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9a8:	4402      	add	r2, r0
 800c9aa:	f302 0207 	ssat	r2, #8, r2
 800c9ae:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c9b2:	f80c 2b01 	strb.w	r2, [ip], #1
 800c9b6:	f9b8 2000 	ldrsh.w	r2, [r8]
 800c9ba:	2a15      	cmp	r2, #21
 800c9bc:	f340 814d 	ble.w	800cc5a <st_sssa8_ch_convolve_dw+0xbb2>
 800c9c0:	6838      	ldr	r0, [r7, #0]
 800c9c2:	2501      	movs	r5, #1
 800c9c4:	1e97      	subs	r7, r2, #2
 800c9c6:	3a01      	subs	r2, #1
 800c9c8:	f8de e000 	ldr.w	lr, [lr]
 800c9cc:	fa05 f707 	lsl.w	r7, r5, r7
 800c9d0:	9d04      	ldr	r5, [sp, #16]
 800c9d2:	fb54 7400 	smmla	r4, r4, r0, r7
 800c9d6:	4114      	asrs	r4, r2
 800c9d8:	9a02      	ldr	r2, [sp, #8]
 800c9da:	f105 0808 	add.w	r8, r5, #8
 800c9de:	1d08      	adds	r0, r1, #4
 800c9e0:	44a6      	add	lr, r4
 800c9e2:	f102 0408 	add.w	r4, r2, #8
 800c9e6:	f30e 0e07 	ssat	lr, #8, lr
 800c9ea:	9a03      	ldr	r2, [sp, #12]
 800c9ec:	f88c e000 	strb.w	lr, [ip]
 800c9f0:	f102 0c02 	add.w	ip, r2, #2
 800c9f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c9f8:	2a15      	cmp	r2, #21
 800c9fa:	f340 814c 	ble.w	800cc96 <st_sssa8_ch_convolve_dw+0xbee>
 800c9fe:	f8d4 e000 	ldr.w	lr, [r4]
 800ca02:	2501      	movs	r5, #1
 800ca04:	1e94      	subs	r4, r2, #2
 800ca06:	3a01      	subs	r2, #1
 800ca08:	f8d8 0000 	ldr.w	r0, [r8]
 800ca0c:	fa05 f404 	lsl.w	r4, r5, r4
 800ca10:	9d04      	ldr	r5, [sp, #16]
 800ca12:	f105 070c 	add.w	r7, r5, #12
 800ca16:	9d05      	ldr	r5, [sp, #20]
 800ca18:	fb55 4000 	smmla	r0, r5, r0, r4
 800ca1c:	fa40 f202 	asr.w	r2, r0, r2
 800ca20:	1d88      	adds	r0, r1, #6
 800ca22:	4496      	add	lr, r2
 800ca24:	9a02      	ldr	r2, [sp, #8]
 800ca26:	f102 040c 	add.w	r4, r2, #12
 800ca2a:	f30e 0e07 	ssat	lr, #8, lr
 800ca2e:	9a03      	ldr	r2, [sp, #12]
 800ca30:	f88c e000 	strb.w	lr, [ip]
 800ca34:	f102 0c03 	add.w	ip, r2, #3
 800ca38:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ca3c:	2a15      	cmp	r2, #21
 800ca3e:	f340 8148 	ble.w	800ccd2 <st_sssa8_ch_convolve_dw+0xc2a>
 800ca42:	6838      	ldr	r0, [r7, #0]
 800ca44:	2501      	movs	r5, #1
 800ca46:	6827      	ldr	r7, [r4, #0]
 800ca48:	1e94      	subs	r4, r2, #2
 800ca4a:	3a01      	subs	r2, #1
 800ca4c:	fa05 f404 	lsl.w	r4, r5, r4
 800ca50:	9d06      	ldr	r5, [sp, #24]
 800ca52:	fb55 4000 	smmla	r0, r5, r0, r4
 800ca56:	4110      	asrs	r0, r2
 800ca58:	4438      	add	r0, r7
 800ca5a:	f300 0007 	ssat	r0, #8, r0
 800ca5e:	f88c 0000 	strb.w	r0, [ip]
 800ca62:	9a04      	ldr	r2, [sp, #16]
 800ca64:	3610      	adds	r6, #16
 800ca66:	3348      	adds	r3, #72	; 0x48
 800ca68:	f109 0904 	add.w	r9, r9, #4
 800ca6c:	3210      	adds	r2, #16
 800ca6e:	3108      	adds	r1, #8
 800ca70:	9204      	str	r2, [sp, #16]
 800ca72:	9a03      	ldr	r2, [sp, #12]
 800ca74:	3204      	adds	r2, #4
 800ca76:	9203      	str	r2, [sp, #12]
 800ca78:	9a02      	ldr	r2, [sp, #8]
 800ca7a:	3210      	adds	r2, #16
 800ca7c:	9202      	str	r2, [sp, #8]
 800ca7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca80:	42b2      	cmp	r2, r6
 800ca82:	f000 818b 	beq.w	800cd9c <st_sssa8_ch_convolve_dw+0xcf4>
 800ca86:	9a07      	ldr	r2, [sp, #28]
 800ca88:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca8a:	444a      	add	r2, r9
 800ca8c:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800ca90:	f850 7009 	ldr.w	r7, [r0, r9]
 800ca94:	f850 c002 	ldr.w	ip, [r0, r2]
 800ca98:	4abf      	ldr	r2, [pc, #764]	; (800cd98 <st_sssa8_ch_convolve_dw+0xcf0>)
 800ca9a:	fa1f fe87 	uxth.w	lr, r7
 800ca9e:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800caa2:	ea0c 0202 	and.w	r2, ip, r2
 800caa6:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800caaa:	fa2b fc8e 	sxtab16	ip, fp, lr
 800caae:	ea42 4217 	orr.w	r2, r2, r7, lsr #16
 800cab2:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800cab6:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800caba:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800cabe:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 800cac2:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800cac6:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800caca:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800cace:	fa2b f782 	sxtab16	r7, fp, r2
 800cad2:	fb20 4007 	smlad	r0, r0, r7, r4
 800cad6:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800cada:	f853 7c3c 	ldr.w	r7, [r3, #-60]
 800cade:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800cae2:	fb27 4702 	smlad	r7, r7, r2, r4
 800cae6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800cae8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800caea:	f854 4009 	ldr.w	r4, [r4, r9]
 800caee:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800cd98 <st_sssa8_ch_convolve_dw+0xcf0>
 800caf2:	f852 2009 	ldr.w	r2, [r2, r9]
 800caf6:	ea04 0808 	and.w	r8, r4, r8
 800cafa:	f853 5c38 	ldr.w	r5, [r3, #-56]
 800cafe:	ea48 4812 	orr.w	r8, r8, r2, lsr #16
 800cb02:	b292      	uxth	r2, r2
 800cb04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb08:	fa2b f482 	sxtab16	r4, fp, r2
 800cb0c:	fb25 cc04 	smlad	ip, r5, r4, ip
 800cb10:	fa2b f492 	sxtab16	r4, fp, r2, ror #8
 800cb14:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800cb18:	fb22 e404 	smlad	r4, r2, r4, lr
 800cb1c:	f853 5c30 	ldr.w	r5, [r3, #-48]
 800cb20:	fa2b f288 	sxtab16	r2, fp, r8
 800cb24:	fb25 0002 	smlad	r0, r5, r2, r0
 800cb28:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800cb2c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800cb30:	fb22 7708 	smlad	r7, r2, r8, r7
 800cb34:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cb36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cb38:	f855 e009 	ldr.w	lr, [r5, r9]
 800cb3c:	f8df a258 	ldr.w	sl, [pc, #600]	; 800cd98 <st_sssa8_ch_convolve_dw+0xcf0>
 800cb40:	f852 2009 	ldr.w	r2, [r2, r9]
 800cb44:	ea0e 0a0a 	and.w	sl, lr, sl
 800cb48:	f853 5c28 	ldr.w	r5, [r3, #-40]
 800cb4c:	ea4a 4a12 	orr.w	sl, sl, r2, lsr #16
 800cb50:	b292      	uxth	r2, r2
 800cb52:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800cb56:	fa2b fe82 	sxtab16	lr, fp, r2
 800cb5a:	fb25 cc0e 	smlad	ip, r5, lr, ip
 800cb5e:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800cb62:	f853 5c24 	ldr.w	r5, [r3, #-36]
 800cb66:	fb25 4402 	smlad	r4, r5, r2, r4
 800cb6a:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800cb6e:	fa2b f28a 	sxtab16	r2, fp, sl
 800cb72:	fb25 0002 	smlad	r0, r5, r2, r0
 800cb76:	fa2b fa9a 	sxtab16	sl, fp, sl, ror #8
 800cb7a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800cb7e:	fb22 770a 	smlad	r7, r2, sl, r7
 800cb82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cb84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cb86:	f855 8009 	ldr.w	r8, [r5, r9]
 800cb8a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 800cd98 <st_sssa8_ch_convolve_dw+0xcf0>
 800cb8e:	f852 2009 	ldr.w	r2, [r2, r9]
 800cb92:	ea08 0e0e 	and.w	lr, r8, lr
 800cb96:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800cb9a:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800cb9e:	b292      	uxth	r2, r2
 800cba0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800cba4:	fa2b f882 	sxtab16	r8, fp, r2
 800cba8:	fb25 cc08 	smlad	ip, r5, r8, ip
 800cbac:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800cbb0:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800cbb4:	fb25 4402 	smlad	r4, r5, r2, r4
 800cbb8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800cbbc:	fa2b f28e 	sxtab16	r2, fp, lr
 800cbc0:	fb25 0002 	smlad	r0, r5, r2, r0
 800cbc4:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800cbc8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800cbcc:	fb22 720e 	smlad	r2, r2, lr, r7
 800cbd0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cbd2:	f833 8c08 	ldrh.w	r8, [r3, #-8]
 800cbd6:	f855 7009 	ldr.w	r7, [r5, r9]
 800cbda:	9d08      	ldr	r5, [sp, #32]
 800cbdc:	fa4f fe87 	sxtb.w	lr, r7
 800cbe0:	f833 ac06 	ldrh.w	sl, [r3, #-6]
 800cbe4:	ebae 0e05 	sub.w	lr, lr, r5
 800cbe8:	fb18 cc0e 	smlabb	ip, r8, lr, ip
 800cbec:	f347 2e07 	sbfx	lr, r7, #8, #8
 800cbf0:	ebae 0e05 	sub.w	lr, lr, r5
 800cbf4:	fb1a 440e 	smlabb	r4, sl, lr, r4
 800cbf8:	f347 4e07 	sbfx	lr, r7, #16, #8
 800cbfc:	ebc5 6727 	rsb	r7, r5, r7, asr #24
 800cc00:	ebae 0e05 	sub.w	lr, lr, r5
 800cc04:	f833 5c04 	ldrh.w	r5, [r3, #-4]
 800cc08:	fb15 000e 	smlabb	r0, r5, lr, r0
 800cc0c:	9005      	str	r0, [sp, #20]
 800cc0e:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800cc12:	fb10 2207 	smlabb	r2, r0, r7, r2
 800cc16:	9206      	str	r2, [sp, #24]
 800cc18:	f9b1 2000 	ldrsh.w	r2, [r1]
 800cc1c:	2a15      	cmp	r2, #21
 800cc1e:	f73f aeb0 	bgt.w	800c982 <st_sssa8_ch_convolve_dw+0x8da>
 800cc22:	2a00      	cmp	r2, #0
 800cc24:	dd64      	ble.n	800ccf0 <st_sssa8_ch_convolve_dw+0xc48>
 800cc26:	9f04      	ldr	r7, [sp, #16]
 800cc28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cc2c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cc30:	f101 0802 	add.w	r8, r1, #2
 800cc34:	f857 0b04 	ldr.w	r0, [r7], #4
 800cc38:	f85e ab04 	ldr.w	sl, [lr], #4
 800cc3c:	fb5c ac00 	smmla	ip, ip, r0, sl
 800cc40:	fa4c f202 	asr.w	r2, ip, r2
 800cc44:	f302 0207 	ssat	r2, #8, r2
 800cc48:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cc4c:	f80c 2b01 	strb.w	r2, [ip], #1
 800cc50:	f9b8 2000 	ldrsh.w	r2, [r8]
 800cc54:	2a15      	cmp	r2, #21
 800cc56:	f73f aeb3 	bgt.w	800c9c0 <st_sssa8_ch_convolve_dw+0x918>
 800cc5a:	2a00      	cmp	r2, #0
 800cc5c:	f340 8083 	ble.w	800cd66 <st_sssa8_ch_convolve_dw+0xcbe>
 800cc60:	6838      	ldr	r0, [r7, #0]
 800cc62:	0064      	lsls	r4, r4, #1
 800cc64:	f8de 7000 	ldr.w	r7, [lr]
 800cc68:	9d04      	ldr	r5, [sp, #16]
 800cc6a:	fb54 7400 	smmla	r4, r4, r0, r7
 800cc6e:	9802      	ldr	r0, [sp, #8]
 800cc70:	fa44 f202 	asr.w	r2, r4, r2
 800cc74:	f105 0808 	add.w	r8, r5, #8
 800cc78:	f100 0408 	add.w	r4, r0, #8
 800cc7c:	1d08      	adds	r0, r1, #4
 800cc7e:	f302 0207 	ssat	r2, #8, r2
 800cc82:	f88c 2000 	strb.w	r2, [ip]
 800cc86:	9a03      	ldr	r2, [sp, #12]
 800cc88:	f102 0c02 	add.w	ip, r2, #2
 800cc8c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cc90:	2a15      	cmp	r2, #21
 800cc92:	f73f aeb4 	bgt.w	800c9fe <st_sssa8_ch_convolve_dw+0x956>
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	dd4a      	ble.n	800cd30 <st_sssa8_ch_convolve_dw+0xc88>
 800cc9a:	9805      	ldr	r0, [sp, #20]
 800cc9c:	6824      	ldr	r4, [r4, #0]
 800cc9e:	f8d8 e000 	ldr.w	lr, [r8]
 800cca2:	0040      	lsls	r0, r0, #1
 800cca4:	9d04      	ldr	r5, [sp, #16]
 800cca6:	fb50 400e 	smmla	r0, r0, lr, r4
 800ccaa:	fa40 f202 	asr.w	r2, r0, r2
 800ccae:	9802      	ldr	r0, [sp, #8]
 800ccb0:	f105 070c 	add.w	r7, r5, #12
 800ccb4:	f100 040c 	add.w	r4, r0, #12
 800ccb8:	1d88      	adds	r0, r1, #6
 800ccba:	f302 0207 	ssat	r2, #8, r2
 800ccbe:	f88c 2000 	strb.w	r2, [ip]
 800ccc2:	9a03      	ldr	r2, [sp, #12]
 800ccc4:	f102 0c03 	add.w	ip, r2, #3
 800ccc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cccc:	2a15      	cmp	r2, #21
 800ccce:	f73f aeb8 	bgt.w	800ca42 <st_sssa8_ch_convolve_dw+0x99a>
 800ccd2:	2a00      	cmp	r2, #0
 800ccd4:	dd1c      	ble.n	800cd10 <st_sssa8_ch_convolve_dw+0xc68>
 800ccd6:	9806      	ldr	r0, [sp, #24]
 800ccd8:	683f      	ldr	r7, [r7, #0]
 800ccda:	6824      	ldr	r4, [r4, #0]
 800ccdc:	0040      	lsls	r0, r0, #1
 800ccde:	fb50 4007 	smmla	r0, r0, r7, r4
 800cce2:	fa40 f202 	asr.w	r2, r0, r2
 800cce6:	f302 0207 	ssat	r2, #8, r2
 800ccea:	f88c 2000 	strb.w	r2, [ip]
 800ccee:	e6b8      	b.n	800ca62 <st_sssa8_ch_convolve_dw+0x9ba>
 800ccf0:	f1c2 0201 	rsb	r2, r2, #1
 800ccf4:	f101 0802 	add.w	r8, r1, #2
 800ccf8:	fa0c f202 	lsl.w	r2, ip, r2
 800ccfc:	f302 021f 	ssat	r2, #32, r2
 800cd00:	9f04      	ldr	r7, [sp, #16]
 800cd02:	f857 0b04 	ldr.w	r0, [r7], #4
 800cd06:	fb52 f210 	smmulr	r2, r2, r0
 800cd0a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cd0e:	e649      	b.n	800c9a4 <st_sssa8_ch_convolve_dw+0x8fc>
 800cd10:	f1c2 0201 	rsb	r2, r2, #1
 800cd14:	9806      	ldr	r0, [sp, #24]
 800cd16:	4090      	lsls	r0, r2
 800cd18:	f300 021f 	ssat	r2, #32, r0
 800cd1c:	6838      	ldr	r0, [r7, #0]
 800cd1e:	fb52 f210 	smmulr	r2, r2, r0
 800cd22:	6820      	ldr	r0, [r4, #0]
 800cd24:	4402      	add	r2, r0
 800cd26:	f302 0207 	ssat	r2, #8, r2
 800cd2a:	f88c 2000 	strb.w	r2, [ip]
 800cd2e:	e698      	b.n	800ca62 <st_sssa8_ch_convolve_dw+0x9ba>
 800cd30:	f1c2 0201 	rsb	r2, r2, #1
 800cd34:	9805      	ldr	r0, [sp, #20]
 800cd36:	4090      	lsls	r0, r2
 800cd38:	4602      	mov	r2, r0
 800cd3a:	1d88      	adds	r0, r1, #6
 800cd3c:	f302 021f 	ssat	r2, #32, r2
 800cd40:	9d04      	ldr	r5, [sp, #16]
 800cd42:	f8d8 e000 	ldr.w	lr, [r8]
 800cd46:	f105 070c 	add.w	r7, r5, #12
 800cd4a:	fb52 f21e 	smmulr	r2, r2, lr
 800cd4e:	6824      	ldr	r4, [r4, #0]
 800cd50:	4422      	add	r2, r4
 800cd52:	9c02      	ldr	r4, [sp, #8]
 800cd54:	340c      	adds	r4, #12
 800cd56:	f302 0207 	ssat	r2, #8, r2
 800cd5a:	f88c 2000 	strb.w	r2, [ip]
 800cd5e:	9a03      	ldr	r2, [sp, #12]
 800cd60:	f102 0c03 	add.w	ip, r2, #3
 800cd64:	e668      	b.n	800ca38 <st_sssa8_ch_convolve_dw+0x990>
 800cd66:	f1c2 0201 	rsb	r2, r2, #1
 800cd6a:	1d08      	adds	r0, r1, #4
 800cd6c:	4094      	lsls	r4, r2
 800cd6e:	f304 021f 	ssat	r2, #32, r4
 800cd72:	9d04      	ldr	r5, [sp, #16]
 800cd74:	683c      	ldr	r4, [r7, #0]
 800cd76:	f105 0808 	add.w	r8, r5, #8
 800cd7a:	fb52 f214 	smmulr	r2, r2, r4
 800cd7e:	f8de 4000 	ldr.w	r4, [lr]
 800cd82:	4422      	add	r2, r4
 800cd84:	9c02      	ldr	r4, [sp, #8]
 800cd86:	3408      	adds	r4, #8
 800cd88:	f302 0207 	ssat	r2, #8, r2
 800cd8c:	f88c 2000 	strb.w	r2, [ip]
 800cd90:	9a03      	ldr	r2, [sp, #12]
 800cd92:	f102 0c02 	add.w	ip, r2, #2
 800cd96:	e62d      	b.n	800c9f4 <st_sssa8_ch_convolve_dw+0x94c>
 800cd98:	ffff0000 	.word	0xffff0000
 800cd9c:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cd9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cda0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cda4:	4413      	add	r3, r2
 800cda6:	9383      	str	r3, [sp, #524]	; 0x20c
 800cda8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f43f ac2d 	beq.w	800c60e <st_sssa8_ch_convolve_dw+0x566>
 800cdb4:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800cdb6:	e9dd 8c47 	ldrd	r8, ip, [sp, #284]	; 0x11c
 800cdba:	e9dd 3445 	ldrd	r3, r4, [sp, #276]	; 0x114
 800cdbe:	f1a3 0902 	sub.w	r9, r3, #2
 800cdc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800cdc4:	9904      	ldr	r1, [sp, #16]
 800cdc6:	4423      	add	r3, r4
 800cdc8:	f8cd b00c 	str.w	fp, [sp, #12]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	9302      	str	r3, [sp, #8]
 800cdd0:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cdd2:	f103 0e01 	add.w	lr, r3, #1
 800cdd6:	ee18 3a10 	vmov	r3, s16
 800cdda:	b218      	sxth	r0, r3
 800cddc:	1c63      	adds	r3, r4, #1
 800cdde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cde0:	f858 6b04 	ldr.w	r6, [r8], #4
 800cde4:	1915      	adds	r5, r2, r4
 800cde6:	b29c      	uxth	r4, r3
 800cde8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 8219 	beq.w	800d222 <st_sssa8_ch_convolve_dw+0x117a>
 800cdf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cdf2:	18cb      	adds	r3, r1, r3
 800cdf4:	f995 2000 	ldrsb.w	r2, [r5]
 800cdf8:	4455      	add	r5, sl
 800cdfa:	f831 bb02 	ldrh.w	fp, [r1], #2
 800cdfe:	1a12      	subs	r2, r2, r0
 800ce00:	4299      	cmp	r1, r3
 800ce02:	fb1b 6602 	smlabb	r6, fp, r2, r6
 800ce06:	d1f5      	bne.n	800cdf4 <st_sssa8_ch_convolve_dw+0xd4c>
 800ce08:	f939 5f02 	ldrsh.w	r5, [r9, #2]!
 800ce0c:	2d15      	cmp	r5, #21
 800ce0e:	f340 80d1 	ble.w	800cfb4 <st_sssa8_ch_convolve_dw+0xf0c>
 800ce12:	1ea9      	subs	r1, r5, #2
 800ce14:	2201      	movs	r2, #1
 800ce16:	3d01      	subs	r5, #1
 800ce18:	fa02 f101 	lsl.w	r1, r2, r1
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	fb56 1202 	smmla	r2, r6, r2, r1
 800ce22:	fa42 f505 	asr.w	r5, r2, r5
 800ce26:	f8dc 2000 	ldr.w	r2, [ip]
 800ce2a:	442a      	add	r2, r5
 800ce2c:	f302 0207 	ssat	r2, #8, r2
 800ce30:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800ce34:	9a02      	ldr	r2, [sp, #8]
 800ce36:	3704      	adds	r7, #4
 800ce38:	f10c 0c04 	add.w	ip, ip, #4
 800ce3c:	f10e 0e01 	add.w	lr, lr, #1
 800ce40:	4294      	cmp	r4, r2
 800ce42:	f000 80c6 	beq.w	800cfd2 <st_sssa8_ch_convolve_dw+0xf2a>
 800ce46:	4619      	mov	r1, r3
 800ce48:	e7c8      	b.n	800cddc <st_sssa8_ch_convolve_dw+0xd34>
 800ce4a:	9a58      	ldr	r2, [sp, #352]	; 0x160
 800ce4c:	3a01      	subs	r2, #1
 800ce4e:	9258      	str	r2, [sp, #352]	; 0x160
 800ce50:	2201      	movs	r2, #1
 800ce52:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800ce56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ce58:	2a01      	cmp	r2, #1
 800ce5a:	f47f aa7d 	bne.w	800c358 <st_sssa8_ch_convolve_dw+0x2b0>
 800ce5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ce62:	4290      	cmp	r0, r2
 800ce64:	f340 81d9 	ble.w	800d21a <st_sssa8_ch_convolve_dw+0x1172>
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800ce6c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ce6e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ce70:	fb01 0104 	mla	r1, r1, r4, r0
 800ce74:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ce76:	1acd      	subs	r5, r1, r3
 800ce78:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ce7c:	42ab      	cmp	r3, r5
 800ce7e:	9304      	str	r3, [sp, #16]
 800ce80:	f6bf aac0 	bge.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800ce84:	f8cd b014 	str.w	fp, [sp, #20]
 800ce88:	4617      	mov	r7, r2
 800ce8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ce8e:	4690      	mov	r8, r2
 800ce90:	4613      	mov	r3, r2
 800ce92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ce94:	ee18 ba10 	vmov	fp, s16
 800ce98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce9a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	fb03 f306 	mul.w	r3, r3, r6
 800cea4:	4674      	mov	r4, lr
 800cea6:	bfcc      	ite	gt
 800cea8:	2700      	movgt	r7, #0
 800ceaa:	2701      	movle	r7, #1
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	ea47 77d8 	orr.w	r7, r7, r8, lsr #31
 800ceb2:	9702      	str	r7, [sp, #8]
 800ceb4:	0fe3      	lsrs	r3, r4, #31
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	4649      	mov	r1, r9
 800ceba:	4658      	mov	r0, fp
 800cebc:	4576      	cmp	r6, lr
 800cebe:	bfd8      	it	le
 800cec0:	f043 0301 	orrle.w	r3, r3, #1
 800cec4:	b91b      	cbnz	r3, 800cece <st_sssa8_ch_convolve_dw+0xe26>
 800cec6:	9b02      	ldr	r3, [sp, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80ec 	beq.w	800d0a6 <st_sssa8_ch_convolve_dw+0xffe>
 800cece:	f005 fc8d 	bl	80127ec <st_int8_fill>
 800ced2:	3401      	adds	r4, #1
 800ced4:	44d1      	add	r9, sl
 800ced6:	b224      	sxth	r4, r4
 800ced8:	42ac      	cmp	r4, r5
 800ceda:	46a6      	mov	lr, r4
 800cedc:	dbea      	blt.n	800ceb4 <st_sssa8_ch_convolve_dw+0xe0c>
 800cede:	f108 0801 	add.w	r8, r8, #1
 800cee2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cee4:	fa0f f888 	sxth.w	r8, r8
 800cee8:	4542      	cmp	r2, r8
 800ceea:	4643      	mov	r3, r8
 800ceec:	dcd4      	bgt.n	800ce98 <st_sssa8_ch_convolve_dw+0xdf0>
 800ceee:	f8dd b014 	ldr.w	fp, [sp, #20]
 800cef2:	f7ff ba87 	b.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800cef6:	4282      	cmp	r2, r0
 800cef8:	f340 818f 	ble.w	800d21a <st_sssa8_ch_convolve_dw+0x1172>
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800cf00:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800cf02:	9328      	str	r3, [sp, #160]	; 0xa0
 800cf04:	fb01 2100 	mla	r1, r1, r0, r2
 800cf08:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800cf0a:	1acd      	subs	r5, r1, r3
 800cf0c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800cf10:	429d      	cmp	r5, r3
 800cf12:	9303      	str	r3, [sp, #12]
 800cf14:	f77f aa76 	ble.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800cf18:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 800cf1c:	f8cd b010 	str.w	fp, [sp, #16]
 800cf20:	4647      	mov	r7, r8
 800cf22:	4643      	mov	r3, r8
 800cf24:	46c3      	mov	fp, r8
 800cf26:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800cf2a:	46d0      	mov	r8, sl
 800cf2c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cf2e:	ee18 aa10 	vmov	sl, s16
 800cf32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf34:	9903      	ldr	r1, [sp, #12]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	fb03 f306 	mul.w	r3, r3, r6
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	bfcc      	ite	gt
 800cf40:	2700      	movgt	r7, #0
 800cf42:	2701      	movle	r7, #1
 800cf44:	9302      	str	r3, [sp, #8]
 800cf46:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 800cf4a:	0fe3      	lsrs	r3, r4, #31
 800cf4c:	428e      	cmp	r6, r1
 800cf4e:	bfd8      	it	le
 800cf50:	f043 0301 	orrle.w	r3, r3, #1
 800cf54:	b903      	cbnz	r3, 800cf58 <st_sssa8_ch_convolve_dw+0xeb0>
 800cf56:	b1bf      	cbz	r7, 800cf88 <st_sssa8_ch_convolve_dw+0xee0>
 800cf58:	4642      	mov	r2, r8
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4650      	mov	r0, sl
 800cf5e:	f005 fc45 	bl	80127ec <st_int8_fill>
 800cf62:	3401      	adds	r4, #1
 800cf64:	44c1      	add	r9, r8
 800cf66:	b224      	sxth	r4, r4
 800cf68:	42ac      	cmp	r4, r5
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	dbed      	blt.n	800cf4a <st_sssa8_ch_convolve_dw+0xea2>
 800cf6e:	f10b 0b01 	add.w	fp, fp, #1
 800cf72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf74:	fa0f fb8b 	sxth.w	fp, fp
 800cf78:	455a      	cmp	r2, fp
 800cf7a:	465b      	mov	r3, fp
 800cf7c:	dcd9      	bgt.n	800cf32 <st_sssa8_ch_convolve_dw+0xe8a>
 800cf7e:	f8dd b010 	ldr.w	fp, [sp, #16]
 800cf82:	46c2      	mov	sl, r8
 800cf84:	f7ff ba3e 	b.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800cf88:	9b02      	ldr	r3, [sp, #8]
 800cf8a:	440b      	add	r3, r1
 800cf8c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 800cf90:	fb02 1303 	mla	r3, r2, r3, r1
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	d0e4      	beq.n	800cf62 <st_sssa8_ch_convolve_dw+0xeba>
 800cf98:	eb03 0c02 	add.w	ip, r3, r2
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800cfa2:	459c      	cmp	ip, r3
 800cfa4:	ea4f 2201 	mov.w	r2, r1, lsl #8
 800cfa8:	fa32 f281 	uxtab16	r2, r2, r1
 800cfac:	f820 2b02 	strh.w	r2, [r0], #2
 800cfb0:	d1f5      	bne.n	800cf9e <st_sssa8_ch_convolve_dw+0xef6>
 800cfb2:	e7d6      	b.n	800cf62 <st_sssa8_ch_convolve_dw+0xeba>
 800cfb4:	2d00      	cmp	r5, #0
 800cfb6:	dd14      	ble.n	800cfe2 <st_sssa8_ch_convolve_dw+0xf3a>
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	0076      	lsls	r6, r6, #1
 800cfbc:	f8dc 1000 	ldr.w	r1, [ip]
 800cfc0:	fb56 1602 	smmla	r6, r6, r2, r1
 800cfc4:	fa46 f205 	asr.w	r2, r6, r5
 800cfc8:	f302 0207 	ssat	r2, #8, r2
 800cfcc:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800cfd0:	e730      	b.n	800ce34 <st_sssa8_ch_convolve_dw+0xd8c>
 800cfd2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cfd6:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cfd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800cfda:	4413      	add	r3, r2
 800cfdc:	9383      	str	r3, [sp, #524]	; 0x20c
 800cfde:	f7ff bb16 	b.w	800c60e <st_sssa8_ch_convolve_dw+0x566>
 800cfe2:	f1c5 0501 	rsb	r5, r5, #1
 800cfe6:	fa06 f105 	lsl.w	r1, r6, r5
 800cfea:	f301 011f 	ssat	r1, #32, r1
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	fb51 f112 	smmulr	r1, r1, r2
 800cff4:	f8dc 2000 	ldr.w	r2, [ip]
 800cff8:	440a      	add	r2, r1
 800cffa:	f302 0207 	ssat	r2, #8, r2
 800cffe:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800d002:	e717      	b.n	800ce34 <st_sssa8_ch_convolve_dw+0xd8c>
 800d004:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d006:	2b00      	cmp	r3, #0
 800d008:	f43f ab01 	beq.w	800c60e <st_sssa8_ch_convolve_dw+0x566>
 800d00c:	f1ba 0f01 	cmp.w	sl, #1
 800d010:	f040 858a 	bne.w	800db28 <st_sssa8_ch_convolve_dw+0x1a80>
 800d014:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d016:	f103 0c01 	add.w	ip, r3, #1
 800d01a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d01c:	1e9f      	subs	r7, r3, #2
 800d01e:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d020:	6819      	ldr	r1, [r3, #0]
 800d022:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d024:	b183      	cbz	r3, 800d048 <st_sssa8_ch_convolve_dw+0xfa0>
 800d026:	ee18 3a10 	vmov	r3, s16
 800d02a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d02c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d02e:	b21e      	sxth	r6, r3
 800d030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d032:	18d5      	adds	r5, r2, r3
 800d034:	f832 4b02 	ldrh.w	r4, [r2], #2
 800d038:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d03c:	4295      	cmp	r5, r2
 800d03e:	eba3 0306 	sub.w	r3, r3, r6
 800d042:	fb13 1104 	smlabb	r1, r3, r4, r1
 800d046:	d1f5      	bne.n	800d034 <st_sssa8_ch_convolve_dw+0xf8c>
 800d048:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800d04c:	2815      	cmp	r0, #21
 800d04e:	dd10      	ble.n	800d072 <st_sssa8_ch_convolve_dw+0xfca>
 800d050:	1e83      	subs	r3, r0, #2
 800d052:	2201      	movs	r2, #1
 800d054:	3801      	subs	r0, #1
 800d056:	409a      	lsls	r2, r3
 800d058:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	fb51 2303 	smmla	r3, r1, r3, r2
 800d060:	4103      	asrs	r3, r0
 800d062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d064:	6812      	ldr	r2, [r2, #0]
 800d066:	4413      	add	r3, r2
 800d068:	f303 0307 	ssat	r3, #8, r3
 800d06c:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d070:	e7b1      	b.n	800cfd6 <st_sssa8_ch_convolve_dw+0xf2e>
 800d072:	2800      	cmp	r0, #0
 800d074:	dd0c      	ble.n	800d090 <st_sssa8_ch_convolve_dw+0xfe8>
 800d076:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800d078:	0049      	lsls	r1, r1, #1
 800d07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6812      	ldr	r2, [r2, #0]
 800d080:	fb51 2303 	smmla	r3, r1, r3, r2
 800d084:	4103      	asrs	r3, r0
 800d086:	f303 0307 	ssat	r3, #8, r3
 800d08a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800d08e:	e7a2      	b.n	800cfd6 <st_sssa8_ch_convolve_dw+0xf2e>
 800d090:	f1c0 0301 	rsb	r3, r0, #1
 800d094:	fa01 f303 	lsl.w	r3, r1, r3
 800d098:	f303 031f 	ssat	r3, #32, r3
 800d09c:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800d09e:	6812      	ldr	r2, [r2, #0]
 800d0a0:	fb53 f312 	smmulr	r3, r3, r2
 800d0a4:	e7dd      	b.n	800d062 <st_sssa8_ch_convolve_dw+0xfba>
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	eb03 000e 	add.w	r0, r3, lr
 800d0ac:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800d0b0:	fb02 3000 	mla	r0, r2, r0, r3
 800d0b4:	4617      	mov	r7, r2
 800d0b6:	f005 fc01 	bl	80128bc <st_int8_copy>
 800d0ba:	e70a      	b.n	800ced2 <st_sssa8_ch_convolve_dw+0xe2a>
 800d0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0be:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800d0c0:	4282      	cmp	r2, r0
 800d0c2:	f340 80aa 	ble.w	800d21a <st_sssa8_ch_convolve_dw+0x1172>
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800d0ca:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d0cc:	9328      	str	r3, [sp, #160]	; 0xa0
 800d0ce:	fb01 2100 	mla	r1, r1, r0, r2
 800d0d2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d0d4:	eba1 0803 	sub.w	r8, r1, r3
 800d0d8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800d0dc:	4598      	cmp	r8, r3
 800d0de:	9306      	str	r3, [sp, #24]
 800d0e0:	f77f a990 	ble.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800d0e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d0e6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d0ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800d0ee:	ee18 8a10 	vmov	r8, s16
 800d0f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d0f4:	f8dd b0f8 	ldr.w	fp, [sp, #248]	; 0xf8
 800d0f8:	9304      	str	r3, [sp, #16]
 800d0fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d0fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0fe:	429a      	cmp	r2, r3
 800d100:	fb03 f301 	mul.w	r3, r3, r1
 800d104:	bfcc      	ite	gt
 800d106:	2200      	movgt	r2, #0
 800d108:	2201      	movle	r2, #1
 800d10a:	9305      	str	r3, [sp, #20]
 800d10c:	9b04      	ldr	r3, [sp, #16]
 800d10e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d112:	9a06      	ldr	r2, [sp, #24]
 800d114:	4615      	mov	r5, r2
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	0feb      	lsrs	r3, r5, #31
 800d11a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d11c:	4291      	cmp	r1, r2
 800d11e:	bfd8      	it	le
 800d120:	f043 0301 	orrle.w	r3, r3, #1
 800d124:	b90b      	cbnz	r3, 800d12a <st_sssa8_ch_convolve_dw+0x1082>
 800d126:	9b03      	ldr	r3, [sp, #12]
 800d128:	b1a3      	cbz	r3, 800d154 <st_sssa8_ch_convolve_dw+0x10ac>
 800d12a:	4652      	mov	r2, sl
 800d12c:	4631      	mov	r1, r6
 800d12e:	4640      	mov	r0, r8
 800d130:	f005 fb5c 	bl	80127ec <st_int8_fill>
 800d134:	3501      	adds	r5, #1
 800d136:	9b02      	ldr	r3, [sp, #8]
 800d138:	4456      	add	r6, sl
 800d13a:	b22d      	sxth	r5, r5
 800d13c:	429d      	cmp	r5, r3
 800d13e:	462a      	mov	r2, r5
 800d140:	dbea      	blt.n	800d118 <st_sssa8_ch_convolve_dw+0x1070>
 800d142:	9b04      	ldr	r3, [sp, #16]
 800d144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d146:	3301      	adds	r3, #1
 800d148:	b21b      	sxth	r3, r3
 800d14a:	429a      	cmp	r2, r3
 800d14c:	9304      	str	r3, [sp, #16]
 800d14e:	dcd4      	bgt.n	800d0fa <st_sssa8_ch_convolve_dw+0x1052>
 800d150:	f7ff b956 	b.w	800c400 <st_sssa8_ch_convolve_dw+0x358>
 800d154:	9b05      	ldr	r3, [sp, #20]
 800d156:	441a      	add	r2, r3
 800d158:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 800d15c:	fb03 1702 	mla	r7, r3, r2, r1
 800d160:	2b00      	cmp	r3, #0
 800d162:	d0e7      	beq.n	800d134 <st_sssa8_ch_convolve_dw+0x108c>
 800d164:	f1bb 0f00 	cmp.w	fp, #0
 800d168:	d0e4      	beq.n	800d134 <st_sssa8_ch_convolve_dw+0x108c>
 800d16a:	18fb      	adds	r3, r7, r3
 800d16c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d170:	f106 0904 	add.w	r9, r6, #4
 800d174:	4630      	mov	r0, r6
 800d176:	469e      	mov	lr, r3
 800d178:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
 800d17c:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
 800d180:	e9cd 5607 	strd	r5, r6, [sp, #28]
 800d184:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d188:	f1ba 0f05 	cmp.w	sl, #5
 800d18c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800d190:	ea4f 6201 	mov.w	r2, r1, lsl #24
 800d194:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d198:	ea4f 2132 	mov.w	r1, r2, ror #8
 800d19c:	fa32 f281 	uxtab16	r2, r2, r1
 800d1a0:	d938      	bls.n	800d214 <st_sssa8_ch_convolve_dw+0x116c>
 800d1a2:	b3a3      	cbz	r3, 800d20e <st_sssa8_ch_convolve_dw+0x1166>
 800d1a4:	464d      	mov	r5, r9
 800d1a6:	2401      	movs	r4, #1
 800d1a8:	f849 2c04 	str.w	r2, [r9, #-4]
 800d1ac:	ebab 0603 	sub.w	r6, fp, r3
 800d1b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d1b4:	0871      	lsrs	r1, r6, #1
 800d1b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d1ba:	e9c3 2200 	strd	r2, r2, [r3]
 800d1be:	3308      	adds	r3, #8
 800d1c0:	4299      	cmp	r1, r3
 800d1c2:	d1fa      	bne.n	800d1ba <st_sssa8_ch_convolve_dw+0x1112>
 800d1c4:	f026 0301 	bic.w	r3, r6, #1
 800d1c8:	42b3      	cmp	r3, r6
 800d1ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800d1ce:	441c      	add	r4, r3
 800d1d0:	d014      	beq.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1d2:	1c63      	adds	r3, r4, #1
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	459b      	cmp	fp, r3
 800d1d8:	dd10      	ble.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1da:	1ca3      	adds	r3, r4, #2
 800d1dc:	606a      	str	r2, [r5, #4]
 800d1de:	459b      	cmp	fp, r3
 800d1e0:	dd0c      	ble.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1e2:	1ce3      	adds	r3, r4, #3
 800d1e4:	60aa      	str	r2, [r5, #8]
 800d1e6:	459b      	cmp	fp, r3
 800d1e8:	dd08      	ble.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1ea:	1d23      	adds	r3, r4, #4
 800d1ec:	60ea      	str	r2, [r5, #12]
 800d1ee:	459b      	cmp	fp, r3
 800d1f0:	dd04      	ble.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1f2:	3405      	adds	r4, #5
 800d1f4:	612a      	str	r2, [r5, #16]
 800d1f6:	45a3      	cmp	fp, r4
 800d1f8:	dd00      	ble.n	800d1fc <st_sssa8_ch_convolve_dw+0x1154>
 800d1fa:	616a      	str	r2, [r5, #20]
 800d1fc:	45be      	cmp	lr, r7
 800d1fe:	4460      	add	r0, ip
 800d200:	44e1      	add	r9, ip
 800d202:	d1bf      	bne.n	800d184 <st_sssa8_ch_convolve_dw+0x10dc>
 800d204:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d208:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 800d20c:	e792      	b.n	800d134 <st_sssa8_ch_convolve_dw+0x108c>
 800d20e:	4605      	mov	r5, r0
 800d210:	461c      	mov	r4, r3
 800d212:	e7cb      	b.n	800d1ac <st_sssa8_ch_convolve_dw+0x1104>
 800d214:	4605      	mov	r5, r0
 800d216:	2400      	movs	r4, #0
 800d218:	e7db      	b.n	800d1d2 <st_sssa8_ch_convolve_dw+0x112a>
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	9328      	str	r3, [sp, #160]	; 0xa0
 800d21e:	f7ff b8f1 	b.w	800c404 <st_sssa8_ch_convolve_dw+0x35c>
 800d222:	460b      	mov	r3, r1
 800d224:	e5f0      	b.n	800ce08 <st_sssa8_ch_convolve_dw+0xd60>
 800d226:	b2ab      	uxth	r3, r5
 800d228:	9342      	str	r3, [sp, #264]	; 0x108
 800d22a:	f7ff b9fd 	b.w	800c628 <st_sssa8_ch_convolve_dw+0x580>
 800d22e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d232:	fb02 f000 	mul.w	r0, r2, r0
 800d236:	fb02 f303 	mul.w	r3, r2, r3
 800d23a:	901c      	str	r0, [sp, #112]	; 0x70
 800d23c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800d23e:	fb03 f000 	mul.w	r0, r3, r0
 800d242:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d246:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800d248:	901b      	str	r0, [sp, #108]	; 0x6c
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	f43f a9f9 	beq.w	800c642 <st_sssa8_ch_convolve_dw+0x59a>
 800d250:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d252:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d254:	f001 0203 	and.w	r2, r1, #3
 800d258:	0888      	lsrs	r0, r1, #2
 800d25a:	4427      	add	r7, r4
 800d25c:	9213      	str	r2, [sp, #76]	; 0x4c
 800d25e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d260:	9015      	str	r0, [sp, #84]	; 0x54
 800d262:	9716      	str	r7, [sp, #88]	; 0x58
 800d264:	2a00      	cmp	r2, #0
 800d266:	f43f a9ec 	beq.w	800c642 <st_sssa8_ch_convolve_dw+0x59a>
 800d26a:	441c      	add	r4, r3
 800d26c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800d270:	1e42      	subs	r2, r0, #1
 800d272:	19be      	adds	r6, r7, r6
 800d274:	942a      	str	r4, [sp, #168]	; 0xa8
 800d276:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800d278:	b292      	uxth	r2, r2
 800d27a:	9520      	str	r5, [sp, #128]	; 0x80
 800d27c:	1861      	adds	r1, r4, r1
 800d27e:	191c      	adds	r4, r3, r4
 800d280:	9619      	str	r6, [sp, #100]	; 0x64
 800d282:	18cd      	adds	r5, r1, r3
 800d284:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800d286:	1c53      	adds	r3, r2, #1
 800d288:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d28c:	3120      	adds	r1, #32
 800d28e:	951f      	str	r5, [sp, #124]	; 0x7c
 800d290:	9422      	str	r4, [sp, #136]	; 0x88
 800d292:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d296:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800d29a:	9112      	str	r1, [sp, #72]	; 0x48
 800d29c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800d2a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d2a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d2a4:	3a01      	subs	r2, #1
 800d2a6:	9126      	str	r1, [sp, #152]	; 0x98
 800d2a8:	b291      	uxth	r1, r2
 800d2aa:	9124      	str	r1, [sp, #144]	; 0x90
 800d2ac:	0061      	lsls	r1, r4, #1
 800d2ae:	9121      	str	r1, [sp, #132]	; 0x84
 800d2b0:	0069      	lsls	r1, r5, #1
 800d2b2:	465d      	mov	r5, fp
 800d2b4:	911e      	str	r1, [sp, #120]	; 0x78
 800d2b6:	9986      	ldr	r1, [sp, #536]	; 0x218
 800d2b8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d2bc:	911a      	str	r1, [sp, #104]	; 0x68
 800d2be:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800d2c2:	911d      	str	r1, [sp, #116]	; 0x74
 800d2c4:	0099      	lsls	r1, r3, #2
 800d2c6:	9125      	str	r1, [sp, #148]	; 0x94
 800d2c8:	eb07 1103 	add.w	r1, r7, r3, lsl #4
 800d2cc:	9129      	str	r1, [sp, #164]	; 0xa4
 800d2ce:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800d2d0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d2d4:	4663      	mov	r3, ip
 800d2d6:	9128      	str	r1, [sp, #160]	; 0xa0
 800d2d8:	0081      	lsls	r1, r0, #2
 800d2da:	9127      	str	r1, [sp, #156]	; 0x9c
 800d2dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d2de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d2e0:	9504      	str	r5, [sp, #16]
 800d2e2:	fb03 2301 	mla	r3, r3, r1, r2
 800d2e6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	1859      	adds	r1, r3, r1
 800d2ec:	9307      	str	r3, [sp, #28]
 800d2ee:	9218      	str	r2, [sp, #96]	; 0x60
 800d2f0:	ee18 2a10 	vmov	r2, s16
 800d2f4:	9110      	str	r1, [sp, #64]	; 0x40
 800d2f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d2f8:	b212      	sxth	r2, r2
 800d2fa:	1859      	adds	r1, r3, r1
 800d2fc:	4693      	mov	fp, r2
 800d2fe:	910f      	str	r1, [sp, #60]	; 0x3c
 800d300:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d302:	4419      	add	r1, r3
 800d304:	910d      	str	r1, [sp, #52]	; 0x34
 800d306:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d308:	4419      	add	r1, r3
 800d30a:	910c      	str	r1, [sp, #48]	; 0x30
 800d30c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d30e:	1859      	adds	r1, r3, r1
 800d310:	910b      	str	r1, [sp, #44]	; 0x2c
 800d312:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d314:	4419      	add	r1, r3
 800d316:	910a      	str	r1, [sp, #40]	; 0x28
 800d318:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d31a:	4419      	add	r1, r3
 800d31c:	9109      	str	r1, [sp, #36]	; 0x24
 800d31e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d320:	18cb      	adds	r3, r1, r3
 800d322:	9308      	str	r3, [sp, #32]
 800d324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 83d7 	beq.w	800dada <st_sssa8_ch_convolve_dw+0x1a32>
 800d32c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800d32e:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800d330:	f103 0710 	add.w	r7, r3, #16
 800d334:	9e86      	ldr	r6, [sp, #536]	; 0x218
 800d336:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d338:	9203      	str	r2, [sp, #12]
 800d33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d33c:	3348      	adds	r3, #72	; 0x48
 800d33e:	9d04      	ldr	r5, [sp, #16]
 800d340:	9202      	str	r2, [sp, #8]
 800d342:	2200      	movs	r2, #0
 800d344:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800d348:	9604      	str	r6, [sp, #16]
 800d34a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800d34e:	e083      	b.n	800d458 <st_sssa8_ch_convolve_dw+0x13b0>
 800d350:	f1a1 0902 	sub.w	r9, r1, #2
 800d354:	2401      	movs	r4, #1
 800d356:	9804      	ldr	r0, [sp, #16]
 800d358:	3901      	subs	r1, #1
 800d35a:	fa04 f909 	lsl.w	r9, r4, r9
 800d35e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d362:	f850 4b04 	ldr.w	r4, [r0], #4
 800d366:	f10a 0b02 	add.w	fp, sl, #2
 800d36a:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800d36e:	fa4c f101 	asr.w	r1, ip, r1
 800d372:	f858 4b04 	ldr.w	r4, [r8], #4
 800d376:	4421      	add	r1, r4
 800d378:	f301 0107 	ssat	r1, #8, r1
 800d37c:	9c03      	ldr	r4, [sp, #12]
 800d37e:	f804 1b01 	strb.w	r1, [r4], #1
 800d382:	f9bb 1000 	ldrsh.w	r1, [fp]
 800d386:	2915      	cmp	r1, #21
 800d388:	f340 8149 	ble.w	800d61e <st_sssa8_ch_convolve_dw+0x1576>
 800d38c:	f1a1 0c02 	sub.w	ip, r1, #2
 800d390:	2601      	movs	r6, #1
 800d392:	3901      	subs	r1, #1
 800d394:	6800      	ldr	r0, [r0, #0]
 800d396:	fa06 fc0c 	lsl.w	ip, r6, ip
 800d39a:	f8d8 8000 	ldr.w	r8, [r8]
 800d39e:	9e04      	ldr	r6, [sp, #16]
 800d3a0:	fb5e ce00 	smmla	lr, lr, r0, ip
 800d3a4:	fa4e f001 	asr.w	r0, lr, r1
 800d3a8:	f106 0908 	add.w	r9, r6, #8
 800d3ac:	f10a 0104 	add.w	r1, sl, #4
 800d3b0:	4440      	add	r0, r8
 800d3b2:	9e02      	ldr	r6, [sp, #8]
 800d3b4:	f106 0c08 	add.w	ip, r6, #8
 800d3b8:	f300 0007 	ssat	r0, #8, r0
 800d3bc:	7020      	strb	r0, [r4, #0]
 800d3be:	f9b1 1000 	ldrsh.w	r1, [r1]
 800d3c2:	9803      	ldr	r0, [sp, #12]
 800d3c4:	2915      	cmp	r1, #21
 800d3c6:	f100 0402 	add.w	r4, r0, #2
 800d3ca:	f340 8145 	ble.w	800d658 <st_sssa8_ch_convolve_dw+0x15b0>
 800d3ce:	f8dc 8000 	ldr.w	r8, [ip]
 800d3d2:	2001      	movs	r0, #1
 800d3d4:	f1a1 0c02 	sub.w	ip, r1, #2
 800d3d8:	3901      	subs	r1, #1
 800d3da:	f8d9 e000 	ldr.w	lr, [r9]
 800d3de:	fa00 fc0c 	lsl.w	ip, r0, ip
 800d3e2:	9e05      	ldr	r6, [sp, #20]
 800d3e4:	9804      	ldr	r0, [sp, #16]
 800d3e6:	fb56 ce0e 	smmla	lr, r6, lr, ip
 800d3ea:	fa4e f101 	asr.w	r1, lr, r1
 800d3ee:	300c      	adds	r0, #12
 800d3f0:	f10a 0e06 	add.w	lr, sl, #6
 800d3f4:	4441      	add	r1, r8
 800d3f6:	9e02      	ldr	r6, [sp, #8]
 800d3f8:	f106 0c0c 	add.w	ip, r6, #12
 800d3fc:	f301 0107 	ssat	r1, #8, r1
 800d400:	7021      	strb	r1, [r4, #0]
 800d402:	9903      	ldr	r1, [sp, #12]
 800d404:	1ccc      	adds	r4, r1, #3
 800d406:	f9be 1000 	ldrsh.w	r1, [lr]
 800d40a:	2915      	cmp	r1, #21
 800d40c:	f340 8142 	ble.w	800d694 <st_sssa8_ch_convolve_dw+0x15ec>
 800d410:	f8dc e000 	ldr.w	lr, [ip]
 800d414:	2601      	movs	r6, #1
 800d416:	f1a1 0c02 	sub.w	ip, r1, #2
 800d41a:	3901      	subs	r1, #1
 800d41c:	6800      	ldr	r0, [r0, #0]
 800d41e:	fa06 fc0c 	lsl.w	ip, r6, ip
 800d422:	9e06      	ldr	r6, [sp, #24]
 800d424:	fb56 c000 	smmla	r0, r6, r0, ip
 800d428:	fa40 f101 	asr.w	r1, r0, r1
 800d42c:	4471      	add	r1, lr
 800d42e:	f301 0107 	ssat	r1, #8, r1
 800d432:	7021      	strb	r1, [r4, #0]
 800d434:	9904      	ldr	r1, [sp, #16]
 800d436:	3710      	adds	r7, #16
 800d438:	3348      	adds	r3, #72	; 0x48
 800d43a:	3204      	adds	r2, #4
 800d43c:	3110      	adds	r1, #16
 800d43e:	f10a 0a08 	add.w	sl, sl, #8
 800d442:	9104      	str	r1, [sp, #16]
 800d444:	9903      	ldr	r1, [sp, #12]
 800d446:	3104      	adds	r1, #4
 800d448:	9103      	str	r1, [sp, #12]
 800d44a:	9902      	ldr	r1, [sp, #8]
 800d44c:	3110      	adds	r1, #16
 800d44e:	9102      	str	r1, [sp, #8]
 800d450:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d452:	428f      	cmp	r7, r1
 800d454:	f000 8174 	beq.w	800d740 <st_sssa8_ch_convolve_dw+0x1698>
 800d458:	9907      	ldr	r1, [sp, #28]
 800d45a:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800d45e:	f851 c002 	ldr.w	ip, [r1, r2]
 800d462:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d464:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800d468:	f852 e001 	ldr.w	lr, [r2, r1]
 800d46c:	49b3      	ldr	r1, [pc, #716]	; (800d73c <st_sssa8_ch_convolve_dw+0x1694>)
 800d46e:	ea0e 0101 	and.w	r1, lr, r1
 800d472:	ea41 411c 	orr.w	r1, r1, ip, lsr #16
 800d476:	fa1f fc8c 	uxth.w	ip, ip
 800d47a:	ea4c 4e0e 	orr.w	lr, ip, lr, lsl #16
 800d47e:	fa25 fc8e 	sxtab16	ip, r5, lr
 800d482:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800d486:	fa25 fe9e 	sxtab16	lr, r5, lr, ror #8
 800d48a:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800d48e:	f857 4c0c 	ldr.w	r4, [r7, #-12]
 800d492:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800d496:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800d49a:	f857 4c08 	ldr.w	r4, [r7, #-8]
 800d49e:	fa25 f881 	sxtab16	r8, r5, r1
 800d4a2:	fb20 4808 	smlad	r8, r0, r8, r4
 800d4a6:	fa25 f191 	sxtab16	r1, r5, r1, ror #8
 800d4aa:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800d4ae:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800d4b2:	fb20 4401 	smlad	r4, r0, r1, r4
 800d4b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d4b8:	48a0      	ldr	r0, [pc, #640]	; (800d73c <st_sssa8_ch_convolve_dw+0x1694>)
 800d4ba:	f852 9001 	ldr.w	r9, [r2, r1]
 800d4be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d4c0:	f852 b001 	ldr.w	fp, [r2, r1]
 800d4c4:	f853 1c38 	ldr.w	r1, [r3, #-56]
 800d4c8:	ea0b 0000 	and.w	r0, fp, r0
 800d4cc:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800d4d0:	fa1f f989 	uxth.w	r9, r9
 800d4d4:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800d4d8:	fa25 fb89 	sxtab16	fp, r5, r9
 800d4dc:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800d4e0:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800d4e4:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800d4e8:	fb21 ee09 	smlad	lr, r1, r9, lr
 800d4ec:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800d4f0:	fa25 f980 	sxtab16	r9, r5, r0
 800d4f4:	fb21 8809 	smlad	r8, r1, r9, r8
 800d4f8:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800d4fc:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800d500:	fb21 4400 	smlad	r4, r1, r0, r4
 800d504:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d506:	488d      	ldr	r0, [pc, #564]	; (800d73c <st_sssa8_ch_convolve_dw+0x1694>)
 800d508:	f852 9001 	ldr.w	r9, [r2, r1]
 800d50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d50e:	f852 b001 	ldr.w	fp, [r2, r1]
 800d512:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800d516:	ea0b 0000 	and.w	r0, fp, r0
 800d51a:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800d51e:	fa1f f989 	uxth.w	r9, r9
 800d522:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800d526:	fa25 fb89 	sxtab16	fp, r5, r9
 800d52a:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800d52e:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800d532:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800d536:	fb21 ee09 	smlad	lr, r1, r9, lr
 800d53a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800d53e:	fa25 f980 	sxtab16	r9, r5, r0
 800d542:	fb21 8809 	smlad	r8, r1, r9, r8
 800d546:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800d54a:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800d54e:	fb21 4400 	smlad	r4, r1, r0, r4
 800d552:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d554:	4879      	ldr	r0, [pc, #484]	; (800d73c <st_sssa8_ch_convolve_dw+0x1694>)
 800d556:	f852 9001 	ldr.w	r9, [r2, r1]
 800d55a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d55c:	f852 b001 	ldr.w	fp, [r2, r1]
 800d560:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800d564:	ea0b 0000 	and.w	r0, fp, r0
 800d568:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800d56c:	fa1f f989 	uxth.w	r9, r9
 800d570:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800d574:	fa25 fb89 	sxtab16	fp, r5, r9
 800d578:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800d57c:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800d580:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800d584:	fb21 ee09 	smlad	lr, r1, r9, lr
 800d588:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800d58c:	fa25 f980 	sxtab16	r9, r5, r0
 800d590:	fb21 8809 	smlad	r8, r1, r9, r8
 800d594:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800d598:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800d59c:	fb21 4100 	smlad	r1, r1, r0, r4
 800d5a0:	9808      	ldr	r0, [sp, #32]
 800d5a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d5a4:	5810      	ldr	r0, [r2, r0]
 800d5a6:	f833 9c08 	ldrh.w	r9, [r3, #-8]
 800d5aa:	b244      	sxtb	r4, r0
 800d5ac:	f833 bc06 	ldrh.w	fp, [r3, #-6]
 800d5b0:	1ba4      	subs	r4, r4, r6
 800d5b2:	fb19 cc04 	smlabb	ip, r9, r4, ip
 800d5b6:	f340 2407 	sbfx	r4, r0, #8, #8
 800d5ba:	1ba4      	subs	r4, r4, r6
 800d5bc:	fb1b ee04 	smlabb	lr, fp, r4, lr
 800d5c0:	f340 4407 	sbfx	r4, r0, #16, #8
 800d5c4:	ebc6 6020 	rsb	r0, r6, r0, asr #24
 800d5c8:	1ba4      	subs	r4, r4, r6
 800d5ca:	f833 6c04 	ldrh.w	r6, [r3, #-4]
 800d5ce:	fb16 8404 	smlabb	r4, r6, r4, r8
 800d5d2:	9405      	str	r4, [sp, #20]
 800d5d4:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 800d5d8:	fb14 1100 	smlabb	r1, r4, r0, r1
 800d5dc:	9106      	str	r1, [sp, #24]
 800d5de:	f9ba 1000 	ldrsh.w	r1, [sl]
 800d5e2:	2915      	cmp	r1, #21
 800d5e4:	f73f aeb4 	bgt.w	800d350 <st_sssa8_ch_convolve_dw+0x12a8>
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	dd63      	ble.n	800d6b4 <st_sssa8_ch_convolve_dw+0x160c>
 800d5ec:	9804      	ldr	r0, [sp, #16]
 800d5ee:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d5f2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d5f6:	f10a 0b02 	add.w	fp, sl, #2
 800d5fa:	f850 4b04 	ldr.w	r4, [r0], #4
 800d5fe:	f858 9b04 	ldr.w	r9, [r8], #4
 800d602:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800d606:	fa4c f101 	asr.w	r1, ip, r1
 800d60a:	f301 0107 	ssat	r1, #8, r1
 800d60e:	9c03      	ldr	r4, [sp, #12]
 800d610:	f804 1b01 	strb.w	r1, [r4], #1
 800d614:	f9bb 1000 	ldrsh.w	r1, [fp]
 800d618:	2915      	cmp	r1, #21
 800d61a:	f73f aeb7 	bgt.w	800d38c <st_sssa8_ch_convolve_dw+0x12e4>
 800d61e:	2900      	cmp	r1, #0
 800d620:	dd7a      	ble.n	800d718 <st_sssa8_ch_convolve_dw+0x1670>
 800d622:	f8d8 c000 	ldr.w	ip, [r8]
 800d626:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	9e04      	ldr	r6, [sp, #16]
 800d62e:	fb5e c000 	smmla	r0, lr, r0, ip
 800d632:	4108      	asrs	r0, r1
 800d634:	9902      	ldr	r1, [sp, #8]
 800d636:	f106 0908 	add.w	r9, r6, #8
 800d63a:	f101 0c08 	add.w	ip, r1, #8
 800d63e:	f10a 0104 	add.w	r1, sl, #4
 800d642:	f300 0007 	ssat	r0, #8, r0
 800d646:	7020      	strb	r0, [r4, #0]
 800d648:	f9b1 1000 	ldrsh.w	r1, [r1]
 800d64c:	9803      	ldr	r0, [sp, #12]
 800d64e:	2915      	cmp	r1, #21
 800d650:	f100 0402 	add.w	r4, r0, #2
 800d654:	f73f aebb 	bgt.w	800d3ce <st_sssa8_ch_convolve_dw+0x1326>
 800d658:	2900      	cmp	r1, #0
 800d65a:	dd4b      	ble.n	800d6f4 <st_sssa8_ch_convolve_dw+0x164c>
 800d65c:	9805      	ldr	r0, [sp, #20]
 800d65e:	9e02      	ldr	r6, [sp, #8]
 800d660:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800d664:	9804      	ldr	r0, [sp, #16]
 800d666:	f8d9 8000 	ldr.w	r8, [r9]
 800d66a:	f8dc c000 	ldr.w	ip, [ip]
 800d66e:	300c      	adds	r0, #12
 800d670:	fb5e cc08 	smmla	ip, lr, r8, ip
 800d674:	f10a 0e06 	add.w	lr, sl, #6
 800d678:	fa4c f101 	asr.w	r1, ip, r1
 800d67c:	f106 0c0c 	add.w	ip, r6, #12
 800d680:	f301 0107 	ssat	r1, #8, r1
 800d684:	7021      	strb	r1, [r4, #0]
 800d686:	9903      	ldr	r1, [sp, #12]
 800d688:	1ccc      	adds	r4, r1, #3
 800d68a:	f9be 1000 	ldrsh.w	r1, [lr]
 800d68e:	2915      	cmp	r1, #21
 800d690:	f73f aebe 	bgt.w	800d410 <st_sssa8_ch_convolve_dw+0x1368>
 800d694:	2900      	cmp	r1, #0
 800d696:	dd1d      	ble.n	800d6d4 <st_sssa8_ch_convolve_dw+0x162c>
 800d698:	9e06      	ldr	r6, [sp, #24]
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800d6a0:	f8dc c000 	ldr.w	ip, [ip]
 800d6a4:	fb5e c000 	smmla	r0, lr, r0, ip
 800d6a8:	fa40 f101 	asr.w	r1, r0, r1
 800d6ac:	f301 0107 	ssat	r1, #8, r1
 800d6b0:	7021      	strb	r1, [r4, #0]
 800d6b2:	e6bf      	b.n	800d434 <st_sssa8_ch_convolve_dw+0x138c>
 800d6b4:	f1c1 0101 	rsb	r1, r1, #1
 800d6b8:	f10a 0b02 	add.w	fp, sl, #2
 800d6bc:	fa0c f101 	lsl.w	r1, ip, r1
 800d6c0:	f301 011f 	ssat	r1, #32, r1
 800d6c4:	9804      	ldr	r0, [sp, #16]
 800d6c6:	f850 4b04 	ldr.w	r4, [r0], #4
 800d6ca:	fb51 f114 	smmulr	r1, r1, r4
 800d6ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d6d2:	e64e      	b.n	800d372 <st_sssa8_ch_convolve_dw+0x12ca>
 800d6d4:	f1c1 0101 	rsb	r1, r1, #1
 800d6d8:	9e06      	ldr	r6, [sp, #24]
 800d6da:	408e      	lsls	r6, r1
 800d6dc:	f306 011f 	ssat	r1, #32, r6
 800d6e0:	6800      	ldr	r0, [r0, #0]
 800d6e2:	fb51 f110 	smmulr	r1, r1, r0
 800d6e6:	f8dc 0000 	ldr.w	r0, [ip]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	f301 0107 	ssat	r1, #8, r1
 800d6f0:	7021      	strb	r1, [r4, #0]
 800d6f2:	e69f      	b.n	800d434 <st_sssa8_ch_convolve_dw+0x138c>
 800d6f4:	f1c1 0101 	rsb	r1, r1, #1
 800d6f8:	9805      	ldr	r0, [sp, #20]
 800d6fa:	f10a 0e06 	add.w	lr, sl, #6
 800d6fe:	4088      	lsls	r0, r1
 800d700:	f300 011f 	ssat	r1, #32, r0
 800d704:	9804      	ldr	r0, [sp, #16]
 800d706:	f8d9 8000 	ldr.w	r8, [r9]
 800d70a:	300c      	adds	r0, #12
 800d70c:	fb51 f118 	smmulr	r1, r1, r8
 800d710:	f8dc c000 	ldr.w	ip, [ip]
 800d714:	4461      	add	r1, ip
 800d716:	e66e      	b.n	800d3f6 <st_sssa8_ch_convolve_dw+0x134e>
 800d718:	f1c1 0101 	rsb	r1, r1, #1
 800d71c:	fa0e fe01 	lsl.w	lr, lr, r1
 800d720:	f10a 0104 	add.w	r1, sl, #4
 800d724:	f30e 0c1f 	ssat	ip, #32, lr
 800d728:	9e04      	ldr	r6, [sp, #16]
 800d72a:	6800      	ldr	r0, [r0, #0]
 800d72c:	f106 0908 	add.w	r9, r6, #8
 800d730:	fb5c f010 	smmulr	r0, ip, r0
 800d734:	f8d8 c000 	ldr.w	ip, [r8]
 800d738:	4460      	add	r0, ip
 800d73a:	e63a      	b.n	800d3b2 <st_sssa8_ch_convolve_dw+0x130a>
 800d73c:	ffff0000 	.word	0xffff0000
 800d740:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d742:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d744:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800d748:	4413      	add	r3, r2
 800d74a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800d74e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d750:	9383      	str	r3, [sp, #524]	; 0x20c
 800d752:	9504      	str	r5, [sp, #16]
 800d754:	e9dd 7228 	ldrd	r7, r2, [sp, #160]	; 0xa0
 800d758:	e9dd 3826 	ldrd	r3, r8, [sp, #152]	; 0x98
 800d75c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d75e:	2800      	cmp	r0, #0
 800d760:	f000 8147 	beq.w	800d9f2 <st_sssa8_ch_convolve_dw+0x194a>
 800d764:	9807      	ldr	r0, [sp, #28]
 800d766:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800d768:	f910 4008 	ldrsb.w	r4, [r0, r8]
 800d76c:	eb00 0608 	add.w	r6, r0, r8
 800d770:	f8b3 c000 	ldrh.w	ip, [r3]
 800d774:	6838      	ldr	r0, [r7, #0]
 800d776:	eba4 040b 	sub.w	r4, r4, fp
 800d77a:	fb1c 0404 	smlabb	r4, ip, r4, r0
 800d77e:	4630      	mov	r0, r6
 800d780:	f916 c005 	ldrsb.w	ip, [r6, r5]
 800d784:	442e      	add	r6, r5
 800d786:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800d78a:	ebac 0c0b 	sub.w	ip, ip, fp
 800d78e:	eba6 0e0b 	sub.w	lr, r6, fp
 800d792:	885e      	ldrh	r6, [r3, #2]
 800d794:	fb1c 4c06 	smlabb	ip, ip, r6, r4
 800d798:	f910 4015 	ldrsb.w	r4, [r0, r5, lsl #1]
 800d79c:	889e      	ldrh	r6, [r3, #4]
 800d79e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800d7a2:	eba4 040b 	sub.w	r4, r4, fp
 800d7a6:	fb16 c404 	smlabb	r4, r6, r4, ip
 800d7aa:	1946      	adds	r6, r0, r5
 800d7ac:	f910 c015 	ldrsb.w	ip, [r0, r5, lsl #1]
 800d7b0:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800d7b4:	ebac 0c0b 	sub.w	ip, ip, fp
 800d7b8:	eba6 0a0b 	sub.w	sl, r6, fp
 800d7bc:	88de      	ldrh	r6, [r3, #6]
 800d7be:	fb1e 4406 	smlabb	r4, lr, r6, r4
 800d7c2:	eb00 0645 	add.w	r6, r0, r5, lsl #1
 800d7c6:	8918      	ldrh	r0, [r3, #8]
 800d7c8:	fb1c 4000 	smlabb	r0, ip, r0, r4
 800d7cc:	1974      	adds	r4, r6, r5
 800d7ce:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800d7d2:	f914 4015 	ldrsb.w	r4, [r4, r5, lsl #1]
 800d7d6:	eba4 0e0b 	sub.w	lr, r4, fp
 800d7da:	895c      	ldrh	r4, [r3, #10]
 800d7dc:	fb1a 0404 	smlabb	r4, sl, r4, r0
 800d7e0:	f916 0015 	ldrsb.w	r0, [r6, r5, lsl #1]
 800d7e4:	f916 6025 	ldrsb.w	r6, [r6, r5, lsl #2]
 800d7e8:	eba0 000b 	sub.w	r0, r0, fp
 800d7ec:	eba6 060b 	sub.w	r6, r6, fp
 800d7f0:	fb10 400c 	smlabb	r0, r0, ip, r4
 800d7f4:	89dc      	ldrh	r4, [r3, #14]
 800d7f6:	f9b9 c000 	ldrsh.w	ip, [r9]
 800d7fa:	fb1e 0004 	smlabb	r0, lr, r4, r0
 800d7fe:	f108 0401 	add.w	r4, r8, #1
 800d802:	f1bc 0f15 	cmp.w	ip, #21
 800d806:	fa1f fa84 	uxth.w	sl, r4
 800d80a:	8a1c      	ldrh	r4, [r3, #16]
 800d80c:	fb16 0604 	smlabb	r6, r6, r4, r0
 800d810:	f300 811e 	bgt.w	800da50 <st_sssa8_ch_convolve_dw+0x19a8>
 800d814:	f1bc 0f00 	cmp.w	ip, #0
 800d818:	f340 814e 	ble.w	800dab8 <st_sssa8_ch_convolve_dw+0x1a10>
 800d81c:	6808      	ldr	r0, [r1, #0]
 800d81e:	0076      	lsls	r6, r6, #1
 800d820:	6814      	ldr	r4, [r2, #0]
 800d822:	fb56 4600 	smmla	r6, r6, r0, r4
 800d826:	fa46 f00c 	asr.w	r0, r6, ip
 800d82a:	f300 0007 	ssat	r0, #8, r0
 800d82e:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800d830:	f806 0b01 	strb.w	r0, [r6], #1
 800d834:	9824      	ldr	r0, [sp, #144]	; 0x90
 800d836:	2800      	cmp	r0, #0
 800d838:	f000 80d7 	beq.w	800d9ea <st_sssa8_ch_convolve_dw+0x1942>
 800d83c:	f108 0002 	add.w	r0, r8, #2
 800d840:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800d842:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800d846:	b280      	uxth	r0, r0
 800d848:	9002      	str	r0, [sp, #8]
 800d84a:	9807      	ldr	r0, [sp, #28]
 800d84c:	eb00 040a 	add.w	r4, r0, sl
 800d850:	f910 000a 	ldrsb.w	r0, [r0, sl]
 800d854:	eba0 0c0b 	sub.w	ip, r0, fp
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800d85e:	eb04 0e05 	add.w	lr, r4, r5
 800d862:	f914 c005 	ldrsb.w	ip, [r4, r5]
 800d866:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800d86a:	ebac 0c0b 	sub.w	ip, ip, fp
 800d86e:	ebae 080b 	sub.w	r8, lr, fp
 800d872:	f8b3 e014 	ldrh.w	lr, [r3, #20]
 800d876:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800d87a:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800d87e:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800d882:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800d886:	ebae 0e0b 	sub.w	lr, lr, fp
 800d88a:	fb1e 000c 	smlabb	r0, lr, ip, r0
 800d88e:	eb04 0c05 	add.w	ip, r4, r5
 800d892:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800d896:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800d89a:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800d89e:	ebae 0e0b 	sub.w	lr, lr, fp
 800d8a2:	ebac 0a0b 	sub.w	sl, ip, fp
 800d8a6:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800d8aa:	fb18 0c0c 	smlabb	ip, r8, ip, r0
 800d8ae:	8b58      	ldrh	r0, [r3, #26]
 800d8b0:	fb1e c000 	smlabb	r0, lr, r0, ip
 800d8b4:	eb04 0c05 	add.w	ip, r4, r5
 800d8b8:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
 800d8bc:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800d8c0:	fb1a 0e0e 	smlabb	lr, sl, lr, r0
 800d8c4:	f914 0015 	ldrsb.w	r0, [r4, r5, lsl #1]
 800d8c8:	ebac 080b 	sub.w	r8, ip, fp
 800d8cc:	f914 c025 	ldrsb.w	ip, [r4, r5, lsl #2]
 800d8d0:	eba0 000b 	sub.w	r0, r0, fp
 800d8d4:	8bdc      	ldrh	r4, [r3, #30]
 800d8d6:	ebac 0c0b 	sub.w	ip, ip, fp
 800d8da:	fb10 e004 	smlabb	r0, r0, r4, lr
 800d8de:	8c1c      	ldrh	r4, [r3, #32]
 800d8e0:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
 800d8e4:	fb18 0004 	smlabb	r0, r8, r4, r0
 800d8e8:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 800d8ea:	f1be 0f15 	cmp.w	lr, #21
 800d8ee:	fb1c 0c04 	smlabb	ip, ip, r4, r0
 800d8f2:	f300 80ce 	bgt.w	800da92 <st_sssa8_ch_convolve_dw+0x19ea>
 800d8f6:	f1be 0f00 	cmp.w	lr, #0
 800d8fa:	f340 80f6 	ble.w	800daea <st_sssa8_ch_convolve_dw+0x1a42>
 800d8fe:	6848      	ldr	r0, [r1, #4]
 800d900:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d904:	6854      	ldr	r4, [r2, #4]
 800d906:	fb5c 4c00 	smmla	ip, ip, r0, r4
 800d90a:	fa4c f00e 	asr.w	r0, ip, lr
 800d90e:	f300 0007 	ssat	r0, #8, r0
 800d912:	f806 0b01 	strb.w	r0, [r6], #1
 800d916:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d918:	2802      	cmp	r0, #2
 800d91a:	d066      	beq.n	800d9ea <st_sssa8_ch_convolve_dw+0x1942>
 800d91c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d920:	9d07      	ldr	r5, [sp, #28]
 800d922:	9f02      	ldr	r7, [sp, #8]
 800d924:	f8b3 e024 	ldrh.w	lr, [r3, #36]	; 0x24
 800d928:	19e8      	adds	r0, r5, r7
 800d92a:	57ef      	ldrsb	r7, [r5, r7]
 800d92c:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800d92e:	eba7 070b 	sub.w	r7, r7, fp
 800d932:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
 800d936:	fb1e c707 	smlabb	r7, lr, r7, ip
 800d93a:	eb00 0e05 	add.w	lr, r0, r5
 800d93e:	f910 c005 	ldrsb.w	ip, [r0, r5]
 800d942:	2c15      	cmp	r4, #21
 800d944:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800d948:	ebac 0c0b 	sub.w	ip, ip, fp
 800d94c:	ebae 080b 	sub.w	r8, lr, fp
 800d950:	f8b3 e026 	ldrh.w	lr, [r3, #38]	; 0x26
 800d954:	fb1e 7c0c 	smlabb	ip, lr, ip, r7
 800d958:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800d95c:	f8b3 e028 	ldrh.w	lr, [r3, #40]	; 0x28
 800d960:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800d964:	eba7 070b 	sub.w	r7, r7, fp
 800d968:	fb1e c707 	smlabb	r7, lr, r7, ip
 800d96c:	eb00 0c05 	add.w	ip, r0, r5
 800d970:	f8b3 e02c 	ldrh.w	lr, [r3, #44]	; 0x2c
 800d974:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800d978:	ebac 090b 	sub.w	r9, ip, fp
 800d97c:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800d980:	fb1c 7c08 	smlabb	ip, ip, r8, r7
 800d984:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800d988:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800d98c:	eba7 070b 	sub.w	r7, r7, fp
 800d990:	fb1e c707 	smlabb	r7, lr, r7, ip
 800d994:	eb00 0c05 	add.w	ip, r0, r5
 800d998:	f910 e015 	ldrsb.w	lr, [r0, r5, lsl #1]
 800d99c:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800d9a0:	ebae 0e0b 	sub.w	lr, lr, fp
 800d9a4:	ebac 080b 	sub.w	r8, ip, fp
 800d9a8:	f8b3 c02e 	ldrh.w	ip, [r3, #46]	; 0x2e
 800d9ac:	fb1c 7c09 	smlabb	ip, ip, r9, r7
 800d9b0:	f910 7025 	ldrsb.w	r7, [r0, r5, lsl #2]
 800d9b4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800d9b6:	eba7 070b 	sub.w	r7, r7, fp
 800d9ba:	fb10 c00e 	smlabb	r0, r0, lr, ip
 800d9be:	f8b3 c032 	ldrh.w	ip, [r3, #50]	; 0x32
 800d9c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d9c4:	fb1c 0008 	smlabb	r0, ip, r8, r0
 800d9c8:	fb13 0007 	smlabb	r0, r3, r7, r0
 800d9cc:	dd54      	ble.n	800da78 <st_sssa8_ch_convolve_dw+0x19d0>
 800d9ce:	688b      	ldr	r3, [r1, #8]
 800d9d0:	2501      	movs	r5, #1
 800d9d2:	6891      	ldr	r1, [r2, #8]
 800d9d4:	1ea2      	subs	r2, r4, #2
 800d9d6:	3c01      	subs	r4, #1
 800d9d8:	fa05 f202 	lsl.w	r2, r5, r2
 800d9dc:	fb50 2303 	smmla	r3, r0, r3, r2
 800d9e0:	4123      	asrs	r3, r4
 800d9e2:	440b      	add	r3, r1
 800d9e4:	f303 0307 	ssat	r3, #8, r3
 800d9e8:	7033      	strb	r3, [r6, #0]
 800d9ea:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800d9ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9ee:	4413      	add	r3, r2
 800d9f0:	9383      	str	r3, [sp, #524]	; 0x20c
 800d9f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d9f4:	9907      	ldr	r1, [sp, #28]
 800d9f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9f8:	4411      	add	r1, r2
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	9107      	str	r1, [sp, #28]
 800d9fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 800da00:	b21b      	sxth	r3, r3
 800da02:	4411      	add	r1, r2
 800da04:	9318      	str	r3, [sp, #96]	; 0x60
 800da06:	9110      	str	r1, [sp, #64]	; 0x40
 800da08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da0a:	4411      	add	r1, r2
 800da0c:	910f      	str	r1, [sp, #60]	; 0x3c
 800da0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800da10:	4411      	add	r1, r2
 800da12:	910d      	str	r1, [sp, #52]	; 0x34
 800da14:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da16:	4411      	add	r1, r2
 800da18:	910c      	str	r1, [sp, #48]	; 0x30
 800da1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da1c:	4411      	add	r1, r2
 800da1e:	910b      	str	r1, [sp, #44]	; 0x2c
 800da20:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da22:	4411      	add	r1, r2
 800da24:	910a      	str	r1, [sp, #40]	; 0x28
 800da26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da28:	4411      	add	r1, r2
 800da2a:	9109      	str	r1, [sp, #36]	; 0x24
 800da2c:	9908      	ldr	r1, [sp, #32]
 800da2e:	4411      	add	r1, r2
 800da30:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800da32:	4293      	cmp	r3, r2
 800da34:	9108      	str	r1, [sp, #32]
 800da36:	f6ff ac75 	blt.w	800d324 <st_sssa8_ch_convolve_dw+0x127c>
 800da3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da3c:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800da3e:	3301      	adds	r3, #1
 800da40:	9d04      	ldr	r5, [sp, #16]
 800da42:	b21b      	sxth	r3, r3
 800da44:	428b      	cmp	r3, r1
 800da46:	9317      	str	r3, [sp, #92]	; 0x5c
 800da48:	f6ff ac48 	blt.w	800d2dc <st_sssa8_ch_convolve_dw+0x1234>
 800da4c:	f7fe bdf9 	b.w	800c642 <st_sssa8_ch_convolve_dw+0x59a>
 800da50:	f1ac 0e02 	sub.w	lr, ip, #2
 800da54:	2001      	movs	r0, #1
 800da56:	f10c 3cff 	add.w	ip, ip, #4294967295
 800da5a:	680c      	ldr	r4, [r1, #0]
 800da5c:	fa00 fe0e 	lsl.w	lr, r0, lr
 800da60:	6810      	ldr	r0, [r2, #0]
 800da62:	fb56 e404 	smmla	r4, r6, r4, lr
 800da66:	fa44 f40c 	asr.w	r4, r4, ip
 800da6a:	4420      	add	r0, r4
 800da6c:	f300 0007 	ssat	r0, #8, r0
 800da70:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800da72:	f806 0b01 	strb.w	r0, [r6], #1
 800da76:	e6dd      	b.n	800d834 <st_sssa8_ch_convolve_dw+0x178c>
 800da78:	2c00      	cmp	r4, #0
 800da7a:	dd46      	ble.n	800db0a <st_sssa8_ch_convolve_dw+0x1a62>
 800da7c:	688b      	ldr	r3, [r1, #8]
 800da7e:	0040      	lsls	r0, r0, #1
 800da80:	6892      	ldr	r2, [r2, #8]
 800da82:	fb50 2003 	smmla	r0, r0, r3, r2
 800da86:	fa40 f304 	asr.w	r3, r0, r4
 800da8a:	f303 0307 	ssat	r3, #8, r3
 800da8e:	7033      	strb	r3, [r6, #0]
 800da90:	e7ab      	b.n	800d9ea <st_sssa8_ch_convolve_dw+0x1942>
 800da92:	f1ae 0802 	sub.w	r8, lr, #2
 800da96:	2001      	movs	r0, #1
 800da98:	f10e 3eff 	add.w	lr, lr, #4294967295
 800da9c:	684c      	ldr	r4, [r1, #4]
 800da9e:	fa00 f808 	lsl.w	r8, r0, r8
 800daa2:	6850      	ldr	r0, [r2, #4]
 800daa4:	fb5c 8404 	smmla	r4, ip, r4, r8
 800daa8:	fa44 f40e 	asr.w	r4, r4, lr
 800daac:	4420      	add	r0, r4
 800daae:	f300 0007 	ssat	r0, #8, r0
 800dab2:	f806 0b01 	strb.w	r0, [r6], #1
 800dab6:	e72e      	b.n	800d916 <st_sssa8_ch_convolve_dw+0x186e>
 800dab8:	f1cc 0c01 	rsb	ip, ip, #1
 800dabc:	fa06 f40c 	lsl.w	r4, r6, ip
 800dac0:	f304 041f 	ssat	r4, #32, r4
 800dac4:	6808      	ldr	r0, [r1, #0]
 800dac6:	fb54 f410 	smmulr	r4, r4, r0
 800daca:	6810      	ldr	r0, [r2, #0]
 800dacc:	4420      	add	r0, r4
 800dace:	f300 0007 	ssat	r0, #8, r0
 800dad2:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800dad4:	f806 0b01 	strb.w	r0, [r6], #1
 800dad8:	e6ac      	b.n	800d834 <st_sssa8_ch_convolve_dw+0x178c>
 800dada:	4698      	mov	r8, r3
 800dadc:	9f7e      	ldr	r7, [sp, #504]	; 0x1f8
 800dade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dae0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dae2:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800dae6:	9986      	ldr	r1, [sp, #536]	; 0x218
 800dae8:	e638      	b.n	800d75c <st_sssa8_ch_convolve_dw+0x16b4>
 800daea:	f1ce 0e01 	rsb	lr, lr, #1
 800daee:	fa0c f40e 	lsl.w	r4, ip, lr
 800daf2:	f304 041f 	ssat	r4, #32, r4
 800daf6:	6848      	ldr	r0, [r1, #4]
 800daf8:	fb54 f410 	smmulr	r4, r4, r0
 800dafc:	6850      	ldr	r0, [r2, #4]
 800dafe:	4420      	add	r0, r4
 800db00:	f300 0007 	ssat	r0, #8, r0
 800db04:	f806 0b01 	strb.w	r0, [r6], #1
 800db08:	e705      	b.n	800d916 <st_sssa8_ch_convolve_dw+0x186e>
 800db0a:	f1c4 0401 	rsb	r4, r4, #1
 800db0e:	fa00 f304 	lsl.w	r3, r0, r4
 800db12:	f303 031f 	ssat	r3, #32, r3
 800db16:	6889      	ldr	r1, [r1, #8]
 800db18:	fb53 f311 	smmulr	r3, r3, r1
 800db1c:	6892      	ldr	r2, [r2, #8]
 800db1e:	4413      	add	r3, r2
 800db20:	f303 0307 	ssat	r3, #8, r3
 800db24:	7033      	strb	r3, [r6, #0]
 800db26:	e760      	b.n	800d9ea <st_sssa8_ch_convolve_dw+0x1942>
 800db28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800db2a:	2400      	movs	r4, #0
 800db2c:	f8dd 81f8 	ldr.w	r8, [sp, #504]	; 0x1f8
 800db30:	9304      	str	r3, [sp, #16]
 800db32:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800db36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800db38:	9f86      	ldr	r7, [sp, #536]	; 0x218
 800db3a:	f7ff b940 	b.w	800cdbe <st_sssa8_ch_convolve_dw+0xd16>
 800db3e:	bf00      	nop

0800db40 <st_sssa8_ch_convolve_rank1upd>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	b085      	sub	sp, #20
 800db46:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800db4a:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800db4e:	fb13 f304 	smulbb	r3, r3, r4
 800db52:	fb13 f500 	smulbb	r5, r3, r0
 800db56:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800db5a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800db5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db60:	2a00      	cmp	r2, #0
 800db62:	d074      	beq.n	800dc4e <st_sssa8_ch_convolve_rank1upd+0x10e>
 800db64:	b2ad      	uxth	r5, r5
 800db66:	f1aa 0a04 	sub.w	sl, sl, #4
 800db6a:	460c      	mov	r4, r1
 800db6c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800db70:	ea4f 0995 	mov.w	r9, r5, lsr #2
 800db74:	f005 0503 	and.w	r5, r5, #3
 800db78:	449a      	add	sl, r3
 800db7a:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 800db7e:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 800db82:	1e69      	subs	r1, r5, #1
 800db84:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800db88:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800db8c:	b289      	uxth	r1, r1
 800db8e:	9100      	str	r1, [sp, #0]
 800db90:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800db94:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800db98:	b292      	uxth	r2, r2
 800db9a:	9202      	str	r2, [sp, #8]
 800db9c:	025a      	lsls	r2, r3, #9
 800db9e:	3301      	adds	r3, #1
 800dba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dba4:	025b      	lsls	r3, r3, #9
 800dba6:	9203      	str	r2, [sp, #12]
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800dbae:	d953      	bls.n	800dc58 <st_sssa8_ch_convolve_rank1upd+0x118>
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	eb04 0c03 	add.w	ip, r4, r3
 800dbbc:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f851 3b04 	ldr.w	r3, [r1], #4
 800dbc6:	fa2f fe83 	sxtb16	lr, r3
 800dbca:	4281      	cmp	r1, r0
 800dbcc:	ea4f 2333 	mov.w	r3, r3, ror #8
 800dbd0:	fa92 f21e 	qadd16	r2, r2, lr
 800dbd4:	fa2f f383 	sxtb16	r3, r3
 800dbd8:	fa92 f213 	qadd16	r2, r2, r3
 800dbdc:	d1f1      	bne.n	800dbc2 <st_sssa8_ch_convolve_rank1upd+0x82>
 800dbde:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800dbe2:	b213      	sxth	r3, r2
 800dbe4:	4560      	cmp	r0, ip
 800dbe6:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800dbea:	4416      	add	r6, r2
 800dbec:	d1e6      	bne.n	800dbbc <st_sssa8_ch_convolve_rank1upd+0x7c>
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	18e1      	adds	r1, r4, r3
 800dbf2:	9c02      	ldr	r4, [sp, #8]
 800dbf4:	b374      	cbz	r4, 800dc54 <st_sssa8_ch_convolve_rank1upd+0x114>
 800dbf6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f851 3b04 	ldr.w	r3, [r1], #4
 800dc00:	fa2f f083 	sxtb16	r0, r3
 800dc04:	428c      	cmp	r4, r1
 800dc06:	ea4f 2333 	mov.w	r3, r3, ror #8
 800dc0a:	fa92 f210 	qadd16	r2, r2, r0
 800dc0e:	fa2f f383 	sxtb16	r3, r3
 800dc12:	fa92 f213 	qadd16	r2, r2, r3
 800dc16:	d1f1      	bne.n	800dbfc <st_sssa8_ch_convolve_rank1upd+0xbc>
 800dc18:	b213      	sxth	r3, r2
 800dc1a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800dc1e:	441e      	add	r6, r3
 800dc20:	b16d      	cbz	r5, 800dc3e <st_sssa8_ch_convolve_rank1upd+0xfe>
 800dc22:	f994 3000 	ldrsb.w	r3, [r4]
 800dc26:	441e      	add	r6, r3
 800dc28:	9b00      	ldr	r3, [sp, #0]
 800dc2a:	b13b      	cbz	r3, 800dc3c <st_sssa8_ch_convolve_rank1upd+0xfc>
 800dc2c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800dc30:	2d02      	cmp	r5, #2
 800dc32:	441e      	add	r6, r3
 800dc34:	d002      	beq.n	800dc3c <st_sssa8_ch_convolve_rank1upd+0xfc>
 800dc36:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800dc3a:	441e      	add	r6, r3
 800dc3c:	442c      	add	r4, r5
 800dc3e:	f858 3b04 	ldr.w	r3, [r8], #4
 800dc42:	fb0b 3616 	mls	r6, fp, r6, r3
 800dc46:	45b8      	cmp	r8, r7
 800dc48:	f84a 6f04 	str.w	r6, [sl, #4]!
 800dc4c:	d1ad      	bne.n	800dbaa <st_sssa8_ch_convolve_rank1upd+0x6a>
 800dc4e:	b005      	add	sp, #20
 800dc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc54:	460c      	mov	r4, r1
 800dc56:	e7e3      	b.n	800dc20 <st_sssa8_ch_convolve_rank1upd+0xe0>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	2600      	movs	r6, #0
 800dc5c:	464c      	mov	r4, r9
 800dc5e:	e7c9      	b.n	800dbf4 <st_sssa8_ch_convolve_rank1upd+0xb4>

0800dc60 <st_sssa8_ch_convolve_WeightsPrefetch>:
 800dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	fb02 fc01 	mul.w	ip, r2, r1
 800dc6a:	f06f 0e09 	mvn.w	lr, #9
 800dc6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800dc70:	fb03 fc0c 	mul.w	ip, r3, ip
 800dc74:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800dc78:	686e      	ldr	r6, [r5, #4]
 800dc7a:	fb04 fc0c 	mul.w	ip, r4, ip
 800dc7e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800dc82:	fb0e 6e01 	mla	lr, lr, r1, r6
 800dc86:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 800dc8a:	ebbe 0f4c 	cmp.w	lr, ip, lsl #1
 800dc8e:	db15      	blt.n	800dcbc <st_sssa8_ch_convolve_WeightsPrefetch+0x5c>
 800dc90:	fb02 fc03 	mul.w	ip, r2, r3
 800dc94:	2f01      	cmp	r7, #1
 800dc96:	fb0c fe04 	mul.w	lr, ip, r4
 800dc9a:	d113      	bne.n	800dcc4 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800dc9c:	f1b8 0f01 	cmp.w	r8, #1
 800dca0:	4626      	mov	r6, r4
 800dca2:	d10f      	bne.n	800dcc4 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800dca4:	f8cd e000 	str.w	lr, [sp]
 800dca8:	4663      	mov	r3, ip
 800dcaa:	682c      	ldr	r4, [r5, #0]
 800dcac:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800dcb6:	9401      	str	r4, [sp, #4]
 800dcb8:	f002 fb18 	bl	80102ec <st_sssa8_ch_fullW_prefetch>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	b002      	add	sp, #8
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	fb03 f604 	mul.w	r6, r3, r4
 800dcc8:	4694      	mov	ip, r2
 800dcca:	e7eb      	b.n	800dca4 <st_sssa8_ch_convolve_WeightsPrefetch+0x44>

0800dccc <st_sssa8_ch_convolve>:
 800dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd0:	b09f      	sub	sp, #124	; 0x7c
 800dcd2:	4699      	mov	r9, r3
 800dcd4:	4683      	mov	fp, r0
 800dcd6:	f8bd 60a4 	ldrh.w	r6, [sp, #164]	; 0xa4
 800dcda:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800dcdc:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 800dce0:	921d      	str	r2, [sp, #116]	; 0x74
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	9117      	str	r1, [sp, #92]	; 0x5c
 800dce6:	ebc6 7186 	rsb	r1, r6, r6, lsl #30
 800dcea:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 800dcee:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	9212      	str	r2, [sp, #72]	; 0x48
 800dcf6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800dcfa:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 800dcfe:	9316      	str	r3, [sp, #88]	; 0x58
 800dd00:	9214      	str	r2, [sp, #80]	; 0x50
 800dd02:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 800dd06:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800dd0a:	9213      	str	r2, [sp, #76]	; 0x4c
 800dd0c:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 800dd10:	f8bd a0ac 	ldrh.w	sl, [sp, #172]	; 0xac
 800dd14:	9215      	str	r2, [sp, #84]	; 0x54
 800dd16:	f99d 20d4 	ldrsb.w	r2, [sp, #212]	; 0xd4
 800dd1a:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800dd1c:	921a      	str	r2, [sp, #104]	; 0x68
 800dd1e:	f8bd 20e0 	ldrh.w	r2, [sp, #224]	; 0xe0
 800dd22:	f99d 50d8 	ldrsb.w	r5, [sp, #216]	; 0xd8
 800dd26:	921b      	str	r2, [sp, #108]	; 0x6c
 800dd28:	f8bd 20e4 	ldrh.w	r2, [sp, #228]	; 0xe4
 800dd2c:	921c      	str	r2, [sp, #112]	; 0x70
 800dd2e:	00b2      	lsls	r2, r6, #2
 800dd30:	9218      	str	r2, [sp, #96]	; 0x60
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	f000 80a7 	beq.w	800de86 <st_sssa8_ch_convolve+0x1ba>
 800dd38:	46a4      	mov	ip, r4
 800dd3a:	0072      	lsls	r2, r6, #1
 800dd3c:	3104      	adds	r1, #4
 800dd3e:	2701      	movs	r7, #1
 800dd40:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800dd44:	9219      	str	r2, [sp, #100]	; 0x64
 800dd46:	f93c 2b02 	ldrsh.w	r2, [ip], #2
 800dd4a:	1e50      	subs	r0, r2, #1
 800dd4c:	fa07 fe02 	lsl.w	lr, r7, r2
 800dd50:	fa05 f202 	lsl.w	r2, r5, r2
 800dd54:	b280      	uxth	r0, r0
 800dd56:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800dd5a:	2814      	cmp	r0, #20
 800dd5c:	d84e      	bhi.n	800ddfc <st_sssa8_ch_convolve+0x130>
 800dd5e:	4564      	cmp	r4, ip
 800dd60:	f841 2c04 	str.w	r2, [r1, #-4]
 800dd64:	f101 0104 	add.w	r1, r1, #4
 800dd68:	d1ed      	bne.n	800dd46 <st_sssa8_ch_convolve+0x7a>
 800dd6a:	4641      	mov	r1, r8
 800dd6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd6e:	f06f 0009 	mvn.w	r0, #9
 800dd72:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800dd74:	1aa4      	subs	r4, r4, r2
 800dd76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dd78:	fb00 5006 	mla	r0, r0, r6, r5
 800dd7c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800dd7e:	1a89      	subs	r1, r1, r2
 800dd80:	fb06 f209 	mul.w	r2, r6, r9
 800dd84:	fb03 f202 	mul.w	r2, r3, r2
 800dd88:	fb0a f202 	mul.w	r2, sl, r2
 800dd8c:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800dd90:	fb15 f209 	smulbb	r2, r5, r9
 800dd94:	bfac      	ite	ge
 800dd96:	4640      	movge	r0, r8
 800dd98:	2000      	movlt	r0, #0
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	d108      	bne.n	800ddb2 <st_sssa8_ch_convolve+0xe6>
 800dda0:	f1ba 0f01 	cmp.w	sl, #1
 800dda4:	d105      	bne.n	800ddb2 <st_sssa8_ch_convolve+0xe6>
 800dda6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800dda8:	2f01      	cmp	r7, #1
 800ddaa:	d102      	bne.n	800ddb2 <st_sssa8_ch_convolve+0xe6>
 800ddac:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ddae:	2f01      	cmp	r7, #1
 800ddb0:	d04f      	beq.n	800de52 <st_sssa8_ch_convolve+0x186>
 800ddb2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ddb4:	2d01      	cmp	r5, #1
 800ddb6:	d128      	bne.n	800de0a <st_sssa8_ch_convolve+0x13e>
 800ddb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ddba:	2d01      	cmp	r5, #1
 800ddbc:	d125      	bne.n	800de0a <st_sssa8_ch_convolve+0x13e>
 800ddbe:	910c      	str	r1, [sp, #48]	; 0x30
 800ddc0:	9401      	str	r4, [sp, #4]
 800ddc2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ddc4:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800ddc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ddcc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800ddce:	9307      	str	r3, [sp, #28]
 800ddd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ddd2:	9400      	str	r4, [sp, #0]
 800ddd4:	9306      	str	r3, [sp, #24]
 800ddd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dddc:	e9cd 800d 	strd	r8, r0, [sp, #52]	; 0x34
 800dde0:	e9cd a10a 	strd	sl, r1, [sp, #40]	; 0x28
 800dde4:	9304      	str	r3, [sp, #16]
 800dde6:	4658      	mov	r0, fp
 800dde8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800ddea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ddec:	e9cd 6902 	strd	r6, r9, [sp, #8]
 800ddf0:	f003 f8c8 	bl	8010f84 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	b01f      	add	sp, #124	; 0x7c
 800ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfc:	4564      	cmp	r4, ip
 800ddfe:	f841 5c04 	str.w	r5, [r1, #-4]
 800de02:	f101 0104 	add.w	r1, r1, #4
 800de06:	d19e      	bne.n	800dd46 <st_sssa8_ch_convolve+0x7a>
 800de08:	e7af      	b.n	800dd6a <st_sssa8_ch_convolve+0x9e>
 800de0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800de0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800de10:	910e      	str	r1, [sp, #56]	; 0x38
 800de12:	9309      	str	r3, [sp, #36]	; 0x24
 800de14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de16:	991a      	ldr	r1, [sp, #104]	; 0x68
 800de18:	9308      	str	r3, [sp, #32]
 800de1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de1c:	9010      	str	r0, [sp, #64]	; 0x40
 800de1e:	4658      	mov	r0, fp
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de24:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800de26:	9306      	str	r3, [sp, #24]
 800de28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de2a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800de2e:	9305      	str	r3, [sp, #20]
 800de30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800de36:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800de38:	e9cd a10c 	strd	sl, r1, [sp, #48]	; 0x30
 800de3c:	e9cd 9303 	strd	r9, r3, [sp, #12]
 800de40:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800de42:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800de44:	9400      	str	r4, [sp, #0]
 800de46:	f003 fe8d 	bl	8011b64 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>
 800de4a:	2000      	movs	r0, #0
 800de4c:	b01f      	add	sp, #124	; 0x7c
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de54:	462a      	mov	r2, r5
 800de56:	9401      	str	r4, [sp, #4]
 800de58:	fb03 f202 	mul.w	r2, r3, r2
 800de5c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800de5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800de60:	9106      	str	r1, [sp, #24]
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800de66:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800de68:	f8cd 9010 	str.w	r9, [sp, #16]
 800de6c:	9400      	str	r4, [sp, #0]
 800de6e:	e9cd 8007 	strd	r8, r0, [sp, #28]
 800de72:	e9cd 2602 	strd	r2, r6, [sp, #8]
 800de76:	4658      	mov	r0, fp
 800de78:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800de7a:	f002 fa77 	bl	801036c <st_sssa8_ch_nn_mat_mult_nt_t>
 800de7e:	2000      	movs	r0, #0
 800de80:	b01f      	add	sp, #124	; 0x7c
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de86:	9619      	str	r6, [sp, #100]	; 0x64
 800de88:	e770      	b.n	800dd6c <st_sssa8_ch_convolve+0xa0>
 800de8a:	bf00      	nop

0800de8c <st_sssa8_ch_convolve_startNN>:
 800de8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de90:	ed2d 8b08 	vpush	{d8-d11}
 800de94:	b0cf      	sub	sp, #316	; 0x13c
 800de96:	469a      	mov	sl, r3
 800de98:	468b      	mov	fp, r1
 800de9a:	920a      	str	r2, [sp, #40]	; 0x28
 800de9c:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 800dea0:	f8bd 418c 	ldrh.w	r4, [sp, #396]	; 0x18c
 800dea4:	4611      	mov	r1, r2
 800dea6:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800dea8:	ee09 2a10 	vmov	s18, r2
 800deac:	9009      	str	r0, [sp, #36]	; 0x24
 800deae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800deb2:	f8bd 0188 	ldrh.w	r0, [sp, #392]	; 0x188
 800deb6:	f99d 81ac 	ldrsb.w	r8, [sp, #428]	; 0x1ac
 800deba:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800debe:	460a      	mov	r2, r1
 800dec0:	fb10 f304 	smulbb	r3, r0, r4
 800dec4:	9019      	str	r0, [sp, #100]	; 0x64
 800dec6:	f8bd 01b8 	ldrh.w	r0, [sp, #440]	; 0x1b8
 800deca:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800dece:	fb13 f30a 	smulbb	r3, r3, sl
 800ded2:	f99d 61b0 	ldrsb.w	r6, [sp, #432]	; 0x1b0
 800ded6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ded8:	b29b      	uxth	r3, r3
 800deda:	f8bd 01bc 	ldrh.w	r0, [sp, #444]	; 0x1bc
 800dede:	9420      	str	r4, [sp, #128]	; 0x80
 800dee0:	9315      	str	r3, [sp, #84]	; 0x54
 800dee2:	ebc1 7341 	rsb	r3, r1, r1, lsl #29
 800dee6:	f8bd 1190 	ldrh.w	r1, [sp, #400]	; 0x190
 800deea:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800deee:	9514      	str	r5, [sp, #80]	; 0x50
 800def0:	9116      	str	r1, [sp, #88]	; 0x58
 800def2:	f8bd 1194 	ldrh.w	r1, [sp, #404]	; 0x194
 800def6:	ee0a 3a10 	vmov	s20, r3
 800defa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800defe:	901f      	str	r0, [sp, #124]	; 0x7c
 800df00:	9121      	str	r1, [sp, #132]	; 0x84
 800df02:	f8bd 1198 	ldrh.w	r1, [sp, #408]	; 0x198
 800df06:	931d      	str	r3, [sp, #116]	; 0x74
 800df08:	910e      	str	r1, [sp, #56]	; 0x38
 800df0a:	f8bd 119c 	ldrh.w	r1, [sp, #412]	; 0x19c
 800df0e:	911b      	str	r1, [sp, #108]	; 0x6c
 800df10:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800df12:	2a00      	cmp	r2, #0
 800df14:	f000 866d 	beq.w	800ebf2 <st_sssa8_ch_convolve_startNN+0xd66>
 800df18:	1d18      	adds	r0, r3, #4
 800df1a:	2501      	movs	r5, #1
 800df1c:	0053      	lsls	r3, r2, #1
 800df1e:	eb01 0742 	add.w	r7, r1, r2, lsl #1
 800df22:	9318      	str	r3, [sp, #96]	; 0x60
 800df24:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800df28:	1e5a      	subs	r2, r3, #1
 800df2a:	fa05 f403 	lsl.w	r4, r5, r3
 800df2e:	fa06 f303 	lsl.w	r3, r6, r3
 800df32:	b292      	uxth	r2, r2
 800df34:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800df38:	2a14      	cmp	r2, #20
 800df3a:	d85b      	bhi.n	800dff4 <st_sssa8_ch_convolve_startNN+0x168>
 800df3c:	428f      	cmp	r7, r1
 800df3e:	f840 3c04 	str.w	r3, [r0, #-4]
 800df42:	f100 0004 	add.w	r0, r0, #4
 800df46:	d1ed      	bne.n	800df24 <st_sssa8_ch_convolve_startNN+0x98>
 800df48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df4a:	4639      	mov	r1, r7
 800df4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800df4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df50:	aa2e      	add	r2, sp, #184	; 0xb8
 800df52:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800df54:	a83a      	add	r0, sp, #232	; 0xe8
 800df56:	1acb      	subs	r3, r1, r3
 800df58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800df5a:	a944      	add	r1, sp, #272	; 0x110
 800df5c:	9438      	str	r4, [sp, #224]	; 0xe0
 800df5e:	931c      	str	r3, [sp, #112]	; 0x70
 800df60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df62:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800df66:	932f      	str	r3, [sp, #188]	; 0xbc
 800df68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df6a:	9537      	str	r5, [sp, #220]	; 0xdc
 800df6c:	9334      	str	r3, [sp, #208]	; 0xd0
 800df6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df70:	9333      	str	r3, [sp, #204]	; 0xcc
 800df72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df74:	9346      	str	r3, [sp, #280]	; 0x118
 800df76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df78:	9347      	str	r3, [sp, #284]	; 0x11c
 800df7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df7c:	9348      	str	r3, [sp, #288]	; 0x120
 800df7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df80:	9349      	str	r3, [sp, #292]	; 0x124
 800df82:	ab36      	add	r3, sp, #216	; 0xd8
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	ab32      	add	r3, sp, #200	; 0xc8
 800df88:	f001 f936 	bl	800f1f8 <ai_padding_opt_init>
 800df8c:	fb05 f304 	mul.w	r3, r5, r4
 800df90:	ee19 2a10 	vmov	r2, s18
 800df94:	9914      	ldr	r1, [sp, #80]	; 0x50
 800df96:	fb0a f303 	mul.w	r3, sl, r3
 800df9a:	ee19 0a10 	vmov	r0, s18
 800df9e:	fb02 f303 	mul.w	r3, r2, r3
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dfa8:	bfd4      	ite	le
 800dfaa:	ebc9 0203 	rsble	r2, r9, r3
 800dfae:	f5c9 52a0 	rsbgt	r2, r9, #5120	; 0x1400
 800dfb2:	fb0a f904 	mul.w	r9, sl, r4
 800dfb6:	fb09 f305 	mul.w	r3, r9, r5
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dfc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dfc2:	bfb8      	it	lt
 800dfc4:	3201      	addlt	r2, #1
 800dfc6:	ee09 3a90 	vmov	s19, r3
 800dfca:	fb00 f301 	mul.w	r3, r0, r1
 800dfce:	1054      	asrs	r4, r2, #1
 800dfd0:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800dfd4:	dc15      	bgt.n	800e002 <st_sssa8_ch_convolve_startNN+0x176>
 800dfd6:	f01a 0f03 	tst.w	sl, #3
 800dfda:	f040 8165 	bne.w	800e2a8 <st_sssa8_ch_convolve_startNN+0x41c>
 800dfde:	ee19 3a10 	vmov	r3, s18
 800dfe2:	460a      	mov	r2, r1
 800dfe4:	9860      	ldr	r0, [sp, #384]	; 0x180
 800dfe6:	ee19 1a90 	vmov	r1, s19
 800dfea:	f001 ff8f 	bl	800ff0c <st_int8_to16_dual_interleaved>
 800dfee:	2301      	movs	r3, #1
 800dff0:	932a      	str	r3, [sp, #168]	; 0xa8
 800dff2:	e008      	b.n	800e006 <st_sssa8_ch_convolve_startNN+0x17a>
 800dff4:	428f      	cmp	r7, r1
 800dff6:	f840 6c04 	str.w	r6, [r0, #-4]
 800dffa:	f100 0004 	add.w	r0, r0, #4
 800dffe:	d191      	bne.n	800df24 <st_sssa8_ch_convolve_startNN+0x98>
 800e000:	e7a2      	b.n	800df48 <st_sssa8_ch_convolve_startNN+0xbc>
 800e002:	2300      	movs	r3, #0
 800e004:	932a      	str	r3, [sp, #168]	; 0xa8
 800e006:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e008:	ee19 1a10 	vmov	r1, s18
 800e00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e00e:	fb02 f303 	mul.w	r3, r2, r3
 800e012:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e014:	fb01 2303 	mla	r3, r1, r3, r2
 800e018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e01a:	429a      	cmp	r2, r3
 800e01c:	f080 8131 	bcs.w	800e282 <st_sssa8_ch_convolve_startNN+0x3f6>
 800e020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e022:	fb03 f30b 	mul.w	r3, r3, fp
 800e026:	fb0a 2303 	mla	r3, sl, r3, r2
 800e02a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e02c:	429a      	cmp	r2, r3
 800e02e:	bf2c      	ite	cs
 800e030:	2300      	movcs	r3, #0
 800e032:	2301      	movcc	r3, #1
 800e034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e036:	ee19 1a10 	vmov	r1, s18
 800e03a:	fb94 f2f2 	sdiv	r2, r4, r2
 800e03e:	b292      	uxth	r2, r2
 800e040:	428a      	cmp	r2, r1
 800e042:	bf28      	it	cs
 800e044:	460a      	movcs	r2, r1
 800e046:	2a01      	cmp	r2, #1
 800e048:	921a      	str	r2, [sp, #104]	; 0x68
 800e04a:	f240 81fa 	bls.w	800e442 <st_sssa8_ch_convolve_startNN+0x5b6>
 800e04e:	4610      	mov	r0, r2
 800e050:	ee19 2a10 	vmov	r2, s18
 800e054:	fbb1 f1f0 	udiv	r1, r1, r0
 800e058:	fb00 2211 	mls	r2, r0, r1, r2
 800e05c:	b289      	uxth	r1, r1
 800e05e:	b292      	uxth	r2, r2
 800e060:	9127      	str	r1, [sp, #156]	; 0x9c
 800e062:	2a00      	cmp	r2, #0
 800e064:	f000 810f 	beq.w	800e286 <st_sssa8_ch_convolve_startNN+0x3fa>
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f040 83b6 	bne.w	800e7da <st_sssa8_ch_convolve_startNN+0x94e>
 800e06e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e070:	fa0f f688 	sxth.w	r6, r8
 800e074:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e076:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800e07a:	fb03 f30a 	mul.w	r3, r3, sl
 800e07e:	ee08 6a90 	vmov	s17, r6
 800e082:	fb02 f303 	mul.w	r3, r2, r3
 800e086:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e08c:	9312      	str	r3, [sp, #72]	; 0x48
 800e08e:	f00a 0303 	and.w	r3, sl, #3
 800e092:	930c      	str	r3, [sp, #48]	; 0x30
 800e094:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800e098:	9313      	str	r3, [sp, #76]	; 0x4c
 800e09a:	ee19 3a10 	vmov	r3, s18
 800e09e:	e9cd 8322 	strd	r8, r3, [sp, #136]	; 0x88
 800e0a2:	465b      	mov	r3, fp
 800e0a4:	46d0      	mov	r8, sl
 800e0a6:	46cb      	mov	fp, r9
 800e0a8:	4699      	mov	r9, r3
 800e0aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0ac:	b953      	cbnz	r3, 800e0c4 <st_sssa8_ch_convolve_startNN+0x238>
 800e0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f040 81be 	bne.w	800e432 <st_sssa8_ch_convolve_startNN+0x5a6>
 800e0b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e0b8:	ee19 1a90 	vmov	r1, s19
 800e0bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e0be:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e0c0:	f001 ff24 	bl	800ff0c <st_int8_to16_dual_interleaved>
 800e0c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 80af 	beq.w	800e22a <st_sssa8_ch_convolve_startNN+0x39e>
 800e0cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ce:	2400      	movs	r4, #0
 800e0d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e0d2:	425b      	negs	r3, r3
 800e0d4:	4626      	mov	r6, r4
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	9318      	str	r3, [sp, #96]	; 0x60
 800e0da:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800e0dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800e0de:	a83a      	add	r0, sp, #232	; 0xe8
 800e0e0:	f001 f8e4 	bl	800f2ac <ai_padding_opt_phase1>
 800e0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 81a0 	beq.w	800e42c <st_sssa8_ch_convolve_startNN+0x5a0>
 800e0ec:	b2a3      	uxth	r3, r4
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	931e      	str	r3, [sp, #120]	; 0x78
 800e0f2:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e0fa:	fb06 3302 	mla	r3, r6, r2, r3
 800e0fe:	460a      	mov	r2, r1
 800e100:	9308      	str	r3, [sp, #32]
 800e102:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e104:	425b      	negs	r3, r3
 800e106:	b29b      	uxth	r3, r3
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800e10e:	9311      	str	r3, [sp, #68]	; 0x44
 800e110:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 80ec 	beq.w	800e2f0 <st_sssa8_ch_convolve_startNN+0x464>
 800e118:	3b01      	subs	r3, #1
 800e11a:	933a      	str	r3, [sp, #232]	; 0xe8
 800e11c:	2301      	movs	r3, #1
 800e11e:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e124:	9808      	ldr	r0, [sp, #32]
 800e126:	4283      	cmp	r3, r0
 800e128:	f280 80f0 	bge.w	800e30c <st_sssa8_ch_convolve_startNN+0x480>
 800e12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e12e:	ee08 ba10 	vmov	s16, fp
 800e132:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e134:	46c3      	mov	fp, r8
 800e136:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800e13a:	ee18 7a90 	vmov	r7, s17
 800e13e:	fb02 3200 	mla	r2, r2, r0, r3
 800e142:	b28b      	uxth	r3, r1
 800e144:	930d      	str	r3, [sp, #52]	; 0x34
 800e146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e148:	1ad4      	subs	r4, r2, r3
 800e14a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e14e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e152:	461a      	mov	r2, r3
 800e154:	9306      	str	r3, [sp, #24]
 800e156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e158:	429c      	cmp	r4, r3
 800e15a:	dd27      	ble.n	800e1ac <st_sssa8_ch_convolve_startNN+0x320>
 800e15c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e15e:	4291      	cmp	r1, r2
 800e160:	fb09 f202 	mul.w	r2, r9, r2
 800e164:	bfcc      	ite	gt
 800e166:	f04f 0800 	movgt.w	r8, #0
 800e16a:	f04f 0801 	movle.w	r8, #1
 800e16e:	9210      	str	r2, [sp, #64]	; 0x40
 800e170:	9a06      	ldr	r2, [sp, #24]
 800e172:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800e176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e178:	2a00      	cmp	r2, #0
 800e17a:	f000 80a0 	beq.w	800e2be <st_sssa8_ch_convolve_startNN+0x432>
 800e17e:	461e      	mov	r6, r3
 800e180:	469e      	mov	lr, r3
 800e182:	0ff3      	lsrs	r3, r6, #31
 800e184:	4629      	mov	r1, r5
 800e186:	465a      	mov	r2, fp
 800e188:	4638      	mov	r0, r7
 800e18a:	45f1      	cmp	r9, lr
 800e18c:	bfd8      	it	le
 800e18e:	f043 0301 	orrle.w	r3, r3, #1
 800e192:	b91b      	cbnz	r3, 800e19c <st_sssa8_ch_convolve_startNN+0x310>
 800e194:	f1b8 0f00 	cmp.w	r8, #0
 800e198:	f000 813f 	beq.w	800e41a <st_sssa8_ch_convolve_startNN+0x58e>
 800e19c:	f005 fb4e 	bl	801383c <st_dsp_arm_fill_q15>
 800e1a0:	3601      	adds	r6, #1
 800e1a2:	4455      	add	r5, sl
 800e1a4:	b236      	sxth	r6, r6
 800e1a6:	42b4      	cmp	r4, r6
 800e1a8:	46b6      	mov	lr, r6
 800e1aa:	dcea      	bgt.n	800e182 <st_sssa8_ch_convolve_startNN+0x2f6>
 800e1ac:	9a06      	ldr	r2, [sp, #24]
 800e1ae:	9908      	ldr	r1, [sp, #32]
 800e1b0:	3201      	adds	r2, #1
 800e1b2:	b213      	sxth	r3, r2
 800e1b4:	428b      	cmp	r3, r1
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	9306      	str	r3, [sp, #24]
 800e1ba:	dbcc      	blt.n	800e156 <st_sssa8_ch_convolve_startNN+0x2ca>
 800e1bc:	46d8      	mov	r8, fp
 800e1be:	ee18 ba10 	vmov	fp, s16
 800e1c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1c4:	42ab      	cmp	r3, r5
 800e1c6:	f000 80a7 	beq.w	800e318 <st_sssa8_ch_convolve_startNN+0x48c>
 800e1ca:	9b07      	ldr	r3, [sp, #28]
 800e1cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e1d0:	4413      	add	r3, r2
 800e1d2:	3101      	adds	r1, #1
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	b209      	sxth	r1, r1
 800e1d8:	9307      	str	r3, [sp, #28]
 800e1da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1dc:	460a      	mov	r2, r1
 800e1de:	428b      	cmp	r3, r1
 800e1e0:	dc96      	bgt.n	800e110 <st_sssa8_ch_convolve_startNN+0x284>
 800e1e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e1e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e1e6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e1e8:	4413      	add	r3, r2
 800e1ea:	3401      	adds	r4, #1
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	b224      	sxth	r4, r4
 800e1f0:	9318      	str	r3, [sp, #96]	; 0x60
 800e1f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1f4:	4626      	mov	r6, r4
 800e1f6:	42a3      	cmp	r3, r4
 800e1f8:	f73f af71 	bgt.w	800e0de <st_sssa8_ch_convolve_startNN+0x252>
 800e1fc:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e1fe:	42a9      	cmp	r1, r5
 800e200:	d013      	beq.n	800e22a <st_sssa8_ch_convolve_startNN+0x39e>
 800e202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e204:	ee1a 2a10 	vmov	r2, s20
 800e208:	ee19 0a90 	vmov	r0, s19
 800e20c:	9305      	str	r3, [sp, #20]
 800e20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e210:	9304      	str	r3, [sp, #16]
 800e212:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e214:	9303      	str	r3, [sp, #12]
 800e216:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e218:	9302      	str	r3, [sp, #8]
 800e21a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	ee19 3a10 	vmov	r3, s18
 800e226:	f004 ff21 	bl	801306c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800e22a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e22c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e22e:	1a9b      	subs	r3, r3, r2
 800e230:	b299      	uxth	r1, r3
 800e232:	4613      	mov	r3, r2
 800e234:	428a      	cmp	r2, r1
 800e236:	9123      	str	r1, [sp, #140]	; 0x8c
 800e238:	bf28      	it	cs
 800e23a:	460b      	movcs	r3, r1
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	b1cb      	cbz	r3, 800e274 <st_sssa8_ch_convolve_startNN+0x3e8>
 800e240:	9960      	ldr	r1, [sp, #384]	; 0x180
 800e242:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e244:	fb00 1102 	mla	r1, r0, r2, r1
 800e248:	9160      	str	r1, [sp, #384]	; 0x180
 800e24a:	ee1a 1a10 	vmov	r1, s20
 800e24e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e252:	ee0a 1a10 	vmov	s20, r1
 800e256:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e258:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800e25c:	911c      	str	r1, [sp, #112]	; 0x70
 800e25e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800e260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e264:	9169      	str	r1, [sp, #420]	; 0x1a4
 800e266:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e26c:	911d      	str	r1, [sp, #116]	; 0x74
 800e26e:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 800e270:	4411      	add	r1, r2
 800e272:	916d      	str	r1, [sp, #436]	; 0x1b4
 800e274:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e276:	1e4a      	subs	r2, r1, #1
 800e278:	b292      	uxth	r2, r2
 800e27a:	b179      	cbz	r1, 800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e27c:	9227      	str	r2, [sp, #156]	; 0x9c
 800e27e:	931a      	str	r3, [sp, #104]	; 0x68
 800e280:	e713      	b.n	800e0aa <st_sssa8_ch_convolve_startNN+0x21e>
 800e282:	2300      	movs	r3, #0
 800e284:	e6d6      	b.n	800e034 <st_sssa8_ch_convolve_startNN+0x1a8>
 800e286:	2b00      	cmp	r3, #0
 800e288:	f040 82ab 	bne.w	800e7e2 <st_sssa8_ch_convolve_startNN+0x956>
 800e28c:	1e4b      	subs	r3, r1, #1
 800e28e:	b29b      	uxth	r3, r3
 800e290:	9327      	str	r3, [sp, #156]	; 0x9c
 800e292:	ee19 3a10 	vmov	r3, s18
 800e296:	4283      	cmp	r3, r0
 800e298:	f4bf aee9 	bcs.w	800e06e <st_sssa8_ch_convolve_startNN+0x1e2>
 800e29c:	2000      	movs	r0, #0
 800e29e:	b04f      	add	sp, #316	; 0x13c
 800e2a0:	ecbd 8b08 	vpop	{d8-d11}
 800e2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a8:	460a      	mov	r2, r1
 800e2aa:	ee19 3a10 	vmov	r3, s18
 800e2ae:	ee19 1a90 	vmov	r1, s19
 800e2b2:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e2b4:	f001 fcca 	bl	800fc4c <st_int8_to16_dual>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	932a      	str	r3, [sp, #168]	; 0xa8
 800e2bc:	e6a3      	b.n	800e006 <st_sssa8_ch_convolve_startNN+0x17a>
 800e2be:	469c      	mov	ip, r3
 800e2c0:	461e      	mov	r6, r3
 800e2c2:	45e1      	cmp	r9, ip
 800e2c4:	465a      	mov	r2, fp
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	bfcc      	ite	gt
 800e2cc:	2300      	movgt	r3, #0
 800e2ce:	2301      	movle	r3, #1
 800e2d0:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800e2d4:	d103      	bne.n	800e2de <st_sssa8_ch_convolve_startNN+0x452>
 800e2d6:	f1b8 0f00 	cmp.w	r8, #0
 800e2da:	f000 8095 	beq.w	800e408 <st_sssa8_ch_convolve_startNN+0x57c>
 800e2de:	f005 faad 	bl	801383c <st_dsp_arm_fill_q15>
 800e2e2:	3601      	adds	r6, #1
 800e2e4:	4455      	add	r5, sl
 800e2e6:	b236      	sxth	r6, r6
 800e2e8:	42a6      	cmp	r6, r4
 800e2ea:	46b4      	mov	ip, r6
 800e2ec:	dbe9      	blt.n	800e2c2 <st_sssa8_ch_convolve_startNN+0x436>
 800e2ee:	e75d      	b.n	800e1ac <st_sssa8_ch_convolve_startNN+0x320>
 800e2f0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d135      	bne.n	800e362 <st_sssa8_ch_convolve_startNN+0x4d6>
 800e2f6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e2f8:	9808      	ldr	r0, [sp, #32]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	933c      	str	r3, [sp, #240]	; 0xf0
 800e2fe:	2301      	movs	r3, #1
 800e300:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e306:	4283      	cmp	r3, r0
 800e308:	f6ff af10 	blt.w	800e12c <st_sssa8_ch_convolve_startNN+0x2a0>
 800e30c:	b28b      	uxth	r3, r1
 800e30e:	930d      	str	r3, [sp, #52]	; 0x34
 800e310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e312:	42ab      	cmp	r3, r5
 800e314:	f47f af59 	bne.w	800e1ca <st_sssa8_ch_convolve_startNN+0x33e>
 800e318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e31a:	ee1a 2a10 	vmov	r2, s20
 800e31e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e320:	ee19 0a90 	vmov	r0, s19
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e328:	9304      	str	r3, [sp, #16]
 800e32a:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e32c:	9303      	str	r3, [sp, #12]
 800e32e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e330:	9302      	str	r3, [sp, #8]
 800e332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e334:	9301      	str	r3, [sp, #4]
 800e336:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	ee19 3a10 	vmov	r3, s18
 800e33e:	f004 fb71 	bl	8012a24 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800e342:	9b07      	ldr	r3, [sp, #28]
 800e344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e346:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e348:	4413      	add	r3, r2
 800e34a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e34c:	3101      	adds	r1, #1
 800e34e:	9017      	str	r0, [sp, #92]	; 0x5c
 800e350:	b29b      	uxth	r3, r3
 800e352:	b209      	sxth	r1, r1
 800e354:	9307      	str	r3, [sp, #28]
 800e356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e358:	460a      	mov	r2, r1
 800e35a:	428b      	cmp	r3, r1
 800e35c:	f73f aed8 	bgt.w	800e110 <st_sssa8_ch_convolve_startNN+0x284>
 800e360:	e73f      	b.n	800e1e2 <st_sssa8_ch_convolve_startNN+0x356>
 800e362:	3b01      	subs	r3, #1
 800e364:	933b      	str	r3, [sp, #236]	; 0xec
 800e366:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e370:	f43f aed7 	beq.w	800e122 <st_sssa8_ch_convolve_startNN+0x296>
 800e374:	b28b      	uxth	r3, r1
 800e376:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800e37a:	930d      	str	r3, [sp, #52]	; 0x34
 800e37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e37e:	bb0b      	cbnz	r3, 800e3c4 <st_sssa8_ch_convolve_startNN+0x538>
 800e380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e382:	9908      	ldr	r1, [sp, #32]
 800e384:	428b      	cmp	r3, r1
 800e386:	f6bf af1c 	bge.w	800e1c2 <st_sssa8_ch_convolve_startNN+0x336>
 800e38a:	465a      	mov	r2, fp
 800e38c:	464f      	mov	r7, r9
 800e38e:	46ab      	mov	fp, r5
 800e390:	461e      	mov	r6, r3
 800e392:	4625      	mov	r5, r4
 800e394:	4618      	mov	r0, r3
 800e396:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e398:	4689      	mov	r9, r1
 800e39a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e39e:	3601      	adds	r6, #1
 800e3a0:	fb00 5007 	mla	r0, r0, r7, r5
 800e3a4:	4659      	mov	r1, fp
 800e3a6:	9206      	str	r2, [sp, #24]
 800e3a8:	b236      	sxth	r6, r6
 800e3aa:	fb08 a000 	mla	r0, r8, r0, sl
 800e3ae:	f001 fbfd 	bl	800fbac <st_int8_to16_no_shift_interleaved>
 800e3b2:	44a3      	add	fp, r4
 800e3b4:	454e      	cmp	r6, r9
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	9a06      	ldr	r2, [sp, #24]
 800e3ba:	dbf0      	blt.n	800e39e <st_sssa8_ch_convolve_startNN+0x512>
 800e3bc:	465d      	mov	r5, fp
 800e3be:	46b9      	mov	r9, r7
 800e3c0:	4693      	mov	fp, r2
 800e3c2:	e6fe      	b.n	800e1c2 <st_sssa8_ch_convolve_startNN+0x336>
 800e3c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3c6:	9908      	ldr	r1, [sp, #32]
 800e3c8:	428b      	cmp	r3, r1
 800e3ca:	f6bf aefa 	bge.w	800e1c2 <st_sssa8_ch_convolve_startNN+0x336>
 800e3ce:	465a      	mov	r2, fp
 800e3d0:	464f      	mov	r7, r9
 800e3d2:	46ab      	mov	fp, r5
 800e3d4:	461e      	mov	r6, r3
 800e3d6:	4625      	mov	r5, r4
 800e3d8:	4618      	mov	r0, r3
 800e3da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e3dc:	4689      	mov	r9, r1
 800e3de:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	fb00 5007 	mla	r0, r0, r7, r5
 800e3e8:	4659      	mov	r1, fp
 800e3ea:	9206      	str	r2, [sp, #24]
 800e3ec:	b236      	sxth	r6, r6
 800e3ee:	fb08 a000 	mla	r0, r8, r0, sl
 800e3f2:	f001 fb45 	bl	800fa80 <st_int8_to16_no_shift>
 800e3f6:	44a3      	add	fp, r4
 800e3f8:	454e      	cmp	r6, r9
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	9a06      	ldr	r2, [sp, #24]
 800e3fe:	dbf0      	blt.n	800e3e2 <st_sssa8_ch_convolve_startNN+0x556>
 800e400:	465d      	mov	r5, fp
 800e402:	46b9      	mov	r9, r7
 800e404:	4693      	mov	fp, r2
 800e406:	e6dc      	b.n	800e1c2 <st_sssa8_ch_convolve_startNN+0x336>
 800e408:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e40a:	eb03 000c 	add.w	r0, r3, ip
 800e40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e410:	fb0b 3000 	mla	r0, fp, r0, r3
 800e414:	f001 fbca 	bl	800fbac <st_int8_to16_no_shift_interleaved>
 800e418:	e763      	b.n	800e2e2 <st_sssa8_ch_convolve_startNN+0x456>
 800e41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e41c:	eb03 000e 	add.w	r0, r3, lr
 800e420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e422:	fb0b 3000 	mla	r0, fp, r0, r3
 800e426:	f001 fb2b 	bl	800fa80 <st_int8_to16_no_shift>
 800e42a:	e6b9      	b.n	800e1a0 <st_sssa8_ch_convolve_startNN+0x314>
 800e42c:	b2a3      	uxth	r3, r4
 800e42e:	931e      	str	r3, [sp, #120]	; 0x78
 800e430:	e6d7      	b.n	800e1e2 <st_sssa8_ch_convolve_startNN+0x356>
 800e432:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e434:	ee19 1a90 	vmov	r1, s19
 800e438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e43a:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e43c:	f001 fc06 	bl	800fc4c <st_int8_to16_dual>
 800e440:	e640      	b.n	800e0c4 <st_sssa8_ch_convolve_startNN+0x238>
 800e442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e444:	2b00      	cmp	r3, #0
 800e446:	f43f af29 	beq.w	800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e44a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e44c:	fa0f f888 	sxth.w	r8, r8
 800e450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e452:	2400      	movs	r4, #0
 800e454:	fb03 f30a 	mul.w	r3, r3, sl
 800e458:	ee08 9a90 	vmov	s17, r9
 800e45c:	4647      	mov	r7, r8
 800e45e:	4625      	mov	r5, r4
 800e460:	fb02 f303 	mul.w	r3, r2, r3
 800e464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e466:	46d8      	mov	r8, fp
 800e468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e46c:	4693      	mov	fp, r2
 800e46e:	9311      	str	r3, [sp, #68]	; 0x44
 800e470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e472:	425b      	negs	r3, r3
 800e474:	b29b      	uxth	r3, r3
 800e476:	9313      	str	r3, [sp, #76]	; 0x4c
 800e478:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800e47c:	9312      	str	r3, [sp, #72]	; 0x48
 800e47e:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800e482:	4699      	mov	r9, r3
 800e484:	a83a      	add	r0, sp, #232	; 0xe8
 800e486:	f000 ff11 	bl	800f2ac <ai_padding_opt_phase1>
 800e48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 819a 	beq.w	800e7c6 <st_sssa8_ch_convolve_startNN+0x93a>
 800e492:	b2a3      	uxth	r3, r4
 800e494:	2000      	movs	r0, #0
 800e496:	931a      	str	r3, [sp, #104]	; 0x68
 800e498:	4601      	mov	r1, r0
 800e49a:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800e49e:	1a9a      	subs	r2, r3, r2
 800e4a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4a2:	fb05 2303 	mla	r3, r5, r3, r2
 800e4a6:	9308      	str	r3, [sp, #32]
 800e4a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e4aa:	425a      	negs	r2, r3
 800e4ac:	b293      	uxth	r3, r2
 800e4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e4b0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800e4b4:	9310      	str	r3, [sp, #64]	; 0x40
 800e4b6:	465b      	mov	r3, fp
 800e4b8:	46cb      	mov	fp, r9
 800e4ba:	4699      	mov	r9, r3
 800e4bc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	f000 80f6 	beq.w	800e6b0 <st_sssa8_ch_convolve_startNN+0x824>
 800e4c4:	3a01      	subs	r2, #1
 800e4c6:	923a      	str	r2, [sp, #232]	; 0xe8
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800e4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4d0:	9a08      	ldr	r2, [sp, #32]
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	f280 80fa 	bge.w	800e6cc <st_sssa8_ch_convolve_startNN+0x840>
 800e4d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4dc:	fb01 3102 	mla	r1, r1, r2, r3
 800e4e0:	b283      	uxth	r3, r0
 800e4e2:	930d      	str	r3, [sp, #52]	; 0x34
 800e4e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e4e6:	1acd      	subs	r5, r1, r3
 800e4e8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800e4ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	9306      	str	r3, [sp, #24]
 800e4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f6:	42ab      	cmp	r3, r5
 800e4f8:	da20      	bge.n	800e53c <st_sssa8_ch_convolve_startNN+0x6b0>
 800e4fa:	9906      	ldr	r1, [sp, #24]
 800e4fc:	461c      	mov	r4, r3
 800e4fe:	469c      	mov	ip, r3
 800e500:	0fce      	lsrs	r6, r1, #31
 800e502:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e504:	4291      	cmp	r1, r2
 800e506:	bfd8      	it	le
 800e508:	f046 0601 	orrle.w	r6, r6, #1
 800e50c:	fb02 f208 	mul.w	r2, r2, r8
 800e510:	9207      	str	r2, [sp, #28]
 800e512:	45e0      	cmp	r8, ip
 800e514:	4652      	mov	r2, sl
 800e516:	4649      	mov	r1, r9
 800e518:	4638      	mov	r0, r7
 800e51a:	bfcc      	ite	gt
 800e51c:	2300      	movgt	r3, #0
 800e51e:	2301      	movle	r3, #1
 800e520:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800e524:	d102      	bne.n	800e52c <st_sssa8_ch_convolve_startNN+0x6a0>
 800e526:	2e00      	cmp	r6, #0
 800e528:	f000 80b9 	beq.w	800e69e <st_sssa8_ch_convolve_startNN+0x812>
 800e52c:	f005 f986 	bl	801383c <st_dsp_arm_fill_q15>
 800e530:	3401      	adds	r4, #1
 800e532:	44d9      	add	r9, fp
 800e534:	b224      	sxth	r4, r4
 800e536:	42ac      	cmp	r4, r5
 800e538:	46a4      	mov	ip, r4
 800e53a:	dbea      	blt.n	800e512 <st_sssa8_ch_convolve_startNN+0x686>
 800e53c:	9b06      	ldr	r3, [sp, #24]
 800e53e:	9908      	ldr	r1, [sp, #32]
 800e540:	3301      	adds	r3, #1
 800e542:	b21b      	sxth	r3, r3
 800e544:	428b      	cmp	r3, r1
 800e546:	461a      	mov	r2, r3
 800e548:	9306      	str	r3, [sp, #24]
 800e54a:	dbd3      	blt.n	800e4f4 <st_sssa8_ch_convolve_startNN+0x668>
 800e54c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e54e:	454b      	cmp	r3, r9
 800e550:	f000 80c2 	beq.w	800e6d8 <st_sssa8_ch_convolve_startNN+0x84c>
 800e554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e558:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e55a:	441a      	add	r2, r3
 800e55c:	3001      	adds	r0, #1
 800e55e:	b293      	uxth	r3, r2
 800e560:	b200      	sxth	r0, r0
 800e562:	930c      	str	r3, [sp, #48]	; 0x30
 800e564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e566:	4601      	mov	r1, r0
 800e568:	4283      	cmp	r3, r0
 800e56a:	dca7      	bgt.n	800e4bc <st_sssa8_ch_convolve_startNN+0x630>
 800e56c:	464b      	mov	r3, r9
 800e56e:	46d9      	mov	r9, fp
 800e570:	469b      	mov	fp, r3
 800e572:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e576:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800e578:	441a      	add	r2, r3
 800e57a:	3401      	adds	r4, #1
 800e57c:	b293      	uxth	r3, r2
 800e57e:	b224      	sxth	r4, r4
 800e580:	9313      	str	r3, [sp, #76]	; 0x4c
 800e582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e584:	4625      	mov	r5, r4
 800e586:	42a3      	cmp	r3, r4
 800e588:	f73f af7c 	bgt.w	800e484 <st_sssa8_ch_convolve_startNN+0x5f8>
 800e58c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e58e:	4559      	cmp	r1, fp
 800e590:	f43f ae84 	beq.w	800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e594:	ee19 3a10 	vmov	r3, s18
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f43f ae7f 	beq.w	800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e59e:	ee1a 3a10 	vmov	r3, s20
 800e5a2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800e5a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e5a6:	f1a3 0b04 	sub.w	fp, r3, #4
 800e5aa:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800e5ac:	f002 0a03 	and.w	sl, r2, #3
 800e5b0:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 800e5b2:	1c5f      	adds	r7, r3, #1
 800e5b4:	f8df c648 	ldr.w	ip, [pc, #1608]	; 800ec00 <st_sssa8_ch_convolve_startNN+0xd74>
 800e5b8:	f8dd e180 	ldr.w	lr, [sp, #384]	; 0x180
 800e5bc:	f8cd b018 	str.w	fp, [sp, #24]
 800e5c0:	e9dd 4317 	ldrd	r4, r3, [sp, #92]	; 0x5c
 800e5c4:	4433      	add	r3, r6
 800e5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c8:	0893      	lsrs	r3, r2, #2
 800e5ca:	f10a 32ff 	add.w	r2, sl, #4294967295
 800e5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	b292      	uxth	r2, r2
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	9207      	str	r2, [sp, #28]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	009a      	lsls	r2, r3, #2
 800e5dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e5e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5e2:	9308      	str	r3, [sp, #32]
 800e5e4:	9a06      	ldr	r2, [sp, #24]
 800e5e6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e5ea:	9206      	str	r2, [sp, #24]
 800e5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ee:	2a00      	cmp	r2, #0
 800e5f0:	f000 80f0 	beq.w	800e7d4 <st_sssa8_ch_convolve_startNN+0x948>
 800e5f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e5f8:	eb0e 0902 	add.w	r9, lr, r2
 800e5fc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e600:	fa2f fb82 	sxtb16	fp, r2
 800e604:	fa1f f88b 	uxth.w	r8, fp
 800e608:	6801      	ldr	r1, [r0, #0]
 800e60a:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e60e:	fa2f f282 	sxtb16	r2, r2
 800e612:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 800e616:	fb28 3101 	smlad	r1, r8, r1, r3
 800e61a:	ea02 030c 	and.w	r3, r2, ip
 800e61e:	3008      	adds	r0, #8
 800e620:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e624:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800e628:	fb23 1302 	smlad	r3, r3, r2, r1
 800e62c:	45ce      	cmp	lr, r9
 800e62e:	d1e5      	bne.n	800e5fc <st_sssa8_ch_convolve_startNN+0x770>
 800e630:	9a08      	ldr	r2, [sp, #32]
 800e632:	f1ba 0f00 	cmp.w	sl, #0
 800e636:	f000 80b4 	beq.w	800e7a2 <st_sssa8_ch_convolve_startNN+0x916>
 800e63a:	f999 1000 	ldrsb.w	r1, [r9]
 800e63e:	8810      	ldrh	r0, [r2, #0]
 800e640:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e644:	9907      	ldr	r1, [sp, #28]
 800e646:	b161      	cbz	r1, 800e662 <st_sssa8_ch_convolve_startNN+0x7d6>
 800e648:	f999 1001 	ldrsb.w	r1, [r9, #1]
 800e64c:	f1ba 0f02 	cmp.w	sl, #2
 800e650:	8850      	ldrh	r0, [r2, #2]
 800e652:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e656:	d004      	beq.n	800e662 <st_sssa8_ch_convolve_startNN+0x7d6>
 800e658:	8891      	ldrh	r1, [r2, #4]
 800e65a:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800e65e:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e662:	eb09 0e0a 	add.w	lr, r9, sl
 800e666:	f936 0b02 	ldrsh.w	r0, [r6], #2
 800e66a:	2815      	cmp	r0, #21
 800e66c:	f340 808c 	ble.w	800e788 <st_sssa8_ch_convolve_startNN+0x8fc>
 800e670:	1e81      	subs	r1, r0, #2
 800e672:	2201      	movs	r2, #1
 800e674:	3801      	subs	r0, #1
 800e676:	fa02 f101 	lsl.w	r1, r2, r1
 800e67a:	682a      	ldr	r2, [r5, #0]
 800e67c:	fb53 1302 	smmla	r3, r3, r2, r1
 800e680:	fa43 f200 	asr.w	r2, r3, r0
 800e684:	6823      	ldr	r3, [r4, #0]
 800e686:	4413      	add	r3, r2
 800e688:	f303 0307 	ssat	r3, #8, r3
 800e68c:	f807 3c01 	strb.w	r3, [r7, #-1]
 800e690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e692:	3701      	adds	r7, #1
 800e694:	3504      	adds	r5, #4
 800e696:	3404      	adds	r4, #4
 800e698:	42b3      	cmp	r3, r6
 800e69a:	d1a3      	bne.n	800e5e4 <st_sssa8_ch_convolve_startNN+0x758>
 800e69c:	e5fe      	b.n	800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e69e:	9b07      	ldr	r3, [sp, #28]
 800e6a0:	eb03 000c 	add.w	r0, r3, ip
 800e6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a6:	fb0a 3000 	mla	r0, sl, r0, r3
 800e6aa:	f001 f9e9 	bl	800fa80 <st_int8_to16_no_shift>
 800e6ae:	e73f      	b.n	800e530 <st_sssa8_ch_convolve_startNN+0x6a4>
 800e6b0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	d132      	bne.n	800e71c <st_sssa8_ch_convolve_startNN+0x890>
 800e6b6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800e6b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6ba:	3a01      	subs	r2, #1
 800e6bc:	923c      	str	r2, [sp, #240]	; 0xf0
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800e6c4:	9a08      	ldr	r2, [sp, #32]
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	f6ff af06 	blt.w	800e4d8 <st_sssa8_ch_convolve_startNN+0x64c>
 800e6cc:	b283      	uxth	r3, r0
 800e6ce:	930d      	str	r3, [sp, #52]	; 0x34
 800e6d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6d2:	454b      	cmp	r3, r9
 800e6d4:	f47f af3e 	bne.w	800e554 <st_sssa8_ch_convolve_startNN+0x6c8>
 800e6d8:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800e6da:	ee1a 2a10 	vmov	r2, s20
 800e6de:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e6e0:	9304      	str	r3, [sp, #16]
 800e6e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6e4:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e6e6:	9303      	str	r3, [sp, #12]
 800e6e8:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e6ea:	9302      	str	r3, [sp, #8]
 800e6ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6ee:	9301      	str	r3, [sp, #4]
 800e6f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	ee19 3a10 	vmov	r3, s18
 800e6f8:	f000 fdf2 	bl	800f2e0 <st_sssa8_ch_nn_mat_mult_kernel>
 800e6fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e702:	440b      	add	r3, r1
 800e704:	906d      	str	r0, [sp, #436]	; 0x1b4
 800e706:	3201      	adds	r2, #1
 800e708:	b29b      	uxth	r3, r3
 800e70a:	b210      	sxth	r0, r2
 800e70c:	930c      	str	r3, [sp, #48]	; 0x30
 800e70e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e710:	4601      	mov	r1, r0
 800e712:	4283      	cmp	r3, r0
 800e714:	dd5a      	ble.n	800e7cc <st_sssa8_ch_convolve_startNN+0x940>
 800e716:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800e71a:	e6cf      	b.n	800e4bc <st_sssa8_ch_convolve_startNN+0x630>
 800e71c:	3a01      	subs	r2, #1
 800e71e:	923b      	str	r2, [sp, #236]	; 0xec
 800e720:	f8bd 210c 	ldrh.w	r2, [sp, #268]	; 0x10c
 800e724:	2a01      	cmp	r2, #1
 800e726:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800e72a:	f43f aed0 	beq.w	800e4ce <st_sssa8_ch_convolve_startNN+0x642>
 800e72e:	b283      	uxth	r3, r0
 800e730:	9908      	ldr	r1, [sp, #32]
 800e732:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800e736:	930d      	str	r3, [sp, #52]	; 0x34
 800e738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e73a:	428b      	cmp	r3, r1
 800e73c:	f6bf af06 	bge.w	800e54c <st_sssa8_ch_convolve_startNN+0x6c0>
 800e740:	ee08 7a10 	vmov	s16, r7
 800e744:	f8cd b01c 	str.w	fp, [sp, #28]
 800e748:	464f      	mov	r7, r9
 800e74a:	46c3      	mov	fp, r8
 800e74c:	461d      	mov	r5, r3
 800e74e:	4618      	mov	r0, r3
 800e750:	ee18 2a90 	vmov	r2, s17
 800e754:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e756:	4688      	mov	r8, r1
 800e758:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e75c:	3501      	adds	r5, #1
 800e75e:	fb00 400b 	mla	r0, r0, fp, r4
 800e762:	4639      	mov	r1, r7
 800e764:	9206      	str	r2, [sp, #24]
 800e766:	b22d      	sxth	r5, r5
 800e768:	fb0a 9000 	mla	r0, sl, r0, r9
 800e76c:	f001 f988 	bl	800fa80 <st_int8_to16_no_shift>
 800e770:	4437      	add	r7, r6
 800e772:	4545      	cmp	r5, r8
 800e774:	4628      	mov	r0, r5
 800e776:	9a06      	ldr	r2, [sp, #24]
 800e778:	dbf0      	blt.n	800e75c <st_sssa8_ch_convolve_startNN+0x8d0>
 800e77a:	46b9      	mov	r9, r7
 800e77c:	46d8      	mov	r8, fp
 800e77e:	ee18 7a10 	vmov	r7, s16
 800e782:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800e786:	e6e1      	b.n	800e54c <st_sssa8_ch_convolve_startNN+0x6c0>
 800e788:	2800      	cmp	r0, #0
 800e78a:	dd0c      	ble.n	800e7a6 <st_sssa8_ch_convolve_startNN+0x91a>
 800e78c:	682a      	ldr	r2, [r5, #0]
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	6821      	ldr	r1, [r4, #0]
 800e792:	fb53 1302 	smmla	r3, r3, r2, r1
 800e796:	4103      	asrs	r3, r0
 800e798:	f303 0307 	ssat	r3, #8, r3
 800e79c:	f807 3c01 	strb.w	r3, [r7, #-1]
 800e7a0:	e776      	b.n	800e690 <st_sssa8_ch_convolve_startNN+0x804>
 800e7a2:	46ce      	mov	lr, r9
 800e7a4:	e75f      	b.n	800e666 <st_sssa8_ch_convolve_startNN+0x7da>
 800e7a6:	f1c0 0201 	rsb	r2, r0, #1
 800e7aa:	fa03 f202 	lsl.w	r2, r3, r2
 800e7ae:	f302 021f 	ssat	r2, #32, r2
 800e7b2:	682b      	ldr	r3, [r5, #0]
 800e7b4:	fb52 f213 	smmulr	r2, r2, r3
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	f303 0307 	ssat	r3, #8, r3
 800e7c0:	f807 3c01 	strb.w	r3, [r7, #-1]
 800e7c4:	e764      	b.n	800e690 <st_sssa8_ch_convolve_startNN+0x804>
 800e7c6:	b2a3      	uxth	r3, r4
 800e7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ca:	e6d2      	b.n	800e572 <st_sssa8_ch_convolve_startNN+0x6e6>
 800e7cc:	46d9      	mov	r9, fp
 800e7ce:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800e7d2:	e6ce      	b.n	800e572 <st_sssa8_ch_convolve_startNN+0x6e6>
 800e7d4:	46f1      	mov	r9, lr
 800e7d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7d8:	e72b      	b.n	800e632 <st_sssa8_ch_convolve_startNN+0x7a6>
 800e7da:	460b      	mov	r3, r1
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	9327      	str	r3, [sp, #156]	; 0x9c
 800e7e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f43f ad59 	beq.w	800e29c <st_sssa8_ch_convolve_startNN+0x410>
 800e7ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e7ec:	fa0f f788 	sxth.w	r7, r8
 800e7f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7f2:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800e7f6:	fb03 f30a 	mul.w	r3, r3, sl
 800e7fa:	2400      	movs	r4, #0
 800e7fc:	ee08 9a90 	vmov	s17, r9
 800e800:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
 800e804:	fb02 f303 	mul.w	r3, r2, r3
 800e808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e80a:	4625      	mov	r5, r4
 800e80c:	46d0      	mov	r8, sl
 800e80e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e812:	9312      	str	r3, [sp, #72]	; 0x48
 800e814:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e816:	3b01      	subs	r3, #1
 800e818:	b29b      	uxth	r3, r3
 800e81a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e81c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e81e:	425b      	negs	r3, r3
 800e820:	b29b      	uxth	r3, r3
 800e822:	932b      	str	r3, [sp, #172]	; 0xac
 800e824:	f00a 0303 	and.w	r3, sl, #3
 800e828:	930b      	str	r3, [sp, #44]	; 0x2c
 800e82a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800e82e:	46d9      	mov	r9, fp
 800e830:	9313      	str	r3, [sp, #76]	; 0x4c
 800e832:	a83a      	add	r0, sp, #232	; 0xe8
 800e834:	f000 fd3a 	bl	800f2ac <ai_padding_opt_phase1>
 800e838:	ee19 3a10 	vmov	r3, s18
 800e83c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800e83e:	fb05 f303 	mul.w	r3, r5, r3
 800e842:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e844:	fb01 2303 	mla	r3, r1, r3, r2
 800e848:	931e      	str	r3, [sp, #120]	; 0x78
 800e84a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e84c:	b953      	cbnz	r3, 800e864 <st_sssa8_ch_convolve_startNN+0x9d8>
 800e84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e850:	2b00      	cmp	r3, #0
 800e852:	f040 81c0 	bne.w	800ebd6 <st_sssa8_ch_convolve_startNN+0xd4a>
 800e856:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e858:	ee19 1a90 	vmov	r1, s19
 800e85c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e85e:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e860:	f001 fb54 	bl	800ff0c <st_int8_to16_dual_interleaved>
 800e864:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 81c0 	beq.w	800ebec <st_sssa8_ch_convolve_startNN+0xd60>
 800e86c:	b2a3      	uxth	r3, r4
 800e86e:	eef0 aa4a 	vmov.f32	s21, s20
 800e872:	ee0b 7a10 	vmov	s22, r7
 800e876:	ed8d 9a26 	vstr	s18, [sp, #152]	; 0x98
 800e87a:	932c      	str	r3, [sp, #176]	; 0xb0
 800e87c:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800e880:	1a9b      	subs	r3, r3, r2
 800e882:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e884:	fb02 3305 	mla	r3, r2, r5, r3
 800e888:	9308      	str	r3, [sp, #32]
 800e88a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800e88e:	9311      	str	r3, [sp, #68]	; 0x44
 800e890:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e892:	9325      	str	r3, [sp, #148]	; 0x94
 800e894:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e896:	9318      	str	r3, [sp, #96]	; 0x60
 800e898:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800e89a:	9329      	str	r3, [sp, #164]	; 0xa4
 800e89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e89e:	9324      	str	r3, [sp, #144]	; 0x90
 800e8a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8a2:	9323      	str	r3, [sp, #140]	; 0x8c
 800e8a4:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800e8a6:	9322      	str	r3, [sp, #136]	; 0x88
 800e8a8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800e8aa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800e8ac:	923b      	str	r2, [sp, #236]	; 0xec
 800e8ae:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800e8b0:	933a      	str	r3, [sp, #232]	; 0xe8
 800e8b2:	923c      	str	r2, [sp, #240]	; 0xf0
 800e8b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8b6:	2a00      	cmp	r2, #0
 800e8b8:	f000 8137 	beq.w	800eb2a <st_sssa8_ch_convolve_startNN+0xc9e>
 800e8bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e8be:	2100      	movs	r1, #0
 800e8c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800e8c2:	4252      	negs	r2, r2
 800e8c4:	b292      	uxth	r2, r2
 800e8c6:	9207      	str	r2, [sp, #28]
 800e8c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e8ca:	9217      	str	r2, [sp, #92]	; 0x5c
 800e8cc:	460a      	mov	r2, r1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d062      	beq.n	800e998 <st_sssa8_ch_convolve_startNN+0xb0c>
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	933a      	str	r3, [sp, #232]	; 0xe8
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e8dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8de:	9808      	ldr	r0, [sp, #32]
 800e8e0:	4283      	cmp	r3, r0
 800e8e2:	da66      	bge.n	800e9b2 <st_sssa8_ch_convolve_startNN+0xb26>
 800e8e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8e6:	46c3      	mov	fp, r8
 800e8e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e8ea:	ee1b 7a10 	vmov	r7, s22
 800e8ee:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800e8f2:	fb02 3200 	mla	r2, r2, r0, r3
 800e8f6:	b28b      	uxth	r3, r1
 800e8f8:	930d      	str	r3, [sp, #52]	; 0x34
 800e8fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8fc:	1ad5      	subs	r5, r2, r3
 800e8fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e902:	930c      	str	r3, [sp, #48]	; 0x30
 800e904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e906:	461a      	mov	r2, r3
 800e908:	9306      	str	r3, [sp, #24]
 800e90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e90c:	42ab      	cmp	r3, r5
 800e90e:	da27      	bge.n	800e960 <st_sssa8_ch_convolve_startNN+0xad4>
 800e910:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e912:	4291      	cmp	r1, r2
 800e914:	fb09 f202 	mul.w	r2, r9, r2
 800e918:	bfcc      	ite	gt
 800e91a:	f04f 0800 	movgt.w	r8, #0
 800e91e:	f04f 0801 	movle.w	r8, #1
 800e922:	9210      	str	r2, [sp, #64]	; 0x40
 800e924:	9a06      	ldr	r2, [sp, #24]
 800e926:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800e92a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	d06a      	beq.n	800ea06 <st_sssa8_ch_convolve_startNN+0xb7a>
 800e930:	461e      	mov	r6, r3
 800e932:	469c      	mov	ip, r3
 800e934:	45e1      	cmp	r9, ip
 800e936:	4621      	mov	r1, r4
 800e938:	465a      	mov	r2, fp
 800e93a:	4638      	mov	r0, r7
 800e93c:	bfcc      	ite	gt
 800e93e:	2300      	movgt	r3, #0
 800e940:	2301      	movle	r3, #1
 800e942:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800e946:	d103      	bne.n	800e950 <st_sssa8_ch_convolve_startNN+0xac4>
 800e948:	f1b8 0f00 	cmp.w	r8, #0
 800e94c:	f000 80cd 	beq.w	800eaea <st_sssa8_ch_convolve_startNN+0xc5e>
 800e950:	f004 ff74 	bl	801383c <st_dsp_arm_fill_q15>
 800e954:	3601      	adds	r6, #1
 800e956:	4454      	add	r4, sl
 800e958:	b236      	sxth	r6, r6
 800e95a:	42b5      	cmp	r5, r6
 800e95c:	46b4      	mov	ip, r6
 800e95e:	dce9      	bgt.n	800e934 <st_sssa8_ch_convolve_startNN+0xaa8>
 800e960:	9a06      	ldr	r2, [sp, #24]
 800e962:	9908      	ldr	r1, [sp, #32]
 800e964:	3201      	adds	r2, #1
 800e966:	b213      	sxth	r3, r2
 800e968:	428b      	cmp	r3, r1
 800e96a:	461a      	mov	r2, r3
 800e96c:	9306      	str	r3, [sp, #24]
 800e96e:	dbcc      	blt.n	800e90a <st_sssa8_ch_convolve_startNN+0xa7e>
 800e970:	46d8      	mov	r8, fp
 800e972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e974:	42a3      	cmp	r3, r4
 800e976:	d021      	beq.n	800e9bc <st_sssa8_ch_convolve_startNN+0xb30>
 800e978:	9b07      	ldr	r3, [sp, #28]
 800e97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e97c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e97e:	4413      	add	r3, r2
 800e980:	3101      	adds	r1, #1
 800e982:	b29b      	uxth	r3, r3
 800e984:	b209      	sxth	r1, r1
 800e986:	9307      	str	r3, [sp, #28]
 800e988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e98a:	460a      	mov	r2, r1
 800e98c:	428b      	cmp	r3, r1
 800e98e:	f340 80b5 	ble.w	800eafc <st_sssa8_ch_convolve_startNN+0xc70>
 800e992:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e994:	2b00      	cmp	r3, #0
 800e996:	d19c      	bne.n	800e8d2 <st_sssa8_ch_convolve_startNN+0xa46>
 800e998:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d14a      	bne.n	800ea34 <st_sssa8_ch_convolve_startNN+0xba8>
 800e99e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e9a0:	9808      	ldr	r0, [sp, #32]
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	933c      	str	r3, [sp, #240]	; 0xf0
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800e9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9ae:	4283      	cmp	r3, r0
 800e9b0:	db98      	blt.n	800e8e4 <st_sssa8_ch_convolve_startNN+0xa58>
 800e9b2:	b28b      	uxth	r3, r1
 800e9b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e9b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d1dd      	bne.n	800e978 <st_sssa8_ch_convolve_startNN+0xaec>
 800e9bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9be:	ee1a 2a90 	vmov	r2, s21
 800e9c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e9c4:	ee19 0a90 	vmov	r0, s19
 800e9c8:	9305      	str	r3, [sp, #20]
 800e9ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9d0:	9303      	str	r3, [sp, #12]
 800e9d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e9d4:	9302      	str	r3, [sp, #8]
 800e9d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	ee19 3a10 	vmov	r3, s18
 800e9e2:	f004 f81f 	bl	8012a24 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800e9e6:	9b07      	ldr	r3, [sp, #28]
 800e9e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e9ec:	4413      	add	r3, r2
 800e9ee:	9017      	str	r0, [sp, #92]	; 0x5c
 800e9f0:	3101      	adds	r1, #1
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	b209      	sxth	r1, r1
 800e9f6:	9307      	str	r3, [sp, #28]
 800e9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9fa:	460a      	mov	r2, r1
 800e9fc:	428b      	cmp	r3, r1
 800e9fe:	f340 8094 	ble.w	800eb2a <st_sssa8_ch_convolve_startNN+0xc9e>
 800ea02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ea04:	e7c5      	b.n	800e992 <st_sssa8_ch_convolve_startNN+0xb06>
 800ea06:	469e      	mov	lr, r3
 800ea08:	461e      	mov	r6, r3
 800ea0a:	0ff3      	lsrs	r3, r6, #31
 800ea0c:	465a      	mov	r2, fp
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4638      	mov	r0, r7
 800ea12:	45f1      	cmp	r9, lr
 800ea14:	bfd8      	it	le
 800ea16:	f043 0301 	orrle.w	r3, r3, #1
 800ea1a:	b913      	cbnz	r3, 800ea22 <st_sssa8_ch_convolve_startNN+0xb96>
 800ea1c:	f1b8 0f00 	cmp.w	r8, #0
 800ea20:	d05a      	beq.n	800ead8 <st_sssa8_ch_convolve_startNN+0xc4c>
 800ea22:	f004 ff0b 	bl	801383c <st_dsp_arm_fill_q15>
 800ea26:	3601      	adds	r6, #1
 800ea28:	4454      	add	r4, sl
 800ea2a:	b236      	sxth	r6, r6
 800ea2c:	42ae      	cmp	r6, r5
 800ea2e:	46b6      	mov	lr, r6
 800ea30:	dbeb      	blt.n	800ea0a <st_sssa8_ch_convolve_startNN+0xb7e>
 800ea32:	e795      	b.n	800e960 <st_sssa8_ch_convolve_startNN+0xad4>
 800ea34:	3b01      	subs	r3, #1
 800ea36:	933b      	str	r3, [sp, #236]	; 0xec
 800ea38:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800ea42:	f43f af4b 	beq.w	800e8dc <st_sssa8_ch_convolve_startNN+0xa50>
 800ea46:	b28b      	uxth	r3, r1
 800ea48:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800ea4c:	930d      	str	r3, [sp, #52]	; 0x34
 800ea4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea50:	bb03      	cbnz	r3, 800ea94 <st_sssa8_ch_convolve_startNN+0xc08>
 800ea52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea54:	9908      	ldr	r1, [sp, #32]
 800ea56:	428b      	cmp	r3, r1
 800ea58:	da8b      	bge.n	800e972 <st_sssa8_ch_convolve_startNN+0xae6>
 800ea5a:	46a3      	mov	fp, r4
 800ea5c:	464f      	mov	r7, r9
 800ea5e:	462c      	mov	r4, r5
 800ea60:	461e      	mov	r6, r3
 800ea62:	4618      	mov	r0, r3
 800ea64:	ee18 2a90 	vmov	r2, s17
 800ea68:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea6a:	4689      	mov	r9, r1
 800ea6c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ea70:	3601      	adds	r6, #1
 800ea72:	fb00 4007 	mla	r0, r0, r7, r4
 800ea76:	4659      	mov	r1, fp
 800ea78:	9206      	str	r2, [sp, #24]
 800ea7a:	b236      	sxth	r6, r6
 800ea7c:	fb08 a000 	mla	r0, r8, r0, sl
 800ea80:	f001 f894 	bl	800fbac <st_int8_to16_no_shift_interleaved>
 800ea84:	44ab      	add	fp, r5
 800ea86:	454e      	cmp	r6, r9
 800ea88:	4630      	mov	r0, r6
 800ea8a:	9a06      	ldr	r2, [sp, #24]
 800ea8c:	dbf0      	blt.n	800ea70 <st_sssa8_ch_convolve_startNN+0xbe4>
 800ea8e:	465c      	mov	r4, fp
 800ea90:	46b9      	mov	r9, r7
 800ea92:	e76e      	b.n	800e972 <st_sssa8_ch_convolve_startNN+0xae6>
 800ea94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea96:	9908      	ldr	r1, [sp, #32]
 800ea98:	428b      	cmp	r3, r1
 800ea9a:	f6bf af6a 	bge.w	800e972 <st_sssa8_ch_convolve_startNN+0xae6>
 800ea9e:	46a3      	mov	fp, r4
 800eaa0:	464f      	mov	r7, r9
 800eaa2:	462c      	mov	r4, r5
 800eaa4:	461e      	mov	r6, r3
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	ee18 2a90 	vmov	r2, s17
 800eaac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800eaae:	4689      	mov	r9, r1
 800eab0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800eab4:	3601      	adds	r6, #1
 800eab6:	fb00 4007 	mla	r0, r0, r7, r4
 800eaba:	4659      	mov	r1, fp
 800eabc:	9206      	str	r2, [sp, #24]
 800eabe:	b236      	sxth	r6, r6
 800eac0:	fb08 a000 	mla	r0, r8, r0, sl
 800eac4:	f000 ffdc 	bl	800fa80 <st_int8_to16_no_shift>
 800eac8:	44ab      	add	fp, r5
 800eaca:	454e      	cmp	r6, r9
 800eacc:	4630      	mov	r0, r6
 800eace:	9a06      	ldr	r2, [sp, #24]
 800ead0:	dbf0      	blt.n	800eab4 <st_sssa8_ch_convolve_startNN+0xc28>
 800ead2:	465c      	mov	r4, fp
 800ead4:	46b9      	mov	r9, r7
 800ead6:	e74c      	b.n	800e972 <st_sssa8_ch_convolve_startNN+0xae6>
 800ead8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eada:	eb03 000e 	add.w	r0, r3, lr
 800eade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae0:	fb0b 3000 	mla	r0, fp, r0, r3
 800eae4:	f001 f862 	bl	800fbac <st_int8_to16_no_shift_interleaved>
 800eae8:	e79d      	b.n	800ea26 <st_sssa8_ch_convolve_startNN+0xb9a>
 800eaea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaec:	eb03 000c 	add.w	r0, r3, ip
 800eaf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf2:	fb0b 3000 	mla	r0, fp, r0, r3
 800eaf6:	f000 ffc3 	bl	800fa80 <st_int8_to16_no_shift>
 800eafa:	e72b      	b.n	800e954 <st_sssa8_ch_convolve_startNN+0xac8>
 800eafc:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eafe:	428c      	cmp	r4, r1
 800eb00:	d013      	beq.n	800eb2a <st_sssa8_ch_convolve_startNN+0xc9e>
 800eb02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb04:	ee1a 2a90 	vmov	r2, s21
 800eb08:	ee19 0a90 	vmov	r0, s19
 800eb0c:	9305      	str	r3, [sp, #20]
 800eb0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb18:	9302      	str	r3, [sp, #8]
 800eb1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	ee19 3a10 	vmov	r3, s18
 800eb26:	f004 faa1 	bl	801306c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800eb2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eb2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eb30:	1a9b      	subs	r3, r3, r2
 800eb32:	4411      	add	r1, r2
 800eb34:	911e      	str	r1, [sp, #120]	; 0x78
 800eb36:	b299      	uxth	r1, r3
 800eb38:	4613      	mov	r3, r2
 800eb3a:	428a      	cmp	r2, r1
 800eb3c:	9126      	str	r1, [sp, #152]	; 0x98
 800eb3e:	bf28      	it	cs
 800eb40:	460b      	movcs	r3, r1
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d03d      	beq.n	800ebc4 <st_sssa8_ch_convolve_startNN+0xd38>
 800eb48:	ee1a 4a90 	vmov	r4, s21
 800eb4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800eb4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eb50:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800eb54:	fb01 0002 	mla	r0, r1, r2, r0
 800eb58:	ee0a 4a90 	vmov	s21, r4
 800eb5c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800eb5e:	9029      	str	r0, [sp, #164]	; 0xa4
 800eb60:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800eb64:	9423      	str	r4, [sp, #140]	; 0x8c
 800eb66:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800eb68:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800eb6c:	9422      	str	r4, [sp, #136]	; 0x88
 800eb6e:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800eb70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eb74:	9224      	str	r2, [sp, #144]	; 0x90
 800eb76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb78:	bb32      	cbnz	r2, 800ebc8 <st_sssa8_ch_convolve_startNN+0xd3c>
 800eb7a:	460a      	mov	r2, r1
 800eb7c:	ee19 1a90 	vmov	r1, s19
 800eb80:	9318      	str	r3, [sp, #96]	; 0x60
 800eb82:	f001 f9c3 	bl	800ff0c <st_int8_to16_dual_interleaved>
 800eb86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	9325      	str	r3, [sp, #148]	; 0x94
 800eb90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb94:	429a      	cmp	r2, r3
 800eb96:	f47f ae87 	bne.w	800e8a8 <st_sssa8_ch_convolve_startNN+0xa1c>
 800eb9a:	ee1b 7a10 	vmov	r7, s22
 800eb9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800eba0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800eba2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800eba4:	4413      	add	r3, r2
 800eba6:	3401      	adds	r4, #1
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	b224      	sxth	r4, r4
 800ebac:	932b      	str	r3, [sp, #172]	; 0xac
 800ebae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ebb0:	4625      	mov	r5, r4
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	f73f ae3d 	bgt.w	800e832 <st_sssa8_ch_convolve_startNN+0x9a6>
 800ebb8:	2000      	movs	r0, #0
 800ebba:	b04f      	add	sp, #316	; 0x13c
 800ebbc:	ecbd 8b08 	vpop	{d8-d11}
 800ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc4:	9318      	str	r3, [sp, #96]	; 0x60
 800ebc6:	e7de      	b.n	800eb86 <st_sssa8_ch_convolve_startNN+0xcfa>
 800ebc8:	460a      	mov	r2, r1
 800ebca:	ee19 1a90 	vmov	r1, s19
 800ebce:	9318      	str	r3, [sp, #96]	; 0x60
 800ebd0:	f001 f83c 	bl	800fc4c <st_int8_to16_dual>
 800ebd4:	e7d7      	b.n	800eb86 <st_sssa8_ch_convolve_startNN+0xcfa>
 800ebd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ebd8:	ee19 1a90 	vmov	r1, s19
 800ebdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ebde:	9860      	ldr	r0, [sp, #384]	; 0x180
 800ebe0:	f001 f834 	bl	800fc4c <st_int8_to16_dual>
 800ebe4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f47f ae40 	bne.w	800e86c <st_sssa8_ch_convolve_startNN+0x9e0>
 800ebec:	b2a3      	uxth	r3, r4
 800ebee:	932c      	str	r3, [sp, #176]	; 0xb0
 800ebf0:	e7d5      	b.n	800eb9e <st_sssa8_ch_convolve_startNN+0xd12>
 800ebf2:	ed8d aa17 	vstr	s20, [sp, #92]	; 0x5c
 800ebf6:	ed8d 9a18 	vstr	s18, [sp, #96]	; 0x60
 800ebfa:	f7ff b9a8 	b.w	800df4e <st_sssa8_ch_convolve_startNN+0xc2>
 800ebfe:	bf00      	nop
 800ec00:	ffff0000 	.word	0xffff0000

0800ec04 <st_sssa8_fully_connected>:
 800ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	b097      	sub	sp, #92	; 0x5c
 800ec0a:	460d      	mov	r5, r1
 800ec0c:	4683      	mov	fp, r0
 800ec0e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800ec10:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	9203      	str	r2, [sp, #12]
 800ec16:	9307      	str	r3, [sp, #28]
 800ec18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec1a:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800ec1e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ec22:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800ec26:	1e4a      	subs	r2, r1, #1
 800ec28:	9104      	str	r1, [sp, #16]
 800ec2a:	920d      	str	r2, [sp, #52]	; 0x34
 800ec2c:	b292      	uxth	r2, r2
 800ec2e:	2a14      	cmp	r2, #20
 800ec30:	f200 81b3 	bhi.w	800ef9a <st_sssa8_fully_connected+0x396>
 800ec34:	2201      	movs	r2, #1
 800ec36:	408b      	lsls	r3, r1
 800ec38:	408a      	lsls	r2, r1
 800ec3a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ec3e:	9308      	str	r3, [sp, #32]
 800ec40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 81ae 	beq.w	800efa4 <st_sssa8_fully_connected+0x3a0>
 800ec48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec4a:	b2b3      	uxth	r3, r6
 800ec4c:	9600      	str	r6, [sp, #0]
 800ec4e:	4658      	mov	r0, fp
 800ec50:	0851      	lsrs	r1, r2, #1
 800ec52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ec56:	9e03      	ldr	r6, [sp, #12]
 800ec58:	460c      	mov	r4, r1
 800ec5a:	9115      	str	r1, [sp, #84]	; 0x54
 800ec5c:	4632      	mov	r2, r6
 800ec5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ec60:	f003 fea8 	bl	80129b4 <st_int8_reordered_no_shift_zero>
 800ec64:	4621      	mov	r1, r4
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	f000 8145 	beq.w	800eef6 <st_sssa8_fully_connected+0x2f2>
 800ec6c:	4634      	mov	r4, r6
 800ec6e:	f1a6 0310 	sub.w	r3, r6, #16
 800ec72:	9e04      	ldr	r6, [sp, #16]
 800ec74:	1e4a      	subs	r2, r1, #1
 800ec76:	2001      	movs	r0, #1
 800ec78:	091b      	lsrs	r3, r3, #4
 800ec7a:	1eb1      	subs	r1, r6, #2
 800ec7c:	b292      	uxth	r2, r2
 800ec7e:	3301      	adds	r3, #1
 800ec80:	fa00 f101 	lsl.w	r1, r0, r1
 800ec84:	9112      	str	r1, [sp, #72]	; 0x48
 800ec86:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ec88:	3110      	adds	r1, #16
 800ec8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ec8e:	920e      	str	r2, [sp, #56]	; 0x38
 800ec90:	1ee2      	subs	r2, r4, #3
 800ec92:	920f      	str	r2, [sp, #60]	; 0x3c
 800ec94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ec96:	3208      	adds	r2, #8
 800ec98:	9205      	str	r2, [sp, #20]
 800ec9a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ec9c:	3202      	adds	r2, #2
 800ec9e:	9206      	str	r2, [sp, #24]
 800eca0:	011a      	lsls	r2, r3, #4
 800eca2:	9209      	str	r2, [sp, #36]	; 0x24
 800eca4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eca6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800ecaa:	9310      	str	r3, [sp, #64]	; 0x40
 800ecac:	1f23      	subs	r3, r4, #4
 800ecae:	9311      	str	r3, [sp, #68]	; 0x44
 800ecb0:	1b83      	subs	r3, r0, r6
 800ecb2:	9314      	str	r3, [sp, #80]	; 0x50
 800ecb4:	9a03      	ldr	r2, [sp, #12]
 800ecb6:	9b05      	ldr	r3, [sp, #20]
 800ecb8:	2a0f      	cmp	r2, #15
 800ecba:	eb05 0b02 	add.w	fp, r5, r2
 800ecbe:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800ecc2:	f340 8261 	ble.w	800f188 <st_sssa8_fully_connected+0x584>
 800ecc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecc8:	465c      	mov	r4, fp
 800ecca:	18ae      	adds	r6, r5, r2
 800eccc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ecce:	682f      	ldr	r7, [r5, #0]
 800ecd0:	f8d4 a000 	ldr.w	sl, [r4]
 800ecd4:	ea4f 2037 	mov.w	r0, r7, ror #8
 800ecd8:	f8d2 9000 	ldr.w	r9, [r2]
 800ecdc:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800ece0:	fa2f f080 	sxtb16	r0, r0
 800ece4:	fa2f fc8e 	sxtb16	ip, lr
 800ece8:	fa2f f787 	sxtb16	r7, r7
 800ecec:	fa2f fe8a 	sxtb16	lr, sl
 800ecf0:	fb29 1107 	smlad	r1, r9, r7, r1
 800ecf4:	fb29 390e 	smlad	r9, r9, lr, r3
 800ecf8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800ecfc:	fb28 1100 	smlad	r1, r8, r0, r1
 800ed00:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800ed04:	6868      	ldr	r0, [r5, #4]
 800ed06:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ed0a:	ea4f 2330 	mov.w	r3, r0, ror #8
 800ed0e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800ed12:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800ed16:	fa2f f383 	sxtb16	r3, r3
 800ed1a:	fa2f f78a 	sxtb16	r7, sl
 800ed1e:	fa2f f080 	sxtb16	r0, r0
 800ed22:	fa2f fa89 	sxtb16	sl, r9
 800ed26:	fb28 1000 	smlad	r0, r8, r0, r1
 800ed2a:	fb28 e80a 	smlad	r8, r8, sl, lr
 800ed2e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800ed32:	fb2c 0003 	smlad	r0, ip, r3, r0
 800ed36:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800ed3a:	68ab      	ldr	r3, [r5, #8]
 800ed3c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800ed40:	ea4f 2133 	mov.w	r1, r3, ror #8
 800ed44:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800ed48:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800ed4c:	fa2f f181 	sxtb16	r1, r1
 800ed50:	fa2f f98e 	sxtb16	r9, lr
 800ed54:	fa2f f383 	sxtb16	r3, r3
 800ed58:	fa2f fe88 	sxtb16	lr, r8
 800ed5c:	fb2c 0303 	smlad	r3, ip, r3, r0
 800ed60:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800ed64:	6957      	ldr	r7, [r2, #20]
 800ed66:	fb27 3301 	smlad	r3, r7, r1, r3
 800ed6a:	fb27 ce09 	smlad	lr, r7, r9, ip
 800ed6e:	68e8      	ldr	r0, [r5, #12]
 800ed70:	3410      	adds	r4, #16
 800ed72:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800ed76:	3510      	adds	r5, #16
 800ed78:	ea4f 2130 	mov.w	r1, r0, ror #8
 800ed7c:	6997      	ldr	r7, [r2, #24]
 800ed7e:	fa2f f881 	sxtb16	r8, r1
 800ed82:	fa2f f180 	sxtb16	r1, r0
 800ed86:	ea4f 203c 	mov.w	r0, ip, ror #8
 800ed8a:	fa2f fc8c 	sxtb16	ip, ip
 800ed8e:	fa2f f080 	sxtb16	r0, r0
 800ed92:	fb27 3101 	smlad	r1, r7, r1, r3
 800ed96:	fb27 e70c 	smlad	r7, r7, ip, lr
 800ed9a:	69d3      	ldr	r3, [r2, #28]
 800ed9c:	3220      	adds	r2, #32
 800ed9e:	fb23 1108 	smlad	r1, r3, r8, r1
 800eda2:	fb23 7300 	smlad	r3, r3, r0, r7
 800eda6:	42b5      	cmp	r5, r6
 800eda8:	d191      	bne.n	800ecce <st_sssa8_fully_connected+0xca>
 800edaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edac:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800edb0:	4493      	add	fp, r2
 800edb2:	4691      	mov	r9, r2
 800edb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edb6:	4591      	cmp	r9, r2
 800edb8:	f280 81e4 	bge.w	800f184 <st_sssa8_fully_connected+0x580>
 800edbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800edbe:	4657      	mov	r7, sl
 800edc0:	46d8      	mov	r8, fp
 800edc2:	eba2 0209 	sub.w	r2, r2, r9
 800edc6:	0892      	lsrs	r2, r2, #2
 800edc8:	920c      	str	r2, [sp, #48]	; 0x30
 800edca:	3201      	adds	r2, #1
 800edcc:	0090      	lsls	r0, r2, #2
 800edce:	920b      	str	r2, [sp, #44]	; 0x2c
 800edd0:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800edd4:	900a      	str	r0, [sp, #40]	; 0x28
 800edd6:	f856 eb04 	ldr.w	lr, [r6], #4
 800edda:	f858 0b04 	ldr.w	r0, [r8], #4
 800edde:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	ea4f 2530 	mov.w	r5, r0, ror #8
 800ede8:	fa2f fc8c 	sxtb16	ip, ip
 800edec:	fa2f fe8e 	sxtb16	lr, lr
 800edf0:	fa2f f585 	sxtb16	r5, r5
 800edf4:	fa2f f080 	sxtb16	r0, r0
 800edf8:	fb22 110e 	smlad	r1, r2, lr, r1
 800edfc:	fb22 3300 	smlad	r3, r2, r0, r3
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	3708      	adds	r7, #8
 800ee04:	fb22 110c 	smlad	r1, r2, ip, r1
 800ee08:	fb22 3305 	smlad	r3, r2, r5, r3
 800ee0c:	42a6      	cmp	r6, r4
 800ee0e:	d1e2      	bne.n	800edd6 <st_sssa8_fully_connected+0x1d2>
 800ee10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee12:	f109 0904 	add.w	r9, r9, #4
 800ee16:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800ee1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee1c:	4493      	add	fp, r2
 800ee1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee20:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800ee24:	9d03      	ldr	r5, [sp, #12]
 800ee26:	454d      	cmp	r5, r9
 800ee28:	dd37      	ble.n	800ee9a <st_sssa8_fully_connected+0x296>
 800ee2a:	f9ba 2000 	ldrsh.w	r2, [sl]
 800ee2e:	f994 0000 	ldrsb.w	r0, [r4]
 800ee32:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ee36:	f99b 0000 	ldrsb.w	r0, [fp]
 800ee3a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ee3e:	f109 0201 	add.w	r2, r9, #1
 800ee42:	42aa      	cmp	r2, r5
 800ee44:	da25      	bge.n	800ee92 <st_sssa8_fully_connected+0x28e>
 800ee46:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800ee4a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ee4e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ee52:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800ee56:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ee5a:	f109 0202 	add.w	r2, r9, #2
 800ee5e:	42aa      	cmp	r2, r5
 800ee60:	da17      	bge.n	800ee92 <st_sssa8_fully_connected+0x28e>
 800ee62:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800ee66:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ee6a:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ee6e:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800ee72:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ee76:	f109 0203 	add.w	r2, r9, #3
 800ee7a:	4295      	cmp	r5, r2
 800ee7c:	dd09      	ble.n	800ee92 <st_sssa8_fully_connected+0x28e>
 800ee7e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800ee82:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800ee86:	fb12 3300 	smlabb	r3, r2, r0, r3
 800ee8a:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800ee8e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800ee92:	9a03      	ldr	r2, [sp, #12]
 800ee94:	eba2 0909 	sub.w	r9, r2, r9
 800ee98:	444c      	add	r4, r9
 800ee9a:	9a04      	ldr	r2, [sp, #16]
 800ee9c:	2a15      	cmp	r2, #21
 800ee9e:	f340 8141 	ble.w	800f124 <st_sssa8_fully_connected+0x520>
 800eea2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800eea4:	9a07      	ldr	r2, [sp, #28]
 800eea6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eea8:	fb51 0102 	smmla	r1, r1, r2, r0
 800eeac:	fb53 0302 	smmla	r3, r3, r2, r0
 800eeb0:	4129      	asrs	r1, r5
 800eeb2:	9a08      	ldr	r2, [sp, #32]
 800eeb4:	4411      	add	r1, r2
 800eeb6:	f301 0107 	ssat	r1, #8, r1
 800eeba:	9806      	ldr	r0, [sp, #24]
 800eebc:	412b      	asrs	r3, r5
 800eebe:	f800 1c02 	strb.w	r1, [r0, #-2]
 800eec2:	4413      	add	r3, r2
 800eec4:	f303 0307 	ssat	r3, #8, r3
 800eec8:	f800 3c01 	strb.w	r3, [r0, #-1]
 800eecc:	9a03      	ldr	r2, [sp, #12]
 800eece:	9b05      	ldr	r3, [sp, #20]
 800eed0:	18a5      	adds	r5, r4, r2
 800eed2:	9a06      	ldr	r2, [sp, #24]
 800eed4:	3308      	adds	r3, #8
 800eed6:	3202      	adds	r2, #2
 800eed8:	9305      	str	r3, [sp, #20]
 800eeda:	9206      	str	r2, [sp, #24]
 800eedc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eede:	4293      	cmp	r3, r2
 800eee0:	f47f aee8 	bne.w	800ecb4 <st_sssa8_fully_connected+0xb0>
 800eee4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800eee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eee8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800eeec:	9225      	str	r2, [sp, #148]	; 0x94
 800eeee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eef4:	9324      	str	r3, [sp, #144]	; 0x90
 800eef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eef8:	07db      	lsls	r3, r3, #31
 800eefa:	d54a      	bpl.n	800ef92 <st_sssa8_fully_connected+0x38e>
 800eefc:	9a03      	ldr	r2, [sp, #12]
 800eefe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ef00:	0897      	lsrs	r7, r2, #2
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f000 8176 	beq.w	800f1f4 <st_sssa8_fully_connected+0x5f0>
 800ef08:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800ef0c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ef0e:	f855 2b04 	ldr.w	r2, [r5], #4
 800ef12:	6801      	ldr	r1, [r0, #0]
 800ef14:	fa2f f482 	sxtb16	r4, r2
 800ef18:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ef1c:	fa2f f282 	sxtb16	r2, r2
 800ef20:	fb21 3304 	smlad	r3, r1, r4, r3
 800ef24:	6841      	ldr	r1, [r0, #4]
 800ef26:	3008      	adds	r0, #8
 800ef28:	fb21 3302 	smlad	r3, r1, r2, r3
 800ef2c:	42b5      	cmp	r5, r6
 800ef2e:	d1ee      	bne.n	800ef0e <st_sssa8_fully_connected+0x30a>
 800ef30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ef32:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800ef36:	9226      	str	r2, [sp, #152]	; 0x98
 800ef38:	9a03      	ldr	r2, [sp, #12]
 800ef3a:	f012 0203 	ands.w	r2, r2, #3
 800ef3e:	d016      	beq.n	800ef6e <st_sssa8_fully_connected+0x36a>
 800ef40:	3a01      	subs	r2, #1
 800ef42:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ef44:	f996 1000 	ldrsb.w	r1, [r6]
 800ef48:	8800      	ldrh	r0, [r0, #0]
 800ef4a:	b292      	uxth	r2, r2
 800ef4c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ef50:	b16a      	cbz	r2, 800ef6e <st_sssa8_fully_connected+0x36a>
 800ef52:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ef54:	2a01      	cmp	r2, #1
 800ef56:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800ef5a:	8840      	ldrh	r0, [r0, #2]
 800ef5c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ef60:	d005      	beq.n	800ef6e <st_sssa8_fully_connected+0x36a>
 800ef62:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ef64:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800ef68:	8889      	ldrh	r1, [r1, #4]
 800ef6a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800ef6e:	9a04      	ldr	r2, [sp, #16]
 800ef70:	2a15      	cmp	r2, #21
 800ef72:	f340 811d 	ble.w	800f1b0 <st_sssa8_fully_connected+0x5ac>
 800ef76:	1e91      	subs	r1, r2, #2
 800ef78:	2201      	movs	r2, #1
 800ef7a:	408a      	lsls	r2, r1
 800ef7c:	9907      	ldr	r1, [sp, #28]
 800ef7e:	fb53 2301 	smmla	r3, r3, r1, r2
 800ef82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef84:	4113      	asrs	r3, r2
 800ef86:	9a08      	ldr	r2, [sp, #32]
 800ef88:	4413      	add	r3, r2
 800ef8a:	f303 0307 	ssat	r3, #8, r3
 800ef8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ef90:	7013      	strb	r3, [r2, #0]
 800ef92:	2000      	movs	r0, #0
 800ef94:	b017      	add	sp, #92	; 0x5c
 800ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9a:	9308      	str	r3, [sp, #32]
 800ef9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f47f ae52 	bne.w	800ec48 <st_sssa8_fully_connected+0x44>
 800efa4:	4273      	negs	r3, r6
 800efa6:	b298      	uxth	r0, r3
 800efa8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800efac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0ef      	beq.n	800ef92 <st_sssa8_fully_connected+0x38e>
 800efb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800efb4:	3301      	adds	r3, #1
 800efb6:	9903      	ldr	r1, [sp, #12]
 800efb8:	b236      	sxth	r6, r6
 800efba:	18d3      	adds	r3, r2, r3
 800efbc:	9c04      	ldr	r4, [sp, #16]
 800efbe:	f1a1 0810 	sub.w	r8, r1, #16
 800efc2:	f102 0e01 	add.w	lr, r2, #1
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	2201      	movs	r2, #1
 800efca:	f028 080f 	bic.w	r8, r8, #15
 800efce:	1ea3      	subs	r3, r4, #2
 800efd0:	468c      	mov	ip, r1
 800efd2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800efd6:	fa02 f303 	lsl.w	r3, r2, r3
 800efda:	f108 0810 	add.w	r8, r8, #16
 800efde:	f1bc 0f0f 	cmp.w	ip, #15
 800efe2:	f8cd b00c 	str.w	fp, [sp, #12]
 800efe6:	9309      	str	r3, [sp, #36]	; 0x24
 800efe8:	eb0b 0308 	add.w	r3, fp, r8
 800efec:	9306      	str	r3, [sp, #24]
 800efee:	eba2 0304 	sub.w	r3, r2, r4
 800eff2:	930a      	str	r3, [sp, #40]	; 0x28
 800eff4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eff8:	dd7e      	ble.n	800f0f8 <st_sssa8_fully_connected+0x4f4>
 800effa:	eb05 0708 	add.w	r7, r5, r8
 800effe:	462a      	mov	r2, r5
 800f000:	9d03      	ldr	r5, [sp, #12]
 800f002:	6811      	ldr	r1, [r2, #0]
 800f004:	682c      	ldr	r4, [r5, #0]
 800f006:	fa2f fb81 	sxtb16	fp, r1
 800f00a:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800f00e:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f012:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f016:	fa2f f181 	sxtb16	r1, r1
 800f01a:	fa20 f484 	sxtab16	r4, r0, r4
 800f01e:	fb24 340b 	smlad	r4, r4, fp, r3
 800f022:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800f026:	6851      	ldr	r1, [r2, #4]
 800f028:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f02c:	fa2f f481 	sxtb16	r4, r1
 800f030:	ea4f 233a 	mov.w	r3, sl, ror #8
 800f034:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f038:	fa20 f383 	sxtab16	r3, r0, r3
 800f03c:	fa2f f181 	sxtb16	r1, r1
 800f040:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f044:	fb2a ba04 	smlad	sl, sl, r4, fp
 800f048:	fb23 a401 	smlad	r4, r3, r1, sl
 800f04c:	6891      	ldr	r1, [r2, #8]
 800f04e:	68ab      	ldr	r3, [r5, #8]
 800f050:	fa2f fb81 	sxtb16	fp, r1
 800f054:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800f058:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f05c:	fa20 fa8a 	sxtab16	sl, r0, sl
 800f060:	fa2f f181 	sxtb16	r1, r1
 800f064:	fa20 f383 	sxtab16	r3, r0, r3
 800f068:	fb23 430b 	smlad	r3, r3, fp, r4
 800f06c:	fb2a 3301 	smlad	r3, sl, r1, r3
 800f070:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800f074:	3510      	adds	r5, #16
 800f076:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800f07a:	3210      	adds	r2, #16
 800f07c:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800f080:	ea4f 2431 	mov.w	r4, r1, ror #8
 800f084:	fa2f fa8a 	sxtb16	sl, sl
 800f088:	fa2f fb8b 	sxtb16	fp, fp
 800f08c:	fa20 f181 	sxtab16	r1, r0, r1
 800f090:	fa20 f484 	sxtab16	r4, r0, r4
 800f094:	fb21 330a 	smlad	r3, r1, sl, r3
 800f098:	fb24 330b 	smlad	r3, r4, fp, r3
 800f09c:	4297      	cmp	r7, r2
 800f09e:	d1b0      	bne.n	800f002 <st_sssa8_fully_connected+0x3fe>
 800f0a0:	4645      	mov	r5, r8
 800f0a2:	9f06      	ldr	r7, [sp, #24]
 800f0a4:	45ac      	cmp	ip, r5
 800f0a6:	dd2c      	ble.n	800f102 <st_sssa8_fully_connected+0x4fe>
 800f0a8:	ebac 0505 	sub.w	r5, ip, r5
 800f0ac:	4415      	add	r5, r2
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800f0b4:	3201      	adds	r2, #1
 800f0b6:	7809      	ldrb	r1, [r1, #0]
 800f0b8:	1ba4      	subs	r4, r4, r6
 800f0ba:	42aa      	cmp	r2, r5
 800f0bc:	b249      	sxtb	r1, r1
 800f0be:	fb14 3301 	smlabb	r3, r4, r1, r3
 800f0c2:	d1f4      	bne.n	800f0ae <st_sssa8_fully_connected+0x4aa>
 800f0c4:	9a04      	ldr	r2, [sp, #16]
 800f0c6:	2a15      	cmp	r2, #21
 800f0c8:	dd1f      	ble.n	800f10a <st_sssa8_fully_connected+0x506>
 800f0ca:	9a07      	ldr	r2, [sp, #28]
 800f0cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0ce:	fb53 1302 	smmla	r3, r3, r2, r1
 800f0d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0d4:	4113      	asrs	r3, r2
 800f0d6:	9a08      	ldr	r2, [sp, #32]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f303 0307 	ssat	r3, #8, r3
 800f0de:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f0e2:	f10e 0e01 	add.w	lr, lr, #1
 800f0e6:	9b05      	ldr	r3, [sp, #20]
 800f0e8:	459e      	cmp	lr, r3
 800f0ea:	f43f af52 	beq.w	800ef92 <st_sssa8_fully_connected+0x38e>
 800f0ee:	f1bc 0f0f 	cmp.w	ip, #15
 800f0f2:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0f6:	dc80      	bgt.n	800effa <st_sssa8_fully_connected+0x3f6>
 800f0f8:	462a      	mov	r2, r5
 800f0fa:	2500      	movs	r5, #0
 800f0fc:	9f03      	ldr	r7, [sp, #12]
 800f0fe:	45ac      	cmp	ip, r5
 800f100:	dcd2      	bgt.n	800f0a8 <st_sssa8_fully_connected+0x4a4>
 800f102:	4615      	mov	r5, r2
 800f104:	9a04      	ldr	r2, [sp, #16]
 800f106:	2a15      	cmp	r2, #21
 800f108:	dcdf      	bgt.n	800f0ca <st_sssa8_fully_connected+0x4c6>
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	dd42      	ble.n	800f194 <st_sssa8_fully_connected+0x590>
 800f10e:	005b      	lsls	r3, r3, #1
 800f110:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800f114:	fb53 4301 	smmla	r3, r3, r1, r4
 800f118:	4113      	asrs	r3, r2
 800f11a:	f303 0307 	ssat	r3, #8, r3
 800f11e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f122:	e7de      	b.n	800f0e2 <st_sssa8_fully_connected+0x4de>
 800f124:	2a00      	cmp	r2, #0
 800f126:	dd13      	ble.n	800f150 <st_sssa8_fully_connected+0x54c>
 800f128:	0049      	lsls	r1, r1, #1
 800f12a:	005b      	lsls	r3, r3, #1
 800f12c:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800f130:	fb51 5100 	smmla	r1, r1, r0, r5
 800f134:	fb53 5300 	smmla	r3, r3, r0, r5
 800f138:	4111      	asrs	r1, r2
 800f13a:	f301 0107 	ssat	r1, #8, r1
 800f13e:	9806      	ldr	r0, [sp, #24]
 800f140:	4113      	asrs	r3, r2
 800f142:	f800 1c02 	strb.w	r1, [r0, #-2]
 800f146:	f303 0307 	ssat	r3, #8, r3
 800f14a:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f14e:	e6bd      	b.n	800eecc <st_sssa8_fully_connected+0x2c8>
 800f150:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f152:	fa01 f200 	lsl.w	r2, r1, r0
 800f156:	f302 021f 	ssat	r2, #32, r2
 800f15a:	9907      	ldr	r1, [sp, #28]
 800f15c:	fb52 f211 	smmulr	r2, r2, r1
 800f160:	4083      	lsls	r3, r0
 800f162:	f303 031f 	ssat	r3, #32, r3
 800f166:	fb53 f311 	smmulr	r3, r3, r1
 800f16a:	9908      	ldr	r1, [sp, #32]
 800f16c:	440a      	add	r2, r1
 800f16e:	f302 0207 	ssat	r2, #8, r2
 800f172:	9806      	ldr	r0, [sp, #24]
 800f174:	440b      	add	r3, r1
 800f176:	f800 2c02 	strb.w	r2, [r0, #-2]
 800f17a:	f303 0307 	ssat	r3, #8, r3
 800f17e:	f800 3c01 	strb.w	r3, [r0, #-1]
 800f182:	e6a3      	b.n	800eecc <st_sssa8_fully_connected+0x2c8>
 800f184:	4634      	mov	r4, r6
 800f186:	e64d      	b.n	800ee24 <st_sssa8_fully_connected+0x220>
 800f188:	462e      	mov	r6, r5
 800f18a:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800f18e:	f04f 0900 	mov.w	r9, #0
 800f192:	e60f      	b.n	800edb4 <st_sssa8_fully_connected+0x1b0>
 800f194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f196:	4093      	lsls	r3, r2
 800f198:	f303 031f 	ssat	r3, #32, r3
 800f19c:	9a07      	ldr	r2, [sp, #28]
 800f19e:	fb53 f312 	smmulr	r3, r3, r2
 800f1a2:	9a08      	ldr	r2, [sp, #32]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f303 0307 	ssat	r3, #8, r3
 800f1aa:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800f1ae:	e798      	b.n	800f0e2 <st_sssa8_fully_connected+0x4de>
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	dd0d      	ble.n	800f1d0 <st_sssa8_fully_connected+0x5cc>
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800f1ba:	fb53 0301 	smmla	r3, r3, r1, r0
 800f1be:	4113      	asrs	r3, r2
 800f1c0:	f303 0307 	ssat	r3, #8, r3
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f1c8:	7013      	strb	r3, [r2, #0]
 800f1ca:	b017      	add	sp, #92	; 0x5c
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	f1c2 0201 	rsb	r2, r2, #1
 800f1d4:	4093      	lsls	r3, r2
 800f1d6:	f303 031f 	ssat	r3, #32, r3
 800f1da:	9a07      	ldr	r2, [sp, #28]
 800f1dc:	fb53 f312 	smmulr	r3, r3, r2
 800f1e0:	9a08      	ldr	r2, [sp, #32]
 800f1e2:	441a      	add	r2, r3
 800f1e4:	f302 0307 	ssat	r3, #8, r2
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f1ec:	7013      	strb	r3, [r2, #0]
 800f1ee:	b017      	add	sp, #92	; 0x5c
 800f1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f4:	462e      	mov	r6, r5
 800f1f6:	e69f      	b.n	800ef38 <st_sssa8_fully_connected+0x334>

0800f1f8 <ai_padding_opt_init>:
 800f1f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	2700      	movs	r7, #0
 800f1fe:	9c07      	ldr	r4, [sp, #28]
 800f200:	e9c0 7700 	strd	r7, r7, [r0]
 800f204:	6087      	str	r7, [r0, #8]
 800f206:	46b9      	mov	r9, r7
 800f208:	690d      	ldr	r5, [r1, #16]
 800f20a:	f1c5 0c00 	rsb	ip, r5, #0
 800f20e:	689d      	ldr	r5, [r3, #8]
 800f210:	42bd      	cmp	r5, r7
 800f212:	dd1c      	ble.n	800f24e <ai_padding_opt_init+0x56>
 800f214:	463e      	mov	r6, r7
 800f216:	46be      	mov	lr, r7
 800f218:	e010      	b.n	800f23c <ai_padding_opt_init+0x44>
 800f21a:	6895      	ldr	r5, [r2, #8]
 800f21c:	eba5 080c 	sub.w	r8, r5, ip
 800f220:	68a5      	ldr	r5, [r4, #8]
 800f222:	45a8      	cmp	r8, r5
 800f224:	da10      	bge.n	800f248 <ai_padding_opt_init+0x50>
 800f226:	f109 0901 	add.w	r9, r9, #1
 800f22a:	f8c0 9008 	str.w	r9, [r0, #8]
 800f22e:	688d      	ldr	r5, [r1, #8]
 800f230:	f10e 0e01 	add.w	lr, lr, #1
 800f234:	44ac      	add	ip, r5
 800f236:	689d      	ldr	r5, [r3, #8]
 800f238:	4575      	cmp	r5, lr
 800f23a:	dd09      	ble.n	800f250 <ai_padding_opt_init+0x58>
 800f23c:	f1bc 0f00 	cmp.w	ip, #0
 800f240:	daeb      	bge.n	800f21a <ai_padding_opt_init+0x22>
 800f242:	3601      	adds	r6, #1
 800f244:	6006      	str	r6, [r0, #0]
 800f246:	e7f2      	b.n	800f22e <ai_padding_opt_init+0x36>
 800f248:	3701      	adds	r7, #1
 800f24a:	6047      	str	r7, [r0, #4]
 800f24c:	e7ef      	b.n	800f22e <ai_padding_opt_init+0x36>
 800f24e:	463e      	mov	r6, r7
 800f250:	2500      	movs	r5, #0
 800f252:	f8c0 9014 	str.w	r9, [r0, #20]
 800f256:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800f25a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800f25e:	6205      	str	r5, [r0, #32]
 800f260:	694e      	ldr	r6, [r1, #20]
 800f262:	f1c6 0c00 	rsb	ip, r6, #0
 800f266:	685e      	ldr	r6, [r3, #4]
 800f268:	42ae      	cmp	r6, r5
 800f26a:	dd1c      	ble.n	800f2a6 <ai_padding_opt_init+0xae>
 800f26c:	46ae      	mov	lr, r5
 800f26e:	e00f      	b.n	800f290 <ai_padding_opt_init+0x98>
 800f270:	6855      	ldr	r5, [r2, #4]
 800f272:	6866      	ldr	r6, [r4, #4]
 800f274:	eba5 050c 	sub.w	r5, r5, ip
 800f278:	42b5      	cmp	r5, r6
 800f27a:	da10      	bge.n	800f29e <ai_padding_opt_init+0xa6>
 800f27c:	6a05      	ldr	r5, [r0, #32]
 800f27e:	3501      	adds	r5, #1
 800f280:	6205      	str	r5, [r0, #32]
 800f282:	68cd      	ldr	r5, [r1, #12]
 800f284:	f10e 0e01 	add.w	lr, lr, #1
 800f288:	44ac      	add	ip, r5
 800f28a:	685d      	ldr	r5, [r3, #4]
 800f28c:	4575      	cmp	r5, lr
 800f28e:	dd0a      	ble.n	800f2a6 <ai_padding_opt_init+0xae>
 800f290:	f1bc 0f00 	cmp.w	ip, #0
 800f294:	daec      	bge.n	800f270 <ai_padding_opt_init+0x78>
 800f296:	6985      	ldr	r5, [r0, #24]
 800f298:	3501      	adds	r5, #1
 800f29a:	6185      	str	r5, [r0, #24]
 800f29c:	e7f1      	b.n	800f282 <ai_padding_opt_init+0x8a>
 800f29e:	69c5      	ldr	r5, [r0, #28]
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	61c5      	str	r5, [r0, #28]
 800f2a4:	e7ed      	b.n	800f282 <ai_padding_opt_init+0x8a>
 800f2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2aa:	bf00      	nop

0800f2ac <ai_padding_opt_phase1>:
 800f2ac:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800f2b0:	b923      	cbnz	r3, 800f2bc <ai_padding_opt_phase1+0x10>
 800f2b2:	b17a      	cbz	r2, 800f2d4 <ai_padding_opt_phase1+0x28>
 800f2b4:	3a01      	subs	r2, #1
 800f2b6:	8483      	strh	r3, [r0, #36]	; 0x24
 800f2b8:	61c2      	str	r2, [r0, #28]
 800f2ba:	e004      	b.n	800f2c6 <ai_padding_opt_phase1+0x1a>
 800f2bc:	b152      	cbz	r2, 800f2d4 <ai_padding_opt_phase1+0x28>
 800f2be:	2201      	movs	r2, #1
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	8482      	strh	r2, [r0, #36]	; 0x24
 800f2c4:	6183      	str	r3, [r0, #24]
 800f2c6:	68c3      	ldr	r3, [r0, #12]
 800f2c8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800f2cc:	6003      	str	r3, [r0, #0]
 800f2ce:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f2d2:	4770      	bx	lr
 800f2d4:	6a03      	ldr	r3, [r0, #32]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	8482      	strh	r2, [r0, #36]	; 0x24
 800f2dc:	6203      	str	r3, [r0, #32]
 800f2de:	e7f2      	b.n	800f2c6 <ai_padding_opt_phase1+0x1a>

0800f2e0 <st_sssa8_ch_nn_mat_mult_kernel>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	b09d      	sub	sp, #116	; 0x74
 800f2e6:	085e      	lsrs	r6, r3, #1
 800f2e8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800f2ea:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800f2ee:	441d      	add	r5, r3
 800f2f0:	931a      	str	r3, [sp, #104]	; 0x68
 800f2f2:	9111      	str	r1, [sp, #68]	; 0x44
 800f2f4:	9219      	str	r2, [sp, #100]	; 0x64
 800f2f6:	940b      	str	r4, [sp, #44]	; 0x2c
 800f2f8:	9518      	str	r5, [sp, #96]	; 0x60
 800f2fa:	961b      	str	r6, [sp, #108]	; 0x6c
 800f2fc:	f000 8276 	beq.w	800f7ec <st_sssa8_ch_nn_mat_mult_kernel+0x50c>
 800f300:	eb01 0744 	add.w	r7, r1, r4, lsl #1
 800f304:	4696      	mov	lr, r2
 800f306:	1e72      	subs	r2, r6, #1
 800f308:	460e      	mov	r6, r1
 800f30a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f30c:	f1a4 0310 	sub.w	r3, r4, #16
 800f310:	b292      	uxth	r2, r2
 800f312:	f8df 8768 	ldr.w	r8, [pc, #1896]	; 800fa7c <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800f316:	3108      	adds	r1, #8
 800f318:	091b      	lsrs	r3, r3, #4
 800f31a:	4684      	mov	ip, r0
 800f31c:	9714      	str	r7, [sp, #80]	; 0x50
 800f31e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f322:	4672      	mov	r2, lr
 800f324:	3301      	adds	r3, #1
 800f326:	3208      	adds	r2, #8
 800f328:	9113      	str	r1, [sp, #76]	; 0x4c
 800f32a:	4621      	mov	r1, r4
 800f32c:	3c03      	subs	r4, #3
 800f32e:	920c      	str	r2, [sp, #48]	; 0x30
 800f330:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f332:	9412      	str	r4, [sp, #72]	; 0x48
 800f334:	3204      	adds	r2, #4
 800f336:	9206      	str	r2, [sp, #24]
 800f338:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f33a:	3204      	adds	r2, #4
 800f33c:	9207      	str	r2, [sp, #28]
 800f33e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f340:	3204      	adds	r2, #4
 800f342:	9208      	str	r2, [sp, #32]
 800f344:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f346:	3201      	adds	r2, #1
 800f348:	9209      	str	r2, [sp, #36]	; 0x24
 800f34a:	1c6a      	adds	r2, r5, #1
 800f34c:	920a      	str	r2, [sp, #40]	; 0x28
 800f34e:	011a      	lsls	r2, r3, #4
 800f350:	920d      	str	r2, [sp, #52]	; 0x34
 800f352:	eb06 1243 	add.w	r2, r6, r3, lsl #5
 800f356:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800f35a:	9216      	str	r2, [sp, #88]	; 0x58
 800f35c:	9315      	str	r3, [sp, #84]	; 0x54
 800f35e:	1f0b      	subs	r3, r1, #4
 800f360:	9317      	str	r3, [sp, #92]	; 0x5c
 800f362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f364:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f366:	eb0c 0003 	add.w	r0, ip, r3
 800f36a:	2b0f      	cmp	r3, #15
 800f36c:	e951 2b02 	ldrd	r2, fp, [r1, #-8]
 800f370:	9002      	str	r0, [sp, #8]
 800f372:	f340 8337 	ble.w	800f9e4 <st_sssa8_ch_nn_mat_mult_kernel+0x704>
 800f376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f378:	4659      	mov	r1, fp
 800f37a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f37c:	4463      	add	r3, ip
 800f37e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f380:	9000      	str	r0, [sp, #0]
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	4613      	mov	r3, r2
 800f386:	f8dc 7000 	ldr.w	r7, [ip]
 800f38a:	9800      	ldr	r0, [sp, #0]
 800f38c:	fa2f fa87 	sxtb16	sl, r7
 800f390:	f8d0 e000 	ldr.w	lr, [r0]
 800f394:	ea4f 2737 	mov.w	r7, r7, ror #8
 800f398:	fa2f f787 	sxtb16	r7, r7
 800f39c:	ea07 0008 	and.w	r0, r7, r8
 800f3a0:	fa1f f98a 	uxth.w	r9, sl
 800f3a4:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800f3a8:	ea4f 2a3e 	mov.w	sl, lr, ror #8
 800f3ac:	fa2f fe8e 	sxtb16	lr, lr
 800f3b0:	fa1f f48e 	uxth.w	r4, lr
 800f3b4:	fa2f fa8a 	sxtb16	sl, sl
 800f3b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f3bc:	ea0a 0a08 	and.w	sl, sl, r8
 800f3c0:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800f3c4:	6837      	ldr	r7, [r6, #0]
 800f3c6:	ea4a 4a1e 	orr.w	sl, sl, lr, lsr #16
 800f3ca:	f8d5 e000 	ldr.w	lr, [r5]
 800f3ce:	fb29 220e 	smlad	r2, r9, lr, r2
 800f3d2:	fb29 3307 	smlad	r3, r9, r7, r3
 800f3d6:	fb24 bb0e 	smlad	fp, r4, lr, fp
 800f3da:	fb24 1707 	smlad	r7, r4, r7, r1
 800f3de:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800f3e2:	6874      	ldr	r4, [r6, #4]
 800f3e4:	fb20 220e 	smlad	r2, r0, lr, r2
 800f3e8:	fb20 3304 	smlad	r3, r0, r4, r3
 800f3ec:	fb2a be0e 	smlad	lr, sl, lr, fp
 800f3f0:	fb2a 7704 	smlad	r7, sl, r4, r7
 800f3f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f3f8:	9800      	ldr	r0, [sp, #0]
 800f3fa:	fa2f fa81 	sxtb16	sl, r1
 800f3fe:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f402:	fa1f f48a 	uxth.w	r4, sl
 800f406:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f40a:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800f40e:	fa2f f181 	sxtb16	r1, r1
 800f412:	ea01 0008 	and.w	r0, r1, r8
 800f416:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f41a:	ea4f 2139 	mov.w	r1, r9, ror #8
 800f41e:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800f422:	fa2f f989 	sxtb16	r9, r9
 800f426:	fa1f fa89 	uxth.w	sl, r9
 800f42a:	fa2f f181 	sxtb16	r1, r1
 800f42e:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800f432:	ea01 0108 	and.w	r1, r1, r8
 800f436:	ea41 4119 	orr.w	r1, r1, r9, lsr #16
 800f43a:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800f43e:	fb24 220b 	smlad	r2, r4, fp, r2
 800f442:	fb24 3409 	smlad	r4, r4, r9, r3
 800f446:	fb2a eb0b 	smlad	fp, sl, fp, lr
 800f44a:	fb2a 7a09 	smlad	sl, sl, r9, r7
 800f44e:	68eb      	ldr	r3, [r5, #12]
 800f450:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800f454:	fb20 2203 	smlad	r2, r0, r3, r2
 800f458:	fb20 400e 	smlad	r0, r0, lr, r4
 800f45c:	fb21 bb03 	smlad	fp, r1, r3, fp
 800f460:	fb21 aa0e 	smlad	sl, r1, lr, sl
 800f464:	9b00      	ldr	r3, [sp, #0]
 800f466:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800f46a:	689f      	ldr	r7, [r3, #8]
 800f46c:	fa2f f381 	sxtb16	r3, r1
 800f470:	b29c      	uxth	r4, r3
 800f472:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f476:	fa2f f181 	sxtb16	r1, r1
 800f47a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f47e:	ea01 0108 	and.w	r1, r1, r8
 800f482:	fa2f fe87 	sxtb16	lr, r7
 800f486:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800f48a:	fa1f f98e 	uxth.w	r9, lr
 800f48e:	ea4f 2337 	mov.w	r3, r7, ror #8
 800f492:	fa2f f383 	sxtb16	r3, r3
 800f496:	ea03 0708 	and.w	r7, r3, r8
 800f49a:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
 800f49e:	692b      	ldr	r3, [r5, #16]
 800f4a0:	ea47 471e 	orr.w	r7, r7, lr, lsr #16
 800f4a4:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800f4a8:	fb24 2203 	smlad	r2, r4, r3, r2
 800f4ac:	fb24 000e 	smlad	r0, r4, lr, r0
 800f4b0:	fb29 b303 	smlad	r3, r9, r3, fp
 800f4b4:	fb29 aa0e 	smlad	sl, r9, lr, sl
 800f4b8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800f4bc:	6974      	ldr	r4, [r6, #20]
 800f4be:	fb21 220e 	smlad	r2, r1, lr, r2
 800f4c2:	fb21 0004 	smlad	r0, r1, r4, r0
 800f4c6:	fb27 330e 	smlad	r3, r7, lr, r3
 800f4ca:	fb27 a704 	smlad	r7, r7, r4, sl
 800f4ce:	9900      	ldr	r1, [sp, #0]
 800f4d0:	f10c 0c10 	add.w	ip, ip, #16
 800f4d4:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800f4d8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800f4dc:	3110      	adds	r1, #16
 800f4de:	fa2f fe84 	sxtb16	lr, r4
 800f4e2:	9100      	str	r1, [sp, #0]
 800f4e4:	fa1f f18e 	uxth.w	r1, lr
 800f4e8:	ea4f 2434 	mov.w	r4, r4, ror #8
 800f4ec:	f8d5 a018 	ldr.w	sl, [r5, #24]
 800f4f0:	fa2f f484 	sxtb16	r4, r4
 800f4f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f4f8:	ea04 0408 	and.w	r4, r4, r8
 800f4fc:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800f500:	ea4f 2e39 	mov.w	lr, r9, ror #8
 800f504:	fa2f f989 	sxtb16	r9, r9
 800f508:	fa1f fb89 	uxth.w	fp, r9
 800f50c:	fa2f fe8e 	sxtb16	lr, lr
 800f510:	ea4b 4b0e 	orr.w	fp, fp, lr, lsl #16
 800f514:	ea0e 0e08 	and.w	lr, lr, r8
 800f518:	ea4e 4e19 	orr.w	lr, lr, r9, lsr #16
 800f51c:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800f520:	fb21 220a 	smlad	r2, r1, sl, r2
 800f524:	fb21 0009 	smlad	r0, r1, r9, r0
 800f528:	fb2b 3a0a 	smlad	sl, fp, sl, r3
 800f52c:	fb2b 7909 	smlad	r9, fp, r9, r7
 800f530:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800f534:	3620      	adds	r6, #32
 800f536:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800f53a:	3520      	adds	r5, #32
 800f53c:	fb24 220b 	smlad	r2, r4, fp, r2
 800f540:	fb24 0307 	smlad	r3, r4, r7, r0
 800f544:	fb2e ab0b 	smlad	fp, lr, fp, sl
 800f548:	fb2e 9107 	smlad	r1, lr, r7, r9
 800f54c:	9801      	ldr	r0, [sp, #4]
 800f54e:	4584      	cmp	ip, r0
 800f550:	f47f af19 	bne.w	800f386 <st_sssa8_ch_nn_mat_mult_kernel+0xa6>
 800f554:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f556:	9802      	ldr	r0, [sp, #8]
 800f558:	9405      	str	r4, [sp, #20]
 800f55a:	4420      	add	r0, r4
 800f55c:	9002      	str	r0, [sp, #8]
 800f55e:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f560:	9004      	str	r0, [sp, #16]
 800f562:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f564:	9003      	str	r0, [sp, #12]
 800f566:	4620      	mov	r0, r4
 800f568:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800f56a:	42a0      	cmp	r0, r4
 800f56c:	da63      	bge.n	800f636 <st_sssa8_ch_nn_mat_mult_kernel+0x356>
 800f56e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800f570:	9f01      	ldr	r7, [sp, #4]
 800f572:	1a20      	subs	r0, r4, r0
 800f574:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f578:	0880      	lsrs	r0, r0, #2
 800f57a:	900f      	str	r0, [sp, #60]	; 0x3c
 800f57c:	3001      	adds	r0, #1
 800f57e:	e9dd ce03 	ldrd	ip, lr, [sp, #12]
 800f582:	0084      	lsls	r4, r0, #2
 800f584:	900e      	str	r0, [sp, #56]	; 0x38
 800f586:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f58a:	9410      	str	r4, [sp, #64]	; 0x40
 800f58c:	e9cd a000 	strd	sl, r0, [sp]
 800f590:	9c00      	ldr	r4, [sp, #0]
 800f592:	f857 0b04 	ldr.w	r0, [r7], #4
 800f596:	f854 9b04 	ldr.w	r9, [r4], #4
 800f59a:	f8dc a000 	ldr.w	sl, [ip]
 800f59e:	9400      	str	r4, [sp, #0]
 800f5a0:	fa2f f480 	sxtb16	r4, r0
 800f5a4:	b2a6      	uxth	r6, r4
 800f5a6:	ea4f 2030 	mov.w	r0, r0, ror #8
 800f5aa:	fa2f f080 	sxtb16	r0, r0
 800f5ae:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800f5b2:	ea00 0008 	and.w	r0, r0, r8
 800f5b6:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800f5ba:	ea4f 2439 	mov.w	r4, r9, ror #8
 800f5be:	fa2f f989 	sxtb16	r9, r9
 800f5c2:	fa1f f589 	uxth.w	r5, r9
 800f5c6:	fa2f f484 	sxtb16	r4, r4
 800f5ca:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800f5ce:	ea04 0408 	and.w	r4, r4, r8
 800f5d2:	ea44 4419 	orr.w	r4, r4, r9, lsr #16
 800f5d6:	f8de 9000 	ldr.w	r9, [lr]
 800f5da:	fb26 220a 	smlad	r2, r6, sl, r2
 800f5de:	fb26 3309 	smlad	r3, r6, r9, r3
 800f5e2:	fb25 bb0a 	smlad	fp, r5, sl, fp
 800f5e6:	fb25 1109 	smlad	r1, r5, r9, r1
 800f5ea:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f5ee:	f10e 0e08 	add.w	lr, lr, #8
 800f5f2:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 800f5f6:	f10c 0c08 	add.w	ip, ip, #8
 800f5fa:	fb20 2205 	smlad	r2, r0, r5, r2
 800f5fe:	fb20 3306 	smlad	r3, r0, r6, r3
 800f602:	fb24 bb05 	smlad	fp, r4, r5, fp
 800f606:	fb24 1106 	smlad	r1, r4, r6, r1
 800f60a:	9801      	ldr	r0, [sp, #4]
 800f60c:	4287      	cmp	r7, r0
 800f60e:	d1bf      	bne.n	800f590 <st_sssa8_ch_nn_mat_mult_kernel+0x2b0>
 800f610:	9802      	ldr	r0, [sp, #8]
 800f612:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f614:	4420      	add	r0, r4
 800f616:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f618:	9002      	str	r0, [sp, #8]
 800f61a:	9805      	ldr	r0, [sp, #20]
 800f61c:	3004      	adds	r0, #4
 800f61e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f622:	9c04      	ldr	r4, [sp, #16]
 800f624:	9005      	str	r0, [sp, #20]
 800f626:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f628:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800f62c:	9404      	str	r4, [sp, #16]
 800f62e:	9c03      	ldr	r4, [sp, #12]
 800f630:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800f634:	9003      	str	r0, [sp, #12]
 800f636:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f638:	9f05      	ldr	r7, [sp, #20]
 800f63a:	42be      	cmp	r6, r7
 800f63c:	dd5e      	ble.n	800f6fc <st_sssa8_ch_nn_mat_mult_kernel+0x41c>
 800f63e:	9801      	ldr	r0, [sp, #4]
 800f640:	9c03      	ldr	r4, [sp, #12]
 800f642:	f990 5000 	ldrsb.w	r5, [r0]
 800f646:	9802      	ldr	r0, [sp, #8]
 800f648:	f9b4 4000 	ldrsh.w	r4, [r4]
 800f64c:	f990 0000 	ldrsb.w	r0, [r0]
 800f650:	fb14 2205 	smlabb	r2, r4, r5, r2
 800f654:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800f658:	9c04      	ldr	r4, [sp, #16]
 800f65a:	f9b4 4000 	ldrsh.w	r4, [r4]
 800f65e:	fb14 1100 	smlabb	r1, r4, r0, r1
 800f662:	1c78      	adds	r0, r7, #1
 800f664:	fb14 3305 	smlabb	r3, r4, r5, r3
 800f668:	4286      	cmp	r6, r0
 800f66a:	dd41      	ble.n	800f6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800f66c:	9801      	ldr	r0, [sp, #4]
 800f66e:	9c03      	ldr	r4, [sp, #12]
 800f670:	f990 5001 	ldrsb.w	r5, [r0, #1]
 800f674:	9802      	ldr	r0, [sp, #8]
 800f676:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800f67a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f67e:	fb14 2205 	smlabb	r2, r4, r5, r2
 800f682:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800f686:	9c04      	ldr	r4, [sp, #16]
 800f688:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800f68c:	fb14 1100 	smlabb	r1, r4, r0, r1
 800f690:	1cb8      	adds	r0, r7, #2
 800f692:	fb14 3305 	smlabb	r3, r4, r5, r3
 800f696:	4286      	cmp	r6, r0
 800f698:	dd2a      	ble.n	800f6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800f69a:	9801      	ldr	r0, [sp, #4]
 800f69c:	9c03      	ldr	r4, [sp, #12]
 800f69e:	f990 5002 	ldrsb.w	r5, [r0, #2]
 800f6a2:	9802      	ldr	r0, [sp, #8]
 800f6a4:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800f6a8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f6ac:	fb14 2205 	smlabb	r2, r4, r5, r2
 800f6b0:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800f6b4:	9c04      	ldr	r4, [sp, #16]
 800f6b6:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800f6ba:	fb14 1100 	smlabb	r1, r4, r0, r1
 800f6be:	1cf8      	adds	r0, r7, #3
 800f6c0:	fb14 3305 	smlabb	r3, r4, r5, r3
 800f6c4:	4286      	cmp	r6, r0
 800f6c6:	dd13      	ble.n	800f6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800f6c8:	9d03      	ldr	r5, [sp, #12]
 800f6ca:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 800f6ce:	9d02      	ldr	r5, [sp, #8]
 800f6d0:	f995 4003 	ldrsb.w	r4, [r5, #3]
 800f6d4:	9d04      	ldr	r5, [sp, #16]
 800f6d6:	fb10 bb04 	smlabb	fp, r0, r4, fp
 800f6da:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800f6de:	fb15 1104 	smlabb	r1, r5, r4, r1
 800f6e2:	9c01      	ldr	r4, [sp, #4]
 800f6e4:	f994 4003 	ldrsb.w	r4, [r4, #3]
 800f6e8:	fb10 2204 	smlabb	r2, r0, r4, r2
 800f6ec:	fb15 3304 	smlabb	r3, r5, r4, r3
 800f6f0:	9c05      	ldr	r4, [sp, #20]
 800f6f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f6f4:	1b00      	subs	r0, r0, r4
 800f6f6:	9c01      	ldr	r4, [sp, #4]
 800f6f8:	4404      	add	r4, r0
 800f6fa:	9401      	str	r4, [sp, #4]
 800f6fc:	9806      	ldr	r0, [sp, #24]
 800f6fe:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800f702:	2c15      	cmp	r4, #21
 800f704:	f340 8114 	ble.w	800f930 <st_sssa8_ch_nn_mat_mult_kernel+0x650>
 800f708:	1ea5      	subs	r5, r4, #2
 800f70a:	2001      	movs	r0, #1
 800f70c:	3c01      	subs	r4, #1
 800f70e:	fa00 f505 	lsl.w	r5, r0, r5
 800f712:	9807      	ldr	r0, [sp, #28]
 800f714:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800f718:	fb52 5200 	smmla	r2, r2, r0, r5
 800f71c:	fb53 5000 	smmla	r0, r3, r0, r5
 800f720:	9b08      	ldr	r3, [sp, #32]
 800f722:	4122      	asrs	r2, r4
 800f724:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800f728:	4432      	add	r2, r6
 800f72a:	f302 0207 	ssat	r2, #8, r2
 800f72e:	4120      	asrs	r0, r4
 800f730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f732:	4430      	add	r0, r6
 800f734:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f738:	f300 0007 	ssat	r0, #8, r0
 800f73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f73e:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f742:	9b06      	ldr	r3, [sp, #24]
 800f744:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800f748:	2b15      	cmp	r3, #21
 800f74a:	f340 80d7 	ble.w	800f8fc <st_sssa8_ch_nn_mat_mult_kernel+0x61c>
 800f74e:	1e98      	subs	r0, r3, #2
 800f750:	2201      	movs	r2, #1
 800f752:	3b01      	subs	r3, #1
 800f754:	fa02 f000 	lsl.w	r0, r2, r0
 800f758:	9a07      	ldr	r2, [sp, #28]
 800f75a:	6814      	ldr	r4, [r2, #0]
 800f75c:	9a08      	ldr	r2, [sp, #32]
 800f75e:	fb5b 0904 	smmla	r9, fp, r4, r0
 800f762:	6816      	ldr	r6, [r2, #0]
 800f764:	fa49 f503 	asr.w	r5, r9, r3
 800f768:	fb51 0404 	smmla	r4, r1, r4, r0
 800f76c:	4435      	add	r5, r6
 800f76e:	f305 0507 	ssat	r5, #8, r5
 800f772:	fa44 f303 	asr.w	r3, r4, r3
 800f776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f778:	4433      	add	r3, r6
 800f77a:	7015      	strb	r5, [r2, #0]
 800f77c:	f303 0307 	ssat	r3, #8, r3
 800f780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f782:	7013      	strb	r3, [r2, #0]
 800f784:	9a01      	ldr	r2, [sp, #4]
 800f786:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f788:	9b06      	ldr	r3, [sp, #24]
 800f78a:	440a      	add	r2, r1
 800f78c:	3304      	adds	r3, #4
 800f78e:	4694      	mov	ip, r2
 800f790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f792:	9306      	str	r3, [sp, #24]
 800f794:	3208      	adds	r2, #8
 800f796:	920c      	str	r2, [sp, #48]	; 0x30
 800f798:	9a07      	ldr	r2, [sp, #28]
 800f79a:	3208      	adds	r2, #8
 800f79c:	9207      	str	r2, [sp, #28]
 800f79e:	9a08      	ldr	r2, [sp, #32]
 800f7a0:	3208      	adds	r2, #8
 800f7a2:	9208      	str	r2, [sp, #32]
 800f7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7a6:	3202      	adds	r2, #2
 800f7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7ac:	3202      	adds	r2, #2
 800f7ae:	920a      	str	r2, [sp, #40]	; 0x28
 800f7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	f47f add5 	bne.w	800f362 <st_sssa8_ch_nn_mat_mult_kernel+0x82>
 800f7b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7ba:	4660      	mov	r0, ip
 800f7bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f7be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f7c2:	9228      	str	r2, [sp, #160]	; 0xa0
 800f7c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f7c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f7ca:	9229      	str	r2, [sp, #164]	; 0xa4
 800f7cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f7ce:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800f7d2:	922a      	str	r2, [sp, #168]	; 0xa8
 800f7d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f7d6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800f7da:	9218      	str	r2, [sp, #96]	; 0x60
 800f7dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f7de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f7e2:	9219      	str	r2, [sp, #100]	; 0x64
 800f7e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f7e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7ea:	9327      	str	r3, [sp, #156]	; 0x9c
 800f7ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f7ee:	07db      	lsls	r3, r3, #31
 800f7f0:	d57e      	bpl.n	800f8f0 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800f7f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f7f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f7f6:	6819      	ldr	r1, [r3, #0]
 800f7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7fa:	ea5f 0993 	movs.w	r9, r3, lsr #2
 800f7fe:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800f802:	f000 8138 	beq.w	800fa76 <st_sssa8_ch_nn_mat_mult_kernel+0x796>
 800f806:	4604      	mov	r4, r0
 800f808:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 800f80c:	4646      	mov	r6, r8
 800f80e:	460a      	mov	r2, r1
 800f810:	f8df e268 	ldr.w	lr, [pc, #616]	; 800fa7c <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800f814:	f854 3b04 	ldr.w	r3, [r4], #4
 800f818:	fa2f fa83 	sxtb16	sl, r3
 800f81c:	fa1f f08a 	uxth.w	r0, sl
 800f820:	682f      	ldr	r7, [r5, #0]
 800f822:	ea4f 2333 	mov.w	r3, r3, ror #8
 800f826:	fa2f f383 	sxtb16	r3, r3
 800f82a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800f82e:	ea03 030e 	and.w	r3, r3, lr
 800f832:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 800f836:	fb20 1107 	smlad	r1, r0, r7, r1
 800f83a:	6837      	ldr	r7, [r6, #0]
 800f83c:	fb20 2207 	smlad	r2, r0, r7, r2
 800f840:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f844:	3608      	adds	r6, #8
 800f846:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800f84a:	3508      	adds	r5, #8
 800f84c:	fb23 110a 	smlad	r1, r3, sl, r1
 800f850:	fb23 2200 	smlad	r2, r3, r0, r2
 800f854:	4564      	cmp	r4, ip
 800f856:	d1dd      	bne.n	800f814 <st_sssa8_ch_nn_mat_mult_kernel+0x534>
 800f858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f85a:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 800f85e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f862:	9311      	str	r3, [sp, #68]	; 0x44
 800f864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f866:	f013 0303 	ands.w	r3, r3, #3
 800f86a:	d020      	beq.n	800f8ae <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800f86c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f86e:	3b01      	subs	r3, #1
 800f870:	f99c 0000 	ldrsb.w	r0, [ip]
 800f874:	882c      	ldrh	r4, [r5, #0]
 800f876:	b29b      	uxth	r3, r3
 800f878:	fb14 1100 	smlabb	r1, r4, r0, r1
 800f87c:	f8b8 4000 	ldrh.w	r4, [r8]
 800f880:	fb14 2200 	smlabb	r2, r4, r0, r2
 800f884:	b19b      	cbz	r3, 800f8ae <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800f886:	f99c 0001 	ldrsb.w	r0, [ip, #1]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	886c      	ldrh	r4, [r5, #2]
 800f88e:	fb14 1100 	smlabb	r1, r4, r0, r1
 800f892:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f896:	fb14 2200 	smlabb	r2, r4, r0, r2
 800f89a:	d008      	beq.n	800f8ae <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800f89c:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800f8a0:	88a8      	ldrh	r0, [r5, #4]
 800f8a2:	fb10 1103 	smlabb	r1, r0, r3, r1
 800f8a6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800f8aa:	fb10 2203 	smlabb	r2, r0, r3, r2
 800f8ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f8b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8b4:	2b15      	cmp	r3, #21
 800f8b6:	f340 80a0 	ble.w	800f9fa <st_sssa8_ch_nn_mat_mult_kernel+0x71a>
 800f8ba:	1e9e      	subs	r6, r3, #2
 800f8bc:	1e5d      	subs	r5, r3, #1
 800f8be:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800f8c4:	6800      	ldr	r0, [r0, #0]
 800f8c6:	40b3      	lsls	r3, r6
 800f8c8:	6824      	ldr	r4, [r4, #0]
 800f8ca:	fb51 3100 	smmla	r1, r1, r0, r3
 800f8ce:	fb52 3300 	smmla	r3, r2, r0, r3
 800f8d2:	fa41 f205 	asr.w	r2, r1, r5
 800f8d6:	4422      	add	r2, r4
 800f8d8:	f302 0207 	ssat	r2, #8, r2
 800f8dc:	412b      	asrs	r3, r5
 800f8de:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f8e0:	4423      	add	r3, r4
 800f8e2:	f800 2b01 	strb.w	r2, [r0], #1
 800f8e6:	f303 0307 	ssat	r3, #8, r3
 800f8ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f8ec:	902a      	str	r0, [sp, #168]	; 0xa8
 800f8ee:	7013      	strb	r3, [r2, #0]
 800f8f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f8f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f8f4:	4418      	add	r0, r3
 800f8f6:	b01d      	add	sp, #116	; 0x74
 800f8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	dd32      	ble.n	800f966 <st_sssa8_ch_nn_mat_mult_kernel+0x686>
 800f900:	004c      	lsls	r4, r1, #1
 800f902:	9a07      	ldr	r2, [sp, #28]
 800f904:	9908      	ldr	r1, [sp, #32]
 800f906:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800f90a:	6812      	ldr	r2, [r2, #0]
 800f90c:	6809      	ldr	r1, [r1, #0]
 800f90e:	fb59 1902 	smmla	r9, r9, r2, r1
 800f912:	fb54 1102 	smmla	r1, r4, r2, r1
 800f916:	fa49 f903 	asr.w	r9, r9, r3
 800f91a:	f309 0907 	ssat	r9, #8, r9
 800f91e:	4119      	asrs	r1, r3
 800f920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f922:	f883 9000 	strb.w	r9, [r3]
 800f926:	f301 0107 	ssat	r1, #8, r1
 800f92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f92c:	7019      	strb	r1, [r3, #0]
 800f92e:	e729      	b.n	800f784 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800f930:	2c00      	cmp	r4, #0
 800f932:	dd35      	ble.n	800f9a0 <st_sssa8_ch_nn_mat_mult_kernel+0x6c0>
 800f934:	0058      	lsls	r0, r3, #1
 800f936:	9d08      	ldr	r5, [sp, #32]
 800f938:	9b07      	ldr	r3, [sp, #28]
 800f93a:	0052      	lsls	r2, r2, #1
 800f93c:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800f940:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f944:	fb52 5203 	smmla	r2, r2, r3, r5
 800f948:	fb50 5303 	smmla	r3, r0, r3, r5
 800f94c:	4122      	asrs	r2, r4
 800f94e:	f302 0207 	ssat	r2, #8, r2
 800f952:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f954:	4123      	asrs	r3, r4
 800f956:	f800 2c01 	strb.w	r2, [r0, #-1]
 800f95a:	f303 0307 	ssat	r3, #8, r3
 800f95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f960:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f964:	e6ed      	b.n	800f742 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800f966:	f1c3 0301 	rsb	r3, r3, #1
 800f96a:	fa0b f903 	lsl.w	r9, fp, r3
 800f96e:	f309 021f 	ssat	r2, #32, r9
 800f972:	9807      	ldr	r0, [sp, #28]
 800f974:	6800      	ldr	r0, [r0, #0]
 800f976:	fb52 f210 	smmulr	r2, r2, r0
 800f97a:	4099      	lsls	r1, r3
 800f97c:	f301 011f 	ssat	r1, #32, r1
 800f980:	fb51 f110 	smmulr	r1, r1, r0
 800f984:	9808      	ldr	r0, [sp, #32]
 800f986:	6803      	ldr	r3, [r0, #0]
 800f988:	4413      	add	r3, r2
 800f98a:	f303 0307 	ssat	r3, #8, r3
 800f98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f990:	7013      	strb	r3, [r2, #0]
 800f992:	6803      	ldr	r3, [r0, #0]
 800f994:	440b      	add	r3, r1
 800f996:	f303 0307 	ssat	r3, #8, r3
 800f99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f99c:	7013      	strb	r3, [r2, #0]
 800f99e:	e6f1      	b.n	800f784 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800f9a0:	f1c4 0401 	rsb	r4, r4, #1
 800f9a4:	40a2      	lsls	r2, r4
 800f9a6:	f302 021f 	ssat	r2, #32, r2
 800f9aa:	9807      	ldr	r0, [sp, #28]
 800f9ac:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800f9b0:	fb52 f215 	smmulr	r2, r2, r5
 800f9b4:	fa03 f004 	lsl.w	r0, r3, r4
 800f9b8:	f300 001f 	ssat	r0, #32, r0
 800f9bc:	fb50 f015 	smmulr	r0, r0, r5
 800f9c0:	9c08      	ldr	r4, [sp, #32]
 800f9c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	f303 0307 	ssat	r3, #8, r3
 800f9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f9d6:	4403      	add	r3, r0
 800f9d8:	f303 0307 	ssat	r3, #8, r3
 800f9dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9e2:	e6ae      	b.n	800f742 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800f9e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	4659      	mov	r1, fp
 800f9ea:	f8cd c004 	str.w	ip, [sp, #4]
 800f9ee:	9304      	str	r3, [sp, #16]
 800f9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9f2:	9005      	str	r0, [sp, #20]
 800f9f4:	9303      	str	r3, [sp, #12]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	e5b6      	b.n	800f568 <st_sssa8_ch_nn_mat_mult_kernel+0x288>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	dd1b      	ble.n	800fa36 <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 800f9fe:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fa00:	0049      	lsls	r1, r1, #1
 800fa02:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800fa04:	0052      	lsls	r2, r2, #1
 800fa06:	6800      	ldr	r0, [r0, #0]
 800fa08:	6824      	ldr	r4, [r4, #0]
 800fa0a:	fb51 4100 	smmla	r1, r1, r0, r4
 800fa0e:	fb52 4200 	smmla	r2, r2, r0, r4
 800fa12:	fa41 f303 	asr.w	r3, r1, r3
 800fa16:	f303 0307 	ssat	r3, #8, r3
 800fa1a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800fa1c:	f800 3b01 	strb.w	r3, [r0], #1
 800fa20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fa22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa26:	fa42 f303 	asr.w	r3, r2, r3
 800fa2a:	f303 0307 	ssat	r3, #8, r3
 800fa2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa30:	902a      	str	r0, [sp, #168]	; 0xa8
 800fa32:	7013      	strb	r3, [r2, #0]
 800fa34:	e75c      	b.n	800f8f0 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800fa36:	f1c3 0001 	rsb	r0, r3, #1
 800fa3a:	fa01 f300 	lsl.w	r3, r1, r0
 800fa3e:	f303 031f 	ssat	r3, #32, r3
 800fa42:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800fa44:	6809      	ldr	r1, [r1, #0]
 800fa46:	fb53 f311 	smmulr	r3, r3, r1
 800fa4a:	4082      	lsls	r2, r0
 800fa4c:	f302 021f 	ssat	r2, #32, r2
 800fa50:	fb52 f211 	smmulr	r2, r2, r1
 800fa54:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fa56:	6809      	ldr	r1, [r1, #0]
 800fa58:	440b      	add	r3, r1
 800fa5a:	f303 0307 	ssat	r3, #8, r3
 800fa5e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800fa60:	f801 3b01 	strb.w	r3, [r1], #1
 800fa64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4413      	add	r3, r2
 800fa6a:	f303 0307 	ssat	r3, #8, r3
 800fa6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa70:	912a      	str	r1, [sp, #168]	; 0xa8
 800fa72:	7013      	strb	r3, [r2, #0]
 800fa74:	e73c      	b.n	800f8f0 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800fa76:	4684      	mov	ip, r0
 800fa78:	460a      	mov	r2, r1
 800fa7a:	e6f3      	b.n	800f864 <st_sssa8_ch_nn_mat_mult_kernel+0x584>
 800fa7c:	ffff0000 	.word	0xffff0000

0800fa80 <st_int8_to16_no_shift>:
 800fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	f1b2 0810 	subs.w	r8, r2, #16
 800fa88:	f100 808c 	bmi.w	800fba4 <st_int8_to16_no_shift+0x124>
 800fa8c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800fa90:	4603      	mov	r3, r0
 800fa92:	4c45      	ldr	r4, [pc, #276]	; (800fba8 <st_int8_to16_no_shift+0x128>)
 800fa94:	f108 0801 	add.w	r8, r8, #1
 800fa98:	eb01 1748 	add.w	r7, r1, r8, lsl #5
 800fa9c:	f8d3 e000 	ldr.w	lr, [r3]
 800faa0:	3310      	adds	r3, #16
 800faa2:	fa2f f69e 	sxtb16	r6, lr, ror #8
 800faa6:	fa2f fe8e 	sxtb16	lr, lr
 800faaa:	ea06 0504 	and.w	r5, r6, r4
 800faae:	fa1f f98e 	uxth.w	r9, lr
 800fab2:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800fab6:	3120      	adds	r1, #32
 800fab8:	fa2f fa9c 	sxtb16	sl, ip, ror #8
 800fabc:	ea49 4906 	orr.w	r9, r9, r6, lsl #16
 800fac0:	ea45 4e1e 	orr.w	lr, r5, lr, lsr #16
 800fac4:	ea0a 0504 	and.w	r5, sl, r4
 800fac8:	fa2f fc8c 	sxtb16	ip, ip
 800facc:	fa1f f68c 	uxth.w	r6, ip
 800fad0:	f841 9c20 	str.w	r9, [r1, #-32]
 800fad4:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 800fad8:	f841 ec1c 	str.w	lr, [r1, #-28]
 800fadc:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800fae0:	f841 cc14 	str.w	ip, [r1, #-20]
 800fae4:	f841 6c18 	str.w	r6, [r1, #-24]
 800fae8:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800faec:	f853 cc04 	ldr.w	ip, [r3, #-4]
 800faf0:	fa2f f59e 	sxtb16	r5, lr, ror #8
 800faf4:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800faf8:	ea05 0b04 	and.w	fp, r5, r4
 800fafc:	fa2f fe8e 	sxtb16	lr, lr
 800fb00:	fa2f fc8c 	sxtb16	ip, ip
 800fb04:	fa1f f98e 	uxth.w	r9, lr
 800fb08:	fa1f fa8c 	uxth.w	sl, ip
 800fb0c:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 800fb10:	ea06 0504 	and.w	r5, r6, r4
 800fb14:	ea4b 4e1e 	orr.w	lr, fp, lr, lsr #16
 800fb18:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 800fb1c:	f841 9c10 	str.w	r9, [r1, #-16]
 800fb20:	f841 ec0c 	str.w	lr, [r1, #-12]
 800fb24:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 800fb28:	f841 6c08 	str.w	r6, [r1, #-8]
 800fb2c:	428f      	cmp	r7, r1
 800fb2e:	f841 cc04 	str.w	ip, [r1, #-4]
 800fb32:	d1b3      	bne.n	800fa9c <st_int8_to16_no_shift+0x1c>
 800fb34:	ea4f 1708 	mov.w	r7, r8, lsl #4
 800fb38:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800fb3c:	f1a2 0804 	sub.w	r8, r2, #4
 800fb40:	45b8      	cmp	r8, r7
 800fb42:	db23      	blt.n	800fb8c <st_int8_to16_no_shift+0x10c>
 800fb44:	eba8 0807 	sub.w	r8, r8, r7
 800fb48:	4686      	mov	lr, r0
 800fb4a:	4e17      	ldr	r6, [pc, #92]	; (800fba8 <st_int8_to16_no_shift+0x128>)
 800fb4c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800fb50:	f108 0901 	add.w	r9, r8, #1
 800fb54:	eb01 05c9 	add.w	r5, r1, r9, lsl #3
 800fb58:	f85e 3b04 	ldr.w	r3, [lr], #4
 800fb5c:	3108      	adds	r1, #8
 800fb5e:	fa2f fa93 	sxtb16	sl, r3, ror #8
 800fb62:	fa2f f383 	sxtb16	r3, r3
 800fb66:	ea0a 0406 	and.w	r4, sl, r6
 800fb6a:	fa1f fc83 	uxth.w	ip, r3
 800fb6e:	428d      	cmp	r5, r1
 800fb70:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 800fb74:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 800fb78:	f841 cc08 	str.w	ip, [r1, #-8]
 800fb7c:	f841 3c04 	str.w	r3, [r1, #-4]
 800fb80:	d1ea      	bne.n	800fb58 <st_int8_to16_no_shift+0xd8>
 800fb82:	3704      	adds	r7, #4
 800fb84:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800fb88:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800fb8c:	42ba      	cmp	r2, r7
 800fb8e:	dd07      	ble.n	800fba0 <st_int8_to16_no_shift+0x120>
 800fb90:	1bd2      	subs	r2, r2, r7
 800fb92:	4402      	add	r2, r0
 800fb94:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800fb98:	4290      	cmp	r0, r2
 800fb9a:	f821 3b02 	strh.w	r3, [r1], #2
 800fb9e:	d1f9      	bne.n	800fb94 <st_int8_to16_no_shift+0x114>
 800fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba4:	2700      	movs	r7, #0
 800fba6:	e7c9      	b.n	800fb3c <st_int8_to16_no_shift+0xbc>
 800fba8:	ffff0000 	.word	0xffff0000

0800fbac <st_int8_to16_no_shift_interleaved>:
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	f1b2 0510 	subs.w	r5, r2, #16
 800fbb2:	d449      	bmi.n	800fc48 <st_int8_to16_no_shift_interleaved+0x9c>
 800fbb4:	092d      	lsrs	r5, r5, #4
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	3501      	adds	r5, #1
 800fbba:	eb01 1445 	add.w	r4, r1, r5, lsl #5
 800fbbe:	f8d3 e000 	ldr.w	lr, [r3]
 800fbc2:	3120      	adds	r1, #32
 800fbc4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fbc8:	3310      	adds	r3, #16
 800fbca:	fa2f f69e 	sxtb16	r6, lr, ror #8
 800fbce:	fa2f fe8e 	sxtb16	lr, lr
 800fbd2:	f841 6c20 	str.w	r6, [r1, #-32]
 800fbd6:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800fbda:	fa2f fc8c 	sxtb16	ip, ip
 800fbde:	f841 6c18 	str.w	r6, [r1, #-24]
 800fbe2:	f841 ec1c 	str.w	lr, [r1, #-28]
 800fbe6:	f841 cc14 	str.w	ip, [r1, #-20]
 800fbea:	428c      	cmp	r4, r1
 800fbec:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800fbf0:	f853 cc04 	ldr.w	ip, [r3, #-4]
 800fbf4:	fa2f f79e 	sxtb16	r7, lr, ror #8
 800fbf8:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800fbfc:	fa2f fe8e 	sxtb16	lr, lr
 800fc00:	fa2f fc8c 	sxtb16	ip, ip
 800fc04:	f841 7c10 	str.w	r7, [r1, #-16]
 800fc08:	f841 ec0c 	str.w	lr, [r1, #-12]
 800fc0c:	f841 6c08 	str.w	r6, [r1, #-8]
 800fc10:	f841 cc04 	str.w	ip, [r1, #-4]
 800fc14:	d1d3      	bne.n	800fbbe <st_int8_to16_no_shift_interleaved+0x12>
 800fc16:	012b      	lsls	r3, r5, #4
 800fc18:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800fc1c:	3a04      	subs	r2, #4
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	db11      	blt.n	800fc46 <st_int8_to16_no_shift_interleaved+0x9a>
 800fc22:	1ad2      	subs	r2, r2, r3
 800fc24:	0892      	lsrs	r2, r2, #2
 800fc26:	3201      	adds	r2, #1
 800fc28:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800fc2c:	3108      	adds	r1, #8
 800fc2e:	f850 3b04 	ldr.w	r3, [r0], #4
 800fc32:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800fc36:	428a      	cmp	r2, r1
 800fc38:	f841 cc08 	str.w	ip, [r1, #-8]
 800fc3c:	fa2f f383 	sxtb16	r3, r3
 800fc40:	f841 3c04 	str.w	r3, [r1, #-4]
 800fc44:	d1f2      	bne.n	800fc2c <st_int8_to16_no_shift_interleaved+0x80>
 800fc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc48:	2300      	movs	r3, #0
 800fc4a:	e7e7      	b.n	800fc1c <st_int8_to16_no_shift_interleaved+0x70>

0800fc4c <st_int8_to16_dual>:
 800fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc50:	b08b      	sub	sp, #44	; 0x2c
 800fc52:	4692      	mov	sl, r2
 800fc54:	468b      	mov	fp, r1
 800fc56:	eb00 0902 	add.w	r9, r0, r2
 800fc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5c:	085b      	lsrs	r3, r3, #1
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	f000 810d 	beq.w	800fe7e <st_int8_to16_dual+0x232>
 800fc64:	3a10      	subs	r2, #16
 800fc66:	f1aa 0304 	sub.w	r3, sl, #4
 800fc6a:	f8cd a004 	str.w	sl, [sp, #4]
 800fc6e:	9207      	str	r2, [sp, #28]
 800fc70:	0912      	lsrs	r2, r2, #4
 800fc72:	9306      	str	r3, [sp, #24]
 800fc74:	3201      	adds	r2, #1
 800fc76:	4ba4      	ldr	r3, [pc, #656]	; (800ff08 <st_int8_to16_dual+0x2bc>)
 800fc78:	0111      	lsls	r1, r2, #4
 800fc7a:	0192      	lsls	r2, r2, #6
 800fc7c:	9103      	str	r1, [sp, #12]
 800fc7e:	9208      	str	r2, [sp, #32]
 800fc80:	9a07      	ldr	r2, [sp, #28]
 800fc82:	2a00      	cmp	r2, #0
 800fc84:	f2c0 8131 	blt.w	800feea <st_int8_to16_dual+0x29e>
 800fc88:	9a03      	ldr	r2, [sp, #12]
 800fc8a:	464d      	mov	r5, r9
 800fc8c:	1886      	adds	r6, r0, r2
 800fc8e:	465a      	mov	r2, fp
 800fc90:	f8d0 c000 	ldr.w	ip, [r0]
 800fc94:	3010      	adds	r0, #16
 800fc96:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800fc9a:	fa2f fc8c 	sxtb16	ip, ip
 800fc9e:	fa1f fe8c 	uxth.w	lr, ip
 800fca2:	682f      	ldr	r7, [r5, #0]
 800fca4:	fa2f f197 	sxtb16	r1, r7, ror #8
 800fca8:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800fcac:	401c      	ands	r4, r3
 800fcae:	fa2f f787 	sxtb16	r7, r7
 800fcb2:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800fcb6:	f8c2 e000 	str.w	lr, [r2]
 800fcba:	3510      	adds	r5, #16
 800fcbc:	3240      	adds	r2, #64	; 0x40
 800fcbe:	f842 4c38 	str.w	r4, [r2, #-56]
 800fcc2:	b2bc      	uxth	r4, r7
 800fcc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fcc8:	4019      	ands	r1, r3
 800fcca:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800fcce:	f842 4c3c 	str.w	r4, [r2, #-60]
 800fcd2:	f842 1c34 	str.w	r1, [r2, #-52]
 800fcd6:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800fcda:	4286      	cmp	r6, r0
 800fcdc:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800fce0:	fa2f fc8c 	sxtb16	ip, ip
 800fce4:	fa1f fe8c 	uxth.w	lr, ip
 800fce8:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 800fcec:	fa2f f197 	sxtb16	r1, r7, ror #8
 800fcf0:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800fcf4:	ea04 0403 	and.w	r4, r4, r3
 800fcf8:	fa2f f787 	sxtb16	r7, r7
 800fcfc:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800fd00:	f842 ec30 	str.w	lr, [r2, #-48]
 800fd04:	f842 4c28 	str.w	r4, [r2, #-40]
 800fd08:	b2bc      	uxth	r4, r7
 800fd0a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fd0e:	ea01 0103 	and.w	r1, r1, r3
 800fd12:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800fd16:	f842 4c2c 	str.w	r4, [r2, #-44]
 800fd1a:	f842 1c24 	str.w	r1, [r2, #-36]
 800fd1e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800fd22:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800fd26:	fa2f fc8c 	sxtb16	ip, ip
 800fd2a:	fa1f fe8c 	uxth.w	lr, ip
 800fd2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800fd32:	fa2f f197 	sxtb16	r1, r7, ror #8
 800fd36:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800fd3a:	ea04 0403 	and.w	r4, r4, r3
 800fd3e:	fa2f f787 	sxtb16	r7, r7
 800fd42:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800fd46:	f842 ec20 	str.w	lr, [r2, #-32]
 800fd4a:	f842 4c18 	str.w	r4, [r2, #-24]
 800fd4e:	b2bc      	uxth	r4, r7
 800fd50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fd54:	ea01 0103 	and.w	r1, r1, r3
 800fd58:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800fd5c:	f842 4c1c 	str.w	r4, [r2, #-28]
 800fd60:	f842 1c14 	str.w	r1, [r2, #-20]
 800fd64:	f850 cc04 	ldr.w	ip, [r0, #-4]
 800fd68:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800fd6c:	fa2f fc8c 	sxtb16	ip, ip
 800fd70:	fa1f fe8c 	uxth.w	lr, ip
 800fd74:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800fd78:	fa2f f197 	sxtb16	r1, r7, ror #8
 800fd7c:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800fd80:	ea04 0403 	and.w	r4, r4, r3
 800fd84:	fa2f f787 	sxtb16	r7, r7
 800fd88:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800fd8c:	f842 ec10 	str.w	lr, [r2, #-16]
 800fd90:	f842 4c08 	str.w	r4, [r2, #-8]
 800fd94:	b2bc      	uxth	r4, r7
 800fd96:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800fd9a:	ea01 0103 	and.w	r1, r1, r3
 800fd9e:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800fda2:	f842 4c0c 	str.w	r4, [r2, #-12]
 800fda6:	f842 1c04 	str.w	r1, [r2, #-4]
 800fdaa:	f47f af71 	bne.w	800fc90 <st_int8_to16_dual+0x44>
 800fdae:	9a08      	ldr	r2, [sp, #32]
 800fdb0:	4493      	add	fp, r2
 800fdb2:	9a03      	ldr	r2, [sp, #12]
 800fdb4:	4690      	mov	r8, r2
 800fdb6:	4491      	add	r9, r2
 800fdb8:	9a06      	ldr	r2, [sp, #24]
 800fdba:	4542      	cmp	r2, r8
 800fdbc:	f2c0 809b 	blt.w	800fef6 <st_int8_to16_dual+0x2aa>
 800fdc0:	eba2 0a08 	sub.w	sl, r2, r8
 800fdc4:	46ce      	mov	lr, r9
 800fdc6:	465c      	mov	r4, fp
 800fdc8:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800fdcc:	f102 0a01 	add.w	sl, r2, #1
 800fdd0:	9204      	str	r2, [sp, #16]
 800fdd2:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 800fdd6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800fdda:	9205      	str	r2, [sp, #20]
 800fddc:	f850 6b04 	ldr.w	r6, [r0], #4
 800fde0:	3410      	adds	r4, #16
 800fde2:	fa2f f196 	sxtb16	r1, r6, ror #8
 800fde6:	fa2f f686 	sxtb16	r6, r6
 800fdea:	fa1f fc86 	uxth.w	ip, r6
 800fdee:	f85e 5b04 	ldr.w	r5, [lr], #4
 800fdf2:	fa2f f295 	sxtb16	r2, r5, ror #8
 800fdf6:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 800fdfa:	4019      	ands	r1, r3
 800fdfc:	fa2f f585 	sxtb16	r5, r5
 800fe00:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 800fe04:	42b8      	cmp	r0, r7
 800fe06:	f844 cc10 	str.w	ip, [r4, #-16]
 800fe0a:	f844 1c08 	str.w	r1, [r4, #-8]
 800fe0e:	b2a9      	uxth	r1, r5
 800fe10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe14:	ea02 0203 	and.w	r2, r2, r3
 800fe18:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 800fe1c:	f844 1c0c 	str.w	r1, [r4, #-12]
 800fe20:	f844 2c04 	str.w	r2, [r4, #-4]
 800fe24:	d1da      	bne.n	800fddc <st_int8_to16_dual+0x190>
 800fe26:	9a05      	ldr	r2, [sp, #20]
 800fe28:	f108 0804 	add.w	r8, r8, #4
 800fe2c:	eb0b 1b0a 	add.w	fp, fp, sl, lsl #4
 800fe30:	4491      	add	r9, r2
 800fe32:	9a04      	ldr	r2, [sp, #16]
 800fe34:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800fe38:	9a01      	ldr	r2, [sp, #4]
 800fe3a:	4542      	cmp	r2, r8
 800fe3c:	dd5f      	ble.n	800fefe <st_int8_to16_dual+0x2b2>
 800fe3e:	eba2 0808 	sub.w	r8, r2, r8
 800fe42:	4649      	mov	r1, r9
 800fe44:	f10b 0204 	add.w	r2, fp, #4
 800fe48:	eb07 0008 	add.w	r0, r7, r8
 800fe4c:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800fe50:	3204      	adds	r2, #4
 800fe52:	f822 4c08 	strh.w	r4, [r2, #-8]
 800fe56:	4287      	cmp	r7, r0
 800fe58:	f911 4b01 	ldrsb.w	r4, [r1], #1
 800fe5c:	f822 4c06 	strh.w	r4, [r2, #-6]
 800fe60:	d1f4      	bne.n	800fe4c <st_int8_to16_dual+0x200>
 800fe62:	44c1      	add	r9, r8
 800fe64:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 800fe68:	9a02      	ldr	r2, [sp, #8]
 800fe6a:	9901      	ldr	r1, [sp, #4]
 800fe6c:	3a01      	subs	r2, #1
 800fe6e:	4408      	add	r0, r1
 800fe70:	4489      	add	r9, r1
 800fe72:	b292      	uxth	r2, r2
 800fe74:	9202      	str	r2, [sp, #8]
 800fe76:	2a00      	cmp	r2, #0
 800fe78:	f47f af02 	bne.w	800fc80 <st_int8_to16_dual+0x34>
 800fe7c:	468a      	mov	sl, r1
 800fe7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe80:	07db      	lsls	r3, r3, #31
 800fe82:	d52f      	bpl.n	800fee4 <st_int8_to16_dual+0x298>
 800fe84:	f1ba 0c04 	subs.w	ip, sl, #4
 800fe88:	d43b      	bmi.n	800ff02 <st_int8_to16_dual+0x2b6>
 800fe8a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800fe8e:	4605      	mov	r5, r0
 800fe90:	4e1d      	ldr	r6, [pc, #116]	; (800ff08 <st_int8_to16_dual+0x2bc>)
 800fe92:	f10c 0c01 	add.w	ip, ip, #1
 800fe96:	eb0b 07cc 	add.w	r7, fp, ip, lsl #3
 800fe9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe9e:	f10b 0b08 	add.w	fp, fp, #8
 800fea2:	fa2f f493 	sxtb16	r4, r3, ror #8
 800fea6:	fa2f f383 	sxtb16	r3, r3
 800feaa:	ea04 0106 	and.w	r1, r4, r6
 800feae:	b29a      	uxth	r2, r3
 800feb0:	455f      	cmp	r7, fp
 800feb2:	ea41 4313 	orr.w	r3, r1, r3, lsr #16
 800feb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800feba:	f84b 3c04 	str.w	r3, [fp, #-4]
 800febe:	f84b 2c08 	str.w	r2, [fp, #-8]
 800fec2:	d1ea      	bne.n	800fe9a <st_int8_to16_dual+0x24e>
 800fec4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800fec8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800fecc:	459a      	cmp	sl, r3
 800fece:	dd09      	ble.n	800fee4 <st_int8_to16_dual+0x298>
 800fed0:	ebaa 0303 	sub.w	r3, sl, r3
 800fed4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fed8:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800fedc:	f82b 2b02 	strh.w	r2, [fp], #2
 800fee0:	459b      	cmp	fp, r3
 800fee2:	d1f9      	bne.n	800fed8 <st_int8_to16_dual+0x28c>
 800fee4:	b00b      	add	sp, #44	; 0x2c
 800fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feea:	f04f 0800 	mov.w	r8, #0
 800feee:	9a06      	ldr	r2, [sp, #24]
 800fef0:	4542      	cmp	r2, r8
 800fef2:	f6bf af65 	bge.w	800fdc0 <st_int8_to16_dual+0x174>
 800fef6:	9a01      	ldr	r2, [sp, #4]
 800fef8:	4607      	mov	r7, r0
 800fefa:	4542      	cmp	r2, r8
 800fefc:	dc9f      	bgt.n	800fe3e <st_int8_to16_dual+0x1f2>
 800fefe:	4638      	mov	r0, r7
 800ff00:	e7b2      	b.n	800fe68 <st_int8_to16_dual+0x21c>
 800ff02:	2300      	movs	r3, #0
 800ff04:	e7e2      	b.n	800fecc <st_int8_to16_dual+0x280>
 800ff06:	bf00      	nop
 800ff08:	ffff0000 	.word	0xffff0000

0800ff0c <st_int8_to16_dual_interleaved>:
 800ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff10:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 800ff14:	b087      	sub	sp, #28
 800ff16:	eb00 0802 	add.w	r8, r0, r2
 800ff1a:	9305      	str	r3, [sp, #20]
 800ff1c:	f000 80ba 	beq.w	8010094 <st_int8_to16_dual_interleaved+0x188>
 800ff20:	f1a2 0310 	sub.w	r3, r2, #16
 800ff24:	1f14      	subs	r4, r2, #4
 800ff26:	9303      	str	r3, [sp, #12]
 800ff28:	091b      	lsrs	r3, r3, #4
 800ff2a:	9402      	str	r4, [sp, #8]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	011c      	lsls	r4, r3, #4
 800ff30:	019b      	lsls	r3, r3, #6
 800ff32:	9400      	str	r4, [sp, #0]
 800ff34:	9304      	str	r3, [sp, #16]
 800ff36:	9b03      	ldr	r3, [sp, #12]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f2c0 80d3 	blt.w	80100e4 <st_int8_to16_dual_interleaved+0x1d8>
 800ff3e:	9b00      	ldr	r3, [sp, #0]
 800ff40:	4644      	mov	r4, r8
 800ff42:	18c7      	adds	r7, r0, r3
 800ff44:	460b      	mov	r3, r1
 800ff46:	6806      	ldr	r6, [r0, #0]
 800ff48:	3010      	adds	r0, #16
 800ff4a:	6825      	ldr	r5, [r4, #0]
 800ff4c:	3340      	adds	r3, #64	; 0x40
 800ff4e:	3410      	adds	r4, #16
 800ff50:	4287      	cmp	r7, r0
 800ff52:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800ff56:	fa2f f686 	sxtb16	r6, r6
 800ff5a:	f843 6c38 	str.w	r6, [r3, #-56]
 800ff5e:	fa2f f695 	sxtb16	r6, r5, ror #8
 800ff62:	f843 cc40 	str.w	ip, [r3, #-64]
 800ff66:	f843 6c3c 	str.w	r6, [r3, #-60]
 800ff6a:	fa2f f585 	sxtb16	r5, r5
 800ff6e:	f843 5c34 	str.w	r5, [r3, #-52]
 800ff72:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 800ff76:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800ff7a:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800ff7e:	fa2f f686 	sxtb16	r6, r6
 800ff82:	f843 cc30 	str.w	ip, [r3, #-48]
 800ff86:	f843 6c28 	str.w	r6, [r3, #-40]
 800ff8a:	fa2f f695 	sxtb16	r6, r5, ror #8
 800ff8e:	fa2f f585 	sxtb16	r5, r5
 800ff92:	f843 6c2c 	str.w	r6, [r3, #-44]
 800ff96:	f843 5c24 	str.w	r5, [r3, #-36]
 800ff9a:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800ff9e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ffa2:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800ffa6:	fa2f f686 	sxtb16	r6, r6
 800ffaa:	f843 cc20 	str.w	ip, [r3, #-32]
 800ffae:	f843 6c18 	str.w	r6, [r3, #-24]
 800ffb2:	fa2f f695 	sxtb16	r6, r5, ror #8
 800ffb6:	fa2f f585 	sxtb16	r5, r5
 800ffba:	f843 6c1c 	str.w	r6, [r3, #-28]
 800ffbe:	f843 5c14 	str.w	r5, [r3, #-20]
 800ffc2:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800ffc6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ffca:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800ffce:	fa2f f686 	sxtb16	r6, r6
 800ffd2:	f843 cc10 	str.w	ip, [r3, #-16]
 800ffd6:	f843 6c08 	str.w	r6, [r3, #-8]
 800ffda:	fa2f f695 	sxtb16	r6, r5, ror #8
 800ffde:	fa2f f585 	sxtb16	r5, r5
 800ffe2:	f843 6c0c 	str.w	r6, [r3, #-12]
 800ffe6:	f843 5c04 	str.w	r5, [r3, #-4]
 800ffea:	d1ac      	bne.n	800ff46 <st_int8_to16_dual_interleaved+0x3a>
 800ffec:	9b04      	ldr	r3, [sp, #16]
 800ffee:	4419      	add	r1, r3
 800fff0:	9b00      	ldr	r3, [sp, #0]
 800fff2:	469e      	mov	lr, r3
 800fff4:	4498      	add	r8, r3
 800fff6:	9b02      	ldr	r3, [sp, #8]
 800fff8:	4573      	cmp	r3, lr
 800fffa:	db78      	blt.n	80100ee <st_int8_to16_dual_interleaved+0x1e2>
 800fffc:	eba3 090e 	sub.w	r9, r3, lr
 8010000:	4647      	mov	r7, r8
 8010002:	460b      	mov	r3, r1
 8010004:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8010008:	f109 0a01 	add.w	sl, r9, #1
 801000c:	ea4f 048a 	mov.w	r4, sl, lsl #2
 8010010:	eb00 068a 	add.w	r6, r0, sl, lsl #2
 8010014:	9401      	str	r4, [sp, #4]
 8010016:	f850 5b04 	ldr.w	r5, [r0], #4
 801001a:	3310      	adds	r3, #16
 801001c:	f857 4b04 	ldr.w	r4, [r7], #4
 8010020:	fa2f fc95 	sxtb16	ip, r5, ror #8
 8010024:	42b0      	cmp	r0, r6
 8010026:	f843 cc10 	str.w	ip, [r3, #-16]
 801002a:	fa2f f585 	sxtb16	r5, r5
 801002e:	f843 5c08 	str.w	r5, [r3, #-8]
 8010032:	fa2f f594 	sxtb16	r5, r4, ror #8
 8010036:	fa2f f484 	sxtb16	r4, r4
 801003a:	f843 5c0c 	str.w	r5, [r3, #-12]
 801003e:	f843 4c04 	str.w	r4, [r3, #-4]
 8010042:	d1e8      	bne.n	8010016 <st_int8_to16_dual_interleaved+0x10a>
 8010044:	f10e 0e04 	add.w	lr, lr, #4
 8010048:	9b01      	ldr	r3, [sp, #4]
 801004a:	eb01 110a 	add.w	r1, r1, sl, lsl #4
 801004e:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8010052:	4498      	add	r8, r3
 8010054:	4572      	cmp	r2, lr
 8010056:	dd4d      	ble.n	80100f4 <st_int8_to16_dual_interleaved+0x1e8>
 8010058:	eba2 0e0e 	sub.w	lr, r2, lr
 801005c:	1d0b      	adds	r3, r1, #4
 801005e:	4644      	mov	r4, r8
 8010060:	eb06 000e 	add.w	r0, r6, lr
 8010064:	f916 5b01 	ldrsb.w	r5, [r6], #1
 8010068:	3304      	adds	r3, #4
 801006a:	f823 5c08 	strh.w	r5, [r3, #-8]
 801006e:	4286      	cmp	r6, r0
 8010070:	f914 5b01 	ldrsb.w	r5, [r4], #1
 8010074:	f823 5c06 	strh.w	r5, [r3, #-6]
 8010078:	d1f4      	bne.n	8010064 <st_int8_to16_dual_interleaved+0x158>
 801007a:	44f0      	add	r8, lr
 801007c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8010080:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010084:	4410      	add	r0, r2
 8010086:	4490      	add	r8, r2
 8010088:	fa1f fb83 	uxth.w	fp, r3
 801008c:	f1bb 0f00 	cmp.w	fp, #0
 8010090:	f47f af51 	bne.w	800ff36 <st_int8_to16_dual_interleaved+0x2a>
 8010094:	9b05      	ldr	r3, [sp, #20]
 8010096:	07db      	lsls	r3, r3, #31
 8010098:	d521      	bpl.n	80100de <st_int8_to16_dual_interleaved+0x1d2>
 801009a:	1f17      	subs	r7, r2, #4
 801009c:	d42c      	bmi.n	80100f8 <st_int8_to16_dual_interleaved+0x1ec>
 801009e:	08bf      	lsrs	r7, r7, #2
 80100a0:	4604      	mov	r4, r0
 80100a2:	3701      	adds	r7, #1
 80100a4:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 80100a8:	3108      	adds	r1, #8
 80100aa:	f854 3b04 	ldr.w	r3, [r4], #4
 80100ae:	fa2f f593 	sxtb16	r5, r3, ror #8
 80100b2:	428e      	cmp	r6, r1
 80100b4:	f841 5c08 	str.w	r5, [r1, #-8]
 80100b8:	fa2f f383 	sxtb16	r3, r3
 80100bc:	f841 3c04 	str.w	r3, [r1, #-4]
 80100c0:	d1f2      	bne.n	80100a8 <st_int8_to16_dual_interleaved+0x19c>
 80100c2:	00bb      	lsls	r3, r7, #2
 80100c4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80100c8:	429a      	cmp	r2, r3
 80100ca:	dd08      	ble.n	80100de <st_int8_to16_dual_interleaved+0x1d2>
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80100d2:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80100d6:	f821 2b02 	strh.w	r2, [r1], #2
 80100da:	4299      	cmp	r1, r3
 80100dc:	d1f9      	bne.n	80100d2 <st_int8_to16_dual_interleaved+0x1c6>
 80100de:	b007      	add	sp, #28
 80100e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e4:	f04f 0e00 	mov.w	lr, #0
 80100e8:	9b02      	ldr	r3, [sp, #8]
 80100ea:	4573      	cmp	r3, lr
 80100ec:	da86      	bge.n	800fffc <st_int8_to16_dual_interleaved+0xf0>
 80100ee:	4572      	cmp	r2, lr
 80100f0:	4606      	mov	r6, r0
 80100f2:	dcb1      	bgt.n	8010058 <st_int8_to16_dual_interleaved+0x14c>
 80100f4:	4630      	mov	r0, r6
 80100f6:	e7c3      	b.n	8010080 <st_int8_to16_dual_interleaved+0x174>
 80100f8:	2300      	movs	r3, #0
 80100fa:	e7e5      	b.n	80100c8 <st_int8_to16_dual_interleaved+0x1bc>

080100fc <weights_2channels_prefetch>:
 80100fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010100:	2b00      	cmp	r3, #0
 8010102:	b087      	sub	sp, #28
 8010104:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010108:	9302      	str	r3, [sp, #8]
 801010a:	f340 80e6 	ble.w	80102da <weights_2channels_prefetch+0x1de>
 801010e:	f1a8 0310 	sub.w	r3, r8, #16
 8010112:	f1a8 0403 	sub.w	r4, r8, #3
 8010116:	f04f 0b00 	mov.w	fp, #0
 801011a:	091b      	lsrs	r3, r3, #4
 801011c:	9403      	str	r4, [sp, #12]
 801011e:	f1a8 0404 	sub.w	r4, r8, #4
 8010122:	3301      	adds	r3, #1
 8010124:	9405      	str	r4, [sp, #20]
 8010126:	011c      	lsls	r4, r3, #4
 8010128:	019b      	lsls	r3, r3, #6
 801012a:	9400      	str	r4, [sp, #0]
 801012c:	9304      	str	r3, [sp, #16]
 801012e:	f1b8 0f0f 	cmp.w	r8, #15
 8010132:	f340 80d7 	ble.w	80102e4 <weights_2channels_prefetch+0x1e8>
 8010136:	9b00      	ldr	r3, [sp, #0]
 8010138:	460d      	mov	r5, r1
 801013a:	18c6      	adds	r6, r0, r3
 801013c:	4613      	mov	r3, r2
 801013e:	6804      	ldr	r4, [r0, #0]
 8010140:	3010      	adds	r0, #16
 8010142:	682f      	ldr	r7, [r5, #0]
 8010144:	3340      	adds	r3, #64	; 0x40
 8010146:	fa2f fc84 	sxtb16	ip, r4
 801014a:	3510      	adds	r5, #16
 801014c:	f843 cc40 	str.w	ip, [r3, #-64]
 8010150:	ea4f 2434 	mov.w	r4, r4, ror #8
 8010154:	42b0      	cmp	r0, r6
 8010156:	fa2f f484 	sxtb16	r4, r4
 801015a:	f843 4c3c 	str.w	r4, [r3, #-60]
 801015e:	ea4f 2437 	mov.w	r4, r7, ror #8
 8010162:	fa2f f787 	sxtb16	r7, r7
 8010166:	fa2f f484 	sxtb16	r4, r4
 801016a:	f843 7c38 	str.w	r7, [r3, #-56]
 801016e:	f843 4c34 	str.w	r4, [r3, #-52]
 8010172:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 8010176:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801017a:	ea4f 2c34 	mov.w	ip, r4, ror #8
 801017e:	fa2f f484 	sxtb16	r4, r4
 8010182:	fa2f fc8c 	sxtb16	ip, ip
 8010186:	f843 4c28 	str.w	r4, [r3, #-40]
 801018a:	f843 cc24 	str.w	ip, [r3, #-36]
 801018e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8010192:	fa2f f787 	sxtb16	r7, r7
 8010196:	f843 7c30 	str.w	r7, [r3, #-48]
 801019a:	fa2f f78c 	sxtb16	r7, ip
 801019e:	f843 7c2c 	str.w	r7, [r3, #-44]
 80101a2:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80101a6:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80101aa:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80101ae:	fa2f f787 	sxtb16	r7, r7
 80101b2:	fa2f fc8c 	sxtb16	ip, ip
 80101b6:	f843 7c20 	str.w	r7, [r3, #-32]
 80101ba:	ea4f 2734 	mov.w	r7, r4, ror #8
 80101be:	f843 cc1c 	str.w	ip, [r3, #-28]
 80101c2:	fa2f f787 	sxtb16	r7, r7
 80101c6:	fa2f f484 	sxtb16	r4, r4
 80101ca:	f843 7c14 	str.w	r7, [r3, #-20]
 80101ce:	f843 4c18 	str.w	r4, [r3, #-24]
 80101d2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80101d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101da:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80101de:	fa2f f787 	sxtb16	r7, r7
 80101e2:	fa2f fc8c 	sxtb16	ip, ip
 80101e6:	f843 7c10 	str.w	r7, [r3, #-16]
 80101ea:	ea4f 2734 	mov.w	r7, r4, ror #8
 80101ee:	f843 cc0c 	str.w	ip, [r3, #-12]
 80101f2:	fa2f f787 	sxtb16	r7, r7
 80101f6:	fa2f f484 	sxtb16	r4, r4
 80101fa:	f843 7c04 	str.w	r7, [r3, #-4]
 80101fe:	f843 4c08 	str.w	r4, [r3, #-8]
 8010202:	d19c      	bne.n	801013e <weights_2channels_prefetch+0x42>
 8010204:	9b04      	ldr	r3, [sp, #16]
 8010206:	441a      	add	r2, r3
 8010208:	9b00      	ldr	r3, [sp, #0]
 801020a:	4419      	add	r1, r3
 801020c:	469e      	mov	lr, r3
 801020e:	9b03      	ldr	r3, [sp, #12]
 8010210:	4573      	cmp	r3, lr
 8010212:	dd65      	ble.n	80102e0 <weights_2channels_prefetch+0x1e4>
 8010214:	9b05      	ldr	r3, [sp, #20]
 8010216:	4614      	mov	r4, r2
 8010218:	460f      	mov	r7, r1
 801021a:	eba3 090e 	sub.w	r9, r3, lr
 801021e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8010222:	f109 0a01 	add.w	sl, r9, #1
 8010226:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801022a:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	f856 3b04 	ldr.w	r3, [r6], #4
 8010234:	3410      	adds	r4, #16
 8010236:	f857 5b04 	ldr.w	r5, [r7], #4
 801023a:	fa2f fc83 	sxtb16	ip, r3
 801023e:	4286      	cmp	r6, r0
 8010240:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010244:	fa2f f383 	sxtb16	r3, r3
 8010248:	f844 3c0c 	str.w	r3, [r4, #-12]
 801024c:	ea4f 2335 	mov.w	r3, r5, ror #8
 8010250:	fa2f f585 	sxtb16	r5, r5
 8010254:	f844 cc10 	str.w	ip, [r4, #-16]
 8010258:	f844 5c08 	str.w	r5, [r4, #-8]
 801025c:	fa2f f383 	sxtb16	r3, r3
 8010260:	f844 3c04 	str.w	r3, [r4, #-4]
 8010264:	d1e4      	bne.n	8010230 <weights_2channels_prefetch+0x134>
 8010266:	9b01      	ldr	r3, [sp, #4]
 8010268:	f10e 0e04 	add.w	lr, lr, #4
 801026c:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8010270:	4419      	add	r1, r3
 8010272:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8010276:	45f0      	cmp	r8, lr
 8010278:	dd29      	ble.n	80102ce <weights_2channels_prefetch+0x1d2>
 801027a:	f990 3000 	ldrsb.w	r3, [r0]
 801027e:	8013      	strh	r3, [r2, #0]
 8010280:	f991 3000 	ldrsb.w	r3, [r1]
 8010284:	8053      	strh	r3, [r2, #2]
 8010286:	f10e 0301 	add.w	r3, lr, #1
 801028a:	4598      	cmp	r8, r3
 801028c:	dd19      	ble.n	80102c2 <weights_2channels_prefetch+0x1c6>
 801028e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010292:	8093      	strh	r3, [r2, #4]
 8010294:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8010298:	80d3      	strh	r3, [r2, #6]
 801029a:	f10e 0302 	add.w	r3, lr, #2
 801029e:	4598      	cmp	r8, r3
 80102a0:	dd0f      	ble.n	80102c2 <weights_2channels_prefetch+0x1c6>
 80102a2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80102a6:	8113      	strh	r3, [r2, #8]
 80102a8:	f10e 0303 	add.w	r3, lr, #3
 80102ac:	f991 4002 	ldrsb.w	r4, [r1, #2]
 80102b0:	4598      	cmp	r8, r3
 80102b2:	8154      	strh	r4, [r2, #10]
 80102b4:	dd05      	ble.n	80102c2 <weights_2channels_prefetch+0x1c6>
 80102b6:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80102ba:	8193      	strh	r3, [r2, #12]
 80102bc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80102c0:	81d3      	strh	r3, [r2, #14]
 80102c2:	eba8 0e0e 	sub.w	lr, r8, lr
 80102c6:	4470      	add	r0, lr
 80102c8:	4471      	add	r1, lr
 80102ca:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 80102ce:	f10b 0b01 	add.w	fp, fp, #1
 80102d2:	9b02      	ldr	r3, [sp, #8]
 80102d4:	455b      	cmp	r3, fp
 80102d6:	f47f af2a 	bne.w	801012e <weights_2channels_prefetch+0x32>
 80102da:	b007      	add	sp, #28
 80102dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e0:	4630      	mov	r0, r6
 80102e2:	e7c8      	b.n	8010276 <weights_2channels_prefetch+0x17a>
 80102e4:	4606      	mov	r6, r0
 80102e6:	f04f 0e00 	mov.w	lr, #0
 80102ea:	e790      	b.n	801020e <weights_2channels_prefetch+0x112>

080102ec <st_sssa8_ch_fullW_prefetch>:
 80102ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	b087      	sub	sp, #28
 80102f2:	461c      	mov	r4, r3
 80102f4:	4680      	mov	r8, r0
 80102f6:	4613      	mov	r3, r2
 80102f8:	104f      	asrs	r7, r1, #1
 80102fa:	4620      	mov	r0, r4
 80102fc:	9103      	str	r1, [sp, #12]
 80102fe:	9704      	str	r7, [sp, #16]
 8010300:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8010304:	eb08 0402 	add.w	r4, r8, r2
 8010308:	d020      	beq.n	801034c <st_sssa8_ch_fullW_prefetch+0x60>
 801030a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801030c:	4646      	mov	r6, r8
 801030e:	4655      	mov	r5, sl
 8010310:	f8cd 8014 	str.w	r8, [sp, #20]
 8010314:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8010318:	4680      	mov	r8, r0
 801031a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801031e:	469a      	mov	sl, r3
 8010320:	462a      	mov	r2, r5
 8010322:	4621      	mov	r1, r4
 8010324:	4630      	mov	r0, r6
 8010326:	4653      	mov	r3, sl
 8010328:	f8cd 8000 	str.w	r8, [sp]
 801032c:	445d      	add	r5, fp
 801032e:	f7ff fee5 	bl	80100fc <weights_2channels_prefetch>
 8010332:	3f01      	subs	r7, #1
 8010334:	444c      	add	r4, r9
 8010336:	444e      	add	r6, r9
 8010338:	d1f2      	bne.n	8010320 <st_sssa8_ch_fullW_prefetch+0x34>
 801033a:	9b04      	ldr	r3, [sp, #16]
 801033c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010340:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8010344:	fb03 8809 	mla	r8, r3, r9, r8
 8010348:	fb03 aa0b 	mla	sl, r3, fp, sl
 801034c:	9b03      	ldr	r3, [sp, #12]
 801034e:	07db      	lsls	r3, r3, #31
 8010350:	d509      	bpl.n	8010366 <st_sssa8_ch_fullW_prefetch+0x7a>
 8010352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010354:	2b00      	cmp	r3, #0
 8010356:	dd06      	ble.n	8010366 <st_sssa8_ch_fullW_prefetch+0x7a>
 8010358:	4443      	add	r3, r8
 801035a:	f918 2b01 	ldrsb.w	r2, [r8], #1
 801035e:	4543      	cmp	r3, r8
 8010360:	f82a 2b02 	strh.w	r2, [sl], #2
 8010364:	d1f9      	bne.n	801035a <st_sssa8_ch_fullW_prefetch+0x6e>
 8010366:	b007      	add	sp, #28
 8010368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801036c <st_sssa8_ch_nn_mat_mult_nt_t>:
 801036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	b0b5      	sub	sp, #212	; 0xd4
 8010372:	9027      	str	r0, [sp, #156]	; 0x9c
 8010374:	912d      	str	r1, [sp, #180]	; 0xb4
 8010376:	9233      	str	r2, [sp, #204]	; 0xcc
 8010378:	932e      	str	r3, [sp, #184]	; 0xb8
 801037a:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 801037e:	2c00      	cmp	r4, #0
 8010380:	bf18      	it	ne
 8010382:	4620      	movne	r0, r4
 8010384:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8010386:	2c01      	cmp	r4, #1
 8010388:	9045      	str	r0, [sp, #276]	; 0x114
 801038a:	f340 826b 	ble.w	8010864 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 801038e:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8010390:	461e      	mov	r6, r3
 8010392:	4694      	mov	ip, r2
 8010394:	9f42      	ldr	r7, [sp, #264]	; 0x108
 8010396:	f1a4 0310 	sub.w	r3, r4, #16
 801039a:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801039c:	468e      	mov	lr, r1
 801039e:	9d40      	ldr	r5, [sp, #256]	; 0x100
 80103a0:	1ea0      	subs	r0, r4, #2
 80103a2:	0919      	lsrs	r1, r3, #4
 80103a4:	f023 030f 	bic.w	r3, r3, #15
 80103a8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 80103aa:	f020 0201 	bic.w	r2, r0, #1
 80103ae:	9032      	str	r0, [sp, #200]	; 0xc8
 80103b0:	4630      	mov	r0, r6
 80103b2:	3101      	adds	r1, #1
 80103b4:	4432      	add	r2, r6
 80103b6:	10a4      	asrs	r4, r4, #2
 80103b8:	106d      	asrs	r5, r5, #1
 80103ba:	1cd6      	adds	r6, r2, #3
 80103bc:	f107 0214 	add.w	r2, r7, #20
 80103c0:	942f      	str	r4, [sp, #188]	; 0xbc
 80103c2:	18d3      	adds	r3, r2, r3
 80103c4:	9629      	str	r6, [sp, #164]	; 0xa4
 80103c6:	9e41      	ldr	r6, [sp, #260]	; 0x104
 80103c8:	9318      	str	r3, [sp, #96]	; 0x60
 80103ca:	f06f 0303 	mvn.w	r3, #3
 80103ce:	0076      	lsls	r6, r6, #1
 80103d0:	952a      	str	r5, [sp, #168]	; 0xa8
 80103d2:	1bdb      	subs	r3, r3, r7
 80103d4:	9613      	str	r6, [sp, #76]	; 0x4c
 80103d6:	9319      	str	r3, [sp, #100]	; 0x64
 80103d8:	f1a7 030f 	sub.w	r3, r7, #15
 80103dc:	9312      	str	r3, [sp, #72]	; 0x48
 80103de:	f007 0303 	and.w	r3, r7, #3
 80103e2:	9330      	str	r3, [sp, #192]	; 0xc0
 80103e4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80103e6:	f003 0301 	and.w	r3, r3, #1
 80103ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80103ec:	007b      	lsls	r3, r7, #1
 80103ee:	9326      	str	r3, [sp, #152]	; 0x98
 80103f0:	00bb      	lsls	r3, r7, #2
 80103f2:	932c      	str	r3, [sp, #176]	; 0xb0
 80103f4:	1f3b      	subs	r3, r7, #4
 80103f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80103fc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80103fe:	3302      	adds	r3, #2
 8010400:	9321      	str	r3, [sp, #132]	; 0x84
 8010402:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8010404:	3304      	adds	r3, #4
 8010406:	931f      	str	r3, [sp, #124]	; 0x7c
 8010408:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801040a:	3304      	adds	r3, #4
 801040c:	9320      	str	r3, [sp, #128]	; 0x80
 801040e:	4663      	mov	r3, ip
 8010410:	3304      	adds	r3, #4
 8010412:	9322      	str	r3, [sp, #136]	; 0x88
 8010414:	010b      	lsls	r3, r1, #4
 8010416:	9316      	str	r3, [sp, #88]	; 0x58
 8010418:	018b      	lsls	r3, r1, #6
 801041a:	9325      	str	r3, [sp, #148]	; 0x94
 801041c:	0123      	lsls	r3, r4, #4
 801041e:	9331      	str	r3, [sp, #196]	; 0xc4
 8010420:	fb06 f305 	mul.w	r3, r6, r5
 8010424:	932b      	str	r3, [sp, #172]	; 0xac
 8010426:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 801042a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801042c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801042e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8010432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010436:	3901      	subs	r1, #1
 8010438:	2b15      	cmp	r3, #21
 801043a:	931a      	str	r3, [sp, #104]	; 0x68
 801043c:	920a      	str	r2, [sp, #40]	; 0x28
 801043e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010440:	9101      	str	r1, [sp, #4]
 8010442:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010446:	6812      	ldr	r2, [r2, #0]
 8010448:	910d      	str	r1, [sp, #52]	; 0x34
 801044a:	920e      	str	r2, [sp, #56]	; 0x38
 801044c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801044e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010452:	6812      	ldr	r2, [r2, #0]
 8010454:	910f      	str	r1, [sp, #60]	; 0x3c
 8010456:	9210      	str	r2, [sp, #64]	; 0x40
 8010458:	f300 8402 	bgt.w	8010c60 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 801045c:	2b00      	cmp	r3, #0
 801045e:	bfcc      	ite	gt
 8010460:	2300      	movgt	r3, #0
 8010462:	2301      	movle	r3, #1
 8010464:	425b      	negs	r3, r3
 8010466:	9308      	str	r3, [sp, #32]
 8010468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801046a:	2b15      	cmp	r3, #21
 801046c:	f300 82c4 	bgt.w	80109f8 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 8010470:	2b00      	cmp	r3, #0
 8010472:	bfcc      	ite	gt
 8010474:	2300      	movgt	r3, #0
 8010476:	2301      	movle	r3, #1
 8010478:	425b      	negs	r3, r3
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801047e:	2b00      	cmp	r3, #0
 8010480:	f000 82c0 	beq.w	8010a04 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 8010484:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010486:	2b00      	cmp	r3, #0
 8010488:	f040 8397 	bne.w	8010bba <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 801048c:	461a      	mov	r2, r3
 801048e:	4619      	mov	r1, r3
 8010490:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010492:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010496:	18cb      	adds	r3, r1, r3
 8010498:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801049a:	930c      	str	r3, [sp, #48]	; 0x30
 801049c:	6803      	ldr	r3, [r0, #0]
 801049e:	18d3      	adds	r3, r2, r3
 80104a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80104a2:	2900      	cmp	r1, #0
 80104a4:	f000 8511 	beq.w	8010eca <st_sssa8_ch_nn_mat_mult_nt_t+0xb5e>
 80104a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104aa:	2001      	movs	r0, #1
 80104ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80104ae:	1e93      	subs	r3, r2, #2
 80104b0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80104b4:	9104      	str	r1, [sp, #16]
 80104b6:	fa00 f303 	lsl.w	r3, r0, r3
 80104ba:	931c      	str	r3, [sp, #112]	; 0x70
 80104bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104be:	3b02      	subs	r3, #2
 80104c0:	fa00 f303 	lsl.w	r3, r0, r3
 80104c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80104c6:	931d      	str	r3, [sp, #116]	; 0x74
 80104c8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80104ca:	3b03      	subs	r3, #3
 80104cc:	9311      	str	r3, [sp, #68]	; 0x44
 80104ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104d0:	4418      	add	r0, r3
 80104d2:	9303      	str	r3, [sp, #12]
 80104d4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80104d6:	9002      	str	r0, [sp, #8]
 80104d8:	3304      	adds	r3, #4
 80104da:	9845      	ldr	r0, [sp, #276]	; 0x114
 80104dc:	9315      	str	r3, [sp, #84]	; 0x54
 80104de:	1e53      	subs	r3, r2, #1
 80104e0:	4420      	add	r0, r4
 80104e2:	931e      	str	r3, [sp, #120]	; 0x78
 80104e4:	f1c2 0301 	rsb	r3, r2, #1
 80104e8:	9014      	str	r0, [sp, #80]	; 0x50
 80104ea:	9324      	str	r3, [sp, #144]	; 0x90
 80104ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f340 8279 	ble.w	80109e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 80104f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80104f8:	eb0b 0703 	add.w	r7, fp, r3
 80104fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80104fe:	f8cd b014 	str.w	fp, [sp, #20]
 8010502:	4604      	mov	r4, r0
 8010504:	445b      	add	r3, fp
 8010506:	9e45      	ldr	r6, [sp, #276]	; 0x114
 8010508:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010510:	4619      	mov	r1, r3
 8010512:	f85b c007 	ldr.w	ip, [fp, r7]
 8010516:	eb0b 0e07 	add.w	lr, fp, r7
 801051a:	fa2f f58c 	sxtb16	r5, ip
 801051e:	6832      	ldr	r2, [r6, #0]
 8010520:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8010524:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010528:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801052c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8010530:	fb25 0002 	smlad	r0, r5, r2, r0
 8010534:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010538:	fb25 350a 	smlad	r5, r5, sl, r3
 801053c:	fb2c 5508 	smlad	r5, ip, r8, r5
 8010540:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010544:	fa2f fc83 	sxtb16	ip, r3
 8010548:	fa2f f393 	sxtb16	r3, r3, ror #8
 801054c:	fb2c 4202 	smlad	r2, ip, r2, r4
 8010550:	fb2c 110a 	smlad	r1, ip, sl, r1
 8010554:	fb23 2209 	smlad	r2, r3, r9, r2
 8010558:	f8d6 9010 	ldr.w	r9, [r6, #16]
 801055c:	6974      	ldr	r4, [r6, #20]
 801055e:	fb23 1808 	smlad	r8, r3, r8, r1
 8010562:	f8de 1004 	ldr.w	r1, [lr, #4]
 8010566:	69b3      	ldr	r3, [r6, #24]
 8010568:	fa2f fc81 	sxtb16	ip, r1
 801056c:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8010570:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010574:	fb2c 0009 	smlad	r0, ip, r9, r0
 8010578:	fb21 0004 	smlad	r0, r1, r4, r0
 801057c:	fb2c 5c03 	smlad	ip, ip, r3, r5
 8010580:	fb21 cc0a 	smlad	ip, r1, sl, ip
 8010584:	683d      	ldr	r5, [r7, #0]
 8010586:	fa2f f185 	sxtb16	r1, r5
 801058a:	fa2f f595 	sxtb16	r5, r5, ror #8
 801058e:	fb21 2909 	smlad	r9, r1, r9, r2
 8010592:	fb21 8803 	smlad	r8, r1, r3, r8
 8010596:	fb25 9904 	smlad	r9, r5, r4, r9
 801059a:	6a34      	ldr	r4, [r6, #32]
 801059c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801059e:	fb25 8a0a 	smlad	sl, r5, sl, r8
 80105a2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80105a6:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80105aa:	fa2f f182 	sxtb16	r1, r2
 80105ae:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80105b0:	fa2f f292 	sxtb16	r2, r2, ror #8
 80105b4:	fb21 0004 	smlad	r0, r1, r4, r0
 80105b8:	fb22 0003 	smlad	r0, r2, r3, r0
 80105bc:	fb21 c108 	smlad	r1, r1, r8, ip
 80105c0:	fb22 1205 	smlad	r2, r2, r5, r1
 80105c4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80105c8:	fa2f f18c 	sxtb16	r1, ip
 80105cc:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80105d0:	fb21 9404 	smlad	r4, r1, r4, r9
 80105d4:	fb21 aa08 	smlad	sl, r1, r8, sl
 80105d8:	fb2c 4903 	smlad	r9, ip, r3, r4
 80105dc:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 80105e0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80105e2:	fb2c a505 	smlad	r5, ip, r5, sl
 80105e6:	f8de 300c 	ldr.w	r3, [lr, #12]
 80105ea:	3640      	adds	r6, #64	; 0x40
 80105ec:	fa2f f183 	sxtb16	r1, r3
 80105f0:	f856 ac08 	ldr.w	sl, [r6, #-8]
 80105f4:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80105f8:	fa2f f393 	sxtb16	r3, r3, ror #8
 80105fc:	fb21 0008 	smlad	r0, r1, r8, r0
 8010600:	fb23 0004 	smlad	r0, r3, r4, r0
 8010604:	fb21 220a 	smlad	r2, r1, sl, r2
 8010608:	fb23 230e 	smlad	r3, r3, lr, r2
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	fa2f f281 	sxtb16	r2, r1
 8010612:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010616:	fb22 9908 	smlad	r9, r2, r8, r9
 801061a:	fb22 550a 	smlad	r5, r2, sl, r5
 801061e:	fb21 9404 	smlad	r4, r1, r4, r9
 8010622:	fb21 510e 	smlad	r1, r1, lr, r5
 8010626:	3710      	adds	r7, #16
 8010628:	9a01      	ldr	r2, [sp, #4]
 801062a:	4297      	cmp	r7, r2
 801062c:	f47f af71 	bne.w	8010512 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8010630:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010632:	f8dd b014 	ldr.w	fp, [sp, #20]
 8010636:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010638:	4692      	mov	sl, r2
 801063a:	4493      	add	fp, r2
 801063c:	9501      	str	r5, [sp, #4]
 801063e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010640:	4592      	cmp	sl, r2
 8010642:	f280 81ce 	bge.w	80109e2 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 8010646:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010648:	f8cd a01c 	str.w	sl, [sp, #28]
 801064c:	eba5 020a 	sub.w	r2, r5, sl
 8010650:	46aa      	mov	sl, r5
 8010652:	0892      	lsrs	r2, r2, #2
 8010654:	4616      	mov	r6, r2
 8010656:	9206      	str	r2, [sp, #24]
 8010658:	9a01      	ldr	r2, [sp, #4]
 801065a:	3601      	adds	r6, #1
 801065c:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 8010660:	9605      	str	r6, [sp, #20]
 8010662:	f85b 5b04 	ldr.w	r5, [fp], #4
 8010666:	3210      	adds	r2, #16
 8010668:	fa2f f685 	sxtb16	r6, r5
 801066c:	f852 8c10 	ldr.w	r8, [r2, #-16]
 8010670:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8010674:	f852 ec08 	ldr.w	lr, [r2, #-8]
 8010678:	f852 7c04 	ldr.w	r7, [r2, #-4]
 801067c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010680:	fb26 0008 	smlad	r0, r6, r8, r0
 8010684:	fb25 000c 	smlad	r0, r5, ip, r0
 8010688:	fb26 330e 	smlad	r3, r6, lr, r3
 801068c:	fb25 3307 	smlad	r3, r5, r7, r3
 8010690:	f85b 500a 	ldr.w	r5, [fp, sl]
 8010694:	fa2f f685 	sxtb16	r6, r5
 8010698:	fa2f f595 	sxtb16	r5, r5, ror #8
 801069c:	fb26 4408 	smlad	r4, r6, r8, r4
 80106a0:	fb26 110e 	smlad	r1, r6, lr, r1
 80106a4:	fb25 440c 	smlad	r4, r5, ip, r4
 80106a8:	fb25 1107 	smlad	r1, r5, r7, r1
 80106ac:	45cb      	cmp	fp, r9
 80106ae:	d1d8      	bne.n	8010662 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	9d05      	ldr	r5, [sp, #20]
 80106b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80106b8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80106bc:	9d06      	ldr	r5, [sp, #24]
 80106be:	9201      	str	r2, [sp, #4]
 80106c0:	f10a 0204 	add.w	r2, sl, #4
 80106c4:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 80106c8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80106ca:	4552      	cmp	r2, sl
 80106cc:	dd58      	ble.n	8010780 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 80106ce:	9f01      	ldr	r7, [sp, #4]
 80106d0:	f999 2000 	ldrsb.w	r2, [r9]
 80106d4:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 80106d8:	f9b7 6000 	ldrsh.w	r6, [r7]
 80106dc:	fb15 3302 	smlabb	r3, r5, r2, r3
 80106e0:	fb16 0002 	smlabb	r0, r6, r2, r0
 80106e4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80106e6:	f919 2002 	ldrsb.w	r2, [r9, r2]
 80106ea:	fb15 1102 	smlabb	r1, r5, r2, r1
 80106ee:	9d42      	ldr	r5, [sp, #264]	; 0x108
 80106f0:	fb16 4402 	smlabb	r4, r6, r2, r4
 80106f4:	f10a 0201 	add.w	r2, sl, #1
 80106f8:	4295      	cmp	r5, r2
 80106fa:	dd3d      	ble.n	8010778 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 80106fc:	eb09 0205 	add.w	r2, r9, r5
 8010700:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8010704:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8010708:	f992 2001 	ldrsb.w	r2, [r2, #1]
 801070c:	fb16 4402 	smlabb	r4, r6, r2, r4
 8010710:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010714:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8010718:	fb16 0002 	smlabb	r0, r6, r2, r0
 801071c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801071e:	fb15 3302 	smlabb	r3, r5, r2, r3
 8010722:	f10a 0202 	add.w	r2, sl, #2
 8010726:	f109 0502 	add.w	r5, r9, #2
 801072a:	4296      	cmp	r6, r2
 801072c:	dd24      	ble.n	8010778 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801072e:	57aa      	ldrsb	r2, [r5, r6]
 8010730:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8010734:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8010738:	fb16 4402 	smlabb	r4, r6, r2, r4
 801073c:	fb15 1102 	smlabb	r1, r5, r2, r1
 8010740:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8010744:	fb16 0002 	smlabb	r0, r6, r2, r0
 8010748:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801074a:	fb15 3302 	smlabb	r3, r5, r2, r3
 801074e:	f10a 0203 	add.w	r2, sl, #3
 8010752:	f109 0503 	add.w	r5, r9, #3
 8010756:	4296      	cmp	r6, r2
 8010758:	dd0e      	ble.n	8010778 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801075a:	57ad      	ldrsb	r5, [r5, r6]
 801075c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010760:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8010764:	fb12 4405 	smlabb	r4, r2, r5, r4
 8010768:	fb16 1105 	smlabb	r1, r6, r5, r1
 801076c:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8010770:	fb12 0005 	smlabb	r0, r2, r5, r0
 8010774:	fb16 3305 	smlabb	r3, r6, r5, r3
 8010778:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801077a:	eba2 020a 	sub.w	r2, r2, sl
 801077e:	4491      	add	r9, r2
 8010780:	9a08      	ldr	r2, [sp, #32]
 8010782:	2a00      	cmp	r2, #0
 8010784:	f040 80dd 	bne.w	8010942 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 8010788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801078a:	0040      	lsls	r0, r0, #1
 801078c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801078e:	0064      	lsls	r4, r4, #1
 8010790:	fb50 5002 	smmla	r0, r0, r2, r5
 8010794:	fb54 5402 	smmla	r4, r4, r2, r5
 8010798:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801079a:	4110      	asrs	r0, r2
 801079c:	f300 0007 	ssat	r0, #8, r0
 80107a0:	9d03      	ldr	r5, [sp, #12]
 80107a2:	4114      	asrs	r4, r2
 80107a4:	f805 0c01 	strb.w	r0, [r5, #-1]
 80107a8:	f304 0407 	ssat	r4, #8, r4
 80107ac:	9a02      	ldr	r2, [sp, #8]
 80107ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80107b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107b4:	2a00      	cmp	r2, #0
 80107b6:	f040 80ac 	bne.w	8010912 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 80107ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80107c0:	0049      	lsls	r1, r1, #1
 80107c2:	fb53 0302 	smmla	r3, r3, r2, r0
 80107c6:	fb51 0102 	smmla	r1, r1, r2, r0
 80107ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107cc:	4113      	asrs	r3, r2
 80107ce:	f303 0307 	ssat	r3, #8, r3
 80107d2:	9803      	ldr	r0, [sp, #12]
 80107d4:	4111      	asrs	r1, r2
 80107d6:	7003      	strb	r3, [r0, #0]
 80107d8:	f301 0107 	ssat	r1, #8, r1
 80107dc:	9b02      	ldr	r3, [sp, #8]
 80107de:	7019      	strb	r1, [r3, #0]
 80107e0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80107e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80107e4:	eb09 0b03 	add.w	fp, r9, r3
 80107e8:	9b03      	ldr	r3, [sp, #12]
 80107ea:	4413      	add	r3, r2
 80107ec:	9303      	str	r3, [sp, #12]
 80107ee:	9b02      	ldr	r3, [sp, #8]
 80107f0:	4413      	add	r3, r2
 80107f2:	9302      	str	r3, [sp, #8]
 80107f4:	9b04      	ldr	r3, [sp, #16]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	f47f ae77 	bne.w	80104ec <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 80107fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010800:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010802:	3b01      	subs	r3, #1
 8010804:	4413      	add	r3, r2
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801080a:	2b00      	cmp	r3, #0
 801080c:	f040 822b 	bne.w	8010c66 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 8010810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010812:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010814:	4413      	add	r3, r2
 8010816:	9323      	str	r3, [sp, #140]	; 0x8c
 8010818:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801081a:	b11b      	cbz	r3, 8010824 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 801081c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801081e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010820:	4413      	add	r3, r2
 8010822:	9345      	str	r3, [sp, #276]	; 0x114
 8010824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010828:	3204      	adds	r2, #4
 801082a:	3302      	adds	r3, #2
 801082c:	9221      	str	r2, [sp, #132]	; 0x84
 801082e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010830:	931b      	str	r3, [sp, #108]	; 0x6c
 8010832:	3208      	adds	r2, #8
 8010834:	921f      	str	r2, [sp, #124]	; 0x7c
 8010836:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010838:	3208      	adds	r2, #8
 801083a:	9220      	str	r2, [sp, #128]	; 0x80
 801083c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801083e:	3208      	adds	r2, #8
 8010840:	9222      	str	r2, [sp, #136]	; 0x88
 8010842:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010844:	429a      	cmp	r2, r3
 8010846:	f47f adf0 	bne.w	801042a <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 801084a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801084c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801084e:	085a      	lsrs	r2, r3, #1
 8010850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010852:	fb02 3303 	mla	r3, r2, r3, r3
 8010856:	3201      	adds	r2, #1
 8010858:	4419      	add	r1, r3
 801085a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801085c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010860:	912d      	str	r1, [sp, #180]	; 0xb4
 8010862:	932e      	str	r3, [sp, #184]	; 0xb8
 8010864:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010866:	07db      	lsls	r3, r3, #31
 8010868:	d54f      	bpl.n	801090a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 801086a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801086c:	2b00      	cmp	r3, #0
 801086e:	dd4c      	ble.n	801090a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8010870:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010872:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8010876:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801087a:	2200      	movs	r2, #0
 801087c:	441c      	add	r4, r3
 801087e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010880:	f04f 0901 	mov.w	r9, #1
 8010884:	4611      	mov	r1, r2
 8010886:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 801088a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801088c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8010890:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010892:	f8cd e004 	str.w	lr, [sp, #4]
 8010896:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801089a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801089c:	4498      	add	r8, r3
 801089e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80108a0:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 80108a4:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80108a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80108aa:	9e01      	ldr	r6, [sp, #4]
 80108ac:	f1be 0f00 	cmp.w	lr, #0
 80108b0:	6837      	ldr	r7, [r6, #0]
 80108b2:	dd0d      	ble.n	80108d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 80108b4:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 80108b6:	eb03 0b0e 	add.w	fp, r3, lr
 80108ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80108be:	f913 6b01 	ldrsb.w	r6, [r3], #1
 80108c2:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 80108c6:	1a36      	subs	r6, r6, r0
 80108c8:	455b      	cmp	r3, fp
 80108ca:	fb0a 7706 	mla	r7, sl, r6, r7
 80108ce:	d1f6      	bne.n	80108be <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 80108d0:	f9b8 c000 	ldrsh.w	ip, [r8]
 80108d4:	f1bc 0f15 	cmp.w	ip, #21
 80108d8:	f340 82fa 	ble.w	8010ed0 <st_sssa8_ch_nn_mat_mult_nt_t+0xb64>
 80108dc:	f1ac 0a02 	sub.w	sl, ip, #2
 80108e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80108e4:	682e      	ldr	r6, [r5, #0]
 80108e6:	fa09 fa0a 	lsl.w	sl, r9, sl
 80108ea:	fb57 a606 	smmla	r6, r7, r6, sl
 80108ee:	fa46 fc0c 	asr.w	ip, r6, ip
 80108f2:	6826      	ldr	r6, [r4, #0]
 80108f4:	4466      	add	r6, ip
 80108f6:	f306 0607 	ssat	r6, #8, r6
 80108fa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80108fc:	54be      	strb	r6, [r7, r2]
 80108fe:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8010900:	3101      	adds	r1, #1
 8010902:	4432      	add	r2, r6
 8010904:	9e40      	ldr	r6, [sp, #256]	; 0x100
 8010906:	428e      	cmp	r6, r1
 8010908:	d1cf      	bne.n	80108aa <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 801090a:	2000      	movs	r0, #0
 801090c:	b035      	add	sp, #212	; 0xd4
 801090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010912:	3201      	adds	r2, #1
 8010914:	d02e      	beq.n	8010974 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 8010916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010918:	981d      	ldr	r0, [sp, #116]	; 0x74
 801091a:	fb53 0302 	smmla	r3, r3, r2, r0
 801091e:	fb51 0102 	smmla	r1, r1, r2, r0
 8010922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010924:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010926:	3a01      	subs	r2, #1
 8010928:	4113      	asrs	r3, r2
 801092a:	4403      	add	r3, r0
 801092c:	f303 0307 	ssat	r3, #8, r3
 8010930:	4111      	asrs	r1, r2
 8010932:	9a03      	ldr	r2, [sp, #12]
 8010934:	4401      	add	r1, r0
 8010936:	7013      	strb	r3, [r2, #0]
 8010938:	f301 0207 	ssat	r2, #8, r1
 801093c:	9b02      	ldr	r3, [sp, #8]
 801093e:	701a      	strb	r2, [r3, #0]
 8010940:	e74e      	b.n	80107e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8010942:	3201      	adds	r2, #1
 8010944:	d031      	beq.n	80109aa <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 8010946:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801094a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801094c:	fb50 5002 	smmla	r0, r0, r2, r5
 8010950:	fb54 5402 	smmla	r4, r4, r2, r5
 8010954:	4130      	asrs	r0, r6
 8010956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010958:	4410      	add	r0, r2
 801095a:	f300 0007 	ssat	r0, #8, r0
 801095e:	9d03      	ldr	r5, [sp, #12]
 8010960:	4134      	asrs	r4, r6
 8010962:	f805 0c01 	strb.w	r0, [r5, #-1]
 8010966:	18a2      	adds	r2, r4, r2
 8010968:	f302 0207 	ssat	r2, #8, r2
 801096c:	9802      	ldr	r0, [sp, #8]
 801096e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8010972:	e71e      	b.n	80107b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8010974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010976:	f1c2 0201 	rsb	r2, r2, #1
 801097a:	4093      	lsls	r3, r2
 801097c:	f303 031f 	ssat	r3, #32, r3
 8010980:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010982:	fb53 f310 	smmulr	r3, r3, r0
 8010986:	fa01 f202 	lsl.w	r2, r1, r2
 801098a:	f302 021f 	ssat	r2, #32, r2
 801098e:	fb52 f210 	smmulr	r2, r2, r0
 8010992:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010994:	440b      	add	r3, r1
 8010996:	f303 0307 	ssat	r3, #8, r3
 801099a:	9803      	ldr	r0, [sp, #12]
 801099c:	440a      	add	r2, r1
 801099e:	7003      	strb	r3, [r0, #0]
 80109a0:	f302 0207 	ssat	r2, #8, r2
 80109a4:	9b02      	ldr	r3, [sp, #8]
 80109a6:	701a      	strb	r2, [r3, #0]
 80109a8:	e71a      	b.n	80107e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 80109aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80109ac:	fa00 f205 	lsl.w	r2, r0, r5
 80109b0:	f302 021f 	ssat	r2, #32, r2
 80109b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80109b6:	fb52 f216 	smmulr	r2, r2, r6
 80109ba:	fa04 f005 	lsl.w	r0, r4, r5
 80109be:	f300 001f 	ssat	r0, #32, r0
 80109c2:	fb50 f016 	smmulr	r0, r0, r6
 80109c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80109c8:	4422      	add	r2, r4
 80109ca:	f302 0207 	ssat	r2, #8, r2
 80109ce:	9d03      	ldr	r5, [sp, #12]
 80109d0:	4420      	add	r0, r4
 80109d2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80109d6:	f300 0007 	ssat	r0, #8, r0
 80109da:	9a02      	ldr	r2, [sp, #8]
 80109dc:	f802 0c01 	strb.w	r0, [r2, #-1]
 80109e0:	e6e7      	b.n	80107b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 80109e2:	46d9      	mov	r9, fp
 80109e4:	e670      	b.n	80106c8 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 80109e6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80109e8:	f04f 0a00 	mov.w	sl, #0
 80109ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f2:	4604      	mov	r4, r0
 80109f4:	4619      	mov	r1, r3
 80109f6:	e622      	b.n	801063e <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 80109f8:	2301      	movs	r3, #1
 80109fa:	9309      	str	r3, [sp, #36]	; 0x24
 80109fc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f47f ad40 	bne.w	8010484 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010a04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a06:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010a08:	eb03 0a02 	add.w	sl, r3, r2
 8010a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f340 82b2 	ble.w	8010f78 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0c>
 8010a14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a16:	4650      	mov	r0, sl
 8010a18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a1a:	18d5      	adds	r5, r2, r3
 8010a1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010a1e:	6811      	ldr	r1, [r2, #0]
 8010a20:	3210      	adds	r2, #16
 8010a22:	6804      	ldr	r4, [r0, #0]
 8010a24:	3340      	adds	r3, #64	; 0x40
 8010a26:	fa2f f681 	sxtb16	r6, r1
 8010a2a:	3010      	adds	r0, #16
 8010a2c:	f843 6c40 	str.w	r6, [r3, #-64]
 8010a30:	ea4f 2131 	mov.w	r1, r1, ror #8
 8010a34:	42aa      	cmp	r2, r5
 8010a36:	fa2f f181 	sxtb16	r1, r1
 8010a3a:	f843 1c3c 	str.w	r1, [r3, #-60]
 8010a3e:	ea4f 2134 	mov.w	r1, r4, ror #8
 8010a42:	fa2f f484 	sxtb16	r4, r4
 8010a46:	fa2f f181 	sxtb16	r1, r1
 8010a4a:	f843 4c38 	str.w	r4, [r3, #-56]
 8010a4e:	f843 1c34 	str.w	r1, [r3, #-52]
 8010a52:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 8010a56:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8010a5a:	ea4f 2631 	mov.w	r6, r1, ror #8
 8010a5e:	fa2f f181 	sxtb16	r1, r1
 8010a62:	fa2f f686 	sxtb16	r6, r6
 8010a66:	f843 1c28 	str.w	r1, [r3, #-40]
 8010a6a:	f843 6c24 	str.w	r6, [r3, #-36]
 8010a6e:	ea4f 2634 	mov.w	r6, r4, ror #8
 8010a72:	fa2f f484 	sxtb16	r4, r4
 8010a76:	f843 4c30 	str.w	r4, [r3, #-48]
 8010a7a:	fa2f f486 	sxtb16	r4, r6
 8010a7e:	f843 4c2c 	str.w	r4, [r3, #-44]
 8010a82:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8010a86:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010a8a:	ea4f 2634 	mov.w	r6, r4, ror #8
 8010a8e:	fa2f f484 	sxtb16	r4, r4
 8010a92:	fa2f f686 	sxtb16	r6, r6
 8010a96:	f843 4c20 	str.w	r4, [r3, #-32]
 8010a9a:	ea4f 2431 	mov.w	r4, r1, ror #8
 8010a9e:	f843 6c1c 	str.w	r6, [r3, #-28]
 8010aa2:	fa2f f484 	sxtb16	r4, r4
 8010aa6:	fa2f f181 	sxtb16	r1, r1
 8010aaa:	f843 4c14 	str.w	r4, [r3, #-20]
 8010aae:	f843 1c18 	str.w	r1, [r3, #-24]
 8010ab2:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010ab6:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8010aba:	ea4f 2634 	mov.w	r6, r4, ror #8
 8010abe:	fa2f f484 	sxtb16	r4, r4
 8010ac2:	fa2f f686 	sxtb16	r6, r6
 8010ac6:	f843 4c10 	str.w	r4, [r3, #-16]
 8010aca:	ea4f 2431 	mov.w	r4, r1, ror #8
 8010ace:	f843 6c0c 	str.w	r6, [r3, #-12]
 8010ad2:	fa2f f484 	sxtb16	r4, r4
 8010ad6:	fa2f f181 	sxtb16	r1, r1
 8010ada:	f843 4c04 	str.w	r4, [r3, #-4]
 8010ade:	f843 1c08 	str.w	r1, [r3, #-8]
 8010ae2:	d19c      	bne.n	8010a1e <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 8010ae4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010ae6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010ae8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010aea:	449a      	add	sl, r3
 8010aec:	469c      	mov	ip, r3
 8010aee:	1857      	adds	r7, r2, r1
 8010af0:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010af2:	3b03      	subs	r3, #3
 8010af4:	4563      	cmp	r3, ip
 8010af6:	f340 823d 	ble.w	8010f74 <st_sssa8_ch_nn_mat_mult_nt_t+0xc08>
 8010afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010afc:	463a      	mov	r2, r7
 8010afe:	4650      	mov	r0, sl
 8010b00:	eba3 030c 	sub.w	r3, r3, ip
 8010b04:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8010b08:	f108 0e01 	add.w	lr, r8, #1
 8010b0c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8010b10:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 8010b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b18:	3210      	adds	r2, #16
 8010b1a:	f850 1b04 	ldr.w	r1, [r0], #4
 8010b1e:	fa2f f483 	sxtb16	r4, r3
 8010b22:	42b5      	cmp	r5, r6
 8010b24:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010b28:	fa2f f383 	sxtb16	r3, r3
 8010b2c:	f842 3c0c 	str.w	r3, [r2, #-12]
 8010b30:	ea4f 2331 	mov.w	r3, r1, ror #8
 8010b34:	fa2f f181 	sxtb16	r1, r1
 8010b38:	f842 4c10 	str.w	r4, [r2, #-16]
 8010b3c:	f842 1c08 	str.w	r1, [r2, #-8]
 8010b40:	fa2f f383 	sxtb16	r3, r3
 8010b44:	f842 3c04 	str.w	r3, [r2, #-4]
 8010b48:	d1e4      	bne.n	8010b14 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 8010b4a:	f10c 0304 	add.w	r3, ip, #4
 8010b4e:	44ca      	add	sl, r9
 8010b50:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8010b54:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 8010b58:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010b5a:	4563      	cmp	r3, ip
 8010b5c:	f77f ac92 	ble.w	8010484 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010b60:	f996 3000 	ldrsb.w	r3, [r6]
 8010b64:	803b      	strh	r3, [r7, #0]
 8010b66:	f10c 0301 	add.w	r3, ip, #1
 8010b6a:	f99a 2000 	ldrsb.w	r2, [sl]
 8010b6e:	807a      	strh	r2, [r7, #2]
 8010b70:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010b72:	429a      	cmp	r2, r3
 8010b74:	f77f ac86 	ble.w	8010484 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010b78:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8010b7c:	80bb      	strh	r3, [r7, #4]
 8010b7e:	f10c 0302 	add.w	r3, ip, #2
 8010b82:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 8010b86:	80fa      	strh	r2, [r7, #6]
 8010b88:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	f77f ac7a 	ble.w	8010484 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010b90:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8010b94:	f10c 0c03 	add.w	ip, ip, #3
 8010b98:	813b      	strh	r3, [r7, #8]
 8010b9a:	4594      	cmp	ip, r2
 8010b9c:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8010ba0:	817b      	strh	r3, [r7, #10]
 8010ba2:	f6bf ac6f 	bge.w	8010484 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010ba6:	f996 3003 	ldrsb.w	r3, [r6, #3]
 8010baa:	81bb      	strh	r3, [r7, #12]
 8010bac:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8010bb0:	81fb      	strh	r3, [r7, #14]
 8010bb2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f43f ac69 	beq.w	801048c <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 8010bba:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	f000 81cd 	beq.w	8010f5c <st_sssa8_ch_nn_mat_mult_nt_t+0xbf0>
 8010bc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	f102 0110 	add.w	r1, r2, #16
 8010bca:	461a      	mov	r2, r3
 8010bcc:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 8010bd0:	3801      	subs	r0, #1
 8010bd2:	f101 0110 	add.w	r1, r1, #16
 8010bd6:	eba3 0304 	sub.w	r3, r3, r4
 8010bda:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 8010bde:	eba2 0204 	sub.w	r2, r2, r4
 8010be2:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 8010be6:	eba3 0304 	sub.w	r3, r3, r4
 8010bea:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 8010bee:	eba2 0204 	sub.w	r2, r2, r4
 8010bf2:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 8010bf6:	eba3 0304 	sub.w	r3, r3, r4
 8010bfa:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 8010bfe:	eba2 0204 	sub.w	r2, r2, r4
 8010c02:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8010c06:	eba3 0304 	sub.w	r3, r3, r4
 8010c0a:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 8010c0e:	eba2 0204 	sub.w	r2, r2, r4
 8010c12:	d1db      	bne.n	8010bcc <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8010c14:	9945      	ldr	r1, [sp, #276]	; 0x114
 8010c16:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8010c18:	4401      	add	r1, r0
 8010c1a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8010c1c:	b1cc      	cbz	r4, 8010c52 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8010c1e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8010c22:	2c01      	cmp	r4, #1
 8010c24:	eba3 0300 	sub.w	r3, r3, r0
 8010c28:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8010c2c:	eba2 0200 	sub.w	r2, r2, r0
 8010c30:	d00f      	beq.n	8010c52 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8010c32:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8010c36:	2c02      	cmp	r4, #2
 8010c38:	eba3 0300 	sub.w	r3, r3, r0
 8010c3c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8010c40:	eba2 0200 	sub.w	r2, r2, r0
 8010c44:	d005      	beq.n	8010c52 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8010c46:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8010c4a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8010c4e:	1a1b      	subs	r3, r3, r0
 8010c50:	1a52      	subs	r2, r2, r1
 8010c52:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8010c54:	fb03 f101 	mul.w	r1, r3, r1
 8010c58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010c5a:	fb03 f202 	mul.w	r2, r3, r2
 8010c5e:	e417      	b.n	8010490 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 8010c60:	2301      	movs	r3, #1
 8010c62:	9308      	str	r3, [sp, #32]
 8010c64:	e400      	b.n	8010468 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 8010c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f340 817d 	ble.w	8010f68 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfc>
 8010c6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010c70:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 8010c74:	eb0b 0003 	add.w	r0, fp, r3
 8010c78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010c7a:	f8db 1000 	ldr.w	r1, [fp]
 8010c7e:	681e      	ldr	r6, [r3, #0]
 8010c80:	fa2f f481 	sxtb16	r4, r1
 8010c84:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010c88:	fb24 5506 	smlad	r5, r4, r6, r5
 8010c8c:	685e      	ldr	r6, [r3, #4]
 8010c8e:	fb21 5606 	smlad	r6, r1, r6, r5
 8010c92:	689d      	ldr	r5, [r3, #8]
 8010c94:	fb24 2205 	smlad	r2, r4, r5, r2
 8010c98:	68dc      	ldr	r4, [r3, #12]
 8010c9a:	fb21 2104 	smlad	r1, r1, r4, r2
 8010c9e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010ca2:	691d      	ldr	r5, [r3, #16]
 8010ca4:	fa2f f482 	sxtb16	r4, r2
 8010ca8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010cac:	fb24 6505 	smlad	r5, r4, r5, r6
 8010cb0:	695e      	ldr	r6, [r3, #20]
 8010cb2:	fb22 5606 	smlad	r6, r2, r6, r5
 8010cb6:	699d      	ldr	r5, [r3, #24]
 8010cb8:	fb24 1105 	smlad	r1, r4, r5, r1
 8010cbc:	69dc      	ldr	r4, [r3, #28]
 8010cbe:	fb22 1104 	smlad	r1, r2, r4, r1
 8010cc2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8010cc6:	6a1d      	ldr	r5, [r3, #32]
 8010cc8:	fa2f f482 	sxtb16	r4, r2
 8010ccc:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010cd0:	fb24 6505 	smlad	r5, r4, r5, r6
 8010cd4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8010cd6:	fb22 5606 	smlad	r6, r2, r6, r5
 8010cda:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8010cdc:	fb24 1105 	smlad	r1, r4, r5, r1
 8010ce0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010ce2:	fb22 1104 	smlad	r1, r2, r4, r1
 8010ce6:	f8db 200c 	ldr.w	r2, [fp, #12]
 8010cea:	3340      	adds	r3, #64	; 0x40
 8010cec:	fa2f f482 	sxtb16	r4, r2
 8010cf0:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8010cf4:	f10b 0b10 	add.w	fp, fp, #16
 8010cf8:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 8010cfc:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8010d00:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8010d04:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010d08:	fb24 6505 	smlad	r5, r4, r5, r6
 8010d0c:	fb22 550e 	smlad	r5, r2, lr, r5
 8010d10:	fb24 110c 	smlad	r1, r4, ip, r1
 8010d14:	fb22 1207 	smlad	r2, r2, r7, r1
 8010d18:	4583      	cmp	fp, r0
 8010d1a:	d1ae      	bne.n	8010c7a <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 8010d1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010d1e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010d22:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 8010d26:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010d28:	eb03 0e02 	add.w	lr, r3, r2
 8010d2c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010d2e:	3b03      	subs	r3, #3
 8010d30:	4543      	cmp	r3, r8
 8010d32:	f340 8117 	ble.w	8010f64 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf8>
 8010d36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010d3a:	eba3 0a08 	sub.w	sl, r3, r8
 8010d3e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010d40:	4673      	mov	r3, lr
 8010d42:	f8cd e008 	str.w	lr, [sp, #8]
 8010d46:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8010d4a:	f10a 0901 	add.w	r9, sl, #1
 8010d4e:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8010d52:	f850 2b04 	ldr.w	r2, [r0], #4
 8010d56:	3310      	adds	r3, #16
 8010d58:	fa2f f182 	sxtb16	r1, r2
 8010d5c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8010d60:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 8010d64:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8010d68:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8010d6c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010d70:	fb21 6604 	smlad	r6, r1, r4, r6
 8010d74:	fb22 660b 	smlad	r6, r2, fp, r6
 8010d78:	fb21 550e 	smlad	r5, r1, lr, r5
 8010d7c:	fb22 5507 	smlad	r5, r2, r7, r5
 8010d80:	4560      	cmp	r0, ip
 8010d82:	d1e6      	bne.n	8010d52 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 8010d84:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010d88:	f108 0804 	add.w	r8, r8, #4
 8010d8c:	950b      	str	r5, [sp, #44]	; 0x2c
 8010d8e:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 8010d92:	960c      	str	r6, [sp, #48]	; 0x30
 8010d94:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 8010d98:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010d9a:	4543      	cmp	r3, r8
 8010d9c:	dd40      	ble.n	8010e20 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010d9e:	f99c 3000 	ldrsb.w	r3, [ip]
 8010da2:	f8be 2000 	ldrh.w	r2, [lr]
 8010da6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010da8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010daa:	fb12 1103 	smlabb	r1, r2, r3, r1
 8010dae:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010db2:	fb12 0003 	smlabb	r0, r2, r3, r0
 8010db6:	f108 0301 	add.w	r3, r8, #1
 8010dba:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010dbc:	910c      	str	r1, [sp, #48]	; 0x30
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8010dc2:	dd2d      	ble.n	8010e20 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010dc4:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8010dc8:	f8be 2004 	ldrh.w	r2, [lr, #4]
 8010dcc:	fb12 1103 	smlabb	r1, r2, r3, r1
 8010dd0:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8010dd4:	fb12 0003 	smlabb	r0, r2, r3, r0
 8010dd8:	f108 0302 	add.w	r3, r8, #2
 8010ddc:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010dde:	910c      	str	r1, [sp, #48]	; 0x30
 8010de0:	429a      	cmp	r2, r3
 8010de2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010de4:	dd1c      	ble.n	8010e20 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010de6:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8010dea:	f108 0803 	add.w	r8, r8, #3
 8010dee:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8010df2:	fb12 1103 	smlabb	r1, r2, r3, r1
 8010df6:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8010dfa:	fb12 0003 	smlabb	r0, r2, r3, r0
 8010dfe:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010e00:	910c      	str	r1, [sp, #48]	; 0x30
 8010e02:	4543      	cmp	r3, r8
 8010e04:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e06:	dd0b      	ble.n	8010e20 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010e08:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8010e0c:	f8be 200c 	ldrh.w	r2, [lr, #12]
 8010e10:	fb12 1203 	smlabb	r2, r2, r3, r1
 8010e14:	920c      	str	r2, [sp, #48]	; 0x30
 8010e16:	f8be 200e 	ldrh.w	r2, [lr, #14]
 8010e1a:	fb12 0303 	smlabb	r3, r2, r3, r0
 8010e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e22:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8010e26:	2915      	cmp	r1, #21
 8010e28:	dd3d      	ble.n	8010ea6 <st_sssa8_ch_nn_mat_mult_nt_t+0xb3a>
 8010e2a:	1e8a      	subs	r2, r1, #2
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	3901      	subs	r1, #1
 8010e30:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e32:	fa03 f202 	lsl.w	r2, r3, r2
 8010e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010e38:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010e3c:	fb50 2303 	smmla	r3, r0, r3, r2
 8010e40:	fa43 f101 	asr.w	r1, r3, r1
 8010e44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e46:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010e4a:	440b      	add	r3, r1
 8010e4c:	f303 0307 	ssat	r3, #8, r3
 8010e50:	9a01      	ldr	r2, [sp, #4]
 8010e52:	7013      	strb	r3, [r2, #0]
 8010e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e56:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010e5a:	2915      	cmp	r1, #21
 8010e5c:	dd13      	ble.n	8010e86 <st_sssa8_ch_nn_mat_mult_nt_t+0xb1a>
 8010e5e:	1e8a      	subs	r2, r1, #2
 8010e60:	2301      	movs	r3, #1
 8010e62:	3901      	subs	r1, #1
 8010e64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010e66:	fa03 f202 	lsl.w	r2, r3, r2
 8010e6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	fb50 2303 	smmla	r3, r0, r3, r2
 8010e72:	fa43 f101 	asr.w	r1, r3, r1
 8010e76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	440b      	add	r3, r1
 8010e7c:	f303 0307 	ssat	r3, #8, r3
 8010e80:	9a01      	ldr	r2, [sp, #4]
 8010e82:	7053      	strb	r3, [r2, #1]
 8010e84:	e4c4      	b.n	8010810 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8010e86:	2900      	cmp	r1, #0
 8010e88:	dd56      	ble.n	8010f38 <st_sssa8_ch_nn_mat_mult_nt_t+0xbcc>
 8010e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010e8e:	0058      	lsls	r0, r3, #1
 8010e90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010e92:	6812      	ldr	r2, [r2, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	fb50 2303 	smmla	r3, r0, r3, r2
 8010e9a:	410b      	asrs	r3, r1
 8010e9c:	f303 0307 	ssat	r3, #8, r3
 8010ea0:	9a01      	ldr	r2, [sp, #4]
 8010ea2:	7053      	strb	r3, [r2, #1]
 8010ea4:	e4b4      	b.n	8010810 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8010ea6:	2900      	cmp	r1, #0
 8010ea8:	dd32      	ble.n	8010f10 <st_sssa8_ch_nn_mat_mult_nt_t+0xba4>
 8010eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010eae:	0058      	lsls	r0, r3, #1
 8010eb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010eb2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010eb6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010eba:	fb50 2303 	smmla	r3, r0, r3, r2
 8010ebe:	410b      	asrs	r3, r1
 8010ec0:	f303 0307 	ssat	r3, #8, r3
 8010ec4:	9a01      	ldr	r2, [sp, #4]
 8010ec6:	7013      	strb	r3, [r2, #0]
 8010ec8:	e7c4      	b.n	8010e54 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8010eca:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8010ece:	e49b      	b.n	8010808 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8010ed0:	f1bc 0f00 	cmp.w	ip, #0
 8010ed4:	dd0c      	ble.n	8010ef0 <st_sssa8_ch_nn_mat_mult_nt_t+0xb84>
 8010ed6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8010eda:	682e      	ldr	r6, [r5, #0]
 8010edc:	6827      	ldr	r7, [r4, #0]
 8010ede:	fb5a 7706 	smmla	r7, sl, r6, r7
 8010ee2:	fa47 f60c 	asr.w	r6, r7, ip
 8010ee6:	f306 0607 	ssat	r6, #8, r6
 8010eea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010eec:	54be      	strb	r6, [r7, r2]
 8010eee:	e506      	b.n	80108fe <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8010ef0:	f1cc 0c01 	rsb	ip, ip, #1
 8010ef4:	fa07 f70c 	lsl.w	r7, r7, ip
 8010ef8:	f307 071f 	ssat	r7, #32, r7
 8010efc:	682e      	ldr	r6, [r5, #0]
 8010efe:	fb57 f716 	smmulr	r7, r7, r6
 8010f02:	6826      	ldr	r6, [r4, #0]
 8010f04:	443e      	add	r6, r7
 8010f06:	f306 0607 	ssat	r6, #8, r6
 8010f0a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010f0c:	54be      	strb	r6, [r7, r2]
 8010f0e:	e4f6      	b.n	80108fe <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8010f10:	f1c1 0101 	rsb	r1, r1, #1
 8010f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f16:	408a      	lsls	r2, r1
 8010f18:	f302 021f 	ssat	r2, #32, r2
 8010f1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010f1e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f22:	fb52 f213 	smmulr	r2, r2, r3
 8010f26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010f28:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	f303 0307 	ssat	r3, #8, r3
 8010f32:	9a01      	ldr	r2, [sp, #4]
 8010f34:	7013      	strb	r3, [r2, #0]
 8010f36:	e78d      	b.n	8010e54 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8010f38:	f1c1 0101 	rsb	r1, r1, #1
 8010f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f3e:	408a      	lsls	r2, r1
 8010f40:	f302 021f 	ssat	r2, #32, r2
 8010f44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	fb52 f213 	smmulr	r2, r2, r3
 8010f4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4413      	add	r3, r2
 8010f52:	f303 0307 	ssat	r3, #8, r3
 8010f56:	9a01      	ldr	r2, [sp, #4]
 8010f58:	7053      	strb	r3, [r2, #1]
 8010f5a:	e459      	b.n	8010810 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	9945      	ldr	r1, [sp, #276]	; 0x114
 8010f60:	4603      	mov	r3, r0
 8010f62:	e65a      	b.n	8010c1a <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 8010f64:	4684      	mov	ip, r0
 8010f66:	e717      	b.n	8010d98 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2c>
 8010f68:	4658      	mov	r0, fp
 8010f6a:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 8010f6e:	f04f 0800 	mov.w	r8, #0
 8010f72:	e6db      	b.n	8010d2c <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 8010f74:	462e      	mov	r6, r5
 8010f76:	e5ef      	b.n	8010b58 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 8010f78:	9f45      	ldr	r7, [sp, #276]	; 0x114
 8010f7a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8010f7c:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 8010f80:	e5b6      	b.n	8010af0 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>
 8010f82:	bf00      	nop

08010f84 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 8010f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f88:	b0c7      	sub	sp, #284	; 0x11c
 8010f8a:	469c      	mov	ip, r3
 8010f8c:	4688      	mov	r8, r1
 8010f8e:	902d      	str	r0, [sp, #180]	; 0xb4
 8010f90:	9328      	str	r3, [sp, #160]	; 0xa0
 8010f92:	9853      	ldr	r0, [sp, #332]	; 0x14c
 8010f94:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8010f98:	f8bd 615c 	ldrh.w	r6, [sp, #348]	; 0x15c
 8010f9c:	fb00 f003 	mul.w	r0, r0, r3
 8010fa0:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010fa2:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 8010fa6:	9131      	str	r1, [sp, #196]	; 0xc4
 8010fa8:	962e      	str	r6, [sp, #184]	; 0xb8
 8010faa:	f8bd 1168 	ldrh.w	r1, [sp, #360]	; 0x168
 8010fae:	f8bd 6160 	ldrh.w	r6, [sp, #352]	; 0x160
 8010fb2:	9243      	str	r2, [sp, #268]	; 0x10c
 8010fb4:	9006      	str	r0, [sp, #24]
 8010fb6:	9745      	str	r7, [sp, #276]	; 0x114
 8010fb8:	960c      	str	r6, [sp, #48]	; 0x30
 8010fba:	910a      	str	r1, [sp, #40]	; 0x28
 8010fbc:	e9dd 455d 	ldrd	r4, r5, [sp, #372]	; 0x174
 8010fc0:	2d00      	cmp	r5, #0
 8010fc2:	bf18      	it	ne
 8010fc4:	462c      	movne	r4, r5
 8010fc6:	f8bd 5158 	ldrh.w	r5, [sp, #344]	; 0x158
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	945d      	str	r4, [sp, #372]	; 0x174
 8010fce:	f8bd 4150 	ldrh.w	r4, [sp, #336]	; 0x150
 8010fd2:	9532      	str	r5, [sp, #200]	; 0xc8
 8010fd4:	9444      	str	r4, [sp, #272]	; 0x110
 8010fd6:	f340 82aa 	ble.w	801152e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5aa>
 8010fda:	3b02      	subs	r3, #2
 8010fdc:	fb00 f101 	mul.w	r1, r0, r1
 8010fe0:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 8010fe2:	4696      	mov	lr, r2
 8010fe4:	085b      	lsrs	r3, r3, #1
 8010fe6:	9139      	str	r1, [sp, #228]	; 0xe4
 8010fe8:	fb06 f404 	mul.w	r4, r6, r4
 8010fec:	460e      	mov	r6, r1
 8010fee:	3301      	adds	r3, #1
 8010ff0:	1081      	asrs	r1, r0, #2
 8010ff2:	1eaa      	subs	r2, r5, #2
 8010ff4:	9407      	str	r4, [sp, #28]
 8010ff6:	9337      	str	r3, [sp, #220]	; 0xdc
 8010ff8:	f1a0 0310 	sub.w	r3, r0, #16
 8010ffc:	9134      	str	r1, [sp, #208]	; 0xd0
 8010ffe:	f000 0103 	and.w	r1, r0, #3
 8011002:	9852      	ldr	r0, [sp, #328]	; 0x148
 8011004:	0852      	lsrs	r2, r2, #1
 8011006:	9135      	str	r1, [sp, #212]	; 0xd4
 8011008:	0041      	lsls	r1, r0, #1
 801100a:	9341      	str	r3, [sp, #260]	; 0x104
 801100c:	091b      	lsrs	r3, r3, #4
 801100e:	4608      	mov	r0, r1
 8011010:	9120      	str	r1, [sp, #128]	; 0x80
 8011012:	fb02 f104 	mul.w	r1, r2, r4
 8011016:	3301      	adds	r3, #1
 8011018:	fb02 0000 	mla	r0, r2, r0, r0
 801101c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801101e:	9040      	str	r0, [sp, #256]	; 0x100
 8011020:	0048      	lsls	r0, r1, #1
 8011022:	903f      	str	r0, [sp, #252]	; 0xfc
 8011024:	f06f 0003 	mvn.w	r0, #3
 8011028:	1b00      	subs	r0, r0, r4
 801102a:	9013      	str	r0, [sp, #76]	; 0x4c
 801102c:	1f20      	subs	r0, r4, #4
 801102e:	9011      	str	r0, [sp, #68]	; 0x44
 8011030:	1e68      	subs	r0, r5, #1
 8011032:	901d      	str	r0, [sp, #116]	; 0x74
 8011034:	9806      	ldr	r0, [sp, #24]
 8011036:	380f      	subs	r0, #15
 8011038:	900d      	str	r0, [sp, #52]	; 0x34
 801103a:	f005 0001 	and.w	r0, r5, #1
 801103e:	903a      	str	r0, [sp, #232]	; 0xe8
 8011040:	0060      	lsls	r0, r4, #1
 8011042:	901e      	str	r0, [sp, #120]	; 0x78
 8011044:	0070      	lsls	r0, r6, #1
 8011046:	9036      	str	r0, [sp, #216]	; 0xd8
 8011048:	00b0      	lsls	r0, r6, #2
 801104a:	903b      	str	r0, [sp, #236]	; 0xec
 801104c:	9851      	ldr	r0, [sp, #324]	; 0x144
 801104e:	3002      	adds	r0, #2
 8011050:	9029      	str	r0, [sp, #164]	; 0xa4
 8011052:	9850      	ldr	r0, [sp, #320]	; 0x140
 8011054:	3004      	adds	r0, #4
 8011056:	9026      	str	r0, [sp, #152]	; 0x98
 8011058:	985c      	ldr	r0, [sp, #368]	; 0x170
 801105a:	3004      	adds	r0, #4
 801105c:	9027      	str	r0, [sp, #156]	; 0x9c
 801105e:	4670      	mov	r0, lr
 8011060:	3004      	adds	r0, #4
 8011062:	9030      	str	r0, [sp, #192]	; 0xc0
 8011064:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
 8011068:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801106a:	9042      	str	r0, [sp, #264]	; 0x108
 801106c:	0110      	lsls	r0, r2, #4
 801106e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8011070:	0092      	lsls	r2, r2, #2
 8011072:	903d      	str	r0, [sp, #244]	; 0xf4
 8011074:	923e      	str	r2, [sp, #248]	; 0xf8
 8011076:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011078:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 801107c:	fb06 f207 	mul.w	r2, r6, r7
 8011080:	923c      	str	r2, [sp, #240]	; 0xf0
 8011082:	011a      	lsls	r2, r3, #4
 8011084:	019b      	lsls	r3, r3, #6
 8011086:	920e      	str	r2, [sp, #56]	; 0x38
 8011088:	930f      	str	r3, [sp, #60]	; 0x3c
 801108a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801108c:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8011090:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011094:	2b15      	cmp	r3, #21
 8011096:	931f      	str	r3, [sp, #124]	; 0x7c
 8011098:	921c      	str	r2, [sp, #112]	; 0x70
 801109a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801109c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80110a0:	6812      	ldr	r2, [r2, #0]
 80110a2:	9121      	str	r1, [sp, #132]	; 0x84
 80110a4:	9222      	str	r2, [sp, #136]	; 0x88
 80110a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80110a8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80110ac:	6812      	ldr	r2, [r2, #0]
 80110ae:	9123      	str	r1, [sp, #140]	; 0x8c
 80110b0:	9224      	str	r2, [sp, #144]	; 0x90
 80110b2:	f300 851b 	bgt.w	8011aec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb68>
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	bfcc      	ite	gt
 80110ba:	2300      	movgt	r3, #0
 80110bc:	2301      	movle	r3, #1
 80110be:	425b      	negs	r3, r3
 80110c0:	9318      	str	r3, [sp, #96]	; 0x60
 80110c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80110c4:	2b15      	cmp	r3, #21
 80110c6:	f300 84a3 	bgt.w	8011a10 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa8c>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	bfcc      	ite	gt
 80110ce:	2300      	movgt	r3, #0
 80110d0:	2301      	movle	r3, #1
 80110d2:	425b      	negs	r3, r3
 80110d4:	9319      	str	r3, [sp, #100]	; 0x64
 80110d6:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 849f 	beq.w	8011a1c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa98>
 80110de:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f040 84a9 	bne.w	8011a38 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab4>
 80110e6:	461c      	mov	r4, r3
 80110e8:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80110ea:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80110ee:	18a2      	adds	r2, r4, r2
 80110f0:	921a      	str	r2, [sp, #104]	; 0x68
 80110f2:	680a      	ldr	r2, [r1, #0]
 80110f4:	4413      	add	r3, r2
 80110f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80110f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 81f3 	beq.w	80114e6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 8011100:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011102:	2301      	movs	r3, #1
 8011104:	3a02      	subs	r2, #2
 8011106:	fa03 f202 	lsl.w	r2, r3, r2
 801110a:	922a      	str	r2, [sp, #168]	; 0xa8
 801110c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801110e:	3a02      	subs	r2, #2
 8011110:	4093      	lsls	r3, r2
 8011112:	932b      	str	r3, [sp, #172]	; 0xac
 8011114:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011116:	f023 030f 	bic.w	r3, r3, #15
 801111a:	3314      	adds	r3, #20
 801111c:	9312      	str	r3, [sp, #72]	; 0x48
 801111e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011120:	932c      	str	r3, [sp, #176]	; 0xb0
 8011122:	9304      	str	r3, [sp, #16]
 8011124:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011126:	9325      	str	r3, [sp, #148]	; 0x94
 8011128:	2300      	movs	r3, #0
 801112a:	9333      	str	r3, [sp, #204]	; 0xcc
 801112c:	9b06      	ldr	r3, [sp, #24]
 801112e:	3b04      	subs	r3, #4
 8011130:	9310      	str	r3, [sp, #64]	; 0x40
 8011132:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	9338      	str	r3, [sp, #224]	; 0xe0
 801113a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801113c:	2b00      	cmp	r3, #0
 801113e:	f340 81c3 	ble.w	80114c8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x544>
 8011142:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011144:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011146:	3301      	adds	r3, #1
 8011148:	18cb      	adds	r3, r1, r3
 801114a:	9314      	str	r3, [sp, #80]	; 0x50
 801114c:	1c4b      	adds	r3, r1, #1
 801114e:	9315      	str	r3, [sp, #84]	; 0x54
 8011150:	9b07      	ldr	r3, [sp, #28]
 8011152:	4413      	add	r3, r2
 8011154:	9316      	str	r3, [sp, #88]	; 0x58
 8011156:	2300      	movs	r3, #0
 8011158:	9317      	str	r3, [sp, #92]	; 0x5c
 801115a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 82ee 	beq.w	801173e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ba>
 8011162:	9b06      	ldr	r3, [sp, #24]
 8011164:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8011168:	3b03      	subs	r3, #3
 801116a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801116c:	4665      	mov	r5, ip
 801116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011170:	4693      	mov	fp, r2
 8011172:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011174:	9304      	str	r3, [sp, #16]
 8011176:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8011178:	9303      	str	r3, [sp, #12]
 801117a:	2300      	movs	r3, #0
 801117c:	9305      	str	r3, [sp, #20]
 801117e:	9907      	ldr	r1, [sp, #28]
 8011180:	9b04      	ldr	r3, [sp, #16]
 8011182:	1a5f      	subs	r7, r3, r1
 8011184:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011186:	2900      	cmp	r1, #0
 8011188:	f340 826d 	ble.w	8011666 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e2>
 801118c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801118e:	1d1c      	adds	r4, r3, #4
 8011190:	9803      	ldr	r0, [sp, #12]
 8011192:	18cb      	adds	r3, r1, r3
 8011194:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011198:	9708      	str	r7, [sp, #32]
 801119a:	9302      	str	r3, [sp, #8]
 801119c:	f85a 6004 	ldr.w	r6, [sl, r4]
 80111a0:	eb0a 0704 	add.w	r7, sl, r4
 80111a4:	fa2f f186 	sxtb16	r1, r6
 80111a8:	6803      	ldr	r3, [r0, #0]
 80111aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80111ae:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80111b2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80111b6:	fa2f f696 	sxtb16	r6, r6, ror #8
 80111ba:	fb21 2203 	smlad	r2, r1, r3, r2
 80111be:	fb26 2208 	smlad	r2, r6, r8, r2
 80111c2:	fb21 c109 	smlad	r1, r1, r9, ip
 80111c6:	fb26 110e 	smlad	r1, r6, lr, r1
 80111ca:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80111ce:	fa2f fc86 	sxtb16	ip, r6
 80111d2:	fa2f f696 	sxtb16	r6, r6, ror #8
 80111d6:	fb2c b303 	smlad	r3, ip, r3, fp
 80111da:	fb2c 5509 	smlad	r5, ip, r9, r5
 80111de:	fb26 3308 	smlad	r3, r6, r8, r3
 80111e2:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80111e6:	f8d0 b014 	ldr.w	fp, [r0, #20]
 80111ea:	fb26 5e0e 	smlad	lr, r6, lr, r5
 80111ee:	687d      	ldr	r5, [r7, #4]
 80111f0:	f8d0 c018 	ldr.w	ip, [r0, #24]
 80111f4:	fa2f f685 	sxtb16	r6, r5
 80111f8:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80111fc:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011200:	fb26 2208 	smlad	r2, r6, r8, r2
 8011204:	fb25 220b 	smlad	r2, r5, fp, r2
 8011208:	fb26 160c 	smlad	r6, r6, ip, r1
 801120c:	fb25 6609 	smlad	r6, r5, r9, r6
 8011210:	6821      	ldr	r1, [r4, #0]
 8011212:	fa2f f581 	sxtb16	r5, r1
 8011216:	fa2f f191 	sxtb16	r1, r1, ror #8
 801121a:	fb25 3808 	smlad	r8, r5, r8, r3
 801121e:	fb25 ee0c 	smlad	lr, r5, ip, lr
 8011222:	fb21 880b 	smlad	r8, r1, fp, r8
 8011226:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801122a:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 801122e:	fb21 e909 	smlad	r9, r1, r9, lr
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
 8011238:	fa2f f583 	sxtb16	r5, r3
 801123c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801123e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8011242:	fb25 220b 	smlad	r2, r5, fp, r2
 8011246:	fb23 220c 	smlad	r2, r3, ip, r2
 801124a:	fb25 650e 	smlad	r5, r5, lr, r6
 801124e:	fb23 5301 	smlad	r3, r3, r1, r5
 8011252:	6866      	ldr	r6, [r4, #4]
 8011254:	fa2f f586 	sxtb16	r5, r6
 8011258:	fa2f f696 	sxtb16	r6, r6, ror #8
 801125c:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8011260:	fb25 990e 	smlad	r9, r5, lr, r9
 8011264:	fb26 b80c 	smlad	r8, r6, ip, fp
 8011268:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
 801126c:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 8011270:	fb26 9101 	smlad	r1, r6, r1, r9
 8011274:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8011278:	3040      	adds	r0, #64	; 0x40
 801127a:	fa2f f58c 	sxtb16	r5, ip
 801127e:	f850 9c08 	ldr.w	r9, [r0, #-8]
 8011282:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011286:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801128a:	fb25 220e 	smlad	r2, r5, lr, r2
 801128e:	fb2c 220b 	smlad	r2, ip, fp, r2
 8011292:	fb25 3309 	smlad	r3, r5, r9, r3
 8011296:	fb2c 3c07 	smlad	ip, ip, r7, r3
 801129a:	68a5      	ldr	r5, [r4, #8]
 801129c:	fa2f f385 	sxtb16	r3, r5
 80112a0:	fa2f f595 	sxtb16	r5, r5, ror #8
 80112a4:	fb23 880e 	smlad	r8, r3, lr, r8
 80112a8:	fb23 1109 	smlad	r1, r3, r9, r1
 80112ac:	fb25 8b0b 	smlad	fp, r5, fp, r8
 80112b0:	fb25 1507 	smlad	r5, r5, r7, r1
 80112b4:	3410      	adds	r4, #16
 80112b6:	9b02      	ldr	r3, [sp, #8]
 80112b8:	429c      	cmp	r4, r3
 80112ba:	f47f af6f 	bne.w	801119c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x218>
 80112be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112c0:	9903      	ldr	r1, [sp, #12]
 80112c2:	9f08      	ldr	r7, [sp, #32]
 80112c4:	469a      	mov	sl, r3
 80112c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80112c8:	441f      	add	r7, r3
 80112ca:	4401      	add	r1, r0
 80112cc:	9103      	str	r1, [sp, #12]
 80112ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112d0:	459a      	cmp	sl, r3
 80112d2:	f280 81c6 	bge.w	8011662 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6de>
 80112d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112d8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80112dc:	eba3 030a 	sub.w	r3, r3, sl
 80112e0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80112e4:	089b      	lsrs	r3, r3, #2
 80112e6:	4619      	mov	r1, r3
 80112e8:	9308      	str	r3, [sp, #32]
 80112ea:	9b03      	ldr	r3, [sp, #12]
 80112ec:	3101      	adds	r1, #1
 80112ee:	eb07 0981 	add.w	r9, r7, r1, lsl #2
 80112f2:	9102      	str	r1, [sp, #8]
 80112f4:	f857 1b04 	ldr.w	r1, [r7], #4
 80112f8:	3310      	adds	r3, #16
 80112fa:	fa2f f081 	sxtb16	r0, r1
 80112fe:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8011302:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8011306:	f853 ec08 	ldr.w	lr, [r3, #-8]
 801130a:	f853 4c04 	ldr.w	r4, [r3, #-4]
 801130e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8011312:	fb20 2208 	smlad	r2, r0, r8, r2
 8011316:	fb21 2206 	smlad	r2, r1, r6, r2
 801131a:	fb20 cc0e 	smlad	ip, r0, lr, ip
 801131e:	fb21 cc04 	smlad	ip, r1, r4, ip
 8011322:	f857 100a 	ldr.w	r1, [r7, sl]
 8011326:	fa2f f081 	sxtb16	r0, r1
 801132a:	fa2f f191 	sxtb16	r1, r1, ror #8
 801132e:	fb20 bb08 	smlad	fp, r0, r8, fp
 8011332:	fb20 550e 	smlad	r5, r0, lr, r5
 8011336:	fb21 bb06 	smlad	fp, r1, r6, fp
 801133a:	fb21 5504 	smlad	r5, r1, r4, r5
 801133e:	454f      	cmp	r7, r9
 8011340:	d1d8      	bne.n	80112f4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x370>
 8011342:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011346:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 801134a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801134e:	9908      	ldr	r1, [sp, #32]
 8011350:	9303      	str	r3, [sp, #12]
 8011352:	f10a 0304 	add.w	r3, sl, #4
 8011356:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 801135a:	9e06      	ldr	r6, [sp, #24]
 801135c:	4556      	cmp	r6, sl
 801135e:	dd58      	ble.n	8011412 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x48e>
 8011360:	9c03      	ldr	r4, [sp, #12]
 8011362:	f999 3000 	ldrsb.w	r3, [r9]
 8011366:	f9b4 0000 	ldrsh.w	r0, [r4]
 801136a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801136e:	9f07      	ldr	r7, [sp, #28]
 8011370:	fb10 2203 	smlabb	r2, r0, r3, r2
 8011374:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8011378:	f919 3007 	ldrsb.w	r3, [r9, r7]
 801137c:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8011380:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011384:	f10a 0301 	add.w	r3, sl, #1
 8011388:	42b3      	cmp	r3, r6
 801138a:	da3b      	bge.n	8011404 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 801138c:	eb09 0307 	add.w	r3, r9, r7
 8011390:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011394:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011398:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801139c:	fb11 5503 	smlabb	r5, r1, r3, r5
 80113a0:	fb10 bb03 	smlabb	fp, r0, r3, fp
 80113a4:	f999 3001 	ldrsb.w	r3, [r9, #1]
 80113a8:	fb11 cc03 	smlabb	ip, r1, r3, ip
 80113ac:	f109 0102 	add.w	r1, r9, #2
 80113b0:	fb10 2203 	smlabb	r2, r0, r3, r2
 80113b4:	f10a 0302 	add.w	r3, sl, #2
 80113b8:	42b3      	cmp	r3, r6
 80113ba:	da23      	bge.n	8011404 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 80113bc:	57cb      	ldrsb	r3, [r1, r7]
 80113be:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80113c2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80113c6:	fb10 bb03 	smlabb	fp, r0, r3, fp
 80113ca:	fb11 5503 	smlabb	r5, r1, r3, r5
 80113ce:	f999 3002 	ldrsb.w	r3, [r9, #2]
 80113d2:	fb11 cc03 	smlabb	ip, r1, r3, ip
 80113d6:	f109 0103 	add.w	r1, r9, #3
 80113da:	fb10 2203 	smlabb	r2, r0, r3, r2
 80113de:	f10a 0303 	add.w	r3, sl, #3
 80113e2:	42b3      	cmp	r3, r6
 80113e4:	da0e      	bge.n	8011404 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 80113e6:	57cb      	ldrsb	r3, [r1, r7]
 80113e8:	f999 0003 	ldrsb.w	r0, [r9, #3]
 80113ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80113f0:	fb11 2200 	smlabb	r2, r1, r0, r2
 80113f4:	fb11 bb03 	smlabb	fp, r1, r3, fp
 80113f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113fc:	fb11 cc00 	smlabb	ip, r1, r0, ip
 8011400:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011404:	9b06      	ldr	r3, [sp, #24]
 8011406:	9903      	ldr	r1, [sp, #12]
 8011408:	eba3 030a 	sub.w	r3, r3, sl
 801140c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011410:	9303      	str	r3, [sp, #12]
 8011412:	9904      	ldr	r1, [sp, #16]
 8011414:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011416:	9b05      	ldr	r3, [sp, #20]
 8011418:	4401      	add	r1, r0
 801141a:	3301      	adds	r3, #1
 801141c:	9104      	str	r1, [sp, #16]
 801141e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011420:	9305      	str	r3, [sp, #20]
 8011422:	4299      	cmp	r1, r3
 8011424:	f47f aeab 	bne.w	801117e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1fa>
 8011428:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801142a:	2b00      	cmp	r3, #0
 801142c:	f040 8139 	bne.w	80116a2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x71e>
 8011430:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011432:	0052      	lsls	r2, r2, #1
 8011434:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011436:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801143a:	fb52 1203 	smmla	r2, r2, r3, r1
 801143e:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8011442:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011444:	410a      	asrs	r2, r1
 8011446:	f302 0307 	ssat	r3, #8, r2
 801144a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801144c:	fa4b fb01 	asr.w	fp, fp, r1
 8011450:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011454:	f30b 0307 	ssat	r3, #8, fp
 8011458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801145a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801145e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011460:	2b00      	cmp	r3, #0
 8011462:	f040 8103 	bne.w	801166c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e8>
 8011466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011468:	ea4f 084c 	mov.w	r8, ip, lsl #1
 801146c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801146e:	006c      	lsls	r4, r5, #1
 8011470:	fb58 2803 	smmla	r8, r8, r3, r2
 8011474:	fb54 2403 	smmla	r4, r4, r3, r2
 8011478:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801147a:	fa48 f802 	asr.w	r8, r8, r2
 801147e:	f308 0307 	ssat	r3, #8, r8
 8011482:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011484:	4114      	asrs	r4, r2
 8011486:	700b      	strb	r3, [r1, #0]
 8011488:	f304 0307 	ssat	r3, #8, r4
 801148c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801148e:	7013      	strb	r3, [r2, #0]
 8011490:	460a      	mov	r2, r1
 8011492:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011496:	440a      	add	r2, r1
 8011498:	3302      	adds	r3, #2
 801149a:	9215      	str	r2, [sp, #84]	; 0x54
 801149c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801149e:	9317      	str	r3, [sp, #92]	; 0x5c
 80114a0:	440a      	add	r2, r1
 80114a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80114a4:	9214      	str	r2, [sp, #80]	; 0x50
 80114a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80114a8:	440a      	add	r2, r1
 80114aa:	9216      	str	r2, [sp, #88]	; 0x58
 80114ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80114ae:	4293      	cmp	r3, r2
 80114b0:	f6ff ae53 	blt.w	801115a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1d6>
 80114b4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80114b6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80114b8:	9940      	ldr	r1, [sp, #256]	; 0x100
 80114ba:	4413      	add	r3, r2
 80114bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80114be:	440a      	add	r2, r1
 80114c0:	9225      	str	r2, [sp, #148]	; 0x94
 80114c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80114c4:	18d3      	adds	r3, r2, r3
 80114c6:	9304      	str	r3, [sp, #16]
 80114c8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f040 813d 	bne.w	801174a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7c6>
 80114d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80114d2:	993c      	ldr	r1, [sp, #240]	; 0xf0
 80114d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80114d6:	440a      	add	r2, r1
 80114d8:	3301      	adds	r3, #1
 80114da:	922c      	str	r2, [sp, #176]	; 0xb0
 80114dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80114de:	9333      	str	r3, [sp, #204]	; 0xcc
 80114e0:	4293      	cmp	r3, r2
 80114e2:	f47f ae26 	bne.w	8011132 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1ae>
 80114e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80114e8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80114ea:	4413      	add	r3, r2
 80114ec:	932f      	str	r3, [sp, #188]	; 0xbc
 80114ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80114f0:	3302      	adds	r3, #2
 80114f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80114f4:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 80114f6:	b11b      	cbz	r3, 8011500 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57c>
 80114f8:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80114fa:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80114fc:	4413      	add	r3, r2
 80114fe:	935d      	str	r3, [sp, #372]	; 0x174
 8011500:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011502:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8011504:	3304      	adds	r3, #4
 8011506:	9329      	str	r3, [sp, #164]	; 0xa4
 8011508:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801150a:	3308      	adds	r3, #8
 801150c:	9326      	str	r3, [sp, #152]	; 0x98
 801150e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011510:	3308      	adds	r3, #8
 8011512:	9327      	str	r3, [sp, #156]	; 0x9c
 8011514:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011516:	3308      	adds	r3, #8
 8011518:	9330      	str	r3, [sp, #192]	; 0xc0
 801151a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801151c:	4293      	cmp	r3, r2
 801151e:	f47f adb4 	bne.w	801108a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x106>
 8011522:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8011524:	e9dd 2136 	ldrd	r2, r1, [sp, #216]	; 0xd8
 8011528:	fb01 3302 	mla	r3, r1, r2, r3
 801152c:	9331      	str	r3, [sp, #196]	; 0xc4
 801152e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011530:	07db      	lsls	r3, r3, #31
 8011532:	f140 8092 	bpl.w	801165a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011536:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011538:	2b00      	cmp	r3, #0
 801153a:	f000 808e 	beq.w	801165a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 801153e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011540:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8011544:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011546:	4499      	add	r9, r3
 8011548:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801154a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801154e:	9307      	str	r3, [sp, #28]
 8011550:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8011552:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 8011556:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8011558:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 801155c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011560:	4413      	add	r3, r2
 8011562:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011564:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011568:	9308      	str	r3, [sp, #32]
 801156a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801156c:	2b00      	cmp	r3, #0
 801156e:	d074      	beq.n	801165a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8011570:	9953      	ldr	r1, [sp, #332]	; 0x14c
 8011572:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8011574:	9e5b      	ldr	r6, [sp, #364]	; 0x16c
 8011576:	fb01 f202 	mul.w	r2, r1, r2
 801157a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801157c:	920b      	str	r2, [sp, #44]	; 0x2c
 801157e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011580:	fb01 f202 	mul.w	r2, r1, r2
 8011584:	9906      	ldr	r1, [sp, #24]
 8011586:	9209      	str	r2, [sp, #36]	; 0x24
 8011588:	468e      	mov	lr, r1
 801158a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801158c:	440a      	add	r2, r1
 801158e:	4693      	mov	fp, r2
 8011590:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011592:	fb02 f303 	mul.w	r3, r2, r3
 8011596:	9305      	str	r3, [sp, #20]
 8011598:	2300      	movs	r3, #0
 801159a:	9303      	str	r3, [sp, #12]
 801159c:	2300      	movs	r3, #0
 801159e:	f8cd b008 	str.w	fp, [sp, #8]
 80115a2:	f8cd b018 	str.w	fp, [sp, #24]
 80115a6:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 80115aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80115ae:	9304      	str	r3, [sp, #16]
 80115b0:	9b07      	ldr	r3, [sp, #28]
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	f1bb 0f00 	cmp.w	fp, #0
 80115b8:	d01e      	beq.n	80115f8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x674>
 80115ba:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80115be:	2700      	movs	r7, #0
 80115c0:	9d02      	ldr	r5, [sp, #8]
 80115c2:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 80115c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80115ca:	f1be 0f00 	cmp.w	lr, #0
 80115ce:	eba5 020e 	sub.w	r2, r5, lr
 80115d2:	dd0b      	ble.n	80115ec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 80115d4:	f10c 30ff 	add.w	r0, ip, #4294967295
 80115d8:	f912 3b01 	ldrsb.w	r3, [r2], #1
 80115dc:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 80115e0:	1b9b      	subs	r3, r3, r6
 80115e2:	42aa      	cmp	r2, r5
 80115e4:	fb04 1103 	mla	r1, r4, r3, r1
 80115e8:	d1f6      	bne.n	80115d8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x654>
 80115ea:	44f4      	add	ip, lr
 80115ec:	3701      	adds	r7, #1
 80115ee:	4445      	add	r5, r8
 80115f0:	45bb      	cmp	fp, r7
 80115f2:	d1ea      	bne.n	80115ca <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x646>
 80115f4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80115f8:	9b08      	ldr	r3, [sp, #32]
 80115fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80115fe:	2815      	cmp	r0, #21
 8011600:	f340 828f 	ble.w	8011b22 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb9e>
 8011604:	1e83      	subs	r3, r0, #2
 8011606:	1e42      	subs	r2, r0, #1
 8011608:	2001      	movs	r0, #1
 801160a:	4098      	lsls	r0, r3
 801160c:	f8da 3000 	ldr.w	r3, [sl]
 8011610:	fb51 0303 	smmla	r3, r1, r3, r0
 8011614:	fa43 f202 	asr.w	r2, r3, r2
 8011618:	f8d9 3000 	ldr.w	r3, [r9]
 801161c:	4413      	add	r3, r2
 801161e:	f303 0307 	ssat	r3, #8, r3
 8011622:	f888 3000 	strb.w	r3, [r8]
 8011626:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8011628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801162a:	4490      	add	r8, r2
 801162c:	9a02      	ldr	r2, [sp, #8]
 801162e:	9b04      	ldr	r3, [sp, #16]
 8011630:	440a      	add	r2, r1
 8011632:	3301      	adds	r3, #1
 8011634:	9202      	str	r2, [sp, #8]
 8011636:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8011638:	9304      	str	r3, [sp, #16]
 801163a:	4293      	cmp	r3, r2
 801163c:	d1b8      	bne.n	80115b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 801163e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011640:	9905      	ldr	r1, [sp, #20]
 8011642:	9b03      	ldr	r3, [sp, #12]
 8011644:	440a      	add	r2, r1
 8011646:	f8dd b018 	ldr.w	fp, [sp, #24]
 801164a:	3301      	adds	r3, #1
 801164c:	9228      	str	r2, [sp, #160]	; 0xa0
 801164e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011650:	9303      	str	r3, [sp, #12]
 8011652:	4493      	add	fp, r2
 8011654:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011656:	4293      	cmp	r3, r2
 8011658:	d1a0      	bne.n	801159c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x618>
 801165a:	2000      	movs	r0, #0
 801165c:	b047      	add	sp, #284	; 0x11c
 801165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011662:	46b9      	mov	r9, r7
 8011664:	e679      	b.n	801135a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3d6>
 8011666:	f04f 0a00 	mov.w	sl, #0
 801166a:	e630      	b.n	80112ce <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x34a>
 801166c:	3301      	adds	r3, #1
 801166e:	d034      	beq.n	80116da <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x756>
 8011670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011672:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011674:	fb5c 2803 	smmla	r8, ip, r3, r2
 8011678:	fb55 2403 	smmla	r4, r5, r3, r2
 801167c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801167e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011680:	3b01      	subs	r3, #1
 8011682:	fa48 f203 	asr.w	r2, r8, r3
 8011686:	440a      	add	r2, r1
 8011688:	f302 0207 	ssat	r2, #8, r2
 801168c:	fa44 f303 	asr.w	r3, r4, r3
 8011690:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011692:	440b      	add	r3, r1
 8011694:	7002      	strb	r2, [r0, #0]
 8011696:	f303 0307 	ssat	r3, #8, r3
 801169a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801169c:	7013      	strb	r3, [r2, #0]
 801169e:	4602      	mov	r2, r0
 80116a0:	e6f7      	b.n	8011492 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x50e>
 80116a2:	3301      	adds	r3, #1
 80116a4:	d02e      	beq.n	8011704 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x780>
 80116a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116a8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80116aa:	fb52 1203 	smmla	r2, r2, r3, r1
 80116ae:	fb5b 1b03 	smmla	fp, fp, r3, r1
 80116b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116b4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80116b6:	3b01      	subs	r3, #1
 80116b8:	411a      	asrs	r2, r3
 80116ba:	440a      	add	r2, r1
 80116bc:	f302 0207 	ssat	r2, #8, r2
 80116c0:	fa4b fb03 	asr.w	fp, fp, r3
 80116c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116c6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80116ca:	eb0b 0301 	add.w	r3, fp, r1
 80116ce:	f303 0307 	ssat	r3, #8, r3
 80116d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80116d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80116d8:	e6c1      	b.n	801145e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 80116da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80116dc:	f1c3 0301 	rsb	r3, r3, #1
 80116e0:	fa0c f203 	lsl.w	r2, ip, r3
 80116e4:	f302 021f 	ssat	r2, #32, r2
 80116e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80116ea:	fb52 f211 	smmulr	r2, r2, r1
 80116ee:	fa05 f303 	lsl.w	r3, r5, r3
 80116f2:	f303 031f 	ssat	r3, #32, r3
 80116f6:	fb53 f311 	smmulr	r3, r3, r1
 80116fa:	9924      	ldr	r1, [sp, #144]	; 0x90
 80116fc:	440a      	add	r2, r1
 80116fe:	f302 0207 	ssat	r2, #8, r2
 8011702:	e7c5      	b.n	8011690 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70c>
 8011704:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011706:	f1c3 0301 	rsb	r3, r3, #1
 801170a:	409a      	lsls	r2, r3
 801170c:	f302 021f 	ssat	r2, #32, r2
 8011710:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011712:	fb52 f211 	smmulr	r2, r2, r1
 8011716:	fa0b f303 	lsl.w	r3, fp, r3
 801171a:	f303 031f 	ssat	r3, #32, r3
 801171e:	fb53 f311 	smmulr	r3, r3, r1
 8011722:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011724:	440a      	add	r2, r1
 8011726:	f302 0207 	ssat	r2, #8, r2
 801172a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801172c:	440b      	add	r3, r1
 801172e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8011732:	f303 0307 	ssat	r3, #8, r3
 8011736:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011738:	f802 3c01 	strb.w	r3, [r2, #-1]
 801173c:	e68f      	b.n	801145e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 801173e:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8011742:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011744:	4665      	mov	r5, ip
 8011746:	4693      	mov	fp, r2
 8011748:	e66e      	b.n	8011428 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a4>
 801174a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801174c:	2b01      	cmp	r3, #1
 801174e:	f000 8143 	beq.w	80119d8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa54>
 8011752:	9b04      	ldr	r3, [sp, #16]
 8011754:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011756:	4413      	add	r3, r2
 8011758:	9304      	str	r3, [sp, #16]
 801175a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801175c:	2b00      	cmp	r3, #0
 801175e:	f000 8141 	beq.w	80119e4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa60>
 8011762:	9b06      	ldr	r3, [sp, #24]
 8011764:	f8dd 9174 	ldr.w	r9, [sp, #372]	; 0x174
 8011768:	3b03      	subs	r3, #3
 801176a:	9308      	str	r3, [sp, #32]
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011772:	9302      	str	r3, [sp, #8]
 8011774:	2300      	movs	r3, #0
 8011776:	9303      	str	r3, [sp, #12]
 8011778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801177a:	9a02      	ldr	r2, [sp, #8]
 801177c:	2b00      	cmp	r3, #0
 801177e:	4611      	mov	r1, r2
 8011780:	f340 8100 	ble.w	8011984 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa00>
 8011784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011786:	464b      	mov	r3, r9
 8011788:	188c      	adds	r4, r1, r2
 801178a:	6808      	ldr	r0, [r1, #0]
 801178c:	681d      	ldr	r5, [r3, #0]
 801178e:	fa2f f280 	sxtb16	r2, r0
 8011792:	fa2f f090 	sxtb16	r0, r0, ror #8
 8011796:	fb22 a505 	smlad	r5, r2, r5, sl
 801179a:	685e      	ldr	r6, [r3, #4]
 801179c:	fb20 5706 	smlad	r7, r0, r6, r5
 80117a0:	689d      	ldr	r5, [r3, #8]
 80117a2:	fb22 b205 	smlad	r2, r2, r5, fp
 80117a6:	68dd      	ldr	r5, [r3, #12]
 80117a8:	fb20 2005 	smlad	r0, r0, r5, r2
 80117ac:	684a      	ldr	r2, [r1, #4]
 80117ae:	691e      	ldr	r6, [r3, #16]
 80117b0:	fa2f f582 	sxtb16	r5, r2
 80117b4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80117b8:	fb25 7606 	smlad	r6, r5, r6, r7
 80117bc:	695f      	ldr	r7, [r3, #20]
 80117be:	fb22 6607 	smlad	r6, r2, r7, r6
 80117c2:	699f      	ldr	r7, [r3, #24]
 80117c4:	fb25 0007 	smlad	r0, r5, r7, r0
 80117c8:	69dd      	ldr	r5, [r3, #28]
 80117ca:	fb22 0205 	smlad	r2, r2, r5, r0
 80117ce:	688f      	ldr	r7, [r1, #8]
 80117d0:	6a1d      	ldr	r5, [r3, #32]
 80117d2:	fa2f f087 	sxtb16	r0, r7
 80117d6:	fa2f f797 	sxtb16	r7, r7, ror #8
 80117da:	fb20 6505 	smlad	r5, r0, r5, r6
 80117de:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80117e0:	fb27 5606 	smlad	r6, r7, r6, r5
 80117e4:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 80117e8:	fb20 200b 	smlad	r0, r0, fp, r2
 80117ec:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 80117f0:	fb27 000b 	smlad	r0, r7, fp, r0
 80117f4:	68ca      	ldr	r2, [r1, #12]
 80117f6:	3340      	adds	r3, #64	; 0x40
 80117f8:	fa2f fb82 	sxtb16	fp, r2
 80117fc:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8011800:	3110      	adds	r1, #16
 8011802:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8011806:	f853 cc08 	ldr.w	ip, [r3, #-8]
 801180a:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801180e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011812:	fb2b 6505 	smlad	r5, fp, r5, r6
 8011816:	fb22 5a0a 	smlad	sl, r2, sl, r5
 801181a:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 801181e:	fb22 bb07 	smlad	fp, r2, r7, fp
 8011822:	42a1      	cmp	r1, r4
 8011824:	d1b1      	bne.n	801178a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x806>
 8011826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011828:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 801182c:	4499      	add	r9, r3
 801182e:	9b08      	ldr	r3, [sp, #32]
 8011830:	459e      	cmp	lr, r3
 8011832:	f280 80a5 	bge.w	8011980 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9fc>
 8011836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011838:	4649      	mov	r1, r9
 801183a:	eba3 080e 	sub.w	r8, r3, lr
 801183e:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8011842:	f108 0301 	add.w	r3, r8, #1
 8011846:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 801184a:	9305      	str	r3, [sp, #20]
 801184c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011850:	3110      	adds	r1, #16
 8011852:	fa2f f283 	sxtb16	r2, r3
 8011856:	f851 0c10 	ldr.w	r0, [r1, #-16]
 801185a:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 801185e:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8011862:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8011866:	fa2f f393 	sxtb16	r3, r3, ror #8
 801186a:	fb22 a000 	smlad	r0, r2, r0, sl
 801186e:	fb23 0a07 	smlad	sl, r3, r7, r0
 8011872:	fb22 b206 	smlad	r2, r2, r6, fp
 8011876:	fb23 2b05 	smlad	fp, r3, r5, r2
 801187a:	4564      	cmp	r4, ip
 801187c:	d1e6      	bne.n	801184c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c8>
 801187e:	9b05      	ldr	r3, [sp, #20]
 8011880:	f10e 0e04 	add.w	lr, lr, #4
 8011884:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8011888:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 801188c:	9906      	ldr	r1, [sp, #24]
 801188e:	4571      	cmp	r1, lr
 8011890:	dd38      	ble.n	8011904 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x980>
 8011892:	f99c 3000 	ldrsb.w	r3, [ip]
 8011896:	f8b9 2000 	ldrh.w	r2, [r9]
 801189a:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801189e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80118a2:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80118a6:	f10e 0301 	add.w	r3, lr, #1
 80118aa:	4299      	cmp	r1, r3
 80118ac:	dd25      	ble.n	80118fa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 80118ae:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 80118b2:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80118b6:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80118ba:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80118be:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80118c2:	f10e 0302 	add.w	r3, lr, #2
 80118c6:	4299      	cmp	r1, r3
 80118c8:	dd17      	ble.n	80118fa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 80118ca:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 80118ce:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80118d2:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80118d6:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 80118da:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80118de:	f10e 0303 	add.w	r3, lr, #3
 80118e2:	4299      	cmp	r1, r3
 80118e4:	dd09      	ble.n	80118fa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 80118e6:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 80118ea:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80118ee:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80118f2:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80118f6:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80118fa:	9b06      	ldr	r3, [sp, #24]
 80118fc:	eba3 0e0e 	sub.w	lr, r3, lr
 8011900:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8011904:	9a02      	ldr	r2, [sp, #8]
 8011906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011908:	9b03      	ldr	r3, [sp, #12]
 801190a:	440a      	add	r2, r1
 801190c:	3301      	adds	r3, #1
 801190e:	9202      	str	r2, [sp, #8]
 8011910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011912:	9303      	str	r3, [sp, #12]
 8011914:	429a      	cmp	r2, r3
 8011916:	f47f af2f 	bne.w	8011778 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f4>
 801191a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801191c:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8011920:	2915      	cmp	r1, #21
 8011922:	dd45      	ble.n	80119b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa2c>
 8011924:	1e8b      	subs	r3, r1, #2
 8011926:	2201      	movs	r2, #1
 8011928:	3901      	subs	r1, #1
 801192a:	409a      	lsls	r2, r3
 801192c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801192e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011932:	fb5a 2303 	smmla	r3, sl, r3, r2
 8011936:	fa43 f101 	asr.w	r1, r3, r1
 801193a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801193c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011940:	440b      	add	r3, r1
 8011942:	f303 0307 	ssat	r3, #8, r3
 8011946:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011948:	7013      	strb	r3, [r2, #0]
 801194a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801194c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011950:	2915      	cmp	r1, #21
 8011952:	dd1b      	ble.n	801198c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa08>
 8011954:	1e8b      	subs	r3, r1, #2
 8011956:	2201      	movs	r2, #1
 8011958:	3901      	subs	r1, #1
 801195a:	409a      	lsls	r2, r3
 801195c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	fb5b 2303 	smmla	r3, fp, r3, r2
 8011964:	fa43 f101 	asr.w	r1, r3, r1
 8011968:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	440b      	add	r3, r1
 801196e:	f303 0307 	ssat	r3, #8, r3
 8011972:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011974:	7053      	strb	r3, [r2, #1]
 8011976:	4613      	mov	r3, r2
 8011978:	9a52      	ldr	r2, [sp, #328]	; 0x148
 801197a:	4413      	add	r3, r2
 801197c:	9325      	str	r3, [sp, #148]	; 0x94
 801197e:	e5a7      	b.n	80114d0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x54c>
 8011980:	46a4      	mov	ip, r4
 8011982:	e783      	b.n	801188c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x908>
 8011984:	4614      	mov	r4, r2
 8011986:	f04f 0e00 	mov.w	lr, #0
 801198a:	e750      	b.n	801182e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8aa>
 801198c:	2900      	cmp	r1, #0
 801198e:	dd2c      	ble.n	80119ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa66>
 8011990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011992:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011996:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	6812      	ldr	r2, [r2, #0]
 801199c:	fb5b 2b03 	smmla	fp, fp, r3, r2
 80119a0:	fa4b f301 	asr.w	r3, fp, r1
 80119a4:	f303 0307 	ssat	r3, #8, r3
 80119a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80119aa:	7053      	strb	r3, [r2, #1]
 80119ac:	4613      	mov	r3, r2
 80119ae:	e7e3      	b.n	8011978 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 80119b0:	2900      	cmp	r1, #0
 80119b2:	f340 809f 	ble.w	8011af4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb70>
 80119b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80119b8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80119bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80119be:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80119c2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80119c6:	fb5a 2a03 	smmla	sl, sl, r3, r2
 80119ca:	fa4a f301 	asr.w	r3, sl, r1
 80119ce:	f303 0307 	ssat	r3, #8, r3
 80119d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80119d4:	7013      	strb	r3, [r2, #0]
 80119d6:	e7b8      	b.n	801194a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 80119d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80119da:	9304      	str	r3, [sp, #16]
 80119dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119de:	2b00      	cmp	r3, #0
 80119e0:	f47f aebf 	bne.w	8011762 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 80119e4:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80119e8:	e797      	b.n	801191a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 80119ea:	f1c1 0101 	rsb	r1, r1, #1
 80119ee:	fa0b f201 	lsl.w	r2, fp, r1
 80119f2:	f302 021f 	ssat	r2, #32, r2
 80119f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	fb52 f213 	smmulr	r2, r2, r3
 80119fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4413      	add	r3, r2
 8011a04:	f303 0307 	ssat	r3, #8, r3
 8011a08:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011a0a:	7053      	strb	r3, [r2, #1]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	e7b3      	b.n	8011978 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 8011a10:	2301      	movs	r3, #1
 8011a12:	9319      	str	r3, [sp, #100]	; 0x64
 8011a14:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f47f ab61 	bne.w	80110de <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x15a>
 8011a1c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011a1e:	9b06      	ldr	r3, [sp, #24]
 8011a20:	4601      	mov	r1, r0
 8011a22:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8011a28:	4421      	add	r1, r4
 8011a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2c:	f7fe fb66 	bl	80100fc <weights_2channels_prefetch>
 8011a30:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f43f ab57 	beq.w	80110e6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x162>
 8011a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d06e      	beq.n	8011b1c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb98>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	985d      	ldr	r0, [sp, #372]	; 0x174
 8011a42:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8011a44:	461c      	mov	r4, r3
 8011a46:	461e      	mov	r6, r3
 8011a48:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 8011a4a:	b33f      	cbz	r7, 8011a9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb18>
 8011a4c:	f100 0510 	add.w	r5, r0, #16
 8011a50:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 8011a54:	3f01      	subs	r7, #1
 8011a56:	f105 0510 	add.w	r5, r5, #16
 8011a5a:	eba4 0402 	sub.w	r4, r4, r2
 8011a5e:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 8011a62:	eba3 0302 	sub.w	r3, r3, r2
 8011a66:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 8011a6a:	eba4 0402 	sub.w	r4, r4, r2
 8011a6e:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 8011a72:	eba3 0302 	sub.w	r3, r3, r2
 8011a76:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 8011a7a:	eba4 0402 	sub.w	r4, r4, r2
 8011a7e:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 8011a82:	eba3 0302 	sub.w	r3, r3, r2
 8011a86:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 8011a8a:	eba4 0402 	sub.w	r4, r4, r2
 8011a8e:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 8011a92:	eba3 0302 	sub.w	r3, r3, r2
 8011a96:	d1db      	bne.n	8011a50 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 8011a98:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8011a9a:	4410      	add	r0, r2
 8011a9c:	b1d9      	cbz	r1, 8011ad6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb52>
 8011a9e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011aa2:	2901      	cmp	r1, #1
 8011aa4:	eba4 0402 	sub.w	r4, r4, r2
 8011aa8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011aac:	eba3 0302 	sub.w	r3, r3, r2
 8011ab0:	d00f      	beq.n	8011ad2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8011ab2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011ab6:	2902      	cmp	r1, #2
 8011ab8:	eba4 0402 	sub.w	r4, r4, r2
 8011abc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011ac0:	eba3 0302 	sub.w	r3, r3, r2
 8011ac4:	d005      	beq.n	8011ad2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8011ac6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011aca:	1aa4      	subs	r4, r4, r2
 8011acc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011ad0:	1a9b      	subs	r3, r3, r2
 8011ad2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8011ad4:	4410      	add	r0, r2
 8011ad6:	3601      	adds	r6, #1
 8011ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ada:	42b2      	cmp	r2, r6
 8011adc:	d1b4      	bne.n	8011a48 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac4>
 8011ade:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 8011ae0:	fb02 f404 	mul.w	r4, r2, r4
 8011ae4:	fb02 f303 	mul.w	r3, r2, r3
 8011ae8:	f7ff bafe 	b.w	80110e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8011aec:	2301      	movs	r3, #1
 8011aee:	9318      	str	r3, [sp, #96]	; 0x60
 8011af0:	f7ff bae7 	b.w	80110c2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x13e>
 8011af4:	f1c1 0101 	rsb	r1, r1, #1
 8011af8:	fa0a f201 	lsl.w	r2, sl, r1
 8011afc:	f302 021f 	ssat	r2, #32, r2
 8011b00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b02:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011b06:	fb52 f213 	smmulr	r2, r2, r3
 8011b0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011b0c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011b10:	4413      	add	r3, r2
 8011b12:	f303 0307 	ssat	r3, #8, r3
 8011b16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011b18:	7013      	strb	r3, [r2, #0]
 8011b1a:	e716      	b.n	801194a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8011b1c:	461c      	mov	r4, r3
 8011b1e:	f7ff bae3 	b.w	80110e8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8011b22:	2800      	cmp	r0, #0
 8011b24:	dd0c      	ble.n	8011b40 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbbc>
 8011b26:	0049      	lsls	r1, r1, #1
 8011b28:	f8da 3000 	ldr.w	r3, [sl]
 8011b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8011b30:	fb51 2303 	smmla	r3, r1, r3, r2
 8011b34:	4103      	asrs	r3, r0
 8011b36:	f303 0307 	ssat	r3, #8, r3
 8011b3a:	f888 3000 	strb.w	r3, [r8]
 8011b3e:	e572      	b.n	8011626 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>
 8011b40:	f1c0 0201 	rsb	r2, r0, #1
 8011b44:	fa01 f202 	lsl.w	r2, r1, r2
 8011b48:	f302 021f 	ssat	r2, #32, r2
 8011b4c:	f8da 3000 	ldr.w	r3, [sl]
 8011b50:	fb52 f213 	smmulr	r2, r2, r3
 8011b54:	f8d9 3000 	ldr.w	r3, [r9]
 8011b58:	4413      	add	r3, r2
 8011b5a:	f303 0307 	ssat	r3, #8, r3
 8011b5e:	f888 3000 	strb.w	r3, [r8]
 8011b62:	e560      	b.n	8011626 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>

08011b64 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>:
 8011b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	b0cd      	sub	sp, #308	; 0x134
 8011b6a:	469c      	mov	ip, r3
 8011b6c:	4688      	mov	r8, r1
 8011b6e:	4696      	mov	lr, r2
 8011b70:	931d      	str	r3, [sp, #116]	; 0x74
 8011b72:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 8011b76:	f8bd 5188 	ldrh.w	r5, [sp, #392]	; 0x188
 8011b7a:	9021      	str	r0, [sp, #132]	; 0x84
 8011b7c:	9325      	str	r3, [sp, #148]	; 0x94
 8011b7e:	f8bd 0184 	ldrh.w	r0, [sp, #388]	; 0x184
 8011b82:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011b84:	912f      	str	r1, [sp, #188]	; 0xbc
 8011b86:	900a      	str	r0, [sp, #40]	; 0x28
 8011b88:	fb03 f100 	mul.w	r1, r3, r0
 8011b8c:	f8bd 7168 	ldrh.w	r7, [sp, #360]	; 0x168
 8011b90:	fb05 f000 	mul.w	r0, r5, r0
 8011b94:	9249      	str	r2, [sp, #292]	; 0x124
 8011b96:	ee07 0a90 	vmov	s15, r0
 8011b9a:	9858      	ldr	r0, [sp, #352]	; 0x160
 8011b9c:	f8bd 216c 	ldrh.w	r2, [sp, #364]	; 0x16c
 8011ba0:	9516      	str	r5, [sp, #88]	; 0x58
 8011ba2:	974a      	str	r7, [sp, #296]	; 0x128
 8011ba4:	9239      	str	r2, [sp, #228]	; 0xe4
 8011ba6:	e9dd 4665 	ldrd	r4, r6, [sp, #404]	; 0x194
 8011baa:	2e00      	cmp	r6, #0
 8011bac:	bf18      	it	ne
 8011bae:	4634      	movne	r4, r6
 8011bb0:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 8011bb4:	2801      	cmp	r0, #1
 8011bb6:	9465      	str	r4, [sp, #404]	; 0x194
 8011bb8:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 8011bbc:	963b      	str	r6, [sp, #236]	; 0xec
 8011bbe:	943a      	str	r4, [sp, #232]	; 0xe8
 8011bc0:	f8bd 6180 	ldrh.w	r6, [sp, #384]	; 0x180
 8011bc4:	f8bd 4178 	ldrh.w	r4, [sp, #376]	; 0x178
 8011bc8:	964b      	str	r6, [sp, #300]	; 0x12c
 8011bca:	9430      	str	r4, [sp, #192]	; 0xc0
 8011bcc:	f340 82c7 	ble.w	801215e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5fa>
 8011bd0:	1e83      	subs	r3, r0, #2
 8011bd2:	fb01 f505 	mul.w	r5, r1, r5
 8011bd6:	1ea2      	subs	r2, r4, #2
 8011bd8:	085b      	lsrs	r3, r3, #1
 8011bda:	9531      	str	r5, [sp, #196]	; 0xc4
 8011bdc:	9d58      	ldr	r5, [sp, #352]	; 0x160
 8011bde:	0852      	lsrs	r2, r2, #1
 8011be0:	1c58      	adds	r0, r3, #1
 8011be2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011be4:	9038      	str	r0, [sp, #224]	; 0xe0
 8011be6:	3b10      	subs	r3, #16
 8011be8:	9859      	ldr	r0, [sp, #356]	; 0x164
 8011bea:	9347      	str	r3, [sp, #284]	; 0x11c
 8011bec:	091b      	lsrs	r3, r3, #4
 8011bee:	fb00 f007 	mul.w	r0, r0, r7
 8011bf2:	108f      	asrs	r7, r1, #2
 8011bf4:	f001 0103 	and.w	r1, r1, #3
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	9008      	str	r0, [sp, #32]
 8011bfc:	9134      	str	r1, [sp, #208]	; 0xd0
 8011bfe:	0069      	lsls	r1, r5, #1
 8011c00:	9741      	str	r7, [sp, #260]	; 0x104
 8011c02:	460d      	mov	r5, r1
 8011c04:	9146      	str	r1, [sp, #280]	; 0x118
 8011c06:	fb02 f100 	mul.w	r1, r2, r0
 8011c0a:	fb02 5505 	mla	r5, r2, r5, r5
 8011c0e:	9545      	str	r5, [sp, #276]	; 0x114
 8011c10:	004d      	lsls	r5, r1, #1
 8011c12:	9544      	str	r5, [sp, #272]	; 0x110
 8011c14:	f06f 0503 	mvn.w	r5, #3
 8011c18:	1a2d      	subs	r5, r5, r0
 8011c1a:	9513      	str	r5, [sp, #76]	; 0x4c
 8011c1c:	1f05      	subs	r5, r0, #4
 8011c1e:	9510      	str	r5, [sp, #64]	; 0x40
 8011c20:	1e65      	subs	r5, r4, #1
 8011c22:	9535      	str	r5, [sp, #212]	; 0xd4
 8011c24:	9d59      	ldr	r5, [sp, #356]	; 0x164
 8011c26:	3d0f      	subs	r5, #15
 8011c28:	950c      	str	r5, [sp, #48]	; 0x30
 8011c2a:	f004 0501 	and.w	r5, r4, #1
 8011c2e:	953e      	str	r5, [sp, #248]	; 0xf8
 8011c30:	0045      	lsls	r5, r0, #1
 8011c32:	9537      	str	r5, [sp, #220]	; 0xdc
 8011c34:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8011c36:	0068      	lsls	r0, r5, #1
 8011c38:	00ad      	lsls	r5, r5, #2
 8011c3a:	9036      	str	r0, [sp, #216]	; 0xd8
 8011c3c:	953f      	str	r5, [sp, #252]	; 0xfc
 8011c3e:	9d57      	ldr	r5, [sp, #348]	; 0x15c
 8011c40:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8011c42:	3502      	adds	r5, #2
 8011c44:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8011c48:	9520      	str	r5, [sp, #128]	; 0x80
 8011c4a:	9d56      	ldr	r5, [sp, #344]	; 0x158
 8011c4c:	9048      	str	r0, [sp, #288]	; 0x120
 8011c4e:	0138      	lsls	r0, r7, #4
 8011c50:	3504      	adds	r5, #4
 8011c52:	9042      	str	r0, [sp, #264]	; 0x108
 8011c54:	9519      	str	r5, [sp, #100]	; 0x64
 8011c56:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8011c58:	3504      	adds	r5, #4
 8011c5a:	951a      	str	r5, [sp, #104]	; 0x68
 8011c5c:	4675      	mov	r5, lr
 8011c5e:	3504      	adds	r5, #4
 8011c60:	952e      	str	r5, [sp, #184]	; 0xb8
 8011c62:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8011c64:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8011c66:	0088      	lsls	r0, r1, #2
 8011c68:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8011c6a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8011c6e:	9043      	str	r0, [sp, #268]	; 0x10c
 8011c70:	fb06 f002 	mul.w	r0, r6, r2
 8011c74:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8011c76:	fb06 f202 	mul.w	r2, r6, r2
 8011c7a:	9040      	str	r0, [sp, #256]	; 0x100
 8011c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011c7e:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8011c80:	fb02 f204 	mul.w	r2, r2, r4
 8011c84:	920d      	str	r2, [sp, #52]	; 0x34
 8011c86:	011a      	lsls	r2, r3, #4
 8011c88:	019b      	lsls	r3, r3, #6
 8011c8a:	920e      	str	r2, [sp, #56]	; 0x38
 8011c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c90:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8011c94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c98:	2b15      	cmp	r3, #21
 8011c9a:	9324      	str	r3, [sp, #144]	; 0x90
 8011c9c:	921f      	str	r2, [sp, #124]	; 0x7c
 8011c9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ca0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011ca4:	6812      	ldr	r2, [r2, #0]
 8011ca6:	9129      	str	r1, [sp, #164]	; 0xa4
 8011ca8:	922a      	str	r2, [sp, #168]	; 0xa8
 8011caa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011cac:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011cb0:	6812      	ldr	r2, [r2, #0]
 8011cb2:	912b      	str	r1, [sp, #172]	; 0xac
 8011cb4:	922c      	str	r2, [sp, #176]	; 0xb0
 8011cb6:	f300 8549 	bgt.w	801274c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe8>
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	bfcc      	ite	gt
 8011cbe:	2300      	movgt	r3, #0
 8011cc0:	2301      	movle	r3, #1
 8011cc2:	425b      	negs	r3, r3
 8011cc4:	9327      	str	r3, [sp, #156]	; 0x9c
 8011cc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011cc8:	2b15      	cmp	r3, #21
 8011cca:	f300 853b 	bgt.w	8012744 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe0>
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	bfcc      	ite	gt
 8011cd2:	2300      	movgt	r3, #0
 8011cd4:	2301      	movle	r3, #1
 8011cd6:	425b      	negs	r3, r3
 8011cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8011cda:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f000 84c7 	beq.w	8012670 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb0c>
 8011ce2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f040 84d2 	bne.w	801268e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb2a>
 8011cea:	461c      	mov	r4, r3
 8011cec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8011cee:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011cf2:	18a2      	adds	r2, r4, r2
 8011cf4:	9222      	str	r2, [sp, #136]	; 0x88
 8011cf6:	680a      	ldr	r2, [r1, #0]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8011cfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f000 8209 	beq.w	8012116 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5b2>
 8011d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011d06:	2301      	movs	r3, #1
 8011d08:	3a02      	subs	r2, #2
 8011d0a:	fa03 f202 	lsl.w	r2, r3, r2
 8011d0e:	923c      	str	r2, [sp, #240]	; 0xf0
 8011d10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011d12:	3a02      	subs	r2, #2
 8011d14:	4093      	lsls	r3, r2
 8011d16:	2200      	movs	r2, #0
 8011d18:	933d      	str	r3, [sp, #244]	; 0xf4
 8011d1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011d1c:	921e      	str	r2, [sp, #120]	; 0x78
 8011d1e:	f023 030f 	bic.w	r3, r3, #15
 8011d22:	9232      	str	r2, [sp, #200]	; 0xc8
 8011d24:	3314      	adds	r3, #20
 8011d26:	9312      	str	r3, [sp, #72]	; 0x48
 8011d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d2e:	9318      	str	r3, [sp, #96]	; 0x60
 8011d30:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f340 81e0 	ble.w	80120f8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x594>
 8011d38:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8011d3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	18d3      	adds	r3, r2, r3
 8011d40:	931b      	str	r3, [sp, #108]	; 0x6c
 8011d42:	1c53      	adds	r3, r2, #1
 8011d44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011d46:	931c      	str	r3, [sp, #112]	; 0x70
 8011d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d4a:	4413      	add	r3, r2
 8011d4c:	9326      	str	r3, [sp, #152]	; 0x98
 8011d4e:	2300      	movs	r3, #0
 8011d50:	9333      	str	r3, [sp, #204]	; 0xcc
 8011d52:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011d54:	3b04      	subs	r3, #4
 8011d56:	9311      	str	r3, [sp, #68]	; 0x44
 8011d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	f000 8312 	beq.w	8012384 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x820>
 8011d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d62:	9a08      	ldr	r2, [sp, #32]
 8011d64:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8011d66:	4413      	add	r3, r2
 8011d68:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8011d6c:	462c      	mov	r4, r5
 8011d6e:	462f      	mov	r7, r5
 8011d70:	9314      	str	r3, [sp, #80]	; 0x50
 8011d72:	4675      	mov	r5, lr
 8011d74:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011d76:	46a1      	mov	r9, r4
 8011d78:	9304      	str	r3, [sp, #16]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8011d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f000 815c 	beq.w	801203e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4da>
 8011d86:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011d88:	3b03      	subs	r3, #3
 8011d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d8e:	9305      	str	r3, [sp, #20]
 8011d90:	2300      	movs	r3, #0
 8011d92:	9306      	str	r3, [sp, #24]
 8011d94:	9a08      	ldr	r2, [sp, #32]
 8011d96:	9b05      	ldr	r3, [sp, #20]
 8011d98:	1a9e      	subs	r6, r3, r2
 8011d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d9c:	2a00      	cmp	r2, #0
 8011d9e:	f340 828e 	ble.w	80122be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x75a>
 8011da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011da4:	1d18      	adds	r0, r3, #4
 8011da6:	9904      	ldr	r1, [sp, #16]
 8011da8:	18d3      	adds	r3, r2, r3
 8011daa:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8011dae:	9607      	str	r6, [sp, #28]
 8011db0:	9303      	str	r3, [sp, #12]
 8011db2:	f85b 4000 	ldr.w	r4, [fp, r0]
 8011db6:	eb0b 0600 	add.w	r6, fp, r0
 8011dba:	fa2f f284 	sxtb16	r2, r4
 8011dbe:	680b      	ldr	r3, [r1, #0]
 8011dc0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8011dc4:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8011dc8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8011dcc:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011dd0:	fb22 ee03 	smlad	lr, r2, r3, lr
 8011dd4:	fb24 ee08 	smlad	lr, r4, r8, lr
 8011dd8:	fb22 720a 	smlad	r2, r2, sl, r7
 8011ddc:	fb24 220c 	smlad	r2, r4, ip, r2
 8011de0:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8011de4:	fa2f f784 	sxtb16	r7, r4
 8011de8:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011dec:	fb27 5303 	smlad	r3, r7, r3, r5
 8011df0:	fb27 990a 	smlad	r9, r7, sl, r9
 8011df4:	fb24 3308 	smlad	r3, r4, r8, r3
 8011df8:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8011dfc:	694f      	ldr	r7, [r1, #20]
 8011dfe:	fb24 9c0c 	smlad	ip, r4, ip, r9
 8011e02:	6875      	ldr	r5, [r6, #4]
 8011e04:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8011e08:	fa2f f485 	sxtb16	r4, r5
 8011e0c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8011e10:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011e14:	fb24 ee08 	smlad	lr, r4, r8, lr
 8011e18:	fb25 ee07 	smlad	lr, r5, r7, lr
 8011e1c:	fb24 240a 	smlad	r4, r4, sl, r2
 8011e20:	fb25 4409 	smlad	r4, r5, r9, r4
 8011e24:	6802      	ldr	r2, [r0, #0]
 8011e26:	fa2f f582 	sxtb16	r5, r2
 8011e2a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011e2e:	fb25 3808 	smlad	r8, r5, r8, r3
 8011e32:	fb25 cc0a 	smlad	ip, r5, sl, ip
 8011e36:	fb22 8707 	smlad	r7, r2, r7, r8
 8011e3a:	6a0b      	ldr	r3, [r1, #32]
 8011e3c:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
 8011e40:	fb22 c909 	smlad	r9, r2, r9, ip
 8011e44:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8011e48:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8011e4a:	fa2f f58c 	sxtb16	r5, ip
 8011e4e:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 8011e52:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8011e56:	fb25 ee03 	smlad	lr, r5, r3, lr
 8011e5a:	fb2c ee08 	smlad	lr, ip, r8, lr
 8011e5e:	fb25 4502 	smlad	r5, r5, r2, r4
 8011e62:	fb2c 5c0a 	smlad	ip, ip, sl, r5
 8011e66:	6844      	ldr	r4, [r0, #4]
 8011e68:	fa2f f584 	sxtb16	r5, r4
 8011e6c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011e70:	fb25 7703 	smlad	r7, r5, r3, r7
 8011e74:	fb25 9902 	smlad	r9, r5, r2, r9
 8011e78:	fb24 7808 	smlad	r8, r4, r8, r7
 8011e7c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8011e7e:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8011e80:	fb24 9a0a 	smlad	sl, r4, sl, r9
 8011e84:	68f7      	ldr	r7, [r6, #12]
 8011e86:	3140      	adds	r1, #64	; 0x40
 8011e88:	fa2f f487 	sxtb16	r4, r7
 8011e8c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8011e90:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8011e94:	fa2f f797 	sxtb16	r7, r7, ror #8
 8011e98:	fb24 ee03 	smlad	lr, r4, r3, lr
 8011e9c:	fb27 ee05 	smlad	lr, r7, r5, lr
 8011ea0:	fb24 cc02 	smlad	ip, r4, r2, ip
 8011ea4:	fb27 c706 	smlad	r7, r7, r6, ip
 8011ea8:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011eac:	fa2f f489 	sxtb16	r4, r9
 8011eb0:	fa2f f999 	sxtb16	r9, r9, ror #8
 8011eb4:	fb24 8803 	smlad	r8, r4, r3, r8
 8011eb8:	fb24 aa02 	smlad	sl, r4, r2, sl
 8011ebc:	fb29 8505 	smlad	r5, r9, r5, r8
 8011ec0:	fb29 a906 	smlad	r9, r9, r6, sl
 8011ec4:	3010      	adds	r0, #16
 8011ec6:	9b03      	ldr	r3, [sp, #12]
 8011ec8:	4283      	cmp	r3, r0
 8011eca:	f47f af72 	bne.w	8011db2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x24e>
 8011ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ed0:	9a04      	ldr	r2, [sp, #16]
 8011ed2:	9e07      	ldr	r6, [sp, #28]
 8011ed4:	469b      	mov	fp, r3
 8011ed6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ed8:	441e      	add	r6, r3
 8011eda:	440a      	add	r2, r1
 8011edc:	9204      	str	r2, [sp, #16]
 8011ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ee0:	459b      	cmp	fp, r3
 8011ee2:	f280 81ea 	bge.w	80122ba <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x756>
 8011ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ee8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011eec:	eba3 030b 	sub.w	r3, r3, fp
 8011ef0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8011ef4:	089b      	lsrs	r3, r3, #2
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	9307      	str	r3, [sp, #28]
 8011efa:	9b04      	ldr	r3, [sp, #16]
 8011efc:	3201      	adds	r2, #1
 8011efe:	eb06 0a82 	add.w	sl, r6, r2, lsl #2
 8011f02:	9203      	str	r2, [sp, #12]
 8011f04:	f856 2b04 	ldr.w	r2, [r6], #4
 8011f08:	3310      	adds	r3, #16
 8011f0a:	fa2f f182 	sxtb16	r1, r2
 8011f0e:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8011f12:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8011f16:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8011f1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f1e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011f22:	fb21 ee08 	smlad	lr, r1, r8, lr
 8011f26:	fb22 ee04 	smlad	lr, r2, r4, lr
 8011f2a:	fb21 770c 	smlad	r7, r1, ip, r7
 8011f2e:	fb22 7700 	smlad	r7, r2, r0, r7
 8011f32:	f856 200b 	ldr.w	r2, [r6, fp]
 8011f36:	fa2f f182 	sxtb16	r1, r2
 8011f3a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011f3e:	fb21 5508 	smlad	r5, r1, r8, r5
 8011f42:	fb21 990c 	smlad	r9, r1, ip, r9
 8011f46:	fb22 5504 	smlad	r5, r2, r4, r5
 8011f4a:	fb22 9900 	smlad	r9, r2, r0, r9
 8011f4e:	45b2      	cmp	sl, r6
 8011f50:	d1d8      	bne.n	8011f04 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x3a0>
 8011f52:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8011f56:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8011f5a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011f5e:	9a07      	ldr	r2, [sp, #28]
 8011f60:	9304      	str	r3, [sp, #16]
 8011f62:	f10b 0304 	add.w	r3, fp, #4
 8011f66:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 8011f6a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011f6c:	455b      	cmp	r3, fp
 8011f6e:	dd5b      	ble.n	8012028 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4c4>
 8011f70:	9804      	ldr	r0, [sp, #16]
 8011f72:	f99a 3000 	ldrsb.w	r3, [sl]
 8011f76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011f7a:	f9b0 1000 	ldrsh.w	r1, [r0]
 8011f7e:	9c08      	ldr	r4, [sp, #32]
 8011f80:	fb12 7703 	smlabb	r7, r2, r3, r7
 8011f84:	fb11 ee03 	smlabb	lr, r1, r3, lr
 8011f88:	f91a 3004 	ldrsb.w	r3, [sl, r4]
 8011f8c:	fb12 9903 	smlabb	r9, r2, r3, r9
 8011f90:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8011f92:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011f96:	f10b 0301 	add.w	r3, fp, #1
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	da3d      	bge.n	801201a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8011f9e:	eb0a 0304 	add.w	r3, sl, r4
 8011fa2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011fa6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011faa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011fae:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011fb2:	fb12 9903 	smlabb	r9, r2, r3, r9
 8011fb6:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 8011fba:	fb11 ee03 	smlabb	lr, r1, r3, lr
 8011fbe:	9959      	ldr	r1, [sp, #356]	; 0x164
 8011fc0:	fb12 7703 	smlabb	r7, r2, r3, r7
 8011fc4:	f10b 0302 	add.w	r3, fp, #2
 8011fc8:	f10a 0202 	add.w	r2, sl, #2
 8011fcc:	428b      	cmp	r3, r1
 8011fce:	da24      	bge.n	801201a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8011fd0:	5713      	ldrsb	r3, [r2, r4]
 8011fd2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011fd6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011fda:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011fde:	fb12 9903 	smlabb	r9, r2, r3, r9
 8011fe2:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8011fe6:	fb11 ee03 	smlabb	lr, r1, r3, lr
 8011fea:	9959      	ldr	r1, [sp, #356]	; 0x164
 8011fec:	fb12 7703 	smlabb	r7, r2, r3, r7
 8011ff0:	f10b 0303 	add.w	r3, fp, #3
 8011ff4:	f10a 0203 	add.w	r2, sl, #3
 8011ff8:	428b      	cmp	r3, r1
 8011ffa:	da0e      	bge.n	801201a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8011ffc:	5713      	ldrsb	r3, [r2, r4]
 8011ffe:	f99a 1003 	ldrsb.w	r1, [sl, #3]
 8012002:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8012006:	fb12 ee01 	smlabb	lr, r2, r1, lr
 801200a:	fb12 5503 	smlabb	r5, r2, r3, r5
 801200e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8012012:	fb12 7701 	smlabb	r7, r2, r1, r7
 8012016:	fb12 9903 	smlabb	r9, r2, r3, r9
 801201a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801201c:	9a04      	ldr	r2, [sp, #16]
 801201e:	eba3 030b 	sub.w	r3, r3, fp
 8012022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012026:	9304      	str	r3, [sp, #16]
 8012028:	9a05      	ldr	r2, [sp, #20]
 801202a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801202c:	9b06      	ldr	r3, [sp, #24]
 801202e:	440a      	add	r2, r1
 8012030:	3301      	adds	r3, #1
 8012032:	9205      	str	r2, [sp, #20]
 8012034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012036:	9306      	str	r3, [sp, #24]
 8012038:	429a      	cmp	r2, r3
 801203a:	f47f aeab 	bne.w	8011d94 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x230>
 801203e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012040:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012044:	440a      	add	r2, r1
 8012046:	3301      	adds	r3, #1
 8012048:	9214      	str	r2, [sp, #80]	; 0x50
 801204a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801204c:	9315      	str	r3, [sp, #84]	; 0x54
 801204e:	429a      	cmp	r2, r3
 8012050:	f47f ae95 	bne.w	8011d7e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x21a>
 8012054:	46ab      	mov	fp, r5
 8012056:	464c      	mov	r4, r9
 8012058:	463d      	mov	r5, r7
 801205a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801205c:	2b00      	cmp	r3, #0
 801205e:	f040 814c 	bne.w	80122fa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x796>
 8012062:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012064:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8012068:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801206a:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 801206e:	fb52 1203 	smmla	r2, r2, r3, r1
 8012072:	fb5a 1a03 	smmla	sl, sl, r3, r1
 8012076:	9924      	ldr	r1, [sp, #144]	; 0x90
 8012078:	410a      	asrs	r2, r1
 801207a:	f302 0307 	ssat	r3, #8, r2
 801207e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012080:	fa4a fa01 	asr.w	sl, sl, r1
 8012084:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012088:	f30a 0307 	ssat	r3, #8, sl
 801208c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801208e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012092:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 8115 	bne.w	80122c4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x760>
 801209a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801209c:	006f      	lsls	r7, r5, #1
 801209e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80120a0:	0060      	lsls	r0, r4, #1
 80120a2:	fb57 2703 	smmla	r7, r7, r3, r2
 80120a6:	fb50 2003 	smmla	r0, r0, r3, r2
 80120aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120ac:	4117      	asrs	r7, r2
 80120ae:	f307 0307 	ssat	r3, #8, r7
 80120b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120b4:	4110      	asrs	r0, r2
 80120b6:	700b      	strb	r3, [r1, #0]
 80120b8:	f300 0307 	ssat	r3, #8, r0
 80120bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80120be:	7013      	strb	r3, [r2, #0]
 80120c0:	460a      	mov	r2, r1
 80120c2:	9946      	ldr	r1, [sp, #280]	; 0x118
 80120c4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80120c6:	440a      	add	r2, r1
 80120c8:	3302      	adds	r3, #2
 80120ca:	921c      	str	r2, [sp, #112]	; 0x70
 80120cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80120ce:	9333      	str	r3, [sp, #204]	; 0xcc
 80120d0:	440a      	add	r2, r1
 80120d2:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80120d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80120d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80120d8:	440a      	add	r2, r1
 80120da:	9226      	str	r2, [sp, #152]	; 0x98
 80120dc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80120de:	4293      	cmp	r3, r2
 80120e0:	f6ff ae3a 	blt.w	8011d58 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1f4>
 80120e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80120e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80120e8:	4413      	add	r3, r2
 80120ea:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80120ec:	9318      	str	r3, [sp, #96]	; 0x60
 80120ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80120f0:	4413      	add	r3, r2
 80120f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120f4:	18d3      	adds	r3, r2, r3
 80120f6:	9305      	str	r3, [sp, #20]
 80120f8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f040 8148 	bne.w	8012390 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x82c>
 8012100:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012102:	9940      	ldr	r1, [sp, #256]	; 0x100
 8012104:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8012106:	440a      	add	r2, r1
 8012108:	3301      	adds	r3, #1
 801210a:	921e      	str	r2, [sp, #120]	; 0x78
 801210c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801210e:	9332      	str	r3, [sp, #200]	; 0xc8
 8012110:	429a      	cmp	r2, r3
 8012112:	f47f ae0d 	bne.w	8011d30 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1cc>
 8012116:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012118:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801211a:	4413      	add	r3, r2
 801211c:	932d      	str	r3, [sp, #180]	; 0xb4
 801211e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012120:	3302      	adds	r3, #2
 8012122:	931d      	str	r3, [sp, #116]	; 0x74
 8012124:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012126:	b11b      	cbz	r3, 8012130 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5cc>
 8012128:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801212a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801212c:	4413      	add	r3, r2
 801212e:	9365      	str	r3, [sp, #404]	; 0x194
 8012130:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012132:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8012134:	3304      	adds	r3, #4
 8012136:	9320      	str	r3, [sp, #128]	; 0x80
 8012138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801213a:	3308      	adds	r3, #8
 801213c:	9319      	str	r3, [sp, #100]	; 0x64
 801213e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012140:	3308      	adds	r3, #8
 8012142:	931a      	str	r3, [sp, #104]	; 0x68
 8012144:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012146:	3308      	adds	r3, #8
 8012148:	932e      	str	r3, [sp, #184]	; 0xb8
 801214a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801214c:	4293      	cmp	r3, r2
 801214e:	f47f ad9e 	bne.w	8011c8e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x12a>
 8012152:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012154:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8012156:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8012158:	fb01 3302 	mla	r3, r1, r2, r3
 801215c:	932f      	str	r3, [sp, #188]	; 0xbc
 801215e:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012160:	07db      	lsls	r3, r3, #31
 8012162:	f140 80a6 	bpl.w	80122b2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 8012166:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012168:	2b00      	cmp	r3, #0
 801216a:	f000 80a2 	beq.w	80122b2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 801216e:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012170:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
 8012174:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012176:	449b      	add	fp, r3
 8012178:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801217a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801217e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012180:	9b56      	ldr	r3, [sp, #344]	; 0x158
 8012182:	eb03 088b 	add.w	r8, r3, fp, lsl #2
 8012186:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012188:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 801218c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012190:	4413      	add	r3, r2
 8012192:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8012194:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012198:	930c      	str	r3, [sp, #48]	; 0x30
 801219a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801219c:	2b00      	cmp	r3, #0
 801219e:	f000 8088 	beq.w	80122b2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 80121a2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80121a4:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80121a6:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 80121a8:	fb01 f202 	mul.w	r2, r1, r2
 80121ac:	920d      	str	r2, [sp, #52]	; 0x34
 80121ae:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80121b0:	fb01 f202 	mul.w	r2, r1, r2
 80121b4:	9959      	ldr	r1, [sp, #356]	; 0x164
 80121b6:	9209      	str	r2, [sp, #36]	; 0x24
 80121b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80121ba:	440a      	add	r2, r1
 80121bc:	9203      	str	r2, [sp, #12]
 80121be:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 80121c0:	fb01 f202 	mul.w	r2, r1, r2
 80121c4:	920e      	str	r2, [sp, #56]	; 0x38
 80121c6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80121c8:	fb01 fe02 	mul.w	lr, r1, r2
 80121cc:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80121ce:	fb02 f303 	mul.w	r3, r2, r3
 80121d2:	46f1      	mov	r9, lr
 80121d4:	468e      	mov	lr, r1
 80121d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80121d8:	2300      	movs	r3, #0
 80121da:	9306      	str	r3, [sp, #24]
 80121dc:	9b03      	ldr	r3, [sp, #12]
 80121de:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 80121e2:	9304      	str	r3, [sp, #16]
 80121e4:	2300      	movs	r3, #0
 80121e6:	9307      	str	r3, [sp, #28]
 80121e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121ea:	6819      	ldr	r1, [r3, #0]
 80121ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121ee:	b37b      	cbz	r3, 8012250 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ec>
 80121f0:	9b04      	ldr	r3, [sp, #16]
 80121f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80121f6:	9305      	str	r3, [sp, #20]
 80121f8:	2300      	movs	r3, #0
 80121fa:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 80121fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	f1b8 0f00 	cmp.w	r8, #0
 8012206:	d017      	beq.n	8012238 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6d4>
 8012208:	9d05      	ldr	r5, [sp, #20]
 801220a:	f04f 0c00 	mov.w	ip, #0
 801220e:	f1be 0f00 	cmp.w	lr, #0
 8012212:	eba5 020e 	sub.w	r2, r5, lr
 8012216:	dd0a      	ble.n	801222e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ca>
 8012218:	1e78      	subs	r0, r7, #1
 801221a:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801221e:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8012222:	1b9b      	subs	r3, r3, r6
 8012224:	42aa      	cmp	r2, r5
 8012226:	fb04 1103 	mla	r1, r4, r3, r1
 801222a:	d1f6      	bne.n	801221a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6b6>
 801222c:	4477      	add	r7, lr
 801222e:	f10c 0c01 	add.w	ip, ip, #1
 8012232:	444d      	add	r5, r9
 8012234:	45e0      	cmp	r8, ip
 8012236:	d1ea      	bne.n	801220e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6aa>
 8012238:	9a05      	ldr	r2, [sp, #20]
 801223a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801223c:	9b08      	ldr	r3, [sp, #32]
 801223e:	4402      	add	r2, r0
 8012240:	3301      	adds	r3, #1
 8012242:	9205      	str	r2, [sp, #20]
 8012244:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012246:	9308      	str	r3, [sp, #32]
 8012248:	429a      	cmp	r2, r3
 801224a:	d1da      	bne.n	8012202 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x69e>
 801224c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012252:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012256:	2815      	cmp	r0, #21
 8012258:	f340 82a3 	ble.w	80127a2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc3e>
 801225c:	1e83      	subs	r3, r0, #2
 801225e:	1e42      	subs	r2, r0, #1
 8012260:	2001      	movs	r0, #1
 8012262:	4098      	lsls	r0, r3
 8012264:	f8d8 3000 	ldr.w	r3, [r8]
 8012268:	fb51 0303 	smmla	r3, r1, r3, r0
 801226c:	fa43 f202 	asr.w	r2, r3, r2
 8012270:	f8db 3000 	ldr.w	r3, [fp]
 8012274:	4413      	add	r3, r2
 8012276:	f303 0307 	ssat	r3, #8, r3
 801227a:	f88a 3000 	strb.w	r3, [sl]
 801227e:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012280:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012282:	4492      	add	sl, r2
 8012284:	9a04      	ldr	r2, [sp, #16]
 8012286:	9b07      	ldr	r3, [sp, #28]
 8012288:	440a      	add	r2, r1
 801228a:	3301      	adds	r3, #1
 801228c:	9204      	str	r2, [sp, #16]
 801228e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8012290:	9307      	str	r3, [sp, #28]
 8012292:	4293      	cmp	r3, r2
 8012294:	d1a8      	bne.n	80121e8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x684>
 8012296:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012298:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801229a:	9b06      	ldr	r3, [sp, #24]
 801229c:	440a      	add	r2, r1
 801229e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80122a0:	3301      	adds	r3, #1
 80122a2:	921d      	str	r2, [sp, #116]	; 0x74
 80122a4:	9a03      	ldr	r2, [sp, #12]
 80122a6:	9306      	str	r3, [sp, #24]
 80122a8:	440a      	add	r2, r1
 80122aa:	9203      	str	r2, [sp, #12]
 80122ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d194      	bne.n	80121dc <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x678>
 80122b2:	2000      	movs	r0, #0
 80122b4:	b04d      	add	sp, #308	; 0x134
 80122b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ba:	46b2      	mov	sl, r6
 80122bc:	e655      	b.n	8011f6a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x406>
 80122be:	f04f 0b00 	mov.w	fp, #0
 80122c2:	e60c      	b.n	8011ede <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x37a>
 80122c4:	3301      	adds	r3, #1
 80122c6:	d033      	beq.n	8012330 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7cc>
 80122c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80122ca:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80122cc:	fb55 2703 	smmla	r7, r5, r3, r2
 80122d0:	fb54 2003 	smmla	r0, r4, r3, r2
 80122d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122d6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80122d8:	3b01      	subs	r3, #1
 80122da:	fa47 f203 	asr.w	r2, r7, r3
 80122de:	440a      	add	r2, r1
 80122e0:	f302 0207 	ssat	r2, #8, r2
 80122e4:	fa40 f303 	asr.w	r3, r0, r3
 80122e8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80122ea:	440b      	add	r3, r1
 80122ec:	7002      	strb	r2, [r0, #0]
 80122ee:	f303 0307 	ssat	r3, #8, r3
 80122f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80122f4:	7013      	strb	r3, [r2, #0]
 80122f6:	4602      	mov	r2, r0
 80122f8:	e6e3      	b.n	80120c2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x55e>
 80122fa:	3301      	adds	r3, #1
 80122fc:	d02d      	beq.n	801235a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7f6>
 80122fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012300:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8012302:	fb5e 1203 	smmla	r2, lr, r3, r1
 8012306:	fb5b 1a03 	smmla	sl, fp, r3, r1
 801230a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801230c:	992b      	ldr	r1, [sp, #172]	; 0xac
 801230e:	3b01      	subs	r3, #1
 8012310:	411a      	asrs	r2, r3
 8012312:	440a      	add	r2, r1
 8012314:	f302 0207 	ssat	r2, #8, r2
 8012318:	fa4a f303 	asr.w	r3, sl, r3
 801231c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801231e:	440b      	add	r3, r1
 8012320:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012324:	f303 0307 	ssat	r3, #8, r3
 8012328:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801232a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801232e:	e6b0      	b.n	8012092 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x52e>
 8012330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012332:	f1c3 0301 	rsb	r3, r3, #1
 8012336:	fa05 f203 	lsl.w	r2, r5, r3
 801233a:	f302 021f 	ssat	r2, #32, r2
 801233e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012340:	fb52 f211 	smmulr	r2, r2, r1
 8012344:	fa04 f303 	lsl.w	r3, r4, r3
 8012348:	f303 031f 	ssat	r3, #32, r3
 801234c:	fb53 f311 	smmulr	r3, r3, r1
 8012350:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8012352:	440a      	add	r2, r1
 8012354:	f302 0207 	ssat	r2, #8, r2
 8012358:	e7c6      	b.n	80122e8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x784>
 801235a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801235c:	f1c3 0301 	rsb	r3, r3, #1
 8012360:	fa0e f203 	lsl.w	r2, lr, r3
 8012364:	f302 021f 	ssat	r2, #32, r2
 8012368:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801236a:	fb52 f211 	smmulr	r2, r2, r1
 801236e:	fa0b f303 	lsl.w	r3, fp, r3
 8012372:	f303 031f 	ssat	r3, #32, r3
 8012376:	fb53 f311 	smmulr	r3, r3, r1
 801237a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801237c:	440a      	add	r2, r1
 801237e:	f302 0207 	ssat	r2, #8, r2
 8012382:	e7cb      	b.n	801231c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7b8>
 8012384:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8012386:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 801238a:	462c      	mov	r4, r5
 801238c:	46f3      	mov	fp, lr
 801238e:	e664      	b.n	801205a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4f6>
 8012390:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8012392:	2b01      	cmp	r3, #1
 8012394:	f000 8167 	beq.w	8012666 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb02>
 8012398:	9b05      	ldr	r3, [sp, #20]
 801239a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801239c:	4413      	add	r3, r2
 801239e:	9305      	str	r3, [sp, #20]
 80123a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	f000 812f 	beq.w	8012606 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xaa2>
 80123a8:	2300      	movs	r3, #0
 80123aa:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 80123ae:	9307      	str	r3, [sp, #28]
 80123b0:	9311      	str	r3, [sp, #68]	; 0x44
 80123b2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80123b4:	3b03      	subs	r3, #3
 80123b6:	9309      	str	r3, [sp, #36]	; 0x24
 80123b8:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80123ba:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 80123be:	3b04      	subs	r3, #4
 80123c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80123c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	f000 80da 	beq.w	801257e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa1a>
 80123ca:	9b05      	ldr	r3, [sp, #20]
 80123cc:	9a07      	ldr	r2, [sp, #28]
 80123ce:	4413      	add	r3, r2
 80123d0:	9303      	str	r3, [sp, #12]
 80123d2:	2300      	movs	r3, #0
 80123d4:	9304      	str	r3, [sp, #16]
 80123d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123d8:	9a03      	ldr	r2, [sp, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	4611      	mov	r1, r2
 80123de:	f340 810e 	ble.w	80125fe <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa9a>
 80123e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123e4:	464b      	mov	r3, r9
 80123e6:	188c      	adds	r4, r1, r2
 80123e8:	6808      	ldr	r0, [r1, #0]
 80123ea:	681d      	ldr	r5, [r3, #0]
 80123ec:	fa2f f280 	sxtb16	r2, r0
 80123f0:	fa2f f090 	sxtb16	r0, r0, ror #8
 80123f4:	fb22 a505 	smlad	r5, r2, r5, sl
 80123f8:	685e      	ldr	r6, [r3, #4]
 80123fa:	fb20 5706 	smlad	r7, r0, r6, r5
 80123fe:	689d      	ldr	r5, [r3, #8]
 8012400:	fb22 b205 	smlad	r2, r2, r5, fp
 8012404:	68dd      	ldr	r5, [r3, #12]
 8012406:	fb20 2005 	smlad	r0, r0, r5, r2
 801240a:	684a      	ldr	r2, [r1, #4]
 801240c:	691e      	ldr	r6, [r3, #16]
 801240e:	fa2f f582 	sxtb16	r5, r2
 8012412:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012416:	fb25 7606 	smlad	r6, r5, r6, r7
 801241a:	695f      	ldr	r7, [r3, #20]
 801241c:	fb22 6607 	smlad	r6, r2, r7, r6
 8012420:	699f      	ldr	r7, [r3, #24]
 8012422:	fb25 0007 	smlad	r0, r5, r7, r0
 8012426:	69dd      	ldr	r5, [r3, #28]
 8012428:	fb22 0205 	smlad	r2, r2, r5, r0
 801242c:	688f      	ldr	r7, [r1, #8]
 801242e:	6a1d      	ldr	r5, [r3, #32]
 8012430:	fa2f f087 	sxtb16	r0, r7
 8012434:	fa2f f797 	sxtb16	r7, r7, ror #8
 8012438:	fb20 6505 	smlad	r5, r0, r5, r6
 801243c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801243e:	fb27 5606 	smlad	r6, r7, r6, r5
 8012442:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8012446:	fb20 200b 	smlad	r0, r0, fp, r2
 801244a:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 801244e:	fb27 000b 	smlad	r0, r7, fp, r0
 8012452:	68ca      	ldr	r2, [r1, #12]
 8012454:	3340      	adds	r3, #64	; 0x40
 8012456:	fa2f fb82 	sxtb16	fp, r2
 801245a:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801245e:	3110      	adds	r1, #16
 8012460:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8012464:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8012468:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801246c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8012470:	fb2b 6505 	smlad	r5, fp, r5, r6
 8012474:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8012478:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 801247c:	fb22 bb07 	smlad	fp, r2, r7, fp
 8012480:	42a1      	cmp	r1, r4
 8012482:	d1b1      	bne.n	80123e8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x884>
 8012484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012486:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 801248a:	4499      	add	r9, r3
 801248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801248e:	459e      	cmp	lr, r3
 8012490:	f280 80b3 	bge.w	80125fa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa96>
 8012494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012496:	4649      	mov	r1, r9
 8012498:	eba3 080e 	sub.w	r8, r3, lr
 801249c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80124a0:	f108 0301 	add.w	r3, r8, #1
 80124a4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80124a8:	9306      	str	r3, [sp, #24]
 80124aa:	f854 3b04 	ldr.w	r3, [r4], #4
 80124ae:	3110      	adds	r1, #16
 80124b0:	fa2f f283 	sxtb16	r2, r3
 80124b4:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80124b8:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80124bc:	f851 6c08 	ldr.w	r6, [r1, #-8]
 80124c0:	f851 5c04 	ldr.w	r5, [r1, #-4]
 80124c4:	fa2f f393 	sxtb16	r3, r3, ror #8
 80124c8:	fb22 a000 	smlad	r0, r2, r0, sl
 80124cc:	fb23 0a07 	smlad	sl, r3, r7, r0
 80124d0:	fb22 b206 	smlad	r2, r2, r6, fp
 80124d4:	fb23 2b05 	smlad	fp, r3, r5, r2
 80124d8:	4564      	cmp	r4, ip
 80124da:	d1e6      	bne.n	80124aa <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x946>
 80124dc:	9b06      	ldr	r3, [sp, #24]
 80124de:	f10e 0e04 	add.w	lr, lr, #4
 80124e2:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 80124e6:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 80124ea:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80124ec:	4573      	cmp	r3, lr
 80124ee:	dd3b      	ble.n	8012568 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa04>
 80124f0:	f99c 3000 	ldrsb.w	r3, [ip]
 80124f4:	f8b9 2000 	ldrh.w	r2, [r9]
 80124f8:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80124fc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8012500:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012504:	f10e 0301 	add.w	r3, lr, #1
 8012508:	9a59      	ldr	r2, [sp, #356]	; 0x164
 801250a:	429a      	cmp	r2, r3
 801250c:	dd27      	ble.n	801255e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 801250e:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8012512:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8012516:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801251a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801251e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012522:	f10e 0302 	add.w	r3, lr, #2
 8012526:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012528:	429a      	cmp	r2, r3
 801252a:	dd18      	ble.n	801255e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 801252c:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8012530:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8012534:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012538:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 801253c:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8012540:	f10e 0303 	add.w	r3, lr, #3
 8012544:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8012546:	429a      	cmp	r2, r3
 8012548:	dd09      	ble.n	801255e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 801254a:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801254e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8012552:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8012556:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801255a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801255e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012560:	eba3 0e0e 	sub.w	lr, r3, lr
 8012564:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8012568:	9a03      	ldr	r2, [sp, #12]
 801256a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801256c:	9b04      	ldr	r3, [sp, #16]
 801256e:	440a      	add	r2, r1
 8012570:	3301      	adds	r3, #1
 8012572:	9203      	str	r2, [sp, #12]
 8012574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012576:	9304      	str	r3, [sp, #16]
 8012578:	429a      	cmp	r2, r3
 801257a:	f47f af2c 	bne.w	80123d6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x872>
 801257e:	9a07      	ldr	r2, [sp, #28]
 8012580:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012584:	440a      	add	r2, r1
 8012586:	3301      	adds	r3, #1
 8012588:	9207      	str	r2, [sp, #28]
 801258a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801258c:	9311      	str	r3, [sp, #68]	; 0x44
 801258e:	429a      	cmp	r2, r3
 8012590:	f47f af17 	bne.w	80123c2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x85e>
 8012594:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012596:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801259a:	2915      	cmp	r1, #21
 801259c:	dd3a      	ble.n	8012614 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xab0>
 801259e:	1e8b      	subs	r3, r1, #2
 80125a0:	2201      	movs	r2, #1
 80125a2:	3901      	subs	r1, #1
 80125a4:	409a      	lsls	r2, r3
 80125a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80125ac:	fb5a 2303 	smmla	r3, sl, r3, r2
 80125b0:	fa43 f101 	asr.w	r1, r3, r1
 80125b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80125b6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80125ba:	440b      	add	r3, r1
 80125bc:	f303 0307 	ssat	r3, #8, r3
 80125c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125c2:	7013      	strb	r3, [r2, #0]
 80125c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80125ca:	2915      	cmp	r1, #21
 80125cc:	dd39      	ble.n	8012642 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xade>
 80125ce:	1e8b      	subs	r3, r1, #2
 80125d0:	2201      	movs	r2, #1
 80125d2:	3901      	subs	r1, #1
 80125d4:	409a      	lsls	r2, r3
 80125d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	fb5b 2303 	smmla	r3, fp, r3, r2
 80125de:	fa43 f101 	asr.w	r1, r3, r1
 80125e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	440b      	add	r3, r1
 80125e8:	f303 0307 	ssat	r3, #8, r3
 80125ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125ee:	7053      	strb	r3, [r2, #1]
 80125f0:	4613      	mov	r3, r2
 80125f2:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80125f4:	4413      	add	r3, r2
 80125f6:	9318      	str	r3, [sp, #96]	; 0x60
 80125f8:	e582      	b.n	8012100 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x59c>
 80125fa:	46a4      	mov	ip, r4
 80125fc:	e775      	b.n	80124ea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x986>
 80125fe:	4614      	mov	r4, r2
 8012600:	f04f 0e00 	mov.w	lr, #0
 8012604:	e742      	b.n	801248c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x928>
 8012606:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012608:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801260c:	2915      	cmp	r1, #21
 801260e:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8012612:	dcc4      	bgt.n	801259e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa3a>
 8012614:	2900      	cmp	r1, #0
 8012616:	f340 80b0 	ble.w	801277a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc16>
 801261a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801261c:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8012620:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012622:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012626:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801262a:	fb54 2303 	smmla	r3, r4, r3, r2
 801262e:	410b      	asrs	r3, r1
 8012630:	f303 0307 	ssat	r3, #8, r3
 8012634:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012636:	7013      	strb	r3, [r2, #0]
 8012638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801263a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801263e:	2915      	cmp	r1, #21
 8012640:	dcc5      	bgt.n	80125ce <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa6a>
 8012642:	2900      	cmp	r1, #0
 8012644:	f340 8086 	ble.w	8012754 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbf0>
 8012648:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801264a:	ea4f 044b 	mov.w	r4, fp, lsl #1
 801264e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	6812      	ldr	r2, [r2, #0]
 8012654:	fb54 2303 	smmla	r3, r4, r3, r2
 8012658:	410b      	asrs	r3, r1
 801265a:	f303 0307 	ssat	r3, #8, r3
 801265e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012660:	7053      	strb	r3, [r2, #1]
 8012662:	4613      	mov	r3, r2
 8012664:	e7c5      	b.n	80125f2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8012666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012668:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801266a:	4413      	add	r3, r2
 801266c:	9305      	str	r3, [sp, #20]
 801266e:	e697      	b.n	80123a0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x83c>
 8012670:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8012672:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8012674:	4601      	mov	r1, r0
 8012676:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	ee17 3a90 	vmov	r3, s15
 801267e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8012680:	4421      	add	r1, r4
 8012682:	f7fd fd3b 	bl	80100fc <weights_2channels_prefetch>
 8012686:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8012688:	2b00      	cmp	r3, #0
 801268a:	f43f ab2e 	beq.w	8011cea <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x186>
 801268e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012690:	2b00      	cmp	r3, #0
 8012692:	f000 8095 	beq.w	80127c0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc5c>
 8012696:	2300      	movs	r3, #0
 8012698:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801269a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801269c:	461c      	mov	r4, r3
 801269e:	461e      	mov	r6, r3
 80126a0:	9f41      	ldr	r7, [sp, #260]	; 0x104
 80126a2:	b33f      	cbz	r7, 80126f4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb90>
 80126a4:	f102 0510 	add.w	r5, r2, #16
 80126a8:	f935 1c10 	ldrsh.w	r1, [r5, #-16]
 80126ac:	3f01      	subs	r7, #1
 80126ae:	f105 0510 	add.w	r5, r5, #16
 80126b2:	eba4 0401 	sub.w	r4, r4, r1
 80126b6:	f935 1c18 	ldrsh.w	r1, [r5, #-24]
 80126ba:	eba3 0301 	sub.w	r3, r3, r1
 80126be:	f935 1c1e 	ldrsh.w	r1, [r5, #-30]
 80126c2:	eba4 0401 	sub.w	r4, r4, r1
 80126c6:	f935 1c16 	ldrsh.w	r1, [r5, #-22]
 80126ca:	eba3 0301 	sub.w	r3, r3, r1
 80126ce:	f935 1c1c 	ldrsh.w	r1, [r5, #-28]
 80126d2:	eba4 0401 	sub.w	r4, r4, r1
 80126d6:	f935 1c14 	ldrsh.w	r1, [r5, #-20]
 80126da:	eba3 0301 	sub.w	r3, r3, r1
 80126de:	f935 1c1a 	ldrsh.w	r1, [r5, #-26]
 80126e2:	eba4 0401 	sub.w	r4, r4, r1
 80126e6:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 80126ea:	eba3 0301 	sub.w	r3, r3, r1
 80126ee:	d1db      	bne.n	80126a8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb44>
 80126f0:	9942      	ldr	r1, [sp, #264]	; 0x108
 80126f2:	440a      	add	r2, r1
 80126f4:	b1d8      	cbz	r0, 801272e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbca>
 80126f6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80126fa:	2801      	cmp	r0, #1
 80126fc:	eba4 0401 	sub.w	r4, r4, r1
 8012700:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8012704:	eba3 0301 	sub.w	r3, r3, r1
 8012708:	d00f      	beq.n	801272a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 801270a:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801270e:	2802      	cmp	r0, #2
 8012710:	eba4 0401 	sub.w	r4, r4, r1
 8012714:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012718:	eba3 0301 	sub.w	r3, r3, r1
 801271c:	d005      	beq.n	801272a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 801271e:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8012722:	1a64      	subs	r4, r4, r1
 8012724:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8012728:	1a5b      	subs	r3, r3, r1
 801272a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 801272c:	440a      	add	r2, r1
 801272e:	3601      	adds	r6, #1
 8012730:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012732:	42b1      	cmp	r1, r6
 8012734:	d1b4      	bne.n	80126a0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb3c>
 8012736:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8012738:	fb02 f404 	mul.w	r4, r2, r4
 801273c:	fb02 f303 	mul.w	r3, r2, r3
 8012740:	f7ff bad4 	b.w	8011cec <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8012744:	2301      	movs	r3, #1
 8012746:	9328      	str	r3, [sp, #160]	; 0xa0
 8012748:	f7ff bac7 	b.w	8011cda <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x176>
 801274c:	2301      	movs	r3, #1
 801274e:	9327      	str	r3, [sp, #156]	; 0x9c
 8012750:	f7ff bab9 	b.w	8011cc6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x162>
 8012754:	f1c1 0101 	rsb	r1, r1, #1
 8012758:	fa0b f101 	lsl.w	r1, fp, r1
 801275c:	f301 021f 	ssat	r2, #32, r1
 8012760:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	fb52 f213 	smmulr	r2, r2, r3
 8012768:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4413      	add	r3, r2
 801276e:	f303 0307 	ssat	r3, #8, r3
 8012772:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012774:	7053      	strb	r3, [r2, #1]
 8012776:	4613      	mov	r3, r2
 8012778:	e73b      	b.n	80125f2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 801277a:	f1c1 0101 	rsb	r1, r1, #1
 801277e:	fa0a f201 	lsl.w	r2, sl, r1
 8012782:	f302 021f 	ssat	r2, #32, r2
 8012786:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012788:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801278c:	fb52 f213 	smmulr	r2, r2, r3
 8012790:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012792:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012796:	4413      	add	r3, r2
 8012798:	f303 0307 	ssat	r3, #8, r3
 801279c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801279e:	7013      	strb	r3, [r2, #0]
 80127a0:	e710      	b.n	80125c4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa60>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	dd0f      	ble.n	80127c6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc62>
 80127a6:	0049      	lsls	r1, r1, #1
 80127a8:	f8d8 3000 	ldr.w	r3, [r8]
 80127ac:	f8db 2000 	ldr.w	r2, [fp]
 80127b0:	fb51 2303 	smmla	r3, r1, r3, r2
 80127b4:	4103      	asrs	r3, r0
 80127b6:	f303 0307 	ssat	r3, #8, r3
 80127ba:	f88a 3000 	strb.w	r3, [sl]
 80127be:	e55e      	b.n	801227e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 80127c0:	461c      	mov	r4, r3
 80127c2:	f7ff ba93 	b.w	8011cec <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 80127c6:	f1c0 0201 	rsb	r2, r0, #1
 80127ca:	fa01 f202 	lsl.w	r2, r1, r2
 80127ce:	f302 021f 	ssat	r2, #32, r2
 80127d2:	f8d8 3000 	ldr.w	r3, [r8]
 80127d6:	fb52 f213 	smmulr	r2, r2, r3
 80127da:	f8db 3000 	ldr.w	r3, [fp]
 80127de:	4413      	add	r3, r2
 80127e0:	f303 0307 	ssat	r3, #8, r3
 80127e4:	f88a 3000 	strb.w	r3, [sl]
 80127e8:	e549      	b.n	801227e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 80127ea:	bf00      	nop

080127ec <st_int8_fill>:
 80127ec:	078b      	lsls	r3, r1, #30
 80127ee:	468c      	mov	ip, r1
 80127f0:	d00a      	beq.n	8012808 <st_int8_fill+0x1c>
 80127f2:	b912      	cbnz	r2, 80127fa <st_int8_fill+0xe>
 80127f4:	e045      	b.n	8012882 <st_int8_fill+0x96>
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	d044      	beq.n	8012884 <st_int8_fill+0x98>
 80127fa:	f80c 0b01 	strb.w	r0, [ip], #1
 80127fe:	f01c 0f03 	tst.w	ip, #3
 8012802:	f102 32ff 	add.w	r2, r2, #4294967295
 8012806:	d1f6      	bne.n	80127f6 <st_int8_fill+0xa>
 8012808:	b2c3      	uxtb	r3, r0
 801280a:	0911      	lsrs	r1, r2, #4
 801280c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8012810:	b510      	push	{r4, lr}
 8012812:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8012816:	b2a4      	uxth	r4, r4
 8012818:	ea44 0403 	orr.w	r4, r4, r3
 801281c:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8012820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012824:	ea44 0403 	orr.w	r4, r4, r3
 8012828:	d043      	beq.n	80128b2 <st_int8_fill+0xc6>
 801282a:	1e4b      	subs	r3, r1, #1
 801282c:	2b04      	cmp	r3, #4
 801282e:	d92a      	bls.n	8012886 <st_int8_fill+0x9a>
 8012830:	f01c 0f07 	tst.w	ip, #7
 8012834:	d127      	bne.n	8012886 <st_int8_fill+0x9a>
 8012836:	f10c 0310 	add.w	r3, ip, #16
 801283a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801283e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8012842:	e943 4404 	strd	r4, r4, [r3, #-16]
 8012846:	e943 4402 	strd	r4, r4, [r3, #-8]
 801284a:	3310      	adds	r3, #16
 801284c:	428b      	cmp	r3, r1
 801284e:	d1f8      	bne.n	8012842 <st_int8_fill+0x56>
 8012850:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012854:	44f4      	add	ip, lr
 8012856:	f002 0203 	and.w	r2, r2, #3
 801285a:	b15b      	cbz	r3, 8012874 <st_int8_fill+0x88>
 801285c:	1e59      	subs	r1, r3, #1
 801285e:	f8cc 4000 	str.w	r4, [ip]
 8012862:	d005      	beq.n	8012870 <st_int8_fill+0x84>
 8012864:	2901      	cmp	r1, #1
 8012866:	f8cc 4004 	str.w	r4, [ip, #4]
 801286a:	bf18      	it	ne
 801286c:	f8cc 4008 	strne.w	r4, [ip, #8]
 8012870:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8012874:	b1e2      	cbz	r2, 80128b0 <st_int8_fill+0xc4>
 8012876:	4601      	mov	r1, r0
 8012878:	4660      	mov	r0, ip
 801287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801287e:	f001 bbb3 	b.w	8013fe8 <memset>
 8012882:	4770      	bx	lr
 8012884:	4770      	bx	lr
 8012886:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801288a:	4663      	mov	r3, ip
 801288c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8012890:	601c      	str	r4, [r3, #0]
 8012892:	3310      	adds	r3, #16
 8012894:	f843 4c0c 	str.w	r4, [r3, #-12]
 8012898:	f843 4c08 	str.w	r4, [r3, #-8]
 801289c:	f843 4c04 	str.w	r4, [r3, #-4]
 80128a0:	4299      	cmp	r1, r3
 80128a2:	d1f5      	bne.n	8012890 <st_int8_fill+0xa4>
 80128a4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80128a8:	44f4      	add	ip, lr
 80128aa:	f002 0203 	and.w	r2, r2, #3
 80128ae:	e7d4      	b.n	801285a <st_int8_fill+0x6e>
 80128b0:	bd10      	pop	{r4, pc}
 80128b2:	0893      	lsrs	r3, r2, #2
 80128b4:	f002 0203 	and.w	r2, r2, #3
 80128b8:	e7cf      	b.n	801285a <st_int8_fill+0x6e>
 80128ba:	bf00      	nop

080128bc <st_int8_copy>:
 80128bc:	078b      	lsls	r3, r1, #30
 80128be:	d00a      	beq.n	80128d6 <st_int8_copy+0x1a>
 80128c0:	b912      	cbnz	r2, 80128c8 <st_int8_copy+0xc>
 80128c2:	e04f      	b.n	8012964 <st_int8_copy+0xa8>
 80128c4:	2a00      	cmp	r2, #0
 80128c6:	d04e      	beq.n	8012966 <st_int8_copy+0xaa>
 80128c8:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80128cc:	3a01      	subs	r2, #1
 80128ce:	f801 3b01 	strb.w	r3, [r1], #1
 80128d2:	078b      	lsls	r3, r1, #30
 80128d4:	d1f6      	bne.n	80128c4 <st_int8_copy+0x8>
 80128d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128da:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80128de:	d065      	beq.n	80129ac <st_int8_copy+0xf0>
 80128e0:	ea41 0300 	orr.w	r3, r1, r0
 80128e4:	075b      	lsls	r3, r3, #29
 80128e6:	d13f      	bne.n	8012968 <st_int8_copy+0xac>
 80128e8:	f10e 33ff 	add.w	r3, lr, #4294967295
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d93b      	bls.n	8012968 <st_int8_copy+0xac>
 80128f0:	f100 0310 	add.w	r3, r0, #16
 80128f4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80128f8:	f101 0c10 	add.w	ip, r1, #16
 80128fc:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8012900:	3310      	adds	r3, #16
 8012902:	f10c 0c10 	add.w	ip, ip, #16
 8012906:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 801290a:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 801290e:	4573      	cmp	r3, lr
 8012910:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8012914:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8012918:	d1f2      	bne.n	8012900 <st_int8_copy+0x44>
 801291a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801291e:	4421      	add	r1, r4
 8012920:	4420      	add	r0, r4
 8012922:	f002 0203 	and.w	r2, r2, #3
 8012926:	b16b      	cbz	r3, 8012944 <st_int8_copy+0x88>
 8012928:	6804      	ldr	r4, [r0, #0]
 801292a:	600c      	str	r4, [r1, #0]
 801292c:	1e5c      	subs	r4, r3, #1
 801292e:	d005      	beq.n	801293c <st_int8_copy+0x80>
 8012930:	6845      	ldr	r5, [r0, #4]
 8012932:	2c01      	cmp	r4, #1
 8012934:	604d      	str	r5, [r1, #4]
 8012936:	d001      	beq.n	801293c <st_int8_copy+0x80>
 8012938:	6884      	ldr	r4, [r0, #8]
 801293a:	608c      	str	r4, [r1, #8]
 801293c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012940:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012944:	b162      	cbz	r2, 8012960 <st_int8_copy+0xa4>
 8012946:	f990 3000 	ldrsb.w	r3, [r0]
 801294a:	3a01      	subs	r2, #1
 801294c:	700b      	strb	r3, [r1, #0]
 801294e:	d007      	beq.n	8012960 <st_int8_copy+0xa4>
 8012950:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012954:	2a01      	cmp	r2, #1
 8012956:	704b      	strb	r3, [r1, #1]
 8012958:	d002      	beq.n	8012960 <st_int8_copy+0xa4>
 801295a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801295e:	708b      	strb	r3, [r1, #2]
 8012960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012964:	4770      	bx	lr
 8012966:	4770      	bx	lr
 8012968:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801296c:	460b      	mov	r3, r1
 801296e:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8012972:	4684      	mov	ip, r0
 8012974:	f8dc 8000 	ldr.w	r8, [ip]
 8012978:	3310      	adds	r3, #16
 801297a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801297e:	f10c 0c10 	add.w	ip, ip, #16
 8012982:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8012986:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 801298a:	f843 8c10 	str.w	r8, [r3, #-16]
 801298e:	f843 7c0c 	str.w	r7, [r3, #-12]
 8012992:	f843 6c08 	str.w	r6, [r3, #-8]
 8012996:	f843 5c04 	str.w	r5, [r3, #-4]
 801299a:	459e      	cmp	lr, r3
 801299c:	d1ea      	bne.n	8012974 <st_int8_copy+0xb8>
 801299e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80129a2:	4421      	add	r1, r4
 80129a4:	4420      	add	r0, r4
 80129a6:	f002 0203 	and.w	r2, r2, #3
 80129aa:	e7bc      	b.n	8012926 <st_int8_copy+0x6a>
 80129ac:	0893      	lsrs	r3, r2, #2
 80129ae:	f002 0203 	and.w	r2, r2, #3
 80129b2:	e7b8      	b.n	8012926 <st_int8_copy+0x6a>

080129b4 <st_int8_reordered_no_shift_zero>:
 80129b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129b6:	0897      	lsrs	r7, r2, #2
 80129b8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 80129bc:	d02f      	beq.n	8012a1e <st_int8_reordered_no_shift_zero+0x6a>
 80129be:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80129c2:	460c      	mov	r4, r1
 80129c4:	f850 cb04 	ldr.w	ip, [r0], #4
 80129c8:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 80129cc:	fa2f fe8e 	sxtb16	lr, lr
 80129d0:	fade fe03 	ssub16	lr, lr, r3
 80129d4:	fa2f fc8c 	sxtb16	ip, ip
 80129d8:	fadc fc03 	ssub16	ip, ip, r3
 80129dc:	42a8      	cmp	r0, r5
 80129de:	f8c4 c000 	str.w	ip, [r4]
 80129e2:	f8c4 e004 	str.w	lr, [r4, #4]
 80129e6:	f104 0408 	add.w	r4, r4, #8
 80129ea:	d1eb      	bne.n	80129c4 <st_int8_reordered_no_shift_zero+0x10>
 80129ec:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80129f0:	f012 0203 	ands.w	r2, r2, #3
 80129f4:	d012      	beq.n	8012a1c <st_int8_reordered_no_shift_zero+0x68>
 80129f6:	f995 0000 	ldrsb.w	r0, [r5]
 80129fa:	b273      	sxtb	r3, r6
 80129fc:	3a01      	subs	r2, #1
 80129fe:	eba0 0003 	sub.w	r0, r0, r3
 8012a02:	8008      	strh	r0, [r1, #0]
 8012a04:	d00a      	beq.n	8012a1c <st_int8_reordered_no_shift_zero+0x68>
 8012a06:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8012a0a:	2a01      	cmp	r2, #1
 8012a0c:	eba0 0003 	sub.w	r0, r0, r3
 8012a10:	8048      	strh	r0, [r1, #2]
 8012a12:	d003      	beq.n	8012a1c <st_int8_reordered_no_shift_zero+0x68>
 8012a14:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	808b      	strh	r3, [r1, #4]
 8012a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a1e:	4605      	mov	r5, r0
 8012a20:	e7e6      	b.n	80129f0 <st_int8_reordered_no_shift_zero+0x3c>
 8012a22:	bf00      	nop

08012a24 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8012a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a28:	b09d      	sub	sp, #116	; 0x74
 8012a2a:	4683      	mov	fp, r0
 8012a2c:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8012a30:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012a32:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8012a36:	441d      	add	r5, r3
 8012a38:	9417      	str	r4, [sp, #92]	; 0x5c
 8012a3a:	0864      	lsrs	r4, r4, #1
 8012a3c:	9318      	str	r3, [sp, #96]	; 0x60
 8012a3e:	910c      	str	r1, [sp, #48]	; 0x30
 8012a40:	9216      	str	r2, [sp, #88]	; 0x58
 8012a42:	9008      	str	r0, [sp, #32]
 8012a44:	9515      	str	r5, [sp, #84]	; 0x54
 8012a46:	9419      	str	r4, [sp, #100]	; 0x64
 8012a48:	f000 81d2 	beq.w	8012df0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3cc>
 8012a4c:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8012a50:	4617      	mov	r7, r2
 8012a52:	1e62      	subs	r2, r4, #1
 8012a54:	460c      	mov	r4, r1
 8012a56:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012a58:	f1a0 0310 	sub.w	r3, r0, #16
 8012a5c:	b292      	uxth	r2, r2
 8012a5e:	46d9      	mov	r9, fp
 8012a60:	3108      	adds	r1, #8
 8012a62:	091b      	lsrs	r3, r3, #4
 8012a64:	960f      	str	r6, [sp, #60]	; 0x3c
 8012a66:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012a6a:	463a      	mov	r2, r7
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	3208      	adds	r2, #8
 8012a70:	910e      	str	r1, [sp, #56]	; 0x38
 8012a72:	4601      	mov	r1, r0
 8012a74:	3803      	subs	r0, #3
 8012a76:	9207      	str	r2, [sp, #28]
 8012a78:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012a7a:	900d      	str	r0, [sp, #52]	; 0x34
 8012a7c:	3204      	adds	r2, #4
 8012a7e:	9202      	str	r2, [sp, #8]
 8012a80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012a82:	3204      	adds	r2, #4
 8012a84:	9203      	str	r2, [sp, #12]
 8012a86:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012a88:	3204      	adds	r2, #4
 8012a8a:	9204      	str	r2, [sp, #16]
 8012a8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8012a8e:	3201      	adds	r2, #1
 8012a90:	9205      	str	r2, [sp, #20]
 8012a92:	1c6a      	adds	r2, r5, #1
 8012a94:	9206      	str	r2, [sp, #24]
 8012a96:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8012a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8012a9c:	019a      	lsls	r2, r3, #6
 8012a9e:	9210      	str	r2, [sp, #64]	; 0x40
 8012aa0:	011a      	lsls	r2, r3, #4
 8012aa2:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8012aa6:	9212      	str	r2, [sp, #72]	; 0x48
 8012aa8:	9311      	str	r3, [sp, #68]	; 0x44
 8012aaa:	1f0b      	subs	r3, r1, #4
 8012aac:	9314      	str	r3, [sp, #80]	; 0x50
 8012aae:	9a07      	ldr	r2, [sp, #28]
 8012ab0:	9c08      	ldr	r4, [sp, #32]
 8012ab2:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8012ab6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012aba:	2c0f      	cmp	r4, #15
 8012abc:	931b      	str	r3, [sp, #108]	; 0x6c
 8012abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ac0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012ac2:	921b      	str	r2, [sp, #108]	; 0x6c
 8012ac4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012ac6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012ac8:	f340 8285 	ble.w	8012fd6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5b2>
 8012acc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012ace:	464d      	mov	r5, r9
 8012ad0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012ad2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012ad4:	f8d4 e000 	ldr.w	lr, [r4]
 8012ad8:	f8d7 a000 	ldr.w	sl, [r7]
 8012adc:	f8d5 c000 	ldr.w	ip, [r5]
 8012ae0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8012ae4:	fb2c 330e 	smlad	r3, ip, lr, r3
 8012ae8:	fb2c 000a 	smlad	r0, ip, sl, r0
 8012aec:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8012af0:	fb28 110a 	smlad	r1, r8, sl, r1
 8012af4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8012af8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8012afc:	68aa      	ldr	r2, [r5, #8]
 8012afe:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8012b02:	fb22 330c 	smlad	r3, r2, ip, r3
 8012b06:	fb22 0008 	smlad	r0, r2, r8, r0
 8012b0a:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8012b0e:	fb2b 1808 	smlad	r8, fp, r8, r1
 8012b12:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8012b16:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8012b1a:	692a      	ldr	r2, [r5, #16]
 8012b1c:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8012b20:	fb22 330c 	smlad	r3, r2, ip, r3
 8012b24:	fb22 000b 	smlad	r0, r2, fp, r0
 8012b28:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8012b2c:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8012b30:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012b34:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8012b38:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8012b3c:	69e9      	ldr	r1, [r5, #28]
 8012b3e:	fb28 330c 	smlad	r3, r8, ip, r3
 8012b42:	fb28 000a 	smlad	r0, r8, sl, r0
 8012b46:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8012b4a:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8012b4e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8012b52:	6939      	ldr	r1, [r7, #16]
 8012b54:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8012b58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012b5a:	fb28 330e 	smlad	r3, r8, lr, r3
 8012b5e:	fb28 0001 	smlad	r0, r8, r1, r0
 8012b62:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8012b66:	fb22 a101 	smlad	r1, r2, r1, sl
 8012b6a:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8012b6e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8012b72:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 8012b76:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8012b78:	fb28 330e 	smlad	r3, r8, lr, r3
 8012b7c:	fb28 000a 	smlad	r0, r8, sl, r0
 8012b80:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8012b84:	fb22 120a 	smlad	r2, r2, sl, r1
 8012b88:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8012b8c:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8012b90:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8012b94:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8012b96:	fb28 330e 	smlad	r3, r8, lr, r3
 8012b9a:	fb28 080b 	smlad	r8, r8, fp, r0
 8012b9e:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8012ba2:	fb21 210b 	smlad	r1, r1, fp, r2
 8012ba6:	69e2      	ldr	r2, [r4, #28]
 8012ba8:	3720      	adds	r7, #32
 8012baa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012bac:	3420      	adds	r4, #32
 8012bae:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8012bb2:	3540      	adds	r5, #64	; 0x40
 8012bb4:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8012bb8:	fb20 3302 	smlad	r3, r0, r2, r3
 8012bbc:	fb20 800b 	smlad	r0, r0, fp, r8
 8012bc0:	fb2c e202 	smlad	r2, ip, r2, lr
 8012bc4:	fb2c 110b 	smlad	r1, ip, fp, r1
 8012bc8:	42a6      	cmp	r6, r4
 8012bca:	d183      	bne.n	8012ad4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xb0>
 8012bcc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012bce:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8012bd2:	44a9      	add	r9, r5
 8012bd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012bd6:	9501      	str	r5, [sp, #4]
 8012bd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012bda:	45ab      	cmp	fp, r5
 8012bdc:	f280 8204 	bge.w	8012fe8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8012be0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012be2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012be6:	eba5 050b 	sub.w	r5, r5, fp
 8012bea:	08ad      	lsrs	r5, r5, #2
 8012bec:	462e      	mov	r6, r5
 8012bee:	950b      	str	r5, [sp, #44]	; 0x2c
 8012bf0:	464d      	mov	r5, r9
 8012bf2:	3601      	adds	r6, #1
 8012bf4:	00f7      	lsls	r7, r6, #3
 8012bf6:	960a      	str	r6, [sp, #40]	; 0x28
 8012bf8:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 8012bfc:	9709      	str	r7, [sp, #36]	; 0x24
 8012bfe:	f8d4 e000 	ldr.w	lr, [r4]
 8012c02:	f8dc 7000 	ldr.w	r7, [ip]
 8012c06:	f8d5 a000 	ldr.w	sl, [r5]
 8012c0a:	686e      	ldr	r6, [r5, #4]
 8012c0c:	fb2a 330e 	smlad	r3, sl, lr, r3
 8012c10:	fb2a 0007 	smlad	r0, sl, r7, r0
 8012c14:	fb26 220e 	smlad	r2, r6, lr, r2
 8012c18:	fb26 1107 	smlad	r1, r6, r7, r1
 8012c1c:	6867      	ldr	r7, [r4, #4]
 8012c1e:	f10c 0c08 	add.w	ip, ip, #8
 8012c22:	68ae      	ldr	r6, [r5, #8]
 8012c24:	3408      	adds	r4, #8
 8012c26:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8012c2a:	3510      	adds	r5, #16
 8012c2c:	f85c ac04 	ldr.w	sl, [ip, #-4]
 8012c30:	fb26 3307 	smlad	r3, r6, r7, r3
 8012c34:	fb26 000a 	smlad	r0, r6, sl, r0
 8012c38:	fb2e 2207 	smlad	r2, lr, r7, r2
 8012c3c:	fb2e 110a 	smlad	r1, lr, sl, r1
 8012c40:	4544      	cmp	r4, r8
 8012c42:	d1dc      	bne.n	8012bfe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8012c44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012c46:	f10b 0b04 	add.w	fp, fp, #4
 8012c4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012c4c:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8012c50:	9c01      	ldr	r4, [sp, #4]
 8012c52:	442c      	add	r4, r5
 8012c54:	9401      	str	r4, [sp, #4]
 8012c56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012c58:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8012c5c:	9f08      	ldr	r7, [sp, #32]
 8012c5e:	455f      	cmp	r7, fp
 8012c60:	dd54      	ble.n	8012d0c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 8012c62:	f9b8 5000 	ldrsh.w	r5, [r8]
 8012c66:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 8012c6a:	f9b9 6000 	ldrsh.w	r6, [r9]
 8012c6e:	fb05 2204 	mla	r2, r5, r4, r2
 8012c72:	fb06 3305 	mla	r3, r6, r5, r3
 8012c76:	9d01      	ldr	r5, [sp, #4]
 8012c78:	f9b5 5000 	ldrsh.w	r5, [r5]
 8012c7c:	fb05 1104 	mla	r1, r5, r4, r1
 8012c80:	f10b 0401 	add.w	r4, fp, #1
 8012c84:	fb06 0005 	mla	r0, r6, r5, r0
 8012c88:	42a7      	cmp	r7, r4
 8012c8a:	dd3a      	ble.n	8012d02 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8012c8c:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8012c90:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8012c94:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8012c98:	fb05 2204 	mla	r2, r5, r4, r2
 8012c9c:	fb06 3305 	mla	r3, r6, r5, r3
 8012ca0:	9d01      	ldr	r5, [sp, #4]
 8012ca2:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8012ca6:	fb05 1104 	mla	r1, r5, r4, r1
 8012caa:	f10b 0402 	add.w	r4, fp, #2
 8012cae:	fb06 0005 	mla	r0, r6, r5, r0
 8012cb2:	42a7      	cmp	r7, r4
 8012cb4:	dd25      	ble.n	8012d02 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8012cb6:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8012cba:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8012cbe:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8012cc2:	fb05 2204 	mla	r2, r5, r4, r2
 8012cc6:	fb06 3305 	mla	r3, r6, r5, r3
 8012cca:	9d01      	ldr	r5, [sp, #4]
 8012ccc:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 8012cd0:	fb05 1104 	mla	r1, r5, r4, r1
 8012cd4:	f10b 0403 	add.w	r4, fp, #3
 8012cd8:	fb06 0005 	mla	r0, r6, r5, r0
 8012cdc:	42a7      	cmp	r7, r4
 8012cde:	dd10      	ble.n	8012d02 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8012ce0:	9c01      	ldr	r4, [sp, #4]
 8012ce2:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8012ce6:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8012cea:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 8012cee:	fb04 3305 	mla	r3, r4, r5, r3
 8012cf2:	fb04 0006 	mla	r0, r4, r6, r0
 8012cf6:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 8012cfa:	fb05 2204 	mla	r2, r5, r4, r2
 8012cfe:	fb06 1104 	mla	r1, r6, r4, r1
 8012d02:	9c08      	ldr	r4, [sp, #32]
 8012d04:	eba4 0b0b 	sub.w	fp, r4, fp
 8012d08:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 8012d0c:	9c02      	ldr	r4, [sp, #8]
 8012d0e:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8012d12:	2c15      	cmp	r4, #21
 8012d14:	f340 80e8 	ble.w	8012ee8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4c4>
 8012d18:	1ea6      	subs	r6, r4, #2
 8012d1a:	2501      	movs	r5, #1
 8012d1c:	3c01      	subs	r4, #1
 8012d1e:	fa05 f606 	lsl.w	r6, r5, r6
 8012d22:	9d03      	ldr	r5, [sp, #12]
 8012d24:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8012d28:	fb53 6305 	smmla	r3, r3, r5, r6
 8012d2c:	fb50 6005 	smmla	r0, r0, r5, r6
 8012d30:	9d04      	ldr	r5, [sp, #16]
 8012d32:	4123      	asrs	r3, r4
 8012d34:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8012d38:	443b      	add	r3, r7
 8012d3a:	f303 0307 	ssat	r3, #8, r3
 8012d3e:	4120      	asrs	r0, r4
 8012d40:	9c05      	ldr	r4, [sp, #20]
 8012d42:	4438      	add	r0, r7
 8012d44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012d48:	f300 0007 	ssat	r0, #8, r0
 8012d4c:	9b06      	ldr	r3, [sp, #24]
 8012d4e:	f803 0c01 	strb.w	r0, [r3, #-1]
 8012d52:	9b02      	ldr	r3, [sp, #8]
 8012d54:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8012d58:	2b15      	cmp	r3, #21
 8012d5a:	f340 80e5 	ble.w	8012f28 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x504>
 8012d5e:	1e9c      	subs	r4, r3, #2
 8012d60:	2001      	movs	r0, #1
 8012d62:	3b01      	subs	r3, #1
 8012d64:	fa00 f404 	lsl.w	r4, r0, r4
 8012d68:	9803      	ldr	r0, [sp, #12]
 8012d6a:	6800      	ldr	r0, [r0, #0]
 8012d6c:	fb52 4200 	smmla	r2, r2, r0, r4
 8012d70:	fb51 4100 	smmla	r1, r1, r0, r4
 8012d74:	9804      	ldr	r0, [sp, #16]
 8012d76:	411a      	asrs	r2, r3
 8012d78:	6805      	ldr	r5, [r0, #0]
 8012d7a:	442a      	add	r2, r5
 8012d7c:	f302 0207 	ssat	r2, #8, r2
 8012d80:	4119      	asrs	r1, r3
 8012d82:	9b05      	ldr	r3, [sp, #20]
 8012d84:	4429      	add	r1, r5
 8012d86:	701a      	strb	r2, [r3, #0]
 8012d88:	f301 0107 	ssat	r1, #8, r1
 8012d8c:	9b06      	ldr	r3, [sp, #24]
 8012d8e:	7019      	strb	r1, [r3, #0]
 8012d90:	9a07      	ldr	r2, [sp, #28]
 8012d92:	9b02      	ldr	r3, [sp, #8]
 8012d94:	3208      	adds	r2, #8
 8012d96:	3304      	adds	r3, #4
 8012d98:	9207      	str	r2, [sp, #28]
 8012d9a:	9a03      	ldr	r2, [sp, #12]
 8012d9c:	9302      	str	r3, [sp, #8]
 8012d9e:	3208      	adds	r2, #8
 8012da0:	9203      	str	r2, [sp, #12]
 8012da2:	9a04      	ldr	r2, [sp, #16]
 8012da4:	3208      	adds	r2, #8
 8012da6:	9204      	str	r2, [sp, #16]
 8012da8:	9a05      	ldr	r2, [sp, #20]
 8012daa:	3202      	adds	r2, #2
 8012dac:	9205      	str	r2, [sp, #20]
 8012dae:	9a06      	ldr	r2, [sp, #24]
 8012db0:	3202      	adds	r2, #2
 8012db2:	9206      	str	r2, [sp, #24]
 8012db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012db6:	4293      	cmp	r3, r2
 8012db8:	f47f ae79 	bne.w	8012aae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x8a>
 8012dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dbe:	46cb      	mov	fp, r9
 8012dc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012dc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012dc6:	9229      	str	r2, [sp, #164]	; 0xa4
 8012dc8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012dca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012dce:	922a      	str	r2, [sp, #168]	; 0xa8
 8012dd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8012dd2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8012dd6:	922b      	str	r2, [sp, #172]	; 0xac
 8012dd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012dda:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8012dde:	9215      	str	r2, [sp, #84]	; 0x54
 8012de0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012de2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012de6:	9216      	str	r2, [sp, #88]	; 0x58
 8012de8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012dea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dee:	9328      	str	r3, [sp, #160]	; 0xa0
 8012df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012df2:	07db      	lsls	r3, r3, #31
 8012df4:	d56f      	bpl.n	8012ed6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8012df6:	9a08      	ldr	r2, [sp, #32]
 8012df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012dfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012dfc:	0896      	lsrs	r6, r2, #2
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 8012e04:	f000 812e 	beq.w	8013064 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 8012e08:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8012e0c:	463c      	mov	r4, r7
 8012e0e:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 8012e12:	461a      	mov	r2, r3
 8012e14:	f8db 5000 	ldr.w	r5, [fp]
 8012e18:	f10b 0b08 	add.w	fp, fp, #8
 8012e1c:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8012e20:	f8d0 e000 	ldr.w	lr, [r0]
 8012e24:	fb25 330e 	smlad	r3, r5, lr, r3
 8012e28:	f8d4 e000 	ldr.w	lr, [r4]
 8012e2c:	fb25 220e 	smlad	r2, r5, lr, r2
 8012e30:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012e34:	3408      	adds	r4, #8
 8012e36:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012e3a:	3008      	adds	r0, #8
 8012e3c:	fb21 330e 	smlad	r3, r1, lr, r3
 8012e40:	fb21 2205 	smlad	r2, r1, r5, r2
 8012e44:	45b3      	cmp	fp, r6
 8012e46:	d1e5      	bne.n	8012e14 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3f0>
 8012e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e4a:	4467      	add	r7, ip
 8012e4c:	4461      	add	r1, ip
 8012e4e:	910c      	str	r1, [sp, #48]	; 0x30
 8012e50:	9908      	ldr	r1, [sp, #32]
 8012e52:	f011 0103 	ands.w	r1, r1, #3
 8012e56:	d01d      	beq.n	8012e94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8012e58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e5a:	3901      	subs	r1, #1
 8012e5c:	f9b6 0000 	ldrsh.w	r0, [r6]
 8012e60:	882c      	ldrh	r4, [r5, #0]
 8012e62:	b289      	uxth	r1, r1
 8012e64:	fb14 3300 	smlabb	r3, r4, r0, r3
 8012e68:	883c      	ldrh	r4, [r7, #0]
 8012e6a:	fb14 2200 	smlabb	r2, r4, r0, r2
 8012e6e:	b189      	cbz	r1, 8012e94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8012e70:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8012e74:	2901      	cmp	r1, #1
 8012e76:	886c      	ldrh	r4, [r5, #2]
 8012e78:	fb14 3300 	smlabb	r3, r4, r0, r3
 8012e7c:	887c      	ldrh	r4, [r7, #2]
 8012e7e:	fb14 2200 	smlabb	r2, r4, r0, r2
 8012e82:	d007      	beq.n	8012e94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8012e84:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8012e88:	88a8      	ldrh	r0, [r5, #4]
 8012e8a:	fb11 3300 	smlabb	r3, r1, r0, r3
 8012e8e:	88b8      	ldrh	r0, [r7, #4]
 8012e90:	fb11 2200 	smlabb	r2, r1, r0, r2
 8012e94:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8012e96:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012e9a:	2915      	cmp	r1, #21
 8012e9c:	f340 80a6 	ble.w	8012fec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c8>
 8012ea0:	1e8d      	subs	r5, r1, #2
 8012ea2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8012ea4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8012ea6:	3901      	subs	r1, #1
 8012ea8:	2601      	movs	r6, #1
 8012eaa:	6800      	ldr	r0, [r0, #0]
 8012eac:	6824      	ldr	r4, [r4, #0]
 8012eae:	40ae      	lsls	r6, r5
 8012eb0:	fb53 6500 	smmla	r5, r3, r0, r6
 8012eb4:	fb52 6300 	smmla	r3, r2, r0, r6
 8012eb8:	fa45 f201 	asr.w	r2, r5, r1
 8012ebc:	4422      	add	r2, r4
 8012ebe:	f302 0207 	ssat	r2, #8, r2
 8012ec2:	410b      	asrs	r3, r1
 8012ec4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012ec6:	4423      	add	r3, r4
 8012ec8:	f800 2b01 	strb.w	r2, [r0], #1
 8012ecc:	f303 0307 	ssat	r3, #8, r3
 8012ed0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ed2:	902b      	str	r0, [sp, #172]	; 0xac
 8012ed4:	7013      	strb	r3, [r2, #0]
 8012ed6:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8012eda:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 8012ede:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8012ee0:	4418      	add	r0, r3
 8012ee2:	b01d      	add	sp, #116	; 0x74
 8012ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee8:	2c00      	cmp	r4, #0
 8012eea:	dd34      	ble.n	8012f56 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x532>
 8012eec:	9d03      	ldr	r5, [sp, #12]
 8012eee:	005b      	lsls	r3, r3, #1
 8012ef0:	9e04      	ldr	r6, [sp, #16]
 8012ef2:	0040      	lsls	r0, r0, #1
 8012ef4:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8012ef8:	f856 6c04 	ldr.w	r6, [r6, #-4]
 8012efc:	fb53 6305 	smmla	r3, r3, r5, r6
 8012f00:	fb50 6005 	smmla	r0, r0, r5, r6
 8012f04:	4123      	asrs	r3, r4
 8012f06:	f303 0307 	ssat	r3, #8, r3
 8012f0a:	4120      	asrs	r0, r4
 8012f0c:	9c05      	ldr	r4, [sp, #20]
 8012f0e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012f12:	f300 0007 	ssat	r0, #8, r0
 8012f16:	9b06      	ldr	r3, [sp, #24]
 8012f18:	f803 0c01 	strb.w	r0, [r3, #-1]
 8012f1c:	9b02      	ldr	r3, [sp, #8]
 8012f1e:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8012f22:	2b15      	cmp	r3, #21
 8012f24:	f73f af1b 	bgt.w	8012d5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	dd36      	ble.n	8012f9a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x576>
 8012f2c:	9803      	ldr	r0, [sp, #12]
 8012f2e:	0052      	lsls	r2, r2, #1
 8012f30:	9c04      	ldr	r4, [sp, #16]
 8012f32:	0049      	lsls	r1, r1, #1
 8012f34:	6800      	ldr	r0, [r0, #0]
 8012f36:	6824      	ldr	r4, [r4, #0]
 8012f38:	fb52 4200 	smmla	r2, r2, r0, r4
 8012f3c:	fb51 4100 	smmla	r1, r1, r0, r4
 8012f40:	411a      	asrs	r2, r3
 8012f42:	f302 0207 	ssat	r2, #8, r2
 8012f46:	4119      	asrs	r1, r3
 8012f48:	9b05      	ldr	r3, [sp, #20]
 8012f4a:	701a      	strb	r2, [r3, #0]
 8012f4c:	f301 0107 	ssat	r1, #8, r1
 8012f50:	9b06      	ldr	r3, [sp, #24]
 8012f52:	7019      	strb	r1, [r3, #0]
 8012f54:	e71c      	b.n	8012d90 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8012f56:	f1c4 0401 	rsb	r4, r4, #1
 8012f5a:	fa03 f504 	lsl.w	r5, r3, r4
 8012f5e:	f305 051f 	ssat	r5, #32, r5
 8012f62:	9b03      	ldr	r3, [sp, #12]
 8012f64:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8012f68:	fb55 f516 	smmulr	r5, r5, r6
 8012f6c:	40a0      	lsls	r0, r4
 8012f6e:	f300 001f 	ssat	r0, #32, r0
 8012f72:	fb50 f016 	smmulr	r0, r0, r6
 8012f76:	9c04      	ldr	r4, [sp, #16]
 8012f78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012f7c:	442b      	add	r3, r5
 8012f7e:	f303 0307 	ssat	r3, #8, r3
 8012f82:	9d05      	ldr	r5, [sp, #20]
 8012f84:	f805 3c01 	strb.w	r3, [r5, #-1]
 8012f88:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012f8c:	4403      	add	r3, r0
 8012f8e:	f303 0307 	ssat	r3, #8, r3
 8012f92:	9806      	ldr	r0, [sp, #24]
 8012f94:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012f98:	e6db      	b.n	8012d52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32e>
 8012f9a:	f1c3 0301 	rsb	r3, r3, #1
 8012f9e:	fa02 f003 	lsl.w	r0, r2, r3
 8012fa2:	f300 001f 	ssat	r0, #32, r0
 8012fa6:	9a03      	ldr	r2, [sp, #12]
 8012fa8:	6814      	ldr	r4, [r2, #0]
 8012faa:	fb50 f014 	smmulr	r0, r0, r4
 8012fae:	fa01 f303 	lsl.w	r3, r1, r3
 8012fb2:	f303 021f 	ssat	r2, #32, r3
 8012fb6:	fb52 f214 	smmulr	r2, r2, r4
 8012fba:	9904      	ldr	r1, [sp, #16]
 8012fbc:	680b      	ldr	r3, [r1, #0]
 8012fbe:	4403      	add	r3, r0
 8012fc0:	f303 0307 	ssat	r3, #8, r3
 8012fc4:	9805      	ldr	r0, [sp, #20]
 8012fc6:	7003      	strb	r3, [r0, #0]
 8012fc8:	680b      	ldr	r3, [r1, #0]
 8012fca:	4413      	add	r3, r2
 8012fcc:	f303 0307 	ssat	r3, #8, r3
 8012fd0:	9a06      	ldr	r2, [sp, #24]
 8012fd2:	7013      	strb	r3, [r2, #0]
 8012fd4:	e6dc      	b.n	8012d90 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8012fd6:	f04f 0b00 	mov.w	fp, #0
 8012fda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012fdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8012fde:	45ab      	cmp	fp, r5
 8012fe0:	9401      	str	r4, [sp, #4]
 8012fe2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012fe4:	f6ff adfc 	blt.w	8012be0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8012fe8:	46a0      	mov	r8, r4
 8012fea:	e637      	b.n	8012c5c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8012fec:	2900      	cmp	r1, #0
 8012fee:	dd1a      	ble.n	8013026 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x602>
 8012ff0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8012ff2:	005b      	lsls	r3, r3, #1
 8012ff4:	0052      	lsls	r2, r2, #1
 8012ff6:	6804      	ldr	r4, [r0, #0]
 8012ff8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8012ffa:	6805      	ldr	r5, [r0, #0]
 8012ffc:	fb53 5004 	smmla	r0, r3, r4, r5
 8013000:	fb52 5304 	smmla	r3, r2, r4, r5
 8013004:	fa40 f201 	asr.w	r2, r0, r1
 8013008:	f302 0207 	ssat	r2, #8, r2
 801300c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801300e:	f800 2b01 	strb.w	r2, [r0], #1
 8013012:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013014:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013018:	4113      	asrs	r3, r2
 801301a:	f303 0307 	ssat	r3, #8, r3
 801301e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013020:	902b      	str	r0, [sp, #172]	; 0xac
 8013022:	7013      	strb	r3, [r2, #0]
 8013024:	e757      	b.n	8012ed6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8013026:	f1c1 0101 	rsb	r1, r1, #1
 801302a:	408b      	lsls	r3, r1
 801302c:	f303 031f 	ssat	r3, #32, r3
 8013030:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8013032:	6800      	ldr	r0, [r0, #0]
 8013034:	fb53 f310 	smmulr	r3, r3, r0
 8013038:	408a      	lsls	r2, r1
 801303a:	f302 021f 	ssat	r2, #32, r2
 801303e:	fb52 f210 	smmulr	r2, r2, r0
 8013042:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013044:	6809      	ldr	r1, [r1, #0]
 8013046:	440b      	add	r3, r1
 8013048:	f303 0307 	ssat	r3, #8, r3
 801304c:	992b      	ldr	r1, [sp, #172]	; 0xac
 801304e:	f801 3b01 	strb.w	r3, [r1], #1
 8013052:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	4413      	add	r3, r2
 8013058:	f303 0307 	ssat	r3, #8, r3
 801305c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801305e:	912b      	str	r1, [sp, #172]	; 0xac
 8013060:	7013      	strb	r3, [r2, #0]
 8013062:	e738      	b.n	8012ed6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8013064:	465e      	mov	r6, fp
 8013066:	461a      	mov	r2, r3
 8013068:	e6f2      	b.n	8012e50 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x42c>
 801306a:	bf00      	nop

0801306c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 801306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013070:	b093      	sub	sp, #76	; 0x4c
 8013072:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8013076:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801307a:	085d      	lsrs	r5, r3, #1
 801307c:	930e      	str	r3, [sp, #56]	; 0x38
 801307e:	9107      	str	r1, [sp, #28]
 8013080:	920d      	str	r2, [sp, #52]	; 0x34
 8013082:	9405      	str	r4, [sp, #20]
 8013084:	950f      	str	r5, [sp, #60]	; 0x3c
 8013086:	f000 81fc 	beq.w	8013482 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 801308a:	4616      	mov	r6, r2
 801308c:	1e6a      	subs	r2, r5, #1
 801308e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013090:	460f      	mov	r7, r1
 8013092:	b292      	uxth	r2, r2
 8013094:	f1a4 0310 	sub.w	r3, r4, #16
 8013098:	1d29      	adds	r1, r5, #4
 801309a:	f106 0a08 	add.w	sl, r6, #8
 801309e:	091b      	lsrs	r3, r3, #4
 80130a0:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 80130a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80130a6:	3301      	adds	r3, #1
 80130a8:	f102 0b02 	add.w	fp, r2, #2
 80130ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80130ae:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 80130b2:	9509      	str	r5, [sp, #36]	; 0x24
 80130b4:	3204      	adds	r2, #4
 80130b6:	1ee5      	subs	r5, r4, #3
 80130b8:	9202      	str	r2, [sp, #8]
 80130ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80130bc:	9508      	str	r5, [sp, #32]
 80130be:	3208      	adds	r2, #8
 80130c0:	9204      	str	r2, [sp, #16]
 80130c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80130c4:	3208      	adds	r2, #8
 80130c6:	9201      	str	r2, [sp, #4]
 80130c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80130ca:	3202      	adds	r2, #2
 80130cc:	9203      	str	r2, [sp, #12]
 80130ce:	019a      	lsls	r2, r3, #6
 80130d0:	011b      	lsls	r3, r3, #4
 80130d2:	920a      	str	r2, [sp, #40]	; 0x28
 80130d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80130d6:	1f23      	subs	r3, r4, #4
 80130d8:	930c      	str	r3, [sp, #48]	; 0x30
 80130da:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 80130de:	9905      	ldr	r1, [sp, #20]
 80130e0:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 80130e4:	9311      	str	r3, [sp, #68]	; 0x44
 80130e6:	290f      	cmp	r1, #15
 80130e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130ea:	9211      	str	r2, [sp, #68]	; 0x44
 80130ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130ee:	9c07      	ldr	r4, [sp, #28]
 80130f0:	f340 819c 	ble.w	801342c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 80130f4:	4601      	mov	r1, r0
 80130f6:	f8d4 c000 	ldr.w	ip, [r4]
 80130fa:	680e      	ldr	r6, [r1, #0]
 80130fc:	fb26 330c 	smlad	r3, r6, ip, r3
 8013100:	684d      	ldr	r5, [r1, #4]
 8013102:	fb25 220c 	smlad	r2, r5, ip, r2
 8013106:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801310a:	688e      	ldr	r6, [r1, #8]
 801310c:	fb26 360c 	smlad	r6, r6, ip, r3
 8013110:	68cd      	ldr	r5, [r1, #12]
 8013112:	fb25 250c 	smlad	r5, r5, ip, r2
 8013116:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801311a:	690b      	ldr	r3, [r1, #16]
 801311c:	fb23 660c 	smlad	r6, r3, ip, r6
 8013120:	694a      	ldr	r2, [r1, #20]
 8013122:	fb22 550c 	smlad	r5, r2, ip, r5
 8013126:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801312a:	698b      	ldr	r3, [r1, #24]
 801312c:	fb23 630c 	smlad	r3, r3, ip, r6
 8013130:	69ca      	ldr	r2, [r1, #28]
 8013132:	fb22 520c 	smlad	r2, r2, ip, r5
 8013136:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801313a:	6a0e      	ldr	r6, [r1, #32]
 801313c:	fb26 330c 	smlad	r3, r6, ip, r3
 8013140:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8013142:	fb25 220c 	smlad	r2, r5, ip, r2
 8013146:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801314a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 801314c:	fb26 360c 	smlad	r6, r6, ip, r3
 8013150:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8013152:	fb25 250c 	smlad	r5, r5, ip, r2
 8013156:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801315a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801315c:	fb23 660c 	smlad	r6, r3, ip, r6
 8013160:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8013162:	fb22 550c 	smlad	r5, r2, ip, r5
 8013166:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801316a:	3140      	adds	r1, #64	; 0x40
 801316c:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8013170:	3420      	adds	r4, #32
 8013172:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013176:	fb23 630c 	smlad	r3, r3, ip, r6
 801317a:	fb22 520c 	smlad	r2, r2, ip, r5
 801317e:	42bc      	cmp	r4, r7
 8013180:	d1b9      	bne.n	80130f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 8013182:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013184:	463c      	mov	r4, r7
 8013186:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801318a:	4408      	add	r0, r1
 801318c:	9908      	ldr	r1, [sp, #32]
 801318e:	458e      	cmp	lr, r1
 8013190:	da25      	bge.n	80131de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8013192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013194:	eba1 090e 	sub.w	r9, r1, lr
 8013198:	4601      	mov	r1, r0
 801319a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801319e:	f109 0501 	add.w	r5, r9, #1
 80131a2:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80131a6:	9506      	str	r5, [sp, #24]
 80131a8:	6825      	ldr	r5, [r4, #0]
 80131aa:	680e      	ldr	r6, [r1, #0]
 80131ac:	fb26 3305 	smlad	r3, r6, r5, r3
 80131b0:	684e      	ldr	r6, [r1, #4]
 80131b2:	fb26 2505 	smlad	r5, r6, r5, r2
 80131b6:	6866      	ldr	r6, [r4, #4]
 80131b8:	3110      	adds	r1, #16
 80131ba:	f851 cc08 	ldr.w	ip, [r1, #-8]
 80131be:	3408      	adds	r4, #8
 80131c0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80131c4:	fb2c 3306 	smlad	r3, ip, r6, r3
 80131c8:	fb22 5206 	smlad	r2, r2, r6, r5
 80131cc:	45a0      	cmp	r8, r4
 80131ce:	d1eb      	bne.n	80131a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 80131d0:	9906      	ldr	r1, [sp, #24]
 80131d2:	f10e 0e04 	add.w	lr, lr, #4
 80131d6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80131da:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80131de:	9e05      	ldr	r6, [sp, #20]
 80131e0:	4576      	cmp	r6, lr
 80131e2:	dd30      	ble.n	8013246 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 80131e4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80131e8:	8805      	ldrh	r5, [r0, #0]
 80131ea:	fb15 3301 	smlabb	r3, r5, r1, r3
 80131ee:	8845      	ldrh	r5, [r0, #2]
 80131f0:	fb11 2205 	smlabb	r2, r1, r5, r2
 80131f4:	f10e 0101 	add.w	r1, lr, #1
 80131f8:	428e      	cmp	r6, r1
 80131fa:	dd1f      	ble.n	801323c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80131fc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013200:	8885      	ldrh	r5, [r0, #4]
 8013202:	fb15 3301 	smlabb	r3, r5, r1, r3
 8013206:	88c5      	ldrh	r5, [r0, #6]
 8013208:	fb11 2205 	smlabb	r2, r1, r5, r2
 801320c:	f10e 0102 	add.w	r1, lr, #2
 8013210:	428e      	cmp	r6, r1
 8013212:	dd13      	ble.n	801323c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8013214:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013218:	8905      	ldrh	r5, [r0, #8]
 801321a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801321e:	8945      	ldrh	r5, [r0, #10]
 8013220:	fb11 2205 	smlabb	r2, r1, r5, r2
 8013224:	f10e 0103 	add.w	r1, lr, #3
 8013228:	428e      	cmp	r6, r1
 801322a:	dd07      	ble.n	801323c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801322c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013230:	8984      	ldrh	r4, [r0, #12]
 8013232:	fb14 3301 	smlabb	r3, r4, r1, r3
 8013236:	89c4      	ldrh	r4, [r0, #14]
 8013238:	fb11 2204 	smlabb	r2, r1, r4, r2
 801323c:	9905      	ldr	r1, [sp, #20]
 801323e:	eba1 0e0e 	sub.w	lr, r1, lr
 8013242:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8013246:	9902      	ldr	r1, [sp, #8]
 8013248:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 801324c:	2d15      	cmp	r5, #21
 801324e:	f340 80b0 	ble.w	80133b2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 8013252:	9e04      	ldr	r6, [sp, #16]
 8013254:	1eac      	subs	r4, r5, #2
 8013256:	2101      	movs	r1, #1
 8013258:	3d01      	subs	r5, #1
 801325a:	f1a6 0e04 	sub.w	lr, r6, #4
 801325e:	fa01 f404 	lsl.w	r4, r1, r4
 8013262:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8013266:	fb53 4401 	smmla	r4, r3, r1, r4
 801326a:	9b01      	ldr	r3, [sp, #4]
 801326c:	fa44 f505 	asr.w	r5, r4, r5
 8013270:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8013274:	1f1e      	subs	r6, r3, #4
 8013276:	442c      	add	r4, r5
 8013278:	f304 0407 	ssat	r4, #8, r4
 801327c:	f80b 4c02 	strb.w	r4, [fp, #-2]
 8013280:	9b03      	ldr	r3, [sp, #12]
 8013282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013286:	2b15      	cmp	r3, #21
 8013288:	f340 8085 	ble.w	8013396 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 801328c:	1e9c      	subs	r4, r3, #2
 801328e:	2501      	movs	r5, #1
 8013290:	3b01      	subs	r3, #1
 8013292:	6836      	ldr	r6, [r6, #0]
 8013294:	f8de 1000 	ldr.w	r1, [lr]
 8013298:	fa05 f404 	lsl.w	r4, r5, r4
 801329c:	fb52 4201 	smmla	r2, r2, r1, r4
 80132a0:	411a      	asrs	r2, r3
 80132a2:	4432      	add	r2, r6
 80132a4:	f302 0207 	ssat	r2, #8, r2
 80132a8:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80132ac:	9b02      	ldr	r3, [sp, #8]
 80132ae:	f10b 0b02 	add.w	fp, fp, #2
 80132b2:	f10a 0a08 	add.w	sl, sl, #8
 80132b6:	3304      	adds	r3, #4
 80132b8:	9302      	str	r3, [sp, #8]
 80132ba:	9b04      	ldr	r3, [sp, #16]
 80132bc:	3308      	adds	r3, #8
 80132be:	9304      	str	r3, [sp, #16]
 80132c0:	9b01      	ldr	r3, [sp, #4]
 80132c2:	3308      	adds	r3, #8
 80132c4:	9301      	str	r3, [sp, #4]
 80132c6:	9b03      	ldr	r3, [sp, #12]
 80132c8:	3304      	adds	r3, #4
 80132ca:	9303      	str	r3, [sp, #12]
 80132cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ce:	459b      	cmp	fp, r3
 80132d0:	f47f af03 	bne.w	80130da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 80132d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80132d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80132dc:	921e      	str	r2, [sp, #120]	; 0x78
 80132de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80132e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80132e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80132e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80132e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80132ec:	9220      	str	r2, [sp, #128]	; 0x80
 80132ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80132f4:	920d      	str	r2, [sp, #52]	; 0x34
 80132f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132f8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80132fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132fe:	07db      	lsls	r3, r3, #31
 8013300:	d545      	bpl.n	801338e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 8013302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	9b05      	ldr	r3, [sp, #20]
 8013308:	089e      	lsrs	r6, r3, #2
 801330a:	d014      	beq.n	8013336 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 801330c:	00f7      	lsls	r7, r6, #3
 801330e:	9b07      	ldr	r3, [sp, #28]
 8013310:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8013314:	6805      	ldr	r5, [r0, #0]
 8013316:	3008      	adds	r0, #8
 8013318:	f850 4c04 	ldr.w	r4, [r0, #-4]
 801331c:	f8d3 c000 	ldr.w	ip, [r3]
 8013320:	fb25 220c 	smlad	r2, r5, ip, r2
 8013324:	685d      	ldr	r5, [r3, #4]
 8013326:	3308      	adds	r3, #8
 8013328:	fb24 2205 	smlad	r2, r4, r5, r2
 801332c:	4286      	cmp	r6, r0
 801332e:	d1f1      	bne.n	8013314 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 8013330:	9b07      	ldr	r3, [sp, #28]
 8013332:	443b      	add	r3, r7
 8013334:	9307      	str	r3, [sp, #28]
 8013336:	9b05      	ldr	r3, [sp, #20]
 8013338:	f013 0303 	ands.w	r3, r3, #3
 801333c:	d011      	beq.n	8013362 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801333e:	3b01      	subs	r3, #1
 8013340:	9e07      	ldr	r6, [sp, #28]
 8013342:	8804      	ldrh	r4, [r0, #0]
 8013344:	8835      	ldrh	r5, [r6, #0]
 8013346:	b29b      	uxth	r3, r3
 8013348:	fb15 2204 	smlabb	r2, r5, r4, r2
 801334c:	b14b      	cbz	r3, 8013362 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801334e:	8845      	ldrh	r5, [r0, #2]
 8013350:	2b01      	cmp	r3, #1
 8013352:	8874      	ldrh	r4, [r6, #2]
 8013354:	fb15 2204 	smlabb	r2, r5, r4, r2
 8013358:	d003      	beq.n	8013362 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801335a:	8880      	ldrh	r0, [r0, #4]
 801335c:	88b3      	ldrh	r3, [r6, #4]
 801335e:	fb10 2203 	smlabb	r2, r0, r3, r2
 8013362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013368:	2b15      	cmp	r3, #21
 801336a:	dd62      	ble.n	8013432 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 801336c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801336e:	1e9e      	subs	r6, r3, #2
 8013370:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013372:	3b01      	subs	r3, #1
 8013374:	6825      	ldr	r5, [r4, #0]
 8013376:	2401      	movs	r4, #1
 8013378:	6800      	ldr	r0, [r0, #0]
 801337a:	40b4      	lsls	r4, r6
 801337c:	fb52 4200 	smmla	r2, r2, r0, r4
 8013380:	fa42 f303 	asr.w	r3, r2, r3
 8013384:	442b      	add	r3, r5
 8013386:	f303 0307 	ssat	r3, #8, r3
 801338a:	f801 3b01 	strb.w	r3, [r1], #1
 801338e:	4608      	mov	r0, r1
 8013390:	b013      	add	sp, #76	; 0x4c
 8013392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013396:	2b00      	cmp	r3, #0
 8013398:	dd21      	ble.n	80133de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 801339a:	f8de 1000 	ldr.w	r1, [lr]
 801339e:	0052      	lsls	r2, r2, #1
 80133a0:	6834      	ldr	r4, [r6, #0]
 80133a2:	fb52 4201 	smmla	r2, r2, r1, r4
 80133a6:	411a      	asrs	r2, r3
 80133a8:	f302 0307 	ssat	r3, #8, r2
 80133ac:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80133b0:	e77c      	b.n	80132ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80133b2:	2d00      	cmp	r5, #0
 80133b4:	dd24      	ble.n	8013400 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 80133b6:	9e04      	ldr	r6, [sp, #16]
 80133b8:	005b      	lsls	r3, r3, #1
 80133ba:	9c01      	ldr	r4, [sp, #4]
 80133bc:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80133c0:	f1a6 0e04 	sub.w	lr, r6, #4
 80133c4:	f854 4c08 	ldr.w	r4, [r4, #-8]
 80133c8:	fb53 4301 	smmla	r3, r3, r1, r4
 80133cc:	9c01      	ldr	r4, [sp, #4]
 80133ce:	fa43 f505 	asr.w	r5, r3, r5
 80133d2:	1f26      	subs	r6, r4, #4
 80133d4:	f305 0507 	ssat	r5, #8, r5
 80133d8:	f80b 5c02 	strb.w	r5, [fp, #-2]
 80133dc:	e750      	b.n	8013280 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 80133de:	f1c3 0301 	rsb	r3, r3, #1
 80133e2:	fa02 f303 	lsl.w	r3, r2, r3
 80133e6:	f303 031f 	ssat	r3, #32, r3
 80133ea:	f8de 2000 	ldr.w	r2, [lr]
 80133ee:	fb53 f312 	smmulr	r3, r3, r2
 80133f2:	6832      	ldr	r2, [r6, #0]
 80133f4:	441a      	add	r2, r3
 80133f6:	f302 0207 	ssat	r2, #8, r2
 80133fa:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80133fe:	e755      	b.n	80132ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8013400:	f1c5 0501 	rsb	r5, r5, #1
 8013404:	40ab      	lsls	r3, r5
 8013406:	f303 031f 	ssat	r3, #32, r3
 801340a:	9904      	ldr	r1, [sp, #16]
 801340c:	f1a1 0e04 	sub.w	lr, r1, #4
 8013410:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8013414:	fb53 f111 	smmulr	r1, r3, r1
 8013418:	9c01      	ldr	r4, [sp, #4]
 801341a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801341e:	1f26      	subs	r6, r4, #4
 8013420:	440b      	add	r3, r1
 8013422:	f303 0307 	ssat	r3, #8, r3
 8013426:	f80b 3c02 	strb.w	r3, [fp, #-2]
 801342a:	e729      	b.n	8013280 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801342c:	f04f 0e00 	mov.w	lr, #0
 8013430:	e6ac      	b.n	801318c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 8013432:	2b00      	cmp	r3, #0
 8013434:	dd10      	ble.n	8013458 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 8013436:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013438:	0052      	lsls	r2, r2, #1
 801343a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801343c:	6800      	ldr	r0, [r0, #0]
 801343e:	6824      	ldr	r4, [r4, #0]
 8013440:	fb52 4200 	smmla	r2, r2, r0, r4
 8013444:	fa42 f303 	asr.w	r3, r2, r3
 8013448:	f303 0307 	ssat	r3, #8, r3
 801344c:	f801 3b01 	strb.w	r3, [r1], #1
 8013450:	4608      	mov	r0, r1
 8013452:	b013      	add	sp, #76	; 0x4c
 8013454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013458:	f1c3 0301 	rsb	r3, r3, #1
 801345c:	fa02 f303 	lsl.w	r3, r2, r3
 8013460:	f303 031f 	ssat	r3, #32, r3
 8013464:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013466:	6812      	ldr	r2, [r2, #0]
 8013468:	fb53 f312 	smmulr	r3, r3, r2
 801346c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801346e:	6812      	ldr	r2, [r2, #0]
 8013470:	4413      	add	r3, r2
 8013472:	f303 0307 	ssat	r3, #8, r3
 8013476:	f801 3b01 	strb.w	r3, [r1], #1
 801347a:	4608      	mov	r0, r1
 801347c:	b013      	add	sp, #76	; 0x4c
 801347e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013482:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013484:	e73a      	b.n	80132fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 8013486:	bf00      	nop

08013488 <st_int8_avepool>:
 8013488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801348c:	b095      	sub	sp, #84	; 0x54
 801348e:	4699      	mov	r9, r3
 8013490:	4692      	mov	sl, r2
 8013492:	ee80 6a20 	vdiv.f32	s12, s0, s1
 8013496:	9102      	str	r1, [sp, #8]
 8013498:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 801349c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80134a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80134a2:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80134a6:	930d      	str	r3, [sp, #52]	; 0x34
 80134a8:	9110      	str	r1, [sp, #64]	; 0x40
 80134aa:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80134ae:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 80134b2:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 80134b6:	9309      	str	r3, [sp, #36]	; 0x24
 80134b8:	9104      	str	r1, [sp, #16]
 80134ba:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80134be:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 80134c2:	930e      	str	r3, [sp, #56]	; 0x38
 80134c4:	ee03 1a90 	vmov	s7, r1
 80134c8:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 80134cc:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80134d0:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 80134d4:	9211      	str	r2, [sp, #68]	; 0x44
 80134d6:	2a00      	cmp	r2, #0
 80134d8:	f000 80b3 	beq.w	8013642 <st_int8_avepool+0x1ba>
 80134dc:	eeb4 0a60 	vcmp.f32	s0, s1
 80134e0:	ee03 1a10 	vmov	s6, r1
 80134e4:	4683      	mov	fp, r0
 80134e6:	ee13 1a90 	vmov	r1, s7
 80134ea:	ee13 0a10 	vmov	r0, s6
 80134ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f2:	bf0c      	ite	eq
 80134f4:	2201      	moveq	r2, #1
 80134f6:	2200      	movne	r2, #0
 80134f8:	4281      	cmp	r1, r0
 80134fa:	bf14      	ite	ne
 80134fc:	2200      	movne	r2, #0
 80134fe:	f002 0201 	andeq.w	r2, r2, #1
 8013502:	f1b8 0f01 	cmp.w	r8, #1
 8013506:	9201      	str	r2, [sp, #4]
 8013508:	f040 80c2 	bne.w	8013690 <st_int8_avepool+0x208>
 801350c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801350e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8013688 <st_int8_avepool+0x200>
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	eddf 2a5d 	vldr	s5, [pc, #372]	; 801368c <st_int8_avepool+0x204>
 8013518:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801351c:	b29b      	uxth	r3, r3
 801351e:	1a89      	subs	r1, r1, r2
 8013520:	4252      	negs	r2, r2
 8013522:	9306      	str	r3, [sp, #24]
 8013524:	b293      	uxth	r3, r2
 8013526:	2200      	movs	r2, #0
 8013528:	910d      	str	r1, [sp, #52]	; 0x34
 801352a:	930c      	str	r3, [sp, #48]	; 0x30
 801352c:	4613      	mov	r3, r2
 801352e:	9904      	ldr	r1, [sp, #16]
 8013530:	2900      	cmp	r1, #0
 8013532:	f000 80a6 	beq.w	8013682 <st_int8_avepool+0x1fa>
 8013536:	b292      	uxth	r2, r2
 8013538:	2100      	movs	r1, #0
 801353a:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 801353e:	9207      	str	r2, [sp, #28]
 8013540:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8013544:	9a04      	ldr	r2, [sp, #16]
 8013546:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801354a:	4688      	mov	r8, r1
 801354c:	fb02 f303 	mul.w	r3, r2, r3
 8013550:	9a06      	ldr	r2, [sp, #24]
 8013552:	9308      	str	r3, [sp, #32]
 8013554:	fa0f fe82 	sxth.w	lr, r2
 8013558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	b21b      	sxth	r3, r3
 801355e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013562:	9303      	str	r3, [sp, #12]
 8013564:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013568:	9305      	str	r3, [sp, #20]
 801356a:	b28b      	uxth	r3, r1
 801356c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801356e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8013572:	930a      	str	r3, [sp, #40]	; 0x28
 8013574:	4570      	cmp	r0, lr
 8013576:	9b08      	ldr	r3, [sp, #32]
 8013578:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801357c:	4498      	add	r8, r3
 801357e:	da79      	bge.n	8013674 <st_int8_avepool+0x1ec>
 8013580:	2700      	movs	r7, #0
 8013582:	46bc      	mov	ip, r7
 8013584:	42a6      	cmp	r6, r4
 8013586:	da17      	bge.n	80135b8 <st_int8_avepool+0x130>
 8013588:	43c5      	mvns	r5, r0
 801358a:	4548      	cmp	r0, r9
 801358c:	fb0a f200 	mul.w	r2, sl, r0
 8013590:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8013594:	da10      	bge.n	80135b8 <st_int8_avepool+0x130>
 8013596:	4432      	add	r2, r6
 8013598:	4633      	mov	r3, r6
 801359a:	445a      	add	r2, fp
 801359c:	0419      	lsls	r1, r3, #16
 801359e:	d406      	bmi.n	80135ae <st_int8_avepool+0x126>
 80135a0:	b12d      	cbz	r5, 80135ae <st_int8_avepool+0x126>
 80135a2:	4553      	cmp	r3, sl
 80135a4:	da03      	bge.n	80135ae <st_int8_avepool+0x126>
 80135a6:	f992 1000 	ldrsb.w	r1, [r2]
 80135aa:	3701      	adds	r7, #1
 80135ac:	448c      	add	ip, r1
 80135ae:	3301      	adds	r3, #1
 80135b0:	3201      	adds	r2, #1
 80135b2:	b219      	sxth	r1, r3
 80135b4:	42a1      	cmp	r1, r4
 80135b6:	dbf1      	blt.n	801359c <st_int8_avepool+0x114>
 80135b8:	3001      	adds	r0, #1
 80135ba:	b200      	sxth	r0, r0
 80135bc:	4570      	cmp	r0, lr
 80135be:	dbe1      	blt.n	8013584 <st_int8_avepool+0xfc>
 80135c0:	9b01      	ldr	r3, [sp, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d140      	bne.n	8013648 <st_int8_avepool+0x1c0>
 80135c6:	ee07 ca90 	vmov	s15, ip
 80135ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80135ce:	ee07 7a90 	vmov	s15, r7
 80135d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80135d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135da:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80135de:	eeb0 7a64 	vmov.f32	s14, s9
 80135e2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80135e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80135ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ee:	fe65 7a25 	vselge.f32	s15, s10, s11
 80135f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135fa:	ee17 3a90 	vmov	r3, s15
 80135fe:	f303 0307 	ssat	r3, #8, r3
 8013602:	9a02      	ldr	r2, [sp, #8]
 8013604:	f802 3008 	strb.w	r3, [r2, r8]
 8013608:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801360a:	9b05      	ldr	r3, [sp, #20]
 801360c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801360e:	4403      	add	r3, r0
 8013610:	9a03      	ldr	r2, [sp, #12]
 8013612:	3101      	adds	r1, #1
 8013614:	b29b      	uxth	r3, r3
 8013616:	4402      	add	r2, r0
 8013618:	b209      	sxth	r1, r1
 801361a:	9305      	str	r3, [sp, #20]
 801361c:	b292      	uxth	r2, r2
 801361e:	9b04      	ldr	r3, [sp, #16]
 8013620:	4688      	mov	r8, r1
 8013622:	9203      	str	r2, [sp, #12]
 8013624:	428b      	cmp	r3, r1
 8013626:	dca0      	bgt.n	801356a <st_int8_avepool+0xe2>
 8013628:	9a07      	ldr	r2, [sp, #28]
 801362a:	9b06      	ldr	r3, [sp, #24]
 801362c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801362e:	3201      	adds	r2, #1
 8013630:	440b      	add	r3, r1
 8013632:	b212      	sxth	r2, r2
 8013634:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013636:	b29b      	uxth	r3, r3
 8013638:	4291      	cmp	r1, r2
 801363a:	9306      	str	r3, [sp, #24]
 801363c:	4613      	mov	r3, r2
 801363e:	f73f af76 	bgt.w	801352e <st_int8_avepool+0xa6>
 8013642:	b015      	add	sp, #84	; 0x54
 8013644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013648:	f1bc 0f00 	cmp.w	ip, #0
 801364c:	db09      	blt.n	8013662 <st_int8_avepool+0x1da>
 801364e:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 8013652:	fbb3 f7f7 	udiv	r7, r3, r7
 8013656:	f307 0307 	ssat	r3, #8, r7
 801365a:	9a02      	ldr	r2, [sp, #8]
 801365c:	f802 3008 	strb.w	r3, [r2, r8]
 8013660:	e7d2      	b.n	8013608 <st_int8_avepool+0x180>
 8013662:	2f00      	cmp	r7, #0
 8013664:	463b      	mov	r3, r7
 8013666:	bfb8      	it	lt
 8013668:	1c7b      	addlt	r3, r7, #1
 801366a:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801366e:	fb93 f7f7 	sdiv	r7, r3, r7
 8013672:	e7f0      	b.n	8013656 <st_int8_avepool+0x1ce>
 8013674:	9b01      	ldr	r3, [sp, #4]
 8013676:	2b00      	cmp	r3, #0
 8013678:	f040 80df 	bne.w	801383a <st_int8_avepool+0x3b2>
 801367c:	eef0 7a62 	vmov.f32	s15, s5
 8013680:	e7ab      	b.n	80135da <st_int8_avepool+0x152>
 8013682:	b293      	uxth	r3, r2
 8013684:	9307      	str	r3, [sp, #28]
 8013686:	e7cf      	b.n	8013628 <st_int8_avepool+0x1a0>
 8013688:	befffffc 	.word	0xbefffffc
 801368c:	7fc00000 	.word	0x7fc00000
 8013690:	425b      	negs	r3, r3
 8013692:	2200      	movs	r2, #0
 8013694:	9904      	ldr	r1, [sp, #16]
 8013696:	b29b      	uxth	r3, r3
 8013698:	f8cd b00c 	str.w	fp, [sp, #12]
 801369c:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8013688 <st_int8_avepool+0x200>
 80136a0:	46d3      	mov	fp, sl
 80136a2:	9308      	str	r3, [sp, #32]
 80136a4:	46ca      	mov	sl, r9
 80136a6:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 801368c <st_int8_avepool+0x204>
 80136aa:	4613      	mov	r3, r2
 80136ac:	2900      	cmp	r1, #0
 80136ae:	f000 80a3 	beq.w	80137f8 <st_int8_avepool+0x370>
 80136b2:	b292      	uxth	r2, r2
 80136b4:	2100      	movs	r1, #0
 80136b6:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 80136ba:	920c      	str	r2, [sp, #48]	; 0x30
 80136bc:	9a04      	ldr	r2, [sp, #16]
 80136be:	fb03 f302 	mul.w	r3, r3, r2
 80136c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80136c6:	4253      	negs	r3, r2
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	9306      	str	r3, [sp, #24]
 80136cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136ce:	1a9b      	subs	r3, r3, r2
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	9307      	str	r3, [sp, #28]
 80136d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136d8:	4413      	add	r3, r2
 80136da:	fa0f fe83 	sxth.w	lr, r3
 80136de:	b213      	sxth	r3, r2
 80136e0:	930a      	str	r3, [sp, #40]	; 0x28
 80136e2:	460b      	mov	r3, r1
 80136e4:	f1b8 0f00 	cmp.w	r8, #0
 80136e8:	f000 80a4 	beq.w	8013834 <st_int8_avepool+0x3ac>
 80136ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80136ee:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 80136f2:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 80136f6:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 80136fa:	4413      	add	r3, r2
 80136fc:	b28a      	uxth	r2, r1
 80136fe:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8013702:	920b      	str	r2, [sp, #44]	; 0x2c
 8013704:	9a02      	ldr	r2, [sp, #8]
 8013706:	fb08 2303 	mla	r3, r8, r3, r2
 801370a:	9312      	str	r3, [sp, #72]	; 0x48
 801370c:	2300      	movs	r3, #0
 801370e:	4699      	mov	r9, r3
 8013710:	9305      	str	r3, [sp, #20]
 8013712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013714:	4570      	cmp	r0, lr
 8013716:	f280 8088 	bge.w	801382a <st_int8_avepool+0x3a2>
 801371a:	2700      	movs	r7, #0
 801371c:	46bc      	mov	ip, r7
 801371e:	42ae      	cmp	r6, r5
 8013720:	da1a      	bge.n	8013758 <st_int8_avepool+0x2d0>
 8013722:	43c4      	mvns	r4, r0
 8013724:	4550      	cmp	r0, sl
 8013726:	fb0b f300 	mul.w	r3, fp, r0
 801372a:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 801372e:	da13      	bge.n	8013758 <st_int8_avepool+0x2d0>
 8013730:	199a      	adds	r2, r3, r6
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	fb08 9202 	mla	r2, r8, r2, r9
 8013738:	441a      	add	r2, r3
 801373a:	4633      	mov	r3, r6
 801373c:	0419      	lsls	r1, r3, #16
 801373e:	d406      	bmi.n	801374e <st_int8_avepool+0x2c6>
 8013740:	b12c      	cbz	r4, 801374e <st_int8_avepool+0x2c6>
 8013742:	459b      	cmp	fp, r3
 8013744:	dd03      	ble.n	801374e <st_int8_avepool+0x2c6>
 8013746:	f992 1000 	ldrsb.w	r1, [r2]
 801374a:	3701      	adds	r7, #1
 801374c:	448c      	add	ip, r1
 801374e:	3301      	adds	r3, #1
 8013750:	4442      	add	r2, r8
 8013752:	b219      	sxth	r1, r3
 8013754:	42a9      	cmp	r1, r5
 8013756:	dbf1      	blt.n	801373c <st_int8_avepool+0x2b4>
 8013758:	3001      	adds	r0, #1
 801375a:	b200      	sxth	r0, r0
 801375c:	4570      	cmp	r0, lr
 801375e:	dbde      	blt.n	801371e <st_int8_avepool+0x296>
 8013760:	9b01      	ldr	r3, [sp, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d14b      	bne.n	80137fe <st_int8_avepool+0x376>
 8013766:	ee07 ca90 	vmov	s15, ip
 801376a:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 801376e:	ee07 7a90 	vmov	s15, r7
 8013772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013776:	eec2 7a87 	vdiv.f32	s15, s5, s14
 801377a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801377e:	eeb0 7a44 	vmov.f32	s14, s8
 8013782:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013786:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801378e:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8013792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801379a:	ee17 3a90 	vmov	r3, s15
 801379e:	f303 0307 	ssat	r3, #8, r3
 80137a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80137a4:	f802 3009 	strb.w	r3, [r2, r9]
 80137a8:	9b05      	ldr	r3, [sp, #20]
 80137aa:	3301      	adds	r3, #1
 80137ac:	b21b      	sxth	r3, r3
 80137ae:	4543      	cmp	r3, r8
 80137b0:	4699      	mov	r9, r3
 80137b2:	9305      	str	r3, [sp, #20]
 80137b4:	dbad      	blt.n	8013712 <st_int8_avepool+0x28a>
 80137b6:	9a06      	ldr	r2, [sp, #24]
 80137b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80137ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137bc:	4402      	add	r2, r0
 80137be:	9b07      	ldr	r3, [sp, #28]
 80137c0:	3101      	adds	r1, #1
 80137c2:	b292      	uxth	r2, r2
 80137c4:	4403      	add	r3, r0
 80137c6:	b209      	sxth	r1, r1
 80137c8:	9206      	str	r2, [sp, #24]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	9a04      	ldr	r2, [sp, #16]
 80137ce:	9307      	str	r3, [sp, #28]
 80137d0:	460b      	mov	r3, r1
 80137d2:	4291      	cmp	r1, r2
 80137d4:	db86      	blt.n	80136e4 <st_int8_avepool+0x25c>
 80137d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137d8:	9b08      	ldr	r3, [sp, #32]
 80137da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80137dc:	3201      	adds	r2, #1
 80137de:	440b      	add	r3, r1
 80137e0:	b212      	sxth	r2, r2
 80137e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	4291      	cmp	r1, r2
 80137e8:	9308      	str	r3, [sp, #32]
 80137ea:	4613      	mov	r3, r2
 80137ec:	f77f af29 	ble.w	8013642 <st_int8_avepool+0x1ba>
 80137f0:	9904      	ldr	r1, [sp, #16]
 80137f2:	2900      	cmp	r1, #0
 80137f4:	f47f af5d 	bne.w	80136b2 <st_int8_avepool+0x22a>
 80137f8:	b293      	uxth	r3, r2
 80137fa:	930c      	str	r3, [sp, #48]	; 0x30
 80137fc:	e7eb      	b.n	80137d6 <st_int8_avepool+0x34e>
 80137fe:	f1bc 0f00 	cmp.w	ip, #0
 8013802:	db09      	blt.n	8013818 <st_int8_avepool+0x390>
 8013804:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8013808:	fbbc f7f7 	udiv	r7, ip, r7
 801380c:	f307 0707 	ssat	r7, #8, r7
 8013810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013812:	f803 7009 	strb.w	r7, [r3, r9]
 8013816:	e7c7      	b.n	80137a8 <st_int8_avepool+0x320>
 8013818:	2f00      	cmp	r7, #0
 801381a:	463b      	mov	r3, r7
 801381c:	bfb8      	it	lt
 801381e:	1c7b      	addlt	r3, r7, #1
 8013820:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8013824:	fb93 f7f7 	sdiv	r7, r3, r7
 8013828:	e7f0      	b.n	801380c <st_int8_avepool+0x384>
 801382a:	9b01      	ldr	r3, [sp, #4]
 801382c:	b92b      	cbnz	r3, 801383a <st_int8_avepool+0x3b2>
 801382e:	eef0 7a66 	vmov.f32	s15, s13
 8013832:	e7a2      	b.n	801377a <st_int8_avepool+0x2f2>
 8013834:	b28b      	uxth	r3, r1
 8013836:	930b      	str	r3, [sp, #44]	; 0x2c
 8013838:	e7bd      	b.n	80137b6 <st_int8_avepool+0x32e>
 801383a:	deff      	udf	#255	; 0xff

0801383c <st_dsp_arm_fill_q15>:
 801383c:	b510      	push	{r4, lr}
 801383e:	b284      	uxth	r4, r0
 8013840:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8013844:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8013848:	d013      	beq.n	8013872 <st_dsp_arm_fill_q15+0x36>
 801384a:	f10e 33ff 	add.w	r3, lr, #4294967295
 801384e:	2b09      	cmp	r3, #9
 8013850:	460b      	mov	r3, r1
 8013852:	d919      	bls.n	8013888 <st_dsp_arm_fill_q15+0x4c>
 8013854:	f011 0f07 	tst.w	r1, #7
 8013858:	d116      	bne.n	8013888 <st_dsp_arm_fill_q15+0x4c>
 801385a:	f04f 0c00 	mov.w	ip, #0
 801385e:	f10c 0c01 	add.w	ip, ip, #1
 8013862:	45e6      	cmp	lr, ip
 8013864:	e9c3 4400 	strd	r4, r4, [r3]
 8013868:	f103 0308 	add.w	r3, r3, #8
 801386c:	d1f7      	bne.n	801385e <st_dsp_arm_fill_q15+0x22>
 801386e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8013872:	f012 0203 	ands.w	r2, r2, #3
 8013876:	d006      	beq.n	8013886 <st_dsp_arm_fill_q15+0x4a>
 8013878:	3a01      	subs	r2, #1
 801387a:	8008      	strh	r0, [r1, #0]
 801387c:	d003      	beq.n	8013886 <st_dsp_arm_fill_q15+0x4a>
 801387e:	2a01      	cmp	r2, #1
 8013880:	8048      	strh	r0, [r1, #2]
 8013882:	bf18      	it	ne
 8013884:	8088      	strhne	r0, [r1, #4]
 8013886:	bd10      	pop	{r4, pc}
 8013888:	46f4      	mov	ip, lr
 801388a:	f1bc 0c01 	subs.w	ip, ip, #1
 801388e:	601c      	str	r4, [r3, #0]
 8013890:	605c      	str	r4, [r3, #4]
 8013892:	f103 0308 	add.w	r3, r3, #8
 8013896:	d1f8      	bne.n	801388a <st_dsp_arm_fill_q15+0x4e>
 8013898:	e7e9      	b.n	801386e <st_dsp_arm_fill_q15+0x32>
 801389a:	bf00      	nop

0801389c <st_dsp_arm_float_to_q15>:
 801389c:	b530      	push	{r4, r5, lr}
 801389e:	0895      	lsrs	r5, r2, #2
 80138a0:	d069      	beq.n	8013976 <st_dsp_arm_float_to_q15+0xda>
 80138a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80138a6:	f100 0c10 	add.w	ip, r0, #16
 80138aa:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80138ae:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8013a04 <st_dsp_arm_float_to_q15+0x168>
 80138b2:	f101 0e08 	add.w	lr, r1, #8
 80138b6:	462c      	mov	r4, r5
 80138b8:	ed5c 7a04 	vldr	s15, [ip, #-16]
 80138bc:	ee67 6a86 	vmul.f32	s13, s15, s12
 80138c0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80138c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c8:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80138cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138d4:	ee17 3a90 	vmov	r3, s15
 80138d8:	f303 030f 	ssat	r3, #16, r3
 80138dc:	f82e 3c08 	strh.w	r3, [lr, #-8]
 80138e0:	ed5c 7a03 	vldr	s15, [ip, #-12]
 80138e4:	ee67 6a86 	vmul.f32	s13, s15, s12
 80138e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f0:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80138f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138fc:	ee17 3a90 	vmov	r3, s15
 8013900:	f303 030f 	ssat	r3, #16, r3
 8013904:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8013908:	ed5c 7a02 	vldr	s15, [ip, #-8]
 801390c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8013910:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8013914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013918:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801391c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013924:	ee17 3a90 	vmov	r3, s15
 8013928:	f303 030f 	ssat	r3, #16, r3
 801392c:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8013930:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8013934:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801393c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013948:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801394c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013950:	bfcc      	ite	gt
 8013952:	ee16 3a90 	vmovgt	r3, s13
 8013956:	ee17 3a90 	vmovle	r3, s15
 801395a:	f303 030f 	ssat	r3, #16, r3
 801395e:	3c01      	subs	r4, #1
 8013960:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8013964:	f10c 0c10 	add.w	ip, ip, #16
 8013968:	f10e 0e08 	add.w	lr, lr, #8
 801396c:	d1a4      	bne.n	80138b8 <st_dsp_arm_float_to_q15+0x1c>
 801396e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013972:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8013976:	f012 0203 	ands.w	r2, r2, #3
 801397a:	d042      	beq.n	8013a02 <st_dsp_arm_float_to_q15+0x166>
 801397c:	edd0 7a00 	vldr	s15, [r0]
 8013980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013984:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8013a04 <st_dsp_arm_float_to_q15+0x168>
 8013988:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801398c:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8013990:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8013994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013998:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801399c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139a4:	ee17 3a90 	vmov	r3, s15
 80139a8:	f303 030f 	ssat	r3, #16, r3
 80139ac:	3a01      	subs	r2, #1
 80139ae:	800b      	strh	r3, [r1, #0]
 80139b0:	d027      	beq.n	8013a02 <st_dsp_arm_float_to_q15+0x166>
 80139b2:	edd0 7a01 	vldr	s15, [r0, #4]
 80139b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80139ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80139be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c2:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80139c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139ce:	ee17 3a90 	vmov	r3, s15
 80139d2:	f303 030f 	ssat	r3, #16, r3
 80139d6:	2a01      	cmp	r2, #1
 80139d8:	804b      	strh	r3, [r1, #2]
 80139da:	d012      	beq.n	8013a02 <st_dsp_arm_float_to_q15+0x166>
 80139dc:	edd0 7a02 	vldr	s15, [r0, #8]
 80139e0:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80139e4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80139e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ec:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80139f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80139f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80139f8:	ee17 3a10 	vmov	r3, s14
 80139fc:	f303 030f 	ssat	r3, #16, r3
 8013a00:	808b      	strh	r3, [r1, #4]
 8013a02:	bd30      	pop	{r4, r5, pc}
 8013a04:	47000000 	.word	0x47000000

08013a08 <st_dsp_arm_float_to_q7>:
 8013a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a0a:	0895      	lsrs	r5, r2, #2
 8013a0c:	d06f      	beq.n	8013aee <st_dsp_arm_float_to_q7+0xe6>
 8013a0e:	f101 0c04 	add.w	ip, r1, #4
 8013a12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013a16:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8013a1a:	f100 0e10 	add.w	lr, r0, #16
 8013a1e:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8013b9c <st_dsp_arm_float_to_q7+0x194>
 8013a22:	00ae      	lsls	r6, r5, #2
 8013a24:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8013a28:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8013a2c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8013a30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a38:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8013a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a44:	ee17 3a90 	vmov	r3, s15
 8013a48:	b21b      	sxth	r3, r3
 8013a4a:	f303 0307 	ssat	r3, #8, r3
 8013a4e:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8013a52:	ed5e 7a03 	vldr	s15, [lr, #-12]
 8013a56:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8013a5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a62:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8013a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a6e:	ee17 3a90 	vmov	r3, s15
 8013a72:	b21b      	sxth	r3, r3
 8013a74:	f303 0307 	ssat	r3, #8, r3
 8013a78:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8013a7c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8013a80:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8013a84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8c:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8013a90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a98:	ee17 3a90 	vmov	r3, s15
 8013a9c:	b21b      	sxth	r3, r3
 8013a9e:	f303 0307 	ssat	r3, #8, r3
 8013aa2:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8013aa6:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8013aaa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013aae:	ee76 7a86 	vadd.f32	s15, s13, s12
 8013ab2:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8013ab6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8013aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013abe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac6:	ee17 3a90 	vmov	r3, s15
 8013aca:	ee17 7a10 	vmov	r7, s14
 8013ace:	b21b      	sxth	r3, r3
 8013ad0:	b23f      	sxth	r7, r7
 8013ad2:	dd56      	ble.n	8013b82 <st_dsp_arm_float_to_q7+0x17a>
 8013ad4:	f303 0307 	ssat	r3, #8, r3
 8013ad8:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8013adc:	f10c 0c04 	add.w	ip, ip, #4
 8013ae0:	f10e 0e10 	add.w	lr, lr, #16
 8013ae4:	4564      	cmp	r4, ip
 8013ae6:	d19f      	bne.n	8013a28 <st_dsp_arm_float_to_q7+0x20>
 8013ae8:	4431      	add	r1, r6
 8013aea:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8013aee:	f012 0203 	ands.w	r2, r2, #3
 8013af2:	d045      	beq.n	8013b80 <st_dsp_arm_float_to_q7+0x178>
 8013af4:	edd0 7a00 	vldr	s15, [r0]
 8013af8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013afc:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8013b9c <st_dsp_arm_float_to_q7+0x194>
 8013b00:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8013b04:	ee67 6a85 	vmul.f32	s13, s15, s10
 8013b08:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8013b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b1c:	ee17 3a90 	vmov	r3, s15
 8013b20:	b21b      	sxth	r3, r3
 8013b22:	f303 0307 	ssat	r3, #8, r3
 8013b26:	3a01      	subs	r2, #1
 8013b28:	700b      	strb	r3, [r1, #0]
 8013b2a:	d029      	beq.n	8013b80 <st_dsp_arm_float_to_q7+0x178>
 8013b2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8013b30:	ee26 6a85 	vmul.f32	s12, s13, s10
 8013b34:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8013b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3c:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8013b40:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013b44:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013b48:	ee16 3a90 	vmov	r3, s13
 8013b4c:	b21b      	sxth	r3, r3
 8013b4e:	f303 0307 	ssat	r3, #8, r3
 8013b52:	2a01      	cmp	r2, #1
 8013b54:	704b      	strb	r3, [r1, #1]
 8013b56:	d013      	beq.n	8013b80 <st_dsp_arm_float_to_q7+0x178>
 8013b58:	edd0 7a02 	vldr	s15, [r0, #8]
 8013b5c:	ee27 5a85 	vmul.f32	s10, s15, s10
 8013b60:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8013b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b68:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8013b6c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b74:	ee17 3a90 	vmov	r3, s15
 8013b78:	b21b      	sxth	r3, r3
 8013b7a:	f303 0307 	ssat	r3, #8, r3
 8013b7e:	708b      	strb	r3, [r1, #2]
 8013b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b82:	f307 0707 	ssat	r7, #8, r7
 8013b86:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8013b8a:	f10c 0c04 	add.w	ip, ip, #4
 8013b8e:	f10e 0e10 	add.w	lr, lr, #16
 8013b92:	45a4      	cmp	ip, r4
 8013b94:	f47f af48 	bne.w	8013a28 <st_dsp_arm_float_to_q7+0x20>
 8013b98:	e7a6      	b.n	8013ae8 <st_dsp_arm_float_to_q7+0xe0>
 8013b9a:	bf00      	nop
 8013b9c:	43000000 	.word	0x43000000

08013ba0 <st_dsp_arm_q15_to_float>:
 8013ba0:	b530      	push	{r4, r5, lr}
 8013ba2:	0894      	lsrs	r4, r2, #2
 8013ba4:	d038      	beq.n	8013c18 <st_dsp_arm_q15_to_float+0x78>
 8013ba6:	f100 0c08 	add.w	ip, r0, #8
 8013baa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013c68 <st_dsp_arm_q15_to_float+0xc8>
 8013bae:	f101 0310 	add.w	r3, r1, #16
 8013bb2:	46a6      	mov	lr, r4
 8013bb4:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8013bb8:	3310      	adds	r3, #16
 8013bba:	f10c 0c08 	add.w	ip, ip, #8
 8013bbe:	f1be 0e01 	subs.w	lr, lr, #1
 8013bc2:	ee07 5a90 	vmov	s15, r5
 8013bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bce:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8013bd2:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8013bd6:	ee07 5a90 	vmov	s15, r5
 8013bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013be2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8013be6:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8013bea:	ee07 5a90 	vmov	s15, r5
 8013bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bf6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8013bfa:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8013bfe:	ee07 5a90 	vmov	s15, r5
 8013c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c0a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8013c0e:	d1d1      	bne.n	8013bb4 <st_dsp_arm_q15_to_float+0x14>
 8013c10:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8013c14:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8013c18:	f012 0203 	ands.w	r2, r2, #3
 8013c1c:	d023      	beq.n	8013c66 <st_dsp_arm_q15_to_float+0xc6>
 8013c1e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013c22:	3a01      	subs	r2, #1
 8013c24:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013c68 <st_dsp_arm_q15_to_float+0xc8>
 8013c28:	ee07 3a90 	vmov	s15, r3
 8013c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c34:	edc1 7a00 	vstr	s15, [r1]
 8013c38:	d015      	beq.n	8013c66 <st_dsp_arm_q15_to_float+0xc6>
 8013c3a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013c3e:	2a01      	cmp	r2, #1
 8013c40:	ee07 3a90 	vmov	s15, r3
 8013c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c4c:	edc1 7a01 	vstr	s15, [r1, #4]
 8013c50:	d009      	beq.n	8013c66 <st_dsp_arm_q15_to_float+0xc6>
 8013c52:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013c56:	ee07 3a90 	vmov	s15, r3
 8013c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c62:	edc1 7a02 	vstr	s15, [r1, #8]
 8013c66:	bd30      	pop	{r4, r5, pc}
 8013c68:	38000000 	.word	0x38000000

08013c6c <st_dsp_arm_q7_to_float>:
 8013c6c:	b530      	push	{r4, r5, lr}
 8013c6e:	0894      	lsrs	r4, r2, #2
 8013c70:	d036      	beq.n	8013ce0 <st_dsp_arm_q7_to_float+0x74>
 8013c72:	1d03      	adds	r3, r0, #4
 8013c74:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8013c78:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013d30 <st_dsp_arm_q7_to_float+0xc4>
 8013c7c:	f101 0010 	add.w	r0, r1, #16
 8013c80:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8013c84:	3010      	adds	r0, #16
 8013c86:	ee07 ea90 	vmov	s15, lr
 8013c8a:	469e      	mov	lr, r3
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c92:	45e6      	cmp	lr, ip
 8013c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c98:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 8013c9c:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 8013ca0:	ee07 5a90 	vmov	s15, r5
 8013ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cac:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 8013cb0:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8013cb4:	ee07 5a90 	vmov	s15, r5
 8013cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cc0:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8013cc4:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 8013cc8:	ee07 5a90 	vmov	s15, r5
 8013ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cd4:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 8013cd8:	d1d2      	bne.n	8013c80 <st_dsp_arm_q7_to_float+0x14>
 8013cda:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8013cde:	4660      	mov	r0, ip
 8013ce0:	f012 0203 	ands.w	r2, r2, #3
 8013ce4:	d023      	beq.n	8013d2e <st_dsp_arm_q7_to_float+0xc2>
 8013ce6:	f990 3000 	ldrsb.w	r3, [r0]
 8013cea:	3a01      	subs	r2, #1
 8013cec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013d30 <st_dsp_arm_q7_to_float+0xc4>
 8013cf0:	ee07 3a90 	vmov	s15, r3
 8013cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cfc:	edc1 7a00 	vstr	s15, [r1]
 8013d00:	d015      	beq.n	8013d2e <st_dsp_arm_q7_to_float+0xc2>
 8013d02:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013d06:	2a01      	cmp	r2, #1
 8013d08:	ee07 3a90 	vmov	s15, r3
 8013d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d14:	edc1 7a01 	vstr	s15, [r1, #4]
 8013d18:	d009      	beq.n	8013d2e <st_dsp_arm_q7_to_float+0xc2>
 8013d1a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8013d1e:	ee07 3a90 	vmov	s15, r3
 8013d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d2a:	edc1 7a02 	vstr	s15, [r1, #8]
 8013d2e:	bd30      	pop	{r4, r5, pc}
 8013d30:	3c000000 	.word	0x3c000000

08013d34 <ai_version_get>:
 8013d34:	0212      	lsls	r2, r2, #8
 8013d36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013d3a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8013d3e:	4770      	bx	lr

08013d40 <get_tensor_byte_size>:
 8013d40:	b430      	push	{r4, r5}
 8013d42:	6985      	ldr	r5, [r0, #24]
 8013d44:	68c4      	ldr	r4, [r0, #12]
 8013d46:	6941      	ldr	r1, [r0, #20]
 8013d48:	4b06      	ldr	r3, [pc, #24]	; (8013d64 <get_tensor_byte_size+0x24>)
 8013d4a:	6828      	ldr	r0, [r5, #0]
 8013d4c:	4a06      	ldr	r2, [pc, #24]	; (8013d68 <get_tensor_byte_size+0x28>)
 8013d4e:	4003      	ands	r3, r0
 8013d50:	68c9      	ldr	r1, [r1, #12]
 8013d52:	68e0      	ldr	r0, [r4, #12]
 8013d54:	4293      	cmp	r3, r2
 8013d56:	fb01 f000 	mul.w	r0, r1, r0
 8013d5a:	d101      	bne.n	8013d60 <get_tensor_byte_size+0x20>
 8013d5c:	3007      	adds	r0, #7
 8013d5e:	08c0      	lsrs	r0, r0, #3
 8013d60:	bc30      	pop	{r4, r5}
 8013d62:	4770      	bx	lr
 8013d64:	017fffff 	.word	0x017fffff
 8013d68:	000400c0 	.word	0x000400c0

08013d6c <ai_array_to_buffer_fmt>:
 8013d6c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	d050      	beq.n	8013e16 <ai_array_to_buffer_fmt+0xaa>
 8013d74:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8013d78:	4b29      	ldr	r3, [pc, #164]	; (8013e20 <ai_array_to_buffer_fmt+0xb4>)
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d00b      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013d7e:	dc1c      	bgt.n	8013dba <ai_array_to_buffer_fmt+0x4e>
 8013d80:	4b28      	ldr	r3, [pc, #160]	; (8013e24 <ai_array_to_buffer_fmt+0xb8>)
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d007      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013d86:	dd0b      	ble.n	8013da0 <ai_array_to_buffer_fmt+0x34>
 8013d88:	4b27      	ldr	r3, [pc, #156]	; (8013e28 <ai_array_to_buffer_fmt+0xbc>)
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d003      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013d8e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d131      	bne.n	8013dfa <ai_array_to_buffer_fmt+0x8e>
 8013d96:	4613      	mov	r3, r2
 8013d98:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013d9c:	4318      	orrs	r0, r3
 8013d9e:	4770      	bx	lr
 8013da0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d0f6      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013da8:	dd2c      	ble.n	8013e04 <ai_array_to_buffer_fmt+0x98>
 8013daa:	4b20      	ldr	r3, [pc, #128]	; (8013e2c <ai_array_to_buffer_fmt+0xc0>)
 8013dac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013db0:	429a      	cmp	r2, r3
 8013db2:	bf18      	it	ne
 8013db4:	2340      	movne	r3, #64	; 0x40
 8013db6:	4318      	orrs	r0, r3
 8013db8:	4770      	bx	lr
 8013dba:	4b1d      	ldr	r3, [pc, #116]	; (8013e30 <ai_array_to_buffer_fmt+0xc4>)
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d0ea      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013dc0:	dd0e      	ble.n	8013de0 <ai_array_to_buffer_fmt+0x74>
 8013dc2:	4b1c      	ldr	r3, [pc, #112]	; (8013e34 <ai_array_to_buffer_fmt+0xc8>)
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d0e6      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013dc8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d0e2      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013dd0:	4b19      	ldr	r3, [pc, #100]	; (8013e38 <ai_array_to_buffer_fmt+0xcc>)
 8013dd2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	bf18      	it	ne
 8013dda:	2340      	movne	r3, #64	; 0x40
 8013ddc:	4318      	orrs	r0, r3
 8013dde:	4770      	bx	lr
 8013de0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d0d6      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013de8:	3307      	adds	r3, #7
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d0d3      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013dee:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8013df2:	429a      	cmp	r2, r3
 8013df4:	bf18      	it	ne
 8013df6:	2340      	movne	r3, #64	; 0x40
 8013df8:	e7ce      	b.n	8013d98 <ai_array_to_buffer_fmt+0x2c>
 8013dfa:	4b10      	ldr	r3, [pc, #64]	; (8013e3c <ai_array_to_buffer_fmt+0xd0>)
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	bf18      	it	ne
 8013e00:	2340      	movne	r3, #64	; 0x40
 8013e02:	e7c9      	b.n	8013d98 <ai_array_to_buffer_fmt+0x2c>
 8013e04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d0c4      	beq.n	8013d96 <ai_array_to_buffer_fmt+0x2a>
 8013e0c:	3380      	adds	r3, #128	; 0x80
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	bf18      	it	ne
 8013e12:	2340      	movne	r3, #64	; 0x40
 8013e14:	e7c0      	b.n	8013d98 <ai_array_to_buffer_fmt+0x2c>
 8013e16:	4b0a      	ldr	r3, [pc, #40]	; (8013e40 <ai_array_to_buffer_fmt+0xd4>)
 8013e18:	4003      	ands	r3, r0
 8013e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013e1e:	e7bb      	b.n	8013d98 <ai_array_to_buffer_fmt+0x2c>
 8013e20:	00840040 	.word	0x00840040
 8013e24:	00040840 	.word	0x00040840
 8013e28:	00041040 	.word	0x00041040
 8013e2c:	00040447 	.word	0x00040447
 8013e30:	00840840 	.word	0x00840840
 8013e34:	00841040 	.word	0x00841040
 8013e38:	0084084f 	.word	0x0084084f
 8013e3c:	0004084f 	.word	0x0004084f
 8013e40:	00803fff 	.word	0x00803fff

08013e44 <ai_array_get_byte_size>:
 8013e44:	b319      	cbz	r1, 8013e8e <ai_array_get_byte_size+0x4a>
 8013e46:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013e4a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8013e4e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8013e52:	11c0      	asrs	r0, r0, #7
 8013e54:	fb03 f101 	mul.w	r1, r3, r1
 8013e58:	2a04      	cmp	r2, #4
 8013e5a:	f101 0107 	add.w	r1, r1, #7
 8013e5e:	f021 0107 	bic.w	r1, r1, #7
 8013e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8013e66:	d00b      	beq.n	8013e80 <ai_array_get_byte_size+0x3c>
 8013e68:	2a08      	cmp	r2, #8
 8013e6a:	d002      	beq.n	8013e72 <ai_array_get_byte_size+0x2e>
 8013e6c:	3107      	adds	r1, #7
 8013e6e:	08c8      	lsrs	r0, r1, #3
 8013e70:	4770      	bx	lr
 8013e72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013e76:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8013e7a:	3107      	adds	r1, #7
 8013e7c:	08c8      	lsrs	r0, r1, #3
 8013e7e:	4770      	bx	lr
 8013e80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013e84:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8013e88:	3107      	adds	r1, #7
 8013e8a:	08c8      	lsrs	r0, r1, #3
 8013e8c:	4770      	bx	lr
 8013e8e:	4608      	mov	r0, r1
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop

08013e94 <ai_array_get_data_byte_size>:
 8013e94:	b161      	cbz	r1, 8013eb0 <ai_array_get_data_byte_size+0x1c>
 8013e96:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013e9a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8013e9e:	fb03 f101 	mul.w	r1, r3, r1
 8013ea2:	1dc8      	adds	r0, r1, #7
 8013ea4:	f020 0007 	bic.w	r0, r0, #7
 8013ea8:	40d0      	lsrs	r0, r2
 8013eaa:	3007      	adds	r0, #7
 8013eac:	08c0      	lsrs	r0, r0, #3
 8013eae:	4770      	bx	lr
 8013eb0:	4608      	mov	r0, r1
 8013eb2:	4770      	bx	lr

08013eb4 <core_tensor_clone>:
 8013eb4:	680b      	ldr	r3, [r1, #0]
 8013eb6:	6882      	ldr	r2, [r0, #8]
 8013eb8:	6003      	str	r3, [r0, #0]
 8013eba:	684b      	ldr	r3, [r1, #4]
 8013ebc:	6043      	str	r3, [r0, #4]
 8013ebe:	698b      	ldr	r3, [r1, #24]
 8013ec0:	6183      	str	r3, [r0, #24]
 8013ec2:	688b      	ldr	r3, [r1, #8]
 8013ec4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013ec8:	f363 221f 	bfi	r2, r3, #8, #24
 8013ecc:	b410      	push	{r4}
 8013ece:	6082      	str	r2, [r0, #8]
 8013ed0:	b15b      	cbz	r3, 8013eea <core_tensor_clone+0x36>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	68cc      	ldr	r4, [r1, #12]
 8013ed6:	68c2      	ldr	r2, [r0, #12]
 8013ed8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013edc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	6882      	ldr	r2, [r0, #8]
 8013ee4:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8013ee8:	d3f4      	bcc.n	8013ed4 <core_tensor_clone+0x20>
 8013eea:	690b      	ldr	r3, [r1, #16]
 8013eec:	6902      	ldr	r2, [r0, #16]
 8013eee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013ef2:	f363 221f 	bfi	r2, r3, #8, #24
 8013ef6:	6102      	str	r2, [r0, #16]
 8013ef8:	b15b      	cbz	r3, 8013f12 <core_tensor_clone+0x5e>
 8013efa:	2300      	movs	r3, #0
 8013efc:	694c      	ldr	r4, [r1, #20]
 8013efe:	6942      	ldr	r2, [r0, #20]
 8013f00:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013f04:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	6902      	ldr	r2, [r0, #16]
 8013f0c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8013f10:	d3f4      	bcc.n	8013efc <core_tensor_clone+0x48>
 8013f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <core_array_clone>:
 8013f18:	4684      	mov	ip, r0
 8013f1a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8013f1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop

08013f24 <__errno>:
 8013f24:	4b01      	ldr	r3, [pc, #4]	; (8013f2c <__errno+0x8>)
 8013f26:	6818      	ldr	r0, [r3, #0]
 8013f28:	4770      	bx	lr
 8013f2a:	bf00      	nop
 8013f2c:	20000f80 	.word	0x20000f80

08013f30 <__libc_init_array>:
 8013f30:	b570      	push	{r4, r5, r6, lr}
 8013f32:	4d0d      	ldr	r5, [pc, #52]	; (8013f68 <__libc_init_array+0x38>)
 8013f34:	4c0d      	ldr	r4, [pc, #52]	; (8013f6c <__libc_init_array+0x3c>)
 8013f36:	1b64      	subs	r4, r4, r5
 8013f38:	10a4      	asrs	r4, r4, #2
 8013f3a:	2600      	movs	r6, #0
 8013f3c:	42a6      	cmp	r6, r4
 8013f3e:	d109      	bne.n	8013f54 <__libc_init_array+0x24>
 8013f40:	4d0b      	ldr	r5, [pc, #44]	; (8013f70 <__libc_init_array+0x40>)
 8013f42:	4c0c      	ldr	r4, [pc, #48]	; (8013f74 <__libc_init_array+0x44>)
 8013f44:	f003 f94e 	bl	80171e4 <_init>
 8013f48:	1b64      	subs	r4, r4, r5
 8013f4a:	10a4      	asrs	r4, r4, #2
 8013f4c:	2600      	movs	r6, #0
 8013f4e:	42a6      	cmp	r6, r4
 8013f50:	d105      	bne.n	8013f5e <__libc_init_array+0x2e>
 8013f52:	bd70      	pop	{r4, r5, r6, pc}
 8013f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f58:	4798      	blx	r3
 8013f5a:	3601      	adds	r6, #1
 8013f5c:	e7ee      	b.n	8013f3c <__libc_init_array+0xc>
 8013f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f62:	4798      	blx	r3
 8013f64:	3601      	adds	r6, #1
 8013f66:	e7f2      	b.n	8013f4e <__libc_init_array+0x1e>
 8013f68:	08018a00 	.word	0x08018a00
 8013f6c:	08018a00 	.word	0x08018a00
 8013f70:	08018a00 	.word	0x08018a00
 8013f74:	08018a04 	.word	0x08018a04

08013f78 <malloc>:
 8013f78:	4b02      	ldr	r3, [pc, #8]	; (8013f84 <malloc+0xc>)
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	6818      	ldr	r0, [r3, #0]
 8013f7e:	f000 b8a7 	b.w	80140d0 <_malloc_r>
 8013f82:	bf00      	nop
 8013f84:	20000f80 	.word	0x20000f80

08013f88 <free>:
 8013f88:	4b02      	ldr	r3, [pc, #8]	; (8013f94 <free+0xc>)
 8013f8a:	4601      	mov	r1, r0
 8013f8c:	6818      	ldr	r0, [r3, #0]
 8013f8e:	f000 b833 	b.w	8013ff8 <_free_r>
 8013f92:	bf00      	nop
 8013f94:	20000f80 	.word	0x20000f80

08013f98 <memcpy>:
 8013f98:	440a      	add	r2, r1
 8013f9a:	4291      	cmp	r1, r2
 8013f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fa0:	d100      	bne.n	8013fa4 <memcpy+0xc>
 8013fa2:	4770      	bx	lr
 8013fa4:	b510      	push	{r4, lr}
 8013fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fae:	4291      	cmp	r1, r2
 8013fb0:	d1f9      	bne.n	8013fa6 <memcpy+0xe>
 8013fb2:	bd10      	pop	{r4, pc}

08013fb4 <memmove>:
 8013fb4:	4288      	cmp	r0, r1
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	eb01 0402 	add.w	r4, r1, r2
 8013fbc:	d902      	bls.n	8013fc4 <memmove+0x10>
 8013fbe:	4284      	cmp	r4, r0
 8013fc0:	4623      	mov	r3, r4
 8013fc2:	d807      	bhi.n	8013fd4 <memmove+0x20>
 8013fc4:	1e43      	subs	r3, r0, #1
 8013fc6:	42a1      	cmp	r1, r4
 8013fc8:	d008      	beq.n	8013fdc <memmove+0x28>
 8013fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013fd2:	e7f8      	b.n	8013fc6 <memmove+0x12>
 8013fd4:	4402      	add	r2, r0
 8013fd6:	4601      	mov	r1, r0
 8013fd8:	428a      	cmp	r2, r1
 8013fda:	d100      	bne.n	8013fde <memmove+0x2a>
 8013fdc:	bd10      	pop	{r4, pc}
 8013fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013fe6:	e7f7      	b.n	8013fd8 <memmove+0x24>

08013fe8 <memset>:
 8013fe8:	4402      	add	r2, r0
 8013fea:	4603      	mov	r3, r0
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d100      	bne.n	8013ff2 <memset+0xa>
 8013ff0:	4770      	bx	lr
 8013ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8013ff6:	e7f9      	b.n	8013fec <memset+0x4>

08013ff8 <_free_r>:
 8013ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ffa:	2900      	cmp	r1, #0
 8013ffc:	d044      	beq.n	8014088 <_free_r+0x90>
 8013ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014002:	9001      	str	r0, [sp, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	f1a1 0404 	sub.w	r4, r1, #4
 801400a:	bfb8      	it	lt
 801400c:	18e4      	addlt	r4, r4, r3
 801400e:	f001 fe99 	bl	8015d44 <__malloc_lock>
 8014012:	4a1e      	ldr	r2, [pc, #120]	; (801408c <_free_r+0x94>)
 8014014:	9801      	ldr	r0, [sp, #4]
 8014016:	6813      	ldr	r3, [r2, #0]
 8014018:	b933      	cbnz	r3, 8014028 <_free_r+0x30>
 801401a:	6063      	str	r3, [r4, #4]
 801401c:	6014      	str	r4, [r2, #0]
 801401e:	b003      	add	sp, #12
 8014020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014024:	f001 be94 	b.w	8015d50 <__malloc_unlock>
 8014028:	42a3      	cmp	r3, r4
 801402a:	d908      	bls.n	801403e <_free_r+0x46>
 801402c:	6825      	ldr	r5, [r4, #0]
 801402e:	1961      	adds	r1, r4, r5
 8014030:	428b      	cmp	r3, r1
 8014032:	bf01      	itttt	eq
 8014034:	6819      	ldreq	r1, [r3, #0]
 8014036:	685b      	ldreq	r3, [r3, #4]
 8014038:	1949      	addeq	r1, r1, r5
 801403a:	6021      	streq	r1, [r4, #0]
 801403c:	e7ed      	b.n	801401a <_free_r+0x22>
 801403e:	461a      	mov	r2, r3
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	b10b      	cbz	r3, 8014048 <_free_r+0x50>
 8014044:	42a3      	cmp	r3, r4
 8014046:	d9fa      	bls.n	801403e <_free_r+0x46>
 8014048:	6811      	ldr	r1, [r2, #0]
 801404a:	1855      	adds	r5, r2, r1
 801404c:	42a5      	cmp	r5, r4
 801404e:	d10b      	bne.n	8014068 <_free_r+0x70>
 8014050:	6824      	ldr	r4, [r4, #0]
 8014052:	4421      	add	r1, r4
 8014054:	1854      	adds	r4, r2, r1
 8014056:	42a3      	cmp	r3, r4
 8014058:	6011      	str	r1, [r2, #0]
 801405a:	d1e0      	bne.n	801401e <_free_r+0x26>
 801405c:	681c      	ldr	r4, [r3, #0]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	6053      	str	r3, [r2, #4]
 8014062:	4421      	add	r1, r4
 8014064:	6011      	str	r1, [r2, #0]
 8014066:	e7da      	b.n	801401e <_free_r+0x26>
 8014068:	d902      	bls.n	8014070 <_free_r+0x78>
 801406a:	230c      	movs	r3, #12
 801406c:	6003      	str	r3, [r0, #0]
 801406e:	e7d6      	b.n	801401e <_free_r+0x26>
 8014070:	6825      	ldr	r5, [r4, #0]
 8014072:	1961      	adds	r1, r4, r5
 8014074:	428b      	cmp	r3, r1
 8014076:	bf04      	itt	eq
 8014078:	6819      	ldreq	r1, [r3, #0]
 801407a:	685b      	ldreq	r3, [r3, #4]
 801407c:	6063      	str	r3, [r4, #4]
 801407e:	bf04      	itt	eq
 8014080:	1949      	addeq	r1, r1, r5
 8014082:	6021      	streq	r1, [r4, #0]
 8014084:	6054      	str	r4, [r2, #4]
 8014086:	e7ca      	b.n	801401e <_free_r+0x26>
 8014088:	b003      	add	sp, #12
 801408a:	bd30      	pop	{r4, r5, pc}
 801408c:	200016cc 	.word	0x200016cc

08014090 <sbrk_aligned>:
 8014090:	b570      	push	{r4, r5, r6, lr}
 8014092:	4e0e      	ldr	r6, [pc, #56]	; (80140cc <sbrk_aligned+0x3c>)
 8014094:	460c      	mov	r4, r1
 8014096:	6831      	ldr	r1, [r6, #0]
 8014098:	4605      	mov	r5, r0
 801409a:	b911      	cbnz	r1, 80140a2 <sbrk_aligned+0x12>
 801409c:	f000 fd44 	bl	8014b28 <_sbrk_r>
 80140a0:	6030      	str	r0, [r6, #0]
 80140a2:	4621      	mov	r1, r4
 80140a4:	4628      	mov	r0, r5
 80140a6:	f000 fd3f 	bl	8014b28 <_sbrk_r>
 80140aa:	1c43      	adds	r3, r0, #1
 80140ac:	d00a      	beq.n	80140c4 <sbrk_aligned+0x34>
 80140ae:	1cc4      	adds	r4, r0, #3
 80140b0:	f024 0403 	bic.w	r4, r4, #3
 80140b4:	42a0      	cmp	r0, r4
 80140b6:	d007      	beq.n	80140c8 <sbrk_aligned+0x38>
 80140b8:	1a21      	subs	r1, r4, r0
 80140ba:	4628      	mov	r0, r5
 80140bc:	f000 fd34 	bl	8014b28 <_sbrk_r>
 80140c0:	3001      	adds	r0, #1
 80140c2:	d101      	bne.n	80140c8 <sbrk_aligned+0x38>
 80140c4:	f04f 34ff 	mov.w	r4, #4294967295
 80140c8:	4620      	mov	r0, r4
 80140ca:	bd70      	pop	{r4, r5, r6, pc}
 80140cc:	200016d0 	.word	0x200016d0

080140d0 <_malloc_r>:
 80140d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d4:	1ccd      	adds	r5, r1, #3
 80140d6:	f025 0503 	bic.w	r5, r5, #3
 80140da:	3508      	adds	r5, #8
 80140dc:	2d0c      	cmp	r5, #12
 80140de:	bf38      	it	cc
 80140e0:	250c      	movcc	r5, #12
 80140e2:	2d00      	cmp	r5, #0
 80140e4:	4607      	mov	r7, r0
 80140e6:	db01      	blt.n	80140ec <_malloc_r+0x1c>
 80140e8:	42a9      	cmp	r1, r5
 80140ea:	d905      	bls.n	80140f8 <_malloc_r+0x28>
 80140ec:	230c      	movs	r3, #12
 80140ee:	603b      	str	r3, [r7, #0]
 80140f0:	2600      	movs	r6, #0
 80140f2:	4630      	mov	r0, r6
 80140f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140f8:	4e2e      	ldr	r6, [pc, #184]	; (80141b4 <_malloc_r+0xe4>)
 80140fa:	f001 fe23 	bl	8015d44 <__malloc_lock>
 80140fe:	6833      	ldr	r3, [r6, #0]
 8014100:	461c      	mov	r4, r3
 8014102:	bb34      	cbnz	r4, 8014152 <_malloc_r+0x82>
 8014104:	4629      	mov	r1, r5
 8014106:	4638      	mov	r0, r7
 8014108:	f7ff ffc2 	bl	8014090 <sbrk_aligned>
 801410c:	1c43      	adds	r3, r0, #1
 801410e:	4604      	mov	r4, r0
 8014110:	d14d      	bne.n	80141ae <_malloc_r+0xde>
 8014112:	6834      	ldr	r4, [r6, #0]
 8014114:	4626      	mov	r6, r4
 8014116:	2e00      	cmp	r6, #0
 8014118:	d140      	bne.n	801419c <_malloc_r+0xcc>
 801411a:	6823      	ldr	r3, [r4, #0]
 801411c:	4631      	mov	r1, r6
 801411e:	4638      	mov	r0, r7
 8014120:	eb04 0803 	add.w	r8, r4, r3
 8014124:	f000 fd00 	bl	8014b28 <_sbrk_r>
 8014128:	4580      	cmp	r8, r0
 801412a:	d13a      	bne.n	80141a2 <_malloc_r+0xd2>
 801412c:	6821      	ldr	r1, [r4, #0]
 801412e:	3503      	adds	r5, #3
 8014130:	1a6d      	subs	r5, r5, r1
 8014132:	f025 0503 	bic.w	r5, r5, #3
 8014136:	3508      	adds	r5, #8
 8014138:	2d0c      	cmp	r5, #12
 801413a:	bf38      	it	cc
 801413c:	250c      	movcc	r5, #12
 801413e:	4629      	mov	r1, r5
 8014140:	4638      	mov	r0, r7
 8014142:	f7ff ffa5 	bl	8014090 <sbrk_aligned>
 8014146:	3001      	adds	r0, #1
 8014148:	d02b      	beq.n	80141a2 <_malloc_r+0xd2>
 801414a:	6823      	ldr	r3, [r4, #0]
 801414c:	442b      	add	r3, r5
 801414e:	6023      	str	r3, [r4, #0]
 8014150:	e00e      	b.n	8014170 <_malloc_r+0xa0>
 8014152:	6822      	ldr	r2, [r4, #0]
 8014154:	1b52      	subs	r2, r2, r5
 8014156:	d41e      	bmi.n	8014196 <_malloc_r+0xc6>
 8014158:	2a0b      	cmp	r2, #11
 801415a:	d916      	bls.n	801418a <_malloc_r+0xba>
 801415c:	1961      	adds	r1, r4, r5
 801415e:	42a3      	cmp	r3, r4
 8014160:	6025      	str	r5, [r4, #0]
 8014162:	bf18      	it	ne
 8014164:	6059      	strne	r1, [r3, #4]
 8014166:	6863      	ldr	r3, [r4, #4]
 8014168:	bf08      	it	eq
 801416a:	6031      	streq	r1, [r6, #0]
 801416c:	5162      	str	r2, [r4, r5]
 801416e:	604b      	str	r3, [r1, #4]
 8014170:	4638      	mov	r0, r7
 8014172:	f104 060b 	add.w	r6, r4, #11
 8014176:	f001 fdeb 	bl	8015d50 <__malloc_unlock>
 801417a:	f026 0607 	bic.w	r6, r6, #7
 801417e:	1d23      	adds	r3, r4, #4
 8014180:	1af2      	subs	r2, r6, r3
 8014182:	d0b6      	beq.n	80140f2 <_malloc_r+0x22>
 8014184:	1b9b      	subs	r3, r3, r6
 8014186:	50a3      	str	r3, [r4, r2]
 8014188:	e7b3      	b.n	80140f2 <_malloc_r+0x22>
 801418a:	6862      	ldr	r2, [r4, #4]
 801418c:	42a3      	cmp	r3, r4
 801418e:	bf0c      	ite	eq
 8014190:	6032      	streq	r2, [r6, #0]
 8014192:	605a      	strne	r2, [r3, #4]
 8014194:	e7ec      	b.n	8014170 <_malloc_r+0xa0>
 8014196:	4623      	mov	r3, r4
 8014198:	6864      	ldr	r4, [r4, #4]
 801419a:	e7b2      	b.n	8014102 <_malloc_r+0x32>
 801419c:	4634      	mov	r4, r6
 801419e:	6876      	ldr	r6, [r6, #4]
 80141a0:	e7b9      	b.n	8014116 <_malloc_r+0x46>
 80141a2:	230c      	movs	r3, #12
 80141a4:	603b      	str	r3, [r7, #0]
 80141a6:	4638      	mov	r0, r7
 80141a8:	f001 fdd2 	bl	8015d50 <__malloc_unlock>
 80141ac:	e7a1      	b.n	80140f2 <_malloc_r+0x22>
 80141ae:	6025      	str	r5, [r4, #0]
 80141b0:	e7de      	b.n	8014170 <_malloc_r+0xa0>
 80141b2:	bf00      	nop
 80141b4:	200016cc 	.word	0x200016cc

080141b8 <__cvt>:
 80141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ba:	ed2d 8b02 	vpush	{d8}
 80141be:	eeb0 8b40 	vmov.f64	d8, d0
 80141c2:	b085      	sub	sp, #20
 80141c4:	4617      	mov	r7, r2
 80141c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80141c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80141ca:	ee18 2a90 	vmov	r2, s17
 80141ce:	f025 0520 	bic.w	r5, r5, #32
 80141d2:	2a00      	cmp	r2, #0
 80141d4:	bfb6      	itet	lt
 80141d6:	222d      	movlt	r2, #45	; 0x2d
 80141d8:	2200      	movge	r2, #0
 80141da:	eeb1 8b40 	vneglt.f64	d8, d0
 80141de:	2d46      	cmp	r5, #70	; 0x46
 80141e0:	460c      	mov	r4, r1
 80141e2:	701a      	strb	r2, [r3, #0]
 80141e4:	d004      	beq.n	80141f0 <__cvt+0x38>
 80141e6:	2d45      	cmp	r5, #69	; 0x45
 80141e8:	d100      	bne.n	80141ec <__cvt+0x34>
 80141ea:	3401      	adds	r4, #1
 80141ec:	2102      	movs	r1, #2
 80141ee:	e000      	b.n	80141f2 <__cvt+0x3a>
 80141f0:	2103      	movs	r1, #3
 80141f2:	ab03      	add	r3, sp, #12
 80141f4:	9301      	str	r3, [sp, #4]
 80141f6:	ab02      	add	r3, sp, #8
 80141f8:	9300      	str	r3, [sp, #0]
 80141fa:	4622      	mov	r2, r4
 80141fc:	4633      	mov	r3, r6
 80141fe:	eeb0 0b48 	vmov.f64	d0, d8
 8014202:	f000 fe0d 	bl	8014e20 <_dtoa_r>
 8014206:	2d47      	cmp	r5, #71	; 0x47
 8014208:	d101      	bne.n	801420e <__cvt+0x56>
 801420a:	07fb      	lsls	r3, r7, #31
 801420c:	d51a      	bpl.n	8014244 <__cvt+0x8c>
 801420e:	2d46      	cmp	r5, #70	; 0x46
 8014210:	eb00 0204 	add.w	r2, r0, r4
 8014214:	d10c      	bne.n	8014230 <__cvt+0x78>
 8014216:	7803      	ldrb	r3, [r0, #0]
 8014218:	2b30      	cmp	r3, #48	; 0x30
 801421a:	d107      	bne.n	801422c <__cvt+0x74>
 801421c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014224:	bf1c      	itt	ne
 8014226:	f1c4 0401 	rsbne	r4, r4, #1
 801422a:	6034      	strne	r4, [r6, #0]
 801422c:	6833      	ldr	r3, [r6, #0]
 801422e:	441a      	add	r2, r3
 8014230:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014238:	bf08      	it	eq
 801423a:	9203      	streq	r2, [sp, #12]
 801423c:	2130      	movs	r1, #48	; 0x30
 801423e:	9b03      	ldr	r3, [sp, #12]
 8014240:	4293      	cmp	r3, r2
 8014242:	d307      	bcc.n	8014254 <__cvt+0x9c>
 8014244:	9b03      	ldr	r3, [sp, #12]
 8014246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014248:	1a1b      	subs	r3, r3, r0
 801424a:	6013      	str	r3, [r2, #0]
 801424c:	b005      	add	sp, #20
 801424e:	ecbd 8b02 	vpop	{d8}
 8014252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014254:	1c5c      	adds	r4, r3, #1
 8014256:	9403      	str	r4, [sp, #12]
 8014258:	7019      	strb	r1, [r3, #0]
 801425a:	e7f0      	b.n	801423e <__cvt+0x86>

0801425c <__exponent>:
 801425c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801425e:	4603      	mov	r3, r0
 8014260:	2900      	cmp	r1, #0
 8014262:	bfb8      	it	lt
 8014264:	4249      	neglt	r1, r1
 8014266:	f803 2b02 	strb.w	r2, [r3], #2
 801426a:	bfb4      	ite	lt
 801426c:	222d      	movlt	r2, #45	; 0x2d
 801426e:	222b      	movge	r2, #43	; 0x2b
 8014270:	2909      	cmp	r1, #9
 8014272:	7042      	strb	r2, [r0, #1]
 8014274:	dd2a      	ble.n	80142cc <__exponent+0x70>
 8014276:	f10d 0407 	add.w	r4, sp, #7
 801427a:	46a4      	mov	ip, r4
 801427c:	270a      	movs	r7, #10
 801427e:	46a6      	mov	lr, r4
 8014280:	460a      	mov	r2, r1
 8014282:	fb91 f6f7 	sdiv	r6, r1, r7
 8014286:	fb07 1516 	mls	r5, r7, r6, r1
 801428a:	3530      	adds	r5, #48	; 0x30
 801428c:	2a63      	cmp	r2, #99	; 0x63
 801428e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014296:	4631      	mov	r1, r6
 8014298:	dcf1      	bgt.n	801427e <__exponent+0x22>
 801429a:	3130      	adds	r1, #48	; 0x30
 801429c:	f1ae 0502 	sub.w	r5, lr, #2
 80142a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80142a4:	1c44      	adds	r4, r0, #1
 80142a6:	4629      	mov	r1, r5
 80142a8:	4561      	cmp	r1, ip
 80142aa:	d30a      	bcc.n	80142c2 <__exponent+0x66>
 80142ac:	f10d 0209 	add.w	r2, sp, #9
 80142b0:	eba2 020e 	sub.w	r2, r2, lr
 80142b4:	4565      	cmp	r5, ip
 80142b6:	bf88      	it	hi
 80142b8:	2200      	movhi	r2, #0
 80142ba:	4413      	add	r3, r2
 80142bc:	1a18      	subs	r0, r3, r0
 80142be:	b003      	add	sp, #12
 80142c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80142ca:	e7ed      	b.n	80142a8 <__exponent+0x4c>
 80142cc:	2330      	movs	r3, #48	; 0x30
 80142ce:	3130      	adds	r1, #48	; 0x30
 80142d0:	7083      	strb	r3, [r0, #2]
 80142d2:	70c1      	strb	r1, [r0, #3]
 80142d4:	1d03      	adds	r3, r0, #4
 80142d6:	e7f1      	b.n	80142bc <__exponent+0x60>

080142d8 <_printf_float>:
 80142d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142dc:	b08b      	sub	sp, #44	; 0x2c
 80142de:	460c      	mov	r4, r1
 80142e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80142e4:	4616      	mov	r6, r2
 80142e6:	461f      	mov	r7, r3
 80142e8:	4605      	mov	r5, r0
 80142ea:	f001 fcbf 	bl	8015c6c <_localeconv_r>
 80142ee:	f8d0 b000 	ldr.w	fp, [r0]
 80142f2:	4658      	mov	r0, fp
 80142f4:	f7eb ffa4 	bl	8000240 <strlen>
 80142f8:	2300      	movs	r3, #0
 80142fa:	9308      	str	r3, [sp, #32]
 80142fc:	f8d8 3000 	ldr.w	r3, [r8]
 8014300:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014304:	6822      	ldr	r2, [r4, #0]
 8014306:	3307      	adds	r3, #7
 8014308:	f023 0307 	bic.w	r3, r3, #7
 801430c:	f103 0108 	add.w	r1, r3, #8
 8014310:	f8c8 1000 	str.w	r1, [r8]
 8014314:	4682      	mov	sl, r0
 8014316:	e9d3 0100 	ldrd	r0, r1, [r3]
 801431a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801431e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014580 <_printf_float+0x2a8>
 8014322:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014326:	eeb0 6bc0 	vabs.f64	d6, d0
 801432a:	eeb4 6b47 	vcmp.f64	d6, d7
 801432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014332:	dd24      	ble.n	801437e <_printf_float+0xa6>
 8014334:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	d502      	bpl.n	8014344 <_printf_float+0x6c>
 801433e:	232d      	movs	r3, #45	; 0x2d
 8014340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014344:	4b90      	ldr	r3, [pc, #576]	; (8014588 <_printf_float+0x2b0>)
 8014346:	4891      	ldr	r0, [pc, #580]	; (801458c <_printf_float+0x2b4>)
 8014348:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801434c:	bf94      	ite	ls
 801434e:	4698      	movls	r8, r3
 8014350:	4680      	movhi	r8, r0
 8014352:	2303      	movs	r3, #3
 8014354:	6123      	str	r3, [r4, #16]
 8014356:	f022 0204 	bic.w	r2, r2, #4
 801435a:	2300      	movs	r3, #0
 801435c:	6022      	str	r2, [r4, #0]
 801435e:	9304      	str	r3, [sp, #16]
 8014360:	9700      	str	r7, [sp, #0]
 8014362:	4633      	mov	r3, r6
 8014364:	aa09      	add	r2, sp, #36	; 0x24
 8014366:	4621      	mov	r1, r4
 8014368:	4628      	mov	r0, r5
 801436a:	f000 f9d3 	bl	8014714 <_printf_common>
 801436e:	3001      	adds	r0, #1
 8014370:	f040 808a 	bne.w	8014488 <_printf_float+0x1b0>
 8014374:	f04f 30ff 	mov.w	r0, #4294967295
 8014378:	b00b      	add	sp, #44	; 0x2c
 801437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	d709      	bvc.n	801439c <_printf_float+0xc4>
 8014388:	ee10 3a90 	vmov	r3, s1
 801438c:	2b00      	cmp	r3, #0
 801438e:	bfbc      	itt	lt
 8014390:	232d      	movlt	r3, #45	; 0x2d
 8014392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014396:	487e      	ldr	r0, [pc, #504]	; (8014590 <_printf_float+0x2b8>)
 8014398:	4b7e      	ldr	r3, [pc, #504]	; (8014594 <_printf_float+0x2bc>)
 801439a:	e7d5      	b.n	8014348 <_printf_float+0x70>
 801439c:	6863      	ldr	r3, [r4, #4]
 801439e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80143a2:	9104      	str	r1, [sp, #16]
 80143a4:	1c59      	adds	r1, r3, #1
 80143a6:	d13c      	bne.n	8014422 <_printf_float+0x14a>
 80143a8:	2306      	movs	r3, #6
 80143aa:	6063      	str	r3, [r4, #4]
 80143ac:	2300      	movs	r3, #0
 80143ae:	9303      	str	r3, [sp, #12]
 80143b0:	ab08      	add	r3, sp, #32
 80143b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80143b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80143ba:	ab07      	add	r3, sp, #28
 80143bc:	6861      	ldr	r1, [r4, #4]
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	6022      	str	r2, [r4, #0]
 80143c2:	f10d 031b 	add.w	r3, sp, #27
 80143c6:	4628      	mov	r0, r5
 80143c8:	f7ff fef6 	bl	80141b8 <__cvt>
 80143cc:	9b04      	ldr	r3, [sp, #16]
 80143ce:	9907      	ldr	r1, [sp, #28]
 80143d0:	2b47      	cmp	r3, #71	; 0x47
 80143d2:	4680      	mov	r8, r0
 80143d4:	d108      	bne.n	80143e8 <_printf_float+0x110>
 80143d6:	1cc8      	adds	r0, r1, #3
 80143d8:	db02      	blt.n	80143e0 <_printf_float+0x108>
 80143da:	6863      	ldr	r3, [r4, #4]
 80143dc:	4299      	cmp	r1, r3
 80143de:	dd41      	ble.n	8014464 <_printf_float+0x18c>
 80143e0:	f1a9 0902 	sub.w	r9, r9, #2
 80143e4:	fa5f f989 	uxtb.w	r9, r9
 80143e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80143ec:	d820      	bhi.n	8014430 <_printf_float+0x158>
 80143ee:	3901      	subs	r1, #1
 80143f0:	464a      	mov	r2, r9
 80143f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80143f6:	9107      	str	r1, [sp, #28]
 80143f8:	f7ff ff30 	bl	801425c <__exponent>
 80143fc:	9a08      	ldr	r2, [sp, #32]
 80143fe:	9004      	str	r0, [sp, #16]
 8014400:	1813      	adds	r3, r2, r0
 8014402:	2a01      	cmp	r2, #1
 8014404:	6123      	str	r3, [r4, #16]
 8014406:	dc02      	bgt.n	801440e <_printf_float+0x136>
 8014408:	6822      	ldr	r2, [r4, #0]
 801440a:	07d2      	lsls	r2, r2, #31
 801440c:	d501      	bpl.n	8014412 <_printf_float+0x13a>
 801440e:	3301      	adds	r3, #1
 8014410:	6123      	str	r3, [r4, #16]
 8014412:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d0a2      	beq.n	8014360 <_printf_float+0x88>
 801441a:	232d      	movs	r3, #45	; 0x2d
 801441c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014420:	e79e      	b.n	8014360 <_printf_float+0x88>
 8014422:	9904      	ldr	r1, [sp, #16]
 8014424:	2947      	cmp	r1, #71	; 0x47
 8014426:	d1c1      	bne.n	80143ac <_printf_float+0xd4>
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1bf      	bne.n	80143ac <_printf_float+0xd4>
 801442c:	2301      	movs	r3, #1
 801442e:	e7bc      	b.n	80143aa <_printf_float+0xd2>
 8014430:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014434:	d118      	bne.n	8014468 <_printf_float+0x190>
 8014436:	2900      	cmp	r1, #0
 8014438:	6863      	ldr	r3, [r4, #4]
 801443a:	dd0b      	ble.n	8014454 <_printf_float+0x17c>
 801443c:	6121      	str	r1, [r4, #16]
 801443e:	b913      	cbnz	r3, 8014446 <_printf_float+0x16e>
 8014440:	6822      	ldr	r2, [r4, #0]
 8014442:	07d0      	lsls	r0, r2, #31
 8014444:	d502      	bpl.n	801444c <_printf_float+0x174>
 8014446:	3301      	adds	r3, #1
 8014448:	440b      	add	r3, r1
 801444a:	6123      	str	r3, [r4, #16]
 801444c:	2300      	movs	r3, #0
 801444e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014450:	9304      	str	r3, [sp, #16]
 8014452:	e7de      	b.n	8014412 <_printf_float+0x13a>
 8014454:	b913      	cbnz	r3, 801445c <_printf_float+0x184>
 8014456:	6822      	ldr	r2, [r4, #0]
 8014458:	07d2      	lsls	r2, r2, #31
 801445a:	d501      	bpl.n	8014460 <_printf_float+0x188>
 801445c:	3302      	adds	r3, #2
 801445e:	e7f4      	b.n	801444a <_printf_float+0x172>
 8014460:	2301      	movs	r3, #1
 8014462:	e7f2      	b.n	801444a <_printf_float+0x172>
 8014464:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014468:	9b08      	ldr	r3, [sp, #32]
 801446a:	4299      	cmp	r1, r3
 801446c:	db05      	blt.n	801447a <_printf_float+0x1a2>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	6121      	str	r1, [r4, #16]
 8014472:	07d8      	lsls	r0, r3, #31
 8014474:	d5ea      	bpl.n	801444c <_printf_float+0x174>
 8014476:	1c4b      	adds	r3, r1, #1
 8014478:	e7e7      	b.n	801444a <_printf_float+0x172>
 801447a:	2900      	cmp	r1, #0
 801447c:	bfd4      	ite	le
 801447e:	f1c1 0202 	rsble	r2, r1, #2
 8014482:	2201      	movgt	r2, #1
 8014484:	4413      	add	r3, r2
 8014486:	e7e0      	b.n	801444a <_printf_float+0x172>
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	055a      	lsls	r2, r3, #21
 801448c:	d407      	bmi.n	801449e <_printf_float+0x1c6>
 801448e:	6923      	ldr	r3, [r4, #16]
 8014490:	4642      	mov	r2, r8
 8014492:	4631      	mov	r1, r6
 8014494:	4628      	mov	r0, r5
 8014496:	47b8      	blx	r7
 8014498:	3001      	adds	r0, #1
 801449a:	d12a      	bne.n	80144f2 <_printf_float+0x21a>
 801449c:	e76a      	b.n	8014374 <_printf_float+0x9c>
 801449e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80144a2:	f240 80e2 	bls.w	801466a <_printf_float+0x392>
 80144a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80144aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80144ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b2:	d133      	bne.n	801451c <_printf_float+0x244>
 80144b4:	4a38      	ldr	r2, [pc, #224]	; (8014598 <_printf_float+0x2c0>)
 80144b6:	2301      	movs	r3, #1
 80144b8:	4631      	mov	r1, r6
 80144ba:	4628      	mov	r0, r5
 80144bc:	47b8      	blx	r7
 80144be:	3001      	adds	r0, #1
 80144c0:	f43f af58 	beq.w	8014374 <_printf_float+0x9c>
 80144c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	db02      	blt.n	80144d2 <_printf_float+0x1fa>
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	07d8      	lsls	r0, r3, #31
 80144d0:	d50f      	bpl.n	80144f2 <_printf_float+0x21a>
 80144d2:	4653      	mov	r3, sl
 80144d4:	465a      	mov	r2, fp
 80144d6:	4631      	mov	r1, r6
 80144d8:	4628      	mov	r0, r5
 80144da:	47b8      	blx	r7
 80144dc:	3001      	adds	r0, #1
 80144de:	f43f af49 	beq.w	8014374 <_printf_float+0x9c>
 80144e2:	f04f 0800 	mov.w	r8, #0
 80144e6:	f104 091a 	add.w	r9, r4, #26
 80144ea:	9b08      	ldr	r3, [sp, #32]
 80144ec:	3b01      	subs	r3, #1
 80144ee:	4543      	cmp	r3, r8
 80144f0:	dc09      	bgt.n	8014506 <_printf_float+0x22e>
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	079b      	lsls	r3, r3, #30
 80144f6:	f100 8108 	bmi.w	801470a <_printf_float+0x432>
 80144fa:	68e0      	ldr	r0, [r4, #12]
 80144fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fe:	4298      	cmp	r0, r3
 8014500:	bfb8      	it	lt
 8014502:	4618      	movlt	r0, r3
 8014504:	e738      	b.n	8014378 <_printf_float+0xa0>
 8014506:	2301      	movs	r3, #1
 8014508:	464a      	mov	r2, r9
 801450a:	4631      	mov	r1, r6
 801450c:	4628      	mov	r0, r5
 801450e:	47b8      	blx	r7
 8014510:	3001      	adds	r0, #1
 8014512:	f43f af2f 	beq.w	8014374 <_printf_float+0x9c>
 8014516:	f108 0801 	add.w	r8, r8, #1
 801451a:	e7e6      	b.n	80144ea <_printf_float+0x212>
 801451c:	9b07      	ldr	r3, [sp, #28]
 801451e:	2b00      	cmp	r3, #0
 8014520:	dc3c      	bgt.n	801459c <_printf_float+0x2c4>
 8014522:	4a1d      	ldr	r2, [pc, #116]	; (8014598 <_printf_float+0x2c0>)
 8014524:	2301      	movs	r3, #1
 8014526:	4631      	mov	r1, r6
 8014528:	4628      	mov	r0, r5
 801452a:	47b8      	blx	r7
 801452c:	3001      	adds	r0, #1
 801452e:	f43f af21 	beq.w	8014374 <_printf_float+0x9c>
 8014532:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014536:	4313      	orrs	r3, r2
 8014538:	d102      	bne.n	8014540 <_printf_float+0x268>
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	07d9      	lsls	r1, r3, #31
 801453e:	d5d8      	bpl.n	80144f2 <_printf_float+0x21a>
 8014540:	4653      	mov	r3, sl
 8014542:	465a      	mov	r2, fp
 8014544:	4631      	mov	r1, r6
 8014546:	4628      	mov	r0, r5
 8014548:	47b8      	blx	r7
 801454a:	3001      	adds	r0, #1
 801454c:	f43f af12 	beq.w	8014374 <_printf_float+0x9c>
 8014550:	f04f 0900 	mov.w	r9, #0
 8014554:	f104 0a1a 	add.w	sl, r4, #26
 8014558:	9b07      	ldr	r3, [sp, #28]
 801455a:	425b      	negs	r3, r3
 801455c:	454b      	cmp	r3, r9
 801455e:	dc01      	bgt.n	8014564 <_printf_float+0x28c>
 8014560:	9b08      	ldr	r3, [sp, #32]
 8014562:	e795      	b.n	8014490 <_printf_float+0x1b8>
 8014564:	2301      	movs	r3, #1
 8014566:	4652      	mov	r2, sl
 8014568:	4631      	mov	r1, r6
 801456a:	4628      	mov	r0, r5
 801456c:	47b8      	blx	r7
 801456e:	3001      	adds	r0, #1
 8014570:	f43f af00 	beq.w	8014374 <_printf_float+0x9c>
 8014574:	f109 0901 	add.w	r9, r9, #1
 8014578:	e7ee      	b.n	8014558 <_printf_float+0x280>
 801457a:	bf00      	nop
 801457c:	f3af 8000 	nop.w
 8014580:	ffffffff 	.word	0xffffffff
 8014584:	7fefffff 	.word	0x7fefffff
 8014588:	080183ac 	.word	0x080183ac
 801458c:	080183b0 	.word	0x080183b0
 8014590:	080183b8 	.word	0x080183b8
 8014594:	080183b4 	.word	0x080183b4
 8014598:	080183bc 	.word	0x080183bc
 801459c:	9a08      	ldr	r2, [sp, #32]
 801459e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80145a0:	429a      	cmp	r2, r3
 80145a2:	bfa8      	it	ge
 80145a4:	461a      	movge	r2, r3
 80145a6:	2a00      	cmp	r2, #0
 80145a8:	4691      	mov	r9, r2
 80145aa:	dc38      	bgt.n	801461e <_printf_float+0x346>
 80145ac:	2300      	movs	r3, #0
 80145ae:	9305      	str	r3, [sp, #20]
 80145b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145b4:	f104 021a 	add.w	r2, r4, #26
 80145b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80145ba:	9905      	ldr	r1, [sp, #20]
 80145bc:	9304      	str	r3, [sp, #16]
 80145be:	eba3 0309 	sub.w	r3, r3, r9
 80145c2:	428b      	cmp	r3, r1
 80145c4:	dc33      	bgt.n	801462e <_printf_float+0x356>
 80145c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	db3c      	blt.n	8014648 <_printf_float+0x370>
 80145ce:	6823      	ldr	r3, [r4, #0]
 80145d0:	07da      	lsls	r2, r3, #31
 80145d2:	d439      	bmi.n	8014648 <_printf_float+0x370>
 80145d4:	9b08      	ldr	r3, [sp, #32]
 80145d6:	9a04      	ldr	r2, [sp, #16]
 80145d8:	9907      	ldr	r1, [sp, #28]
 80145da:	1a9a      	subs	r2, r3, r2
 80145dc:	eba3 0901 	sub.w	r9, r3, r1
 80145e0:	4591      	cmp	r9, r2
 80145e2:	bfa8      	it	ge
 80145e4:	4691      	movge	r9, r2
 80145e6:	f1b9 0f00 	cmp.w	r9, #0
 80145ea:	dc35      	bgt.n	8014658 <_printf_float+0x380>
 80145ec:	f04f 0800 	mov.w	r8, #0
 80145f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145f4:	f104 0a1a 	add.w	sl, r4, #26
 80145f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145fc:	1a9b      	subs	r3, r3, r2
 80145fe:	eba3 0309 	sub.w	r3, r3, r9
 8014602:	4543      	cmp	r3, r8
 8014604:	f77f af75 	ble.w	80144f2 <_printf_float+0x21a>
 8014608:	2301      	movs	r3, #1
 801460a:	4652      	mov	r2, sl
 801460c:	4631      	mov	r1, r6
 801460e:	4628      	mov	r0, r5
 8014610:	47b8      	blx	r7
 8014612:	3001      	adds	r0, #1
 8014614:	f43f aeae 	beq.w	8014374 <_printf_float+0x9c>
 8014618:	f108 0801 	add.w	r8, r8, #1
 801461c:	e7ec      	b.n	80145f8 <_printf_float+0x320>
 801461e:	4613      	mov	r3, r2
 8014620:	4631      	mov	r1, r6
 8014622:	4642      	mov	r2, r8
 8014624:	4628      	mov	r0, r5
 8014626:	47b8      	blx	r7
 8014628:	3001      	adds	r0, #1
 801462a:	d1bf      	bne.n	80145ac <_printf_float+0x2d4>
 801462c:	e6a2      	b.n	8014374 <_printf_float+0x9c>
 801462e:	2301      	movs	r3, #1
 8014630:	4631      	mov	r1, r6
 8014632:	4628      	mov	r0, r5
 8014634:	9204      	str	r2, [sp, #16]
 8014636:	47b8      	blx	r7
 8014638:	3001      	adds	r0, #1
 801463a:	f43f ae9b 	beq.w	8014374 <_printf_float+0x9c>
 801463e:	9b05      	ldr	r3, [sp, #20]
 8014640:	9a04      	ldr	r2, [sp, #16]
 8014642:	3301      	adds	r3, #1
 8014644:	9305      	str	r3, [sp, #20]
 8014646:	e7b7      	b.n	80145b8 <_printf_float+0x2e0>
 8014648:	4653      	mov	r3, sl
 801464a:	465a      	mov	r2, fp
 801464c:	4631      	mov	r1, r6
 801464e:	4628      	mov	r0, r5
 8014650:	47b8      	blx	r7
 8014652:	3001      	adds	r0, #1
 8014654:	d1be      	bne.n	80145d4 <_printf_float+0x2fc>
 8014656:	e68d      	b.n	8014374 <_printf_float+0x9c>
 8014658:	9a04      	ldr	r2, [sp, #16]
 801465a:	464b      	mov	r3, r9
 801465c:	4442      	add	r2, r8
 801465e:	4631      	mov	r1, r6
 8014660:	4628      	mov	r0, r5
 8014662:	47b8      	blx	r7
 8014664:	3001      	adds	r0, #1
 8014666:	d1c1      	bne.n	80145ec <_printf_float+0x314>
 8014668:	e684      	b.n	8014374 <_printf_float+0x9c>
 801466a:	9a08      	ldr	r2, [sp, #32]
 801466c:	2a01      	cmp	r2, #1
 801466e:	dc01      	bgt.n	8014674 <_printf_float+0x39c>
 8014670:	07db      	lsls	r3, r3, #31
 8014672:	d537      	bpl.n	80146e4 <_printf_float+0x40c>
 8014674:	2301      	movs	r3, #1
 8014676:	4642      	mov	r2, r8
 8014678:	4631      	mov	r1, r6
 801467a:	4628      	mov	r0, r5
 801467c:	47b8      	blx	r7
 801467e:	3001      	adds	r0, #1
 8014680:	f43f ae78 	beq.w	8014374 <_printf_float+0x9c>
 8014684:	4653      	mov	r3, sl
 8014686:	465a      	mov	r2, fp
 8014688:	4631      	mov	r1, r6
 801468a:	4628      	mov	r0, r5
 801468c:	47b8      	blx	r7
 801468e:	3001      	adds	r0, #1
 8014690:	f43f ae70 	beq.w	8014374 <_printf_float+0x9c>
 8014694:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014698:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a0:	d01b      	beq.n	80146da <_printf_float+0x402>
 80146a2:	9b08      	ldr	r3, [sp, #32]
 80146a4:	f108 0201 	add.w	r2, r8, #1
 80146a8:	3b01      	subs	r3, #1
 80146aa:	4631      	mov	r1, r6
 80146ac:	4628      	mov	r0, r5
 80146ae:	47b8      	blx	r7
 80146b0:	3001      	adds	r0, #1
 80146b2:	d10e      	bne.n	80146d2 <_printf_float+0x3fa>
 80146b4:	e65e      	b.n	8014374 <_printf_float+0x9c>
 80146b6:	2301      	movs	r3, #1
 80146b8:	464a      	mov	r2, r9
 80146ba:	4631      	mov	r1, r6
 80146bc:	4628      	mov	r0, r5
 80146be:	47b8      	blx	r7
 80146c0:	3001      	adds	r0, #1
 80146c2:	f43f ae57 	beq.w	8014374 <_printf_float+0x9c>
 80146c6:	f108 0801 	add.w	r8, r8, #1
 80146ca:	9b08      	ldr	r3, [sp, #32]
 80146cc:	3b01      	subs	r3, #1
 80146ce:	4543      	cmp	r3, r8
 80146d0:	dcf1      	bgt.n	80146b6 <_printf_float+0x3de>
 80146d2:	9b04      	ldr	r3, [sp, #16]
 80146d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80146d8:	e6db      	b.n	8014492 <_printf_float+0x1ba>
 80146da:	f04f 0800 	mov.w	r8, #0
 80146de:	f104 091a 	add.w	r9, r4, #26
 80146e2:	e7f2      	b.n	80146ca <_printf_float+0x3f2>
 80146e4:	2301      	movs	r3, #1
 80146e6:	4642      	mov	r2, r8
 80146e8:	e7df      	b.n	80146aa <_printf_float+0x3d2>
 80146ea:	2301      	movs	r3, #1
 80146ec:	464a      	mov	r2, r9
 80146ee:	4631      	mov	r1, r6
 80146f0:	4628      	mov	r0, r5
 80146f2:	47b8      	blx	r7
 80146f4:	3001      	adds	r0, #1
 80146f6:	f43f ae3d 	beq.w	8014374 <_printf_float+0x9c>
 80146fa:	f108 0801 	add.w	r8, r8, #1
 80146fe:	68e3      	ldr	r3, [r4, #12]
 8014700:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014702:	1a5b      	subs	r3, r3, r1
 8014704:	4543      	cmp	r3, r8
 8014706:	dcf0      	bgt.n	80146ea <_printf_float+0x412>
 8014708:	e6f7      	b.n	80144fa <_printf_float+0x222>
 801470a:	f04f 0800 	mov.w	r8, #0
 801470e:	f104 0919 	add.w	r9, r4, #25
 8014712:	e7f4      	b.n	80146fe <_printf_float+0x426>

08014714 <_printf_common>:
 8014714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014718:	4616      	mov	r6, r2
 801471a:	4699      	mov	r9, r3
 801471c:	688a      	ldr	r2, [r1, #8]
 801471e:	690b      	ldr	r3, [r1, #16]
 8014720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014724:	4293      	cmp	r3, r2
 8014726:	bfb8      	it	lt
 8014728:	4613      	movlt	r3, r2
 801472a:	6033      	str	r3, [r6, #0]
 801472c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014730:	4607      	mov	r7, r0
 8014732:	460c      	mov	r4, r1
 8014734:	b10a      	cbz	r2, 801473a <_printf_common+0x26>
 8014736:	3301      	adds	r3, #1
 8014738:	6033      	str	r3, [r6, #0]
 801473a:	6823      	ldr	r3, [r4, #0]
 801473c:	0699      	lsls	r1, r3, #26
 801473e:	bf42      	ittt	mi
 8014740:	6833      	ldrmi	r3, [r6, #0]
 8014742:	3302      	addmi	r3, #2
 8014744:	6033      	strmi	r3, [r6, #0]
 8014746:	6825      	ldr	r5, [r4, #0]
 8014748:	f015 0506 	ands.w	r5, r5, #6
 801474c:	d106      	bne.n	801475c <_printf_common+0x48>
 801474e:	f104 0a19 	add.w	sl, r4, #25
 8014752:	68e3      	ldr	r3, [r4, #12]
 8014754:	6832      	ldr	r2, [r6, #0]
 8014756:	1a9b      	subs	r3, r3, r2
 8014758:	42ab      	cmp	r3, r5
 801475a:	dc26      	bgt.n	80147aa <_printf_common+0x96>
 801475c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014760:	1e13      	subs	r3, r2, #0
 8014762:	6822      	ldr	r2, [r4, #0]
 8014764:	bf18      	it	ne
 8014766:	2301      	movne	r3, #1
 8014768:	0692      	lsls	r2, r2, #26
 801476a:	d42b      	bmi.n	80147c4 <_printf_common+0xb0>
 801476c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014770:	4649      	mov	r1, r9
 8014772:	4638      	mov	r0, r7
 8014774:	47c0      	blx	r8
 8014776:	3001      	adds	r0, #1
 8014778:	d01e      	beq.n	80147b8 <_printf_common+0xa4>
 801477a:	6823      	ldr	r3, [r4, #0]
 801477c:	68e5      	ldr	r5, [r4, #12]
 801477e:	6832      	ldr	r2, [r6, #0]
 8014780:	f003 0306 	and.w	r3, r3, #6
 8014784:	2b04      	cmp	r3, #4
 8014786:	bf08      	it	eq
 8014788:	1aad      	subeq	r5, r5, r2
 801478a:	68a3      	ldr	r3, [r4, #8]
 801478c:	6922      	ldr	r2, [r4, #16]
 801478e:	bf0c      	ite	eq
 8014790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014794:	2500      	movne	r5, #0
 8014796:	4293      	cmp	r3, r2
 8014798:	bfc4      	itt	gt
 801479a:	1a9b      	subgt	r3, r3, r2
 801479c:	18ed      	addgt	r5, r5, r3
 801479e:	2600      	movs	r6, #0
 80147a0:	341a      	adds	r4, #26
 80147a2:	42b5      	cmp	r5, r6
 80147a4:	d11a      	bne.n	80147dc <_printf_common+0xc8>
 80147a6:	2000      	movs	r0, #0
 80147a8:	e008      	b.n	80147bc <_printf_common+0xa8>
 80147aa:	2301      	movs	r3, #1
 80147ac:	4652      	mov	r2, sl
 80147ae:	4649      	mov	r1, r9
 80147b0:	4638      	mov	r0, r7
 80147b2:	47c0      	blx	r8
 80147b4:	3001      	adds	r0, #1
 80147b6:	d103      	bne.n	80147c0 <_printf_common+0xac>
 80147b8:	f04f 30ff 	mov.w	r0, #4294967295
 80147bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c0:	3501      	adds	r5, #1
 80147c2:	e7c6      	b.n	8014752 <_printf_common+0x3e>
 80147c4:	18e1      	adds	r1, r4, r3
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	2030      	movs	r0, #48	; 0x30
 80147ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147ce:	4422      	add	r2, r4
 80147d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147d8:	3302      	adds	r3, #2
 80147da:	e7c7      	b.n	801476c <_printf_common+0x58>
 80147dc:	2301      	movs	r3, #1
 80147de:	4622      	mov	r2, r4
 80147e0:	4649      	mov	r1, r9
 80147e2:	4638      	mov	r0, r7
 80147e4:	47c0      	blx	r8
 80147e6:	3001      	adds	r0, #1
 80147e8:	d0e6      	beq.n	80147b8 <_printf_common+0xa4>
 80147ea:	3601      	adds	r6, #1
 80147ec:	e7d9      	b.n	80147a2 <_printf_common+0x8e>
	...

080147f0 <_printf_i>:
 80147f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147f4:	7e0f      	ldrb	r7, [r1, #24]
 80147f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80147f8:	2f78      	cmp	r7, #120	; 0x78
 80147fa:	4691      	mov	r9, r2
 80147fc:	4680      	mov	r8, r0
 80147fe:	460c      	mov	r4, r1
 8014800:	469a      	mov	sl, r3
 8014802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014806:	d807      	bhi.n	8014818 <_printf_i+0x28>
 8014808:	2f62      	cmp	r7, #98	; 0x62
 801480a:	d80a      	bhi.n	8014822 <_printf_i+0x32>
 801480c:	2f00      	cmp	r7, #0
 801480e:	f000 80d8 	beq.w	80149c2 <_printf_i+0x1d2>
 8014812:	2f58      	cmp	r7, #88	; 0x58
 8014814:	f000 80a3 	beq.w	801495e <_printf_i+0x16e>
 8014818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801481c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014820:	e03a      	b.n	8014898 <_printf_i+0xa8>
 8014822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014826:	2b15      	cmp	r3, #21
 8014828:	d8f6      	bhi.n	8014818 <_printf_i+0x28>
 801482a:	a101      	add	r1, pc, #4	; (adr r1, 8014830 <_printf_i+0x40>)
 801482c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014830:	08014889 	.word	0x08014889
 8014834:	0801489d 	.word	0x0801489d
 8014838:	08014819 	.word	0x08014819
 801483c:	08014819 	.word	0x08014819
 8014840:	08014819 	.word	0x08014819
 8014844:	08014819 	.word	0x08014819
 8014848:	0801489d 	.word	0x0801489d
 801484c:	08014819 	.word	0x08014819
 8014850:	08014819 	.word	0x08014819
 8014854:	08014819 	.word	0x08014819
 8014858:	08014819 	.word	0x08014819
 801485c:	080149a9 	.word	0x080149a9
 8014860:	080148cd 	.word	0x080148cd
 8014864:	0801498b 	.word	0x0801498b
 8014868:	08014819 	.word	0x08014819
 801486c:	08014819 	.word	0x08014819
 8014870:	080149cb 	.word	0x080149cb
 8014874:	08014819 	.word	0x08014819
 8014878:	080148cd 	.word	0x080148cd
 801487c:	08014819 	.word	0x08014819
 8014880:	08014819 	.word	0x08014819
 8014884:	08014993 	.word	0x08014993
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	1d1a      	adds	r2, r3, #4
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	602a      	str	r2, [r5, #0]
 8014890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014898:	2301      	movs	r3, #1
 801489a:	e0a3      	b.n	80149e4 <_printf_i+0x1f4>
 801489c:	6820      	ldr	r0, [r4, #0]
 801489e:	6829      	ldr	r1, [r5, #0]
 80148a0:	0606      	lsls	r6, r0, #24
 80148a2:	f101 0304 	add.w	r3, r1, #4
 80148a6:	d50a      	bpl.n	80148be <_printf_i+0xce>
 80148a8:	680e      	ldr	r6, [r1, #0]
 80148aa:	602b      	str	r3, [r5, #0]
 80148ac:	2e00      	cmp	r6, #0
 80148ae:	da03      	bge.n	80148b8 <_printf_i+0xc8>
 80148b0:	232d      	movs	r3, #45	; 0x2d
 80148b2:	4276      	negs	r6, r6
 80148b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148b8:	485e      	ldr	r0, [pc, #376]	; (8014a34 <_printf_i+0x244>)
 80148ba:	230a      	movs	r3, #10
 80148bc:	e019      	b.n	80148f2 <_printf_i+0x102>
 80148be:	680e      	ldr	r6, [r1, #0]
 80148c0:	602b      	str	r3, [r5, #0]
 80148c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80148c6:	bf18      	it	ne
 80148c8:	b236      	sxthne	r6, r6
 80148ca:	e7ef      	b.n	80148ac <_printf_i+0xbc>
 80148cc:	682b      	ldr	r3, [r5, #0]
 80148ce:	6820      	ldr	r0, [r4, #0]
 80148d0:	1d19      	adds	r1, r3, #4
 80148d2:	6029      	str	r1, [r5, #0]
 80148d4:	0601      	lsls	r1, r0, #24
 80148d6:	d501      	bpl.n	80148dc <_printf_i+0xec>
 80148d8:	681e      	ldr	r6, [r3, #0]
 80148da:	e002      	b.n	80148e2 <_printf_i+0xf2>
 80148dc:	0646      	lsls	r6, r0, #25
 80148de:	d5fb      	bpl.n	80148d8 <_printf_i+0xe8>
 80148e0:	881e      	ldrh	r6, [r3, #0]
 80148e2:	4854      	ldr	r0, [pc, #336]	; (8014a34 <_printf_i+0x244>)
 80148e4:	2f6f      	cmp	r7, #111	; 0x6f
 80148e6:	bf0c      	ite	eq
 80148e8:	2308      	moveq	r3, #8
 80148ea:	230a      	movne	r3, #10
 80148ec:	2100      	movs	r1, #0
 80148ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80148f2:	6865      	ldr	r5, [r4, #4]
 80148f4:	60a5      	str	r5, [r4, #8]
 80148f6:	2d00      	cmp	r5, #0
 80148f8:	bfa2      	ittt	ge
 80148fa:	6821      	ldrge	r1, [r4, #0]
 80148fc:	f021 0104 	bicge.w	r1, r1, #4
 8014900:	6021      	strge	r1, [r4, #0]
 8014902:	b90e      	cbnz	r6, 8014908 <_printf_i+0x118>
 8014904:	2d00      	cmp	r5, #0
 8014906:	d04d      	beq.n	80149a4 <_printf_i+0x1b4>
 8014908:	4615      	mov	r5, r2
 801490a:	fbb6 f1f3 	udiv	r1, r6, r3
 801490e:	fb03 6711 	mls	r7, r3, r1, r6
 8014912:	5dc7      	ldrb	r7, [r0, r7]
 8014914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014918:	4637      	mov	r7, r6
 801491a:	42bb      	cmp	r3, r7
 801491c:	460e      	mov	r6, r1
 801491e:	d9f4      	bls.n	801490a <_printf_i+0x11a>
 8014920:	2b08      	cmp	r3, #8
 8014922:	d10b      	bne.n	801493c <_printf_i+0x14c>
 8014924:	6823      	ldr	r3, [r4, #0]
 8014926:	07de      	lsls	r6, r3, #31
 8014928:	d508      	bpl.n	801493c <_printf_i+0x14c>
 801492a:	6923      	ldr	r3, [r4, #16]
 801492c:	6861      	ldr	r1, [r4, #4]
 801492e:	4299      	cmp	r1, r3
 8014930:	bfde      	ittt	le
 8014932:	2330      	movle	r3, #48	; 0x30
 8014934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014938:	f105 35ff 	addle.w	r5, r5, #4294967295
 801493c:	1b52      	subs	r2, r2, r5
 801493e:	6122      	str	r2, [r4, #16]
 8014940:	f8cd a000 	str.w	sl, [sp]
 8014944:	464b      	mov	r3, r9
 8014946:	aa03      	add	r2, sp, #12
 8014948:	4621      	mov	r1, r4
 801494a:	4640      	mov	r0, r8
 801494c:	f7ff fee2 	bl	8014714 <_printf_common>
 8014950:	3001      	adds	r0, #1
 8014952:	d14c      	bne.n	80149ee <_printf_i+0x1fe>
 8014954:	f04f 30ff 	mov.w	r0, #4294967295
 8014958:	b004      	add	sp, #16
 801495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801495e:	4835      	ldr	r0, [pc, #212]	; (8014a34 <_printf_i+0x244>)
 8014960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014964:	6829      	ldr	r1, [r5, #0]
 8014966:	6823      	ldr	r3, [r4, #0]
 8014968:	f851 6b04 	ldr.w	r6, [r1], #4
 801496c:	6029      	str	r1, [r5, #0]
 801496e:	061d      	lsls	r5, r3, #24
 8014970:	d514      	bpl.n	801499c <_printf_i+0x1ac>
 8014972:	07df      	lsls	r7, r3, #31
 8014974:	bf44      	itt	mi
 8014976:	f043 0320 	orrmi.w	r3, r3, #32
 801497a:	6023      	strmi	r3, [r4, #0]
 801497c:	b91e      	cbnz	r6, 8014986 <_printf_i+0x196>
 801497e:	6823      	ldr	r3, [r4, #0]
 8014980:	f023 0320 	bic.w	r3, r3, #32
 8014984:	6023      	str	r3, [r4, #0]
 8014986:	2310      	movs	r3, #16
 8014988:	e7b0      	b.n	80148ec <_printf_i+0xfc>
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	f043 0320 	orr.w	r3, r3, #32
 8014990:	6023      	str	r3, [r4, #0]
 8014992:	2378      	movs	r3, #120	; 0x78
 8014994:	4828      	ldr	r0, [pc, #160]	; (8014a38 <_printf_i+0x248>)
 8014996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801499a:	e7e3      	b.n	8014964 <_printf_i+0x174>
 801499c:	0659      	lsls	r1, r3, #25
 801499e:	bf48      	it	mi
 80149a0:	b2b6      	uxthmi	r6, r6
 80149a2:	e7e6      	b.n	8014972 <_printf_i+0x182>
 80149a4:	4615      	mov	r5, r2
 80149a6:	e7bb      	b.n	8014920 <_printf_i+0x130>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	6826      	ldr	r6, [r4, #0]
 80149ac:	6961      	ldr	r1, [r4, #20]
 80149ae:	1d18      	adds	r0, r3, #4
 80149b0:	6028      	str	r0, [r5, #0]
 80149b2:	0635      	lsls	r5, r6, #24
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	d501      	bpl.n	80149bc <_printf_i+0x1cc>
 80149b8:	6019      	str	r1, [r3, #0]
 80149ba:	e002      	b.n	80149c2 <_printf_i+0x1d2>
 80149bc:	0670      	lsls	r0, r6, #25
 80149be:	d5fb      	bpl.n	80149b8 <_printf_i+0x1c8>
 80149c0:	8019      	strh	r1, [r3, #0]
 80149c2:	2300      	movs	r3, #0
 80149c4:	6123      	str	r3, [r4, #16]
 80149c6:	4615      	mov	r5, r2
 80149c8:	e7ba      	b.n	8014940 <_printf_i+0x150>
 80149ca:	682b      	ldr	r3, [r5, #0]
 80149cc:	1d1a      	adds	r2, r3, #4
 80149ce:	602a      	str	r2, [r5, #0]
 80149d0:	681d      	ldr	r5, [r3, #0]
 80149d2:	6862      	ldr	r2, [r4, #4]
 80149d4:	2100      	movs	r1, #0
 80149d6:	4628      	mov	r0, r5
 80149d8:	f7eb fc3a 	bl	8000250 <memchr>
 80149dc:	b108      	cbz	r0, 80149e2 <_printf_i+0x1f2>
 80149de:	1b40      	subs	r0, r0, r5
 80149e0:	6060      	str	r0, [r4, #4]
 80149e2:	6863      	ldr	r3, [r4, #4]
 80149e4:	6123      	str	r3, [r4, #16]
 80149e6:	2300      	movs	r3, #0
 80149e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149ec:	e7a8      	b.n	8014940 <_printf_i+0x150>
 80149ee:	6923      	ldr	r3, [r4, #16]
 80149f0:	462a      	mov	r2, r5
 80149f2:	4649      	mov	r1, r9
 80149f4:	4640      	mov	r0, r8
 80149f6:	47d0      	blx	sl
 80149f8:	3001      	adds	r0, #1
 80149fa:	d0ab      	beq.n	8014954 <_printf_i+0x164>
 80149fc:	6823      	ldr	r3, [r4, #0]
 80149fe:	079b      	lsls	r3, r3, #30
 8014a00:	d413      	bmi.n	8014a2a <_printf_i+0x23a>
 8014a02:	68e0      	ldr	r0, [r4, #12]
 8014a04:	9b03      	ldr	r3, [sp, #12]
 8014a06:	4298      	cmp	r0, r3
 8014a08:	bfb8      	it	lt
 8014a0a:	4618      	movlt	r0, r3
 8014a0c:	e7a4      	b.n	8014958 <_printf_i+0x168>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	4632      	mov	r2, r6
 8014a12:	4649      	mov	r1, r9
 8014a14:	4640      	mov	r0, r8
 8014a16:	47d0      	blx	sl
 8014a18:	3001      	adds	r0, #1
 8014a1a:	d09b      	beq.n	8014954 <_printf_i+0x164>
 8014a1c:	3501      	adds	r5, #1
 8014a1e:	68e3      	ldr	r3, [r4, #12]
 8014a20:	9903      	ldr	r1, [sp, #12]
 8014a22:	1a5b      	subs	r3, r3, r1
 8014a24:	42ab      	cmp	r3, r5
 8014a26:	dcf2      	bgt.n	8014a0e <_printf_i+0x21e>
 8014a28:	e7eb      	b.n	8014a02 <_printf_i+0x212>
 8014a2a:	2500      	movs	r5, #0
 8014a2c:	f104 0619 	add.w	r6, r4, #25
 8014a30:	e7f5      	b.n	8014a1e <_printf_i+0x22e>
 8014a32:	bf00      	nop
 8014a34:	080183be 	.word	0x080183be
 8014a38:	080183cf 	.word	0x080183cf

08014a3c <_puts_r>:
 8014a3c:	b570      	push	{r4, r5, r6, lr}
 8014a3e:	460e      	mov	r6, r1
 8014a40:	4605      	mov	r5, r0
 8014a42:	b118      	cbz	r0, 8014a4c <_puts_r+0x10>
 8014a44:	6983      	ldr	r3, [r0, #24]
 8014a46:	b90b      	cbnz	r3, 8014a4c <_puts_r+0x10>
 8014a48:	f001 f872 	bl	8015b30 <__sinit>
 8014a4c:	69ab      	ldr	r3, [r5, #24]
 8014a4e:	68ac      	ldr	r4, [r5, #8]
 8014a50:	b913      	cbnz	r3, 8014a58 <_puts_r+0x1c>
 8014a52:	4628      	mov	r0, r5
 8014a54:	f001 f86c 	bl	8015b30 <__sinit>
 8014a58:	4b2c      	ldr	r3, [pc, #176]	; (8014b0c <_puts_r+0xd0>)
 8014a5a:	429c      	cmp	r4, r3
 8014a5c:	d120      	bne.n	8014aa0 <_puts_r+0x64>
 8014a5e:	686c      	ldr	r4, [r5, #4]
 8014a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a62:	07db      	lsls	r3, r3, #31
 8014a64:	d405      	bmi.n	8014a72 <_puts_r+0x36>
 8014a66:	89a3      	ldrh	r3, [r4, #12]
 8014a68:	0598      	lsls	r0, r3, #22
 8014a6a:	d402      	bmi.n	8014a72 <_puts_r+0x36>
 8014a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a6e:	f001 f902 	bl	8015c76 <__retarget_lock_acquire_recursive>
 8014a72:	89a3      	ldrh	r3, [r4, #12]
 8014a74:	0719      	lsls	r1, r3, #28
 8014a76:	d51d      	bpl.n	8014ab4 <_puts_r+0x78>
 8014a78:	6923      	ldr	r3, [r4, #16]
 8014a7a:	b1db      	cbz	r3, 8014ab4 <_puts_r+0x78>
 8014a7c:	3e01      	subs	r6, #1
 8014a7e:	68a3      	ldr	r3, [r4, #8]
 8014a80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014a84:	3b01      	subs	r3, #1
 8014a86:	60a3      	str	r3, [r4, #8]
 8014a88:	bb39      	cbnz	r1, 8014ada <_puts_r+0x9e>
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	da38      	bge.n	8014b00 <_puts_r+0xc4>
 8014a8e:	4622      	mov	r2, r4
 8014a90:	210a      	movs	r1, #10
 8014a92:	4628      	mov	r0, r5
 8014a94:	f000 f878 	bl	8014b88 <__swbuf_r>
 8014a98:	3001      	adds	r0, #1
 8014a9a:	d011      	beq.n	8014ac0 <_puts_r+0x84>
 8014a9c:	250a      	movs	r5, #10
 8014a9e:	e011      	b.n	8014ac4 <_puts_r+0x88>
 8014aa0:	4b1b      	ldr	r3, [pc, #108]	; (8014b10 <_puts_r+0xd4>)
 8014aa2:	429c      	cmp	r4, r3
 8014aa4:	d101      	bne.n	8014aaa <_puts_r+0x6e>
 8014aa6:	68ac      	ldr	r4, [r5, #8]
 8014aa8:	e7da      	b.n	8014a60 <_puts_r+0x24>
 8014aaa:	4b1a      	ldr	r3, [pc, #104]	; (8014b14 <_puts_r+0xd8>)
 8014aac:	429c      	cmp	r4, r3
 8014aae:	bf08      	it	eq
 8014ab0:	68ec      	ldreq	r4, [r5, #12]
 8014ab2:	e7d5      	b.n	8014a60 <_puts_r+0x24>
 8014ab4:	4621      	mov	r1, r4
 8014ab6:	4628      	mov	r0, r5
 8014ab8:	f000 f8b8 	bl	8014c2c <__swsetup_r>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d0dd      	beq.n	8014a7c <_puts_r+0x40>
 8014ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8014ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ac6:	07da      	lsls	r2, r3, #31
 8014ac8:	d405      	bmi.n	8014ad6 <_puts_r+0x9a>
 8014aca:	89a3      	ldrh	r3, [r4, #12]
 8014acc:	059b      	lsls	r3, r3, #22
 8014ace:	d402      	bmi.n	8014ad6 <_puts_r+0x9a>
 8014ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ad2:	f001 f8d1 	bl	8015c78 <__retarget_lock_release_recursive>
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	bd70      	pop	{r4, r5, r6, pc}
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	da04      	bge.n	8014ae8 <_puts_r+0xac>
 8014ade:	69a2      	ldr	r2, [r4, #24]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	dc06      	bgt.n	8014af2 <_puts_r+0xb6>
 8014ae4:	290a      	cmp	r1, #10
 8014ae6:	d004      	beq.n	8014af2 <_puts_r+0xb6>
 8014ae8:	6823      	ldr	r3, [r4, #0]
 8014aea:	1c5a      	adds	r2, r3, #1
 8014aec:	6022      	str	r2, [r4, #0]
 8014aee:	7019      	strb	r1, [r3, #0]
 8014af0:	e7c5      	b.n	8014a7e <_puts_r+0x42>
 8014af2:	4622      	mov	r2, r4
 8014af4:	4628      	mov	r0, r5
 8014af6:	f000 f847 	bl	8014b88 <__swbuf_r>
 8014afa:	3001      	adds	r0, #1
 8014afc:	d1bf      	bne.n	8014a7e <_puts_r+0x42>
 8014afe:	e7df      	b.n	8014ac0 <_puts_r+0x84>
 8014b00:	6823      	ldr	r3, [r4, #0]
 8014b02:	250a      	movs	r5, #10
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	6022      	str	r2, [r4, #0]
 8014b08:	701d      	strb	r5, [r3, #0]
 8014b0a:	e7db      	b.n	8014ac4 <_puts_r+0x88>
 8014b0c:	08018490 	.word	0x08018490
 8014b10:	080184b0 	.word	0x080184b0
 8014b14:	08018470 	.word	0x08018470

08014b18 <puts>:
 8014b18:	4b02      	ldr	r3, [pc, #8]	; (8014b24 <puts+0xc>)
 8014b1a:	4601      	mov	r1, r0
 8014b1c:	6818      	ldr	r0, [r3, #0]
 8014b1e:	f7ff bf8d 	b.w	8014a3c <_puts_r>
 8014b22:	bf00      	nop
 8014b24:	20000f80 	.word	0x20000f80

08014b28 <_sbrk_r>:
 8014b28:	b538      	push	{r3, r4, r5, lr}
 8014b2a:	4d06      	ldr	r5, [pc, #24]	; (8014b44 <_sbrk_r+0x1c>)
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	4604      	mov	r4, r0
 8014b30:	4608      	mov	r0, r1
 8014b32:	602b      	str	r3, [r5, #0]
 8014b34:	f7ed f914 	bl	8001d60 <_sbrk>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d102      	bne.n	8014b42 <_sbrk_r+0x1a>
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	b103      	cbz	r3, 8014b42 <_sbrk_r+0x1a>
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
 8014b44:	200016d8 	.word	0x200016d8

08014b48 <siprintf>:
 8014b48:	b40e      	push	{r1, r2, r3}
 8014b4a:	b500      	push	{lr}
 8014b4c:	b09c      	sub	sp, #112	; 0x70
 8014b4e:	ab1d      	add	r3, sp, #116	; 0x74
 8014b50:	9002      	str	r0, [sp, #8]
 8014b52:	9006      	str	r0, [sp, #24]
 8014b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b58:	4809      	ldr	r0, [pc, #36]	; (8014b80 <siprintf+0x38>)
 8014b5a:	9107      	str	r1, [sp, #28]
 8014b5c:	9104      	str	r1, [sp, #16]
 8014b5e:	4909      	ldr	r1, [pc, #36]	; (8014b84 <siprintf+0x3c>)
 8014b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b64:	9105      	str	r1, [sp, #20]
 8014b66:	6800      	ldr	r0, [r0, #0]
 8014b68:	9301      	str	r3, [sp, #4]
 8014b6a:	a902      	add	r1, sp, #8
 8014b6c:	f001 fd1a 	bl	80165a4 <_svfiprintf_r>
 8014b70:	9b02      	ldr	r3, [sp, #8]
 8014b72:	2200      	movs	r2, #0
 8014b74:	701a      	strb	r2, [r3, #0]
 8014b76:	b01c      	add	sp, #112	; 0x70
 8014b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b7c:	b003      	add	sp, #12
 8014b7e:	4770      	bx	lr
 8014b80:	20000f80 	.word	0x20000f80
 8014b84:	ffff0208 	.word	0xffff0208

08014b88 <__swbuf_r>:
 8014b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b8a:	460e      	mov	r6, r1
 8014b8c:	4614      	mov	r4, r2
 8014b8e:	4605      	mov	r5, r0
 8014b90:	b118      	cbz	r0, 8014b9a <__swbuf_r+0x12>
 8014b92:	6983      	ldr	r3, [r0, #24]
 8014b94:	b90b      	cbnz	r3, 8014b9a <__swbuf_r+0x12>
 8014b96:	f000 ffcb 	bl	8015b30 <__sinit>
 8014b9a:	4b21      	ldr	r3, [pc, #132]	; (8014c20 <__swbuf_r+0x98>)
 8014b9c:	429c      	cmp	r4, r3
 8014b9e:	d12b      	bne.n	8014bf8 <__swbuf_r+0x70>
 8014ba0:	686c      	ldr	r4, [r5, #4]
 8014ba2:	69a3      	ldr	r3, [r4, #24]
 8014ba4:	60a3      	str	r3, [r4, #8]
 8014ba6:	89a3      	ldrh	r3, [r4, #12]
 8014ba8:	071a      	lsls	r2, r3, #28
 8014baa:	d52f      	bpl.n	8014c0c <__swbuf_r+0x84>
 8014bac:	6923      	ldr	r3, [r4, #16]
 8014bae:	b36b      	cbz	r3, 8014c0c <__swbuf_r+0x84>
 8014bb0:	6923      	ldr	r3, [r4, #16]
 8014bb2:	6820      	ldr	r0, [r4, #0]
 8014bb4:	1ac0      	subs	r0, r0, r3
 8014bb6:	6963      	ldr	r3, [r4, #20]
 8014bb8:	b2f6      	uxtb	r6, r6
 8014bba:	4283      	cmp	r3, r0
 8014bbc:	4637      	mov	r7, r6
 8014bbe:	dc04      	bgt.n	8014bca <__swbuf_r+0x42>
 8014bc0:	4621      	mov	r1, r4
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f000 ff20 	bl	8015a08 <_fflush_r>
 8014bc8:	bb30      	cbnz	r0, 8014c18 <__swbuf_r+0x90>
 8014bca:	68a3      	ldr	r3, [r4, #8]
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	60a3      	str	r3, [r4, #8]
 8014bd0:	6823      	ldr	r3, [r4, #0]
 8014bd2:	1c5a      	adds	r2, r3, #1
 8014bd4:	6022      	str	r2, [r4, #0]
 8014bd6:	701e      	strb	r6, [r3, #0]
 8014bd8:	6963      	ldr	r3, [r4, #20]
 8014bda:	3001      	adds	r0, #1
 8014bdc:	4283      	cmp	r3, r0
 8014bde:	d004      	beq.n	8014bea <__swbuf_r+0x62>
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	07db      	lsls	r3, r3, #31
 8014be4:	d506      	bpl.n	8014bf4 <__swbuf_r+0x6c>
 8014be6:	2e0a      	cmp	r6, #10
 8014be8:	d104      	bne.n	8014bf4 <__swbuf_r+0x6c>
 8014bea:	4621      	mov	r1, r4
 8014bec:	4628      	mov	r0, r5
 8014bee:	f000 ff0b 	bl	8015a08 <_fflush_r>
 8014bf2:	b988      	cbnz	r0, 8014c18 <__swbuf_r+0x90>
 8014bf4:	4638      	mov	r0, r7
 8014bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bf8:	4b0a      	ldr	r3, [pc, #40]	; (8014c24 <__swbuf_r+0x9c>)
 8014bfa:	429c      	cmp	r4, r3
 8014bfc:	d101      	bne.n	8014c02 <__swbuf_r+0x7a>
 8014bfe:	68ac      	ldr	r4, [r5, #8]
 8014c00:	e7cf      	b.n	8014ba2 <__swbuf_r+0x1a>
 8014c02:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <__swbuf_r+0xa0>)
 8014c04:	429c      	cmp	r4, r3
 8014c06:	bf08      	it	eq
 8014c08:	68ec      	ldreq	r4, [r5, #12]
 8014c0a:	e7ca      	b.n	8014ba2 <__swbuf_r+0x1a>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f000 f80c 	bl	8014c2c <__swsetup_r>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d0cb      	beq.n	8014bb0 <__swbuf_r+0x28>
 8014c18:	f04f 37ff 	mov.w	r7, #4294967295
 8014c1c:	e7ea      	b.n	8014bf4 <__swbuf_r+0x6c>
 8014c1e:	bf00      	nop
 8014c20:	08018490 	.word	0x08018490
 8014c24:	080184b0 	.word	0x080184b0
 8014c28:	08018470 	.word	0x08018470

08014c2c <__swsetup_r>:
 8014c2c:	4b32      	ldr	r3, [pc, #200]	; (8014cf8 <__swsetup_r+0xcc>)
 8014c2e:	b570      	push	{r4, r5, r6, lr}
 8014c30:	681d      	ldr	r5, [r3, #0]
 8014c32:	4606      	mov	r6, r0
 8014c34:	460c      	mov	r4, r1
 8014c36:	b125      	cbz	r5, 8014c42 <__swsetup_r+0x16>
 8014c38:	69ab      	ldr	r3, [r5, #24]
 8014c3a:	b913      	cbnz	r3, 8014c42 <__swsetup_r+0x16>
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	f000 ff77 	bl	8015b30 <__sinit>
 8014c42:	4b2e      	ldr	r3, [pc, #184]	; (8014cfc <__swsetup_r+0xd0>)
 8014c44:	429c      	cmp	r4, r3
 8014c46:	d10f      	bne.n	8014c68 <__swsetup_r+0x3c>
 8014c48:	686c      	ldr	r4, [r5, #4]
 8014c4a:	89a3      	ldrh	r3, [r4, #12]
 8014c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c50:	0719      	lsls	r1, r3, #28
 8014c52:	d42c      	bmi.n	8014cae <__swsetup_r+0x82>
 8014c54:	06dd      	lsls	r5, r3, #27
 8014c56:	d411      	bmi.n	8014c7c <__swsetup_r+0x50>
 8014c58:	2309      	movs	r3, #9
 8014c5a:	6033      	str	r3, [r6, #0]
 8014c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c60:	81a3      	strh	r3, [r4, #12]
 8014c62:	f04f 30ff 	mov.w	r0, #4294967295
 8014c66:	e03e      	b.n	8014ce6 <__swsetup_r+0xba>
 8014c68:	4b25      	ldr	r3, [pc, #148]	; (8014d00 <__swsetup_r+0xd4>)
 8014c6a:	429c      	cmp	r4, r3
 8014c6c:	d101      	bne.n	8014c72 <__swsetup_r+0x46>
 8014c6e:	68ac      	ldr	r4, [r5, #8]
 8014c70:	e7eb      	b.n	8014c4a <__swsetup_r+0x1e>
 8014c72:	4b24      	ldr	r3, [pc, #144]	; (8014d04 <__swsetup_r+0xd8>)
 8014c74:	429c      	cmp	r4, r3
 8014c76:	bf08      	it	eq
 8014c78:	68ec      	ldreq	r4, [r5, #12]
 8014c7a:	e7e6      	b.n	8014c4a <__swsetup_r+0x1e>
 8014c7c:	0758      	lsls	r0, r3, #29
 8014c7e:	d512      	bpl.n	8014ca6 <__swsetup_r+0x7a>
 8014c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c82:	b141      	cbz	r1, 8014c96 <__swsetup_r+0x6a>
 8014c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c88:	4299      	cmp	r1, r3
 8014c8a:	d002      	beq.n	8014c92 <__swsetup_r+0x66>
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f7ff f9b3 	bl	8013ff8 <_free_r>
 8014c92:	2300      	movs	r3, #0
 8014c94:	6363      	str	r3, [r4, #52]	; 0x34
 8014c96:	89a3      	ldrh	r3, [r4, #12]
 8014c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c9c:	81a3      	strh	r3, [r4, #12]
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	6063      	str	r3, [r4, #4]
 8014ca2:	6923      	ldr	r3, [r4, #16]
 8014ca4:	6023      	str	r3, [r4, #0]
 8014ca6:	89a3      	ldrh	r3, [r4, #12]
 8014ca8:	f043 0308 	orr.w	r3, r3, #8
 8014cac:	81a3      	strh	r3, [r4, #12]
 8014cae:	6923      	ldr	r3, [r4, #16]
 8014cb0:	b94b      	cbnz	r3, 8014cc6 <__swsetup_r+0x9a>
 8014cb2:	89a3      	ldrh	r3, [r4, #12]
 8014cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014cbc:	d003      	beq.n	8014cc6 <__swsetup_r+0x9a>
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	f000 ffff 	bl	8015cc4 <__smakebuf_r>
 8014cc6:	89a0      	ldrh	r0, [r4, #12]
 8014cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ccc:	f010 0301 	ands.w	r3, r0, #1
 8014cd0:	d00a      	beq.n	8014ce8 <__swsetup_r+0xbc>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	60a3      	str	r3, [r4, #8]
 8014cd6:	6963      	ldr	r3, [r4, #20]
 8014cd8:	425b      	negs	r3, r3
 8014cda:	61a3      	str	r3, [r4, #24]
 8014cdc:	6923      	ldr	r3, [r4, #16]
 8014cde:	b943      	cbnz	r3, 8014cf2 <__swsetup_r+0xc6>
 8014ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014ce4:	d1ba      	bne.n	8014c5c <__swsetup_r+0x30>
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}
 8014ce8:	0781      	lsls	r1, r0, #30
 8014cea:	bf58      	it	pl
 8014cec:	6963      	ldrpl	r3, [r4, #20]
 8014cee:	60a3      	str	r3, [r4, #8]
 8014cf0:	e7f4      	b.n	8014cdc <__swsetup_r+0xb0>
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	e7f7      	b.n	8014ce6 <__swsetup_r+0xba>
 8014cf6:	bf00      	nop
 8014cf8:	20000f80 	.word	0x20000f80
 8014cfc:	08018490 	.word	0x08018490
 8014d00:	080184b0 	.word	0x080184b0
 8014d04:	08018470 	.word	0x08018470

08014d08 <quorem>:
 8014d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	6903      	ldr	r3, [r0, #16]
 8014d0e:	690c      	ldr	r4, [r1, #16]
 8014d10:	42a3      	cmp	r3, r4
 8014d12:	4607      	mov	r7, r0
 8014d14:	f2c0 8081 	blt.w	8014e1a <quorem+0x112>
 8014d18:	3c01      	subs	r4, #1
 8014d1a:	f101 0814 	add.w	r8, r1, #20
 8014d1e:	f100 0514 	add.w	r5, r0, #20
 8014d22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d26:	9301      	str	r3, [sp, #4]
 8014d28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d30:	3301      	adds	r3, #1
 8014d32:	429a      	cmp	r2, r3
 8014d34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d40:	d331      	bcc.n	8014da6 <quorem+0x9e>
 8014d42:	f04f 0e00 	mov.w	lr, #0
 8014d46:	4640      	mov	r0, r8
 8014d48:	46ac      	mov	ip, r5
 8014d4a:	46f2      	mov	sl, lr
 8014d4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d50:	b293      	uxth	r3, r2
 8014d52:	fb06 e303 	mla	r3, r6, r3, lr
 8014d56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	ebaa 0303 	sub.w	r3, sl, r3
 8014d60:	f8dc a000 	ldr.w	sl, [ip]
 8014d64:	0c12      	lsrs	r2, r2, #16
 8014d66:	fa13 f38a 	uxtah	r3, r3, sl
 8014d6a:	fb06 e202 	mla	r2, r6, r2, lr
 8014d6e:	9300      	str	r3, [sp, #0]
 8014d70:	9b00      	ldr	r3, [sp, #0]
 8014d72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d76:	b292      	uxth	r2, r2
 8014d78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d80:	f8bd 3000 	ldrh.w	r3, [sp]
 8014d84:	4581      	cmp	r9, r0
 8014d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d8a:	f84c 3b04 	str.w	r3, [ip], #4
 8014d8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014d92:	d2db      	bcs.n	8014d4c <quorem+0x44>
 8014d94:	f855 300b 	ldr.w	r3, [r5, fp]
 8014d98:	b92b      	cbnz	r3, 8014da6 <quorem+0x9e>
 8014d9a:	9b01      	ldr	r3, [sp, #4]
 8014d9c:	3b04      	subs	r3, #4
 8014d9e:	429d      	cmp	r5, r3
 8014da0:	461a      	mov	r2, r3
 8014da2:	d32e      	bcc.n	8014e02 <quorem+0xfa>
 8014da4:	613c      	str	r4, [r7, #16]
 8014da6:	4638      	mov	r0, r7
 8014da8:	f001 fa5a 	bl	8016260 <__mcmp>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	db24      	blt.n	8014dfa <quorem+0xf2>
 8014db0:	3601      	adds	r6, #1
 8014db2:	4628      	mov	r0, r5
 8014db4:	f04f 0c00 	mov.w	ip, #0
 8014db8:	f858 2b04 	ldr.w	r2, [r8], #4
 8014dbc:	f8d0 e000 	ldr.w	lr, [r0]
 8014dc0:	b293      	uxth	r3, r2
 8014dc2:	ebac 0303 	sub.w	r3, ip, r3
 8014dc6:	0c12      	lsrs	r2, r2, #16
 8014dc8:	fa13 f38e 	uxtah	r3, r3, lr
 8014dcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dda:	45c1      	cmp	r9, r8
 8014ddc:	f840 3b04 	str.w	r3, [r0], #4
 8014de0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014de4:	d2e8      	bcs.n	8014db8 <quorem+0xb0>
 8014de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014dee:	b922      	cbnz	r2, 8014dfa <quorem+0xf2>
 8014df0:	3b04      	subs	r3, #4
 8014df2:	429d      	cmp	r5, r3
 8014df4:	461a      	mov	r2, r3
 8014df6:	d30a      	bcc.n	8014e0e <quorem+0x106>
 8014df8:	613c      	str	r4, [r7, #16]
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	b003      	add	sp, #12
 8014dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e02:	6812      	ldr	r2, [r2, #0]
 8014e04:	3b04      	subs	r3, #4
 8014e06:	2a00      	cmp	r2, #0
 8014e08:	d1cc      	bne.n	8014da4 <quorem+0x9c>
 8014e0a:	3c01      	subs	r4, #1
 8014e0c:	e7c7      	b.n	8014d9e <quorem+0x96>
 8014e0e:	6812      	ldr	r2, [r2, #0]
 8014e10:	3b04      	subs	r3, #4
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	d1f0      	bne.n	8014df8 <quorem+0xf0>
 8014e16:	3c01      	subs	r4, #1
 8014e18:	e7eb      	b.n	8014df2 <quorem+0xea>
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	e7ee      	b.n	8014dfc <quorem+0xf4>
	...

08014e20 <_dtoa_r>:
 8014e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e24:	ed2d 8b02 	vpush	{d8}
 8014e28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e2a:	b091      	sub	sp, #68	; 0x44
 8014e2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e30:	ec59 8b10 	vmov	r8, r9, d0
 8014e34:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014e36:	9106      	str	r1, [sp, #24]
 8014e38:	4606      	mov	r6, r0
 8014e3a:	9208      	str	r2, [sp, #32]
 8014e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8014e3e:	b975      	cbnz	r5, 8014e5e <_dtoa_r+0x3e>
 8014e40:	2010      	movs	r0, #16
 8014e42:	f7ff f899 	bl	8013f78 <malloc>
 8014e46:	4602      	mov	r2, r0
 8014e48:	6270      	str	r0, [r6, #36]	; 0x24
 8014e4a:	b920      	cbnz	r0, 8014e56 <_dtoa_r+0x36>
 8014e4c:	4baa      	ldr	r3, [pc, #680]	; (80150f8 <_dtoa_r+0x2d8>)
 8014e4e:	21ea      	movs	r1, #234	; 0xea
 8014e50:	48aa      	ldr	r0, [pc, #680]	; (80150fc <_dtoa_r+0x2dc>)
 8014e52:	f001 fcfd 	bl	8016850 <__assert_func>
 8014e56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e5a:	6005      	str	r5, [r0, #0]
 8014e5c:	60c5      	str	r5, [r0, #12]
 8014e5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e60:	6819      	ldr	r1, [r3, #0]
 8014e62:	b151      	cbz	r1, 8014e7a <_dtoa_r+0x5a>
 8014e64:	685a      	ldr	r2, [r3, #4]
 8014e66:	604a      	str	r2, [r1, #4]
 8014e68:	2301      	movs	r3, #1
 8014e6a:	4093      	lsls	r3, r2
 8014e6c:	608b      	str	r3, [r1, #8]
 8014e6e:	4630      	mov	r0, r6
 8014e70:	f000 ffb4 	bl	8015ddc <_Bfree>
 8014e74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e76:	2200      	movs	r2, #0
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	f1b9 0300 	subs.w	r3, r9, #0
 8014e7e:	bfbb      	ittet	lt
 8014e80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e84:	9303      	strlt	r3, [sp, #12]
 8014e86:	2300      	movge	r3, #0
 8014e88:	2201      	movlt	r2, #1
 8014e8a:	bfac      	ite	ge
 8014e8c:	6023      	strge	r3, [r4, #0]
 8014e8e:	6022      	strlt	r2, [r4, #0]
 8014e90:	4b9b      	ldr	r3, [pc, #620]	; (8015100 <_dtoa_r+0x2e0>)
 8014e92:	9c03      	ldr	r4, [sp, #12]
 8014e94:	43a3      	bics	r3, r4
 8014e96:	d11c      	bne.n	8014ed2 <_dtoa_r+0xb2>
 8014e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e9e:	6013      	str	r3, [r2, #0]
 8014ea0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014ea4:	ea53 0308 	orrs.w	r3, r3, r8
 8014ea8:	f000 84fd 	beq.w	80158a6 <_dtoa_r+0xa86>
 8014eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014eae:	b963      	cbnz	r3, 8014eca <_dtoa_r+0xaa>
 8014eb0:	4b94      	ldr	r3, [pc, #592]	; (8015104 <_dtoa_r+0x2e4>)
 8014eb2:	e01f      	b.n	8014ef4 <_dtoa_r+0xd4>
 8014eb4:	4b94      	ldr	r3, [pc, #592]	; (8015108 <_dtoa_r+0x2e8>)
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	3308      	adds	r3, #8
 8014eba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014ebc:	6013      	str	r3, [r2, #0]
 8014ebe:	9801      	ldr	r0, [sp, #4]
 8014ec0:	b011      	add	sp, #68	; 0x44
 8014ec2:	ecbd 8b02 	vpop	{d8}
 8014ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eca:	4b8e      	ldr	r3, [pc, #568]	; (8015104 <_dtoa_r+0x2e4>)
 8014ecc:	9301      	str	r3, [sp, #4]
 8014ece:	3303      	adds	r3, #3
 8014ed0:	e7f3      	b.n	8014eba <_dtoa_r+0x9a>
 8014ed2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014ed6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ede:	d10b      	bne.n	8014ef8 <_dtoa_r+0xd8>
 8014ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	6013      	str	r3, [r2, #0]
 8014ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f000 84d9 	beq.w	80158a0 <_dtoa_r+0xa80>
 8014eee:	4887      	ldr	r0, [pc, #540]	; (801510c <_dtoa_r+0x2ec>)
 8014ef0:	6018      	str	r0, [r3, #0]
 8014ef2:	1e43      	subs	r3, r0, #1
 8014ef4:	9301      	str	r3, [sp, #4]
 8014ef6:	e7e2      	b.n	8014ebe <_dtoa_r+0x9e>
 8014ef8:	a90f      	add	r1, sp, #60	; 0x3c
 8014efa:	aa0e      	add	r2, sp, #56	; 0x38
 8014efc:	4630      	mov	r0, r6
 8014efe:	eeb0 0b48 	vmov.f64	d0, d8
 8014f02:	f001 fa53 	bl	80163ac <__d2b>
 8014f06:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014f0a:	4605      	mov	r5, r0
 8014f0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014f0e:	2900      	cmp	r1, #0
 8014f10:	d046      	beq.n	8014fa0 <_dtoa_r+0x180>
 8014f12:	ee18 4a90 	vmov	r4, s17
 8014f16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014f1a:	ec53 2b18 	vmov	r2, r3, d8
 8014f1e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014f22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014f26:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014f2a:	2400      	movs	r4, #0
 8014f2c:	ec43 2b16 	vmov	d6, r2, r3
 8014f30:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014f34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80150e0 <_dtoa_r+0x2c0>
 8014f38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014f3c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80150e8 <_dtoa_r+0x2c8>
 8014f40:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f44:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80150f0 <_dtoa_r+0x2d0>
 8014f48:	ee07 1a90 	vmov	s15, r1
 8014f4c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014f50:	eeb0 7b46 	vmov.f64	d7, d6
 8014f54:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014f58:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f64:	ee16 ba90 	vmov	fp, s13
 8014f68:	940a      	str	r4, [sp, #40]	; 0x28
 8014f6a:	d508      	bpl.n	8014f7e <_dtoa_r+0x15e>
 8014f6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f70:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	bf18      	it	ne
 8014f7a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014f7e:	f1bb 0f16 	cmp.w	fp, #22
 8014f82:	d82f      	bhi.n	8014fe4 <_dtoa_r+0x1c4>
 8014f84:	4b62      	ldr	r3, [pc, #392]	; (8015110 <_dtoa_r+0x2f0>)
 8014f86:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014f8a:	ed93 7b00 	vldr	d7, [r3]
 8014f8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f96:	d501      	bpl.n	8014f9c <_dtoa_r+0x17c>
 8014f98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	e022      	b.n	8014fe6 <_dtoa_r+0x1c6>
 8014fa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014fa2:	4401      	add	r1, r0
 8014fa4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014fa8:	2b20      	cmp	r3, #32
 8014faa:	bfc1      	itttt	gt
 8014fac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014fb0:	fa04 f303 	lslgt.w	r3, r4, r3
 8014fb4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014fb8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014fbc:	bfd6      	itet	le
 8014fbe:	f1c3 0320 	rsble	r3, r3, #32
 8014fc2:	ea43 0808 	orrgt.w	r8, r3, r8
 8014fc6:	fa08 f803 	lslle.w	r8, r8, r3
 8014fca:	ee07 8a90 	vmov	s15, r8
 8014fce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fd2:	3901      	subs	r1, #1
 8014fd4:	ee17 4a90 	vmov	r4, s15
 8014fd8:	ec53 2b17 	vmov	r2, r3, d7
 8014fdc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014fe0:	2401      	movs	r4, #1
 8014fe2:	e7a3      	b.n	8014f2c <_dtoa_r+0x10c>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fe8:	1a43      	subs	r3, r0, r1
 8014fea:	1e5a      	subs	r2, r3, #1
 8014fec:	bf45      	ittet	mi
 8014fee:	f1c3 0301 	rsbmi	r3, r3, #1
 8014ff2:	9304      	strmi	r3, [sp, #16]
 8014ff4:	2300      	movpl	r3, #0
 8014ff6:	2300      	movmi	r3, #0
 8014ff8:	9205      	str	r2, [sp, #20]
 8014ffa:	bf54      	ite	pl
 8014ffc:	9304      	strpl	r3, [sp, #16]
 8014ffe:	9305      	strmi	r3, [sp, #20]
 8015000:	f1bb 0f00 	cmp.w	fp, #0
 8015004:	db18      	blt.n	8015038 <_dtoa_r+0x218>
 8015006:	9b05      	ldr	r3, [sp, #20]
 8015008:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801500c:	445b      	add	r3, fp
 801500e:	9305      	str	r3, [sp, #20]
 8015010:	2300      	movs	r3, #0
 8015012:	9a06      	ldr	r2, [sp, #24]
 8015014:	2a09      	cmp	r2, #9
 8015016:	d849      	bhi.n	80150ac <_dtoa_r+0x28c>
 8015018:	2a05      	cmp	r2, #5
 801501a:	bfc4      	itt	gt
 801501c:	3a04      	subgt	r2, #4
 801501e:	9206      	strgt	r2, [sp, #24]
 8015020:	9a06      	ldr	r2, [sp, #24]
 8015022:	f1a2 0202 	sub.w	r2, r2, #2
 8015026:	bfcc      	ite	gt
 8015028:	2400      	movgt	r4, #0
 801502a:	2401      	movle	r4, #1
 801502c:	2a03      	cmp	r2, #3
 801502e:	d848      	bhi.n	80150c2 <_dtoa_r+0x2a2>
 8015030:	e8df f002 	tbb	[pc, r2]
 8015034:	3a2c2e0b 	.word	0x3a2c2e0b
 8015038:	9b04      	ldr	r3, [sp, #16]
 801503a:	2200      	movs	r2, #0
 801503c:	eba3 030b 	sub.w	r3, r3, fp
 8015040:	9304      	str	r3, [sp, #16]
 8015042:	9209      	str	r2, [sp, #36]	; 0x24
 8015044:	f1cb 0300 	rsb	r3, fp, #0
 8015048:	e7e3      	b.n	8015012 <_dtoa_r+0x1f2>
 801504a:	2200      	movs	r2, #0
 801504c:	9207      	str	r2, [sp, #28]
 801504e:	9a08      	ldr	r2, [sp, #32]
 8015050:	2a00      	cmp	r2, #0
 8015052:	dc39      	bgt.n	80150c8 <_dtoa_r+0x2a8>
 8015054:	f04f 0a01 	mov.w	sl, #1
 8015058:	46d1      	mov	r9, sl
 801505a:	4652      	mov	r2, sl
 801505c:	f8cd a020 	str.w	sl, [sp, #32]
 8015060:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8015062:	2100      	movs	r1, #0
 8015064:	6079      	str	r1, [r7, #4]
 8015066:	2004      	movs	r0, #4
 8015068:	f100 0c14 	add.w	ip, r0, #20
 801506c:	4594      	cmp	ip, r2
 801506e:	6879      	ldr	r1, [r7, #4]
 8015070:	d92f      	bls.n	80150d2 <_dtoa_r+0x2b2>
 8015072:	4630      	mov	r0, r6
 8015074:	930d      	str	r3, [sp, #52]	; 0x34
 8015076:	f000 fe71 	bl	8015d5c <_Balloc>
 801507a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801507c:	9001      	str	r0, [sp, #4]
 801507e:	4602      	mov	r2, r0
 8015080:	2800      	cmp	r0, #0
 8015082:	d149      	bne.n	8015118 <_dtoa_r+0x2f8>
 8015084:	4b23      	ldr	r3, [pc, #140]	; (8015114 <_dtoa_r+0x2f4>)
 8015086:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801508a:	e6e1      	b.n	8014e50 <_dtoa_r+0x30>
 801508c:	2201      	movs	r2, #1
 801508e:	e7dd      	b.n	801504c <_dtoa_r+0x22c>
 8015090:	2200      	movs	r2, #0
 8015092:	9207      	str	r2, [sp, #28]
 8015094:	9a08      	ldr	r2, [sp, #32]
 8015096:	eb0b 0a02 	add.w	sl, fp, r2
 801509a:	f10a 0901 	add.w	r9, sl, #1
 801509e:	464a      	mov	r2, r9
 80150a0:	2a01      	cmp	r2, #1
 80150a2:	bfb8      	it	lt
 80150a4:	2201      	movlt	r2, #1
 80150a6:	e7db      	b.n	8015060 <_dtoa_r+0x240>
 80150a8:	2201      	movs	r2, #1
 80150aa:	e7f2      	b.n	8015092 <_dtoa_r+0x272>
 80150ac:	2401      	movs	r4, #1
 80150ae:	2200      	movs	r2, #0
 80150b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80150b4:	f04f 3aff 	mov.w	sl, #4294967295
 80150b8:	2100      	movs	r1, #0
 80150ba:	46d1      	mov	r9, sl
 80150bc:	2212      	movs	r2, #18
 80150be:	9108      	str	r1, [sp, #32]
 80150c0:	e7ce      	b.n	8015060 <_dtoa_r+0x240>
 80150c2:	2201      	movs	r2, #1
 80150c4:	9207      	str	r2, [sp, #28]
 80150c6:	e7f5      	b.n	80150b4 <_dtoa_r+0x294>
 80150c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80150cc:	46d1      	mov	r9, sl
 80150ce:	4652      	mov	r2, sl
 80150d0:	e7c6      	b.n	8015060 <_dtoa_r+0x240>
 80150d2:	3101      	adds	r1, #1
 80150d4:	6079      	str	r1, [r7, #4]
 80150d6:	0040      	lsls	r0, r0, #1
 80150d8:	e7c6      	b.n	8015068 <_dtoa_r+0x248>
 80150da:	bf00      	nop
 80150dc:	f3af 8000 	nop.w
 80150e0:	636f4361 	.word	0x636f4361
 80150e4:	3fd287a7 	.word	0x3fd287a7
 80150e8:	8b60c8b3 	.word	0x8b60c8b3
 80150ec:	3fc68a28 	.word	0x3fc68a28
 80150f0:	509f79fb 	.word	0x509f79fb
 80150f4:	3fd34413 	.word	0x3fd34413
 80150f8:	080183ed 	.word	0x080183ed
 80150fc:	08018404 	.word	0x08018404
 8015100:	7ff00000 	.word	0x7ff00000
 8015104:	080183e9 	.word	0x080183e9
 8015108:	080183e0 	.word	0x080183e0
 801510c:	080183bd 	.word	0x080183bd
 8015110:	08018558 	.word	0x08018558
 8015114:	0801845f 	.word	0x0801845f
 8015118:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801511a:	9901      	ldr	r1, [sp, #4]
 801511c:	6011      	str	r1, [r2, #0]
 801511e:	f1b9 0f0e 	cmp.w	r9, #14
 8015122:	d86c      	bhi.n	80151fe <_dtoa_r+0x3de>
 8015124:	2c00      	cmp	r4, #0
 8015126:	d06a      	beq.n	80151fe <_dtoa_r+0x3de>
 8015128:	f1bb 0f00 	cmp.w	fp, #0
 801512c:	f340 80a0 	ble.w	8015270 <_dtoa_r+0x450>
 8015130:	49c1      	ldr	r1, [pc, #772]	; (8015438 <_dtoa_r+0x618>)
 8015132:	f00b 020f 	and.w	r2, fp, #15
 8015136:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801513a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801513e:	ed92 7b00 	vldr	d7, [r2]
 8015142:	ea4f 112b 	mov.w	r1, fp, asr #4
 8015146:	f000 8087 	beq.w	8015258 <_dtoa_r+0x438>
 801514a:	4abc      	ldr	r2, [pc, #752]	; (801543c <_dtoa_r+0x61c>)
 801514c:	ed92 6b08 	vldr	d6, [r2, #32]
 8015150:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015154:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015158:	f001 010f 	and.w	r1, r1, #15
 801515c:	2203      	movs	r2, #3
 801515e:	48b7      	ldr	r0, [pc, #732]	; (801543c <_dtoa_r+0x61c>)
 8015160:	2900      	cmp	r1, #0
 8015162:	d17b      	bne.n	801525c <_dtoa_r+0x43c>
 8015164:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015168:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801516c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015172:	2900      	cmp	r1, #0
 8015174:	f000 80a2 	beq.w	80152bc <_dtoa_r+0x49c>
 8015178:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801517c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015180:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015188:	f140 8098 	bpl.w	80152bc <_dtoa_r+0x49c>
 801518c:	f1b9 0f00 	cmp.w	r9, #0
 8015190:	f000 8094 	beq.w	80152bc <_dtoa_r+0x49c>
 8015194:	f1ba 0f00 	cmp.w	sl, #0
 8015198:	dd2f      	ble.n	80151fa <_dtoa_r+0x3da>
 801519a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801519e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80151aa:	3201      	adds	r2, #1
 80151ac:	4650      	mov	r0, sl
 80151ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80151b6:	ee07 2a90 	vmov	s15, r2
 80151ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80151be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80151c2:	ee15 4a90 	vmov	r4, s11
 80151c6:	ec52 1b15 	vmov	r1, r2, d5
 80151ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80151ce:	2800      	cmp	r0, #0
 80151d0:	d177      	bne.n	80152c2 <_dtoa_r+0x4a2>
 80151d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80151d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151da:	ec42 1b17 	vmov	d7, r1, r2
 80151de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e6:	f300 8263 	bgt.w	80156b0 <_dtoa_r+0x890>
 80151ea:	eeb1 7b47 	vneg.f64	d7, d7
 80151ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f6:	f100 8258 	bmi.w	80156aa <_dtoa_r+0x88a>
 80151fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80151fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015200:	2a00      	cmp	r2, #0
 8015202:	f2c0 811d 	blt.w	8015440 <_dtoa_r+0x620>
 8015206:	f1bb 0f0e 	cmp.w	fp, #14
 801520a:	f300 8119 	bgt.w	8015440 <_dtoa_r+0x620>
 801520e:	4b8a      	ldr	r3, [pc, #552]	; (8015438 <_dtoa_r+0x618>)
 8015210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015214:	ed93 6b00 	vldr	d6, [r3]
 8015218:	9b08      	ldr	r3, [sp, #32]
 801521a:	2b00      	cmp	r3, #0
 801521c:	f280 80b7 	bge.w	801538e <_dtoa_r+0x56e>
 8015220:	f1b9 0f00 	cmp.w	r9, #0
 8015224:	f300 80b3 	bgt.w	801538e <_dtoa_r+0x56e>
 8015228:	f040 823f 	bne.w	80156aa <_dtoa_r+0x88a>
 801522c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015230:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015234:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015238:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015240:	464c      	mov	r4, r9
 8015242:	464f      	mov	r7, r9
 8015244:	f280 8215 	bge.w	8015672 <_dtoa_r+0x852>
 8015248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801524c:	2331      	movs	r3, #49	; 0x31
 801524e:	f808 3b01 	strb.w	r3, [r8], #1
 8015252:	f10b 0b01 	add.w	fp, fp, #1
 8015256:	e211      	b.n	801567c <_dtoa_r+0x85c>
 8015258:	2202      	movs	r2, #2
 801525a:	e780      	b.n	801515e <_dtoa_r+0x33e>
 801525c:	07cc      	lsls	r4, r1, #31
 801525e:	d504      	bpl.n	801526a <_dtoa_r+0x44a>
 8015260:	ed90 6b00 	vldr	d6, [r0]
 8015264:	3201      	adds	r2, #1
 8015266:	ee27 7b06 	vmul.f64	d7, d7, d6
 801526a:	1049      	asrs	r1, r1, #1
 801526c:	3008      	adds	r0, #8
 801526e:	e777      	b.n	8015160 <_dtoa_r+0x340>
 8015270:	d022      	beq.n	80152b8 <_dtoa_r+0x498>
 8015272:	f1cb 0100 	rsb	r1, fp, #0
 8015276:	4a70      	ldr	r2, [pc, #448]	; (8015438 <_dtoa_r+0x618>)
 8015278:	f001 000f 	and.w	r0, r1, #15
 801527c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015280:	ed92 7b00 	vldr	d7, [r2]
 8015284:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015288:	ed8d 7b02 	vstr	d7, [sp, #8]
 801528c:	486b      	ldr	r0, [pc, #428]	; (801543c <_dtoa_r+0x61c>)
 801528e:	1109      	asrs	r1, r1, #4
 8015290:	2400      	movs	r4, #0
 8015292:	2202      	movs	r2, #2
 8015294:	b929      	cbnz	r1, 80152a2 <_dtoa_r+0x482>
 8015296:	2c00      	cmp	r4, #0
 8015298:	f43f af6a 	beq.w	8015170 <_dtoa_r+0x350>
 801529c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152a0:	e766      	b.n	8015170 <_dtoa_r+0x350>
 80152a2:	07cf      	lsls	r7, r1, #31
 80152a4:	d505      	bpl.n	80152b2 <_dtoa_r+0x492>
 80152a6:	ed90 6b00 	vldr	d6, [r0]
 80152aa:	3201      	adds	r2, #1
 80152ac:	2401      	movs	r4, #1
 80152ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152b2:	1049      	asrs	r1, r1, #1
 80152b4:	3008      	adds	r0, #8
 80152b6:	e7ed      	b.n	8015294 <_dtoa_r+0x474>
 80152b8:	2202      	movs	r2, #2
 80152ba:	e759      	b.n	8015170 <_dtoa_r+0x350>
 80152bc:	465f      	mov	r7, fp
 80152be:	4648      	mov	r0, r9
 80152c0:	e775      	b.n	80151ae <_dtoa_r+0x38e>
 80152c2:	ec42 1b17 	vmov	d7, r1, r2
 80152c6:	4a5c      	ldr	r2, [pc, #368]	; (8015438 <_dtoa_r+0x618>)
 80152c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80152cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80152d0:	9a01      	ldr	r2, [sp, #4]
 80152d2:	1814      	adds	r4, r2, r0
 80152d4:	9a07      	ldr	r2, [sp, #28]
 80152d6:	b352      	cbz	r2, 801532e <_dtoa_r+0x50e>
 80152d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80152dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80152e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80152e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80152e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80152ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80152f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80152f4:	ee14 2a90 	vmov	r2, s9
 80152f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152fc:	3230      	adds	r2, #48	; 0x30
 80152fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015302:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530a:	f808 2b01 	strb.w	r2, [r8], #1
 801530e:	d439      	bmi.n	8015384 <_dtoa_r+0x564>
 8015310:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015314:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531c:	d472      	bmi.n	8015404 <_dtoa_r+0x5e4>
 801531e:	45a0      	cmp	r8, r4
 8015320:	f43f af6b 	beq.w	80151fa <_dtoa_r+0x3da>
 8015324:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015328:	ee26 6b03 	vmul.f64	d6, d6, d3
 801532c:	e7e0      	b.n	80152f0 <_dtoa_r+0x4d0>
 801532e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015332:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015336:	4621      	mov	r1, r4
 8015338:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801533c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015340:	ee14 2a90 	vmov	r2, s9
 8015344:	3230      	adds	r2, #48	; 0x30
 8015346:	f808 2b01 	strb.w	r2, [r8], #1
 801534a:	45a0      	cmp	r8, r4
 801534c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015350:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015354:	d118      	bne.n	8015388 <_dtoa_r+0x568>
 8015356:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801535a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801535e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015366:	dc4d      	bgt.n	8015404 <_dtoa_r+0x5e4>
 8015368:	ee35 7b47 	vsub.f64	d7, d5, d7
 801536c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015374:	f57f af41 	bpl.w	80151fa <_dtoa_r+0x3da>
 8015378:	4688      	mov	r8, r1
 801537a:	3901      	subs	r1, #1
 801537c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015380:	2b30      	cmp	r3, #48	; 0x30
 8015382:	d0f9      	beq.n	8015378 <_dtoa_r+0x558>
 8015384:	46bb      	mov	fp, r7
 8015386:	e02a      	b.n	80153de <_dtoa_r+0x5be>
 8015388:	ee26 6b03 	vmul.f64	d6, d6, d3
 801538c:	e7d6      	b.n	801533c <_dtoa_r+0x51c>
 801538e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015392:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801539a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801539e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80153a2:	ee15 3a10 	vmov	r3, s10
 80153a6:	3330      	adds	r3, #48	; 0x30
 80153a8:	f808 3b01 	strb.w	r3, [r8], #1
 80153ac:	9b01      	ldr	r3, [sp, #4]
 80153ae:	eba8 0303 	sub.w	r3, r8, r3
 80153b2:	4599      	cmp	r9, r3
 80153b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153bc:	d133      	bne.n	8015426 <_dtoa_r+0x606>
 80153be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ca:	dc1a      	bgt.n	8015402 <_dtoa_r+0x5e2>
 80153cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80153d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d4:	d103      	bne.n	80153de <_dtoa_r+0x5be>
 80153d6:	ee15 3a10 	vmov	r3, s10
 80153da:	07d9      	lsls	r1, r3, #31
 80153dc:	d411      	bmi.n	8015402 <_dtoa_r+0x5e2>
 80153de:	4629      	mov	r1, r5
 80153e0:	4630      	mov	r0, r6
 80153e2:	f000 fcfb 	bl	8015ddc <_Bfree>
 80153e6:	2300      	movs	r3, #0
 80153e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153ea:	f888 3000 	strb.w	r3, [r8]
 80153ee:	f10b 0301 	add.w	r3, fp, #1
 80153f2:	6013      	str	r3, [r2, #0]
 80153f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f43f ad61 	beq.w	8014ebe <_dtoa_r+0x9e>
 80153fc:	f8c3 8000 	str.w	r8, [r3]
 8015400:	e55d      	b.n	8014ebe <_dtoa_r+0x9e>
 8015402:	465f      	mov	r7, fp
 8015404:	4643      	mov	r3, r8
 8015406:	4698      	mov	r8, r3
 8015408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801540c:	2a39      	cmp	r2, #57	; 0x39
 801540e:	d106      	bne.n	801541e <_dtoa_r+0x5fe>
 8015410:	9a01      	ldr	r2, [sp, #4]
 8015412:	429a      	cmp	r2, r3
 8015414:	d1f7      	bne.n	8015406 <_dtoa_r+0x5e6>
 8015416:	9901      	ldr	r1, [sp, #4]
 8015418:	2230      	movs	r2, #48	; 0x30
 801541a:	3701      	adds	r7, #1
 801541c:	700a      	strb	r2, [r1, #0]
 801541e:	781a      	ldrb	r2, [r3, #0]
 8015420:	3201      	adds	r2, #1
 8015422:	701a      	strb	r2, [r3, #0]
 8015424:	e7ae      	b.n	8015384 <_dtoa_r+0x564>
 8015426:	ee27 7b04 	vmul.f64	d7, d7, d4
 801542a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015432:	d1b2      	bne.n	801539a <_dtoa_r+0x57a>
 8015434:	e7d3      	b.n	80153de <_dtoa_r+0x5be>
 8015436:	bf00      	nop
 8015438:	08018558 	.word	0x08018558
 801543c:	08018530 	.word	0x08018530
 8015440:	9907      	ldr	r1, [sp, #28]
 8015442:	2900      	cmp	r1, #0
 8015444:	f000 80d0 	beq.w	80155e8 <_dtoa_r+0x7c8>
 8015448:	9906      	ldr	r1, [sp, #24]
 801544a:	2901      	cmp	r1, #1
 801544c:	f300 80b4 	bgt.w	80155b8 <_dtoa_r+0x798>
 8015450:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015452:	2900      	cmp	r1, #0
 8015454:	f000 80ac 	beq.w	80155b0 <_dtoa_r+0x790>
 8015458:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801545c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015460:	461c      	mov	r4, r3
 8015462:	930a      	str	r3, [sp, #40]	; 0x28
 8015464:	9b04      	ldr	r3, [sp, #16]
 8015466:	4413      	add	r3, r2
 8015468:	9304      	str	r3, [sp, #16]
 801546a:	9b05      	ldr	r3, [sp, #20]
 801546c:	2101      	movs	r1, #1
 801546e:	4413      	add	r3, r2
 8015470:	4630      	mov	r0, r6
 8015472:	9305      	str	r3, [sp, #20]
 8015474:	f000 fd6a 	bl	8015f4c <__i2b>
 8015478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801547a:	4607      	mov	r7, r0
 801547c:	f1b8 0f00 	cmp.w	r8, #0
 8015480:	dd0d      	ble.n	801549e <_dtoa_r+0x67e>
 8015482:	9a05      	ldr	r2, [sp, #20]
 8015484:	2a00      	cmp	r2, #0
 8015486:	dd0a      	ble.n	801549e <_dtoa_r+0x67e>
 8015488:	4542      	cmp	r2, r8
 801548a:	9904      	ldr	r1, [sp, #16]
 801548c:	bfa8      	it	ge
 801548e:	4642      	movge	r2, r8
 8015490:	1a89      	subs	r1, r1, r2
 8015492:	9104      	str	r1, [sp, #16]
 8015494:	9905      	ldr	r1, [sp, #20]
 8015496:	eba8 0802 	sub.w	r8, r8, r2
 801549a:	1a8a      	subs	r2, r1, r2
 801549c:	9205      	str	r2, [sp, #20]
 801549e:	b303      	cbz	r3, 80154e2 <_dtoa_r+0x6c2>
 80154a0:	9a07      	ldr	r2, [sp, #28]
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	f000 80a5 	beq.w	80155f2 <_dtoa_r+0x7d2>
 80154a8:	2c00      	cmp	r4, #0
 80154aa:	dd13      	ble.n	80154d4 <_dtoa_r+0x6b4>
 80154ac:	4639      	mov	r1, r7
 80154ae:	4622      	mov	r2, r4
 80154b0:	4630      	mov	r0, r6
 80154b2:	930d      	str	r3, [sp, #52]	; 0x34
 80154b4:	f000 fe0a 	bl	80160cc <__pow5mult>
 80154b8:	462a      	mov	r2, r5
 80154ba:	4601      	mov	r1, r0
 80154bc:	4607      	mov	r7, r0
 80154be:	4630      	mov	r0, r6
 80154c0:	f000 fd5a 	bl	8015f78 <__multiply>
 80154c4:	4629      	mov	r1, r5
 80154c6:	900a      	str	r0, [sp, #40]	; 0x28
 80154c8:	4630      	mov	r0, r6
 80154ca:	f000 fc87 	bl	8015ddc <_Bfree>
 80154ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154d2:	4615      	mov	r5, r2
 80154d4:	1b1a      	subs	r2, r3, r4
 80154d6:	d004      	beq.n	80154e2 <_dtoa_r+0x6c2>
 80154d8:	4629      	mov	r1, r5
 80154da:	4630      	mov	r0, r6
 80154dc:	f000 fdf6 	bl	80160cc <__pow5mult>
 80154e0:	4605      	mov	r5, r0
 80154e2:	2101      	movs	r1, #1
 80154e4:	4630      	mov	r0, r6
 80154e6:	f000 fd31 	bl	8015f4c <__i2b>
 80154ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	f340 8081 	ble.w	80155f6 <_dtoa_r+0x7d6>
 80154f4:	461a      	mov	r2, r3
 80154f6:	4601      	mov	r1, r0
 80154f8:	4630      	mov	r0, r6
 80154fa:	f000 fde7 	bl	80160cc <__pow5mult>
 80154fe:	9b06      	ldr	r3, [sp, #24]
 8015500:	2b01      	cmp	r3, #1
 8015502:	4604      	mov	r4, r0
 8015504:	dd7a      	ble.n	80155fc <_dtoa_r+0x7dc>
 8015506:	2300      	movs	r3, #0
 8015508:	930a      	str	r3, [sp, #40]	; 0x28
 801550a:	6922      	ldr	r2, [r4, #16]
 801550c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015510:	6910      	ldr	r0, [r2, #16]
 8015512:	f000 fccb 	bl	8015eac <__hi0bits>
 8015516:	f1c0 0020 	rsb	r0, r0, #32
 801551a:	9b05      	ldr	r3, [sp, #20]
 801551c:	4418      	add	r0, r3
 801551e:	f010 001f 	ands.w	r0, r0, #31
 8015522:	f000 808c 	beq.w	801563e <_dtoa_r+0x81e>
 8015526:	f1c0 0220 	rsb	r2, r0, #32
 801552a:	2a04      	cmp	r2, #4
 801552c:	f340 8085 	ble.w	801563a <_dtoa_r+0x81a>
 8015530:	f1c0 001c 	rsb	r0, r0, #28
 8015534:	9b04      	ldr	r3, [sp, #16]
 8015536:	4403      	add	r3, r0
 8015538:	9304      	str	r3, [sp, #16]
 801553a:	9b05      	ldr	r3, [sp, #20]
 801553c:	4403      	add	r3, r0
 801553e:	4480      	add	r8, r0
 8015540:	9305      	str	r3, [sp, #20]
 8015542:	9b04      	ldr	r3, [sp, #16]
 8015544:	2b00      	cmp	r3, #0
 8015546:	dd05      	ble.n	8015554 <_dtoa_r+0x734>
 8015548:	4629      	mov	r1, r5
 801554a:	461a      	mov	r2, r3
 801554c:	4630      	mov	r0, r6
 801554e:	f000 fe17 	bl	8016180 <__lshift>
 8015552:	4605      	mov	r5, r0
 8015554:	9b05      	ldr	r3, [sp, #20]
 8015556:	2b00      	cmp	r3, #0
 8015558:	dd05      	ble.n	8015566 <_dtoa_r+0x746>
 801555a:	4621      	mov	r1, r4
 801555c:	461a      	mov	r2, r3
 801555e:	4630      	mov	r0, r6
 8015560:	f000 fe0e 	bl	8016180 <__lshift>
 8015564:	4604      	mov	r4, r0
 8015566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d06a      	beq.n	8015642 <_dtoa_r+0x822>
 801556c:	4621      	mov	r1, r4
 801556e:	4628      	mov	r0, r5
 8015570:	f000 fe76 	bl	8016260 <__mcmp>
 8015574:	2800      	cmp	r0, #0
 8015576:	da64      	bge.n	8015642 <_dtoa_r+0x822>
 8015578:	2300      	movs	r3, #0
 801557a:	4629      	mov	r1, r5
 801557c:	220a      	movs	r2, #10
 801557e:	4630      	mov	r0, r6
 8015580:	f000 fc4e 	bl	8015e20 <__multadd>
 8015584:	9b07      	ldr	r3, [sp, #28]
 8015586:	f10b 3bff 	add.w	fp, fp, #4294967295
 801558a:	4605      	mov	r5, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	f000 8191 	beq.w	80158b4 <_dtoa_r+0xa94>
 8015592:	4639      	mov	r1, r7
 8015594:	2300      	movs	r3, #0
 8015596:	220a      	movs	r2, #10
 8015598:	4630      	mov	r0, r6
 801559a:	f000 fc41 	bl	8015e20 <__multadd>
 801559e:	f1ba 0f00 	cmp.w	sl, #0
 80155a2:	4607      	mov	r7, r0
 80155a4:	f300 808d 	bgt.w	80156c2 <_dtoa_r+0x8a2>
 80155a8:	9b06      	ldr	r3, [sp, #24]
 80155aa:	2b02      	cmp	r3, #2
 80155ac:	dc50      	bgt.n	8015650 <_dtoa_r+0x830>
 80155ae:	e088      	b.n	80156c2 <_dtoa_r+0x8a2>
 80155b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80155b6:	e751      	b.n	801545c <_dtoa_r+0x63c>
 80155b8:	f109 34ff 	add.w	r4, r9, #4294967295
 80155bc:	42a3      	cmp	r3, r4
 80155be:	bfbf      	itttt	lt
 80155c0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80155c2:	1ae3      	sublt	r3, r4, r3
 80155c4:	18d2      	addlt	r2, r2, r3
 80155c6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80155c8:	bfb6      	itet	lt
 80155ca:	4623      	movlt	r3, r4
 80155cc:	1b1c      	subge	r4, r3, r4
 80155ce:	2400      	movlt	r4, #0
 80155d0:	f1b9 0f00 	cmp.w	r9, #0
 80155d4:	bfb5      	itete	lt
 80155d6:	9a04      	ldrlt	r2, [sp, #16]
 80155d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80155dc:	eba2 0809 	sublt.w	r8, r2, r9
 80155e0:	464a      	movge	r2, r9
 80155e2:	bfb8      	it	lt
 80155e4:	2200      	movlt	r2, #0
 80155e6:	e73c      	b.n	8015462 <_dtoa_r+0x642>
 80155e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80155ec:	9f07      	ldr	r7, [sp, #28]
 80155ee:	461c      	mov	r4, r3
 80155f0:	e744      	b.n	801547c <_dtoa_r+0x65c>
 80155f2:	461a      	mov	r2, r3
 80155f4:	e770      	b.n	80154d8 <_dtoa_r+0x6b8>
 80155f6:	9b06      	ldr	r3, [sp, #24]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	dc18      	bgt.n	801562e <_dtoa_r+0x80e>
 80155fc:	9b02      	ldr	r3, [sp, #8]
 80155fe:	b9b3      	cbnz	r3, 801562e <_dtoa_r+0x80e>
 8015600:	9b03      	ldr	r3, [sp, #12]
 8015602:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015606:	b9a2      	cbnz	r2, 8015632 <_dtoa_r+0x812>
 8015608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801560c:	0d12      	lsrs	r2, r2, #20
 801560e:	0512      	lsls	r2, r2, #20
 8015610:	b18a      	cbz	r2, 8015636 <_dtoa_r+0x816>
 8015612:	9b04      	ldr	r3, [sp, #16]
 8015614:	3301      	adds	r3, #1
 8015616:	9304      	str	r3, [sp, #16]
 8015618:	9b05      	ldr	r3, [sp, #20]
 801561a:	3301      	adds	r3, #1
 801561c:	9305      	str	r3, [sp, #20]
 801561e:	2301      	movs	r3, #1
 8015620:	930a      	str	r3, [sp, #40]	; 0x28
 8015622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015624:	2b00      	cmp	r3, #0
 8015626:	f47f af70 	bne.w	801550a <_dtoa_r+0x6ea>
 801562a:	2001      	movs	r0, #1
 801562c:	e775      	b.n	801551a <_dtoa_r+0x6fa>
 801562e:	2300      	movs	r3, #0
 8015630:	e7f6      	b.n	8015620 <_dtoa_r+0x800>
 8015632:	9b02      	ldr	r3, [sp, #8]
 8015634:	e7f4      	b.n	8015620 <_dtoa_r+0x800>
 8015636:	920a      	str	r2, [sp, #40]	; 0x28
 8015638:	e7f3      	b.n	8015622 <_dtoa_r+0x802>
 801563a:	d082      	beq.n	8015542 <_dtoa_r+0x722>
 801563c:	4610      	mov	r0, r2
 801563e:	301c      	adds	r0, #28
 8015640:	e778      	b.n	8015534 <_dtoa_r+0x714>
 8015642:	f1b9 0f00 	cmp.w	r9, #0
 8015646:	dc37      	bgt.n	80156b8 <_dtoa_r+0x898>
 8015648:	9b06      	ldr	r3, [sp, #24]
 801564a:	2b02      	cmp	r3, #2
 801564c:	dd34      	ble.n	80156b8 <_dtoa_r+0x898>
 801564e:	46ca      	mov	sl, r9
 8015650:	f1ba 0f00 	cmp.w	sl, #0
 8015654:	d10d      	bne.n	8015672 <_dtoa_r+0x852>
 8015656:	4621      	mov	r1, r4
 8015658:	4653      	mov	r3, sl
 801565a:	2205      	movs	r2, #5
 801565c:	4630      	mov	r0, r6
 801565e:	f000 fbdf 	bl	8015e20 <__multadd>
 8015662:	4601      	mov	r1, r0
 8015664:	4604      	mov	r4, r0
 8015666:	4628      	mov	r0, r5
 8015668:	f000 fdfa 	bl	8016260 <__mcmp>
 801566c:	2800      	cmp	r0, #0
 801566e:	f73f adeb 	bgt.w	8015248 <_dtoa_r+0x428>
 8015672:	9b08      	ldr	r3, [sp, #32]
 8015674:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015678:	ea6f 0b03 	mvn.w	fp, r3
 801567c:	f04f 0900 	mov.w	r9, #0
 8015680:	4621      	mov	r1, r4
 8015682:	4630      	mov	r0, r6
 8015684:	f000 fbaa 	bl	8015ddc <_Bfree>
 8015688:	2f00      	cmp	r7, #0
 801568a:	f43f aea8 	beq.w	80153de <_dtoa_r+0x5be>
 801568e:	f1b9 0f00 	cmp.w	r9, #0
 8015692:	d005      	beq.n	80156a0 <_dtoa_r+0x880>
 8015694:	45b9      	cmp	r9, r7
 8015696:	d003      	beq.n	80156a0 <_dtoa_r+0x880>
 8015698:	4649      	mov	r1, r9
 801569a:	4630      	mov	r0, r6
 801569c:	f000 fb9e 	bl	8015ddc <_Bfree>
 80156a0:	4639      	mov	r1, r7
 80156a2:	4630      	mov	r0, r6
 80156a4:	f000 fb9a 	bl	8015ddc <_Bfree>
 80156a8:	e699      	b.n	80153de <_dtoa_r+0x5be>
 80156aa:	2400      	movs	r4, #0
 80156ac:	4627      	mov	r7, r4
 80156ae:	e7e0      	b.n	8015672 <_dtoa_r+0x852>
 80156b0:	46bb      	mov	fp, r7
 80156b2:	4604      	mov	r4, r0
 80156b4:	4607      	mov	r7, r0
 80156b6:	e5c7      	b.n	8015248 <_dtoa_r+0x428>
 80156b8:	9b07      	ldr	r3, [sp, #28]
 80156ba:	46ca      	mov	sl, r9
 80156bc:	2b00      	cmp	r3, #0
 80156be:	f000 8100 	beq.w	80158c2 <_dtoa_r+0xaa2>
 80156c2:	f1b8 0f00 	cmp.w	r8, #0
 80156c6:	dd05      	ble.n	80156d4 <_dtoa_r+0x8b4>
 80156c8:	4639      	mov	r1, r7
 80156ca:	4642      	mov	r2, r8
 80156cc:	4630      	mov	r0, r6
 80156ce:	f000 fd57 	bl	8016180 <__lshift>
 80156d2:	4607      	mov	r7, r0
 80156d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d05d      	beq.n	8015796 <_dtoa_r+0x976>
 80156da:	6879      	ldr	r1, [r7, #4]
 80156dc:	4630      	mov	r0, r6
 80156de:	f000 fb3d 	bl	8015d5c <_Balloc>
 80156e2:	4680      	mov	r8, r0
 80156e4:	b928      	cbnz	r0, 80156f2 <_dtoa_r+0x8d2>
 80156e6:	4b82      	ldr	r3, [pc, #520]	; (80158f0 <_dtoa_r+0xad0>)
 80156e8:	4602      	mov	r2, r0
 80156ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156ee:	f7ff bbaf 	b.w	8014e50 <_dtoa_r+0x30>
 80156f2:	693a      	ldr	r2, [r7, #16]
 80156f4:	3202      	adds	r2, #2
 80156f6:	0092      	lsls	r2, r2, #2
 80156f8:	f107 010c 	add.w	r1, r7, #12
 80156fc:	300c      	adds	r0, #12
 80156fe:	f7fe fc4b 	bl	8013f98 <memcpy>
 8015702:	2201      	movs	r2, #1
 8015704:	4641      	mov	r1, r8
 8015706:	4630      	mov	r0, r6
 8015708:	f000 fd3a 	bl	8016180 <__lshift>
 801570c:	9b01      	ldr	r3, [sp, #4]
 801570e:	3301      	adds	r3, #1
 8015710:	9304      	str	r3, [sp, #16]
 8015712:	9b01      	ldr	r3, [sp, #4]
 8015714:	4453      	add	r3, sl
 8015716:	9308      	str	r3, [sp, #32]
 8015718:	9b02      	ldr	r3, [sp, #8]
 801571a:	f003 0301 	and.w	r3, r3, #1
 801571e:	46b9      	mov	r9, r7
 8015720:	9307      	str	r3, [sp, #28]
 8015722:	4607      	mov	r7, r0
 8015724:	9b04      	ldr	r3, [sp, #16]
 8015726:	4621      	mov	r1, r4
 8015728:	3b01      	subs	r3, #1
 801572a:	4628      	mov	r0, r5
 801572c:	9302      	str	r3, [sp, #8]
 801572e:	f7ff faeb 	bl	8014d08 <quorem>
 8015732:	4603      	mov	r3, r0
 8015734:	3330      	adds	r3, #48	; 0x30
 8015736:	9005      	str	r0, [sp, #20]
 8015738:	4649      	mov	r1, r9
 801573a:	4628      	mov	r0, r5
 801573c:	9309      	str	r3, [sp, #36]	; 0x24
 801573e:	f000 fd8f 	bl	8016260 <__mcmp>
 8015742:	463a      	mov	r2, r7
 8015744:	4682      	mov	sl, r0
 8015746:	4621      	mov	r1, r4
 8015748:	4630      	mov	r0, r6
 801574a:	f000 fda5 	bl	8016298 <__mdiff>
 801574e:	68c2      	ldr	r2, [r0, #12]
 8015750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015752:	4680      	mov	r8, r0
 8015754:	bb0a      	cbnz	r2, 801579a <_dtoa_r+0x97a>
 8015756:	4601      	mov	r1, r0
 8015758:	4628      	mov	r0, r5
 801575a:	f000 fd81 	bl	8016260 <__mcmp>
 801575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015760:	4602      	mov	r2, r0
 8015762:	4641      	mov	r1, r8
 8015764:	4630      	mov	r0, r6
 8015766:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801576a:	f000 fb37 	bl	8015ddc <_Bfree>
 801576e:	9b06      	ldr	r3, [sp, #24]
 8015770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015772:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015776:	ea43 0102 	orr.w	r1, r3, r2
 801577a:	9b07      	ldr	r3, [sp, #28]
 801577c:	430b      	orrs	r3, r1
 801577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015780:	d10d      	bne.n	801579e <_dtoa_r+0x97e>
 8015782:	2b39      	cmp	r3, #57	; 0x39
 8015784:	d029      	beq.n	80157da <_dtoa_r+0x9ba>
 8015786:	f1ba 0f00 	cmp.w	sl, #0
 801578a:	dd01      	ble.n	8015790 <_dtoa_r+0x970>
 801578c:	9b05      	ldr	r3, [sp, #20]
 801578e:	3331      	adds	r3, #49	; 0x31
 8015790:	9a02      	ldr	r2, [sp, #8]
 8015792:	7013      	strb	r3, [r2, #0]
 8015794:	e774      	b.n	8015680 <_dtoa_r+0x860>
 8015796:	4638      	mov	r0, r7
 8015798:	e7b8      	b.n	801570c <_dtoa_r+0x8ec>
 801579a:	2201      	movs	r2, #1
 801579c:	e7e1      	b.n	8015762 <_dtoa_r+0x942>
 801579e:	f1ba 0f00 	cmp.w	sl, #0
 80157a2:	db06      	blt.n	80157b2 <_dtoa_r+0x992>
 80157a4:	9906      	ldr	r1, [sp, #24]
 80157a6:	ea41 0a0a 	orr.w	sl, r1, sl
 80157aa:	9907      	ldr	r1, [sp, #28]
 80157ac:	ea5a 0101 	orrs.w	r1, sl, r1
 80157b0:	d120      	bne.n	80157f4 <_dtoa_r+0x9d4>
 80157b2:	2a00      	cmp	r2, #0
 80157b4:	ddec      	ble.n	8015790 <_dtoa_r+0x970>
 80157b6:	4629      	mov	r1, r5
 80157b8:	2201      	movs	r2, #1
 80157ba:	4630      	mov	r0, r6
 80157bc:	9304      	str	r3, [sp, #16]
 80157be:	f000 fcdf 	bl	8016180 <__lshift>
 80157c2:	4621      	mov	r1, r4
 80157c4:	4605      	mov	r5, r0
 80157c6:	f000 fd4b 	bl	8016260 <__mcmp>
 80157ca:	2800      	cmp	r0, #0
 80157cc:	9b04      	ldr	r3, [sp, #16]
 80157ce:	dc02      	bgt.n	80157d6 <_dtoa_r+0x9b6>
 80157d0:	d1de      	bne.n	8015790 <_dtoa_r+0x970>
 80157d2:	07da      	lsls	r2, r3, #31
 80157d4:	d5dc      	bpl.n	8015790 <_dtoa_r+0x970>
 80157d6:	2b39      	cmp	r3, #57	; 0x39
 80157d8:	d1d8      	bne.n	801578c <_dtoa_r+0x96c>
 80157da:	9a02      	ldr	r2, [sp, #8]
 80157dc:	2339      	movs	r3, #57	; 0x39
 80157de:	7013      	strb	r3, [r2, #0]
 80157e0:	4643      	mov	r3, r8
 80157e2:	4698      	mov	r8, r3
 80157e4:	3b01      	subs	r3, #1
 80157e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80157ea:	2a39      	cmp	r2, #57	; 0x39
 80157ec:	d051      	beq.n	8015892 <_dtoa_r+0xa72>
 80157ee:	3201      	adds	r2, #1
 80157f0:	701a      	strb	r2, [r3, #0]
 80157f2:	e745      	b.n	8015680 <_dtoa_r+0x860>
 80157f4:	2a00      	cmp	r2, #0
 80157f6:	dd03      	ble.n	8015800 <_dtoa_r+0x9e0>
 80157f8:	2b39      	cmp	r3, #57	; 0x39
 80157fa:	d0ee      	beq.n	80157da <_dtoa_r+0x9ba>
 80157fc:	3301      	adds	r3, #1
 80157fe:	e7c7      	b.n	8015790 <_dtoa_r+0x970>
 8015800:	9a04      	ldr	r2, [sp, #16]
 8015802:	9908      	ldr	r1, [sp, #32]
 8015804:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015808:	428a      	cmp	r2, r1
 801580a:	d02b      	beq.n	8015864 <_dtoa_r+0xa44>
 801580c:	4629      	mov	r1, r5
 801580e:	2300      	movs	r3, #0
 8015810:	220a      	movs	r2, #10
 8015812:	4630      	mov	r0, r6
 8015814:	f000 fb04 	bl	8015e20 <__multadd>
 8015818:	45b9      	cmp	r9, r7
 801581a:	4605      	mov	r5, r0
 801581c:	f04f 0300 	mov.w	r3, #0
 8015820:	f04f 020a 	mov.w	r2, #10
 8015824:	4649      	mov	r1, r9
 8015826:	4630      	mov	r0, r6
 8015828:	d107      	bne.n	801583a <_dtoa_r+0xa1a>
 801582a:	f000 faf9 	bl	8015e20 <__multadd>
 801582e:	4681      	mov	r9, r0
 8015830:	4607      	mov	r7, r0
 8015832:	9b04      	ldr	r3, [sp, #16]
 8015834:	3301      	adds	r3, #1
 8015836:	9304      	str	r3, [sp, #16]
 8015838:	e774      	b.n	8015724 <_dtoa_r+0x904>
 801583a:	f000 faf1 	bl	8015e20 <__multadd>
 801583e:	4639      	mov	r1, r7
 8015840:	4681      	mov	r9, r0
 8015842:	2300      	movs	r3, #0
 8015844:	220a      	movs	r2, #10
 8015846:	4630      	mov	r0, r6
 8015848:	f000 faea 	bl	8015e20 <__multadd>
 801584c:	4607      	mov	r7, r0
 801584e:	e7f0      	b.n	8015832 <_dtoa_r+0xa12>
 8015850:	f1ba 0f00 	cmp.w	sl, #0
 8015854:	9a01      	ldr	r2, [sp, #4]
 8015856:	bfcc      	ite	gt
 8015858:	46d0      	movgt	r8, sl
 801585a:	f04f 0801 	movle.w	r8, #1
 801585e:	4490      	add	r8, r2
 8015860:	f04f 0900 	mov.w	r9, #0
 8015864:	4629      	mov	r1, r5
 8015866:	2201      	movs	r2, #1
 8015868:	4630      	mov	r0, r6
 801586a:	9302      	str	r3, [sp, #8]
 801586c:	f000 fc88 	bl	8016180 <__lshift>
 8015870:	4621      	mov	r1, r4
 8015872:	4605      	mov	r5, r0
 8015874:	f000 fcf4 	bl	8016260 <__mcmp>
 8015878:	2800      	cmp	r0, #0
 801587a:	dcb1      	bgt.n	80157e0 <_dtoa_r+0x9c0>
 801587c:	d102      	bne.n	8015884 <_dtoa_r+0xa64>
 801587e:	9b02      	ldr	r3, [sp, #8]
 8015880:	07db      	lsls	r3, r3, #31
 8015882:	d4ad      	bmi.n	80157e0 <_dtoa_r+0x9c0>
 8015884:	4643      	mov	r3, r8
 8015886:	4698      	mov	r8, r3
 8015888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801588c:	2a30      	cmp	r2, #48	; 0x30
 801588e:	d0fa      	beq.n	8015886 <_dtoa_r+0xa66>
 8015890:	e6f6      	b.n	8015680 <_dtoa_r+0x860>
 8015892:	9a01      	ldr	r2, [sp, #4]
 8015894:	429a      	cmp	r2, r3
 8015896:	d1a4      	bne.n	80157e2 <_dtoa_r+0x9c2>
 8015898:	f10b 0b01 	add.w	fp, fp, #1
 801589c:	2331      	movs	r3, #49	; 0x31
 801589e:	e778      	b.n	8015792 <_dtoa_r+0x972>
 80158a0:	4b14      	ldr	r3, [pc, #80]	; (80158f4 <_dtoa_r+0xad4>)
 80158a2:	f7ff bb27 	b.w	8014ef4 <_dtoa_r+0xd4>
 80158a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f47f ab03 	bne.w	8014eb4 <_dtoa_r+0x94>
 80158ae:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <_dtoa_r+0xad8>)
 80158b0:	f7ff bb20 	b.w	8014ef4 <_dtoa_r+0xd4>
 80158b4:	f1ba 0f00 	cmp.w	sl, #0
 80158b8:	dc03      	bgt.n	80158c2 <_dtoa_r+0xaa2>
 80158ba:	9b06      	ldr	r3, [sp, #24]
 80158bc:	2b02      	cmp	r3, #2
 80158be:	f73f aec7 	bgt.w	8015650 <_dtoa_r+0x830>
 80158c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80158c6:	4621      	mov	r1, r4
 80158c8:	4628      	mov	r0, r5
 80158ca:	f7ff fa1d 	bl	8014d08 <quorem>
 80158ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80158d2:	f808 3b01 	strb.w	r3, [r8], #1
 80158d6:	9a01      	ldr	r2, [sp, #4]
 80158d8:	eba8 0202 	sub.w	r2, r8, r2
 80158dc:	4592      	cmp	sl, r2
 80158de:	ddb7      	ble.n	8015850 <_dtoa_r+0xa30>
 80158e0:	4629      	mov	r1, r5
 80158e2:	2300      	movs	r3, #0
 80158e4:	220a      	movs	r2, #10
 80158e6:	4630      	mov	r0, r6
 80158e8:	f000 fa9a 	bl	8015e20 <__multadd>
 80158ec:	4605      	mov	r5, r0
 80158ee:	e7ea      	b.n	80158c6 <_dtoa_r+0xaa6>
 80158f0:	0801845f 	.word	0x0801845f
 80158f4:	080183bc 	.word	0x080183bc
 80158f8:	080183e0 	.word	0x080183e0

080158fc <__sflush_r>:
 80158fc:	898a      	ldrh	r2, [r1, #12]
 80158fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015902:	4605      	mov	r5, r0
 8015904:	0710      	lsls	r0, r2, #28
 8015906:	460c      	mov	r4, r1
 8015908:	d458      	bmi.n	80159bc <__sflush_r+0xc0>
 801590a:	684b      	ldr	r3, [r1, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	dc05      	bgt.n	801591c <__sflush_r+0x20>
 8015910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015912:	2b00      	cmp	r3, #0
 8015914:	dc02      	bgt.n	801591c <__sflush_r+0x20>
 8015916:	2000      	movs	r0, #0
 8015918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801591c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801591e:	2e00      	cmp	r6, #0
 8015920:	d0f9      	beq.n	8015916 <__sflush_r+0x1a>
 8015922:	2300      	movs	r3, #0
 8015924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015928:	682f      	ldr	r7, [r5, #0]
 801592a:	602b      	str	r3, [r5, #0]
 801592c:	d032      	beq.n	8015994 <__sflush_r+0x98>
 801592e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015930:	89a3      	ldrh	r3, [r4, #12]
 8015932:	075a      	lsls	r2, r3, #29
 8015934:	d505      	bpl.n	8015942 <__sflush_r+0x46>
 8015936:	6863      	ldr	r3, [r4, #4]
 8015938:	1ac0      	subs	r0, r0, r3
 801593a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801593c:	b10b      	cbz	r3, 8015942 <__sflush_r+0x46>
 801593e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015940:	1ac0      	subs	r0, r0, r3
 8015942:	2300      	movs	r3, #0
 8015944:	4602      	mov	r2, r0
 8015946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015948:	6a21      	ldr	r1, [r4, #32]
 801594a:	4628      	mov	r0, r5
 801594c:	47b0      	blx	r6
 801594e:	1c43      	adds	r3, r0, #1
 8015950:	89a3      	ldrh	r3, [r4, #12]
 8015952:	d106      	bne.n	8015962 <__sflush_r+0x66>
 8015954:	6829      	ldr	r1, [r5, #0]
 8015956:	291d      	cmp	r1, #29
 8015958:	d82c      	bhi.n	80159b4 <__sflush_r+0xb8>
 801595a:	4a2a      	ldr	r2, [pc, #168]	; (8015a04 <__sflush_r+0x108>)
 801595c:	40ca      	lsrs	r2, r1
 801595e:	07d6      	lsls	r6, r2, #31
 8015960:	d528      	bpl.n	80159b4 <__sflush_r+0xb8>
 8015962:	2200      	movs	r2, #0
 8015964:	6062      	str	r2, [r4, #4]
 8015966:	04d9      	lsls	r1, r3, #19
 8015968:	6922      	ldr	r2, [r4, #16]
 801596a:	6022      	str	r2, [r4, #0]
 801596c:	d504      	bpl.n	8015978 <__sflush_r+0x7c>
 801596e:	1c42      	adds	r2, r0, #1
 8015970:	d101      	bne.n	8015976 <__sflush_r+0x7a>
 8015972:	682b      	ldr	r3, [r5, #0]
 8015974:	b903      	cbnz	r3, 8015978 <__sflush_r+0x7c>
 8015976:	6560      	str	r0, [r4, #84]	; 0x54
 8015978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801597a:	602f      	str	r7, [r5, #0]
 801597c:	2900      	cmp	r1, #0
 801597e:	d0ca      	beq.n	8015916 <__sflush_r+0x1a>
 8015980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015984:	4299      	cmp	r1, r3
 8015986:	d002      	beq.n	801598e <__sflush_r+0x92>
 8015988:	4628      	mov	r0, r5
 801598a:	f7fe fb35 	bl	8013ff8 <_free_r>
 801598e:	2000      	movs	r0, #0
 8015990:	6360      	str	r0, [r4, #52]	; 0x34
 8015992:	e7c1      	b.n	8015918 <__sflush_r+0x1c>
 8015994:	6a21      	ldr	r1, [r4, #32]
 8015996:	2301      	movs	r3, #1
 8015998:	4628      	mov	r0, r5
 801599a:	47b0      	blx	r6
 801599c:	1c41      	adds	r1, r0, #1
 801599e:	d1c7      	bne.n	8015930 <__sflush_r+0x34>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d0c4      	beq.n	8015930 <__sflush_r+0x34>
 80159a6:	2b1d      	cmp	r3, #29
 80159a8:	d001      	beq.n	80159ae <__sflush_r+0xb2>
 80159aa:	2b16      	cmp	r3, #22
 80159ac:	d101      	bne.n	80159b2 <__sflush_r+0xb6>
 80159ae:	602f      	str	r7, [r5, #0]
 80159b0:	e7b1      	b.n	8015916 <__sflush_r+0x1a>
 80159b2:	89a3      	ldrh	r3, [r4, #12]
 80159b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b8:	81a3      	strh	r3, [r4, #12]
 80159ba:	e7ad      	b.n	8015918 <__sflush_r+0x1c>
 80159bc:	690f      	ldr	r7, [r1, #16]
 80159be:	2f00      	cmp	r7, #0
 80159c0:	d0a9      	beq.n	8015916 <__sflush_r+0x1a>
 80159c2:	0793      	lsls	r3, r2, #30
 80159c4:	680e      	ldr	r6, [r1, #0]
 80159c6:	bf08      	it	eq
 80159c8:	694b      	ldreq	r3, [r1, #20]
 80159ca:	600f      	str	r7, [r1, #0]
 80159cc:	bf18      	it	ne
 80159ce:	2300      	movne	r3, #0
 80159d0:	eba6 0807 	sub.w	r8, r6, r7
 80159d4:	608b      	str	r3, [r1, #8]
 80159d6:	f1b8 0f00 	cmp.w	r8, #0
 80159da:	dd9c      	ble.n	8015916 <__sflush_r+0x1a>
 80159dc:	6a21      	ldr	r1, [r4, #32]
 80159de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159e0:	4643      	mov	r3, r8
 80159e2:	463a      	mov	r2, r7
 80159e4:	4628      	mov	r0, r5
 80159e6:	47b0      	blx	r6
 80159e8:	2800      	cmp	r0, #0
 80159ea:	dc06      	bgt.n	80159fa <__sflush_r+0xfe>
 80159ec:	89a3      	ldrh	r3, [r4, #12]
 80159ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159f2:	81a3      	strh	r3, [r4, #12]
 80159f4:	f04f 30ff 	mov.w	r0, #4294967295
 80159f8:	e78e      	b.n	8015918 <__sflush_r+0x1c>
 80159fa:	4407      	add	r7, r0
 80159fc:	eba8 0800 	sub.w	r8, r8, r0
 8015a00:	e7e9      	b.n	80159d6 <__sflush_r+0xda>
 8015a02:	bf00      	nop
 8015a04:	20400001 	.word	0x20400001

08015a08 <_fflush_r>:
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	690b      	ldr	r3, [r1, #16]
 8015a0c:	4605      	mov	r5, r0
 8015a0e:	460c      	mov	r4, r1
 8015a10:	b913      	cbnz	r3, 8015a18 <_fflush_r+0x10>
 8015a12:	2500      	movs	r5, #0
 8015a14:	4628      	mov	r0, r5
 8015a16:	bd38      	pop	{r3, r4, r5, pc}
 8015a18:	b118      	cbz	r0, 8015a22 <_fflush_r+0x1a>
 8015a1a:	6983      	ldr	r3, [r0, #24]
 8015a1c:	b90b      	cbnz	r3, 8015a22 <_fflush_r+0x1a>
 8015a1e:	f000 f887 	bl	8015b30 <__sinit>
 8015a22:	4b14      	ldr	r3, [pc, #80]	; (8015a74 <_fflush_r+0x6c>)
 8015a24:	429c      	cmp	r4, r3
 8015a26:	d11b      	bne.n	8015a60 <_fflush_r+0x58>
 8015a28:	686c      	ldr	r4, [r5, #4]
 8015a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d0ef      	beq.n	8015a12 <_fflush_r+0xa>
 8015a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a34:	07d0      	lsls	r0, r2, #31
 8015a36:	d404      	bmi.n	8015a42 <_fflush_r+0x3a>
 8015a38:	0599      	lsls	r1, r3, #22
 8015a3a:	d402      	bmi.n	8015a42 <_fflush_r+0x3a>
 8015a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a3e:	f000 f91a 	bl	8015c76 <__retarget_lock_acquire_recursive>
 8015a42:	4628      	mov	r0, r5
 8015a44:	4621      	mov	r1, r4
 8015a46:	f7ff ff59 	bl	80158fc <__sflush_r>
 8015a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a4c:	07da      	lsls	r2, r3, #31
 8015a4e:	4605      	mov	r5, r0
 8015a50:	d4e0      	bmi.n	8015a14 <_fflush_r+0xc>
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	059b      	lsls	r3, r3, #22
 8015a56:	d4dd      	bmi.n	8015a14 <_fflush_r+0xc>
 8015a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a5a:	f000 f90d 	bl	8015c78 <__retarget_lock_release_recursive>
 8015a5e:	e7d9      	b.n	8015a14 <_fflush_r+0xc>
 8015a60:	4b05      	ldr	r3, [pc, #20]	; (8015a78 <_fflush_r+0x70>)
 8015a62:	429c      	cmp	r4, r3
 8015a64:	d101      	bne.n	8015a6a <_fflush_r+0x62>
 8015a66:	68ac      	ldr	r4, [r5, #8]
 8015a68:	e7df      	b.n	8015a2a <_fflush_r+0x22>
 8015a6a:	4b04      	ldr	r3, [pc, #16]	; (8015a7c <_fflush_r+0x74>)
 8015a6c:	429c      	cmp	r4, r3
 8015a6e:	bf08      	it	eq
 8015a70:	68ec      	ldreq	r4, [r5, #12]
 8015a72:	e7da      	b.n	8015a2a <_fflush_r+0x22>
 8015a74:	08018490 	.word	0x08018490
 8015a78:	080184b0 	.word	0x080184b0
 8015a7c:	08018470 	.word	0x08018470

08015a80 <std>:
 8015a80:	2300      	movs	r3, #0
 8015a82:	b510      	push	{r4, lr}
 8015a84:	4604      	mov	r4, r0
 8015a86:	e9c0 3300 	strd	r3, r3, [r0]
 8015a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a8e:	6083      	str	r3, [r0, #8]
 8015a90:	8181      	strh	r1, [r0, #12]
 8015a92:	6643      	str	r3, [r0, #100]	; 0x64
 8015a94:	81c2      	strh	r2, [r0, #14]
 8015a96:	6183      	str	r3, [r0, #24]
 8015a98:	4619      	mov	r1, r3
 8015a9a:	2208      	movs	r2, #8
 8015a9c:	305c      	adds	r0, #92	; 0x5c
 8015a9e:	f7fe faa3 	bl	8013fe8 <memset>
 8015aa2:	4b05      	ldr	r3, [pc, #20]	; (8015ab8 <std+0x38>)
 8015aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8015aa6:	4b05      	ldr	r3, [pc, #20]	; (8015abc <std+0x3c>)
 8015aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8015aaa:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <std+0x40>)
 8015aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015aae:	4b05      	ldr	r3, [pc, #20]	; (8015ac4 <std+0x44>)
 8015ab0:	6224      	str	r4, [r4, #32]
 8015ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8015ab4:	bd10      	pop	{r4, pc}
 8015ab6:	bf00      	nop
 8015ab8:	080167a5 	.word	0x080167a5
 8015abc:	080167c7 	.word	0x080167c7
 8015ac0:	080167ff 	.word	0x080167ff
 8015ac4:	08016823 	.word	0x08016823

08015ac8 <_cleanup_r>:
 8015ac8:	4901      	ldr	r1, [pc, #4]	; (8015ad0 <_cleanup_r+0x8>)
 8015aca:	f000 b8af 	b.w	8015c2c <_fwalk_reent>
 8015ace:	bf00      	nop
 8015ad0:	08015a09 	.word	0x08015a09

08015ad4 <__sfmoreglue>:
 8015ad4:	b570      	push	{r4, r5, r6, lr}
 8015ad6:	2268      	movs	r2, #104	; 0x68
 8015ad8:	1e4d      	subs	r5, r1, #1
 8015ada:	4355      	muls	r5, r2
 8015adc:	460e      	mov	r6, r1
 8015ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015ae2:	f7fe faf5 	bl	80140d0 <_malloc_r>
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	b140      	cbz	r0, 8015afc <__sfmoreglue+0x28>
 8015aea:	2100      	movs	r1, #0
 8015aec:	e9c0 1600 	strd	r1, r6, [r0]
 8015af0:	300c      	adds	r0, #12
 8015af2:	60a0      	str	r0, [r4, #8]
 8015af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015af8:	f7fe fa76 	bl	8013fe8 <memset>
 8015afc:	4620      	mov	r0, r4
 8015afe:	bd70      	pop	{r4, r5, r6, pc}

08015b00 <__sfp_lock_acquire>:
 8015b00:	4801      	ldr	r0, [pc, #4]	; (8015b08 <__sfp_lock_acquire+0x8>)
 8015b02:	f000 b8b8 	b.w	8015c76 <__retarget_lock_acquire_recursive>
 8015b06:	bf00      	nop
 8015b08:	200016d5 	.word	0x200016d5

08015b0c <__sfp_lock_release>:
 8015b0c:	4801      	ldr	r0, [pc, #4]	; (8015b14 <__sfp_lock_release+0x8>)
 8015b0e:	f000 b8b3 	b.w	8015c78 <__retarget_lock_release_recursive>
 8015b12:	bf00      	nop
 8015b14:	200016d5 	.word	0x200016d5

08015b18 <__sinit_lock_acquire>:
 8015b18:	4801      	ldr	r0, [pc, #4]	; (8015b20 <__sinit_lock_acquire+0x8>)
 8015b1a:	f000 b8ac 	b.w	8015c76 <__retarget_lock_acquire_recursive>
 8015b1e:	bf00      	nop
 8015b20:	200016d6 	.word	0x200016d6

08015b24 <__sinit_lock_release>:
 8015b24:	4801      	ldr	r0, [pc, #4]	; (8015b2c <__sinit_lock_release+0x8>)
 8015b26:	f000 b8a7 	b.w	8015c78 <__retarget_lock_release_recursive>
 8015b2a:	bf00      	nop
 8015b2c:	200016d6 	.word	0x200016d6

08015b30 <__sinit>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	4604      	mov	r4, r0
 8015b34:	f7ff fff0 	bl	8015b18 <__sinit_lock_acquire>
 8015b38:	69a3      	ldr	r3, [r4, #24]
 8015b3a:	b11b      	cbz	r3, 8015b44 <__sinit+0x14>
 8015b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b40:	f7ff bff0 	b.w	8015b24 <__sinit_lock_release>
 8015b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015b48:	6523      	str	r3, [r4, #80]	; 0x50
 8015b4a:	4b13      	ldr	r3, [pc, #76]	; (8015b98 <__sinit+0x68>)
 8015b4c:	4a13      	ldr	r2, [pc, #76]	; (8015b9c <__sinit+0x6c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8015b52:	42a3      	cmp	r3, r4
 8015b54:	bf04      	itt	eq
 8015b56:	2301      	moveq	r3, #1
 8015b58:	61a3      	streq	r3, [r4, #24]
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	f000 f820 	bl	8015ba0 <__sfp>
 8015b60:	6060      	str	r0, [r4, #4]
 8015b62:	4620      	mov	r0, r4
 8015b64:	f000 f81c 	bl	8015ba0 <__sfp>
 8015b68:	60a0      	str	r0, [r4, #8]
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f000 f818 	bl	8015ba0 <__sfp>
 8015b70:	2200      	movs	r2, #0
 8015b72:	60e0      	str	r0, [r4, #12]
 8015b74:	2104      	movs	r1, #4
 8015b76:	6860      	ldr	r0, [r4, #4]
 8015b78:	f7ff ff82 	bl	8015a80 <std>
 8015b7c:	68a0      	ldr	r0, [r4, #8]
 8015b7e:	2201      	movs	r2, #1
 8015b80:	2109      	movs	r1, #9
 8015b82:	f7ff ff7d 	bl	8015a80 <std>
 8015b86:	68e0      	ldr	r0, [r4, #12]
 8015b88:	2202      	movs	r2, #2
 8015b8a:	2112      	movs	r1, #18
 8015b8c:	f7ff ff78 	bl	8015a80 <std>
 8015b90:	2301      	movs	r3, #1
 8015b92:	61a3      	str	r3, [r4, #24]
 8015b94:	e7d2      	b.n	8015b3c <__sinit+0xc>
 8015b96:	bf00      	nop
 8015b98:	080183a8 	.word	0x080183a8
 8015b9c:	08015ac9 	.word	0x08015ac9

08015ba0 <__sfp>:
 8015ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ba2:	4607      	mov	r7, r0
 8015ba4:	f7ff ffac 	bl	8015b00 <__sfp_lock_acquire>
 8015ba8:	4b1e      	ldr	r3, [pc, #120]	; (8015c24 <__sfp+0x84>)
 8015baa:	681e      	ldr	r6, [r3, #0]
 8015bac:	69b3      	ldr	r3, [r6, #24]
 8015bae:	b913      	cbnz	r3, 8015bb6 <__sfp+0x16>
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f7ff ffbd 	bl	8015b30 <__sinit>
 8015bb6:	3648      	adds	r6, #72	; 0x48
 8015bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015bbc:	3b01      	subs	r3, #1
 8015bbe:	d503      	bpl.n	8015bc8 <__sfp+0x28>
 8015bc0:	6833      	ldr	r3, [r6, #0]
 8015bc2:	b30b      	cbz	r3, 8015c08 <__sfp+0x68>
 8015bc4:	6836      	ldr	r6, [r6, #0]
 8015bc6:	e7f7      	b.n	8015bb8 <__sfp+0x18>
 8015bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015bcc:	b9d5      	cbnz	r5, 8015c04 <__sfp+0x64>
 8015bce:	4b16      	ldr	r3, [pc, #88]	; (8015c28 <__sfp+0x88>)
 8015bd0:	60e3      	str	r3, [r4, #12]
 8015bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8015bd8:	f000 f84c 	bl	8015c74 <__retarget_lock_init_recursive>
 8015bdc:	f7ff ff96 	bl	8015b0c <__sfp_lock_release>
 8015be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015be8:	6025      	str	r5, [r4, #0]
 8015bea:	61a5      	str	r5, [r4, #24]
 8015bec:	2208      	movs	r2, #8
 8015bee:	4629      	mov	r1, r5
 8015bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015bf4:	f7fe f9f8 	bl	8013fe8 <memset>
 8015bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c00:	4620      	mov	r0, r4
 8015c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c04:	3468      	adds	r4, #104	; 0x68
 8015c06:	e7d9      	b.n	8015bbc <__sfp+0x1c>
 8015c08:	2104      	movs	r1, #4
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	f7ff ff62 	bl	8015ad4 <__sfmoreglue>
 8015c10:	4604      	mov	r4, r0
 8015c12:	6030      	str	r0, [r6, #0]
 8015c14:	2800      	cmp	r0, #0
 8015c16:	d1d5      	bne.n	8015bc4 <__sfp+0x24>
 8015c18:	f7ff ff78 	bl	8015b0c <__sfp_lock_release>
 8015c1c:	230c      	movs	r3, #12
 8015c1e:	603b      	str	r3, [r7, #0]
 8015c20:	e7ee      	b.n	8015c00 <__sfp+0x60>
 8015c22:	bf00      	nop
 8015c24:	080183a8 	.word	0x080183a8
 8015c28:	ffff0001 	.word	0xffff0001

08015c2c <_fwalk_reent>:
 8015c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c30:	4606      	mov	r6, r0
 8015c32:	4688      	mov	r8, r1
 8015c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c38:	2700      	movs	r7, #0
 8015c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8015c42:	d505      	bpl.n	8015c50 <_fwalk_reent+0x24>
 8015c44:	6824      	ldr	r4, [r4, #0]
 8015c46:	2c00      	cmp	r4, #0
 8015c48:	d1f7      	bne.n	8015c3a <_fwalk_reent+0xe>
 8015c4a:	4638      	mov	r0, r7
 8015c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c50:	89ab      	ldrh	r3, [r5, #12]
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d907      	bls.n	8015c66 <_fwalk_reent+0x3a>
 8015c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	d003      	beq.n	8015c66 <_fwalk_reent+0x3a>
 8015c5e:	4629      	mov	r1, r5
 8015c60:	4630      	mov	r0, r6
 8015c62:	47c0      	blx	r8
 8015c64:	4307      	orrs	r7, r0
 8015c66:	3568      	adds	r5, #104	; 0x68
 8015c68:	e7e9      	b.n	8015c3e <_fwalk_reent+0x12>
	...

08015c6c <_localeconv_r>:
 8015c6c:	4800      	ldr	r0, [pc, #0]	; (8015c70 <_localeconv_r+0x4>)
 8015c6e:	4770      	bx	lr
 8015c70:	200010d4 	.word	0x200010d4

08015c74 <__retarget_lock_init_recursive>:
 8015c74:	4770      	bx	lr

08015c76 <__retarget_lock_acquire_recursive>:
 8015c76:	4770      	bx	lr

08015c78 <__retarget_lock_release_recursive>:
 8015c78:	4770      	bx	lr

08015c7a <__swhatbuf_r>:
 8015c7a:	b570      	push	{r4, r5, r6, lr}
 8015c7c:	460e      	mov	r6, r1
 8015c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c82:	2900      	cmp	r1, #0
 8015c84:	b096      	sub	sp, #88	; 0x58
 8015c86:	4614      	mov	r4, r2
 8015c88:	461d      	mov	r5, r3
 8015c8a:	da08      	bge.n	8015c9e <__swhatbuf_r+0x24>
 8015c8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015c90:	2200      	movs	r2, #0
 8015c92:	602a      	str	r2, [r5, #0]
 8015c94:	061a      	lsls	r2, r3, #24
 8015c96:	d410      	bmi.n	8015cba <__swhatbuf_r+0x40>
 8015c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c9c:	e00e      	b.n	8015cbc <__swhatbuf_r+0x42>
 8015c9e:	466a      	mov	r2, sp
 8015ca0:	f000 fe16 	bl	80168d0 <_fstat_r>
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	dbf1      	blt.n	8015c8c <__swhatbuf_r+0x12>
 8015ca8:	9a01      	ldr	r2, [sp, #4]
 8015caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015cb2:	425a      	negs	r2, r3
 8015cb4:	415a      	adcs	r2, r3
 8015cb6:	602a      	str	r2, [r5, #0]
 8015cb8:	e7ee      	b.n	8015c98 <__swhatbuf_r+0x1e>
 8015cba:	2340      	movs	r3, #64	; 0x40
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	6023      	str	r3, [r4, #0]
 8015cc0:	b016      	add	sp, #88	; 0x58
 8015cc2:	bd70      	pop	{r4, r5, r6, pc}

08015cc4 <__smakebuf_r>:
 8015cc4:	898b      	ldrh	r3, [r1, #12]
 8015cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cc8:	079d      	lsls	r5, r3, #30
 8015cca:	4606      	mov	r6, r0
 8015ccc:	460c      	mov	r4, r1
 8015cce:	d507      	bpl.n	8015ce0 <__smakebuf_r+0x1c>
 8015cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015cd4:	6023      	str	r3, [r4, #0]
 8015cd6:	6123      	str	r3, [r4, #16]
 8015cd8:	2301      	movs	r3, #1
 8015cda:	6163      	str	r3, [r4, #20]
 8015cdc:	b002      	add	sp, #8
 8015cde:	bd70      	pop	{r4, r5, r6, pc}
 8015ce0:	ab01      	add	r3, sp, #4
 8015ce2:	466a      	mov	r2, sp
 8015ce4:	f7ff ffc9 	bl	8015c7a <__swhatbuf_r>
 8015ce8:	9900      	ldr	r1, [sp, #0]
 8015cea:	4605      	mov	r5, r0
 8015cec:	4630      	mov	r0, r6
 8015cee:	f7fe f9ef 	bl	80140d0 <_malloc_r>
 8015cf2:	b948      	cbnz	r0, 8015d08 <__smakebuf_r+0x44>
 8015cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cf8:	059a      	lsls	r2, r3, #22
 8015cfa:	d4ef      	bmi.n	8015cdc <__smakebuf_r+0x18>
 8015cfc:	f023 0303 	bic.w	r3, r3, #3
 8015d00:	f043 0302 	orr.w	r3, r3, #2
 8015d04:	81a3      	strh	r3, [r4, #12]
 8015d06:	e7e3      	b.n	8015cd0 <__smakebuf_r+0xc>
 8015d08:	4b0d      	ldr	r3, [pc, #52]	; (8015d40 <__smakebuf_r+0x7c>)
 8015d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d0c:	89a3      	ldrh	r3, [r4, #12]
 8015d0e:	6020      	str	r0, [r4, #0]
 8015d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d14:	81a3      	strh	r3, [r4, #12]
 8015d16:	9b00      	ldr	r3, [sp, #0]
 8015d18:	6163      	str	r3, [r4, #20]
 8015d1a:	9b01      	ldr	r3, [sp, #4]
 8015d1c:	6120      	str	r0, [r4, #16]
 8015d1e:	b15b      	cbz	r3, 8015d38 <__smakebuf_r+0x74>
 8015d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d24:	4630      	mov	r0, r6
 8015d26:	f000 fde5 	bl	80168f4 <_isatty_r>
 8015d2a:	b128      	cbz	r0, 8015d38 <__smakebuf_r+0x74>
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	f023 0303 	bic.w	r3, r3, #3
 8015d32:	f043 0301 	orr.w	r3, r3, #1
 8015d36:	81a3      	strh	r3, [r4, #12]
 8015d38:	89a0      	ldrh	r0, [r4, #12]
 8015d3a:	4305      	orrs	r5, r0
 8015d3c:	81a5      	strh	r5, [r4, #12]
 8015d3e:	e7cd      	b.n	8015cdc <__smakebuf_r+0x18>
 8015d40:	08015ac9 	.word	0x08015ac9

08015d44 <__malloc_lock>:
 8015d44:	4801      	ldr	r0, [pc, #4]	; (8015d4c <__malloc_lock+0x8>)
 8015d46:	f7ff bf96 	b.w	8015c76 <__retarget_lock_acquire_recursive>
 8015d4a:	bf00      	nop
 8015d4c:	200016d4 	.word	0x200016d4

08015d50 <__malloc_unlock>:
 8015d50:	4801      	ldr	r0, [pc, #4]	; (8015d58 <__malloc_unlock+0x8>)
 8015d52:	f7ff bf91 	b.w	8015c78 <__retarget_lock_release_recursive>
 8015d56:	bf00      	nop
 8015d58:	200016d4 	.word	0x200016d4

08015d5c <_Balloc>:
 8015d5c:	b570      	push	{r4, r5, r6, lr}
 8015d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d60:	4604      	mov	r4, r0
 8015d62:	460d      	mov	r5, r1
 8015d64:	b976      	cbnz	r6, 8015d84 <_Balloc+0x28>
 8015d66:	2010      	movs	r0, #16
 8015d68:	f7fe f906 	bl	8013f78 <malloc>
 8015d6c:	4602      	mov	r2, r0
 8015d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8015d70:	b920      	cbnz	r0, 8015d7c <_Balloc+0x20>
 8015d72:	4b18      	ldr	r3, [pc, #96]	; (8015dd4 <_Balloc+0x78>)
 8015d74:	4818      	ldr	r0, [pc, #96]	; (8015dd8 <_Balloc+0x7c>)
 8015d76:	2166      	movs	r1, #102	; 0x66
 8015d78:	f000 fd6a 	bl	8016850 <__assert_func>
 8015d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d80:	6006      	str	r6, [r0, #0]
 8015d82:	60c6      	str	r6, [r0, #12]
 8015d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015d86:	68f3      	ldr	r3, [r6, #12]
 8015d88:	b183      	cbz	r3, 8015dac <_Balloc+0x50>
 8015d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d92:	b9b8      	cbnz	r0, 8015dc4 <_Balloc+0x68>
 8015d94:	2101      	movs	r1, #1
 8015d96:	fa01 f605 	lsl.w	r6, r1, r5
 8015d9a:	1d72      	adds	r2, r6, #5
 8015d9c:	0092      	lsls	r2, r2, #2
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f000 fb60 	bl	8016464 <_calloc_r>
 8015da4:	b160      	cbz	r0, 8015dc0 <_Balloc+0x64>
 8015da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015daa:	e00e      	b.n	8015dca <_Balloc+0x6e>
 8015dac:	2221      	movs	r2, #33	; 0x21
 8015dae:	2104      	movs	r1, #4
 8015db0:	4620      	mov	r0, r4
 8015db2:	f000 fb57 	bl	8016464 <_calloc_r>
 8015db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015db8:	60f0      	str	r0, [r6, #12]
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d1e4      	bne.n	8015d8a <_Balloc+0x2e>
 8015dc0:	2000      	movs	r0, #0
 8015dc2:	bd70      	pop	{r4, r5, r6, pc}
 8015dc4:	6802      	ldr	r2, [r0, #0]
 8015dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015dd0:	e7f7      	b.n	8015dc2 <_Balloc+0x66>
 8015dd2:	bf00      	nop
 8015dd4:	080183ed 	.word	0x080183ed
 8015dd8:	080184d0 	.word	0x080184d0

08015ddc <_Bfree>:
 8015ddc:	b570      	push	{r4, r5, r6, lr}
 8015dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015de0:	4605      	mov	r5, r0
 8015de2:	460c      	mov	r4, r1
 8015de4:	b976      	cbnz	r6, 8015e04 <_Bfree+0x28>
 8015de6:	2010      	movs	r0, #16
 8015de8:	f7fe f8c6 	bl	8013f78 <malloc>
 8015dec:	4602      	mov	r2, r0
 8015dee:	6268      	str	r0, [r5, #36]	; 0x24
 8015df0:	b920      	cbnz	r0, 8015dfc <_Bfree+0x20>
 8015df2:	4b09      	ldr	r3, [pc, #36]	; (8015e18 <_Bfree+0x3c>)
 8015df4:	4809      	ldr	r0, [pc, #36]	; (8015e1c <_Bfree+0x40>)
 8015df6:	218a      	movs	r1, #138	; 0x8a
 8015df8:	f000 fd2a 	bl	8016850 <__assert_func>
 8015dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e00:	6006      	str	r6, [r0, #0]
 8015e02:	60c6      	str	r6, [r0, #12]
 8015e04:	b13c      	cbz	r4, 8015e16 <_Bfree+0x3a>
 8015e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015e08:	6862      	ldr	r2, [r4, #4]
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e10:	6021      	str	r1, [r4, #0]
 8015e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015e16:	bd70      	pop	{r4, r5, r6, pc}
 8015e18:	080183ed 	.word	0x080183ed
 8015e1c:	080184d0 	.word	0x080184d0

08015e20 <__multadd>:
 8015e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e24:	690d      	ldr	r5, [r1, #16]
 8015e26:	4607      	mov	r7, r0
 8015e28:	460c      	mov	r4, r1
 8015e2a:	461e      	mov	r6, r3
 8015e2c:	f101 0c14 	add.w	ip, r1, #20
 8015e30:	2000      	movs	r0, #0
 8015e32:	f8dc 3000 	ldr.w	r3, [ip]
 8015e36:	b299      	uxth	r1, r3
 8015e38:	fb02 6101 	mla	r1, r2, r1, r6
 8015e3c:	0c1e      	lsrs	r6, r3, #16
 8015e3e:	0c0b      	lsrs	r3, r1, #16
 8015e40:	fb02 3306 	mla	r3, r2, r6, r3
 8015e44:	b289      	uxth	r1, r1
 8015e46:	3001      	adds	r0, #1
 8015e48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015e4c:	4285      	cmp	r5, r0
 8015e4e:	f84c 1b04 	str.w	r1, [ip], #4
 8015e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015e56:	dcec      	bgt.n	8015e32 <__multadd+0x12>
 8015e58:	b30e      	cbz	r6, 8015e9e <__multadd+0x7e>
 8015e5a:	68a3      	ldr	r3, [r4, #8]
 8015e5c:	42ab      	cmp	r3, r5
 8015e5e:	dc19      	bgt.n	8015e94 <__multadd+0x74>
 8015e60:	6861      	ldr	r1, [r4, #4]
 8015e62:	4638      	mov	r0, r7
 8015e64:	3101      	adds	r1, #1
 8015e66:	f7ff ff79 	bl	8015d5c <_Balloc>
 8015e6a:	4680      	mov	r8, r0
 8015e6c:	b928      	cbnz	r0, 8015e7a <__multadd+0x5a>
 8015e6e:	4602      	mov	r2, r0
 8015e70:	4b0c      	ldr	r3, [pc, #48]	; (8015ea4 <__multadd+0x84>)
 8015e72:	480d      	ldr	r0, [pc, #52]	; (8015ea8 <__multadd+0x88>)
 8015e74:	21b5      	movs	r1, #181	; 0xb5
 8015e76:	f000 fceb 	bl	8016850 <__assert_func>
 8015e7a:	6922      	ldr	r2, [r4, #16]
 8015e7c:	3202      	adds	r2, #2
 8015e7e:	f104 010c 	add.w	r1, r4, #12
 8015e82:	0092      	lsls	r2, r2, #2
 8015e84:	300c      	adds	r0, #12
 8015e86:	f7fe f887 	bl	8013f98 <memcpy>
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	4638      	mov	r0, r7
 8015e8e:	f7ff ffa5 	bl	8015ddc <_Bfree>
 8015e92:	4644      	mov	r4, r8
 8015e94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e98:	3501      	adds	r5, #1
 8015e9a:	615e      	str	r6, [r3, #20]
 8015e9c:	6125      	str	r5, [r4, #16]
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ea4:	0801845f 	.word	0x0801845f
 8015ea8:	080184d0 	.word	0x080184d0

08015eac <__hi0bits>:
 8015eac:	0c03      	lsrs	r3, r0, #16
 8015eae:	041b      	lsls	r3, r3, #16
 8015eb0:	b9d3      	cbnz	r3, 8015ee8 <__hi0bits+0x3c>
 8015eb2:	0400      	lsls	r0, r0, #16
 8015eb4:	2310      	movs	r3, #16
 8015eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015eba:	bf04      	itt	eq
 8015ebc:	0200      	lsleq	r0, r0, #8
 8015ebe:	3308      	addeq	r3, #8
 8015ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015ec4:	bf04      	itt	eq
 8015ec6:	0100      	lsleq	r0, r0, #4
 8015ec8:	3304      	addeq	r3, #4
 8015eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015ece:	bf04      	itt	eq
 8015ed0:	0080      	lsleq	r0, r0, #2
 8015ed2:	3302      	addeq	r3, #2
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	db05      	blt.n	8015ee4 <__hi0bits+0x38>
 8015ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015edc:	f103 0301 	add.w	r3, r3, #1
 8015ee0:	bf08      	it	eq
 8015ee2:	2320      	moveq	r3, #32
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	4770      	bx	lr
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e7e4      	b.n	8015eb6 <__hi0bits+0xa>

08015eec <__lo0bits>:
 8015eec:	6803      	ldr	r3, [r0, #0]
 8015eee:	f013 0207 	ands.w	r2, r3, #7
 8015ef2:	4601      	mov	r1, r0
 8015ef4:	d00b      	beq.n	8015f0e <__lo0bits+0x22>
 8015ef6:	07da      	lsls	r2, r3, #31
 8015ef8:	d423      	bmi.n	8015f42 <__lo0bits+0x56>
 8015efa:	0798      	lsls	r0, r3, #30
 8015efc:	bf49      	itett	mi
 8015efe:	085b      	lsrmi	r3, r3, #1
 8015f00:	089b      	lsrpl	r3, r3, #2
 8015f02:	2001      	movmi	r0, #1
 8015f04:	600b      	strmi	r3, [r1, #0]
 8015f06:	bf5c      	itt	pl
 8015f08:	600b      	strpl	r3, [r1, #0]
 8015f0a:	2002      	movpl	r0, #2
 8015f0c:	4770      	bx	lr
 8015f0e:	b298      	uxth	r0, r3
 8015f10:	b9a8      	cbnz	r0, 8015f3e <__lo0bits+0x52>
 8015f12:	0c1b      	lsrs	r3, r3, #16
 8015f14:	2010      	movs	r0, #16
 8015f16:	b2da      	uxtb	r2, r3
 8015f18:	b90a      	cbnz	r2, 8015f1e <__lo0bits+0x32>
 8015f1a:	3008      	adds	r0, #8
 8015f1c:	0a1b      	lsrs	r3, r3, #8
 8015f1e:	071a      	lsls	r2, r3, #28
 8015f20:	bf04      	itt	eq
 8015f22:	091b      	lsreq	r3, r3, #4
 8015f24:	3004      	addeq	r0, #4
 8015f26:	079a      	lsls	r2, r3, #30
 8015f28:	bf04      	itt	eq
 8015f2a:	089b      	lsreq	r3, r3, #2
 8015f2c:	3002      	addeq	r0, #2
 8015f2e:	07da      	lsls	r2, r3, #31
 8015f30:	d403      	bmi.n	8015f3a <__lo0bits+0x4e>
 8015f32:	085b      	lsrs	r3, r3, #1
 8015f34:	f100 0001 	add.w	r0, r0, #1
 8015f38:	d005      	beq.n	8015f46 <__lo0bits+0x5a>
 8015f3a:	600b      	str	r3, [r1, #0]
 8015f3c:	4770      	bx	lr
 8015f3e:	4610      	mov	r0, r2
 8015f40:	e7e9      	b.n	8015f16 <__lo0bits+0x2a>
 8015f42:	2000      	movs	r0, #0
 8015f44:	4770      	bx	lr
 8015f46:	2020      	movs	r0, #32
 8015f48:	4770      	bx	lr
	...

08015f4c <__i2b>:
 8015f4c:	b510      	push	{r4, lr}
 8015f4e:	460c      	mov	r4, r1
 8015f50:	2101      	movs	r1, #1
 8015f52:	f7ff ff03 	bl	8015d5c <_Balloc>
 8015f56:	4602      	mov	r2, r0
 8015f58:	b928      	cbnz	r0, 8015f66 <__i2b+0x1a>
 8015f5a:	4b05      	ldr	r3, [pc, #20]	; (8015f70 <__i2b+0x24>)
 8015f5c:	4805      	ldr	r0, [pc, #20]	; (8015f74 <__i2b+0x28>)
 8015f5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015f62:	f000 fc75 	bl	8016850 <__assert_func>
 8015f66:	2301      	movs	r3, #1
 8015f68:	6144      	str	r4, [r0, #20]
 8015f6a:	6103      	str	r3, [r0, #16]
 8015f6c:	bd10      	pop	{r4, pc}
 8015f6e:	bf00      	nop
 8015f70:	0801845f 	.word	0x0801845f
 8015f74:	080184d0 	.word	0x080184d0

08015f78 <__multiply>:
 8015f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f7c:	4691      	mov	r9, r2
 8015f7e:	690a      	ldr	r2, [r1, #16]
 8015f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	bfb8      	it	lt
 8015f88:	460b      	movlt	r3, r1
 8015f8a:	460c      	mov	r4, r1
 8015f8c:	bfbc      	itt	lt
 8015f8e:	464c      	movlt	r4, r9
 8015f90:	4699      	movlt	r9, r3
 8015f92:	6927      	ldr	r7, [r4, #16]
 8015f94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015f98:	68a3      	ldr	r3, [r4, #8]
 8015f9a:	6861      	ldr	r1, [r4, #4]
 8015f9c:	eb07 060a 	add.w	r6, r7, sl
 8015fa0:	42b3      	cmp	r3, r6
 8015fa2:	b085      	sub	sp, #20
 8015fa4:	bfb8      	it	lt
 8015fa6:	3101      	addlt	r1, #1
 8015fa8:	f7ff fed8 	bl	8015d5c <_Balloc>
 8015fac:	b930      	cbnz	r0, 8015fbc <__multiply+0x44>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	4b44      	ldr	r3, [pc, #272]	; (80160c4 <__multiply+0x14c>)
 8015fb2:	4845      	ldr	r0, [pc, #276]	; (80160c8 <__multiply+0x150>)
 8015fb4:	f240 115d 	movw	r1, #349	; 0x15d
 8015fb8:	f000 fc4a 	bl	8016850 <__assert_func>
 8015fbc:	f100 0514 	add.w	r5, r0, #20
 8015fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015fc4:	462b      	mov	r3, r5
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	4543      	cmp	r3, r8
 8015fca:	d321      	bcc.n	8016010 <__multiply+0x98>
 8015fcc:	f104 0314 	add.w	r3, r4, #20
 8015fd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015fd4:	f109 0314 	add.w	r3, r9, #20
 8015fd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015fdc:	9202      	str	r2, [sp, #8]
 8015fde:	1b3a      	subs	r2, r7, r4
 8015fe0:	3a15      	subs	r2, #21
 8015fe2:	f022 0203 	bic.w	r2, r2, #3
 8015fe6:	3204      	adds	r2, #4
 8015fe8:	f104 0115 	add.w	r1, r4, #21
 8015fec:	428f      	cmp	r7, r1
 8015fee:	bf38      	it	cc
 8015ff0:	2204      	movcc	r2, #4
 8015ff2:	9201      	str	r2, [sp, #4]
 8015ff4:	9a02      	ldr	r2, [sp, #8]
 8015ff6:	9303      	str	r3, [sp, #12]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d80c      	bhi.n	8016016 <__multiply+0x9e>
 8015ffc:	2e00      	cmp	r6, #0
 8015ffe:	dd03      	ble.n	8016008 <__multiply+0x90>
 8016000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016004:	2b00      	cmp	r3, #0
 8016006:	d05a      	beq.n	80160be <__multiply+0x146>
 8016008:	6106      	str	r6, [r0, #16]
 801600a:	b005      	add	sp, #20
 801600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016010:	f843 2b04 	str.w	r2, [r3], #4
 8016014:	e7d8      	b.n	8015fc8 <__multiply+0x50>
 8016016:	f8b3 a000 	ldrh.w	sl, [r3]
 801601a:	f1ba 0f00 	cmp.w	sl, #0
 801601e:	d024      	beq.n	801606a <__multiply+0xf2>
 8016020:	f104 0e14 	add.w	lr, r4, #20
 8016024:	46a9      	mov	r9, r5
 8016026:	f04f 0c00 	mov.w	ip, #0
 801602a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801602e:	f8d9 1000 	ldr.w	r1, [r9]
 8016032:	fa1f fb82 	uxth.w	fp, r2
 8016036:	b289      	uxth	r1, r1
 8016038:	fb0a 110b 	mla	r1, sl, fp, r1
 801603c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016040:	f8d9 2000 	ldr.w	r2, [r9]
 8016044:	4461      	add	r1, ip
 8016046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801604a:	fb0a c20b 	mla	r2, sl, fp, ip
 801604e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016052:	b289      	uxth	r1, r1
 8016054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016058:	4577      	cmp	r7, lr
 801605a:	f849 1b04 	str.w	r1, [r9], #4
 801605e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016062:	d8e2      	bhi.n	801602a <__multiply+0xb2>
 8016064:	9a01      	ldr	r2, [sp, #4]
 8016066:	f845 c002 	str.w	ip, [r5, r2]
 801606a:	9a03      	ldr	r2, [sp, #12]
 801606c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016070:	3304      	adds	r3, #4
 8016072:	f1b9 0f00 	cmp.w	r9, #0
 8016076:	d020      	beq.n	80160ba <__multiply+0x142>
 8016078:	6829      	ldr	r1, [r5, #0]
 801607a:	f104 0c14 	add.w	ip, r4, #20
 801607e:	46ae      	mov	lr, r5
 8016080:	f04f 0a00 	mov.w	sl, #0
 8016084:	f8bc b000 	ldrh.w	fp, [ip]
 8016088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801608c:	fb09 220b 	mla	r2, r9, fp, r2
 8016090:	4492      	add	sl, r2
 8016092:	b289      	uxth	r1, r1
 8016094:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016098:	f84e 1b04 	str.w	r1, [lr], #4
 801609c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80160a0:	f8be 1000 	ldrh.w	r1, [lr]
 80160a4:	0c12      	lsrs	r2, r2, #16
 80160a6:	fb09 1102 	mla	r1, r9, r2, r1
 80160aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80160ae:	4567      	cmp	r7, ip
 80160b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80160b4:	d8e6      	bhi.n	8016084 <__multiply+0x10c>
 80160b6:	9a01      	ldr	r2, [sp, #4]
 80160b8:	50a9      	str	r1, [r5, r2]
 80160ba:	3504      	adds	r5, #4
 80160bc:	e79a      	b.n	8015ff4 <__multiply+0x7c>
 80160be:	3e01      	subs	r6, #1
 80160c0:	e79c      	b.n	8015ffc <__multiply+0x84>
 80160c2:	bf00      	nop
 80160c4:	0801845f 	.word	0x0801845f
 80160c8:	080184d0 	.word	0x080184d0

080160cc <__pow5mult>:
 80160cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160d0:	4615      	mov	r5, r2
 80160d2:	f012 0203 	ands.w	r2, r2, #3
 80160d6:	4606      	mov	r6, r0
 80160d8:	460f      	mov	r7, r1
 80160da:	d007      	beq.n	80160ec <__pow5mult+0x20>
 80160dc:	4c25      	ldr	r4, [pc, #148]	; (8016174 <__pow5mult+0xa8>)
 80160de:	3a01      	subs	r2, #1
 80160e0:	2300      	movs	r3, #0
 80160e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160e6:	f7ff fe9b 	bl	8015e20 <__multadd>
 80160ea:	4607      	mov	r7, r0
 80160ec:	10ad      	asrs	r5, r5, #2
 80160ee:	d03d      	beq.n	801616c <__pow5mult+0xa0>
 80160f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80160f2:	b97c      	cbnz	r4, 8016114 <__pow5mult+0x48>
 80160f4:	2010      	movs	r0, #16
 80160f6:	f7fd ff3f 	bl	8013f78 <malloc>
 80160fa:	4602      	mov	r2, r0
 80160fc:	6270      	str	r0, [r6, #36]	; 0x24
 80160fe:	b928      	cbnz	r0, 801610c <__pow5mult+0x40>
 8016100:	4b1d      	ldr	r3, [pc, #116]	; (8016178 <__pow5mult+0xac>)
 8016102:	481e      	ldr	r0, [pc, #120]	; (801617c <__pow5mult+0xb0>)
 8016104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016108:	f000 fba2 	bl	8016850 <__assert_func>
 801610c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016110:	6004      	str	r4, [r0, #0]
 8016112:	60c4      	str	r4, [r0, #12]
 8016114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801611c:	b94c      	cbnz	r4, 8016132 <__pow5mult+0x66>
 801611e:	f240 2171 	movw	r1, #625	; 0x271
 8016122:	4630      	mov	r0, r6
 8016124:	f7ff ff12 	bl	8015f4c <__i2b>
 8016128:	2300      	movs	r3, #0
 801612a:	f8c8 0008 	str.w	r0, [r8, #8]
 801612e:	4604      	mov	r4, r0
 8016130:	6003      	str	r3, [r0, #0]
 8016132:	f04f 0900 	mov.w	r9, #0
 8016136:	07eb      	lsls	r3, r5, #31
 8016138:	d50a      	bpl.n	8016150 <__pow5mult+0x84>
 801613a:	4639      	mov	r1, r7
 801613c:	4622      	mov	r2, r4
 801613e:	4630      	mov	r0, r6
 8016140:	f7ff ff1a 	bl	8015f78 <__multiply>
 8016144:	4639      	mov	r1, r7
 8016146:	4680      	mov	r8, r0
 8016148:	4630      	mov	r0, r6
 801614a:	f7ff fe47 	bl	8015ddc <_Bfree>
 801614e:	4647      	mov	r7, r8
 8016150:	106d      	asrs	r5, r5, #1
 8016152:	d00b      	beq.n	801616c <__pow5mult+0xa0>
 8016154:	6820      	ldr	r0, [r4, #0]
 8016156:	b938      	cbnz	r0, 8016168 <__pow5mult+0x9c>
 8016158:	4622      	mov	r2, r4
 801615a:	4621      	mov	r1, r4
 801615c:	4630      	mov	r0, r6
 801615e:	f7ff ff0b 	bl	8015f78 <__multiply>
 8016162:	6020      	str	r0, [r4, #0]
 8016164:	f8c0 9000 	str.w	r9, [r0]
 8016168:	4604      	mov	r4, r0
 801616a:	e7e4      	b.n	8016136 <__pow5mult+0x6a>
 801616c:	4638      	mov	r0, r7
 801616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016172:	bf00      	nop
 8016174:	08018620 	.word	0x08018620
 8016178:	080183ed 	.word	0x080183ed
 801617c:	080184d0 	.word	0x080184d0

08016180 <__lshift>:
 8016180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016184:	460c      	mov	r4, r1
 8016186:	6849      	ldr	r1, [r1, #4]
 8016188:	6923      	ldr	r3, [r4, #16]
 801618a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801618e:	68a3      	ldr	r3, [r4, #8]
 8016190:	4607      	mov	r7, r0
 8016192:	4691      	mov	r9, r2
 8016194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016198:	f108 0601 	add.w	r6, r8, #1
 801619c:	42b3      	cmp	r3, r6
 801619e:	db0b      	blt.n	80161b8 <__lshift+0x38>
 80161a0:	4638      	mov	r0, r7
 80161a2:	f7ff fddb 	bl	8015d5c <_Balloc>
 80161a6:	4605      	mov	r5, r0
 80161a8:	b948      	cbnz	r0, 80161be <__lshift+0x3e>
 80161aa:	4602      	mov	r2, r0
 80161ac:	4b2a      	ldr	r3, [pc, #168]	; (8016258 <__lshift+0xd8>)
 80161ae:	482b      	ldr	r0, [pc, #172]	; (801625c <__lshift+0xdc>)
 80161b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80161b4:	f000 fb4c 	bl	8016850 <__assert_func>
 80161b8:	3101      	adds	r1, #1
 80161ba:	005b      	lsls	r3, r3, #1
 80161bc:	e7ee      	b.n	801619c <__lshift+0x1c>
 80161be:	2300      	movs	r3, #0
 80161c0:	f100 0114 	add.w	r1, r0, #20
 80161c4:	f100 0210 	add.w	r2, r0, #16
 80161c8:	4618      	mov	r0, r3
 80161ca:	4553      	cmp	r3, sl
 80161cc:	db37      	blt.n	801623e <__lshift+0xbe>
 80161ce:	6920      	ldr	r0, [r4, #16]
 80161d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161d4:	f104 0314 	add.w	r3, r4, #20
 80161d8:	f019 091f 	ands.w	r9, r9, #31
 80161dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80161e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80161e4:	d02f      	beq.n	8016246 <__lshift+0xc6>
 80161e6:	f1c9 0e20 	rsb	lr, r9, #32
 80161ea:	468a      	mov	sl, r1
 80161ec:	f04f 0c00 	mov.w	ip, #0
 80161f0:	681a      	ldr	r2, [r3, #0]
 80161f2:	fa02 f209 	lsl.w	r2, r2, r9
 80161f6:	ea42 020c 	orr.w	r2, r2, ip
 80161fa:	f84a 2b04 	str.w	r2, [sl], #4
 80161fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016202:	4298      	cmp	r0, r3
 8016204:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016208:	d8f2      	bhi.n	80161f0 <__lshift+0x70>
 801620a:	1b03      	subs	r3, r0, r4
 801620c:	3b15      	subs	r3, #21
 801620e:	f023 0303 	bic.w	r3, r3, #3
 8016212:	3304      	adds	r3, #4
 8016214:	f104 0215 	add.w	r2, r4, #21
 8016218:	4290      	cmp	r0, r2
 801621a:	bf38      	it	cc
 801621c:	2304      	movcc	r3, #4
 801621e:	f841 c003 	str.w	ip, [r1, r3]
 8016222:	f1bc 0f00 	cmp.w	ip, #0
 8016226:	d001      	beq.n	801622c <__lshift+0xac>
 8016228:	f108 0602 	add.w	r6, r8, #2
 801622c:	3e01      	subs	r6, #1
 801622e:	4638      	mov	r0, r7
 8016230:	612e      	str	r6, [r5, #16]
 8016232:	4621      	mov	r1, r4
 8016234:	f7ff fdd2 	bl	8015ddc <_Bfree>
 8016238:	4628      	mov	r0, r5
 801623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801623e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016242:	3301      	adds	r3, #1
 8016244:	e7c1      	b.n	80161ca <__lshift+0x4a>
 8016246:	3904      	subs	r1, #4
 8016248:	f853 2b04 	ldr.w	r2, [r3], #4
 801624c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016250:	4298      	cmp	r0, r3
 8016252:	d8f9      	bhi.n	8016248 <__lshift+0xc8>
 8016254:	e7ea      	b.n	801622c <__lshift+0xac>
 8016256:	bf00      	nop
 8016258:	0801845f 	.word	0x0801845f
 801625c:	080184d0 	.word	0x080184d0

08016260 <__mcmp>:
 8016260:	b530      	push	{r4, r5, lr}
 8016262:	6902      	ldr	r2, [r0, #16]
 8016264:	690c      	ldr	r4, [r1, #16]
 8016266:	1b12      	subs	r2, r2, r4
 8016268:	d10e      	bne.n	8016288 <__mcmp+0x28>
 801626a:	f100 0314 	add.w	r3, r0, #20
 801626e:	3114      	adds	r1, #20
 8016270:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016274:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016278:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801627c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016280:	42a5      	cmp	r5, r4
 8016282:	d003      	beq.n	801628c <__mcmp+0x2c>
 8016284:	d305      	bcc.n	8016292 <__mcmp+0x32>
 8016286:	2201      	movs	r2, #1
 8016288:	4610      	mov	r0, r2
 801628a:	bd30      	pop	{r4, r5, pc}
 801628c:	4283      	cmp	r3, r0
 801628e:	d3f3      	bcc.n	8016278 <__mcmp+0x18>
 8016290:	e7fa      	b.n	8016288 <__mcmp+0x28>
 8016292:	f04f 32ff 	mov.w	r2, #4294967295
 8016296:	e7f7      	b.n	8016288 <__mcmp+0x28>

08016298 <__mdiff>:
 8016298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801629c:	460c      	mov	r4, r1
 801629e:	4606      	mov	r6, r0
 80162a0:	4611      	mov	r1, r2
 80162a2:	4620      	mov	r0, r4
 80162a4:	4690      	mov	r8, r2
 80162a6:	f7ff ffdb 	bl	8016260 <__mcmp>
 80162aa:	1e05      	subs	r5, r0, #0
 80162ac:	d110      	bne.n	80162d0 <__mdiff+0x38>
 80162ae:	4629      	mov	r1, r5
 80162b0:	4630      	mov	r0, r6
 80162b2:	f7ff fd53 	bl	8015d5c <_Balloc>
 80162b6:	b930      	cbnz	r0, 80162c6 <__mdiff+0x2e>
 80162b8:	4b3a      	ldr	r3, [pc, #232]	; (80163a4 <__mdiff+0x10c>)
 80162ba:	4602      	mov	r2, r0
 80162bc:	f240 2132 	movw	r1, #562	; 0x232
 80162c0:	4839      	ldr	r0, [pc, #228]	; (80163a8 <__mdiff+0x110>)
 80162c2:	f000 fac5 	bl	8016850 <__assert_func>
 80162c6:	2301      	movs	r3, #1
 80162c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80162cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d0:	bfa4      	itt	ge
 80162d2:	4643      	movge	r3, r8
 80162d4:	46a0      	movge	r8, r4
 80162d6:	4630      	mov	r0, r6
 80162d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80162dc:	bfa6      	itte	ge
 80162de:	461c      	movge	r4, r3
 80162e0:	2500      	movge	r5, #0
 80162e2:	2501      	movlt	r5, #1
 80162e4:	f7ff fd3a 	bl	8015d5c <_Balloc>
 80162e8:	b920      	cbnz	r0, 80162f4 <__mdiff+0x5c>
 80162ea:	4b2e      	ldr	r3, [pc, #184]	; (80163a4 <__mdiff+0x10c>)
 80162ec:	4602      	mov	r2, r0
 80162ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80162f2:	e7e5      	b.n	80162c0 <__mdiff+0x28>
 80162f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80162f8:	6926      	ldr	r6, [r4, #16]
 80162fa:	60c5      	str	r5, [r0, #12]
 80162fc:	f104 0914 	add.w	r9, r4, #20
 8016300:	f108 0514 	add.w	r5, r8, #20
 8016304:	f100 0e14 	add.w	lr, r0, #20
 8016308:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801630c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016310:	f108 0210 	add.w	r2, r8, #16
 8016314:	46f2      	mov	sl, lr
 8016316:	2100      	movs	r1, #0
 8016318:	f859 3b04 	ldr.w	r3, [r9], #4
 801631c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016320:	fa1f f883 	uxth.w	r8, r3
 8016324:	fa11 f18b 	uxtah	r1, r1, fp
 8016328:	0c1b      	lsrs	r3, r3, #16
 801632a:	eba1 0808 	sub.w	r8, r1, r8
 801632e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016332:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016336:	fa1f f888 	uxth.w	r8, r8
 801633a:	1419      	asrs	r1, r3, #16
 801633c:	454e      	cmp	r6, r9
 801633e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016342:	f84a 3b04 	str.w	r3, [sl], #4
 8016346:	d8e7      	bhi.n	8016318 <__mdiff+0x80>
 8016348:	1b33      	subs	r3, r6, r4
 801634a:	3b15      	subs	r3, #21
 801634c:	f023 0303 	bic.w	r3, r3, #3
 8016350:	3304      	adds	r3, #4
 8016352:	3415      	adds	r4, #21
 8016354:	42a6      	cmp	r6, r4
 8016356:	bf38      	it	cc
 8016358:	2304      	movcc	r3, #4
 801635a:	441d      	add	r5, r3
 801635c:	4473      	add	r3, lr
 801635e:	469e      	mov	lr, r3
 8016360:	462e      	mov	r6, r5
 8016362:	4566      	cmp	r6, ip
 8016364:	d30e      	bcc.n	8016384 <__mdiff+0xec>
 8016366:	f10c 0203 	add.w	r2, ip, #3
 801636a:	1b52      	subs	r2, r2, r5
 801636c:	f022 0203 	bic.w	r2, r2, #3
 8016370:	3d03      	subs	r5, #3
 8016372:	45ac      	cmp	ip, r5
 8016374:	bf38      	it	cc
 8016376:	2200      	movcc	r2, #0
 8016378:	441a      	add	r2, r3
 801637a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801637e:	b17b      	cbz	r3, 80163a0 <__mdiff+0x108>
 8016380:	6107      	str	r7, [r0, #16]
 8016382:	e7a3      	b.n	80162cc <__mdiff+0x34>
 8016384:	f856 8b04 	ldr.w	r8, [r6], #4
 8016388:	fa11 f288 	uxtah	r2, r1, r8
 801638c:	1414      	asrs	r4, r2, #16
 801638e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016392:	b292      	uxth	r2, r2
 8016394:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016398:	f84e 2b04 	str.w	r2, [lr], #4
 801639c:	1421      	asrs	r1, r4, #16
 801639e:	e7e0      	b.n	8016362 <__mdiff+0xca>
 80163a0:	3f01      	subs	r7, #1
 80163a2:	e7ea      	b.n	801637a <__mdiff+0xe2>
 80163a4:	0801845f 	.word	0x0801845f
 80163a8:	080184d0 	.word	0x080184d0

080163ac <__d2b>:
 80163ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163b0:	4689      	mov	r9, r1
 80163b2:	2101      	movs	r1, #1
 80163b4:	ec57 6b10 	vmov	r6, r7, d0
 80163b8:	4690      	mov	r8, r2
 80163ba:	f7ff fccf 	bl	8015d5c <_Balloc>
 80163be:	4604      	mov	r4, r0
 80163c0:	b930      	cbnz	r0, 80163d0 <__d2b+0x24>
 80163c2:	4602      	mov	r2, r0
 80163c4:	4b25      	ldr	r3, [pc, #148]	; (801645c <__d2b+0xb0>)
 80163c6:	4826      	ldr	r0, [pc, #152]	; (8016460 <__d2b+0xb4>)
 80163c8:	f240 310a 	movw	r1, #778	; 0x30a
 80163cc:	f000 fa40 	bl	8016850 <__assert_func>
 80163d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80163d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80163d8:	bb35      	cbnz	r5, 8016428 <__d2b+0x7c>
 80163da:	2e00      	cmp	r6, #0
 80163dc:	9301      	str	r3, [sp, #4]
 80163de:	d028      	beq.n	8016432 <__d2b+0x86>
 80163e0:	4668      	mov	r0, sp
 80163e2:	9600      	str	r6, [sp, #0]
 80163e4:	f7ff fd82 	bl	8015eec <__lo0bits>
 80163e8:	9900      	ldr	r1, [sp, #0]
 80163ea:	b300      	cbz	r0, 801642e <__d2b+0x82>
 80163ec:	9a01      	ldr	r2, [sp, #4]
 80163ee:	f1c0 0320 	rsb	r3, r0, #32
 80163f2:	fa02 f303 	lsl.w	r3, r2, r3
 80163f6:	430b      	orrs	r3, r1
 80163f8:	40c2      	lsrs	r2, r0
 80163fa:	6163      	str	r3, [r4, #20]
 80163fc:	9201      	str	r2, [sp, #4]
 80163fe:	9b01      	ldr	r3, [sp, #4]
 8016400:	61a3      	str	r3, [r4, #24]
 8016402:	2b00      	cmp	r3, #0
 8016404:	bf14      	ite	ne
 8016406:	2202      	movne	r2, #2
 8016408:	2201      	moveq	r2, #1
 801640a:	6122      	str	r2, [r4, #16]
 801640c:	b1d5      	cbz	r5, 8016444 <__d2b+0x98>
 801640e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016412:	4405      	add	r5, r0
 8016414:	f8c9 5000 	str.w	r5, [r9]
 8016418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801641c:	f8c8 0000 	str.w	r0, [r8]
 8016420:	4620      	mov	r0, r4
 8016422:	b003      	add	sp, #12
 8016424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801642c:	e7d5      	b.n	80163da <__d2b+0x2e>
 801642e:	6161      	str	r1, [r4, #20]
 8016430:	e7e5      	b.n	80163fe <__d2b+0x52>
 8016432:	a801      	add	r0, sp, #4
 8016434:	f7ff fd5a 	bl	8015eec <__lo0bits>
 8016438:	9b01      	ldr	r3, [sp, #4]
 801643a:	6163      	str	r3, [r4, #20]
 801643c:	2201      	movs	r2, #1
 801643e:	6122      	str	r2, [r4, #16]
 8016440:	3020      	adds	r0, #32
 8016442:	e7e3      	b.n	801640c <__d2b+0x60>
 8016444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801644c:	f8c9 0000 	str.w	r0, [r9]
 8016450:	6918      	ldr	r0, [r3, #16]
 8016452:	f7ff fd2b 	bl	8015eac <__hi0bits>
 8016456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801645a:	e7df      	b.n	801641c <__d2b+0x70>
 801645c:	0801845f 	.word	0x0801845f
 8016460:	080184d0 	.word	0x080184d0

08016464 <_calloc_r>:
 8016464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016466:	fba1 2402 	umull	r2, r4, r1, r2
 801646a:	b94c      	cbnz	r4, 8016480 <_calloc_r+0x1c>
 801646c:	4611      	mov	r1, r2
 801646e:	9201      	str	r2, [sp, #4]
 8016470:	f7fd fe2e 	bl	80140d0 <_malloc_r>
 8016474:	9a01      	ldr	r2, [sp, #4]
 8016476:	4605      	mov	r5, r0
 8016478:	b930      	cbnz	r0, 8016488 <_calloc_r+0x24>
 801647a:	4628      	mov	r0, r5
 801647c:	b003      	add	sp, #12
 801647e:	bd30      	pop	{r4, r5, pc}
 8016480:	220c      	movs	r2, #12
 8016482:	6002      	str	r2, [r0, #0]
 8016484:	2500      	movs	r5, #0
 8016486:	e7f8      	b.n	801647a <_calloc_r+0x16>
 8016488:	4621      	mov	r1, r4
 801648a:	f7fd fdad 	bl	8013fe8 <memset>
 801648e:	e7f4      	b.n	801647a <_calloc_r+0x16>

08016490 <_realloc_r>:
 8016490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016494:	4680      	mov	r8, r0
 8016496:	4614      	mov	r4, r2
 8016498:	460e      	mov	r6, r1
 801649a:	b921      	cbnz	r1, 80164a6 <_realloc_r+0x16>
 801649c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164a0:	4611      	mov	r1, r2
 80164a2:	f7fd be15 	b.w	80140d0 <_malloc_r>
 80164a6:	b92a      	cbnz	r2, 80164b4 <_realloc_r+0x24>
 80164a8:	f7fd fda6 	bl	8013ff8 <_free_r>
 80164ac:	4625      	mov	r5, r4
 80164ae:	4628      	mov	r0, r5
 80164b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b4:	f000 fa52 	bl	801695c <_malloc_usable_size_r>
 80164b8:	4284      	cmp	r4, r0
 80164ba:	4607      	mov	r7, r0
 80164bc:	d802      	bhi.n	80164c4 <_realloc_r+0x34>
 80164be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80164c2:	d812      	bhi.n	80164ea <_realloc_r+0x5a>
 80164c4:	4621      	mov	r1, r4
 80164c6:	4640      	mov	r0, r8
 80164c8:	f7fd fe02 	bl	80140d0 <_malloc_r>
 80164cc:	4605      	mov	r5, r0
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d0ed      	beq.n	80164ae <_realloc_r+0x1e>
 80164d2:	42bc      	cmp	r4, r7
 80164d4:	4622      	mov	r2, r4
 80164d6:	4631      	mov	r1, r6
 80164d8:	bf28      	it	cs
 80164da:	463a      	movcs	r2, r7
 80164dc:	f7fd fd5c 	bl	8013f98 <memcpy>
 80164e0:	4631      	mov	r1, r6
 80164e2:	4640      	mov	r0, r8
 80164e4:	f7fd fd88 	bl	8013ff8 <_free_r>
 80164e8:	e7e1      	b.n	80164ae <_realloc_r+0x1e>
 80164ea:	4635      	mov	r5, r6
 80164ec:	e7df      	b.n	80164ae <_realloc_r+0x1e>

080164ee <__ssputs_r>:
 80164ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164f2:	688e      	ldr	r6, [r1, #8]
 80164f4:	429e      	cmp	r6, r3
 80164f6:	4682      	mov	sl, r0
 80164f8:	460c      	mov	r4, r1
 80164fa:	4690      	mov	r8, r2
 80164fc:	461f      	mov	r7, r3
 80164fe:	d838      	bhi.n	8016572 <__ssputs_r+0x84>
 8016500:	898a      	ldrh	r2, [r1, #12]
 8016502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016506:	d032      	beq.n	801656e <__ssputs_r+0x80>
 8016508:	6825      	ldr	r5, [r4, #0]
 801650a:	6909      	ldr	r1, [r1, #16]
 801650c:	eba5 0901 	sub.w	r9, r5, r1
 8016510:	6965      	ldr	r5, [r4, #20]
 8016512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801651a:	3301      	adds	r3, #1
 801651c:	444b      	add	r3, r9
 801651e:	106d      	asrs	r5, r5, #1
 8016520:	429d      	cmp	r5, r3
 8016522:	bf38      	it	cc
 8016524:	461d      	movcc	r5, r3
 8016526:	0553      	lsls	r3, r2, #21
 8016528:	d531      	bpl.n	801658e <__ssputs_r+0xa0>
 801652a:	4629      	mov	r1, r5
 801652c:	f7fd fdd0 	bl	80140d0 <_malloc_r>
 8016530:	4606      	mov	r6, r0
 8016532:	b950      	cbnz	r0, 801654a <__ssputs_r+0x5c>
 8016534:	230c      	movs	r3, #12
 8016536:	f8ca 3000 	str.w	r3, [sl]
 801653a:	89a3      	ldrh	r3, [r4, #12]
 801653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016540:	81a3      	strh	r3, [r4, #12]
 8016542:	f04f 30ff 	mov.w	r0, #4294967295
 8016546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801654a:	6921      	ldr	r1, [r4, #16]
 801654c:	464a      	mov	r2, r9
 801654e:	f7fd fd23 	bl	8013f98 <memcpy>
 8016552:	89a3      	ldrh	r3, [r4, #12]
 8016554:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801655c:	81a3      	strh	r3, [r4, #12]
 801655e:	6126      	str	r6, [r4, #16]
 8016560:	6165      	str	r5, [r4, #20]
 8016562:	444e      	add	r6, r9
 8016564:	eba5 0509 	sub.w	r5, r5, r9
 8016568:	6026      	str	r6, [r4, #0]
 801656a:	60a5      	str	r5, [r4, #8]
 801656c:	463e      	mov	r6, r7
 801656e:	42be      	cmp	r6, r7
 8016570:	d900      	bls.n	8016574 <__ssputs_r+0x86>
 8016572:	463e      	mov	r6, r7
 8016574:	6820      	ldr	r0, [r4, #0]
 8016576:	4632      	mov	r2, r6
 8016578:	4641      	mov	r1, r8
 801657a:	f7fd fd1b 	bl	8013fb4 <memmove>
 801657e:	68a3      	ldr	r3, [r4, #8]
 8016580:	1b9b      	subs	r3, r3, r6
 8016582:	60a3      	str	r3, [r4, #8]
 8016584:	6823      	ldr	r3, [r4, #0]
 8016586:	4433      	add	r3, r6
 8016588:	6023      	str	r3, [r4, #0]
 801658a:	2000      	movs	r0, #0
 801658c:	e7db      	b.n	8016546 <__ssputs_r+0x58>
 801658e:	462a      	mov	r2, r5
 8016590:	f7ff ff7e 	bl	8016490 <_realloc_r>
 8016594:	4606      	mov	r6, r0
 8016596:	2800      	cmp	r0, #0
 8016598:	d1e1      	bne.n	801655e <__ssputs_r+0x70>
 801659a:	6921      	ldr	r1, [r4, #16]
 801659c:	4650      	mov	r0, sl
 801659e:	f7fd fd2b 	bl	8013ff8 <_free_r>
 80165a2:	e7c7      	b.n	8016534 <__ssputs_r+0x46>

080165a4 <_svfiprintf_r>:
 80165a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a8:	4698      	mov	r8, r3
 80165aa:	898b      	ldrh	r3, [r1, #12]
 80165ac:	061b      	lsls	r3, r3, #24
 80165ae:	b09d      	sub	sp, #116	; 0x74
 80165b0:	4607      	mov	r7, r0
 80165b2:	460d      	mov	r5, r1
 80165b4:	4614      	mov	r4, r2
 80165b6:	d50e      	bpl.n	80165d6 <_svfiprintf_r+0x32>
 80165b8:	690b      	ldr	r3, [r1, #16]
 80165ba:	b963      	cbnz	r3, 80165d6 <_svfiprintf_r+0x32>
 80165bc:	2140      	movs	r1, #64	; 0x40
 80165be:	f7fd fd87 	bl	80140d0 <_malloc_r>
 80165c2:	6028      	str	r0, [r5, #0]
 80165c4:	6128      	str	r0, [r5, #16]
 80165c6:	b920      	cbnz	r0, 80165d2 <_svfiprintf_r+0x2e>
 80165c8:	230c      	movs	r3, #12
 80165ca:	603b      	str	r3, [r7, #0]
 80165cc:	f04f 30ff 	mov.w	r0, #4294967295
 80165d0:	e0d1      	b.n	8016776 <_svfiprintf_r+0x1d2>
 80165d2:	2340      	movs	r3, #64	; 0x40
 80165d4:	616b      	str	r3, [r5, #20]
 80165d6:	2300      	movs	r3, #0
 80165d8:	9309      	str	r3, [sp, #36]	; 0x24
 80165da:	2320      	movs	r3, #32
 80165dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80165e4:	2330      	movs	r3, #48	; 0x30
 80165e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016790 <_svfiprintf_r+0x1ec>
 80165ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165ee:	f04f 0901 	mov.w	r9, #1
 80165f2:	4623      	mov	r3, r4
 80165f4:	469a      	mov	sl, r3
 80165f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165fa:	b10a      	cbz	r2, 8016600 <_svfiprintf_r+0x5c>
 80165fc:	2a25      	cmp	r2, #37	; 0x25
 80165fe:	d1f9      	bne.n	80165f4 <_svfiprintf_r+0x50>
 8016600:	ebba 0b04 	subs.w	fp, sl, r4
 8016604:	d00b      	beq.n	801661e <_svfiprintf_r+0x7a>
 8016606:	465b      	mov	r3, fp
 8016608:	4622      	mov	r2, r4
 801660a:	4629      	mov	r1, r5
 801660c:	4638      	mov	r0, r7
 801660e:	f7ff ff6e 	bl	80164ee <__ssputs_r>
 8016612:	3001      	adds	r0, #1
 8016614:	f000 80aa 	beq.w	801676c <_svfiprintf_r+0x1c8>
 8016618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801661a:	445a      	add	r2, fp
 801661c:	9209      	str	r2, [sp, #36]	; 0x24
 801661e:	f89a 3000 	ldrb.w	r3, [sl]
 8016622:	2b00      	cmp	r3, #0
 8016624:	f000 80a2 	beq.w	801676c <_svfiprintf_r+0x1c8>
 8016628:	2300      	movs	r3, #0
 801662a:	f04f 32ff 	mov.w	r2, #4294967295
 801662e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016632:	f10a 0a01 	add.w	sl, sl, #1
 8016636:	9304      	str	r3, [sp, #16]
 8016638:	9307      	str	r3, [sp, #28]
 801663a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801663e:	931a      	str	r3, [sp, #104]	; 0x68
 8016640:	4654      	mov	r4, sl
 8016642:	2205      	movs	r2, #5
 8016644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016648:	4851      	ldr	r0, [pc, #324]	; (8016790 <_svfiprintf_r+0x1ec>)
 801664a:	f7e9 fe01 	bl	8000250 <memchr>
 801664e:	9a04      	ldr	r2, [sp, #16]
 8016650:	b9d8      	cbnz	r0, 801668a <_svfiprintf_r+0xe6>
 8016652:	06d0      	lsls	r0, r2, #27
 8016654:	bf44      	itt	mi
 8016656:	2320      	movmi	r3, #32
 8016658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801665c:	0711      	lsls	r1, r2, #28
 801665e:	bf44      	itt	mi
 8016660:	232b      	movmi	r3, #43	; 0x2b
 8016662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016666:	f89a 3000 	ldrb.w	r3, [sl]
 801666a:	2b2a      	cmp	r3, #42	; 0x2a
 801666c:	d015      	beq.n	801669a <_svfiprintf_r+0xf6>
 801666e:	9a07      	ldr	r2, [sp, #28]
 8016670:	4654      	mov	r4, sl
 8016672:	2000      	movs	r0, #0
 8016674:	f04f 0c0a 	mov.w	ip, #10
 8016678:	4621      	mov	r1, r4
 801667a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801667e:	3b30      	subs	r3, #48	; 0x30
 8016680:	2b09      	cmp	r3, #9
 8016682:	d94e      	bls.n	8016722 <_svfiprintf_r+0x17e>
 8016684:	b1b0      	cbz	r0, 80166b4 <_svfiprintf_r+0x110>
 8016686:	9207      	str	r2, [sp, #28]
 8016688:	e014      	b.n	80166b4 <_svfiprintf_r+0x110>
 801668a:	eba0 0308 	sub.w	r3, r0, r8
 801668e:	fa09 f303 	lsl.w	r3, r9, r3
 8016692:	4313      	orrs	r3, r2
 8016694:	9304      	str	r3, [sp, #16]
 8016696:	46a2      	mov	sl, r4
 8016698:	e7d2      	b.n	8016640 <_svfiprintf_r+0x9c>
 801669a:	9b03      	ldr	r3, [sp, #12]
 801669c:	1d19      	adds	r1, r3, #4
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	9103      	str	r1, [sp, #12]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	bfbb      	ittet	lt
 80166a6:	425b      	neglt	r3, r3
 80166a8:	f042 0202 	orrlt.w	r2, r2, #2
 80166ac:	9307      	strge	r3, [sp, #28]
 80166ae:	9307      	strlt	r3, [sp, #28]
 80166b0:	bfb8      	it	lt
 80166b2:	9204      	strlt	r2, [sp, #16]
 80166b4:	7823      	ldrb	r3, [r4, #0]
 80166b6:	2b2e      	cmp	r3, #46	; 0x2e
 80166b8:	d10c      	bne.n	80166d4 <_svfiprintf_r+0x130>
 80166ba:	7863      	ldrb	r3, [r4, #1]
 80166bc:	2b2a      	cmp	r3, #42	; 0x2a
 80166be:	d135      	bne.n	801672c <_svfiprintf_r+0x188>
 80166c0:	9b03      	ldr	r3, [sp, #12]
 80166c2:	1d1a      	adds	r2, r3, #4
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	9203      	str	r2, [sp, #12]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	bfb8      	it	lt
 80166cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80166d0:	3402      	adds	r4, #2
 80166d2:	9305      	str	r3, [sp, #20]
 80166d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80167a0 <_svfiprintf_r+0x1fc>
 80166d8:	7821      	ldrb	r1, [r4, #0]
 80166da:	2203      	movs	r2, #3
 80166dc:	4650      	mov	r0, sl
 80166de:	f7e9 fdb7 	bl	8000250 <memchr>
 80166e2:	b140      	cbz	r0, 80166f6 <_svfiprintf_r+0x152>
 80166e4:	2340      	movs	r3, #64	; 0x40
 80166e6:	eba0 000a 	sub.w	r0, r0, sl
 80166ea:	fa03 f000 	lsl.w	r0, r3, r0
 80166ee:	9b04      	ldr	r3, [sp, #16]
 80166f0:	4303      	orrs	r3, r0
 80166f2:	3401      	adds	r4, #1
 80166f4:	9304      	str	r3, [sp, #16]
 80166f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166fa:	4826      	ldr	r0, [pc, #152]	; (8016794 <_svfiprintf_r+0x1f0>)
 80166fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016700:	2206      	movs	r2, #6
 8016702:	f7e9 fda5 	bl	8000250 <memchr>
 8016706:	2800      	cmp	r0, #0
 8016708:	d038      	beq.n	801677c <_svfiprintf_r+0x1d8>
 801670a:	4b23      	ldr	r3, [pc, #140]	; (8016798 <_svfiprintf_r+0x1f4>)
 801670c:	bb1b      	cbnz	r3, 8016756 <_svfiprintf_r+0x1b2>
 801670e:	9b03      	ldr	r3, [sp, #12]
 8016710:	3307      	adds	r3, #7
 8016712:	f023 0307 	bic.w	r3, r3, #7
 8016716:	3308      	adds	r3, #8
 8016718:	9303      	str	r3, [sp, #12]
 801671a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801671c:	4433      	add	r3, r6
 801671e:	9309      	str	r3, [sp, #36]	; 0x24
 8016720:	e767      	b.n	80165f2 <_svfiprintf_r+0x4e>
 8016722:	fb0c 3202 	mla	r2, ip, r2, r3
 8016726:	460c      	mov	r4, r1
 8016728:	2001      	movs	r0, #1
 801672a:	e7a5      	b.n	8016678 <_svfiprintf_r+0xd4>
 801672c:	2300      	movs	r3, #0
 801672e:	3401      	adds	r4, #1
 8016730:	9305      	str	r3, [sp, #20]
 8016732:	4619      	mov	r1, r3
 8016734:	f04f 0c0a 	mov.w	ip, #10
 8016738:	4620      	mov	r0, r4
 801673a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801673e:	3a30      	subs	r2, #48	; 0x30
 8016740:	2a09      	cmp	r2, #9
 8016742:	d903      	bls.n	801674c <_svfiprintf_r+0x1a8>
 8016744:	2b00      	cmp	r3, #0
 8016746:	d0c5      	beq.n	80166d4 <_svfiprintf_r+0x130>
 8016748:	9105      	str	r1, [sp, #20]
 801674a:	e7c3      	b.n	80166d4 <_svfiprintf_r+0x130>
 801674c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016750:	4604      	mov	r4, r0
 8016752:	2301      	movs	r3, #1
 8016754:	e7f0      	b.n	8016738 <_svfiprintf_r+0x194>
 8016756:	ab03      	add	r3, sp, #12
 8016758:	9300      	str	r3, [sp, #0]
 801675a:	462a      	mov	r2, r5
 801675c:	4b0f      	ldr	r3, [pc, #60]	; (801679c <_svfiprintf_r+0x1f8>)
 801675e:	a904      	add	r1, sp, #16
 8016760:	4638      	mov	r0, r7
 8016762:	f7fd fdb9 	bl	80142d8 <_printf_float>
 8016766:	1c42      	adds	r2, r0, #1
 8016768:	4606      	mov	r6, r0
 801676a:	d1d6      	bne.n	801671a <_svfiprintf_r+0x176>
 801676c:	89ab      	ldrh	r3, [r5, #12]
 801676e:	065b      	lsls	r3, r3, #25
 8016770:	f53f af2c 	bmi.w	80165cc <_svfiprintf_r+0x28>
 8016774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016776:	b01d      	add	sp, #116	; 0x74
 8016778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677c:	ab03      	add	r3, sp, #12
 801677e:	9300      	str	r3, [sp, #0]
 8016780:	462a      	mov	r2, r5
 8016782:	4b06      	ldr	r3, [pc, #24]	; (801679c <_svfiprintf_r+0x1f8>)
 8016784:	a904      	add	r1, sp, #16
 8016786:	4638      	mov	r0, r7
 8016788:	f7fe f832 	bl	80147f0 <_printf_i>
 801678c:	e7eb      	b.n	8016766 <_svfiprintf_r+0x1c2>
 801678e:	bf00      	nop
 8016790:	0801862c 	.word	0x0801862c
 8016794:	08018636 	.word	0x08018636
 8016798:	080142d9 	.word	0x080142d9
 801679c:	080164ef 	.word	0x080164ef
 80167a0:	08018632 	.word	0x08018632

080167a4 <__sread>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	460c      	mov	r4, r1
 80167a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167ac:	f000 fa38 	bl	8016c20 <_read_r>
 80167b0:	2800      	cmp	r0, #0
 80167b2:	bfab      	itete	ge
 80167b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167b6:	89a3      	ldrhlt	r3, [r4, #12]
 80167b8:	181b      	addge	r3, r3, r0
 80167ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167be:	bfac      	ite	ge
 80167c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80167c2:	81a3      	strhlt	r3, [r4, #12]
 80167c4:	bd10      	pop	{r4, pc}

080167c6 <__swrite>:
 80167c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ca:	461f      	mov	r7, r3
 80167cc:	898b      	ldrh	r3, [r1, #12]
 80167ce:	05db      	lsls	r3, r3, #23
 80167d0:	4605      	mov	r5, r0
 80167d2:	460c      	mov	r4, r1
 80167d4:	4616      	mov	r6, r2
 80167d6:	d505      	bpl.n	80167e4 <__swrite+0x1e>
 80167d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167dc:	2302      	movs	r3, #2
 80167de:	2200      	movs	r2, #0
 80167e0:	f000 f898 	bl	8016914 <_lseek_r>
 80167e4:	89a3      	ldrh	r3, [r4, #12]
 80167e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167ee:	81a3      	strh	r3, [r4, #12]
 80167f0:	4632      	mov	r2, r6
 80167f2:	463b      	mov	r3, r7
 80167f4:	4628      	mov	r0, r5
 80167f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fa:	f000 b817 	b.w	801682c <_write_r>

080167fe <__sseek>:
 80167fe:	b510      	push	{r4, lr}
 8016800:	460c      	mov	r4, r1
 8016802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016806:	f000 f885 	bl	8016914 <_lseek_r>
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	89a3      	ldrh	r3, [r4, #12]
 801680e:	bf15      	itete	ne
 8016810:	6560      	strne	r0, [r4, #84]	; 0x54
 8016812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801681a:	81a3      	strheq	r3, [r4, #12]
 801681c:	bf18      	it	ne
 801681e:	81a3      	strhne	r3, [r4, #12]
 8016820:	bd10      	pop	{r4, pc}

08016822 <__sclose>:
 8016822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016826:	f000 b831 	b.w	801688c <_close_r>
	...

0801682c <_write_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4d07      	ldr	r5, [pc, #28]	; (801684c <_write_r+0x20>)
 8016830:	4604      	mov	r4, r0
 8016832:	4608      	mov	r0, r1
 8016834:	4611      	mov	r1, r2
 8016836:	2200      	movs	r2, #0
 8016838:	602a      	str	r2, [r5, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	f000 fcc8 	bl	80171d0 <_write>
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	d102      	bne.n	801684a <_write_r+0x1e>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	b103      	cbz	r3, 801684a <_write_r+0x1e>
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	bd38      	pop	{r3, r4, r5, pc}
 801684c:	200016d8 	.word	0x200016d8

08016850 <__assert_func>:
 8016850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016852:	4614      	mov	r4, r2
 8016854:	461a      	mov	r2, r3
 8016856:	4b09      	ldr	r3, [pc, #36]	; (801687c <__assert_func+0x2c>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4605      	mov	r5, r0
 801685c:	68d8      	ldr	r0, [r3, #12]
 801685e:	b14c      	cbz	r4, 8016874 <__assert_func+0x24>
 8016860:	4b07      	ldr	r3, [pc, #28]	; (8016880 <__assert_func+0x30>)
 8016862:	9100      	str	r1, [sp, #0]
 8016864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016868:	4906      	ldr	r1, [pc, #24]	; (8016884 <__assert_func+0x34>)
 801686a:	462b      	mov	r3, r5
 801686c:	f000 f81e 	bl	80168ac <fiprintf>
 8016870:	f000 f9f5 	bl	8016c5e <abort>
 8016874:	4b04      	ldr	r3, [pc, #16]	; (8016888 <__assert_func+0x38>)
 8016876:	461c      	mov	r4, r3
 8016878:	e7f3      	b.n	8016862 <__assert_func+0x12>
 801687a:	bf00      	nop
 801687c:	20000f80 	.word	0x20000f80
 8016880:	0801863d 	.word	0x0801863d
 8016884:	0801864a 	.word	0x0801864a
 8016888:	08018678 	.word	0x08018678

0801688c <_close_r>:
 801688c:	b538      	push	{r3, r4, r5, lr}
 801688e:	4d06      	ldr	r5, [pc, #24]	; (80168a8 <_close_r+0x1c>)
 8016890:	2300      	movs	r3, #0
 8016892:	4604      	mov	r4, r0
 8016894:	4608      	mov	r0, r1
 8016896:	602b      	str	r3, [r5, #0]
 8016898:	f000 fc62 	bl	8017160 <_close>
 801689c:	1c43      	adds	r3, r0, #1
 801689e:	d102      	bne.n	80168a6 <_close_r+0x1a>
 80168a0:	682b      	ldr	r3, [r5, #0]
 80168a2:	b103      	cbz	r3, 80168a6 <_close_r+0x1a>
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	bd38      	pop	{r3, r4, r5, pc}
 80168a8:	200016d8 	.word	0x200016d8

080168ac <fiprintf>:
 80168ac:	b40e      	push	{r1, r2, r3}
 80168ae:	b503      	push	{r0, r1, lr}
 80168b0:	4601      	mov	r1, r0
 80168b2:	ab03      	add	r3, sp, #12
 80168b4:	4805      	ldr	r0, [pc, #20]	; (80168cc <fiprintf+0x20>)
 80168b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ba:	6800      	ldr	r0, [r0, #0]
 80168bc:	9301      	str	r3, [sp, #4]
 80168be:	f000 f87f 	bl	80169c0 <_vfiprintf_r>
 80168c2:	b002      	add	sp, #8
 80168c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168c8:	b003      	add	sp, #12
 80168ca:	4770      	bx	lr
 80168cc:	20000f80 	.word	0x20000f80

080168d0 <_fstat_r>:
 80168d0:	b538      	push	{r3, r4, r5, lr}
 80168d2:	4d07      	ldr	r5, [pc, #28]	; (80168f0 <_fstat_r+0x20>)
 80168d4:	2300      	movs	r3, #0
 80168d6:	4604      	mov	r4, r0
 80168d8:	4608      	mov	r0, r1
 80168da:	4611      	mov	r1, r2
 80168dc:	602b      	str	r3, [r5, #0]
 80168de:	f000 fc47 	bl	8017170 <_fstat>
 80168e2:	1c43      	adds	r3, r0, #1
 80168e4:	d102      	bne.n	80168ec <_fstat_r+0x1c>
 80168e6:	682b      	ldr	r3, [r5, #0]
 80168e8:	b103      	cbz	r3, 80168ec <_fstat_r+0x1c>
 80168ea:	6023      	str	r3, [r4, #0]
 80168ec:	bd38      	pop	{r3, r4, r5, pc}
 80168ee:	bf00      	nop
 80168f0:	200016d8 	.word	0x200016d8

080168f4 <_isatty_r>:
 80168f4:	b538      	push	{r3, r4, r5, lr}
 80168f6:	4d06      	ldr	r5, [pc, #24]	; (8016910 <_isatty_r+0x1c>)
 80168f8:	2300      	movs	r3, #0
 80168fa:	4604      	mov	r4, r0
 80168fc:	4608      	mov	r0, r1
 80168fe:	602b      	str	r3, [r5, #0]
 8016900:	f000 fc46 	bl	8017190 <_isatty>
 8016904:	1c43      	adds	r3, r0, #1
 8016906:	d102      	bne.n	801690e <_isatty_r+0x1a>
 8016908:	682b      	ldr	r3, [r5, #0]
 801690a:	b103      	cbz	r3, 801690e <_isatty_r+0x1a>
 801690c:	6023      	str	r3, [r4, #0]
 801690e:	bd38      	pop	{r3, r4, r5, pc}
 8016910:	200016d8 	.word	0x200016d8

08016914 <_lseek_r>:
 8016914:	b538      	push	{r3, r4, r5, lr}
 8016916:	4d07      	ldr	r5, [pc, #28]	; (8016934 <_lseek_r+0x20>)
 8016918:	4604      	mov	r4, r0
 801691a:	4608      	mov	r0, r1
 801691c:	4611      	mov	r1, r2
 801691e:	2200      	movs	r2, #0
 8016920:	602a      	str	r2, [r5, #0]
 8016922:	461a      	mov	r2, r3
 8016924:	f000 fc44 	bl	80171b0 <_lseek>
 8016928:	1c43      	adds	r3, r0, #1
 801692a:	d102      	bne.n	8016932 <_lseek_r+0x1e>
 801692c:	682b      	ldr	r3, [r5, #0]
 801692e:	b103      	cbz	r3, 8016932 <_lseek_r+0x1e>
 8016930:	6023      	str	r3, [r4, #0]
 8016932:	bd38      	pop	{r3, r4, r5, pc}
 8016934:	200016d8 	.word	0x200016d8

08016938 <__ascii_mbtowc>:
 8016938:	b082      	sub	sp, #8
 801693a:	b901      	cbnz	r1, 801693e <__ascii_mbtowc+0x6>
 801693c:	a901      	add	r1, sp, #4
 801693e:	b142      	cbz	r2, 8016952 <__ascii_mbtowc+0x1a>
 8016940:	b14b      	cbz	r3, 8016956 <__ascii_mbtowc+0x1e>
 8016942:	7813      	ldrb	r3, [r2, #0]
 8016944:	600b      	str	r3, [r1, #0]
 8016946:	7812      	ldrb	r2, [r2, #0]
 8016948:	1e10      	subs	r0, r2, #0
 801694a:	bf18      	it	ne
 801694c:	2001      	movne	r0, #1
 801694e:	b002      	add	sp, #8
 8016950:	4770      	bx	lr
 8016952:	4610      	mov	r0, r2
 8016954:	e7fb      	b.n	801694e <__ascii_mbtowc+0x16>
 8016956:	f06f 0001 	mvn.w	r0, #1
 801695a:	e7f8      	b.n	801694e <__ascii_mbtowc+0x16>

0801695c <_malloc_usable_size_r>:
 801695c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016960:	1f18      	subs	r0, r3, #4
 8016962:	2b00      	cmp	r3, #0
 8016964:	bfbc      	itt	lt
 8016966:	580b      	ldrlt	r3, [r1, r0]
 8016968:	18c0      	addlt	r0, r0, r3
 801696a:	4770      	bx	lr

0801696c <__sfputc_r>:
 801696c:	6893      	ldr	r3, [r2, #8]
 801696e:	3b01      	subs	r3, #1
 8016970:	2b00      	cmp	r3, #0
 8016972:	b410      	push	{r4}
 8016974:	6093      	str	r3, [r2, #8]
 8016976:	da08      	bge.n	801698a <__sfputc_r+0x1e>
 8016978:	6994      	ldr	r4, [r2, #24]
 801697a:	42a3      	cmp	r3, r4
 801697c:	db01      	blt.n	8016982 <__sfputc_r+0x16>
 801697e:	290a      	cmp	r1, #10
 8016980:	d103      	bne.n	801698a <__sfputc_r+0x1e>
 8016982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016986:	f7fe b8ff 	b.w	8014b88 <__swbuf_r>
 801698a:	6813      	ldr	r3, [r2, #0]
 801698c:	1c58      	adds	r0, r3, #1
 801698e:	6010      	str	r0, [r2, #0]
 8016990:	7019      	strb	r1, [r3, #0]
 8016992:	4608      	mov	r0, r1
 8016994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016998:	4770      	bx	lr

0801699a <__sfputs_r>:
 801699a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699c:	4606      	mov	r6, r0
 801699e:	460f      	mov	r7, r1
 80169a0:	4614      	mov	r4, r2
 80169a2:	18d5      	adds	r5, r2, r3
 80169a4:	42ac      	cmp	r4, r5
 80169a6:	d101      	bne.n	80169ac <__sfputs_r+0x12>
 80169a8:	2000      	movs	r0, #0
 80169aa:	e007      	b.n	80169bc <__sfputs_r+0x22>
 80169ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169b0:	463a      	mov	r2, r7
 80169b2:	4630      	mov	r0, r6
 80169b4:	f7ff ffda 	bl	801696c <__sfputc_r>
 80169b8:	1c43      	adds	r3, r0, #1
 80169ba:	d1f3      	bne.n	80169a4 <__sfputs_r+0xa>
 80169bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169c0 <_vfiprintf_r>:
 80169c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c4:	460d      	mov	r5, r1
 80169c6:	b09d      	sub	sp, #116	; 0x74
 80169c8:	4614      	mov	r4, r2
 80169ca:	4698      	mov	r8, r3
 80169cc:	4606      	mov	r6, r0
 80169ce:	b118      	cbz	r0, 80169d8 <_vfiprintf_r+0x18>
 80169d0:	6983      	ldr	r3, [r0, #24]
 80169d2:	b90b      	cbnz	r3, 80169d8 <_vfiprintf_r+0x18>
 80169d4:	f7ff f8ac 	bl	8015b30 <__sinit>
 80169d8:	4b89      	ldr	r3, [pc, #548]	; (8016c00 <_vfiprintf_r+0x240>)
 80169da:	429d      	cmp	r5, r3
 80169dc:	d11b      	bne.n	8016a16 <_vfiprintf_r+0x56>
 80169de:	6875      	ldr	r5, [r6, #4]
 80169e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169e2:	07d9      	lsls	r1, r3, #31
 80169e4:	d405      	bmi.n	80169f2 <_vfiprintf_r+0x32>
 80169e6:	89ab      	ldrh	r3, [r5, #12]
 80169e8:	059a      	lsls	r2, r3, #22
 80169ea:	d402      	bmi.n	80169f2 <_vfiprintf_r+0x32>
 80169ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169ee:	f7ff f942 	bl	8015c76 <__retarget_lock_acquire_recursive>
 80169f2:	89ab      	ldrh	r3, [r5, #12]
 80169f4:	071b      	lsls	r3, r3, #28
 80169f6:	d501      	bpl.n	80169fc <_vfiprintf_r+0x3c>
 80169f8:	692b      	ldr	r3, [r5, #16]
 80169fa:	b9eb      	cbnz	r3, 8016a38 <_vfiprintf_r+0x78>
 80169fc:	4629      	mov	r1, r5
 80169fe:	4630      	mov	r0, r6
 8016a00:	f7fe f914 	bl	8014c2c <__swsetup_r>
 8016a04:	b1c0      	cbz	r0, 8016a38 <_vfiprintf_r+0x78>
 8016a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a08:	07dc      	lsls	r4, r3, #31
 8016a0a:	d50e      	bpl.n	8016a2a <_vfiprintf_r+0x6a>
 8016a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a10:	b01d      	add	sp, #116	; 0x74
 8016a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a16:	4b7b      	ldr	r3, [pc, #492]	; (8016c04 <_vfiprintf_r+0x244>)
 8016a18:	429d      	cmp	r5, r3
 8016a1a:	d101      	bne.n	8016a20 <_vfiprintf_r+0x60>
 8016a1c:	68b5      	ldr	r5, [r6, #8]
 8016a1e:	e7df      	b.n	80169e0 <_vfiprintf_r+0x20>
 8016a20:	4b79      	ldr	r3, [pc, #484]	; (8016c08 <_vfiprintf_r+0x248>)
 8016a22:	429d      	cmp	r5, r3
 8016a24:	bf08      	it	eq
 8016a26:	68f5      	ldreq	r5, [r6, #12]
 8016a28:	e7da      	b.n	80169e0 <_vfiprintf_r+0x20>
 8016a2a:	89ab      	ldrh	r3, [r5, #12]
 8016a2c:	0598      	lsls	r0, r3, #22
 8016a2e:	d4ed      	bmi.n	8016a0c <_vfiprintf_r+0x4c>
 8016a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a32:	f7ff f921 	bl	8015c78 <__retarget_lock_release_recursive>
 8016a36:	e7e9      	b.n	8016a0c <_vfiprintf_r+0x4c>
 8016a38:	2300      	movs	r3, #0
 8016a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8016a3c:	2320      	movs	r3, #32
 8016a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a46:	2330      	movs	r3, #48	; 0x30
 8016a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016c0c <_vfiprintf_r+0x24c>
 8016a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a50:	f04f 0901 	mov.w	r9, #1
 8016a54:	4623      	mov	r3, r4
 8016a56:	469a      	mov	sl, r3
 8016a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a5c:	b10a      	cbz	r2, 8016a62 <_vfiprintf_r+0xa2>
 8016a5e:	2a25      	cmp	r2, #37	; 0x25
 8016a60:	d1f9      	bne.n	8016a56 <_vfiprintf_r+0x96>
 8016a62:	ebba 0b04 	subs.w	fp, sl, r4
 8016a66:	d00b      	beq.n	8016a80 <_vfiprintf_r+0xc0>
 8016a68:	465b      	mov	r3, fp
 8016a6a:	4622      	mov	r2, r4
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	4630      	mov	r0, r6
 8016a70:	f7ff ff93 	bl	801699a <__sfputs_r>
 8016a74:	3001      	adds	r0, #1
 8016a76:	f000 80aa 	beq.w	8016bce <_vfiprintf_r+0x20e>
 8016a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a7c:	445a      	add	r2, fp
 8016a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8016a80:	f89a 3000 	ldrb.w	r3, [sl]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	f000 80a2 	beq.w	8016bce <_vfiprintf_r+0x20e>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a94:	f10a 0a01 	add.w	sl, sl, #1
 8016a98:	9304      	str	r3, [sp, #16]
 8016a9a:	9307      	str	r3, [sp, #28]
 8016a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8016aa2:	4654      	mov	r4, sl
 8016aa4:	2205      	movs	r2, #5
 8016aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aaa:	4858      	ldr	r0, [pc, #352]	; (8016c0c <_vfiprintf_r+0x24c>)
 8016aac:	f7e9 fbd0 	bl	8000250 <memchr>
 8016ab0:	9a04      	ldr	r2, [sp, #16]
 8016ab2:	b9d8      	cbnz	r0, 8016aec <_vfiprintf_r+0x12c>
 8016ab4:	06d1      	lsls	r1, r2, #27
 8016ab6:	bf44      	itt	mi
 8016ab8:	2320      	movmi	r3, #32
 8016aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016abe:	0713      	lsls	r3, r2, #28
 8016ac0:	bf44      	itt	mi
 8016ac2:	232b      	movmi	r3, #43	; 0x2b
 8016ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8016acc:	2b2a      	cmp	r3, #42	; 0x2a
 8016ace:	d015      	beq.n	8016afc <_vfiprintf_r+0x13c>
 8016ad0:	9a07      	ldr	r2, [sp, #28]
 8016ad2:	4654      	mov	r4, sl
 8016ad4:	2000      	movs	r0, #0
 8016ad6:	f04f 0c0a 	mov.w	ip, #10
 8016ada:	4621      	mov	r1, r4
 8016adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae0:	3b30      	subs	r3, #48	; 0x30
 8016ae2:	2b09      	cmp	r3, #9
 8016ae4:	d94e      	bls.n	8016b84 <_vfiprintf_r+0x1c4>
 8016ae6:	b1b0      	cbz	r0, 8016b16 <_vfiprintf_r+0x156>
 8016ae8:	9207      	str	r2, [sp, #28]
 8016aea:	e014      	b.n	8016b16 <_vfiprintf_r+0x156>
 8016aec:	eba0 0308 	sub.w	r3, r0, r8
 8016af0:	fa09 f303 	lsl.w	r3, r9, r3
 8016af4:	4313      	orrs	r3, r2
 8016af6:	9304      	str	r3, [sp, #16]
 8016af8:	46a2      	mov	sl, r4
 8016afa:	e7d2      	b.n	8016aa2 <_vfiprintf_r+0xe2>
 8016afc:	9b03      	ldr	r3, [sp, #12]
 8016afe:	1d19      	adds	r1, r3, #4
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	9103      	str	r1, [sp, #12]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	bfbb      	ittet	lt
 8016b08:	425b      	neglt	r3, r3
 8016b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8016b0e:	9307      	strge	r3, [sp, #28]
 8016b10:	9307      	strlt	r3, [sp, #28]
 8016b12:	bfb8      	it	lt
 8016b14:	9204      	strlt	r2, [sp, #16]
 8016b16:	7823      	ldrb	r3, [r4, #0]
 8016b18:	2b2e      	cmp	r3, #46	; 0x2e
 8016b1a:	d10c      	bne.n	8016b36 <_vfiprintf_r+0x176>
 8016b1c:	7863      	ldrb	r3, [r4, #1]
 8016b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8016b20:	d135      	bne.n	8016b8e <_vfiprintf_r+0x1ce>
 8016b22:	9b03      	ldr	r3, [sp, #12]
 8016b24:	1d1a      	adds	r2, r3, #4
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	9203      	str	r2, [sp, #12]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	bfb8      	it	lt
 8016b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b32:	3402      	adds	r4, #2
 8016b34:	9305      	str	r3, [sp, #20]
 8016b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016c1c <_vfiprintf_r+0x25c>
 8016b3a:	7821      	ldrb	r1, [r4, #0]
 8016b3c:	2203      	movs	r2, #3
 8016b3e:	4650      	mov	r0, sl
 8016b40:	f7e9 fb86 	bl	8000250 <memchr>
 8016b44:	b140      	cbz	r0, 8016b58 <_vfiprintf_r+0x198>
 8016b46:	2340      	movs	r3, #64	; 0x40
 8016b48:	eba0 000a 	sub.w	r0, r0, sl
 8016b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8016b50:	9b04      	ldr	r3, [sp, #16]
 8016b52:	4303      	orrs	r3, r0
 8016b54:	3401      	adds	r4, #1
 8016b56:	9304      	str	r3, [sp, #16]
 8016b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b5c:	482c      	ldr	r0, [pc, #176]	; (8016c10 <_vfiprintf_r+0x250>)
 8016b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b62:	2206      	movs	r2, #6
 8016b64:	f7e9 fb74 	bl	8000250 <memchr>
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d03f      	beq.n	8016bec <_vfiprintf_r+0x22c>
 8016b6c:	4b29      	ldr	r3, [pc, #164]	; (8016c14 <_vfiprintf_r+0x254>)
 8016b6e:	bb1b      	cbnz	r3, 8016bb8 <_vfiprintf_r+0x1f8>
 8016b70:	9b03      	ldr	r3, [sp, #12]
 8016b72:	3307      	adds	r3, #7
 8016b74:	f023 0307 	bic.w	r3, r3, #7
 8016b78:	3308      	adds	r3, #8
 8016b7a:	9303      	str	r3, [sp, #12]
 8016b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b7e:	443b      	add	r3, r7
 8016b80:	9309      	str	r3, [sp, #36]	; 0x24
 8016b82:	e767      	b.n	8016a54 <_vfiprintf_r+0x94>
 8016b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b88:	460c      	mov	r4, r1
 8016b8a:	2001      	movs	r0, #1
 8016b8c:	e7a5      	b.n	8016ada <_vfiprintf_r+0x11a>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	3401      	adds	r4, #1
 8016b92:	9305      	str	r3, [sp, #20]
 8016b94:	4619      	mov	r1, r3
 8016b96:	f04f 0c0a 	mov.w	ip, #10
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba0:	3a30      	subs	r2, #48	; 0x30
 8016ba2:	2a09      	cmp	r2, #9
 8016ba4:	d903      	bls.n	8016bae <_vfiprintf_r+0x1ee>
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d0c5      	beq.n	8016b36 <_vfiprintf_r+0x176>
 8016baa:	9105      	str	r1, [sp, #20]
 8016bac:	e7c3      	b.n	8016b36 <_vfiprintf_r+0x176>
 8016bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	e7f0      	b.n	8016b9a <_vfiprintf_r+0x1da>
 8016bb8:	ab03      	add	r3, sp, #12
 8016bba:	9300      	str	r3, [sp, #0]
 8016bbc:	462a      	mov	r2, r5
 8016bbe:	4b16      	ldr	r3, [pc, #88]	; (8016c18 <_vfiprintf_r+0x258>)
 8016bc0:	a904      	add	r1, sp, #16
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	f7fd fb88 	bl	80142d8 <_printf_float>
 8016bc8:	4607      	mov	r7, r0
 8016bca:	1c78      	adds	r0, r7, #1
 8016bcc:	d1d6      	bne.n	8016b7c <_vfiprintf_r+0x1bc>
 8016bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bd0:	07d9      	lsls	r1, r3, #31
 8016bd2:	d405      	bmi.n	8016be0 <_vfiprintf_r+0x220>
 8016bd4:	89ab      	ldrh	r3, [r5, #12]
 8016bd6:	059a      	lsls	r2, r3, #22
 8016bd8:	d402      	bmi.n	8016be0 <_vfiprintf_r+0x220>
 8016bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bdc:	f7ff f84c 	bl	8015c78 <__retarget_lock_release_recursive>
 8016be0:	89ab      	ldrh	r3, [r5, #12]
 8016be2:	065b      	lsls	r3, r3, #25
 8016be4:	f53f af12 	bmi.w	8016a0c <_vfiprintf_r+0x4c>
 8016be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bea:	e711      	b.n	8016a10 <_vfiprintf_r+0x50>
 8016bec:	ab03      	add	r3, sp, #12
 8016bee:	9300      	str	r3, [sp, #0]
 8016bf0:	462a      	mov	r2, r5
 8016bf2:	4b09      	ldr	r3, [pc, #36]	; (8016c18 <_vfiprintf_r+0x258>)
 8016bf4:	a904      	add	r1, sp, #16
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	f7fd fdfa 	bl	80147f0 <_printf_i>
 8016bfc:	e7e4      	b.n	8016bc8 <_vfiprintf_r+0x208>
 8016bfe:	bf00      	nop
 8016c00:	08018490 	.word	0x08018490
 8016c04:	080184b0 	.word	0x080184b0
 8016c08:	08018470 	.word	0x08018470
 8016c0c:	0801862c 	.word	0x0801862c
 8016c10:	08018636 	.word	0x08018636
 8016c14:	080142d9 	.word	0x080142d9
 8016c18:	0801699b 	.word	0x0801699b
 8016c1c:	08018632 	.word	0x08018632

08016c20 <_read_r>:
 8016c20:	b538      	push	{r3, r4, r5, lr}
 8016c22:	4d07      	ldr	r5, [pc, #28]	; (8016c40 <_read_r+0x20>)
 8016c24:	4604      	mov	r4, r0
 8016c26:	4608      	mov	r0, r1
 8016c28:	4611      	mov	r1, r2
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	602a      	str	r2, [r5, #0]
 8016c2e:	461a      	mov	r2, r3
 8016c30:	f000 fac6 	bl	80171c0 <_read>
 8016c34:	1c43      	adds	r3, r0, #1
 8016c36:	d102      	bne.n	8016c3e <_read_r+0x1e>
 8016c38:	682b      	ldr	r3, [r5, #0]
 8016c3a:	b103      	cbz	r3, 8016c3e <_read_r+0x1e>
 8016c3c:	6023      	str	r3, [r4, #0]
 8016c3e:	bd38      	pop	{r3, r4, r5, pc}
 8016c40:	200016d8 	.word	0x200016d8

08016c44 <__ascii_wctomb>:
 8016c44:	b149      	cbz	r1, 8016c5a <__ascii_wctomb+0x16>
 8016c46:	2aff      	cmp	r2, #255	; 0xff
 8016c48:	bf85      	ittet	hi
 8016c4a:	238a      	movhi	r3, #138	; 0x8a
 8016c4c:	6003      	strhi	r3, [r0, #0]
 8016c4e:	700a      	strbls	r2, [r1, #0]
 8016c50:	f04f 30ff 	movhi.w	r0, #4294967295
 8016c54:	bf98      	it	ls
 8016c56:	2001      	movls	r0, #1
 8016c58:	4770      	bx	lr
 8016c5a:	4608      	mov	r0, r1
 8016c5c:	4770      	bx	lr

08016c5e <abort>:
 8016c5e:	b508      	push	{r3, lr}
 8016c60:	2006      	movs	r0, #6
 8016c62:	f000 f82b 	bl	8016cbc <raise>
 8016c66:	2001      	movs	r0, #1
 8016c68:	f000 faba 	bl	80171e0 <_exit>

08016c6c <_raise_r>:
 8016c6c:	291f      	cmp	r1, #31
 8016c6e:	b538      	push	{r3, r4, r5, lr}
 8016c70:	4604      	mov	r4, r0
 8016c72:	460d      	mov	r5, r1
 8016c74:	d904      	bls.n	8016c80 <_raise_r+0x14>
 8016c76:	2316      	movs	r3, #22
 8016c78:	6003      	str	r3, [r0, #0]
 8016c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c7e:	bd38      	pop	{r3, r4, r5, pc}
 8016c80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c82:	b112      	cbz	r2, 8016c8a <_raise_r+0x1e>
 8016c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c88:	b94b      	cbnz	r3, 8016c9e <_raise_r+0x32>
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f000 f830 	bl	8016cf0 <_getpid_r>
 8016c90:	462a      	mov	r2, r5
 8016c92:	4601      	mov	r1, r0
 8016c94:	4620      	mov	r0, r4
 8016c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c9a:	f000 b817 	b.w	8016ccc <_kill_r>
 8016c9e:	2b01      	cmp	r3, #1
 8016ca0:	d00a      	beq.n	8016cb8 <_raise_r+0x4c>
 8016ca2:	1c59      	adds	r1, r3, #1
 8016ca4:	d103      	bne.n	8016cae <_raise_r+0x42>
 8016ca6:	2316      	movs	r3, #22
 8016ca8:	6003      	str	r3, [r0, #0]
 8016caa:	2001      	movs	r0, #1
 8016cac:	e7e7      	b.n	8016c7e <_raise_r+0x12>
 8016cae:	2400      	movs	r4, #0
 8016cb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016cb4:	4628      	mov	r0, r5
 8016cb6:	4798      	blx	r3
 8016cb8:	2000      	movs	r0, #0
 8016cba:	e7e0      	b.n	8016c7e <_raise_r+0x12>

08016cbc <raise>:
 8016cbc:	4b02      	ldr	r3, [pc, #8]	; (8016cc8 <raise+0xc>)
 8016cbe:	4601      	mov	r1, r0
 8016cc0:	6818      	ldr	r0, [r3, #0]
 8016cc2:	f7ff bfd3 	b.w	8016c6c <_raise_r>
 8016cc6:	bf00      	nop
 8016cc8:	20000f80 	.word	0x20000f80

08016ccc <_kill_r>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4d07      	ldr	r5, [pc, #28]	; (8016cec <_kill_r+0x20>)
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	4608      	mov	r0, r1
 8016cd6:	4611      	mov	r1, r2
 8016cd8:	602b      	str	r3, [r5, #0]
 8016cda:	f000 fa61 	bl	80171a0 <_kill>
 8016cde:	1c43      	adds	r3, r0, #1
 8016ce0:	d102      	bne.n	8016ce8 <_kill_r+0x1c>
 8016ce2:	682b      	ldr	r3, [r5, #0]
 8016ce4:	b103      	cbz	r3, 8016ce8 <_kill_r+0x1c>
 8016ce6:	6023      	str	r3, [r4, #0]
 8016ce8:	bd38      	pop	{r3, r4, r5, pc}
 8016cea:	bf00      	nop
 8016cec:	200016d8 	.word	0x200016d8

08016cf0 <_getpid_r>:
 8016cf0:	f000 ba46 	b.w	8017180 <_getpid>

08016cf4 <with_errnof>:
 8016cf4:	b513      	push	{r0, r1, r4, lr}
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016cfc:	f7fd f912 	bl	8013f24 <__errno>
 8016d00:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016d04:	6004      	str	r4, [r0, #0]
 8016d06:	b002      	add	sp, #8
 8016d08:	bd10      	pop	{r4, pc}

08016d0a <xflowf>:
 8016d0a:	b130      	cbz	r0, 8016d1a <xflowf+0x10>
 8016d0c:	eef1 7a40 	vneg.f32	s15, s0
 8016d10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016d14:	2022      	movs	r0, #34	; 0x22
 8016d16:	f7ff bfed 	b.w	8016cf4 <with_errnof>
 8016d1a:	eef0 7a40 	vmov.f32	s15, s0
 8016d1e:	e7f7      	b.n	8016d10 <xflowf+0x6>

08016d20 <__math_uflowf>:
 8016d20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016d28 <__math_uflowf+0x8>
 8016d24:	f7ff bff1 	b.w	8016d0a <xflowf>
 8016d28:	10000000 	.word	0x10000000

08016d2c <__math_may_uflowf>:
 8016d2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016d34 <__math_may_uflowf+0x8>
 8016d30:	f7ff bfeb 	b.w	8016d0a <xflowf>
 8016d34:	1a200000 	.word	0x1a200000

08016d38 <__math_oflowf>:
 8016d38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016d40 <__math_oflowf+0x8>
 8016d3c:	f7ff bfe5 	b.w	8016d0a <xflowf>
 8016d40:	70000000 	.word	0x70000000

08016d44 <__math_divzerof>:
 8016d44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016d48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016d4c:	2800      	cmp	r0, #0
 8016d4e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8016d52:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016d60 <__math_divzerof+0x1c>
 8016d56:	2022      	movs	r0, #34	; 0x22
 8016d58:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016d5c:	f7ff bfca 	b.w	8016cf4 <with_errnof>
 8016d60:	00000000 	.word	0x00000000

08016d64 <__math_invalidf>:
 8016d64:	eef0 7a40 	vmov.f32	s15, s0
 8016d68:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016d6c:	eef4 7a67 	vcmp.f32	s15, s15
 8016d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d74:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016d78:	d602      	bvs.n	8016d80 <__math_invalidf+0x1c>
 8016d7a:	2021      	movs	r0, #33	; 0x21
 8016d7c:	f7ff bfba 	b.w	8016cf4 <with_errnof>
 8016d80:	4770      	bx	lr
	...

08016d84 <expf>:
 8016d84:	ee10 2a10 	vmov	r2, s0
 8016d88:	f240 412a 	movw	r1, #1066	; 0x42a
 8016d8c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8016d90:	428b      	cmp	r3, r1
 8016d92:	b430      	push	{r4, r5}
 8016d94:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016d98:	d92a      	bls.n	8016df0 <expf+0x6c>
 8016d9a:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8016d9e:	d058      	beq.n	8016e52 <expf+0xce>
 8016da0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8016da4:	d303      	bcc.n	8016dae <expf+0x2a>
 8016da6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016daa:	bc30      	pop	{r4, r5}
 8016dac:	4770      	bx	lr
 8016dae:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016e58 <expf+0xd4>
 8016db2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dba:	dd03      	ble.n	8016dc4 <expf+0x40>
 8016dbc:	bc30      	pop	{r4, r5}
 8016dbe:	2000      	movs	r0, #0
 8016dc0:	f7ff bfba 	b.w	8016d38 <__math_oflowf>
 8016dc4:	eddf 7a25 	vldr	s15, [pc, #148]	; 8016e5c <expf+0xd8>
 8016dc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd0:	d503      	bpl.n	8016dda <expf+0x56>
 8016dd2:	bc30      	pop	{r4, r5}
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	f7ff bfa3 	b.w	8016d20 <__math_uflowf>
 8016dda:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016e60 <expf+0xdc>
 8016dde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de6:	d503      	bpl.n	8016df0 <expf+0x6c>
 8016de8:	bc30      	pop	{r4, r5}
 8016dea:	2000      	movs	r0, #0
 8016dec:	f7ff bf9e 	b.w	8016d2c <__math_may_uflowf>
 8016df0:	4b1c      	ldr	r3, [pc, #112]	; (8016e64 <expf+0xe0>)
 8016df2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016df6:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8016dfa:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8016dfe:	eeb0 7b44 	vmov.f64	d7, d4
 8016e02:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016e06:	ee17 0a10 	vmov	r0, s14
 8016e0a:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016e0e:	f000 021f 	and.w	r2, r0, #31
 8016e12:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016e16:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8016e1a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016e1e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8016e22:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8016e26:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016e2a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8016e2e:	684d      	ldr	r5, [r1, #4]
 8016e30:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8016e34:	2100      	movs	r1, #0
 8016e36:	190a      	adds	r2, r1, r4
 8016e38:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8016e3c:	eea5 0b07 	vfma.f64	d0, d5, d7
 8016e40:	ec43 2b17 	vmov	d7, r2, r3
 8016e44:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016e48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016e4c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016e50:	e7ab      	b.n	8016daa <expf+0x26>
 8016e52:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8016e68 <expf+0xe4>
 8016e56:	e7a8      	b.n	8016daa <expf+0x26>
 8016e58:	42b17217 	.word	0x42b17217
 8016e5c:	c2cff1b4 	.word	0xc2cff1b4
 8016e60:	c2ce8ecf 	.word	0xc2ce8ecf
 8016e64:	08018788 	.word	0x08018788
 8016e68:	00000000 	.word	0x00000000

08016e6c <checkint>:
 8016e6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016e70:	2b7e      	cmp	r3, #126	; 0x7e
 8016e72:	dd10      	ble.n	8016e96 <checkint+0x2a>
 8016e74:	2b96      	cmp	r3, #150	; 0x96
 8016e76:	dc0c      	bgt.n	8016e92 <checkint+0x26>
 8016e78:	2201      	movs	r2, #1
 8016e7a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8016e82:	1e5a      	subs	r2, r3, #1
 8016e84:	4202      	tst	r2, r0
 8016e86:	d106      	bne.n	8016e96 <checkint+0x2a>
 8016e88:	4203      	tst	r3, r0
 8016e8a:	bf0c      	ite	eq
 8016e8c:	2002      	moveq	r0, #2
 8016e8e:	2001      	movne	r0, #1
 8016e90:	4770      	bx	lr
 8016e92:	2002      	movs	r0, #2
 8016e94:	4770      	bx	lr
 8016e96:	2000      	movs	r0, #0
 8016e98:	4770      	bx	lr
 8016e9a:	0000      	movs	r0, r0
 8016e9c:	0000      	movs	r0, r0
	...

08016ea0 <powf>:
 8016ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ea2:	ee10 1a10 	vmov	r1, s0
 8016ea6:	ee10 4a90 	vmov	r4, s1
 8016eaa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8016eae:	0062      	lsls	r2, r4, #1
 8016eb0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016eb4:	eef0 7a40 	vmov.f32	s15, s0
 8016eb8:	f102 30ff 	add.w	r0, r2, #4294967295
 8016ebc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8016ec0:	d252      	bcs.n	8016f68 <powf+0xc8>
 8016ec2:	4298      	cmp	r0, r3
 8016ec4:	d252      	bcs.n	8016f6c <powf+0xcc>
 8016ec6:	2000      	movs	r0, #0
 8016ec8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8016ecc:	4ca0      	ldr	r4, [pc, #640]	; (8017150 <powf+0x2b0>)
 8016ece:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8016ed2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8016ed6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8016eda:	0dd2      	lsrs	r2, r2, #23
 8016edc:	05d2      	lsls	r2, r2, #23
 8016ede:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8016ee2:	1a8b      	subs	r3, r1, r2
 8016ee4:	ed95 6b00 	vldr	d6, [r5]
 8016ee8:	ee07 3a90 	vmov	s15, r3
 8016eec:	15d2      	asrs	r2, r2, #23
 8016eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016ef2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8016ef6:	ed95 6b02 	vldr	d6, [r5, #8]
 8016efa:	ee25 2b05 	vmul.f64	d2, d5, d5
 8016efe:	ee22 1b02 	vmul.f64	d1, d2, d2
 8016f02:	ee07 2a90 	vmov	s15, r2
 8016f06:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8016f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016f0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016f12:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8016f16:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8016f1a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8016f1e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8016f22:	eea5 6b04 	vfma.f64	d6, d5, d4
 8016f26:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8016f2a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8016f2e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016f32:	eea2 7b06 	vfma.f64	d7, d2, d6
 8016f36:	eea3 7b01 	vfma.f64	d7, d3, d1
 8016f3a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016f3e:	ee10 3a90 	vmov	r3, s1
 8016f42:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8016f46:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	f0c0 80b1 	bcc.w	80170b2 <powf+0x212>
 8016f50:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8017130 <powf+0x290>
 8016f54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f5c:	dd79      	ble.n	8017052 <powf+0x1b2>
 8016f5e:	b003      	add	sp, #12
 8016f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f64:	f7ff bee8 	b.w	8016d38 <__math_oflowf>
 8016f68:	4298      	cmp	r0, r3
 8016f6a:	d32d      	bcc.n	8016fc8 <powf+0x128>
 8016f6c:	b952      	cbnz	r2, 8016f84 <powf+0xe4>
 8016f6e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8016f72:	005b      	lsls	r3, r3, #1
 8016f74:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8016f78:	f240 80c9 	bls.w	801710e <powf+0x26e>
 8016f7c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8016f80:	b003      	add	sp, #12
 8016f82:	bd30      	pop	{r4, r5, pc}
 8016f84:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8016f88:	d105      	bne.n	8016f96 <powf+0xf6>
 8016f8a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8016f8e:	0064      	lsls	r4, r4, #1
 8016f90:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8016f94:	e7f0      	b.n	8016f78 <powf+0xd8>
 8016f96:	004b      	lsls	r3, r1, #1
 8016f98:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8016f9c:	d8ee      	bhi.n	8016f7c <powf+0xdc>
 8016f9e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016fa2:	d1eb      	bne.n	8016f7c <powf+0xdc>
 8016fa4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016fa8:	f000 80b1 	beq.w	801710e <powf+0x26e>
 8016fac:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016fb0:	ea6f 0404 	mvn.w	r4, r4
 8016fb4:	bf34      	ite	cc
 8016fb6:	2300      	movcc	r3, #0
 8016fb8:	2301      	movcs	r3, #1
 8016fba:	0fe4      	lsrs	r4, r4, #31
 8016fbc:	42a3      	cmp	r3, r4
 8016fbe:	f040 80a9 	bne.w	8017114 <powf+0x274>
 8016fc2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8016fc6:	e7db      	b.n	8016f80 <powf+0xe0>
 8016fc8:	004d      	lsls	r5, r1, #1
 8016fca:	1e6a      	subs	r2, r5, #1
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d31c      	bcc.n	801700a <powf+0x16a>
 8016fd0:	2900      	cmp	r1, #0
 8016fd2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016fd6:	da0f      	bge.n	8016ff8 <powf+0x158>
 8016fd8:	ee10 0a90 	vmov	r0, s1
 8016fdc:	f7ff ff46 	bl	8016e6c <checkint>
 8016fe0:	2801      	cmp	r0, #1
 8016fe2:	d109      	bne.n	8016ff8 <powf+0x158>
 8016fe4:	eeb1 0a40 	vneg.f32	s0, s0
 8016fe8:	b945      	cbnz	r5, 8016ffc <powf+0x15c>
 8016fea:	2c00      	cmp	r4, #0
 8016fec:	dac8      	bge.n	8016f80 <powf+0xe0>
 8016fee:	b003      	add	sp, #12
 8016ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ff4:	f7ff bea6 	b.w	8016d44 <__math_divzerof>
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	e7f5      	b.n	8016fe8 <powf+0x148>
 8016ffc:	2c00      	cmp	r4, #0
 8016ffe:	dabf      	bge.n	8016f80 <powf+0xe0>
 8017000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017004:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017008:	e7ba      	b.n	8016f80 <powf+0xe0>
 801700a:	2900      	cmp	r1, #0
 801700c:	da1f      	bge.n	801704e <powf+0x1ae>
 801700e:	ee10 0a90 	vmov	r0, s1
 8017012:	f7ff ff2b 	bl	8016e6c <checkint>
 8017016:	b920      	cbnz	r0, 8017022 <powf+0x182>
 8017018:	b003      	add	sp, #12
 801701a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801701e:	f7ff bea1 	b.w	8016d64 <__math_invalidf>
 8017022:	2801      	cmp	r0, #1
 8017024:	bf14      	ite	ne
 8017026:	2000      	movne	r0, #0
 8017028:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801702c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017030:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017034:	f4bf af48 	bcs.w	8016ec8 <powf+0x28>
 8017038:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8017154 <powf+0x2b4>
 801703c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017040:	ee10 3a10 	vmov	r3, s0
 8017044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017048:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801704c:	e73c      	b.n	8016ec8 <powf+0x28>
 801704e:	2000      	movs	r0, #0
 8017050:	e7ee      	b.n	8017030 <powf+0x190>
 8017052:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8017138 <powf+0x298>
 8017056:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801705a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705e:	dd10      	ble.n	8017082 <powf+0x1e2>
 8017060:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017064:	2800      	cmp	r0, #0
 8017066:	d158      	bne.n	801711a <powf+0x27a>
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	eddd 7a00 	vldr	s15, [sp]
 801706e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017072:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017076:	eef4 7a47 	vcmp.f32	s15, s14
 801707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707e:	f47f af6e 	bne.w	8016f5e <powf+0xbe>
 8017082:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017140 <powf+0x2a0>
 8017086:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801708e:	d804      	bhi.n	801709a <powf+0x1fa>
 8017090:	b003      	add	sp, #12
 8017092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017096:	f7ff be43 	b.w	8016d20 <__math_uflowf>
 801709a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8017148 <powf+0x2a8>
 801709e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80170a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a6:	d504      	bpl.n	80170b2 <powf+0x212>
 80170a8:	b003      	add	sp, #12
 80170aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170ae:	f7ff be3d 	b.w	8016d2c <__math_may_uflowf>
 80170b2:	4b29      	ldr	r3, [pc, #164]	; (8017158 <powf+0x2b8>)
 80170b4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80170b8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80170bc:	ee16 2a10 	vmov	r2, s12
 80170c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80170c4:	f002 011f 	and.w	r1, r2, #31
 80170c8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80170cc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80170d0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80170d4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80170d8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80170dc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80170e0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80170e4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80170e8:	686d      	ldr	r5, [r5, #4]
 80170ea:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80170ee:	1882      	adds	r2, r0, r2
 80170f0:	2300      	movs	r3, #0
 80170f2:	1918      	adds	r0, r3, r4
 80170f4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80170f8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80170fc:	ec41 0b17 	vmov	d7, r0, r1
 8017100:	eea6 0b04 	vfma.f64	d0, d6, d4
 8017104:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017108:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801710c:	e738      	b.n	8016f80 <powf+0xe0>
 801710e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017112:	e735      	b.n	8016f80 <powf+0xe0>
 8017114:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801715c <powf+0x2bc>
 8017118:	e732      	b.n	8016f80 <powf+0xe0>
 801711a:	9301      	str	r3, [sp, #4]
 801711c:	eddd 7a01 	vldr	s15, [sp, #4]
 8017120:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017128:	e7a5      	b.n	8017076 <powf+0x1d6>
 801712a:	bf00      	nop
 801712c:	f3af 8000 	nop.w
 8017130:	ffd1d571 	.word	0xffd1d571
 8017134:	405fffff 	.word	0x405fffff
 8017138:	ffa3aae2 	.word	0xffa3aae2
 801713c:	405fffff 	.word	0x405fffff
 8017140:	00000000 	.word	0x00000000
 8017144:	c062c000 	.word	0xc062c000
 8017148:	00000000 	.word	0x00000000
 801714c:	c062a000 	.word	0xc062a000
 8017150:	080188d0 	.word	0x080188d0
 8017154:	4b000000 	.word	0x4b000000
 8017158:	08018788 	.word	0x08018788
 801715c:	00000000 	.word	0x00000000

08017160 <_close>:
 8017160:	4b02      	ldr	r3, [pc, #8]	; (801716c <_close+0xc>)
 8017162:	2258      	movs	r2, #88	; 0x58
 8017164:	601a      	str	r2, [r3, #0]
 8017166:	f04f 30ff 	mov.w	r0, #4294967295
 801716a:	4770      	bx	lr
 801716c:	200016d8 	.word	0x200016d8

08017170 <_fstat>:
 8017170:	4b02      	ldr	r3, [pc, #8]	; (801717c <_fstat+0xc>)
 8017172:	2258      	movs	r2, #88	; 0x58
 8017174:	601a      	str	r2, [r3, #0]
 8017176:	f04f 30ff 	mov.w	r0, #4294967295
 801717a:	4770      	bx	lr
 801717c:	200016d8 	.word	0x200016d8

08017180 <_getpid>:
 8017180:	4b02      	ldr	r3, [pc, #8]	; (801718c <_getpid+0xc>)
 8017182:	2258      	movs	r2, #88	; 0x58
 8017184:	601a      	str	r2, [r3, #0]
 8017186:	f04f 30ff 	mov.w	r0, #4294967295
 801718a:	4770      	bx	lr
 801718c:	200016d8 	.word	0x200016d8

08017190 <_isatty>:
 8017190:	4b02      	ldr	r3, [pc, #8]	; (801719c <_isatty+0xc>)
 8017192:	2258      	movs	r2, #88	; 0x58
 8017194:	601a      	str	r2, [r3, #0]
 8017196:	2000      	movs	r0, #0
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	200016d8 	.word	0x200016d8

080171a0 <_kill>:
 80171a0:	4b02      	ldr	r3, [pc, #8]	; (80171ac <_kill+0xc>)
 80171a2:	2258      	movs	r2, #88	; 0x58
 80171a4:	601a      	str	r2, [r3, #0]
 80171a6:	f04f 30ff 	mov.w	r0, #4294967295
 80171aa:	4770      	bx	lr
 80171ac:	200016d8 	.word	0x200016d8

080171b0 <_lseek>:
 80171b0:	4b02      	ldr	r3, [pc, #8]	; (80171bc <_lseek+0xc>)
 80171b2:	2258      	movs	r2, #88	; 0x58
 80171b4:	601a      	str	r2, [r3, #0]
 80171b6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ba:	4770      	bx	lr
 80171bc:	200016d8 	.word	0x200016d8

080171c0 <_read>:
 80171c0:	4b02      	ldr	r3, [pc, #8]	; (80171cc <_read+0xc>)
 80171c2:	2258      	movs	r2, #88	; 0x58
 80171c4:	601a      	str	r2, [r3, #0]
 80171c6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ca:	4770      	bx	lr
 80171cc:	200016d8 	.word	0x200016d8

080171d0 <_write>:
 80171d0:	4b02      	ldr	r3, [pc, #8]	; (80171dc <_write+0xc>)
 80171d2:	2258      	movs	r2, #88	; 0x58
 80171d4:	601a      	str	r2, [r3, #0]
 80171d6:	f04f 30ff 	mov.w	r0, #4294967295
 80171da:	4770      	bx	lr
 80171dc:	200016d8 	.word	0x200016d8

080171e0 <_exit>:
 80171e0:	e7fe      	b.n	80171e0 <_exit>
	...

080171e4 <_init>:
 80171e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e6:	bf00      	nop
 80171e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171ea:	bc08      	pop	{r3}
 80171ec:	469e      	mov	lr, r3
 80171ee:	4770      	bx	lr

080171f0 <_fini>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	bf00      	nop
 80171f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f6:	bc08      	pop	{r3}
 80171f8:	469e      	mov	lr, r3
 80171fa:	4770      	bx	lr
