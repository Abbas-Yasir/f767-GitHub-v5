
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001144  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a198  0800a198  00020530  2**0
                  CONTENTS
  4 .ARM          00000008  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a0  0800a1a0  00020530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000530  20000000  0800a1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000530  0800a6d8  00020530  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800a6d8  00020908  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c00  00000000  00000000  0002055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303f  00000000  00000000  0003715e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4f4  00000000  00000000  0003c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183bc  00000000  00000000  00066a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102418  00000000  00000000  0007ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  001812a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000530 	.word	0x20000530
 800021c:	00000000 	.word	0x00000000
 8000220:	0800903c 	.word	0x0800903c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000534 	.word	0x20000534
 800023c:	0800903c 	.word	0x0800903c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_DMA_Init+0x38>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <MX_DMA_Init+0x38>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_DMA_Init+0x38>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2044      	movs	r0, #68	; 0x44
 8000608:	f003 fb05 	bl	8003c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800060c:	2044      	movs	r0, #68	; 0x44
 800060e:	f003 fb1e 	bl	8003c4e <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_GPIO_Init+0x110>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <MX_GPIO_Init+0x110>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_GPIO_Init+0x110>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0310 	and.w	r3, r3, #16
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_GPIO_Init+0x110>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_GPIO_Init+0x110>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_GPIO_Init+0x110>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x110>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x110>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x110>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_GPIO_Init+0x110>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <MX_GPIO_Init+0x110>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_GPIO_Init+0x110>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0x110>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0x110>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0x110>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006ae:	2200      	movs	r2, #0
 80006b0:	f647 0110 	movw	r1, #30736	; 0x7810
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_GPIO_Init+0x114>)
 80006b6:	f004 f80d 	bl	80046d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <MX_GPIO_Init+0x118>)
 80006c0:	f004 f808 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <MX_GPIO_Init+0x11c>)
 80006cc:	f004 f802 	bl	80046d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80006d0:	f647 0310 	movw	r3, #30736	; 0x7810
 80006d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0x114>)
 80006ea:	f003 fe47 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ee:	2310      	movs	r3, #16
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_GPIO_Init+0x118>)
 8000706:	f003 fe39 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800070a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800070e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_GPIO_Init+0x11c>)
 8000724:	f003 fe2a 	bl	800437c <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&serialPortDebug,(uint8_t *)&ch,1,0xFFFF);//Blocking mode printing
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	2201      	movs	r2, #1
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <__io_putchar+0x20>)
 8000752:	f006 f9fd 	bl	8006b50 <HAL_UART_Transmit>
  return ch;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000075c 	.word	0x2000075c

08000764 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	4613      	mov	r3, r2
 8000770:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000776:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d027      	beq.n	80007ce <in_func+0x6a>
//    	read_bulk_4ByteAdd_SharedFM(dev->fp, buff, nbyte);
//    	read_bulk_4ByteAdd_LocalFM(dev->fp, buff, nbyte);
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	4619      	mov	r1, r3
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f001 fbbc 	bl	8001f04 <W25qxx_ReadBytes>

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	3b01      	subs	r3, #1
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	4911      	ldr	r1, [pc, #68]	; (80007e4 <in_func+0x80>)
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <in_func+0x84>)
 80007a2:	f007 fbf7 	bl	8007f94 <siprintf>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <in_func+0x88>)
 80007ac:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <in_func+0x88>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	490c      	ldr	r1, [pc, #48]	; (80007e8 <in_func+0x84>)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <in_func+0x8c>)
 80007ba:	f006 f9c9 	bl	8006b50 <HAL_UART_Transmit>

    	dev->fp += nbyte;
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	441a      	add	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	601a      	str	r2, [r3, #0]

        return nbyte;
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	e006      	b.n	80007dc <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	441a      	add	r2, r3
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	601a      	str	r2, [r3, #0]
        return nbyte;
 80007da:	88fb      	ldrh	r3, [r7, #6]
    }
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08009054 	.word	0x08009054
 80007e8:	20000554 	.word	0x20000554
 80007ec:	20000550 	.word	0x20000550
 80007f0:	2000075c 	.word	0x2000075c

080007f4 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000804:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	8892      	ldrh	r2, [r2, #4]
 8000812:	4611      	mov	r1, r2
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	8912      	ldrh	r2, [r2, #8]
 8000818:	fb01 f202 	mul.w	r2, r1, r2
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	8809      	ldrh	r1, [r1, #0]
 8000820:	440a      	add	r2, r1
 8000822:	4413      	add	r3, r2
 8000824:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	885a      	ldrh	r2, [r3, #2]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	891b      	ldrh	r3, [r3, #8]
 800083a:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	83fb      	strh	r3, [r7, #30]
 8000842:	e010      	b.n	8000866 <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8000844:	8afb      	ldrh	r3, [r7, #22]
 8000846:	461a      	mov	r2, r3
 8000848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800084a:	6a38      	ldr	r0, [r7, #32]
 800084c:	f007 fa0e 	bl	8007c6c <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 8000850:	8afb      	ldrh	r3, [r7, #22]
 8000852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000854:	4413      	add	r3, r2
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
 8000858:	8abb      	ldrh	r3, [r7, #20]
 800085a:	6a3a      	ldr	r2, [r7, #32]
 800085c:	4413      	add	r3, r2
 800085e:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000860:	8bfb      	ldrh	r3, [r7, #30]
 8000862:	3301      	adds	r3, #1
 8000864:	83fb      	strh	r3, [r7, #30]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	88db      	ldrh	r3, [r3, #6]
 800086a:	8bfa      	ldrh	r2, [r7, #30]
 800086c:	429a      	cmp	r2, r3
 800086e:	d9e9      	bls.n	8000844 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	f5ad 5da3 	sub.w	sp, sp, #5216	; 0x1460
 8000882:	b082      	sub	sp, #8
 8000884:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f241 425c 	movw	r2, #5212	; 0x145c
 800088c:	443a      	add	r2, r7
 800088e:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x22;
 8000890:	2322      	movs	r3, #34	; 0x22
 8000892:	f241 425b 	movw	r2, #5211	; 0x145b
 8000896:	443a      	add	r2, r7
 8000898:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 3100;
 800089a:	f640 431c 	movw	r3, #3100	; 0xc1c
 800089e:	f241 4254 	movw	r2, #5204	; 0x1454
 80008a2:	443a      	add	r2, r7
 80008a4:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f241 4250 	movw	r2, #5200	; 0x1450
 80008ac:	443a      	add	r2, r7
 80008ae:	6013      	str	r3, [r2, #0]
//	  ai_error ai_err_ICU;
//	  ai_i32 nbatch_ICU;
	  uint32_t timestamp_ICU;
	  uint8_t prediction = 0xFF;
 80008b0:	23ff      	movs	r3, #255	; 0xff
 80008b2:	f241 424f 	movw	r2, #5199	; 0x144f
 80008b6:	443a      	add	r2, r7
 80008b8:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f003 f850 	bl	800395e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f9df 	bl	8000c80 <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f7ff fead 	bl	8000620 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c6:	f7ff fe8d 	bl	80005e4 <MX_DMA_Init>
  MX_SPI4_Init();
 80008ca:	f000 fb61 	bl	8000f90 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80008ce:	f000 fdc7 	bl	8001460 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008d2:	f000 fae7 	bl	8000ea4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80008d6:	f000 fb23 	bl	8000f20 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 80008da:	f000 fa35 	bl	8000d48 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 80008de:	f000 fdef 	bl	80014c0 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80008e2:	f000 fd79 	bl	80013d8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 80008e6:	f000 ffff 	bl	80018e8 <W25qxx_Init>

  HAL_Delay(5000);
 80008ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80008ee:	f003 f893 	bl	8003a18 <HAL_Delay>

  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 80008f2:	48b0      	ldr	r0, [pc, #704]	; (8000bb4 <main+0x338>)
 80008f4:	f007 fb36 	bl	8007f64 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	48ae      	ldr	r0, [pc, #696]	; (8000bb8 <main+0x33c>)
 8000900:	f003 fee8 	bl	80046d4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f003 f887 	bl	8003a18 <HAL_Delay>

  char readBytes[5000]="ABC";
 800090a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800090e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8000912:	4aaa      	ldr	r2, [pc, #680]	; (8000bbc <main+0x340>)
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	3304      	adds	r3, #4
 8000918:	f241 3284 	movw	r2, #4996	; 0x1384
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f007 f9b2 	bl	8007c88 <memset>
//  W25qxx_ReadBytes(readBytes, 0, 16*10);
////  for ( i=0; i<200; i++) {if(i%16==0) {printf("\r\n");} printf("%X ",readBytes[i]);}



	HAL_Delay(1000);
 8000924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000928:	f003 f876 	bl	8003a18 <HAL_Delay>
	W25qxx_EraseBlock(0);
 800092c:	2000      	movs	r0, #0
 800092e:	f001 f923 	bl	8001b78 <W25qxx_EraseBlock>

	HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000936:	f003 f86f 	bl	8003a18 <HAL_Delay>
	W25qxx_ReadBytes( readBytes, 0, sizeof(Space) );
 800093a:	4ba1      	ldr	r3, [pc, #644]	; (8000bc0 <main+0x344>)
 800093c:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8000940:	443b      	add	r3, r7
 8000942:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fadb 	bl	8001f04 <W25qxx_ReadBytes>

	HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f003 f861 	bl	8003a18 <HAL_Delay>
//	saveImage_LocalFM(0x00000000, Space); //Space or Earth
	W25qxx_WriteBlock(Space, 0, 0, sizeof(Space));
 8000956:	f240 43bd 	movw	r3, #1213	; 0x4bd
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	4899      	ldr	r0, [pc, #612]	; (8000bc4 <main+0x348>)
 8000960:	f001 fa54 	bl	8001e0c <W25qxx_WriteBlock>

	StringLength=sprintf(txString,"\r\nSpace size=%d, Earth size=%d\r\n",sizeof(Space),sizeof(Earth));
 8000964:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8000968:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800096c:	4996      	ldr	r1, [pc, #600]	; (8000bc8 <main+0x34c>)
 800096e:	4897      	ldr	r0, [pc, #604]	; (8000bcc <main+0x350>)
 8000970:	f007 fb10 	bl	8007f94 <siprintf>
 8000974:	4603      	mov	r3, r0
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b95      	ldr	r3, [pc, #596]	; (8000bd0 <main+0x354>)
 800097a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800097c:	4b94      	ldr	r3, [pc, #592]	; (8000bd0 <main+0x354>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b29a      	uxth	r2, r3
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	4991      	ldr	r1, [pc, #580]	; (8000bcc <main+0x350>)
 8000986:	4893      	ldr	r0, [pc, #588]	; (8000bd4 <main+0x358>)
 8000988:	f006 f8e2 	bl	8006b50 <HAL_UART_Transmit>


	compression_ratio = 1;
 800098c:	4b92      	ldr	r3, [pc, #584]	; (8000bd8 <main+0x35c>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]


	uint8_t emptyLoop=0;
 8000992:	2300      	movs	r3, #0
 8000994:	f241 424e 	movw	r2, #5198	; 0x144e
 8000998:	443a      	add	r2, r7
 800099a:	7013      	strb	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		work = (void*)malloc(sz_work);
 800099c:	f241 4354 	movw	r3, #5204	; 0x1454
 80009a0:	443b      	add	r3, r7
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	f007 f952 	bl	8007c4c <malloc>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f241 4248 	movw	r2, #5192	; 0x1448
 80009ae:	443a      	add	r2, r7
 80009b0:	6013      	str	r3, [r2, #0]
	  	count++;
 80009b2:	4b8a      	ldr	r3, [pc, #552]	; (8000bdc <main+0x360>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <main+0x360>)
 80009ba:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 80009bc:	4b87      	ldr	r3, [pc, #540]	; (8000bdc <main+0x360>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d109      	bne.n	80009d8 <main+0x15c>
	  		  W25qxx_ReadBytes( readBytes, 0, sizeof(Space) );
 80009c4:	4b7e      	ldr	r3, [pc, #504]	; (8000bc0 <main+0x344>)
 80009c6:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80009ca:	443b      	add	r3, r7
 80009cc:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fa96 	bl	8001f04 <W25qxx_ReadBytes>
	  	}



	  	handshakeCAM = 0;
 80009d8:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <main+0x364>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	  	 // 	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
	  	  //		HAL_UART_Receive(&huart3, (uint8_t *) &handshakeCAM, 1, 1000);												/* Wait for CAM to command ICU, expects 0x29*/
	  	  //		__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_RXNE);

	  	  		//if (handshakeCAM == 0x29) {
	  	  			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 80009de:	4981      	ldr	r1, [pc, #516]	; (8000be4 <main+0x368>)
 80009e0:	487a      	ldr	r0, [pc, #488]	; (8000bcc <main+0x350>)
 80009e2:	f007 fad7 	bl	8007f94 <siprintf>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b79      	ldr	r3, [pc, #484]	; (8000bd0 <main+0x354>)
 80009ec:	701a      	strb	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80009ee:	4b78      	ldr	r3, [pc, #480]	; (8000bd0 <main+0x354>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	2364      	movs	r3, #100	; 0x64
 80009f6:	4975      	ldr	r1, [pc, #468]	; (8000bcc <main+0x350>)
 80009f8:	4876      	ldr	r0, [pc, #472]	; (8000bd4 <main+0x358>)
 80009fa:	f006 f8a9 	bl	8006b50 <HAL_UART_Transmit>

	  	  			HAL_Delay(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f003 f809 	bl	8003a18 <HAL_Delay>
	  	  			devid.fp=0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8000a0c:	6013      	str	r3, [r2, #0]
	  	  			devid.fp= Space;
 8000a0e:	4b6d      	ldr	r3, [pc, #436]	; (8000bc4 <main+0x348>)
 8000a10:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8000a14:	6013      	str	r3, [r2, #0]

	  				StringLength=sprintf(txString,"\r\n");
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <main+0x36c>)
 8000a18:	486c      	ldr	r0, [pc, #432]	; (8000bcc <main+0x350>)
 8000a1a:	f007 fabb 	bl	8007f94 <siprintf>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b6b      	ldr	r3, [pc, #428]	; (8000bd0 <main+0x354>)
 8000a24:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000a26:	4b6a      	ldr	r3, [pc, #424]	; (8000bd0 <main+0x354>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	4967      	ldr	r1, [pc, #412]	; (8000bcc <main+0x350>)
 8000a30:	4868      	ldr	r0, [pc, #416]	; (8000bd4 <main+0x358>)
 8000a32:	f006 f88d 	bl	8006b50 <HAL_UART_Transmit>

	  	//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

	  	  			res = jd_prepare(&jdec, in_func, work, 3100, &devid);													/* Prepare to decompress */
 8000a36:	f241 30cc 	movw	r0, #5068	; 0x13cc
 8000a3a:	4438      	add	r0, r7
 8000a3c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	f640 431c 	movw	r3, #3100	; 0xc1c
 8000a46:	f241 4248 	movw	r2, #5192	; 0x1448
 8000a4a:	443a      	add	r2, r7
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	4967      	ldr	r1, [pc, #412]	; (8000bec <main+0x370>)
 8000a50:	f002 fc54 	bl	80032fc <jd_prepare>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f241 4247 	movw	r2, #5191	; 0x1447
 8000a5a:	443a      	add	r2, r7
 8000a5c:	7013      	strb	r3, [r2, #0]
	  	  			if (res == JDR_OK)
 8000a5e:	f241 4347 	movw	r3, #5191	; 0x1447
 8000a62:	443b      	add	r3, r7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 80d0 	bne.w	8000c0c <main+0x390>
	  	  			{																					/* Ready to decompress. Image info is available here. */
	  	  				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 8000a6c:	f241 33e8 	movw	r3, #5096	; 0x13e8
 8000a70:	443b      	add	r3, r7
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f241 33ea 	movw	r3, #5098	; 0x13ea
 8000a7a:	443b      	add	r3, r7
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f241 4338 	movw	r3, #5176	; 0x1438
 8000a84:	443b      	add	r3, r7
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f241 4354 	movw	r3, #5204	; 0x1454
 8000a8e:	443b      	add	r3, r7
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	4955      	ldr	r1, [pc, #340]	; (8000bf0 <main+0x374>)
 8000a9c:	484b      	ldr	r0, [pc, #300]	; (8000bcc <main+0x350>)
 8000a9e:	f007 fa79 	bl	8007f94 <siprintf>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <main+0x354>)
 8000aa8:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <main+0x354>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	4946      	ldr	r1, [pc, #280]	; (8000bcc <main+0x350>)
 8000ab4:	4847      	ldr	r0, [pc, #284]	; (8000bd4 <main+0x358>)
 8000ab6:	f006 f84b 	bl	8006b50 <HAL_UART_Transmit>

	  	  				image_size = N_BPP  * jdec.width * jdec.height;
 8000aba:	f241 33e8 	movw	r3, #5096	; 0x13e8
 8000abe:	443b      	add	r3, r7
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f241 32ea 	movw	r2, #5098	; 0x13ea
 8000ac6:	443a      	add	r2, r7
 8000ac8:	8812      	ldrh	r2, [r2, #0]
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	f241 425c 	movw	r2, #5212	; 0x145c
 8000ad2:	443a      	add	r2, r7
 8000ad4:	6013      	str	r3, [r2, #0]
	  	  				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 8000ad6:	f241 435c 	movw	r3, #5212	; 0x145c
 8000ada:	443b      	add	r3, r7
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f007 f8b4 	bl	8007c4c <malloc>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f241 32c4 	movw	r2, #5060	; 0x13c4
 8000aea:	443a      	add	r2, r7
 8000aec:	6013      	str	r3, [r2, #0]
	  	  		        devid.wfbuf = jdec.width;
 8000aee:	f241 33e8 	movw	r3, #5096	; 0x13e8
 8000af2:	443b      	add	r3, r7
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8000afa:	443a      	add	r2, r7
 8000afc:	8013      	strh	r3, [r2, #0]

	  					Width = jdec.width;
 8000afe:	f241 33e8 	movw	r3, #5096	; 0x13e8
 8000b02:	443b      	add	r3, r7
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <main+0x378>)
 8000b0a:	601a      	str	r2, [r3, #0]
	  					Height = jdec.height;
 8000b0c:	f241 33ea 	movw	r3, #5098	; 0x13ea
 8000b10:	443b      	add	r3, r7
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <main+0x37c>)
 8000b18:	601a      	str	r2, [r3, #0]

	  	  				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 8000b1a:	4938      	ldr	r1, [pc, #224]	; (8000bfc <main+0x380>)
 8000b1c:	482b      	ldr	r0, [pc, #172]	; (8000bcc <main+0x350>)
 8000b1e:	f007 fa39 	bl	8007f94 <siprintf>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <main+0x354>)
 8000b28:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <main+0x354>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	2364      	movs	r3, #100	; 0x64
 8000b32:	4926      	ldr	r1, [pc, #152]	; (8000bcc <main+0x350>)
 8000b34:	4827      	ldr	r0, [pc, #156]	; (8000bd4 <main+0x358>)
 8000b36:	f006 f80b 	bl	8006b50 <HAL_UART_Transmit>

	  	  				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <main+0x35c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8000b44:	443b      	add	r3, r7
 8000b46:	492e      	ldr	r1, [pc, #184]	; (8000c00 <main+0x384>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe8d 	bl	8003868 <jd_decomp>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f241 4247 	movw	r2, #5191	; 0x1447
 8000b54:	443a      	add	r2, r7
 8000b56:	7013      	strb	r3, [r2, #0]
	  	  				if (res == JDR_OK) {
 8000b58:	f241 4347 	movw	r3, #5191	; 0x1447
 8000b5c:	443b      	add	r3, r7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d110      	bne.n	8000b86 <main+0x30a>
	  	  					StringLength=sprintf(txString,"Decompression - Success\r\n");
 8000b64:	4927      	ldr	r1, [pc, #156]	; (8000c04 <main+0x388>)
 8000b66:	4819      	ldr	r0, [pc, #100]	; (8000bcc <main+0x350>)
 8000b68:	f007 fa14 	bl	8007f94 <siprintf>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <main+0x354>)
 8000b72:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <main+0x354>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	4913      	ldr	r1, [pc, #76]	; (8000bcc <main+0x350>)
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <main+0x358>)
 8000b80:	f005 ffe6 	bl	8006b50 <HAL_UART_Transmit>
 8000b84:	e057      	b.n	8000c36 <main+0x3ba>
	  	  				}
	  	  				else{
	  	  					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 8000b86:	f241 4347 	movw	r3, #5191	; 0x1447
 8000b8a:	443b      	add	r3, r7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	491d      	ldr	r1, [pc, #116]	; (8000c08 <main+0x38c>)
 8000b92:	480e      	ldr	r0, [pc, #56]	; (8000bcc <main+0x350>)
 8000b94:	f007 f9fe 	bl	8007f94 <siprintf>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <main+0x354>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <main+0x354>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2364      	movs	r3, #100	; 0x64
 8000ba8:	4908      	ldr	r1, [pc, #32]	; (8000bcc <main+0x350>)
 8000baa:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <main+0x358>)
 8000bac:	f005 ffd0 	bl	8006b50 <HAL_UART_Transmit>
 8000bb0:	e041      	b.n	8000c36 <main+0x3ba>
 8000bb2:	bf00      	nop
 8000bb4:	0800907c 	.word	0x0800907c
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	00434241 	.word	0x00434241
 8000bc0:	ffffeba4 	.word	0xffffeba4
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	080090b8 	.word	0x080090b8
 8000bcc:	20000554 	.word	0x20000554
 8000bd0:	20000550 	.word	0x20000550
 8000bd4:	2000075c 	.word	0x2000075c
 8000bd8:	2000054c 	.word	0x2000054c
 8000bdc:	20000590 	.word	0x20000590
 8000be0:	20000586 	.word	0x20000586
 8000be4:	080090dc 	.word	0x080090dc
 8000be8:	08009100 	.word	0x08009100
 8000bec:	08000765 	.word	0x08000765
 8000bf0:	08009104 	.word	0x08009104
 8000bf4:	20000588 	.word	0x20000588
 8000bf8:	2000058c 	.word	0x2000058c
 8000bfc:	08009150 	.word	0x08009150
 8000c00:	080007f5 	.word	0x080007f5
 8000c04:	08009180 	.word	0x08009180
 8000c08:	0800919c 	.word	0x0800919c
	  	  				}
	  	  			}
	  	  			else{
	  	  			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 8000c0c:	f241 4347 	movw	r3, #5191	; 0x1447
 8000c10:	443b      	add	r3, r7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4915      	ldr	r1, [pc, #84]	; (8000c6c <main+0x3f0>)
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <main+0x3f4>)
 8000c1a:	f007 f9bb 	bl	8007f94 <siprintf>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <main+0x3f8>)
 8000c24:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <main+0x3f8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	4910      	ldr	r1, [pc, #64]	; (8000c70 <main+0x3f4>)
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <main+0x3fc>)
 8000c32:	f005 ff8d 	bl	8006b50 <HAL_UART_Transmit>
	  	  			}

	  	  			HAL_Delay(1000);
 8000c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3a:	f002 feed 	bl	8003a18 <HAL_Delay>
	  	  	  	if (count == 10000) {
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <main+0x400>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d102      	bne.n	8000c50 <main+0x3d4>
	  	  	  		count = 0;																									/* Reset to zero to prevent overflowing bugs */
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <main+0x400>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
	  	  	  	}
	  	      /* USER CODE END WHILE */

	  	      /* USER CODE BEGIN 3 */

	  	  		free(work);   /* Discard work area */
 8000c50:	f241 4348 	movw	r3, #5192	; 0x1448
 8000c54:	443b      	add	r3, r7
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f007 f800 	bl	8007c5c <free>
	  	  		free(devid.fbuf);
 8000c5c:	f241 33c4 	movw	r3, #5060	; 0x13c4
 8000c60:	443b      	add	r3, r7
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 fff9 	bl	8007c5c <free>
  {
 8000c6a:	e697      	b.n	800099c <main+0x120>
 8000c6c:	080091bc 	.word	0x080091bc
 8000c70:	20000554 	.word	0x20000554
 8000c74:	20000550 	.word	0x20000550
 8000c78:	2000075c 	.word	0x2000075c
 8000c7c:	20000590 	.word	0x20000590

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2234      	movs	r2, #52	; 0x34
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f006 fffa 	bl	8007c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <SystemClock_Config+0xb0>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <SystemClock_Config+0xb0>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <SystemClock_Config+0xb0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <SystemClock_Config+0xb4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <SystemClock_Config+0xb4>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <SystemClock_Config+0xb4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fdcd 	bl	800488c <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 f81e 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 f866 	bl	8004de8 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d22:	f000 f809 	bl	8000d38 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_QUADSPI_Init+0x54>)
 8000d50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d84:	f003 fcc0 	bl	8004708 <HAL_QSPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f7ff ffd3 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000594 	.word	0x20000594
 8000d9c:	a0001000 	.word	0xa0001000

08000da0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <HAL_QSPI_MspInit+0xf4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d164      	bne.n	8000e8c <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6393      	str	r3, [r2, #56]	; 0x38
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a2e      	ldr	r2, [pc, #184]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <HAL_QSPI_MspInit+0xf8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <HAL_QSPI_MspInit+0xfc>)
 8000e26:	f003 faa9 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4815      	ldr	r0, [pc, #84]	; (8000e9c <HAL_QSPI_MspInit+0xfc>)
 8000e48:	f003 fa98 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e5c:	2309      	movs	r3, #9
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_QSPI_MspInit+0x100>)
 8000e68:	f003 fa88 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e6c:	2340      	movs	r3, #64	; 0x40
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_QSPI_MspInit+0x100>)
 8000e88:	f003 fa78 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	a0001000 	.word	0xa0001000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021400 	.word	0x40021400
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_SPI1_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ebe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ec2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000eda:	2210      	movs	r2, #16
 8000edc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_SPI1_Init+0x74>)
 8000f04:	f004 fd7e 	bl	8005a04 <HAL_SPI_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f7ff ff13 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200005e0 	.word	0x200005e0
 8000f1c:	40013000 	.word	0x40013000

08000f20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f26:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <MX_SPI3_Init+0x6c>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f38:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_SPI3_Init+0x68>)
 8000f76:	f004 fd45 	bl	8005a04 <HAL_SPI_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000f80:	f7ff feda 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000644 	.word	0x20000644
 8000f8c:	40003c00 	.word	0x40003c00

08000f90 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_SPI4_Init+0x74>)
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <MX_SPI4_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_SPI4_Init+0x74>)
 8000f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_SPI4_Init+0x74>)
 8000faa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fde:	2207      	movs	r2, #7
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_SPI4_Init+0x74>)
 8000fea:	2208      	movs	r2, #8
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_SPI4_Init+0x74>)
 8000ff0:	f004 fd08 	bl	8005a04 <HAL_SPI_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f7ff fe9d 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200006a8 	.word	0x200006a8
 8001008:	40013400 	.word	0x40013400

0800100c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <HAL_SPI_MspInit+0x170>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d128      	bne.n	8001080 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_SPI_MspInit+0x174>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_SPI_MspInit+0x174>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800105e:	23e0      	movs	r3, #224	; 0xe0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106e:	2305      	movs	r3, #5
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4842      	ldr	r0, [pc, #264]	; (8001184 <HAL_SPI_MspInit+0x178>)
 800107a:	f003 f97f 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800107e:	e078      	b.n	8001172 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a40      	ldr	r2, [pc, #256]	; (8001188 <HAL_SPI_MspInit+0x17c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d146      	bne.n	8001118 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_SPI_MspInit+0x174>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a3c      	ldr	r2, [pc, #240]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a36      	ldr	r2, [pc, #216]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a30      	ldr	r2, [pc, #192]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_SPI_MspInit+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e4:	2306      	movs	r3, #6
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <HAL_SPI_MspInit+0x178>)
 80010f0:	f003 f944 	bl	800437c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001106:	2306      	movs	r3, #6
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	481e      	ldr	r0, [pc, #120]	; (800118c <HAL_SPI_MspInit+0x180>)
 8001112:	f003 f933 	bl	800437c <HAL_GPIO_Init>
}
 8001116:	e02c      	b.n	8001172 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_SPI_MspInit+0x184>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d127      	bne.n	8001172 <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_SPI_MspInit+0x174>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_SPI_MspInit+0x174>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001162:	2305      	movs	r3, #5
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <HAL_SPI_MspInit+0x188>)
 800116e:	f003 f905 	bl	800437c <HAL_GPIO_Init>
}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40013000 	.word	0x40013000
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000
 8001188:	40003c00 	.word	0x40003c00
 800118c:	40020800 	.word	0x40020800
 8001190:	40013400 	.word	0x40013400
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_MspInit+0x44>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_MspInit+0x44>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_MspInit+0x44>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_MspInit+0x44>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_MspInit+0x44>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x44>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f002 fbd0 	bl	80039d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <USART1_IRQHandler+0x10>)
 8001242:	f005 fd09 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000075c 	.word	0x2000075c

08001250 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA2_Stream5_IRQHandler+0x10>)
 8001256:	f002 fe55 	bl	8003f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000086c 	.word	0x2000086c

08001264 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
	}

return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e009      	b.n	80012c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa41 	bl	8000740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <_write+0x12>
	}
	return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f006 fc42 	bl	8007bf8 <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20080000 	.word	0x20080000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	2000070c 	.word	0x2000070c
 80013a8:	20000908 	.word	0x20000908

080013ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SystemInit+0x28>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <SystemInit+0x28>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SystemInit+0x28>)
 80013c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c6:	609a      	str	r2, [r3, #8]
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_TIM14_Init+0x40>)
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <MX_TIM14_Init+0x44>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_TIM14_Init+0x40>)
 80013e4:	2250      	movs	r2, #80	; 0x50
 80013e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_TIM14_Init+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_TIM14_Init+0x40>)
 80013f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_TIM14_Init+0x40>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_TIM14_Init+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM14_Init+0x40>)
 8001404:	f005 fa5e 	bl	80068c4 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800140e:	f7ff fc93 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000710 	.word	0x20000710
 800141c:	40002000 	.word	0x40002000

08001420 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_TIM_Base_MspInit+0x38>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_TIM_Base_MspInit+0x3c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40002000 	.word	0x40002000
 800145c:	40023800 	.word	0x40023800

08001460 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <MX_USART1_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 800146c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART1_UART_Init+0x58>)
 80014a4:	f005 fb06 	bl	8006ab4 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f7ff fc43 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000075c 	.word	0x2000075c
 80014bc:	40011000 	.word	0x40011000

080014c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <MX_USART2_UART_Init+0x5c>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART2_UART_Init+0x58>)
 8001504:	f005 fad6 	bl	8006ab4 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800150e:	f7ff fc13 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200007e4 	.word	0x200007e4
 800151c:	40004400 	.word	0x40004400

08001520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0b0      	sub	sp, #192	; 0xc0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2290      	movs	r2, #144	; 0x90
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fba1 	bl	8007c88 <memset>
  if(uartHandle->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <HAL_UART_MspInit+0x1a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d173      	bne.n	8001638 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001554:	2300      	movs	r3, #0
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fe29 	bl	80051b4 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff fbe6 	bl	8000d38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6453      	str	r3, [r2, #68]	; 0x44
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800159c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b6:	2307      	movs	r3, #7
 80015b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015c0:	4619      	mov	r1, r3
 80015c2:	4841      	ldr	r0, [pc, #260]	; (80016c8 <HAL_UART_MspInit+0x1a8>)
 80015c4:	f002 feda 	bl	800437c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015ca:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_UART_MspInit+0x1b0>)
 80015cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800160a:	4830      	ldr	r0, [pc, #192]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 800160c:	f002 fb3a 	bl	8003c84 <HAL_DMA_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001616:	f7ff fb8f 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 800161e:	675a      	str	r2, [r3, #116]	; 0x74
 8001620:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_UART_MspInit+0x1ac>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2025      	movs	r0, #37	; 0x25
 800162c:	f002 faf3 	bl	8003c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001630:	2025      	movs	r0, #37	; 0x25
 8001632:	f002 fb0c 	bl	8003c4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001636:	e03f      	b.n	80016b8 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_UART_MspInit+0x1b4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d13a      	bne.n	80016b8 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001646:	2300      	movs	r3, #0
 8001648:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fdb0 	bl	80051b4 <HAL_RCCEx_PeriphCLKConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_UART_MspInit+0x13e>
      Error_Handler();
 800165a:	f7ff fb6d 	bl	8000d38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x1a4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800168e:	230c      	movs	r3, #12
 8001690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x1a8>)
 80016b4:	f002 fe62 	bl	800437c <HAL_GPIO_Init>
}
 80016b8:	bf00      	nop
 80016ba:	37c0      	adds	r7, #192	; 0xc0
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	2000086c 	.word	0x2000086c
 80016d0:	40026488 	.word	0x40026488
 80016d4:	40004400 	.word	0x40004400

080016d8 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af02      	add	r7, sp, #8
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80016e2:	f107 020f 	add.w	r2, r7, #15
 80016e6:	1df9      	adds	r1, r7, #7
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <W25qxx_Spi+0x28>)
 80016f0:	f004 fcd1 	bl	8006096 <HAL_SPI_TransmitReceive>
	return ret;	
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200006a8 	.word	0x200006a8

08001704 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2110      	movs	r1, #16
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <W25qxx_ReadID+0x68>)
 8001720:	f002 ffd8 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8001724:	209f      	movs	r0, #159	; 0x9f
 8001726:	f7ff ffd7 	bl	80016d8 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800172a:	20a5      	movs	r0, #165	; 0xa5
 800172c:	f7ff ffd4 	bl	80016d8 <W25qxx_Spi>
 8001730:	4603      	mov	r3, r0
 8001732:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001734:	20a5      	movs	r0, #165	; 0xa5
 8001736:	f7ff ffcf 	bl	80016d8 <W25qxx_Spi>
 800173a:	4603      	mov	r3, r0
 800173c:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800173e:	20a5      	movs	r0, #165	; 0xa5
 8001740:	f7ff ffca 	bl	80016d8 <W25qxx_Spi>
 8001744:	4603      	mov	r3, r0
 8001746:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2110      	movs	r1, #16
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <W25qxx_ReadID+0x68>)
 800174e:	f002 ffc1 	bl	80046d4 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4313      	orrs	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  return Temp;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000

08001770 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2110      	movs	r1, #16
 800177a:	4816      	ldr	r0, [pc, #88]	; (80017d4 <W25qxx_ReadUniqID+0x64>)
 800177c:	f002 ffaa 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8001780:	204b      	movs	r0, #75	; 0x4b
 8001782:	f7ff ffa9 	bl	80016d8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e005      	b.n	8001798 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800178c:	20a5      	movs	r0, #165	; 0xa5
 800178e:	f7ff ffa3 	bl	80016d8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3301      	adds	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d9f6      	bls.n	800178c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	71bb      	strb	r3, [r7, #6]
 80017a2:	e00b      	b.n	80017bc <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017a4:	79bc      	ldrb	r4, [r7, #6]
 80017a6:	20a5      	movs	r0, #165	; 0xa5
 80017a8:	f7ff ff96 	bl	80016d8 <W25qxx_Spi>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <W25qxx_ReadUniqID+0x68>)
 80017b2:	4423      	add	r3, r4
 80017b4:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	3301      	adds	r3, #1
 80017ba:	71bb      	strb	r3, [r7, #6]
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9f0      	bls.n	80017a4 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2110      	movs	r1, #16
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <W25qxx_ReadUniqID+0x64>)
 80017c8:	f002 ff84 	bl	80046d4 <HAL_GPIO_WritePin>
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	200008cc 	.word	0x200008cc

080017dc <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2110      	movs	r1, #16
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <W25qxx_WriteEnable+0x28>)
 80017e6:	f002 ff75 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80017ea:	2006      	movs	r0, #6
 80017ec:	f7ff ff74 	bl	80016d8 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2110      	movs	r1, #16
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <W25qxx_WriteEnable+0x28>)
 80017f6:	f002 ff6d 	bl	80046d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f002 f90c 	bl	8003a18 <HAL_Delay>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40021000 	.word	0x40021000

08001808 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2110      	movs	r1, #16
 800181a:	481c      	ldr	r0, [pc, #112]	; (800188c <W25qxx_ReadStatusRegister+0x84>)
 800181c:	f002 ff5a 	bl	80046d4 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10c      	bne.n	8001840 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001826:	2005      	movs	r0, #5
 8001828:	f7ff ff56 	bl	80016d8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800182c:	20a5      	movs	r0, #165	; 0xa5
 800182e:	f7ff ff53 	bl	80016d8 <W25qxx_Spi>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <W25qxx_ReadStatusRegister+0x88>)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800183e:	e01b      	b.n	8001878 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d10c      	bne.n	8001860 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001846:	2035      	movs	r0, #53	; 0x35
 8001848:	f7ff ff46 	bl	80016d8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800184c:	20a5      	movs	r0, #165	; 0xa5
 800184e:	f7ff ff43 	bl	80016d8 <W25qxx_Spi>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <W25qxx_ReadStatusRegister+0x88>)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800185e:	e00b      	b.n	8001878 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001860:	2015      	movs	r0, #21
 8001862:	f7ff ff39 	bl	80016d8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001866:	20a5      	movs	r0, #165	; 0xa5
 8001868:	f7ff ff36 	bl	80016d8 <W25qxx_Spi>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <W25qxx_ReadStatusRegister+0x88>)
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2110      	movs	r1, #16
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <W25qxx_ReadStatusRegister+0x84>)
 800187e:	f002 ff29 	bl	80046d4 <HAL_GPIO_WritePin>
	return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	200008cc 	.word	0x200008cc

08001894 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001898:	2001      	movs	r0, #1
 800189a:	f002 f8bd 	bl	8003a18 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2110      	movs	r1, #16
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <W25qxx_WaitForWriteEnd+0x4c>)
 80018a4:	f002 ff16 	bl	80046d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80018a8:	2005      	movs	r0, #5
 80018aa:	f7ff ff15 	bl	80016d8 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018ae:	20a5      	movs	r0, #165	; 0xa5
 80018b0:	f7ff ff12 	bl	80016d8 <W25qxx_Spi>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <W25qxx_WaitForWriteEnd+0x50>)
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f002 f8aa 	bl	8003a18 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <W25qxx_WaitForWriteEnd+0x50>)
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2110      	movs	r1, #16
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <W25qxx_WaitForWriteEnd+0x4c>)
 80018d8:	f002 fefc 	bl	80046d4 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	200008cc 	.word	0x200008cc

080018e8 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <W25qxx_Init+0x230>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80018f6:	e002      	b.n	80018fe <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f002 f88d 	bl	8003a18 <HAL_Delay>
	while(HAL_GetTick()<100)
 80018fe:	f002 f87f 	bl	8003a00 <HAL_GetTick>
 8001902:	4603      	mov	r3, r0
 8001904:	2b63      	cmp	r3, #99	; 0x63
 8001906:	d9f7      	bls.n	80018f8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2110      	movs	r1, #16
 800190c:	4883      	ldr	r0, [pc, #524]	; (8001b1c <W25qxx_Init+0x234>)
 800190e:	f002 fee1 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f002 f880 	bl	8003a18 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 8001918:	4881      	ldr	r0, [pc, #516]	; (8001b20 <W25qxx_Init+0x238>)
 800191a:	f006 fb23 	bl	8007f64 <puts>
	#endif
	id=W25qxx_ReadID();
 800191e:	f7ff fef1 	bl	8001704 <W25qxx_ReadID>
 8001922:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	487f      	ldr	r0, [pc, #508]	; (8001b24 <W25qxx_Init+0x23c>)
 8001928:	f006 fa96 	bl	8007e58 <iprintf>
	#endif
	switch(id&0x0000FFFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b7d      	ldr	r3, [pc, #500]	; (8001b28 <W25qxx_Init+0x240>)
 8001932:	4413      	add	r3, r2
 8001934:	2b09      	cmp	r3, #9
 8001936:	d87e      	bhi.n	8001a36 <W25qxx_Init+0x14e>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <W25qxx_Init+0x58>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001a23 	.word	0x08001a23
 8001944:	08001a0f 	.word	0x08001a0f
 8001948:	080019fb 	.word	0x080019fb
 800194c:	080019e7 	.word	0x080019e7
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019bf 	.word	0x080019bf
 8001958:	080019ab 	.word	0x080019ab
 800195c:	08001995 	.word	0x08001995
 8001960:	0800197f 	.word	0x0800197f
 8001964:	08001969 	.word	0x08001969
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <W25qxx_Init+0x230>)
 800196a:	220a      	movs	r2, #10
 800196c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800196e:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <W25qxx_Init+0x230>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 8001976:	486d      	ldr	r0, [pc, #436]	; (8001b2c <W25qxx_Init+0x244>)
 8001978:	f006 faf4 	bl	8007f64 <puts>
			#endif
		break;
 800197c:	e064      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <W25qxx_Init+0x230>)
 8001980:	2209      	movs	r2, #9
 8001982:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <W25qxx_Init+0x230>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 800198c:	4868      	ldr	r0, [pc, #416]	; (8001b30 <W25qxx_Init+0x248>)
 800198e:	f006 fae9 	bl	8007f64 <puts>
			#endif
		break;
 8001992:	e059      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8001994:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <W25qxx_Init+0x230>)
 8001996:	2208      	movs	r2, #8
 8001998:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <W25qxx_Init+0x230>)
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 80019a2:	4864      	ldr	r0, [pc, #400]	; (8001b34 <W25qxx_Init+0x24c>)
 80019a4:	f006 fade 	bl	8007f64 <puts>
			#endif
		break;
 80019a8:	e04e      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <W25qxx_Init+0x230>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <W25qxx_Init+0x230>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 80019b6:	4860      	ldr	r0, [pc, #384]	; (8001b38 <W25qxx_Init+0x250>)
 80019b8:	f006 fad4 	bl	8007f64 <puts>
			#endif
		break;
 80019bc:	e044      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80019be:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <W25qxx_Init+0x230>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80019c4:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <W25qxx_Init+0x230>)
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 80019ca:	485c      	ldr	r0, [pc, #368]	; (8001b3c <W25qxx_Init+0x254>)
 80019cc:	f006 faca 	bl	8007f64 <puts>
			#endif
		break;
 80019d0:	e03a      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <W25qxx_Init+0x230>)
 80019d4:	2205      	movs	r2, #5
 80019d6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <W25qxx_Init+0x230>)
 80019da:	2220      	movs	r2, #32
 80019dc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 80019de:	4858      	ldr	r0, [pc, #352]	; (8001b40 <W25qxx_Init+0x258>)
 80019e0:	f006 fac0 	bl	8007f64 <puts>
			#endif
		break;
 80019e4:	e030      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <W25qxx_Init+0x230>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80019ec:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <W25qxx_Init+0x230>)
 80019ee:	2210      	movs	r2, #16
 80019f0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 80019f2:	4854      	ldr	r0, [pc, #336]	; (8001b44 <W25qxx_Init+0x25c>)
 80019f4:	f006 fab6 	bl	8007f64 <puts>
			#endif
		break;
 80019f8:	e026      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <W25qxx_Init+0x230>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001a00:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <W25qxx_Init+0x230>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 8001a06:	4850      	ldr	r0, [pc, #320]	; (8001b48 <W25qxx_Init+0x260>)
 8001a08:	f006 faac 	bl	8007f64 <puts>
			#endif
		break;
 8001a0c:	e01c      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <W25qxx_Init+0x230>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <W25qxx_Init+0x230>)
 8001a16:	2204      	movs	r2, #4
 8001a18:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 8001a1a:	484c      	ldr	r0, [pc, #304]	; (8001b4c <W25qxx_Init+0x264>)
 8001a1c:	f006 faa2 	bl	8007f64 <puts>
			#endif
		break;
 8001a20:	e012      	b.n	8001a48 <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <W25qxx_Init+0x230>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001a28:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <W25qxx_Init+0x230>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 8001a2e:	4848      	ldr	r0, [pc, #288]	; (8001b50 <W25qxx_Init+0x268>)
 8001a30:	f006 fa98 	bl	8007f64 <puts>
			#endif
		break;
 8001a34:	e008      	b.n	8001a48 <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8001a36:	4847      	ldr	r0, [pc, #284]	; (8001b54 <W25qxx_Init+0x26c>)
 8001a38:	f006 fa94 	bl	8007f64 <puts>
				#endif
			w25qxx.Lock=0;	
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <W25qxx_Init+0x230>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e063      	b.n	8001b10 <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <W25qxx_Init+0x230>)
 8001a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <W25qxx_Init+0x230>)
 8001a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a56:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <W25qxx_Init+0x230>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <W25qxx_Init+0x230>)
 8001a60:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <W25qxx_Init+0x230>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a2c      	ldr	r2, [pc, #176]	; (8001b18 <W25qxx_Init+0x230>)
 8001a68:	6912      	ldr	r2, [r2, #16]
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <W25qxx_Init+0x230>)
 8001a70:	8952      	ldrh	r2, [r2, #10]
 8001a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a76:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <W25qxx_Init+0x230>)
 8001a78:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <W25qxx_Init+0x230>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4a25      	ldr	r2, [pc, #148]	; (8001b18 <W25qxx_Init+0x230>)
 8001a82:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <W25qxx_Init+0x230>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <W25qxx_Init+0x230>)
 8001a8a:	6912      	ldr	r2, [r2, #16]
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	0a9b      	lsrs	r3, r3, #10
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <W25qxx_Init+0x230>)
 8001a94:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001a96:	f7ff fe6b 	bl	8001770 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff feb4 	bl	8001808 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff feb1 	bl	8001808 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f7ff feae 	bl	8001808 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <W25qxx_Init+0x230>)
 8001aae:	895b      	ldrh	r3, [r3, #10]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4829      	ldr	r0, [pc, #164]	; (8001b58 <W25qxx_Init+0x270>)
 8001ab4:	f006 f9d0 	bl	8007e58 <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <W25qxx_Init+0x230>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4827      	ldr	r0, [pc, #156]	; (8001b5c <W25qxx_Init+0x274>)
 8001ac0:	f006 f9ca 	bl	8007e58 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <W25qxx_Init+0x230>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4825      	ldr	r0, [pc, #148]	; (8001b60 <W25qxx_Init+0x278>)
 8001acc:	f006 f9c4 	bl	8007e58 <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <W25qxx_Init+0x230>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <W25qxx_Init+0x27c>)
 8001ad8:	f006 f9be 	bl	8007e58 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <W25qxx_Init+0x230>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <W25qxx_Init+0x280>)
 8001ae4:	f006 f9b8 	bl	8007e58 <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <W25qxx_Init+0x230>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4619      	mov	r1, r3
 8001aee:	481f      	ldr	r0, [pc, #124]	; (8001b6c <W25qxx_Init+0x284>)
 8001af0:	f006 f9b2 	bl	8007e58 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <W25qxx_Init+0x230>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4619      	mov	r1, r3
 8001afa:	481d      	ldr	r0, [pc, #116]	; (8001b70 <W25qxx_Init+0x288>)
 8001afc:	f006 f9ac 	bl	8007e58 <iprintf>
	printf("w25qxx Init Done\r\n");
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <W25qxx_Init+0x28c>)
 8001b02:	f006 fa2f 	bl	8007f64 <puts>
	#endif
	w25qxx.Lock=0;	
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <W25qxx_Init+0x230>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001b0e:	2301      	movs	r3, #1
}	
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200008cc 	.word	0x200008cc
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	080093d4 	.word	0x080093d4
 8001b24:	080093ec 	.word	0x080093ec
 8001b28:	ffffbfef 	.word	0xffffbfef
 8001b2c:	08009400 	.word	0x08009400
 8001b30:	08009418 	.word	0x08009418
 8001b34:	08009430 	.word	0x08009430
 8001b38:	08009448 	.word	0x08009448
 8001b3c:	08009460 	.word	0x08009460
 8001b40:	08009478 	.word	0x08009478
 8001b44:	08009490 	.word	0x08009490
 8001b48:	080094a8 	.word	0x080094a8
 8001b4c:	080094c0 	.word	0x080094c0
 8001b50:	080094d8 	.word	0x080094d8
 8001b54:	080094f0 	.word	0x080094f0
 8001b58:	08009504 	.word	0x08009504
 8001b5c:	08009524 	.word	0x08009524
 8001b60:	0800953c 	.word	0x0800953c
 8001b64:	0800955c 	.word	0x0800955c
 8001b68:	08009578 	.word	0x08009578
 8001b6c:	08009598 	.word	0x08009598
 8001b70:	080095b4 	.word	0x080095b4
 8001b74:	080095d4 	.word	0x080095d4

08001b78 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8001b80:	e002      	b.n	8001b88 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f001 ff48 	bl	8003a18 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <W25qxx_EraseBlock+0xd0>)
 8001b8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d0f7      	beq.n	8001b82 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <W25qxx_EraseBlock+0xd0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	482b      	ldr	r0, [pc, #172]	; (8001c4c <W25qxx_EraseBlock+0xd4>)
 8001b9e:	f006 f95b 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	f001 ff38 	bl	8003a18 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8001ba8:	f001 ff2a 	bl	8003a00 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 8001bae:	f7ff fe71 	bl	8001894 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <W25qxx_EraseBlock+0xd0>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8001bc0:	f7ff fe0c 	bl	80017dc <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4821      	ldr	r0, [pc, #132]	; (8001c50 <W25qxx_EraseBlock+0xd8>)
 8001bca:	f002 fd83 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8001bce:	20d8      	movs	r0, #216	; 0xd8
 8001bd0:	f7ff fd82 	bl	80016d8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <W25qxx_EraseBlock+0xd0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d905      	bls.n	8001be8 <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0e1b      	lsrs	r3, r3, #24
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fd78 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fd72 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fd6c 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fd67 	bl	80016d8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	4810      	ldr	r0, [pc, #64]	; (8001c50 <W25qxx_EraseBlock+0xd8>)
 8001c10:	f002 fd60 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001c14:	f7ff fe3e 	bl	8001894 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 8001c18:	f001 fef2 	bl	8003a00 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <W25qxx_EraseBlock+0xdc>)
 8001c26:	f006 f917 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001c2a:	2064      	movs	r0, #100	; 0x64
 8001c2c:	f001 fef4 	bl	8003a18 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f001 fef1 	bl	8003a18 <HAL_Delay>
	w25qxx.Lock=0;
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <W25qxx_EraseBlock+0xd0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200008cc 	.word	0x200008cc
 8001c4c:	08009678 	.word	0x08009678
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08009698 	.word	0x08009698

08001c58 <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <W25qxx_BlockToPage+0x28>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <W25qxx_BlockToPage+0x28>)
 8001c6c:	8952      	ldrh	r2, [r2, #10]
 8001c6e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200008cc 	.word	0x200008cc

08001c84 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001c92:	e002      	b.n	8001c9a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f001 febf 	bl	8003a18 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001c9a:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001c9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0f7      	beq.n	8001c94 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8001ca4:	4b52      	ldr	r3, [pc, #328]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001cb4:	8952      	ldrh	r2, [r2, #10]
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d802      	bhi.n	8001cc0 <W25qxx_WritePage+0x3c>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001cc2:	895b      	ldrh	r3, [r3, #10]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001cd4:	8952      	ldrh	r2, [r2, #10]
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d905      	bls.n	8001ce6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001cda:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001cdc:	895b      	ldrh	r3, [r3, #10]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	4841      	ldr	r0, [pc, #260]	; (8001df4 <W25qxx_WritePage+0x170>)
 8001cee:	f006 f8b3 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	f001 fe90 	bl	8003a18 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 8001cf8:	f001 fe82 	bl	8003a00 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 8001cfe:	f7ff fdc9 	bl	8001894 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001d02:	f7ff fd6b 	bl	80017dc <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2110      	movs	r1, #16
 8001d0a:	483b      	ldr	r0, [pc, #236]	; (8001df8 <W25qxx_WritePage+0x174>)
 8001d0c:	f002 fce2 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff fce1 	bl	80016d8 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001d18:	895b      	ldrh	r3, [r3, #10]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d905      	bls.n	8001d3c <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	0e1b      	lsrs	r3, r3, #24
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fcce 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fcc8 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fcc2 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fcbd 	bl	80016d8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	4825      	ldr	r0, [pc, #148]	; (8001dfc <W25qxx_WritePage+0x178>)
 8001d68:	f003 fef7 	bl	8005b5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <W25qxx_WritePage+0x174>)
 8001d72:	f002 fcaf 	bl	80046d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001d76:	f7ff fd8d 	bl	8001894 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8001d7a:	f001 fe41 	bl	8003a00 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e018      	b.n	8001dbe <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d108      	bne.n	8001da8 <W25qxx_WritePage+0x124>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d905      	bls.n	8001da8 <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <W25qxx_WritePage+0x17c>)
 8001d9e:	f006 f8e1 	bl	8007f64 <puts>
			W25qxx_Delay(10);			
 8001da2:	200a      	movs	r0, #10
 8001da4:	f001 fe38 	bl	8003a18 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <W25qxx_WritePage+0x180>)
 8001db4:	f006 f850 	bl	8007e58 <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3e2      	bcc.n	8001d8c <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <W25qxx_WritePage+0x17c>)
 8001dc8:	f006 f8cc 	bl	8007f64 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	480e      	ldr	r0, [pc, #56]	; (8001e08 <W25qxx_WritePage+0x184>)
 8001dd0:	f006 f842 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	f001 fe1f 	bl	8003a18 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f001 fe1c 	bl	8003a18 <HAL_Delay>
	w25qxx.Lock=0;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <W25qxx_WritePage+0x16c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200008cc 	.word	0x200008cc
 8001df4:	080098b4 	.word	0x080098b4
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	200006a8 	.word	0x200006a8
 8001e00:	080098f0 	.word	0x080098f0
 8001e04:	080098f4 	.word	0x080098f4
 8001e08:	080098fc 	.word	0x080098fc

08001e0c <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d802      	bhi.n	8001e2a <W25qxx_WriteBlock+0x1e>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	4830      	ldr	r0, [pc, #192]	; (8001ef8 <W25qxx_WriteBlock+0xec>)
 8001e38:	f006 f80e 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001e3c:	2064      	movs	r0, #100	; 0x64
 8001e3e:	f001 fdeb 	bl	8003a18 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d306      	bcc.n	8001e5a <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 8001e4c:	482b      	ldr	r0, [pc, #172]	; (8001efc <W25qxx_WriteBlock+0xf0>)
 8001e4e:	f006 f889 	bl	8007f64 <puts>
		W25qxx_Delay(100);
 8001e52:	2064      	movs	r0, #100	; 0x64
 8001e54:	f001 fde0 	bl	8003a18 <HAL_Delay>
		#endif	
		return;
 8001e58:	e048      	b.n	8001eec <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	441a      	add	r2, r3
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d905      	bls.n	8001e74 <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	e001      	b.n	8001e78 <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f7ff feed 	bl	8001c58 <W25qxx_BlockToPage>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e82:	895b      	ldrh	r3, [r3, #10]
 8001e84:	4619      	mov	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001e92:	895b      	ldrh	r3, [r3, #10]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e9c:	fb01 f202 	mul.w	r2, r1, r2
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	69f9      	ldr	r1, [r7, #28]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff feea 	bl	8001c84 <W25qxx_WritePage>
		StartPage++;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001eb8:	895b      	ldrh	r3, [r3, #10]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1a9a      	subs	r2, r3, r2
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <W25qxx_WriteBlock+0xe8>)
 8001ec8:	895b      	ldrh	r3, [r3, #10]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	dce1      	bgt.n	8001ea4 <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <W25qxx_WriteBlock+0xf4>)
 8001ee2:	f006 f83f 	bl	8007f64 <puts>
	W25qxx_Delay(100);
 8001ee6:	2064      	movs	r0, #100	; 0x64
 8001ee8:	f001 fd96 	bl	8003a18 <HAL_Delay>
	#endif	
}
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200008cc 	.word	0x200008cc
 8001ef8:	0800999c 	.word	0x0800999c
 8001efc:	080099dc 	.word	0x080099dc
 8001f00:	080099fc 	.word	0x080099fc

08001f04 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001f10:	e002      	b.n	8001f18 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f001 fd80 	bl	8003a18 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <W25qxx_ReadBytes+0x114>)
 8001f1a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d0f7      	beq.n	8001f12 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <W25qxx_ReadBytes+0x114>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 8001f2a:	f001 fd69 	bl	8003a00 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <W25qxx_ReadBytes+0x118>)
 8001f36:	f005 ff8f 	bl	8007e58 <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4838      	ldr	r0, [pc, #224]	; (8002020 <W25qxx_ReadBytes+0x11c>)
 8001f40:	f002 fbc8 	bl	80046d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001f44:	200b      	movs	r0, #11
 8001f46:	f7ff fbc7 	bl	80016d8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <W25qxx_ReadBytes+0x114>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d905      	bls.n	8001f5e <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fbbd 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fbb7 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fbb1 	bl	80016d8 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fbac 	bl	80016d8 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fba9 	bl	80016d8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	4824      	ldr	r0, [pc, #144]	; (8002024 <W25qxx_ReadBytes+0x120>)
 8001f92:	f003 ff50 	bl	8005e36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4821      	ldr	r0, [pc, #132]	; (8002020 <W25qxx_ReadBytes+0x11c>)
 8001f9c:	f002 fb9a 	bl	80046d4 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8001fa0:	f001 fd2e 	bl	8003a00 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e018      	b.n	8001fe4 <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <W25qxx_ReadBytes+0xca>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d905      	bls.n	8001fce <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <W25qxx_ReadBytes+0x124>)
 8001fc4:	f005 ffce 	bl	8007f64 <puts>
			W25qxx_Delay(10);
 8001fc8:	200a      	movs	r0, #10
 8001fca:	f001 fd25 	bl	8003a18 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4814      	ldr	r0, [pc, #80]	; (800202c <W25qxx_ReadBytes+0x128>)
 8001fda:	f005 ff3d 	bl	8007e58 <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3e2      	bcc.n	8001fb2 <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 8001fec:	480e      	ldr	r0, [pc, #56]	; (8002028 <W25qxx_ReadBytes+0x124>)
 8001fee:	f005 ffb9 	bl	8007f64 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	480e      	ldr	r0, [pc, #56]	; (8002030 <W25qxx_ReadBytes+0x12c>)
 8001ff6:	f005 ff2f 	bl	8007e58 <iprintf>
	W25qxx_Delay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f001 fd0c 	bl	8003a18 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8002000:	2001      	movs	r0, #1
 8002002:	f001 fd09 	bl	8003a18 <HAL_Delay>
	w25qxx.Lock=0;
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <W25qxx_ReadBytes+0x114>)
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200008cc 	.word	0x200008cc
 800201c:	08009a70 	.word	0x08009a70
 8002020:	40021000 	.word	0x40021000
 8002024:	200006a8 	.word	0x200006a8
 8002028:	080098f0 	.word	0x080098f0
 800202c:	080098f4 	.word	0x080098f4
 8002030:	08009aa8 	.word	0x08009aa8

08002034 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopFillZerobss+0x12>
  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  movs  r1, #0
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopFillZerobss+0x1a>)
  b  LoopCopyDataInit
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopFillZerobss+0x1e>)

 800203e:	2300      	movs	r3, #0
CopyDataInit:
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:
  ldr  r3, =_sidata
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
 8002042:	58d4      	ldr	r4, [r2, r3]
  adds  r1, r1, #4
 8002044:	50c4      	str	r4, [r0, r3]
    
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr  r0, =_sdata
  ldr  r3, =_edata
 8002048:	18c4      	adds	r4, r0, r3
  adds  r2, r0, r1
 800204a:	428c      	cmp	r4, r1
  cmp  r2, r3
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  bcc  CopyDataInit
  ldr  r2, =_sbss
  b  LoopFillZerobss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopFillZerobss+0x22>)
/* Zero fill the bss segment. */  
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopFillZerobss+0x26>)
FillZerobss:
 8002052:	2300      	movs	r3, #0
  movs  r3, #0
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:
  str  r3, [r2], #4
    
LoopFillZerobss:
 8002056:	6013      	str	r3, [r2, #0]
  ldr  r3, = _ebss
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:
  cmp  r2, r3
  bcc  FillZerobss

 800205a:	42a2      	cmp	r2, r4
/* Call the clock system initialization function.*/
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>
  bl  SystemInit   
/* Call static constructors */
    bl __libc_init_array
 800205e:	f7ff f9a5 	bl	80013ac <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8002062:	f005 fdcf 	bl	8007c04 <__libc_init_array>
  bx  lr    
.size  Reset_Handler, .-Reset_Handler
 8002066:	f7fe fc09 	bl	800087c <main>

 800206a:	4770      	bx	lr
Reset_Handler:  
 800206c:	20080000 	.word	0x20080000
/* Copy the data segment initializers from flash to SRAM */  
 8002070:	20000000 	.word	0x20000000
  movs  r1, #0
 8002074:	20000530 	.word	0x20000530
  b  LoopCopyDataInit
 8002078:	0800a1a8 	.word	0x0800a1a8
  b  LoopFillZerobss
 800207c:	20000530 	.word	0x20000530
/* Zero fill the bss segment. */  
 8002080:	20000908 	.word	0x20000908

08002084 <ADC_IRQHandler>:
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  .size  Default_Handler, .-Default_Handler
/******************************************************************************
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>

08002086 <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	3303      	adds	r3, #3
 800209a:	b29b      	uxth	r3, r3
 800209c:	f023 0303 	bic.w	r3, r3, #3
 80020a0:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d810      	bhi.n	80020d0 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c4:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	441a      	add	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 80020ee:	e047      	b.n	8002180 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d801      	bhi.n	80020fa <create_qt_tbl+0x1a>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e046      	b.n	8002188 <create_qt_tbl+0xa8>
		ndata -= 65;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	3b41      	subs	r3, #65	; 0x41
 80020fe:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 800210a:	7f7b      	ldrb	r3, [r7, #29]
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <create_qt_tbl+0x38>
 8002114:	2306      	movs	r3, #6
 8002116:	e037      	b.n	8002188 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 8002118:	7f7b      	ldrb	r3, [r7, #29]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 8002122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7ff ffad 	bl	8002086 <alloc_pool>
 800212c:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <create_qt_tbl+0x58>
 8002134:	2303      	movs	r3, #3
 8002136:	e027      	b.n	8002188 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 8002138:	8bfa      	ldrh	r2, [r7, #30]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3214      	adds	r2, #20
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002144:	2300      	movs	r3, #0
 8002146:	83fb      	strh	r3, [r7, #30]
 8002148:	e017      	b.n	800217a <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 800214a:	8bfb      	ldrh	r3, [r7, #30]
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <create_qt_tbl+0xb0>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	60ba      	str	r2, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <create_qt_tbl+0xb4>)
 8002160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002164:	fb03 f101 	mul.w	r1, r3, r1
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	460a      	mov	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002174:	8bfb      	ldrh	r3, [r7, #30]
 8002176:	3301      	adds	r3, #1
 8002178:	83fb      	strh	r3, [r7, #30]
 800217a:	8bfb      	ldrh	r3, [r7, #30]
 800217c:	2b3f      	cmp	r3, #63	; 0x3f
 800217e:	d9e4      	bls.n	800214a <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1b4      	bne.n	80020f0 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	08009c38 	.word	0x08009c38
 8002194:	08009c78 	.word	0x08009c78

08002198 <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 80021a6:	e0c3      	b.n	8002330 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d801      	bhi.n	80021b2 <create_huffman_tbl+0x1a>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e0c3      	b.n	800233a <create_huffman_tbl+0x1a2>
		ndata -= 17;
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	3b11      	subs	r3, #17
 80021b6:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 80021c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021c8:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <create_huffman_tbl+0x3c>
 80021d0:	2306      	movs	r3, #6
 80021d2:	e0b2      	b.n	800233a <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 80021d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	83fb      	strh	r3, [r7, #30]
 80021de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 80021ea:	2110      	movs	r1, #16
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ff4a 	bl	8002086 <alloc_pool>
 80021f2:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <create_huffman_tbl+0x66>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e09d      	b.n	800233a <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 80021fe:	8bb9      	ldrh	r1, [r7, #28]
 8002200:	8bfa      	ldrh	r2, [r7, #30]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0049      	lsls	r1, r1, #1
 8002206:	440a      	add	r2, r1
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002210:	2300      	movs	r3, #0
 8002212:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002216:	853b      	strh	r3, [r7, #40]	; 0x28
 8002218:	e00f      	b.n	800223a <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	1c53      	adds	r3, r2, #1
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	440b      	add	r3, r1
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b29a      	uxth	r2, r3
 800222e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002230:	4413      	add	r3, r2
 8002232:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002236:	3301      	adds	r3, #1
 8002238:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800223a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d9ec      	bls.n	800221a <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002240:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff ff1c 	bl	8002086 <alloc_pool>
 800224e:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <create_huffman_tbl+0xc2>
 8002256:	2303      	movs	r3, #3
 8002258:	e06f      	b.n	800233a <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 800225a:	8bb9      	ldrh	r1, [r7, #28]
 800225c:	8bfa      	ldrh	r2, [r7, #30]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0049      	lsls	r1, r1, #1
 8002262:	440a      	add	r2, r1
 8002264:	320c      	adds	r2, #12
 8002266:	6979      	ldr	r1, [r7, #20]
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002270:	2300      	movs	r3, #0
 8002272:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002274:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002276:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002278:	e01a      	b.n	80022b0 <create_huffman_tbl+0x118>
			b = pb[i];
 800227a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002284:	e009      	b.n	800229a <create_huffman_tbl+0x102>
 8002286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	847a      	strh	r2, [r7, #34]	; 0x22
 800228c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800228e:	1c51      	adds	r1, r2, #1
 8002290:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002292:	0052      	lsls	r2, r2, #1
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	440a      	add	r2, r1
 8002298:	8013      	strh	r3, [r2, #0]
 800229a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	857a      	strh	r2, [r7, #42]	; 0x2a
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <create_huffman_tbl+0xee>
			hc <<= 1;
 80022a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 80022aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022ac:	3301      	adds	r3, #1
 80022ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80022b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	d9e1      	bls.n	800227a <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d201      	bcs.n	80022c2 <create_huffman_tbl+0x12a>
 80022be:	2306      	movs	r3, #6
 80022c0:	e03b      	b.n	800233a <create_huffman_tbl+0x1a2>
		ndata -= np;
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 80022ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022cc:	4619      	mov	r1, r3
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fed9 	bl	8002086 <alloc_pool>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <create_huffman_tbl+0x148>
 80022dc:	2303      	movs	r3, #3
 80022de:	e02c      	b.n	800233a <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 80022e0:	8bb9      	ldrh	r1, [r7, #28]
 80022e2:	8bfa      	ldrh	r2, [r7, #30]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0049      	lsls	r1, r1, #1
 80022e8:	440a      	add	r2, r1
 80022ea:	3210      	adds	r2, #16
 80022ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80022f2:	2300      	movs	r3, #0
 80022f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80022f6:	e017      	b.n	8002328 <create_huffman_tbl+0x190>
			d = *data++;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 8002304:	8bfb      	ldrh	r3, [r7, #30]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <create_huffman_tbl+0x17e>
 800230a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800230e:	2b0b      	cmp	r3, #11
 8002310:	d901      	bls.n	8002316 <create_huffman_tbl+0x17e>
 8002312:	2306      	movs	r3, #6
 8002314:	e011      	b.n	800233a <create_huffman_tbl+0x1a2>
			*pd++ = d;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	627a      	str	r2, [r7, #36]	; 0x24
 800231c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002320:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8002322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002324:	3301      	adds	r3, #1
 8002326:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002328:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800232a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800232c:	429a      	cmp	r2, r3
 800232e:	d3e3      	bcc.n	80022f8 <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f af38 	bne.w	80021a8 <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3730      	adds	r7, #48	; 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7b1b      	ldrb	r3, [r3, #12]
 8002350:	75fb      	strb	r3, [r7, #23]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	81fb      	strh	r3, [r7, #14]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	75bb      	strb	r3, [r7, #22]
 8002364:	2300      	movs	r3, #0
 8002366:	817b      	strh	r3, [r7, #10]
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d137      	bne.n	80023e2 <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	6939      	ldr	r1, [r7, #16]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	4603      	mov	r3, r0
 800238e:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <bitext+0x60>
 8002396:	f06f 0301 	mvn.w	r3, #1
 800239a:	e041      	b.n	8002420 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	3301      	adds	r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 80023a8:	897b      	ldrh	r3, [r7, #10]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00e      	beq.n	80023cc <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 80023ae:	2300      	movs	r3, #0
 80023b0:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <bitext+0x7e>
 80023ba:	f06f 0305 	mvn.w	r3, #5
 80023be:	e02f      	b.n	8002420 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 80023c0:	23ff      	movs	r3, #255	; 0xff
 80023c2:	75bb      	strb	r3, [r7, #22]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	7dba      	ldrb	r2, [r7, #22]
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e008      	b.n	80023de <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 80023d2:	7dbb      	ldrb	r3, [r7, #22]
 80023d4:	2bff      	cmp	r3, #255	; 0xff
 80023d6:	d102      	bne.n	80023de <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 80023d8:	2301      	movs	r3, #1
 80023da:	817b      	strh	r3, [r7, #10]
 80023dc:	e013      	b.n	8002406 <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 80023e2:	89bb      	ldrh	r3, [r7, #12]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 80023e8:	7dba      	ldrb	r2, [r7, #22]
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <bitext+0xb8>
 80023f4:	89bb      	ldrh	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1af      	bne.n	800236c <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7dfa      	ldrb	r2, [r7, #23]
 8002410:	731a      	strb	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	89fa      	ldrh	r2, [r7, #14]
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]

	return (int)v;
 800241e:	89bb      	ldrh	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	7b1b      	ldrb	r3, [r3, #12]
 800243a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	83fb      	strh	r3, [r7, #30]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002452:	2300      	movs	r3, #0
 8002454:	837b      	strh	r3, [r7, #26]
 8002456:	8b7b      	ldrh	r3, [r7, #26]
 8002458:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 800245a:	2310      	movs	r3, #16
 800245c:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d13c      	bne.n	80024e0 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 8002466:	8bfb      	ldrh	r3, [r7, #30]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	4798      	blx	r3
 8002480:	4603      	mov	r3, r0
 8002482:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002484:	8bfb      	ldrh	r3, [r7, #30]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <huffext+0x6e>
 800248a:	f06f 0301 	mvn.w	r3, #1
 800248e:	e066      	b.n	800255e <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	3301      	adds	r3, #1
 8002494:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 8002496:	8bfb      	ldrh	r3, [r7, #30]
 8002498:	3b01      	subs	r3, #1
 800249a:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 800249c:	8b7b      	ldrh	r3, [r7, #26]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 80024a2:	2300      	movs	r3, #0
 80024a4:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <huffext+0x8c>
 80024ae:	f06f 0305 	mvn.w	r3, #5
 80024b2:	e054      	b.n	800255e <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 80024b4:	23ff      	movs	r3, #255	; 0xff
 80024b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e00a      	b.n	80024da <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 80024cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024d0:	2bff      	cmp	r3, #255	; 0xff
 80024d2:	d102      	bne.n	80024da <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 80024d4:	2301      	movs	r3, #1
 80024d6:	837b      	strh	r3, [r7, #26]
 80024d8:	e03c      	b.n	8002554 <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 80024e0:	8bbb      	ldrh	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 80024e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ee:	4013      	ands	r3, r2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <huffext+0xd4>
 80024f6:	8bbb      	ldrh	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 80024fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	82fb      	strh	r3, [r7, #22]
 8002510:	e01a      	b.n	8002548 <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1c9a      	adds	r2, r3, #2
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	8bba      	ldrh	r2, [r7, #28]
 800251c:	429a      	cmp	r2, r3
 800251e:	d10d      	bne.n	800253c <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002526:	731a      	strb	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8bfa      	ldrh	r2, [r7, #30]
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b21b      	sxth	r3, r3
 800253a:	e010      	b.n	800255e <huffext+0x136>
			}
			hdata++;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002542:	8afb      	ldrh	r3, [r7, #22]
 8002544:	3b01      	subs	r3, #1
 8002546:	82fb      	strh	r3, [r7, #22]
 8002548:	8afb      	ldrh	r3, [r7, #22]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e1      	bne.n	8002512 <huffext+0xea>
		}
		bl--;
 800254e:	8b3b      	ldrh	r3, [r7, #24]
 8002550:	3b01      	subs	r3, #1
 8002552:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8002554:	8b3b      	ldrh	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d181      	bne.n	800245e <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 800255a:	f06f 0305 	mvn.w	r3, #5
}
 800255e:	4618      	mov	r0, r3
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8002568:	b480      	push	{r7}
 800256a:	b095      	sub	sp, #84	; 0x54
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 8002572:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
 8002578:	f241 1351 	movw	r3, #4433	; 0x1151
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
 800257e:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
 8002584:	f641 5390 	movw	r3, #7568	; 0x1d90
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002590:	e0b8      	b.n	8002704 <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 80025ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	4413      	add	r3, r2
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 80025b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 80025be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	131b      	asrs	r3, r3, #12
 80025cc:	623b      	str	r3, [r7, #32]
		v3 += v1;
 80025ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	4413      	add	r3, r2
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 80025d6:	6a3a      	ldr	r2, [r7, #32]
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 80025de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	4413      	add	r3, r2
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 80025e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	4413      	add	r3, r2
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002612:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002618:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4413      	add	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 800263a:	6a3a      	ldr	r2, [r7, #32]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	131b      	asrs	r3, r3, #12
 8002648:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	4413      	add	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	4413      	add	r3, r2
 8002658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	131b      	asrs	r3, r3, #12
 8002660:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	131b      	asrs	r3, r3, #12
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	131b      	asrs	r3, r3, #12
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8002696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	441a      	add	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	33e0      	adds	r3, #224	; 0xe0
 80026a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	1a8a      	subs	r2, r1, r2
 80026aa:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3320      	adds	r3, #32
 80026b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	440a      	add	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	33c0      	adds	r3, #192	; 0xc0
 80026bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	1a8a      	subs	r2, r1, r2
 80026c2:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3340      	adds	r3, #64	; 0x40
 80026c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	440a      	add	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	33a0      	adds	r3, #160	; 0xa0
 80026d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	1a8a      	subs	r2, r1, r2
 80026da:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	440a      	add	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3380      	adds	r3, #128	; 0x80
 80026ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	1a8a      	subs	r2, r1, r2
 80026f2:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80026fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fe:	3301      	adds	r3, #1
 8002700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002708:	2b07      	cmp	r3, #7
 800270a:	f67f af42 	bls.w	8002592 <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3b20      	subs	r3, #32
 8002712:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002714:	2300      	movs	r3, #0
 8002716:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800271a:	e0e9      	b.n	80028f0 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 8002738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	4413      	add	r3, r2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	131b      	asrs	r3, r3, #12
 8002756:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	4413      	add	r3, r2
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	4413      	add	r3, r2
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	4413      	add	r3, r2
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	131b      	asrs	r3, r3, #12
 80027ce:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	4413      	add	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 80027d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	4413      	add	r3, r2
 80027de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	131b      	asrs	r3, r3, #12
 80027e6:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	131b      	asrs	r3, r3, #12
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	131b      	asrs	r3, r3, #12
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	1ad2      	subs	r2, r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 800281c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	121b      	asrs	r3, r3, #8
 8002824:	b29b      	uxth	r3, r3
 8002826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282a:	4a37      	ldr	r2, [pc, #220]	; (8002908 <block_idct+0x3a0>)
 800282c:	5cd2      	ldrb	r2, [r2, r3]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8002832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	121b      	asrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3307      	adds	r3, #7
 8002844:	4930      	ldr	r1, [pc, #192]	; (8002908 <block_idct+0x3a0>)
 8002846:	5c8a      	ldrb	r2, [r1, r2]
 8002848:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 800284a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4413      	add	r3, r2
 8002850:	121b      	asrs	r3, r3, #8
 8002852:	b29b      	uxth	r3, r3
 8002854:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	492a      	ldr	r1, [pc, #168]	; (8002908 <block_idct+0x3a0>)
 800285e:	5c8a      	ldrb	r2, [r1, r2]
 8002860:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 8002862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	121b      	asrs	r3, r3, #8
 800286a:	b29b      	uxth	r3, r3
 800286c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	3306      	adds	r3, #6
 8002874:	4924      	ldr	r1, [pc, #144]	; (8002908 <block_idct+0x3a0>)
 8002876:	5c8a      	ldrb	r2, [r1, r2]
 8002878:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 800287a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	121b      	asrs	r3, r3, #8
 8002882:	b29b      	uxth	r3, r3
 8002884:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3302      	adds	r3, #2
 800288c:	491e      	ldr	r1, [pc, #120]	; (8002908 <block_idct+0x3a0>)
 800288e:	5c8a      	ldrb	r2, [r1, r2]
 8002890:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 8002892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	121b      	asrs	r3, r3, #8
 800289a:	b29b      	uxth	r3, r3
 800289c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	3305      	adds	r3, #5
 80028a4:	4918      	ldr	r1, [pc, #96]	; (8002908 <block_idct+0x3a0>)
 80028a6:	5c8a      	ldrb	r2, [r1, r2]
 80028a8:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80028aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	121b      	asrs	r3, r3, #8
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3303      	adds	r3, #3
 80028bc:	4912      	ldr	r1, [pc, #72]	; (8002908 <block_idct+0x3a0>)
 80028be:	5c8a      	ldrb	r2, [r1, r2]
 80028c0:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 80028c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	121b      	asrs	r3, r3, #8
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3304      	adds	r3, #4
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <block_idct+0x3a0>)
 80028d6:	5c8a      	ldrb	r2, [r1, r2]
 80028d8:	701a      	strb	r2, [r3, #0]
		dst += 8;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	3308      	adds	r3, #8
 80028de:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3320      	adds	r3, #32
 80028e4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 80028e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ea:	3301      	adds	r3, #1
 80028ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f4:	2b07      	cmp	r3, #7
 80028f6:	f67f af11 	bls.w	800271c <block_idct+0x1b4>
	}
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	3754      	adds	r7, #84	; 0x54
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	08009cf8 	.word	0x08009cf8

0800290c <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	; 0x40
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7b9b      	ldrb	r3, [r3, #14]
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7bdb      	ldrb	r3, [r3, #15]
 8002924:	b29b      	uxth	r3, r3
 8002926:	fb12 f303 	smulbb	r3, r2, r3
 800292a:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 800292c:	2302      	movs	r3, #2
 800292e:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002934:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 8002936:	2300      	movs	r3, #0
 8002938:	86fb      	strh	r3, [r7, #54]	; 0x36
 800293a:	e11b      	b.n	8002b74 <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 800293c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800293e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002940:	429a      	cmp	r2, r3
 8002942:	d306      	bcc.n	8002952 <mcu_load+0x46>
 8002944:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002946:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	b29b      	uxth	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	e000      	b.n	8002954 <mcu_load+0x48>
 8002952:	2300      	movs	r3, #0
 8002954:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8002956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8002964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3204      	adds	r2, #4
 800296a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800296e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8002970:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3206      	adds	r2, #6
 8002976:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800297a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 800297c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002986:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fd4a 	bl	8002428 <huffext>
 8002994:	4603      	mov	r3, r0
 8002996:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da04      	bge.n	80029a8 <mcu_load+0x9c>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	425b      	negs	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e0ed      	b.n	8002b84 <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 80029a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	3308      	adds	r3, #8
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02a      	beq.n	8002a14 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 80029be:	6979      	ldr	r1, [r7, #20]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fcbe 	bl	8002342 <bitext>
 80029c6:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da04      	bge.n	80029d8 <mcu_load+0xcc>
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	425b      	negs	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e0d5      	b.n	8002b84 <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3b01      	subs	r3, #1
 80029dc:	2201      	movs	r2, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 80029e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <mcu_load+0xee>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 80029fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	4413      	add	r3, r2
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 8002a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a06:	b211      	sxth	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	460a      	mov	r2, r1
 8002a12:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 8002a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	7c1b      	ldrb	r3, [r3, #16]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3214      	adds	r2, #20
 8002a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a26:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	121a      	asrs	r2, r3, #8
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a3c:	e007      	b.n	8002a4e <mcu_load+0x142>
 8002a3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	86ba      	strh	r2, [r7, #52]	; 0x34
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a48:	4413      	add	r3, r2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a50:	2b3f      	cmp	r3, #63	; 0x3f
 8002a52:	d9f4      	bls.n	8002a3e <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8002a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 8002a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 8002a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8002a78:	2301      	movs	r3, #1
 8002a7a:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fcd0 	bl	8002428 <huffext>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d055      	beq.n	8002b3e <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da04      	bge.n	8002aa2 <mcu_load+0x196>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e070      	b.n	8002b84 <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	81fb      	strh	r3, [r7, #14]
			if (z) {
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8002ab0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8002ab8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002aba:	2b3f      	cmp	r3, #63	; 0x3f
 8002abc:	d901      	bls.n	8002ac2 <mcu_load+0x1b6>
 8002abe:	2306      	movs	r3, #6
 8002ac0:	e060      	b.n	8002b84 <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02f      	beq.n	8002b30 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fc35 	bl	8002342 <bitext>
 8002ad8:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da04      	bge.n	8002aea <mcu_load+0x1de>
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e04c      	b.n	8002b84 <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 8002af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <mcu_load+0x200>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 8002b0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <mcu_load+0x280>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b20:	fb03 f202 	mul.w	r2, r3, r2
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b2a:	440b      	add	r3, r1
 8002b2c:	1212      	asrs	r2, r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 8002b30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b32:	3301      	adds	r3, #1
 8002b34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002b36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b38:	2b3f      	cmp	r3, #63	; 0x3f
 8002b3a:	d99f      	bls.n	8002a7c <mcu_load+0x170>
 8002b3c:	e000      	b.n	8002b40 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 8002b3e:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7b5b      	ldrb	r3, [r3, #13]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d10b      	bne.n	8002b60 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da00      	bge.n	8002b52 <mcu_load+0x246>
 8002b50:	33ff      	adds	r3, #255	; 0xff
 8002b52:	121b      	asrs	r3, r3, #8
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b80      	subs	r3, #128	; 0x80
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e003      	b.n	8002b68 <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8002b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b64:	f7ff fd00 	bl	8002568 <block_idct>
		}

		bp += 64;				/* Next block */
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	3340      	adds	r3, #64	; 0x40
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 8002b6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b70:	3301      	adds	r3, #1
 8002b72:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b76:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b7a:	440b      	add	r3, r1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f6ff aedd 	blt.w	800293c <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3740      	adds	r7, #64	; 0x40
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	08009c38 	.word	0x08009c38

08002b90 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b098      	sub	sp, #96	; 0x60
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7b9b      	ldrb	r3, [r3, #14]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	863b      	strh	r3, [r7, #48]	; 0x30
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	7bdb      	ldrb	r3, [r3, #15]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002bc2:	4413      	add	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	8b92      	ldrh	r2, [r2, #28]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	dd05      	ble.n	8002bd8 <mcu_output+0x48>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8b9a      	ldrh	r2, [r3, #28]
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	e000      	b.n	8002bda <mcu_output+0x4a>
 8002bd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002bda:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8002bdc:	88ba      	ldrh	r2, [r7, #4]
 8002bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be0:	4413      	add	r3, r2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	8bd2      	ldrh	r2, [r2, #30]
 8002be6:	4293      	cmp	r3, r2
 8002be8:	dd05      	ble.n	8002bf6 <mcu_output+0x66>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8bda      	ldrh	r2, [r3, #30]
 8002bee:	88bb      	ldrh	r3, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	e000      	b.n	8002bf8 <mcu_output+0x68>
 8002bf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf8:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 8002bfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	7b52      	ldrb	r2, [r2, #13]
 8002c00:	4113      	asrs	r3, r2
 8002c02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	7b52      	ldrb	r2, [r2, #13]
 8002c0a:	4113      	asrs	r3, r2
 8002c0c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 8002c0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <mcu_output+0x8a>
 8002c14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <mcu_output+0x8e>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e2f0      	b.n	8003200 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	7b52      	ldrb	r2, [r2, #13]
 8002c24:	4113      	asrs	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	88bb      	ldrh	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	7b52      	ldrb	r2, [r2, #13]
 8002c2e:	4113      	asrs	r3, r2
 8002c30:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	82bb      	strh	r3, [r7, #20]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 8002c44:	88bb      	ldrh	r3, [r7, #4]
 8002c46:	833b      	strh	r3, [r7, #24]
 8002c48:	88ba      	ldrh	r2, [r7, #4]
 8002c4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	7b5b      	ldrb	r3, [r3, #13]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	f000 81a3 	beq.w	8002fa6 <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c6c:	e0e3      	b.n	8002e36 <mcu_output+0x2a6>
			pc = jd->mcubuf;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c72:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 8002c74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	4413      	add	r3, r2
 8002c80:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 8002c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d111      	bne.n	8002cac <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8002c88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3320      	adds	r3, #32
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	461a      	mov	r2, r3
 8002c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c98:	4413      	add	r3, r2
 8002c9a:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 8002c9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ca0:	2b07      	cmp	r3, #7
 8002ca2:	d90c      	bls.n	8002cbe <mcu_output+0x12e>
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca6:	3340      	adds	r3, #64	; 0x40
 8002ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002caa:	e008      	b.n	8002cbe <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 8002cac:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002cae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	4413      	add	r3, r2
 8002cbc:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002cc4:	e0ac      	b.n	8002e20 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b80      	subs	r3, #128	; 0x80
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	3340      	adds	r3, #64	; 0x40
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b80      	subs	r3, #128	; 0x80
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 8002ce0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d10e      	bne.n	8002d04 <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 8002ce6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d102      	bne.n	8002cf4 <mcu_output+0x164>
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 8002cf4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfe:	4413      	add	r3, r2
 8002d00:	657b      	str	r3, [r7, #84]	; 0x54
 8002d02:	e002      	b.n	8002d0a <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 8002d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d06:	3301      	adds	r3, #1
 8002d08:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 8002d14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d20:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8003000 <mcu_output+0x470>
 8002d24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d2c:	ee17 3a90 	vmov	r3, s15
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	6539      	str	r1, [r7, #80]	; 0x50
 8002d56:	49b2      	ldr	r1, [pc, #712]	; (8003020 <mcu_output+0x490>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8002d5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d5e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d6a:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003008 <mcu_output+0x478>
 8002d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d76:	ee17 3a90 	vmov	r3, s15
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002d82:	fb03 f101 	mul.w	r1, r3, r1
 8002d86:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d92:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8003010 <mcu_output+0x480>
 8002d96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d9e:	ee17 3a90 	vmov	r3, s15
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002daa:	fb00 f303 	mul.w	r3, r0, r3
 8002dae:	4419      	add	r1, r3
 8002db0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002db4:	fb91 f3f3 	sdiv	r3, r1, r3
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	6539      	str	r1, [r7, #80]	; 0x50
 8002dc8:	4995      	ldr	r1, [pc, #596]	; (8003020 <mcu_output+0x490>)
 8002dca:	5c8a      	ldrb	r2, [r1, r2]
 8002dcc:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 8002dce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dda:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8003018 <mcu_output+0x488>
 8002dde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002de2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002de6:	ee17 3a90 	vmov	r3, s15
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002dfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e02:	4413      	add	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	1c59      	adds	r1, r3, #1
 8002e0e:	6539      	str	r1, [r7, #80]	; 0x50
 8002e10:	4983      	ldr	r1, [pc, #524]	; (8003020 <mcu_output+0x490>)
 8002e12:	5c8a      	ldrb	r2, [r1, r2]
 8002e14:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 8002e16:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e20:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002e24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f4ff af4d 	bcc.w	8002cc6 <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 8002e2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e30:	3301      	adds	r3, #1
 8002e32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e36:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	f4ff af16 	bcc.w	8002c6e <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	7b5b      	ldrb	r3, [r3, #13]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8189 	beq.w	800315e <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7b5b      	ldrb	r3, [r3, #13]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	7b5b      	ldrb	r3, [r3, #13]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8002e62:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002e64:	8c3b      	ldrh	r3, [r7, #32]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	0052      	lsls	r2, r2, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e7e:	e08b      	b.n	8002f98 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e86:	e07b      	b.n	8002f80 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002e8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e90:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002e92:	fb03 f202 	mul.w	r2, r3, r2
 8002e96:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e9a:	441a      	add	r2, r3
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002eb0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002eb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ec2:	e034      	b.n	8002f2e <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002eca:	e022      	b.n	8002f12 <mcu_output+0x382>
							r += *rgb24++;
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	653a      	str	r2, [r7, #80]	; 0x50
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002eda:	4413      	add	r3, r2
 8002edc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	653a      	str	r2, [r7, #80]	; 0x50
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eee:	4413      	add	r3, r2
 8002ef0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 8002ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	653a      	str	r2, [r7, #80]	; 0x50
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f02:	4413      	add	r3, r2
 8002f04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 8002f08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002f16:	8c3b      	ldrh	r3, [r7, #32]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3d7      	bcc.n	8002ecc <mcu_output+0x33c>
						}
						rgb24 += a;
 8002f1c:	8bfb      	ldrh	r3, [r7, #30]
 8002f1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f20:	4413      	add	r3, r2
 8002f22:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 8002f24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f2e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002f32:	8c3b      	ldrh	r3, [r7, #32]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d3c5      	bcc.n	8002ec4 <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 8002f38:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f3e:	fa42 f103 	asr.w	r1, r2, r3
 8002f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	643a      	str	r2, [r7, #64]	; 0x40
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 8002f4c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f52:	fa42 f103 	asr.w	r1, r2, r3
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	643a      	str	r2, [r7, #64]	; 0x40
 8002f5c:	b2ca      	uxtb	r2, r1
 8002f5e:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 8002f60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f66:	fa42 f103 	asr.w	r1, r2, r3
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	643a      	str	r2, [r7, #64]	; 0x40
 8002f70:	b2ca      	uxtb	r2, r1
 8002f72:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 8002f74:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002f78:	8c3b      	ldrh	r3, [r7, #32]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f80:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002f84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f86:	429a      	cmp	r2, r3
 8002f88:	f4ff af7e 	bcc.w	8002e88 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 8002f8c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002f90:	8c3b      	ldrh	r3, [r7, #32]
 8002f92:	4413      	add	r3, r2
 8002f94:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002f98:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f4ff af6e 	bcc.w	8002e80 <mcu_output+0x2f0>
 8002fa4:	e0db      	b.n	800315e <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002fb2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8002fb4:	fb01 f202 	mul.w	r2, r1, r2
 8002fb8:	4413      	add	r3, r2
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b80      	subs	r3, #128	; 0x80
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fca:	3340      	adds	r3, #64	; 0x40
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b80      	subs	r3, #128	; 0x80
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002fdc:	e0b9      	b.n	8003152 <mcu_output+0x5c2>
			py = jd->mcubuf;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe2:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 8002fe4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d102      	bne.n	8002ff2 <mcu_output+0x462>
 8002fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fee:	3380      	adds	r3, #128	; 0x80
 8002ff0:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ff8:	e0a0      	b.n	800313c <mcu_output+0x5ac>
 8002ffa:	bf00      	nop
 8002ffc:	f3af 8000 	nop.w
 8003000:	8d4fdf3b 	.word	0x8d4fdf3b
 8003004:	3ff66e97 	.word	0x3ff66e97
 8003008:	9374bc6a 	.word	0x9374bc6a
 800300c:	3fd60418 	.word	0x3fd60418
 8003010:	872b020c 	.word	0x872b020c
 8003014:	3fe6d916 	.word	0x3fe6d916
 8003018:	ac083127 	.word	0xac083127
 800301c:	3ffc5a1c 	.word	0x3ffc5a1c
 8003020:	08009cf8 	.word	0x08009cf8
				yy = *py;	/* Get Y component */
 8003024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 800302a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302c:	3340      	adds	r3, #64	; 0x40
 800302e:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 8003030:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800303c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003208 <mcu_output+0x678>
 8003040:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003044:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003048:	ee17 3a90 	vmov	r3, s15
 800304c:	b21b      	sxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003054:	fb03 f202 	mul.w	r2, r3, r2
 8003058:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800305c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003060:	b29a      	uxth	r2, r3
 8003062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003064:	4413      	add	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800306c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	6539      	str	r1, [r7, #80]	; 0x50
 8003072:	496d      	ldr	r1, [pc, #436]	; (8003228 <mcu_output+0x698>)
 8003074:	5c8a      	ldrb	r2, [r1, r2]
 8003076:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800307a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003086:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8003210 <mcu_output+0x680>
 800308a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800308e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003092:	ee17 3a90 	vmov	r3, s15
 8003096:	b21b      	sxth	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800309e:	fb03 f101 	mul.w	r1, r3, r1
 80030a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030ae:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8003218 <mcu_output+0x688>
 80030b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80030ba:	ee17 3a90 	vmov	r3, s15
 80030be:	b21b      	sxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80030c6:	fb00 f303 	mul.w	r3, r0, r3
 80030ca:	4419      	add	r1, r3
 80030cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80030d0:	fb91 f3f3 	sdiv	r3, r1, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	6539      	str	r1, [r7, #80]	; 0x50
 80030e4:	4950      	ldr	r1, [pc, #320]	; (8003228 <mcu_output+0x698>)
 80030e6:	5c8a      	ldrb	r2, [r1, r2]
 80030e8:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 80030ea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030f6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003220 <mcu_output+0x690>
 80030fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030fe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003102:	ee17 3a90 	vmov	r3, s15
 8003106:	b21b      	sxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800310e:	fb03 f202 	mul.w	r2, r3, r2
 8003112:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003116:	fb92 f3f3 	sdiv	r3, r2, r3
 800311a:	b29a      	uxth	r2, r3
 800311c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800311e:	4413      	add	r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003128:	1c59      	adds	r1, r3, #1
 800312a:	6539      	str	r1, [r7, #80]	; 0x50
 800312c:	493e      	ldr	r1, [pc, #248]	; (8003228 <mcu_output+0x698>)
 800312e:	5c8a      	ldrb	r2, [r1, r2]
 8003130:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 8003132:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003136:	3308      	adds	r3, #8
 8003138:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800313c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003140:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003142:	429a      	cmp	r2, r3
 8003144:	f4ff af6e 	bcc.w	8003024 <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003148:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800314c:	3308      	adds	r3, #8
 800314e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003152:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003158:	429a      	cmp	r2, r3
 800315a:	f4ff af40 	bcc.w	8002fde <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 800315e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	7b52      	ldrb	r2, [r2, #13]
 8003164:	4113      	asrs	r3, r2
 8003166:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003168:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800316a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800316c:	429a      	cmp	r2, r3
 800316e:	d23a      	bcs.n	80031e6 <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 800317a:	2300      	movs	r3, #0
 800317c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800317e:	e02e      	b.n	80031de <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003180:	2300      	movs	r3, #0
 8003182:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003184:	e01a      	b.n	80031bc <mcu_output+0x62c>
				*d++ = *s++;
 8003186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003188:	1c53      	adds	r3, r2, #1
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	63b9      	str	r1, [r7, #56]	; 0x38
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003198:	1c53      	adds	r3, r2, #1
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 80031a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031a8:	1c53      	adds	r3, r2, #1
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	63b9      	str	r1, [r7, #56]	; 0x38
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 80031b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b8:	3301      	adds	r3, #1
 80031ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80031be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3e0      	bcc.n	8003186 <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 80031c4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80031c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031c8:	1ad2      	subs	r2, r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d4:	4413      	add	r3, r2
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 80031d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031da:	3301      	adds	r3, #1
 80031dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80031e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3cc      	bcc.n	8003180 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80031ea:	f107 0214 	add.w	r2, r7, #20
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	4798      	blx	r3
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	3760      	adds	r7, #96	; 0x60
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	8d4fdf3b 	.word	0x8d4fdf3b
 800320c:	3ff66e97 	.word	0x3ff66e97
 8003210:	9374bc6a 	.word	0x9374bc6a
 8003214:	3fd60418 	.word	0x3fd60418
 8003218:	872b020c 	.word	0x872b020c
 800321c:	3fe6d916 	.word	0x3fe6d916
 8003220:	ac083127 	.word	0xac083127
 8003224:	3ffc5a1c 	.word	0x3ffc5a1c
 8003228:	08009cf8 	.word	0x08009cf8

0800322c <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	82bb      	strh	r3, [r7, #20]
	d = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003248:	2300      	movs	r3, #0
 800324a:	82fb      	strh	r3, [r7, #22]
 800324c:	e025      	b.n	800329a <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 800324e:	8abb      	ldrh	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d110      	bne.n	8003276 <restart+0x4a>
			dp = jd->inbuf;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	4603      	mov	r3, r0
 800326a:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <restart+0x50>
 8003272:	2302      	movs	r3, #2
 8003274:	e03d      	b.n	80032f2 <restart+0xc6>
		} else {
			dp++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3301      	adds	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 800327c:	8abb      	ldrh	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 8003282:	8a7b      	ldrh	r3, [r7, #18]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21a      	sxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b21b      	sxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b21b      	sxth	r3, r3
 8003292:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003294:	8afb      	ldrh	r3, [r7, #22]
 8003296:	3301      	adds	r3, #1
 8003298:	82fb      	strh	r3, [r7, #22]
 800329a:	8afb      	ldrh	r3, [r7, #22]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d9d6      	bls.n	800324e <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8aba      	ldrh	r2, [r7, #20]
 80032aa:	801a      	strh	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 80032b2:	8a7a      	ldrh	r2, [r7, #18]
 80032b4:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 80032b8:	4013      	ands	r3, r2
 80032ba:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 80032be:	4293      	cmp	r3, r2
 80032c0:	d107      	bne.n	80032d2 <restart+0xa6>
 80032c2:	8a7a      	ldrh	r2, [r7, #18]
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	4053      	eors	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 80032d2:	2306      	movs	r3, #6
 80032d4:	e00d      	b.n	80032f2 <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	829a      	strh	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	82da      	strh	r2, [r3, #22]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <jd_prepare+0x18>
 8003310:	2305      	movs	r3, #5
 8003312:	e2a4      	b.n	800385e <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332c:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003334:	2300      	movs	r3, #0
 8003336:	847b      	strh	r3, [r7, #34]	; 0x22
 8003338:	e026      	b.n	8003388 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 800333a:	2300      	movs	r3, #0
 800333c:	843b      	strh	r3, [r7, #32]
 800333e:	e01d      	b.n	800337c <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003340:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003342:	8c3a      	ldrh	r2, [r7, #32]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	0049      	lsls	r1, r1, #1
 8003348:	440a      	add	r2, r1
 800334a:	3208      	adds	r2, #8
 800334c:	2100      	movs	r1, #0
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 8003352:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003354:	8c3a      	ldrh	r2, [r7, #32]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0049      	lsls	r1, r1, #1
 800335a:	440a      	add	r2, r1
 800335c:	320c      	adds	r2, #12
 800335e:	2100      	movs	r1, #0
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 8003364:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003366:	8c3a      	ldrh	r2, [r7, #32]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0049      	lsls	r1, r1, #1
 800336c:	440a      	add	r2, r1
 800336e:	3210      	adds	r2, #16
 8003370:	2100      	movs	r1, #0
 8003372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 8003376:	8c3b      	ldrh	r3, [r7, #32]
 8003378:	3301      	adds	r3, #1
 800337a:	843b      	strh	r3, [r7, #32]
 800337c:	8c3b      	ldrh	r3, [r7, #32]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d9de      	bls.n	8003340 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003384:	3301      	adds	r3, #1
 8003386:	847b      	strh	r3, [r7, #34]	; 0x22
 8003388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800338a:	2b01      	cmp	r3, #1
 800338c:	d9d5      	bls.n	800333a <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 800338e:	2300      	movs	r3, #0
 8003390:	847b      	strh	r3, [r7, #34]	; 0x22
 8003392:	e008      	b.n	80033a6 <jd_prepare+0xaa>
 8003394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	847a      	strh	r2, [r7, #34]	; 0x22
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3214      	adds	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d9f3      	bls.n	8003394 <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 80033ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7fe fe68 	bl	8002086 <alloc_pool>
 80033b6:	61b8      	str	r0, [r7, #24]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <jd_prepare+0xcc>
 80033c4:	2303      	movs	r3, #3
 80033c6:	e24a      	b.n	800385e <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	2202      	movs	r2, #2
 80033ce:	69b9      	ldr	r1, [r7, #24]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	4798      	blx	r3
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d001      	beq.n	80033de <jd_prepare+0xe2>
 80033da:	2302      	movs	r3, #2
 80033dc:	e23f      	b.n	800385e <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3301      	adds	r3, #1
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	f113 0f28 	cmn.w	r3, #40	; 0x28
 80033f6:	d001      	beq.n	80033fc <jd_prepare+0x100>
 80033f8:	2306      	movs	r3, #6
 80033fa:	e230      	b.n	800385e <jd_prepare+0x562>
	ofs = 2;
 80033fc:	2302      	movs	r3, #2
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	2204      	movs	r2, #4
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	4798      	blx	r3
 800340c:	4603      	mov	r3, r0
 800340e:	2b04      	cmp	r3, #4
 8003410:	d001      	beq.n	8003416 <jd_prepare+0x11a>
 8003412:	2302      	movs	r3, #2
 8003414:	e223      	b.n	800385e <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	b21a      	sxth	r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3301      	adds	r3, #1
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b21b      	sxth	r3, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	b21b      	sxth	r3, r3
 800342a:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	3302      	adds	r3, #2
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	b21a      	sxth	r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3303      	adds	r3, #3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b21b      	sxth	r3, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	b21b      	sxth	r3, r3
 8003442:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d904      	bls.n	8003454 <jd_prepare+0x158>
 800344a:	8afb      	ldrh	r3, [r7, #22]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	b29b      	uxth	r3, r3
 8003450:	2bff      	cmp	r3, #255	; 0xff
 8003452:	d001      	beq.n	8003458 <jd_prepare+0x15c>
 8003454:	2306      	movs	r3, #6
 8003456:	e202      	b.n	800385e <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	3b02      	subs	r3, #2
 800345c:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 800345e:	8bfa      	ldrh	r2, [r7, #30]
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3bc0      	subs	r3, #192	; 0xc0
 800346e:	2b1d      	cmp	r3, #29
 8003470:	f200 81e3 	bhi.w	800383a <jd_prepare+0x53e>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <jd_prepare+0x180>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034f5 	.word	0x080034f5
 8003480:	08003837 	.word	0x08003837
 8003484:	08003837 	.word	0x08003837
 8003488:	08003837 	.word	0x08003837
 800348c:	08003631 	.word	0x08003631
 8003490:	08003837 	.word	0x08003837
 8003494:	08003837 	.word	0x08003837
 8003498:	08003837 	.word	0x08003837
 800349c:	0800383b 	.word	0x0800383b
 80034a0:	08003837 	.word	0x08003837
 80034a4:	08003837 	.word	0x08003837
 80034a8:	08003837 	.word	0x08003837
 80034ac:	0800383b 	.word	0x0800383b
 80034b0:	08003837 	.word	0x08003837
 80034b4:	08003837 	.word	0x08003837
 80034b8:	08003837 	.word	0x08003837
 80034bc:	0800383b 	.word	0x0800383b
 80034c0:	0800383b 	.word	0x0800383b
 80034c4:	0800383b 	.word	0x0800383b
 80034c8:	0800383b 	.word	0x0800383b
 80034cc:	0800383b 	.word	0x0800383b
 80034d0:	0800383b 	.word	0x0800383b
 80034d4:	0800383b 	.word	0x0800383b
 80034d8:	0800383b 	.word	0x0800383b
 80034dc:	0800383b 	.word	0x0800383b
 80034e0:	08003837 	.word	0x08003837
 80034e4:	080036b5 	.word	0x080036b5
 80034e8:	08003673 	.word	0x08003673
 80034ec:	0800383b 	.word	0x0800383b
 80034f0:	080035ef 	.word	0x080035ef
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80034f4:	8bfb      	ldrh	r3, [r7, #30]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d901      	bls.n	8003500 <jd_prepare+0x204>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e1ae      	b.n	800385e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	8bfa      	ldrh	r2, [r7, #30]
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	4798      	blx	r3
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	8bfb      	ldrh	r3, [r7, #30]
 8003512:	4293      	cmp	r3, r2
 8003514:	d001      	beq.n	800351a <jd_prepare+0x21e>
 8003516:	2302      	movs	r3, #2
 8003518:	e1a1      	b.n	800385e <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	3303      	adds	r3, #3
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b21a      	sxth	r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	3304      	adds	r3, #4
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b21b      	sxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b21b      	sxth	r3, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3301      	adds	r3, #1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	b21a      	sxth	r2, r3
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	3302      	adds	r3, #2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b21b      	sxth	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b21b      	sxth	r3, r3
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3305      	adds	r3, #5
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d001      	beq.n	8003560 <jd_prepare+0x264>
 800355c:	2308      	movs	r3, #8
 800355e:	e17e      	b.n	800385e <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8003560:	2300      	movs	r3, #0
 8003562:	847b      	strh	r3, [r7, #34]	; 0x22
 8003564:	e03f      	b.n	80035e6 <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8003566:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	3307      	adds	r3, #7
 8003570:	461a      	mov	r2, r3
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 800357a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800357c:	2b00      	cmp	r3, #0
 800357e:	d116      	bne.n	80035ae <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8003580:	7c7b      	ldrb	r3, [r7, #17]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d007      	beq.n	8003596 <jd_prepare+0x29a>
 8003586:	7c7b      	ldrb	r3, [r7, #17]
 8003588:	2b22      	cmp	r3, #34	; 0x22
 800358a:	d004      	beq.n	8003596 <jd_prepare+0x29a>
 800358c:	7c7b      	ldrb	r3, [r7, #17]
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d001      	beq.n	8003596 <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8003592:	2308      	movs	r3, #8
 8003594:	e163      	b.n	800385e <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8003596:	7c7b      	ldrb	r3, [r7, #17]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	739a      	strb	r2, [r3, #14]
 80035a0:	7c7b      	ldrb	r3, [r7, #17]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	73da      	strb	r2, [r3, #15]
 80035ac:	e004      	b.n	80035b8 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 80035ae:	7c7b      	ldrb	r3, [r7, #17]
 80035b0:	2b11      	cmp	r3, #17
 80035b2:	d001      	beq.n	80035b8 <jd_prepare+0x2bc>
 80035b4:	2308      	movs	r3, #8
 80035b6:	e152      	b.n	800385e <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 80035b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	3308      	adds	r3, #8
 80035c2:	461a      	mov	r2, r3
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 80035cc:	7c7b      	ldrb	r3, [r7, #17]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d901      	bls.n	80035d6 <jd_prepare+0x2da>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e143      	b.n	800385e <jd_prepare+0x562>
				jd->qtid[i] = b;
 80035d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	7c7a      	ldrb	r2, [r7, #17]
 80035de:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 80035e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035e2:	3301      	adds	r3, #1
 80035e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80035e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d9bc      	bls.n	8003566 <jd_prepare+0x26a>
			}
			break;
 80035ec:	e136      	b.n	800385c <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80035ee:	8bfb      	ldrh	r3, [r7, #30]
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f4:	d901      	bls.n	80035fa <jd_prepare+0x2fe>
 80035f6:	2304      	movs	r3, #4
 80035f8:	e131      	b.n	800385e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	8bfa      	ldrh	r2, [r7, #30]
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	4798      	blx	r3
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	8bfb      	ldrh	r3, [r7, #30]
 800360c:	4293      	cmp	r3, r2
 800360e:	d001      	beq.n	8003614 <jd_prepare+0x318>
 8003610:	2302      	movs	r3, #2
 8003612:	e124      	b.n	800385e <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b21a      	sxth	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	3301      	adds	r3, #1
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b21b      	sxth	r3, r3
 8003624:	4313      	orrs	r3, r2
 8003626:	b21b      	sxth	r3, r3
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	835a      	strh	r2, [r3, #26]
			break;
 800362e:	e115      	b.n	800385c <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003630:	8bfb      	ldrh	r3, [r7, #30]
 8003632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003636:	d901      	bls.n	800363c <jd_prepare+0x340>
 8003638:	2304      	movs	r3, #4
 800363a:	e110      	b.n	800385e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	8bfa      	ldrh	r2, [r7, #30]
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	4798      	blx	r3
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	8bfb      	ldrh	r3, [r7, #30]
 800364e:	4293      	cmp	r3, r2
 8003650:	d001      	beq.n	8003656 <jd_prepare+0x35a>
 8003652:	2302      	movs	r3, #2
 8003654:	e103      	b.n	800385e <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8003656:	8bfb      	ldrh	r3, [r7, #30]
 8003658:	461a      	mov	r2, r3
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7fe fd9b 	bl	8002198 <create_huffman_tbl>
 8003662:	4603      	mov	r3, r0
 8003664:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003666:	7d7b      	ldrb	r3, [r7, #21]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80f4 	beq.w	8003856 <jd_prepare+0x55a>
 800366e:	7d7b      	ldrb	r3, [r7, #21]
 8003670:	e0f5      	b.n	800385e <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003672:	8bfb      	ldrh	r3, [r7, #30]
 8003674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003678:	d901      	bls.n	800367e <jd_prepare+0x382>
 800367a:	2304      	movs	r3, #4
 800367c:	e0ef      	b.n	800385e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	8bfa      	ldrh	r2, [r7, #30]
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	4798      	blx	r3
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	8bfb      	ldrh	r3, [r7, #30]
 8003690:	4293      	cmp	r3, r2
 8003692:	d001      	beq.n	8003698 <jd_prepare+0x39c>
 8003694:	2302      	movs	r3, #2
 8003696:	e0e2      	b.n	800385e <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8003698:	8bfb      	ldrh	r3, [r7, #30]
 800369a:	461a      	mov	r2, r3
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7fe fd1e 	bl	80020e0 <create_qt_tbl>
 80036a4:	4603      	mov	r3, r0
 80036a6:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 80036a8:	7d7b      	ldrb	r3, [r7, #21]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80d5 	beq.w	800385a <jd_prepare+0x55e>
 80036b0:	7d7b      	ldrb	r3, [r7, #21]
 80036b2:	e0d4      	b.n	800385e <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 80036b4:	8bfb      	ldrh	r3, [r7, #30]
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d901      	bls.n	80036c0 <jd_prepare+0x3c4>
 80036bc:	2304      	movs	r3, #4
 80036be:	e0ce      	b.n	800385e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	8bfa      	ldrh	r2, [r7, #30]
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	4798      	blx	r3
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	8bfb      	ldrh	r3, [r7, #30]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d001      	beq.n	80036da <jd_prepare+0x3de>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0c1      	b.n	800385e <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8b9b      	ldrh	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <jd_prepare+0x3ee>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8bdb      	ldrh	r3, [r3, #30]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <jd_prepare+0x3f2>
 80036ea:	2306      	movs	r3, #6
 80036ec:	e0b7      	b.n	800385e <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d001      	beq.n	80036fa <jd_prepare+0x3fe>
 80036f6:	2308      	movs	r3, #8
 80036f8:	e0b1      	b.n	800385e <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80036fe:	e036      	b.n	800376e <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8003700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	461a      	mov	r2, r3
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 8003710:	7c7b      	ldrb	r3, [r7, #17]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <jd_prepare+0x424>
 8003716:	7c7b      	ldrb	r3, [r7, #17]
 8003718:	2b11      	cmp	r3, #17
 800371a:	d001      	beq.n	8003720 <jd_prepare+0x424>
 800371c:	2308      	movs	r3, #8
 800371e:	e09e      	b.n	800385e <jd_prepare+0x562>
				b = i ? 1 : 0;
 8003720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 800372e:	7c7a      	ldrb	r2, [r7, #17]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3204      	adds	r2, #4
 8003734:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <jd_prepare+0x44e>
 800373c:	7c7b      	ldrb	r3, [r7, #17]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 800374a:	2306      	movs	r3, #6
 800374c:	e087      	b.n	800385e <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 800374e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	7c1b      	ldrb	r3, [r3, #16]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3214      	adds	r2, #20
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 8003764:	2306      	movs	r3, #6
 8003766:	e07a      	b.n	800385e <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8003768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800376a:	3301      	adds	r3, #1
 800376c:	847b      	strh	r3, [r7, #34]	; 0x22
 800376e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003770:	2b02      	cmp	r3, #2
 8003772:	d9c5      	bls.n	8003700 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	7bdb      	ldrb	r3, [r3, #15]
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	7b9b      	ldrb	r3, [r3, #14]
 800377e:	b29b      	uxth	r3, r3
 8003780:	fb12 f303 	smulbb	r3, r2, r3
 8003784:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8003786:	8a7b      	ldrh	r3, [r7, #18]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <jd_prepare+0x494>
 800378c:	2306      	movs	r3, #6
 800378e:	e066      	b.n	800385e <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8003790:	8a7b      	ldrh	r3, [r7, #18]
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	b29b      	uxth	r3, r3
 8003796:	3340      	adds	r3, #64	; 0x40
 8003798:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 800379a:	8bfb      	ldrh	r3, [r7, #30]
 800379c:	2bff      	cmp	r3, #255	; 0xff
 800379e:	d802      	bhi.n	80037a6 <jd_prepare+0x4aa>
 80037a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a4:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 80037a6:	8bfb      	ldrh	r3, [r7, #30]
 80037a8:	4619      	mov	r1, r3
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7fe fc6b 	bl	8002086 <alloc_pool>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <jd_prepare+0x4c6>
 80037be:	2303      	movs	r3, #3
 80037c0:	e04d      	b.n	800385e <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	3302      	adds	r3, #2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	019b      	lsls	r3, r3, #6
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7fe fc59 	bl	8002086 <alloc_pool>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <jd_prepare+0x4ea>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e03b      	b.n	800385e <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	801a      	strh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	4411      	add	r1, r2
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	b292      	uxth	r2, r2
 8003814:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8003818:	b292      	uxth	r2, r2
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	4798      	blx	r3
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	3b01      	subs	r3, #1
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8003832:	2300      	movs	r3, #0
 8003834:	e013      	b.n	800385e <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8003836:	2308      	movs	r3, #8
 8003838:	e011      	b.n	800385e <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	8bfa      	ldrh	r2, [r7, #30]
 8003840:	2100      	movs	r1, #0
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	4798      	blx	r3
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	8bfb      	ldrh	r3, [r7, #30]
 800384c:	4293      	cmp	r3, r2
 800384e:	f43f add7 	beq.w	8003400 <jd_prepare+0x104>
				return JDR_INP;
 8003852:	2302      	movs	r3, #2
 8003854:	e003      	b.n	800385e <jd_prepare+0x562>
			break;
 8003856:	bf00      	nop
 8003858:	e5d2      	b.n	8003400 <jd_prepare+0x104>
			break;
 800385a:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 800385c:	e5d0      	b.n	8003400 <jd_prepare+0x104>
			}
		}
	}
}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop

08003868 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d901      	bls.n	8003880 <jd_decomp+0x18>
 800387c:	2305      	movs	r3, #5
 800387e:	e06a      	b.n	8003956 <jd_decomp+0xee>
	jd->scale = scale;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	79fa      	ldrb	r2, [r7, #7]
 8003884:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	7b9b      	ldrb	r3, [r3, #14]
 800388a:	b29b      	uxth	r3, r3
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	82bb      	strh	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	7bdb      	ldrb	r3, [r3, #15]
 8003894:	b29b      	uxth	r3, r3
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	829a      	strh	r2, [r3, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	82da      	strh	r2, [r3, #22]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	833b      	strh	r3, [r7, #24]
 80038b8:	8b3b      	ldrh	r3, [r7, #24]
 80038ba:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 80038c0:	2300      	movs	r3, #0
 80038c2:	83bb      	strh	r3, [r7, #28]
 80038c4:	e041      	b.n	800394a <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 80038c6:	2300      	movs	r3, #0
 80038c8:	83fb      	strh	r3, [r7, #30]
 80038ca:	e035      	b.n	8003938 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8b5b      	ldrh	r3, [r3, #26]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <jd_decomp+0x9a>
 80038d4:	8b7b      	ldrh	r3, [r7, #26]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	837a      	strh	r2, [r7, #26]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	8b52      	ldrh	r2, [r2, #26]
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10f      	bne.n	8003902 <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 80038e2:	8b3b      	ldrh	r3, [r7, #24]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	833a      	strh	r2, [r7, #24]
 80038e8:	4619      	mov	r1, r3
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fc9e 	bl	800322c <restart>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <jd_decomp+0x96>
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	e02b      	b.n	8003956 <jd_decomp+0xee>
				rst = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff f802 	bl	800290c <mcu_load>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <jd_decomp+0xae>
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	e01f      	b.n	8003956 <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 8003916:	8bbb      	ldrh	r3, [r7, #28]
 8003918:	8bfa      	ldrh	r2, [r7, #30]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff f937 	bl	8002b90 <mcu_output>
 8003922:	4603      	mov	r3, r0
 8003924:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <jd_decomp+0xc8>
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	e012      	b.n	8003956 <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003930:	8bfa      	ldrh	r2, [r7, #30]
 8003932:	8abb      	ldrh	r3, [r7, #20]
 8003934:	4413      	add	r3, r2
 8003936:	83fb      	strh	r3, [r7, #30]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8b9b      	ldrh	r3, [r3, #28]
 800393c:	8bfa      	ldrh	r2, [r7, #30]
 800393e:	429a      	cmp	r2, r3
 8003940:	d3c4      	bcc.n	80038cc <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003942:	8bba      	ldrh	r2, [r7, #28]
 8003944:	8a7b      	ldrh	r3, [r7, #18]
 8003946:	4413      	add	r3, r2
 8003948:	83bb      	strh	r3, [r7, #28]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8bdb      	ldrh	r3, [r3, #30]
 800394e:	8bba      	ldrh	r2, [r7, #28]
 8003950:	429a      	cmp	r2, r3
 8003952:	d3b8      	bcc.n	80038c6 <jd_decomp+0x5e>
		}
	}

	return rc;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003962:	2003      	movs	r0, #3
 8003964:	f000 f94c 	bl	8003c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003968:	2000      	movs	r0, #0
 800396a:	f000 f805 	bl	8003978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800396e:	f7fd fc13 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_InitTick+0x54>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_InitTick+0x58>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800398e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f967 	bl	8003c6a <HAL_SYSTICK_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00e      	b.n	80039c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b0f      	cmp	r3, #15
 80039aa:	d80a      	bhi.n	80039c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ac:	2200      	movs	r2, #0
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	f000 f92f 	bl	8003c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039b8:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <HAL_InitTick+0x5c>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200004c0 	.word	0x200004c0
 80039d0:	200004c8 	.word	0x200004c8
 80039d4:	200004c4 	.word	0x200004c4

080039d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_IncTick+0x20>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_IncTick+0x24>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4413      	add	r3, r2
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <HAL_IncTick+0x24>)
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	200004c8 	.word	0x200004c8
 80039fc:	200008f4 	.word	0x200008f4

08003a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return uwTick;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_GetTick+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	200008f4 	.word	0x200008f4

08003a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7ff ffee 	bl	8003a00 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d005      	beq.n	8003a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_Delay+0x44>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a3e:	bf00      	nop
 8003a40:	f7ff ffde 	bl	8003a00 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d8f7      	bhi.n	8003a40 <HAL_Delay+0x28>
  {
  }
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200004c8 	.word	0x200004c8

08003a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	60d3      	str	r3, [r2, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00
 8003aa4:	05fa0000 	.word	0x05fa0000

08003aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	f003 0307 	and.w	r3, r3, #7
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	db0b      	blt.n	8003aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	f003 021f 	and.w	r2, r3, #31
 8003adc:	4907      	ldr	r1, [pc, #28]	; (8003afc <__NVIC_EnableIRQ+0x38>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e100 	.word	0xe000e100

08003b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	6039      	str	r1, [r7, #0]
 8003b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	db0a      	blt.n	8003b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	490c      	ldr	r1, [pc, #48]	; (8003b4c <__NVIC_SetPriority+0x4c>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	440b      	add	r3, r1
 8003b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b28:	e00a      	b.n	8003b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4908      	ldr	r1, [pc, #32]	; (8003b50 <__NVIC_SetPriority+0x50>)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	3b04      	subs	r3, #4
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	761a      	strb	r2, [r3, #24]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000e100 	.word	0xe000e100
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f1c3 0307 	rsb	r3, r3, #7
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	bf28      	it	cs
 8003b72:	2304      	movcs	r3, #4
 8003b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d902      	bls.n	8003b84 <NVIC_EncodePriority+0x30>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3b03      	subs	r3, #3
 8003b82:	e000      	b.n	8003b86 <NVIC_EncodePriority+0x32>
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	401a      	ands	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43d9      	mvns	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bac:	4313      	orrs	r3, r2
         );
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3724      	adds	r7, #36	; 0x24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bcc:	d301      	bcc.n	8003bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00f      	b.n	8003bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <SysTick_Config+0x40>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bda:	210f      	movs	r1, #15
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	f7ff ff8e 	bl	8003b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <SysTick_Config+0x40>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <SysTick_Config+0x40>)
 8003bec:	2207      	movs	r2, #7
 8003bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	e000e010 	.word	0xe000e010

08003c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff29 	bl	8003a60 <__NVIC_SetPriorityGrouping>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c28:	f7ff ff3e 	bl	8003aa8 <__NVIC_GetPriorityGrouping>
 8003c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f7ff ff8e 	bl	8003b54 <NVIC_EncodePriority>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff5d 	bl	8003b00 <__NVIC_SetPriority>
}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff31 	bl	8003ac4 <__NVIC_EnableIRQ>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffa2 	bl	8003bbc <SysTick_Config>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7ff feb6 	bl	8003a00 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e099      	b.n	8003dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc0:	e00f      	b.n	8003ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc2:	f7ff fe9d 	bl	8003a00 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d908      	bls.n	8003ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e078      	b.n	8003dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e8      	bne.n	8003cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_DMA_Init+0x158>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4313      	orrs	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0307 	bic.w	r3, r3, #7
 8003d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d117      	bne.n	8003da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa7b 	bl	8004284 <DMA_CheckFifoParam>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003da2:	2301      	movs	r3, #1
 8003da4:	e016      	b.n	8003dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa32 	bl	8004218 <DMA_CalcBaseAndBitshift>
 8003db4:	4603      	mov	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	e010803f 	.word	0xe010803f

08003de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dee:	f7ff fe07 	bl	8003a00 <HAL_GetTick>
 8003df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d008      	beq.n	8003e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e052      	b.n	8003eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0216 	bic.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_DMA_Abort+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e62:	e013      	b.n	8003e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e64:	f7ff fdcc 	bl	8003a00 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d90c      	bls.n	8003e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e015      	b.n	8003eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e4      	bne.n	8003e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	223f      	movs	r2, #63	; 0x3f
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00c      	b.n	8003ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f10:	4b8e      	ldr	r3, [pc, #568]	; (800414c <HAL_DMA_IRQHandler+0x248>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a8e      	ldr	r2, [pc, #568]	; (8004150 <HAL_DMA_IRQHandler+0x24c>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	2208      	movs	r2, #8
 8003f30:	409a      	lsls	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01a      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0204 	bic.w	r2, r2, #4
 8003f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	2201      	movs	r2, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	2204      	movs	r2, #4
 8003fac:	409a      	lsls	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d012      	beq.n	8003fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	2204      	movs	r2, #4
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d043      	beq.n	8004074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d03c      	beq.n	8004074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	2210      	movs	r2, #16
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d018      	beq.n	8004046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d024      	beq.n	8004074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
 8004032:	e01f      	b.n	8004074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e016      	b.n	8004074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0208 	bic.w	r2, r2, #8
 8004062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	2220      	movs	r2, #32
 800407a:	409a      	lsls	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 808f 	beq.w	80041a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8087 	beq.w	80041a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	2220      	movs	r2, #32
 800409c:	409a      	lsls	r2, r3
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d136      	bne.n	800411c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0216 	bic.w	r2, r2, #22
 80040bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_DMA_IRQHandler+0x1da>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0208 	bic.w	r2, r2, #8
 80040ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	223f      	movs	r2, #63	; 0x3f
 80040f4:	409a      	lsls	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	2b00      	cmp	r3, #0
 8004110:	d07e      	beq.n	8004210 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
        }
        return;
 800411a:	e079      	b.n	8004210 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01d      	beq.n	8004166 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	2b00      	cmp	r3, #0
 800413e:	d031      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
 8004148:	e02c      	b.n	80041a4 <HAL_DMA_IRQHandler+0x2a0>
 800414a:	bf00      	nop
 800414c:	200004c0 	.word	0x200004c0
 8004150:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d023      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e01e      	b.n	80041a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0210 	bic.w	r2, r2, #16
 8004182:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d032      	beq.n	8004212 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d022      	beq.n	80041fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2205      	movs	r2, #5
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d307      	bcc.n	80041ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f2      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x2cc>
 80041ea:	e000      	b.n	80041ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
 800420e:	e000      	b.n	8004212 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004210:	bf00      	nop
    }
  }
}
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3b10      	subs	r3, #16
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <DMA_CalcBaseAndBitshift+0x60>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <DMA_CalcBaseAndBitshift+0x64>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d908      	bls.n	8004258 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <DMA_CalcBaseAndBitshift+0x68>)
 800424e:	4013      	ands	r3, r2
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	659a      	str	r2, [r3, #88]	; 0x58
 8004256:	e006      	b.n	8004266 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <DMA_CalcBaseAndBitshift+0x68>)
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	aaaaaaab 	.word	0xaaaaaaab
 800427c:	0800a0f8 	.word	0x0800a0f8
 8004280:	fffffc00 	.word	0xfffffc00

08004284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11f      	bne.n	80042de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d856      	bhi.n	8004352 <DMA_CheckFifoParam+0xce>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <DMA_CheckFifoParam+0x28>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cf 	.word	0x080042cf
 80042b4:	080042bd 	.word	0x080042bd
 80042b8:	08004353 	.word	0x08004353
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d046      	beq.n	8004356 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042cc:	e043      	b.n	8004356 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d6:	d140      	bne.n	800435a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042dc:	e03d      	b.n	800435a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	d121      	bne.n	800432c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d837      	bhi.n	800435e <DMA_CheckFifoParam+0xda>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <DMA_CheckFifoParam+0x70>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004305 	.word	0x08004305
 80042f8:	0800430b 	.word	0x0800430b
 80042fc:	08004305 	.word	0x08004305
 8004300:	0800431d 	.word	0x0800431d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e030      	b.n	800436c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d025      	beq.n	8004362 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431a:	e022      	b.n	8004362 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800432a:	e01c      	b.n	8004366 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d903      	bls.n	800433a <DMA_CheckFifoParam+0xb6>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004338:	e018      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      break;
 800433e:	e015      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e00b      	b.n	800436a <DMA_CheckFifoParam+0xe6>
      break;
 8004352:	bf00      	nop
 8004354:	e00a      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
 8004358:	e008      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435a:	bf00      	nop
 800435c:	e006      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;   
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800436a:	bf00      	nop
    }
  } 
  
  return status; 
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e175      	b.n	8004688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800439c:	2201      	movs	r2, #1
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	f040 8164 	bne.w	8004682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d005      	beq.n	80043d2 <HAL_GPIO_Init+0x56>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d130      	bne.n	8004434 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004408:	2201      	movs	r2, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 0201 	and.w	r2, r3, #1
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b03      	cmp	r3, #3
 800443e:	d017      	beq.n	8004470 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d123      	bne.n	80044c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	08da      	lsrs	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3208      	adds	r2, #8
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	220f      	movs	r2, #15
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0203 	and.w	r2, r3, #3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80be 	beq.w	8004682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004506:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <HAL_GPIO_Init+0x324>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a65      	ldr	r2, [pc, #404]	; (80046a0 <HAL_GPIO_Init+0x324>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_GPIO_Init+0x324>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800451e:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <HAL_GPIO_Init+0x328>)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	3302      	adds	r3, #2
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a58      	ldr	r2, [pc, #352]	; (80046a8 <HAL_GPIO_Init+0x32c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d037      	beq.n	80045ba <HAL_GPIO_Init+0x23e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a57      	ldr	r2, [pc, #348]	; (80046ac <HAL_GPIO_Init+0x330>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d031      	beq.n	80045b6 <HAL_GPIO_Init+0x23a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d02b      	beq.n	80045b2 <HAL_GPIO_Init+0x236>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a55      	ldr	r2, [pc, #340]	; (80046b4 <HAL_GPIO_Init+0x338>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d025      	beq.n	80045ae <HAL_GPIO_Init+0x232>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a54      	ldr	r2, [pc, #336]	; (80046b8 <HAL_GPIO_Init+0x33c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <HAL_GPIO_Init+0x22e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a53      	ldr	r2, [pc, #332]	; (80046bc <HAL_GPIO_Init+0x340>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d019      	beq.n	80045a6 <HAL_GPIO_Init+0x22a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_GPIO_Init+0x344>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_GPIO_Init+0x226>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <HAL_GPIO_Init+0x348>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00d      	beq.n	800459e <HAL_GPIO_Init+0x222>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <HAL_GPIO_Init+0x34c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <HAL_GPIO_Init+0x21e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a4f      	ldr	r2, [pc, #316]	; (80046cc <HAL_GPIO_Init+0x350>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d101      	bne.n	8004596 <HAL_GPIO_Init+0x21a>
 8004592:	2309      	movs	r3, #9
 8004594:	e012      	b.n	80045bc <HAL_GPIO_Init+0x240>
 8004596:	230a      	movs	r3, #10
 8004598:	e010      	b.n	80045bc <HAL_GPIO_Init+0x240>
 800459a:	2308      	movs	r3, #8
 800459c:	e00e      	b.n	80045bc <HAL_GPIO_Init+0x240>
 800459e:	2307      	movs	r3, #7
 80045a0:	e00c      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045a2:	2306      	movs	r3, #6
 80045a4:	e00a      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e008      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045aa:	2304      	movs	r3, #4
 80045ac:	e006      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045ae:	2303      	movs	r3, #3
 80045b0:	e004      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_GPIO_Init+0x240>
 80045ba:	2300      	movs	r3, #0
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f002 0203 	and.w	r2, r2, #3
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	4093      	lsls	r3, r2
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045cc:	4935      	ldr	r1, [pc, #212]	; (80046a4 <HAL_GPIO_Init+0x328>)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045da:	4b3d      	ldr	r3, [pc, #244]	; (80046d0 <HAL_GPIO_Init+0x354>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fe:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800462e:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <HAL_GPIO_Init+0x354>)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <HAL_GPIO_Init+0x354>)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	f67f ae86 	bls.w	800439c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40013800 	.word	0x40013800
 80046a8:	40020000 	.word	0x40020000
 80046ac:	40020400 	.word	0x40020400
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40021400 	.word	0x40021400
 80046c0:	40021800 	.word	0x40021800
 80046c4:	40021c00 	.word	0x40021c00
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40022400 	.word	0x40022400
 80046d0:	40013c00 	.word	0x40013c00

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004710:	f7ff f976 	bl	8003a00 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e067      	b.n	80047f0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fc fb33 	bl	8000da0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800473a:	f241 3188 	movw	r1, #5000	; 0x1388
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f85e 	bl	8004800 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	2120      	movs	r1, #32
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f856 	bl	800481c <QSPI_WaitFlagStateUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d135      	bne.n	80047e6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_QSPI_Init+0xf0>)
 8004782:	4013      	ands	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6852      	ldr	r2, [r2, #4]
 8004788:	0611      	lsls	r1, r2, #24
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68d2      	ldr	r2, [r2, #12]
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	69d2      	ldr	r2, [r2, #28]
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a12      	ldr	r2, [r2, #32]
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_QSPI_Init+0xf4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6912      	ldr	r2, [r2, #16]
 80047b2:	0411      	lsls	r1, r2, #16
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6952      	ldr	r2, [r2, #20]
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6992      	ldr	r2, [r2, #24]
 80047be:	4311      	orrs	r1, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80047ee:	7afb      	ldrb	r3, [r7, #11]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	00ffff2f 	.word	0x00ffff2f
 80047fc:	ffe0f8fe 	.word	0xffe0f8fe

08004800 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800482c:	e01a      	b.n	8004864 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d016      	beq.n	8004864 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7ff f8e3 	bl	8003a00 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2204      	movs	r2, #4
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e00e      	b.n	8004882 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d1d6      	bne.n	800482e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e29b      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8087 	beq.w	80049be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b0:	4b96      	ldr	r3, [pc, #600]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048bc:	4b93      	ldr	r3, [pc, #588]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d112      	bne.n	80048ee <HAL_RCC_OscConfig+0x62>
 80048c8:	4b90      	ldr	r3, [pc, #576]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d10b      	bne.n	80048ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d6:	4b8d      	ldr	r3, [pc, #564]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d06c      	beq.n	80049bc <HAL_RCC_OscConfig+0x130>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d168      	bne.n	80049bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e275      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x7a>
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e02e      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x9c>
 800490e:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7b      	ldr	r2, [pc, #492]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0xc0>
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 800494c:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6b      	ldr	r2, [pc, #428]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7ff f848 	bl	8003a00 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7ff f844 	bl	8003a00 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e229      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7ff f834 	bl	8003a00 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7ff f830 	bl	8003a00 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e215      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x110>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d069      	beq.n	8004a9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ca:	4b50      	ldr	r3, [pc, #320]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x190>
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x17a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1e9      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e040      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d023      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fe ffe6 	bl	8003a00 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fe ffe2 	bl	8003a00 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1c7      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a56:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4929      	ldr	r1, [pc, #164]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	e018      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe ffc2 	bl	8003a00 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fe ffbe 	bl	8003a00 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1a3      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d038      	beq.n	8004b1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fe ff9f 	bl	8003a00 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fe ff9b 	bl	8003a00 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e180      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x23a>
 8004ae4:	e01a      	b.n	8004b1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fe ff85 	bl	8003a00 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fe ff81 	bl	8003a00 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d903      	bls.n	8004b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e166      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
 8004b0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b10:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ee      	bne.n	8004afa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80a4 	beq.w	8004c72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b8c      	ldr	r3, [pc, #560]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a88      	ldr	r2, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b86      	ldr	r3, [pc, #536]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b52:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b5e:	4b80      	ldr	r3, [pc, #512]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe ff49 	bl	8003a00 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fe ff45 	bl	8003a00 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b64      	cmp	r3, #100	; 0x64
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e12a      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x31a>
 8004b98:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e02d      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x33c>
 8004bae:	4b6b      	ldr	r3, [pc, #428]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a6a      	ldr	r2, [pc, #424]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a67      	ldr	r2, [pc, #412]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	e01c      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d10c      	bne.n	8004bea <HAL_RCC_OscConfig+0x35e>
 8004bd0:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a61      	ldr	r2, [pc, #388]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70
 8004bdc:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a5e      	ldr	r2, [pc, #376]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	e00b      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004bea:	4b5c      	ldr	r3, [pc, #368]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4a5b      	ldr	r2, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d015      	beq.n	8004c36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fef9 	bl	8003a00 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fe fef5 	bl	8003a00 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0d8      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ee      	beq.n	8004c12 <HAL_RCC_OscConfig+0x386>
 8004c34:	e014      	b.n	8004c60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fe fee3 	bl	8003a00 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fe fedf 	bl	8003a00 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0c2      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ee      	bne.n	8004c3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d105      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80ae 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d06d      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d14b      	bne.n	8004d28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a31      	ldr	r2, [pc, #196]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe feb0 	bl	8003a00 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe feac 	bl	8003a00 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e091      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	071b      	lsls	r3, r3, #28
 8004cee:	491b      	ldr	r1, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe fe7e 	bl	8003a00 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe fe7a 	bl	8003a00 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e05f      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x47c>
 8004d26:	e057      	b.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe fe64 	bl	8003a00 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fe fe60 	bl	8003a00 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e045      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4b0>
 8004d5a:	e03d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_RCC_OscConfig+0x558>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d030      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d129      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d122      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d119      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d10f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d0      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b6a      	ldr	r3, [pc, #424]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d910      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4965      	ldr	r1, [pc, #404]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b63      	ldr	r3, [pc, #396]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0b8      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e48:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a58      	ldr	r2, [pc, #352]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	494d      	ldr	r1, [pc, #308]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d040      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d115      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e073      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e06b      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4936      	ldr	r1, [pc, #216]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004edc:	f7fe fd90 	bl	8003a00 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fe fd8c 	bl	8003a00 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e053      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d210      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 020f 	bic.w	r2, r3, #15
 8004f22:	4922      	ldr	r1, [pc, #136]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e032      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f7a:	f000 f821 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8004f8c:	5ccb      	ldrb	r3, [r1, r3]
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8004f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_ClockConfig+0x1d4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fcec 	bl	8003978 <HAL_InitTick>

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023c00 	.word	0x40023c00
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	08009c20 	.word	0x08009c20
 8004fb8:	200004c0 	.word	0x200004c0
 8004fbc:	200004c4 	.word	0x200004c4

08004fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b090      	sub	sp, #64	; 0x40
 8004fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
 8004fcc:	2300      	movs	r3, #0
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd8:	4b59      	ldr	r3, [pc, #356]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d00d      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x40>
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	f200 80a1 	bhi.w	800512c <HAL_RCC_GetSysClockFreq+0x16c>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ff2:	e09b      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff4:	4b53      	ldr	r3, [pc, #332]	; (8005144 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ff8:	e09b      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ffa:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ffc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ffe:	e098      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005000:	4b4f      	ldr	r3, [pc, #316]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800500a:	4b4d      	ldr	r3, [pc, #308]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d028      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005016:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	2200      	movs	r2, #0
 800501e:	623b      	str	r3, [r7, #32]
 8005020:	627a      	str	r2, [r7, #36]	; 0x24
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005028:	2100      	movs	r1, #0
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_GetSysClockFreq+0x188>)
 800502c:	fb03 f201 	mul.w	r2, r3, r1
 8005030:	2300      	movs	r3, #0
 8005032:	fb00 f303 	mul.w	r3, r0, r3
 8005036:	4413      	add	r3, r2
 8005038:	4a43      	ldr	r2, [pc, #268]	; (8005148 <HAL_RCC_GetSysClockFreq+0x188>)
 800503a:	fba0 1202 	umull	r1, r2, r0, r2
 800503e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005040:	460a      	mov	r2, r1
 8005042:	62ba      	str	r2, [r7, #40]	; 0x28
 8005044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005046:	4413      	add	r3, r2
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	2200      	movs	r2, #0
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	61fa      	str	r2, [r7, #28]
 8005052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005056:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800505a:	f7fb f941 	bl	80002e0 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4613      	mov	r3, r2
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005066:	e053      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005068:	4b35      	ldr	r3, [pc, #212]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	2200      	movs	r2, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	617a      	str	r2, [r7, #20]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800507a:	f04f 0b00 	mov.w	fp, #0
 800507e:	4652      	mov	r2, sl
 8005080:	465b      	mov	r3, fp
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	0159      	lsls	r1, r3, #5
 800508c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005090:	0150      	lsls	r0, r2, #5
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	ebb2 080a 	subs.w	r8, r2, sl
 800509a:	eb63 090b 	sbc.w	r9, r3, fp
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050b2:	ebb2 0408 	subs.w	r4, r2, r8
 80050b6:	eb63 0509 	sbc.w	r5, r3, r9
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	00eb      	lsls	r3, r5, #3
 80050c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c8:	00e2      	lsls	r2, r4, #3
 80050ca:	4614      	mov	r4, r2
 80050cc:	461d      	mov	r5, r3
 80050ce:	eb14 030a 	adds.w	r3, r4, sl
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	eb45 030b 	adc.w	r3, r5, fp
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050e6:	4629      	mov	r1, r5
 80050e8:	028b      	lsls	r3, r1, #10
 80050ea:	4621      	mov	r1, r4
 80050ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f0:	4621      	mov	r1, r4
 80050f2:	028a      	lsls	r2, r1, #10
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	2200      	movs	r2, #0
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	60fa      	str	r2, [r7, #12]
 8005100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005104:	f7fb f8ec 	bl	80002e0 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4613      	mov	r3, r2
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	3301      	adds	r3, #1
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800512a:	e002      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_GetSysClockFreq+0x184>)
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005134:	4618      	mov	r0, r3
 8005136:	3740      	adds	r7, #64	; 0x40
 8005138:	46bd      	mov	sp, r7
 800513a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
 8005144:	00f42400 	.word	0x00f42400
 8005148:	017d7840 	.word	0x017d7840

0800514c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_GetHCLKFreq+0x14>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	200004c0 	.word	0x200004c0

08005164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005168:	f7ff fff0 	bl	800514c <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	0a9b      	lsrs	r3, r3, #10
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4903      	ldr	r1, [pc, #12]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40023800 	.word	0x40023800
 8005188:	08009c30 	.word	0x08009c30

0800518c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005190:	f7ff ffdc 	bl	800514c <HAL_RCC_GetHCLKFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	0b5b      	lsrs	r3, r3, #13
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40023800 	.word	0x40023800
 80051b0:	08009c30 	.word	0x08009c30

080051b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d012      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051dc:	4b69      	ldr	r3, [pc, #420]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a68      	ldr	r2, [pc, #416]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051e6:	6093      	str	r3, [r2, #8]
 80051e8:	4b66      	ldr	r3, [pc, #408]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	4964      	ldr	r1, [pc, #400]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800520e:	4b5d      	ldr	r3, [pc, #372]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	4959      	ldr	r1, [pc, #356]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d101      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d017      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800524a:	4b4e      	ldr	r3, [pc, #312]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005250:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	494a      	ldr	r1, [pc, #296]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005268:	d101      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005286:	2301      	movs	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 808b 	beq.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005298:	4b3a      	ldr	r3, [pc, #232]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a39      	ldr	r2, [pc, #228]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
 80052a4:	4b37      	ldr	r3, [pc, #220]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a34      	ldr	r2, [pc, #208]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fe fba0 	bl	8003a00 <HAL_GetTick>
 80052c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c4:	f7fe fb9c 	bl	8003a00 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e38f      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052d6:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052e2:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d035      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d02e      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005300:	4b20      	ldr	r3, [pc, #128]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005316:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005322:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d114      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fe fb64 	bl	8003a00 <HAL_GetTick>
 8005338:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533a:	e00a      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fe fb60 	bl	8003a00 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e351      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0ee      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536a:	d111      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800537a:	400b      	ands	r3, r1
 800537c:	4901      	ldr	r1, [pc, #4]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
 8005382:	e00b      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005384:	40023800 	.word	0x40023800
 8005388:	40007000 	.word	0x40007000
 800538c:	0ffffcff 	.word	0x0ffffcff
 8005390:	4bac      	ldr	r3, [pc, #688]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4aab      	ldr	r2, [pc, #684]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800539a:	6093      	str	r3, [r2, #8]
 800539c:	4ba9      	ldr	r3, [pc, #676]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a8:	49a6      	ldr	r1, [pc, #664]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053ba:	4ba2      	ldr	r3, [pc, #648]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	4aa0      	ldr	r2, [pc, #640]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053ca:	4b9e      	ldr	r3, [pc, #632]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	499b      	ldr	r1, [pc, #620]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e8:	4b96      	ldr	r3, [pc, #600]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f6:	4993      	ldr	r1, [pc, #588]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800540a:	4b8e      	ldr	r3, [pc, #568]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005418:	498a      	ldr	r1, [pc, #552]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800542c:	4b85      	ldr	r3, [pc, #532]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543a:	4982      	ldr	r1, [pc, #520]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800544e:	4b7d      	ldr	r3, [pc, #500]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	4979      	ldr	r1, [pc, #484]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005470:	4b74      	ldr	r3, [pc, #464]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f023 0203 	bic.w	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	4971      	ldr	r1, [pc, #452]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005492:	4b6c      	ldr	r3, [pc, #432]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f023 020c 	bic.w	r2, r3, #12
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a0:	4968      	ldr	r1, [pc, #416]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054b4:	4b63      	ldr	r3, [pc, #396]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	4960      	ldr	r1, [pc, #384]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054d6:	4b5b      	ldr	r3, [pc, #364]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	4957      	ldr	r1, [pc, #348]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054f8:	4b52      	ldr	r3, [pc, #328]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	494f      	ldr	r1, [pc, #316]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800551a:	4b4a      	ldr	r3, [pc, #296]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	4946      	ldr	r1, [pc, #280]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800553c:	4b41      	ldr	r3, [pc, #260]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	493e      	ldr	r1, [pc, #248]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800555e:	4b39      	ldr	r3, [pc, #228]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556c:	4935      	ldr	r1, [pc, #212]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005580:	4b30      	ldr	r3, [pc, #192]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558e:	492d      	ldr	r1, [pc, #180]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d011      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055a2:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b0:	4924      	ldr	r1, [pc, #144]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c0:	d101      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e2:	4b18      	ldr	r3, [pc, #96]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f0:	4914      	ldr	r1, [pc, #80]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005614:	490b      	ldr	r1, [pc, #44]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00f      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005638:	4902      	ldr	r1, [pc, #8]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005640:	e002      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005654:	4b8a      	ldr	r3, [pc, #552]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800565a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	4986      	ldr	r1, [pc, #536]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005678:	4b81      	ldr	r3, [pc, #516]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005688:	497d      	ldr	r1, [pc, #500]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d006      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80d6 	beq.w	8005850 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056a4:	4b76      	ldr	r3, [pc, #472]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a75      	ldr	r2, [pc, #468]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b0:	f7fe f9a6 	bl	8003a00 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056b8:	f7fe f9a2 	bl	8003a00 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e195      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056ca:	4b6d      	ldr	r3, [pc, #436]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11d      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056ea:	4b65      	ldr	r3, [pc, #404]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056f8:	4b61      	ldr	r3, [pc, #388]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	0e1b      	lsrs	r3, r3, #24
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	019a      	lsls	r2, r3, #6
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	4958      	ldr	r1, [pc, #352]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005744:	2b00      	cmp	r3, #0
 8005746:	d02e      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005750:	d129      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005752:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005760:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005766:	0f1b      	lsrs	r3, r3, #28
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	019a      	lsls	r2, r3, #6
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	061b      	lsls	r3, r3, #24
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	071b      	lsls	r3, r3, #28
 8005786:	493e      	ldr	r1, [pc, #248]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800578e:	4b3c      	ldr	r3, [pc, #240]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005794:	f023 021f 	bic.w	r2, r3, #31
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	3b01      	subs	r3, #1
 800579e:	4938      	ldr	r1, [pc, #224]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01d      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b8:	0e1b      	lsrs	r3, r3, #24
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057c0:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	0f1b      	lsrs	r3, r3, #28
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	019a      	lsls	r2, r3, #6
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	431a      	orrs	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	4926      	ldr	r1, [pc, #152]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	019a      	lsls	r2, r3, #6
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	071b      	lsls	r3, r3, #28
 8005816:	491a      	ldr	r1, [pc, #104]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582a:	f7fe f8e9 	bl	8003a00 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005832:	f7fe f8e5 	bl	8003a00 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b64      	cmp	r3, #100	; 0x64
 800583e:	d901      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e0d8      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	f040 80ce 	bne.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a08      	ldr	r2, [pc, #32]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005864:	f7fe f8cc 	bl	8003a00 <HAL_GetTick>
 8005868:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800586a:	e00b      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800586c:	f7fe f8c8 	bl	8003a00 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d904      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e0bb      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005884:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005890:	d0ec      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02e      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d12a      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058ba:	4b51      	ldr	r3, [pc, #324]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058c8:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	0f1b      	lsrs	r3, r3, #28
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	019a      	lsls	r2, r3, #6
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	4944      	ldr	r1, [pc, #272]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058f6:	4b42      	ldr	r3, [pc, #264]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	3b01      	subs	r3, #1
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	493d      	ldr	r1, [pc, #244]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d022      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005924:	d11d      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005926:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	0e1b      	lsrs	r3, r3, #24
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005934:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	0f1b      	lsrs	r3, r3, #28
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	019a      	lsls	r2, r3, #6
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	431a      	orrs	r2, r3
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	431a      	orrs	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	071b      	lsls	r3, r3, #28
 800595a:	4929      	ldr	r1, [pc, #164]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d028      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	019a      	lsls	r2, r3, #6
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	431a      	orrs	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	4917      	ldr	r1, [pc, #92]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4911      	ldr	r1, [pc, #68]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059cc:	f7fe f818 	bl	8003a00 <HAL_GetTick>
 80059d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059d4:	f7fe f814 	bl	8003a00 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e007      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f2:	d1ef      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800

08005a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e09d      	b.n	8005b52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d108      	bne.n	8005a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a26:	d009      	beq.n	8005a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	61da      	str	r2, [r3, #28]
 8005a2e:	e005      	b.n	8005a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb fad8 	bl	800100c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7c:	d902      	bls.n	8005a84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e002      	b.n	8005a8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_Init+0xa0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 0204 	and.w	r2, r3, #4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b20:	ea42 0103 	orr.w	r1, r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_Transmit+0x22>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e158      	b.n	8005e2e <HAL_SPI_Transmit+0x2d4>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fd ff3c 	bl	8003a00 <HAL_GetTick>
 8005b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b9e:	e13d      	b.n	8005e1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Transmit+0x52>
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bb0:	e134      	b.n	8005e1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d10f      	bne.n	8005c1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c44:	d94b      	bls.n	8005cde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_Transmit+0xfa>
 8005c4e:	8afb      	ldrh	r3, [r7, #22]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d13e      	bne.n	8005cd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c9a      	adds	r2, r3, #2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c78:	e02b      	b.n	8005cd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d112      	bne.n	8005cae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cac:	e011      	b.n	8005cd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cae:	f7fd fea7 	bl	8003a00 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d803      	bhi.n	8005cc6 <HAL_SPI_Transmit+0x16c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Transmit+0x172>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cd0:	e0a4      	b.n	8005e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1ce      	bne.n	8005c7a <HAL_SPI_Transmit+0x120>
 8005cdc:	e07c      	b.n	8005dd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_SPI_Transmit+0x192>
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d170      	bne.n	8005dce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d912      	bls.n	8005d1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	881a      	ldrh	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	1c9a      	adds	r2, r3, #2
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b02      	subs	r3, #2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d1a:	e058      	b.n	8005dce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	7812      	ldrb	r2, [r2, #0]
 8005d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d42:	e044      	b.n	8005dce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d12b      	bne.n	8005daa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d912      	bls.n	8005d82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	1c9a      	adds	r2, r3, #2
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b02      	subs	r3, #2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d80:	e025      	b.n	8005dce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005da8:	e011      	b.n	8005dce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005daa:	f7fd fe29 	bl	8003a00 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d803      	bhi.n	8005dc2 <HAL_SPI_Transmit+0x268>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d102      	bne.n	8005dc8 <HAL_SPI_Transmit+0x26e>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dcc:	e026      	b.n	8005e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1b5      	bne.n	8005d44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fd07 	bl	80067f0 <SPI_EndRxTxTransaction>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e000      	b.n	8005e1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b088      	sub	sp, #32
 8005e3a:	af02      	add	r7, sp, #8
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e52:	d112      	bne.n	8005e7a <HAL_SPI_Receive+0x44>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10e      	bne.n	8005e7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f910 	bl	8006096 <HAL_SPI_TransmitReceive>
 8005e76:	4603      	mov	r3, r0
 8005e78:	e109      	b.n	800608e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_SPI_Receive+0x52>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e102      	b.n	800608e <HAL_SPI_Receive+0x258>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e90:	f7fd fdb6 	bl	8003a00 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ea6:	e0e9      	b.n	800607c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_SPI_Receive+0x7e>
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eb8:	e0e0      	b.n	800607c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f04:	d908      	bls.n	8005f18 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	e007      	b.n	8005f28 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f26:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f30:	d10f      	bne.n	8005f52 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d007      	beq.n	8005f70 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f78:	d867      	bhi.n	800604a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f7a:	e030      	b.n	8005fde <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d117      	bne.n	8005fba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f103 020c 	add.w	r2, r3, #12
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	7812      	ldrb	r2, [r2, #0]
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005fb8:	e011      	b.n	8005fde <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fba:	f7fd fd21 	bl	8003a00 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Receive+0x19c>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Receive+0x1a2>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fdc:	e04e      	b.n	800607c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1c8      	bne.n	8005f7c <HAL_SPI_Receive+0x146>
 8005fea:	e034      	b.n	8006056 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d115      	bne.n	8006026 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	b292      	uxth	r2, r2
 8006006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	1c9a      	adds	r2, r3, #2
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006024:	e011      	b.n	800604a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006026:	f7fd fceb 	bl	8003a00 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d803      	bhi.n	800603e <HAL_SPI_Receive+0x208>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d102      	bne.n	8006044 <HAL_SPI_Receive+0x20e>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006048:	e018      	b.n	800607c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ca      	bne.n	8005fec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fb4c 	bl	80066f8 <SPI_EndRxTransaction>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
 8006078:	e000      	b.n	800607c <HAL_SPI_Receive+0x246>
  }

error :
 800607a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b08a      	sub	sp, #40	; 0x28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060a4:	2301      	movs	r3, #1
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x26>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e1fb      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x41e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060c4:	f7fd fc9c 	bl	8003a00 <HAL_GetTick>
 80060c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060d8:	887b      	ldrh	r3, [r7, #2]
 80060da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060dc:	887b      	ldrh	r3, [r7, #2]
 80060de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060e0:	7efb      	ldrb	r3, [r7, #27]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d00e      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x6e>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ec:	d106      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x66>
 80060f6:	7efb      	ldrb	r3, [r7, #27]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d003      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006102:	e1cd      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_SPI_TransmitReceive+0x80>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_SPI_TransmitReceive+0x80>
 8006110:	887b      	ldrh	r3, [r7, #2]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800611c:	e1c0      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b04      	cmp	r3, #4
 8006128:	d003      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2205      	movs	r2, #5
 800612e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	887a      	ldrh	r2, [r7, #2]
 800614a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	887a      	ldrh	r2, [r7, #2]
 8006158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	887a      	ldrh	r2, [r7, #2]
 800615e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006174:	d802      	bhi.n	800617c <HAL_SPI_TransmitReceive+0xe6>
 8006176:	8a3b      	ldrh	r3, [r7, #16]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d908      	bls.n	800618e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	e007      	b.n	800619e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800619c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d007      	beq.n	80061bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061c4:	d97c      	bls.n	80062c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_TransmitReceive+0x13e>
 80061ce:	8a7b      	ldrh	r3, [r7, #18]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d169      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	881a      	ldrh	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	1c9a      	adds	r2, r3, #2
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f8:	e056      	b.n	80062a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b02      	cmp	r3, #2
 8006206:	d11b      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x1aa>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x1aa>
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	2b01      	cmp	r3, #1
 8006216:	d113      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	881a      	ldrh	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	1c9a      	adds	r2, r3, #2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d11c      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x1f2>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d016      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	b292      	uxth	r2, r2
 8006266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	1c9a      	adds	r2, r3, #2
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006284:	2301      	movs	r3, #1
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006288:	f7fd fbba 	bl	8003a00 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006294:	429a      	cmp	r2, r3
 8006296:	d807      	bhi.n	80062a8 <HAL_SPI_TransmitReceive+0x212>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d003      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062a6:	e0fb      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1a3      	bne.n	80061fa <HAL_SPI_TransmitReceive+0x164>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d19d      	bne.n	80061fa <HAL_SPI_TransmitReceive+0x164>
 80062be:	e0df      	b.n	8006480 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x23a>
 80062c8:	8a7b      	ldrh	r3, [r7, #18]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	f040 80cb 	bne.w	8006466 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d912      	bls.n	8006300 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	881a      	ldrh	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	1c9a      	adds	r2, r3, #2
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b02      	subs	r3, #2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062fe:	e0b2      	b.n	8006466 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006326:	e09e      	b.n	8006466 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d134      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x30a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d02f      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x30a>
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	2b01      	cmp	r3, #1
 8006344:	d12c      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	d912      	bls.n	8006376 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b02      	subs	r3, #2
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006374:	e012      	b.n	800639c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d148      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x3aa>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d042      	beq.n	8006440 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d923      	bls.n	800640e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	b292      	uxth	r2, r2
 80063d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b02      	subs	r3, #2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d81f      	bhi.n	800643c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	e016      	b.n	800643c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f103 020c 	add.w	r2, r3, #12
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800643c:	2301      	movs	r3, #1
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006440:	f7fd fade 	bl	8003a00 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644c:	429a      	cmp	r2, r3
 800644e:	d803      	bhi.n	8006458 <HAL_SPI_TransmitReceive+0x3c2>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d102      	bne.n	800645e <HAL_SPI_TransmitReceive+0x3c8>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006464:	e01c      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	f47f af5b 	bne.w	8006328 <HAL_SPI_TransmitReceive+0x292>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f af54 	bne.w	8006328 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f9b3 	bl	80067f0 <SPI_EndRxTxTransaction>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d006      	beq.n	800649e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
 800649c:	e000      	b.n	80064a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800649e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	; 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064cc:	f7fd fa98 	bl	8003a00 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4413      	add	r3, r2
 80064da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064dc:	f7fd fa90 	bl	8003a00 <HAL_GetTick>
 80064e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064e2:	4b39      	ldr	r3, [pc, #228]	; (80065c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	015b      	lsls	r3, r3, #5
 80064e8:	0d1b      	lsrs	r3, r3, #20
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064f2:	e054      	b.n	800659e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	d050      	beq.n	800659e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064fc:	f7fd fa80 	bl	8003a00 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	429a      	cmp	r2, r3
 800650a:	d902      	bls.n	8006512 <SPI_WaitFlagStateUntilTimeout+0x56>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d13d      	bne.n	800658e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652a:	d111      	bne.n	8006550 <SPI_WaitFlagStateUntilTimeout+0x94>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006534:	d004      	beq.n	8006540 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653e:	d107      	bne.n	8006550 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006558:	d10f      	bne.n	800657a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e017      	b.n	80065be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	3b01      	subs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bf0c      	ite	eq
 80065ae:	2301      	moveq	r3, #1
 80065b0:	2300      	movne	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d19b      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200004c0 	.word	0x200004c0

080065cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08a      	sub	sp, #40	; 0x28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065de:	f7fd fa0f 	bl	8003a00 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	4413      	add	r3, r2
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80065ee:	f7fd fa07 	bl	8003a00 <HAL_GetTick>
 80065f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065fc:	4b3d      	ldr	r3, [pc, #244]	; (80066f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	00da      	lsls	r2, r3, #3
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	0d1b      	lsrs	r3, r3, #20
 800660c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006614:	e060      	b.n	80066d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800661c:	d107      	bne.n	800662e <SPI_WaitFifoStateUntilTimeout+0x62>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800662c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d050      	beq.n	80066d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006636:	f7fd f9e3 	bl	8003a00 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	429a      	cmp	r2, r3
 8006644:	d902      	bls.n	800664c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d13d      	bne.n	80066c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800665a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006664:	d111      	bne.n	800668a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666e:	d004      	beq.n	800667a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006678:	d107      	bne.n	800668a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006688:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006692:	d10f      	bne.n	80066b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e010      	b.n	80066ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d196      	bne.n	8006616 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3728      	adds	r7, #40	; 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	200004c0 	.word	0x200004c0

080066f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670c:	d111      	bne.n	8006732 <SPI_EndRxTransaction+0x3a>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006716:	d004      	beq.n	8006722 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d107      	bne.n	8006732 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673a:	d112      	bne.n	8006762 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff feb8 	bl	80064bc <SPI_WaitFlagStateUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d021      	beq.n	8006796 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e03d      	b.n	80067de <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <SPI_EndRxTransaction+0xf0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <SPI_EndRxTransaction+0xf4>)
 8006768:	fba2 2303 	umull	r2, r3, r2, r3
 800676c:	0d5b      	lsrs	r3, r3, #21
 800676e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3b01      	subs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d0f2      	beq.n	8006778 <SPI_EndRxTransaction+0x80>
 8006792:	e000      	b.n	8006796 <SPI_EndRxTransaction+0x9e>
        break;
 8006794:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679e:	d11d      	bne.n	80067dc <SPI_EndRxTransaction+0xe4>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a8:	d004      	beq.n	80067b4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d113      	bne.n	80067dc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff ff03 	bl	80065cc <SPI_WaitFifoStateUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	f043 0220 	orr.w	r2, r3, #32
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e000      	b.n	80067de <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200004c0 	.word	0x200004c0
 80067ec:	165e9f81 	.word	0x165e9f81

080067f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2200      	movs	r2, #0
 8006804:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fedf 	bl	80065cc <SPI_WaitFifoStateUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006818:	f043 0220 	orr.w	r2, r3, #32
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e046      	b.n	80068b2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006824:	4b25      	ldr	r3, [pc, #148]	; (80068bc <SPI_EndRxTxTransaction+0xcc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <SPI_EndRxTxTransaction+0xd0>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	0d5b      	lsrs	r3, r3, #21
 8006830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006834:	fb02 f303 	mul.w	r3, r2, r3
 8006838:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006842:	d112      	bne.n	800686a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	2180      	movs	r1, #128	; 0x80
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fe34 	bl	80064bc <SPI_WaitFlagStateUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685e:	f043 0220 	orr.w	r2, r3, #32
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e023      	b.n	80068b2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3b01      	subs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006880:	2b80      	cmp	r3, #128	; 0x80
 8006882:	d0f2      	beq.n	800686a <SPI_EndRxTxTransaction+0x7a>
 8006884:	e000      	b.n	8006888 <SPI_EndRxTxTransaction+0x98>
        break;
 8006886:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff fe99 	bl	80065cc <SPI_WaitFifoStateUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e000      	b.n	80068b2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200004c0 	.word	0x200004c0
 80068c0:	165e9f81 	.word	0x165e9f81

080068c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e049      	b.n	800696a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fa fd98 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f000 f836 	bl	8006974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a40      	ldr	r2, [pc, #256]	; (8006a88 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d00f      	beq.n	80069b4 <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3d      	ldr	r2, [pc, #244]	; (8006a8c <TIM_Base_SetConfig+0x118>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00b      	beq.n	80069b4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3c      	ldr	r2, [pc, #240]	; (8006a90 <TIM_Base_SetConfig+0x11c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d007      	beq.n	80069b4 <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3b      	ldr	r2, [pc, #236]	; (8006a94 <TIM_Base_SetConfig+0x120>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a3a      	ldr	r2, [pc, #232]	; (8006a98 <TIM_Base_SetConfig+0x124>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d108      	bne.n	80069c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2f      	ldr	r2, [pc, #188]	; (8006a88 <TIM_Base_SetConfig+0x114>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d02b      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d027      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2c      	ldr	r2, [pc, #176]	; (8006a8c <TIM_Base_SetConfig+0x118>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d023      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2b      	ldr	r2, [pc, #172]	; (8006a90 <TIM_Base_SetConfig+0x11c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01f      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2a      	ldr	r2, [pc, #168]	; (8006a94 <TIM_Base_SetConfig+0x120>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01b      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <TIM_Base_SetConfig+0x124>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d017      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <TIM_Base_SetConfig+0x128>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <TIM_Base_SetConfig+0x12c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a26      	ldr	r2, [pc, #152]	; (8006aa4 <TIM_Base_SetConfig+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <TIM_Base_SetConfig+0x134>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a24      	ldr	r2, [pc, #144]	; (8006aac <TIM_Base_SetConfig+0x138>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <TIM_Base_SetConfig+0x13c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <TIM_Base_SetConfig+0x114>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_Base_SetConfig+0xf8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <TIM_Base_SetConfig+0x124>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d103      	bne.n	8006a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	615a      	str	r2, [r3, #20]
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800
 8006aa8:	40001800 	.word	0x40001800
 8006aac:	40001c00 	.word	0x40001c00
 8006ab0:	40002000 	.word	0x40002000

08006ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e040      	b.n	8006b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fa fd22 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2224      	movs	r2, #36	; 0x24
 8006ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0201 	bic.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fbc2 	bl	800727c <UART_SetConfig>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e022      	b.n	8006b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fe1a 	bl	8007744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fea1 	bl	8007888 <UART_CheckIdleState>
 8006b46:	4603      	mov	r3, r0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d171      	bne.n	8006c4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Transmit+0x24>
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e06a      	b.n	8006c4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2221      	movs	r2, #33	; 0x21
 8006b84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b86:	f7fc ff3b 	bl	8003a00 <HAL_GetTick>
 8006b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	88fa      	ldrh	r2, [r7, #6]
 8006b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba4:	d108      	bne.n	8006bb8 <HAL_UART_Transmit+0x68>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	e003      	b.n	8006bc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bc0:	e02c      	b.n	8006c1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fea8 	bl	8007922 <UART_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e038      	b.n	8006c4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	e007      	b.n	8006c0a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1cc      	bne.n	8006bc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2140      	movs	r1, #64	; 0x40
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fe75 	bl	8007922 <UART_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e005      	b.n	8006c4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0ba      	sub	sp, #232	; 0xe8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c86:	4013      	ands	r3, r2
 8006c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d115      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 82ac 	beq.w	800720e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      }
      return;
 8006cbe:	e2a6      	b.n	800720e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8117 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cda:	4b85      	ldr	r3, [pc, #532]	; (8006ef0 <HAL_UART_IRQHandler+0x298>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 810a 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2201      	movs	r2, #1
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2202      	movs	r2, #2
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3a:	f043 0204 	orr.w	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2204      	movs	r2, #4
 8006d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da6:	f043 0208 	orr.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00c      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8212 	beq.w	8007212 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d005      	beq.n	8006e3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04f      	beq.n	8006eda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fe37 	bl	8007aae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d141      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1d9      	bne.n	8006e4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d013      	beq.n	8006eca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_UART_IRQHandler+0x29c>)
 8006ea8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd f806 	bl	8003ec0 <HAL_DMA_Abort_IT>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e00f      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9b6 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed0:	e00b      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9b2 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	e007      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f9ae 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ee8:	e193      	b.n	8007212 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	bf00      	nop
    return;
 8006eec:	e191      	b.n	8007212 <HAL_UART_IRQHandler+0x5ba>
 8006eee:	bf00      	nop
 8006ef0:	04000120 	.word	0x04000120
 8006ef4:	08007b77 	.word	0x08007b77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 814c 	bne.w	800719a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8145 	beq.w	800719a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 813e 	beq.w	800719a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2210      	movs	r2, #16
 8006f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	f040 80b6 	bne.w	80070a2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8165 	beq.w	8007216 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f080 815d 	bcs.w	8007216 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	f000 8086 	beq.w	8007080 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1da      	bne.n	8006f74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e1      	bne.n	8006fbe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3308      	adds	r3, #8
 800701a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800701e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800702c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e3      	bne.n	8006ffa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800704e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007050:	f023 0310 	bic.w	r3, r3, #16
 8007054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007062:	65bb      	str	r3, [r7, #88]	; 0x58
 8007064:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e4      	bne.n	8007040 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707a:	4618      	mov	r0, r3
 800707c:	f7fc feb0 	bl	8003de0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007092:	b29b      	uxth	r3, r3
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	b29b      	uxth	r3, r3
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8d8 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070a0:	e0b9      	b.n	8007216 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80ab 	beq.w	800721a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80070c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a6 	beq.w	800721a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070f0:	647b      	str	r3, [r7, #68]	; 0x44
 80070f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	623b      	str	r3, [r7, #32]
   return(result);
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007128:	633a      	str	r2, [r7, #48]	; 0x30
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	60fb      	str	r3, [r7, #12]
   return(result);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	69b9      	ldr	r1, [r7, #24]
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	617b      	str	r3, [r7, #20]
   return(result);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e4      	bne.n	8007150 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800718c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f85c 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007198:	e03f      	b.n	800721a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <HAL_UART_IRQHandler+0x56c>
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f853 	bl	8007268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071c2:	e02d      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01c      	beq.n	800721e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
    }
    return;
 80071ec:	e017      	b.n	800721e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d012      	beq.n	8007220 <HAL_UART_IRQHandler+0x5c8>
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fccb 	bl	8007ba2 <UART_EndTransmit_IT>
    return;
 800720c:	e008      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
      return;
 800720e:	bf00      	nop
 8007210:	e006      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007212:	bf00      	nop
 8007214:	e004      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
      return;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <HAL_UART_IRQHandler+0x5c8>
    return;
 800721e:	bf00      	nop
  }

}
 8007220:	37e8      	adds	r7, #232	; 0xe8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop

08007228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4ba6      	ldr	r3, [pc, #664]	; (8007540 <UART_SetConfig+0x2c4>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a94      	ldr	r2, [pc, #592]	; (8007544 <UART_SetConfig+0x2c8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d120      	bne.n	800733a <UART_SetConfig+0xbe>
 80072f8:	4b93      	ldr	r3, [pc, #588]	; (8007548 <UART_SetConfig+0x2cc>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d816      	bhi.n	8007334 <UART_SetConfig+0xb8>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x90>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	0800731d 	.word	0x0800731d
 8007310:	08007329 	.word	0x08007329
 8007314:	08007323 	.word	0x08007323
 8007318:	0800732f 	.word	0x0800732f
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e150      	b.n	80075c4 <UART_SetConfig+0x348>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e14d      	b.n	80075c4 <UART_SetConfig+0x348>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e14a      	b.n	80075c4 <UART_SetConfig+0x348>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e147      	b.n	80075c4 <UART_SetConfig+0x348>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e144      	b.n	80075c4 <UART_SetConfig+0x348>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a83      	ldr	r2, [pc, #524]	; (800754c <UART_SetConfig+0x2d0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d132      	bne.n	80073aa <UART_SetConfig+0x12e>
 8007344:	4b80      	ldr	r3, [pc, #512]	; (8007548 <UART_SetConfig+0x2cc>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	f003 030c 	and.w	r3, r3, #12
 800734e:	2b0c      	cmp	r3, #12
 8007350:	d828      	bhi.n	80073a4 <UART_SetConfig+0x128>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0xdc>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	0800738d 	.word	0x0800738d
 800735c:	080073a5 	.word	0x080073a5
 8007360:	080073a5 	.word	0x080073a5
 8007364:	080073a5 	.word	0x080073a5
 8007368:	08007399 	.word	0x08007399
 800736c:	080073a5 	.word	0x080073a5
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073a5 	.word	0x080073a5
 8007378:	08007393 	.word	0x08007393
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073a5 	.word	0x080073a5
 8007388:	0800739f 	.word	0x0800739f
 800738c:	2300      	movs	r3, #0
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e118      	b.n	80075c4 <UART_SetConfig+0x348>
 8007392:	2302      	movs	r3, #2
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e115      	b.n	80075c4 <UART_SetConfig+0x348>
 8007398:	2304      	movs	r3, #4
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e112      	b.n	80075c4 <UART_SetConfig+0x348>
 800739e:	2308      	movs	r3, #8
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e10f      	b.n	80075c4 <UART_SetConfig+0x348>
 80073a4:	2310      	movs	r3, #16
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e10c      	b.n	80075c4 <UART_SetConfig+0x348>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a68      	ldr	r2, [pc, #416]	; (8007550 <UART_SetConfig+0x2d4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d120      	bne.n	80073f6 <UART_SetConfig+0x17a>
 80073b4:	4b64      	ldr	r3, [pc, #400]	; (8007548 <UART_SetConfig+0x2cc>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073be:	2b30      	cmp	r3, #48	; 0x30
 80073c0:	d013      	beq.n	80073ea <UART_SetConfig+0x16e>
 80073c2:	2b30      	cmp	r3, #48	; 0x30
 80073c4:	d814      	bhi.n	80073f0 <UART_SetConfig+0x174>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d009      	beq.n	80073de <UART_SetConfig+0x162>
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d810      	bhi.n	80073f0 <UART_SetConfig+0x174>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <UART_SetConfig+0x15c>
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d006      	beq.n	80073e4 <UART_SetConfig+0x168>
 80073d6:	e00b      	b.n	80073f0 <UART_SetConfig+0x174>
 80073d8:	2300      	movs	r3, #0
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e0f2      	b.n	80075c4 <UART_SetConfig+0x348>
 80073de:	2302      	movs	r3, #2
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e0ef      	b.n	80075c4 <UART_SetConfig+0x348>
 80073e4:	2304      	movs	r3, #4
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e0ec      	b.n	80075c4 <UART_SetConfig+0x348>
 80073ea:	2308      	movs	r3, #8
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e0e9      	b.n	80075c4 <UART_SetConfig+0x348>
 80073f0:	2310      	movs	r3, #16
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e0e6      	b.n	80075c4 <UART_SetConfig+0x348>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a56      	ldr	r2, [pc, #344]	; (8007554 <UART_SetConfig+0x2d8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d120      	bne.n	8007442 <UART_SetConfig+0x1c6>
 8007400:	4b51      	ldr	r3, [pc, #324]	; (8007548 <UART_SetConfig+0x2cc>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800740a:	2bc0      	cmp	r3, #192	; 0xc0
 800740c:	d013      	beq.n	8007436 <UART_SetConfig+0x1ba>
 800740e:	2bc0      	cmp	r3, #192	; 0xc0
 8007410:	d814      	bhi.n	800743c <UART_SetConfig+0x1c0>
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d009      	beq.n	800742a <UART_SetConfig+0x1ae>
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d810      	bhi.n	800743c <UART_SetConfig+0x1c0>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <UART_SetConfig+0x1a8>
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d006      	beq.n	8007430 <UART_SetConfig+0x1b4>
 8007422:	e00b      	b.n	800743c <UART_SetConfig+0x1c0>
 8007424:	2300      	movs	r3, #0
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e0cc      	b.n	80075c4 <UART_SetConfig+0x348>
 800742a:	2302      	movs	r3, #2
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e0c9      	b.n	80075c4 <UART_SetConfig+0x348>
 8007430:	2304      	movs	r3, #4
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e0c6      	b.n	80075c4 <UART_SetConfig+0x348>
 8007436:	2308      	movs	r3, #8
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e0c3      	b.n	80075c4 <UART_SetConfig+0x348>
 800743c:	2310      	movs	r3, #16
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e0c0      	b.n	80075c4 <UART_SetConfig+0x348>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a44      	ldr	r2, [pc, #272]	; (8007558 <UART_SetConfig+0x2dc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d125      	bne.n	8007498 <UART_SetConfig+0x21c>
 800744c:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <UART_SetConfig+0x2cc>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745a:	d017      	beq.n	800748c <UART_SetConfig+0x210>
 800745c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007460:	d817      	bhi.n	8007492 <UART_SetConfig+0x216>
 8007462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007466:	d00b      	beq.n	8007480 <UART_SetConfig+0x204>
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d811      	bhi.n	8007492 <UART_SetConfig+0x216>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <UART_SetConfig+0x1fe>
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d006      	beq.n	8007486 <UART_SetConfig+0x20a>
 8007478:	e00b      	b.n	8007492 <UART_SetConfig+0x216>
 800747a:	2300      	movs	r3, #0
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e0a1      	b.n	80075c4 <UART_SetConfig+0x348>
 8007480:	2302      	movs	r3, #2
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e09e      	b.n	80075c4 <UART_SetConfig+0x348>
 8007486:	2304      	movs	r3, #4
 8007488:	77fb      	strb	r3, [r7, #31]
 800748a:	e09b      	b.n	80075c4 <UART_SetConfig+0x348>
 800748c:	2308      	movs	r3, #8
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e098      	b.n	80075c4 <UART_SetConfig+0x348>
 8007492:	2310      	movs	r3, #16
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e095      	b.n	80075c4 <UART_SetConfig+0x348>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2f      	ldr	r2, [pc, #188]	; (800755c <UART_SetConfig+0x2e0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d125      	bne.n	80074ee <UART_SetConfig+0x272>
 80074a2:	4b29      	ldr	r3, [pc, #164]	; (8007548 <UART_SetConfig+0x2cc>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b0:	d017      	beq.n	80074e2 <UART_SetConfig+0x266>
 80074b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b6:	d817      	bhi.n	80074e8 <UART_SetConfig+0x26c>
 80074b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074bc:	d00b      	beq.n	80074d6 <UART_SetConfig+0x25a>
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d811      	bhi.n	80074e8 <UART_SetConfig+0x26c>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <UART_SetConfig+0x254>
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074cc:	d006      	beq.n	80074dc <UART_SetConfig+0x260>
 80074ce:	e00b      	b.n	80074e8 <UART_SetConfig+0x26c>
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e076      	b.n	80075c4 <UART_SetConfig+0x348>
 80074d6:	2302      	movs	r3, #2
 80074d8:	77fb      	strb	r3, [r7, #31]
 80074da:	e073      	b.n	80075c4 <UART_SetConfig+0x348>
 80074dc:	2304      	movs	r3, #4
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e070      	b.n	80075c4 <UART_SetConfig+0x348>
 80074e2:	2308      	movs	r3, #8
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e06d      	b.n	80075c4 <UART_SetConfig+0x348>
 80074e8:	2310      	movs	r3, #16
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e06a      	b.n	80075c4 <UART_SetConfig+0x348>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <UART_SetConfig+0x2e4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d138      	bne.n	800756a <UART_SetConfig+0x2ee>
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <UART_SetConfig+0x2cc>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007506:	d017      	beq.n	8007538 <UART_SetConfig+0x2bc>
 8007508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800750c:	d82a      	bhi.n	8007564 <UART_SetConfig+0x2e8>
 800750e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007512:	d00b      	beq.n	800752c <UART_SetConfig+0x2b0>
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007518:	d824      	bhi.n	8007564 <UART_SetConfig+0x2e8>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <UART_SetConfig+0x2aa>
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007522:	d006      	beq.n	8007532 <UART_SetConfig+0x2b6>
 8007524:	e01e      	b.n	8007564 <UART_SetConfig+0x2e8>
 8007526:	2300      	movs	r3, #0
 8007528:	77fb      	strb	r3, [r7, #31]
 800752a:	e04b      	b.n	80075c4 <UART_SetConfig+0x348>
 800752c:	2302      	movs	r3, #2
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e048      	b.n	80075c4 <UART_SetConfig+0x348>
 8007532:	2304      	movs	r3, #4
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e045      	b.n	80075c4 <UART_SetConfig+0x348>
 8007538:	2308      	movs	r3, #8
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e042      	b.n	80075c4 <UART_SetConfig+0x348>
 800753e:	bf00      	nop
 8007540:	efff69f3 	.word	0xefff69f3
 8007544:	40011000 	.word	0x40011000
 8007548:	40023800 	.word	0x40023800
 800754c:	40004400 	.word	0x40004400
 8007550:	40004800 	.word	0x40004800
 8007554:	40004c00 	.word	0x40004c00
 8007558:	40005000 	.word	0x40005000
 800755c:	40011400 	.word	0x40011400
 8007560:	40007800 	.word	0x40007800
 8007564:	2310      	movs	r3, #16
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e02c      	b.n	80075c4 <UART_SetConfig+0x348>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a72      	ldr	r2, [pc, #456]	; (8007738 <UART_SetConfig+0x4bc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d125      	bne.n	80075c0 <UART_SetConfig+0x344>
 8007574:	4b71      	ldr	r3, [pc, #452]	; (800773c <UART_SetConfig+0x4c0>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800757e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007582:	d017      	beq.n	80075b4 <UART_SetConfig+0x338>
 8007584:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007588:	d817      	bhi.n	80075ba <UART_SetConfig+0x33e>
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758e:	d00b      	beq.n	80075a8 <UART_SetConfig+0x32c>
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	d811      	bhi.n	80075ba <UART_SetConfig+0x33e>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <UART_SetConfig+0x326>
 800759a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759e:	d006      	beq.n	80075ae <UART_SetConfig+0x332>
 80075a0:	e00b      	b.n	80075ba <UART_SetConfig+0x33e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e00d      	b.n	80075c4 <UART_SetConfig+0x348>
 80075a8:	2302      	movs	r3, #2
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e00a      	b.n	80075c4 <UART_SetConfig+0x348>
 80075ae:	2304      	movs	r3, #4
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e007      	b.n	80075c4 <UART_SetConfig+0x348>
 80075b4:	2308      	movs	r3, #8
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e004      	b.n	80075c4 <UART_SetConfig+0x348>
 80075ba:	2310      	movs	r3, #16
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e001      	b.n	80075c4 <UART_SetConfig+0x348>
 80075c0:	2310      	movs	r3, #16
 80075c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075cc:	d15b      	bne.n	8007686 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80075ce:	7ffb      	ldrb	r3, [r7, #31]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d828      	bhi.n	8007626 <UART_SetConfig+0x3aa>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x360>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007611 	.word	0x08007611
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007627 	.word	0x08007627
 80075fc:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fd fdb0 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 8007604:	61b8      	str	r0, [r7, #24]
        break;
 8007606:	e013      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007608:	f7fd fdc0 	bl	800518c <HAL_RCC_GetPCLK2Freq>
 800760c:	61b8      	str	r0, [r7, #24]
        break;
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b4b      	ldr	r3, [pc, #300]	; (8007740 <UART_SetConfig+0x4c4>)
 8007612:	61bb      	str	r3, [r7, #24]
        break;
 8007614:	e00c      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fd fcd3 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 800761a:	61b8      	str	r0, [r7, #24]
        break;
 800761c:	e008      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	61bb      	str	r3, [r7, #24]
        break;
 8007624:	e004      	b.n	8007630 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	77bb      	strb	r3, [r7, #30]
        break;
 800762e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d074      	beq.n	8007720 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	005a      	lsls	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	fbb2 f3f3 	udiv	r3, r2, r3
 800764a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b0f      	cmp	r3, #15
 8007650:	d916      	bls.n	8007680 <UART_SetConfig+0x404>
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007658:	d212      	bcs.n	8007680 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f023 030f 	bic.w	r3, r3, #15
 8007662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	b29b      	uxth	r3, r3
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	b29a      	uxth	r2, r3
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	4313      	orrs	r3, r2
 8007674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	89fa      	ldrh	r2, [r7, #14]
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	e04f      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	77bb      	strb	r3, [r7, #30]
 8007684:	e04c      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d828      	bhi.n	80076de <UART_SetConfig+0x462>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x418>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076df 	.word	0x080076df
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076df 	.word	0x080076df
 80076b0:	080076df 	.word	0x080076df
 80076b4:	080076d7 	.word	0x080076d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fd fd54 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 80076bc:	61b8      	str	r0, [r7, #24]
        break;
 80076be:	e013      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fd fd64 	bl	800518c <HAL_RCC_GetPCLK2Freq>
 80076c4:	61b8      	str	r0, [r7, #24]
        break;
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <UART_SetConfig+0x4c4>)
 80076ca:	61bb      	str	r3, [r7, #24]
        break;
 80076cc:	e00c      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ce:	f7fd fc77 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 80076d2:	61b8      	str	r0, [r7, #24]
        break;
 80076d4:	e008      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076da:	61bb      	str	r3, [r7, #24]
        break;
 80076dc:	e004      	b.n	80076e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	77bb      	strb	r3, [r7, #30]
        break;
 80076e6:	bf00      	nop
    }

    if (pclk != 0U)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	085a      	lsrs	r2, r3, #1
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	441a      	add	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b0f      	cmp	r3, #15
 8007706:	d909      	bls.n	800771c <UART_SetConfig+0x4a0>
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770e:	d205      	bcs.n	800771c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e001      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800772c:	7fbb      	ldrb	r3, [r7, #30]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40007c00 	.word	0x40007c00
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400

08007744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01a      	beq.n	800785a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007842:	d10a      	bne.n	800785a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af02      	add	r7, sp, #8
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007898:	f7fc f8b2 	bl	8003a00 <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d10e      	bne.n	80078ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f831 	bl	8007922 <UART_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e027      	b.n	800791a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d10e      	bne.n	80078f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f81b 	bl	8007922 <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e011      	b.n	800791a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b09c      	sub	sp, #112	; 0x70
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007932:	e0a7      	b.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	f000 80a3 	beq.w	8007a84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800793e:	f7fc f85f 	bl	8003a00 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800794a:	429a      	cmp	r2, r3
 800794c:	d302      	bcc.n	8007954 <UART_WaitOnFlagUntilTimeout+0x32>
 800794e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007950:	2b00      	cmp	r3, #0
 8007952:	d13f      	bne.n	80079d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007968:	667b      	str	r3, [r7, #100]	; 0x64
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007974:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e6      	bne.n	8007954 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	663b      	str	r3, [r7, #96]	; 0x60
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80079a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e068      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d050      	beq.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f0:	d148      	bne.n	8007a84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a4e:	623a      	str	r2, [r7, #32]
 8007a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e010      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69da      	ldr	r2, [r3, #28]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	bf0c      	ite	eq
 8007a94:	2301      	moveq	r3, #1
 8007a96:	2300      	movne	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f43f af48 	beq.w	8007934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3770      	adds	r7, #112	; 0x70
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b095      	sub	sp, #84	; 0x54
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d118      	bne.n	8007b56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f023 0310 	bic.w	r3, r3, #16
 8007b38:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e6      	bne.n	8007b24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b6a:	bf00      	nop
 8007b6c:	3754      	adds	r7, #84	; 0x54
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7ff fb51 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b088      	sub	sp, #32
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6979      	ldr	r1, [r7, #20]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e6      	bne.n	8007baa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fb1d 	bl	8007228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bee:	bf00      	nop
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <__errno>:
 8007bf8:	4b01      	ldr	r3, [pc, #4]	; (8007c00 <__errno+0x8>)
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	200004cc 	.word	0x200004cc

08007c04 <__libc_init_array>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4d0d      	ldr	r5, [pc, #52]	; (8007c3c <__libc_init_array+0x38>)
 8007c08:	4c0d      	ldr	r4, [pc, #52]	; (8007c40 <__libc_init_array+0x3c>)
 8007c0a:	1b64      	subs	r4, r4, r5
 8007c0c:	10a4      	asrs	r4, r4, #2
 8007c0e:	2600      	movs	r6, #0
 8007c10:	42a6      	cmp	r6, r4
 8007c12:	d109      	bne.n	8007c28 <__libc_init_array+0x24>
 8007c14:	4d0b      	ldr	r5, [pc, #44]	; (8007c44 <__libc_init_array+0x40>)
 8007c16:	4c0c      	ldr	r4, [pc, #48]	; (8007c48 <__libc_init_array+0x44>)
 8007c18:	f001 fa10 	bl	800903c <_init>
 8007c1c:	1b64      	subs	r4, r4, r5
 8007c1e:	10a4      	asrs	r4, r4, #2
 8007c20:	2600      	movs	r6, #0
 8007c22:	42a6      	cmp	r6, r4
 8007c24:	d105      	bne.n	8007c32 <__libc_init_array+0x2e>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2c:	4798      	blx	r3
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7ee      	b.n	8007c10 <__libc_init_array+0xc>
 8007c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c36:	4798      	blx	r3
 8007c38:	3601      	adds	r6, #1
 8007c3a:	e7f2      	b.n	8007c22 <__libc_init_array+0x1e>
 8007c3c:	0800a1a0 	.word	0x0800a1a0
 8007c40:	0800a1a0 	.word	0x0800a1a0
 8007c44:	0800a1a0 	.word	0x0800a1a0
 8007c48:	0800a1a4 	.word	0x0800a1a4

08007c4c <malloc>:
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <malloc+0xc>)
 8007c4e:	4601      	mov	r1, r0
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f000 b88d 	b.w	8007d70 <_malloc_r>
 8007c56:	bf00      	nop
 8007c58:	200004cc 	.word	0x200004cc

08007c5c <free>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <free+0xc>)
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f000 b819 	b.w	8007c98 <_free_r>
 8007c66:	bf00      	nop
 8007c68:	200004cc 	.word	0x200004cc

08007c6c <memcpy>:
 8007c6c:	440a      	add	r2, r1
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c74:	d100      	bne.n	8007c78 <memcpy+0xc>
 8007c76:	4770      	bx	lr
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c82:	4291      	cmp	r1, r2
 8007c84:	d1f9      	bne.n	8007c7a <memcpy+0xe>
 8007c86:	bd10      	pop	{r4, pc}

08007c88 <memset>:
 8007c88:	4402      	add	r2, r0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <memset+0xa>
 8007c90:	4770      	bx	lr
 8007c92:	f803 1b01 	strb.w	r1, [r3], #1
 8007c96:	e7f9      	b.n	8007c8c <memset+0x4>

08007c98 <_free_r>:
 8007c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	d044      	beq.n	8007d28 <_free_r+0x90>
 8007c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca2:	9001      	str	r0, [sp, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8007caa:	bfb8      	it	lt
 8007cac:	18e4      	addlt	r4, r4, r3
 8007cae:	f000 fc71 	bl	8008594 <__malloc_lock>
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <_free_r+0x94>)
 8007cb4:	9801      	ldr	r0, [sp, #4]
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	b933      	cbnz	r3, 8007cc8 <_free_r+0x30>
 8007cba:	6063      	str	r3, [r4, #4]
 8007cbc:	6014      	str	r4, [r2, #0]
 8007cbe:	b003      	add	sp, #12
 8007cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cc4:	f000 bc6c 	b.w	80085a0 <__malloc_unlock>
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d908      	bls.n	8007cde <_free_r+0x46>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf01      	itttt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	1949      	addeq	r1, r1, r5
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	e7ed      	b.n	8007cba <_free_r+0x22>
 8007cde:	461a      	mov	r2, r3
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_free_r+0x50>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d9fa      	bls.n	8007cde <_free_r+0x46>
 8007ce8:	6811      	ldr	r1, [r2, #0]
 8007cea:	1855      	adds	r5, r2, r1
 8007cec:	42a5      	cmp	r5, r4
 8007cee:	d10b      	bne.n	8007d08 <_free_r+0x70>
 8007cf0:	6824      	ldr	r4, [r4, #0]
 8007cf2:	4421      	add	r1, r4
 8007cf4:	1854      	adds	r4, r2, r1
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	d1e0      	bne.n	8007cbe <_free_r+0x26>
 8007cfc:	681c      	ldr	r4, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	6053      	str	r3, [r2, #4]
 8007d02:	4421      	add	r1, r4
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	e7da      	b.n	8007cbe <_free_r+0x26>
 8007d08:	d902      	bls.n	8007d10 <_free_r+0x78>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	e7d6      	b.n	8007cbe <_free_r+0x26>
 8007d10:	6825      	ldr	r5, [r4, #0]
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf04      	itt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	bf04      	itt	eq
 8007d20:	1949      	addeq	r1, r1, r5
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	6054      	str	r4, [r2, #4]
 8007d26:	e7ca      	b.n	8007cbe <_free_r+0x26>
 8007d28:	b003      	add	sp, #12
 8007d2a:	bd30      	pop	{r4, r5, pc}
 8007d2c:	200008f8 	.word	0x200008f8

08007d30 <sbrk_aligned>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4e0e      	ldr	r6, [pc, #56]	; (8007d6c <sbrk_aligned+0x3c>)
 8007d34:	460c      	mov	r4, r1
 8007d36:	6831      	ldr	r1, [r6, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b911      	cbnz	r1, 8007d42 <sbrk_aligned+0x12>
 8007d3c:	f000 f91a 	bl	8007f74 <_sbrk_r>
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 f915 	bl	8007f74 <_sbrk_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d00a      	beq.n	8007d64 <sbrk_aligned+0x34>
 8007d4e:	1cc4      	adds	r4, r0, #3
 8007d50:	f024 0403 	bic.w	r4, r4, #3
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d007      	beq.n	8007d68 <sbrk_aligned+0x38>
 8007d58:	1a21      	subs	r1, r4, r0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f90a 	bl	8007f74 <_sbrk_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d101      	bne.n	8007d68 <sbrk_aligned+0x38>
 8007d64:	f04f 34ff 	mov.w	r4, #4294967295
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	200008fc 	.word	0x200008fc

08007d70 <_malloc_r>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	1ccd      	adds	r5, r1, #3
 8007d76:	f025 0503 	bic.w	r5, r5, #3
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	2d0c      	cmp	r5, #12
 8007d7e:	bf38      	it	cc
 8007d80:	250c      	movcc	r5, #12
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	4607      	mov	r7, r0
 8007d86:	db01      	blt.n	8007d8c <_malloc_r+0x1c>
 8007d88:	42a9      	cmp	r1, r5
 8007d8a:	d905      	bls.n	8007d98 <_malloc_r+0x28>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	2600      	movs	r6, #0
 8007d92:	4630      	mov	r0, r6
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	4e2e      	ldr	r6, [pc, #184]	; (8007e54 <_malloc_r+0xe4>)
 8007d9a:	f000 fbfb 	bl	8008594 <__malloc_lock>
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	461c      	mov	r4, r3
 8007da2:	bb34      	cbnz	r4, 8007df2 <_malloc_r+0x82>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4638      	mov	r0, r7
 8007da8:	f7ff ffc2 	bl	8007d30 <sbrk_aligned>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	4604      	mov	r4, r0
 8007db0:	d14d      	bne.n	8007e4e <_malloc_r+0xde>
 8007db2:	6834      	ldr	r4, [r6, #0]
 8007db4:	4626      	mov	r6, r4
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d140      	bne.n	8007e3c <_malloc_r+0xcc>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	eb04 0803 	add.w	r8, r4, r3
 8007dc4:	f000 f8d6 	bl	8007f74 <_sbrk_r>
 8007dc8:	4580      	cmp	r8, r0
 8007dca:	d13a      	bne.n	8007e42 <_malloc_r+0xd2>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	3503      	adds	r5, #3
 8007dd0:	1a6d      	subs	r5, r5, r1
 8007dd2:	f025 0503 	bic.w	r5, r5, #3
 8007dd6:	3508      	adds	r5, #8
 8007dd8:	2d0c      	cmp	r5, #12
 8007dda:	bf38      	it	cc
 8007ddc:	250c      	movcc	r5, #12
 8007dde:	4629      	mov	r1, r5
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff ffa5 	bl	8007d30 <sbrk_aligned>
 8007de6:	3001      	adds	r0, #1
 8007de8:	d02b      	beq.n	8007e42 <_malloc_r+0xd2>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	442b      	add	r3, r5
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	e00e      	b.n	8007e10 <_malloc_r+0xa0>
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	1b52      	subs	r2, r2, r5
 8007df6:	d41e      	bmi.n	8007e36 <_malloc_r+0xc6>
 8007df8:	2a0b      	cmp	r2, #11
 8007dfa:	d916      	bls.n	8007e2a <_malloc_r+0xba>
 8007dfc:	1961      	adds	r1, r4, r5
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	6025      	str	r5, [r4, #0]
 8007e02:	bf18      	it	ne
 8007e04:	6059      	strne	r1, [r3, #4]
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	bf08      	it	eq
 8007e0a:	6031      	streq	r1, [r6, #0]
 8007e0c:	5162      	str	r2, [r4, r5]
 8007e0e:	604b      	str	r3, [r1, #4]
 8007e10:	4638      	mov	r0, r7
 8007e12:	f104 060b 	add.w	r6, r4, #11
 8007e16:	f000 fbc3 	bl	80085a0 <__malloc_unlock>
 8007e1a:	f026 0607 	bic.w	r6, r6, #7
 8007e1e:	1d23      	adds	r3, r4, #4
 8007e20:	1af2      	subs	r2, r6, r3
 8007e22:	d0b6      	beq.n	8007d92 <_malloc_r+0x22>
 8007e24:	1b9b      	subs	r3, r3, r6
 8007e26:	50a3      	str	r3, [r4, r2]
 8007e28:	e7b3      	b.n	8007d92 <_malloc_r+0x22>
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	bf0c      	ite	eq
 8007e30:	6032      	streq	r2, [r6, #0]
 8007e32:	605a      	strne	r2, [r3, #4]
 8007e34:	e7ec      	b.n	8007e10 <_malloc_r+0xa0>
 8007e36:	4623      	mov	r3, r4
 8007e38:	6864      	ldr	r4, [r4, #4]
 8007e3a:	e7b2      	b.n	8007da2 <_malloc_r+0x32>
 8007e3c:	4634      	mov	r4, r6
 8007e3e:	6876      	ldr	r6, [r6, #4]
 8007e40:	e7b9      	b.n	8007db6 <_malloc_r+0x46>
 8007e42:	230c      	movs	r3, #12
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 fbaa 	bl	80085a0 <__malloc_unlock>
 8007e4c:	e7a1      	b.n	8007d92 <_malloc_r+0x22>
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	e7de      	b.n	8007e10 <_malloc_r+0xa0>
 8007e52:	bf00      	nop
 8007e54:	200008f8 	.word	0x200008f8

08007e58 <iprintf>:
 8007e58:	b40f      	push	{r0, r1, r2, r3}
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <iprintf+0x2c>)
 8007e5c:	b513      	push	{r0, r1, r4, lr}
 8007e5e:	681c      	ldr	r4, [r3, #0]
 8007e60:	b124      	cbz	r4, 8007e6c <iprintf+0x14>
 8007e62:	69a3      	ldr	r3, [r4, #24]
 8007e64:	b913      	cbnz	r3, 8007e6c <iprintf+0x14>
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 fa8e 	bl	8008388 <__sinit>
 8007e6c:	ab05      	add	r3, sp, #20
 8007e6e:	9a04      	ldr	r2, [sp, #16]
 8007e70:	68a1      	ldr	r1, [r4, #8]
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fd1f 	bl	80088b8 <_vfiprintf_r>
 8007e7a:	b002      	add	sp, #8
 8007e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e80:	b004      	add	sp, #16
 8007e82:	4770      	bx	lr
 8007e84:	200004cc 	.word	0x200004cc

08007e88 <_puts_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	b118      	cbz	r0, 8007e98 <_puts_r+0x10>
 8007e90:	6983      	ldr	r3, [r0, #24]
 8007e92:	b90b      	cbnz	r3, 8007e98 <_puts_r+0x10>
 8007e94:	f000 fa78 	bl	8008388 <__sinit>
 8007e98:	69ab      	ldr	r3, [r5, #24]
 8007e9a:	68ac      	ldr	r4, [r5, #8]
 8007e9c:	b913      	cbnz	r3, 8007ea4 <_puts_r+0x1c>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fa72 	bl	8008388 <__sinit>
 8007ea4:	4b2c      	ldr	r3, [pc, #176]	; (8007f58 <_puts_r+0xd0>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d120      	bne.n	8007eec <_puts_r+0x64>
 8007eaa:	686c      	ldr	r4, [r5, #4]
 8007eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eae:	07db      	lsls	r3, r3, #31
 8007eb0:	d405      	bmi.n	8007ebe <_puts_r+0x36>
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	0598      	lsls	r0, r3, #22
 8007eb6:	d402      	bmi.n	8007ebe <_puts_r+0x36>
 8007eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eba:	f000 fb03 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	0719      	lsls	r1, r3, #28
 8007ec2:	d51d      	bpl.n	8007f00 <_puts_r+0x78>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	b1db      	cbz	r3, 8007f00 <_puts_r+0x78>
 8007ec8:	3e01      	subs	r6, #1
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	60a3      	str	r3, [r4, #8]
 8007ed4:	bb39      	cbnz	r1, 8007f26 <_puts_r+0x9e>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da38      	bge.n	8007f4c <_puts_r+0xc4>
 8007eda:	4622      	mov	r2, r4
 8007edc:	210a      	movs	r1, #10
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 f878 	bl	8007fd4 <__swbuf_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d011      	beq.n	8007f0c <_puts_r+0x84>
 8007ee8:	250a      	movs	r5, #10
 8007eea:	e011      	b.n	8007f10 <_puts_r+0x88>
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <_puts_r+0xd4>)
 8007eee:	429c      	cmp	r4, r3
 8007ef0:	d101      	bne.n	8007ef6 <_puts_r+0x6e>
 8007ef2:	68ac      	ldr	r4, [r5, #8]
 8007ef4:	e7da      	b.n	8007eac <_puts_r+0x24>
 8007ef6:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <_puts_r+0xd8>)
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	bf08      	it	eq
 8007efc:	68ec      	ldreq	r4, [r5, #12]
 8007efe:	e7d5      	b.n	8007eac <_puts_r+0x24>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 f8b8 	bl	8008078 <__swsetup_r>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d0dd      	beq.n	8007ec8 <_puts_r+0x40>
 8007f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f12:	07da      	lsls	r2, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_puts_r+0x9a>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	059b      	lsls	r3, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_puts_r+0x9a>
 8007f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1e:	f000 fad2 	bl	80084c6 <__retarget_lock_release_recursive>
 8007f22:	4628      	mov	r0, r5
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da04      	bge.n	8007f34 <_puts_r+0xac>
 8007f2a:	69a2      	ldr	r2, [r4, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	dc06      	bgt.n	8007f3e <_puts_r+0xb6>
 8007f30:	290a      	cmp	r1, #10
 8007f32:	d004      	beq.n	8007f3e <_puts_r+0xb6>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	7019      	strb	r1, [r3, #0]
 8007f3c:	e7c5      	b.n	8007eca <_puts_r+0x42>
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f847 	bl	8007fd4 <__swbuf_r>
 8007f46:	3001      	adds	r0, #1
 8007f48:	d1bf      	bne.n	8007eca <_puts_r+0x42>
 8007f4a:	e7df      	b.n	8007f0c <_puts_r+0x84>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	250a      	movs	r5, #10
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	6022      	str	r2, [r4, #0]
 8007f54:	701d      	strb	r5, [r3, #0]
 8007f56:	e7db      	b.n	8007f10 <_puts_r+0x88>
 8007f58:	0800a124 	.word	0x0800a124
 8007f5c:	0800a144 	.word	0x0800a144
 8007f60:	0800a104 	.word	0x0800a104

08007f64 <puts>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <puts+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f7ff bf8d 	b.w	8007e88 <_puts_r>
 8007f6e:	bf00      	nop
 8007f70:	200004cc 	.word	0x200004cc

08007f74 <_sbrk_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_sbrk_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7f9 f9de 	bl	8001340 <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_sbrk_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_sbrk_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20000904 	.word	0x20000904

08007f94 <siprintf>:
 8007f94:	b40e      	push	{r1, r2, r3}
 8007f96:	b500      	push	{lr}
 8007f98:	b09c      	sub	sp, #112	; 0x70
 8007f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f9c:	9002      	str	r0, [sp, #8]
 8007f9e:	9006      	str	r0, [sp, #24]
 8007fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fa4:	4809      	ldr	r0, [pc, #36]	; (8007fcc <siprintf+0x38>)
 8007fa6:	9107      	str	r1, [sp, #28]
 8007fa8:	9104      	str	r1, [sp, #16]
 8007faa:	4909      	ldr	r1, [pc, #36]	; (8007fd0 <siprintf+0x3c>)
 8007fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	a902      	add	r1, sp, #8
 8007fb8:	f000 fb54 	bl	8008664 <_svfiprintf_r>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	b01c      	add	sp, #112	; 0x70
 8007fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc8:	b003      	add	sp, #12
 8007fca:	4770      	bx	lr
 8007fcc:	200004cc 	.word	0x200004cc
 8007fd0:	ffff0208 	.word	0xffff0208

08007fd4 <__swbuf_r>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	4614      	mov	r4, r2
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b118      	cbz	r0, 8007fe6 <__swbuf_r+0x12>
 8007fde:	6983      	ldr	r3, [r0, #24]
 8007fe0:	b90b      	cbnz	r3, 8007fe6 <__swbuf_r+0x12>
 8007fe2:	f000 f9d1 	bl	8008388 <__sinit>
 8007fe6:	4b21      	ldr	r3, [pc, #132]	; (800806c <__swbuf_r+0x98>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	d12b      	bne.n	8008044 <__swbuf_r+0x70>
 8007fec:	686c      	ldr	r4, [r5, #4]
 8007fee:	69a3      	ldr	r3, [r4, #24]
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	071a      	lsls	r2, r3, #28
 8007ff6:	d52f      	bpl.n	8008058 <__swbuf_r+0x84>
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	b36b      	cbz	r3, 8008058 <__swbuf_r+0x84>
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1ac0      	subs	r0, r0, r3
 8008002:	6963      	ldr	r3, [r4, #20]
 8008004:	b2f6      	uxtb	r6, r6
 8008006:	4283      	cmp	r3, r0
 8008008:	4637      	mov	r7, r6
 800800a:	dc04      	bgt.n	8008016 <__swbuf_r+0x42>
 800800c:	4621      	mov	r1, r4
 800800e:	4628      	mov	r0, r5
 8008010:	f000 f926 	bl	8008260 <_fflush_r>
 8008014:	bb30      	cbnz	r0, 8008064 <__swbuf_r+0x90>
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	3b01      	subs	r3, #1
 800801a:	60a3      	str	r3, [r4, #8]
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	6022      	str	r2, [r4, #0]
 8008022:	701e      	strb	r6, [r3, #0]
 8008024:	6963      	ldr	r3, [r4, #20]
 8008026:	3001      	adds	r0, #1
 8008028:	4283      	cmp	r3, r0
 800802a:	d004      	beq.n	8008036 <__swbuf_r+0x62>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	07db      	lsls	r3, r3, #31
 8008030:	d506      	bpl.n	8008040 <__swbuf_r+0x6c>
 8008032:	2e0a      	cmp	r6, #10
 8008034:	d104      	bne.n	8008040 <__swbuf_r+0x6c>
 8008036:	4621      	mov	r1, r4
 8008038:	4628      	mov	r0, r5
 800803a:	f000 f911 	bl	8008260 <_fflush_r>
 800803e:	b988      	cbnz	r0, 8008064 <__swbuf_r+0x90>
 8008040:	4638      	mov	r0, r7
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <__swbuf_r+0x9c>)
 8008046:	429c      	cmp	r4, r3
 8008048:	d101      	bne.n	800804e <__swbuf_r+0x7a>
 800804a:	68ac      	ldr	r4, [r5, #8]
 800804c:	e7cf      	b.n	8007fee <__swbuf_r+0x1a>
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <__swbuf_r+0xa0>)
 8008050:	429c      	cmp	r4, r3
 8008052:	bf08      	it	eq
 8008054:	68ec      	ldreq	r4, [r5, #12]
 8008056:	e7ca      	b.n	8007fee <__swbuf_r+0x1a>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f80c 	bl	8008078 <__swsetup_r>
 8008060:	2800      	cmp	r0, #0
 8008062:	d0cb      	beq.n	8007ffc <__swbuf_r+0x28>
 8008064:	f04f 37ff 	mov.w	r7, #4294967295
 8008068:	e7ea      	b.n	8008040 <__swbuf_r+0x6c>
 800806a:	bf00      	nop
 800806c:	0800a124 	.word	0x0800a124
 8008070:	0800a144 	.word	0x0800a144
 8008074:	0800a104 	.word	0x0800a104

08008078 <__swsetup_r>:
 8008078:	4b32      	ldr	r3, [pc, #200]	; (8008144 <__swsetup_r+0xcc>)
 800807a:	b570      	push	{r4, r5, r6, lr}
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	4606      	mov	r6, r0
 8008080:	460c      	mov	r4, r1
 8008082:	b125      	cbz	r5, 800808e <__swsetup_r+0x16>
 8008084:	69ab      	ldr	r3, [r5, #24]
 8008086:	b913      	cbnz	r3, 800808e <__swsetup_r+0x16>
 8008088:	4628      	mov	r0, r5
 800808a:	f000 f97d 	bl	8008388 <__sinit>
 800808e:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <__swsetup_r+0xd0>)
 8008090:	429c      	cmp	r4, r3
 8008092:	d10f      	bne.n	80080b4 <__swsetup_r+0x3c>
 8008094:	686c      	ldr	r4, [r5, #4]
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800809c:	0719      	lsls	r1, r3, #28
 800809e:	d42c      	bmi.n	80080fa <__swsetup_r+0x82>
 80080a0:	06dd      	lsls	r5, r3, #27
 80080a2:	d411      	bmi.n	80080c8 <__swsetup_r+0x50>
 80080a4:	2309      	movs	r3, #9
 80080a6:	6033      	str	r3, [r6, #0]
 80080a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	f04f 30ff 	mov.w	r0, #4294967295
 80080b2:	e03e      	b.n	8008132 <__swsetup_r+0xba>
 80080b4:	4b25      	ldr	r3, [pc, #148]	; (800814c <__swsetup_r+0xd4>)
 80080b6:	429c      	cmp	r4, r3
 80080b8:	d101      	bne.n	80080be <__swsetup_r+0x46>
 80080ba:	68ac      	ldr	r4, [r5, #8]
 80080bc:	e7eb      	b.n	8008096 <__swsetup_r+0x1e>
 80080be:	4b24      	ldr	r3, [pc, #144]	; (8008150 <__swsetup_r+0xd8>)
 80080c0:	429c      	cmp	r4, r3
 80080c2:	bf08      	it	eq
 80080c4:	68ec      	ldreq	r4, [r5, #12]
 80080c6:	e7e6      	b.n	8008096 <__swsetup_r+0x1e>
 80080c8:	0758      	lsls	r0, r3, #29
 80080ca:	d512      	bpl.n	80080f2 <__swsetup_r+0x7a>
 80080cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ce:	b141      	cbz	r1, 80080e2 <__swsetup_r+0x6a>
 80080d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080d4:	4299      	cmp	r1, r3
 80080d6:	d002      	beq.n	80080de <__swsetup_r+0x66>
 80080d8:	4630      	mov	r0, r6
 80080da:	f7ff fddd 	bl	8007c98 <_free_r>
 80080de:	2300      	movs	r3, #0
 80080e0:	6363      	str	r3, [r4, #52]	; 0x34
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	2300      	movs	r3, #0
 80080ec:	6063      	str	r3, [r4, #4]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0308 	orr.w	r3, r3, #8
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	b94b      	cbnz	r3, 8008112 <__swsetup_r+0x9a>
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008108:	d003      	beq.n	8008112 <__swsetup_r+0x9a>
 800810a:	4621      	mov	r1, r4
 800810c:	4630      	mov	r0, r6
 800810e:	f000 fa01 	bl	8008514 <__smakebuf_r>
 8008112:	89a0      	ldrh	r0, [r4, #12]
 8008114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008118:	f010 0301 	ands.w	r3, r0, #1
 800811c:	d00a      	beq.n	8008134 <__swsetup_r+0xbc>
 800811e:	2300      	movs	r3, #0
 8008120:	60a3      	str	r3, [r4, #8]
 8008122:	6963      	ldr	r3, [r4, #20]
 8008124:	425b      	negs	r3, r3
 8008126:	61a3      	str	r3, [r4, #24]
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	b943      	cbnz	r3, 800813e <__swsetup_r+0xc6>
 800812c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008130:	d1ba      	bne.n	80080a8 <__swsetup_r+0x30>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	0781      	lsls	r1, r0, #30
 8008136:	bf58      	it	pl
 8008138:	6963      	ldrpl	r3, [r4, #20]
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	e7f4      	b.n	8008128 <__swsetup_r+0xb0>
 800813e:	2000      	movs	r0, #0
 8008140:	e7f7      	b.n	8008132 <__swsetup_r+0xba>
 8008142:	bf00      	nop
 8008144:	200004cc 	.word	0x200004cc
 8008148:	0800a124 	.word	0x0800a124
 800814c:	0800a144 	.word	0x0800a144
 8008150:	0800a104 	.word	0x0800a104

08008154 <__sflush_r>:
 8008154:	898a      	ldrh	r2, [r1, #12]
 8008156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815a:	4605      	mov	r5, r0
 800815c:	0710      	lsls	r0, r2, #28
 800815e:	460c      	mov	r4, r1
 8008160:	d458      	bmi.n	8008214 <__sflush_r+0xc0>
 8008162:	684b      	ldr	r3, [r1, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dc05      	bgt.n	8008174 <__sflush_r+0x20>
 8008168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc02      	bgt.n	8008174 <__sflush_r+0x20>
 800816e:	2000      	movs	r0, #0
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008176:	2e00      	cmp	r6, #0
 8008178:	d0f9      	beq.n	800816e <__sflush_r+0x1a>
 800817a:	2300      	movs	r3, #0
 800817c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008180:	682f      	ldr	r7, [r5, #0]
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	d032      	beq.n	80081ec <__sflush_r+0x98>
 8008186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	075a      	lsls	r2, r3, #29
 800818c:	d505      	bpl.n	800819a <__sflush_r+0x46>
 800818e:	6863      	ldr	r3, [r4, #4]
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008194:	b10b      	cbz	r3, 800819a <__sflush_r+0x46>
 8008196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	2300      	movs	r3, #0
 800819c:	4602      	mov	r2, r0
 800819e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a0:	6a21      	ldr	r1, [r4, #32]
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b0      	blx	r6
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	d106      	bne.n	80081ba <__sflush_r+0x66>
 80081ac:	6829      	ldr	r1, [r5, #0]
 80081ae:	291d      	cmp	r1, #29
 80081b0:	d82c      	bhi.n	800820c <__sflush_r+0xb8>
 80081b2:	4a2a      	ldr	r2, [pc, #168]	; (800825c <__sflush_r+0x108>)
 80081b4:	40ca      	lsrs	r2, r1
 80081b6:	07d6      	lsls	r6, r2, #31
 80081b8:	d528      	bpl.n	800820c <__sflush_r+0xb8>
 80081ba:	2200      	movs	r2, #0
 80081bc:	6062      	str	r2, [r4, #4]
 80081be:	04d9      	lsls	r1, r3, #19
 80081c0:	6922      	ldr	r2, [r4, #16]
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	d504      	bpl.n	80081d0 <__sflush_r+0x7c>
 80081c6:	1c42      	adds	r2, r0, #1
 80081c8:	d101      	bne.n	80081ce <__sflush_r+0x7a>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b903      	cbnz	r3, 80081d0 <__sflush_r+0x7c>
 80081ce:	6560      	str	r0, [r4, #84]	; 0x54
 80081d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d2:	602f      	str	r7, [r5, #0]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d0ca      	beq.n	800816e <__sflush_r+0x1a>
 80081d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081dc:	4299      	cmp	r1, r3
 80081de:	d002      	beq.n	80081e6 <__sflush_r+0x92>
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7ff fd59 	bl	8007c98 <_free_r>
 80081e6:	2000      	movs	r0, #0
 80081e8:	6360      	str	r0, [r4, #52]	; 0x34
 80081ea:	e7c1      	b.n	8008170 <__sflush_r+0x1c>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	2301      	movs	r3, #1
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b0      	blx	r6
 80081f4:	1c41      	adds	r1, r0, #1
 80081f6:	d1c7      	bne.n	8008188 <__sflush_r+0x34>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0c4      	beq.n	8008188 <__sflush_r+0x34>
 80081fe:	2b1d      	cmp	r3, #29
 8008200:	d001      	beq.n	8008206 <__sflush_r+0xb2>
 8008202:	2b16      	cmp	r3, #22
 8008204:	d101      	bne.n	800820a <__sflush_r+0xb6>
 8008206:	602f      	str	r7, [r5, #0]
 8008208:	e7b1      	b.n	800816e <__sflush_r+0x1a>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	e7ad      	b.n	8008170 <__sflush_r+0x1c>
 8008214:	690f      	ldr	r7, [r1, #16]
 8008216:	2f00      	cmp	r7, #0
 8008218:	d0a9      	beq.n	800816e <__sflush_r+0x1a>
 800821a:	0793      	lsls	r3, r2, #30
 800821c:	680e      	ldr	r6, [r1, #0]
 800821e:	bf08      	it	eq
 8008220:	694b      	ldreq	r3, [r1, #20]
 8008222:	600f      	str	r7, [r1, #0]
 8008224:	bf18      	it	ne
 8008226:	2300      	movne	r3, #0
 8008228:	eba6 0807 	sub.w	r8, r6, r7
 800822c:	608b      	str	r3, [r1, #8]
 800822e:	f1b8 0f00 	cmp.w	r8, #0
 8008232:	dd9c      	ble.n	800816e <__sflush_r+0x1a>
 8008234:	6a21      	ldr	r1, [r4, #32]
 8008236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008238:	4643      	mov	r3, r8
 800823a:	463a      	mov	r2, r7
 800823c:	4628      	mov	r0, r5
 800823e:	47b0      	blx	r6
 8008240:	2800      	cmp	r0, #0
 8008242:	dc06      	bgt.n	8008252 <__sflush_r+0xfe>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e78e      	b.n	8008170 <__sflush_r+0x1c>
 8008252:	4407      	add	r7, r0
 8008254:	eba8 0800 	sub.w	r8, r8, r0
 8008258:	e7e9      	b.n	800822e <__sflush_r+0xda>
 800825a:	bf00      	nop
 800825c:	20400001 	.word	0x20400001

08008260 <_fflush_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b913      	cbnz	r3, 8008270 <_fflush_r+0x10>
 800826a:	2500      	movs	r5, #0
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	b118      	cbz	r0, 800827a <_fflush_r+0x1a>
 8008272:	6983      	ldr	r3, [r0, #24]
 8008274:	b90b      	cbnz	r3, 800827a <_fflush_r+0x1a>
 8008276:	f000 f887 	bl	8008388 <__sinit>
 800827a:	4b14      	ldr	r3, [pc, #80]	; (80082cc <_fflush_r+0x6c>)
 800827c:	429c      	cmp	r4, r3
 800827e:	d11b      	bne.n	80082b8 <_fflush_r+0x58>
 8008280:	686c      	ldr	r4, [r5, #4]
 8008282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ef      	beq.n	800826a <_fflush_r+0xa>
 800828a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800828c:	07d0      	lsls	r0, r2, #31
 800828e:	d404      	bmi.n	800829a <_fflush_r+0x3a>
 8008290:	0599      	lsls	r1, r3, #22
 8008292:	d402      	bmi.n	800829a <_fflush_r+0x3a>
 8008294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008296:	f000 f915 	bl	80084c4 <__retarget_lock_acquire_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f7ff ff59 	bl	8008154 <__sflush_r>
 80082a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a4:	07da      	lsls	r2, r3, #31
 80082a6:	4605      	mov	r5, r0
 80082a8:	d4e0      	bmi.n	800826c <_fflush_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	059b      	lsls	r3, r3, #22
 80082ae:	d4dd      	bmi.n	800826c <_fflush_r+0xc>
 80082b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b2:	f000 f908 	bl	80084c6 <__retarget_lock_release_recursive>
 80082b6:	e7d9      	b.n	800826c <_fflush_r+0xc>
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <_fflush_r+0x70>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	d101      	bne.n	80082c2 <_fflush_r+0x62>
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	e7df      	b.n	8008282 <_fflush_r+0x22>
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <_fflush_r+0x74>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	bf08      	it	eq
 80082c8:	68ec      	ldreq	r4, [r5, #12]
 80082ca:	e7da      	b.n	8008282 <_fflush_r+0x22>
 80082cc:	0800a124 	.word	0x0800a124
 80082d0:	0800a144 	.word	0x0800a144
 80082d4:	0800a104 	.word	0x0800a104

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f7ff fcc7 	bl	8007c88 <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6263      	str	r3, [r4, #36]	; 0x24
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x3c>)
 8008300:	62a3      	str	r3, [r4, #40]	; 0x28
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x40>)
 8008304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x44>)
 8008308:	6224      	str	r4, [r4, #32]
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	08008e41 	.word	0x08008e41
 8008314:	08008e63 	.word	0x08008e63
 8008318:	08008e9b 	.word	0x08008e9b
 800831c:	08008ebf 	.word	0x08008ebf

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	08008261 	.word	0x08008261

0800832c <__sfmoreglue>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2268      	movs	r2, #104	; 0x68
 8008330:	1e4d      	subs	r5, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f7ff fd19 	bl	8007d70 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f7ff fc9a 	bl	8007c88 <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8b3 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20000901 	.word	0x20000901

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8ae 	b.w	80084c6 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20000901 	.word	0x20000901

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8a7 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20000902 	.word	0x20000902

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8a2 	b.w	80084c6 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20000902 	.word	0x20000902

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf04      	itt	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	61a3      	streq	r3, [r4, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f820 	bl	80083f8 <__sfp>
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f81c 	bl	80083f8 <__sfp>
 80083c0:	60a0      	str	r0, [r4, #8]
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f818 	bl	80083f8 <__sfp>
 80083c8:	2200      	movs	r2, #0
 80083ca:	60e0      	str	r0, [r4, #12]
 80083cc:	2104      	movs	r1, #4
 80083ce:	6860      	ldr	r0, [r4, #4]
 80083d0:	f7ff ff82 	bl	80082d8 <std>
 80083d4:	68a0      	ldr	r0, [r4, #8]
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	f7ff ff7d 	bl	80082d8 <std>
 80083de:	68e0      	ldr	r0, [r4, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	f7ff ff78 	bl	80082d8 <std>
 80083e8:	2301      	movs	r3, #1
 80083ea:	61a3      	str	r3, [r4, #24]
 80083ec:	e7d2      	b.n	8008394 <__sinit+0xc>
 80083ee:	bf00      	nop
 80083f0:	0800a100 	.word	0x0800a100
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	60e3      	str	r3, [r4, #12]
 800842a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f847 	bl	80084c2 <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800843c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008440:	6025      	str	r5, [r4, #0]
 8008442:	61a5      	str	r5, [r4, #24]
 8008444:	2208      	movs	r2, #8
 8008446:	4629      	mov	r1, r5
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f7ff fc1c 	bl	8007c88 <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	0800a100 	.word	0x0800a100
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008490:	2700      	movs	r7, #0
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>

080084c2 <__retarget_lock_init_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <__retarget_lock_acquire_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_release_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__swhatbuf_r>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	2900      	cmp	r1, #0
 80084d2:	b096      	sub	sp, #88	; 0x58
 80084d4:	4614      	mov	r4, r2
 80084d6:	461d      	mov	r5, r3
 80084d8:	da08      	bge.n	80084ec <__swhatbuf_r+0x24>
 80084da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	602a      	str	r2, [r5, #0]
 80084e2:	061a      	lsls	r2, r3, #24
 80084e4:	d410      	bmi.n	8008508 <__swhatbuf_r+0x40>
 80084e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ea:	e00e      	b.n	800850a <__swhatbuf_r+0x42>
 80084ec:	466a      	mov	r2, sp
 80084ee:	f000 fd0d 	bl	8008f0c <_fstat_r>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	dbf1      	blt.n	80084da <__swhatbuf_r+0x12>
 80084f6:	9a01      	ldr	r2, [sp, #4]
 80084f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008500:	425a      	negs	r2, r3
 8008502:	415a      	adcs	r2, r3
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	e7ee      	b.n	80084e6 <__swhatbuf_r+0x1e>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	2000      	movs	r0, #0
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	b016      	add	sp, #88	; 0x58
 8008510:	bd70      	pop	{r4, r5, r6, pc}
	...

08008514 <__smakebuf_r>:
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008518:	079d      	lsls	r5, r3, #30
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	d507      	bpl.n	8008530 <__smakebuf_r+0x1c>
 8008520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2301      	movs	r3, #1
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	b002      	add	sp, #8
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	ab01      	add	r3, sp, #4
 8008532:	466a      	mov	r2, sp
 8008534:	f7ff ffc8 	bl	80084c8 <__swhatbuf_r>
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff fc17 	bl	8007d70 <_malloc_r>
 8008542:	b948      	cbnz	r0, 8008558 <__smakebuf_r+0x44>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d4ef      	bmi.n	800852c <__smakebuf_r+0x18>
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7e3      	b.n	8008520 <__smakebuf_r+0xc>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <__smakebuf_r+0x7c>)
 800855a:	62b3      	str	r3, [r6, #40]	; 0x28
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	6120      	str	r0, [r4, #16]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x74>
 8008570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008574:	4630      	mov	r0, r6
 8008576:	f000 fcdb 	bl	8008f30 <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x74>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a0      	ldrh	r0, [r4, #12]
 800858a:	4305      	orrs	r5, r0
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cd      	b.n	800852c <__smakebuf_r+0x18>
 8008590:	08008321 	.word	0x08008321

08008594 <__malloc_lock>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__malloc_lock+0x8>)
 8008596:	f7ff bf95 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	20000900 	.word	0x20000900

080085a0 <__malloc_unlock>:
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <__malloc_unlock+0x8>)
 80085a2:	f7ff bf90 	b.w	80084c6 <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	20000900 	.word	0x20000900

080085ac <__ssputs_r>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	688e      	ldr	r6, [r1, #8]
 80085b2:	429e      	cmp	r6, r3
 80085b4:	4682      	mov	sl, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4690      	mov	r8, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	d838      	bhi.n	8008630 <__ssputs_r+0x84>
 80085be:	898a      	ldrh	r2, [r1, #12]
 80085c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c4:	d032      	beq.n	800862c <__ssputs_r+0x80>
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6909      	ldr	r1, [r1, #16]
 80085ca:	eba5 0901 	sub.w	r9, r5, r1
 80085ce:	6965      	ldr	r5, [r4, #20]
 80085d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d8:	3301      	adds	r3, #1
 80085da:	444b      	add	r3, r9
 80085dc:	106d      	asrs	r5, r5, #1
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf38      	it	cc
 80085e2:	461d      	movcc	r5, r3
 80085e4:	0553      	lsls	r3, r2, #21
 80085e6:	d531      	bpl.n	800864c <__ssputs_r+0xa0>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7ff fbc1 	bl	8007d70 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b950      	cbnz	r0, 8008608 <__ssputs_r+0x5c>
 80085f2:	230c      	movs	r3, #12
 80085f4:	f8ca 3000 	str.w	r3, [sl]
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	6921      	ldr	r1, [r4, #16]
 800860a:	464a      	mov	r2, r9
 800860c:	f7ff fb2e 	bl	8007c6c <memcpy>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	6126      	str	r6, [r4, #16]
 800861e:	6165      	str	r5, [r4, #20]
 8008620:	444e      	add	r6, r9
 8008622:	eba5 0509 	sub.w	r5, r5, r9
 8008626:	6026      	str	r6, [r4, #0]
 8008628:	60a5      	str	r5, [r4, #8]
 800862a:	463e      	mov	r6, r7
 800862c:	42be      	cmp	r6, r7
 800862e:	d900      	bls.n	8008632 <__ssputs_r+0x86>
 8008630:	463e      	mov	r6, r7
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	4632      	mov	r2, r6
 8008636:	4641      	mov	r1, r8
 8008638:	f000 fc9c 	bl	8008f74 <memmove>
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	1b9b      	subs	r3, r3, r6
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	4433      	add	r3, r6
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	2000      	movs	r0, #0
 800864a:	e7db      	b.n	8008604 <__ssputs_r+0x58>
 800864c:	462a      	mov	r2, r5
 800864e:	f000 fcab 	bl	8008fa8 <_realloc_r>
 8008652:	4606      	mov	r6, r0
 8008654:	2800      	cmp	r0, #0
 8008656:	d1e1      	bne.n	800861c <__ssputs_r+0x70>
 8008658:	6921      	ldr	r1, [r4, #16]
 800865a:	4650      	mov	r0, sl
 800865c:	f7ff fb1c 	bl	8007c98 <_free_r>
 8008660:	e7c7      	b.n	80085f2 <__ssputs_r+0x46>
	...

08008664 <_svfiprintf_r>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	4698      	mov	r8, r3
 800866a:	898b      	ldrh	r3, [r1, #12]
 800866c:	061b      	lsls	r3, r3, #24
 800866e:	b09d      	sub	sp, #116	; 0x74
 8008670:	4607      	mov	r7, r0
 8008672:	460d      	mov	r5, r1
 8008674:	4614      	mov	r4, r2
 8008676:	d50e      	bpl.n	8008696 <_svfiprintf_r+0x32>
 8008678:	690b      	ldr	r3, [r1, #16]
 800867a:	b963      	cbnz	r3, 8008696 <_svfiprintf_r+0x32>
 800867c:	2140      	movs	r1, #64	; 0x40
 800867e:	f7ff fb77 	bl	8007d70 <_malloc_r>
 8008682:	6028      	str	r0, [r5, #0]
 8008684:	6128      	str	r0, [r5, #16]
 8008686:	b920      	cbnz	r0, 8008692 <_svfiprintf_r+0x2e>
 8008688:	230c      	movs	r3, #12
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e0d1      	b.n	8008836 <_svfiprintf_r+0x1d2>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	616b      	str	r3, [r5, #20]
 8008696:	2300      	movs	r3, #0
 8008698:	9309      	str	r3, [sp, #36]	; 0x24
 800869a:	2320      	movs	r3, #32
 800869c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a4:	2330      	movs	r3, #48	; 0x30
 80086a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008850 <_svfiprintf_r+0x1ec>
 80086aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ae:	f04f 0901 	mov.w	r9, #1
 80086b2:	4623      	mov	r3, r4
 80086b4:	469a      	mov	sl, r3
 80086b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ba:	b10a      	cbz	r2, 80086c0 <_svfiprintf_r+0x5c>
 80086bc:	2a25      	cmp	r2, #37	; 0x25
 80086be:	d1f9      	bne.n	80086b4 <_svfiprintf_r+0x50>
 80086c0:	ebba 0b04 	subs.w	fp, sl, r4
 80086c4:	d00b      	beq.n	80086de <_svfiprintf_r+0x7a>
 80086c6:	465b      	mov	r3, fp
 80086c8:	4622      	mov	r2, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7ff ff6d 	bl	80085ac <__ssputs_r>
 80086d2:	3001      	adds	r0, #1
 80086d4:	f000 80aa 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086da:	445a      	add	r2, fp
 80086dc:	9209      	str	r2, [sp, #36]	; 0x24
 80086de:	f89a 3000 	ldrb.w	r3, [sl]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80a2 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f2:	f10a 0a01 	add.w	sl, sl, #1
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008700:	4654      	mov	r4, sl
 8008702:	2205      	movs	r2, #5
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	4851      	ldr	r0, [pc, #324]	; (8008850 <_svfiprintf_r+0x1ec>)
 800870a:	f7f7 fd99 	bl	8000240 <memchr>
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	b9d8      	cbnz	r0, 800874a <_svfiprintf_r+0xe6>
 8008712:	06d0      	lsls	r0, r2, #27
 8008714:	bf44      	itt	mi
 8008716:	2320      	movmi	r3, #32
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	0711      	lsls	r1, r2, #28
 800871e:	bf44      	itt	mi
 8008720:	232b      	movmi	r3, #43	; 0x2b
 8008722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008726:	f89a 3000 	ldrb.w	r3, [sl]
 800872a:	2b2a      	cmp	r3, #42	; 0x2a
 800872c:	d015      	beq.n	800875a <_svfiprintf_r+0xf6>
 800872e:	9a07      	ldr	r2, [sp, #28]
 8008730:	4654      	mov	r4, sl
 8008732:	2000      	movs	r0, #0
 8008734:	f04f 0c0a 	mov.w	ip, #10
 8008738:	4621      	mov	r1, r4
 800873a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873e:	3b30      	subs	r3, #48	; 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d94e      	bls.n	80087e2 <_svfiprintf_r+0x17e>
 8008744:	b1b0      	cbz	r0, 8008774 <_svfiprintf_r+0x110>
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	e014      	b.n	8008774 <_svfiprintf_r+0x110>
 800874a:	eba0 0308 	sub.w	r3, r0, r8
 800874e:	fa09 f303 	lsl.w	r3, r9, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	46a2      	mov	sl, r4
 8008758:	e7d2      	b.n	8008700 <_svfiprintf_r+0x9c>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9103      	str	r1, [sp, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfbb      	ittet	lt
 8008766:	425b      	neglt	r3, r3
 8008768:	f042 0202 	orrlt.w	r2, r2, #2
 800876c:	9307      	strge	r3, [sp, #28]
 800876e:	9307      	strlt	r3, [sp, #28]
 8008770:	bfb8      	it	lt
 8008772:	9204      	strlt	r2, [sp, #16]
 8008774:	7823      	ldrb	r3, [r4, #0]
 8008776:	2b2e      	cmp	r3, #46	; 0x2e
 8008778:	d10c      	bne.n	8008794 <_svfiprintf_r+0x130>
 800877a:	7863      	ldrb	r3, [r4, #1]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d135      	bne.n	80087ec <_svfiprintf_r+0x188>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9203      	str	r2, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfb8      	it	lt
 800878c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008790:	3402      	adds	r4, #2
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008860 <_svfiprintf_r+0x1fc>
 8008798:	7821      	ldrb	r1, [r4, #0]
 800879a:	2203      	movs	r2, #3
 800879c:	4650      	mov	r0, sl
 800879e:	f7f7 fd4f 	bl	8000240 <memchr>
 80087a2:	b140      	cbz	r0, 80087b6 <_svfiprintf_r+0x152>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	eba0 000a 	sub.w	r0, r0, sl
 80087aa:	fa03 f000 	lsl.w	r0, r3, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	4303      	orrs	r3, r0
 80087b2:	3401      	adds	r4, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	4826      	ldr	r0, [pc, #152]	; (8008854 <_svfiprintf_r+0x1f0>)
 80087bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c0:	2206      	movs	r2, #6
 80087c2:	f7f7 fd3d 	bl	8000240 <memchr>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d038      	beq.n	800883c <_svfiprintf_r+0x1d8>
 80087ca:	4b23      	ldr	r3, [pc, #140]	; (8008858 <_svfiprintf_r+0x1f4>)
 80087cc:	bb1b      	cbnz	r3, 8008816 <_svfiprintf_r+0x1b2>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	3308      	adds	r3, #8
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	4433      	add	r3, r6
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	e767      	b.n	80086b2 <_svfiprintf_r+0x4e>
 80087e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e6:	460c      	mov	r4, r1
 80087e8:	2001      	movs	r0, #1
 80087ea:	e7a5      	b.n	8008738 <_svfiprintf_r+0xd4>
 80087ec:	2300      	movs	r3, #0
 80087ee:	3401      	adds	r4, #1
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	4619      	mov	r1, r3
 80087f4:	f04f 0c0a 	mov.w	ip, #10
 80087f8:	4620      	mov	r0, r4
 80087fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fe:	3a30      	subs	r2, #48	; 0x30
 8008800:	2a09      	cmp	r2, #9
 8008802:	d903      	bls.n	800880c <_svfiprintf_r+0x1a8>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c5      	beq.n	8008794 <_svfiprintf_r+0x130>
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	e7c3      	b.n	8008794 <_svfiprintf_r+0x130>
 800880c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008810:	4604      	mov	r4, r0
 8008812:	2301      	movs	r3, #1
 8008814:	e7f0      	b.n	80087f8 <_svfiprintf_r+0x194>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <_svfiprintf_r+0x1f8>)
 800881e:	a904      	add	r1, sp, #16
 8008820:	4638      	mov	r0, r7
 8008822:	f3af 8000 	nop.w
 8008826:	1c42      	adds	r2, r0, #1
 8008828:	4606      	mov	r6, r0
 800882a:	d1d6      	bne.n	80087da <_svfiprintf_r+0x176>
 800882c:	89ab      	ldrh	r3, [r5, #12]
 800882e:	065b      	lsls	r3, r3, #25
 8008830:	f53f af2c 	bmi.w	800868c <_svfiprintf_r+0x28>
 8008834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008836:	b01d      	add	sp, #116	; 0x74
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	ab03      	add	r3, sp, #12
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	462a      	mov	r2, r5
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <_svfiprintf_r+0x1f8>)
 8008844:	a904      	add	r1, sp, #16
 8008846:	4638      	mov	r0, r7
 8008848:	f000 f9d4 	bl	8008bf4 <_printf_i>
 800884c:	e7eb      	b.n	8008826 <_svfiprintf_r+0x1c2>
 800884e:	bf00      	nop
 8008850:	0800a164 	.word	0x0800a164
 8008854:	0800a16e 	.word	0x0800a16e
 8008858:	00000000 	.word	0x00000000
 800885c:	080085ad 	.word	0x080085ad
 8008860:	0800a16a 	.word	0x0800a16a

08008864 <__sfputc_r>:
 8008864:	6893      	ldr	r3, [r2, #8]
 8008866:	3b01      	subs	r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	b410      	push	{r4}
 800886c:	6093      	str	r3, [r2, #8]
 800886e:	da08      	bge.n	8008882 <__sfputc_r+0x1e>
 8008870:	6994      	ldr	r4, [r2, #24]
 8008872:	42a3      	cmp	r3, r4
 8008874:	db01      	blt.n	800887a <__sfputc_r+0x16>
 8008876:	290a      	cmp	r1, #10
 8008878:	d103      	bne.n	8008882 <__sfputc_r+0x1e>
 800887a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887e:	f7ff bba9 	b.w	8007fd4 <__swbuf_r>
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	1c58      	adds	r0, r3, #1
 8008886:	6010      	str	r0, [r2, #0]
 8008888:	7019      	strb	r1, [r3, #0]
 800888a:	4608      	mov	r0, r1
 800888c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008890:	4770      	bx	lr

08008892 <__sfputs_r>:
 8008892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	4614      	mov	r4, r2
 800889a:	18d5      	adds	r5, r2, r3
 800889c:	42ac      	cmp	r4, r5
 800889e:	d101      	bne.n	80088a4 <__sfputs_r+0x12>
 80088a0:	2000      	movs	r0, #0
 80088a2:	e007      	b.n	80088b4 <__sfputs_r+0x22>
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	463a      	mov	r2, r7
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ffda 	bl	8008864 <__sfputc_r>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d1f3      	bne.n	800889c <__sfputs_r+0xa>
 80088b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088b8 <_vfiprintf_r>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	460d      	mov	r5, r1
 80088be:	b09d      	sub	sp, #116	; 0x74
 80088c0:	4614      	mov	r4, r2
 80088c2:	4698      	mov	r8, r3
 80088c4:	4606      	mov	r6, r0
 80088c6:	b118      	cbz	r0, 80088d0 <_vfiprintf_r+0x18>
 80088c8:	6983      	ldr	r3, [r0, #24]
 80088ca:	b90b      	cbnz	r3, 80088d0 <_vfiprintf_r+0x18>
 80088cc:	f7ff fd5c 	bl	8008388 <__sinit>
 80088d0:	4b89      	ldr	r3, [pc, #548]	; (8008af8 <_vfiprintf_r+0x240>)
 80088d2:	429d      	cmp	r5, r3
 80088d4:	d11b      	bne.n	800890e <_vfiprintf_r+0x56>
 80088d6:	6875      	ldr	r5, [r6, #4]
 80088d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088da:	07d9      	lsls	r1, r3, #31
 80088dc:	d405      	bmi.n	80088ea <_vfiprintf_r+0x32>
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	059a      	lsls	r2, r3, #22
 80088e2:	d402      	bmi.n	80088ea <_vfiprintf_r+0x32>
 80088e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e6:	f7ff fded 	bl	80084c4 <__retarget_lock_acquire_recursive>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	071b      	lsls	r3, r3, #28
 80088ee:	d501      	bpl.n	80088f4 <_vfiprintf_r+0x3c>
 80088f0:	692b      	ldr	r3, [r5, #16]
 80088f2:	b9eb      	cbnz	r3, 8008930 <_vfiprintf_r+0x78>
 80088f4:	4629      	mov	r1, r5
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff fbbe 	bl	8008078 <__swsetup_r>
 80088fc:	b1c0      	cbz	r0, 8008930 <_vfiprintf_r+0x78>
 80088fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008900:	07dc      	lsls	r4, r3, #31
 8008902:	d50e      	bpl.n	8008922 <_vfiprintf_r+0x6a>
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	b01d      	add	sp, #116	; 0x74
 800890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890e:	4b7b      	ldr	r3, [pc, #492]	; (8008afc <_vfiprintf_r+0x244>)
 8008910:	429d      	cmp	r5, r3
 8008912:	d101      	bne.n	8008918 <_vfiprintf_r+0x60>
 8008914:	68b5      	ldr	r5, [r6, #8]
 8008916:	e7df      	b.n	80088d8 <_vfiprintf_r+0x20>
 8008918:	4b79      	ldr	r3, [pc, #484]	; (8008b00 <_vfiprintf_r+0x248>)
 800891a:	429d      	cmp	r5, r3
 800891c:	bf08      	it	eq
 800891e:	68f5      	ldreq	r5, [r6, #12]
 8008920:	e7da      	b.n	80088d8 <_vfiprintf_r+0x20>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	0598      	lsls	r0, r3, #22
 8008926:	d4ed      	bmi.n	8008904 <_vfiprintf_r+0x4c>
 8008928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892a:	f7ff fdcc 	bl	80084c6 <__retarget_lock_release_recursive>
 800892e:	e7e9      	b.n	8008904 <_vfiprintf_r+0x4c>
 8008930:	2300      	movs	r3, #0
 8008932:	9309      	str	r3, [sp, #36]	; 0x24
 8008934:	2320      	movs	r3, #32
 8008936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800893a:	f8cd 800c 	str.w	r8, [sp, #12]
 800893e:	2330      	movs	r3, #48	; 0x30
 8008940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b04 <_vfiprintf_r+0x24c>
 8008944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008948:	f04f 0901 	mov.w	r9, #1
 800894c:	4623      	mov	r3, r4
 800894e:	469a      	mov	sl, r3
 8008950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008954:	b10a      	cbz	r2, 800895a <_vfiprintf_r+0xa2>
 8008956:	2a25      	cmp	r2, #37	; 0x25
 8008958:	d1f9      	bne.n	800894e <_vfiprintf_r+0x96>
 800895a:	ebba 0b04 	subs.w	fp, sl, r4
 800895e:	d00b      	beq.n	8008978 <_vfiprintf_r+0xc0>
 8008960:	465b      	mov	r3, fp
 8008962:	4622      	mov	r2, r4
 8008964:	4629      	mov	r1, r5
 8008966:	4630      	mov	r0, r6
 8008968:	f7ff ff93 	bl	8008892 <__sfputs_r>
 800896c:	3001      	adds	r0, #1
 800896e:	f000 80aa 	beq.w	8008ac6 <_vfiprintf_r+0x20e>
 8008972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008974:	445a      	add	r2, fp
 8008976:	9209      	str	r2, [sp, #36]	; 0x24
 8008978:	f89a 3000 	ldrb.w	r3, [sl]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80a2 	beq.w	8008ac6 <_vfiprintf_r+0x20e>
 8008982:	2300      	movs	r3, #0
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898c:	f10a 0a01 	add.w	sl, sl, #1
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008998:	931a      	str	r3, [sp, #104]	; 0x68
 800899a:	4654      	mov	r4, sl
 800899c:	2205      	movs	r2, #5
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	4858      	ldr	r0, [pc, #352]	; (8008b04 <_vfiprintf_r+0x24c>)
 80089a4:	f7f7 fc4c 	bl	8000240 <memchr>
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	b9d8      	cbnz	r0, 80089e4 <_vfiprintf_r+0x12c>
 80089ac:	06d1      	lsls	r1, r2, #27
 80089ae:	bf44      	itt	mi
 80089b0:	2320      	movmi	r3, #32
 80089b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b6:	0713      	lsls	r3, r2, #28
 80089b8:	bf44      	itt	mi
 80089ba:	232b      	movmi	r3, #43	; 0x2b
 80089bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089c0:	f89a 3000 	ldrb.w	r3, [sl]
 80089c4:	2b2a      	cmp	r3, #42	; 0x2a
 80089c6:	d015      	beq.n	80089f4 <_vfiprintf_r+0x13c>
 80089c8:	9a07      	ldr	r2, [sp, #28]
 80089ca:	4654      	mov	r4, sl
 80089cc:	2000      	movs	r0, #0
 80089ce:	f04f 0c0a 	mov.w	ip, #10
 80089d2:	4621      	mov	r1, r4
 80089d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d8:	3b30      	subs	r3, #48	; 0x30
 80089da:	2b09      	cmp	r3, #9
 80089dc:	d94e      	bls.n	8008a7c <_vfiprintf_r+0x1c4>
 80089de:	b1b0      	cbz	r0, 8008a0e <_vfiprintf_r+0x156>
 80089e0:	9207      	str	r2, [sp, #28]
 80089e2:	e014      	b.n	8008a0e <_vfiprintf_r+0x156>
 80089e4:	eba0 0308 	sub.w	r3, r0, r8
 80089e8:	fa09 f303 	lsl.w	r3, r9, r3
 80089ec:	4313      	orrs	r3, r2
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	46a2      	mov	sl, r4
 80089f2:	e7d2      	b.n	800899a <_vfiprintf_r+0xe2>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	1d19      	adds	r1, r3, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	9103      	str	r1, [sp, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bfbb      	ittet	lt
 8008a00:	425b      	neglt	r3, r3
 8008a02:	f042 0202 	orrlt.w	r2, r2, #2
 8008a06:	9307      	strge	r3, [sp, #28]
 8008a08:	9307      	strlt	r3, [sp, #28]
 8008a0a:	bfb8      	it	lt
 8008a0c:	9204      	strlt	r2, [sp, #16]
 8008a0e:	7823      	ldrb	r3, [r4, #0]
 8008a10:	2b2e      	cmp	r3, #46	; 0x2e
 8008a12:	d10c      	bne.n	8008a2e <_vfiprintf_r+0x176>
 8008a14:	7863      	ldrb	r3, [r4, #1]
 8008a16:	2b2a      	cmp	r3, #42	; 0x2a
 8008a18:	d135      	bne.n	8008a86 <_vfiprintf_r+0x1ce>
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	9203      	str	r2, [sp, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bfb8      	it	lt
 8008a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a2a:	3402      	adds	r4, #2
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b14 <_vfiprintf_r+0x25c>
 8008a32:	7821      	ldrb	r1, [r4, #0]
 8008a34:	2203      	movs	r2, #3
 8008a36:	4650      	mov	r0, sl
 8008a38:	f7f7 fc02 	bl	8000240 <memchr>
 8008a3c:	b140      	cbz	r0, 8008a50 <_vfiprintf_r+0x198>
 8008a3e:	2340      	movs	r3, #64	; 0x40
 8008a40:	eba0 000a 	sub.w	r0, r0, sl
 8008a44:	fa03 f000 	lsl.w	r0, r3, r0
 8008a48:	9b04      	ldr	r3, [sp, #16]
 8008a4a:	4303      	orrs	r3, r0
 8008a4c:	3401      	adds	r4, #1
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a54:	482c      	ldr	r0, [pc, #176]	; (8008b08 <_vfiprintf_r+0x250>)
 8008a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a5a:	2206      	movs	r2, #6
 8008a5c:	f7f7 fbf0 	bl	8000240 <memchr>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d03f      	beq.n	8008ae4 <_vfiprintf_r+0x22c>
 8008a64:	4b29      	ldr	r3, [pc, #164]	; (8008b0c <_vfiprintf_r+0x254>)
 8008a66:	bb1b      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x1f8>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	3307      	adds	r3, #7
 8008a6c:	f023 0307 	bic.w	r3, r3, #7
 8008a70:	3308      	adds	r3, #8
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a76:	443b      	add	r3, r7
 8008a78:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7a:	e767      	b.n	800894c <_vfiprintf_r+0x94>
 8008a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a80:	460c      	mov	r4, r1
 8008a82:	2001      	movs	r0, #1
 8008a84:	e7a5      	b.n	80089d2 <_vfiprintf_r+0x11a>
 8008a86:	2300      	movs	r3, #0
 8008a88:	3401      	adds	r4, #1
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f04f 0c0a 	mov.w	ip, #10
 8008a92:	4620      	mov	r0, r4
 8008a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a98:	3a30      	subs	r2, #48	; 0x30
 8008a9a:	2a09      	cmp	r2, #9
 8008a9c:	d903      	bls.n	8008aa6 <_vfiprintf_r+0x1ee>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c5      	beq.n	8008a2e <_vfiprintf_r+0x176>
 8008aa2:	9105      	str	r1, [sp, #20]
 8008aa4:	e7c3      	b.n	8008a2e <_vfiprintf_r+0x176>
 8008aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aaa:	4604      	mov	r4, r0
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7f0      	b.n	8008a92 <_vfiprintf_r+0x1da>
 8008ab0:	ab03      	add	r3, sp, #12
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <_vfiprintf_r+0x258>)
 8008ab8:	a904      	add	r1, sp, #16
 8008aba:	4630      	mov	r0, r6
 8008abc:	f3af 8000 	nop.w
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	1c78      	adds	r0, r7, #1
 8008ac4:	d1d6      	bne.n	8008a74 <_vfiprintf_r+0x1bc>
 8008ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac8:	07d9      	lsls	r1, r3, #31
 8008aca:	d405      	bmi.n	8008ad8 <_vfiprintf_r+0x220>
 8008acc:	89ab      	ldrh	r3, [r5, #12]
 8008ace:	059a      	lsls	r2, r3, #22
 8008ad0:	d402      	bmi.n	8008ad8 <_vfiprintf_r+0x220>
 8008ad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad4:	f7ff fcf7 	bl	80084c6 <__retarget_lock_release_recursive>
 8008ad8:	89ab      	ldrh	r3, [r5, #12]
 8008ada:	065b      	lsls	r3, r3, #25
 8008adc:	f53f af12 	bmi.w	8008904 <_vfiprintf_r+0x4c>
 8008ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae2:	e711      	b.n	8008908 <_vfiprintf_r+0x50>
 8008ae4:	ab03      	add	r3, sp, #12
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <_vfiprintf_r+0x258>)
 8008aec:	a904      	add	r1, sp, #16
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 f880 	bl	8008bf4 <_printf_i>
 8008af4:	e7e4      	b.n	8008ac0 <_vfiprintf_r+0x208>
 8008af6:	bf00      	nop
 8008af8:	0800a124 	.word	0x0800a124
 8008afc:	0800a144 	.word	0x0800a144
 8008b00:	0800a104 	.word	0x0800a104
 8008b04:	0800a164 	.word	0x0800a164
 8008b08:	0800a16e 	.word	0x0800a16e
 8008b0c:	00000000 	.word	0x00000000
 8008b10:	08008893 	.word	0x08008893
 8008b14:	0800a16a 	.word	0x0800a16a

08008b18 <_printf_common>:
 8008b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	4699      	mov	r9, r3
 8008b20:	688a      	ldr	r2, [r1, #8]
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	bfb8      	it	lt
 8008b2c:	4613      	movlt	r3, r2
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b34:	4607      	mov	r7, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b10a      	cbz	r2, 8008b3e <_printf_common+0x26>
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	6833      	ldrmi	r3, [r6, #0]
 8008b46:	3302      	addmi	r3, #2
 8008b48:	6033      	strmi	r3, [r6, #0]
 8008b4a:	6825      	ldr	r5, [r4, #0]
 8008b4c:	f015 0506 	ands.w	r5, r5, #6
 8008b50:	d106      	bne.n	8008b60 <_printf_common+0x48>
 8008b52:	f104 0a19 	add.w	sl, r4, #25
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	6832      	ldr	r2, [r6, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dc26      	bgt.n	8008bae <_printf_common+0x96>
 8008b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b64:	1e13      	subs	r3, r2, #0
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	bf18      	it	ne
 8008b6a:	2301      	movne	r3, #1
 8008b6c:	0692      	lsls	r2, r2, #26
 8008b6e:	d42b      	bmi.n	8008bc8 <_printf_common+0xb0>
 8008b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d01e      	beq.n	8008bbc <_printf_common+0xa4>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	68e5      	ldr	r5, [r4, #12]
 8008b82:	6832      	ldr	r2, [r6, #0]
 8008b84:	f003 0306 	and.w	r3, r3, #6
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	bf08      	it	eq
 8008b8c:	1aad      	subeq	r5, r5, r2
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	bf0c      	ite	eq
 8008b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b98:	2500      	movne	r5, #0
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	bfc4      	itt	gt
 8008b9e:	1a9b      	subgt	r3, r3, r2
 8008ba0:	18ed      	addgt	r5, r5, r3
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	341a      	adds	r4, #26
 8008ba6:	42b5      	cmp	r5, r6
 8008ba8:	d11a      	bne.n	8008be0 <_printf_common+0xc8>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e008      	b.n	8008bc0 <_printf_common+0xa8>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	47c0      	blx	r8
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d103      	bne.n	8008bc4 <_printf_common+0xac>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	e7c6      	b.n	8008b56 <_printf_common+0x3e>
 8008bc8:	18e1      	adds	r1, r4, r3
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	2030      	movs	r0, #48	; 0x30
 8008bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd2:	4422      	add	r2, r4
 8008bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bdc:	3302      	adds	r3, #2
 8008bde:	e7c7      	b.n	8008b70 <_printf_common+0x58>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4622      	mov	r2, r4
 8008be4:	4649      	mov	r1, r9
 8008be6:	4638      	mov	r0, r7
 8008be8:	47c0      	blx	r8
 8008bea:	3001      	adds	r0, #1
 8008bec:	d0e6      	beq.n	8008bbc <_printf_common+0xa4>
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7d9      	b.n	8008ba6 <_printf_common+0x8e>
	...

08008bf4 <_printf_i>:
 8008bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	7e0f      	ldrb	r7, [r1, #24]
 8008bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bfc:	2f78      	cmp	r7, #120	; 0x78
 8008bfe:	4691      	mov	r9, r2
 8008c00:	4680      	mov	r8, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	469a      	mov	sl, r3
 8008c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c0a:	d807      	bhi.n	8008c1c <_printf_i+0x28>
 8008c0c:	2f62      	cmp	r7, #98	; 0x62
 8008c0e:	d80a      	bhi.n	8008c26 <_printf_i+0x32>
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	f000 80d8 	beq.w	8008dc6 <_printf_i+0x1d2>
 8008c16:	2f58      	cmp	r7, #88	; 0x58
 8008c18:	f000 80a3 	beq.w	8008d62 <_printf_i+0x16e>
 8008c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c24:	e03a      	b.n	8008c9c <_printf_i+0xa8>
 8008c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2a:	2b15      	cmp	r3, #21
 8008c2c:	d8f6      	bhi.n	8008c1c <_printf_i+0x28>
 8008c2e:	a101      	add	r1, pc, #4	; (adr r1, 8008c34 <_printf_i+0x40>)
 8008c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c34:	08008c8d 	.word	0x08008c8d
 8008c38:	08008ca1 	.word	0x08008ca1
 8008c3c:	08008c1d 	.word	0x08008c1d
 8008c40:	08008c1d 	.word	0x08008c1d
 8008c44:	08008c1d 	.word	0x08008c1d
 8008c48:	08008c1d 	.word	0x08008c1d
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008c1d 	.word	0x08008c1d
 8008c54:	08008c1d 	.word	0x08008c1d
 8008c58:	08008c1d 	.word	0x08008c1d
 8008c5c:	08008c1d 	.word	0x08008c1d
 8008c60:	08008dad 	.word	0x08008dad
 8008c64:	08008cd1 	.word	0x08008cd1
 8008c68:	08008d8f 	.word	0x08008d8f
 8008c6c:	08008c1d 	.word	0x08008c1d
 8008c70:	08008c1d 	.word	0x08008c1d
 8008c74:	08008dcf 	.word	0x08008dcf
 8008c78:	08008c1d 	.word	0x08008c1d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c1d 	.word	0x08008c1d
 8008c84:	08008c1d 	.word	0x08008c1d
 8008c88:	08008d97 	.word	0x08008d97
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	1d1a      	adds	r2, r3, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	602a      	str	r2, [r5, #0]
 8008c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e0a3      	b.n	8008de8 <_printf_i+0x1f4>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	6829      	ldr	r1, [r5, #0]
 8008ca4:	0606      	lsls	r6, r0, #24
 8008ca6:	f101 0304 	add.w	r3, r1, #4
 8008caa:	d50a      	bpl.n	8008cc2 <_printf_i+0xce>
 8008cac:	680e      	ldr	r6, [r1, #0]
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	da03      	bge.n	8008cbc <_printf_i+0xc8>
 8008cb4:	232d      	movs	r3, #45	; 0x2d
 8008cb6:	4276      	negs	r6, r6
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	485e      	ldr	r0, [pc, #376]	; (8008e38 <_printf_i+0x244>)
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	e019      	b.n	8008cf6 <_printf_i+0x102>
 8008cc2:	680e      	ldr	r6, [r1, #0]
 8008cc4:	602b      	str	r3, [r5, #0]
 8008cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cca:	bf18      	it	ne
 8008ccc:	b236      	sxthne	r6, r6
 8008cce:	e7ef      	b.n	8008cb0 <_printf_i+0xbc>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6029      	str	r1, [r5, #0]
 8008cd8:	0601      	lsls	r1, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xec>
 8008cdc:	681e      	ldr	r6, [r3, #0]
 8008cde:	e002      	b.n	8008ce6 <_printf_i+0xf2>
 8008ce0:	0646      	lsls	r6, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xe8>
 8008ce4:	881e      	ldrh	r6, [r3, #0]
 8008ce6:	4854      	ldr	r0, [pc, #336]	; (8008e38 <_printf_i+0x244>)
 8008ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cea:	bf0c      	ite	eq
 8008cec:	2308      	moveq	r3, #8
 8008cee:	230a      	movne	r3, #10
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf6:	6865      	ldr	r5, [r4, #4]
 8008cf8:	60a5      	str	r5, [r4, #8]
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	bfa2      	ittt	ge
 8008cfe:	6821      	ldrge	r1, [r4, #0]
 8008d00:	f021 0104 	bicge.w	r1, r1, #4
 8008d04:	6021      	strge	r1, [r4, #0]
 8008d06:	b90e      	cbnz	r6, 8008d0c <_printf_i+0x118>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d04d      	beq.n	8008da8 <_printf_i+0x1b4>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d12:	fb03 6711 	mls	r7, r3, r1, r6
 8008d16:	5dc7      	ldrb	r7, [r0, r7]
 8008d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d1c:	4637      	mov	r7, r6
 8008d1e:	42bb      	cmp	r3, r7
 8008d20:	460e      	mov	r6, r1
 8008d22:	d9f4      	bls.n	8008d0e <_printf_i+0x11a>
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d10b      	bne.n	8008d40 <_printf_i+0x14c>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	07de      	lsls	r6, r3, #31
 8008d2c:	d508      	bpl.n	8008d40 <_printf_i+0x14c>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6861      	ldr	r1, [r4, #4]
 8008d32:	4299      	cmp	r1, r3
 8008d34:	bfde      	ittt	le
 8008d36:	2330      	movle	r3, #48	; 0x30
 8008d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d40:	1b52      	subs	r2, r2, r5
 8008d42:	6122      	str	r2, [r4, #16]
 8008d44:	f8cd a000 	str.w	sl, [sp]
 8008d48:	464b      	mov	r3, r9
 8008d4a:	aa03      	add	r2, sp, #12
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff fee2 	bl	8008b18 <_printf_common>
 8008d54:	3001      	adds	r0, #1
 8008d56:	d14c      	bne.n	8008df2 <_printf_i+0x1fe>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	b004      	add	sp, #16
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	4835      	ldr	r0, [pc, #212]	; (8008e38 <_printf_i+0x244>)
 8008d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d70:	6029      	str	r1, [r5, #0]
 8008d72:	061d      	lsls	r5, r3, #24
 8008d74:	d514      	bpl.n	8008da0 <_printf_i+0x1ac>
 8008d76:	07df      	lsls	r7, r3, #31
 8008d78:	bf44      	itt	mi
 8008d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7e:	6023      	strmi	r3, [r4, #0]
 8008d80:	b91e      	cbnz	r6, 8008d8a <_printf_i+0x196>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	f023 0320 	bic.w	r3, r3, #32
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	2310      	movs	r3, #16
 8008d8c:	e7b0      	b.n	8008cf0 <_printf_i+0xfc>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	f043 0320 	orr.w	r3, r3, #32
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	2378      	movs	r3, #120	; 0x78
 8008d98:	4828      	ldr	r0, [pc, #160]	; (8008e3c <_printf_i+0x248>)
 8008d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9e:	e7e3      	b.n	8008d68 <_printf_i+0x174>
 8008da0:	0659      	lsls	r1, r3, #25
 8008da2:	bf48      	it	mi
 8008da4:	b2b6      	uxthmi	r6, r6
 8008da6:	e7e6      	b.n	8008d76 <_printf_i+0x182>
 8008da8:	4615      	mov	r5, r2
 8008daa:	e7bb      	b.n	8008d24 <_printf_i+0x130>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	6826      	ldr	r6, [r4, #0]
 8008db0:	6961      	ldr	r1, [r4, #20]
 8008db2:	1d18      	adds	r0, r3, #4
 8008db4:	6028      	str	r0, [r5, #0]
 8008db6:	0635      	lsls	r5, r6, #24
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0x1cc>
 8008dbc:	6019      	str	r1, [r3, #0]
 8008dbe:	e002      	b.n	8008dc6 <_printf_i+0x1d2>
 8008dc0:	0670      	lsls	r0, r6, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0x1c8>
 8008dc4:	8019      	strh	r1, [r3, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6123      	str	r3, [r4, #16]
 8008dca:	4615      	mov	r5, r2
 8008dcc:	e7ba      	b.n	8008d44 <_printf_i+0x150>
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	1d1a      	adds	r2, r3, #4
 8008dd2:	602a      	str	r2, [r5, #0]
 8008dd4:	681d      	ldr	r5, [r3, #0]
 8008dd6:	6862      	ldr	r2, [r4, #4]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f7f7 fa30 	bl	8000240 <memchr>
 8008de0:	b108      	cbz	r0, 8008de6 <_printf_i+0x1f2>
 8008de2:	1b40      	subs	r0, r0, r5
 8008de4:	6060      	str	r0, [r4, #4]
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	2300      	movs	r3, #0
 8008dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df0:	e7a8      	b.n	8008d44 <_printf_i+0x150>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	462a      	mov	r2, r5
 8008df6:	4649      	mov	r1, r9
 8008df8:	4640      	mov	r0, r8
 8008dfa:	47d0      	blx	sl
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d0ab      	beq.n	8008d58 <_printf_i+0x164>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	079b      	lsls	r3, r3, #30
 8008e04:	d413      	bmi.n	8008e2e <_printf_i+0x23a>
 8008e06:	68e0      	ldr	r0, [r4, #12]
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	4298      	cmp	r0, r3
 8008e0c:	bfb8      	it	lt
 8008e0e:	4618      	movlt	r0, r3
 8008e10:	e7a4      	b.n	8008d5c <_printf_i+0x168>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4632      	mov	r2, r6
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d09b      	beq.n	8008d58 <_printf_i+0x164>
 8008e20:	3501      	adds	r5, #1
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	9903      	ldr	r1, [sp, #12]
 8008e26:	1a5b      	subs	r3, r3, r1
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dcf2      	bgt.n	8008e12 <_printf_i+0x21e>
 8008e2c:	e7eb      	b.n	8008e06 <_printf_i+0x212>
 8008e2e:	2500      	movs	r5, #0
 8008e30:	f104 0619 	add.w	r6, r4, #25
 8008e34:	e7f5      	b.n	8008e22 <_printf_i+0x22e>
 8008e36:	bf00      	nop
 8008e38:	0800a175 	.word	0x0800a175
 8008e3c:	0800a186 	.word	0x0800a186

08008e40 <__sread>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	460c      	mov	r4, r1
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	f000 f8de 	bl	8009008 <_read_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	bfab      	itete	ge
 8008e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e52:	89a3      	ldrhlt	r3, [r4, #12]
 8008e54:	181b      	addge	r3, r3, r0
 8008e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e5a:	bfac      	ite	ge
 8008e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e5e:	81a3      	strhlt	r3, [r4, #12]
 8008e60:	bd10      	pop	{r4, pc}

08008e62 <__swrite>:
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	461f      	mov	r7, r3
 8008e68:	898b      	ldrh	r3, [r1, #12]
 8008e6a:	05db      	lsls	r3, r3, #23
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4616      	mov	r6, r2
 8008e72:	d505      	bpl.n	8008e80 <__swrite+0x1e>
 8008e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e78:	2302      	movs	r3, #2
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f000 f868 	bl	8008f50 <_lseek_r>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4628      	mov	r0, r5
 8008e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	f000 b817 	b.w	8008ec8 <_write_r>

08008e9a <__sseek>:
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 f855 	bl	8008f50 <_lseek_r>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	bf15      	itete	ne
 8008eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eb6:	81a3      	strheq	r3, [r4, #12]
 8008eb8:	bf18      	it	ne
 8008eba:	81a3      	strhne	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__sclose>:
 8008ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec2:	f000 b813 	b.w	8008eec <_close_r>
	...

08008ec8 <_write_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d07      	ldr	r5, [pc, #28]	; (8008ee8 <_write_r+0x20>)
 8008ecc:	4604      	mov	r4, r0
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7f8 f9e1 	bl	800129e <_write>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_write_r+0x1e>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_write_r+0x1e>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20000904 	.word	0x20000904

08008eec <_close_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_close_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7f8 f9ed 	bl	80012d6 <_close>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_close_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_close_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	20000904 	.word	0x20000904

08008f0c <_fstat_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	; (8008f2c <_fstat_r+0x20>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	f7f8 f9e8 	bl	80012ee <_fstat>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d102      	bne.n	8008f28 <_fstat_r+0x1c>
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	b103      	cbz	r3, 8008f28 <_fstat_r+0x1c>
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000904 	.word	0x20000904

08008f30 <_isatty_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d06      	ldr	r5, [pc, #24]	; (8008f4c <_isatty_r+0x1c>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	f7f8 f9e7 	bl	800130e <_isatty>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_isatty_r+0x1a>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_isatty_r+0x1a>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20000904 	.word	0x20000904

08008f50 <_lseek_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d07      	ldr	r5, [pc, #28]	; (8008f70 <_lseek_r+0x20>)
 8008f54:	4604      	mov	r4, r0
 8008f56:	4608      	mov	r0, r1
 8008f58:	4611      	mov	r1, r2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	602a      	str	r2, [r5, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f7f8 f9e0 	bl	8001324 <_lseek>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d102      	bne.n	8008f6e <_lseek_r+0x1e>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b103      	cbz	r3, 8008f6e <_lseek_r+0x1e>
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	20000904 	.word	0x20000904

08008f74 <memmove>:
 8008f74:	4288      	cmp	r0, r1
 8008f76:	b510      	push	{r4, lr}
 8008f78:	eb01 0402 	add.w	r4, r1, r2
 8008f7c:	d902      	bls.n	8008f84 <memmove+0x10>
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	4623      	mov	r3, r4
 8008f82:	d807      	bhi.n	8008f94 <memmove+0x20>
 8008f84:	1e43      	subs	r3, r0, #1
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d008      	beq.n	8008f9c <memmove+0x28>
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f92:	e7f8      	b.n	8008f86 <memmove+0x12>
 8008f94:	4402      	add	r2, r0
 8008f96:	4601      	mov	r1, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d100      	bne.n	8008f9e <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa6:	e7f7      	b.n	8008f98 <memmove+0x24>

08008fa8 <_realloc_r>:
 8008fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fac:	4680      	mov	r8, r0
 8008fae:	4614      	mov	r4, r2
 8008fb0:	460e      	mov	r6, r1
 8008fb2:	b921      	cbnz	r1, 8008fbe <_realloc_r+0x16>
 8008fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	4611      	mov	r1, r2
 8008fba:	f7fe bed9 	b.w	8007d70 <_malloc_r>
 8008fbe:	b92a      	cbnz	r2, 8008fcc <_realloc_r+0x24>
 8008fc0:	f7fe fe6a 	bl	8007c98 <_free_r>
 8008fc4:	4625      	mov	r5, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fcc:	f000 f82e 	bl	800902c <_malloc_usable_size_r>
 8008fd0:	4284      	cmp	r4, r0
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	d802      	bhi.n	8008fdc <_realloc_r+0x34>
 8008fd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fda:	d812      	bhi.n	8009002 <_realloc_r+0x5a>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f7fe fec6 	bl	8007d70 <_malloc_r>
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d0ed      	beq.n	8008fc6 <_realloc_r+0x1e>
 8008fea:	42bc      	cmp	r4, r7
 8008fec:	4622      	mov	r2, r4
 8008fee:	4631      	mov	r1, r6
 8008ff0:	bf28      	it	cs
 8008ff2:	463a      	movcs	r2, r7
 8008ff4:	f7fe fe3a 	bl	8007c6c <memcpy>
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7fe fe4c 	bl	8007c98 <_free_r>
 8009000:	e7e1      	b.n	8008fc6 <_realloc_r+0x1e>
 8009002:	4635      	mov	r5, r6
 8009004:	e7df      	b.n	8008fc6 <_realloc_r+0x1e>
	...

08009008 <_read_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	; (8009028 <_read_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7f8 f924 	bl	8001264 <_read>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_read_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_read_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000904 	.word	0x20000904

0800902c <_malloc_usable_size_r>:
 800902c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009030:	1f18      	subs	r0, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfbc      	itt	lt
 8009036:	580b      	ldrlt	r3, [r1, r0]
 8009038:	18c0      	addlt	r0, r0, r3
 800903a:	4770      	bx	lr

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
