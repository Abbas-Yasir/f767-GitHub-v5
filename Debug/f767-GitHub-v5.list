
f767-GitHub-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001648c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a90  080166a0  080166a0  000266a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018130  08018130  00030f7c  2**0
                  CONTENTS
  4 .ARM          00000008  08018130  08018130  00028130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018138  08018138  00030f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018138  08018138  00028138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801813c  0801813c  0002813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f7c  20000000  08018140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000f7c  080190bc  00030f7c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001430  080190bc  00031430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030f7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa0d  00000000  00000000  00030faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c2  00000000  00000000  0004b9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0004f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  000506f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c05b  00000000  00000000  00051908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b43a  00000000  00000000  0007d963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d6fd  00000000  00000000  00098d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a649a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000625c  00000000  00000000  001a64ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ac748  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ac814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000f7c 	.word	0x20000f7c
 800021c:	00000000 	.word	0x00000000
 8000220:	08016674 	.word	0x08016674

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000f80 	.word	0x20000f80
 800023c:	08016674 	.word	0x08016674

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b9a8 	b.w	8000658 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f83a 	bl	8000388 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__aeabi_f2lz>:
 8000320:	ee07 0a90 	vmov	s15, r0
 8000324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032c:	d401      	bmi.n	8000332 <__aeabi_f2lz+0x12>
 800032e:	f000 b80b 	b.w	8000348 <__aeabi_f2ulz>
 8000332:	eef1 7a67 	vneg.f32	s15, s15
 8000336:	b508      	push	{r3, lr}
 8000338:	ee17 0a90 	vmov	r0, s15
 800033c:	f000 f804 	bl	8000348 <__aeabi_f2ulz>
 8000340:	4240      	negs	r0, r0
 8000342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000346:	bd08      	pop	{r3, pc}

08000348 <__aeabi_f2ulz>:
 8000348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000378 <__aeabi_f2ulz+0x30>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000380 <__aeabi_f2ulz+0x38>
 8000354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800035c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000360:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000364:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000368:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800036c:	ee16 1a10 	vmov	r1, s12
 8000370:	ee17 0a90 	vmov	r0, s15
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	00000000 	.word	0x00000000
 800037c:	3df00000 	.word	0x3df00000
 8000380:	00000000 	.word	0x00000000
 8000384:	41f00000 	.word	0x41f00000

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CRC_Init+0x3c>)
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <MX_CRC_Init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CRC_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CRC_Init+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CRC_Init+0x3c>)
 8000686:	f003 fe65 	bl	8004354 <HAL_CRC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000690:	f000 ff28 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000f98 	.word	0x20000f98
 800069c:	40023000 	.word	0x40023000

080006a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_CRC_MspInit+0x38>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023000 	.word	0x40023000
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2044      	movs	r0, #68	; 0x44
 8000704:	f003 fdef 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000708:	2044      	movs	r0, #68	; 0x44
 800070a:	f003 fe08 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a43      	ldr	r2, [pc, #268]	; (8000844 <MX_GPIO_Init+0x128>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <MX_GPIO_Init+0x128>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0x128>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_GPIO_Init+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <MX_GPIO_Init+0x128>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <MX_GPIO_Init+0x128>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0x128>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007c2:	2200      	movs	r2, #0
 80007c4:	f647 0110 	movw	r1, #30736	; 0x7810
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007ca:	f004 fbd5 	bl	8004f78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_GPIO_Init+0x130>)
 80007d4:	f004 fbd0 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80007de:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_GPIO_Init+0x134>)
 80007e0:	f004 fbca 	bl	8004f78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80007e4:	f647 0310 	movw	r3, #30736	; 0x7810
 80007e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x12c>)
 80007fe:	f004 fa0f 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000802:	2310      	movs	r3, #16
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0x130>)
 800081a:	f004 fa01 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800081e:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_GPIO_Init+0x134>)
 8000838:	f004 f9f2 	bl	8004c20 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40021000 	.word	0x40021000
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400

08000854 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085e:	f3bf 8f6f 	isb	sy
}
 8000862:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <SCB_EnableICache+0x48>)
 8000866:	2200      	movs	r2, #0
 8000868:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000872:	f3bf 8f6f 	isb	sy
}
 8000876:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <SCB_EnableICache+0x48>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <SCB_EnableICache+0x48>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
}
 800088e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SCB_EnableDCache+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <SCB_EnableDCache+0x84>)
 80008b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0b5b      	lsrs	r3, r3, #13
 80008c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	015a      	lsls	r2, r3, #5
 80008d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008de:	4911      	ldr	r1, [pc, #68]	; (8000924 <SCB_EnableDCache+0x84>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ef      	bne.n	80008d0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	60fa      	str	r2, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e5      	bne.n	80008c6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SCB_EnableDCache+0x84>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SCB_EnableDCache+0x84>)
 8000906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d027      	beq.n	8000992 <in_func+0x6a>
//    	read_bulk_4ByteAdd_SharedFM(dev->fp, buff, nbyte);
//    	read_bulk_4ByteAdd_LocalFM(dev->fp, buff, nbyte);
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f001 fe42 	bl	80025d4 <W25qxx_ReadBytes>

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	3b01      	subs	r3, #1
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4911      	ldr	r1, [pc, #68]	; (80009a8 <in_func+0x80>)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <in_func+0x84>)
 8000966:	f013 fb37 	bl	8013fd8 <siprintf>
 800096a:	4603      	mov	r3, r0
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <in_func+0x88>)
 8000970:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <in_func+0x88>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	490c      	ldr	r1, [pc, #48]	; (80009ac <in_func+0x84>)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <in_func+0x8c>)
 800097e:	f006 fd79 	bl	8007474 <HAL_UART_Transmit>

    	dev->fp += nbyte;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	441a      	add	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

        return nbyte;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	e006      	b.n	80009a0 <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	441a      	add	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]
        return nbyte;
 800099e:	88fb      	ldrh	r3, [r7, #6]
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	080166a0 	.word	0x080166a0
 80009ac:	20000fc4 	.word	0x20000fc4
 80009b0:	20000fc0 	.word	0x20000fc0
 80009b4:	200011cc 	.word	0x200011cc

080009b8 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c8:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4611      	mov	r1, r2
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	8912      	ldrh	r2, [r2, #8]
 80009dc:	fb01 f202 	mul.w	r2, r1, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	8809      	ldrh	r1, [r1, #0]
 80009e4:	440a      	add	r2, r1
 80009e6:	4413      	add	r3, r2
 80009e8:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	885a      	ldrh	r2, [r3, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	891b      	ldrh	r3, [r3, #8]
 80009fe:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	83fb      	strh	r3, [r7, #30]
 8000a06:	e010      	b.n	8000a2a <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8000a08:	8afb      	ldrh	r3, [r7, #22]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0e:	6a38      	ldr	r0, [r7, #32]
 8000a10:	f012 fcf2 	bl	80133f8 <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 8000a14:	8afb      	ldrh	r3, [r7, #22]
 8000a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	8abb      	ldrh	r3, [r7, #20]
 8000a1e:	6a3a      	ldr	r2, [r7, #32]
 8000a20:	4413      	add	r3, r2
 8000a22:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 8000a24:	8bfb      	ldrh	r3, [r7, #30]
 8000a26:	3301      	adds	r3, #1
 8000a28:	83fb      	strh	r3, [r7, #30]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	88db      	ldrh	r3, [r3, #6]
 8000a2e:	8bfa      	ldrh	r2, [r7, #30]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d9e9      	bls.n	8000a08 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	f5ad 3da2 	sub.w	sp, sp, #82944	; 0x14400
 8000a46:	b097      	sub	sp, #92	; 0x5c
 8000a48:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4ac5      	ldr	r2, [pc, #788]	; (8000d64 <main+0x324>)
 8000a4e:	443a      	add	r2, r7
 8000a50:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x24;
 8000a52:	2324      	movs	r3, #36	; 0x24
 8000a54:	4ac4      	ldr	r2, [pc, #784]	; (8000d68 <main+0x328>)
 8000a56:	443a      	add	r2, r7
 8000a58:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 5100;
 8000a5a:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8000a5e:	4ac3      	ldr	r2, [pc, #780]	; (8000d6c <main+0x32c>)
 8000a60:	443a      	add	r2, r7
 8000a62:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	4ac2      	ldr	r2, [pc, #776]	; (8000d70 <main+0x330>)
 8000a68:	443a      	add	r2, r7
 8000a6a:	6013      	str	r3, [r2, #0]
	  ai_error ai_err_ICU;
	  ai_i32 nbatch_ICU;
	  uint32_t timestamp_ICU;
	  uint8_t prediction = 0xFF;
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	4ac1      	ldr	r2, [pc, #772]	; (8000d74 <main+0x334>)
 8000a70:	443a      	add	r2, r7
 8000a72:	7013      	strb	r3, [r2, #0]

	  // Chunk of memory used to hold intermediate values for neural network
	  AI_ALIGNED(4) ai_u8 activations_ICU[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

	  // Buffers used to store input and output tensors
	  uint8_t image[AI_NETWORK_IN_1_SIZE_BYTES] = {0};
 8000a74:	f241 4350 	movw	r3, #5200	; 0x1450
 8000a78:	443b      	add	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f843 2c30 	str.w	r2, [r3, #-48]
 8000a80:	3b2c      	subs	r3, #44	; 0x2c
 8000a82:	f644 22fc 	movw	r2, #19196	; 0x4afc
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f012 fcdd 	bl	8013448 <memset>
	  AI_ALIGNED(4) ai_i8 out_data_ICU[AI_NETWORK_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle icu_tflite = AI_HANDLE_NULL;
 8000a8e:	f241 4350 	movw	r3, #5200	; 0x1450
 8000a92:	443b      	add	r3, r7
 8000a94:	461a      	mov	r2, r3
 8000a96:	2300      	movs	r3, #0
 8000a98:	f842 3c38 	str.w	r3, [r2, #-56]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input_ICU[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8000a9c:	f241 4350 	movw	r3, #5200	; 0x1450
 8000aa0:	443b      	add	r3, r7
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4bb4      	ldr	r3, [pc, #720]	; (8000d78 <main+0x338>)
 8000aa6:	f842 3c54 	str.w	r3, [r2, #-84]
 8000aaa:	f241 4350 	movw	r3, #5200	; 0x1450
 8000aae:	443b      	add	r3, r7
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f842 3c50 	str.w	r3, [r2, #-80]
 8000ab8:	f241 4350 	movw	r3, #5200	; 0x1450
 8000abc:	443b      	add	r3, r7
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f842 3c4c 	str.w	r3, [r2, #-76]
 8000ac6:	f241 4350 	movw	r3, #5200	; 0x1450
 8000aca:	443b      	add	r3, r7
 8000acc:	461a      	mov	r2, r3
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f842 3c48 	str.w	r3, [r2, #-72]
 8000ad4:	f241 4350 	movw	r3, #5200	; 0x1450
 8000ad8:	443b      	add	r3, r7
 8000ada:	461a      	mov	r2, r3
 8000adc:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000ae0:	f842 3c44 	str.w	r3, [r2, #-68]
 8000ae4:	f241 4350 	movw	r3, #5200	; 0x1450
 8000ae8:	443b      	add	r3, r7
 8000aea:	2201      	movs	r2, #1
 8000aec:	f803 2c40 	strb.w	r2, [r3, #-64]
 8000af0:	f241 4350 	movw	r3, #5200	; 0x1450
 8000af4:	443b      	add	r3, r7
 8000af6:	461a      	mov	r2, r3
 8000af8:	f852 3c40 	ldr.w	r3, [r2, #-64]
 8000afc:	2104      	movs	r1, #4
 8000afe:	f361 231f 	bfi	r3, r1, #8, #24
 8000b02:	f842 3c40 	str.w	r3, [r2, #-64]
 8000b06:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b0a:	443b      	add	r3, r7
 8000b0c:	4a9b      	ldr	r2, [pc, #620]	; (8000d7c <main+0x33c>)
 8000b0e:	f1a3 0464 	sub.w	r4, r3, #100	; 0x64
 8000b12:	4613      	mov	r3, r2
 8000b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b1a:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b1e:	443b      	add	r3, r7
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b97      	ldr	r3, [pc, #604]	; (8000d80 <main+0x340>)
 8000b24:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000b28:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f842 3c3c 	str.w	r3, [r2, #-60]
	  ai_buffer ai_output_ICU[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8000b32:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b36:	443b      	add	r3, r7
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <main+0x338>)
 8000b3c:	f842 3c80 	str.w	r3, [r2, #-128]
 8000b40:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b44:	443b      	add	r3, r7
 8000b46:	461a      	mov	r2, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f842 3c7c 	str.w	r3, [r2, #-124]
 8000b4e:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b52:	443b      	add	r3, r7
 8000b54:	461a      	mov	r2, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	f842 3c78 	str.w	r3, [r2, #-120]
 8000b5c:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b60:	443b      	add	r3, r7
 8000b62:	461a      	mov	r2, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	f842 3c74 	str.w	r3, [r2, #-116]
 8000b6a:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b6e:	443b      	add	r3, r7
 8000b70:	461a      	mov	r2, r3
 8000b72:	2302      	movs	r3, #2
 8000b74:	f842 3c70 	str.w	r3, [r2, #-112]
 8000b78:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b7c:	443b      	add	r3, r7
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8000b84:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b88:	443b      	add	r3, r7
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f852 3c6c 	ldr.w	r3, [r2, #-108]
 8000b90:	2104      	movs	r1, #4
 8000b92:	f361 231f 	bfi	r3, r1, #8, #24
 8000b96:	f842 3c6c 	str.w	r3, [r2, #-108]
 8000b9a:	f241 4350 	movw	r3, #5200	; 0x1450
 8000b9e:	443b      	add	r3, r7
 8000ba0:	4a78      	ldr	r2, [pc, #480]	; (8000d84 <main+0x344>)
 8000ba2:	f1a3 0490 	sub.w	r4, r3, #144	; 0x90
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000baa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bae:	f241 4350 	movw	r3, #5200	; 0x1450
 8000bb2:	443b      	add	r3, r7
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b74      	ldr	r3, [pc, #464]	; (8000d88 <main+0x348>)
 8000bb8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000bbc:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f842 3c68 	str.w	r3, [r2, #-104]

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params_ICU = AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations_ICU));
 8000bc6:	f007 fe8b 	bl	80088e0 <ai_network_data_weights_get>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	f241 4350 	movw	r3, #5200	; 0x1450
 8000bd0:	443b      	add	r3, r7
 8000bd2:	3bc8      	subs	r3, #200	; 0xc8
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 fe4e 	bl	8008878 <ai_network_data_weights_buffer_get>
 8000bdc:	f241 4350 	movw	r3, #5200	; 0x1450
 8000be0:	443b      	add	r3, r7
 8000be2:	f1a3 02ac 	sub.w	r2, r3, #172	; 0xac
 8000be6:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <main+0x34c>)
 8000be8:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000bec:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000bf0:	443b      	add	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	f007 fe0b 	bl	8008810 <ai_network_data_activations_buffer_get>


  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000bfa:	f7ff fe2b 	bl	8000854 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000bfe:	f7ff fe4f 	bl	80008a0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c02:	f003 fa14 	bl	800402e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c06:	f000 fc11 	bl	800142c <SystemClock_Config>
  //localPortFM hspi4

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0a:	f7ff fd87 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0e:	f7ff fd67 	bl	80006e0 <MX_DMA_Init>
  MX_SPI4_Init();
 8000c12:	f000 fd93 	bl	800173c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 ff8b 	bl	8001b30 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000c1a:	f000 fd19 	bl	8001650 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000c1e:	f000 fd55 	bl	80016cc <MX_SPI3_Init>
  MX_QUADSPI_Init();
 8000c22:	f000 fc67 	bl	80014f4 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8000c26:	f000 ffb3 	bl	8001b90 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000c2a:	f000 ff3d 	bl	8001aa8 <MX_TIM14_Init>
  MX_CRC_Init();
 8000c2e:	f7ff fd15 	bl	800065c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 8000c32:	f001 f9c1 	bl	8001fb8 <W25qxx_Init>

  HAL_Delay(5000);
 8000c36:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c3a:	f003 fa55 	bl	80040e8 <HAL_Delay>

  //#define testPortFM shrdPortFM //shrdPortFM or localPortFM

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 8000c3e:	4854      	ldr	r0, [pc, #336]	; (8000d90 <main+0x350>)
 8000c40:	f013 f9b2 	bl	8013fa8 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4a:	4852      	ldr	r0, [pc, #328]	; (8000d94 <main+0x354>)
 8000c4c:	f004 f994 	bl	8004f78 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c50:	2064      	movs	r0, #100	; 0x64
 8000c52:	f003 fa49 	bl	80040e8 <HAL_Delay>

  char readBytes[5000]="ABC";
 8000c56:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000c5a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8000c5e:	4a4e      	ldr	r2, [pc, #312]	; (8000d98 <main+0x358>)
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	3304      	adds	r3, #4
 8000c64:	f241 3284 	movw	r2, #4996	; 0x1384
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f012 fbec 	bl	8013448 <memset>
////  for ( i=0; i<200; i++) {if(i%16==0) {printf("\r\n");} printf("%X ",readBytes[i]);}

//	uint8_t* Target;
#define Target  Space

	HAL_Delay(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c74:	f003 fa38 	bl	80040e8 <HAL_Delay>
	W25qxx_EraseBlock(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 fae5 	bl	8002248 <W25qxx_EraseBlock>

	HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f003 fa31 	bl	80040e8 <HAL_Delay>
	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 8000c86:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <main+0x35c>)
 8000c88:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000c8c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000c90:	443b      	add	r3, r7
 8000c92:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fc9b 	bl	80025d4 <W25qxx_ReadBytes>

	HAL_Delay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f003 fa21 	bl	80040e8 <HAL_Delay>
//	saveImage_LocalFM(0x00000000, Space); //Space or Earth
	W25qxx_WriteBlock(Target, 0, 0, sizeof(Target));
 8000ca6:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	483c      	ldr	r0, [pc, #240]	; (8000da0 <main+0x360>)
 8000cb0:	f001 fc14 	bl	80024dc <W25qxx_WriteBlock>

	StringLength=sprintf(txString,"\r\nTarget size=%d,Space size=%d, Earth size=%d\r\n",sizeof(Target),sizeof(Space),sizeof(Earth));
 8000cb4:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	f240 43bd 	movw	r3, #1213	; 0x4bd
 8000cbe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000cc2:	4938      	ldr	r1, [pc, #224]	; (8000da4 <main+0x364>)
 8000cc4:	4838      	ldr	r0, [pc, #224]	; (8000da8 <main+0x368>)
 8000cc6:	f013 f987 	bl	8013fd8 <siprintf>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <main+0x36c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <main+0x36c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	4933      	ldr	r1, [pc, #204]	; (8000da8 <main+0x368>)
 8000cdc:	4834      	ldr	r0, [pc, #208]	; (8000db0 <main+0x370>)
 8000cde:	f006 fbc9 	bl	8007474 <HAL_UART_Transmit>


	compression_ratio = 3;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <main+0x374>)
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	601a      	str	r2, [r3, #0]


	uint8_t emptyLoop=0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <main+0x378>)
 8000cec:	443a      	add	r2, r7
 8000cee:	7013      	strb	r3, [r2, #0]


	  // Greetings!
	  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI\r\n");
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <main+0x37c>)
 8000cf2:	443b      	add	r3, r7
 8000cf4:	4932      	ldr	r1, [pc, #200]	; (8000dc0 <main+0x380>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f013 f96e 	bl	8013fd8 <siprintf>
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <main+0x330>)
 8000cfe:	443b      	add	r3, r7
 8000d00:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <main+0x330>)
 8000d04:	443b      	add	r3, r7
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	492c      	ldr	r1, [pc, #176]	; (8000dbc <main+0x37c>)
 8000d0c:	4439      	add	r1, r7
 8000d0e:	2364      	movs	r3, #100	; 0x64
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <main+0x370>)
 8000d12:	f006 fbaf 	bl	8007474 <HAL_UART_Transmit>


	  // Create instance of neural network
	  ai_err_ICU = ai_network_create(&icu_tflite, AI_NETWORK_DATA_CONFIG);
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <main+0x384>)
 8000d18:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000d1c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000d20:	443b      	add	r3, r7
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f007 fd11 	bl	800874c <ai_network_create>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <main+0x388>)
 8000d2e:	443a      	add	r2, r7
 8000d30:	6013      	str	r3, [r2, #0]
	  if (ai_err_ICU.type != AI_ERROR_NONE)
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <main+0x388>)
 8000d34:	443b      	add	r3, r7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d049      	beq.n	8000dd0 <main+0x390>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <main+0x37c>)
 8000d3e:	443b      	add	r3, r7
 8000d40:	4922      	ldr	r1, [pc, #136]	; (8000dcc <main+0x38c>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f013 f948 	bl	8013fd8 <siprintf>
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <main+0x330>)
 8000d4a:	443b      	add	r3, r7
 8000d4c:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <main+0x330>)
 8000d50:	443b      	add	r3, r7
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4919      	ldr	r1, [pc, #100]	; (8000dbc <main+0x37c>)
 8000d58:	4439      	add	r1, r7
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	4814      	ldr	r0, [pc, #80]	; (8000db0 <main+0x370>)
 8000d5e:	f006 fb89 	bl	8007474 <HAL_UART_Transmit>
	    while(1);
 8000d62:	e7fe      	b.n	8000d62 <main+0x322>
 8000d64:	00014438 	.word	0x00014438
 8000d68:	00014437 	.word	0x00014437
 8000d6c:	00014430 	.word	0x00014430
 8000d70:	0001444c 	.word	0x0001444c
 8000d74:	0001444b 	.word	0x0001444b
 8000d78:	00840440 	.word	0x00840440
 8000d7c:	08016994 	.word	0x08016994
 8000d80:	fffecf9c 	.word	0xfffecf9c
 8000d84:	080169a4 	.word	0x080169a4
 8000d88:	fffecf70 	.word	0xfffecf70
 8000d8c:	ffff1ad0 	.word	0xffff1ad0
 8000d90:	080166c8 	.word	0x080166c8
 8000d94:	40020400 	.word	0x40020400
 8000d98:	00434241 	.word	0x00434241
 8000d9c:	fffebbb0 	.word	0xfffebbb0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08016704 	.word	0x08016704
 8000da8:	20000fc4 	.word	0x20000fc4
 8000dac:	20000fc0 	.word	0x20000fc0
 8000db0:	200011cc 	.word	0x200011cc
 8000db4:	20000fbc 	.word	0x20000fbc
 8000db8:	0001442f 	.word	0x0001442f
 8000dbc:	00014364 	.word	0x00014364
 8000dc0:	08016734 	.word	0x08016734
 8000dc4:	fffecfc8 	.word	0xfffecfc8
 8000dc8:	00014360 	.word	0x00014360
 8000dcc:	0801674c 	.word	0x0801674c
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN instance created! \r\n");
 8000dd0:	4b95      	ldr	r3, [pc, #596]	; (8001028 <main+0x5e8>)
 8000dd2:	443b      	add	r3, r7
 8000dd4:	4995      	ldr	r1, [pc, #596]	; (800102c <main+0x5ec>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f013 f8fe 	bl	8013fd8 <siprintf>
 8000ddc:	4b94      	ldr	r3, [pc, #592]	; (8001030 <main+0x5f0>)
 8000dde:	443b      	add	r3, r7
 8000de0:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000de2:	4b93      	ldr	r3, [pc, #588]	; (8001030 <main+0x5f0>)
 8000de4:	443b      	add	r3, r7
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	498f      	ldr	r1, [pc, #572]	; (8001028 <main+0x5e8>)
 8000dec:	4439      	add	r1, r7
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	4890      	ldr	r0, [pc, #576]	; (8001034 <main+0x5f4>)
 8000df2:	f006 fb3f 	bl	8007474 <HAL_UART_Transmit>
	  }

	  // Initialize neural network
	  if (!ai_network_init(icu_tflite, &ai_params_ICU))
 8000df6:	f241 4350 	movw	r3, #5200	; 0x1450
 8000dfa:	443b      	add	r3, r7
 8000dfc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000e00:	4b8d      	ldr	r3, [pc, #564]	; (8001038 <main+0x5f8>)
 8000e02:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000e06:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000e0a:	443b      	add	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4610      	mov	r0, r2
 8000e10:	f007 fcb2 	bl	8008778 <ai_network_init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f083 0301 	eor.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <main+0x408>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000e20:	4b81      	ldr	r3, [pc, #516]	; (8001028 <main+0x5e8>)
 8000e22:	443b      	add	r3, r7
 8000e24:	4985      	ldr	r1, [pc, #532]	; (800103c <main+0x5fc>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f013 f8d6 	bl	8013fd8 <siprintf>
 8000e2c:	4b80      	ldr	r3, [pc, #512]	; (8001030 <main+0x5f0>)
 8000e2e:	443b      	add	r3, r7
 8000e30:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000e32:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <main+0x5f0>)
 8000e34:	443b      	add	r3, r7
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	497b      	ldr	r1, [pc, #492]	; (8001028 <main+0x5e8>)
 8000e3c:	4439      	add	r1, r7
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	487c      	ldr	r0, [pc, #496]	; (8001034 <main+0x5f4>)
 8000e42:	f006 fb17 	bl	8007474 <HAL_UART_Transmit>
	    while(1);
 8000e46:	e7fe      	b.n	8000e46 <main+0x406>
	  }
	  else
	  {
		    buf_len = sprintf(buf, "NN initialized\r\n");
 8000e48:	4b77      	ldr	r3, [pc, #476]	; (8001028 <main+0x5e8>)
 8000e4a:	443b      	add	r3, r7
 8000e4c:	497c      	ldr	r1, [pc, #496]	; (8001040 <main+0x600>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f013 f8c2 	bl	8013fd8 <siprintf>
 8000e54:	4b76      	ldr	r3, [pc, #472]	; (8001030 <main+0x5f0>)
 8000e56:	443b      	add	r3, r7
 8000e58:	6018      	str	r0, [r3, #0]
		    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8000e5a:	4b75      	ldr	r3, [pc, #468]	; (8001030 <main+0x5f0>)
 8000e5c:	443b      	add	r3, r7
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4971      	ldr	r1, [pc, #452]	; (8001028 <main+0x5e8>)
 8000e64:	4439      	add	r1, r7
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	4872      	ldr	r0, [pc, #456]	; (8001034 <main+0x5f4>)
 8000e6a:	f006 fb03 	bl	8007474 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		work = (void*)malloc(sz_work);
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <main+0x604>)
 8000e70:	443b      	add	r3, r7
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f012 fab0 	bl	80133d8 <malloc>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a73      	ldr	r2, [pc, #460]	; (8001048 <main+0x608>)
 8000e7c:	443a      	add	r2, r7
 8000e7e:	6013      	str	r3, [r2, #0]
	  	count++;
 8000e80:	4b72      	ldr	r3, [pc, #456]	; (800104c <main+0x60c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a71      	ldr	r2, [pc, #452]	; (800104c <main+0x60c>)
 8000e88:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 8000e8a:	4b70      	ldr	r3, [pc, #448]	; (800104c <main+0x60c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10b      	bne.n	8000eaa <main+0x46a>
	  		W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <main+0x610>)
 8000e94:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8000e98:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000e9c:	443b      	add	r3, r7
 8000e9e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fb95 	bl	80025d4 <W25qxx_ReadBytes>
	  	}



	  	handshakeCAM = 0;
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <main+0x614>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
	  	 // 	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
	  	  //		HAL_UART_Receive(&huart3, (uint8_t *) &handshakeCAM, 1, 1000);												/* Wait for CAM to command ICU, expects 0x29*/
	  	  //		__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_RXNE);

	  	  		//if (handshakeCAM == 0x29) {
	  	  			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 8000eb0:	4969      	ldr	r1, [pc, #420]	; (8001058 <main+0x618>)
 8000eb2:	486a      	ldr	r0, [pc, #424]	; (800105c <main+0x61c>)
 8000eb4:	f013 f890 	bl	8013fd8 <siprintf>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b68      	ldr	r3, [pc, #416]	; (8001060 <main+0x620>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000ec0:	4b67      	ldr	r3, [pc, #412]	; (8001060 <main+0x620>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	4964      	ldr	r1, [pc, #400]	; (800105c <main+0x61c>)
 8000eca:	485a      	ldr	r0, [pc, #360]	; (8001034 <main+0x5f4>)
 8000ecc:	f006 fad2 	bl	8007474 <HAL_UART_Transmit>

	  	  			HAL_Delay(1000);
 8000ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed4:	f003 f908 	bl	80040e8 <HAL_Delay>
	  	  			devid.fp=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4a62      	ldr	r2, [pc, #392]	; (8001064 <main+0x624>)
 8000edc:	443a      	add	r2, r7
 8000ede:	6013      	str	r3, [r2, #0]
//	  	  			devid.fp= Space;

	  				StringLength=sprintf(txString,"\r\n");
 8000ee0:	4961      	ldr	r1, [pc, #388]	; (8001068 <main+0x628>)
 8000ee2:	485e      	ldr	r0, [pc, #376]	; (800105c <main+0x61c>)
 8000ee4:	f013 f878 	bl	8013fd8 <siprintf>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b5c      	ldr	r3, [pc, #368]	; (8001060 <main+0x620>)
 8000eee:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000ef0:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <main+0x620>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	4958      	ldr	r1, [pc, #352]	; (800105c <main+0x61c>)
 8000efa:	484e      	ldr	r0, [pc, #312]	; (8001034 <main+0x5f4>)
 8000efc:	f006 faba 	bl	8007474 <HAL_UART_Transmit>

	  	//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

	  	  			res = jd_prepare(&jdec, in_func, work, 3100, &devid);													/* Prepare to decompress */
 8000f00:	485a      	ldr	r0, [pc, #360]	; (800106c <main+0x62c>)
 8000f02:	4438      	add	r0, r7
 8000f04:	4b57      	ldr	r3, [pc, #348]	; (8001064 <main+0x624>)
 8000f06:	443b      	add	r3, r7
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	f640 431c 	movw	r3, #3100	; 0xc1c
 8000f0e:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <main+0x608>)
 8000f10:	443a      	add	r2, r7
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	4956      	ldr	r1, [pc, #344]	; (8001070 <main+0x630>)
 8000f16:	f002 fd59 	bl	80039cc <jd_prepare>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a55      	ldr	r2, [pc, #340]	; (8001074 <main+0x634>)
 8000f1e:	443a      	add	r2, r7
 8000f20:	7013      	strb	r3, [r2, #0]
	  	  			if (res == JDR_OK)
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <main+0x634>)
 8000f24:	443b      	add	r3, r7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f040 80d4 	bne.w	80010d6 <main+0x696>
	  	  			{																					/* Ready to decompress. Image info is available here. */
	  	  				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 8000f2e:	4b52      	ldr	r3, [pc, #328]	; (8001078 <main+0x638>)
 8000f30:	443b      	add	r3, r7
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <main+0x63c>)
 8000f38:	443b      	add	r3, r7
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <main+0x640>)
 8000f40:	443b      	add	r3, r7
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <main+0x604>)
 8000f48:	443b      	add	r3, r7
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	460a      	mov	r2, r1
 8000f54:	494b      	ldr	r1, [pc, #300]	; (8001084 <main+0x644>)
 8000f56:	4841      	ldr	r0, [pc, #260]	; (800105c <main+0x61c>)
 8000f58:	f013 f83e 	bl	8013fd8 <siprintf>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <main+0x620>)
 8000f62:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <main+0x620>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	493b      	ldr	r1, [pc, #236]	; (800105c <main+0x61c>)
 8000f6e:	4831      	ldr	r0, [pc, #196]	; (8001034 <main+0x5f4>)
 8000f70:	f006 fa80 	bl	8007474 <HAL_UART_Transmit>

	  	  				image_size = N_BPP  * jdec.width * jdec.height;
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <main+0x638>)
 8000f76:	443b      	add	r3, r7
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <main+0x63c>)
 8000f7c:	443a      	add	r2, r7
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a40      	ldr	r2, [pc, #256]	; (8001088 <main+0x648>)
 8000f86:	443a      	add	r2, r7
 8000f88:	6013      	str	r3, [r2, #0]
	  	  				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <main+0x648>)
 8000f8c:	443b      	add	r3, r7
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f012 fa21 	bl	80133d8 <malloc>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <main+0x64c>)
 8000f9a:	443a      	add	r2, r7
 8000f9c:	6013      	str	r3, [r2, #0]
	  	  		        devid.wfbuf = jdec.width;
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <main+0x638>)
 8000fa0:	443b      	add	r3, r7
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <main+0x650>)
 8000fa6:	443a      	add	r2, r7
 8000fa8:	8013      	strh	r3, [r2, #0]

	  					Width = jdec.width;
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <main+0x638>)
 8000fac:	443b      	add	r3, r7
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <main+0x654>)
 8000fb4:	601a      	str	r2, [r3, #0]
	  					Height = jdec.height;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <main+0x63c>)
 8000fb8:	443b      	add	r3, r7
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <main+0x658>)
 8000fc0:	601a      	str	r2, [r3, #0]

	  	  				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 8000fc2:	4936      	ldr	r1, [pc, #216]	; (800109c <main+0x65c>)
 8000fc4:	4825      	ldr	r0, [pc, #148]	; (800105c <main+0x61c>)
 8000fc6:	f013 f807 	bl	8013fd8 <siprintf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <main+0x620>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <main+0x620>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	4920      	ldr	r1, [pc, #128]	; (800105c <main+0x61c>)
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <main+0x5f4>)
 8000fde:	f006 fa49 	bl	8007474 <HAL_UART_Transmit>

	  	  				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <main+0x660>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <main+0x62c>)
 8000fea:	443b      	add	r3, r7
 8000fec:	492d      	ldr	r1, [pc, #180]	; (80010a4 <main+0x664>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 ffa2 	bl	8003f38 <jd_decomp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <main+0x634>)
 8000ff8:	443a      	add	r2, r7
 8000ffa:	7013      	strb	r3, [r2, #0]
	  	  				if (res == JDR_OK) {
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <main+0x634>)
 8000ffe:	443b      	add	r3, r7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d152      	bne.n	80010ac <main+0x66c>
	  	  					StringLength=sprintf(txString,"Decompression - Success\r\n");
 8001006:	4928      	ldr	r1, [pc, #160]	; (80010a8 <main+0x668>)
 8001008:	4814      	ldr	r0, [pc, #80]	; (800105c <main+0x61c>)
 800100a:	f012 ffe5 	bl	8013fd8 <siprintf>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <main+0x620>)
 8001014:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <main+0x620>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29a      	uxth	r2, r3
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	490f      	ldr	r1, [pc, #60]	; (800105c <main+0x61c>)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <main+0x5f4>)
 8001022:	f006 fa27 	bl	8007474 <HAL_UART_Transmit>
 8001026:	e06a      	b.n	80010fe <main+0x6be>
 8001028:	00014364 	.word	0x00014364
 800102c:	08016774 	.word	0x08016774
 8001030:	0001444c 	.word	0x0001444c
 8001034:	200011cc 	.word	0x200011cc
 8001038:	fffecf38 	.word	0xfffecf38
 800103c:	0801678c 	.word	0x0801678c
 8001040:	080167b0 	.word	0x080167b0
 8001044:	00014430 	.word	0x00014430
 8001048:	00014428 	.word	0x00014428
 800104c:	20001000 	.word	0x20001000
 8001050:	fffebbb0 	.word	0xfffebbb0
 8001054:	20000ff6 	.word	0x20000ff6
 8001058:	080167c4 	.word	0x080167c4
 800105c:	20000fc4 	.word	0x20000fc4
 8001060:	20000fc0 	.word	0x20000fc0
 8001064:	00014398 	.word	0x00014398
 8001068:	080167e8 	.word	0x080167e8
 800106c:	000143a4 	.word	0x000143a4
 8001070:	08000929 	.word	0x08000929
 8001074:	00014427 	.word	0x00014427
 8001078:	000143c0 	.word	0x000143c0
 800107c:	000143c2 	.word	0x000143c2
 8001080:	00014410 	.word	0x00014410
 8001084:	080167ec 	.word	0x080167ec
 8001088:	00014438 	.word	0x00014438
 800108c:	0001439c 	.word	0x0001439c
 8001090:	000143a0 	.word	0x000143a0
 8001094:	20000ff8 	.word	0x20000ff8
 8001098:	20000ffc 	.word	0x20000ffc
 800109c:	08016838 	.word	0x08016838
 80010a0:	20000fbc 	.word	0x20000fbc
 80010a4:	080009b9 	.word	0x080009b9
 80010a8:	08016868 	.word	0x08016868
	  	  				}
	  	  				else{
	  	  					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 80010ac:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <main+0x8e4>)
 80010ae:	443b      	add	r3, r7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	499c      	ldr	r1, [pc, #624]	; (8001328 <main+0x8e8>)
 80010b6:	489d      	ldr	r0, [pc, #628]	; (800132c <main+0x8ec>)
 80010b8:	f012 ff8e 	bl	8013fd8 <siprintf>
 80010bc:	4603      	mov	r3, r0
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b9b      	ldr	r3, [pc, #620]	; (8001330 <main+0x8f0>)
 80010c2:	701a      	strb	r2, [r3, #0]
	  	  					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80010c4:	4b9a      	ldr	r3, [pc, #616]	; (8001330 <main+0x8f0>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	4997      	ldr	r1, [pc, #604]	; (800132c <main+0x8ec>)
 80010ce:	4899      	ldr	r0, [pc, #612]	; (8001334 <main+0x8f4>)
 80010d0:	f006 f9d0 	bl	8007474 <HAL_UART_Transmit>
 80010d4:	e013      	b.n	80010fe <main+0x6be>
	  	  				}
	  	  			}
	  	  			else{
	  	  			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 80010d6:	4b93      	ldr	r3, [pc, #588]	; (8001324 <main+0x8e4>)
 80010d8:	443b      	add	r3, r7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4996      	ldr	r1, [pc, #600]	; (8001338 <main+0x8f8>)
 80010e0:	4892      	ldr	r0, [pc, #584]	; (800132c <main+0x8ec>)
 80010e2:	f012 ff79 	bl	8013fd8 <siprintf>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b91      	ldr	r3, [pc, #580]	; (8001330 <main+0x8f0>)
 80010ec:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80010ee:	4b90      	ldr	r3, [pc, #576]	; (8001330 <main+0x8f0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	498d      	ldr	r1, [pc, #564]	; (800132c <main+0x8ec>)
 80010f8:	488e      	ldr	r0, [pc, #568]	; (8001334 <main+0x8f4>)
 80010fa:	f006 f9bb 	bl	8007474 <HAL_UART_Transmit>
	  	  			}

	  	  			HAL_Delay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f002 fff1 	bl	80040e8 <HAL_Delay>

					ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 8001106:	f241 4350 	movw	r3, #5200	; 0x1450
 800110a:	443b      	add	r3, r7
 800110c:	461a      	mov	r2, r3
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <main+0x8fc>)
 8001110:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8001114:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001118:	443b      	add	r3, r7
 800111a:	f842 3c50 	str.w	r3, [r2, #-80]
//	  				ai_output_ICU[0].n_batches = 1;
					ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 800111e:	f241 4350 	movw	r3, #5200	; 0x1450
 8001122:	443b      	add	r3, r7
 8001124:	461a      	mov	r2, r3
 8001126:	4b86      	ldr	r3, [pc, #536]	; (8001340 <main+0x900>)
 8001128:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 800112c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001130:	443b      	add	r3, r7
 8001132:	f842 3c7c 	str.w	r3, [r2, #-124]

	  	  			// Image Classification Section
	  	  		    for (int  i = 0; i < 19200; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	4a82      	ldr	r2, [pc, #520]	; (8001344 <main+0x904>)
 800113a:	443a      	add	r2, r7
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e018      	b.n	8001172 <main+0x732>
	  	  		    {
	  	  		    	image[i] = *(devid.fbuf + i);
 8001140:	4b81      	ldr	r3, [pc, #516]	; (8001348 <main+0x908>)
 8001142:	443b      	add	r3, r7
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <main+0x904>)
 8001148:	443b      	add	r3, r7
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4413      	add	r3, r2
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	f241 4350 	movw	r3, #5200	; 0x1450
 8001154:	443b      	add	r3, r7
 8001156:	4619      	mov	r1, r3
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <main+0x904>)
 800115a:	443b      	add	r3, r7
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	440b      	add	r3, r1
 8001160:	3b30      	subs	r3, #48	; 0x30
 8001162:	701a      	strb	r2, [r3, #0]
	  	  		    for (int  i = 0; i < 19200; i++)
 8001164:	4b77      	ldr	r3, [pc, #476]	; (8001344 <main+0x904>)
 8001166:	443b      	add	r3, r7
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a75      	ldr	r2, [pc, #468]	; (8001344 <main+0x904>)
 800116e:	443a      	add	r2, r7
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <main+0x904>)
 8001174:	443b      	add	r3, r7
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800117c:	dbe0      	blt.n	8001140 <main+0x700>
	  	  		    }


	  	  		// Get current timestamp
	  	  		timestamp_ICU = htim14.Instance->CNT;
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <main+0x90c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	4a72      	ldr	r2, [pc, #456]	; (8001350 <main+0x910>)
 8001186:	443a      	add	r2, r7
 8001188:	6013      	str	r3, [r2, #0]




	  	  		    // Perform inference
	  	  		    nbatch_ICU = ai_network_run(icu_tflite, &ai_input_ICU[0], &ai_output_ICU[0]);
 800118a:	f241 4350 	movw	r3, #5200	; 0x1450
 800118e:	443b      	add	r3, r7
 8001190:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8001194:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <main+0x914>)
 8001196:	4b70      	ldr	r3, [pc, #448]	; (8001358 <main+0x918>)
 8001198:	4413      	add	r3, r2
 800119a:	19da      	adds	r2, r3, r7
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <main+0x91c>)
 800119e:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 80011a2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80011a6:	443b      	add	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	f007 fb21 	bl	80087f0 <ai_network_run>
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <main+0x920>)
 80011b0:	443b      	add	r3, r7
 80011b2:	6018      	str	r0, [r3, #0]

	  	  		    if (nbatch_ICU != 1) {
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <main+0x920>)
 80011b6:	443b      	add	r3, r7
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d013      	beq.n	80011e6 <main+0x7a6>
	  	  		      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80011be:	4b69      	ldr	r3, [pc, #420]	; (8001364 <main+0x924>)
 80011c0:	443b      	add	r3, r7
 80011c2:	4969      	ldr	r1, [pc, #420]	; (8001368 <main+0x928>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f012 ff07 	bl	8013fd8 <siprintf>
 80011ca:	4b68      	ldr	r3, [pc, #416]	; (800136c <main+0x92c>)
 80011cc:	443b      	add	r3, r7
 80011ce:	6018      	str	r0, [r3, #0]
	  	  		      HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <main+0x92c>)
 80011d2:	443b      	add	r3, r7
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4962      	ldr	r1, [pc, #392]	; (8001364 <main+0x924>)
 80011da:	4439      	add	r1, r7
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	4855      	ldr	r0, [pc, #340]	; (8001334 <main+0x8f4>)
 80011e0:	f006 f948 	bl	8007474 <HAL_UART_Transmit>
 80011e4:	e012      	b.n	800120c <main+0x7cc>
	  	  		    }
	  	  		    else
	  	  		    {
	  	  		  	    buf_len = sprintf(buf, "\r\nRunning ICU tflite done!\r\n");
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <main+0x924>)
 80011e8:	443b      	add	r3, r7
 80011ea:	4961      	ldr	r1, [pc, #388]	; (8001370 <main+0x930>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f012 fef3 	bl	8013fd8 <siprintf>
 80011f2:	4b5e      	ldr	r3, [pc, #376]	; (800136c <main+0x92c>)
 80011f4:	443b      	add	r3, r7
 80011f6:	6018      	str	r0, [r3, #0]
	  	  		  	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <main+0x92c>)
 80011fa:	443b      	add	r3, r7
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4958      	ldr	r1, [pc, #352]	; (8001364 <main+0x924>)
 8001202:	4439      	add	r1, r7
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	484b      	ldr	r0, [pc, #300]	; (8001334 <main+0x8f4>)
 8001208:	f006 f934 	bl	8007474 <HAL_UART_Transmit>
	  	  		    }

	  	  		    float max_val = -1;
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <main+0x934>)
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <main+0x938>)
 8001210:	443a      	add	r2, r7
 8001212:	6013      	str	r3, [r2, #0]

	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	4a59      	ldr	r2, [pc, #356]	; (800137c <main+0x93c>)
 8001218:	443a      	add	r2, r7
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e04b      	b.n	80012b6 <main+0x876>
	  	  		    {
	  	  		        if(max_val < out_data_ICU[i])
 800121e:	f241 4350 	movw	r3, #5200	; 0x1450
 8001222:	443b      	add	r3, r7
 8001224:	461a      	mov	r2, r3
 8001226:	4b55      	ldr	r3, [pc, #340]	; (800137c <main+0x93c>)
 8001228:	443b      	add	r3, r7
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	3b34      	subs	r3, #52	; 0x34
 8001230:	f993 3000 	ldrsb.w	r3, [r3]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <main+0x938>)
 800123e:	443b      	add	r3, r7
 8001240:	ed93 7a00 	vldr	s14, [r3]
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d52c      	bpl.n	80012a8 <main+0x868>
	  	  		        {
	  	  		            max_val = out_data_ICU[i];
 800124e:	f241 4350 	movw	r3, #5200	; 0x1450
 8001252:	443b      	add	r3, r7
 8001254:	461a      	mov	r2, r3
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <main+0x93c>)
 8001258:	443b      	add	r3, r7
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	3b34      	subs	r3, #52	; 0x34
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	4b42      	ldr	r3, [pc, #264]	; (8001378 <main+0x938>)
 800126e:	443b      	add	r3, r7
 8001270:	edc3 7a00 	vstr	s15, [r3]
	  	  		            prediction = i;
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <main+0x93c>)
 8001276:	443b      	add	r3, r7
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a41      	ldr	r2, [pc, #260]	; (8001380 <main+0x940>)
 800127c:	443a      	add	r2, r7
 800127e:	7013      	strb	r3, [r2, #0]

	  						StringLength=sprintf(txString,"\r\n\nIndex:  %ld ", (long)prediction);
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <main+0x940>)
 8001282:	443b      	add	r3, r7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	493e      	ldr	r1, [pc, #248]	; (8001384 <main+0x944>)
 800128a:	4828      	ldr	r0, [pc, #160]	; (800132c <main+0x8ec>)
 800128c:	f012 fea4 	bl	8013fd8 <siprintf>
 8001290:	4603      	mov	r3, r0
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x8f0>)
 8001296:	701a      	strb	r2, [r3, #0]
	  						HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <main+0x8f0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	4922      	ldr	r1, [pc, #136]	; (800132c <main+0x8ec>)
 80012a2:	4824      	ldr	r0, [pc, #144]	; (8001334 <main+0x8f4>)
 80012a4:	f006 f8e6 	bl	8007474 <HAL_UART_Transmit>
	  	  		    for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80012a8:	4b34      	ldr	r3, [pc, #208]	; (800137c <main+0x93c>)
 80012aa:	443b      	add	r3, r7
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a32      	ldr	r2, [pc, #200]	; (800137c <main+0x93c>)
 80012b2:	443a      	add	r2, r7
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b31      	ldr	r3, [pc, #196]	; (800137c <main+0x93c>)
 80012b8:	443b      	add	r3, r7
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	ddae      	ble.n	800121e <main+0x7de>
	  	  		    }

	  	  		    prediction = prediction;

	  	  		// Print output of neural network along with inference time (microseconds)
	  	  		StringLength = sprintf(txString,"Output: %f | Duration: %lu\r\n", prediction, htim14.Instance->CNT - timestamp_ICU);
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <main+0x940>)
 80012c2:	443b      	add	r3, r7
 80012c4:	7819      	ldrb	r1, [r3, #0]
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <main+0x90c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <main+0x910>)
 80012ce:	443b      	add	r3, r7
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	460a      	mov	r2, r1
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <main+0x948>)
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <main+0x8ec>)
 80012da:	f012 fe7d 	bl	8013fd8 <siprintf>
 80012de:	4603      	mov	r3, r0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <main+0x8f0>)
 80012e4:	701a      	strb	r2, [r3, #0]
	  	  		HAL_UART_Transmit(&debugPort, (uint8_t *)txString, buf_len, 100);
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <main+0x92c>)
 80012e8:	443b      	add	r3, r7
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2364      	movs	r3, #100	; 0x64
 80012f0:	490e      	ldr	r1, [pc, #56]	; (800132c <main+0x8ec>)
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <main+0x8f4>)
 80012f4:	f006 f8be 	bl	8007474 <HAL_UART_Transmit>


	  	  		    if (prediction == 1)
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <main+0x940>)
 80012fa:	443b      	add	r3, r7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d146      	bne.n	8001390 <main+0x950>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Space \r\n");
 8001302:	4922      	ldr	r1, [pc, #136]	; (800138c <main+0x94c>)
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <main+0x8ec>)
 8001306:	f012 fe67 	bl	8013fd8 <siprintf>
 800130a:	4603      	mov	r3, r0
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <main+0x8f0>)
 8001310:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <main+0x8f0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b29a      	uxth	r2, r3
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	4904      	ldr	r1, [pc, #16]	; (800132c <main+0x8ec>)
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <main+0x8f4>)
 800131e:	f006 f8a9 	bl	8007474 <HAL_UART_Transmit>
 8001322:	e05b      	b.n	80013dc <main+0x99c>
 8001324:	00014427 	.word	0x00014427
 8001328:	08016884 	.word	0x08016884
 800132c:	20000fc4 	.word	0x20000fc4
 8001330:	20000fc0 	.word	0x20000fc0
 8001334:	200011cc 	.word	0x200011cc
 8001338:	080168a4 	.word	0x080168a4
 800133c:	fffecfd0 	.word	0xfffecfd0
 8001340:	fffecfcc 	.word	0xfffecfcc
 8001344:	00014444 	.word	0x00014444
 8001348:	0001439c 	.word	0x0001439c
 800134c:	20001180 	.word	0x20001180
 8001350:	00014420 	.word	0x00014420
 8001354:	fffecf80 	.word	0xfffecf80
 8001358:	00014450 	.word	0x00014450
 800135c:	fffecfac 	.word	0xfffecfac
 8001360:	0001441c 	.word	0x0001441c
 8001364:	00014364 	.word	0x00014364
 8001368:	080168d8 	.word	0x080168d8
 800136c:	0001444c 	.word	0x0001444c
 8001370:	080168fc 	.word	0x080168fc
 8001374:	bf800000 	.word	0xbf800000
 8001378:	00014440 	.word	0x00014440
 800137c:	0001443c 	.word	0x0001443c
 8001380:	0001444b 	.word	0x0001444b
 8001384:	0801691c 	.word	0x0801691c
 8001388:	0801692c 	.word	0x0801692c
 800138c:	0801694c 	.word	0x0801694c
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Space_ICU, 1, 100);
	  	  		    }
	  	  		    else if (prediction == 0)
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <main+0x9c8>)
 8001392:	443b      	add	r3, r7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <main+0x97c>
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nPrediction:  Earth \r\n");
 800139a:	491c      	ldr	r1, [pc, #112]	; (800140c <main+0x9cc>)
 800139c:	481c      	ldr	r0, [pc, #112]	; (8001410 <main+0x9d0>)
 800139e:	f012 fe1b 	bl	8013fd8 <siprintf>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <main+0x9d4>)
 80013a8:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <main+0x9d4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	4917      	ldr	r1, [pc, #92]	; (8001410 <main+0x9d0>)
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <main+0x9d8>)
 80013b6:	f006 f85d 	bl	8007474 <HAL_UART_Transmit>
 80013ba:	e00f      	b.n	80013dc <main+0x99c>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Earth_ICU, 1, 100);
	  	  		    }
	  	  		    else
	  	  		    {
	  	  				StringLength=sprintf(txString,"\r\nError Prediction \r\n");
 80013bc:	4917      	ldr	r1, [pc, #92]	; (800141c <main+0x9dc>)
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <main+0x9d0>)
 80013c0:	f012 fe0a 	bl	8013fd8 <siprintf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <main+0x9d4>)
 80013ca:	701a      	strb	r2, [r3, #0]
	  	  				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <main+0x9d4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <main+0x9d0>)
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <main+0x9d8>)
 80013d8:	f006 f84c 	bl	8007474 <HAL_UART_Transmit>
//	  	  				HAL_UART_Transmit(&huart3, (uint8_t *) &Error_ICU, 1, 100);
	  	  		    }



	  	  	  	if (count == 10000) {
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <main+0x9e0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d102      	bne.n	80013ee <main+0x9ae>
	  	  	  		count = 0;																									/* Reset to zero to prevent overflowing bugs */
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <main+0x9e0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	  	  	  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  		free(work);   /* Discard work area */
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <main+0x9e4>)
 80013f0:	443b      	add	r3, r7
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f011 fff8 	bl	80133e8 <free>
	  	  		free(devid.fbuf);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <main+0x9e8>)
 80013fa:	443b      	add	r3, r7
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f011 fff2 	bl	80133e8 <free>
  {
 8001404:	e533      	b.n	8000e6e <main+0x42e>
 8001406:	bf00      	nop
 8001408:	0001444b 	.word	0x0001444b
 800140c:	08016964 	.word	0x08016964
 8001410:	20000fc4 	.word	0x20000fc4
 8001414:	20000fc0 	.word	0x20000fc0
 8001418:	200011cc 	.word	0x200011cc
 800141c:	0801697c 	.word	0x0801697c
 8001420:	20001000 	.word	0x20001000
 8001424:	00014428 	.word	0x00014428
 8001428:	0001439c 	.word	0x0001439c

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2234      	movs	r2, #52	; 0x34
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f012 f804 	bl	8013448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <SystemClock_Config+0xb0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a21      	ldr	r2, [pc, #132]	; (80014dc <SystemClock_Config+0xb0>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <SystemClock_Config+0xb0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <SystemClock_Config+0xb4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <SystemClock_Config+0xb4>)
 8001472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <SystemClock_Config+0xb4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2310      	movs	r3, #16
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fe49 	bl	8005130 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80014a4:	f000 f81e 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 f8e2 	bl	800568c <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014ce:	f000 f809 	bl	80014e4 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_QUADSPI_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MX_QUADSPI_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001500:	22ff      	movs	r2, #255	; 0xff
 8001502:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001506:	2201      	movs	r2, #1
 8001508:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_QUADSPI_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001512:	2201      	movs	r2, #1
 8001514:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_QUADSPI_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_QUADSPI_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_QUADSPI_Init+0x50>)
 8001530:	f003 fd3c 	bl	8004fac <HAL_QSPI_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800153a:	f7ff ffd3 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001004 	.word	0x20001004
 8001548:	a0001000 	.word	0xa0001000

0800154c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a35      	ldr	r2, [pc, #212]	; (8001640 <HAL_QSPI_MspInit+0xf4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d164      	bne.n	8001638 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6393      	str	r3, [r2, #56]	; 0x38
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_QSPI_MspInit+0xf8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b6:	23c0      	movs	r3, #192	; 0xc0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015c6:	2309      	movs	r3, #9
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <HAL_QSPI_MspInit+0xfc>)
 80015d2:	f003 fb25 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015e8:	230a      	movs	r3, #10
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4815      	ldr	r0, [pc, #84]	; (8001648 <HAL_QSPI_MspInit+0xfc>)
 80015f4:	f003 fb14 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f8:	2304      	movs	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001608:	2309      	movs	r3, #9
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <HAL_QSPI_MspInit+0x100>)
 8001614:	f003 fb04 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001628:	230a      	movs	r3, #10
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <HAL_QSPI_MspInit+0x100>)
 8001634:	f003 faf4 	bl	8004c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	a0001000 	.word	0xa0001000
 8001644:	40023800 	.word	0x40023800
 8001648:	40021400 	.word	0x40021400
 800164c:	40020400 	.word	0x40020400

08001650 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_SPI1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_SPI1_Init+0x74>)
 800165c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_SPI1_Init+0x74>)
 800166a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800166e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_SPI1_Init+0x74>)
 800167e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001686:	2210      	movs	r2, #16
 8001688:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_SPI1_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_SPI1_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_SPI1_Init+0x74>)
 800169e:	2207      	movs	r2, #7
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_SPI1_Init+0x74>)
 80016aa:	2208      	movs	r2, #8
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_SPI1_Init+0x74>)
 80016b0:	f004 fe3a 	bl	8006328 <HAL_SPI_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f7ff ff13 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20001050 	.word	0x20001050
 80016c8:	40013000 	.word	0x40013000

080016cc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_SPI3_Init+0x68>)
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_SPI3_Init+0x6c>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_SPI3_Init+0x68>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_SPI3_Init+0x68>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_SPI3_Init+0x68>)
 80016e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_SPI3_Init+0x68>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_SPI3_Init+0x68>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_SPI3_Init+0x68>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_SPI3_Init+0x68>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_SPI3_Init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_SPI3_Init+0x68>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_SPI3_Init+0x68>)
 8001710:	2207      	movs	r2, #7
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_SPI3_Init+0x68>)
 8001716:	2200      	movs	r2, #0
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_SPI3_Init+0x68>)
 800171c:	2200      	movs	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_SPI3_Init+0x68>)
 8001722:	f004 fe01 	bl	8006328 <HAL_SPI_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800172c:	f7ff feda 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200010b4 	.word	0x200010b4
 8001738:	40003c00 	.word	0x40003c00

0800173c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <MX_SPI4_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800175a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI4_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI4_Init+0x74>)
 800176a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001772:	2228      	movs	r2, #40	; 0x28
 8001774:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI4_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI4_Init+0x74>)
 800178a:	2207      	movs	r2, #7
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI4_Init+0x74>)
 8001796:	2208      	movs	r2, #8
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_SPI4_Init+0x74>)
 800179c:	f004 fdc4 	bl	8006328 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f7ff fe9d 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001118 	.word	0x20001118
 80017b4:	40013400 	.word	0x40013400

080017b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_SPI_MspInit+0x170>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d128      	bne.n	800182c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_SPI_MspInit+0x174>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a53      	ldr	r2, [pc, #332]	; (800192c <HAL_SPI_MspInit+0x174>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_SPI_MspInit+0x174>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	623b      	str	r3, [r7, #32]
 80017f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b4e      	ldr	r3, [pc, #312]	; (800192c <HAL_SPI_MspInit+0x174>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_SPI_MspInit+0x174>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180a:	23e0      	movs	r3, #224	; 0xe0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181a:	2305      	movs	r3, #5
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4842      	ldr	r0, [pc, #264]	; (8001930 <HAL_SPI_MspInit+0x178>)
 8001826:	f003 f9fb 	bl	8004c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800182a:	e078      	b.n	800191e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_SPI_MspInit+0x17c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d146      	bne.n	80018c4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_SPI_MspInit+0x174>)
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a36      	ldr	r2, [pc, #216]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_SPI_MspInit+0x174>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_SPI_MspInit+0x174>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_SPI_MspInit+0x174>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800187e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001890:	2306      	movs	r3, #6
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4825      	ldr	r0, [pc, #148]	; (8001930 <HAL_SPI_MspInit+0x178>)
 800189c:	f003 f9c0 	bl	8004c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b2:	2306      	movs	r3, #6
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	481e      	ldr	r0, [pc, #120]	; (8001938 <HAL_SPI_MspInit+0x180>)
 80018be:	f003 f9af 	bl	8004c20 <HAL_GPIO_Init>
}
 80018c2:	e02c      	b.n	800191e <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_SPI_MspInit+0x184>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d127      	bne.n	800191e <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x174>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800190e:	2305      	movs	r3, #5
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <HAL_SPI_MspInit+0x188>)
 800191a:	f003 f981 	bl	8004c20 <HAL_GPIO_Init>
}
 800191e:	bf00      	nop
 8001920:	3738      	adds	r7, #56	; 0x38
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40013000 	.word	0x40013000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	40003c00 	.word	0x40003c00
 8001938:	40020800 	.word	0x40020800
 800193c:	40013400 	.word	0x40013400
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x44>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_MspInit+0x44>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_MspInit+0x44>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x44>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x44>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x44>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f002 fb62 	bl	80040a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART1_IRQHandler+0x10>)
 80019ee:	f005 fdc5 	bl	800757c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200011cc 	.word	0x200011cc

080019fc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA2_Stream5_IRQHandler+0x10>)
 8001a02:	f002 fed1 	bl	80047a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200012dc 	.word	0x200012dc

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f011 fca0 	bl	8013384 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20080000 	.word	0x20080000
 8001a70:	00000800 	.word	0x00000800
 8001a74:	2000117c 	.word	0x2000117c
 8001a78:	20001430 	.word	0x20001430

08001a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <SystemInit+0x28>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <SystemInit+0x28>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SystemInit+0x28>)
 8001a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a96:	609a      	str	r2, [r3, #8]
#endif
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <MX_TIM14_Init+0x44>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001ab4:	2250      	movs	r2, #80	; 0x50
 8001ab6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM14_Init+0x40>)
 8001ad4:	f005 fb88 	bl	80071e8 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001ade:	f7ff fd01 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20001180 	.word	0x20001180
 8001aec:	40002000 	.word	0x40002000

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0x38>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10b      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40002000 	.word	0x40002000
 8001b2c:	40023800 	.word	0x40023800

08001b30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <MX_USART1_UART_Init+0x5c>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART1_UART_Init+0x58>)
 8001b74:	f005 fc30 	bl	80073d8 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b7e:	f7ff fcb1 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200011cc 	.word	0x200011cc
 8001b8c:	40011000 	.word	0x40011000

08001b90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <MX_USART2_UART_Init+0x5c>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_USART2_UART_Init+0x58>)
 8001bd4:	f005 fc00 	bl	80073d8 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bde:	f7ff fc81 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20001254 	.word	0x20001254
 8001bec:	40004400 	.word	0x40004400

08001bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0b0      	sub	sp, #192	; 0xc0
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2290      	movs	r2, #144	; 0x90
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f011 fc19 	bl	8013448 <memset>
  if(uartHandle->Instance==USART1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5d      	ldr	r2, [pc, #372]	; (8001d90 <HAL_UART_MspInit+0x1a0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d173      	bne.n	8001d08 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c24:	2300      	movs	r3, #0
 8001c26:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 ff53 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c38:	f7ff fc54 	bl	80014e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3c:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c86:	2307      	movs	r3, #7
 8001c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c90:	4619      	mov	r1, r3
 8001c92:	4841      	ldr	r0, [pc, #260]	; (8001d98 <HAL_UART_MspInit+0x1a8>)
 8001c94:	f002 ffc4 	bl	8004c20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001c9a:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <HAL_UART_MspInit+0x1b0>)
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cac:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cda:	4830      	ldr	r0, [pc, #192]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cdc:	f002 fc24 	bl	8004528 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ce6:	f7ff fbfd 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cee:	675a      	str	r2, [r3, #116]	; 0x74
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_UART_MspInit+0x1ac>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2025      	movs	r0, #37	; 0x25
 8001cfc:	f002 faf3 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d00:	2025      	movs	r0, #37	; 0x25
 8001d02:	f002 fb0c 	bl	800431e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d06:	e03f      	b.n	8001d88 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_UART_MspInit+0x1b4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d13a      	bne.n	8001d88 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 feda 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8001d2a:	f7ff fbdb 	bl	80014e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_UART_MspInit+0x1a4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d76:	2307      	movs	r3, #7
 8001d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_UART_MspInit+0x1a8>)
 8001d84:	f002 ff4c 	bl	8004c20 <HAL_GPIO_Init>
}
 8001d88:	bf00      	nop
 8001d8a:	37c0      	adds	r7, #192	; 0xc0
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	200012dc 	.word	0x200012dc
 8001da0:	40026488 	.word	0x40026488
 8001da4:	40004400 	.word	0x40004400

08001da8 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8001db2:	f107 020f 	add.w	r2, r7, #15
 8001db6:	1df9      	adds	r1, r7, #7
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <W25qxx_Spi+0x28>)
 8001dc0:	f004 fdfb 	bl	80069ba <HAL_SPI_TransmitReceive>
	return ret;	
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20001118 	.word	0x20001118

08001dd4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2110      	movs	r1, #16
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <W25qxx_ReadID+0x68>)
 8001df0:	f003 f8c2 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8001df4:	209f      	movs	r0, #159	; 0x9f
 8001df6:	f7ff ffd7 	bl	8001da8 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001dfa:	20a5      	movs	r0, #165	; 0xa5
 8001dfc:	f7ff ffd4 	bl	8001da8 <W25qxx_Spi>
 8001e00:	4603      	mov	r3, r0
 8001e02:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e04:	20a5      	movs	r0, #165	; 0xa5
 8001e06:	f7ff ffcf 	bl	8001da8 <W25qxx_Spi>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e0e:	20a5      	movs	r0, #165	; 0xa5
 8001e10:	f7ff ffca 	bl	8001da8 <W25qxx_Spi>
 8001e14:	4603      	mov	r3, r0
 8001e16:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <W25qxx_ReadID+0x68>)
 8001e1e:	f003 f8ab 	bl	8004f78 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  return Temp;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2110      	movs	r1, #16
 8001e4a:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <W25qxx_ReadUniqID+0x64>)
 8001e4c:	f003 f894 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8001e50:	204b      	movs	r0, #75	; 0x4b
 8001e52:	f7ff ffa9 	bl	8001da8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	e005      	b.n	8001e68 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e5c:	20a5      	movs	r0, #165	; 0xa5
 8001e5e:	f7ff ffa3 	bl	8001da8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	3301      	adds	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d9f6      	bls.n	8001e5c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	e00b      	b.n	8001e8c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e74:	79bc      	ldrb	r4, [r7, #6]
 8001e76:	20a5      	movs	r0, #165	; 0xa5
 8001e78:	f7ff ff96 	bl	8001da8 <W25qxx_Spi>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <W25qxx_ReadUniqID+0x68>)
 8001e82:	4423      	add	r3, r4
 8001e84:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	71bb      	strb	r3, [r7, #6]
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	2b07      	cmp	r3, #7
 8001e90:	d9f0      	bls.n	8001e74 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2110      	movs	r1, #16
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <W25qxx_ReadUniqID+0x64>)
 8001e98:	f003 f86e 	bl	8004f78 <HAL_GPIO_WritePin>
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	2000133c 	.word	0x2000133c

08001eac <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <W25qxx_WriteEnable+0x28>)
 8001eb6:	f003 f85f 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f7ff ff74 	bl	8001da8 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <W25qxx_WriteEnable+0x28>)
 8001ec6:	f003 f857 	bl	8004f78 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f002 f90c 	bl	80040e8 <HAL_Delay>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2110      	movs	r1, #16
 8001eea:	481c      	ldr	r0, [pc, #112]	; (8001f5c <W25qxx_ReadStatusRegister+0x84>)
 8001eec:	f003 f844 	bl	8004f78 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001ef6:	2005      	movs	r0, #5
 8001ef8:	f7ff ff56 	bl	8001da8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001efc:	20a5      	movs	r0, #165	; 0xa5
 8001efe:	f7ff ff53 	bl	8001da8 <W25qxx_Spi>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <W25qxx_ReadStatusRegister+0x88>)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001f0e:	e01b      	b.n	8001f48 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d10c      	bne.n	8001f30 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001f16:	2035      	movs	r0, #53	; 0x35
 8001f18:	f7ff ff46 	bl	8001da8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001f1c:	20a5      	movs	r0, #165	; 0xa5
 8001f1e:	f7ff ff43 	bl	8001da8 <W25qxx_Spi>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <W25qxx_ReadStatusRegister+0x88>)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001f2e:	e00b      	b.n	8001f48 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001f30:	2015      	movs	r0, #21
 8001f32:	f7ff ff39 	bl	8001da8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001f36:	20a5      	movs	r0, #165	; 0xa5
 8001f38:	f7ff ff36 	bl	8001da8 <W25qxx_Spi>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <W25qxx_ReadStatusRegister+0x88>)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <W25qxx_ReadStatusRegister+0x84>)
 8001f4e:	f003 f813 	bl	8004f78 <HAL_GPIO_WritePin>
	return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	2000133c 	.word	0x2000133c

08001f64 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f002 f8bd 	bl	80040e8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2110      	movs	r1, #16
 8001f72:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <W25qxx_WaitForWriteEnd+0x4c>)
 8001f74:	f003 f800 	bl	8004f78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001f78:	2005      	movs	r0, #5
 8001f7a:	f7ff ff15 	bl	8001da8 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f7e:	20a5      	movs	r0, #165	; 0xa5
 8001f80:	f7ff ff12 	bl	8001da8 <W25qxx_Spi>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <W25qxx_WaitForWriteEnd+0x50>)
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f002 f8aa 	bl	80040e8 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <W25qxx_WaitForWriteEnd+0x50>)
 8001f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ed      	bne.n	8001f7e <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <W25qxx_WaitForWriteEnd+0x4c>)
 8001fa8:	f002 ffe6 	bl	8004f78 <HAL_GPIO_WritePin>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	2000133c 	.word	0x2000133c

08001fb8 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8001fbe:	4b8a      	ldr	r3, [pc, #552]	; (80021e8 <W25qxx_Init+0x230>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8001fc6:	e002      	b.n	8001fce <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8001fc8:	2064      	movs	r0, #100	; 0x64
 8001fca:	f002 f88d 	bl	80040e8 <HAL_Delay>
	while(HAL_GetTick()<100)
 8001fce:	f002 f87f 	bl	80040d0 <HAL_GetTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b63      	cmp	r3, #99	; 0x63
 8001fd6:	d9f7      	bls.n	8001fc8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2110      	movs	r1, #16
 8001fdc:	4883      	ldr	r0, [pc, #524]	; (80021ec <W25qxx_Init+0x234>)
 8001fde:	f002 ffcb 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001fe2:	2064      	movs	r0, #100	; 0x64
 8001fe4:	f002 f880 	bl	80040e8 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 8001fe8:	4881      	ldr	r0, [pc, #516]	; (80021f0 <W25qxx_Init+0x238>)
 8001fea:	f011 ffdd 	bl	8013fa8 <puts>
	#endif
	id=W25qxx_ReadID();
 8001fee:	f7ff fef1 	bl	8001dd4 <W25qxx_ReadID>
 8001ff2:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	487f      	ldr	r0, [pc, #508]	; (80021f4 <W25qxx_Init+0x23c>)
 8001ff8:	f011 ff50 	bl	8013e9c <iprintf>
	#endif
	switch(id&0x0000FFFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <W25qxx_Init+0x240>)
 8002002:	4413      	add	r3, r2
 8002004:	2b09      	cmp	r3, #9
 8002006:	d87e      	bhi.n	8002106 <W25qxx_Init+0x14e>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <W25qxx_Init+0x58>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	080020f3 	.word	0x080020f3
 8002014:	080020df 	.word	0x080020df
 8002018:	080020cb 	.word	0x080020cb
 800201c:	080020b7 	.word	0x080020b7
 8002020:	080020a3 	.word	0x080020a3
 8002024:	0800208f 	.word	0x0800208f
 8002028:	0800207b 	.word	0x0800207b
 800202c:	08002065 	.word	0x08002065
 8002030:	0800204f 	.word	0x0800204f
 8002034:	08002039 	.word	0x08002039
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002038:	4b6b      	ldr	r3, [pc, #428]	; (80021e8 <W25qxx_Init+0x230>)
 800203a:	220a      	movs	r2, #10
 800203c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800203e:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <W25qxx_Init+0x230>)
 8002040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002044:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 8002046:	486d      	ldr	r0, [pc, #436]	; (80021fc <W25qxx_Init+0x244>)
 8002048:	f011 ffae 	bl	8013fa8 <puts>
			#endif
		break;
 800204c:	e064      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800204e:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <W25qxx_Init+0x230>)
 8002050:	2209      	movs	r2, #9
 8002052:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <W25qxx_Init+0x230>)
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 800205c:	4868      	ldr	r0, [pc, #416]	; (8002200 <W25qxx_Init+0x248>)
 800205e:	f011 ffa3 	bl	8013fa8 <puts>
			#endif
		break;
 8002062:	e059      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <W25qxx_Init+0x230>)
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <W25qxx_Init+0x230>)
 800206c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002070:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 8002072:	4864      	ldr	r0, [pc, #400]	; (8002204 <W25qxx_Init+0x24c>)
 8002074:	f011 ff98 	bl	8013fa8 <puts>
			#endif
		break;
 8002078:	e04e      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <W25qxx_Init+0x230>)
 800207c:	2207      	movs	r2, #7
 800207e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002080:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <W25qxx_Init+0x230>)
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 8002086:	4860      	ldr	r0, [pc, #384]	; (8002208 <W25qxx_Init+0x250>)
 8002088:	f011 ff8e 	bl	8013fa8 <puts>
			#endif
		break;
 800208c:	e044      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800208e:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <W25qxx_Init+0x230>)
 8002090:	2206      	movs	r2, #6
 8002092:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002094:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <W25qxx_Init+0x230>)
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 800209a:	485c      	ldr	r0, [pc, #368]	; (800220c <W25qxx_Init+0x254>)
 800209c:	f011 ff84 	bl	8013fa8 <puts>
			#endif
		break;
 80020a0:	e03a      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <W25qxx_Init+0x230>)
 80020a4:	2205      	movs	r2, #5
 80020a6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <W25qxx_Init+0x230>)
 80020aa:	2220      	movs	r2, #32
 80020ac:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 80020ae:	4858      	ldr	r0, [pc, #352]	; (8002210 <W25qxx_Init+0x258>)
 80020b0:	f011 ff7a 	bl	8013fa8 <puts>
			#endif
		break;
 80020b4:	e030      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <W25qxx_Init+0x230>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80020bc:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <W25qxx_Init+0x230>)
 80020be:	2210      	movs	r2, #16
 80020c0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 80020c2:	4854      	ldr	r0, [pc, #336]	; (8002214 <W25qxx_Init+0x25c>)
 80020c4:	f011 ff70 	bl	8013fa8 <puts>
			#endif
		break;
 80020c8:	e026      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <W25qxx_Init+0x230>)
 80020cc:	2203      	movs	r2, #3
 80020ce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <W25qxx_Init+0x230>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 80020d6:	4850      	ldr	r0, [pc, #320]	; (8002218 <W25qxx_Init+0x260>)
 80020d8:	f011 ff66 	bl	8013fa8 <puts>
			#endif
		break;
 80020dc:	e01c      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <W25qxx_Init+0x230>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80020e4:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <W25qxx_Init+0x230>)
 80020e6:	2204      	movs	r2, #4
 80020e8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 80020ea:	484c      	ldr	r0, [pc, #304]	; (800221c <W25qxx_Init+0x264>)
 80020ec:	f011 ff5c 	bl	8013fa8 <puts>
			#endif
		break;
 80020f0:	e012      	b.n	8002118 <W25qxx_Init+0x160>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <W25qxx_Init+0x230>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <W25qxx_Init+0x230>)
 80020fa:	2202      	movs	r2, #2
 80020fc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 80020fe:	4848      	ldr	r0, [pc, #288]	; (8002220 <W25qxx_Init+0x268>)
 8002100:	f011 ff52 	bl	8013fa8 <puts>
			#endif
		break;
 8002104:	e008      	b.n	8002118 <W25qxx_Init+0x160>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8002106:	4847      	ldr	r0, [pc, #284]	; (8002224 <W25qxx_Init+0x26c>)
 8002108:	f011 ff4e 	bl	8013fa8 <puts>
				#endif
			w25qxx.Lock=0;	
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <W25qxx_Init+0x230>)
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8002114:	2300      	movs	r3, #0
 8002116:	e063      	b.n	80021e0 <W25qxx_Init+0x228>
				
	}		
	w25qxx.PageSize=256;
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <W25qxx_Init+0x230>)
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <W25qxx_Init+0x230>)
 8002122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002126:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <W25qxx_Init+0x230>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <W25qxx_Init+0x230>)
 8002130:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <W25qxx_Init+0x230>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <W25qxx_Init+0x230>)
 8002138:	6912      	ldr	r2, [r2, #16]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <W25qxx_Init+0x230>)
 8002140:	8952      	ldrh	r2, [r2, #10]
 8002142:	fbb3 f3f2 	udiv	r3, r3, r2
 8002146:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <W25qxx_Init+0x230>)
 8002148:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800214a:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <W25qxx_Init+0x230>)
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <W25qxx_Init+0x230>)
 8002152:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <W25qxx_Init+0x230>)
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	4a23      	ldr	r2, [pc, #140]	; (80021e8 <W25qxx_Init+0x230>)
 800215a:	6912      	ldr	r2, [r2, #16]
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	0a9b      	lsrs	r3, r3, #10
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <W25qxx_Init+0x230>)
 8002164:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002166:	f7ff fe6b 	bl	8001e40 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff feb4 	bl	8001ed8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002170:	2002      	movs	r0, #2
 8002172:	f7ff feb1 	bl	8001ed8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002176:	2003      	movs	r0, #3
 8002178:	f7ff feae 	bl	8001ed8 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <W25qxx_Init+0x230>)
 800217e:	895b      	ldrh	r3, [r3, #10]
 8002180:	4619      	mov	r1, r3
 8002182:	4829      	ldr	r0, [pc, #164]	; (8002228 <W25qxx_Init+0x270>)
 8002184:	f011 fe8a 	bl	8013e9c <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <W25qxx_Init+0x230>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4619      	mov	r1, r3
 800218e:	4827      	ldr	r0, [pc, #156]	; (800222c <W25qxx_Init+0x274>)
 8002190:	f011 fe84 	bl	8013e9c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <W25qxx_Init+0x230>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4619      	mov	r1, r3
 800219a:	4825      	ldr	r0, [pc, #148]	; (8002230 <W25qxx_Init+0x278>)
 800219c:	f011 fe7e 	bl	8013e9c <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <W25qxx_Init+0x230>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4823      	ldr	r0, [pc, #140]	; (8002234 <W25qxx_Init+0x27c>)
 80021a8:	f011 fe78 	bl	8013e9c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <W25qxx_Init+0x230>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4821      	ldr	r0, [pc, #132]	; (8002238 <W25qxx_Init+0x280>)
 80021b4:	f011 fe72 	bl	8013e9c <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <W25qxx_Init+0x230>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4619      	mov	r1, r3
 80021be:	481f      	ldr	r0, [pc, #124]	; (800223c <W25qxx_Init+0x284>)
 80021c0:	f011 fe6c 	bl	8013e9c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <W25qxx_Init+0x230>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4619      	mov	r1, r3
 80021ca:	481d      	ldr	r0, [pc, #116]	; (8002240 <W25qxx_Init+0x288>)
 80021cc:	f011 fe66 	bl	8013e9c <iprintf>
	printf("w25qxx Init Done\r\n");
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <W25qxx_Init+0x28c>)
 80021d2:	f011 fee9 	bl	8013fa8 <puts>
	#endif
	w25qxx.Lock=0;	
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <W25qxx_Init+0x230>)
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80021de:	2301      	movs	r3, #1
}	
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2000133c 	.word	0x2000133c
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08016b98 	.word	0x08016b98
 80021f4:	08016bb0 	.word	0x08016bb0
 80021f8:	ffffbfef 	.word	0xffffbfef
 80021fc:	08016bc4 	.word	0x08016bc4
 8002200:	08016bdc 	.word	0x08016bdc
 8002204:	08016bf4 	.word	0x08016bf4
 8002208:	08016c0c 	.word	0x08016c0c
 800220c:	08016c24 	.word	0x08016c24
 8002210:	08016c3c 	.word	0x08016c3c
 8002214:	08016c54 	.word	0x08016c54
 8002218:	08016c6c 	.word	0x08016c6c
 800221c:	08016c84 	.word	0x08016c84
 8002220:	08016c9c 	.word	0x08016c9c
 8002224:	08016cb4 	.word	0x08016cb4
 8002228:	08016cc8 	.word	0x08016cc8
 800222c:	08016ce8 	.word	0x08016ce8
 8002230:	08016d00 	.word	0x08016d00
 8002234:	08016d20 	.word	0x08016d20
 8002238:	08016d3c 	.word	0x08016d3c
 800223c:	08016d5c 	.word	0x08016d5c
 8002240:	08016d78 	.word	0x08016d78
 8002244:	08016d98 	.word	0x08016d98

08002248 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8002250:	e002      	b.n	8002258 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8002252:	2001      	movs	r0, #1
 8002254:	f001 ff48 	bl	80040e8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <W25qxx_EraseBlock+0xd0>)
 800225a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800225e:	2b01      	cmp	r3, #1
 8002260:	d0f7      	beq.n	8002252 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <W25qxx_EraseBlock+0xd0>)
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	482b      	ldr	r0, [pc, #172]	; (800231c <W25qxx_EraseBlock+0xd4>)
 800226e:	f011 fe15 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 8002272:	2064      	movs	r0, #100	; 0x64
 8002274:	f001 ff38 	bl	80040e8 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8002278:	f001 ff2a 	bl	80040d0 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 800227e:	f7ff fe71 	bl	8001f64 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <W25qxx_EraseBlock+0xd0>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8002290:	f7ff fe0c 	bl	8001eac <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	2110      	movs	r1, #16
 8002298:	4821      	ldr	r0, [pc, #132]	; (8002320 <W25qxx_EraseBlock+0xd8>)
 800229a:	f002 fe6d 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 800229e:	20d8      	movs	r0, #216	; 0xd8
 80022a0:	f7ff fd82 	bl	8001da8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <W25qxx_EraseBlock+0xd0>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d905      	bls.n	80022b8 <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fd78 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fd72 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fd6c 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fd67 	bl	8001da8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	4810      	ldr	r0, [pc, #64]	; (8002320 <W25qxx_EraseBlock+0xd8>)
 80022e0:	f002 fe4a 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80022e4:	f7ff fe3e 	bl	8001f64 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 80022e8:	f001 fef2 	bl	80040d0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <W25qxx_EraseBlock+0xdc>)
 80022f6:	f011 fdd1 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 80022fa:	2064      	movs	r0, #100	; 0x64
 80022fc:	f001 fef4 	bl	80040e8 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 8002300:	2001      	movs	r0, #1
 8002302:	f001 fef1 	bl	80040e8 <HAL_Delay>
	w25qxx.Lock=0;
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <W25qxx_EraseBlock+0xd0>)
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000133c 	.word	0x2000133c
 800231c:	08016e3c 	.word	0x08016e3c
 8002320:	40021000 	.word	0x40021000
 8002324:	08016e5c 	.word	0x08016e5c

08002328 <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <W25qxx_BlockToPage+0x28>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <W25qxx_BlockToPage+0x28>)
 800233c:	8952      	ldrh	r2, [r2, #10]
 800233e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000133c 	.word	0x2000133c

08002354 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8002362:	e002      	b.n	800236a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002364:	2001      	movs	r0, #1
 8002366:	f001 febf 	bl	80040e8 <HAL_Delay>
	while(w25qxx.Lock==1)
 800236a:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <W25qxx_WritePage+0x16c>)
 800236c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002370:	2b01      	cmp	r3, #1
 8002372:	d0f7      	beq.n	8002364 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8002374:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <W25qxx_WritePage+0x16c>)
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <W25qxx_WritePage+0x16c>)
 8002384:	8952      	ldrh	r2, [r2, #10]
 8002386:	4293      	cmp	r3, r2
 8002388:	d802      	bhi.n	8002390 <W25qxx_WritePage+0x3c>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <W25qxx_WritePage+0x16c>)
 8002392:	895b      	ldrh	r3, [r3, #10]
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <W25qxx_WritePage+0x16c>)
 80023a4:	8952      	ldrh	r2, [r2, #10]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d905      	bls.n	80023b6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80023aa:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <W25qxx_WritePage+0x16c>)
 80023ac:	895b      	ldrh	r3, [r3, #10]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	4841      	ldr	r0, [pc, #260]	; (80024c4 <W25qxx_WritePage+0x170>)
 80023be:	f011 fd6d 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 80023c2:	2064      	movs	r0, #100	; 0x64
 80023c4:	f001 fe90 	bl	80040e8 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 80023c8:	f001 fe82 	bl	80040d0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 80023ce:	f7ff fdc9 	bl	8001f64 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80023d2:	f7ff fd6b 	bl	8001eac <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2110      	movs	r1, #16
 80023da:	483b      	ldr	r0, [pc, #236]	; (80024c8 <W25qxx_WritePage+0x174>)
 80023dc:	f002 fdcc 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80023e0:	2002      	movs	r0, #2
 80023e2:	f7ff fce1 	bl	8001da8 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <W25qxx_WritePage+0x16c>)
 80023e8:	895b      	ldrh	r3, [r3, #10]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <W25qxx_WritePage+0x16c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d905      	bls.n	800240c <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0e1b      	lsrs	r3, r3, #24
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fcce 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fcc8 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fcc2 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fcbd 	bl	8001da8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	2364      	movs	r3, #100	; 0x64
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	4825      	ldr	r0, [pc, #148]	; (80024cc <W25qxx_WritePage+0x178>)
 8002438:	f004 f821 	bl	800647e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800243c:	2201      	movs	r2, #1
 800243e:	2110      	movs	r1, #16
 8002440:	4821      	ldr	r0, [pc, #132]	; (80024c8 <W25qxx_WritePage+0x174>)
 8002442:	f002 fd99 	bl	8004f78 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8002446:	f7ff fd8d 	bl	8001f64 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 800244a:	f001 fe41 	bl	80040d0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e018      	b.n	800248e <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <W25qxx_WritePage+0x124>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d905      	bls.n	8002478 <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 800246c:	4818      	ldr	r0, [pc, #96]	; (80024d0 <W25qxx_WritePage+0x17c>)
 800246e:	f011 fd9b 	bl	8013fa8 <puts>
			W25qxx_Delay(10);			
 8002472:	200a      	movs	r0, #10
 8002474:	f001 fe38 	bl	80040e8 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	4814      	ldr	r0, [pc, #80]	; (80024d4 <W25qxx_WritePage+0x180>)
 8002484:	f011 fd0a 	bl	8013e9c <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3e2      	bcc.n	800245c <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 8002496:	480e      	ldr	r0, [pc, #56]	; (80024d0 <W25qxx_WritePage+0x17c>)
 8002498:	f011 fd86 	bl	8013fa8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	480e      	ldr	r0, [pc, #56]	; (80024d8 <W25qxx_WritePage+0x184>)
 80024a0:	f011 fcfc 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 80024a4:	2064      	movs	r0, #100	; 0x64
 80024a6:	f001 fe1f 	bl	80040e8 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f001 fe1c 	bl	80040e8 <HAL_Delay>
	w25qxx.Lock=0;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <W25qxx_WritePage+0x16c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000133c 	.word	0x2000133c
 80024c4:	08017078 	.word	0x08017078
 80024c8:	40021000 	.word	0x40021000
 80024cc:	20001118 	.word	0x20001118
 80024d0:	080170b4 	.word	0x080170b4
 80024d4:	080170b8 	.word	0x080170b8
 80024d8:	080170c0 	.word	0x080170c0

080024dc <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d802      	bhi.n	80024fa <W25qxx_WriteBlock+0x1e>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4830      	ldr	r0, [pc, #192]	; (80025c8 <W25qxx_WriteBlock+0xec>)
 8002508:	f011 fcc8 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 800250c:	2064      	movs	r0, #100	; 0x64
 800250e:	f001 fdeb 	bl	80040e8 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	d306      	bcc.n	800252a <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 800251c:	482b      	ldr	r0, [pc, #172]	; (80025cc <W25qxx_WriteBlock+0xf0>)
 800251e:	f011 fd43 	bl	8013fa8 <puts>
		W25qxx_Delay(100);
 8002522:	2064      	movs	r0, #100	; 0x64
 8002524:	f001 fde0 	bl	80040e8 <HAL_Delay>
		#endif	
		return;
 8002528:	e048      	b.n	80025bc <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	441a      	add	r2, r3
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	429a      	cmp	r2, r3
 8002536:	d905      	bls.n	8002544 <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	e001      	b.n	8002548 <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8002548:	68b8      	ldr	r0, [r7, #8]
 800254a:	f7ff feed 	bl	8002328 <W25qxx_BlockToPage>
 800254e:	4602      	mov	r2, r0
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002552:	895b      	ldrh	r3, [r3, #10]
 8002554:	4619      	mov	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	fbb3 f3f1 	udiv	r3, r3, r1
 800255c:	4413      	add	r3, r2
 800255e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002562:	895b      	ldrh	r3, [r3, #10]
 8002564:	461a      	mov	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	fbb3 f1f2 	udiv	r1, r3, r2
 800256c:	fb01 f202 	mul.w	r2, r1, r2
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	69f9      	ldr	r1, [r7, #28]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff feea 	bl	8002354 <W25qxx_WritePage>
		StartPage++;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3301      	adds	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002588:	895b      	ldrh	r3, [r3, #10]
 800258a:	461a      	mov	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	1a9a      	subs	r2, r3, r2
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <W25qxx_WriteBlock+0xe8>)
 8002598:	895b      	ldrh	r3, [r3, #10]
 800259a:	461a      	mov	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	dce1      	bgt.n	8002574 <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <W25qxx_WriteBlock+0xf4>)
 80025b2:	f011 fcf9 	bl	8013fa8 <puts>
	W25qxx_Delay(100);
 80025b6:	2064      	movs	r0, #100	; 0x64
 80025b8:	f001 fd96 	bl	80040e8 <HAL_Delay>
	#endif	
}
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000133c 	.word	0x2000133c
 80025c8:	08017160 	.word	0x08017160
 80025cc:	080171a0 	.word	0x080171a0
 80025d0:	080171c0 	.word	0x080171c0

080025d4 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80025e0:	e002      	b.n	80025e8 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f001 fd80 	bl	80040e8 <HAL_Delay>
	while(w25qxx.Lock==1)
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <W25qxx_ReadBytes+0x114>)
 80025ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d0f7      	beq.n	80025e2 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <W25qxx_ReadBytes+0x114>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 80025fa:	f001 fd69 	bl	80040d0 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4839      	ldr	r0, [pc, #228]	; (80026ec <W25qxx_ReadBytes+0x118>)
 8002606:	f011 fc49 	bl	8013e9c <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2110      	movs	r1, #16
 800260e:	4838      	ldr	r0, [pc, #224]	; (80026f0 <W25qxx_ReadBytes+0x11c>)
 8002610:	f002 fcb2 	bl	8004f78 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8002614:	200b      	movs	r0, #11
 8002616:	f7ff fbc7 	bl	8001da8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <W25qxx_ReadBytes+0x114>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d905      	bls.n	800262e <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	0e1b      	lsrs	r3, r3, #24
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fbbd 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fbb7 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fbb1 	bl	8001da8 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fbac 	bl	8001da8 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff fba9 	bl	8001da8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	b29a      	uxth	r2, r3
 800265a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	4824      	ldr	r0, [pc, #144]	; (80026f4 <W25qxx_ReadBytes+0x120>)
 8002662:	f004 f87a 	bl	800675a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002666:	2201      	movs	r2, #1
 8002668:	2110      	movs	r1, #16
 800266a:	4821      	ldr	r0, [pc, #132]	; (80026f0 <W25qxx_ReadBytes+0x11c>)
 800266c:	f002 fc84 	bl	8004f78 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8002670:	f001 fd2e 	bl	80040d0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e018      	b.n	80026b4 <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <W25qxx_ReadBytes+0xca>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d905      	bls.n	800269e <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 8002692:	4819      	ldr	r0, [pc, #100]	; (80026f8 <W25qxx_ReadBytes+0x124>)
 8002694:	f011 fc88 	bl	8013fa8 <puts>
			W25qxx_Delay(10);
 8002698:	200a      	movs	r0, #10
 800269a:	f001 fd25 	bl	80040e8 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4814      	ldr	r0, [pc, #80]	; (80026fc <W25qxx_ReadBytes+0x128>)
 80026aa:	f011 fbf7 	bl	8013e9c <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3e2      	bcc.n	8002682 <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 80026bc:	480e      	ldr	r0, [pc, #56]	; (80026f8 <W25qxx_ReadBytes+0x124>)
 80026be:	f011 fc73 	bl	8013fa8 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	480e      	ldr	r0, [pc, #56]	; (8002700 <W25qxx_ReadBytes+0x12c>)
 80026c6:	f011 fbe9 	bl	8013e9c <iprintf>
	W25qxx_Delay(100);
 80026ca:	2064      	movs	r0, #100	; 0x64
 80026cc:	f001 fd0c 	bl	80040e8 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f001 fd09 	bl	80040e8 <HAL_Delay>
	w25qxx.Lock=0;
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <W25qxx_ReadBytes+0x114>)
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000133c 	.word	0x2000133c
 80026ec:	08017234 	.word	0x08017234
 80026f0:	40021000 	.word	0x40021000
 80026f4:	20001118 	.word	0x20001118
 80026f8:	080170b4 	.word	0x080170b4
 80026fc:	080170b8 	.word	0x080170b8
 8002700:	0801726c 	.word	0x0801726c

08002704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800273c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002708:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800270a:	e003      	b.n	8002714 <LoopCopyDataInit>

0800270c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800270e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002710:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002712:	3104      	adds	r1, #4

08002714 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002714:	480b      	ldr	r0, [pc, #44]	; (8002744 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002718:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800271a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800271c:	d3f6      	bcc.n	800270c <CopyDataInit>
  ldr  r2, =_sbss
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002720:	e002      	b.n	8002728 <LoopFillZerobss>

08002722 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002722:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002724:	f842 3b04 	str.w	r3, [r2], #4

08002728 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800272c:	d3f9      	bcc.n	8002722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800272e:	f7ff f9a5 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f010 fe2d 	bl	8013390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002736:	f7fe f983 	bl	8000a40 <main>
  bx  lr    
 800273a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800273c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002740:	08018140 	.word	0x08018140
  ldr  r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002748:	20000f7c 	.word	0x20000f7c
  ldr  r2, =_sbss
 800274c:	20000f7c 	.word	0x20000f7c
  ldr  r3, = _ebss
 8002750:	20001430 	.word	0x20001430

08002754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC_IRQHandler>

08002756 <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	3303      	adds	r3, #3
 800276a:	b29b      	uxth	r3, r3
 800276c:	f023 0303 	bic.w	r3, r3, #3
 8002770:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	429a      	cmp	r2, r3
 800277c:	d810      	bhi.n	80027a0 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002794:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 80027be:	e047      	b.n	8002850 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d801      	bhi.n	80027ca <create_qt_tbl+0x1a>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e046      	b.n	8002858 <create_qt_tbl+0xa8>
		ndata -= 65;
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	3b41      	subs	r3, #65	; 0x41
 80027ce:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 80027da:	7f7b      	ldrb	r3, [r7, #29]
 80027dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <create_qt_tbl+0x38>
 80027e4:	2306      	movs	r3, #6
 80027e6:	e037      	b.n	8002858 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 80027e8:	7f7b      	ldrb	r3, [r7, #29]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 80027f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff ffad 	bl	8002756 <alloc_pool>
 80027fc:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <create_qt_tbl+0x58>
 8002804:	2303      	movs	r3, #3
 8002806:	e027      	b.n	8002858 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 8002808:	8bfa      	ldrh	r2, [r7, #30]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3214      	adds	r2, #20
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002814:	2300      	movs	r3, #0
 8002816:	83fb      	strh	r3, [r7, #30]
 8002818:	e017      	b.n	800284a <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 800281a:	8bfb      	ldrh	r3, [r7, #30]
 800281c:	4a10      	ldr	r2, [pc, #64]	; (8002860 <create_qt_tbl+0xb0>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <create_qt_tbl+0xb4>)
 8002830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002834:	fb03 f101 	mul.w	r1, r3, r1
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	460a      	mov	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002844:	8bfb      	ldrh	r3, [r7, #30]
 8002846:	3301      	adds	r3, #1
 8002848:	83fb      	strh	r3, [r7, #30]
 800284a:	8bfb      	ldrh	r3, [r7, #30]
 800284c:	2b3f      	cmp	r3, #63	; 0x3f
 800284e:	d9e4      	bls.n	800281a <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1b4      	bne.n	80027c0 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0801742c 	.word	0x0801742c
 8002864:	0801746c 	.word	0x0801746c

08002868 <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 8002876:	e0c3      	b.n	8002a00 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	2b10      	cmp	r3, #16
 800287c:	d801      	bhi.n	8002882 <create_huffman_tbl+0x1a>
 800287e:	2306      	movs	r3, #6
 8002880:	e0c3      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		ndata -= 17;
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	3b11      	subs	r3, #17
 8002886:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	60ba      	str	r2, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 8002894:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002898:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <create_huffman_tbl+0x3c>
 80028a0:	2306      	movs	r3, #6
 80028a2:	e0b2      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 80028a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	83fb      	strh	r3, [r7, #30]
 80028ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 80028ba:	2110      	movs	r1, #16
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff ff4a 	bl	8002756 <alloc_pool>
 80028c2:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <create_huffman_tbl+0x66>
 80028ca:	2303      	movs	r3, #3
 80028cc:	e09d      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 80028ce:	8bb9      	ldrh	r1, [r7, #28]
 80028d0:	8bfa      	ldrh	r2, [r7, #30]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0049      	lsls	r1, r1, #1
 80028d6:	440a      	add	r2, r1
 80028d8:	3208      	adds	r2, #8
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 80028e0:	2300      	movs	r3, #0
 80028e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80028e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80028e8:	e00f      	b.n	800290a <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	1c53      	adds	r3, r2, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	440b      	add	r3, r1
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002900:	4413      	add	r3, r2
 8002902:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 8002904:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002906:	3301      	adds	r3, #1
 8002908:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800290a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d9ec      	bls.n	80028ea <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	b29b      	uxth	r3, r3
 8002916:	4619      	mov	r1, r3
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ff1c 	bl	8002756 <alloc_pool>
 800291e:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <create_huffman_tbl+0xc2>
 8002926:	2303      	movs	r3, #3
 8002928:	e06f      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 800292a:	8bb9      	ldrh	r1, [r7, #28]
 800292c:	8bfa      	ldrh	r2, [r7, #30]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0049      	lsls	r1, r1, #1
 8002932:	440a      	add	r2, r1
 8002934:	320c      	adds	r2, #12
 8002936:	6979      	ldr	r1, [r7, #20]
 8002938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002940:	2300      	movs	r3, #0
 8002942:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002944:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002946:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002948:	e01a      	b.n	8002980 <create_huffman_tbl+0x118>
			b = pb[i];
 800294a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002954:	e009      	b.n	800296a <create_huffman_tbl+0x102>
 8002956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	847a      	strh	r2, [r7, #34]	; 0x22
 800295c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800295e:	1c51      	adds	r1, r2, #1
 8002960:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	6979      	ldr	r1, [r7, #20]
 8002966:	440a      	add	r2, r1
 8002968:	8013      	strh	r3, [r2, #0]
 800296a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	857a      	strh	r2, [r7, #42]	; 0x2a
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <create_huffman_tbl+0xee>
			hc <<= 1;
 8002974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 800297a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800297c:	3301      	adds	r3, #1
 800297e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002982:	2b0f      	cmp	r3, #15
 8002984:	d9e1      	bls.n	800294a <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298a:	429a      	cmp	r2, r3
 800298c:	d201      	bcs.n	8002992 <create_huffman_tbl+0x12a>
 800298e:	2306      	movs	r3, #6
 8002990:	e03b      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		ndata -= np;
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 800299a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800299c:	4619      	mov	r1, r3
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fed9 	bl	8002756 <alloc_pool>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <create_huffman_tbl+0x148>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e02c      	b.n	8002a0a <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 80029b0:	8bb9      	ldrh	r1, [r7, #28]
 80029b2:	8bfa      	ldrh	r2, [r7, #30]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0049      	lsls	r1, r1, #1
 80029b8:	440a      	add	r2, r1
 80029ba:	3210      	adds	r2, #16
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80029c2:	2300      	movs	r3, #0
 80029c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029c6:	e017      	b.n	80029f8 <create_huffman_tbl+0x190>
			d = *data++;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60ba      	str	r2, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 80029d4:	8bfb      	ldrh	r3, [r7, #30]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <create_huffman_tbl+0x17e>
 80029da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029de:	2b0b      	cmp	r3, #11
 80029e0:	d901      	bls.n	80029e6 <create_huffman_tbl+0x17e>
 80029e2:	2306      	movs	r3, #6
 80029e4:	e011      	b.n	8002a0a <create_huffman_tbl+0x1a2>
			*pd++ = d;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	627a      	str	r2, [r7, #36]	; 0x24
 80029ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80029f0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80029f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029f4:	3301      	adds	r3, #1
 80029f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80029fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3e3      	bcc.n	80029c8 <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f47f af38 	bne.w	8002878 <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3730      	adds	r7, #48	; 0x30
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7b1b      	ldrb	r3, [r3, #12]
 8002a20:	75fb      	strb	r3, [r7, #23]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	81fb      	strh	r3, [r7, #14]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	75bb      	strb	r3, [r7, #22]
 8002a34:	2300      	movs	r3, #0
 8002a36:	817b      	strh	r3, [r7, #10]
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d137      	bne.n	8002ab2 <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a56:	6939      	ldr	r1, [r7, #16]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <bitext+0x60>
 8002a66:	f06f 0301 	mvn.w	r3, #1
 8002a6a:	e041      	b.n	8002af0 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 8002a78:	897b      	ldrh	r3, [r7, #10]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 8002a7e:	2300      	movs	r3, #0
 8002a80:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <bitext+0x7e>
 8002a8a:	f06f 0305 	mvn.w	r3, #5
 8002a8e:	e02f      	b.n	8002af0 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002a90:	23ff      	movs	r3, #255	; 0xff
 8002a92:	75bb      	strb	r3, [r7, #22]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	7dba      	ldrb	r2, [r7, #22]
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e008      	b.n	8002aae <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002aa2:	7dbb      	ldrb	r3, [r7, #22]
 8002aa4:	2bff      	cmp	r3, #255	; 0xff
 8002aa6:	d102      	bne.n	8002aae <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	817b      	strh	r3, [r7, #10]
 8002aac:	e013      	b.n	8002ad6 <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 8002ab2:	89bb      	ldrh	r3, [r7, #12]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 8002ab8:	7dba      	ldrb	r2, [r7, #22]
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	4013      	ands	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <bitext+0xb8>
 8002ac4:	89bb      	ldrh	r3, [r7, #12]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1af      	bne.n	8002a3c <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7dfa      	ldrb	r2, [r7, #23]
 8002ae0:	731a      	strb	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]

	return (int)v;
 8002aee:	89bb      	ldrh	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	83fb      	strh	r3, [r7, #30]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b22:	2300      	movs	r3, #0
 8002b24:	837b      	strh	r3, [r7, #26]
 8002b26:	8b7b      	ldrh	r3, [r7, #26]
 8002b28:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 8002b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13c      	bne.n	8002bb0 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 8002b36:	8bfb      	ldrh	r3, [r7, #30]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	6a39      	ldr	r1, [r7, #32]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	4798      	blx	r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002b54:	8bfb      	ldrh	r3, [r7, #30]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <huffext+0x6e>
 8002b5a:	f06f 0301 	mvn.w	r3, #1
 8002b5e:	e066      	b.n	8002c2e <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	3301      	adds	r3, #1
 8002b64:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 8002b66:	8bfb      	ldrh	r3, [r7, #30]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 8002b6c:	8b7b      	ldrh	r3, [r7, #26]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 8002b72:	2300      	movs	r3, #0
 8002b74:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <huffext+0x8c>
 8002b7e:	f06f 0305 	mvn.w	r3, #5
 8002b82:	e054      	b.n	8002c2e <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002b84:	23ff      	movs	r3, #255	; 0xff
 8002b86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e00a      	b.n	8002baa <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d102      	bne.n	8002baa <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	837b      	strh	r3, [r7, #26]
 8002ba8:	e03c      	b.n	8002c24 <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 8002bb0:	8bbb      	ldrh	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 8002bb6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <huffext+0xd4>
 8002bc6:	8bbb      	ldrh	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 8002bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	82fb      	strh	r3, [r7, #22]
 8002be0:	e01a      	b.n	8002c18 <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	8bba      	ldrh	r2, [r7, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10d      	bne.n	8002c0c <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002bf6:	731a      	strb	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8bfa      	ldrh	r2, [r7, #30]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b21b      	sxth	r3, r3
 8002c0a:	e010      	b.n	8002c2e <huffext+0x136>
			}
			hdata++;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002c12:	8afb      	ldrh	r3, [r7, #22]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	82fb      	strh	r3, [r7, #22]
 8002c18:	8afb      	ldrh	r3, [r7, #22]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <huffext+0xea>
		}
		bl--;
 8002c1e:	8b3b      	ldrh	r3, [r7, #24]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8002c24:	8b3b      	ldrh	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d181      	bne.n	8002b2e <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 8002c2a:	f06f 0305 	mvn.w	r3, #5
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3728      	adds	r7, #40	; 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b095      	sub	sp, #84	; 0x54
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 8002c42:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c48:	f241 1351 	movw	r3, #4433	; 0x1151
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4e:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40
 8002c54:	f641 5390 	movw	r3, #7568	; 0x1d90
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c60:	e0b8      	b.n	8002dd4 <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 8002c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	4413      	add	r3, r2
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	131b      	asrs	r3, r3, #12
 8002c9c:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	4413      	add	r3, r2
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	4413      	add	r3, r2
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ce2:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4413      	add	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	131b      	asrs	r3, r3, #12
 8002d18:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	4413      	add	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	4413      	add	r3, r2
 8002d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	131b      	asrs	r3, r3, #12
 8002d30:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	131b      	asrs	r3, r3, #12
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	131b      	asrs	r3, r3, #12
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8002d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	33e0      	adds	r3, #224	; 0xe0
 8002d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	1a8a      	subs	r2, r1, r2
 8002d7a:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3320      	adds	r3, #32
 8002d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	440a      	add	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	33c0      	adds	r3, #192	; 0xc0
 8002d8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	1a8a      	subs	r2, r1, r2
 8002d92:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3340      	adds	r3, #64	; 0x40
 8002d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	440a      	add	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	33a0      	adds	r3, #160	; 0xa0
 8002da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	1a8a      	subs	r2, r1, r2
 8002daa:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3360      	adds	r3, #96	; 0x60
 8002db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	440a      	add	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3380      	adds	r3, #128	; 0x80
 8002dbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	1a8a      	subs	r2, r1, r2
 8002dc2:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002dca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd8:	2b07      	cmp	r3, #7
 8002dda:	f67f af42 	bls.w	8002c62 <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3b20      	subs	r3, #32
 8002de2:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dea:	e0e9      	b.n	8002fc0 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 8002e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	4413      	add	r3, r2
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	131b      	asrs	r3, r3, #12
 8002e26:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	4413      	add	r3, r2
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	4413      	add	r3, r2
 8002e3e:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	131b      	asrs	r3, r3, #12
 8002e9e:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	131b      	asrs	r3, r3, #12
 8002eb6:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	131b      	asrs	r3, r3, #12
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	131b      	asrs	r3, r3, #12
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	1ad2      	subs	r2, r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 8002eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	121b      	asrs	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efa:	4a37      	ldr	r2, [pc, #220]	; (8002fd8 <block_idct+0x3a0>)
 8002efc:	5cd2      	ldrb	r2, [r2, r3]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8002f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	121b      	asrs	r3, r3, #8
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	3307      	adds	r3, #7
 8002f14:	4930      	ldr	r1, [pc, #192]	; (8002fd8 <block_idct+0x3a0>)
 8002f16:	5c8a      	ldrb	r2, [r1, r2]
 8002f18:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 8002f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4413      	add	r3, r2
 8002f20:	121b      	asrs	r3, r3, #8
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	492a      	ldr	r1, [pc, #168]	; (8002fd8 <block_idct+0x3a0>)
 8002f2e:	5c8a      	ldrb	r2, [r1, r2]
 8002f30:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 8002f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	121b      	asrs	r3, r3, #8
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3306      	adds	r3, #6
 8002f44:	4924      	ldr	r1, [pc, #144]	; (8002fd8 <block_idct+0x3a0>)
 8002f46:	5c8a      	ldrb	r2, [r1, r2]
 8002f48:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	121b      	asrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	491e      	ldr	r1, [pc, #120]	; (8002fd8 <block_idct+0x3a0>)
 8002f5e:	5c8a      	ldrb	r2, [r1, r2]
 8002f60:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	121b      	asrs	r3, r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	3305      	adds	r3, #5
 8002f74:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <block_idct+0x3a0>)
 8002f76:	5c8a      	ldrb	r2, [r1, r2]
 8002f78:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 8002f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	121b      	asrs	r3, r3, #8
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <block_idct+0x3a0>)
 8002f8e:	5c8a      	ldrb	r2, [r1, r2]
 8002f90:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	121b      	asrs	r3, r3, #8
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <block_idct+0x3a0>)
 8002fa6:	5c8a      	ldrb	r2, [r1, r2]
 8002fa8:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002fb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002fc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fc4:	2b07      	cmp	r3, #7
 8002fc6:	f67f af11 	bls.w	8002dec <block_idct+0x1b4>
	}
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	3754      	adds	r7, #84	; 0x54
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	080174ec 	.word	0x080174ec

08002fdc <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b090      	sub	sp, #64	; 0x40
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7b9b      	ldrb	r3, [r3, #14]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7bdb      	ldrb	r3, [r3, #15]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	fb12 f303 	smulbb	r3, r2, r3
 8002ffa:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003004:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 8003006:	2300      	movs	r3, #0
 8003008:	86fb      	strh	r3, [r7, #54]	; 0x36
 800300a:	e11b      	b.n	8003244 <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 800300c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800300e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003010:	429a      	cmp	r2, r3
 8003012:	d306      	bcc.n	8003022 <mcu_load+0x46>
 8003014:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	e000      	b.n	8003024 <mcu_load+0x48>
 8003022:	2300      	movs	r3, #0
 8003024:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8003026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8003034:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3204      	adds	r2, #4
 800303a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800303e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8003040:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3206      	adds	r2, #6
 8003046:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800304a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 800304c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003056:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff fd4a 	bl	8002af8 <huffext>
 8003064:	4603      	mov	r3, r0
 8003066:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da04      	bge.n	8003078 <mcu_load+0x9c>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	425b      	negs	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e0ed      	b.n	8003254 <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8003078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	3308      	adds	r3, #8
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02a      	beq.n	80030e4 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 800308e:	6979      	ldr	r1, [r7, #20]
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fcbe 	bl	8002a12 <bitext>
 8003096:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	2b00      	cmp	r3, #0
 800309c:	da04      	bge.n	80030a8 <mcu_load+0xcc>
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	425b      	negs	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e0d5      	b.n	8003254 <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	2201      	movs	r2, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <mcu_load+0xee>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 80030ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	4413      	add	r3, r2
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 80030d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d6:	b211      	sxth	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	3308      	adds	r3, #8
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	460a      	mov	r2, r1
 80030e2:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 80030e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	7c1b      	ldrb	r3, [r3, #16]
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3214      	adds	r2, #20
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	121a      	asrs	r2, r3, #8
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 8003108:	2301      	movs	r3, #1
 800310a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800310c:	e007      	b.n	800311e <mcu_load+0x142>
 800310e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	4413      	add	r3, r2
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003120:	2b3f      	cmp	r3, #63	; 0x3f
 8003122:	d9f4      	bls.n	800310e <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8003124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 8003130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 800313c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8003148:	2301      	movs	r3, #1
 800314a:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fcd0 	bl	8002af8 <huffext>
 8003158:	4603      	mov	r3, r0
 800315a:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d055      	beq.n	800320e <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da04      	bge.n	8003172 <mcu_load+0x196>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	425b      	negs	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e070      	b.n	8003254 <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	b29b      	uxth	r3, r3
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	81fb      	strh	r3, [r7, #14]
			if (z) {
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8003180:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003182:	89fb      	ldrh	r3, [r7, #14]
 8003184:	4413      	add	r3, r2
 8003186:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8003188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800318a:	2b3f      	cmp	r3, #63	; 0x3f
 800318c:	d901      	bls.n	8003192 <mcu_load+0x1b6>
 800318e:	2306      	movs	r3, #6
 8003190:	e060      	b.n	8003254 <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02f      	beq.n	8003200 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fc35 	bl	8002a12 <bitext>
 80031a8:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da04      	bge.n	80031ba <mcu_load+0x1de>
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	425b      	negs	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e04c      	b.n	8003254 <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3b01      	subs	r3, #1
 80031be:	2201      	movs	r2, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 80031c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <mcu_load+0x200>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 80031dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <mcu_load+0x280>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f0:	fb03 f202 	mul.w	r2, r3, r2
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031fa:	440b      	add	r3, r1
 80031fc:	1212      	asrs	r2, r2, #8
 80031fe:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 8003200:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003202:	3301      	adds	r3, #1
 8003204:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003206:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003208:	2b3f      	cmp	r3, #63	; 0x3f
 800320a:	d99f      	bls.n	800314c <mcu_load+0x170>
 800320c:	e000      	b.n	8003210 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 800320e:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7b5b      	ldrb	r3, [r3, #13]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d10b      	bne.n	8003230 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da00      	bge.n	8003222 <mcu_load+0x246>
 8003220:	33ff      	adds	r3, #255	; 0xff
 8003222:	121b      	asrs	r3, r3, #8
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b80      	subs	r3, #128	; 0x80
 8003228:	b2da      	uxtb	r2, r3
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e003      	b.n	8003238 <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8003230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003234:	f7ff fd00 	bl	8002c38 <block_idct>
		}

		bp += 64;				/* Next block */
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	3340      	adds	r3, #64	; 0x40
 800323c:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 800323e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003240:	3301      	adds	r3, #1
 8003242:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003244:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003246:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800324a:	440b      	add	r3, r1
 800324c:	429a      	cmp	r2, r3
 800324e:	f6ff aedd 	blt.w	800300c <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3740      	adds	r7, #64	; 0x40
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	0801742c 	.word	0x0801742c

08003260 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b098      	sub	sp, #96	; 0x60
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	460b      	mov	r3, r1
 8003270:	80fb      	strh	r3, [r7, #6]
 8003272:	4613      	mov	r3, r2
 8003274:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	7b9b      	ldrb	r3, [r3, #14]
 800327e:	b29b      	uxth	r3, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	863b      	strh	r3, [r7, #48]	; 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	7bdb      	ldrb	r3, [r3, #15]
 8003288:	b29b      	uxth	r3, r3
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003292:	4413      	add	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	8b92      	ldrh	r2, [r2, #28]
 8003298:	4293      	cmp	r3, r2
 800329a:	dd05      	ble.n	80032a8 <mcu_output+0x48>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8b9a      	ldrh	r2, [r3, #28]
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	e000      	b.n	80032aa <mcu_output+0x4a>
 80032a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80032aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 80032ac:	88ba      	ldrh	r2, [r7, #4]
 80032ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032b0:	4413      	add	r3, r2
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	8bd2      	ldrh	r2, [r2, #30]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	dd05      	ble.n	80032c6 <mcu_output+0x66>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8bda      	ldrh	r2, [r3, #30]
 80032be:	88bb      	ldrh	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	e000      	b.n	80032c8 <mcu_output+0x68>
 80032c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032c8:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 80032ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	7b52      	ldrb	r2, [r2, #13]
 80032d0:	4113      	asrs	r3, r2
 80032d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80032d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	7b52      	ldrb	r2, [r2, #13]
 80032da:	4113      	asrs	r3, r2
 80032dc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 80032de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <mcu_output+0x8a>
 80032e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <mcu_output+0x8e>
 80032ea:	2300      	movs	r3, #0
 80032ec:	e2f0      	b.n	80038d0 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	7b52      	ldrb	r2, [r2, #13]
 80032f4:	4113      	asrs	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
 80032f8:	88bb      	ldrh	r3, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	7b52      	ldrb	r2, [r2, #13]
 80032fe:	4113      	asrs	r3, r2
 8003300:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	82bb      	strh	r3, [r7, #20]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800330a:	4413      	add	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29b      	uxth	r3, r3
 8003312:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 8003314:	88bb      	ldrh	r3, [r7, #4]
 8003316:	833b      	strh	r3, [r7, #24]
 8003318:	88ba      	ldrh	r2, [r7, #4]
 800331a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800331c:	4413      	add	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	7b5b      	ldrb	r3, [r3, #13]
 800332a:	2b03      	cmp	r3, #3
 800332c:	f000 81a3 	beq.w	8003676 <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 8003336:	2300      	movs	r3, #0
 8003338:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800333c:	e0e3      	b.n	8003506 <mcu_output+0x2a6>
			pc = jd->mcubuf;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003342:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 8003344:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	461a      	mov	r2, r3
 800334c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334e:	4413      	add	r3, r2
 8003350:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 8003352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003354:	2b10      	cmp	r3, #16
 8003356:	d111      	bne.n	800337c <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8003358:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	3320      	adds	r3, #32
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	461a      	mov	r2, r3
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	4413      	add	r3, r2
 800336a:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 800336c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003370:	2b07      	cmp	r3, #7
 8003372:	d90c      	bls.n	800338e <mcu_output+0x12e>
 8003374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003376:	3340      	adds	r3, #64	; 0x40
 8003378:	65bb      	str	r3, [r7, #88]	; 0x58
 800337a:	e008      	b.n	800338e <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 800337c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800337e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	461a      	mov	r2, r3
 8003388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338a:	4413      	add	r3, r2
 800338c:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 800338e:	2300      	movs	r3, #0
 8003390:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003394:	e0ac      	b.n	80034f0 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b80      	subs	r3, #128	; 0x80
 800339e:	b29b      	uxth	r3, r3
 80033a0:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	3340      	adds	r3, #64	; 0x40
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b80      	subs	r3, #128	; 0x80
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 80033b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d10e      	bne.n	80033d4 <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80033b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d102      	bne.n	80033c4 <mcu_output+0x164>
 80033be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c0:	3338      	adds	r3, #56	; 0x38
 80033c2:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80033c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033ce:	4413      	add	r3, r2
 80033d0:	657b      	str	r3, [r7, #84]	; 0x54
 80033d2:	e002      	b.n	80033da <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 80033d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d6:	3301      	adds	r3, #1
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	65ba      	str	r2, [r7, #88]	; 0x58
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 80033e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033f0:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80036d0 <mcu_output+0x470>
 80033f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80033fc:	ee17 3a90 	vmov	r3, s15
 8003400:	b21b      	sxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003408:	fb03 f202 	mul.w	r2, r3, r2
 800340c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003410:	fb92 f3f3 	sdiv	r3, r2, r3
 8003414:	b29a      	uxth	r2, r3
 8003416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003418:	4413      	add	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	6539      	str	r1, [r7, #80]	; 0x50
 8003426:	49b2      	ldr	r1, [pc, #712]	; (80036f0 <mcu_output+0x490>)
 8003428:	5c8a      	ldrb	r2, [r1, r2]
 800342a:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 800342c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800342e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800343a:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 80036d8 <mcu_output+0x478>
 800343e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003442:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003446:	ee17 3a90 	vmov	r3, s15
 800344a:	b21b      	sxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003452:	fb03 f101 	mul.w	r1, r3, r1
 8003456:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003462:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80036e0 <mcu_output+0x480>
 8003466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800346a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800346e:	ee17 3a90 	vmov	r3, s15
 8003472:	b21b      	sxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	4419      	add	r1, r3
 8003480:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003484:	fb91 f3f3 	sdiv	r3, r1, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	1c59      	adds	r1, r3, #1
 8003496:	6539      	str	r1, [r7, #80]	; 0x50
 8003498:	4995      	ldr	r1, [pc, #596]	; (80036f0 <mcu_output+0x490>)
 800349a:	5c8a      	ldrb	r2, [r1, r2]
 800349c:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 800349e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034aa:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80036e8 <mcu_output+0x488>
 80034ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034b6:	ee17 3a90 	vmov	r3, s15
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80034ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d2:	4413      	add	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	1c59      	adds	r1, r3, #1
 80034de:	6539      	str	r1, [r7, #80]	; 0x50
 80034e0:	4983      	ldr	r1, [pc, #524]	; (80036f0 <mcu_output+0x490>)
 80034e2:	5c8a      	ldrb	r2, [r1, r2]
 80034e4:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 80034e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80034ea:	3301      	adds	r3, #1
 80034ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80034f0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80034f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034f6:	429a      	cmp	r2, r3
 80034f8:	f4ff af4d 	bcc.w	8003396 <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 80034fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003500:	3301      	adds	r3, #1
 8003502:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003506:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800350a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800350c:	429a      	cmp	r2, r3
 800350e:	f4ff af16 	bcc.w	800333e <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	7b5b      	ldrb	r3, [r3, #13]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8189 	beq.w	800382e <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	7b5b      	ldrb	r3, [r3, #13]
 8003520:	b29b      	uxth	r3, r3
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	7b5b      	ldrb	r3, [r3, #13]
 800352a:	461a      	mov	r2, r3
 800352c:	2301      	movs	r3, #1
 800352e:	4093      	lsls	r3, r2
 8003530:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8003532:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003534:	8c3b      	ldrh	r3, [r7, #32]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	0052      	lsls	r2, r2, #1
 800353e:	4413      	add	r3, r2
 8003540:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8003548:	2300      	movs	r3, #0
 800354a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800354e:	e08b      	b.n	8003668 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8003550:	2300      	movs	r3, #0
 8003552:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003556:	e07b      	b.n	8003650 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800355c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003560:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003562:	fb03 f202 	mul.w	r2, r3, r2
 8003566:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800356a:	441a      	add	r2, r3
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	440b      	add	r3, r1
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800357c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003580:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003584:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003588:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 800358c:	2300      	movs	r3, #0
 800358e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003592:	e034      	b.n	80035fe <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 8003594:	2300      	movs	r3, #0
 8003596:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800359a:	e022      	b.n	80035e2 <mcu_output+0x382>
							r += *rgb24++;
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	653a      	str	r2, [r7, #80]	; 0x50
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035aa:	4413      	add	r3, r2
 80035ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	653a      	str	r2, [r7, #80]	; 0x50
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035be:	4413      	add	r3, r2
 80035c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	653a      	str	r2, [r7, #80]	; 0x50
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80035d2:	4413      	add	r3, r2
 80035d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 80035d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035dc:	3301      	adds	r3, #1
 80035de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80035e6:	8c3b      	ldrh	r3, [r7, #32]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3d7      	bcc.n	800359c <mcu_output+0x33c>
						}
						rgb24 += a;
 80035ec:	8bfb      	ldrh	r3, [r7, #30]
 80035ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035f0:	4413      	add	r3, r2
 80035f2:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 80035f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035f8:	3301      	adds	r3, #1
 80035fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80035fe:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003602:	8c3b      	ldrh	r3, [r7, #32]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3c5      	bcc.n	8003594 <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 8003608:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800360c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800360e:	fa42 f103 	asr.w	r1, r2, r3
 8003612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	643a      	str	r2, [r7, #64]	; 0x40
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 800361c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003622:	fa42 f103 	asr.w	r1, r2, r3
 8003626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	643a      	str	r2, [r7, #64]	; 0x40
 800362c:	b2ca      	uxtb	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 8003630:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003636:	fa42 f103 	asr.w	r1, r2, r3
 800363a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	643a      	str	r2, [r7, #64]	; 0x40
 8003640:	b2ca      	uxtb	r2, r1
 8003642:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 8003644:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003648:	8c3b      	ldrh	r3, [r7, #32]
 800364a:	4413      	add	r3, r2
 800364c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003650:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003654:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003656:	429a      	cmp	r2, r3
 8003658:	f4ff af7e 	bcc.w	8003558 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 800365c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003660:	8c3b      	ldrh	r3, [r7, #32]
 8003662:	4413      	add	r3, r2
 8003664:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003668:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800366c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800366e:	429a      	cmp	r2, r3
 8003670:	f4ff af6e 	bcc.w	8003550 <mcu_output+0x2f0>
 8003674:	e0db      	b.n	800382e <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003680:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003682:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003684:	fb01 f202 	mul.w	r2, r1, r2
 8003688:	4413      	add	r3, r2
 800368a:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 800368c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b80      	subs	r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 8003698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369a:	3340      	adds	r3, #64	; 0x40
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b80      	subs	r3, #128	; 0x80
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80036ac:	e0b9      	b.n	8003822 <mcu_output+0x5c2>
			py = jd->mcubuf;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b2:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 80036b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d102      	bne.n	80036c2 <mcu_output+0x462>
 80036bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036be:	3380      	adds	r3, #128	; 0x80
 80036c0:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036c8:	e0a0      	b.n	800380c <mcu_output+0x5ac>
 80036ca:	bf00      	nop
 80036cc:	f3af 8000 	nop.w
 80036d0:	8d4fdf3b 	.word	0x8d4fdf3b
 80036d4:	3ff66e97 	.word	0x3ff66e97
 80036d8:	9374bc6a 	.word	0x9374bc6a
 80036dc:	3fd60418 	.word	0x3fd60418
 80036e0:	872b020c 	.word	0x872b020c
 80036e4:	3fe6d916 	.word	0x3fe6d916
 80036e8:	ac083127 	.word	0xac083127
 80036ec:	3ffc5a1c 	.word	0x3ffc5a1c
 80036f0:	080174ec 	.word	0x080174ec
				yy = *py;	/* Get Y component */
 80036f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	3340      	adds	r3, #64	; 0x40
 80036fe:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 8003700:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800370c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80038d8 <mcu_output+0x678>
 8003710:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003714:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003718:	ee17 3a90 	vmov	r3, s15
 800371c:	b21b      	sxth	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003724:	fb03 f202 	mul.w	r2, r3, r2
 8003728:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800372c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003730:	b29a      	uxth	r2, r3
 8003732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003734:	4413      	add	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	6539      	str	r1, [r7, #80]	; 0x50
 8003742:	496d      	ldr	r1, [pc, #436]	; (80038f8 <mcu_output+0x698>)
 8003744:	5c8a      	ldrb	r2, [r1, r2]
 8003746:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003748:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800374a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003756:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80038e0 <mcu_output+0x680>
 800375a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800375e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003762:	ee17 3a90 	vmov	r3, s15
 8003766:	b21b      	sxth	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800376e:	fb03 f101 	mul.w	r1, r3, r1
 8003772:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800377e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80038e8 <mcu_output+0x688>
 8003782:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003786:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800378a:	ee17 3a90 	vmov	r3, s15
 800378e:	b21b      	sxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	4419      	add	r1, r3
 800379c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037a0:	fb91 f3f3 	sdiv	r3, r1, r3
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	1c59      	adds	r1, r3, #1
 80037b2:	6539      	str	r1, [r7, #80]	; 0x50
 80037b4:	4950      	ldr	r1, [pc, #320]	; (80038f8 <mcu_output+0x698>)
 80037b6:	5c8a      	ldrb	r2, [r1, r2]
 80037b8:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 80037ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037c6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80038f0 <mcu_output+0x690>
 80037ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037d2:	ee17 3a90 	vmov	r3, s15
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80037de:	fb03 f202 	mul.w	r2, r3, r2
 80037e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	1c59      	adds	r1, r3, #1
 80037fa:	6539      	str	r1, [r7, #80]	; 0x50
 80037fc:	493e      	ldr	r1, [pc, #248]	; (80038f8 <mcu_output+0x698>)
 80037fe:	5c8a      	ldrb	r2, [r1, r2]
 8003800:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 8003802:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003806:	3308      	adds	r3, #8
 8003808:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800380c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003810:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003812:	429a      	cmp	r2, r3
 8003814:	f4ff af6e 	bcc.w	80036f4 <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003818:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800381c:	3308      	adds	r3, #8
 800381e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003822:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003828:	429a      	cmp	r2, r3
 800382a:	f4ff af40 	bcc.w	80036ae <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 800382e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	7b52      	ldrb	r2, [r2, #13]
 8003834:	4113      	asrs	r3, r2
 8003836:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003838:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800383a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800383c:	429a      	cmp	r2, r3
 800383e:	d23a      	bcs.n	80038b6 <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 800384a:	2300      	movs	r3, #0
 800384c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800384e:	e02e      	b.n	80038ae <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003850:	2300      	movs	r3, #0
 8003852:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003854:	e01a      	b.n	800388c <mcu_output+0x62c>
				*d++ = *s++;
 8003856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003858:	1c53      	adds	r3, r2, #1
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	63b9      	str	r1, [r7, #56]	; 0x38
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003868:	1c53      	adds	r3, r2, #1
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	63b9      	str	r1, [r7, #56]	; 0x38
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003878:	1c53      	adds	r3, r2, #1
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	1c59      	adds	r1, r3, #1
 8003880:	63b9      	str	r1, [r7, #56]	; 0x38
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003888:	3301      	adds	r3, #1
 800388a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800388c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800388e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d3e0      	bcc.n	8003856 <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8003894:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	4413      	add	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 80038a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038aa:	3301      	adds	r3, #1
 80038ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3cc      	bcc.n	8003850 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80038ba:	f107 0214 	add.w	r2, r7, #20
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	4798      	blx	r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3760      	adds	r7, #96	; 0x60
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	8d4fdf3b 	.word	0x8d4fdf3b
 80038dc:	3ff66e97 	.word	0x3ff66e97
 80038e0:	9374bc6a 	.word	0x9374bc6a
 80038e4:	3fd60418 	.word	0x3fd60418
 80038e8:	872b020c 	.word	0x872b020c
 80038ec:	3fe6d916 	.word	0x3fe6d916
 80038f0:	ac083127 	.word	0xac083127
 80038f4:	3ffc5a1c 	.word	0x3ffc5a1c
 80038f8:	080174ec 	.word	0x080174ec

080038fc <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	82bb      	strh	r3, [r7, #20]
	d = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003918:	2300      	movs	r3, #0
 800391a:	82fb      	strh	r3, [r7, #22]
 800391c:	e025      	b.n	800396a <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 800391e:	8abb      	ldrh	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d110      	bne.n	8003946 <restart+0x4a>
			dp = jd->inbuf;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
 8003938:	4603      	mov	r3, r0
 800393a:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 800393c:	8abb      	ldrh	r3, [r7, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <restart+0x50>
 8003942:	2302      	movs	r3, #2
 8003944:	e03d      	b.n	80039c2 <restart+0xc6>
		} else {
			dp++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 800394c:	8abb      	ldrh	r3, [r7, #20]
 800394e:	3b01      	subs	r3, #1
 8003950:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 8003952:	8a7b      	ldrh	r3, [r7, #18]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b21a      	sxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b21b      	sxth	r3, r3
 800395e:	4313      	orrs	r3, r2
 8003960:	b21b      	sxth	r3, r3
 8003962:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	3301      	adds	r3, #1
 8003968:	82fb      	strh	r3, [r7, #22]
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d9d6      	bls.n	800391e <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8aba      	ldrh	r2, [r7, #20]
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 8003982:	8a7a      	ldrh	r2, [r7, #18]
 8003984:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8003988:	4013      	ands	r3, r2
 800398a:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 800398e:	4293      	cmp	r3, r2
 8003990:	d107      	bne.n	80039a2 <restart+0xa6>
 8003992:	8a7a      	ldrh	r2, [r7, #18]
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	4053      	eors	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 80039a2:	2306      	movs	r3, #6
 80039a4:	e00d      	b.n	80039c2 <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	829a      	strh	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	82da      	strh	r2, [r3, #22]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <jd_prepare+0x18>
 80039e0:	2305      	movs	r3, #5
 80039e2:	e2a4      	b.n	8003f2e <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fc:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003a04:	2300      	movs	r3, #0
 8003a06:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a08:	e026      	b.n	8003a58 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	843b      	strh	r3, [r7, #32]
 8003a0e:	e01d      	b.n	8003a4c <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003a10:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a12:	8c3a      	ldrh	r2, [r7, #32]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0049      	lsls	r1, r1, #1
 8003a18:	440a      	add	r2, r1
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 8003a22:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a24:	8c3a      	ldrh	r2, [r7, #32]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0049      	lsls	r1, r1, #1
 8003a2a:	440a      	add	r2, r1
 8003a2c:	320c      	adds	r2, #12
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 8003a34:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a36:	8c3a      	ldrh	r2, [r7, #32]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0049      	lsls	r1, r1, #1
 8003a3c:	440a      	add	r2, r1
 8003a3e:	3210      	adds	r2, #16
 8003a40:	2100      	movs	r1, #0
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 8003a46:	8c3b      	ldrh	r3, [r7, #32]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	843b      	strh	r3, [r7, #32]
 8003a4c:	8c3b      	ldrh	r3, [r7, #32]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d9de      	bls.n	8003a10 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a54:	3301      	adds	r3, #1
 8003a56:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d9d5      	bls.n	8003a0a <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a62:	e008      	b.n	8003a76 <jd_prepare+0xaa>
 8003a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	847a      	strh	r2, [r7, #34]	; 0x22
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3214      	adds	r2, #20
 8003a70:	2100      	movs	r1, #0
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d9f3      	bls.n	8003a64 <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 8003a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7fe fe68 	bl	8002756 <alloc_pool>
 8003a86:	61b8      	str	r0, [r7, #24]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <jd_prepare+0xcc>
 8003a94:	2303      	movs	r3, #3
 8003a96:	e24a      	b.n	8003f2e <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	4798      	blx	r3
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d001      	beq.n	8003aae <jd_prepare+0xe2>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e23f      	b.n	8003f2e <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b21b      	sxth	r3, r3
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b21b      	sxth	r3, r3
 8003ac2:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003ac6:	d001      	beq.n	8003acc <jd_prepare+0x100>
 8003ac8:	2306      	movs	r3, #6
 8003aca:	e230      	b.n	8003f2e <jd_prepare+0x562>
	ofs = 2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	4798      	blx	r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d001      	beq.n	8003ae6 <jd_prepare+0x11a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e223      	b.n	8003f2e <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	3302      	adds	r3, #2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	b21a      	sxth	r2, r3
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b21b      	sxth	r3, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b21b      	sxth	r3, r3
 8003b12:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8003b14:	8bfb      	ldrh	r3, [r7, #30]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d904      	bls.n	8003b24 <jd_prepare+0x158>
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d001      	beq.n	8003b28 <jd_prepare+0x15c>
 8003b24:	2306      	movs	r3, #6
 8003b26:	e202      	b.n	8003f2e <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003b28:	8bfb      	ldrh	r3, [r7, #30]
 8003b2a:	3b02      	subs	r3, #2
 8003b2c:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003b2e:	8bfa      	ldrh	r2, [r7, #30]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003b38:	8afb      	ldrh	r3, [r7, #22]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3bc0      	subs	r3, #192	; 0xc0
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	f200 81e3 	bhi.w	8003f0a <jd_prepare+0x53e>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <jd_prepare+0x180>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003bc5 	.word	0x08003bc5
 8003b50:	08003f07 	.word	0x08003f07
 8003b54:	08003f07 	.word	0x08003f07
 8003b58:	08003f07 	.word	0x08003f07
 8003b5c:	08003d01 	.word	0x08003d01
 8003b60:	08003f07 	.word	0x08003f07
 8003b64:	08003f07 	.word	0x08003f07
 8003b68:	08003f07 	.word	0x08003f07
 8003b6c:	08003f0b 	.word	0x08003f0b
 8003b70:	08003f07 	.word	0x08003f07
 8003b74:	08003f07 	.word	0x08003f07
 8003b78:	08003f07 	.word	0x08003f07
 8003b7c:	08003f0b 	.word	0x08003f0b
 8003b80:	08003f07 	.word	0x08003f07
 8003b84:	08003f07 	.word	0x08003f07
 8003b88:	08003f07 	.word	0x08003f07
 8003b8c:	08003f0b 	.word	0x08003f0b
 8003b90:	08003f0b 	.word	0x08003f0b
 8003b94:	08003f0b 	.word	0x08003f0b
 8003b98:	08003f0b 	.word	0x08003f0b
 8003b9c:	08003f0b 	.word	0x08003f0b
 8003ba0:	08003f0b 	.word	0x08003f0b
 8003ba4:	08003f0b 	.word	0x08003f0b
 8003ba8:	08003f0b 	.word	0x08003f0b
 8003bac:	08003f0b 	.word	0x08003f0b
 8003bb0:	08003f07 	.word	0x08003f07
 8003bb4:	08003d85 	.word	0x08003d85
 8003bb8:	08003d43 	.word	0x08003d43
 8003bbc:	08003f0b 	.word	0x08003f0b
 8003bc0:	08003cbf 	.word	0x08003cbf
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bca:	d901      	bls.n	8003bd0 <jd_prepare+0x204>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	e1ae      	b.n	8003f2e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	8bfa      	ldrh	r2, [r7, #30]
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	4798      	blx	r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	8bfb      	ldrh	r3, [r7, #30]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d001      	beq.n	8003bea <jd_prepare+0x21e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e1a1      	b.n	8003f2e <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3303      	adds	r3, #3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	b21a      	sxth	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3302      	adds	r3, #2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b21b      	sxth	r3, r3
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3305      	adds	r3, #5
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d001      	beq.n	8003c30 <jd_prepare+0x264>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	e17e      	b.n	8003f2e <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c34:	e03f      	b.n	8003cb6 <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8003c36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3307      	adds	r3, #7
 8003c40:	461a      	mov	r2, r3
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 8003c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8003c50:	7c7b      	ldrb	r3, [r7, #17]
 8003c52:	2b11      	cmp	r3, #17
 8003c54:	d007      	beq.n	8003c66 <jd_prepare+0x29a>
 8003c56:	7c7b      	ldrb	r3, [r7, #17]
 8003c58:	2b22      	cmp	r3, #34	; 0x22
 8003c5a:	d004      	beq.n	8003c66 <jd_prepare+0x29a>
 8003c5c:	7c7b      	ldrb	r3, [r7, #17]
 8003c5e:	2b21      	cmp	r3, #33	; 0x21
 8003c60:	d001      	beq.n	8003c66 <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8003c62:	2308      	movs	r3, #8
 8003c64:	e163      	b.n	8003f2e <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8003c66:	7c7b      	ldrb	r3, [r7, #17]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	739a      	strb	r2, [r3, #14]
 8003c70:	7c7b      	ldrb	r3, [r7, #17]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	73da      	strb	r2, [r3, #15]
 8003c7c:	e004      	b.n	8003c88 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 8003c7e:	7c7b      	ldrb	r3, [r7, #17]
 8003c80:	2b11      	cmp	r3, #17
 8003c82:	d001      	beq.n	8003c88 <jd_prepare+0x2bc>
 8003c84:	2308      	movs	r3, #8
 8003c86:	e152      	b.n	8003f2e <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8003c88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	3308      	adds	r3, #8
 8003c92:	461a      	mov	r2, r3
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 8003c9c:	7c7b      	ldrb	r3, [r7, #17]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d901      	bls.n	8003ca6 <jd_prepare+0x2da>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e143      	b.n	8003f2e <jd_prepare+0x562>
				jd->qtid[i] = b;
 8003ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	7c7a      	ldrb	r2, [r7, #17]
 8003cae:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 8003cb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d9bc      	bls.n	8003c36 <jd_prepare+0x26a>
			}
			break;
 8003cbc:	e136      	b.n	8003f2c <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003cbe:	8bfb      	ldrh	r3, [r7, #30]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d901      	bls.n	8003cca <jd_prepare+0x2fe>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	e131      	b.n	8003f2e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	8bfa      	ldrh	r2, [r7, #30]
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	4798      	blx	r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	8bfb      	ldrh	r3, [r7, #30]
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d001      	beq.n	8003ce4 <jd_prepare+0x318>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e124      	b.n	8003f2e <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	835a      	strh	r2, [r3, #26]
			break;
 8003cfe:	e115      	b.n	8003f2c <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003d00:	8bfb      	ldrh	r3, [r7, #30]
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d06:	d901      	bls.n	8003d0c <jd_prepare+0x340>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e110      	b.n	8003f2e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	8bfa      	ldrh	r2, [r7, #30]
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	4798      	blx	r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	8bfb      	ldrh	r3, [r7, #30]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d001      	beq.n	8003d26 <jd_prepare+0x35a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e103      	b.n	8003f2e <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8003d26:	8bfb      	ldrh	r3, [r7, #30]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69b9      	ldr	r1, [r7, #24]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7fe fd9b 	bl	8002868 <create_huffman_tbl>
 8003d32:	4603      	mov	r3, r0
 8003d34:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003d36:	7d7b      	ldrb	r3, [r7, #21]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80f4 	beq.w	8003f26 <jd_prepare+0x55a>
 8003d3e:	7d7b      	ldrb	r3, [r7, #21]
 8003d40:	e0f5      	b.n	8003f2e <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003d42:	8bfb      	ldrh	r3, [r7, #30]
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d901      	bls.n	8003d4e <jd_prepare+0x382>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e0ef      	b.n	8003f2e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	8bfa      	ldrh	r2, [r7, #30]
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	4798      	blx	r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	8bfb      	ldrh	r3, [r7, #30]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d001      	beq.n	8003d68 <jd_prepare+0x39c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0e2      	b.n	8003f2e <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8003d68:	8bfb      	ldrh	r3, [r7, #30]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	69b9      	ldr	r1, [r7, #24]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7fe fd1e 	bl	80027b0 <create_qt_tbl>
 8003d74:	4603      	mov	r3, r0
 8003d76:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003d78:	7d7b      	ldrb	r3, [r7, #21]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80d5 	beq.w	8003f2a <jd_prepare+0x55e>
 8003d80:	7d7b      	ldrb	r3, [r7, #21]
 8003d82:	e0d4      	b.n	8003f2e <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003d84:	8bfb      	ldrh	r3, [r7, #30]
 8003d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8a:	d901      	bls.n	8003d90 <jd_prepare+0x3c4>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	e0ce      	b.n	8003f2e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	8bfa      	ldrh	r2, [r7, #30]
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	4798      	blx	r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	8bfb      	ldrh	r3, [r7, #30]
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d001      	beq.n	8003daa <jd_prepare+0x3de>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0c1      	b.n	8003f2e <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8b9b      	ldrh	r3, [r3, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <jd_prepare+0x3ee>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8bdb      	ldrh	r3, [r3, #30]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <jd_prepare+0x3f2>
 8003dba:	2306      	movs	r3, #6
 8003dbc:	e0b7      	b.n	8003f2e <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d001      	beq.n	8003dca <jd_prepare+0x3fe>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	e0b1      	b.n	8003f2e <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 8003dca:	2300      	movs	r3, #0
 8003dcc:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dce:	e036      	b.n	8003e3e <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8003dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 8003de0:	7c7b      	ldrb	r3, [r7, #17]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <jd_prepare+0x424>
 8003de6:	7c7b      	ldrb	r3, [r7, #17]
 8003de8:	2b11      	cmp	r3, #17
 8003dea:	d001      	beq.n	8003df0 <jd_prepare+0x424>
 8003dec:	2308      	movs	r3, #8
 8003dee:	e09e      	b.n	8003f2e <jd_prepare+0x562>
				b = i ? 1 : 0;
 8003df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 8003dfe:	7c7a      	ldrb	r2, [r7, #17]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3204      	adds	r2, #4
 8003e04:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <jd_prepare+0x44e>
 8003e0c:	7c7b      	ldrb	r3, [r7, #17]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	e087      	b.n	8003f2e <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 8003e1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	7c1b      	ldrb	r3, [r3, #16]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3214      	adds	r2, #20
 8003e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 8003e34:	2306      	movs	r3, #6
 8003e36:	e07a      	b.n	8003f2e <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8003e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d9c5      	bls.n	8003dd0 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	7bdb      	ldrb	r3, [r3, #15]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	7b9b      	ldrb	r3, [r3, #14]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	fb12 f303 	smulbb	r3, r2, r3
 8003e54:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8003e56:	8a7b      	ldrh	r3, [r7, #18]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <jd_prepare+0x494>
 8003e5c:	2306      	movs	r3, #6
 8003e5e:	e066      	b.n	8003f2e <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8003e60:	8a7b      	ldrh	r3, [r7, #18]
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3340      	adds	r3, #64	; 0x40
 8003e68:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 8003e6a:	8bfb      	ldrh	r3, [r7, #30]
 8003e6c:	2bff      	cmp	r3, #255	; 0xff
 8003e6e:	d802      	bhi.n	8003e76 <jd_prepare+0x4aa>
 8003e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e74:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8003e76:	8bfb      	ldrh	r3, [r7, #30]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7fe fc6b 	bl	8002756 <alloc_pool>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <jd_prepare+0x4c6>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04d      	b.n	8003f2e <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 8003e92:	8a7b      	ldrh	r3, [r7, #18]
 8003e94:	3302      	adds	r3, #2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7fe fc59 	bl	8002756 <alloc_pool>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <jd_prepare+0x4ea>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e03b      	b.n	8003f2e <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	4411      	add	r1, r2
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	4798      	blx	r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	441a      	add	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8003f02:	2300      	movs	r3, #0
 8003f04:	e013      	b.n	8003f2e <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8003f06:	2308      	movs	r3, #8
 8003f08:	e011      	b.n	8003f2e <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	8bfa      	ldrh	r2, [r7, #30]
 8003f10:	2100      	movs	r1, #0
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	4798      	blx	r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	8bfb      	ldrh	r3, [r7, #30]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f43f add7 	beq.w	8003ad0 <jd_prepare+0x104>
				return JDR_INP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e003      	b.n	8003f2e <jd_prepare+0x562>
			break;
 8003f26:	bf00      	nop
 8003f28:	e5d2      	b.n	8003ad0 <jd_prepare+0x104>
			break;
 8003f2a:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003f2c:	e5d0      	b.n	8003ad0 <jd_prepare+0x104>
			}
		}
	}
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3728      	adds	r7, #40	; 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop

08003f38 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d901      	bls.n	8003f50 <jd_decomp+0x18>
 8003f4c:	2305      	movs	r3, #5
 8003f4e:	e06a      	b.n	8004026 <jd_decomp+0xee>
	jd->scale = scale;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	79fa      	ldrb	r2, [r7, #7]
 8003f54:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	7b9b      	ldrb	r3, [r3, #14]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	82bb      	strh	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	7bdb      	ldrb	r3, [r3, #15]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	829a      	strh	r2, [r3, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	82da      	strh	r2, [r3, #22]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	833b      	strh	r3, [r7, #24]
 8003f88:	8b3b      	ldrh	r3, [r7, #24]
 8003f8a:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003f90:	2300      	movs	r3, #0
 8003f92:	83bb      	strh	r3, [r7, #28]
 8003f94:	e041      	b.n	800401a <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003f96:	2300      	movs	r3, #0
 8003f98:	83fb      	strh	r3, [r7, #30]
 8003f9a:	e035      	b.n	8004008 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8b5b      	ldrh	r3, [r3, #26]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <jd_decomp+0x9a>
 8003fa4:	8b7b      	ldrh	r3, [r7, #26]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	837a      	strh	r2, [r7, #26]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	8b52      	ldrh	r2, [r2, #26]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10f      	bne.n	8003fd2 <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 8003fb2:	8b3b      	ldrh	r3, [r7, #24]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	833a      	strh	r2, [r7, #24]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fc9e 	bl	80038fc <restart>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <jd_decomp+0x96>
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	e02b      	b.n	8004026 <jd_decomp+0xee>
				rst = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff f802 	bl	8002fdc <mcu_load>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <jd_decomp+0xae>
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	e01f      	b.n	8004026 <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 8003fe6:	8bbb      	ldrh	r3, [r7, #28]
 8003fe8:	8bfa      	ldrh	r2, [r7, #30]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff f937 	bl	8003260 <mcu_output>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <jd_decomp+0xc8>
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	e012      	b.n	8004026 <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8004000:	8bfa      	ldrh	r2, [r7, #30]
 8004002:	8abb      	ldrh	r3, [r7, #20]
 8004004:	4413      	add	r3, r2
 8004006:	83fb      	strh	r3, [r7, #30]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8b9b      	ldrh	r3, [r3, #28]
 800400c:	8bfa      	ldrh	r2, [r7, #30]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3c4      	bcc.n	8003f9c <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8004012:	8bba      	ldrh	r2, [r7, #28]
 8004014:	8a7b      	ldrh	r3, [r7, #18]
 8004016:	4413      	add	r3, r2
 8004018:	83bb      	strh	r3, [r7, #28]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8bdb      	ldrh	r3, [r3, #30]
 800401e:	8bba      	ldrh	r2, [r7, #28]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3b8      	bcc.n	8003f96 <jd_decomp+0x5e>
		}
	}

	return rc;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004032:	2003      	movs	r0, #3
 8004034:	f000 f94c 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004038:	2000      	movs	r0, #0
 800403a:	f000 f805 	bl	8004048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800403e:	f7fd fc81 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_InitTick+0x54>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_InitTick+0x58>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800405e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f967 	bl	800433a <HAL_SYSTICK_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e00e      	b.n	8004094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d80a      	bhi.n	8004092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800407c:	2200      	movs	r2, #0
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	f000 f92f 	bl	80042e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004088:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <HAL_InitTick+0x5c>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200004c0 	.word	0x200004c0
 80040a0:	200004c8 	.word	0x200004c8
 80040a4:	200004c4 	.word	0x200004c4

080040a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_IncTick+0x20>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_IncTick+0x24>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_IncTick+0x24>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	200004c8 	.word	0x200004c8
 80040cc:	20001364 	.word	0x20001364

080040d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return uwTick;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_GetTick+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20001364 	.word	0x20001364

080040e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7ff ffee 	bl	80040d0 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d005      	beq.n	800410e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_Delay+0x44>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800410e:	bf00      	nop
 8004110:	f7ff ffde 	bl	80040d0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d8f7      	bhi.n	8004110 <HAL_Delay+0x28>
  {
  }
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200004c8 	.word	0x200004c8

08004130 <__NVIC_SetPriorityGrouping>:
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	60d3      	str	r3, [r2, #12]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00
 8004174:	05fa0000 	.word	0x05fa0000

08004178 <__NVIC_GetPriorityGrouping>:
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff3e 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff8e 	bl	8004224 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5d 	bl	80041d0 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff31 	bl	8004194 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa2 	bl	800428c <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e054      	b.n	8004410 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	7f5b      	ldrb	r3, [r3, #29]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc f992 	bl	80006a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	791b      	ldrb	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_CRC_Init+0xc4>)
 8004390:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0218 	bic.w	r2, r2, #24
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	e00c      	b.n	80043be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6899      	ldr	r1, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f834 	bl	800441c <HAL_CRCEx_Polynomial_Set>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e028      	b.n	8004410 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	795b      	ldrb	r3, [r3, #5]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	611a      	str	r2, [r3, #16]
 80043d0:	e004      	b.n	80043dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6912      	ldr	r2, [r2, #16]
 80043da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	04c11db7 	.word	0x04c11db7

0800441c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800442c:	231f      	movs	r3, #31
 800442e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004430:	bf00      	nop
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	613a      	str	r2, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_CRCEx_Polynomial_Set+0x34>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b18      	cmp	r3, #24
 8004454:	d846      	bhi.n	80044e4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	080044eb 	.word	0x080044eb
 8004460:	080044e5 	.word	0x080044e5
 8004464:	080044e5 	.word	0x080044e5
 8004468:	080044e5 	.word	0x080044e5
 800446c:	080044e5 	.word	0x080044e5
 8004470:	080044e5 	.word	0x080044e5
 8004474:	080044e5 	.word	0x080044e5
 8004478:	080044e5 	.word	0x080044e5
 800447c:	080044d9 	.word	0x080044d9
 8004480:	080044e5 	.word	0x080044e5
 8004484:	080044e5 	.word	0x080044e5
 8004488:	080044e5 	.word	0x080044e5
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044e5 	.word	0x080044e5
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080044e5 	.word	0x080044e5
 800449c:	080044cd 	.word	0x080044cd
 80044a0:	080044e5 	.word	0x080044e5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044c1 	.word	0x080044c1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d913      	bls.n	80044ee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044ca:	e010      	b.n	80044ee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b07      	cmp	r3, #7
 80044d0:	d90f      	bls.n	80044f2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044d6:	e00c      	b.n	80044f2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d90b      	bls.n	80044f6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044e2:	e008      	b.n	80044f6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
      break;
 80044e8:	e006      	b.n	80044f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044f6:	bf00      	nop
  }
  if (status == HAL_OK)
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 0118 	bic.w	r1, r3, #24
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004534:	f7ff fdcc 	bl	80040d0 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e099      	b.n	8004678 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004564:	e00f      	b.n	8004586 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004566:	f7ff fdb3 	bl	80040d0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b05      	cmp	r3, #5
 8004572:	d908      	bls.n	8004586 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2203      	movs	r2, #3
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e078      	b.n	8004678 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e8      	bne.n	8004566 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4b38      	ldr	r3, [pc, #224]	; (8004680 <HAL_DMA_Init+0x158>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d107      	bne.n	80045f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	4313      	orrs	r3, r2
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0307 	bic.w	r3, r3, #7
 8004606:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b04      	cmp	r3, #4
 8004618:	d117      	bne.n	800464a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa7b 	bl	8004b28 <DMA_CheckFifoParam>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2240      	movs	r2, #64	; 0x40
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004646:	2301      	movs	r3, #1
 8004648:	e016      	b.n	8004678 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa32 	bl	8004abc <DMA_CalcBaseAndBitshift>
 8004658:	4603      	mov	r3, r0
 800465a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	223f      	movs	r2, #63	; 0x3f
 8004662:	409a      	lsls	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	e010803f 	.word	0xe010803f

08004684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004692:	f7ff fd1d 	bl	80040d0 <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e052      	b.n	800475c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_Abort+0x62>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004706:	e013      	b.n	8004730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004708:	f7ff fce2 	bl	80040d0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b05      	cmp	r3, #5
 8004714:	d90c      	bls.n	8004730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2203      	movs	r2, #3
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e015      	b.n	800475c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e4      	bne.n	8004708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	223f      	movs	r2, #63	; 0x3f
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d004      	beq.n	8004782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e00c      	b.n	800479c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047b4:	4b8e      	ldr	r3, [pc, #568]	; (80049f0 <HAL_DMA_IRQHandler+0x248>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a8e      	ldr	r2, [pc, #568]	; (80049f4 <HAL_DMA_IRQHandler+0x24c>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	2208      	movs	r2, #8
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01a      	beq.n	8004814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	2208      	movs	r2, #8
 8004802:	409a      	lsls	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	2201      	movs	r2, #1
 800481a:	409a      	lsls	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0202 	orr.w	r2, r3, #2
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2204      	movs	r2, #4
 8004850:	409a      	lsls	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00b      	beq.n	8004880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	2204      	movs	r2, #4
 800486e:	409a      	lsls	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0204 	orr.w	r2, r3, #4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	2210      	movs	r2, #16
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d043      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03c      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	2210      	movs	r2, #16
 80048a4:	409a      	lsls	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d018      	beq.n	80048ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d024      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	e01f      	b.n	8004918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01b      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
 80048e8:	e016      	b.n	8004918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0208 	bic.w	r2, r2, #8
 8004906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	2220      	movs	r2, #32
 800491e:	409a      	lsls	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 808f 	beq.w	8004a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8087 	beq.w	8004a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	2220      	movs	r2, #32
 8004940:	409a      	lsls	r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b05      	cmp	r3, #5
 8004950:	d136      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0216 	bic.w	r2, r2, #22
 8004960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <HAL_DMA_IRQHandler+0x1da>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	223f      	movs	r2, #63	; 0x3f
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d07e      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
        }
        return;
 80049be:	e079      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d031      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e02c      	b.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
 80049ee:	bf00      	nop
 80049f0:	200004c0 	.word	0x200004c0
 80049f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
 8004a08:	e01e      	b.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10f      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0210 	bic.w	r2, r2, #16
 8004a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d032      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d022      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d307      	bcc.n	8004a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f2      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x2cc>
 8004a8e:	e000      	b.n	8004a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
 8004ab2:	e000      	b.n	8004ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ab4:	bf00      	nop
    }
  }
}
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3b10      	subs	r3, #16
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <DMA_CalcBaseAndBitshift+0x60>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <DMA_CalcBaseAndBitshift+0x64>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d908      	bls.n	8004afc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <DMA_CalcBaseAndBitshift+0x68>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	659a      	str	r2, [r3, #88]	; 0x58
 8004afa:	e006      	b.n	8004b0a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <DMA_CalcBaseAndBitshift+0x68>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	aaaaaaab 	.word	0xaaaaaaab
 8004b20:	080178ec 	.word	0x080178ec
 8004b24:	fffffc00 	.word	0xfffffc00

08004b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11f      	bne.n	8004b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d856      	bhi.n	8004bf6 <DMA_CheckFifoParam+0xce>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <DMA_CheckFifoParam+0x28>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b73 	.word	0x08004b73
 8004b58:	08004b61 	.word	0x08004b61
 8004b5c:	08004bf7 	.word	0x08004bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d046      	beq.n	8004bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e043      	b.n	8004bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b7a:	d140      	bne.n	8004bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b80:	e03d      	b.n	8004bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8a:	d121      	bne.n	8004bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d837      	bhi.n	8004c02 <DMA_CheckFifoParam+0xda>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <DMA_CheckFifoParam+0x70>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004baf 	.word	0x08004baf
 8004ba0:	08004ba9 	.word	0x08004ba9
 8004ba4:	08004bc1 	.word	0x08004bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e030      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d025      	beq.n	8004c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bbe:	e022      	b.n	8004c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc8:	d11f      	bne.n	8004c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bce:	e01c      	b.n	8004c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d903      	bls.n	8004bde <DMA_CheckFifoParam+0xb6>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d003      	beq.n	8004be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bdc:	e018      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
      break;
 8004be2:	e015      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	e00b      	b.n	8004c0e <DMA_CheckFifoParam+0xe6>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e00a      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e008      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e006      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c02:	bf00      	nop
 8004c04:	e004      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <DMA_CheckFifoParam+0xe8>
      break;
 8004c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e175      	b.n	8004f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c40:	2201      	movs	r2, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	f040 8164 	bne.w	8004f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d005      	beq.n	8004c76 <HAL_GPIO_Init+0x56>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d130      	bne.n	8004cd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	2203      	movs	r2, #3
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cac:	2201      	movs	r2, #1
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 0201 	and.w	r2, r3, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d017      	beq.n	8004d14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	2203      	movs	r2, #3
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d123      	bne.n	8004d68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	08da      	lsrs	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3208      	adds	r2, #8
 8004d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	220f      	movs	r2, #15
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	08da      	lsrs	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3208      	adds	r2, #8
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	2203      	movs	r2, #3
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0203 	and.w	r2, r3, #3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80be 	beq.w	8004f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004daa:	4b66      	ldr	r3, [pc, #408]	; (8004f44 <HAL_GPIO_Init+0x324>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	4a65      	ldr	r2, [pc, #404]	; (8004f44 <HAL_GPIO_Init+0x324>)
 8004db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db4:	6453      	str	r3, [r2, #68]	; 0x44
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <HAL_GPIO_Init+0x324>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004dc2:	4a61      	ldr	r2, [pc, #388]	; (8004f48 <HAL_GPIO_Init+0x328>)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <HAL_GPIO_Init+0x32c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d037      	beq.n	8004e5e <HAL_GPIO_Init+0x23e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_GPIO_Init+0x330>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <HAL_GPIO_Init+0x23a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a56      	ldr	r2, [pc, #344]	; (8004f54 <HAL_GPIO_Init+0x334>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02b      	beq.n	8004e56 <HAL_GPIO_Init+0x236>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a55      	ldr	r2, [pc, #340]	; (8004f58 <HAL_GPIO_Init+0x338>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d025      	beq.n	8004e52 <HAL_GPIO_Init+0x232>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a54      	ldr	r2, [pc, #336]	; (8004f5c <HAL_GPIO_Init+0x33c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01f      	beq.n	8004e4e <HAL_GPIO_Init+0x22e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a53      	ldr	r2, [pc, #332]	; (8004f60 <HAL_GPIO_Init+0x340>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d019      	beq.n	8004e4a <HAL_GPIO_Init+0x22a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a52      	ldr	r2, [pc, #328]	; (8004f64 <HAL_GPIO_Init+0x344>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <HAL_GPIO_Init+0x226>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a51      	ldr	r2, [pc, #324]	; (8004f68 <HAL_GPIO_Init+0x348>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00d      	beq.n	8004e42 <HAL_GPIO_Init+0x222>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a50      	ldr	r2, [pc, #320]	; (8004f6c <HAL_GPIO_Init+0x34c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d007      	beq.n	8004e3e <HAL_GPIO_Init+0x21e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a4f      	ldr	r2, [pc, #316]	; (8004f70 <HAL_GPIO_Init+0x350>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_GPIO_Init+0x21a>
 8004e36:	2309      	movs	r3, #9
 8004e38:	e012      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e3a:	230a      	movs	r3, #10
 8004e3c:	e010      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	e00e      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e42:	2307      	movs	r3, #7
 8004e44:	e00c      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e46:	2306      	movs	r3, #6
 8004e48:	e00a      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e4a:	2305      	movs	r3, #5
 8004e4c:	e008      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	e006      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e52:	2303      	movs	r3, #3
 8004e54:	e004      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e002      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_GPIO_Init+0x240>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	f002 0203 	and.w	r2, r2, #3
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	4093      	lsls	r3, r2
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e70:	4935      	ldr	r1, [pc, #212]	; (8004f48 <HAL_GPIO_Init+0x328>)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	3302      	adds	r3, #2
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ea2:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea8:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ed2:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004efc:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <HAL_GPIO_Init+0x354>)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	f67f ae86 	bls.w	8004c40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40013800 	.word	0x40013800
 8004f4c:	40020000 	.word	0x40020000
 8004f50:	40020400 	.word	0x40020400
 8004f54:	40020800 	.word	0x40020800
 8004f58:	40020c00 	.word	0x40020c00
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40021400 	.word	0x40021400
 8004f64:	40021800 	.word	0x40021800
 8004f68:	40021c00 	.word	0x40021c00
 8004f6c:	40022000 	.word	0x40022000
 8004f70:	40022400 	.word	0x40022400
 8004f74:	40013c00 	.word	0x40013c00

08004f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
 8004f84:	4613      	mov	r3, r2
 8004f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f88:	787b      	ldrb	r3, [r7, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f94:	e003      	b.n	8004f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fb4:	f7ff f88c 	bl	80040d0 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e067      	b.n	8005094 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc fab7 	bl	800154c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004fde:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f85e 	bl	80050a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	2120      	movs	r1, #32
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f856 	bl	80050c0 <QSPI_WaitFlagStateUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005018:	7afb      	ldrb	r3, [r7, #11]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d135      	bne.n	800508a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_QSPI_Init+0xf0>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	0611      	lsls	r1, r2, #24
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	69d2      	ldr	r2, [r2, #28]
 8005038:	4311      	orrs	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6a12      	ldr	r2, [r2, #32]
 800503e:	4311      	orrs	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430b      	orrs	r3, r1
 8005046:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <HAL_QSPI_Init+0xf4>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6912      	ldr	r2, [r2, #16]
 8005056:	0411      	lsls	r1, r2, #16
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6952      	ldr	r2, [r2, #20]
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6992      	ldr	r2, [r2, #24]
 8005062:	4311      	orrs	r1, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	430b      	orrs	r3, r1
 800506a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005092:	7afb      	ldrb	r3, [r7, #11]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	00ffff2f 	.word	0x00ffff2f
 80050a0:	ffe0f8fe 	.word	0xffe0f8fe

080050a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050d0:	e01a      	b.n	8005108 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d016      	beq.n	8005108 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050da:	f7fe fff9 	bl	80040d0 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2204      	movs	r2, #4
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e00e      	b.n	8005126 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	429a      	cmp	r2, r3
 8005122:	d1d6      	bne.n	80050d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005138:	2300      	movs	r3, #0
 800513a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e29b      	b.n	800567e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8087 	beq.w	8005262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005154:	4b96      	ldr	r3, [pc, #600]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b04      	cmp	r3, #4
 800515e:	d00c      	beq.n	800517a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005160:	4b93      	ldr	r3, [pc, #588]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b08      	cmp	r3, #8
 800516a:	d112      	bne.n	8005192 <HAL_RCC_OscConfig+0x62>
 800516c:	4b90      	ldr	r3, [pc, #576]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d10b      	bne.n	8005192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517a:	4b8d      	ldr	r3, [pc, #564]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06c      	beq.n	8005260 <HAL_RCC_OscConfig+0x130>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d168      	bne.n	8005260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e275      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x7a>
 800519c:	4b84      	ldr	r3, [pc, #528]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a83      	ldr	r2, [pc, #524]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e02e      	b.n	8005208 <HAL_RCC_OscConfig+0xd8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x9c>
 80051b2:	4b7f      	ldr	r3, [pc, #508]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7e      	ldr	r2, [pc, #504]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b7c      	ldr	r3, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7b      	ldr	r2, [pc, #492]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e01d      	b.n	8005208 <HAL_RCC_OscConfig+0xd8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCC_OscConfig+0xc0>
 80051d6:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a75      	ldr	r2, [pc, #468]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b73      	ldr	r3, [pc, #460]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a72      	ldr	r2, [pc, #456]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e00b      	b.n	8005208 <HAL_RCC_OscConfig+0xd8>
 80051f0:	4b6f      	ldr	r3, [pc, #444]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6e      	ldr	r2, [pc, #440]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	4b6c      	ldr	r3, [pc, #432]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6b      	ldr	r2, [pc, #428]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d013      	beq.n	8005238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fe ff5e 	bl	80040d0 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005218:	f7fe ff5a 	bl	80040d0 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b64      	cmp	r3, #100	; 0x64
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e229      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522a:	4b61      	ldr	r3, [pc, #388]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0xe8>
 8005236:	e014      	b.n	8005262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fe ff4a 	bl	80040d0 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005240:	f7fe ff46 	bl	80040d0 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e215      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005252:	4b57      	ldr	r3, [pc, #348]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x110>
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d069      	beq.n	8005342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800526e:	4b50      	ldr	r3, [pc, #320]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800527a:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b08      	cmp	r3, #8
 8005284:	d11c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x190>
 8005286:	4b4a      	ldr	r3, [pc, #296]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x17a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e1e9      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	493d      	ldr	r1, [pc, #244]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052be:	e040      	b.n	8005342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d023      	beq.n	8005310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c8:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fe fefc 	bl	80040d0 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fe fef8 	bl	80040d0 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e1c7      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ee:	4b30      	ldr	r3, [pc, #192]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4929      	ldr	r1, [pc, #164]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fe fed8 	bl	80040d0 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005324:	f7fe fed4 	bl	80040d0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1a3      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d038      	beq.n	80053c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d019      	beq.n	800538a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005356:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535a:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fe feb5 	bl	80040d0 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536a:	f7fe feb1 	bl	80040d0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e180      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x23a>
 8005388:	e01a      	b.n	80053c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <HAL_RCC_OscConfig+0x280>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fe fe9b 	bl	80040d0 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800539e:	f7fe fe97 	bl	80040d0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d903      	bls.n	80053b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e166      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
 80053b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b4:	4b92      	ldr	r3, [pc, #584]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80053b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ee      	bne.n	800539e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80a4 	beq.w	8005516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ce:	4b8c      	ldr	r3, [pc, #560]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10d      	bne.n	80053f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	4b89      	ldr	r3, [pc, #548]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a88      	ldr	r2, [pc, #544]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b86      	ldr	r3, [pc, #536]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f6:	4b83      	ldr	r3, [pc, #524]	; (8005604 <HAL_RCC_OscConfig+0x4d4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d118      	bne.n	8005434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005402:	4b80      	ldr	r3, [pc, #512]	; (8005604 <HAL_RCC_OscConfig+0x4d4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a7f      	ldr	r2, [pc, #508]	; (8005604 <HAL_RCC_OscConfig+0x4d4>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540e:	f7fe fe5f 	bl	80040d0 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005416:	f7fe fe5b 	bl	80040d0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e12a      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <HAL_RCC_OscConfig+0x4d4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x31a>
 800543c:	4b70      	ldr	r3, [pc, #448]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a6f      	ldr	r2, [pc, #444]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	e02d      	b.n	80054a6 <HAL_RCC_OscConfig+0x376>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0x33c>
 8005452:	4b6b      	ldr	r3, [pc, #428]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	4a6a      	ldr	r2, [pc, #424]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	6713      	str	r3, [r2, #112]	; 0x70
 800545e:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	6713      	str	r3, [r2, #112]	; 0x70
 800546a:	e01c      	b.n	80054a6 <HAL_RCC_OscConfig+0x376>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b05      	cmp	r3, #5
 8005472:	d10c      	bne.n	800548e <HAL_RCC_OscConfig+0x35e>
 8005474:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	4a61      	ldr	r2, [pc, #388]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	6713      	str	r3, [r2, #112]	; 0x70
 8005480:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	6713      	str	r3, [r2, #112]	; 0x70
 800548c:	e00b      	b.n	80054a6 <HAL_RCC_OscConfig+0x376>
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a5b      	ldr	r2, [pc, #364]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a58      	ldr	r2, [pc, #352]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80054a0:	f023 0304 	bic.w	r3, r3, #4
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d015      	beq.n	80054da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fe fe0f 	bl	80040d0 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fe fe0b 	bl	80040d0 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0d8      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054cc:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ee      	beq.n	80054b6 <HAL_RCC_OscConfig+0x386>
 80054d8:	e014      	b.n	8005504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054da:	f7fe fdf9 	bl	80040d0 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fe fdf5 	bl	80040d0 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e0c2      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f8:	4b41      	ldr	r3, [pc, #260]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ee      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005504:	7dfb      	ldrb	r3, [r7, #23]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4b3d      	ldr	r3, [pc, #244]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80ae 	beq.w	800567c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005520:	4b37      	ldr	r3, [pc, #220]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d06d      	beq.n	8005608 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d14b      	bne.n	80055cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a31      	ldr	r2, [pc, #196]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fe fdc6 	bl	80040d0 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fe fdc2 	bl	80040d0 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e091      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	4b29      	ldr	r3, [pc, #164]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	3b01      	subs	r3, #1
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	061b      	lsls	r3, r3, #24
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	071b      	lsls	r3, r3, #28
 8005592:	491b      	ldr	r1, [pc, #108]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005598:	4b19      	ldr	r3, [pc, #100]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 800559e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fe fd94 	bl	80040d0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fe fd90 	bl	80040d0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e05f      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x47c>
 80055ca:	e057      	b.n	800567c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0b      	ldr	r2, [pc, #44]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80055d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fe fd7a 	bl	80040d0 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fe fd76 	bl	80040d0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e045      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <HAL_RCC_OscConfig+0x4d0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x4b0>
 80055fe:	e03d      	b.n	800567c <HAL_RCC_OscConfig+0x54c>
 8005600:	40023800 	.word	0x40023800
 8005604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005608:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_RCC_OscConfig+0x558>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d030      	beq.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d129      	bne.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d122      	bne.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005638:	4013      	ands	r3, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800563e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005640:	4293      	cmp	r3, r2
 8005642:	d119      	bne.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	3b01      	subs	r3, #1
 8005652:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005654:	429a      	cmp	r2, r3
 8005656:	d10f      	bne.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0d0      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d910      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b67      	ldr	r3, [pc, #412]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 020f 	bic.w	r2, r3, #15
 80056ba:	4965      	ldr	r1, [pc, #404]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b63      	ldr	r3, [pc, #396]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0b8      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a58      	ldr	r2, [pc, #352]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 80056f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800570a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800570e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	494d      	ldr	r1, [pc, #308]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d040      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d115      	bne.n	800576e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	4b41      	ldr	r3, [pc, #260]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e073      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575e:	4b3d      	ldr	r3, [pc, #244]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06b      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576e:	4b39      	ldr	r3, [pc, #228]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4936      	ldr	r1, [pc, #216]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800577c:	4313      	orrs	r3, r2
 800577e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fe fca6 	bl	80040d0 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	e00a      	b.n	800579e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005788:	f7fe fca2 	bl	80040d0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	; 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e053      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 020c 	and.w	r2, r3, #12
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1eb      	bne.n	8005788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d210      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 020f 	bic.w	r2, r3, #15
 80057c6:	4922      	ldr	r1, [pc, #136]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b20      	ldr	r3, [pc, #128]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e032      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4916      	ldr	r1, [pc, #88]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490e      	ldr	r1, [pc, #56]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800581e:	f000 f821 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490a      	ldr	r1, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x1cc>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_RCC_ClockConfig+0x1d0>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_ClockConfig+0x1d4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fc02 	bl	8004048 <HAL_InitTick>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023c00 	.word	0x40023c00
 8005854:	40023800 	.word	0x40023800
 8005858:	08017414 	.word	0x08017414
 800585c:	200004c0 	.word	0x200004c0
 8005860:	200004c4 	.word	0x200004c4

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005868:	b094      	sub	sp, #80	; 0x50
 800586a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
 8005870:	2300      	movs	r3, #0
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005874:	2300      	movs	r3, #0
 8005876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800587c:	4b79      	ldr	r3, [pc, #484]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d00d      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005888:	2b08      	cmp	r3, #8
 800588a:	f200 80e1 	bhi.w	8005a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x34>
 8005892:	2b04      	cmp	r3, #4
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x3a>
 8005896:	e0db      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005898:	4b73      	ldr	r3, [pc, #460]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800589a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800589c:	e0db      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800589e:	4b73      	ldr	r3, [pc, #460]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80058a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058a2:	e0d8      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a4:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058ae:	4b6d      	ldr	r3, [pc, #436]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d063      	beq.n	8005982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	2200      	movs	r2, #0
 80058c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30
 80058ce:	2300      	movs	r3, #0
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
 80058d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	f04f 0000 	mov.w	r0, #0
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	0159      	lsls	r1, r3, #5
 80058e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e8:	0150      	lsls	r0, r2, #5
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4621      	mov	r1, r4
 80058f0:	1a51      	subs	r1, r2, r1
 80058f2:	6139      	str	r1, [r7, #16]
 80058f4:	4629      	mov	r1, r5
 80058f6:	eb63 0301 	sbc.w	r3, r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	018b      	lsls	r3, r1, #6
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005912:	4651      	mov	r1, sl
 8005914:	018a      	lsls	r2, r1, #6
 8005916:	4651      	mov	r1, sl
 8005918:	ebb2 0801 	subs.w	r8, r2, r1
 800591c:	4659      	mov	r1, fp
 800591e:	eb63 0901 	sbc.w	r9, r3, r1
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005936:	4690      	mov	r8, r2
 8005938:	4699      	mov	r9, r3
 800593a:	4623      	mov	r3, r4
 800593c:	eb18 0303 	adds.w	r3, r8, r3
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	462b      	mov	r3, r5
 8005944:	eb49 0303 	adc.w	r3, r9, r3
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005956:	4629      	mov	r1, r5
 8005958:	024b      	lsls	r3, r1, #9
 800595a:	4621      	mov	r1, r4
 800595c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005960:	4621      	mov	r1, r4
 8005962:	024a      	lsls	r2, r1, #9
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596a:	2200      	movs	r2, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005974:	f7fa fcbc 	bl	80002f0 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4613      	mov	r3, r2
 800597e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005980:	e058      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	4618      	mov	r0, r3
 800598c:	4611      	mov	r1, r2
 800598e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	2300      	movs	r3, #0
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	f04f 0000 	mov.w	r0, #0
 80059a4:	f04f 0100 	mov.w	r1, #0
 80059a8:	0159      	lsls	r1, r3, #5
 80059aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ae:	0150      	lsls	r0, r2, #5
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4641      	mov	r1, r8
 80059b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059d4:	ebb2 040a 	subs.w	r4, r2, sl
 80059d8:	eb63 050b 	sbc.w	r5, r3, fp
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	00eb      	lsls	r3, r5, #3
 80059e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ea:	00e2      	lsls	r2, r4, #3
 80059ec:	4614      	mov	r4, r2
 80059ee:	461d      	mov	r5, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	18e3      	adds	r3, r4, r3
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	464b      	mov	r3, r9
 80059f8:	eb45 0303 	adc.w	r3, r5, r3
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	028b      	lsls	r3, r1, #10
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a14:	4621      	mov	r1, r4
 8005a16:	028a      	lsls	r2, r1, #10
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1e:	2200      	movs	r2, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	61fa      	str	r2, [r7, #28]
 8005a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a28:	f7fa fc62 	bl	80002f0 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3750      	adds	r7, #80	; 0x50
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	00f42400 	.word	0x00f42400
 8005a6c:	007a1200 	.word	0x007a1200

08005a70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a74:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	200004c0 	.word	0x200004c0

08005a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a8c:	f7ff fff0 	bl	8005a70 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0a9b      	lsrs	r3, r3, #10
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	08017424 	.word	0x08017424

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ab4:	f7ff ffdc 	bl	8005a70 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0b5b      	lsrs	r3, r3, #13
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4903      	ldr	r1, [pc, #12]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	08017424 	.word	0x08017424

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b00:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	4964      	ldr	r1, [pc, #400]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b22:	2301      	movs	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d017      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	4959      	ldr	r1, [pc, #356]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b50:	d101      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b6e:	4b4e      	ldr	r3, [pc, #312]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	494a      	ldr	r1, [pc, #296]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 808b 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	4a39      	ldr	r2, [pc, #228]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc8:	4b37      	ldr	r3, [pc, #220]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bd4:	4b35      	ldr	r3, [pc, #212]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a34      	ldr	r2, [pc, #208]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fe fa76 	bl	80040d0 <HAL_GetTick>
 8005be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be8:	f7fe fa72 	bl	80040d0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	; 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e38f      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bfa:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c06:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d035      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d02e      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c4c:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d114      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fe fa3a 	bl	80040d0 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fe fa36 	bl	80040d0 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e351      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ee      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c8e:	d111      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	4901      	ldr	r1, [pc, #4]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	0ffffcff 	.word	0x0ffffcff
 8005cb4:	4bac      	ldr	r3, [pc, #688]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4aab      	ldr	r2, [pc, #684]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cbe:	6093      	str	r3, [r2, #8]
 8005cc0:	4ba9      	ldr	r3, [pc, #676]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ccc:	49a6      	ldr	r1, [pc, #664]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cde:	4ba2      	ldr	r3, [pc, #648]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce4:	4aa0      	ldr	r2, [pc, #640]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005cee:	4b9e      	ldr	r3, [pc, #632]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	499b      	ldr	r1, [pc, #620]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d0c:	4b96      	ldr	r3, [pc, #600]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1a:	4993      	ldr	r1, [pc, #588]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d2e:	4b8e      	ldr	r3, [pc, #568]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3c:	498a      	ldr	r1, [pc, #552]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d50:	4b85      	ldr	r3, [pc, #532]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5e:	4982      	ldr	r1, [pc, #520]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d72:	4b7d      	ldr	r3, [pc, #500]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4979      	ldr	r1, [pc, #484]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d94:	4b74      	ldr	r3, [pc, #464]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f023 0203 	bic.w	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	4971      	ldr	r1, [pc, #452]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005db6:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f023 020c 	bic.w	r2, r3, #12
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	4968      	ldr	r1, [pc, #416]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd8:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	4960      	ldr	r1, [pc, #384]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dfa:	4b5b      	ldr	r3, [pc, #364]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	4957      	ldr	r1, [pc, #348]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e1c:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	494f      	ldr	r1, [pc, #316]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	4946      	ldr	r1, [pc, #280]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e60:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	493e      	ldr	r1, [pc, #248]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e82:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	4935      	ldr	r1, [pc, #212]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ea4:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb2:	492d      	ldr	r1, [pc, #180]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	4924      	ldr	r1, [pc, #144]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee4:	d101      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f06:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	4914      	ldr	r1, [pc, #80]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f38:	490b      	ldr	r1, [pc, #44]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00f      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5c:	4902      	ldr	r1, [pc, #8]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f64:	e002      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f78:	4b8a      	ldr	r3, [pc, #552]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	4986      	ldr	r1, [pc, #536]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f9c:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fac:	497d      	ldr	r1, [pc, #500]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d006      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80d6 	beq.w	8006174 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fc8:	4b76      	ldr	r3, [pc, #472]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a75      	ldr	r2, [pc, #468]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd4:	f7fe f87c 	bl	80040d0 <HAL_GetTick>
 8005fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fdc:	f7fe f878 	bl	80040d0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e195      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fee:	4b6d      	ldr	r3, [pc, #436]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d021      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11d      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800600e:	4b65      	ldr	r3, [pc, #404]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800601c:	4b61      	ldr	r3, [pc, #388]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006022:	0e1b      	lsrs	r3, r3, #24
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	019a      	lsls	r2, r3, #6
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	431a      	orrs	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	071b      	lsls	r3, r3, #28
 8006042:	4958      	ldr	r1, [pc, #352]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02e      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006074:	d129      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006076:	4b4b      	ldr	r3, [pc, #300]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006084:	4b47      	ldr	r3, [pc, #284]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	019a      	lsls	r2, r3, #6
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	041b      	lsls	r3, r3, #16
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	493e      	ldr	r1, [pc, #248]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060b2:	4b3c      	ldr	r3, [pc, #240]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b8:	f023 021f 	bic.w	r2, r3, #31
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	3b01      	subs	r3, #1
 80060c2:	4938      	ldr	r1, [pc, #224]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01d      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060e4:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ea:	0f1b      	lsrs	r3, r3, #28
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	019a      	lsls	r2, r3, #6
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	431a      	orrs	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	061b      	lsls	r3, r3, #24
 8006104:	431a      	orrs	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	071b      	lsls	r3, r3, #28
 800610a:	4926      	ldr	r1, [pc, #152]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d011      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	019a      	lsls	r2, r3, #6
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	071b      	lsls	r3, r3, #28
 800613a:	491a      	ldr	r1, [pc, #104]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800614e:	f7fd ffbf 	bl	80040d0 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006156:	f7fd ffbb 	bl	80040d0 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b64      	cmp	r3, #100	; 0x64
 8006162:	d901      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e0d8      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	f040 80ce 	bne.w	8006318 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fd ffa2 	bl	80040d0 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800618e:	e00b      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006190:	f7fd ff9e 	bl	80040d0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d904      	bls.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0bb      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061a8:	4b5e      	ldr	r3, [pc, #376]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b4:	d0ec      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d02e      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d12a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061de:	4b51      	ldr	r3, [pc, #324]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061ec:	4b4d      	ldr	r3, [pc, #308]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	0f1b      	lsrs	r3, r3, #28
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	019a      	lsls	r2, r3, #6
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	061b      	lsls	r3, r3, #24
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	071b      	lsls	r3, r3, #28
 8006212:	4944      	ldr	r1, [pc, #272]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800621a:	4b42      	ldr	r3, [pc, #264]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006220:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	493d      	ldr	r1, [pc, #244]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d022      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006248:	d11d      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	0e1b      	lsrs	r3, r3, #24
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006258:	4b32      	ldr	r3, [pc, #200]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	0f1b      	lsrs	r3, r3, #28
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	019a      	lsls	r2, r3, #6
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	431a      	orrs	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	071b      	lsls	r3, r3, #28
 800627e:	4929      	ldr	r1, [pc, #164]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d028      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	0e1b      	lsrs	r3, r3, #24
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062a0:	4b20      	ldr	r3, [pc, #128]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	019a      	lsls	r2, r3, #6
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	431a      	orrs	r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	061b      	lsls	r3, r3, #24
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	071b      	lsls	r3, r3, #28
 80062c6:	4917      	ldr	r1, [pc, #92]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062ce:	4b15      	ldr	r3, [pc, #84]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4911      	ldr	r1, [pc, #68]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f0:	f7fd feee 	bl	80040d0 <HAL_GetTick>
 80062f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062f8:	f7fd feea 	bl	80040d0 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	; 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e007      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006316:	d1ef      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40023800 	.word	0x40023800

08006328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e09d      	b.n	8006476 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634a:	d009      	beq.n	8006360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	61da      	str	r2, [r3, #28]
 8006352:	e005      	b.n	8006360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fa1c 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006396:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a0:	d902      	bls.n	80063a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e002      	b.n	80063ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063b6:	d007      	beq.n	80063c8 <HAL_SPI_Init+0xa0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063c0:	d002      	beq.n	80063c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	ea42 0103 	orr.w	r1, r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	f003 0204 	and.w	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006444:	ea42 0103 	orr.w	r1, r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b088      	sub	sp, #32
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_SPI_Transmit+0x22>
 800649c:	2302      	movs	r3, #2
 800649e:	e158      	b.n	8006752 <HAL_SPI_Transmit+0x2d4>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a8:	f7fd fe12 	bl	80040d0 <HAL_GetTick>
 80064ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d002      	beq.n	80064c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064be:	2302      	movs	r3, #2
 80064c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c2:	e13d      	b.n	8006740 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_Transmit+0x52>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064d4:	e134      	b.n	8006740 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2203      	movs	r2, #3
 80064da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	d10f      	bne.n	8006542 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d007      	beq.n	8006560 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006568:	d94b      	bls.n	8006602 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0xfa>
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d13e      	bne.n	80065f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	881a      	ldrh	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	1c9a      	adds	r2, r3, #2
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800659c:	e02b      	b.n	80065f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d112      	bne.n	80065d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d0:	e011      	b.n	80065f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d2:	f7fd fd7d 	bl	80040d0 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d803      	bhi.n	80065ea <HAL_SPI_Transmit+0x16c>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_Transmit+0x172>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065f4:	e0a4      	b.n	8006740 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ce      	bne.n	800659e <HAL_SPI_Transmit+0x120>
 8006600:	e07c      	b.n	80066fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_SPI_Transmit+0x192>
 800660a:	8afb      	ldrh	r3, [r7, #22]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d170      	bne.n	80066f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d912      	bls.n	8006640 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b02      	subs	r3, #2
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800663e:	e058      	b.n	80066f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006666:	e044      	b.n	80066f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d12b      	bne.n	80066ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d912      	bls.n	80066a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	1c9a      	adds	r2, r3, #2
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b02      	subs	r3, #2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066a4:	e025      	b.n	80066f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066cc:	e011      	b.n	80066f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ce:	f7fd fcff 	bl	80040d0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d803      	bhi.n	80066e6 <HAL_SPI_Transmit+0x268>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d102      	bne.n	80066ec <HAL_SPI_Transmit+0x26e>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066f0:	e026      	b.n	8006740 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1b5      	bne.n	8006668 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fd07 	bl	8007114 <SPI_EndRxTxTransaction>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e000      	b.n	8006740 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800673e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006750:	7ffb      	ldrb	r3, [r7, #31]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d112      	bne.n	800679e <HAL_SPI_Receive+0x44>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10e      	bne.n	800679e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2204      	movs	r2, #4
 8006784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f910 	bl	80069ba <HAL_SPI_TransmitReceive>
 800679a:	4603      	mov	r3, r0
 800679c:	e109      	b.n	80069b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_SPI_Receive+0x52>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e102      	b.n	80069b2 <HAL_SPI_Receive+0x258>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b4:	f7fd fc8c 	bl	80040d0 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
 80067c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ca:	e0e9      	b.n	80069a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_SPI_Receive+0x7e>
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067dc:	e0e0      	b.n	80069a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2204      	movs	r2, #4
 80067e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006828:	d908      	bls.n	800683c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	e007      	b.n	800684c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	d10f      	bne.n	8006876 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006864:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006874:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	d007      	beq.n	8006894 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006892:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800689c:	d867      	bhi.n	800696e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800689e:	e030      	b.n	8006902 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d117      	bne.n	80068de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f103 020c 	add.w	r2, r3, #12
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068dc:	e011      	b.n	8006902 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068de:	f7fd fbf7 	bl	80040d0 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d803      	bhi.n	80068f6 <HAL_SPI_Receive+0x19c>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_Receive+0x1a2>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006900:	e04e      	b.n	80069a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1c8      	bne.n	80068a0 <HAL_SPI_Receive+0x146>
 800690e:	e034      	b.n	800697a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d115      	bne.n	800694a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	b292      	uxth	r2, r2
 800692a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	1c9a      	adds	r2, r3, #2
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006948:	e011      	b.n	800696e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800694a:	f7fd fbc1 	bl	80040d0 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d803      	bhi.n	8006962 <HAL_SPI_Receive+0x208>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d102      	bne.n	8006968 <HAL_SPI_Receive+0x20e>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800696c:	e018      	b.n	80069a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1ca      	bne.n	8006910 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fb4c 	bl	800701c <SPI_EndRxTransaction>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
 800699c:	e000      	b.n	80069a0 <HAL_SPI_Receive+0x246>
  }

error :
 800699e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b08a      	sub	sp, #40	; 0x28
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069c8:	2301      	movs	r3, #1
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x26>
 80069dc:	2302      	movs	r3, #2
 80069de:	e1fb      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x41e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e8:	f7fd fb72 	bl	80040d0 <HAL_GetTick>
 80069ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a04:	7efb      	ldrb	r3, [r7, #27]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d00e      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x6e>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a10:	d106      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x66>
 8006a1a:	7efb      	ldrb	r3, [r7, #27]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d003      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a26:	e1cd      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x80>
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a40:	e1c0      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d003      	beq.n	8006a56 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2205      	movs	r2, #5
 8006a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	887a      	ldrh	r2, [r7, #2]
 8006a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	887a      	ldrh	r2, [r7, #2]
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	887a      	ldrh	r2, [r7, #2]
 8006a82:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a98:	d802      	bhi.n	8006aa0 <HAL_SPI_TransmitReceive+0xe6>
 8006a9a:	8a3b      	ldrh	r3, [r7, #16]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d908      	bls.n	8006ab2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e007      	b.n	8006ac2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d007      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ae8:	d97c      	bls.n	8006be4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x13e>
 8006af2:	8a7b      	ldrh	r3, [r7, #18]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d169      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	881a      	ldrh	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	1c9a      	adds	r2, r3, #2
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b1c:	e056      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d11b      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d113      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d11c      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x1f2>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bac:	f7fd fa90 	bl	80040d0 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d807      	bhi.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d003      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bca:	e0fb      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1a3      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x164>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d19d      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x164>
 8006be2:	e0df      	b.n	8006da4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x23a>
 8006bec:	8a7b      	ldrh	r3, [r7, #18]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	f040 80cb 	bne.w	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d912      	bls.n	8006c24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	1c9a      	adds	r2, r3, #2
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b02      	subs	r3, #2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c22:	e0b2      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c4a:	e09e      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d134      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d02f      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d12c      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d912      	bls.n	8006c9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b02      	subs	r3, #2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c98:	e012      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d148      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x3aa>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d042      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d923      	bls.n	8006d32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b02      	subs	r3, #2
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d81f      	bhi.n	8006d60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	e016      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f103 020c 	add.w	r2, r3, #12
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d60:	2301      	movs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d64:	f7fd f9b4 	bl	80040d0 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_TransmitReceive+0x3c2>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x3c8>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d88:	e01c      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f af5b 	bne.w	8006c4c <HAL_SPI_TransmitReceive+0x292>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f af54 	bne.w	8006c4c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f9b3 	bl	8007114 <SPI_EndRxTxTransaction>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	661a      	str	r2, [r3, #96]	; 0x60
 8006dc0:	e000      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3728      	adds	r7, #40	; 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df0:	f7fd f96e 	bl	80040d0 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e00:	f7fd f966 	bl	80040d0 <HAL_GetTick>
 8006e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e06:	4b39      	ldr	r3, [pc, #228]	; (8006eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	0d1b      	lsrs	r3, r3, #20
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e16:	e054      	b.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d050      	beq.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e20:	f7fd f956 	bl	80040d0 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d13d      	bne.n	8006eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4e:	d111      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e58:	d004      	beq.n	8006e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d107      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7c:	d10f      	bne.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e017      	b.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d19b      	bne.n	8006e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	200004c0 	.word	0x200004c0

08006ef0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f02:	f7fd f8e5 	bl	80040d0 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	4413      	add	r3, r2
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f12:	f7fd f8dd 	bl	80040d0 <HAL_GetTick>
 8006f16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f20:	4b3d      	ldr	r3, [pc, #244]	; (8007018 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f38:	e060      	b.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f40:	d107      	bne.n	8006f52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d050      	beq.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f5a:	f7fd f8b9 	bl	80040d0 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d902      	bls.n	8006f70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d13d      	bne.n	8006fec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f88:	d111      	bne.n	8006fae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f92:	d004      	beq.n	8006f9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9c:	d107      	bne.n	8006fae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	d10f      	bne.n	8006fd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e010      	b.n	800700e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d196      	bne.n	8006f3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3728      	adds	r7, #40	; 0x28
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200004c0 	.word	0x200004c0

0800701c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007030:	d111      	bne.n	8007056 <SPI_EndRxTransaction+0x3a>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703a:	d004      	beq.n	8007046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d107      	bne.n	8007056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705e:	d112      	bne.n	8007086 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff feb8 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d021      	beq.n	80070ba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707a:	f043 0220 	orr.w	r2, r3, #32
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e03d      	b.n	8007102 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007086:	4b21      	ldr	r3, [pc, #132]	; (800710c <SPI_EndRxTransaction+0xf0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a21      	ldr	r2, [pc, #132]	; (8007110 <SPI_EndRxTransaction+0xf4>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	0d5b      	lsrs	r3, r3, #21
 8007092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d0f2      	beq.n	800709c <SPI_EndRxTransaction+0x80>
 80070b6:	e000      	b.n	80070ba <SPI_EndRxTransaction+0x9e>
        break;
 80070b8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070c2:	d11d      	bne.n	8007100 <SPI_EndRxTransaction+0xe4>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070cc:	d004      	beq.n	80070d8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d113      	bne.n	8007100 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2200      	movs	r2, #0
 80070e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ff03 	bl	8006ef0 <SPI_WaitFifoStateUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f4:	f043 0220 	orr.w	r2, r3, #32
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e000      	b.n	8007102 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200004c0 	.word	0x200004c0
 8007110:	165e9f81 	.word	0x165e9f81

08007114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2200      	movs	r2, #0
 8007128:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff fedf 	bl	8006ef0 <SPI_WaitFifoStateUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e046      	b.n	80071d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <SPI_EndRxTxTransaction+0xcc>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <SPI_EndRxTxTransaction+0xd0>)
 800714e:	fba2 2303 	umull	r2, r3, r2, r3
 8007152:	0d5b      	lsrs	r3, r3, #21
 8007154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007166:	d112      	bne.n	800718e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	2180      	movs	r1, #128	; 0x80
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fe34 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d016      	beq.n	80071ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e023      	b.n	80071d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3b01      	subs	r3, #1
 8007198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d0f2      	beq.n	800718e <SPI_EndRxTxTransaction+0x7a>
 80071a8:	e000      	b.n	80071ac <SPI_EndRxTxTransaction+0x98>
        break;
 80071aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fe99 	bl	8006ef0 <SPI_WaitFifoStateUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c8:	f043 0220 	orr.w	r2, r3, #32
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e000      	b.n	80071d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200004c0 	.word	0x200004c0
 80071e4:	165e9f81 	.word	0x165e9f81

080071e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e049      	b.n	800728e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fa fc6e 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f000 f836 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a40      	ldr	r2, [pc, #256]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <TIM_Base_SetConfig+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d02b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d027      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2c      	ldr	r2, [pc, #176]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d023      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <TIM_Base_SetConfig+0x124>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d017      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_Base_SetConfig+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <TIM_Base_SetConfig+0x12c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <TIM_Base_SetConfig+0x130>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0x134>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_Base_SetConfig+0x138>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <TIM_Base_SetConfig+0x114>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <TIM_Base_SetConfig+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800
 80073cc:	40001800 	.word	0x40001800
 80073d0:	40001c00 	.word	0x40001c00
 80073d4:	40002000 	.word	0x40002000

080073d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e040      	b.n	800746c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fa fbf8 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	; 0x24
 8007404:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fbc2 	bl	8007ba0 <UART_SetConfig>
 800741c:	4603      	mov	r3, r0
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e022      	b.n	800746c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fe1a 	bl	8008068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fea1 	bl	80081ac <UART_CheckIdleState>
 800746a:	4603      	mov	r3, r0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007488:	2b20      	cmp	r3, #32
 800748a:	d171      	bne.n	8007570 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_UART_Transmit+0x24>
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e06a      	b.n	8007572 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2221      	movs	r2, #33	; 0x21
 80074a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074aa:	f7fc fe11 	bl	80040d0 <HAL_GetTick>
 80074ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	88fa      	ldrh	r2, [r7, #6]
 80074b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	88fa      	ldrh	r2, [r7, #6]
 80074bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c8:	d108      	bne.n	80074dc <HAL_UART_Transmit+0x68>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	e003      	b.n	80074e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074e4:	e02c      	b.n	8007540 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 fea8 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e038      	b.n	8007572 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007514:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	3302      	adds	r3, #2
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e007      	b.n	800752e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1cc      	bne.n	80074e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2200      	movs	r2, #0
 8007554:	2140      	movs	r1, #64	; 0x40
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 fe75 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e005      	b.n	8007572 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b0ba      	sub	sp, #232	; 0xe8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075aa:	4013      	ands	r3, r2
 80075ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d115      	bne.n	80075e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 82ac 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
      }
      return;
 80075e2:	e2a6      	b.n	8007b32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8117 	beq.w	800781c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075fe:	4b85      	ldr	r3, [pc, #532]	; (8007814 <HAL_UART_IRQHandler+0x298>)
 8007600:	4013      	ands	r3, r2
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 810a 	beq.w	800781c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_UART_IRQHandler+0xbc>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2201      	movs	r2, #1
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762e:	f043 0201 	orr.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0xec>
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2202      	movs	r2, #2
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765e:	f043 0204 	orr.w	r2, r3, #4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <HAL_UART_IRQHandler+0x11c>
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2204      	movs	r2, #4
 8007686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768e:	f043 0202 	orr.w	r2, r3, #2
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d017      	beq.n	80076d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2208      	movs	r2, #8
 80076c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ca:	f043 0208 	orr.w	r2, r3, #8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d012      	beq.n	8007706 <HAL_UART_IRQHandler+0x18a>
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8212 	beq.w	8007b36 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800775a:	2b00      	cmp	r3, #0
 800775c:	d04f      	beq.n	80077fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fe37 	bl	80083d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d141      	bne.n	80077f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800779e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1d9      	bne.n	8007772 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ca:	4a13      	ldr	r2, [pc, #76]	; (8007818 <HAL_UART_IRQHandler+0x29c>)
 80077cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc ffc6 	bl	8004764 <HAL_DMA_Abort_IT>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	e00f      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9b6 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e00b      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9b2 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e007      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9ae 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800780c:	e193      	b.n	8007b36 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780e:	bf00      	nop
    return;
 8007810:	e191      	b.n	8007b36 <HAL_UART_IRQHandler+0x5ba>
 8007812:	bf00      	nop
 8007814:	04000120 	.word	0x04000120
 8007818:	0800849b 	.word	0x0800849b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007820:	2b01      	cmp	r3, #1
 8007822:	f040 814c 	bne.w	8007abe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 8145 	beq.w	8007abe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 813e 	beq.w	8007abe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2210      	movs	r2, #16
 8007848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	f040 80b6 	bne.w	80079c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007866:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8165 	beq.w	8007b3a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	429a      	cmp	r2, r3
 800787c:	f080 815d 	bcs.w	8007b3a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	f000 8086 	beq.w	80079a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1da      	bne.n	8007898 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f4:	f023 0301 	bic.w	r3, r3, #1
 80078f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800790a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800790e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e1      	bne.n	80078e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800792e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e3      	bne.n	800791e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007986:	65bb      	str	r3, [r7, #88]	; 0x58
 8007988:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800798c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e4      	bne.n	8007964 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fc fe70 	bl	8004684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8d8 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c4:	e0b9      	b.n	8007b3a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80ab 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80079e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80a6 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a14:	647b      	str	r3, [r7, #68]	; 0x44
 8007a16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e4      	bne.n	80079f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	623b      	str	r3, [r7, #32]
   return(result);
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3308      	adds	r3, #8
 8007a48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a4c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e3      	bne.n	8007a28 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f023 0310 	bic.w	r3, r3, #16
 8007a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e4      	bne.n	8007a74 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f85c 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007abc:	e03f      	b.n	8007b3e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x56c>
 8007aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f853 	bl	8007b8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae6:	e02d      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01c      	beq.n	8007b42 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    }
    return;
 8007b10:	e017      	b.n	8007b42 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d012      	beq.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fccb 	bl	80084c6 <UART_EndTransmit_IT>
    return;
 8007b30:	e008      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b32:	bf00      	nop
 8007b34:	e006      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007b36:	bf00      	nop
 8007b38:	e004      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007b42:	bf00      	nop
  }

}
 8007b44:	37e8      	adds	r7, #232	; 0xe8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4ba6      	ldr	r3, [pc, #664]	; (8007e64 <UART_SetConfig+0x2c4>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a94      	ldr	r2, [pc, #592]	; (8007e68 <UART_SetConfig+0x2c8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d120      	bne.n	8007c5e <UART_SetConfig+0xbe>
 8007c1c:	4b93      	ldr	r3, [pc, #588]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d816      	bhi.n	8007c58 <UART_SetConfig+0xb8>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x90>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c47 	.word	0x08007c47
 8007c3c:	08007c53 	.word	0x08007c53
 8007c40:	2301      	movs	r3, #1
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e150      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e14d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e14a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e147      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e144      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a83      	ldr	r2, [pc, #524]	; (8007e70 <UART_SetConfig+0x2d0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d132      	bne.n	8007cce <UART_SetConfig+0x12e>
 8007c68:	4b80      	ldr	r3, [pc, #512]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f003 030c 	and.w	r3, r3, #12
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	d828      	bhi.n	8007cc8 <UART_SetConfig+0x128>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0xdc>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007cb7 	.word	0x08007cb7
 8007ca0:	08007cc9 	.word	0x08007cc9
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	08007cc3 	.word	0x08007cc3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e118      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e115      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e112      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	77fb      	strb	r3, [r7, #31]
 8007cc6:	e10f      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	77fb      	strb	r3, [r7, #31]
 8007ccc:	e10c      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a68      	ldr	r2, [pc, #416]	; (8007e74 <UART_SetConfig+0x2d4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d120      	bne.n	8007d1a <UART_SetConfig+0x17a>
 8007cd8:	4b64      	ldr	r3, [pc, #400]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce2:	2b30      	cmp	r3, #48	; 0x30
 8007ce4:	d013      	beq.n	8007d0e <UART_SetConfig+0x16e>
 8007ce6:	2b30      	cmp	r3, #48	; 0x30
 8007ce8:	d814      	bhi.n	8007d14 <UART_SetConfig+0x174>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0x162>
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d810      	bhi.n	8007d14 <UART_SetConfig+0x174>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <UART_SetConfig+0x15c>
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d006      	beq.n	8007d08 <UART_SetConfig+0x168>
 8007cfa:	e00b      	b.n	8007d14 <UART_SetConfig+0x174>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e0f2      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e0ef      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e0ec      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e0e9      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e0e6      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a56      	ldr	r2, [pc, #344]	; (8007e78 <UART_SetConfig+0x2d8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d120      	bne.n	8007d66 <UART_SetConfig+0x1c6>
 8007d24:	4b51      	ldr	r3, [pc, #324]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d30:	d013      	beq.n	8007d5a <UART_SetConfig+0x1ba>
 8007d32:	2bc0      	cmp	r3, #192	; 0xc0
 8007d34:	d814      	bhi.n	8007d60 <UART_SetConfig+0x1c0>
 8007d36:	2b80      	cmp	r3, #128	; 0x80
 8007d38:	d009      	beq.n	8007d4e <UART_SetConfig+0x1ae>
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d810      	bhi.n	8007d60 <UART_SetConfig+0x1c0>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <UART_SetConfig+0x1a8>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d006      	beq.n	8007d54 <UART_SetConfig+0x1b4>
 8007d46:	e00b      	b.n	8007d60 <UART_SetConfig+0x1c0>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e0cc      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e0c9      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d54:	2304      	movs	r3, #4
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e0c6      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e0c3      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d60:	2310      	movs	r3, #16
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e0c0      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a44      	ldr	r2, [pc, #272]	; (8007e7c <UART_SetConfig+0x2dc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d125      	bne.n	8007dbc <UART_SetConfig+0x21c>
 8007d70:	4b3e      	ldr	r3, [pc, #248]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7e:	d017      	beq.n	8007db0 <UART_SetConfig+0x210>
 8007d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d84:	d817      	bhi.n	8007db6 <UART_SetConfig+0x216>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8a:	d00b      	beq.n	8007da4 <UART_SetConfig+0x204>
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d811      	bhi.n	8007db6 <UART_SetConfig+0x216>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <UART_SetConfig+0x1fe>
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9a:	d006      	beq.n	8007daa <UART_SetConfig+0x20a>
 8007d9c:	e00b      	b.n	8007db6 <UART_SetConfig+0x216>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e0a1      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007da4:	2302      	movs	r3, #2
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e09e      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007daa:	2304      	movs	r3, #4
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e09b      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007db0:	2308      	movs	r3, #8
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e098      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007db6:	2310      	movs	r3, #16
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e095      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <UART_SetConfig+0x2e0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d125      	bne.n	8007e12 <UART_SetConfig+0x272>
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd4:	d017      	beq.n	8007e06 <UART_SetConfig+0x266>
 8007dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dda:	d817      	bhi.n	8007e0c <UART_SetConfig+0x26c>
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de0:	d00b      	beq.n	8007dfa <UART_SetConfig+0x25a>
 8007de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de6:	d811      	bhi.n	8007e0c <UART_SetConfig+0x26c>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <UART_SetConfig+0x254>
 8007dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df0:	d006      	beq.n	8007e00 <UART_SetConfig+0x260>
 8007df2:	e00b      	b.n	8007e0c <UART_SetConfig+0x26c>
 8007df4:	2301      	movs	r3, #1
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e076      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e073      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e070      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e06:	2308      	movs	r3, #8
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e06d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e06a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1b      	ldr	r2, [pc, #108]	; (8007e84 <UART_SetConfig+0x2e4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d138      	bne.n	8007e8e <UART_SetConfig+0x2ee>
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <UART_SetConfig+0x2cc>)
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e2a:	d017      	beq.n	8007e5c <UART_SetConfig+0x2bc>
 8007e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e30:	d82a      	bhi.n	8007e88 <UART_SetConfig+0x2e8>
 8007e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e36:	d00b      	beq.n	8007e50 <UART_SetConfig+0x2b0>
 8007e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e3c:	d824      	bhi.n	8007e88 <UART_SetConfig+0x2e8>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <UART_SetConfig+0x2aa>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e46:	d006      	beq.n	8007e56 <UART_SetConfig+0x2b6>
 8007e48:	e01e      	b.n	8007e88 <UART_SetConfig+0x2e8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e04b      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e50:	2302      	movs	r3, #2
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e048      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e56:	2304      	movs	r3, #4
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e045      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e042      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e62:	bf00      	nop
 8007e64:	efff69f3 	.word	0xefff69f3
 8007e68:	40011000 	.word	0x40011000
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	40004400 	.word	0x40004400
 8007e74:	40004800 	.word	0x40004800
 8007e78:	40004c00 	.word	0x40004c00
 8007e7c:	40005000 	.word	0x40005000
 8007e80:	40011400 	.word	0x40011400
 8007e84:	40007800 	.word	0x40007800
 8007e88:	2310      	movs	r3, #16
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e02c      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a72      	ldr	r2, [pc, #456]	; (800805c <UART_SetConfig+0x4bc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d125      	bne.n	8007ee4 <UART_SetConfig+0x344>
 8007e98:	4b71      	ldr	r3, [pc, #452]	; (8008060 <UART_SetConfig+0x4c0>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ea6:	d017      	beq.n	8007ed8 <UART_SetConfig+0x338>
 8007ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eac:	d817      	bhi.n	8007ede <UART_SetConfig+0x33e>
 8007eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb2:	d00b      	beq.n	8007ecc <UART_SetConfig+0x32c>
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb8:	d811      	bhi.n	8007ede <UART_SetConfig+0x33e>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <UART_SetConfig+0x326>
 8007ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec2:	d006      	beq.n	8007ed2 <UART_SetConfig+0x332>
 8007ec4:	e00b      	b.n	8007ede <UART_SetConfig+0x33e>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e00d      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e00a      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e007      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e004      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ede:	2310      	movs	r3, #16
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e001      	b.n	8007ee8 <UART_SetConfig+0x348>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef0:	d15b      	bne.n	8007faa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ef2:	7ffb      	ldrb	r3, [r7, #31]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d828      	bhi.n	8007f4a <UART_SetConfig+0x3aa>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <UART_SetConfig+0x360>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f25 	.word	0x08007f25
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	08007f4b 	.word	0x08007f4b
 8007f10:	08007f3b 	.word	0x08007f3b
 8007f14:	08007f4b 	.word	0x08007f4b
 8007f18:	08007f4b 	.word	0x08007f4b
 8007f1c:	08007f4b 	.word	0x08007f4b
 8007f20:	08007f43 	.word	0x08007f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f24:	f7fd fdb0 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 8007f28:	61b8      	str	r0, [r7, #24]
        break;
 8007f2a:	e013      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f2c:	f7fd fdc0 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8007f30:	61b8      	str	r0, [r7, #24]
        break;
 8007f32:	e00f      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f34:	4b4b      	ldr	r3, [pc, #300]	; (8008064 <UART_SetConfig+0x4c4>)
 8007f36:	61bb      	str	r3, [r7, #24]
        break;
 8007f38:	e00c      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f3a:	f7fd fc93 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8007f3e:	61b8      	str	r0, [r7, #24]
        break;
 8007f40:	e008      	b.n	8007f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f46:	61bb      	str	r3, [r7, #24]
        break;
 8007f48:	e004      	b.n	8007f54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	77bb      	strb	r3, [r7, #30]
        break;
 8007f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d074      	beq.n	8008044 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	005a      	lsls	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b0f      	cmp	r3, #15
 8007f74:	d916      	bls.n	8007fa4 <UART_SetConfig+0x404>
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	d212      	bcs.n	8007fa4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f023 030f 	bic.w	r3, r3, #15
 8007f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	89fa      	ldrh	r2, [r7, #14]
 8007fa0:	60da      	str	r2, [r3, #12]
 8007fa2:	e04f      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	77bb      	strb	r3, [r7, #30]
 8007fa8:	e04c      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007faa:	7ffb      	ldrb	r3, [r7, #31]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d828      	bhi.n	8008002 <UART_SetConfig+0x462>
 8007fb0:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <UART_SetConfig+0x418>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	08008003 	.word	0x08008003
 8007fc8:	08007ff3 	.word	0x08007ff3
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	08008003 	.word	0x08008003
 8007fd4:	08008003 	.word	0x08008003
 8007fd8:	08007ffb 	.word	0x08007ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fdc:	f7fd fd54 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 8007fe0:	61b8      	str	r0, [r7, #24]
        break;
 8007fe2:	e013      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe4:	f7fd fd64 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8007fe8:	61b8      	str	r0, [r7, #24]
        break;
 8007fea:	e00f      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fec:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <UART_SetConfig+0x4c4>)
 8007fee:	61bb      	str	r3, [r7, #24]
        break;
 8007ff0:	e00c      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7fd fc37 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8007ff6:	61b8      	str	r0, [r7, #24]
        break;
 8007ff8:	e008      	b.n	800800c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ffe:	61bb      	str	r3, [r7, #24]
        break;
 8008000:	e004      	b.n	800800c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	77bb      	strb	r3, [r7, #30]
        break;
 800800a:	bf00      	nop
    }

    if (pclk != 0U)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d018      	beq.n	8008044 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	085a      	lsrs	r2, r3, #1
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	441a      	add	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	fbb2 f3f3 	udiv	r3, r2, r3
 8008024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b0f      	cmp	r3, #15
 800802a:	d909      	bls.n	8008040 <UART_SetConfig+0x4a0>
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008032:	d205      	bcs.n	8008040 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e001      	b.n	8008044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008050:	7fbb      	ldrb	r3, [r7, #30]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40007c00 	.word	0x40007c00
 8008060:	40023800 	.word	0x40023800
 8008064:	00f42400 	.word	0x00f42400

08008068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01a      	beq.n	800817e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008166:	d10a      	bne.n	800817e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081bc:	f7fb ff88 	bl	80040d0 <HAL_GetTick>
 80081c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d10e      	bne.n	80081ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f831 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e027      	b.n	800823e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d10e      	bne.n	800821a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f81b 	bl	8008246 <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e011      	b.n	800823e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b09c      	sub	sp, #112	; 0x70
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	e0a7      	b.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	f000 80a3 	beq.w	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008262:	f7fb ff35 	bl	80040d0 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800826e:	429a      	cmp	r2, r3
 8008270:	d302      	bcc.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
 8008272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008274:	2b00      	cmp	r3, #0
 8008276:	d13f      	bne.n	80082f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800828c:	667b      	str	r3, [r7, #100]	; 0x64
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008298:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800829c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	663b      	str	r3, [r7, #96]	; 0x60
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80082cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e068      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d050      	beq.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008314:	d148      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833e:	637b      	str	r3, [r7, #52]	; 0x34
 8008340:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	66bb      	str	r3, [r7, #104]	; 0x68
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008372:	623a      	str	r2, [r7, #32]
 8008374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	69f9      	ldr	r1, [r7, #28]
 8008378:	6a3a      	ldr	r2, [r7, #32]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e010      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69da      	ldr	r2, [r3, #28]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4013      	ands	r3, r2
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	f43f af48 	beq.w	8008258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3770      	adds	r7, #112	; 0x70
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b095      	sub	sp, #84	; 0x54
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
 80083fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3308      	adds	r3, #8
 8008412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	61fb      	str	r3, [r7, #28]
   return(result);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	64bb      	str	r3, [r7, #72]	; 0x48
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	2b01      	cmp	r3, #1
 8008446:	d118      	bne.n	800847a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	647b      	str	r3, [r7, #68]	; 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800848e:	bf00      	nop
 8008490:	3754      	adds	r7, #84	; 0x54
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fb51 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60bb      	str	r3, [r7, #8]
   return(result);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6979      	ldr	r1, [r7, #20]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	613b      	str	r3, [r7, #16]
   return(result);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fb1d 	bl	8007b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008512:	bf00      	nop
 8008514:	3720      	adds	r7, #32
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	2101      	movs	r1, #1
 800852a:	484a      	ldr	r0, [pc, #296]	; (8008654 <network_configure_activations+0x138>)
 800852c:	f000 fa7c 	bl	8008a28 <ai_platform_get_activations_map>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 8084 	beq.w	8008640 <network_configure_activations+0x124>
    /* Updating activations (byte) offsets */
    
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 8008538:	4b46      	ldr	r3, [pc, #280]	; (8008654 <network_configure_activations+0x138>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008540:	4a45      	ldr	r2, [pc, #276]	; (8008658 <network_configure_activations+0x13c>)
 8008542:	6093      	str	r3, [r2, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 8008544:	4b43      	ldr	r3, [pc, #268]	; (8008654 <network_configure_activations+0x138>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800854c:	4a42      	ldr	r2, [pc, #264]	; (8008658 <network_configure_activations+0x13c>)
 800854e:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 572);
 8008550:	4b40      	ldr	r3, [pc, #256]	; (8008654 <network_configure_activations+0x138>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008558:	4a40      	ldr	r2, [pc, #256]	; (800865c <network_configure_activations+0x140>)
 800855a:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 572);
 800855c:	4b3d      	ldr	r3, [pc, #244]	; (8008654 <network_configure_activations+0x138>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008564:	4a3d      	ldr	r2, [pc, #244]	; (800865c <network_configure_activations+0x140>)
 8008566:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8008568:	4b3a      	ldr	r3, [pc, #232]	; (8008654 <network_configure_activations+0x138>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	4a3c      	ldr	r2, [pc, #240]	; (8008660 <network_configure_activations+0x144>)
 8008570:	6093      	str	r3, [r2, #8]
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8008572:	4b38      	ldr	r3, [pc, #224]	; (8008654 <network_configure_activations+0x138>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	4a39      	ldr	r2, [pc, #228]	; (8008660 <network_configure_activations+0x144>)
 800857a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 19772);
 800857c:	4b35      	ldr	r3, [pc, #212]	; (8008654 <network_configure_activations+0x138>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	f644 533c 	movw	r3, #19772	; 0x4d3c
 8008584:	4413      	add	r3, r2
 8008586:	4a37      	ldr	r2, [pc, #220]	; (8008664 <network_configure_activations+0x148>)
 8008588:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 19772);
 800858a:	4b32      	ldr	r3, [pc, #200]	; (8008654 <network_configure_activations+0x138>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	f644 533c 	movw	r3, #19772	; 0x4d3c
 8008592:	4413      	add	r3, r2
 8008594:	4a33      	ldr	r2, [pc, #204]	; (8008664 <network_configure_activations+0x148>)
 8008596:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 8008598:	4b2e      	ldr	r3, [pc, #184]	; (8008654 <network_configure_activations+0x138>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f644 6340 	movw	r3, #20032	; 0x4e40
 80085a0:	4413      	add	r3, r2
 80085a2:	4a31      	ldr	r2, [pc, #196]	; (8008668 <network_configure_activations+0x14c>)
 80085a4:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 80085a6:	4b2b      	ldr	r3, [pc, #172]	; (8008654 <network_configure_activations+0x138>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	f644 6340 	movw	r3, #20032	; 0x4e40
 80085ae:	4413      	add	r3, r2
 80085b0:	4a2d      	ldr	r2, [pc, #180]	; (8008668 <network_configure_activations+0x14c>)
 80085b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch2_array.data = AI_PTR(g_network_activations_map[0] + 20032);
 80085b4:	4b27      	ldr	r3, [pc, #156]	; (8008654 <network_configure_activations+0x138>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	f644 6340 	movw	r3, #20032	; 0x4e40
 80085bc:	4413      	add	r3, r2
 80085be:	4a2b      	ldr	r2, [pc, #172]	; (800866c <network_configure_activations+0x150>)
 80085c0:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch2_array.data_start = AI_PTR(g_network_activations_map[0] + 20032);
 80085c2:	4b24      	ldr	r3, [pc, #144]	; (8008654 <network_configure_activations+0x138>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	f644 6340 	movw	r3, #20032	; 0x4e40
 80085ca:	4413      	add	r3, r2
 80085cc:	4a27      	ldr	r2, [pc, #156]	; (800866c <network_configure_activations+0x150>)
 80085ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80085d0:	4b20      	ldr	r3, [pc, #128]	; (8008654 <network_configure_activations+0x138>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a26      	ldr	r2, [pc, #152]	; (8008670 <network_configure_activations+0x154>)
 80085d6:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80085d8:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <network_configure_activations+0x138>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a24      	ldr	r2, [pc, #144]	; (8008670 <network_configure_activations+0x154>)
 80085de:	60d3      	str	r3, [r2, #12]
    
    dense_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 8);
 80085e0:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <network_configure_activations+0x138>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	4a23      	ldr	r2, [pc, #140]	; (8008674 <network_configure_activations+0x158>)
 80085e8:	6093      	str	r3, [r2, #8]
    dense_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80085ea:	4b1a      	ldr	r3, [pc, #104]	; (8008654 <network_configure_activations+0x138>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	4a20      	ldr	r2, [pc, #128]	; (8008674 <network_configure_activations+0x158>)
 80085f2:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 80085f4:	4b17      	ldr	r3, [pc, #92]	; (8008654 <network_configure_activations+0x138>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4a1f      	ldr	r2, [pc, #124]	; (8008678 <network_configure_activations+0x15c>)
 80085fc:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <network_configure_activations+0x138>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3318      	adds	r3, #24
 8008604:	4a1c      	ldr	r2, [pc, #112]	; (8008678 <network_configure_activations+0x15c>)
 8008606:	60d3      	str	r3, [r2, #12]
    
    dense_3_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008608:	4b12      	ldr	r3, [pc, #72]	; (8008654 <network_configure_activations+0x138>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1b      	ldr	r2, [pc, #108]	; (800867c <network_configure_activations+0x160>)
 800860e:	6093      	str	r3, [r2, #8]
    dense_3_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008610:	4b10      	ldr	r3, [pc, #64]	; (8008654 <network_configure_activations+0x138>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a19      	ldr	r2, [pc, #100]	; (800867c <network_configure_activations+0x160>)
 8008616:	60d3      	str	r3, [r2, #12]
    
    nl_4_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8008618:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <network_configure_activations+0x138>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	4a18      	ldr	r2, [pc, #96]	; (8008680 <network_configure_activations+0x164>)
 8008620:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <network_configure_activations+0x138>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	4a15      	ldr	r2, [pc, #84]	; (8008680 <network_configure_activations+0x164>)
 800862a:	60d3      	str	r3, [r2, #12]
    
    nl_4_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <network_configure_activations+0x138>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a14      	ldr	r2, [pc, #80]	; (8008684 <network_configure_activations+0x168>)
 8008632:	6093      	str	r3, [r2, #8]
    nl_4_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <network_configure_activations+0x138>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a12      	ldr	r2, [pc, #72]	; (8008684 <network_configure_activations+0x168>)
 800863a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800863c:	2301      	movs	r3, #1
 800863e:	e005      	b.n	800864c <network_configure_activations+0x130>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008640:	2213      	movs	r2, #19
 8008642:	2130      	movs	r1, #48	; 0x30
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa47 	bl	8008ad8 <ai_platform_network_set_error>
  return false;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20001368 	.word	0x20001368
 8008658:	200004cc 	.word	0x200004cc
 800865c:	200004dc 	.word	0x200004dc
 8008660:	200004ec 	.word	0x200004ec
 8008664:	2000058c 	.word	0x2000058c
 8008668:	2000059c 	.word	0x2000059c
 800866c:	200005ac 	.word	0x200005ac
 8008670:	200004fc 	.word	0x200004fc
 8008674:	200005bc 	.word	0x200005bc
 8008678:	2000050c 	.word	0x2000050c
 800867c:	2000051c 	.word	0x2000051c
 8008680:	2000052c 	.word	0x2000052c
 8008684:	2000053c 	.word	0x2000053c

08008688 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	2101      	movs	r1, #1
 8008696:	4828      	ldr	r0, [pc, #160]	; (8008738 <network_configure_weights+0xb0>)
 8008698:	f000 f96e 	bl	8008978 <ai_platform_get_weights_map>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d03f      	beq.n	8008722 <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80086a2:	4b26      	ldr	r3, [pc, #152]	; (800873c <network_configure_weights+0xb4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086aa:	4a24      	ldr	r2, [pc, #144]	; (800873c <network_configure_weights+0xb4>)
 80086ac:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80086ae:	4b22      	ldr	r3, [pc, #136]	; (8008738 <network_configure_weights+0xb0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a22      	ldr	r2, [pc, #136]	; (800873c <network_configure_weights+0xb4>)
 80086b4:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80086b6:	4b20      	ldr	r3, [pc, #128]	; (8008738 <network_configure_weights+0xb0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a20      	ldr	r2, [pc, #128]	; (800873c <network_configure_weights+0xb4>)
 80086bc:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80086be:	4b20      	ldr	r3, [pc, #128]	; (8008740 <network_configure_weights+0xb8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c6:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <network_configure_weights+0xb8>)
 80086c8:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 72);
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <network_configure_weights+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3348      	adds	r3, #72	; 0x48
 80086d0:	4a1b      	ldr	r2, [pc, #108]	; (8008740 <network_configure_weights+0xb8>)
 80086d2:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 72);
 80086d4:	4b18      	ldr	r3, [pc, #96]	; (8008738 <network_configure_weights+0xb0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3348      	adds	r3, #72	; 0x48
 80086da:	4a19      	ldr	r2, [pc, #100]	; (8008740 <network_configure_weights+0xb8>)
 80086dc:	60d3      	str	r3, [r2, #12]
    
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <network_configure_weights+0xbc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e6:	4a17      	ldr	r2, [pc, #92]	; (8008744 <network_configure_weights+0xbc>)
 80086e8:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 104);
 80086ea:	4b13      	ldr	r3, [pc, #76]	; (8008738 <network_configure_weights+0xb0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3368      	adds	r3, #104	; 0x68
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <network_configure_weights+0xbc>)
 80086f2:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 104);
 80086f4:	4b10      	ldr	r3, [pc, #64]	; (8008738 <network_configure_weights+0xb0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3368      	adds	r3, #104	; 0x68
 80086fa:	4a12      	ldr	r2, [pc, #72]	; (8008744 <network_configure_weights+0xbc>)
 80086fc:	60d3      	str	r3, [r2, #12]
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80086fe:	4b12      	ldr	r3, [pc, #72]	; (8008748 <network_configure_weights+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008706:	4a10      	ldr	r2, [pc, #64]	; (8008748 <network_configure_weights+0xc0>)
 8008708:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <network_configure_weights+0xb0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3378      	adds	r3, #120	; 0x78
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <network_configure_weights+0xc0>)
 8008712:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8008714:	4b08      	ldr	r3, [pc, #32]	; (8008738 <network_configure_weights+0xb0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3378      	adds	r3, #120	; 0x78
 800871a:	4a0b      	ldr	r2, [pc, #44]	; (8008748 <network_configure_weights+0xc0>)
 800871c:	60d3      	str	r3, [r2, #12]
    
    return true;
 800871e:	2301      	movs	r3, #1
 8008720:	e005      	b.n	800872e <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008722:	2212      	movs	r2, #18
 8008724:	2130      	movs	r1, #48	; 0x30
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9d6 	bl	8008ad8 <ai_platform_network_set_error>
  return false;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000136c 	.word	0x2000136c
 800873c:	2000054c 	.word	0x2000054c
 8008740:	2000055c 	.word	0x2000055c
 8008744:	2000056c 	.word	0x2000056c
 8008748:	2000057c 	.word	0x2000057c

0800874c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af02      	add	r7, sp, #8
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008756:	2300      	movs	r3, #0
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	2305      	movs	r3, #5
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2301      	movs	r3, #1
 8008760:	4a04      	ldr	r2, [pc, #16]	; (8008774 <ai_network_create+0x28>)
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9bd 	bl	8008ae4 <ai_platform_network_create>
 800876a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000cfc 	.word	0x20000cfc

08008778 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb61 	bl	8008e4c <ai_platform_network_init>
 800878a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <ai_network_init+0x1e>
 8008792:	2300      	movs	r3, #0
 8008794:	e028      	b.n	80087e8 <ai_network_init+0x70>

  ai_bool ok = true;
 8008796:	2301      	movs	r3, #1
 8008798:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff ff73 	bl	8008688 <network_configure_weights>
 80087a2:	4603      	mov	r3, r0
 80087a4:	461a      	mov	r2, r3
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff feb0 	bl	800851c <network_configure_activations>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fcb8 	bl	8009144 <ai_platform_network_post_init>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bf14      	ite	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	2300      	moveq	r3, #0
 80087e4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80087e6:	7afb      	ldrb	r3, [r7, #11]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fdab 	bl	800935c <ai_platform_network_process>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8008810:	b4b0      	push	{r4, r5, r7}
 8008812:	b08f      	sub	sp, #60	; 0x3c
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800881a:	4b15      	ldr	r3, [pc, #84]	; (8008870 <ai_network_data_activations_buffer_get+0x60>)
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	623b      	str	r3, [r7, #32]
 8008822:	2300      	movs	r3, #0
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
 8008826:	2300      	movs	r3, #0
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
 800882a:	f24e 4340 	movw	r3, #58432	; 0xe440
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2204      	movs	r2, #4
 800883a:	f362 231f 	bfi	r3, r2, #8, #24
 800883e:	633b      	str	r3, [r7, #48]	; 0x30
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <ai_network_data_activations_buffer_get+0x64>)
 8008842:	f107 040c 	add.w	r4, r7, #12
 8008846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	461d      	mov	r5, r3
 8008856:	f107 041c 	add.w	r4, r7, #28
 800885a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800885c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800885e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008862:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	373c      	adds	r7, #60	; 0x3c
 800886a:	46bd      	mov	sp, r7
 800886c:	bcb0      	pop	{r4, r5, r7}
 800886e:	4770      	bx	lr
 8008870:	00040440 	.word	0x00040440
 8008874:	080173e4 	.word	0x080173e4

08008878 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8008878:	b4b0      	push	{r4, r5, r7}
 800887a:	b08f      	sub	sp, #60	; 0x3c
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <ai_network_data_weights_buffer_get+0x60>)
 8008884:	61fb      	str	r3, [r7, #28]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
 800888e:	2300      	movs	r3, #0
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
 8008892:	2380      	movs	r3, #128	; 0x80
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	2204      	movs	r2, #4
 80088a0:	f362 231f 	bfi	r3, r2, #8, #24
 80088a4:	633b      	str	r3, [r7, #48]	; 0x30
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <ai_network_data_weights_buffer_get+0x64>)
 80088a8:	f107 040c 	add.w	r4, r7, #12
 80088ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80088ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80088b2:	f107 030c 	add.w	r3, r7, #12
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	461d      	mov	r5, r3
 80088bc:	f107 041c 	add.w	r4, r7, #28
 80088c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80088c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	373c      	adds	r7, #60	; 0x3c
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bcb0      	pop	{r4, r5, r7}
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40040440 	.word	0x40040440
 80088dc:	080173f4 	.word	0x080173f4

080088e0 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <ai_network_data_weights_get+0x10>)

}
 80088e6:	4618      	mov	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000da0 	.word	0x20000da0

080088f4 <ai_buffer_get_size>:
 80088f4:	b368      	cbz	r0, 8008952 <ai_buffer_get_size+0x5e>
 80088f6:	4b17      	ldr	r3, [pc, #92]	; (8008954 <ai_buffer_get_size+0x60>)
 80088f8:	4a17      	ldr	r2, [pc, #92]	; (8008958 <ai_buffer_get_size+0x64>)
 80088fa:	b410      	push	{r4}
 80088fc:	6804      	ldr	r4, [r0, #0]
 80088fe:	4023      	ands	r3, r4
 8008900:	4293      	cmp	r3, r2
 8008902:	d123      	bne.n	800894c <ai_buffer_get_size+0x58>
 8008904:	b311      	cbz	r1, 800894c <ai_buffer_get_size+0x58>
 8008906:	6984      	ldr	r4, [r0, #24]
 8008908:	6862      	ldr	r2, [r4, #4]
 800890a:	321f      	adds	r2, #31
 800890c:	f022 021f 	bic.w	r2, r2, #31
 8008910:	7d03      	ldrb	r3, [r0, #20]
 8008912:	6941      	ldr	r1, [r0, #20]
 8008914:	f1a3 0301 	sub.w	r3, r3, #1
 8008918:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800891c:	fab3 f383 	clz	r3, r3
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008926:	da0c      	bge.n	8008942 <ai_buffer_get_size+0x4e>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d103      	bne.n	8008934 <ai_buffer_get_size+0x40>
 800892c:	2802      	cmp	r0, #2
 800892e:	f04f 0302 	mov.w	r3, #2
 8008932:	d006      	beq.n	8008942 <ai_buffer_get_size+0x4e>
 8008934:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008938:	3301      	adds	r3, #1
 800893a:	4298      	cmp	r0, r3
 800893c:	fb01 f202 	mul.w	r2, r1, r2
 8008940:	d1f2      	bne.n	8008928 <ai_buffer_get_size+0x34>
 8008942:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	6984      	ldr	r4, [r0, #24]
 800894e:	6862      	ldr	r2, [r4, #4]
 8008950:	e7de      	b.n	8008910 <ai_buffer_get_size+0x1c>
 8008952:	4770      	bx	lr
 8008954:	017fffff 	.word	0x017fffff
 8008958:	000400c0 	.word	0x000400c0

0800895c <ai_buffer_array_sane>:
 800895c:	b138      	cbz	r0, 800896e <ai_buffer_array_sane+0x12>
 800895e:	6843      	ldr	r3, [r0, #4]
 8008960:	b123      	cbz	r3, 800896c <ai_buffer_array_sane+0x10>
 8008962:	8840      	ldrh	r0, [r0, #2]
 8008964:	3800      	subs	r0, #0
 8008966:	bf18      	it	ne
 8008968:	2001      	movne	r0, #1
 800896a:	4770      	bx	lr
 800896c:	4618      	mov	r0, r3
 800896e:	4770      	bx	lr

08008970 <_ai_platform_acquire_crc>:
 8008970:	2001      	movs	r0, #1
 8008972:	4770      	bx	lr

08008974 <_ai_platform_release_crc>:
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <ai_platform_get_weights_map>:
 8008978:	2900      	cmp	r1, #0
 800897a:	bf18      	it	ne
 800897c:	2800      	cmpne	r0, #0
 800897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008980:	bf0c      	ite	eq
 8008982:	2401      	moveq	r4, #1
 8008984:	2400      	movne	r4, #0
 8008986:	2a00      	cmp	r2, #0
 8008988:	bf08      	it	eq
 800898a:	f044 0401 	orreq.w	r4, r4, #1
 800898e:	b114      	cbz	r4, 8008996 <ai_platform_get_weights_map+0x1e>
 8008990:	2400      	movs	r4, #0
 8008992:	4620      	mov	r0, r4
 8008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008996:	4616      	mov	r6, r2
 8008998:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <ai_platform_get_weights_map+0xac>)
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	4605      	mov	r5, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d022      	beq.n	80089ea <ai_platform_get_weights_map+0x72>
 80089a4:	6870      	ldr	r0, [r6, #4]
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d0f2      	beq.n	8008990 <ai_platform_get_weights_map+0x18>
 80089aa:	6806      	ldr	r6, [r0, #0]
 80089ac:	429e      	cmp	r6, r3
 80089ae:	d006      	beq.n	80089be <ai_platform_get_weights_map+0x46>
 80089b0:	f1a1 0401 	sub.w	r4, r1, #1
 80089b4:	6028      	str	r0, [r5, #0]
 80089b6:	fab4 f484 	clz	r4, r4
 80089ba:	0964      	lsrs	r4, r4, #5
 80089bc:	e7e9      	b.n	8008992 <ai_platform_get_weights_map+0x1a>
 80089be:	3d04      	subs	r5, #4
 80089c0:	4602      	mov	r2, r0
 80089c2:	4621      	mov	r1, r4
 80089c4:	e000      	b.n	80089c8 <ai_platform_get_weights_map+0x50>
 80089c6:	4619      	mov	r1, r3
 80089c8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80089cc:	42b3      	cmp	r3, r6
 80089ce:	d025      	beq.n	8008a1c <ai_platform_get_weights_map+0xa4>
 80089d0:	f845 3f04 	str.w	r3, [r5, #4]!
 80089d4:	1c4b      	adds	r3, r1, #1
 80089d6:	429f      	cmp	r7, r3
 80089d8:	d8f5      	bhi.n	80089c6 <ai_platform_get_weights_map+0x4e>
 80089da:	d1da      	bne.n	8008992 <ai_platform_get_weights_map+0x1a>
 80089dc:	3102      	adds	r1, #2
 80089de:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80089e2:	42b3      	cmp	r3, r6
 80089e4:	d1d5      	bne.n	8008992 <ai_platform_get_weights_map+0x1a>
 80089e6:	2401      	movs	r4, #1
 80089e8:	e7d3      	b.n	8008992 <ai_platform_get_weights_map+0x1a>
 80089ea:	1d30      	adds	r0, r6, #4
 80089ec:	f7ff ffb6 	bl	800895c <ai_buffer_array_sane>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0cd      	beq.n	8008990 <ai_platform_get_weights_map+0x18>
 80089f4:	88f3      	ldrh	r3, [r6, #6]
 80089f6:	429f      	cmp	r7, r3
 80089f8:	d1ca      	bne.n	8008990 <ai_platform_get_weights_map+0x18>
 80089fa:	3d04      	subs	r5, #4
 80089fc:	4622      	mov	r2, r4
 80089fe:	68b3      	ldr	r3, [r6, #8]
 8008a00:	4423      	add	r3, r4
 8008a02:	341c      	adds	r4, #28
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b123      	cbz	r3, 8008a12 <ai_platform_get_weights_map+0x9a>
 8008a08:	3201      	adds	r2, #1
 8008a0a:	f845 3f04 	str.w	r3, [r5, #4]!
 8008a0e:	4297      	cmp	r7, r2
 8008a10:	d8f5      	bhi.n	80089fe <ai_platform_get_weights_map+0x86>
 8008a12:	1abc      	subs	r4, r7, r2
 8008a14:	fab4 f484 	clz	r4, r4
 8008a18:	0964      	lsrs	r4, r4, #5
 8008a1a:	e7ba      	b.n	8008992 <ai_platform_get_weights_map+0x1a>
 8008a1c:	428f      	cmp	r7, r1
 8008a1e:	d1b8      	bne.n	8008992 <ai_platform_get_weights_map+0x1a>
 8008a20:	e7e1      	b.n	80089e6 <ai_platform_get_weights_map+0x6e>
 8008a22:	bf00      	nop
 8008a24:	a1facade 	.word	0xa1facade

08008a28 <ai_platform_get_activations_map>:
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2800      	cmpne	r0, #0
 8008a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a30:	bf0c      	ite	eq
 8008a32:	2401      	moveq	r4, #1
 8008a34:	2400      	movne	r4, #0
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	bf08      	it	eq
 8008a3a:	f044 0401 	orreq.w	r4, r4, #1
 8008a3e:	b114      	cbz	r4, 8008a46 <ai_platform_get_activations_map+0x1e>
 8008a40:	2400      	movs	r4, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a46:	4616      	mov	r6, r2
 8008a48:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <ai_platform_get_activations_map+0xac>)
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d022      	beq.n	8008a9a <ai_platform_get_activations_map+0x72>
 8008a54:	6a30      	ldr	r0, [r6, #32]
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0f2      	beq.n	8008a40 <ai_platform_get_activations_map+0x18>
 8008a5a:	6806      	ldr	r6, [r0, #0]
 8008a5c:	429e      	cmp	r6, r3
 8008a5e:	d006      	beq.n	8008a6e <ai_platform_get_activations_map+0x46>
 8008a60:	f1a1 0401 	sub.w	r4, r1, #1
 8008a64:	6028      	str	r0, [r5, #0]
 8008a66:	fab4 f484 	clz	r4, r4
 8008a6a:	0964      	lsrs	r4, r4, #5
 8008a6c:	e7e9      	b.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008a6e:	3d04      	subs	r5, #4
 8008a70:	4602      	mov	r2, r0
 8008a72:	4621      	mov	r1, r4
 8008a74:	e000      	b.n	8008a78 <ai_platform_get_activations_map+0x50>
 8008a76:	4619      	mov	r1, r3
 8008a78:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8008a7c:	42b3      	cmp	r3, r6
 8008a7e:	d026      	beq.n	8008ace <ai_platform_get_activations_map+0xa6>
 8008a80:	f845 3f04 	str.w	r3, [r5, #4]!
 8008a84:	1c4b      	adds	r3, r1, #1
 8008a86:	429f      	cmp	r7, r3
 8008a88:	d8f5      	bhi.n	8008a76 <ai_platform_get_activations_map+0x4e>
 8008a8a:	d1da      	bne.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008a8c:	3102      	adds	r1, #2
 8008a8e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008a92:	42b3      	cmp	r3, r6
 8008a94:	d1d5      	bne.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008a96:	2401      	movs	r4, #1
 8008a98:	e7d3      	b.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008a9a:	f106 000c 	add.w	r0, r6, #12
 8008a9e:	f7ff ff5d 	bl	800895c <ai_buffer_array_sane>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0cc      	beq.n	8008a40 <ai_platform_get_activations_map+0x18>
 8008aa6:	89f3      	ldrh	r3, [r6, #14]
 8008aa8:	429f      	cmp	r7, r3
 8008aaa:	d1c9      	bne.n	8008a40 <ai_platform_get_activations_map+0x18>
 8008aac:	3d04      	subs	r5, #4
 8008aae:	4622      	mov	r2, r4
 8008ab0:	6933      	ldr	r3, [r6, #16]
 8008ab2:	4423      	add	r3, r4
 8008ab4:	341c      	adds	r4, #28
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	b123      	cbz	r3, 8008ac4 <ai_platform_get_activations_map+0x9c>
 8008aba:	3201      	adds	r2, #1
 8008abc:	f845 3f04 	str.w	r3, [r5, #4]!
 8008ac0:	4297      	cmp	r7, r2
 8008ac2:	d8f5      	bhi.n	8008ab0 <ai_platform_get_activations_map+0x88>
 8008ac4:	1abc      	subs	r4, r7, r2
 8008ac6:	fab4 f484 	clz	r4, r4
 8008aca:	0964      	lsrs	r4, r4, #5
 8008acc:	e7b9      	b.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008ace:	428f      	cmp	r7, r1
 8008ad0:	d1b7      	bne.n	8008a42 <ai_platform_get_activations_map+0x1a>
 8008ad2:	e7e0      	b.n	8008a96 <ai_platform_get_activations_map+0x6e>
 8008ad4:	a1facade 	.word	0xa1facade

08008ad8 <ai_platform_network_set_error>:
 8008ad8:	b110      	cbz	r0, 8008ae0 <ai_platform_network_set_error+0x8>
 8008ada:	3010      	adds	r0, #16
 8008adc:	f001 b978 	b.w	8009dd0 <core_set_error>
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop

08008ae4 <ai_platform_network_create>:
 8008ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	4604      	mov	r4, r0
 8008aec:	4615      	mov	r5, r2
 8008aee:	461e      	mov	r6, r3
 8008af0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8008af4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8008af8:	f7ff ff3a 	bl	8008970 <_ai_platform_acquire_crc>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f000 80ba 	beq.w	8008c76 <ai_platform_network_create+0x192>
 8008b02:	4bb3      	ldr	r3, [pc, #716]	; (8008dd0 <ai_platform_network_create+0x2ec>)
 8008b04:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8008b08:	4601      	mov	r1, r0
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b10:	eb03 020c 	add.w	r2, r3, ip
 8008b14:	2a01      	cmp	r2, #1
 8008b16:	f240 80a5 	bls.w	8008c64 <ai_platform_network_create+0x180>
 8008b1a:	f240 4249 	movw	r2, #1097	; 0x449
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	f000 80a0 	beq.w	8008c64 <ai_platform_network_create+0x180>
 8008b24:	4aab      	ldr	r2, [pc, #684]	; (8008dd4 <ai_platform_network_create+0x2f0>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008b30:	f000 80b7 	beq.w	8008ca2 <ai_platform_network_create+0x1be>
 8008b34:	6813      	ldr	r3, [r2, #0]
 8008b36:	f240 4c83 	movw	ip, #1155	; 0x483
 8008b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b3e:	4563      	cmp	r3, ip
 8008b40:	f000 809f 	beq.w	8008c82 <ai_platform_network_create+0x19e>
 8008b44:	6813      	ldr	r3, [r2, #0]
 8008b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b4a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008b4e:	f040 8090 	bne.w	8008c72 <ai_platform_network_create+0x18e>
 8008b52:	4ba1      	ldr	r3, [pc, #644]	; (8008dd8 <ai_platform_network_create+0x2f4>)
 8008b54:	2218      	movs	r2, #24
 8008b56:	609a      	str	r2, [r3, #8]
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	2a18      	cmp	r2, #24
 8008b5c:	f040 8089 	bne.w	8008c72 <ai_platform_network_create+0x18e>
 8008b60:	2201      	movs	r2, #1
 8008b62:	609a      	str	r2, [r3, #8]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	d1fc      	bne.n	8008b64 <ai_platform_network_create+0x80>
 8008b6a:	4608      	mov	r0, r1
 8008b6c:	f7ff ff02 	bl	8008974 <_ai_platform_release_crc>
 8008b70:	4a9a      	ldr	r2, [pc, #616]	; (8008ddc <ai_platform_network_create+0x2f8>)
 8008b72:	6813      	ldr	r3, [r2, #0]
 8008b74:	f023 0301 	bic.w	r3, r3, #1
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	f7ff fef9 	bl	8008970 <_ai_platform_acquire_crc>
 8008b7e:	4b94      	ldr	r3, [pc, #592]	; (8008dd0 <ai_platform_network_create+0x2ec>)
 8008b80:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b8a:	189a      	adds	r2, r3, r2
 8008b8c:	2a01      	cmp	r2, #1
 8008b8e:	f240 809e 	bls.w	8008cce <ai_platform_network_create+0x1ea>
 8008b92:	f240 4249 	movw	r2, #1097	; 0x449
 8008b96:	4293      	cmp	r3, r2
 8008b98:	f000 8099 	beq.w	8008cce <ai_platform_network_create+0x1ea>
 8008b9c:	4a8d      	ldr	r2, [pc, #564]	; (8008dd4 <ai_platform_network_create+0x2f0>)
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ba4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008ba8:	f000 809f 	beq.w	8008cea <ai_platform_network_create+0x206>
 8008bac:	6813      	ldr	r3, [r2, #0]
 8008bae:	f240 4183 	movw	r1, #1155	; 0x483
 8008bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bb6:	428b      	cmp	r3, r1
 8008bb8:	f000 80c0 	beq.w	8008d3c <ai_platform_network_create+0x258>
 8008bbc:	6813      	ldr	r3, [r2, #0]
 8008bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bc2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008bc6:	f000 80d9 	beq.w	8008d7c <ai_platform_network_create+0x298>
 8008bca:	f7ff fed3 	bl	8008974 <_ai_platform_release_crc>
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	f000 80b1 	beq.w	8008d36 <ai_platform_network_create+0x252>
 8008bd4:	4b82      	ldr	r3, [pc, #520]	; (8008de0 <ai_platform_network_create+0x2fc>)
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	6025      	str	r5, [r4, #0]
 8008bda:	f001 f8f7 	bl	8009dcc <core_init>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f000 8095 	beq.w	8008d0e <ai_platform_network_create+0x22a>
 8008be4:	4a7d      	ldr	r2, [pc, #500]	; (8008ddc <ai_platform_network_create+0x2f8>)
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	f7ff febf 	bl	8008970 <_ai_platform_acquire_crc>
 8008bf2:	4b77      	ldr	r3, [pc, #476]	; (8008dd0 <ai_platform_network_create+0x2ec>)
 8008bf4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bfe:	185a      	adds	r2, r3, r1
 8008c00:	2a01      	cmp	r2, #1
 8008c02:	f240 80ad 	bls.w	8008d60 <ai_platform_network_create+0x27c>
 8008c06:	f240 4249 	movw	r2, #1097	; 0x449
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f000 80a8 	beq.w	8008d60 <ai_platform_network_create+0x27c>
 8008c10:	4a70      	ldr	r2, [pc, #448]	; (8008dd4 <ai_platform_network_create+0x2f0>)
 8008c12:	6813      	ldr	r3, [r2, #0]
 8008c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c18:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008c1c:	f000 80bc 	beq.w	8008d98 <ai_platform_network_create+0x2b4>
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	f240 4183 	movw	r1, #1155	; 0x483
 8008c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c2a:	428b      	cmp	r3, r1
 8008c2c:	f000 80e2 	beq.w	8008df4 <ai_platform_network_create+0x310>
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c36:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008c3a:	f000 80ed 	beq.w	8008e18 <ai_platform_network_create+0x334>
 8008c3e:	f7ff fe99 	bl	8008974 <_ai_platform_release_crc>
 8008c42:	2200      	movs	r2, #0
 8008c44:	4639      	mov	r1, r7
 8008c46:	4630      	mov	r0, r6
 8008c48:	f00a faa4 	bl	8013194 <ai_version_get>
 8008c4c:	4681      	mov	r9, r0
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2105      	movs	r1, #5
 8008c52:	2001      	movs	r0, #1
 8008c54:	f00a fa9e 	bl	8013194 <ai_version_get>
 8008c58:	4581      	cmp	r9, r0
 8008c5a:	f000 80af 	beq.w	8008dbc <ai_platform_network_create+0x2d8>
 8008c5e:	f04f 0901 	mov.w	r9, #1
 8008c62:	e056      	b.n	8008d12 <ai_platform_network_create+0x22e>
 8008c64:	4b5c      	ldr	r3, [pc, #368]	; (8008dd8 <ai_platform_network_create+0x2f4>)
 8008c66:	2218      	movs	r2, #24
 8008c68:	609a      	str	r2, [r3, #8]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	2a18      	cmp	r2, #24
 8008c6e:	d028      	beq.n	8008cc2 <ai_platform_network_create+0x1de>
 8008c70:	4608      	mov	r0, r1
 8008c72:	f7ff fe7f 	bl	8008974 <_ai_platform_release_crc>
 8008c76:	f244 1333 	movw	r3, #16691	; 0x4133
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	b003      	add	sp, #12
 8008c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c82:	4a58      	ldr	r2, [pc, #352]	; (8008de4 <ai_platform_network_create+0x300>)
 8008c84:	2318      	movs	r3, #24
 8008c86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008c8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008c8e:	2b18      	cmp	r3, #24
 8008c90:	d1ef      	bne.n	8008c72 <ai_platform_network_create+0x18e>
 8008c92:	2301      	movs	r3, #1
 8008c94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008c98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1fb      	bne.n	8008c98 <ai_platform_network_create+0x1b4>
 8008ca0:	e763      	b.n	8008b6a <ai_platform_network_create+0x86>
 8008ca2:	4a50      	ldr	r2, [pc, #320]	; (8008de4 <ai_platform_network_create+0x300>)
 8008ca4:	2318      	movs	r3, #24
 8008ca6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008caa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008cae:	2b18      	cmp	r3, #24
 8008cb0:	d1df      	bne.n	8008c72 <ai_platform_network_create+0x18e>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008cb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1fb      	bne.n	8008cb8 <ai_platform_network_create+0x1d4>
 8008cc0:	e753      	b.n	8008b6a <ai_platform_network_create+0x86>
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	609a      	str	r2, [r3, #8]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	d1fc      	bne.n	8008cc6 <ai_platform_network_create+0x1e2>
 8008ccc:	e74d      	b.n	8008b6a <ai_platform_network_create+0x86>
 8008cce:	4a42      	ldr	r2, [pc, #264]	; (8008dd8 <ai_platform_network_create+0x2f4>)
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	6093      	str	r3, [r2, #8]
 8008cd4:	6891      	ldr	r1, [r2, #8]
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d1fc      	bne.n	8008cd4 <ai_platform_network_create+0x1f0>
 8008cda:	4b43      	ldr	r3, [pc, #268]	; (8008de8 <ai_platform_network_create+0x304>)
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	4b43      	ldr	r3, [pc, #268]	; (8008dec <ai_platform_network_create+0x308>)
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	f43f af71 	beq.w	8008bca <ai_platform_network_create+0xe6>
 8008ce8:	e7fe      	b.n	8008ce8 <ai_platform_network_create+0x204>
 8008cea:	4a3e      	ldr	r2, [pc, #248]	; (8008de4 <ai_platform_network_create+0x300>)
 8008cec:	2301      	movs	r3, #1
 8008cee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008cf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1fb      	bne.n	8008cf2 <ai_platform_network_create+0x20e>
 8008cfa:	4b3b      	ldr	r3, [pc, #236]	; (8008de8 <ai_platform_network_create+0x304>)
 8008cfc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008d00:	4b3a      	ldr	r3, [pc, #232]	; (8008dec <ai_platform_network_create+0x308>)
 8008d02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008d06:	429a      	cmp	r2, r3
 8008d08:	f43f af5f 	beq.w	8008bca <ai_platform_network_create+0xe6>
 8008d0c:	e7fe      	b.n	8008d0c <ai_platform_network_create+0x228>
 8008d0e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008d12:	2300      	movs	r3, #0
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2410      	movs	r4, #16
 8008d18:	4642      	mov	r2, r8
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f00a fa39 	bl	8013194 <ai_version_get>
 8008d22:	2300      	movs	r3, #0
 8008d24:	64a8      	str	r0, [r5, #72]	; 0x48
 8008d26:	f369 0307 	bfi	r3, r9, #0, #8
 8008d2a:	f364 231f 	bfi	r3, r4, #8, #24
 8008d2e:	4618      	mov	r0, r3
 8008d30:	b003      	add	sp, #12
 8008d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d36:	f241 0310 	movw	r3, #4112	; 0x1010
 8008d3a:	e79e      	b.n	8008c7a <ai_platform_network_create+0x196>
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <ai_platform_network_create+0x300>)
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008d44:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1fb      	bne.n	8008d44 <ai_platform_network_create+0x260>
 8008d4c:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <ai_platform_network_create+0x304>)
 8008d4e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008d52:	4b26      	ldr	r3, [pc, #152]	; (8008dec <ai_platform_network_create+0x308>)
 8008d54:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	f43f af36 	beq.w	8008bca <ai_platform_network_create+0xe6>
 8008d5e:	e7fe      	b.n	8008d5e <ai_platform_network_create+0x27a>
 8008d60:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <ai_platform_network_create+0x2f4>)
 8008d62:	2301      	movs	r3, #1
 8008d64:	6093      	str	r3, [r2, #8]
 8008d66:	6893      	ldr	r3, [r2, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1fc      	bne.n	8008d66 <ai_platform_network_create+0x282>
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <ai_platform_network_create+0x304>)
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <ai_platform_network_create+0x308>)
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	f43f af62 	beq.w	8008c3e <ai_platform_network_create+0x15a>
 8008d7a:	e7fe      	b.n	8008d7a <ai_platform_network_create+0x296>
 8008d7c:	4a16      	ldr	r2, [pc, #88]	; (8008dd8 <ai_platform_network_create+0x2f4>)
 8008d7e:	2301      	movs	r3, #1
 8008d80:	6093      	str	r3, [r2, #8]
 8008d82:	6893      	ldr	r3, [r2, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1fc      	bne.n	8008d82 <ai_platform_network_create+0x29e>
 8008d88:	4b17      	ldr	r3, [pc, #92]	; (8008de8 <ai_platform_network_create+0x304>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	4b17      	ldr	r3, [pc, #92]	; (8008dec <ai_platform_network_create+0x308>)
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	f43f af1a 	beq.w	8008bca <ai_platform_network_create+0xe6>
 8008d96:	e7fe      	b.n	8008d96 <ai_platform_network_create+0x2b2>
 8008d98:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <ai_platform_network_create+0x300>)
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008da0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1fb      	bne.n	8008da0 <ai_platform_network_create+0x2bc>
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <ai_platform_network_create+0x304>)
 8008daa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <ai_platform_network_create+0x308>)
 8008db0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008db4:	429a      	cmp	r2, r3
 8008db6:	f43f af42 	beq.w	8008c3e <ai_platform_network_create+0x15a>
 8008dba:	e7fe      	b.n	8008dba <ai_platform_network_create+0x2d6>
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <ai_platform_network_create+0x30c>)
 8008dbe:	a801      	add	r0, sp, #4
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	f001 ffbb 	bl	800ad3c <ai_check_custom_types>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d034      	beq.n	8008e34 <ai_platform_network_create+0x350>
 8008dca:	2400      	movs	r4, #0
 8008dcc:	46a1      	mov	r9, r4
 8008dce:	e7a3      	b.n	8008d18 <ai_platform_network_create+0x234>
 8008dd0:	e0042000 	.word	0xe0042000
 8008dd4:	5c001000 	.word	0x5c001000
 8008dd8:	40023000 	.word	0x40023000
 8008ddc:	e0002000 	.word	0xe0002000
 8008de0:	a1c00100 	.word	0xa1c00100
 8008de4:	58024000 	.word	0x58024000
 8008de8:	f407a5c2 	.word	0xf407a5c2
 8008dec:	b5e8b5cd 	.word	0xb5e8b5cd
 8008df0:	84048403 	.word	0x84048403
 8008df4:	4b11      	ldr	r3, [pc, #68]	; (8008e3c <ai_platform_network_create+0x358>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008dfc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	d1fb      	bne.n	8008dfc <ai_platform_network_create+0x318>
 8008e04:	4a0e      	ldr	r2, [pc, #56]	; (8008e40 <ai_platform_network_create+0x35c>)
 8008e06:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008e0a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <ai_platform_network_create+0x360>)
 8008e10:	429a      	cmp	r2, r3
 8008e12:	f43f af14 	beq.w	8008c3e <ai_platform_network_create+0x15a>
 8008e16:	e7fe      	b.n	8008e16 <ai_platform_network_create+0x332>
 8008e18:	4b0b      	ldr	r3, [pc, #44]	; (8008e48 <ai_platform_network_create+0x364>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	609a      	str	r2, [r3, #8]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	d1fc      	bne.n	8008e1e <ai_platform_network_create+0x33a>
 8008e24:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <ai_platform_network_create+0x35c>)
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <ai_platform_network_create+0x360>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	f43f af06 	beq.w	8008c3e <ai_platform_network_create+0x15a>
 8008e32:	e7fe      	b.n	8008e32 <ai_platform_network_create+0x34e>
 8008e34:	f04f 0902 	mov.w	r9, #2
 8008e38:	e76b      	b.n	8008d12 <ai_platform_network_create+0x22e>
 8008e3a:	bf00      	nop
 8008e3c:	58024000 	.word	0x58024000
 8008e40:	f407a5c2 	.word	0xf407a5c2
 8008e44:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e48:	40023000 	.word	0x40023000

08008e4c <ai_platform_network_init>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d04f      	beq.n	8008ef4 <ai_platform_network_init+0xa8>
 8008e54:	4bad      	ldr	r3, [pc, #692]	; (800910c <ai_platform_network_init+0x2c0>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	6802      	ldr	r2, [r0, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d14a      	bne.n	8008ef4 <ai_platform_network_init+0xa8>
 8008e5e:	4aac      	ldr	r2, [pc, #688]	; (8009110 <ai_platform_network_init+0x2c4>)
 8008e60:	460d      	mov	r5, r1
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	f7ff fd81 	bl	8008970 <_ai_platform_acquire_crc>
 8008e6e:	4ba9      	ldr	r3, [pc, #676]	; (8009114 <ai_platform_network_init+0x2c8>)
 8008e70:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e7a:	189a      	adds	r2, r3, r2
 8008e7c:	2a01      	cmp	r2, #1
 8008e7e:	d975      	bls.n	8008f6c <ai_platform_network_init+0x120>
 8008e80:	f240 4249 	movw	r2, #1097	; 0x449
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d071      	beq.n	8008f6c <ai_platform_network_init+0x120>
 8008e88:	4aa3      	ldr	r2, [pc, #652]	; (8009118 <ai_platform_network_init+0x2cc>)
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e90:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008e94:	f000 8088 	beq.w	8008fa8 <ai_platform_network_init+0x15c>
 8008e98:	6813      	ldr	r3, [r2, #0]
 8008e9a:	f240 4183 	movw	r1, #1155	; 0x483
 8008e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ea2:	428b      	cmp	r3, r1
 8008ea4:	f000 80cc 	beq.w	8009040 <ai_platform_network_init+0x1f4>
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008eb2:	f000 80f5 	beq.w	80090a0 <ai_platform_network_init+0x254>
 8008eb6:	f7ff fd5d 	bl	8008974 <_ai_platform_release_crc>
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	f000 80fe 	beq.w	80090bc <ai_platform_network_init+0x270>
 8008ec0:	4b96      	ldr	r3, [pc, #600]	; (800911c <ai_platform_network_init+0x2d0>)
 8008ec2:	682a      	ldr	r2, [r5, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	f040 8081 	bne.w	8008fcc <ai_platform_network_init+0x180>
 8008eca:	692b      	ldr	r3, [r5, #16]
 8008ecc:	89ae      	ldrh	r6, [r5, #12]
 8008ece:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8008ed2:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8008ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ed8:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8008edc:	2303      	movs	r3, #3
 8008ede:	84a6      	strh	r6, [r4, #36]	; 0x24
 8008ee0:	4626      	mov	r6, r4
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8008ee8:	60e3      	str	r3, [r4, #12]
 8008eea:	f001 ff4f 	bl	800ad8c <ai_layers_init_all>
 8008eee:	4630      	mov	r0, r6
 8008ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef4:	4a86      	ldr	r2, [pc, #536]	; (8009110 <ai_platform_network_init+0x2c4>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	f7ff fd37 	bl	8008970 <_ai_platform_acquire_crc>
 8008f02:	4b84      	ldr	r3, [pc, #528]	; (8009114 <ai_platform_network_init+0x2c8>)
 8008f04:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f0e:	185a      	adds	r2, r3, r1
 8008f10:	2a01      	cmp	r2, #1
 8008f12:	d91e      	bls.n	8008f52 <ai_platform_network_init+0x106>
 8008f14:	f240 4249 	movw	r2, #1097	; 0x449
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01a      	beq.n	8008f52 <ai_platform_network_init+0x106>
 8008f1c:	4a7e      	ldr	r2, [pc, #504]	; (8009118 <ai_platform_network_init+0x2cc>)
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f24:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008f28:	d02d      	beq.n	8008f86 <ai_platform_network_init+0x13a>
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	f240 4183 	movw	r1, #1155	; 0x483
 8008f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f34:	428b      	cmp	r3, r1
 8008f36:	d072      	beq.n	800901e <ai_platform_network_init+0x1d2>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008f42:	f000 809f 	beq.w	8009084 <ai_platform_network_init+0x238>
 8008f46:	2600      	movs	r6, #0
 8008f48:	f7ff fd14 	bl	8008974 <_ai_platform_release_crc>
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f52:	4a73      	ldr	r2, [pc, #460]	; (8009120 <ai_platform_network_init+0x2d4>)
 8008f54:	2301      	movs	r3, #1
 8008f56:	6093      	str	r3, [r2, #8]
 8008f58:	6893      	ldr	r3, [r2, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1fc      	bne.n	8008f58 <ai_platform_network_init+0x10c>
 8008f5e:	4971      	ldr	r1, [pc, #452]	; (8009124 <ai_platform_network_init+0x2d8>)
 8008f60:	4b71      	ldr	r3, [pc, #452]	; (8009128 <ai_platform_network_init+0x2dc>)
 8008f62:	6011      	str	r1, [r2, #0]
 8008f64:	6812      	ldr	r2, [r2, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d0ed      	beq.n	8008f46 <ai_platform_network_init+0xfa>
 8008f6a:	e7fe      	b.n	8008f6a <ai_platform_network_init+0x11e>
 8008f6c:	4a6c      	ldr	r2, [pc, #432]	; (8009120 <ai_platform_network_init+0x2d4>)
 8008f6e:	2301      	movs	r3, #1
 8008f70:	6093      	str	r3, [r2, #8]
 8008f72:	6893      	ldr	r3, [r2, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1fc      	bne.n	8008f72 <ai_platform_network_init+0x126>
 8008f78:	4b6a      	ldr	r3, [pc, #424]	; (8009124 <ai_platform_network_init+0x2d8>)
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	4b6a      	ldr	r3, [pc, #424]	; (8009128 <ai_platform_network_init+0x2dc>)
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d098      	beq.n	8008eb6 <ai_platform_network_init+0x6a>
 8008f84:	e7fe      	b.n	8008f84 <ai_platform_network_init+0x138>
 8008f86:	4a69      	ldr	r2, [pc, #420]	; (800912c <ai_platform_network_init+0x2e0>)
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1fb      	bne.n	8008f8e <ai_platform_network_init+0x142>
 8008f96:	4963      	ldr	r1, [pc, #396]	; (8009124 <ai_platform_network_init+0x2d8>)
 8008f98:	4b63      	ldr	r3, [pc, #396]	; (8009128 <ai_platform_network_init+0x2dc>)
 8008f9a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008f9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d0cf      	beq.n	8008f46 <ai_platform_network_init+0xfa>
 8008fa6:	e7fe      	b.n	8008fa6 <ai_platform_network_init+0x15a>
 8008fa8:	4a60      	ldr	r2, [pc, #384]	; (800912c <ai_platform_network_init+0x2e0>)
 8008faa:	2301      	movs	r3, #1
 8008fac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008fb0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1fb      	bne.n	8008fb0 <ai_platform_network_init+0x164>
 8008fb8:	4b5a      	ldr	r3, [pc, #360]	; (8009124 <ai_platform_network_init+0x2d8>)
 8008fba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008fbe:	4b5a      	ldr	r3, [pc, #360]	; (8009128 <ai_platform_network_init+0x2dc>)
 8008fc0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	f43f af76 	beq.w	8008eb6 <ai_platform_network_init+0x6a>
 8008fca:	e7fe      	b.n	8008fca <ai_platform_network_init+0x17e>
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f105 081c 	add.w	r8, r5, #28
 8008fd4:	686e      	ldr	r6, [r5, #4]
 8008fd6:	f7ff fc8d 	bl	80088f4 <ai_buffer_get_size>
 8008fda:	4607      	mov	r7, r0
 8008fdc:	2101      	movs	r1, #1
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8008fe4:	f7ff fc86 	bl	80088f4 <ai_buffer_get_size>
 8008fe8:	2f00      	cmp	r7, #0
 8008fea:	d13b      	bne.n	8009064 <ai_platform_network_init+0x218>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d079      	beq.n	80090e4 <ai_platform_network_init+0x298>
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	d07a      	beq.n	80090ec <ai_platform_network_init+0x2a0>
 8008ff6:	f04f 0c01 	mov.w	ip, #1
 8008ffa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	83e7      	strh	r7, [r4, #30]
 8009000:	4563      	cmp	r3, ip
 8009002:	83a6      	strh	r6, [r4, #28]
 8009004:	d361      	bcc.n	80090ca <ai_platform_network_init+0x27e>
 8009006:	f1bc 0f00 	cmp.w	ip, #0
 800900a:	d07c      	beq.n	8009106 <ai_platform_network_init+0x2ba>
 800900c:	4647      	mov	r7, r8
 800900e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009010:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009014:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009018:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800901c:	e75e      	b.n	8008edc <ai_platform_network_init+0x90>
 800901e:	4a43      	ldr	r2, [pc, #268]	; (800912c <ai_platform_network_init+0x2e0>)
 8009020:	2301      	movs	r3, #1
 8009022:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009026:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1fb      	bne.n	8009026 <ai_platform_network_init+0x1da>
 800902e:	493d      	ldr	r1, [pc, #244]	; (8009124 <ai_platform_network_init+0x2d8>)
 8009030:	4b3d      	ldr	r3, [pc, #244]	; (8009128 <ai_platform_network_init+0x2dc>)
 8009032:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009036:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800903a:	429a      	cmp	r2, r3
 800903c:	d083      	beq.n	8008f46 <ai_platform_network_init+0xfa>
 800903e:	e7fe      	b.n	800903e <ai_platform_network_init+0x1f2>
 8009040:	4a3a      	ldr	r2, [pc, #232]	; (800912c <ai_platform_network_init+0x2e0>)
 8009042:	2301      	movs	r3, #1
 8009044:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009048:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1fb      	bne.n	8009048 <ai_platform_network_init+0x1fc>
 8009050:	4b34      	ldr	r3, [pc, #208]	; (8009124 <ai_platform_network_init+0x2d8>)
 8009052:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009056:	4b34      	ldr	r3, [pc, #208]	; (8009128 <ai_platform_network_init+0x2dc>)
 8009058:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800905c:	429a      	cmp	r2, r3
 800905e:	f43f af2a 	beq.w	8008eb6 <ai_platform_network_init+0x6a>
 8009062:	e7fe      	b.n	8009062 <ai_platform_network_init+0x216>
 8009064:	2800      	cmp	r0, #0
 8009066:	d137      	bne.n	80090d8 <ai_platform_network_init+0x28c>
 8009068:	4680      	mov	r8, r0
 800906a:	4684      	mov	ip, r0
 800906c:	2e00      	cmp	r6, #0
 800906e:	d044      	beq.n	80090fa <ai_platform_network_init+0x2ae>
 8009070:	8be6      	ldrh	r6, [r4, #30]
 8009072:	2e00      	cmp	r6, #0
 8009074:	d15c      	bne.n	8009130 <ai_platform_network_init+0x2e4>
 8009076:	2212      	movs	r2, #18
 8009078:	2116      	movs	r1, #22
 800907a:	f104 0010 	add.w	r0, r4, #16
 800907e:	f000 fea7 	bl	8009dd0 <core_set_error>
 8009082:	e763      	b.n	8008f4c <ai_platform_network_init+0x100>
 8009084:	4a26      	ldr	r2, [pc, #152]	; (8009120 <ai_platform_network_init+0x2d4>)
 8009086:	2301      	movs	r3, #1
 8009088:	6093      	str	r3, [r2, #8]
 800908a:	6893      	ldr	r3, [r2, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1fc      	bne.n	800908a <ai_platform_network_init+0x23e>
 8009090:	4924      	ldr	r1, [pc, #144]	; (8009124 <ai_platform_network_init+0x2d8>)
 8009092:	4b25      	ldr	r3, [pc, #148]	; (8009128 <ai_platform_network_init+0x2dc>)
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	f43f af54 	beq.w	8008f46 <ai_platform_network_init+0xfa>
 800909e:	e7fe      	b.n	800909e <ai_platform_network_init+0x252>
 80090a0:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <ai_platform_network_init+0x2d4>)
 80090a2:	2301      	movs	r3, #1
 80090a4:	6093      	str	r3, [r2, #8]
 80090a6:	6893      	ldr	r3, [r2, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1fc      	bne.n	80090a6 <ai_platform_network_init+0x25a>
 80090ac:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <ai_platform_network_init+0x2d8>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <ai_platform_network_init+0x2dc>)
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	f43f aefe 	beq.w	8008eb6 <ai_platform_network_init+0x6a>
 80090ba:	e7fe      	b.n	80090ba <ai_platform_network_init+0x26e>
 80090bc:	2110      	movs	r1, #16
 80090be:	2211      	movs	r2, #17
 80090c0:	462e      	mov	r6, r5
 80090c2:	1860      	adds	r0, r4, r1
 80090c4:	f000 fe84 	bl	8009dd0 <core_set_error>
 80090c8:	e740      	b.n	8008f4c <ai_platform_network_init+0x100>
 80090ca:	2213      	movs	r2, #19
 80090cc:	2116      	movs	r1, #22
 80090ce:	f104 0010 	add.w	r0, r4, #16
 80090d2:	f000 fe7d 	bl	8009dd0 <core_set_error>
 80090d6:	e739      	b.n	8008f4c <ai_platform_network_init+0x100>
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	d006      	beq.n	80090ec <ai_platform_network_init+0x2a0>
 80090de:	f04f 0c01 	mov.w	ip, #1
 80090e2:	e7c3      	b.n	800906c <ai_platform_network_init+0x220>
 80090e4:	4607      	mov	r7, r0
 80090e6:	4680      	mov	r8, r0
 80090e8:	4684      	mov	ip, r0
 80090ea:	e786      	b.n	8008ffa <ai_platform_network_init+0x1ae>
 80090ec:	2110      	movs	r1, #16
 80090ee:	2213      	movs	r2, #19
 80090f0:	2600      	movs	r6, #0
 80090f2:	1860      	adds	r0, r4, r1
 80090f4:	f000 fe6c 	bl	8009dd0 <core_set_error>
 80090f8:	e728      	b.n	8008f4c <ai_platform_network_init+0x100>
 80090fa:	2110      	movs	r1, #16
 80090fc:	2212      	movs	r2, #18
 80090fe:	1860      	adds	r0, r4, r1
 8009100:	f000 fe66 	bl	8009dd0 <core_set_error>
 8009104:	e722      	b.n	8008f4c <ai_platform_network_init+0x100>
 8009106:	4666      	mov	r6, ip
 8009108:	e6e8      	b.n	8008edc <ai_platform_network_init+0x90>
 800910a:	bf00      	nop
 800910c:	a1c00100 	.word	0xa1c00100
 8009110:	e0002000 	.word	0xe0002000
 8009114:	e0042000 	.word	0xe0042000
 8009118:	5c001000 	.word	0x5c001000
 800911c:	a1facade 	.word	0xa1facade
 8009120:	40023000 	.word	0x40023000
 8009124:	f407a5c2 	.word	0xf407a5c2
 8009128:	b5e8b5cd 	.word	0xb5e8b5cd
 800912c:	58024000 	.word	0x58024000
 8009130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009132:	6a26      	ldr	r6, [r4, #32]
 8009134:	2701      	movs	r7, #1
 8009136:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800913c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009140:	e75b      	b.n	8008ffa <ai_platform_network_init+0x1ae>
 8009142:	bf00      	nop

08009144 <ai_platform_network_post_init>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	2800      	cmp	r0, #0
 8009148:	d04a      	beq.n	80091e0 <ai_platform_network_post_init+0x9c>
 800914a:	4b7c      	ldr	r3, [pc, #496]	; (800933c <ai_platform_network_post_init+0x1f8>)
 800914c:	4604      	mov	r4, r0
 800914e:	6802      	ldr	r2, [r0, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d145      	bne.n	80091e0 <ai_platform_network_post_init+0x9c>
 8009154:	4a7a      	ldr	r2, [pc, #488]	; (8009340 <ai_platform_network_post_init+0x1fc>)
 8009156:	6813      	ldr	r3, [r2, #0]
 8009158:	f023 0301 	bic.w	r3, r3, #1
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	f7ff fc07 	bl	8008970 <_ai_platform_acquire_crc>
 8009162:	4b78      	ldr	r3, [pc, #480]	; (8009344 <ai_platform_network_post_init+0x200>)
 8009164:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800916e:	189a      	adds	r2, r3, r2
 8009170:	2a01      	cmp	r2, #1
 8009172:	d96e      	bls.n	8009252 <ai_platform_network_post_init+0x10e>
 8009174:	f240 4249 	movw	r2, #1097	; 0x449
 8009178:	4293      	cmp	r3, r2
 800917a:	d06a      	beq.n	8009252 <ai_platform_network_post_init+0x10e>
 800917c:	4a72      	ldr	r2, [pc, #456]	; (8009348 <ai_platform_network_post_init+0x204>)
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009184:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009188:	f000 8081 	beq.w	800928e <ai_platform_network_post_init+0x14a>
 800918c:	6813      	ldr	r3, [r2, #0]
 800918e:	f240 4183 	movw	r1, #1155	; 0x483
 8009192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009196:	428b      	cmp	r3, r1
 8009198:	f000 80a3 	beq.w	80092e2 <ai_platform_network_post_init+0x19e>
 800919c:	6813      	ldr	r3, [r2, #0]
 800919e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091a2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80091a6:	f000 80bb 	beq.w	8009320 <ai_platform_network_post_init+0x1dc>
 80091aa:	f7ff fbe3 	bl	8008974 <_ai_platform_release_crc>
 80091ae:	68e3      	ldr	r3, [r4, #12]
 80091b0:	f013 0502 	ands.w	r5, r3, #2
 80091b4:	d07d      	beq.n	80092b2 <ai_platform_network_post_init+0x16e>
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fdf6 	bl	800ada8 <ai_layers_post_init_all>
 80091bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091be:	b16b      	cbz	r3, 80091dc <ai_platform_network_post_init+0x98>
 80091c0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80091c2:	e007      	b.n	80091d4 <ai_platform_network_post_init+0x90>
 80091c4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80091c8:	4798      	blx	r3
 80091ca:	692b      	ldr	r3, [r5, #16]
 80091cc:	b133      	cbz	r3, 80091dc <ai_platform_network_post_init+0x98>
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	461d      	mov	r5, r3
 80091d2:	d003      	beq.n	80091dc <ai_platform_network_post_init+0x98>
 80091d4:	4629      	mov	r1, r5
 80091d6:	2000      	movs	r0, #0
 80091d8:	2d00      	cmp	r5, #0
 80091da:	d1f3      	bne.n	80091c4 <ai_platform_network_post_init+0x80>
 80091dc:	2001      	movs	r0, #1
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	4a57      	ldr	r2, [pc, #348]	; (8009340 <ai_platform_network_post_init+0x1fc>)
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	f023 0301 	bic.w	r3, r3, #1
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	f7ff fbc1 	bl	8008970 <_ai_platform_acquire_crc>
 80091ee:	4b55      	ldr	r3, [pc, #340]	; (8009344 <ai_platform_network_post_init+0x200>)
 80091f0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091fa:	185a      	adds	r2, r3, r1
 80091fc:	2a01      	cmp	r2, #1
 80091fe:	d91b      	bls.n	8009238 <ai_platform_network_post_init+0xf4>
 8009200:	f240 4249 	movw	r2, #1097	; 0x449
 8009204:	4293      	cmp	r3, r2
 8009206:	d017      	beq.n	8009238 <ai_platform_network_post_init+0xf4>
 8009208:	4a4f      	ldr	r2, [pc, #316]	; (8009348 <ai_platform_network_post_init+0x204>)
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009210:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009214:	d02a      	beq.n	800926c <ai_platform_network_post_init+0x128>
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	f240 4183 	movw	r1, #1155	; 0x483
 800921c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009220:	428b      	cmp	r3, r1
 8009222:	d04d      	beq.n	80092c0 <ai_platform_network_post_init+0x17c>
 8009224:	6813      	ldr	r3, [r2, #0]
 8009226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800922a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800922e:	d06a      	beq.n	8009306 <ai_platform_network_post_init+0x1c2>
 8009230:	f7ff fba0 	bl	8008974 <_ai_platform_release_crc>
 8009234:	2000      	movs	r0, #0
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	4a44      	ldr	r2, [pc, #272]	; (800934c <ai_platform_network_post_init+0x208>)
 800923a:	2301      	movs	r3, #1
 800923c:	6093      	str	r3, [r2, #8]
 800923e:	6893      	ldr	r3, [r2, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1fc      	bne.n	800923e <ai_platform_network_post_init+0xfa>
 8009244:	4942      	ldr	r1, [pc, #264]	; (8009350 <ai_platform_network_post_init+0x20c>)
 8009246:	4b43      	ldr	r3, [pc, #268]	; (8009354 <ai_platform_network_post_init+0x210>)
 8009248:	6011      	str	r1, [r2, #0]
 800924a:	6812      	ldr	r2, [r2, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d0ef      	beq.n	8009230 <ai_platform_network_post_init+0xec>
 8009250:	e7fe      	b.n	8009250 <ai_platform_network_post_init+0x10c>
 8009252:	4a3e      	ldr	r2, [pc, #248]	; (800934c <ai_platform_network_post_init+0x208>)
 8009254:	2301      	movs	r3, #1
 8009256:	6093      	str	r3, [r2, #8]
 8009258:	6893      	ldr	r3, [r2, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1fc      	bne.n	8009258 <ai_platform_network_post_init+0x114>
 800925e:	493c      	ldr	r1, [pc, #240]	; (8009350 <ai_platform_network_post_init+0x20c>)
 8009260:	4b3c      	ldr	r3, [pc, #240]	; (8009354 <ai_platform_network_post_init+0x210>)
 8009262:	6011      	str	r1, [r2, #0]
 8009264:	6812      	ldr	r2, [r2, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d09f      	beq.n	80091aa <ai_platform_network_post_init+0x66>
 800926a:	e7fe      	b.n	800926a <ai_platform_network_post_init+0x126>
 800926c:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <ai_platform_network_post_init+0x214>)
 800926e:	2301      	movs	r3, #1
 8009270:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009274:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1fb      	bne.n	8009274 <ai_platform_network_post_init+0x130>
 800927c:	4934      	ldr	r1, [pc, #208]	; (8009350 <ai_platform_network_post_init+0x20c>)
 800927e:	4b35      	ldr	r3, [pc, #212]	; (8009354 <ai_platform_network_post_init+0x210>)
 8009280:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009284:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009288:	429a      	cmp	r2, r3
 800928a:	d0d1      	beq.n	8009230 <ai_platform_network_post_init+0xec>
 800928c:	e7fe      	b.n	800928c <ai_platform_network_post_init+0x148>
 800928e:	4a32      	ldr	r2, [pc, #200]	; (8009358 <ai_platform_network_post_init+0x214>)
 8009290:	2301      	movs	r3, #1
 8009292:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009296:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1fb      	bne.n	8009296 <ai_platform_network_post_init+0x152>
 800929e:	492c      	ldr	r1, [pc, #176]	; (8009350 <ai_platform_network_post_init+0x20c>)
 80092a0:	4b2c      	ldr	r3, [pc, #176]	; (8009354 <ai_platform_network_post_init+0x210>)
 80092a2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80092a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092aa:	429a      	cmp	r2, r3
 80092ac:	f43f af7d 	beq.w	80091aa <ai_platform_network_post_init+0x66>
 80092b0:	e7fe      	b.n	80092b0 <ai_platform_network_post_init+0x16c>
 80092b2:	2210      	movs	r2, #16
 80092b4:	2111      	movs	r1, #17
 80092b6:	18a0      	adds	r0, r4, r2
 80092b8:	f000 fd8a 	bl	8009dd0 <core_set_error>
 80092bc:	4628      	mov	r0, r5
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	4a25      	ldr	r2, [pc, #148]	; (8009358 <ai_platform_network_post_init+0x214>)
 80092c2:	2301      	movs	r3, #1
 80092c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1fb      	bne.n	80092c8 <ai_platform_network_post_init+0x184>
 80092d0:	491f      	ldr	r1, [pc, #124]	; (8009350 <ai_platform_network_post_init+0x20c>)
 80092d2:	4b20      	ldr	r3, [pc, #128]	; (8009354 <ai_platform_network_post_init+0x210>)
 80092d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80092d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092dc:	429a      	cmp	r2, r3
 80092de:	d0a7      	beq.n	8009230 <ai_platform_network_post_init+0xec>
 80092e0:	e7fe      	b.n	80092e0 <ai_platform_network_post_init+0x19c>
 80092e2:	4a1d      	ldr	r2, [pc, #116]	; (8009358 <ai_platform_network_post_init+0x214>)
 80092e4:	2301      	movs	r3, #1
 80092e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1fb      	bne.n	80092ea <ai_platform_network_post_init+0x1a6>
 80092f2:	4917      	ldr	r1, [pc, #92]	; (8009350 <ai_platform_network_post_init+0x20c>)
 80092f4:	4b17      	ldr	r3, [pc, #92]	; (8009354 <ai_platform_network_post_init+0x210>)
 80092f6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80092fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092fe:	429a      	cmp	r2, r3
 8009300:	f43f af53 	beq.w	80091aa <ai_platform_network_post_init+0x66>
 8009304:	e7fe      	b.n	8009304 <ai_platform_network_post_init+0x1c0>
 8009306:	4a11      	ldr	r2, [pc, #68]	; (800934c <ai_platform_network_post_init+0x208>)
 8009308:	2301      	movs	r3, #1
 800930a:	6093      	str	r3, [r2, #8]
 800930c:	6893      	ldr	r3, [r2, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1fc      	bne.n	800930c <ai_platform_network_post_init+0x1c8>
 8009312:	490f      	ldr	r1, [pc, #60]	; (8009350 <ai_platform_network_post_init+0x20c>)
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <ai_platform_network_post_init+0x210>)
 8009316:	6011      	str	r1, [r2, #0]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d088      	beq.n	8009230 <ai_platform_network_post_init+0xec>
 800931e:	e7fe      	b.n	800931e <ai_platform_network_post_init+0x1da>
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <ai_platform_network_post_init+0x208>)
 8009322:	2301      	movs	r3, #1
 8009324:	6093      	str	r3, [r2, #8]
 8009326:	6893      	ldr	r3, [r2, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1fc      	bne.n	8009326 <ai_platform_network_post_init+0x1e2>
 800932c:	4908      	ldr	r1, [pc, #32]	; (8009350 <ai_platform_network_post_init+0x20c>)
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <ai_platform_network_post_init+0x210>)
 8009330:	6011      	str	r1, [r2, #0]
 8009332:	6812      	ldr	r2, [r2, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	f43f af38 	beq.w	80091aa <ai_platform_network_post_init+0x66>
 800933a:	e7fe      	b.n	800933a <ai_platform_network_post_init+0x1f6>
 800933c:	a1c00100 	.word	0xa1c00100
 8009340:	e0002000 	.word	0xe0002000
 8009344:	e0042000 	.word	0xe0042000
 8009348:	5c001000 	.word	0x5c001000
 800934c:	40023000 	.word	0x40023000
 8009350:	f407a5c2 	.word	0xf407a5c2
 8009354:	b5e8b5cd 	.word	0xb5e8b5cd
 8009358:	58024000 	.word	0x58024000

0800935c <ai_platform_network_process>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	b085      	sub	sp, #20
 8009362:	460e      	mov	r6, r1
 8009364:	4605      	mov	r5, r0
 8009366:	9202      	str	r2, [sp, #8]
 8009368:	b120      	cbz	r0, 8009374 <ai_platform_network_process+0x18>
 800936a:	4bb5      	ldr	r3, [pc, #724]	; (8009640 <ai_platform_network_process+0x2e4>)
 800936c:	6802      	ldr	r2, [r0, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	bf18      	it	ne
 8009372:	2500      	movne	r5, #0
 8009374:	4ab3      	ldr	r2, [pc, #716]	; (8009644 <ai_platform_network_process+0x2e8>)
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	f7ff faf7 	bl	8008970 <_ai_platform_acquire_crc>
 8009382:	4bb1      	ldr	r3, [pc, #708]	; (8009648 <ai_platform_network_process+0x2ec>)
 8009384:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800938e:	185a      	adds	r2, r3, r1
 8009390:	2a01      	cmp	r2, #1
 8009392:	f240 8147 	bls.w	8009624 <ai_platform_network_process+0x2c8>
 8009396:	f240 4249 	movw	r2, #1097	; 0x449
 800939a:	4293      	cmp	r3, r2
 800939c:	f000 8142 	beq.w	8009624 <ai_platform_network_process+0x2c8>
 80093a0:	4aaa      	ldr	r2, [pc, #680]	; (800964c <ai_platform_network_process+0x2f0>)
 80093a2:	6813      	ldr	r3, [r2, #0]
 80093a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80093ac:	f000 8167 	beq.w	800967e <ai_platform_network_process+0x322>
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	f240 4183 	movw	r1, #1155	; 0x483
 80093b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093ba:	428b      	cmp	r3, r1
 80093bc:	f000 8191 	beq.w	80096e2 <ai_platform_network_process+0x386>
 80093c0:	6813      	ldr	r3, [r2, #0]
 80093c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093c6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80093ca:	f000 816a 	beq.w	80096a2 <ai_platform_network_process+0x346>
 80093ce:	f7ff fad1 	bl	8008974 <_ai_platform_release_crc>
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	f000 8197 	beq.w	8009706 <ai_platform_network_process+0x3aa>
 80093d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 813e 	beq.w	800965c <ai_platform_network_process+0x300>
 80093e0:	68eb      	ldr	r3, [r5, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	616a      	str	r2, [r5, #20]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	f040 813a 	bne.w	8009668 <ai_platform_network_process+0x30c>
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	f000 8169 	beq.w	80096cc <ai_platform_network_process+0x370>
 80093fa:	fab8 f788 	clz	r7, r8
 80093fe:	097f      	lsrs	r7, r7, #5
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	f000 8162 	beq.w	80096cc <ai_platform_network_process+0x370>
 8009408:	f8b8 3000 	ldrh.w	r3, [r8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 815d 	beq.w	80096cc <ai_platform_network_process+0x370>
 8009412:	69b3      	ldr	r3, [r6, #24]
 8009414:	9503      	str	r5, [sp, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d072      	beq.n	8009508 <ai_platform_network_process+0x1ac>
 8009422:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009426:	2c00      	cmp	r4, #0
 8009428:	d06e      	beq.n	8009508 <ai_platform_network_process+0x1ac>
 800942a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800942e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009432:	f8d3 a000 	ldr.w	sl, [r3]
 8009436:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800943a:	f000 8146 	beq.w	80096ca <ai_platform_network_process+0x36e>
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	2101      	movs	r1, #1
 8009442:	4630      	mov	r0, r6
 8009444:	685d      	ldr	r5, [r3, #4]
 8009446:	f7ff fa55 	bl	80088f4 <ai_buffer_get_size>
 800944a:	4285      	cmp	r5, r0
 800944c:	f0c0 815d 	bcc.w	800970a <ai_platform_network_process+0x3ae>
 8009450:	68e0      	ldr	r0, [r4, #12]
 8009452:	69b1      	ldr	r1, [r6, #24]
 8009454:	68c2      	ldr	r2, [r0, #12]
 8009456:	68cb      	ldr	r3, [r1, #12]
 8009458:	429a      	cmp	r2, r3
 800945a:	f040 8156 	bne.w	800970a <ai_platform_network_process+0x3ae>
 800945e:	6882      	ldr	r2, [r0, #8]
 8009460:	688b      	ldr	r3, [r1, #8]
 8009462:	429a      	cmp	r2, r3
 8009464:	f040 8151 	bne.w	800970a <ai_platform_network_process+0x3ae>
 8009468:	6842      	ldr	r2, [r0, #4]
 800946a:	684b      	ldr	r3, [r1, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	f040 814c 	bne.w	800970a <ai_platform_network_process+0x3ae>
 8009472:	69a3      	ldr	r3, [r4, #24]
 8009474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009478:	f009 ff3c 	bl	80132f4 <ai_array_get_data_byte_size>
 800947c:	4605      	mov	r5, r0
 800947e:	4620      	mov	r0, r4
 8009480:	f009 fe8e 	bl	80131a0 <get_tensor_byte_size>
 8009484:	4285      	cmp	r5, r0
 8009486:	f0c0 8140 	bcc.w	800970a <ai_platform_network_process+0x3ae>
 800948a:	69a3      	ldr	r3, [r4, #24]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f009 fe9d 	bl	80131cc <ai_array_to_buffer_fmt>
 8009492:	6833      	ldr	r3, [r6, #0]
 8009494:	4058      	eors	r0, r3
 8009496:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800949a:	f040 81fa 	bne.w	8009892 <ai_platform_network_process+0x536>
 800949e:	6873      	ldr	r3, [r6, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 81ed 	beq.w	8009880 <ai_platform_network_process+0x524>
 80094a6:	69b3      	ldr	r3, [r6, #24]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 81df 	beq.w	800986e <ai_platform_network_process+0x512>
 80094b0:	9a01      	ldr	r2, [sp, #4]
 80094b2:	4620      	mov	r0, r4
 80094b4:	3701      	adds	r7, #1
 80094b6:	361c      	adds	r6, #28
 80094b8:	429a      	cmp	r2, r3
 80094ba:	bf38      	it	cc
 80094bc:	461a      	movcc	r2, r3
 80094be:	9201      	str	r2, [sp, #4]
 80094c0:	f009 fe6e 	bl	80131a0 <get_tensor_byte_size>
 80094c4:	f8c9 0008 	str.w	r0, [r9, #8]
 80094c8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	fb00 f303 	mul.w	r3, r0, r3
 80094d2:	f8c9 300c 	str.w	r3, [r9, #12]
 80094d6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80094da:	440b      	add	r3, r1
 80094dc:	f8c9 1004 	str.w	r1, [r9, #4]
 80094e0:	f84a 300b 	str.w	r3, [sl, fp]
 80094e4:	69a0      	ldr	r0, [r4, #24]
 80094e6:	6803      	ldr	r3, [r0, #0]
 80094e8:	009a      	lsls	r2, r3, #2
 80094ea:	f100 80e8 	bmi.w	80096be <ai_platform_network_process+0x362>
 80094ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	4419      	add	r1, r3
 80094f6:	6081      	str	r1, [r0, #8]
 80094f8:	69a3      	ldr	r3, [r4, #24]
 80094fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	f8b8 3000 	ldrh.w	r3, [r8]
 8009504:	42bb      	cmp	r3, r7
 8009506:	d888      	bhi.n	800941a <ai_platform_network_process+0xbe>
 8009508:	9d03      	ldr	r5, [sp, #12]
 800950a:	9b02      	ldr	r3, [sp, #8]
 800950c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 81c8 	beq.w	80098a4 <ai_platform_network_process+0x548>
 8009514:	2a01      	cmp	r2, #1
 8009516:	f240 81a2 	bls.w	800985e <ai_platform_network_process+0x502>
 800951a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800951e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 819b 	beq.w	800985e <ai_platform_network_process+0x502>
 8009528:	2600      	movs	r6, #0
 800952a:	9f02      	ldr	r7, [sp, #8]
 800952c:	9502      	str	r5, [sp, #8]
 800952e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80f7 	beq.w	8009726 <ai_platform_network_process+0x3ca>
 8009538:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800953c:	2c00      	cmp	r4, #0
 800953e:	f000 80f2 	beq.w	8009726 <ai_platform_network_process+0x3ca>
 8009542:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009546:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 800954a:	f8d3 8000 	ldr.w	r8, [r3]
 800954e:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 8009552:	f000 81b4 	beq.w	80098be <ai_platform_network_process+0x562>
 8009556:	69a3      	ldr	r3, [r4, #24]
 8009558:	2101      	movs	r1, #1
 800955a:	4638      	mov	r0, r7
 800955c:	685d      	ldr	r5, [r3, #4]
 800955e:	f7ff f9c9 	bl	80088f4 <ai_buffer_get_size>
 8009562:	4285      	cmp	r5, r0
 8009564:	f0c0 817a 	bcc.w	800985c <ai_platform_network_process+0x500>
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	69b9      	ldr	r1, [r7, #24]
 800956c:	68c2      	ldr	r2, [r0, #12]
 800956e:	68cb      	ldr	r3, [r1, #12]
 8009570:	429a      	cmp	r2, r3
 8009572:	f040 8173 	bne.w	800985c <ai_platform_network_process+0x500>
 8009576:	6882      	ldr	r2, [r0, #8]
 8009578:	688b      	ldr	r3, [r1, #8]
 800957a:	429a      	cmp	r2, r3
 800957c:	f040 816e 	bne.w	800985c <ai_platform_network_process+0x500>
 8009580:	6842      	ldr	r2, [r0, #4]
 8009582:	684b      	ldr	r3, [r1, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	f040 8169 	bne.w	800985c <ai_platform_network_process+0x500>
 800958a:	69a3      	ldr	r3, [r4, #24]
 800958c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009590:	f009 feb0 	bl	80132f4 <ai_array_get_data_byte_size>
 8009594:	9003      	str	r0, [sp, #12]
 8009596:	4620      	mov	r0, r4
 8009598:	f009 fe02 	bl	80131a0 <get_tensor_byte_size>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	4283      	cmp	r3, r0
 80095a0:	f0c0 815c 	bcc.w	800985c <ai_platform_network_process+0x500>
 80095a4:	69a3      	ldr	r3, [r4, #24]
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	f009 fe10 	bl	80131cc <ai_array_to_buffer_fmt>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	4058      	eors	r0, r3
 80095b0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80095b4:	f040 817a 	bne.w	80098ac <ai_platform_network_process+0x550>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8193 	beq.w	80098e6 <ai_platform_network_process+0x58a>
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8185 	beq.w	80098d4 <ai_platform_network_process+0x578>
 80095ca:	9a01      	ldr	r2, [sp, #4]
 80095cc:	4620      	mov	r0, r4
 80095ce:	3601      	adds	r6, #1
 80095d0:	371c      	adds	r7, #28
 80095d2:	429a      	cmp	r2, r3
 80095d4:	bf38      	it	cc
 80095d6:	461a      	movcc	r2, r3
 80095d8:	9201      	str	r2, [sp, #4]
 80095da:	f009 fde1 	bl	80131a0 <get_tensor_byte_size>
 80095de:	f8ca 0008 	str.w	r0, [sl, #8]
 80095e2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	fb00 f303 	mul.w	r3, r0, r3
 80095ec:	f8ca 300c 	str.w	r3, [sl, #12]
 80095f0:	f857 1c18 	ldr.w	r1, [r7, #-24]
 80095f4:	440b      	add	r3, r1
 80095f6:	f8ca 1004 	str.w	r1, [sl, #4]
 80095fa:	f848 300b 	str.w	r3, [r8, fp]
 80095fe:	69a0      	ldr	r0, [r4, #24]
 8009600:	6803      	ldr	r3, [r0, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	f100 808a 	bmi.w	800971c <ai_platform_network_process+0x3c0>
 8009608:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	4419      	add	r1, r3
 8009610:	6081      	str	r1, [r0, #8]
 8009612:	69a3      	ldr	r3, [r4, #24]
 8009614:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009618:	60da      	str	r2, [r3, #12]
 800961a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800961e:	429e      	cmp	r6, r3
 8009620:	d385      	bcc.n	800952e <ai_platform_network_process+0x1d2>
 8009622:	e080      	b.n	8009726 <ai_platform_network_process+0x3ca>
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <ai_platform_network_process+0x2f4>)
 8009626:	2301      	movs	r3, #1
 8009628:	6093      	str	r3, [r2, #8]
 800962a:	6893      	ldr	r3, [r2, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1fc      	bne.n	800962a <ai_platform_network_process+0x2ce>
 8009630:	4b08      	ldr	r3, [pc, #32]	; (8009654 <ai_platform_network_process+0x2f8>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	4b08      	ldr	r3, [pc, #32]	; (8009658 <ai_platform_network_process+0x2fc>)
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	f43f aec8 	beq.w	80093ce <ai_platform_network_process+0x72>
 800963e:	e7fe      	b.n	800963e <ai_platform_network_process+0x2e2>
 8009640:	a1c00100 	.word	0xa1c00100
 8009644:	e0002000 	.word	0xe0002000
 8009648:	e0042000 	.word	0xe0042000
 800964c:	5c001000 	.word	0x5c001000
 8009650:	40023000 	.word	0x40023000
 8009654:	f407a5c2 	.word	0xf407a5c2
 8009658:	b5e8b5cd 	.word	0xb5e8b5cd
 800965c:	68ea      	ldr	r2, [r5, #12]
 800965e:	616b      	str	r3, [r5, #20]
 8009660:	f002 0203 	and.w	r2, r2, #3
 8009664:	2a03      	cmp	r2, #3
 8009666:	d031      	beq.n	80096cc <ai_platform_network_process+0x370>
 8009668:	2230      	movs	r2, #48	; 0x30
 800966a:	2111      	movs	r1, #17
 800966c:	f105 0010 	add.w	r0, r5, #16
 8009670:	2400      	movs	r4, #0
 8009672:	f000 fbad 	bl	8009dd0 <core_set_error>
 8009676:	4620      	mov	r0, r4
 8009678:	b005      	add	sp, #20
 800967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	4a9e      	ldr	r2, [pc, #632]	; (80098f8 <ai_platform_network_process+0x59c>)
 8009680:	2301      	movs	r3, #1
 8009682:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009686:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1fb      	bne.n	8009686 <ai_platform_network_process+0x32a>
 800968e:	4b9b      	ldr	r3, [pc, #620]	; (80098fc <ai_platform_network_process+0x5a0>)
 8009690:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009694:	4b9a      	ldr	r3, [pc, #616]	; (8009900 <ai_platform_network_process+0x5a4>)
 8009696:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800969a:	429a      	cmp	r2, r3
 800969c:	f43f ae97 	beq.w	80093ce <ai_platform_network_process+0x72>
 80096a0:	e7fe      	b.n	80096a0 <ai_platform_network_process+0x344>
 80096a2:	4a98      	ldr	r2, [pc, #608]	; (8009904 <ai_platform_network_process+0x5a8>)
 80096a4:	2301      	movs	r3, #1
 80096a6:	6093      	str	r3, [r2, #8]
 80096a8:	6893      	ldr	r3, [r2, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1fc      	bne.n	80096a8 <ai_platform_network_process+0x34c>
 80096ae:	4b93      	ldr	r3, [pc, #588]	; (80098fc <ai_platform_network_process+0x5a0>)
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	4b93      	ldr	r3, [pc, #588]	; (8009900 <ai_platform_network_process+0x5a4>)
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	f43f ae89 	beq.w	80093ce <ai_platform_network_process+0x72>
 80096bc:	e7fe      	b.n	80096bc <ai_platform_network_process+0x360>
 80096be:	f8b8 3000 	ldrh.w	r3, [r8]
 80096c2:	429f      	cmp	r7, r3
 80096c4:	f4ff aea9 	bcc.w	800941a <ai_platform_network_process+0xbe>
 80096c8:	e71e      	b.n	8009508 <ai_platform_network_process+0x1ac>
 80096ca:	9d03      	ldr	r5, [sp, #12]
 80096cc:	2400      	movs	r4, #0
 80096ce:	2217      	movs	r2, #23
 80096d0:	2112      	movs	r1, #18
 80096d2:	f105 0010 	add.w	r0, r5, #16
 80096d6:	f000 fb7b 	bl	8009dd0 <core_set_error>
 80096da:	4620      	mov	r0, r4
 80096dc:	b005      	add	sp, #20
 80096de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e2:	4a85      	ldr	r2, [pc, #532]	; (80098f8 <ai_platform_network_process+0x59c>)
 80096e4:	2301      	movs	r3, #1
 80096e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1fb      	bne.n	80096ea <ai_platform_network_process+0x38e>
 80096f2:	4b82      	ldr	r3, [pc, #520]	; (80098fc <ai_platform_network_process+0x5a0>)
 80096f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80096f8:	4b81      	ldr	r3, [pc, #516]	; (8009900 <ai_platform_network_process+0x5a4>)
 80096fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80096fe:	429a      	cmp	r2, r3
 8009700:	f43f ae65 	beq.w	80093ce <ai_platform_network_process+0x72>
 8009704:	e7fe      	b.n	8009704 <ai_platform_network_process+0x3a8>
 8009706:	462c      	mov	r4, r5
 8009708:	e7b5      	b.n	8009676 <ai_platform_network_process+0x31a>
 800970a:	9d03      	ldr	r5, [sp, #12]
 800970c:	2218      	movs	r2, #24
 800970e:	2112      	movs	r1, #18
 8009710:	2400      	movs	r4, #0
 8009712:	f105 0010 	add.w	r0, r5, #16
 8009716:	f000 fb5b 	bl	8009dd0 <core_set_error>
 800971a:	e7ac      	b.n	8009676 <ai_platform_network_process+0x31a>
 800971c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009720:	429e      	cmp	r6, r3
 8009722:	f4ff af04 	bcc.w	800952e <ai_platform_network_process+0x1d2>
 8009726:	9d02      	ldr	r5, [sp, #8]
 8009728:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800972c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800972e:	82ab      	strh	r3, [r5, #20]
 8009730:	2a00      	cmp	r2, #0
 8009732:	f040 808d 	bne.w	8009850 <ai_platform_network_process+0x4f4>
 8009736:	4616      	mov	r6, r2
 8009738:	4617      	mov	r7, r2
 800973a:	8aec      	ldrh	r4, [r5, #22]
 800973c:	429c      	cmp	r4, r3
 800973e:	d29a      	bcs.n	8009676 <ai_platform_network_process+0x31a>
 8009740:	46ab      	mov	fp, r5
 8009742:	2e00      	cmp	r6, #0
 8009744:	d030      	beq.n	80097a8 <ai_platform_network_process+0x44c>
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	e014      	b.n	8009776 <ai_platform_network_process+0x41a>
 800974c:	6882      	ldr	r2, [r0, #8]
 800974e:	68c5      	ldr	r5, [r0, #12]
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	1b52      	subs	r2, r2, r5
 8009754:	4413      	add	r3, r2
 8009756:	6083      	str	r3, [r0, #8]
 8009758:	698b      	ldr	r3, [r1, #24]
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	f859 200a 	ldr.w	r2, [r9, sl]
 8009762:	f108 0801 	add.w	r8, r8, #1
 8009766:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800976a:	440b      	add	r3, r1
 800976c:	4293      	cmp	r3, r2
 800976e:	d301      	bcc.n	8009774 <ai_platform_network_process+0x418>
 8009770:	68e3      	ldr	r3, [r4, #12]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	8833      	ldrh	r3, [r6, #0]
 8009778:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800977c:	4543      	cmp	r3, r8
 800977e:	d913      	bls.n	80097a8 <ai_platform_network_process+0x44c>
 8009780:	6873      	ldr	r3, [r6, #4]
 8009782:	b18b      	cbz	r3, 80097a8 <ai_platform_network_process+0x44c>
 8009784:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009788:	b171      	cbz	r1, 80097a8 <ai_platform_network_process+0x44c>
 800978a:	6988      	ldr	r0, [r1, #24]
 800978c:	68b2      	ldr	r2, [r6, #8]
 800978e:	6803      	ldr	r3, [r0, #0]
 8009790:	f8d2 9000 	ldr.w	r9, [r2]
 8009794:	009d      	lsls	r5, r3, #2
 8009796:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800979a:	d5d7      	bpl.n	800974c <ai_platform_network_process+0x3f0>
 800979c:	6880      	ldr	r0, [r0, #8]
 800979e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80097a2:	f009 fe29 	bl	80133f8 <memcpy>
 80097a6:	e7da      	b.n	800975e <ai_platform_network_process+0x402>
 80097a8:	4658      	mov	r0, fp
 80097aa:	f001 fb11 	bl	800add0 <ai_layers_forward_all>
 80097ae:	2f00      	cmp	r7, #0
 80097b0:	d03f      	beq.n	8009832 <ai_platform_network_process+0x4d6>
 80097b2:	2400      	movs	r4, #0
 80097b4:	e016      	b.n	80097e4 <ai_platform_network_process+0x488>
 80097b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80097ba:	f859 100a 	ldr.w	r1, [r9, sl]
 80097be:	4413      	add	r3, r2
 80097c0:	428b      	cmp	r3, r1
 80097c2:	d302      	bcc.n	80097ca <ai_platform_network_process+0x46e>
 80097c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097c8:	1acb      	subs	r3, r1, r3
 80097ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80097ce:	6981      	ldr	r1, [r0, #24]
 80097d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80097d4:	1b52      	subs	r2, r2, r5
 80097d6:	4413      	add	r3, r2
 80097d8:	608b      	str	r3, [r1, #8]
 80097da:	6983      	ldr	r3, [r0, #24]
 80097dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	3401      	adds	r4, #1
 80097e4:	883b      	ldrh	r3, [r7, #0]
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	d923      	bls.n	8009832 <ai_platform_network_process+0x4d6>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	b30b      	cbz	r3, 8009832 <ai_platform_network_process+0x4d6>
 80097ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80097f2:	b1f0      	cbz	r0, 8009832 <ai_platform_network_process+0x4d6>
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80097fa:	6983      	ldr	r3, [r0, #24]
 80097fc:	f8d2 9000 	ldr.w	r9, [r2]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009806:	0092      	lsls	r2, r2, #2
 8009808:	d5d5      	bpl.n	80097b6 <ai_platform_network_process+0x45a>
 800980a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800980e:	6899      	ldr	r1, [r3, #8]
 8009810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009814:	f009 fdf0 	bl	80133f8 <memcpy>
 8009818:	f859 200a 	ldr.w	r2, [r9, sl]
 800981c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009820:	440b      	add	r3, r1
 8009822:	4293      	cmp	r3, r2
 8009824:	d302      	bcc.n	800982c <ai_platform_network_process+0x4d0>
 8009826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009830:	e7d7      	b.n	80097e2 <ai_platform_network_process+0x486>
 8009832:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009836:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800983a:	3401      	adds	r4, #1
 800983c:	b2a4      	uxth	r4, r4
 800983e:	42a3      	cmp	r3, r4
 8009840:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009844:	f63f af7d 	bhi.w	8009742 <ai_platform_network_process+0x3e6>
 8009848:	4620      	mov	r0, r4
 800984a:	b005      	add	sp, #20
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	2a01      	cmp	r2, #1
 8009852:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009854:	d03c      	beq.n	80098d0 <ai_platform_network_process+0x574>
 8009856:	f106 070c 	add.w	r7, r6, #12
 800985a:	e76e      	b.n	800973a <ai_platform_network_process+0x3de>
 800985c:	9d02      	ldr	r5, [sp, #8]
 800985e:	2218      	movs	r2, #24
 8009860:	2113      	movs	r1, #19
 8009862:	f105 0010 	add.w	r0, r5, #16
 8009866:	2400      	movs	r4, #0
 8009868:	f000 fab2 	bl	8009dd0 <core_set_error>
 800986c:	e703      	b.n	8009676 <ai_platform_network_process+0x31a>
 800986e:	9d03      	ldr	r5, [sp, #12]
 8009870:	4604      	mov	r4, r0
 8009872:	2221      	movs	r2, #33	; 0x21
 8009874:	2112      	movs	r1, #18
 8009876:	f105 0010 	add.w	r0, r5, #16
 800987a:	f000 faa9 	bl	8009dd0 <core_set_error>
 800987e:	e6fa      	b.n	8009676 <ai_platform_network_process+0x31a>
 8009880:	9d03      	ldr	r5, [sp, #12]
 8009882:	4604      	mov	r4, r0
 8009884:	2217      	movs	r2, #23
 8009886:	2112      	movs	r1, #18
 8009888:	f105 0010 	add.w	r0, r5, #16
 800988c:	f000 faa0 	bl	8009dd0 <core_set_error>
 8009890:	e6f1      	b.n	8009676 <ai_platform_network_process+0x31a>
 8009892:	9d03      	ldr	r5, [sp, #12]
 8009894:	2219      	movs	r2, #25
 8009896:	2112      	movs	r1, #18
 8009898:	2400      	movs	r4, #0
 800989a:	f105 0010 	add.w	r0, r5, #16
 800989e:	f000 fa97 	bl	8009dd0 <core_set_error>
 80098a2:	e6e8      	b.n	8009676 <ai_platform_network_process+0x31a>
 80098a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80098a8:	82ab      	strh	r3, [r5, #20]
 80098aa:	e741      	b.n	8009730 <ai_platform_network_process+0x3d4>
 80098ac:	9d02      	ldr	r5, [sp, #8]
 80098ae:	2219      	movs	r2, #25
 80098b0:	2113      	movs	r1, #19
 80098b2:	2400      	movs	r4, #0
 80098b4:	f105 0010 	add.w	r0, r5, #16
 80098b8:	f000 fa8a 	bl	8009dd0 <core_set_error>
 80098bc:	e6db      	b.n	8009676 <ai_platform_network_process+0x31a>
 80098be:	9d02      	ldr	r5, [sp, #8]
 80098c0:	2217      	movs	r2, #23
 80098c2:	2113      	movs	r1, #19
 80098c4:	4654      	mov	r4, sl
 80098c6:	f105 0010 	add.w	r0, r5, #16
 80098ca:	f000 fa81 	bl	8009dd0 <core_set_error>
 80098ce:	e6d2      	b.n	8009676 <ai_platform_network_process+0x31a>
 80098d0:	2700      	movs	r7, #0
 80098d2:	e732      	b.n	800973a <ai_platform_network_process+0x3de>
 80098d4:	9d02      	ldr	r5, [sp, #8]
 80098d6:	4604      	mov	r4, r0
 80098d8:	2221      	movs	r2, #33	; 0x21
 80098da:	2113      	movs	r1, #19
 80098dc:	f105 0010 	add.w	r0, r5, #16
 80098e0:	f000 fa76 	bl	8009dd0 <core_set_error>
 80098e4:	e6c7      	b.n	8009676 <ai_platform_network_process+0x31a>
 80098e6:	9d02      	ldr	r5, [sp, #8]
 80098e8:	4604      	mov	r4, r0
 80098ea:	2217      	movs	r2, #23
 80098ec:	2113      	movs	r1, #19
 80098ee:	f105 0010 	add.w	r0, r5, #16
 80098f2:	f000 fa6d 	bl	8009dd0 <core_set_error>
 80098f6:	e6be      	b.n	8009676 <ai_platform_network_process+0x31a>
 80098f8:	58024000 	.word	0x58024000
 80098fc:	f407a5c2 	.word	0xf407a5c2
 8009900:	b5e8b5cd 	.word	0xb5e8b5cd
 8009904:	40023000 	.word	0x40023000

08009908 <node_convert>:
 8009908:	6982      	ldr	r2, [r0, #24]
 800990a:	8813      	ldrh	r3, [r2, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d049      	beq.n	80099a4 <node_convert+0x9c>
 8009910:	6852      	ldr	r2, [r2, #4]
 8009912:	6850      	ldr	r0, [r2, #4]
 8009914:	b100      	cbz	r0, 8009918 <node_convert+0x10>
 8009916:	6800      	ldr	r0, [r0, #0]
 8009918:	2b01      	cmp	r3, #1
 800991a:	f000 813b 	beq.w	8009b94 <node_convert+0x28c>
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	6915      	ldr	r5, [r2, #16]
 8009924:	b105      	cbz	r5, 8009928 <node_convert+0x20>
 8009926:	682d      	ldr	r5, [r5, #0]
 8009928:	6883      	ldr	r3, [r0, #8]
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	f000 80ec 	beq.w	8009b08 <node_convert+0x200>
 8009930:	68c1      	ldr	r1, [r0, #12]
 8009932:	2401      	movs	r4, #1
 8009934:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009938:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800993c:	428b      	cmp	r3, r1
 800993e:	fb02 f404 	mul.w	r4, r2, r4
 8009942:	d1f9      	bne.n	8009938 <node_convert+0x30>
 8009944:	6982      	ldr	r2, [r0, #24]
 8009946:	69af      	ldr	r7, [r5, #24]
 8009948:	6813      	ldr	r3, [r2, #0]
 800994a:	f3c3 4143 	ubfx	r1, r3, #17, #4
 800994e:	2901      	cmp	r1, #1
 8009950:	d02a      	beq.n	80099a8 <node_convert+0xa0>
 8009952:	6800      	ldr	r0, [r0, #0]
 8009954:	68bd      	ldr	r5, [r7, #8]
 8009956:	2800      	cmp	r0, #0
 8009958:	d068      	beq.n	8009a2c <node_convert+0x124>
 800995a:	6846      	ldr	r6, [r0, #4]
 800995c:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 8009960:	6892      	ldr	r2, [r2, #8]
 8009962:	2e00      	cmp	r6, #0
 8009964:	f000 80b7 	beq.w	8009ad6 <node_convert+0x1ce>
 8009968:	8843      	ldrh	r3, [r0, #2]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 8088 	beq.w	8009a80 <node_convert+0x178>
 8009970:	6833      	ldr	r3, [r6, #0]
 8009972:	ed93 7a00 	vldr	s14, [r3]
 8009976:	6873      	ldr	r3, [r6, #4]
 8009978:	2900      	cmp	r1, #0
 800997a:	f000 80c3 	beq.w	8009b04 <node_convert+0x1fc>
 800997e:	f993 1000 	ldrsb.w	r1, [r3]
 8009982:	b16c      	cbz	r4, 80099a0 <node_convert+0x98>
 8009984:	4414      	add	r4, r2
 8009986:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800998a:	1a5b      	subs	r3, r3, r1
 800998c:	4294      	cmp	r4, r2
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800999a:	ece5 7a01 	vstmia	r5!, {s15}
 800999e:	d1f2      	bne.n	8009986 <node_convert+0x7e>
 80099a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	deff      	udf	#255	; 0xff
 80099a8:	682e      	ldr	r6, [r5, #0]
 80099aa:	6895      	ldr	r5, [r2, #8]
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	f000 80ad 	beq.w	8009b0c <node_convert+0x204>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	6871      	ldr	r1, [r6, #4]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80099bc:	2900      	cmp	r1, #0
 80099be:	d064      	beq.n	8009a8a <node_convert+0x182>
 80099c0:	8870      	ldrh	r0, [r6, #2]
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d067      	beq.n	8009a96 <node_convert+0x18e>
 80099c6:	6808      	ldr	r0, [r1, #0]
 80099c8:	edd0 7a00 	vldr	s15, [r0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80d6 	beq.w	8009b7e <node_convert+0x276>
 80099d2:	684b      	ldr	r3, [r1, #4]
 80099d4:	f993 3000 	ldrsb.w	r3, [r3]
 80099d8:	ee06 3a90 	vmov	s13, r3
 80099dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	d0dd      	beq.n	80099a0 <node_convert+0x98>
 80099e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e8:	4414      	add	r4, r2
 80099ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80099ee:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8009b9c <node_convert+0x294>
 80099f2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80099f6:	ecb5 7a01 	vldmia	r5!, {s14}
 80099fa:	eef0 7a66 	vmov.f32	s15, s13
 80099fe:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0a:	bfac      	ite	ge
 8009a0c:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8009a10:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 8009a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a18:	ee17 3a90 	vmov	r3, s15
 8009a1c:	f303 0307 	ssat	r3, #8, r3
 8009a20:	f802 3b01 	strb.w	r3, [r2], #1
 8009a24:	42a2      	cmp	r2, r4
 8009a26:	d1e6      	bne.n	80099f6 <node_convert+0xee>
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8009a30:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8009a34:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8009a38:	6890      	ldr	r0, [r2, #8]
 8009a3a:	1b8e      	subs	r6, r1, r6
 8009a3c:	2908      	cmp	r1, #8
 8009a3e:	4622      	mov	r2, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8009a46:	eba6 0603 	sub.w	r6, r6, r3
 8009a4a:	f000 808a 	beq.w	8009b62 <node_convert+0x25a>
 8009a4e:	f009 fad7 	bl	8013000 <st_dsp_arm_q15_to_float>
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d0a4      	beq.n	80099a0 <node_convert+0x98>
 8009a56:	ee07 6a90 	vmov	s15, r6
 8009a5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009a5e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009a62:	f00c fc65 	bl	8016330 <powf>
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	d09a      	beq.n	80099a0 <node_convert+0x98>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	ecf5 7a01 	vldmia	r5!, {s15}
 8009a70:	3301      	adds	r3, #1
 8009a72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009a76:	429c      	cmp	r4, r3
 8009a78:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009a7c:	d1f6      	bne.n	8009a6c <node_convert+0x164>
 8009a7e:	e78f      	b.n	80099a0 <node_convert+0x98>
 8009a80:	b359      	cbz	r1, 8009ada <node_convert+0x1d2>
 8009a82:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009ba0 <node_convert+0x298>
 8009a86:	4619      	mov	r1, r3
 8009a88:	e77b      	b.n	8009982 <node_convert+0x7a>
 8009a8a:	b133      	cbz	r3, 8009a9a <node_convert+0x192>
 8009a8c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009ba0 <node_convert+0x298>
 8009a90:	eef0 7a66 	vmov.f32	s15, s13
 8009a94:	e7a4      	b.n	80099e0 <node_convert+0xd8>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1f8      	bne.n	8009a8c <node_convert+0x184>
 8009a9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009a9e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009ba0 <node_convert+0x298>
 8009aa2:	2c00      	cmp	r4, #0
 8009aa4:	f43f af7c 	beq.w	80099a0 <node_convert+0x98>
 8009aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aac:	4414      	add	r4, r2
 8009aae:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009ab2:	ecb5 7a01 	vldmia	r5!, {s14}
 8009ab6:	eef0 7a66 	vmov.f32	s15, s13
 8009aba:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ac2:	ee17 3a90 	vmov	r3, s15
 8009ac6:	f383 0308 	usat	r3, #8, r3
 8009aca:	f802 3b01 	strb.w	r3, [r2], #1
 8009ace:	42a2      	cmp	r2, r4
 8009ad0:	d1ef      	bne.n	8009ab2 <node_convert+0x1aa>
 8009ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	d146      	bne.n	8009b68 <node_convert+0x260>
 8009ada:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009ba0 <node_convert+0x298>
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	f43f af5e 	beq.w	80099a0 <node_convert+0x98>
 8009ae4:	4414      	add	r4, r2
 8009ae6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009aea:	1a5b      	subs	r3, r3, r1
 8009aec:	42a2      	cmp	r2, r4
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009afa:	ece5 7a01 	vstmia	r5!, {s15}
 8009afe:	d1f2      	bne.n	8009ae6 <node_convert+0x1de>
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	7819      	ldrb	r1, [r3, #0]
 8009b06:	e7ea      	b.n	8009ade <node_convert+0x1d6>
 8009b08:	2401      	movs	r4, #1
 8009b0a:	e71b      	b.n	8009944 <node_convert+0x3c>
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 8009b12:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8009b16:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8009b1a:	eba8 0303 	sub.w	r3, r8, r3
 8009b1e:	3340      	adds	r3, #64	; 0x40
 8009b20:	1a9b      	subs	r3, r3, r2
 8009b22:	d014      	beq.n	8009b4e <node_convert+0x246>
 8009b24:	425b      	negs	r3, r3
 8009b26:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009b2a:	ee00 3a90 	vmov	s1, r3
 8009b2e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8009b32:	f00c fbfd 	bl	8016330 <powf>
 8009b36:	b154      	cbz	r4, 8009b4e <node_convert+0x246>
 8009b38:	4633      	mov	r3, r6
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	ecf2 7a01 	vldmia	r2!, {s15}
 8009b40:	3301      	adds	r3, #1
 8009b42:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009b4c:	d1f6      	bne.n	8009b3c <node_convert+0x234>
 8009b4e:	f1b8 0f08 	cmp.w	r8, #8
 8009b52:	d00d      	beq.n	8009b70 <node_convert+0x268>
 8009b54:	4622      	mov	r2, r4
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	4628      	mov	r0, r5
 8009b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5e:	f009 b8cd 	b.w	8012cfc <st_dsp_arm_float_to_q15>
 8009b62:	f009 fab3 	bl	80130cc <st_dsp_arm_q7_to_float>
 8009b66:	e774      	b.n	8009a52 <node_convert+0x14a>
 8009b68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009ba0 <node_convert+0x298>
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	e708      	b.n	8009982 <node_convert+0x7a>
 8009b70:	4622      	mov	r2, r4
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	4628      	mov	r0, r5
 8009b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7a:	f009 b975 	b.w	8012e68 <st_dsp_arm_float_to_q7>
 8009b7e:	684b      	ldr	r3, [r1, #4]
 8009b80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	ee06 3a90 	vmov	s13, r3
 8009b8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009b8e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009b92:	e786      	b.n	8009aa2 <node_convert+0x19a>
 8009b94:	2300      	movs	r3, #0
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	deff      	udf	#255	; 0xff
 8009b9a:	bf00      	nop
 8009b9c:	3efffffc 	.word	0x3efffffc
 8009ba0:	00000000 	.word	0x00000000

08009ba4 <node_convert_integer>:
 8009ba4:	6982      	ldr	r2, [r0, #24]
 8009ba6:	8813      	ldrh	r3, [r2, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d058      	beq.n	8009c5e <node_convert_integer+0xba>
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	6852      	ldr	r2, [r2, #4]
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	6856      	ldr	r6, [r2, #4]
 8009bb4:	b106      	cbz	r6, 8009bb8 <node_convert_integer+0x14>
 8009bb6:	6836      	ldr	r6, [r6, #0]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	f000 8100 	beq.w	8009dbe <node_convert_integer+0x21a>
 8009bbe:	6915      	ldr	r5, [r2, #16]
 8009bc0:	b105      	cbz	r5, 8009bc4 <node_convert_integer+0x20>
 8009bc2:	682d      	ldr	r5, [r5, #0]
 8009bc4:	68b3      	ldr	r3, [r6, #8]
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	f000 80d3 	beq.w	8009d72 <node_convert_integer+0x1ce>
 8009bcc:	68f0      	ldr	r0, [r6, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009bd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	fb01 f202 	mul.w	r2, r1, r2
 8009bde:	d1f9      	bne.n	8009bd4 <node_convert_integer+0x30>
 8009be0:	6833      	ldr	r3, [r6, #0]
 8009be2:	682c      	ldr	r4, [r5, #0]
 8009be4:	b17b      	cbz	r3, 8009c06 <node_convert_integer+0x62>
 8009be6:	6859      	ldr	r1, [r3, #4]
 8009be8:	b169      	cbz	r1, 8009c06 <node_convert_integer+0x62>
 8009bea:	8858      	ldrh	r0, [r3, #2]
 8009bec:	b158      	cbz	r0, 8009c06 <node_convert_integer+0x62>
 8009bee:	6809      	ldr	r1, [r1, #0]
 8009bf0:	ed91 7a00 	vldr	s14, [r1]
 8009bf4:	b15c      	cbz	r4, 8009c0e <node_convert_integer+0x6a>
 8009bf6:	6861      	ldr	r1, [r4, #4]
 8009bf8:	b149      	cbz	r1, 8009c0e <node_convert_integer+0x6a>
 8009bfa:	8860      	ldrh	r0, [r4, #2]
 8009bfc:	b138      	cbz	r0, 8009c0e <node_convert_integer+0x6a>
 8009bfe:	6809      	ldr	r1, [r1, #0]
 8009c00:	edd1 7a00 	vldr	s15, [r1]
 8009c04:	e005      	b.n	8009c12 <node_convert_integer+0x6e>
 8009c06:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009dc4 <node_convert_integer+0x220>
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	d1f3      	bne.n	8009bf6 <node_convert_integer+0x52>
 8009c0e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8009dc4 <node_convert_integer+0x220>
 8009c12:	69b0      	ldr	r0, [r6, #24]
 8009c14:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009c18:	69ad      	ldr	r5, [r5, #24]
 8009c1a:	6806      	ldr	r6, [r0, #0]
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	0236      	lsls	r6, r6, #8
 8009c20:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 8009c24:	d41d      	bmi.n	8009c62 <node_convert_integer+0xbe>
 8009c26:	2900      	cmp	r1, #0
 8009c28:	f040 8081 	bne.w	8009d2e <node_convert_integer+0x18a>
 8009c2c:	6880      	ldr	r0, [r0, #8]
 8009c2e:	68a9      	ldr	r1, [r5, #8]
 8009c30:	b13b      	cbz	r3, 8009c42 <node_convert_integer+0x9e>
 8009c32:	685d      	ldr	r5, [r3, #4]
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	f000 80a7 	beq.w	8009d88 <node_convert_integer+0x1e4>
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	b10b      	cbz	r3, 8009c42 <node_convert_integer+0x9e>
 8009c3e:	686b      	ldr	r3, [r5, #4]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	b13c      	cbz	r4, 8009c54 <node_convert_integer+0xb0>
 8009c44:	6865      	ldr	r5, [r4, #4]
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	f000 80ad 	beq.w	8009da6 <node_convert_integer+0x202>
 8009c4c:	8864      	ldrh	r4, [r4, #2]
 8009c4e:	b10c      	cbz	r4, 8009c54 <node_convert_integer+0xb0>
 8009c50:	686c      	ldr	r4, [r5, #4]
 8009c52:	7824      	ldrb	r4, [r4, #0]
 8009c54:	9400      	str	r4, [sp, #0]
 8009c56:	f001 f9d9 	bl	800b00c <forward_lite_node_convert_integer_iu8ou8>
 8009c5a:	b002      	add	sp, #8
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	deff      	udf	#255	; 0xff
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d042      	beq.n	8009cec <node_convert_integer+0x148>
 8009c66:	6886      	ldr	r6, [r0, #8]
 8009c68:	68a9      	ldr	r1, [r5, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d07f      	beq.n	8009d6e <node_convert_integer+0x1ca>
 8009c6e:	6858      	ldr	r0, [r3, #4]
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f000 8092 	beq.w	8009d9a <node_convert_integer+0x1f6>
 8009c76:	885d      	ldrh	r5, [r3, #2]
 8009c78:	b115      	cbz	r5, 8009c80 <node_convert_integer+0xdc>
 8009c7a:	6843      	ldr	r3, [r0, #4]
 8009c7c:	f993 5000 	ldrsb.w	r5, [r3]
 8009c80:	2c00      	cmp	r4, #0
 8009c82:	d078      	beq.n	8009d76 <node_convert_integer+0x1d2>
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d07b      	beq.n	8009d82 <node_convert_integer+0x1de>
 8009c8a:	8860      	ldrh	r0, [r4, #2]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d075      	beq.n	8009d7c <node_convert_integer+0x1d8>
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f993 3000 	ldrsb.w	r3, [r3]
 8009c96:	ee06 3a90 	vmov	s13, r3
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	d0dd      	beq.n	8009c5a <node_convert_integer+0xb6>
 8009c9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ca2:	4432      	add	r2, r6
 8009ca4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009ca8:	eddf 5a47 	vldr	s11, [pc, #284]	; 8009dc8 <node_convert_integer+0x224>
 8009cac:	f916 3b01 	ldrsb.w	r3, [r6], #1
 8009cb0:	1b5b      	subs	r3, r3, r5
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cba:	eef0 7a66 	vmov.f32	s15, s13
 8009cbe:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cca:	bfcc      	ite	gt
 8009ccc:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8009cd0:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 8009cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cd8:	ee17 3a90 	vmov	r3, s15
 8009cdc:	f303 0307 	ssat	r3, #8, r3
 8009ce0:	4296      	cmp	r6, r2
 8009ce2:	f801 3b01 	strb.w	r3, [r1], #1
 8009ce6:	d1e1      	bne.n	8009cac <node_convert_integer+0x108>
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	6880      	ldr	r0, [r0, #8]
 8009cee:	68a9      	ldr	r1, [r5, #8]
 8009cf0:	b13b      	cbz	r3, 8009d02 <node_convert_integer+0x15e>
 8009cf2:	685d      	ldr	r5, [r3, #4]
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	d04c      	beq.n	8009d92 <node_convert_integer+0x1ee>
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	b113      	cbz	r3, 8009d02 <node_convert_integer+0x15e>
 8009cfc:	686b      	ldr	r3, [r5, #4]
 8009cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8009d02:	b134      	cbz	r4, 8009d12 <node_convert_integer+0x16e>
 8009d04:	6865      	ldr	r5, [r4, #4]
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	d04b      	beq.n	8009da2 <node_convert_integer+0x1fe>
 8009d0a:	8864      	ldrh	r4, [r4, #2]
 8009d0c:	b10c      	cbz	r4, 8009d12 <node_convert_integer+0x16e>
 8009d0e:	686c      	ldr	r4, [r5, #4]
 8009d10:	7824      	ldrb	r4, [r4, #0]
 8009d12:	eeb4 7a67 	vcmp.f32	s14, s15
 8009d16:	9400      	str	r4, [sp, #0]
 8009d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1c:	d103      	bne.n	8009d26 <node_convert_integer+0x182>
 8009d1e:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8009d22:	42a5      	cmp	r5, r4
 8009d24:	d048      	beq.n	8009db8 <node_convert_integer+0x214>
 8009d26:	f001 fa13 	bl	800b150 <forward_lite_node_convert_integer_is8ou8>
 8009d2a:	b002      	add	sp, #8
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	b133      	cbz	r3, 8009d3e <node_convert_integer+0x19a>
 8009d30:	6859      	ldr	r1, [r3, #4]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d039      	beq.n	8009daa <node_convert_integer+0x206>
 8009d36:	885b      	ldrh	r3, [r3, #2]
 8009d38:	b10b      	cbz	r3, 8009d3e <node_convert_integer+0x19a>
 8009d3a:	684b      	ldr	r3, [r1, #4]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b134      	cbz	r4, 8009d4e <node_convert_integer+0x1aa>
 8009d40:	6861      	ldr	r1, [r4, #4]
 8009d42:	b361      	cbz	r1, 8009d9e <node_convert_integer+0x1fa>
 8009d44:	8864      	ldrh	r4, [r4, #2]
 8009d46:	b114      	cbz	r4, 8009d4e <node_convert_integer+0x1aa>
 8009d48:	6849      	ldr	r1, [r1, #4]
 8009d4a:	f991 4000 	ldrsb.w	r4, [r1]
 8009d4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8009d52:	6880      	ldr	r0, [r0, #8]
 8009d54:	68a9      	ldr	r1, [r5, #8]
 8009d56:	9400      	str	r4, [sp, #0]
 8009d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5c:	d103      	bne.n	8009d66 <node_convert_integer+0x1c2>
 8009d5e:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8009d62:	42ab      	cmp	r3, r5
 8009d64:	d025      	beq.n	8009db2 <node_convert_integer+0x20e>
 8009d66:	f001 f97b 	bl	800b060 <forward_lite_node_convert_integer_iu8os8>
 8009d6a:	b002      	add	sp, #8
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	461d      	mov	r5, r3
 8009d70:	e786      	b.n	8009c80 <node_convert_integer+0xdc>
 8009d72:	2201      	movs	r2, #1
 8009d74:	e734      	b.n	8009be0 <node_convert_integer+0x3c>
 8009d76:	ee06 4a90 	vmov	s13, r4
 8009d7a:	e78e      	b.n	8009c9a <node_convert_integer+0xf6>
 8009d7c:	ee06 0a90 	vmov	s13, r0
 8009d80:	e78b      	b.n	8009c9a <node_convert_integer+0xf6>
 8009d82:	ee06 3a90 	vmov	s13, r3
 8009d86:	e788      	b.n	8009c9a <node_convert_integer+0xf6>
 8009d88:	462b      	mov	r3, r5
 8009d8a:	2c00      	cmp	r4, #0
 8009d8c:	f47f af5a 	bne.w	8009c44 <node_convert_integer+0xa0>
 8009d90:	e760      	b.n	8009c54 <node_convert_integer+0xb0>
 8009d92:	462b      	mov	r3, r5
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d1b5      	bne.n	8009d04 <node_convert_integer+0x160>
 8009d98:	e7bb      	b.n	8009d12 <node_convert_integer+0x16e>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	e770      	b.n	8009c80 <node_convert_integer+0xdc>
 8009d9e:	460c      	mov	r4, r1
 8009da0:	e7d5      	b.n	8009d4e <node_convert_integer+0x1aa>
 8009da2:	462c      	mov	r4, r5
 8009da4:	e7b5      	b.n	8009d12 <node_convert_integer+0x16e>
 8009da6:	462c      	mov	r4, r5
 8009da8:	e754      	b.n	8009c54 <node_convert_integer+0xb0>
 8009daa:	460b      	mov	r3, r1
 8009dac:	2c00      	cmp	r4, #0
 8009dae:	d1c7      	bne.n	8009d40 <node_convert_integer+0x19c>
 8009db0:	e7cd      	b.n	8009d4e <node_convert_integer+0x1aa>
 8009db2:	f001 f995 	bl	800b0e0 <forward_lite_node_convert_integer_iu8os8_fast>
 8009db6:	e750      	b.n	8009c5a <node_convert_integer+0xb6>
 8009db8:	f001 f9f4 	bl	800b1a4 <forward_lite_node_convert_integer_is8ou8_fast>
 8009dbc:	e74d      	b.n	8009c5a <node_convert_integer+0xb6>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	deff      	udf	#255	; 0xff
 8009dc4:	00000000 	.word	0x00000000
 8009dc8:	3efffffc 	.word	0x3efffffc

08009dcc <core_init>:
 8009dcc:	2001      	movs	r0, #1
 8009dce:	4770      	bx	lr

08009dd0 <core_set_error>:
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	7800      	ldrb	r0, [r0, #0]
 8009dd4:	b108      	cbz	r0, 8009dda <core_set_error+0xa>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	4770      	bx	lr
 8009dda:	7019      	strb	r1, [r3, #0]
 8009ddc:	2001      	movs	r0, #1
 8009dde:	6819      	ldr	r1, [r3, #0]
 8009de0:	f362 211f 	bfi	r1, r2, #8, #24
 8009de4:	6019      	str	r1, [r3, #0]
 8009de6:	4770      	bx	lr

08009de8 <func_dummy>:
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop

08009dec <forward_conv2d_nl_pool_integer_SSSA_ch>:
 8009dec:	6982      	ldr	r2, [r0, #24]
 8009dee:	8813      	ldrh	r3, [r2, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 81a3 	beq.w	800a13c <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 8009df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	ed2d 8b04 	vpush	{d8-d9}
 8009dfe:	6851      	ldr	r1, [r2, #4]
 8009e00:	b0d9      	sub	sp, #356	; 0x164
 8009e02:	4680      	mov	r8, r0
 8009e04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8009e08:	f1ba 0f00 	cmp.w	sl, #0
 8009e0c:	d001      	beq.n	8009e12 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26>
 8009e0e:	f8da a000 	ldr.w	sl, [sl]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	f000 8369 	beq.w	800a4ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fe>
 8009e18:	690a      	ldr	r2, [r1, #16]
 8009e1a:	9218      	str	r2, [sp, #96]	; 0x60
 8009e1c:	b10a      	cbz	r2, 8009e22 <forward_conv2d_nl_pool_integer_SSSA_ch+0x36>
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	9218      	str	r2, [sp, #96]	; 0x60
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	f000 8187 	beq.w	800a136 <forward_conv2d_nl_pool_integer_SSSA_ch+0x34a>
 8009e28:	69ca      	ldr	r2, [r1, #28]
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	f000 82f4 	beq.w	800a418 <forward_conv2d_nl_pool_integer_SSSA_ch+0x62c>
 8009e30:	8b08      	ldrh	r0, [r1, #24]
 8009e32:	f8d2 b000 	ldr.w	fp, [r2]
 8009e36:	2801      	cmp	r0, #1
 8009e38:	f200 8182 	bhi.w	800a140 <forward_conv2d_nl_pool_integer_SSSA_ch+0x354>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	901d      	str	r0, [sp, #116]	; 0x74
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	f000 8355 	beq.w	800a4f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x704>
 8009e46:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 834c 	beq.w	800a4e6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fa>
 8009e4e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009e58:	9133      	str	r1, [sp, #204]	; 0xcc
 8009e5a:	901a      	str	r0, [sp, #104]	; 0x68
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	f000 82d6 	beq.w	800a40e <forward_conv2d_nl_pool_integer_SSSA_ch+0x622>
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	9319      	str	r3, [sp, #100]	; 0x64
 8009e66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e6a:	f8da 000c 	ldr.w	r0, [sl, #12]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	6845      	ldr	r5, [r0, #4]
 8009e72:	461e      	mov	r6, r3
 8009e74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009e76:	9516      	str	r5, [sp, #88]	; 0x58
 8009e78:	b2b6      	uxth	r6, r6
 8009e7a:	68e4      	ldr	r4, [r4, #12]
 8009e7c:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8009e80:	ee08 6a90 	vmov	s17, r6
 8009e84:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8009e88:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
 8009e8c:	ee08 6a10 	vmov	s16, r6
 8009e90:	68e6      	ldr	r6, [r4, #12]
 8009e92:	68a4      	ldr	r4, [r4, #8]
 8009e94:	9322      	str	r3, [sp, #136]	; 0x88
 8009e96:	9439      	str	r4, [sp, #228]	; 0xe4
 8009e98:	680b      	ldr	r3, [r1, #0]
 8009e9a:	f8db c00c 	ldr.w	ip, [fp, #12]
 8009e9e:	f8d8 7054 	ldr.w	r7, [r8, #84]	; 0x54
 8009ea2:	961e      	str	r6, [sp, #120]	; 0x78
 8009ea4:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 8009ea8:	903d      	str	r0, [sp, #244]	; 0xf4
 8009eaa:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 8009eae:	9037      	str	r0, [sp, #220]	; 0xdc
 8009eb0:	b2a8      	uxth	r0, r5
 8009eb2:	9038      	str	r0, [sp, #224]	; 0xe0
 8009eb4:	b298      	uxth	r0, r3
 8009eb6:	9017      	str	r0, [sp, #92]	; 0x5c
 8009eb8:	8888      	ldrh	r0, [r1, #4]
 8009eba:	6889      	ldr	r1, [r1, #8]
 8009ebc:	902e      	str	r0, [sp, #184]	; 0xb8
 8009ebe:	f8b8 0030 	ldrh.w	r0, [r8, #48]	; 0x30
 8009ec2:	902f      	str	r0, [sp, #188]	; 0xbc
 8009ec4:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
 8009ec8:	9030      	str	r0, [sp, #192]	; 0xc0
 8009eca:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8009ece:	9020      	str	r0, [sp, #128]	; 0x80
 8009ed0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009ed4:	9029      	str	r0, [sp, #164]	; 0xa4
 8009ed6:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8009eda:	901b      	str	r0, [sp, #108]	; 0x6c
 8009edc:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8009ee0:	903a      	str	r0, [sp, #232]	; 0xe8
 8009ee2:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8009ee6:	903b      	str	r0, [sp, #236]	; 0xec
 8009ee8:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8009eec:	9026      	str	r0, [sp, #152]	; 0x98
 8009eee:	6838      	ldr	r0, [r7, #0]
 8009ef0:	902b      	str	r0, [sp, #172]	; 0xac
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	903c      	str	r0, [sp, #240]	; 0xf0
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	f000 8264 	beq.w	800a3c4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 8009efc:	6892      	ldr	r2, [r2, #8]
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	f000 8260 	beq.w	800a3c4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d8>
 8009f04:	6990      	ldr	r0, [r2, #24]
 8009f06:	2800      	cmp	r0, #0
 8009f08:	bf08      	it	eq
 8009f0a:	4602      	moveq	r2, r0
 8009f0c:	922a      	str	r2, [sp, #168]	; 0xa8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009f12:	b2aa      	uxth	r2, r5
 8009f14:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8009f18:	fa13 f181 	uxtah	r1, r3, r1
 8009f1c:	4423      	add	r3, r4
 8009f1e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009f20:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 8009f24:	4421      	add	r1, r4
 8009f26:	9321      	str	r3, [sp, #132]	; 0x84
 8009f28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f2a:	ac4d      	add	r4, sp, #308	; 0x134
 8009f2c:	6987      	ldr	r7, [r0, #24]
 8009f2e:	1acd      	subs	r5, r1, r3
 8009f30:	f240 4101 	movw	r1, #1025	; 0x401
 8009f34:	f8cd c150 	str.w	ip, [sp, #336]	; 0x150
 8009f38:	fbb5 f3f2 	udiv	r3, r5, r2
 8009f3c:	aa49      	add	r2, sp, #292	; 0x124
 8009f3e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009f40:	9315      	str	r3, [sp, #84]	; 0x54
 8009f42:	2300      	movs	r3, #0
 8009f44:	9256      	str	r2, [sp, #344]	; 0x158
 8009f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f4a:	69ad      	ldr	r5, [r5, #24]
 8009f4c:	9351      	str	r3, [sp, #324]	; 0x144
 8009f4e:	9345      	str	r3, [sp, #276]	; 0x114
 8009f50:	9349      	str	r3, [sp, #292]	; 0x124
 8009f52:	9348      	str	r3, [sp, #288]	; 0x120
 8009f54:	934c      	str	r3, [sp, #304]	; 0x130
 8009f56:	9357      	str	r3, [sp, #348]	; 0x15c
 8009f58:	952c      	str	r5, [sp, #176]	; 0xb0
 8009f5a:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
 8009f5e:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 8009f62:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009f66:	e9cd 2152 	strd	r2, r1, [sp, #328]	; 0x148
 8009f6a:	f240 4102 	movw	r1, #1026	; 0x402
 8009f6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009f70:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8009f74:	9155      	str	r1, [sp, #340]	; 0x154
 8009f76:	4601      	mov	r1, r0
 8009f78:	a851      	add	r0, sp, #324	; 0x144
 8009f7a:	9331      	str	r3, [sp, #196]	; 0xc4
 8009f7c:	f009 f9ca 	bl	8013314 <core_tensor_clone>
 8009f80:	4620      	mov	r0, r4
 8009f82:	4639      	mov	r1, r7
 8009f84:	f009 f9f8 	bl	8013378 <core_array_clone>
 8009f88:	9457      	str	r4, [sp, #348]	; 0x15c
 8009f8a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009f8e:	f8da 2000 	ldr.w	r2, [sl]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f9bd 40ac 	ldrsh.w	r4, [sp, #172]	; 0xac
 8009f98:	931c      	str	r3, [sp, #112]	; 0x70
 8009f9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009f9c:	f8db 0000 	ldr.w	r0, [fp]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	9327      	str	r3, [sp, #156]	; 0x9c
 8009fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	f000 81c9 	beq.w	800a342 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 8009fb0:	6851      	ldr	r1, [r2, #4]
 8009fb2:	2900      	cmp	r1, #0
 8009fb4:	f000 81c5 	beq.w	800a342 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 8009fb8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009fbc:	f1bc 0f00 	cmp.w	ip, #0
 8009fc0:	f000 81bf 	beq.w	800a342 <forward_conv2d_nl_pool_integer_SSSA_ch+0x556>
 8009fc4:	6809      	ldr	r1, [r1, #0]
 8009fc6:	ed91 0a00 	vldr	s0, [r1]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 81b6 	beq.w	800a33c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 8009fd0:	6859      	ldr	r1, [r3, #4]
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	f000 81b2 	beq.w	800a33c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 8009fd8:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8009fdc:	f1bc 0f00 	cmp.w	ip, #0
 8009fe0:	f000 81ac 	beq.w	800a33c <forward_conv2d_nl_pool_integer_SSSA_ch+0x550>
 8009fe4:	6809      	ldr	r1, [r1, #0]
 8009fe6:	edd1 0a00 	vldr	s1, [r1]
 8009fea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8009fec:	2901      	cmp	r1, #1
 8009fee:	f040 81a2 	bne.w	800a336 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 8009ff2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009ff4:	2901      	cmp	r1, #1
 8009ff6:	f040 819e 	bne.w	800a336 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 8009ffa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009ffc:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8009ffe:	4329      	orrs	r1, r5
 800a000:	f040 8199 	bne.w	800a336 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800a004:	e9dd 1537 	ldrd	r1, r5, [sp, #220]	; 0xdc
 800a008:	2901      	cmp	r1, #1
 800a00a:	bf08      	it	eq
 800a00c:	2d01      	cmpeq	r5, #1
 800a00e:	bf0c      	ite	eq
 800a010:	2101      	moveq	r1, #1
 800a012:	2100      	movne	r1, #0
 800a014:	9124      	str	r1, [sp, #144]	; 0x90
 800a016:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a018:	f8da c018 	ldr.w	ip, [sl, #24]
 800a01c:	f8db e018 	ldr.w	lr, [fp, #24]
 800a020:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a024:	6989      	ldr	r1, [r1, #24]
 800a026:	951d      	str	r5, [sp, #116]	; 0x74
 800a028:	6889      	ldr	r1, [r1, #8]
 800a02a:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a02e:	9132      	str	r1, [sp, #200]	; 0xc8
 800a030:	952d      	str	r5, [sp, #180]	; 0xb4
 800a032:	2a00      	cmp	r2, #0
 800a034:	f000 81c0 	beq.w	800a3b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800a038:	6851      	ldr	r1, [r2, #4]
 800a03a:	2900      	cmp	r1, #0
 800a03c:	f000 81e5 	beq.w	800a40a <forward_conv2d_nl_pool_integer_SSSA_ch+0x61e>
 800a040:	8852      	ldrh	r2, [r2, #2]
 800a042:	2a00      	cmp	r2, #0
 800a044:	f000 81b8 	beq.w	800a3b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5cc>
 800a048:	684a      	ldr	r2, [r1, #4]
 800a04a:	f992 2000 	ldrsb.w	r2, [r2]
 800a04e:	9234      	str	r2, [sp, #208]	; 0xd0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 81b5 	beq.w	800a3c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	2a00      	cmp	r2, #0
 800a05a:	f000 81d4 	beq.w	800a406 <forward_conv2d_nl_pool_integer_SSSA_ch+0x61a>
 800a05e:	885b      	ldrh	r3, [r3, #2]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 81ad 	beq.w	800a3c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5d4>
 800a066:	6853      	ldr	r3, [r2, #4]
 800a068:	f993 3000 	ldrsb.w	r3, [r3]
 800a06c:	9336      	str	r3, [sp, #216]	; 0xd8
 800a06e:	b110      	cbz	r0, 800a076 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800a070:	6840      	ldr	r0, [r0, #4]
 800a072:	b100      	cbz	r0, 800a076 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28a>
 800a074:	6800      	ldr	r0, [r0, #0]
 800a076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	f000 81bd 	beq.w	800a3f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800a07e:	461a      	mov	r2, r3
 800a080:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a084:	429a      	cmp	r2, r3
 800a086:	bf0c      	ite	eq
 800a088:	2317      	moveq	r3, #23
 800a08a:	2300      	movne	r3, #0
 800a08c:	9328      	str	r3, [sp, #160]	; 0xa0
 800a08e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a090:	ee18 1a90 	vmov	r1, s17
 800a094:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
 800a098:	462a      	mov	r2, r5
 800a09a:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800a09e:	9335      	str	r3, [sp, #212]	; 0xd4
 800a0a0:	f001 f906 	bl	800b2b0 <align_factor_ch>
 800a0a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0a6:	9543      	str	r5, [sp, #268]	; 0x10c
 800a0a8:	698b      	ldr	r3, [r1, #24]
 800a0aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0ae:	f009 f8f9 	bl	80132a4 <ai_array_get_byte_size>
 800a0b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0b4:	9044      	str	r0, [sp, #272]	; 0x110
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8106 	beq.w	800a2c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4dc>
 800a0bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a0be:	f04f 0b00 	mov.w	fp, #0
 800a0c2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a0c6:	fb02 f10a 	mul.w	r1, r2, sl
 800a0ca:	b292      	uxth	r2, r2
 800a0cc:	9422      	str	r4, [sp, #136]	; 0x88
 800a0ce:	9125      	str	r1, [sp, #148]	; 0x94
 800a0d0:	9224      	str	r2, [sp, #144]	; 0x90
 800a0d2:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800a0d6:	e9dd 212f 	ldrd	r2, r1, [sp, #188]	; 0xbc
 800a0da:	2901      	cmp	r1, #1
 800a0dc:	bf08      	it	eq
 800a0de:	2a01      	cmpeq	r2, #1
 800a0e0:	ee18 1a10 	vmov	r1, s16
 800a0e4:	bf14      	ite	ne
 800a0e6:	2201      	movne	r2, #1
 800a0e8:	2200      	moveq	r2, #0
 800a0ea:	2907      	cmp	r1, #7
 800a0ec:	bf88      	it	hi
 800a0ee:	f042 0201 	orrhi.w	r2, r2, #1
 800a0f2:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800a0f4:	923e      	str	r2, [sp, #248]	; 0xf8
 800a0f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a0f8:	fb01 f202 	mul.w	r2, r1, r2
 800a0fc:	fb03 f202 	mul.w	r2, r3, r2
 800a100:	fb01 f303 	mul.w	r3, r1, r3
 800a104:	923d      	str	r2, [sp, #244]	; 0xf4
 800a106:	933f      	str	r3, [sp, #252]	; 0xfc
 800a108:	b28b      	uxth	r3, r1
 800a10a:	ee09 3a10 	vmov	s18, r3
 800a10e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a110:	e9cd 3b1a 	strd	r3, fp, [sp, #104]	; 0x68
 800a114:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800a118:	931c      	str	r3, [sp, #112]	; 0x70
 800a11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a11c:	3301      	adds	r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f340 80de 	ble.w	800a2e0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4f4>
 800a124:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a126:	2b17      	cmp	r3, #23
 800a128:	f000 8112 	beq.w	800a350 <forward_conv2d_nl_pool_integer_SSSA_ch+0x564>
 800a12c:	2b18      	cmp	r3, #24
 800a12e:	d00a      	beq.n	800a146 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 800a130:	2b16      	cmp	r3, #22
 800a132:	d00c      	beq.n	800a14e <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 800a134:	e7fe      	b.n	800a134 <forward_conv2d_nl_pool_integer_SSSA_ch+0x348>
 800a136:	2300      	movs	r3, #0
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	deff      	udf	#255	; 0xff
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	deff      	udf	#255	; 0xff
 800a140:	6850      	ldr	r0, [r2, #4]
 800a142:	901d      	str	r0, [sp, #116]	; 0x74
 800a144:	e67c      	b.n	8009e40 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800a146:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8168 	beq.w	800a41e <forward_conv2d_nl_pool_integer_SSSA_ch+0x632>
 800a14e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a150:	429c      	cmp	r4, r3
 800a152:	d103      	bne.n	800a15c <forward_conv2d_nl_pool_integer_SSSA_ch+0x370>
 800a154:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 819d 	beq.w	800a496 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6aa>
 800a15c:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800a160:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800a164:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800a168:	2201      	movs	r2, #1
 800a16a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800a16e:	ee19 1a10 	vmov	r1, s18
 800a172:	9211      	str	r2, [sp, #68]	; 0x44
 800a174:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a176:	9210      	str	r2, [sp, #64]	; 0x40
 800a178:	68b2      	ldr	r2, [r6, #8]
 800a17a:	edcd 8a01 	vstr	s17, [sp, #4]
 800a17e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a180:	e9cd 3b02 	strd	r3, fp, [sp, #8]
 800a184:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a186:	930b      	str	r3, [sp, #44]	; 0x2c
 800a188:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a18a:	930a      	str	r3, [sp, #40]	; 0x28
 800a18c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800a192:	9308      	str	r3, [sp, #32]
 800a194:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800a19a:	9306      	str	r3, [sp, #24]
 800a19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800a1aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ac:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800a1ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800a1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b4:	ee18 3a10 	vmov	r3, s16
 800a1b8:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800a1bc:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a1be:	f002 ffb5 	bl	800d12c <st_sssa8_ch_convolve>
 800a1c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	f000 80be 	beq.w	800a348 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55c>
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	9321      	str	r3, [sp, #132]	; 0x84
 800a1d4:	bf28      	it	cs
 800a1d6:	461a      	movcs	r2, r3
 800a1d8:	921a      	str	r2, [sp, #104]	; 0x68
 800a1da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 809b 	bne.w	800a318 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52c>
 800a1e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1e4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800a1e6:	4413      	add	r3, r2
 800a1e8:	931d      	str	r3, [sp, #116]	; 0x74
 800a1ea:	3401      	adds	r4, #1
 800a1ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a1ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	b224      	sxth	r4, r4
 800a1f4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a1f6:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800a1f8:	47a8      	blx	r5
 800a1fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	db39      	blt.n	800a274 <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800a200:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a202:	2201      	movs	r2, #1
 800a204:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800a208:	a851      	add	r0, sp, #324	; 0x144
 800a20a:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	fa1f f38b 	uxth.w	r3, fp
 800a214:	9207      	str	r2, [sp, #28]
 800a216:	1ae4      	subs	r4, r4, r3
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	fa1f f38a 	uxth.w	r3, sl
 800a21e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a220:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a222:	b224      	sxth	r4, r4
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	3201      	adds	r2, #1
 800a228:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 800a22c:	9216      	str	r2, [sp, #88]	; 0x58
 800a22e:	9306      	str	r3, [sp, #24]
 800a230:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800a234:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
 800a23e:	9201      	str	r2, [sp, #4]
 800a240:	1a52      	subs	r2, r2, r1
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800a248:	b292      	uxth	r2, r2
 800a24a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	ee18 3a90 	vmov	r3, s17
 800a252:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 800a254:	47a8      	blx	r5
 800a256:	4652      	mov	r2, sl
 800a258:	fa0f f38b 	sxth.w	r3, fp
 800a25c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a264:	b21a      	sxth	r2, r3
 800a266:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	9222      	str	r2, [sp, #136]	; 0x88
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	688b      	ldr	r3, [r1, #8]
 800a270:	4413      	add	r3, r2
 800a272:	608b      	str	r3, [r1, #8]
 800a274:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a278:	68b2      	ldr	r2, [r6, #8]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	eb02 0a03 	add.w	sl, r2, r3
 800a280:	f8c6 a008 	str.w	sl, [r6, #8]
 800a284:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a288:	b13b      	cbz	r3, 800a29a <forward_conv2d_nl_pool_integer_SSSA_ch+0x4ae>
 800a28a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4413      	add	r3, r2
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a29a:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800a29e:	4648      	mov	r0, r9
 800a2a0:	f008 ff7e 	bl	80131a0 <get_tensor_byte_size>
 800a2a4:	4458      	add	r0, fp
 800a2a6:	4582      	cmp	sl, r0
 800a2a8:	d306      	bcc.n	800a2b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800a2aa:	68f3      	ldr	r3, [r6, #12]
 800a2ac:	60b3      	str	r3, [r6, #8]
 800a2ae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a2b2:	b10b      	cbz	r3, 800a2b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4cc>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	60bb      	str	r3, [r7, #8]
 800a2b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	9315      	str	r3, [sp, #84]	; 0x54
 800a2c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f4ff af29 	bcc.w	800a11a <forward_conv2d_nl_pool_integer_SSSA_ch+0x32e>
 800a2c8:	68f3      	ldr	r3, [r6, #12]
 800a2ca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a2cc:	60b3      	str	r3, [r6, #8]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	68d3      	ldr	r3, [r2, #12]
 800a2d4:	6093      	str	r3, [r2, #8]
 800a2d6:	b059      	add	sp, #356	; 0x164
 800a2d8:	ecbd 8b04 	vpop	{d8-d9}
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da89      	bge.n	800a1fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800a2e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a2e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2ec:	fb03 1314 	mls	r3, r3, r4, r1
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d901      	bls.n	800a2f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4403      	add	r3, r0
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d202      	bcs.n	800a302 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800a2fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 800a2fe:	42a0      	cmp	r0, r4
 800a300:	d169      	bne.n	800a3d6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 800a302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a304:	b2a4      	uxth	r4, r4
 800a306:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a308:	4413      	add	r3, r2
 800a30a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a30c:	1b1b      	subs	r3, r3, r4
 800a30e:	4414      	add	r4, r2
 800a310:	b21b      	sxth	r3, r3
 800a312:	b224      	sxth	r4, r4
 800a314:	931b      	str	r3, [sp, #108]	; 0x6c
 800a316:	e770      	b.n	800a1fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x40e>
 800a318:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a31a:	461a      	mov	r2, r3
 800a31c:	1a5b      	subs	r3, r3, r1
 800a31e:	d505      	bpl.n	800a32c <forward_conv2d_nl_pool_integer_SSSA_ch+0x540>
 800a320:	1a8a      	subs	r2, r1, r2
 800a322:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800a324:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a326:	fb00 1202 	mla	r2, r0, r2, r1
 800a32a:	921d      	str	r2, [sp, #116]	; 0x74
 800a32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a330:	b29b      	uxth	r3, r3
 800a332:	9317      	str	r3, [sp, #92]	; 0x5c
 800a334:	e759      	b.n	800a1ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x3fe>
 800a336:	2100      	movs	r1, #0
 800a338:	9124      	str	r1, [sp, #144]	; 0x90
 800a33a:	e66c      	b.n	800a016 <forward_conv2d_nl_pool_integer_SSSA_ch+0x22a>
 800a33c:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800a4f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800a340:	e653      	b.n	8009fea <forward_conv2d_nl_pool_integer_SSSA_ch+0x1fe>
 800a342:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a4f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 800a346:	e640      	b.n	8009fca <forward_conv2d_nl_pool_integer_SSSA_ch+0x1de>
 800a348:	2300      	movs	r3, #0
 800a34a:	931a      	str	r3, [sp, #104]	; 0x68
 800a34c:	9321      	str	r3, [sp, #132]	; 0x84
 800a34e:	e744      	b.n	800a1da <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ee>
 800a350:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a352:	429c      	cmp	r4, r3
 800a354:	d103      	bne.n	800a35e <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 800a356:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80b4 	beq.w	800a4c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 800a35e:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800a362:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800a366:	2101      	movs	r1, #1
 800a368:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a36a:	910f      	str	r1, [sp, #60]	; 0x3c
 800a36c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a36e:	9010      	str	r0, [sp, #64]	; 0x40
 800a370:	910e      	str	r1, [sp, #56]	; 0x38
 800a372:	68b1      	ldr	r1, [r6, #8]
 800a374:	edcd 8a01 	vstr	s17, [sp, #4]
 800a378:	910d      	str	r1, [sp, #52]	; 0x34
 800a37a:	ee19 1a10 	vmov	r1, s18
 800a37e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a382:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800a384:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800a388:	930c      	str	r3, [sp, #48]	; 0x30
 800a38a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800a38c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a38e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800a390:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 800a394:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a396:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800a3a0:	9306      	str	r3, [sp, #24]
 800a3a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	ee18 3a10 	vmov	r3, s16
 800a3b2:	f001 f8a9 	bl	800b508 <st_sssa8_ch_convolve_dw>
 800a3b6:	e704      	b.n	800a1c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800a3b8:	9234      	str	r2, [sp, #208]	; 0xd0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f47f ae4b 	bne.w	800a056 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 800a3c0:	9336      	str	r3, [sp, #216]	; 0xd8
 800a3c2:	e654      	b.n	800a06e <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800a3c4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800a3c8:	922a      	str	r2, [sp, #168]	; 0xa8
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	f43f ad9f 	beq.w	8009f0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800a3d0:	6892      	ldr	r2, [r2, #8]
 800a3d2:	922a      	str	r2, [sp, #168]	; 0xa8
 800a3d4:	e59b      	b.n	8009f0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x122>
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4402      	add	r2, r0
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d291      	bcs.n	800a302 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800a3de:	3901      	subs	r1, #1
 800a3e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e6:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	4402      	add	r2, r0
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d3f6      	bcc.n	800a3e2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 800a3f4:	9515      	str	r5, [sp, #84]	; 0x54
 800a3f6:	e784      	b.n	800a302 <forward_conv2d_nl_pool_integer_SSSA_ch+0x516>
 800a3f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bf0c      	ite	eq
 800a3fe:	2318      	moveq	r3, #24
 800a400:	2316      	movne	r3, #22
 800a402:	9328      	str	r3, [sp, #160]	; 0xa0
 800a404:	e643      	b.n	800a08e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a2>
 800a406:	9236      	str	r2, [sp, #216]	; 0xd8
 800a408:	e631      	b.n	800a06e <forward_conv2d_nl_pool_integer_SSSA_ch+0x282>
 800a40a:	9134      	str	r1, [sp, #208]	; 0xd0
 800a40c:	e620      	b.n	800a050 <forward_conv2d_nl_pool_integer_SSSA_ch+0x264>
 800a40e:	4b3b      	ldr	r3, [pc, #236]	; (800a4fc <forward_conv2d_nl_pool_integer_SSSA_ch+0x710>)
 800a410:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 800a414:	9333      	str	r3, [sp, #204]	; 0xcc
 800a416:	e526      	b.n	8009e66 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 800a418:	4693      	mov	fp, r2
 800a41a:	921d      	str	r2, [sp, #116]	; 0x74
 800a41c:	e510      	b.n	8009e40 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800a41e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a420:	ee18 0a10 	vmov	r0, s16
 800a424:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800a426:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a428:	f8bd b0a4 	ldrh.w	fp, [sp, #164]	; 0xa4
 800a42c:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800a430:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a432:	9503      	str	r5, [sp, #12]
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	465b      	mov	r3, fp
 800a438:	9201      	str	r2, [sp, #4]
 800a43a:	ee18 2a90 	vmov	r2, s17
 800a43e:	f8cd a000 	str.w	sl, [sp]
 800a442:	f002 fdad 	bl	800cfa0 <st_sssa8_ch_convolve_rank1upd>
 800a446:	2101      	movs	r1, #1
 800a448:	9510      	str	r5, [sp, #64]	; 0x40
 800a44a:	910f      	str	r1, [sp, #60]	; 0x3c
 800a44c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a44e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a450:	910e      	str	r1, [sp, #56]	; 0x38
 800a452:	68b3      	ldr	r3, [r6, #8]
 800a454:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800a456:	930d      	str	r3, [sp, #52]	; 0x34
 800a458:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800a45a:	9208      	str	r2, [sp, #32]
 800a45c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a45e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800a460:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a462:	910c      	str	r1, [sp, #48]	; 0x30
 800a464:	ee19 1a10 	vmov	r1, s18
 800a468:	9200      	str	r2, [sp, #0]
 800a46a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a46c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800a470:	edcd 8a01 	vstr	s17, [sp, #4]
 800a474:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 800a478:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	9507      	str	r5, [sp, #28]
 800a480:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800a482:	9506      	str	r5, [sp, #24]
 800a484:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a486:	9505      	str	r5, [sp, #20]
 800a488:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800a48a:	e9cd ba02 	strd	fp, sl, [sp, #8]
 800a48e:	9504      	str	r5, [sp, #16]
 800a490:	f002 ff2c 	bl	800d2ec <st_sssa8_ch_convolve_startNN>
 800a494:	e695      	b.n	800a1c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3d6>
 800a496:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a498:	f50d 7a86 	add.w	sl, sp, #268	; 0x10c
 800a49c:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800a4a0:	ee18 2a10 	vmov	r2, s16
 800a4a4:	9302      	str	r3, [sp, #8]
 800a4a6:	ee18 1a90 	vmov	r1, s17
 800a4aa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800a4ac:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800a4b4:	f8cd b000 	str.w	fp, [sp]
 800a4b8:	f8cd a00c 	str.w	sl, [sp, #12]
 800a4bc:	9340      	str	r3, [sp, #256]	; 0x100
 800a4be:	f002 fdff 	bl	800d0c0 <st_sssa8_ch_convolve_WeightsPrefetch>
 800a4c2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800a4c4:	e650      	b.n	800a168 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 800a4c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a4c8:	ee18 1a90 	vmov	r1, s17
 800a4cc:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800a4d6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800a4d8:	9241      	str	r2, [sp, #260]	; 0x104
 800a4da:	9340      	str	r3, [sp, #256]	; 0x100
 800a4dc:	f000 ff4c 	bl	800b378 <st_sssa8_ch_conv_dw_Wadapt>
 800a4e0:	e9dd 3240 	ldrd	r3, r2, [sp, #256]	; 0x100
 800a4e4:	e73f      	b.n	800a366 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	deff      	udf	#255	; 0xff
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	deff      	udf	#255	; 0xff
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	deff      	udf	#255	; 0xff
 800a4f6:	bf00      	nop
 800a4f8:	00000000 	.word	0x00000000
 800a4fc:	08009de9 	.word	0x08009de9

0800a500 <forward_dense_integer_SSSA>:
 800a500:	6982      	ldr	r2, [r0, #24]
 800a502:	8813      	ldrh	r3, [r2, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80c8 	beq.w	800a69a <forward_dense_integer_SSSA+0x19a>
 800a50a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50e:	6852      	ldr	r2, [r2, #4]
 800a510:	b093      	sub	sp, #76	; 0x4c
 800a512:	6854      	ldr	r4, [r2, #4]
 800a514:	b104      	cbz	r4, 800a518 <forward_dense_integer_SSSA+0x18>
 800a516:	6824      	ldr	r4, [r4, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f000 8161 	beq.w	800a7e0 <forward_dense_integer_SSSA+0x2e0>
 800a51e:	6911      	ldr	r1, [r2, #16]
 800a520:	b101      	cbz	r1, 800a524 <forward_dense_integer_SSSA+0x24>
 800a522:	6809      	ldr	r1, [r1, #0]
 800a524:	2b02      	cmp	r3, #2
 800a526:	f000 815e 	beq.w	800a7e6 <forward_dense_integer_SSSA+0x2e6>
 800a52a:	69d5      	ldr	r5, [r2, #28]
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	f000 8108 	beq.w	800a742 <forward_dense_integer_SSSA+0x242>
 800a532:	8b16      	ldrh	r6, [r2, #24]
 800a534:	6828      	ldr	r0, [r5, #0]
 800a536:	2e01      	cmp	r6, #1
 800a538:	f240 812d 	bls.w	800a796 <forward_dense_integer_SSSA+0x296>
 800a53c:	686d      	ldr	r5, [r5, #4]
 800a53e:	2b03      	cmp	r3, #3
 800a540:	f000 8154 	beq.w	800a7ec <forward_dense_integer_SSSA+0x2ec>
 800a544:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800a548:	69ab      	ldr	r3, [r5, #24]
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	f000 810f 	beq.w	800a770 <forward_dense_integer_SSSA+0x270>
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	68e2      	ldr	r2, [r4, #12]
 800a556:	930b      	str	r3, [sp, #44]	; 0x2c
 800a558:	68cb      	ldr	r3, [r1, #12]
 800a55a:	6856      	ldr	r6, [r2, #4]
 800a55c:	f8d9 9000 	ldr.w	r9, [r9]
 800a560:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a564:	698d      	ldr	r5, [r1, #24]
 800a566:	960f      	str	r6, [sp, #60]	; 0x3c
 800a568:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	fb03 f302 	mul.w	r3, r3, r2
 800a572:	b2b2      	uxth	r2, r6
 800a574:	930c      	str	r3, [sp, #48]	; 0x30
 800a576:	fa1f f38a 	uxth.w	r3, sl
 800a57a:	f1b9 0f00 	cmp.w	r9, #0
 800a57e:	d003      	beq.n	800a588 <forward_dense_integer_SSSA+0x88>
 800a580:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800a584:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800a588:	6827      	ldr	r7, [r4, #0]
 800a58a:	f8d0 b000 	ldr.w	fp, [r0]
 800a58e:	680c      	ldr	r4, [r1, #0]
 800a590:	6981      	ldr	r1, [r0, #24]
 800a592:	2f00      	cmp	r7, #0
 800a594:	f000 8083 	beq.w	800a69e <forward_dense_integer_SSSA+0x19e>
 800a598:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a59c:	f1bc 0f00 	cmp.w	ip, #0
 800a5a0:	f000 80b1 	beq.w	800a706 <forward_dense_integer_SSSA+0x206>
 800a5a4:	8878      	ldrh	r0, [r7, #2]
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f000 809c 	beq.w	800a6e4 <forward_dense_integer_SSSA+0x1e4>
 800a5ac:	f8dc 6000 	ldr.w	r6, [ip]
 800a5b0:	edd6 7a00 	vldr	s15, [r6]
 800a5b4:	2c00      	cmp	r4, #0
 800a5b6:	f000 809a 	beq.w	800a6ee <forward_dense_integer_SSSA+0x1ee>
 800a5ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a5be:	f1b8 0f00 	cmp.w	r8, #0
 800a5c2:	f000 80a9 	beq.w	800a718 <forward_dense_integer_SSSA+0x218>
 800a5c6:	8860      	ldrh	r0, [r4, #2]
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d074      	beq.n	800a6b6 <forward_dense_integer_SSSA+0x1b6>
 800a5cc:	68ae      	ldr	r6, [r5, #8]
 800a5ce:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a5d2:	6889      	ldr	r1, [r1, #8]
 800a5d4:	950d      	str	r5, [sp, #52]	; 0x34
 800a5d6:	f8d8 5000 	ldr.w	r5, [r8]
 800a5da:	ed95 0a00 	vldr	s0, [r5]
 800a5de:	f1bc 0f00 	cmp.w	ip, #0
 800a5e2:	d076      	beq.n	800a6d2 <forward_dense_integer_SSSA+0x1d2>
 800a5e4:	8878      	ldrh	r0, [r7, #2]
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f000 80a3 	beq.w	800a732 <forward_dense_integer_SSSA+0x232>
 800a5ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a5f0:	f990 7000 	ldrsb.w	r7, [r0]
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	f000 80eb 	beq.w	800a7d0 <forward_dense_integer_SSSA+0x2d0>
 800a5fa:	f1b8 0f00 	cmp.w	r8, #0
 800a5fe:	f000 809d 	beq.w	800a73c <forward_dense_integer_SSSA+0x23c>
 800a602:	8860      	ldrh	r0, [r4, #2]
 800a604:	2800      	cmp	r0, #0
 800a606:	d167      	bne.n	800a6d8 <forward_dense_integer_SSSA+0x1d8>
 800a608:	900a      	str	r0, [sp, #40]	; 0x28
 800a60a:	910e      	str	r1, [sp, #56]	; 0x38
 800a60c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a610:	f1bb 0f00 	cmp.w	fp, #0
 800a614:	f000 80de 	beq.w	800a7d4 <forward_dense_integer_SSSA+0x2d4>
 800a618:	f8db 0004 	ldr.w	r0, [fp, #4]
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f000 80d9 	beq.w	800a7d4 <forward_dense_integer_SSSA+0x2d4>
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	2400      	movs	r4, #0
 800a626:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800a62a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800a62e:	9411      	str	r4, [sp, #68]	; 0x44
 800a630:	ed90 7a00 	vldr	s14, [r0]
 800a634:	4640      	mov	r0, r8
 800a636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a63a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a63e:	f000 fde5 	bl	800b20c <align_factor>
 800a642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a644:	9011      	str	r0, [sp, #68]	; 0x44
 800a646:	b32b      	cbz	r3, 800a694 <forward_dense_integer_SSSA+0x194>
 800a648:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a64c:	4699      	mov	r9, r3
 800a64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a650:	fa1f fa8a 	uxth.w	sl, sl
 800a654:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a656:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800a65a:	970d      	str	r7, [sp, #52]	; 0x34
 800a65c:	461f      	mov	r7, r3
 800a65e:	9a08      	ldr	r2, [sp, #32]
 800a660:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a664:	3401      	adds	r4, #1
 800a666:	4628      	mov	r0, r5
 800a668:	9605      	str	r6, [sp, #20]
 800a66a:	9306      	str	r3, [sp, #24]
 800a66c:	4456      	add	r6, sl
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	445d      	add	r5, fp
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a67a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800a67e:	ab11      	add	r3, sp, #68	; 0x44
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	463b      	mov	r3, r7
 800a684:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800a688:	f003 fcec 	bl	800e064 <st_sssa8_fully_connected>
 800a68c:	454c      	cmp	r4, r9
 800a68e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a692:	d1e6      	bne.n	800a662 <forward_dense_integer_SSSA+0x162>
 800a694:	b013      	add	sp, #76	; 0x4c
 800a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	deff      	udf	#255	; 0xff
 800a69e:	2c00      	cmp	r4, #0
 800a6a0:	d056      	beq.n	800a750 <forward_dense_integer_SSSA+0x250>
 800a6a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a6a6:	f1b8 0f00 	cmp.w	r8, #0
 800a6aa:	d05d      	beq.n	800a768 <forward_dense_integer_SSSA+0x268>
 800a6ac:	8860      	ldrh	r0, [r4, #2]
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d173      	bne.n	800a79a <forward_dense_integer_SSSA+0x29a>
 800a6b2:	eddf 7a50 	vldr	s15, [pc, #320]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a6b6:	68ae      	ldr	r6, [r5, #8]
 800a6b8:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a6bc:	6889      	ldr	r1, [r1, #8]
 800a6be:	950d      	str	r5, [sp, #52]	; 0x34
 800a6c0:	2f00      	cmp	r7, #0
 800a6c2:	d041      	beq.n	800a748 <forward_dense_integer_SSSA+0x248>
 800a6c4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a6c8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a6cc:	f1bc 0f00 	cmp.w	ip, #0
 800a6d0:	d188      	bne.n	800a5e4 <forward_dense_integer_SSSA+0xe4>
 800a6d2:	4667      	mov	r7, ip
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d097      	beq.n	800a608 <forward_dense_integer_SSSA+0x108>
 800a6d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6dc:	f990 0000 	ldrsb.w	r0, [r0]
 800a6e0:	900a      	str	r0, [sp, #40]	; 0x28
 800a6e2:	e792      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a6e4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a6e8:	2c00      	cmp	r4, #0
 800a6ea:	f47f af66 	bne.w	800a5ba <forward_dense_integer_SSSA+0xba>
 800a6ee:	68ae      	ldr	r6, [r5, #8]
 800a6f0:	f8de 5008 	ldr.w	r5, [lr, #8]
 800a6f4:	6889      	ldr	r1, [r1, #8]
 800a6f6:	950d      	str	r5, [sp, #52]	; 0x34
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d15a      	bne.n	800a7b2 <forward_dense_integer_SSSA+0x2b2>
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a702:	900a      	str	r0, [sp, #40]	; 0x28
 800a704:	e781      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a706:	b31c      	cbz	r4, 800a750 <forward_dense_integer_SSSA+0x250>
 800a708:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a70c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a710:	f1b8 0f00 	cmp.w	r8, #0
 800a714:	f47f af57 	bne.w	800a5c6 <forward_dense_integer_SSSA+0xc6>
 800a718:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a71c:	68ae      	ldr	r6, [r5, #8]
 800a71e:	6889      	ldr	r1, [r1, #8]
 800a720:	900d      	str	r0, [sp, #52]	; 0x34
 800a722:	f1bc 0f00 	cmp.w	ip, #0
 800a726:	d00e      	beq.n	800a746 <forward_dense_integer_SSSA+0x246>
 800a728:	8878      	ldrh	r0, [r7, #2]
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d149      	bne.n	800a7c2 <forward_dense_integer_SSSA+0x2c2>
 800a72e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a732:	2700      	movs	r7, #0
 800a734:	f1b8 0f00 	cmp.w	r8, #0
 800a738:	f47f af63 	bne.w	800a602 <forward_dense_integer_SSSA+0x102>
 800a73c:	2000      	movs	r0, #0
 800a73e:	900a      	str	r0, [sp, #40]	; 0x28
 800a740:	e763      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a742:	4628      	mov	r0, r5
 800a744:	e6fb      	b.n	800a53e <forward_dense_integer_SSSA+0x3e>
 800a746:	4667      	mov	r7, ip
 800a748:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a74c:	970a      	str	r7, [sp, #40]	; 0x28
 800a74e:	e75c      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a750:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a754:	4627      	mov	r7, r4
 800a756:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a75a:	eeb0 0a67 	vmov.f32	s0, s15
 800a75e:	68ae      	ldr	r6, [r5, #8]
 800a760:	6889      	ldr	r1, [r1, #8]
 800a762:	900d      	str	r0, [sp, #52]	; 0x34
 800a764:	970a      	str	r7, [sp, #40]	; 0x28
 800a766:	e750      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a768:	eddf 7a22 	vldr	s15, [pc, #136]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a76c:	4647      	mov	r7, r8
 800a76e:	e7f2      	b.n	800a756 <forward_dense_integer_SSSA+0x256>
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	68e2      	ldr	r2, [r4, #12]
 800a774:	930b      	str	r3, [sp, #44]	; 0x2c
 800a776:	68cb      	ldr	r3, [r1, #12]
 800a778:	6856      	ldr	r6, [r2, #4]
 800a77a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a77e:	698d      	ldr	r5, [r1, #24]
 800a780:	960f      	str	r6, [sp, #60]	; 0x3c
 800a782:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	fb03 f302 	mul.w	r3, r3, r2
 800a78c:	b2b2      	uxth	r2, r6
 800a78e:	930c      	str	r3, [sp, #48]	; 0x30
 800a790:	fa1f f38a 	uxth.w	r3, sl
 800a794:	e6f8      	b.n	800a588 <forward_dense_integer_SSSA+0x88>
 800a796:	2500      	movs	r5, #0
 800a798:	e6d1      	b.n	800a53e <forward_dense_integer_SSSA+0x3e>
 800a79a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800a79e:	68ae      	ldr	r6, [r5, #8]
 800a7a0:	900d      	str	r0, [sp, #52]	; 0x34
 800a7a2:	f8d8 0000 	ldr.w	r0, [r8]
 800a7a6:	6889      	ldr	r1, [r1, #8]
 800a7a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a7ac:	ed90 0a00 	vldr	s0, [r0]
 800a7b0:	e792      	b.n	800a6d8 <forward_dense_integer_SSSA+0x1d8>
 800a7b2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a7b6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a7ba:	f990 7000 	ldrsb.w	r7, [r0]
 800a7be:	940a      	str	r4, [sp, #40]	; 0x28
 800a7c0:	e723      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a7c2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800a7c6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800a7f4 <forward_dense_integer_SSSA+0x2f4>
 800a7ca:	f990 7000 	ldrsb.w	r7, [r0]
 800a7ce:	e7b5      	b.n	800a73c <forward_dense_integer_SSSA+0x23c>
 800a7d0:	940a      	str	r4, [sp, #40]	; 0x28
 800a7d2:	e71a      	b.n	800a60a <forward_dense_integer_SSSA+0x10a>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800a7da:	9311      	str	r3, [sp, #68]	; 0x44
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	deff      	udf	#255	; 0xff
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	deff      	udf	#255	; 0xff
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	deff      	udf	#255	; 0xff
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	deff      	udf	#255	; 0xff
 800a7f2:	bf00      	nop
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <nl_func_sm_channel_f32>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	ed2d 8b02 	vpush	{d8}
 800a800:	6989      	ldr	r1, [r1, #24]
 800a802:	2a01      	cmp	r2, #1
 800a804:	6983      	ldr	r3, [r0, #24]
 800a806:	4617      	mov	r7, r2
 800a808:	688d      	ldr	r5, [r1, #8]
 800a80a:	689e      	ldr	r6, [r3, #8]
 800a80c:	ed95 8a00 	vldr	s16, [r5]
 800a810:	d930      	bls.n	800a874 <nl_func_sm_channel_f32+0x7c>
 800a812:	1d2b      	adds	r3, r5, #4
 800a814:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800a818:	ecf3 7a01 	vldmia	r3!, {s15}
 800a81c:	429a      	cmp	r2, r3
 800a81e:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800a822:	d1f9      	bne.n	800a818 <nl_func_sm_channel_f32+0x20>
 800a824:	2400      	movs	r4, #0
 800a826:	eddf 8a16 	vldr	s17, [pc, #88]	; 800a880 <nl_func_sm_channel_f32+0x88>
 800a82a:	46b0      	mov	r8, r6
 800a82c:	ecb5 0a01 	vldmia	r5!, {s0}
 800a830:	3401      	adds	r4, #1
 800a832:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a836:	f00b fced 	bl	8016214 <expf>
 800a83a:	42a7      	cmp	r7, r4
 800a83c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a840:	eca8 0a01 	vstmia	r8!, {s0}
 800a844:	d8f2      	bhi.n	800a82c <nl_func_sm_channel_f32+0x34>
 800a846:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84e:	d00d      	beq.n	800a86c <nl_func_sm_channel_f32+0x74>
 800a850:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a854:	2300      	movs	r3, #0
 800a856:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800a85a:	edd6 7a00 	vldr	s15, [r6]
 800a85e:	3301      	adds	r3, #1
 800a860:	429f      	cmp	r7, r3
 800a862:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a866:	ece6 7a01 	vstmia	r6!, {s15}
 800a86a:	d8f6      	bhi.n	800a85a <nl_func_sm_channel_f32+0x62>
 800a86c:	ecbd 8b02 	vpop	{d8}
 800a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a874:	2a00      	cmp	r2, #0
 800a876:	d1d5      	bne.n	800a824 <nl_func_sm_channel_f32+0x2c>
 800a878:	ecbd 8b02 	vpop	{d8}
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	00000000 	.word	0x00000000

0800a884 <forward_sm>:
 800a884:	6982      	ldr	r2, [r0, #24]
 800a886:	8813      	ldrh	r3, [r2, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d054      	beq.n	800a936 <forward_sm+0xb2>
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	6852      	ldr	r2, [r2, #4]
 800a892:	b083      	sub	sp, #12
 800a894:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	d001      	beq.n	800a8a2 <forward_sm+0x1e>
 800a89e:	f8d8 8000 	ldr.w	r8, [r8]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d04b      	beq.n	800a93e <forward_sm+0xba>
 800a8a6:	6913      	ldr	r3, [r2, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d04b      	beq.n	800a944 <forward_sm+0xc0>
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8b2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a8b6:	68c2      	ldr	r2, [r0, #12]
 800a8b8:	0a1b      	lsrs	r3, r3, #8
 800a8ba:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800a8be:	6857      	ldr	r7, [r2, #4]
 800a8c0:	d03b      	beq.n	800a93a <forward_sm+0xb6>
 800a8c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a8c6:	2501      	movs	r5, #1
 800a8c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	fb02 f505 	mul.w	r5, r2, r5
 800a8d2:	d1f9      	bne.n	800a8c8 <forward_sm+0x44>
 800a8d4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800a8d8:	eba5 030a 	sub.w	r3, r5, sl
 800a8dc:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800a8e0:	1bed      	subs	r5, r5, r7
 800a8e2:	68b4      	ldr	r4, [r6, #8]
 800a8e4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a8e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a8ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a8f0:	68f3      	ldr	r3, [r6, #12]
 800a8f2:	429c      	cmp	r4, r3
 800a8f4:	d317      	bcc.n	800a926 <forward_sm+0xa2>
 800a8f6:	00bf      	lsls	r7, r7, #2
 800a8f8:	4652      	mov	r2, sl
 800a8fa:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800a8fe:	427f      	negs	r7, r7
 800a900:	f1cb 0b00 	rsb	fp, fp, #0
 800a904:	46ba      	mov	sl, r7
 800a906:	4607      	mov	r7, r0
 800a908:	60b4      	str	r4, [r6, #8]
 800a90a:	2300      	movs	r3, #0
 800a90c:	f8c9 5008 	str.w	r5, [r9, #8]
 800a910:	4641      	mov	r1, r8
 800a912:	4638      	mov	r0, r7
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	445c      	add	r4, fp
 800a918:	f7ff ff6e 	bl	800a7f8 <nl_func_sm_channel_f32>
 800a91c:	68f3      	ldr	r3, [r6, #12]
 800a91e:	4455      	add	r5, sl
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	429c      	cmp	r4, r3
 800a924:	d2f0      	bcs.n	800a908 <forward_sm+0x84>
 800a926:	60b3      	str	r3, [r6, #8]
 800a928:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a92c:	f8c9 3008 	str.w	r3, [r9, #8]
 800a930:	b003      	add	sp, #12
 800a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	deff      	udf	#255	; 0xff
 800a93a:	2501      	movs	r5, #1
 800a93c:	e7ca      	b.n	800a8d4 <forward_sm+0x50>
 800a93e:	2300      	movs	r3, #0
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	deff      	udf	#255	; 0xff
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	deff      	udf	#255	; 0xff

0800a948 <forward_pad>:
 800a948:	6982      	ldr	r2, [r0, #24]
 800a94a:	8813      	ldrh	r3, [r2, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d052      	beq.n	800a9f6 <forward_pad+0xae>
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	ed2d 8b02 	vpush	{d8}
 800a958:	6852      	ldr	r2, [r2, #4]
 800a95a:	b091      	sub	sp, #68	; 0x44
 800a95c:	6857      	ldr	r7, [r2, #4]
 800a95e:	b107      	cbz	r7, 800a962 <forward_pad+0x1a>
 800a960:	683f      	ldr	r7, [r7, #0]
 800a962:	2b01      	cmp	r3, #1
 800a964:	f000 81e7 	beq.w	800ad36 <forward_pad+0x3ee>
 800a968:	6913      	ldr	r3, [r2, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 81e1 	beq.w	800ad32 <forward_pad+0x3ea>
 800a970:	681d      	ldr	r5, [r3, #0]
 800a972:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800a976:	68aa      	ldr	r2, [r5, #8]
 800a978:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a97a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a97e:	f8de 100c 	ldr.w	r1, [lr, #12]
 800a982:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a986:	bf38      	it	cc
 800a988:	2201      	movcc	r2, #1
 800a98a:	9102      	str	r1, [sp, #8]
 800a98c:	bf28      	it	cs
 800a98e:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 800a992:	f9b6 1000 	ldrsh.w	r1, [r6]
 800a996:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800a99a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 800a99e:	9103      	str	r1, [sp, #12]
 800a9a0:	9201      	str	r2, [sp, #4]
 800a9a2:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800a9a6:	7f03      	ldrb	r3, [r0, #28]
 800a9a8:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	6895      	ldr	r5, [r2, #8]
 800a9b0:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800a9b4:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 800a9b8:	68f7      	ldr	r7, [r6, #12]
 800a9ba:	f8dc 8008 	ldr.w	r8, [ip, #8]
 800a9be:	fb07 f404 	mul.w	r4, r7, r4
 800a9c2:	463e      	mov	r6, r7
 800a9c4:	9708      	str	r7, [sp, #32]
 800a9c6:	9f03      	ldr	r7, [sp, #12]
 800a9c8:	940d      	str	r4, [sp, #52]	; 0x34
 800a9ca:	fb06 f607 	mul.w	r6, r6, r7
 800a9ce:	68d4      	ldr	r4, [r2, #12]
 800a9d0:	fb0b f709 	mul.w	r7, fp, r9
 800a9d4:	9405      	str	r4, [sp, #20]
 800a9d6:	960c      	str	r6, [sp, #48]	; 0x30
 800a9d8:	6894      	ldr	r4, [r2, #8]
 800a9da:	fb0b f601 	mul.w	r6, fp, r1
 800a9de:	d00c      	beq.n	800a9fa <forward_pad+0xb2>
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	f000 8106 	beq.w	800abf2 <forward_pad+0x2aa>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80a8 	beq.w	800ab3c <forward_pad+0x1f4>
 800a9ec:	b011      	add	sp, #68	; 0x44
 800a9ee:	ecbd 8b02 	vpop	{d8}
 800a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	deff      	udf	#255	; 0xff
 800a9fa:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a9fe:	930e      	str	r3, [sp, #56]	; 0x38
 800aa00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa02:	eb05 0903 	add.w	r9, r5, r3
 800aa06:	9b02      	ldr	r3, [sp, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dd6a      	ble.n	800aae2 <forward_pad+0x19a>
 800aa0c:	f8de 3008 	ldr.w	r3, [lr, #8]
 800aa10:	ee08 8a10 	vmov	s16, r8
 800aa14:	9805      	ldr	r0, [sp, #20]
 800aa16:	4419      	add	r1, r3
 800aa18:	f8da 2008 	ldr.w	r2, [sl, #8]
 800aa1c:	4407      	add	r7, r0
 800aa1e:	9801      	ldr	r0, [sp, #4]
 800aa20:	950f      	str	r5, [sp, #60]	; 0x3c
 800aa22:	fb01 f000 	mul.w	r0, r1, r0
 800aa26:	4601      	mov	r1, r0
 800aa28:	9007      	str	r0, [sp, #28]
 800aa2a:	19b8      	adds	r0, r7, r6
 800aa2c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2e:	eb09 0006 	add.w	r0, r9, r6
 800aa32:	9e03      	ldr	r6, [sp, #12]
 800aa34:	9001      	str	r0, [sp, #4]
 800aa36:	4608      	mov	r0, r1
 800aa38:	4611      	mov	r1, r2
 800aa3a:	fb02 0206 	mla	r2, r2, r6, r0
 800aa3e:	460f      	mov	r7, r1
 800aa40:	fb0b 5202 	mla	r2, fp, r2, r5
 800aa44:	9204      	str	r2, [sp, #16]
 800aa46:	1e9a      	subs	r2, r3, #2
 800aa48:	fb04 f303 	mul.w	r3, r4, r3
 800aa4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4e:	fb04 8302 	mla	r3, r4, r2, r8
 800aa52:	9303      	str	r3, [sp, #12]
 800aa54:	fb0b f301 	mul.w	r3, fp, r1
 800aa58:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9306      	str	r3, [sp, #24]
 800aa5e:	f1cb 0300 	rsb	r3, fp, #0
 800aa62:	4698      	mov	r8, r3
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	454b      	cmp	r3, r9
 800aa68:	d00b      	beq.n	800aa82 <forward_pad+0x13a>
 800aa6a:	ee18 5a10 	vmov	r5, s16
 800aa6e:	4443      	add	r3, r8
 800aa70:	4425      	add	r5, r4
 800aa72:	4622      	mov	r2, r4
 800aa74:	4618      	mov	r0, r3
 800aa76:	4629      	mov	r1, r5
 800aa78:	f008 fcbe 	bl	80133f8 <memcpy>
 800aa7c:	4548      	cmp	r0, r9
 800aa7e:	4603      	mov	r3, r0
 800aa80:	d1f5      	bne.n	800aa6e <forward_pad+0x126>
 800aa82:	ee18 3a10 	vmov	r3, s16
 800aa86:	9a05      	ldr	r2, [sp, #20]
 800aa88:	ee18 1a10 	vmov	r1, s16
 800aa8c:	9801      	ldr	r0, [sp, #4]
 800aa8e:	4413      	add	r3, r2
 800aa90:	ee08 3a10 	vmov	s16, r3
 800aa94:	f008 fcb0 	bl	80133f8 <memcpy>
 800aa98:	9b07      	ldr	r3, [sp, #28]
 800aa9a:	429f      	cmp	r7, r3
 800aa9c:	dd0d      	ble.n	800aaba <forward_pad+0x172>
 800aa9e:	461d      	mov	r5, r3
 800aaa0:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	4651      	mov	r1, sl
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4622      	mov	r2, r4
 800aaac:	f008 fca4 	bl	80133f8 <memcpy>
 800aab0:	42af      	cmp	r7, r5
 800aab2:	ebaa 0a04 	sub.w	sl, sl, r4
 800aab6:	445e      	add	r6, fp
 800aab8:	d1f4      	bne.n	800aaa4 <forward_pad+0x15c>
 800aaba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aabc:	9901      	ldr	r1, [sp, #4]
 800aabe:	4491      	add	r9, r2
 800aac0:	9b06      	ldr	r3, [sp, #24]
 800aac2:	4411      	add	r1, r2
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	3301      	adds	r3, #1
 800aac8:	9101      	str	r1, [sp, #4]
 800aaca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aacc:	9306      	str	r3, [sp, #24]
 800aace:	440a      	add	r2, r1
 800aad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aad2:	9204      	str	r2, [sp, #16]
 800aad4:	9a03      	ldr	r2, [sp, #12]
 800aad6:	440a      	add	r2, r1
 800aad8:	9203      	str	r2, [sp, #12]
 800aada:	9a02      	ldr	r2, [sp, #8]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d1c1      	bne.n	800aa64 <forward_pad+0x11c>
 800aae0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae4:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800aae8:	42a5      	cmp	r5, r4
 800aaea:	d00c      	beq.n	800ab06 <forward_pad+0x1be>
 800aaec:	9b08      	ldr	r3, [sp, #32]
 800aaee:	462e      	mov	r6, r5
 800aaf0:	425f      	negs	r7, r3
 800aaf2:	4698      	mov	r8, r3
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	443c      	add	r4, r7
 800aafa:	4446      	add	r6, r8
 800aafc:	4642      	mov	r2, r8
 800aafe:	f008 fc7b 	bl	80133f8 <memcpy>
 800ab02:	42a6      	cmp	r6, r4
 800ab04:	d1f6      	bne.n	800aaf4 <forward_pad+0x1ac>
 800ab06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab08:	9a08      	ldr	r2, [sp, #32]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	fb02 5503 	mla	r5, r2, r3, r5
 800ab10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab12:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 800ab16:	42a5      	cmp	r5, r4
 800ab18:	f43f af68 	beq.w	800a9ec <forward_pad+0xa4>
 800ab1c:	4617      	mov	r7, r2
 800ab1e:	4256      	negs	r6, r2
 800ab20:	4621      	mov	r1, r4
 800ab22:	4628      	mov	r0, r5
 800ab24:	443c      	add	r4, r7
 800ab26:	4435      	add	r5, r6
 800ab28:	463a      	mov	r2, r7
 800ab2a:	f008 fc65 	bl	80133f8 <memcpy>
 800ab2e:	42a5      	cmp	r5, r4
 800ab30:	d1f6      	bne.n	800ab20 <forward_pad+0x1d8>
 800ab32:	b011      	add	sp, #68	; 0x44
 800ab34:	ecbd 8b02 	vpop	{d8}
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	f8dc 1000 	ldr.w	r1, [ip]
 800ab40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab42:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800ab46:	2908      	cmp	r1, #8
 800ab48:	f000 80b5 	beq.w	800acb6 <forward_pad+0x36e>
 800ab4c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800ab50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab52:	2a00      	cmp	r2, #0
 800ab54:	dd0a      	ble.n	800ab6c <forward_pad+0x224>
 800ab56:	4693      	mov	fp, r2
 800ab58:	469a      	mov	sl, r3
 800ab5a:	44ca      	add	sl, r9
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	464a      	mov	r2, r9
 800ab60:	68a1      	ldr	r1, [r4, #8]
 800ab62:	f008 fc49 	bl	80133f8 <memcpy>
 800ab66:	45d3      	cmp	fp, sl
 800ab68:	444d      	add	r5, r9
 800ab6a:	dcf6      	bgt.n	800ab5a <forward_pad+0x212>
 800ab6c:	9b02      	ldr	r3, [sp, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	dd2c      	ble.n	800abcc <forward_pad+0x284>
 800ab72:	f04f 0a00 	mov.w	sl, #0
 800ab76:	f8dd b014 	ldr.w	fp, [sp, #20]
 800ab7a:	f8cd a004 	str.w	sl, [sp, #4]
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	dd0a      	ble.n	800ab98 <forward_pad+0x250>
 800ab82:	f04f 0a00 	mov.w	sl, #0
 800ab86:	44ca      	add	sl, r9
 800ab88:	4628      	mov	r0, r5
 800ab8a:	464a      	mov	r2, r9
 800ab8c:	68a1      	ldr	r1, [r4, #8]
 800ab8e:	f008 fc33 	bl	80133f8 <memcpy>
 800ab92:	4556      	cmp	r6, sl
 800ab94:	444d      	add	r5, r9
 800ab96:	dcf6      	bgt.n	800ab86 <forward_pad+0x23e>
 800ab98:	4641      	mov	r1, r8
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	465a      	mov	r2, fp
 800ab9e:	44d8      	add	r8, fp
 800aba0:	f008 fc2a 	bl	80133f8 <memcpy>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	445d      	add	r5, fp
 800aba8:	dd0a      	ble.n	800abc0 <forward_pad+0x278>
 800abaa:	f04f 0a00 	mov.w	sl, #0
 800abae:	44ca      	add	sl, r9
 800abb0:	4628      	mov	r0, r5
 800abb2:	464a      	mov	r2, r9
 800abb4:	68a1      	ldr	r1, [r4, #8]
 800abb6:	f008 fc1f 	bl	80133f8 <memcpy>
 800abba:	4557      	cmp	r7, sl
 800abbc:	444d      	add	r5, r9
 800abbe:	dcf6      	bgt.n	800abae <forward_pad+0x266>
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	9a02      	ldr	r2, [sp, #8]
 800abc4:	3301      	adds	r3, #1
 800abc6:	429a      	cmp	r2, r3
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	d1d8      	bne.n	800ab7e <forward_pad+0x236>
 800abcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800abce:	2f00      	cmp	r7, #0
 800abd0:	f77f af0c 	ble.w	800a9ec <forward_pad+0xa4>
 800abd4:	2600      	movs	r6, #0
 800abd6:	444e      	add	r6, r9
 800abd8:	4628      	mov	r0, r5
 800abda:	464a      	mov	r2, r9
 800abdc:	68a1      	ldr	r1, [r4, #8]
 800abde:	f008 fc0b 	bl	80133f8 <memcpy>
 800abe2:	42b7      	cmp	r7, r6
 800abe4:	444d      	add	r5, r9
 800abe6:	dcf6      	bgt.n	800abd6 <forward_pad+0x28e>
 800abe8:	b011      	add	sp, #68	; 0x44
 800abea:	ecbd 8b02 	vpop	{d8}
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	442f      	add	r7, r5
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	9706      	str	r7, [sp, #24]
 800abfc:	dd32      	ble.n	800ac64 <forward_pad+0x31c>
 800abfe:	fb04 f309 	mul.w	r3, r4, r9
 800ac02:	9507      	str	r5, [sp, #28]
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	dd09      	ble.n	800ac22 <forward_pad+0x2da>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	4425      	add	r5, r4
 800ac12:	4638      	mov	r0, r7
 800ac14:	4622      	mov	r2, r4
 800ac16:	4641      	mov	r1, r8
 800ac18:	f008 fbee 	bl	80133f8 <memcpy>
 800ac1c:	42ae      	cmp	r6, r5
 800ac1e:	4427      	add	r7, r4
 800ac20:	dcf6      	bgt.n	800ac10 <forward_pad+0x2c8>
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	4641      	mov	r1, r8
 800ac26:	4638      	mov	r0, r7
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4498      	add	r8, r3
 800ac2c:	441f      	add	r7, r3
 800ac2e:	f008 fbe3 	bl	80133f8 <memcpy>
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	eba8 0a04 	sub.w	sl, r8, r4
 800ac3a:	dd0c      	ble.n	800ac56 <forward_pad+0x30e>
 800ac3c:	46bb      	mov	fp, r7
 800ac3e:	2500      	movs	r5, #0
 800ac40:	3501      	adds	r5, #1
 800ac42:	4658      	mov	r0, fp
 800ac44:	4622      	mov	r2, r4
 800ac46:	4651      	mov	r1, sl
 800ac48:	f008 fbd6 	bl	80133f8 <memcpy>
 800ac4c:	45a9      	cmp	r9, r5
 800ac4e:	44a3      	add	fp, r4
 800ac50:	d1f6      	bne.n	800ac40 <forward_pad+0x2f8>
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	441f      	add	r7, r3
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	9a02      	ldr	r2, [sp, #8]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	d1d3      	bne.n	800ac0a <forward_pad+0x2c2>
 800ac62:	9d07      	ldr	r5, [sp, #28]
 800ac64:	9b06      	ldr	r3, [sp, #24]
 800ac66:	429d      	cmp	r5, r3
 800ac68:	d00a      	beq.n	800ac80 <forward_pad+0x338>
 800ac6a:	461f      	mov	r7, r3
 800ac6c:	462c      	mov	r4, r5
 800ac6e:	9e08      	ldr	r6, [sp, #32]
 800ac70:	4620      	mov	r0, r4
 800ac72:	4434      	add	r4, r6
 800ac74:	4632      	mov	r2, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f008 fbbe 	bl	80133f8 <memcpy>
 800ac7c:	42a7      	cmp	r7, r4
 800ac7e:	d1f7      	bne.n	800ac70 <forward_pad+0x328>
 800ac80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ac82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac86:	4413      	add	r3, r2
 800ac88:	9a08      	ldr	r2, [sp, #32]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	fb02 5503 	mla	r5, r2, r3, r5
 800ac90:	442c      	add	r4, r5
 800ac92:	42a5      	cmp	r5, r4
 800ac94:	f43f aeaa 	beq.w	800a9ec <forward_pad+0xa4>
 800ac98:	4617      	mov	r7, r2
 800ac9a:	4256      	negs	r6, r2
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4434      	add	r4, r6
 800aca0:	463a      	mov	r2, r7
 800aca2:	4629      	mov	r1, r5
 800aca4:	f008 fba8 	bl	80133f8 <memcpy>
 800aca8:	42a5      	cmp	r5, r4
 800acaa:	d1f7      	bne.n	800ac9c <forward_pad+0x354>
 800acac:	b011      	add	sp, #68	; 0x44
 800acae:	ecbd 8b02 	vpop	{d8}
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	68a2      	ldr	r2, [r4, #8]
 800acb8:	4629      	mov	r1, r5
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	f992 9000 	ldrsb.w	r9, [r2]
 800acc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acc2:	4648      	mov	r0, r9
 800acc4:	18ac      	adds	r4, r5, r2
 800acc6:	9403      	str	r4, [sp, #12]
 800acc8:	f006 ffc0 	bl	8011c4c <st_int8_fill>
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dd25      	ble.n	800ad1e <forward_pad+0x3d6>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	eb06 0a07 	add.w	sl, r6, r7
 800acd8:	4625      	mov	r5, r4
 800acda:	9601      	str	r6, [sp, #4]
 800acdc:	469b      	mov	fp, r3
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	4434      	add	r4, r6
 800ace2:	449a      	add	sl, r3
 800ace4:	461e      	mov	r6, r3
 800ace6:	4629      	mov	r1, r5
 800ace8:	9a01      	ldr	r2, [sp, #4]
 800acea:	4648      	mov	r0, r9
 800acec:	f10b 0b01 	add.w	fp, fp, #1
 800acf0:	f006 ffac 	bl	8011c4c <st_int8_fill>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4640      	mov	r0, r8
 800acf8:	4632      	mov	r2, r6
 800acfa:	f007 f80f 	bl	8011d1c <st_int8_copy>
 800acfe:	19a1      	adds	r1, r4, r6
 800ad00:	463a      	mov	r2, r7
 800ad02:	4648      	mov	r0, r9
 800ad04:	f006 ffa2 	bl	8011c4c <st_int8_fill>
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	4455      	add	r5, sl
 800ad0c:	44b0      	add	r8, r6
 800ad0e:	455b      	cmp	r3, fp
 800ad10:	4454      	add	r4, sl
 800ad12:	d1e8      	bne.n	800ace6 <forward_pad+0x39e>
 800ad14:	461a      	mov	r2, r3
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	fb0a 3302 	mla	r3, sl, r2, r3
 800ad1c:	9303      	str	r3, [sp, #12]
 800ad1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad20:	4648      	mov	r0, r9
 800ad22:	9903      	ldr	r1, [sp, #12]
 800ad24:	b011      	add	sp, #68	; 0x44
 800ad26:	ecbd 8b02 	vpop	{d8}
 800ad2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2e:	f006 bf8d 	b.w	8011c4c <st_int8_fill>
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	deff      	udf	#255	; 0xff
 800ad36:	2300      	movs	r3, #0
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	deff      	udf	#255	; 0xff

0800ad3c <ai_check_custom_types>:
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <ai_check_custom_types+0x4c>)
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	b118      	cbz	r0, 800ad4c <ai_check_custom_types+0x10>
 800ad44:	7803      	ldrb	r3, [r0, #0]
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d002      	beq.n	800ad50 <ai_check_custom_types+0x14>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	b002      	add	sp, #8
 800ad4e:	4770      	bx	lr
 800ad50:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d004      	beq.n	800ad62 <ai_check_custom_types+0x26>
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f080 0001 	eor.w	r0, r0, #1
 800ad5e:	b002      	add	sp, #8
 800ad60:	4770      	bx	lr
 800ad62:	7842      	ldrb	r2, [r0, #1]
 800ad64:	3001      	adds	r0, #1
 800ad66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d1f4      	bne.n	800ad58 <ai_check_custom_types+0x1c>
 800ad6e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ad72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d1ee      	bne.n	800ad58 <ai_check_custom_types+0x1c>
 800ad7a:	7842      	ldrb	r2, [r0, #1]
 800ad7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d1e9      	bne.n	800ad58 <ai_check_custom_types+0x1c>
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7e8      	b.n	800ad5a <ai_check_custom_types+0x1e>
 800ad88:	84048403 	.word	0x84048403

0800ad8c <ai_layers_init_all>:
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ad90:	b13b      	cbz	r3, 800ada2 <ai_layers_init_all+0x16>
 800ad92:	691a      	ldr	r2, [r3, #16]
 800ad94:	3101      	adds	r1, #1
 800ad96:	60d8      	str	r0, [r3, #12]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	d001      	beq.n	800ada2 <ai_layers_init_all+0x16>
 800ad9e:	2a00      	cmp	r2, #0
 800ada0:	d1f6      	bne.n	800ad90 <ai_layers_init_all+0x4>
 800ada2:	4608      	mov	r0, r1
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop

0800ada8 <ai_layers_post_init_all>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	2500      	movs	r5, #0
 800adac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800adae:	b16c      	cbz	r4, 800adcc <ai_layers_post_init_all+0x24>
 800adb0:	6863      	ldr	r3, [r4, #4]
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d504      	bpl.n	800adc0 <ai_layers_post_init_all+0x18>
 800adb6:	6a23      	ldr	r3, [r4, #32]
 800adb8:	4620      	mov	r0, r4
 800adba:	b10b      	cbz	r3, 800adc0 <ai_layers_post_init_all+0x18>
 800adbc:	3501      	adds	r5, #1
 800adbe:	4798      	blx	r3
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	461c      	mov	r4, r3
 800adc6:	d001      	beq.n	800adcc <ai_layers_post_init_all+0x24>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f0      	bne.n	800adae <ai_layers_post_init_all+0x6>
 800adcc:	4628      	mov	r0, r5
 800adce:	bd38      	pop	{r3, r4, r5, pc}

0800add0 <ai_layers_forward_all>:
 800add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800add6:	4604      	mov	r4, r0
 800add8:	2f00      	cmp	r7, #0
 800adda:	d02c      	beq.n	800ae36 <ai_layers_forward_all+0x66>
 800addc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800adde:	b1e1      	cbz	r1, 800ae1a <ai_layers_forward_all+0x4a>
 800ade0:	2600      	movs	r6, #0
 800ade2:	6381      	str	r1, [r0, #56]	; 0x38
 800ade4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ade6:	2001      	movs	r0, #1
 800ade8:	47b8      	blx	r7
 800adea:	46b0      	mov	r8, r6
 800adec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800adf0:	2002      	movs	r0, #2
 800adf2:	47b8      	blx	r7
 800adf4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800adf6:	4628      	mov	r0, r5
 800adf8:	696b      	ldr	r3, [r5, #20]
 800adfa:	4798      	blx	r3
 800adfc:	692b      	ldr	r3, [r5, #16]
 800adfe:	2003      	movs	r0, #3
 800ae00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae02:	429d      	cmp	r5, r3
 800ae04:	4619      	mov	r1, r3
 800ae06:	d00c      	beq.n	800ae22 <ai_layers_forward_all+0x52>
 800ae08:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	47b8      	blx	r7
 800ae0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d1ec      	bne.n	800adee <ai_layers_forward_all+0x1e>
 800ae14:	4630      	mov	r0, r6
 800ae16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1a:	460e      	mov	r6, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae22:	2100      	movs	r1, #0
 800ae24:	2003      	movs	r0, #3
 800ae26:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800ae2a:	3601      	adds	r6, #1
 800ae2c:	47b8      	blx	r7
 800ae2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae30:	2900      	cmp	r1, #0
 800ae32:	d1dc      	bne.n	800adee <ai_layers_forward_all+0x1e>
 800ae34:	e7ee      	b.n	800ae14 <ai_layers_forward_all+0x44>
 800ae36:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ae38:	b19d      	cbz	r5, 800ae62 <ai_layers_forward_all+0x92>
 800ae3a:	463e      	mov	r6, r7
 800ae3c:	6385      	str	r5, [r0, #56]	; 0x38
 800ae3e:	e003      	b.n	800ae48 <ai_layers_forward_all+0x78>
 800ae40:	3601      	adds	r6, #1
 800ae42:	63a5      	str	r5, [r4, #56]	; 0x38
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	d0e5      	beq.n	800ae14 <ai_layers_forward_all+0x44>
 800ae48:	696b      	ldr	r3, [r5, #20]
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	4798      	blx	r3
 800ae4e:	462b      	mov	r3, r5
 800ae50:	692d      	ldr	r5, [r5, #16]
 800ae52:	429d      	cmp	r5, r3
 800ae54:	d1f4      	bne.n	800ae40 <ai_layers_forward_all+0x70>
 800ae56:	2300      	movs	r3, #0
 800ae58:	3601      	adds	r6, #1
 800ae5a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae62:	462e      	mov	r6, r5
 800ae64:	e7d6      	b.n	800ae14 <ai_layers_forward_all+0x44>
 800ae66:	bf00      	nop

0800ae68 <pool_func_ap_array_integer_INT8>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	b093      	sub	sp, #76	; 0x4c
 800ae6e:	468c      	mov	ip, r1
 800ae70:	469a      	mov	sl, r3
 800ae72:	6804      	ldr	r4, [r0, #0]
 800ae74:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800ae78:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800ae7c:	910e      	str	r1, [sp, #56]	; 0x38
 800ae7e:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800ae82:	930d      	str	r3, [sp, #52]	; 0x34
 800ae84:	910f      	str	r1, [sp, #60]	; 0x3c
 800ae86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae88:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800ae8c:	6980      	ldr	r0, [r0, #24]
 800ae8e:	9110      	str	r1, [sp, #64]	; 0x40
 800ae90:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800ae94:	6999      	ldr	r1, [r3, #24]
 800ae96:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
 800ae9a:	f8bd e088 	ldrh.w	lr, [sp, #136]	; 0x88
 800ae9e:	f8bd 808c 	ldrh.w	r8, [sp, #140]	; 0x8c
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2c00      	cmp	r4, #0
 800aea6:	d05c      	beq.n	800af62 <pool_func_ap_array_integer_INT8+0xfa>
 800aea8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aeac:	f1b9 0f00 	cmp.w	r9, #0
 800aeb0:	d041      	beq.n	800af36 <pool_func_ap_array_integer_INT8+0xce>
 800aeb2:	8865      	ldrh	r5, [r4, #2]
 800aeb4:	2d00      	cmp	r5, #0
 800aeb6:	d06d      	beq.n	800af94 <pool_func_ap_array_integer_INT8+0x12c>
 800aeb8:	f8d9 6000 	ldr.w	r6, [r9]
 800aebc:	ed96 0a00 	vldr	s0, [r6]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d06b      	beq.n	800af9c <pool_func_ap_array_integer_INT8+0x134>
 800aec4:	685e      	ldr	r6, [r3, #4]
 800aec6:	2e00      	cmp	r6, #0
 800aec8:	d03c      	beq.n	800af44 <pool_func_ap_array_integer_INT8+0xdc>
 800aeca:	885d      	ldrh	r5, [r3, #2]
 800aecc:	9511      	str	r5, [sp, #68]	; 0x44
 800aece:	2d00      	cmp	r5, #0
 800aed0:	d050      	beq.n	800af74 <pool_func_ap_array_integer_INT8+0x10c>
 800aed2:	6835      	ldr	r5, [r6, #0]
 800aed4:	6880      	ldr	r0, [r0, #8]
 800aed6:	6889      	ldr	r1, [r1, #8]
 800aed8:	edd5 0a00 	vldr	s1, [r5]
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	d052      	beq.n	800af88 <pool_func_ap_array_integer_INT8+0x120>
 800aee2:	8864      	ldrh	r4, [r4, #2]
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d037      	beq.n	800af58 <pool_func_ap_array_integer_INT8+0xf0>
 800aee8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800aeec:	f994 4000 	ldrsb.w	r4, [r4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d04d      	beq.n	800af90 <pool_func_ap_array_integer_INT8+0x128>
 800aef4:	2e00      	cmp	r6, #0
 800aef6:	d032      	beq.n	800af5e <pool_func_ap_array_integer_INT8+0xf6>
 800aef8:	885b      	ldrh	r3, [r3, #2]
 800aefa:	9311      	str	r3, [sp, #68]	; 0x44
 800aefc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d046      	beq.n	800af90 <pool_func_ap_array_integer_INT8+0x128>
 800af02:	6873      	ldr	r3, [r6, #4]
 800af04:	f993 5000 	ldrsb.w	r5, [r3]
 800af08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af0a:	f8cd a000 	str.w	sl, [sp]
 800af0e:	9304      	str	r3, [sp, #16]
 800af10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	4662      	mov	r2, ip
 800af20:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800af24:	e9cd e807 	strd	lr, r8, [sp, #28]
 800af28:	e9cd b705 	strd	fp, r7, [sp, #20]
 800af2c:	f007 fcdc 	bl	80128e8 <st_int8_avepool>
 800af30:	b013      	add	sp, #76	; 0x4c
 800af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	2b00      	cmp	r3, #0
 800af38:	d03c      	beq.n	800afb4 <pool_func_ap_array_integer_INT8+0x14c>
 800af3a:	685e      	ldr	r6, [r3, #4]
 800af3c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800af40:	2e00      	cmp	r6, #0
 800af42:	d1c2      	bne.n	800aeca <pool_func_ap_array_integer_INT8+0x62>
 800af44:	6880      	ldr	r0, [r0, #8]
 800af46:	6889      	ldr	r1, [r1, #8]
 800af48:	f1b9 0f00 	cmp.w	r9, #0
 800af4c:	d02d      	beq.n	800afaa <pool_func_ap_array_integer_INT8+0x142>
 800af4e:	8864      	ldrh	r4, [r4, #2]
 800af50:	2c00      	cmp	r4, #0
 800af52:	d151      	bne.n	800aff8 <pool_func_ap_array_integer_INT8+0x190>
 800af54:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800af58:	2400      	movs	r4, #0
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d1cc      	bne.n	800aef8 <pool_func_ap_array_integer_INT8+0x90>
 800af5e:	2500      	movs	r5, #0
 800af60:	e7d2      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800af62:	b33b      	cbz	r3, 800afb4 <pool_func_ap_array_integer_INT8+0x14c>
 800af64:	685e      	ldr	r6, [r3, #4]
 800af66:	b376      	cbz	r6, 800afc6 <pool_func_ap_array_integer_INT8+0x15e>
 800af68:	885d      	ldrh	r5, [r3, #2]
 800af6a:	9511      	str	r5, [sp, #68]	; 0x44
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	d133      	bne.n	800afd8 <pool_func_ap_array_integer_INT8+0x170>
 800af70:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800af74:	6880      	ldr	r0, [r0, #8]
 800af76:	6889      	ldr	r1, [r1, #8]
 800af78:	b1c4      	cbz	r4, 800afac <pool_func_ap_array_integer_INT8+0x144>
 800af7a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800af7e:	eddf 0a22 	vldr	s1, [pc, #136]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800af82:	f1b9 0f00 	cmp.w	r9, #0
 800af86:	d1ac      	bne.n	800aee2 <pool_func_ap_array_integer_INT8+0x7a>
 800af88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af8a:	464c      	mov	r4, r9
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1b8      	bne.n	800af02 <pool_func_ap_array_integer_INT8+0x9a>
 800af90:	461d      	mov	r5, r3
 800af92:	e7b9      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800af94:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d193      	bne.n	800aec4 <pool_func_ap_array_integer_INT8+0x5c>
 800af9c:	6880      	ldr	r0, [r0, #8]
 800af9e:	6889      	ldr	r1, [r1, #8]
 800afa0:	bb15      	cbnz	r5, 800afe8 <pool_func_ap_array_integer_INT8+0x180>
 800afa2:	462c      	mov	r4, r5
 800afa4:	eddf 0a18 	vldr	s1, [pc, #96]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800afa8:	e7ae      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800afaa:	464c      	mov	r4, r9
 800afac:	eddf 0a16 	vldr	s1, [pc, #88]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800afb0:	4625      	mov	r5, r4
 800afb2:	e7a9      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800afb4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800afb8:	461c      	mov	r4, r3
 800afba:	6880      	ldr	r0, [r0, #8]
 800afbc:	461d      	mov	r5, r3
 800afbe:	eef0 0a40 	vmov.f32	s1, s0
 800afc2:	6889      	ldr	r1, [r1, #8]
 800afc4:	e7a0      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800afc6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800afca:	4634      	mov	r4, r6
 800afcc:	6880      	ldr	r0, [r0, #8]
 800afce:	4635      	mov	r5, r6
 800afd0:	eef0 0a40 	vmov.f32	s1, s0
 800afd4:	6889      	ldr	r1, [r1, #8]
 800afd6:	e797      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	6880      	ldr	r0, [r0, #8]
 800afdc:	6889      	ldr	r1, [r1, #8]
 800afde:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800afe2:	edd3 0a00 	vldr	s1, [r3]
 800afe6:	e78c      	b.n	800af02 <pool_func_ap_array_integer_INT8+0x9a>
 800afe8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800afec:	461d      	mov	r5, r3
 800afee:	eddf 0a06 	vldr	s1, [pc, #24]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800aff2:	f994 4000 	ldrsb.w	r4, [r4]
 800aff6:	e787      	b.n	800af08 <pool_func_ap_array_integer_INT8+0xa0>
 800aff8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800affc:	eddf 0a02 	vldr	s1, [pc, #8]	; 800b008 <pool_func_ap_array_integer_INT8+0x1a0>
 800b000:	f993 4000 	ldrsb.w	r4, [r3]
 800b004:	e7ab      	b.n	800af5e <pool_func_ap_array_integer_INT8+0xf6>
 800b006:	bf00      	nop
 800b008:	00000000 	.word	0x00000000

0800b00c <forward_lite_node_convert_integer_iu8ou8>:
 800b00c:	ee07 3a90 	vmov	s15, r3
 800b010:	f89d 3000 	ldrb.w	r3, [sp]
 800b014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b018:	ee06 3a90 	vmov	s13, r3
 800b01c:	1883      	adds	r3, r0, r2
 800b01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b022:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800b026:	4298      	cmp	r0, r3
 800b028:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b02c:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800b030:	d215      	bcs.n	800b05e <forward_lite_node_convert_integer_iu8ou8+0x52>
 800b032:	3801      	subs	r0, #1
 800b034:	440a      	add	r2, r1
 800b036:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b03a:	eef0 7a66 	vmov.f32	s15, s13
 800b03e:	ee07 3a10 	vmov	s14, r3
 800b042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b046:	eee7 7a00 	vfma.f32	s15, s14, s0
 800b04a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b04e:	ee17 3a90 	vmov	r3, s15
 800b052:	f383 0308 	usat	r3, #8, r3
 800b056:	f801 3b01 	strb.w	r3, [r1], #1
 800b05a:	4291      	cmp	r1, r2
 800b05c:	d1eb      	bne.n	800b036 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 800b05e:	4770      	bx	lr

0800b060 <forward_lite_node_convert_integer_iu8os8>:
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	f99d 3000 	ldrsb.w	r3, [sp]
 800b068:	ee06 3a90 	vmov	s13, r3
 800b06c:	1883      	adds	r3, r0, r2
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b076:	4298      	cmp	r0, r3
 800b078:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800b07c:	d22d      	bcs.n	800b0da <forward_lite_node_convert_integer_iu8os8+0x7a>
 800b07e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b082:	3801      	subs	r0, #1
 800b084:	440a      	add	r2, r1
 800b086:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b0dc <forward_lite_node_convert_integer_iu8os8+0x7c>
 800b08a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b08e:	eef0 7a66 	vmov.f32	s15, s13
 800b092:	ee07 3a10 	vmov	s14, r3
 800b096:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b09a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800b09e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0a2:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800b0a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0b6:	dd08      	ble.n	800b0ca <forward_lite_node_convert_integer_iu8os8+0x6a>
 800b0b8:	ee17 3a10 	vmov	r3, s14
 800b0bc:	f303 0307 	ssat	r3, #8, r3
 800b0c0:	f801 3b01 	strb.w	r3, [r1], #1
 800b0c4:	4291      	cmp	r1, r2
 800b0c6:	d1e0      	bne.n	800b08a <forward_lite_node_convert_integer_iu8os8+0x2a>
 800b0c8:	4770      	bx	lr
 800b0ca:	ee17 3a90 	vmov	r3, s15
 800b0ce:	f303 0307 	ssat	r3, #8, r3
 800b0d2:	f801 3b01 	strb.w	r3, [r1], #1
 800b0d6:	4291      	cmp	r1, r2
 800b0d8:	d1d7      	bne.n	800b08a <forward_lite_node_convert_integer_iu8os8+0x2a>
 800b0da:	4770      	bx	lr
 800b0dc:	3efffffc 	.word	0x3efffffc

0800b0e0 <forward_lite_node_convert_integer_iu8os8_fast>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	1095      	asrs	r5, r2, #2
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	dd31      	ble.n	800b14c <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 800b0e8:	00ae      	lsls	r6, r5, #2
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800b0f0:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800b0f4:	f850 3b04 	ldr.w	r3, [r0], #4
 800b0f8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800b0fc:	fa3f fc8c 	uxtb16	ip, ip
 800b100:	fadc fc0e 	ssub16	ip, ip, lr
 800b104:	fa3f f383 	uxtb16	r3, r3
 800b108:	fad3 f30e 	ssub16	r3, r3, lr
 800b10c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800b110:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800b114:	42a8      	cmp	r0, r5
 800b116:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 800b11a:	ea43 030c 	orr.w	r3, r3, ip
 800b11e:	f844 3b04 	str.w	r3, [r4], #4
 800b122:	d1e7      	bne.n	800b0f4 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 800b124:	4431      	add	r1, r6
 800b126:	f012 0203 	ands.w	r2, r2, #3
 800b12a:	d00e      	beq.n	800b14a <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800b12c:	782b      	ldrb	r3, [r5, #0]
 800b12e:	3a01      	subs	r2, #1
 800b130:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800b134:	700b      	strb	r3, [r1, #0]
 800b136:	d008      	beq.n	800b14a <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800b138:	786b      	ldrb	r3, [r5, #1]
 800b13a:	2a01      	cmp	r2, #1
 800b13c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800b140:	704b      	strb	r3, [r1, #1]
 800b142:	d002      	beq.n	800b14a <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 800b144:	78ab      	ldrb	r3, [r5, #2]
 800b146:	3b80      	subs	r3, #128	; 0x80
 800b148:	708b      	strb	r3, [r1, #2]
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	4605      	mov	r5, r0
 800b14e:	e7ea      	b.n	800b126 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0800b150 <forward_lite_node_convert_integer_is8ou8>:
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	f89d 3000 	ldrb.w	r3, [sp]
 800b158:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b15c:	ee06 3a90 	vmov	s13, r3
 800b160:	1883      	adds	r3, r0, r2
 800b162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b166:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800b16a:	4298      	cmp	r0, r3
 800b16c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b170:	eee7 6ac0 	vfms.f32	s13, s15, s0
 800b174:	d215      	bcs.n	800b1a2 <forward_lite_node_convert_integer_is8ou8+0x52>
 800b176:	3801      	subs	r0, #1
 800b178:	440a      	add	r2, r1
 800b17a:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 800b17e:	eef0 7a66 	vmov.f32	s15, s13
 800b182:	ee07 3a10 	vmov	s14, r3
 800b186:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b18a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800b18e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b192:	ee17 3a90 	vmov	r3, s15
 800b196:	f383 0308 	usat	r3, #8, r3
 800b19a:	f801 3b01 	strb.w	r3, [r1], #1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	d1eb      	bne.n	800b17a <forward_lite_node_convert_integer_is8ou8+0x2a>
 800b1a2:	4770      	bx	lr

0800b1a4 <forward_lite_node_convert_integer_is8ou8_fast>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	1095      	asrs	r5, r2, #2
 800b1a8:	2d00      	cmp	r5, #0
 800b1aa:	dd2d      	ble.n	800b208 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 800b1ac:	00ae      	lsls	r6, r5, #2
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800b1b4:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 800b1b8:	f850 3b04 	ldr.w	r3, [r0], #4
 800b1bc:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800b1c0:	fa2f fc8c 	sxtb16	ip, ip
 800b1c4:	fa9c fc0e 	sadd16	ip, ip, lr
 800b1c8:	fa2f f383 	sxtb16	r3, r3
 800b1cc:	fa93 f30e 	sadd16	r3, r3, lr
 800b1d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800b1d4:	42a8      	cmp	r0, r5
 800b1d6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b1da:	f844 3b04 	str.w	r3, [r4], #4
 800b1de:	d1eb      	bne.n	800b1b8 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 800b1e0:	4431      	add	r1, r6
 800b1e2:	f012 0203 	ands.w	r2, r2, #3
 800b1e6:	d00e      	beq.n	800b206 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800b1e8:	782b      	ldrb	r3, [r5, #0]
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800b1f0:	700b      	strb	r3, [r1, #0]
 800b1f2:	d008      	beq.n	800b206 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800b1f4:	786b      	ldrb	r3, [r5, #1]
 800b1f6:	2a01      	cmp	r2, #1
 800b1f8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800b1fc:	704b      	strb	r3, [r1, #1]
 800b1fe:	d002      	beq.n	800b206 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 800b200:	78ab      	ldrb	r3, [r5, #2]
 800b202:	3b80      	subs	r3, #128	; 0x80
 800b204:	708b      	strb	r3, [r1, #2]
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	4605      	mov	r5, r0
 800b20a:	e7ea      	b.n	800b1e2 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0800b20c <align_factor>:
 800b20c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b210:	4602      	mov	r2, r0
 800b212:	b508      	push	{r3, lr}
 800b214:	eeb4 0a67 	vcmp.f32	s0, s15
 800b218:	2300      	movs	r3, #0
 800b21a:	8003      	strh	r3, [r0, #0]
 800b21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b220:	d524      	bpl.n	800b26c <align_factor+0x60>
 800b222:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22a:	dd1f      	ble.n	800b26c <align_factor+0x60>
 800b22c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b230:	2301      	movs	r3, #1
 800b232:	e005      	b.n	800b240 <align_factor+0x34>
 800b234:	8013      	strh	r3, [r2, #0]
 800b236:	b28b      	uxth	r3, r1
 800b238:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b23c:	2b21      	cmp	r3, #33	; 0x21
 800b23e:	d02b      	beq.n	800b298 <align_factor+0x8c>
 800b240:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b244:	1c59      	adds	r1, r3, #1
 800b246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24a:	d4f3      	bmi.n	800b234 <align_factor+0x28>
 800b24c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800b2ac <align_factor+0xa0>
 800b250:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b254:	ee17 0a90 	vmov	r0, s15
 800b258:	f7f5 f862 	bl	8000320 <__aeabi_f2lz>
 800b25c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800b260:	d003      	beq.n	800b26a <align_factor+0x5e>
 800b262:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b266:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800b26a:	bd08      	pop	{r3, pc}
 800b26c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b274:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b278:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800b27c:	e005      	b.n	800b28a <align_factor+0x7e>
 800b27e:	8013      	strh	r3, [r2, #0]
 800b280:	b28b      	uxth	r3, r1
 800b282:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b286:	4283      	cmp	r3, r0
 800b288:	d00a      	beq.n	800b2a0 <align_factor+0x94>
 800b28a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b28e:	1e59      	subs	r1, r3, #1
 800b290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b294:	dcf3      	bgt.n	800b27e <align_factor+0x72>
 800b296:	e7d9      	b.n	800b24c <align_factor+0x40>
 800b298:	2300      	movs	r3, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	8013      	strh	r3, [r2, #0]
 800b29e:	bd08      	pop	{r3, pc}
 800b2a0:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800b2a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2a8:	8013      	strh	r3, [r2, #0]
 800b2aa:	e7cf      	b.n	800b24c <align_factor+0x40>
 800b2ac:	4f000000 	.word	0x4f000000

0800b2b0 <align_factor_ch>:
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d05d      	beq.n	800b370 <align_factor_ch+0xc0>
 800b2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b8:	ed2d 8b04 	vpush	{d8-d9}
 800b2bc:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	4698      	mov	r8, r3
 800b2c6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800b2ca:	eddf 9a2a 	vldr	s19, [pc, #168]	; 800b374 <align_factor_ch+0xc4>
 800b2ce:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800b2d2:	2700      	movs	r7, #0
 800b2d4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b2d8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b2dc:	ecf4 7a01 	vldmia	r4!, {s15}
 800b2e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b2e4:	eef4 7a68 	vcmp.f32	s15, s17
 800b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ec:	d528      	bpl.n	800b340 <align_factor_ch+0x90>
 800b2ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f6:	dd23      	ble.n	800b340 <align_factor_ch+0x90>
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	e003      	b.n	800b304 <align_factor_ch+0x54>
 800b2fc:	2a20      	cmp	r2, #32
 800b2fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b302:	d031      	beq.n	800b368 <align_factor_ch+0xb8>
 800b304:	eef4 7ac8 	vcmpe.f32	s15, s16
 800b308:	b213      	sxth	r3, r2
 800b30a:	3201      	adds	r2, #1
 800b30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b310:	d4f4      	bmi.n	800b2fc <align_factor_ch+0x4c>
 800b312:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800b316:	f8a8 3000 	strh.w	r3, [r8]
 800b31a:	ee17 0a90 	vmov	r0, s15
 800b31e:	f7f4 ffff 	bl	8000320 <__aeabi_f2lz>
 800b322:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800b326:	bf18      	it	ne
 800b328:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800b32c:	42a5      	cmp	r5, r4
 800b32e:	f108 0802 	add.w	r8, r8, #2
 800b332:	f849 0b04 	str.w	r0, [r9], #4
 800b336:	d1d1      	bne.n	800b2dc <align_factor_ch+0x2c>
 800b338:	ecbd 8b04 	vpop	{d8-d9}
 800b33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b340:	2300      	movs	r3, #0
 800b342:	e005      	b.n	800b350 <align_factor_ch+0xa0>
 800b344:	b213      	sxth	r3, r2
 800b346:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b34a:	f113 0f1f 	cmn.w	r3, #31
 800b34e:	d006      	beq.n	800b35e <align_factor_ch+0xae>
 800b350:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b354:	1e5a      	subs	r2, r3, #1
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	dcf3      	bgt.n	800b344 <align_factor_ch+0x94>
 800b35c:	e7d9      	b.n	800b312 <align_factor_ch+0x62>
 800b35e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b362:	f06f 031d 	mvn.w	r3, #29
 800b366:	e7d4      	b.n	800b312 <align_factor_ch+0x62>
 800b368:	2000      	movs	r0, #0
 800b36a:	f8a8 7000 	strh.w	r7, [r8]
 800b36e:	e7dd      	b.n	800b32c <align_factor_ch+0x7c>
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	4f000000 	.word	0x4f000000

0800b378 <st_sssa8_ch_conv_dw_Wadapt>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	b089      	sub	sp, #36	; 0x24
 800b37e:	461e      	mov	r6, r3
 800b380:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b382:	9304      	str	r3, [sp, #16]
 800b384:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b388:	9005      	str	r0, [sp, #20]
 800b38a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b38e:	9203      	str	r2, [sp, #12]
 800b390:	088c      	lsrs	r4, r1, #2
 800b392:	9402      	str	r4, [sp, #8]
 800b394:	d05a      	beq.n	800b44c <st_sssa8_ch_conv_dw_Wadapt+0xd4>
 800b396:	fb06 f902 	mul.w	r9, r6, r2
 800b39a:	4615      	mov	r5, r2
 800b39c:	4607      	mov	r7, r0
 800b39e:	1e60      	subs	r0, r4, #1
 800b3a0:	f3c9 094f 	ubfx	r9, r9, #1, #16
 800b3a4:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800b3a8:	f107 0a04 	add.w	sl, r7, #4
 800b3ac:	b280      	uxth	r0, r0
 800b3ae:	f109 32ff 	add.w	r2, r9, #4294967295
 800b3b2:	46b8      	mov	r8, r7
 800b3b4:	fb15 fb06 	smulbb	fp, r5, r6
 800b3b8:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	4f51      	ldr	r7, [pc, #324]	; (800b504 <st_sssa8_ch_conv_dw_Wadapt+0x18c>)
 800b3c0:	f00b 0b01 	and.w	fp, fp, #1
 800b3c4:	468c      	mov	ip, r1
 800b3c6:	fb02 1201 	mla	r2, r2, r1, r1
 800b3ca:	0054      	lsls	r4, r2, #1
 800b3cc:	9401      	str	r4, [sp, #4]
 800b3ce:	4644      	mov	r4, r8
 800b3d0:	9307      	str	r3, [sp, #28]
 800b3d2:	f1b9 0f00 	cmp.w	r9, #0
 800b3d6:	d02b      	beq.n	800b430 <st_sssa8_ch_conv_dw_Wadapt+0xb8>
 800b3d8:	4648      	mov	r0, r9
 800b3da:	9907      	ldr	r1, [sp, #28]
 800b3dc:	3801      	subs	r0, #1
 800b3de:	f854 500c 	ldr.w	r5, [r4, ip]
 800b3e2:	1d0a      	adds	r2, r1, #4
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	b280      	uxth	r0, r0
 800b3e8:	4474      	add	r4, lr
 800b3ea:	9207      	str	r2, [sp, #28]
 800b3ec:	ea05 0207 	and.w	r2, r5, r7
 800b3f0:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b3fa:	9d07      	ldr	r5, [sp, #28]
 800b3fc:	fa2f f683 	sxtb16	r6, r3
 800b400:	600e      	str	r6, [r1, #0]
 800b402:	1d29      	adds	r1, r5, #4
 800b404:	fa2f f393 	sxtb16	r3, r3, ror #8
 800b408:	9107      	str	r1, [sp, #28]
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	fa2f f182 	sxtb16	r1, r2
 800b412:	3304      	adds	r3, #4
 800b414:	f843 1c04 	str.w	r1, [r3, #-4]
 800b418:	fa2f f292 	sxtb16	r2, r2, ror #8
 800b41c:	9307      	str	r3, [sp, #28]
 800b41e:	9b07      	ldr	r3, [sp, #28]
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	3304      	adds	r3, #4
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	2800      	cmp	r0, #0
 800b428:	d1d7      	bne.n	800b3da <st_sssa8_ch_conv_dw_Wadapt+0x62>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	eb03 0408 	add.w	r4, r3, r8
 800b430:	9907      	ldr	r1, [sp, #28]
 800b432:	f1bb 0f00 	cmp.w	fp, #0
 800b436:	d12e      	bne.n	800b496 <st_sssa8_ch_conv_dw_Wadapt+0x11e>
 800b438:	460b      	mov	r3, r1
 800b43a:	f108 0804 	add.w	r8, r8, #4
 800b43e:	45d0      	cmp	r8, sl
 800b440:	d1c5      	bne.n	800b3ce <st_sssa8_ch_conv_dw_Wadapt+0x56>
 800b442:	9a02      	ldr	r2, [sp, #8]
 800b444:	4661      	mov	r1, ip
 800b446:	0092      	lsls	r2, r2, #2
 800b448:	b292      	uxth	r2, r2
 800b44a:	9202      	str	r2, [sp, #8]
 800b44c:	f011 0203 	ands.w	r2, r1, #3
 800b450:	d037      	beq.n	800b4c2 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800b452:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800b456:	fb10 f404 	smulbb	r4, r0, r4
 800b45a:	b2a4      	uxth	r4, r4
 800b45c:	b38c      	cbz	r4, 800b4c2 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800b45e:	2901      	cmp	r1, #1
 800b460:	d132      	bne.n	800b4c8 <st_sssa8_ch_conv_dw_Wadapt+0x150>
 800b462:	0067      	lsls	r7, r4, #1
 800b464:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b468:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800b46c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800b470:	4665      	mov	r5, ip
 800b472:	4620      	mov	r0, r4
 800b474:	1c69      	adds	r1, r5, #1
 800b476:	eb0e 0205 	add.w	r2, lr, r5
 800b47a:	462e      	mov	r6, r5
 800b47c:	b28d      	uxth	r5, r1
 800b47e:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800b482:	f823 1b02 	strh.w	r1, [r3], #2
 800b486:	4283      	cmp	r3, r0
 800b488:	d1f9      	bne.n	800b47e <st_sssa8_ch_conv_dw_Wadapt+0x106>
 800b48a:	4566      	cmp	r6, ip
 800b48c:	4623      	mov	r3, r4
 800b48e:	4438      	add	r0, r7
 800b490:	d017      	beq.n	800b4c2 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800b492:	443c      	add	r4, r7
 800b494:	e7ee      	b.n	800b474 <st_sssa8_ch_conv_dw_Wadapt+0xfc>
 800b496:	6824      	ldr	r4, [r4, #0]
 800b498:	f101 0308 	add.w	r3, r1, #8
 800b49c:	b2a2      	uxth	r2, r4
 800b49e:	ea07 2004 	and.w	r0, r7, r4, lsl #8
 800b4a2:	4310      	orrs	r0, r2
 800b4a4:	ea04 0207 	and.w	r2, r4, r7
 800b4a8:	fa2f f080 	sxtb16	r0, r0
 800b4ac:	ea42 6214 	orr.w	r2, r2, r4, lsr #24
 800b4b0:	8008      	strh	r0, [r1, #0]
 800b4b2:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 800b4b6:	0c00      	lsrs	r0, r0, #16
 800b4b8:	808a      	strh	r2, [r1, #4]
 800b4ba:	0c12      	lsrs	r2, r2, #16
 800b4bc:	8048      	strh	r0, [r1, #2]
 800b4be:	80ca      	strh	r2, [r1, #6]
 800b4c0:	e7bb      	b.n	800b43a <st_sssa8_ch_conv_dw_Wadapt+0xc2>
 800b4c2:	b009      	add	sp, #36	; 0x24
 800b4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	9802      	ldr	r0, [sp, #8]
 800b4ca:	eb03 0744 	add.w	r7, r3, r4, lsl #1
 800b4ce:	f8dd e014 	ldr.w	lr, [sp, #20]
 800b4d2:	0064      	lsls	r4, r4, #1
 800b4d4:	4402      	add	r2, r0
 800b4d6:	463d      	mov	r5, r7
 800b4d8:	4684      	mov	ip, r0
 800b4da:	b296      	uxth	r6, r2
 800b4dc:	f10c 0001 	add.w	r0, ip, #1
 800b4e0:	eb0e 020c 	add.w	r2, lr, ip
 800b4e4:	fa1f fc80 	uxth.w	ip, r0
 800b4e8:	f992 0000 	ldrsb.w	r0, [r2]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f823 0b02 	strh.w	r0, [r3], #2
 800b4f2:	42ab      	cmp	r3, r5
 800b4f4:	d1f8      	bne.n	800b4e8 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800b4f6:	45b4      	cmp	ip, r6
 800b4f8:	4425      	add	r5, r4
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	d0e1      	beq.n	800b4c2 <st_sssa8_ch_conv_dw_Wadapt+0x14a>
 800b4fe:	4427      	add	r7, r4
 800b500:	e7ec      	b.n	800b4dc <st_sssa8_ch_conv_dw_Wadapt+0x164>
 800b502:	bf00      	nop
 800b504:	ffff0000 	.word	0xffff0000

0800b508 <st_sssa8_ch_convolve_dw>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	ed2d 8b02 	vpush	{d8}
 800b510:	b0eb      	sub	sp, #428	; 0x1ac
 800b512:	9211      	str	r2, [sp, #68]	; 0x44
 800b514:	9322      	str	r3, [sp, #136]	; 0x88
 800b516:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	; 0x1e4
 800b51a:	f8bd 31e0 	ldrh.w	r3, [sp, #480]	; 0x1e0
 800b51e:	f8bd 41dc 	ldrh.w	r4, [sp, #476]	; 0x1dc
 800b522:	fb02 f803 	mul.w	r8, r2, r3
 800b526:	f99d 6208 	ldrsb.w	r6, [sp, #520]	; 0x208
 800b52a:	9238      	str	r2, [sp, #224]	; 0xe0
 800b52c:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800b530:	f8bd 21e8 	ldrh.w	r2, [sp, #488]	; 0x1e8
 800b534:	9023      	str	r0, [sp, #140]	; 0x8c
 800b536:	9237      	str	r2, [sp, #220]	; 0xdc
 800b538:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
 800b53c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b53e:	923c      	str	r2, [sp, #240]	; 0xf0
 800b540:	fb04 5208 	mla	r2, r4, r8, r5
 800b544:	910d      	str	r1, [sp, #52]	; 0x34
 800b546:	4621      	mov	r1, r4
 800b548:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800b54c:	9335      	str	r3, [sp, #212]	; 0xd4
 800b54e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b552:	9434      	str	r4, [sp, #208]	; 0xd0
 800b554:	920c      	str	r2, [sp, #48]	; 0x30
 800b556:	00a4      	lsls	r4, r4, #2
 800b558:	f8bd 21f0 	ldrh.w	r2, [sp, #496]	; 0x1f0
 800b55c:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800b560:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b564:	922a      	str	r2, [sp, #168]	; 0xa8
 800b566:	f8bd 21f4 	ldrh.w	r2, [sp, #500]	; 0x1f4
 800b56a:	930e      	str	r3, [sp, #56]	; 0x38
 800b56c:	923d      	str	r2, [sp, #244]	; 0xf4
 800b56e:	f99d 2204 	ldrsb.w	r2, [sp, #516]	; 0x204
 800b572:	ee08 2a10 	vmov	s16, r2
 800b576:	f8bd 2210 	ldrh.w	r2, [sp, #528]	; 0x210
 800b57a:	922d      	str	r2, [sp, #180]	; 0xb4
 800b57c:	f8bd 2214 	ldrh.w	r2, [sp, #532]	; 0x214
 800b580:	9239      	str	r2, [sp, #228]	; 0xe4
 800b582:	004a      	lsls	r2, r1, #1
 800b584:	9214      	str	r2, [sp, #80]	; 0x50
 800b586:	b1d1      	cbz	r1, 800b5be <st_sssa8_ch_convolve_dw+0xb6>
 800b588:	461a      	mov	r2, r3
 800b58a:	9b80      	ldr	r3, [sp, #512]	; 0x200
 800b58c:	f04f 0e01 	mov.w	lr, #1
 800b590:	1d11      	adds	r1, r2, #4
 800b592:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b594:	eb03 0c02 	add.w	ip, r3, r2
 800b598:	f933 2b02 	ldrsh.w	r2, [r3], #2
 800b59c:	1e50      	subs	r0, r2, #1
 800b59e:	fa0e f702 	lsl.w	r7, lr, r2
 800b5a2:	fa06 f202 	lsl.w	r2, r6, r2
 800b5a6:	b280      	uxth	r0, r0
 800b5a8:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 800b5ac:	2814      	cmp	r0, #20
 800b5ae:	f200 827e 	bhi.w	800baae <st_sssa8_ch_convolve_dw+0x5a6>
 800b5b2:	4563      	cmp	r3, ip
 800b5b4:	f841 2c04 	str.w	r2, [r1, #-4]
 800b5b8:	f101 0104 	add.w	r1, r1, #4
 800b5bc:	d1ec      	bne.n	800b598 <st_sssa8_ch_convolve_dw+0x90>
 800b5be:	ee18 3a10 	vmov	r3, s16
 800b5c2:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800b5c4:	425b      	negs	r3, r3
 800b5c6:	1b16      	subs	r6, r2, r4
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	0076      	lsls	r6, r6, #1
 800b5cc:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800b5d0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b5d2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800b5d4:	ea53 0c02 	orrs.w	ip, r3, r2
 800b5d8:	d10a      	bne.n	800b5f0 <st_sssa8_ch_convolve_dw+0xe8>
 800b5da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b5dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5de:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	bf08      	it	eq
 800b5e4:	2903      	cmpeq	r1, #3
 800b5e6:	d103      	bne.n	800b5f0 <st_sssa8_ch_convolve_dw+0xe8>
 800b5e8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	f001 804f 	beq.w	800c68e <st_sssa8_ch_convolve_dw+0x1186>
 800b5f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f2:	aa4a      	add	r2, sp, #296	; 0x128
 800b5f4:	a960      	add	r1, sp, #384	; 0x180
 800b5f6:	a856      	add	r0, sp, #344	; 0x158
 800b5f8:	934c      	str	r3, [sp, #304]	; 0x130
 800b5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5fc:	934b      	str	r3, [sp, #300]	; 0x12c
 800b5fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b600:	9350      	str	r3, [sp, #320]	; 0x140
 800b602:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800b604:	934f      	str	r3, [sp, #316]	; 0x13c
 800b606:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800b608:	9354      	str	r3, [sp, #336]	; 0x150
 800b60a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b60c:	9353      	str	r3, [sp, #332]	; 0x14c
 800b60e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b610:	9362      	str	r3, [sp, #392]	; 0x188
 800b612:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800b614:	9363      	str	r3, [sp, #396]	; 0x18c
 800b616:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b618:	9364      	str	r3, [sp, #400]	; 0x190
 800b61a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800b61c:	9365      	str	r3, [sp, #404]	; 0x194
 800b61e:	ab52      	add	r3, sp, #328	; 0x148
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	ab4e      	add	r3, sp, #312	; 0x138
 800b624:	f003 f818 	bl	800e658 <ai_padding_opt_init>
 800b628:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b62a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b62c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b630:	079a      	lsls	r2, r3, #30
 800b632:	9327      	str	r3, [sp, #156]	; 0x9c
 800b634:	f000 8243 	beq.w	800babe <st_sssa8_ch_convolve_dw+0x5b6>
 800b638:	2301      	movs	r3, #1
 800b63a:	933e      	str	r3, [sp, #248]	; 0xf8
 800b63c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 822f 	beq.w	800baa2 <st_sssa8_ch_convolve_dw+0x59a>
 800b644:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b646:	f3c8 004f 	ubfx	r0, r8, #1, #16
 800b64a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800b64c:	186b      	adds	r3, r5, r1
 800b64e:	9015      	str	r0, [sp, #84]	; 0x54
 800b650:	460d      	mov	r5, r1
 800b652:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 800b654:	931b      	str	r3, [sp, #108]	; 0x6c
 800b656:	eb01 0309 	add.w	r3, r1, r9
 800b65a:	08b9      	lsrs	r1, r7, #2
 800b65c:	931a      	str	r3, [sp, #104]	; 0x68
 800b65e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b660:	9136      	str	r1, [sp, #216]	; 0xd8
 800b662:	3901      	subs	r1, #1
 800b664:	fb12 f303 	smulbb	r3, r2, r3
 800b668:	1e42      	subs	r2, r0, #1
 800b66a:	b289      	uxth	r1, r1
 800b66c:	b298      	uxth	r0, r3
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	b292      	uxth	r2, r2
 800b674:	9316      	str	r3, [sp, #88]	; 0x58
 800b676:	1e43      	subs	r3, r0, #1
 800b678:	9031      	str	r0, [sp, #196]	; 0xc4
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3301      	adds	r3, #1
 800b67e:	0058      	lsls	r0, r3, #1
 800b680:	1c4b      	adds	r3, r1, #1
 800b682:	9026      	str	r0, [sp, #152]	; 0x98
 800b684:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b686:	4420      	add	r0, r4
 800b688:	192c      	adds	r4, r5, r4
 800b68a:	1986      	adds	r6, r0, r6
 800b68c:	9024      	str	r0, [sp, #144]	; 0x90
 800b68e:	941c      	str	r4, [sp, #112]	; 0x70
 800b690:	4604      	mov	r4, r0
 800b692:	962b      	str	r6, [sp, #172]	; 0xac
 800b694:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800b696:	4270      	negs	r0, r6
 800b698:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800b69a:	fa1f fc80 	uxth.w	ip, r0
 800b69e:	08b0      	lsrs	r0, r6, #2
 800b6a0:	f8cd c100 	str.w	ip, [sp, #256]	; 0x100
 800b6a4:	f106 3cff 	add.w	ip, r6, #4294967295
 800b6a8:	0080      	lsls	r0, r0, #2
 800b6aa:	f026 0603 	bic.w	r6, r6, #3
 800b6ae:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800b6b2:	9030      	str	r0, [sp, #192]	; 0xc0
 800b6b4:	1c50      	adds	r0, r2, #1
 800b6b6:	9633      	str	r6, [sp, #204]	; 0xcc
 800b6b8:	0100      	lsls	r0, r0, #4
 800b6ba:	9021      	str	r0, [sp, #132]	; 0x84
 800b6bc:	fb02 7007 	mla	r0, r2, r7, r7
 800b6c0:	0112      	lsls	r2, r2, #4
 800b6c2:	923a      	str	r2, [sp, #232]	; 0xe8
 800b6c4:	eb05 0c40 	add.w	ip, r5, r0, lsl #1
 800b6c8:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800b6ca:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800b6ce:	3220      	adds	r2, #32
 800b6d0:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
 800b6d4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b6d6:	19ca      	adds	r2, r1, r7
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800b6de:	442a      	add	r2, r5
 800b6e0:	921d      	str	r2, [sp, #116]	; 0x74
 800b6e2:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 800b6e6:	1955      	adds	r5, r2, r5
 800b6e8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800b6ec:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800b6f0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800b6f2:	9519      	str	r5, [sp, #100]	; 0x64
 800b6f4:	2500      	movs	r5, #0
 800b6f6:	943b      	str	r4, [sp, #236]	; 0xec
 800b6f8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800b6fa:	fb04 f402 	mul.w	r4, r4, r2
 800b6fe:	9443      	str	r4, [sp, #268]	; 0x10c
 800b700:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800b702:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
 800b706:	2a03      	cmp	r2, #3
 800b708:	bf08      	it	eq
 800b70a:	2803      	cmpeq	r0, #3
 800b70c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800b70e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b710:	eba2 0206 	sub.w	r2, r2, r6
 800b714:	bf0c      	ite	eq
 800b716:	2401      	moveq	r4, #1
 800b718:	2400      	movne	r4, #0
 800b71a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800b71c:	9232      	str	r2, [sp, #200]	; 0xc8
 800b71e:	942c      	str	r4, [sp, #176]	; 0xb0
 800b720:	f007 0403 	and.w	r4, r7, #3
 800b724:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800b726:	9429      	str	r4, [sp, #164]	; 0xa4
 800b728:	0094      	lsls	r4, r2, #2
 800b72a:	3a01      	subs	r2, #1
 800b72c:	9241      	str	r2, [sp, #260]	; 0x104
 800b72e:	009a      	lsls	r2, r3, #2
 800b730:	943f      	str	r4, [sp, #252]	; 0xfc
 800b732:	462c      	mov	r4, r5
 800b734:	9212      	str	r2, [sp, #72]	; 0x48
 800b736:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800b738:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b73c:	9244      	str	r2, [sp, #272]	; 0x110
 800b73e:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b742:	9245      	str	r2, [sp, #276]	; 0x114
 800b744:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800b748:	9248      	str	r2, [sp, #288]	; 0x120
 800b74a:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800b74c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b750:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b752:	9247      	str	r2, [sp, #284]	; 0x11c
 800b754:	009a      	lsls	r2, r3, #2
 800b756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b758:	9246      	str	r2, [sp, #280]	; 0x118
 800b75a:	18cb      	adds	r3, r1, r3
 800b75c:	931e      	str	r3, [sp, #120]	; 0x78
 800b75e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
 800b762:	9318      	str	r3, [sp, #96]	; 0x60
 800b764:	a856      	add	r0, sp, #344	; 0x158
 800b766:	f002 ffd1 	bl	800e70c <ai_padding_opt_phase1>
 800b76a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 878a 	beq.w	800c686 <st_sssa8_ch_convolve_dw+0x117e>
 800b772:	b2ab      	uxth	r3, r5
 800b774:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800b776:	f8dd b124 	ldr.w	fp, [sp, #292]	; 0x124
 800b77a:	9342      	str	r3, [sp, #264]	; 0x108
 800b77c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b77e:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 800b782:	1a9b      	subs	r3, r3, r2
 800b784:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800b786:	fb02 3304 	mla	r3, r2, r4, r3
 800b78a:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 800b78e:	9310      	str	r3, [sp, #64]	; 0x40
 800b790:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b792:	922e      	str	r2, [sp, #184]	; 0xb8
 800b794:	425b      	negs	r3, r3
 800b796:	b29b      	uxth	r3, r3
 800b798:	9325      	str	r3, [sp, #148]	; 0x94
 800b79a:	2300      	movs	r3, #0
 800b79c:	4619      	mov	r1, r3
 800b79e:	9a56      	ldr	r2, [sp, #344]	; 0x158
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	f000 82c8 	beq.w	800bd36 <st_sssa8_ch_convolve_dw+0x82e>
 800b7a6:	3a01      	subs	r2, #1
 800b7a8:	9256      	str	r2, [sp, #344]	; 0x158
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800b7b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b7b2:	2a01      	cmp	r2, #1
 800b7b4:	f000 8583 	beq.w	800c2be <st_sssa8_ch_convolve_dw+0xdb6>
 800b7b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b7ba:	2a04      	cmp	r2, #4
 800b7bc:	f000 86ae 	beq.w	800c51c <st_sssa8_ch_convolve_dw+0x1014>
 800b7c0:	2a02      	cmp	r2, #2
 800b7c2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800b7c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7c6:	f000 85c6 	beq.w	800c356 <st_sssa8_ch_convolve_dw+0xe4e>
 800b7ca:	4282      	cmp	r2, r0
 800b7cc:	f340 8755 	ble.w	800c67a <st_sssa8_ch_convolve_dw+0x1172>
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800b7d4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800b7d6:	9328      	str	r3, [sp, #160]	; 0xa0
 800b7d8:	fb01 2100 	mla	r1, r1, r0, r2
 800b7dc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b7de:	1acd      	subs	r5, r1, r3
 800b7e0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800b7e4:	429d      	cmp	r5, r3
 800b7e6:	9307      	str	r3, [sp, #28]
 800b7e8:	dd3c      	ble.n	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800b7ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b7ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b7f0:	46d3      	mov	fp, sl
 800b7f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b7f6:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800b7fa:	9503      	str	r5, [sp, #12]
 800b7fc:	9305      	str	r3, [sp, #20]
 800b7fe:	9a05      	ldr	r2, [sp, #20]
 800b800:	46da      	mov	sl, fp
 800b802:	ee18 0a10 	vmov	r0, s16
 800b806:	0fd1      	lsrs	r1, r2, #31
 800b808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b80a:	429a      	cmp	r2, r3
 800b80c:	bfd8      	it	le
 800b80e:	f041 0101 	orrle.w	r1, r1, #1
 800b812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b814:	9104      	str	r1, [sp, #16]
 800b816:	4693      	mov	fp, r2
 800b818:	9907      	ldr	r1, [sp, #28]
 800b81a:	fb03 f302 	mul.w	r3, r3, r2
 800b81e:	460c      	mov	r4, r1
 800b820:	9306      	str	r3, [sp, #24]
 800b822:	0fe3      	lsrs	r3, r4, #31
 800b824:	458b      	cmp	fp, r1
 800b826:	bfd8      	it	le
 800b828:	f043 0301 	orrle.w	r3, r3, #1
 800b82c:	b91b      	cbnz	r3, 800b836 <st_sssa8_ch_convolve_dw+0x32e>
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 81c8 	beq.w	800bbc6 <st_sssa8_ch_convolve_dw+0x6be>
 800b836:	4652      	mov	r2, sl
 800b838:	4641      	mov	r1, r8
 800b83a:	9002      	str	r0, [sp, #8]
 800b83c:	f006 fa06 	bl	8011c4c <st_int8_fill>
 800b840:	9802      	ldr	r0, [sp, #8]
 800b842:	3401      	adds	r4, #1
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	44d0      	add	r8, sl
 800b848:	b224      	sxth	r4, r4
 800b84a:	429c      	cmp	r4, r3
 800b84c:	4621      	mov	r1, r4
 800b84e:	dbe8      	blt.n	800b822 <st_sssa8_ch_convolve_dw+0x31a>
 800b850:	9b05      	ldr	r3, [sp, #20]
 800b852:	46d3      	mov	fp, sl
 800b854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b856:	3301      	adds	r3, #1
 800b858:	b21b      	sxth	r3, r3
 800b85a:	429a      	cmp	r2, r3
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	dcce      	bgt.n	800b7fe <st_sssa8_ch_convolve_dw+0x2f6>
 800b860:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b864:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 82a2 	bne.w	800bdb0 <st_sssa8_ch_convolve_dw+0x8a8>
 800b86c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 85f8 	beq.w	800c464 <st_sssa8_ch_convolve_dw+0xf5c>
 800b874:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800b876:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
 800b87a:	3310      	adds	r3, #16
 800b87c:	9305      	str	r3, [sp, #20]
 800b87e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b880:	9302      	str	r3, [sp, #8]
 800b882:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800b884:	9303      	str	r3, [sp, #12]
 800b886:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800b888:	330c      	adds	r3, #12
 800b88a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b88e:	f103 020c 	add.w	r2, r3, #12
 800b892:	920a      	str	r2, [sp, #40]	; 0x28
 800b894:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800b896:	3208      	adds	r2, #8
 800b898:	9209      	str	r2, [sp, #36]	; 0x24
 800b89a:	f103 0208 	add.w	r2, r3, #8
 800b89e:	3304      	adds	r3, #4
 800b8a0:	9208      	str	r2, [sp, #32]
 800b8a2:	9306      	str	r3, [sp, #24]
 800b8a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8a6:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800b8a8:	9304      	str	r3, [sp, #16]
 800b8aa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800b8ac:	3204      	adds	r2, #4
 800b8ae:	3320      	adds	r3, #32
 800b8b0:	9207      	str	r2, [sp, #28]
 800b8b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800b8b4:	ee18 3a10 	vmov	r3, s16
 800b8b8:	b21b      	sxth	r3, r3
 800b8ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8bc:	9b05      	ldr	r3, [sp, #20]
 800b8be:	9e04      	ldr	r6, [sp, #16]
 800b8c0:	e953 5404 	ldrd	r5, r4, [r3, #-16]
 800b8c4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	eb03 020c 	add.w	r2, r3, ip
 800b8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8d0:	b3cb      	cbz	r3, 800b946 <st_sssa8_ch_convolve_dw+0x43e>
 800b8d2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b8d4:	f106 0310 	add.w	r3, r6, #16
 800b8d8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800b8dc:	19f7      	adds	r7, r6, r7
 800b8de:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800b8e2:	f852 900a 	ldr.w	r9, [r2, sl]
 800b8e6:	f8df e910 	ldr.w	lr, [pc, #2320]	; 800c1f8 <st_sssa8_ch_convolve_dw+0xcf0>
 800b8ea:	f8d2 8000 	ldr.w	r8, [r2]
 800b8ee:	4462      	add	r2, ip
 800b8f0:	ea09 0e0e 	and.w	lr, r9, lr
 800b8f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800b8f8:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800b8fc:	fa1f f888 	uxth.w	r8, r8
 800b900:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
 800b904:	fa2b f988 	sxtab16	r9, fp, r8
 800b908:	fb26 5509 	smlad	r5, r6, r9, r5
 800b90c:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800b910:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800b914:	fb26 4408 	smlad	r4, r6, r8, r4
 800b918:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800b91c:	fa2b f88e 	sxtab16	r8, fp, lr
 800b920:	fb26 0008 	smlad	r0, r6, r8, r0
 800b924:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800b928:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800b92c:	fb26 110e 	smlad	r1, r6, lr, r1
 800b930:	3310      	adds	r3, #16
 800b932:	429f      	cmp	r7, r3
 800b934:	d1d5      	bne.n	800b8e2 <st_sssa8_ch_convolve_dw+0x3da>
 800b936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b938:	9e04      	ldr	r6, [sp, #16]
 800b93a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b93e:	441e      	add	r6, r3
 800b940:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b942:	eb0c 0203 	add.w	r2, ip, r3
 800b946:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 80bd 	bne.w	800bac8 <st_sssa8_ch_convolve_dw+0x5c0>
 800b94e:	9604      	str	r6, [sp, #16]
 800b950:	9e02      	ldr	r6, [sp, #8]
 800b952:	f9b6 7000 	ldrsh.w	r7, [r6]
 800b956:	2f15      	cmp	r7, #21
 800b958:	f340 80da 	ble.w	800bb10 <st_sssa8_ch_convolve_dw+0x608>
 800b95c:	1eba      	subs	r2, r7, #2
 800b95e:	2301      	movs	r3, #1
 800b960:	3f01      	subs	r7, #1
 800b962:	3602      	adds	r6, #2
 800b964:	fa03 f202 	lsl.w	r2, r3, r2
 800b968:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800b96a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b96e:	fb55 2203 	smmla	r2, r5, r3, r2
 800b972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b974:	fa42 f707 	asr.w	r7, r2, r7
 800b978:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b97c:	443a      	add	r2, r7
 800b97e:	f302 0207 	ssat	r2, #8, r2
 800b982:	9d03      	ldr	r5, [sp, #12]
 800b984:	f805 2b01 	strb.w	r2, [r5], #1
 800b988:	f9b6 7000 	ldrsh.w	r7, [r6]
 800b98c:	2f15      	cmp	r7, #21
 800b98e:	f340 80d8 	ble.w	800bb42 <st_sssa8_ch_convolve_dw+0x63a>
 800b992:	1eba      	subs	r2, r7, #2
 800b994:	2301      	movs	r3, #1
 800b996:	3f01      	subs	r7, #1
 800b998:	fa03 f202 	lsl.w	r2, r3, r2
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	fb54 2203 	smmla	r2, r4, r3, r2
 800b9a4:	9b06      	ldr	r3, [sp, #24]
 800b9a6:	fa42 f707 	asr.w	r7, r2, r7
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	9b02      	ldr	r3, [sp, #8]
 800b9ae:	443a      	add	r2, r7
 800b9b0:	1d1e      	adds	r6, r3, #4
 800b9b2:	f302 0207 	ssat	r2, #8, r2
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	702a      	strb	r2, [r5, #0]
 800b9ba:	1c9c      	adds	r4, r3, #2
 800b9bc:	f9b6 6000 	ldrsh.w	r6, [r6]
 800b9c0:	2e15      	cmp	r6, #21
 800b9c2:	f340 80d7 	ble.w	800bb74 <st_sssa8_ch_convolve_dw+0x66c>
 800b9c6:	1eb2      	subs	r2, r6, #2
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	3e01      	subs	r6, #1
 800b9cc:	fa03 f202 	lsl.w	r2, r3, r2
 800b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	fb50 2203 	smmla	r2, r0, r3, r2
 800b9d8:	9b08      	ldr	r3, [sp, #32]
 800b9da:	fa42 f606 	asr.w	r6, r2, r6
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	4432      	add	r2, r6
 800b9e4:	1d9d      	adds	r5, r3, #6
 800b9e6:	f302 0207 	ssat	r2, #8, r2
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	7022      	strb	r2, [r4, #0]
 800b9ee:	1cd8      	adds	r0, r3, #3
 800b9f0:	f9b5 4000 	ldrsh.w	r4, [r5]
 800b9f4:	2c15      	cmp	r4, #21
 800b9f6:	f340 80d6 	ble.w	800bba6 <st_sssa8_ch_convolve_dw+0x69e>
 800b9fa:	1ea2      	subs	r2, r4, #2
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	fa03 f202 	lsl.w	r2, r3, r2
 800ba04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	fb51 2303 	smmla	r3, r1, r3, r2
 800ba0c:	fa43 f404 	asr.w	r4, r3, r4
 800ba10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	4414      	add	r4, r2
 800ba16:	f304 0407 	ssat	r4, #8, r4
 800ba1a:	7004      	strb	r4, [r0, #0]
 800ba1c:	9b05      	ldr	r3, [sp, #20]
 800ba1e:	f10c 0c04 	add.w	ip, ip, #4
 800ba22:	3310      	adds	r3, #16
 800ba24:	9305      	str	r3, [sp, #20]
 800ba26:	9b02      	ldr	r3, [sp, #8]
 800ba28:	3308      	adds	r3, #8
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	9303      	str	r3, [sp, #12]
 800ba32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba34:	3310      	adds	r3, #16
 800ba36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ba3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba40:	3310      	adds	r3, #16
 800ba42:	9309      	str	r3, [sp, #36]	; 0x24
 800ba44:	9b08      	ldr	r3, [sp, #32]
 800ba46:	3310      	adds	r3, #16
 800ba48:	9308      	str	r3, [sp, #32]
 800ba4a:	9b07      	ldr	r3, [sp, #28]
 800ba4c:	3310      	adds	r3, #16
 800ba4e:	9307      	str	r3, [sp, #28]
 800ba50:	9b06      	ldr	r3, [sp, #24]
 800ba52:	3310      	adds	r3, #16
 800ba54:	9306      	str	r3, [sp, #24]
 800ba56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba58:	4563      	cmp	r3, ip
 800ba5a:	f47f af2f 	bne.w	800b8bc <st_sssa8_ch_convolve_dw+0x3b4>
 800ba5e:	461a      	mov	r2, r3
 800ba60:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800ba62:	4413      	add	r3, r2
 800ba64:	9383      	str	r3, [sp, #524]	; 0x20c
 800ba66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f040 83d3 	bne.w	800c214 <st_sssa8_ch_convolve_dw+0xd0c>
 800ba6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ba70:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ba72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ba74:	440a      	add	r2, r1
 800ba76:	3301      	adds	r3, #1
 800ba78:	b292      	uxth	r2, r2
 800ba7a:	b21b      	sxth	r3, r3
 800ba7c:	9225      	str	r2, [sp, #148]	; 0x94
 800ba7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ba80:	4619      	mov	r1, r3
 800ba82:	429a      	cmp	r2, r3
 800ba84:	f73f ae8b 	bgt.w	800b79e <st_sssa8_ch_convolve_dw+0x296>
 800ba88:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800ba8a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800ba8c:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800ba8e:	4413      	add	r3, r2
 800ba90:	3501      	adds	r5, #1
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	b22d      	sxth	r5, r5
 800ba96:	9340      	str	r3, [sp, #256]	; 0x100
 800ba98:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800ba9a:	462c      	mov	r4, r5
 800ba9c:	42ab      	cmp	r3, r5
 800ba9e:	f73f ae61 	bgt.w	800b764 <st_sssa8_ch_convolve_dw+0x25c>
 800baa2:	2000      	movs	r0, #0
 800baa4:	b06b      	add	sp, #428	; 0x1ac
 800baa6:	ecbd 8b02 	vpop	{d8}
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	4563      	cmp	r3, ip
 800bab0:	f841 6c04 	str.w	r6, [r1, #-4]
 800bab4:	f101 0104 	add.w	r1, r1, #4
 800bab8:	f47f ad6e 	bne.w	800b598 <st_sssa8_ch_convolve_dw+0x90>
 800babc:	e57f      	b.n	800b5be <st_sssa8_ch_convolve_dw+0xb6>
 800babe:	109b      	asrs	r3, r3, #2
 800bac0:	933e      	str	r3, [sp, #248]	; 0xf8
 800bac2:	2304      	movs	r3, #4
 800bac4:	9327      	str	r3, [sp, #156]	; 0x9c
 800bac6:	e5b9      	b.n	800b63c <st_sssa8_ch_convolve_dw+0x134>
 800bac8:	6813      	ldr	r3, [r2, #0]
 800baca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bacc:	b25a      	sxtb	r2, r3
 800bace:	f8b6 9000 	ldrh.w	r9, [r6]
 800bad2:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 800bad6:	1bd2      	subs	r2, r2, r7
 800bad8:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 800badc:	fb19 5502 	smlabb	r5, r9, r2, r5
 800bae0:	f343 2207 	sbfx	r2, r3, #8, #8
 800bae4:	1bd2      	subs	r2, r2, r7
 800bae6:	fb1e 4402 	smlabb	r4, lr, r2, r4
 800baea:	f343 4207 	sbfx	r2, r3, #16, #8
 800baee:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800baf2:	1bd2      	subs	r2, r2, r7
 800baf4:	fb18 0002 	smlabb	r0, r8, r2, r0
 800baf8:	88f2      	ldrh	r2, [r6, #6]
 800bafa:	fb12 1103 	smlabb	r1, r2, r3, r1
 800bafe:	f106 0308 	add.w	r3, r6, #8
 800bb02:	9e02      	ldr	r6, [sp, #8]
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	f9b6 7000 	ldrsh.w	r7, [r6]
 800bb0a:	2f15      	cmp	r7, #21
 800bb0c:	f73f af26 	bgt.w	800b95c <st_sssa8_ch_convolve_dw+0x454>
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	f340 80bf 	ble.w	800bc94 <st_sssa8_ch_convolve_dw+0x78c>
 800bb16:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800bb18:	006d      	lsls	r5, r5, #1
 800bb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb1c:	3602      	adds	r6, #2
 800bb1e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bb22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bb26:	fb55 2503 	smmla	r5, r5, r3, r2
 800bb2a:	fa45 f307 	asr.w	r3, r5, r7
 800bb2e:	f303 0307 	ssat	r3, #8, r3
 800bb32:	9d03      	ldr	r5, [sp, #12]
 800bb34:	f805 3b01 	strb.w	r3, [r5], #1
 800bb38:	f9b6 7000 	ldrsh.w	r7, [r6]
 800bb3c:	2f15      	cmp	r7, #21
 800bb3e:	f73f af28 	bgt.w	800b992 <st_sssa8_ch_convolve_dw+0x48a>
 800bb42:	2f00      	cmp	r7, #0
 800bb44:	f340 80e2 	ble.w	800bd0c <st_sssa8_ch_convolve_dw+0x804>
 800bb48:	9b07      	ldr	r3, [sp, #28]
 800bb4a:	0064      	lsls	r4, r4, #1
 800bb4c:	9a06      	ldr	r2, [sp, #24]
 800bb4e:	9e02      	ldr	r6, [sp, #8]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	3604      	adds	r6, #4
 800bb56:	fb54 2403 	smmla	r4, r4, r3, r2
 800bb5a:	fa44 f307 	asr.w	r3, r4, r7
 800bb5e:	f303 0307 	ssat	r3, #8, r3
 800bb62:	702b      	strb	r3, [r5, #0]
 800bb64:	f9b6 6000 	ldrsh.w	r6, [r6]
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	2e15      	cmp	r6, #21
 800bb6c:	f103 0402 	add.w	r4, r3, #2
 800bb70:	f73f af29 	bgt.w	800b9c6 <st_sssa8_ch_convolve_dw+0x4be>
 800bb74:	2e00      	cmp	r6, #0
 800bb76:	f340 80a3 	ble.w	800bcc0 <st_sssa8_ch_convolve_dw+0x7b8>
 800bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7c:	0040      	lsls	r0, r0, #1
 800bb7e:	9a08      	ldr	r2, [sp, #32]
 800bb80:	9d02      	ldr	r5, [sp, #8]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6812      	ldr	r2, [r2, #0]
 800bb86:	3506      	adds	r5, #6
 800bb88:	fb50 2003 	smmla	r0, r0, r3, r2
 800bb8c:	fa40 f306 	asr.w	r3, r0, r6
 800bb90:	f303 0307 	ssat	r3, #8, r3
 800bb94:	7023      	strb	r3, [r4, #0]
 800bb96:	f9b5 4000 	ldrsh.w	r4, [r5]
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	2c15      	cmp	r4, #21
 800bb9e:	f103 0003 	add.w	r0, r3, #3
 800bba2:	f73f af2a 	bgt.w	800b9fa <st_sssa8_ch_convolve_dw+0x4f2>
 800bba6:	2c00      	cmp	r4, #0
 800bba8:	f340 809f 	ble.w	800bcea <st_sssa8_ch_convolve_dw+0x7e2>
 800bbac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbae:	0049      	lsls	r1, r1, #1
 800bbb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6812      	ldr	r2, [r2, #0]
 800bbb6:	fb51 2103 	smmla	r1, r1, r3, r2
 800bbba:	fa41 f304 	asr.w	r3, r1, r4
 800bbbe:	f303 0307 	ssat	r3, #8, r3
 800bbc2:	7003      	strb	r3, [r0, #0]
 800bbc4:	e72a      	b.n	800ba1c <st_sssa8_ch_convolve_dw+0x514>
 800bbc6:	9b06      	ldr	r3, [sp, #24]
 800bbc8:	4419      	add	r1, r3
 800bbca:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800bbce:	fb03 2501 	mla	r5, r3, r1, r2
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f43f ae35 	beq.w	800b842 <st_sssa8_ch_convolve_dw+0x33a>
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	f43f ae31 	beq.w	800b842 <st_sssa8_ch_convolve_dw+0x33a>
 800bbe0:	46c4      	mov	ip, r8
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	ee07 0a90 	vmov	s15, r0
 800bbe8:	f8cd 8020 	str.w	r8, [sp, #32]
 800bbec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bbf0:	eb05 0e03 	add.w	lr, r5, r3
 800bbf4:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 800bbf8:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800bbfa:	9402      	str	r4, [sp, #8]
 800bbfc:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 800bc00:	3501      	adds	r5, #1
 800bc02:	4614      	mov	r4, r2
 800bc04:	42aa      	cmp	r2, r5
 800bc06:	f105 31ff 	add.w	r1, r5, #4294967295
 800bc0a:	444a      	add	r2, r9
 800bc0c:	bf34      	ite	cc
 800bc0e:	2300      	movcc	r3, #0
 800bc10:	2301      	movcs	r3, #1
 800bc12:	428a      	cmp	r2, r1
 800bc14:	bf98      	it	ls
 800bc16:	f043 0301 	orrls.w	r3, r3, #1
 800bc1a:	b373      	cbz	r3, 800bc7a <st_sssa8_ch_convolve_dw+0x772>
 800bc1c:	f1ba 0f07 	cmp.w	sl, #7
 800bc20:	d92b      	bls.n	800bc7a <st_sssa8_ch_convolve_dw+0x772>
 800bc22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc26:	2100      	movs	r1, #0
 800bc28:	eb00 060c 	add.w	r6, r0, ip
 800bc2c:	f363 0107 	bfi	r1, r3, #0, #8
 800bc30:	f363 210f 	bfi	r1, r3, #8, #8
 800bc34:	f363 4117 	bfi	r1, r3, #16, #8
 800bc38:	f363 611f 	bfi	r1, r3, #24, #8
 800bc3c:	4663      	mov	r3, ip
 800bc3e:	f843 1b04 	str.w	r1, [r3], #4
 800bc42:	42b3      	cmp	r3, r6
 800bc44:	d1fb      	bne.n	800bc3e <st_sssa8_ch_convolve_dw+0x736>
 800bc46:	45b9      	cmp	r9, r7
 800bc48:	eb04 0307 	add.w	r3, r4, r7
 800bc4c:	d00c      	beq.n	800bc68 <st_sssa8_ch_convolve_dw+0x760>
 800bc4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bc52:	55e1      	strb	r1, [r4, r7]
 800bc54:	f1b8 0f00 	cmp.w	r8, #0
 800bc58:	d006      	beq.n	800bc68 <st_sssa8_ch_convolve_dw+0x760>
 800bc5a:	f1b8 0f01 	cmp.w	r8, #1
 800bc5e:	7059      	strb	r1, [r3, #1]
 800bc60:	d002      	beq.n	800bc68 <st_sssa8_ch_convolve_dw+0x760>
 800bc62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bc66:	7099      	strb	r1, [r3, #2]
 800bc68:	45ae      	cmp	lr, r5
 800bc6a:	44cc      	add	ip, r9
 800bc6c:	d1c8      	bne.n	800bc00 <st_sssa8_ch_convolve_dw+0x6f8>
 800bc6e:	9c02      	ldr	r4, [sp, #8]
 800bc70:	ee17 0a90 	vmov	r0, s15
 800bc74:	e9dd 8a08 	ldrd	r8, sl, [sp, #32]
 800bc78:	e5e3      	b.n	800b842 <st_sssa8_ch_convolve_dw+0x33a>
 800bc7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc7e:	f804 3b01 	strb.w	r3, [r4], #1
 800bc82:	4294      	cmp	r4, r2
 800bc84:	d0f0      	beq.n	800bc68 <st_sssa8_ch_convolve_dw+0x760>
 800bc86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc8a:	f804 3b01 	strb.w	r3, [r4], #1
 800bc8e:	4294      	cmp	r4, r2
 800bc90:	d1f3      	bne.n	800bc7a <st_sssa8_ch_convolve_dw+0x772>
 800bc92:	e7e9      	b.n	800bc68 <st_sssa8_ch_convolve_dw+0x760>
 800bc94:	f1c7 0201 	rsb	r2, r7, #1
 800bc98:	3602      	adds	r6, #2
 800bc9a:	fa05 f202 	lsl.w	r2, r5, r2
 800bc9e:	f302 021f 	ssat	r2, #32, r2
 800bca2:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800bca4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bca8:	fb52 f213 	smmulr	r2, r2, r3
 800bcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f303 0307 	ssat	r3, #8, r3
 800bcb8:	9d03      	ldr	r5, [sp, #12]
 800bcba:	f805 3b01 	strb.w	r3, [r5], #1
 800bcbe:	e663      	b.n	800b988 <st_sssa8_ch_convolve_dw+0x480>
 800bcc0:	f1c6 0201 	rsb	r2, r6, #1
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	fa00 f202 	lsl.w	r2, r0, r2
 800bcca:	1d9d      	adds	r5, r3, #6
 800bccc:	f302 021f 	ssat	r2, #32, r2
 800bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	fb52 f213 	smmulr	r2, r2, r3
 800bcd8:	9b08      	ldr	r3, [sp, #32]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f303 0307 	ssat	r3, #8, r3
 800bce2:	7023      	strb	r3, [r4, #0]
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	1cd8      	adds	r0, r3, #3
 800bce8:	e682      	b.n	800b9f0 <st_sssa8_ch_convolve_dw+0x4e8>
 800bcea:	f1c4 0401 	rsb	r4, r4, #1
 800bcee:	fa01 f204 	lsl.w	r2, r1, r4
 800bcf2:	f302 021f 	ssat	r2, #32, r2
 800bcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	fb52 f213 	smmulr	r2, r2, r3
 800bcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4413      	add	r3, r2
 800bd04:	f303 0307 	ssat	r3, #8, r3
 800bd08:	7003      	strb	r3, [r0, #0]
 800bd0a:	e687      	b.n	800ba1c <st_sssa8_ch_convolve_dw+0x514>
 800bd0c:	f1c7 0201 	rsb	r2, r7, #1
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	fa04 f202 	lsl.w	r2, r4, r2
 800bd16:	1d1e      	adds	r6, r3, #4
 800bd18:	f302 021f 	ssat	r2, #32, r2
 800bd1c:	9b07      	ldr	r3, [sp, #28]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	fb52 f213 	smmulr	r2, r2, r3
 800bd24:	9b06      	ldr	r3, [sp, #24]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4413      	add	r3, r2
 800bd2a:	f303 0307 	ssat	r3, #8, r3
 800bd2e:	702b      	strb	r3, [r5, #0]
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	1c9c      	adds	r4, r3, #2
 800bd34:	e642      	b.n	800b9bc <st_sssa8_ch_convolve_dw+0x4b4>
 800bd36:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	f000 82b6 	beq.w	800c2aa <st_sssa8_ch_convolve_dw+0xda2>
 800bd3e:	3a01      	subs	r2, #1
 800bd40:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800bd42:	9257      	str	r2, [sp, #348]	; 0x15c
 800bd44:	2801      	cmp	r0, #1
 800bd46:	f8bd 217c 	ldrh.w	r2, [sp, #380]	; 0x17c
 800bd4a:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800bd4e:	f47f ad33 	bne.w	800b7b8 <st_sssa8_ch_convolve_dw+0x2b0>
 800bd52:	2a01      	cmp	r2, #1
 800bd54:	f000 82b3 	beq.w	800c2be <st_sssa8_ch_convolve_dw+0xdb6>
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bd5c:	f9bd 5094 	ldrsh.w	r5, [sp, #148]	; 0x94
 800bd60:	9328      	str	r3, [sp, #160]	; 0xa0
 800bd62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bd64:	429f      	cmp	r7, r3
 800bd66:	f77f ad7d 	ble.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800bd6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd6c:	461c      	mov	r4, r3
 800bd6e:	f8cd b008 	str.w	fp, [sp, #8]
 800bd72:	4618      	mov	r0, r3
 800bd74:	46b3      	mov	fp, r6
 800bd76:	f8cd a00c 	str.w	sl, [sp, #12]
 800bd7a:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800bd7e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800bd82:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800bd84:	f8dd a10c 	ldr.w	sl, [sp, #268]	; 0x10c
 800bd88:	3401      	adds	r4, #1
 800bd8a:	fb00 5009 	mla	r0, r0, r9, r5
 800bd8e:	4659      	mov	r1, fp
 800bd90:	4652      	mov	r2, sl
 800bd92:	b224      	sxth	r4, r4
 800bd94:	fb06 8000 	mla	r0, r6, r0, r8
 800bd98:	f005 ffc0 	bl	8011d1c <st_int8_copy>
 800bd9c:	44d3      	add	fp, sl
 800bd9e:	42a7      	cmp	r7, r4
 800bda0:	4620      	mov	r0, r4
 800bda2:	dcf1      	bgt.n	800bd88 <st_sssa8_ch_convolve_dw+0x880>
 800bda4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800bda6:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f ad5e 	beq.w	800b86c <st_sssa8_ch_convolve_dw+0x364>
 800bdb0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 8356 	beq.w	800c464 <st_sssa8_ch_convolve_dw+0xf5c>
 800bdb8:	ee18 3a10 	vmov	r3, s16
 800bdbc:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800bdbe:	9d86      	ldr	r5, [sp, #536]	; 0x218
 800bdc0:	f04f 0900 	mov.w	r9, #0
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	9203      	str	r2, [sp, #12]
 800bdc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdca:	9308      	str	r3, [sp, #32]
 800bdcc:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800bdce:	992b      	ldr	r1, [sp, #172]	; 0xac
 800bdd0:	f103 0610 	add.w	r6, r3, #16
 800bdd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bdd6:	9202      	str	r2, [sp, #8]
 800bdd8:	3348      	adds	r3, #72	; 0x48
 800bdda:	9504      	str	r5, [sp, #16]
 800bddc:	f8cd a01c 	str.w	sl, [sp, #28]
 800bde0:	e081      	b.n	800bee6 <st_sssa8_ch_convolve_dw+0x9de>
 800bde2:	f1a2 0a02 	sub.w	sl, r2, #2
 800bde6:	2001      	movs	r0, #1
 800bde8:	9f04      	ldr	r7, [sp, #16]
 800bdea:	3a01      	subs	r2, #1
 800bdec:	fa00 fa0a 	lsl.w	sl, r0, sl
 800bdf0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bdf4:	f857 0b04 	ldr.w	r0, [r7], #4
 800bdf8:	f101 0802 	add.w	r8, r1, #2
 800bdfc:	fb5c ac00 	smmla	ip, ip, r0, sl
 800be00:	fa4c f202 	asr.w	r2, ip, r2
 800be04:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be08:	4402      	add	r2, r0
 800be0a:	f302 0207 	ssat	r2, #8, r2
 800be0e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800be12:	f80c 2b01 	strb.w	r2, [ip], #1
 800be16:	f9b8 2000 	ldrsh.w	r2, [r8]
 800be1a:	2a15      	cmp	r2, #21
 800be1c:	f340 814d 	ble.w	800c0ba <st_sssa8_ch_convolve_dw+0xbb2>
 800be20:	6838      	ldr	r0, [r7, #0]
 800be22:	2501      	movs	r5, #1
 800be24:	1e97      	subs	r7, r2, #2
 800be26:	3a01      	subs	r2, #1
 800be28:	f8de e000 	ldr.w	lr, [lr]
 800be2c:	fa05 f707 	lsl.w	r7, r5, r7
 800be30:	9d04      	ldr	r5, [sp, #16]
 800be32:	fb54 7400 	smmla	r4, r4, r0, r7
 800be36:	4114      	asrs	r4, r2
 800be38:	9a02      	ldr	r2, [sp, #8]
 800be3a:	f105 0808 	add.w	r8, r5, #8
 800be3e:	1d08      	adds	r0, r1, #4
 800be40:	44a6      	add	lr, r4
 800be42:	f102 0408 	add.w	r4, r2, #8
 800be46:	f30e 0e07 	ssat	lr, #8, lr
 800be4a:	9a03      	ldr	r2, [sp, #12]
 800be4c:	f88c e000 	strb.w	lr, [ip]
 800be50:	f102 0c02 	add.w	ip, r2, #2
 800be54:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be58:	2a15      	cmp	r2, #21
 800be5a:	f340 814c 	ble.w	800c0f6 <st_sssa8_ch_convolve_dw+0xbee>
 800be5e:	f8d4 e000 	ldr.w	lr, [r4]
 800be62:	2501      	movs	r5, #1
 800be64:	1e94      	subs	r4, r2, #2
 800be66:	3a01      	subs	r2, #1
 800be68:	f8d8 0000 	ldr.w	r0, [r8]
 800be6c:	fa05 f404 	lsl.w	r4, r5, r4
 800be70:	9d04      	ldr	r5, [sp, #16]
 800be72:	f105 070c 	add.w	r7, r5, #12
 800be76:	9d05      	ldr	r5, [sp, #20]
 800be78:	fb55 4000 	smmla	r0, r5, r0, r4
 800be7c:	fa40 f202 	asr.w	r2, r0, r2
 800be80:	1d88      	adds	r0, r1, #6
 800be82:	4496      	add	lr, r2
 800be84:	9a02      	ldr	r2, [sp, #8]
 800be86:	f102 040c 	add.w	r4, r2, #12
 800be8a:	f30e 0e07 	ssat	lr, #8, lr
 800be8e:	9a03      	ldr	r2, [sp, #12]
 800be90:	f88c e000 	strb.w	lr, [ip]
 800be94:	f102 0c03 	add.w	ip, r2, #3
 800be98:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be9c:	2a15      	cmp	r2, #21
 800be9e:	f340 8148 	ble.w	800c132 <st_sssa8_ch_convolve_dw+0xc2a>
 800bea2:	6838      	ldr	r0, [r7, #0]
 800bea4:	2501      	movs	r5, #1
 800bea6:	6827      	ldr	r7, [r4, #0]
 800bea8:	1e94      	subs	r4, r2, #2
 800beaa:	3a01      	subs	r2, #1
 800beac:	fa05 f404 	lsl.w	r4, r5, r4
 800beb0:	9d06      	ldr	r5, [sp, #24]
 800beb2:	fb55 4000 	smmla	r0, r5, r0, r4
 800beb6:	4110      	asrs	r0, r2
 800beb8:	4438      	add	r0, r7
 800beba:	f300 0007 	ssat	r0, #8, r0
 800bebe:	f88c 0000 	strb.w	r0, [ip]
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	3610      	adds	r6, #16
 800bec6:	3348      	adds	r3, #72	; 0x48
 800bec8:	f109 0904 	add.w	r9, r9, #4
 800becc:	3210      	adds	r2, #16
 800bece:	3108      	adds	r1, #8
 800bed0:	9204      	str	r2, [sp, #16]
 800bed2:	9a03      	ldr	r2, [sp, #12]
 800bed4:	3204      	adds	r2, #4
 800bed6:	9203      	str	r2, [sp, #12]
 800bed8:	9a02      	ldr	r2, [sp, #8]
 800beda:	3210      	adds	r2, #16
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bee0:	42b2      	cmp	r2, r6
 800bee2:	f000 818b 	beq.w	800c1fc <st_sssa8_ch_convolve_dw+0xcf4>
 800bee6:	9a07      	ldr	r2, [sp, #28]
 800bee8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800beea:	444a      	add	r2, r9
 800beec:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800bef0:	f850 7009 	ldr.w	r7, [r0, r9]
 800bef4:	f850 c002 	ldr.w	ip, [r0, r2]
 800bef8:	4abf      	ldr	r2, [pc, #764]	; (800c1f8 <st_sssa8_ch_convolve_dw+0xcf0>)
 800befa:	fa1f fe87 	uxth.w	lr, r7
 800befe:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800bf02:	ea0c 0202 	and.w	r2, ip, r2
 800bf06:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800bf0a:	fa2b fc8e 	sxtab16	ip, fp, lr
 800bf0e:	ea42 4217 	orr.w	r2, r2, r7, lsr #16
 800bf12:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800bf16:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800bf1a:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800bf1e:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 800bf22:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800bf26:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800bf2a:	f856 4c08 	ldr.w	r4, [r6, #-8]
 800bf2e:	fa2b f782 	sxtab16	r7, fp, r2
 800bf32:	fb20 4007 	smlad	r0, r0, r7, r4
 800bf36:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800bf3a:	f853 7c3c 	ldr.w	r7, [r3, #-60]
 800bf3e:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800bf42:	fb27 4702 	smlad	r7, r7, r2, r4
 800bf46:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800bf48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bf4a:	f854 4009 	ldr.w	r4, [r4, r9]
 800bf4e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800c1f8 <st_sssa8_ch_convolve_dw+0xcf0>
 800bf52:	f852 2009 	ldr.w	r2, [r2, r9]
 800bf56:	ea04 0808 	and.w	r8, r4, r8
 800bf5a:	f853 5c38 	ldr.w	r5, [r3, #-56]
 800bf5e:	ea48 4812 	orr.w	r8, r8, r2, lsr #16
 800bf62:	b292      	uxth	r2, r2
 800bf64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf68:	fa2b f482 	sxtab16	r4, fp, r2
 800bf6c:	fb25 cc04 	smlad	ip, r5, r4, ip
 800bf70:	fa2b f492 	sxtab16	r4, fp, r2, ror #8
 800bf74:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800bf78:	fb22 e404 	smlad	r4, r2, r4, lr
 800bf7c:	f853 5c30 	ldr.w	r5, [r3, #-48]
 800bf80:	fa2b f288 	sxtab16	r2, fp, r8
 800bf84:	fb25 0002 	smlad	r0, r5, r2, r0
 800bf88:	fa2b f898 	sxtab16	r8, fp, r8, ror #8
 800bf8c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800bf90:	fb22 7708 	smlad	r7, r2, r8, r7
 800bf94:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bf96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf98:	f855 e009 	ldr.w	lr, [r5, r9]
 800bf9c:	f8df a258 	ldr.w	sl, [pc, #600]	; 800c1f8 <st_sssa8_ch_convolve_dw+0xcf0>
 800bfa0:	f852 2009 	ldr.w	r2, [r2, r9]
 800bfa4:	ea0e 0a0a 	and.w	sl, lr, sl
 800bfa8:	f853 5c28 	ldr.w	r5, [r3, #-40]
 800bfac:	ea4a 4a12 	orr.w	sl, sl, r2, lsr #16
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800bfb6:	fa2b fe82 	sxtab16	lr, fp, r2
 800bfba:	fb25 cc0e 	smlad	ip, r5, lr, ip
 800bfbe:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800bfc2:	f853 5c24 	ldr.w	r5, [r3, #-36]
 800bfc6:	fb25 4402 	smlad	r4, r5, r2, r4
 800bfca:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800bfce:	fa2b f28a 	sxtab16	r2, fp, sl
 800bfd2:	fb25 0002 	smlad	r0, r5, r2, r0
 800bfd6:	fa2b fa9a 	sxtab16	sl, fp, sl, ror #8
 800bfda:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800bfde:	fb22 770a 	smlad	r7, r2, sl, r7
 800bfe2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800bfe4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bfe6:	f855 8009 	ldr.w	r8, [r5, r9]
 800bfea:	f8df e20c 	ldr.w	lr, [pc, #524]	; 800c1f8 <st_sssa8_ch_convolve_dw+0xcf0>
 800bfee:	f852 2009 	ldr.w	r2, [r2, r9]
 800bff2:	ea08 0e0e 	and.w	lr, r8, lr
 800bff6:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800bffa:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800bffe:	b292      	uxth	r2, r2
 800c000:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800c004:	fa2b f882 	sxtab16	r8, fp, r2
 800c008:	fb25 cc08 	smlad	ip, r5, r8, ip
 800c00c:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 800c010:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800c014:	fb25 4402 	smlad	r4, r5, r2, r4
 800c018:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800c01c:	fa2b f28e 	sxtab16	r2, fp, lr
 800c020:	fb25 0002 	smlad	r0, r5, r2, r0
 800c024:	fa2b fe9e 	sxtab16	lr, fp, lr, ror #8
 800c028:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800c02c:	fb22 720e 	smlad	r2, r2, lr, r7
 800c030:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c032:	f833 8c08 	ldrh.w	r8, [r3, #-8]
 800c036:	f855 7009 	ldr.w	r7, [r5, r9]
 800c03a:	9d08      	ldr	r5, [sp, #32]
 800c03c:	fa4f fe87 	sxtb.w	lr, r7
 800c040:	f833 ac06 	ldrh.w	sl, [r3, #-6]
 800c044:	ebae 0e05 	sub.w	lr, lr, r5
 800c048:	fb18 cc0e 	smlabb	ip, r8, lr, ip
 800c04c:	f347 2e07 	sbfx	lr, r7, #8, #8
 800c050:	ebae 0e05 	sub.w	lr, lr, r5
 800c054:	fb1a 440e 	smlabb	r4, sl, lr, r4
 800c058:	f347 4e07 	sbfx	lr, r7, #16, #8
 800c05c:	ebc5 6727 	rsb	r7, r5, r7, asr #24
 800c060:	ebae 0e05 	sub.w	lr, lr, r5
 800c064:	f833 5c04 	ldrh.w	r5, [r3, #-4]
 800c068:	fb15 000e 	smlabb	r0, r5, lr, r0
 800c06c:	9005      	str	r0, [sp, #20]
 800c06e:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800c072:	fb10 2207 	smlabb	r2, r0, r7, r2
 800c076:	9206      	str	r2, [sp, #24]
 800c078:	f9b1 2000 	ldrsh.w	r2, [r1]
 800c07c:	2a15      	cmp	r2, #21
 800c07e:	f73f aeb0 	bgt.w	800bde2 <st_sssa8_ch_convolve_dw+0x8da>
 800c082:	2a00      	cmp	r2, #0
 800c084:	dd64      	ble.n	800c150 <st_sssa8_ch_convolve_dw+0xc48>
 800c086:	9f04      	ldr	r7, [sp, #16]
 800c088:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c08c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c090:	f101 0802 	add.w	r8, r1, #2
 800c094:	f857 0b04 	ldr.w	r0, [r7], #4
 800c098:	f85e ab04 	ldr.w	sl, [lr], #4
 800c09c:	fb5c ac00 	smmla	ip, ip, r0, sl
 800c0a0:	fa4c f202 	asr.w	r2, ip, r2
 800c0a4:	f302 0207 	ssat	r2, #8, r2
 800c0a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c0ac:	f80c 2b01 	strb.w	r2, [ip], #1
 800c0b0:	f9b8 2000 	ldrsh.w	r2, [r8]
 800c0b4:	2a15      	cmp	r2, #21
 800c0b6:	f73f aeb3 	bgt.w	800be20 <st_sssa8_ch_convolve_dw+0x918>
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	f340 8083 	ble.w	800c1c6 <st_sssa8_ch_convolve_dw+0xcbe>
 800c0c0:	6838      	ldr	r0, [r7, #0]
 800c0c2:	0064      	lsls	r4, r4, #1
 800c0c4:	f8de 7000 	ldr.w	r7, [lr]
 800c0c8:	9d04      	ldr	r5, [sp, #16]
 800c0ca:	fb54 7400 	smmla	r4, r4, r0, r7
 800c0ce:	9802      	ldr	r0, [sp, #8]
 800c0d0:	fa44 f202 	asr.w	r2, r4, r2
 800c0d4:	f105 0808 	add.w	r8, r5, #8
 800c0d8:	f100 0408 	add.w	r4, r0, #8
 800c0dc:	1d08      	adds	r0, r1, #4
 800c0de:	f302 0207 	ssat	r2, #8, r2
 800c0e2:	f88c 2000 	strb.w	r2, [ip]
 800c0e6:	9a03      	ldr	r2, [sp, #12]
 800c0e8:	f102 0c02 	add.w	ip, r2, #2
 800c0ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c0f0:	2a15      	cmp	r2, #21
 800c0f2:	f73f aeb4 	bgt.w	800be5e <st_sssa8_ch_convolve_dw+0x956>
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	dd4a      	ble.n	800c190 <st_sssa8_ch_convolve_dw+0xc88>
 800c0fa:	9805      	ldr	r0, [sp, #20]
 800c0fc:	6824      	ldr	r4, [r4, #0]
 800c0fe:	f8d8 e000 	ldr.w	lr, [r8]
 800c102:	0040      	lsls	r0, r0, #1
 800c104:	9d04      	ldr	r5, [sp, #16]
 800c106:	fb50 400e 	smmla	r0, r0, lr, r4
 800c10a:	fa40 f202 	asr.w	r2, r0, r2
 800c10e:	9802      	ldr	r0, [sp, #8]
 800c110:	f105 070c 	add.w	r7, r5, #12
 800c114:	f100 040c 	add.w	r4, r0, #12
 800c118:	1d88      	adds	r0, r1, #6
 800c11a:	f302 0207 	ssat	r2, #8, r2
 800c11e:	f88c 2000 	strb.w	r2, [ip]
 800c122:	9a03      	ldr	r2, [sp, #12]
 800c124:	f102 0c03 	add.w	ip, r2, #3
 800c128:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c12c:	2a15      	cmp	r2, #21
 800c12e:	f73f aeb8 	bgt.w	800bea2 <st_sssa8_ch_convolve_dw+0x99a>
 800c132:	2a00      	cmp	r2, #0
 800c134:	dd1c      	ble.n	800c170 <st_sssa8_ch_convolve_dw+0xc68>
 800c136:	9806      	ldr	r0, [sp, #24]
 800c138:	683f      	ldr	r7, [r7, #0]
 800c13a:	6824      	ldr	r4, [r4, #0]
 800c13c:	0040      	lsls	r0, r0, #1
 800c13e:	fb50 4007 	smmla	r0, r0, r7, r4
 800c142:	fa40 f202 	asr.w	r2, r0, r2
 800c146:	f302 0207 	ssat	r2, #8, r2
 800c14a:	f88c 2000 	strb.w	r2, [ip]
 800c14e:	e6b8      	b.n	800bec2 <st_sssa8_ch_convolve_dw+0x9ba>
 800c150:	f1c2 0201 	rsb	r2, r2, #1
 800c154:	f101 0802 	add.w	r8, r1, #2
 800c158:	fa0c f202 	lsl.w	r2, ip, r2
 800c15c:	f302 021f 	ssat	r2, #32, r2
 800c160:	9f04      	ldr	r7, [sp, #16]
 800c162:	f857 0b04 	ldr.w	r0, [r7], #4
 800c166:	fb52 f210 	smmulr	r2, r2, r0
 800c16a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c16e:	e649      	b.n	800be04 <st_sssa8_ch_convolve_dw+0x8fc>
 800c170:	f1c2 0201 	rsb	r2, r2, #1
 800c174:	9806      	ldr	r0, [sp, #24]
 800c176:	4090      	lsls	r0, r2
 800c178:	f300 021f 	ssat	r2, #32, r0
 800c17c:	6838      	ldr	r0, [r7, #0]
 800c17e:	fb52 f210 	smmulr	r2, r2, r0
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	4402      	add	r2, r0
 800c186:	f302 0207 	ssat	r2, #8, r2
 800c18a:	f88c 2000 	strb.w	r2, [ip]
 800c18e:	e698      	b.n	800bec2 <st_sssa8_ch_convolve_dw+0x9ba>
 800c190:	f1c2 0201 	rsb	r2, r2, #1
 800c194:	9805      	ldr	r0, [sp, #20]
 800c196:	4090      	lsls	r0, r2
 800c198:	4602      	mov	r2, r0
 800c19a:	1d88      	adds	r0, r1, #6
 800c19c:	f302 021f 	ssat	r2, #32, r2
 800c1a0:	9d04      	ldr	r5, [sp, #16]
 800c1a2:	f8d8 e000 	ldr.w	lr, [r8]
 800c1a6:	f105 070c 	add.w	r7, r5, #12
 800c1aa:	fb52 f21e 	smmulr	r2, r2, lr
 800c1ae:	6824      	ldr	r4, [r4, #0]
 800c1b0:	4422      	add	r2, r4
 800c1b2:	9c02      	ldr	r4, [sp, #8]
 800c1b4:	340c      	adds	r4, #12
 800c1b6:	f302 0207 	ssat	r2, #8, r2
 800c1ba:	f88c 2000 	strb.w	r2, [ip]
 800c1be:	9a03      	ldr	r2, [sp, #12]
 800c1c0:	f102 0c03 	add.w	ip, r2, #3
 800c1c4:	e668      	b.n	800be98 <st_sssa8_ch_convolve_dw+0x990>
 800c1c6:	f1c2 0201 	rsb	r2, r2, #1
 800c1ca:	1d08      	adds	r0, r1, #4
 800c1cc:	4094      	lsls	r4, r2
 800c1ce:	f304 021f 	ssat	r2, #32, r4
 800c1d2:	9d04      	ldr	r5, [sp, #16]
 800c1d4:	683c      	ldr	r4, [r7, #0]
 800c1d6:	f105 0808 	add.w	r8, r5, #8
 800c1da:	fb52 f214 	smmulr	r2, r2, r4
 800c1de:	f8de 4000 	ldr.w	r4, [lr]
 800c1e2:	4422      	add	r2, r4
 800c1e4:	9c02      	ldr	r4, [sp, #8]
 800c1e6:	3408      	adds	r4, #8
 800c1e8:	f302 0207 	ssat	r2, #8, r2
 800c1ec:	f88c 2000 	strb.w	r2, [ip]
 800c1f0:	9a03      	ldr	r2, [sp, #12]
 800c1f2:	f102 0c02 	add.w	ip, r2, #2
 800c1f6:	e62d      	b.n	800be54 <st_sssa8_ch_convolve_dw+0x94c>
 800c1f8:	ffff0000 	.word	0xffff0000
 800c1fc:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c1fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c200:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c204:	4413      	add	r3, r2
 800c206:	9383      	str	r3, [sp, #524]	; 0x20c
 800c208:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f43f ac2d 	beq.w	800ba6e <st_sssa8_ch_convolve_dw+0x566>
 800c214:	9f44      	ldr	r7, [sp, #272]	; 0x110
 800c216:	e9dd 8c47 	ldrd	r8, ip, [sp, #284]	; 0x11c
 800c21a:	e9dd 3445 	ldrd	r3, r4, [sp, #276]	; 0x114
 800c21e:	f1a3 0902 	sub.w	r9, r3, #2
 800c222:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c224:	9904      	ldr	r1, [sp, #16]
 800c226:	4423      	add	r3, r4
 800c228:	f8cd b00c 	str.w	fp, [sp, #12]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	9302      	str	r3, [sp, #8]
 800c230:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c232:	f103 0e01 	add.w	lr, r3, #1
 800c236:	ee18 3a10 	vmov	r3, s16
 800c23a:	b218      	sxth	r0, r3
 800c23c:	1c63      	adds	r3, r4, #1
 800c23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c240:	f858 6b04 	ldr.w	r6, [r8], #4
 800c244:	1915      	adds	r5, r2, r4
 800c246:	b29c      	uxth	r4, r3
 800c248:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 8219 	beq.w	800c682 <st_sssa8_ch_convolve_dw+0x117a>
 800c250:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c252:	18cb      	adds	r3, r1, r3
 800c254:	f995 2000 	ldrsb.w	r2, [r5]
 800c258:	4455      	add	r5, sl
 800c25a:	f831 bb02 	ldrh.w	fp, [r1], #2
 800c25e:	1a12      	subs	r2, r2, r0
 800c260:	4299      	cmp	r1, r3
 800c262:	fb1b 6602 	smlabb	r6, fp, r2, r6
 800c266:	d1f5      	bne.n	800c254 <st_sssa8_ch_convolve_dw+0xd4c>
 800c268:	f939 5f02 	ldrsh.w	r5, [r9, #2]!
 800c26c:	2d15      	cmp	r5, #21
 800c26e:	f340 80d1 	ble.w	800c414 <st_sssa8_ch_convolve_dw+0xf0c>
 800c272:	1ea9      	subs	r1, r5, #2
 800c274:	2201      	movs	r2, #1
 800c276:	3d01      	subs	r5, #1
 800c278:	fa02 f101 	lsl.w	r1, r2, r1
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	fb56 1202 	smmla	r2, r6, r2, r1
 800c282:	fa42 f505 	asr.w	r5, r2, r5
 800c286:	f8dc 2000 	ldr.w	r2, [ip]
 800c28a:	442a      	add	r2, r5
 800c28c:	f302 0207 	ssat	r2, #8, r2
 800c290:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800c294:	9a02      	ldr	r2, [sp, #8]
 800c296:	3704      	adds	r7, #4
 800c298:	f10c 0c04 	add.w	ip, ip, #4
 800c29c:	f10e 0e01 	add.w	lr, lr, #1
 800c2a0:	4294      	cmp	r4, r2
 800c2a2:	f000 80c6 	beq.w	800c432 <st_sssa8_ch_convolve_dw+0xf2a>
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	e7c8      	b.n	800c23c <st_sssa8_ch_convolve_dw+0xd34>
 800c2aa:	9a58      	ldr	r2, [sp, #352]	; 0x160
 800c2ac:	3a01      	subs	r2, #1
 800c2ae:	9258      	str	r2, [sp, #352]	; 0x160
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
 800c2b6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c2b8:	2a01      	cmp	r2, #1
 800c2ba:	f47f aa7d 	bne.w	800b7b8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c2be:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c2c2:	4290      	cmp	r0, r2
 800c2c4:	f340 81d9 	ble.w	800c67a <st_sssa8_ch_convolve_dw+0x1172>
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800c2cc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800c2ce:	9328      	str	r3, [sp, #160]	; 0xa0
 800c2d0:	fb01 0104 	mla	r1, r1, r4, r0
 800c2d4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c2d6:	1acd      	subs	r5, r1, r3
 800c2d8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	f6bf aac0 	bge.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c2e4:	f8cd b014 	str.w	fp, [sp, #20]
 800c2e8:	4617      	mov	r7, r2
 800c2ea:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c2ee:	4690      	mov	r8, r2
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c2f4:	ee18 ba10 	vmov	fp, s16
 800c2f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2fa:	f8dd e010 	ldr.w	lr, [sp, #16]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	fb03 f306 	mul.w	r3, r3, r6
 800c304:	4674      	mov	r4, lr
 800c306:	bfcc      	ite	gt
 800c308:	2700      	movgt	r7, #0
 800c30a:	2701      	movle	r7, #1
 800c30c:	9303      	str	r3, [sp, #12]
 800c30e:	ea47 77d8 	orr.w	r7, r7, r8, lsr #31
 800c312:	9702      	str	r7, [sp, #8]
 800c314:	0fe3      	lsrs	r3, r4, #31
 800c316:	4652      	mov	r2, sl
 800c318:	4649      	mov	r1, r9
 800c31a:	4658      	mov	r0, fp
 800c31c:	4576      	cmp	r6, lr
 800c31e:	bfd8      	it	le
 800c320:	f043 0301 	orrle.w	r3, r3, #1
 800c324:	b91b      	cbnz	r3, 800c32e <st_sssa8_ch_convolve_dw+0xe26>
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80ec 	beq.w	800c506 <st_sssa8_ch_convolve_dw+0xffe>
 800c32e:	f005 fc8d 	bl	8011c4c <st_int8_fill>
 800c332:	3401      	adds	r4, #1
 800c334:	44d1      	add	r9, sl
 800c336:	b224      	sxth	r4, r4
 800c338:	42ac      	cmp	r4, r5
 800c33a:	46a6      	mov	lr, r4
 800c33c:	dbea      	blt.n	800c314 <st_sssa8_ch_convolve_dw+0xe0c>
 800c33e:	f108 0801 	add.w	r8, r8, #1
 800c342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c344:	fa0f f888 	sxth.w	r8, r8
 800c348:	4542      	cmp	r2, r8
 800c34a:	4643      	mov	r3, r8
 800c34c:	dcd4      	bgt.n	800c2f8 <st_sssa8_ch_convolve_dw+0xdf0>
 800c34e:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c352:	f7ff ba87 	b.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c356:	4282      	cmp	r2, r0
 800c358:	f340 818f 	ble.w	800c67a <st_sssa8_ch_convolve_dw+0x1172>
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c360:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c362:	9328      	str	r3, [sp, #160]	; 0xa0
 800c364:	fb01 2100 	mla	r1, r1, r0, r2
 800c368:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c36a:	1acd      	subs	r5, r1, r3
 800c36c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c370:	429d      	cmp	r5, r3
 800c372:	9303      	str	r3, [sp, #12]
 800c374:	f77f aa76 	ble.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c378:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 800c37c:	f8cd b010 	str.w	fp, [sp, #16]
 800c380:	4647      	mov	r7, r8
 800c382:	4643      	mov	r3, r8
 800c384:	46c3      	mov	fp, r8
 800c386:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c38a:	46d0      	mov	r8, sl
 800c38c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c38e:	ee18 aa10 	vmov	sl, s16
 800c392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c394:	9903      	ldr	r1, [sp, #12]
 800c396:	429a      	cmp	r2, r3
 800c398:	fb03 f306 	mul.w	r3, r3, r6
 800c39c:	460c      	mov	r4, r1
 800c39e:	bfcc      	ite	gt
 800c3a0:	2700      	movgt	r7, #0
 800c3a2:	2701      	movle	r7, #1
 800c3a4:	9302      	str	r3, [sp, #8]
 800c3a6:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 800c3aa:	0fe3      	lsrs	r3, r4, #31
 800c3ac:	428e      	cmp	r6, r1
 800c3ae:	bfd8      	it	le
 800c3b0:	f043 0301 	orrle.w	r3, r3, #1
 800c3b4:	b903      	cbnz	r3, 800c3b8 <st_sssa8_ch_convolve_dw+0xeb0>
 800c3b6:	b1bf      	cbz	r7, 800c3e8 <st_sssa8_ch_convolve_dw+0xee0>
 800c3b8:	4642      	mov	r2, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4650      	mov	r0, sl
 800c3be:	f005 fc45 	bl	8011c4c <st_int8_fill>
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	44c1      	add	r9, r8
 800c3c6:	b224      	sxth	r4, r4
 800c3c8:	42ac      	cmp	r4, r5
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	dbed      	blt.n	800c3aa <st_sssa8_ch_convolve_dw+0xea2>
 800c3ce:	f10b 0b01 	add.w	fp, fp, #1
 800c3d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3d4:	fa0f fb8b 	sxth.w	fp, fp
 800c3d8:	455a      	cmp	r2, fp
 800c3da:	465b      	mov	r3, fp
 800c3dc:	dcd9      	bgt.n	800c392 <st_sssa8_ch_convolve_dw+0xe8a>
 800c3de:	f8dd b010 	ldr.w	fp, [sp, #16]
 800c3e2:	46c2      	mov	sl, r8
 800c3e4:	f7ff ba3e 	b.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c3e8:	9b02      	ldr	r3, [sp, #8]
 800c3ea:	440b      	add	r3, r1
 800c3ec:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 800c3f0:	fb02 1303 	mla	r3, r2, r3, r1
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	d0e4      	beq.n	800c3c2 <st_sssa8_ch_convolve_dw+0xeba>
 800c3f8:	eb03 0c02 	add.w	ip, r3, r2
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c402:	459c      	cmp	ip, r3
 800c404:	ea4f 2201 	mov.w	r2, r1, lsl #8
 800c408:	fa32 f281 	uxtab16	r2, r2, r1
 800c40c:	f820 2b02 	strh.w	r2, [r0], #2
 800c410:	d1f5      	bne.n	800c3fe <st_sssa8_ch_convolve_dw+0xef6>
 800c412:	e7d6      	b.n	800c3c2 <st_sssa8_ch_convolve_dw+0xeba>
 800c414:	2d00      	cmp	r5, #0
 800c416:	dd14      	ble.n	800c442 <st_sssa8_ch_convolve_dw+0xf3a>
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	0076      	lsls	r6, r6, #1
 800c41c:	f8dc 1000 	ldr.w	r1, [ip]
 800c420:	fb56 1602 	smmla	r6, r6, r2, r1
 800c424:	fa46 f205 	asr.w	r2, r6, r5
 800c428:	f302 0207 	ssat	r2, #8, r2
 800c42c:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800c430:	e730      	b.n	800c294 <st_sssa8_ch_convolve_dw+0xd8c>
 800c432:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c436:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c438:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800c43a:	4413      	add	r3, r2
 800c43c:	9383      	str	r3, [sp, #524]	; 0x20c
 800c43e:	f7ff bb16 	b.w	800ba6e <st_sssa8_ch_convolve_dw+0x566>
 800c442:	f1c5 0501 	rsb	r5, r5, #1
 800c446:	fa06 f105 	lsl.w	r1, r6, r5
 800c44a:	f301 011f 	ssat	r1, #32, r1
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	fb51 f112 	smmulr	r1, r1, r2
 800c454:	f8dc 2000 	ldr.w	r2, [ip]
 800c458:	440a      	add	r2, r1
 800c45a:	f302 0207 	ssat	r2, #8, r2
 800c45e:	f80e 2c01 	strb.w	r2, [lr, #-1]
 800c462:	e717      	b.n	800c294 <st_sssa8_ch_convolve_dw+0xd8c>
 800c464:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c466:	2b00      	cmp	r3, #0
 800c468:	f43f ab01 	beq.w	800ba6e <st_sssa8_ch_convolve_dw+0x566>
 800c46c:	f1ba 0f01 	cmp.w	sl, #1
 800c470:	f040 858a 	bne.w	800cf88 <st_sssa8_ch_convolve_dw+0x1a80>
 800c474:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800c476:	f103 0c01 	add.w	ip, r3, #1
 800c47a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c47c:	1e9f      	subs	r7, r3, #2
 800c47e:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800c480:	6819      	ldr	r1, [r3, #0]
 800c482:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c484:	b183      	cbz	r3, 800c4a8 <st_sssa8_ch_convolve_dw+0xfa0>
 800c486:	ee18 3a10 	vmov	r3, s16
 800c48a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c48c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c48e:	b21e      	sxth	r6, r3
 800c490:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c492:	18d5      	adds	r5, r2, r3
 800c494:	f832 4b02 	ldrh.w	r4, [r2], #2
 800c498:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800c49c:	4295      	cmp	r5, r2
 800c49e:	eba3 0306 	sub.w	r3, r3, r6
 800c4a2:	fb13 1104 	smlabb	r1, r3, r4, r1
 800c4a6:	d1f5      	bne.n	800c494 <st_sssa8_ch_convolve_dw+0xf8c>
 800c4a8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800c4ac:	2815      	cmp	r0, #21
 800c4ae:	dd10      	ble.n	800c4d2 <st_sssa8_ch_convolve_dw+0xfca>
 800c4b0:	1e83      	subs	r3, r0, #2
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	3801      	subs	r0, #1
 800c4b6:	409a      	lsls	r2, r3
 800c4b8:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	fb51 2303 	smmla	r3, r1, r3, r2
 800c4c0:	4103      	asrs	r3, r0
 800c4c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4c4:	6812      	ldr	r2, [r2, #0]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f303 0307 	ssat	r3, #8, r3
 800c4cc:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800c4d0:	e7b1      	b.n	800c436 <st_sssa8_ch_convolve_dw+0xf2e>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	dd0c      	ble.n	800c4f0 <st_sssa8_ch_convolve_dw+0xfe8>
 800c4d6:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800c4d8:	0049      	lsls	r1, r1, #1
 800c4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6812      	ldr	r2, [r2, #0]
 800c4e0:	fb51 2303 	smmla	r3, r1, r3, r2
 800c4e4:	4103      	asrs	r3, r0
 800c4e6:	f303 0307 	ssat	r3, #8, r3
 800c4ea:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800c4ee:	e7a2      	b.n	800c436 <st_sssa8_ch_convolve_dw+0xf2e>
 800c4f0:	f1c0 0301 	rsb	r3, r0, #1
 800c4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f8:	f303 031f 	ssat	r3, #32, r3
 800c4fc:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800c4fe:	6812      	ldr	r2, [r2, #0]
 800c500:	fb53 f312 	smmulr	r3, r3, r2
 800c504:	e7dd      	b.n	800c4c2 <st_sssa8_ch_convolve_dw+0xfba>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	eb03 000e 	add.w	r0, r3, lr
 800c50c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800c510:	fb02 3000 	mla	r0, r2, r0, r3
 800c514:	4617      	mov	r7, r2
 800c516:	f005 fc01 	bl	8011d1c <st_int8_copy>
 800c51a:	e70a      	b.n	800c332 <st_sssa8_ch_convolve_dw+0xe2a>
 800c51c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c51e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800c520:	4282      	cmp	r2, r0
 800c522:	f340 80aa 	ble.w	800c67a <st_sssa8_ch_convolve_dw+0x1172>
 800c526:	b29b      	uxth	r3, r3
 800c528:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c52a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c52c:	9328      	str	r3, [sp, #160]	; 0xa0
 800c52e:	fb01 2100 	mla	r1, r1, r0, r2
 800c532:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c534:	eba1 0803 	sub.w	r8, r1, r3
 800c538:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c53c:	4598      	cmp	r8, r3
 800c53e:	9306      	str	r3, [sp, #24]
 800c540:	f77f a990 	ble.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c544:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c546:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c54a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c54e:	ee18 8a10 	vmov	r8, s16
 800c552:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c554:	f8dd b0f8 	ldr.w	fp, [sp, #248]	; 0xf8
 800c558:	9304      	str	r3, [sp, #16]
 800c55a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c55c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c55e:	429a      	cmp	r2, r3
 800c560:	fb03 f301 	mul.w	r3, r3, r1
 800c564:	bfcc      	ite	gt
 800c566:	2200      	movgt	r2, #0
 800c568:	2201      	movle	r2, #1
 800c56a:	9305      	str	r3, [sp, #20]
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c572:	9a06      	ldr	r2, [sp, #24]
 800c574:	4615      	mov	r5, r2
 800c576:	9303      	str	r3, [sp, #12]
 800c578:	0feb      	lsrs	r3, r5, #31
 800c57a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c57c:	4291      	cmp	r1, r2
 800c57e:	bfd8      	it	le
 800c580:	f043 0301 	orrle.w	r3, r3, #1
 800c584:	b90b      	cbnz	r3, 800c58a <st_sssa8_ch_convolve_dw+0x1082>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	b1a3      	cbz	r3, 800c5b4 <st_sssa8_ch_convolve_dw+0x10ac>
 800c58a:	4652      	mov	r2, sl
 800c58c:	4631      	mov	r1, r6
 800c58e:	4640      	mov	r0, r8
 800c590:	f005 fb5c 	bl	8011c4c <st_int8_fill>
 800c594:	3501      	adds	r5, #1
 800c596:	9b02      	ldr	r3, [sp, #8]
 800c598:	4456      	add	r6, sl
 800c59a:	b22d      	sxth	r5, r5
 800c59c:	429d      	cmp	r5, r3
 800c59e:	462a      	mov	r2, r5
 800c5a0:	dbea      	blt.n	800c578 <st_sssa8_ch_convolve_dw+0x1070>
 800c5a2:	9b04      	ldr	r3, [sp, #16]
 800c5a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	b21b      	sxth	r3, r3
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	dcd4      	bgt.n	800c55a <st_sssa8_ch_convolve_dw+0x1052>
 800c5b0:	f7ff b956 	b.w	800b860 <st_sssa8_ch_convolve_dw+0x358>
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	e9dd 3122 	ldrd	r3, r1, [sp, #136]	; 0x88
 800c5bc:	fb03 1702 	mla	r7, r3, r2, r1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d0e7      	beq.n	800c594 <st_sssa8_ch_convolve_dw+0x108c>
 800c5c4:	f1bb 0f00 	cmp.w	fp, #0
 800c5c8:	d0e4      	beq.n	800c594 <st_sssa8_ch_convolve_dw+0x108c>
 800c5ca:	18fb      	adds	r3, r7, r3
 800c5cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c5d0:	f106 0904 	add.w	r9, r6, #4
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	469e      	mov	lr, r3
 800c5d8:	f8dd c0fc 	ldr.w	ip, [sp, #252]	; 0xfc
 800c5dc:	f8dd a104 	ldr.w	sl, [sp, #260]	; 0x104
 800c5e0:	e9cd 5607 	strd	r5, r6, [sp, #28]
 800c5e4:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c5e8:	f1ba 0f05 	cmp.w	sl, #5
 800c5ec:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800c5f0:	ea4f 6201 	mov.w	r2, r1, lsl #24
 800c5f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c5f8:	ea4f 2132 	mov.w	r1, r2, ror #8
 800c5fc:	fa32 f281 	uxtab16	r2, r2, r1
 800c600:	d938      	bls.n	800c674 <st_sssa8_ch_convolve_dw+0x116c>
 800c602:	b3a3      	cbz	r3, 800c66e <st_sssa8_ch_convolve_dw+0x1166>
 800c604:	464d      	mov	r5, r9
 800c606:	2401      	movs	r4, #1
 800c608:	f849 2c04 	str.w	r2, [r9, #-4]
 800c60c:	ebab 0603 	sub.w	r6, fp, r3
 800c610:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c614:	0871      	lsrs	r1, r6, #1
 800c616:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c61a:	e9c3 2200 	strd	r2, r2, [r3]
 800c61e:	3308      	adds	r3, #8
 800c620:	4299      	cmp	r1, r3
 800c622:	d1fa      	bne.n	800c61a <st_sssa8_ch_convolve_dw+0x1112>
 800c624:	f026 0301 	bic.w	r3, r6, #1
 800c628:	42b3      	cmp	r3, r6
 800c62a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800c62e:	441c      	add	r4, r3
 800c630:	d014      	beq.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c632:	1c63      	adds	r3, r4, #1
 800c634:	602a      	str	r2, [r5, #0]
 800c636:	459b      	cmp	fp, r3
 800c638:	dd10      	ble.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c63a:	1ca3      	adds	r3, r4, #2
 800c63c:	606a      	str	r2, [r5, #4]
 800c63e:	459b      	cmp	fp, r3
 800c640:	dd0c      	ble.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c642:	1ce3      	adds	r3, r4, #3
 800c644:	60aa      	str	r2, [r5, #8]
 800c646:	459b      	cmp	fp, r3
 800c648:	dd08      	ble.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c64a:	1d23      	adds	r3, r4, #4
 800c64c:	60ea      	str	r2, [r5, #12]
 800c64e:	459b      	cmp	fp, r3
 800c650:	dd04      	ble.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c652:	3405      	adds	r4, #5
 800c654:	612a      	str	r2, [r5, #16]
 800c656:	45a3      	cmp	fp, r4
 800c658:	dd00      	ble.n	800c65c <st_sssa8_ch_convolve_dw+0x1154>
 800c65a:	616a      	str	r2, [r5, #20]
 800c65c:	45be      	cmp	lr, r7
 800c65e:	4460      	add	r0, ip
 800c660:	44e1      	add	r9, ip
 800c662:	d1bf      	bne.n	800c5e4 <st_sssa8_ch_convolve_dw+0x10dc>
 800c664:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c668:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 800c66c:	e792      	b.n	800c594 <st_sssa8_ch_convolve_dw+0x108c>
 800c66e:	4605      	mov	r5, r0
 800c670:	461c      	mov	r4, r3
 800c672:	e7cb      	b.n	800c60c <st_sssa8_ch_convolve_dw+0x1104>
 800c674:	4605      	mov	r5, r0
 800c676:	2400      	movs	r4, #0
 800c678:	e7db      	b.n	800c632 <st_sssa8_ch_convolve_dw+0x112a>
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	9328      	str	r3, [sp, #160]	; 0xa0
 800c67e:	f7ff b8f1 	b.w	800b864 <st_sssa8_ch_convolve_dw+0x35c>
 800c682:	460b      	mov	r3, r1
 800c684:	e5f0      	b.n	800c268 <st_sssa8_ch_convolve_dw+0xd60>
 800c686:	b2ab      	uxth	r3, r5
 800c688:	9342      	str	r3, [sp, #264]	; 0x108
 800c68a:	f7ff b9fd 	b.w	800ba88 <st_sssa8_ch_convolve_dw+0x580>
 800c68e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800c690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c692:	fb02 f000 	mul.w	r0, r2, r0
 800c696:	fb02 f303 	mul.w	r3, r2, r3
 800c69a:	901c      	str	r0, [sp, #112]	; 0x70
 800c69c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800c69e:	fb03 f000 	mul.w	r0, r3, r0
 800c6a2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800c6a6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800c6a8:	901b      	str	r0, [sp, #108]	; 0x6c
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	f43f a9f9 	beq.w	800baa2 <st_sssa8_ch_convolve_dw+0x59a>
 800c6b0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800c6b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c6b4:	f001 0203 	and.w	r2, r1, #3
 800c6b8:	0888      	lsrs	r0, r1, #2
 800c6ba:	4427      	add	r7, r4
 800c6bc:	9213      	str	r2, [sp, #76]	; 0x4c
 800c6be:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c6c0:	9015      	str	r0, [sp, #84]	; 0x54
 800c6c2:	9716      	str	r7, [sp, #88]	; 0x58
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	f43f a9ec 	beq.w	800baa2 <st_sssa8_ch_convolve_dw+0x59a>
 800c6ca:	441c      	add	r4, r3
 800c6cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800c6d0:	1e42      	subs	r2, r0, #1
 800c6d2:	19be      	adds	r6, r7, r6
 800c6d4:	942a      	str	r4, [sp, #168]	; 0xa8
 800c6d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c6d8:	b292      	uxth	r2, r2
 800c6da:	9520      	str	r5, [sp, #128]	; 0x80
 800c6dc:	1861      	adds	r1, r4, r1
 800c6de:	191c      	adds	r4, r3, r4
 800c6e0:	9619      	str	r6, [sp, #100]	; 0x64
 800c6e2:	18cd      	adds	r5, r1, r3
 800c6e4:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800c6e6:	1c53      	adds	r3, r2, #1
 800c6e8:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c6ec:	3120      	adds	r1, #32
 800c6ee:	951f      	str	r5, [sp, #124]	; 0x7c
 800c6f0:	9422      	str	r4, [sp, #136]	; 0x88
 800c6f2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800c6f6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800c6fa:	9112      	str	r1, [sp, #72]	; 0x48
 800c6fc:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800c700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c702:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c704:	3a01      	subs	r2, #1
 800c706:	9126      	str	r1, [sp, #152]	; 0x98
 800c708:	b291      	uxth	r1, r2
 800c70a:	9124      	str	r1, [sp, #144]	; 0x90
 800c70c:	0061      	lsls	r1, r4, #1
 800c70e:	9121      	str	r1, [sp, #132]	; 0x84
 800c710:	0069      	lsls	r1, r5, #1
 800c712:	465d      	mov	r5, fp
 800c714:	911e      	str	r1, [sp, #120]	; 0x78
 800c716:	9986      	ldr	r1, [sp, #536]	; 0x218
 800c718:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800c71c:	911a      	str	r1, [sp, #104]	; 0x68
 800c71e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800c722:	911d      	str	r1, [sp, #116]	; 0x74
 800c724:	0099      	lsls	r1, r3, #2
 800c726:	9125      	str	r1, [sp, #148]	; 0x94
 800c728:	eb07 1103 	add.w	r1, r7, r3, lsl #4
 800c72c:	9129      	str	r1, [sp, #164]	; 0xa4
 800c72e:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 800c730:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800c734:	4663      	mov	r3, ip
 800c736:	9128      	str	r1, [sp, #160]	; 0xa0
 800c738:	0081      	lsls	r1, r0, #2
 800c73a:	9127      	str	r1, [sp, #156]	; 0x9c
 800c73c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c73e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c740:	9504      	str	r5, [sp, #16]
 800c742:	fb03 2301 	mla	r3, r3, r1, r2
 800c746:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800c748:	2200      	movs	r2, #0
 800c74a:	1859      	adds	r1, r3, r1
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	9218      	str	r2, [sp, #96]	; 0x60
 800c750:	ee18 2a10 	vmov	r2, s16
 800c754:	9110      	str	r1, [sp, #64]	; 0x40
 800c756:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c758:	b212      	sxth	r2, r2
 800c75a:	1859      	adds	r1, r3, r1
 800c75c:	4693      	mov	fp, r2
 800c75e:	910f      	str	r1, [sp, #60]	; 0x3c
 800c760:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c762:	4419      	add	r1, r3
 800c764:	910d      	str	r1, [sp, #52]	; 0x34
 800c766:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800c768:	4419      	add	r1, r3
 800c76a:	910c      	str	r1, [sp, #48]	; 0x30
 800c76c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c76e:	1859      	adds	r1, r3, r1
 800c770:	910b      	str	r1, [sp, #44]	; 0x2c
 800c772:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c774:	4419      	add	r1, r3
 800c776:	910a      	str	r1, [sp, #40]	; 0x28
 800c778:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c77a:	4419      	add	r1, r3
 800c77c:	9109      	str	r1, [sp, #36]	; 0x24
 800c77e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c780:	18cb      	adds	r3, r1, r3
 800c782:	9308      	str	r3, [sp, #32]
 800c784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 83d7 	beq.w	800cf3a <st_sssa8_ch_convolve_dw+0x1a32>
 800c78c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 800c78e:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 800c790:	f103 0710 	add.w	r7, r3, #16
 800c794:	9e86      	ldr	r6, [sp, #536]	; 0x218
 800c796:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c798:	9203      	str	r2, [sp, #12]
 800c79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c79c:	3348      	adds	r3, #72	; 0x48
 800c79e:	9d04      	ldr	r5, [sp, #16]
 800c7a0:	9202      	str	r2, [sp, #8]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c7a8:	9604      	str	r6, [sp, #16]
 800c7aa:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c7ae:	e083      	b.n	800c8b8 <st_sssa8_ch_convolve_dw+0x13b0>
 800c7b0:	f1a1 0902 	sub.w	r9, r1, #2
 800c7b4:	2401      	movs	r4, #1
 800c7b6:	9804      	ldr	r0, [sp, #16]
 800c7b8:	3901      	subs	r1, #1
 800c7ba:	fa04 f909 	lsl.w	r9, r4, r9
 800c7be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c7c2:	f850 4b04 	ldr.w	r4, [r0], #4
 800c7c6:	f10a 0b02 	add.w	fp, sl, #2
 800c7ca:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800c7ce:	fa4c f101 	asr.w	r1, ip, r1
 800c7d2:	f858 4b04 	ldr.w	r4, [r8], #4
 800c7d6:	4421      	add	r1, r4
 800c7d8:	f301 0107 	ssat	r1, #8, r1
 800c7dc:	9c03      	ldr	r4, [sp, #12]
 800c7de:	f804 1b01 	strb.w	r1, [r4], #1
 800c7e2:	f9bb 1000 	ldrsh.w	r1, [fp]
 800c7e6:	2915      	cmp	r1, #21
 800c7e8:	f340 8149 	ble.w	800ca7e <st_sssa8_ch_convolve_dw+0x1576>
 800c7ec:	f1a1 0c02 	sub.w	ip, r1, #2
 800c7f0:	2601      	movs	r6, #1
 800c7f2:	3901      	subs	r1, #1
 800c7f4:	6800      	ldr	r0, [r0, #0]
 800c7f6:	fa06 fc0c 	lsl.w	ip, r6, ip
 800c7fa:	f8d8 8000 	ldr.w	r8, [r8]
 800c7fe:	9e04      	ldr	r6, [sp, #16]
 800c800:	fb5e ce00 	smmla	lr, lr, r0, ip
 800c804:	fa4e f001 	asr.w	r0, lr, r1
 800c808:	f106 0908 	add.w	r9, r6, #8
 800c80c:	f10a 0104 	add.w	r1, sl, #4
 800c810:	4440      	add	r0, r8
 800c812:	9e02      	ldr	r6, [sp, #8]
 800c814:	f106 0c08 	add.w	ip, r6, #8
 800c818:	f300 0007 	ssat	r0, #8, r0
 800c81c:	7020      	strb	r0, [r4, #0]
 800c81e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800c822:	9803      	ldr	r0, [sp, #12]
 800c824:	2915      	cmp	r1, #21
 800c826:	f100 0402 	add.w	r4, r0, #2
 800c82a:	f340 8145 	ble.w	800cab8 <st_sssa8_ch_convolve_dw+0x15b0>
 800c82e:	f8dc 8000 	ldr.w	r8, [ip]
 800c832:	2001      	movs	r0, #1
 800c834:	f1a1 0c02 	sub.w	ip, r1, #2
 800c838:	3901      	subs	r1, #1
 800c83a:	f8d9 e000 	ldr.w	lr, [r9]
 800c83e:	fa00 fc0c 	lsl.w	ip, r0, ip
 800c842:	9e05      	ldr	r6, [sp, #20]
 800c844:	9804      	ldr	r0, [sp, #16]
 800c846:	fb56 ce0e 	smmla	lr, r6, lr, ip
 800c84a:	fa4e f101 	asr.w	r1, lr, r1
 800c84e:	300c      	adds	r0, #12
 800c850:	f10a 0e06 	add.w	lr, sl, #6
 800c854:	4441      	add	r1, r8
 800c856:	9e02      	ldr	r6, [sp, #8]
 800c858:	f106 0c0c 	add.w	ip, r6, #12
 800c85c:	f301 0107 	ssat	r1, #8, r1
 800c860:	7021      	strb	r1, [r4, #0]
 800c862:	9903      	ldr	r1, [sp, #12]
 800c864:	1ccc      	adds	r4, r1, #3
 800c866:	f9be 1000 	ldrsh.w	r1, [lr]
 800c86a:	2915      	cmp	r1, #21
 800c86c:	f340 8142 	ble.w	800caf4 <st_sssa8_ch_convolve_dw+0x15ec>
 800c870:	f8dc e000 	ldr.w	lr, [ip]
 800c874:	2601      	movs	r6, #1
 800c876:	f1a1 0c02 	sub.w	ip, r1, #2
 800c87a:	3901      	subs	r1, #1
 800c87c:	6800      	ldr	r0, [r0, #0]
 800c87e:	fa06 fc0c 	lsl.w	ip, r6, ip
 800c882:	9e06      	ldr	r6, [sp, #24]
 800c884:	fb56 c000 	smmla	r0, r6, r0, ip
 800c888:	fa40 f101 	asr.w	r1, r0, r1
 800c88c:	4471      	add	r1, lr
 800c88e:	f301 0107 	ssat	r1, #8, r1
 800c892:	7021      	strb	r1, [r4, #0]
 800c894:	9904      	ldr	r1, [sp, #16]
 800c896:	3710      	adds	r7, #16
 800c898:	3348      	adds	r3, #72	; 0x48
 800c89a:	3204      	adds	r2, #4
 800c89c:	3110      	adds	r1, #16
 800c89e:	f10a 0a08 	add.w	sl, sl, #8
 800c8a2:	9104      	str	r1, [sp, #16]
 800c8a4:	9903      	ldr	r1, [sp, #12]
 800c8a6:	3104      	adds	r1, #4
 800c8a8:	9103      	str	r1, [sp, #12]
 800c8aa:	9902      	ldr	r1, [sp, #8]
 800c8ac:	3110      	adds	r1, #16
 800c8ae:	9102      	str	r1, [sp, #8]
 800c8b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c8b2:	428f      	cmp	r7, r1
 800c8b4:	f000 8174 	beq.w	800cba0 <st_sssa8_ch_convolve_dw+0x1698>
 800c8b8:	9907      	ldr	r1, [sp, #28]
 800c8ba:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800c8be:	f851 c002 	ldr.w	ip, [r1, r2]
 800c8c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c8c4:	f857 4c10 	ldr.w	r4, [r7, #-16]
 800c8c8:	f852 e001 	ldr.w	lr, [r2, r1]
 800c8cc:	49b3      	ldr	r1, [pc, #716]	; (800cb9c <st_sssa8_ch_convolve_dw+0x1694>)
 800c8ce:	ea0e 0101 	and.w	r1, lr, r1
 800c8d2:	ea41 411c 	orr.w	r1, r1, ip, lsr #16
 800c8d6:	fa1f fc8c 	uxth.w	ip, ip
 800c8da:	ea4c 4e0e 	orr.w	lr, ip, lr, lsl #16
 800c8de:	fa25 fc8e 	sxtab16	ip, r5, lr
 800c8e2:	fb20 4c0c 	smlad	ip, r0, ip, r4
 800c8e6:	fa25 fe9e 	sxtab16	lr, r5, lr, ror #8
 800c8ea:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800c8ee:	f857 4c0c 	ldr.w	r4, [r7, #-12]
 800c8f2:	fb20 4e0e 	smlad	lr, r0, lr, r4
 800c8f6:	f853 0c40 	ldr.w	r0, [r3, #-64]
 800c8fa:	f857 4c08 	ldr.w	r4, [r7, #-8]
 800c8fe:	fa25 f881 	sxtab16	r8, r5, r1
 800c902:	fb20 4808 	smlad	r8, r0, r8, r4
 800c906:	fa25 f191 	sxtab16	r1, r5, r1, ror #8
 800c90a:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800c90e:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800c912:	fb20 4401 	smlad	r4, r0, r1, r4
 800c916:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c918:	48a0      	ldr	r0, [pc, #640]	; (800cb9c <st_sssa8_ch_convolve_dw+0x1694>)
 800c91a:	f852 9001 	ldr.w	r9, [r2, r1]
 800c91e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c920:	f852 b001 	ldr.w	fp, [r2, r1]
 800c924:	f853 1c38 	ldr.w	r1, [r3, #-56]
 800c928:	ea0b 0000 	and.w	r0, fp, r0
 800c92c:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800c930:	fa1f f989 	uxth.w	r9, r9
 800c934:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800c938:	fa25 fb89 	sxtab16	fp, r5, r9
 800c93c:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800c940:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800c944:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800c948:	fb21 ee09 	smlad	lr, r1, r9, lr
 800c94c:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800c950:	fa25 f980 	sxtab16	r9, r5, r0
 800c954:	fb21 8809 	smlad	r8, r1, r9, r8
 800c958:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800c95c:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800c960:	fb21 4400 	smlad	r4, r1, r0, r4
 800c964:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c966:	488d      	ldr	r0, [pc, #564]	; (800cb9c <st_sssa8_ch_convolve_dw+0x1694>)
 800c968:	f852 9001 	ldr.w	r9, [r2, r1]
 800c96c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c96e:	f852 b001 	ldr.w	fp, [r2, r1]
 800c972:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800c976:	ea0b 0000 	and.w	r0, fp, r0
 800c97a:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800c97e:	fa1f f989 	uxth.w	r9, r9
 800c982:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800c986:	fa25 fb89 	sxtab16	fp, r5, r9
 800c98a:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800c98e:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800c992:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800c996:	fb21 ee09 	smlad	lr, r1, r9, lr
 800c99a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800c99e:	fa25 f980 	sxtab16	r9, r5, r0
 800c9a2:	fb21 8809 	smlad	r8, r1, r9, r8
 800c9a6:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800c9aa:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800c9ae:	fb21 4400 	smlad	r4, r1, r0, r4
 800c9b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c9b4:	4879      	ldr	r0, [pc, #484]	; (800cb9c <st_sssa8_ch_convolve_dw+0x1694>)
 800c9b6:	f852 9001 	ldr.w	r9, [r2, r1]
 800c9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9bc:	f852 b001 	ldr.w	fp, [r2, r1]
 800c9c0:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800c9c4:	ea0b 0000 	and.w	r0, fp, r0
 800c9c8:	ea40 4019 	orr.w	r0, r0, r9, lsr #16
 800c9cc:	fa1f f989 	uxth.w	r9, r9
 800c9d0:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800c9d4:	fa25 fb89 	sxtab16	fp, r5, r9
 800c9d8:	fb21 cc0b 	smlad	ip, r1, fp, ip
 800c9dc:	fa25 f999 	sxtab16	r9, r5, r9, ror #8
 800c9e0:	f853 1c14 	ldr.w	r1, [r3, #-20]
 800c9e4:	fb21 ee09 	smlad	lr, r1, r9, lr
 800c9e8:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800c9ec:	fa25 f980 	sxtab16	r9, r5, r0
 800c9f0:	fb21 8809 	smlad	r8, r1, r9, r8
 800c9f4:	fa25 f090 	sxtab16	r0, r5, r0, ror #8
 800c9f8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800c9fc:	fb21 4100 	smlad	r1, r1, r0, r4
 800ca00:	9808      	ldr	r0, [sp, #32]
 800ca02:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ca04:	5810      	ldr	r0, [r2, r0]
 800ca06:	f833 9c08 	ldrh.w	r9, [r3, #-8]
 800ca0a:	b244      	sxtb	r4, r0
 800ca0c:	f833 bc06 	ldrh.w	fp, [r3, #-6]
 800ca10:	1ba4      	subs	r4, r4, r6
 800ca12:	fb19 cc04 	smlabb	ip, r9, r4, ip
 800ca16:	f340 2407 	sbfx	r4, r0, #8, #8
 800ca1a:	1ba4      	subs	r4, r4, r6
 800ca1c:	fb1b ee04 	smlabb	lr, fp, r4, lr
 800ca20:	f340 4407 	sbfx	r4, r0, #16, #8
 800ca24:	ebc6 6020 	rsb	r0, r6, r0, asr #24
 800ca28:	1ba4      	subs	r4, r4, r6
 800ca2a:	f833 6c04 	ldrh.w	r6, [r3, #-4]
 800ca2e:	fb16 8404 	smlabb	r4, r6, r4, r8
 800ca32:	9405      	str	r4, [sp, #20]
 800ca34:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 800ca38:	fb14 1100 	smlabb	r1, r4, r0, r1
 800ca3c:	9106      	str	r1, [sp, #24]
 800ca3e:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ca42:	2915      	cmp	r1, #21
 800ca44:	f73f aeb4 	bgt.w	800c7b0 <st_sssa8_ch_convolve_dw+0x12a8>
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	dd63      	ble.n	800cb14 <st_sssa8_ch_convolve_dw+0x160c>
 800ca4c:	9804      	ldr	r0, [sp, #16]
 800ca4e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ca52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca56:	f10a 0b02 	add.w	fp, sl, #2
 800ca5a:	f850 4b04 	ldr.w	r4, [r0], #4
 800ca5e:	f858 9b04 	ldr.w	r9, [r8], #4
 800ca62:	fb5c 9c04 	smmla	ip, ip, r4, r9
 800ca66:	fa4c f101 	asr.w	r1, ip, r1
 800ca6a:	f301 0107 	ssat	r1, #8, r1
 800ca6e:	9c03      	ldr	r4, [sp, #12]
 800ca70:	f804 1b01 	strb.w	r1, [r4], #1
 800ca74:	f9bb 1000 	ldrsh.w	r1, [fp]
 800ca78:	2915      	cmp	r1, #21
 800ca7a:	f73f aeb7 	bgt.w	800c7ec <st_sssa8_ch_convolve_dw+0x12e4>
 800ca7e:	2900      	cmp	r1, #0
 800ca80:	dd7a      	ble.n	800cb78 <st_sssa8_ch_convolve_dw+0x1670>
 800ca82:	f8d8 c000 	ldr.w	ip, [r8]
 800ca86:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	9e04      	ldr	r6, [sp, #16]
 800ca8e:	fb5e c000 	smmla	r0, lr, r0, ip
 800ca92:	4108      	asrs	r0, r1
 800ca94:	9902      	ldr	r1, [sp, #8]
 800ca96:	f106 0908 	add.w	r9, r6, #8
 800ca9a:	f101 0c08 	add.w	ip, r1, #8
 800ca9e:	f10a 0104 	add.w	r1, sl, #4
 800caa2:	f300 0007 	ssat	r0, #8, r0
 800caa6:	7020      	strb	r0, [r4, #0]
 800caa8:	f9b1 1000 	ldrsh.w	r1, [r1]
 800caac:	9803      	ldr	r0, [sp, #12]
 800caae:	2915      	cmp	r1, #21
 800cab0:	f100 0402 	add.w	r4, r0, #2
 800cab4:	f73f aebb 	bgt.w	800c82e <st_sssa8_ch_convolve_dw+0x1326>
 800cab8:	2900      	cmp	r1, #0
 800caba:	dd4b      	ble.n	800cb54 <st_sssa8_ch_convolve_dw+0x164c>
 800cabc:	9805      	ldr	r0, [sp, #20]
 800cabe:	9e02      	ldr	r6, [sp, #8]
 800cac0:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800cac4:	9804      	ldr	r0, [sp, #16]
 800cac6:	f8d9 8000 	ldr.w	r8, [r9]
 800caca:	f8dc c000 	ldr.w	ip, [ip]
 800cace:	300c      	adds	r0, #12
 800cad0:	fb5e cc08 	smmla	ip, lr, r8, ip
 800cad4:	f10a 0e06 	add.w	lr, sl, #6
 800cad8:	fa4c f101 	asr.w	r1, ip, r1
 800cadc:	f106 0c0c 	add.w	ip, r6, #12
 800cae0:	f301 0107 	ssat	r1, #8, r1
 800cae4:	7021      	strb	r1, [r4, #0]
 800cae6:	9903      	ldr	r1, [sp, #12]
 800cae8:	1ccc      	adds	r4, r1, #3
 800caea:	f9be 1000 	ldrsh.w	r1, [lr]
 800caee:	2915      	cmp	r1, #21
 800caf0:	f73f aebe 	bgt.w	800c870 <st_sssa8_ch_convolve_dw+0x1368>
 800caf4:	2900      	cmp	r1, #0
 800caf6:	dd1d      	ble.n	800cb34 <st_sssa8_ch_convolve_dw+0x162c>
 800caf8:	9e06      	ldr	r6, [sp, #24]
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800cb00:	f8dc c000 	ldr.w	ip, [ip]
 800cb04:	fb5e c000 	smmla	r0, lr, r0, ip
 800cb08:	fa40 f101 	asr.w	r1, r0, r1
 800cb0c:	f301 0107 	ssat	r1, #8, r1
 800cb10:	7021      	strb	r1, [r4, #0]
 800cb12:	e6bf      	b.n	800c894 <st_sssa8_ch_convolve_dw+0x138c>
 800cb14:	f1c1 0101 	rsb	r1, r1, #1
 800cb18:	f10a 0b02 	add.w	fp, sl, #2
 800cb1c:	fa0c f101 	lsl.w	r1, ip, r1
 800cb20:	f301 011f 	ssat	r1, #32, r1
 800cb24:	9804      	ldr	r0, [sp, #16]
 800cb26:	f850 4b04 	ldr.w	r4, [r0], #4
 800cb2a:	fb51 f114 	smmulr	r1, r1, r4
 800cb2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cb32:	e64e      	b.n	800c7d2 <st_sssa8_ch_convolve_dw+0x12ca>
 800cb34:	f1c1 0101 	rsb	r1, r1, #1
 800cb38:	9e06      	ldr	r6, [sp, #24]
 800cb3a:	408e      	lsls	r6, r1
 800cb3c:	f306 011f 	ssat	r1, #32, r6
 800cb40:	6800      	ldr	r0, [r0, #0]
 800cb42:	fb51 f110 	smmulr	r1, r1, r0
 800cb46:	f8dc 0000 	ldr.w	r0, [ip]
 800cb4a:	4401      	add	r1, r0
 800cb4c:	f301 0107 	ssat	r1, #8, r1
 800cb50:	7021      	strb	r1, [r4, #0]
 800cb52:	e69f      	b.n	800c894 <st_sssa8_ch_convolve_dw+0x138c>
 800cb54:	f1c1 0101 	rsb	r1, r1, #1
 800cb58:	9805      	ldr	r0, [sp, #20]
 800cb5a:	f10a 0e06 	add.w	lr, sl, #6
 800cb5e:	4088      	lsls	r0, r1
 800cb60:	f300 011f 	ssat	r1, #32, r0
 800cb64:	9804      	ldr	r0, [sp, #16]
 800cb66:	f8d9 8000 	ldr.w	r8, [r9]
 800cb6a:	300c      	adds	r0, #12
 800cb6c:	fb51 f118 	smmulr	r1, r1, r8
 800cb70:	f8dc c000 	ldr.w	ip, [ip]
 800cb74:	4461      	add	r1, ip
 800cb76:	e66e      	b.n	800c856 <st_sssa8_ch_convolve_dw+0x134e>
 800cb78:	f1c1 0101 	rsb	r1, r1, #1
 800cb7c:	fa0e fe01 	lsl.w	lr, lr, r1
 800cb80:	f10a 0104 	add.w	r1, sl, #4
 800cb84:	f30e 0c1f 	ssat	ip, #32, lr
 800cb88:	9e04      	ldr	r6, [sp, #16]
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	f106 0908 	add.w	r9, r6, #8
 800cb90:	fb5c f010 	smmulr	r0, ip, r0
 800cb94:	f8d8 c000 	ldr.w	ip, [r8]
 800cb98:	4460      	add	r0, ip
 800cb9a:	e63a      	b.n	800c812 <st_sssa8_ch_convolve_dw+0x130a>
 800cb9c:	ffff0000 	.word	0xffff0000
 800cba0:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800cba2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cba4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800cba8:	4413      	add	r3, r2
 800cbaa:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800cbae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cbb0:	9383      	str	r3, [sp, #524]	; 0x20c
 800cbb2:	9504      	str	r5, [sp, #16]
 800cbb4:	e9dd 7228 	ldrd	r7, r2, [sp, #160]	; 0xa0
 800cbb8:	e9dd 3826 	ldrd	r3, r8, [sp, #152]	; 0x98
 800cbbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f000 8147 	beq.w	800ce52 <st_sssa8_ch_convolve_dw+0x194a>
 800cbc4:	9807      	ldr	r0, [sp, #28]
 800cbc6:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800cbc8:	f910 4008 	ldrsb.w	r4, [r0, r8]
 800cbcc:	eb00 0608 	add.w	r6, r0, r8
 800cbd0:	f8b3 c000 	ldrh.w	ip, [r3]
 800cbd4:	6838      	ldr	r0, [r7, #0]
 800cbd6:	eba4 040b 	sub.w	r4, r4, fp
 800cbda:	fb1c 0404 	smlabb	r4, ip, r4, r0
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f916 c005 	ldrsb.w	ip, [r6, r5]
 800cbe4:	442e      	add	r6, r5
 800cbe6:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800cbea:	ebac 0c0b 	sub.w	ip, ip, fp
 800cbee:	eba6 0e0b 	sub.w	lr, r6, fp
 800cbf2:	885e      	ldrh	r6, [r3, #2]
 800cbf4:	fb1c 4c06 	smlabb	ip, ip, r6, r4
 800cbf8:	f910 4015 	ldrsb.w	r4, [r0, r5, lsl #1]
 800cbfc:	889e      	ldrh	r6, [r3, #4]
 800cbfe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800cc02:	eba4 040b 	sub.w	r4, r4, fp
 800cc06:	fb16 c404 	smlabb	r4, r6, r4, ip
 800cc0a:	1946      	adds	r6, r0, r5
 800cc0c:	f910 c015 	ldrsb.w	ip, [r0, r5, lsl #1]
 800cc10:	f916 6015 	ldrsb.w	r6, [r6, r5, lsl #1]
 800cc14:	ebac 0c0b 	sub.w	ip, ip, fp
 800cc18:	eba6 0a0b 	sub.w	sl, r6, fp
 800cc1c:	88de      	ldrh	r6, [r3, #6]
 800cc1e:	fb1e 4406 	smlabb	r4, lr, r6, r4
 800cc22:	eb00 0645 	add.w	r6, r0, r5, lsl #1
 800cc26:	8918      	ldrh	r0, [r3, #8]
 800cc28:	fb1c 4000 	smlabb	r0, ip, r0, r4
 800cc2c:	1974      	adds	r4, r6, r5
 800cc2e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800cc32:	f914 4015 	ldrsb.w	r4, [r4, r5, lsl #1]
 800cc36:	eba4 0e0b 	sub.w	lr, r4, fp
 800cc3a:	895c      	ldrh	r4, [r3, #10]
 800cc3c:	fb1a 0404 	smlabb	r4, sl, r4, r0
 800cc40:	f916 0015 	ldrsb.w	r0, [r6, r5, lsl #1]
 800cc44:	f916 6025 	ldrsb.w	r6, [r6, r5, lsl #2]
 800cc48:	eba0 000b 	sub.w	r0, r0, fp
 800cc4c:	eba6 060b 	sub.w	r6, r6, fp
 800cc50:	fb10 400c 	smlabb	r0, r0, ip, r4
 800cc54:	89dc      	ldrh	r4, [r3, #14]
 800cc56:	f9b9 c000 	ldrsh.w	ip, [r9]
 800cc5a:	fb1e 0004 	smlabb	r0, lr, r4, r0
 800cc5e:	f108 0401 	add.w	r4, r8, #1
 800cc62:	f1bc 0f15 	cmp.w	ip, #21
 800cc66:	fa1f fa84 	uxth.w	sl, r4
 800cc6a:	8a1c      	ldrh	r4, [r3, #16]
 800cc6c:	fb16 0604 	smlabb	r6, r6, r4, r0
 800cc70:	f300 811e 	bgt.w	800ceb0 <st_sssa8_ch_convolve_dw+0x19a8>
 800cc74:	f1bc 0f00 	cmp.w	ip, #0
 800cc78:	f340 814e 	ble.w	800cf18 <st_sssa8_ch_convolve_dw+0x1a10>
 800cc7c:	6808      	ldr	r0, [r1, #0]
 800cc7e:	0076      	lsls	r6, r6, #1
 800cc80:	6814      	ldr	r4, [r2, #0]
 800cc82:	fb56 4600 	smmla	r6, r6, r0, r4
 800cc86:	fa46 f00c 	asr.w	r0, r6, ip
 800cc8a:	f300 0007 	ssat	r0, #8, r0
 800cc8e:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800cc90:	f806 0b01 	strb.w	r0, [r6], #1
 800cc94:	9824      	ldr	r0, [sp, #144]	; 0x90
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 80d7 	beq.w	800ce4a <st_sssa8_ch_convolve_dw+0x1942>
 800cc9c:	f108 0002 	add.w	r0, r8, #2
 800cca0:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800cca2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800cca6:	b280      	uxth	r0, r0
 800cca8:	9002      	str	r0, [sp, #8]
 800ccaa:	9807      	ldr	r0, [sp, #28]
 800ccac:	eb00 040a 	add.w	r4, r0, sl
 800ccb0:	f910 000a 	ldrsb.w	r0, [r0, sl]
 800ccb4:	eba0 0c0b 	sub.w	ip, r0, fp
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800ccbe:	eb04 0e05 	add.w	lr, r4, r5
 800ccc2:	f914 c005 	ldrsb.w	ip, [r4, r5]
 800ccc6:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800ccca:	ebac 0c0b 	sub.w	ip, ip, fp
 800ccce:	ebae 080b 	sub.w	r8, lr, fp
 800ccd2:	f8b3 e014 	ldrh.w	lr, [r3, #20]
 800ccd6:	fb1c 000e 	smlabb	r0, ip, lr, r0
 800ccda:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800ccde:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800cce2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800cce6:	ebae 0e0b 	sub.w	lr, lr, fp
 800ccea:	fb1e 000c 	smlabb	r0, lr, ip, r0
 800ccee:	eb04 0c05 	add.w	ip, r4, r5
 800ccf2:	f914 e015 	ldrsb.w	lr, [r4, r5, lsl #1]
 800ccf6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800ccfa:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800ccfe:	ebae 0e0b 	sub.w	lr, lr, fp
 800cd02:	ebac 0a0b 	sub.w	sl, ip, fp
 800cd06:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 800cd0a:	fb18 0c0c 	smlabb	ip, r8, ip, r0
 800cd0e:	8b58      	ldrh	r0, [r3, #26]
 800cd10:	fb1e c000 	smlabb	r0, lr, r0, ip
 800cd14:	eb04 0c05 	add.w	ip, r4, r5
 800cd18:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
 800cd1c:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800cd20:	fb1a 0e0e 	smlabb	lr, sl, lr, r0
 800cd24:	f914 0015 	ldrsb.w	r0, [r4, r5, lsl #1]
 800cd28:	ebac 080b 	sub.w	r8, ip, fp
 800cd2c:	f914 c025 	ldrsb.w	ip, [r4, r5, lsl #2]
 800cd30:	eba0 000b 	sub.w	r0, r0, fp
 800cd34:	8bdc      	ldrh	r4, [r3, #30]
 800cd36:	ebac 0c0b 	sub.w	ip, ip, fp
 800cd3a:	fb10 e004 	smlabb	r0, r0, r4, lr
 800cd3e:	8c1c      	ldrh	r4, [r3, #32]
 800cd40:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
 800cd44:	fb18 0004 	smlabb	r0, r8, r4, r0
 800cd48:	8c5c      	ldrh	r4, [r3, #34]	; 0x22
 800cd4a:	f1be 0f15 	cmp.w	lr, #21
 800cd4e:	fb1c 0c04 	smlabb	ip, ip, r4, r0
 800cd52:	f300 80ce 	bgt.w	800cef2 <st_sssa8_ch_convolve_dw+0x19ea>
 800cd56:	f1be 0f00 	cmp.w	lr, #0
 800cd5a:	f340 80f6 	ble.w	800cf4a <st_sssa8_ch_convolve_dw+0x1a42>
 800cd5e:	6848      	ldr	r0, [r1, #4]
 800cd60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cd64:	6854      	ldr	r4, [r2, #4]
 800cd66:	fb5c 4c00 	smmla	ip, ip, r0, r4
 800cd6a:	fa4c f00e 	asr.w	r0, ip, lr
 800cd6e:	f300 0007 	ssat	r0, #8, r0
 800cd72:	f806 0b01 	strb.w	r0, [r6], #1
 800cd76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cd78:	2802      	cmp	r0, #2
 800cd7a:	d066      	beq.n	800ce4a <st_sssa8_ch_convolve_dw+0x1942>
 800cd7c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800cd80:	9d07      	ldr	r5, [sp, #28]
 800cd82:	9f02      	ldr	r7, [sp, #8]
 800cd84:	f8b3 e024 	ldrh.w	lr, [r3, #36]	; 0x24
 800cd88:	19e8      	adds	r0, r5, r7
 800cd8a:	57ef      	ldrsb	r7, [r5, r7]
 800cd8c:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800cd8e:	eba7 070b 	sub.w	r7, r7, fp
 800cd92:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
 800cd96:	fb1e c707 	smlabb	r7, lr, r7, ip
 800cd9a:	eb00 0e05 	add.w	lr, r0, r5
 800cd9e:	f910 c005 	ldrsb.w	ip, [r0, r5]
 800cda2:	2c15      	cmp	r4, #21
 800cda4:	f91e e015 	ldrsb.w	lr, [lr, r5, lsl #1]
 800cda8:	ebac 0c0b 	sub.w	ip, ip, fp
 800cdac:	ebae 080b 	sub.w	r8, lr, fp
 800cdb0:	f8b3 e026 	ldrh.w	lr, [r3, #38]	; 0x26
 800cdb4:	fb1e 7c0c 	smlabb	ip, lr, ip, r7
 800cdb8:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800cdbc:	f8b3 e028 	ldrh.w	lr, [r3, #40]	; 0x28
 800cdc0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800cdc4:	eba7 070b 	sub.w	r7, r7, fp
 800cdc8:	fb1e c707 	smlabb	r7, lr, r7, ip
 800cdcc:	eb00 0c05 	add.w	ip, r0, r5
 800cdd0:	f8b3 e02c 	ldrh.w	lr, [r3, #44]	; 0x2c
 800cdd4:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800cdd8:	ebac 090b 	sub.w	r9, ip, fp
 800cddc:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800cde0:	fb1c 7c08 	smlabb	ip, ip, r8, r7
 800cde4:	f910 7015 	ldrsb.w	r7, [r0, r5, lsl #1]
 800cde8:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800cdec:	eba7 070b 	sub.w	r7, r7, fp
 800cdf0:	fb1e c707 	smlabb	r7, lr, r7, ip
 800cdf4:	eb00 0c05 	add.w	ip, r0, r5
 800cdf8:	f910 e015 	ldrsb.w	lr, [r0, r5, lsl #1]
 800cdfc:	f91c c015 	ldrsb.w	ip, [ip, r5, lsl #1]
 800ce00:	ebae 0e0b 	sub.w	lr, lr, fp
 800ce04:	ebac 080b 	sub.w	r8, ip, fp
 800ce08:	f8b3 c02e 	ldrh.w	ip, [r3, #46]	; 0x2e
 800ce0c:	fb1c 7c09 	smlabb	ip, ip, r9, r7
 800ce10:	f910 7025 	ldrsb.w	r7, [r0, r5, lsl #2]
 800ce14:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800ce16:	eba7 070b 	sub.w	r7, r7, fp
 800ce1a:	fb10 c00e 	smlabb	r0, r0, lr, ip
 800ce1e:	f8b3 c032 	ldrh.w	ip, [r3, #50]	; 0x32
 800ce22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ce24:	fb1c 0008 	smlabb	r0, ip, r8, r0
 800ce28:	fb13 0007 	smlabb	r0, r3, r7, r0
 800ce2c:	dd54      	ble.n	800ced8 <st_sssa8_ch_convolve_dw+0x19d0>
 800ce2e:	688b      	ldr	r3, [r1, #8]
 800ce30:	2501      	movs	r5, #1
 800ce32:	6891      	ldr	r1, [r2, #8]
 800ce34:	1ea2      	subs	r2, r4, #2
 800ce36:	3c01      	subs	r4, #1
 800ce38:	fa05 f202 	lsl.w	r2, r5, r2
 800ce3c:	fb50 2303 	smmla	r3, r0, r3, r2
 800ce40:	4123      	asrs	r3, r4
 800ce42:	440b      	add	r3, r1
 800ce44:	f303 0307 	ssat	r3, #8, r3
 800ce48:	7033      	strb	r3, [r6, #0]
 800ce4a:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800ce4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce4e:	4413      	add	r3, r2
 800ce50:	9383      	str	r3, [sp, #524]	; 0x20c
 800ce52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ce54:	9907      	ldr	r1, [sp, #28]
 800ce56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce58:	4411      	add	r1, r2
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	9107      	str	r1, [sp, #28]
 800ce5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ce60:	b21b      	sxth	r3, r3
 800ce62:	4411      	add	r1, r2
 800ce64:	9318      	str	r3, [sp, #96]	; 0x60
 800ce66:	9110      	str	r1, [sp, #64]	; 0x40
 800ce68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce6a:	4411      	add	r1, r2
 800ce6c:	910f      	str	r1, [sp, #60]	; 0x3c
 800ce6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ce70:	4411      	add	r1, r2
 800ce72:	910d      	str	r1, [sp, #52]	; 0x34
 800ce74:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce76:	4411      	add	r1, r2
 800ce78:	910c      	str	r1, [sp, #48]	; 0x30
 800ce7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce7c:	4411      	add	r1, r2
 800ce7e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce80:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce82:	4411      	add	r1, r2
 800ce84:	910a      	str	r1, [sp, #40]	; 0x28
 800ce86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce88:	4411      	add	r1, r2
 800ce8a:	9109      	str	r1, [sp, #36]	; 0x24
 800ce8c:	9908      	ldr	r1, [sp, #32]
 800ce8e:	4411      	add	r1, r2
 800ce90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ce92:	4293      	cmp	r3, r2
 800ce94:	9108      	str	r1, [sp, #32]
 800ce96:	f6ff ac75 	blt.w	800c784 <st_sssa8_ch_convolve_dw+0x127c>
 800ce9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce9c:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800ce9e:	3301      	adds	r3, #1
 800cea0:	9d04      	ldr	r5, [sp, #16]
 800cea2:	b21b      	sxth	r3, r3
 800cea4:	428b      	cmp	r3, r1
 800cea6:	9317      	str	r3, [sp, #92]	; 0x5c
 800cea8:	f6ff ac48 	blt.w	800c73c <st_sssa8_ch_convolve_dw+0x1234>
 800ceac:	f7fe bdf9 	b.w	800baa2 <st_sssa8_ch_convolve_dw+0x59a>
 800ceb0:	f1ac 0e02 	sub.w	lr, ip, #2
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ceba:	680c      	ldr	r4, [r1, #0]
 800cebc:	fa00 fe0e 	lsl.w	lr, r0, lr
 800cec0:	6810      	ldr	r0, [r2, #0]
 800cec2:	fb56 e404 	smmla	r4, r6, r4, lr
 800cec6:	fa44 f40c 	asr.w	r4, r4, ip
 800ceca:	4420      	add	r0, r4
 800cecc:	f300 0007 	ssat	r0, #8, r0
 800ced0:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800ced2:	f806 0b01 	strb.w	r0, [r6], #1
 800ced6:	e6dd      	b.n	800cc94 <st_sssa8_ch_convolve_dw+0x178c>
 800ced8:	2c00      	cmp	r4, #0
 800ceda:	dd46      	ble.n	800cf6a <st_sssa8_ch_convolve_dw+0x1a62>
 800cedc:	688b      	ldr	r3, [r1, #8]
 800cede:	0040      	lsls	r0, r0, #1
 800cee0:	6892      	ldr	r2, [r2, #8]
 800cee2:	fb50 2003 	smmla	r0, r0, r3, r2
 800cee6:	fa40 f304 	asr.w	r3, r0, r4
 800ceea:	f303 0307 	ssat	r3, #8, r3
 800ceee:	7033      	strb	r3, [r6, #0]
 800cef0:	e7ab      	b.n	800ce4a <st_sssa8_ch_convolve_dw+0x1942>
 800cef2:	f1ae 0802 	sub.w	r8, lr, #2
 800cef6:	2001      	movs	r0, #1
 800cef8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cefc:	684c      	ldr	r4, [r1, #4]
 800cefe:	fa00 f808 	lsl.w	r8, r0, r8
 800cf02:	6850      	ldr	r0, [r2, #4]
 800cf04:	fb5c 8404 	smmla	r4, ip, r4, r8
 800cf08:	fa44 f40e 	asr.w	r4, r4, lr
 800cf0c:	4420      	add	r0, r4
 800cf0e:	f300 0007 	ssat	r0, #8, r0
 800cf12:	f806 0b01 	strb.w	r0, [r6], #1
 800cf16:	e72e      	b.n	800cd76 <st_sssa8_ch_convolve_dw+0x186e>
 800cf18:	f1cc 0c01 	rsb	ip, ip, #1
 800cf1c:	fa06 f40c 	lsl.w	r4, r6, ip
 800cf20:	f304 041f 	ssat	r4, #32, r4
 800cf24:	6808      	ldr	r0, [r1, #0]
 800cf26:	fb54 f410 	smmulr	r4, r4, r0
 800cf2a:	6810      	ldr	r0, [r2, #0]
 800cf2c:	4420      	add	r0, r4
 800cf2e:	f300 0007 	ssat	r0, #8, r0
 800cf32:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800cf34:	f806 0b01 	strb.w	r0, [r6], #1
 800cf38:	e6ac      	b.n	800cc94 <st_sssa8_ch_convolve_dw+0x178c>
 800cf3a:	4698      	mov	r8, r3
 800cf3c:	9f7e      	ldr	r7, [sp, #504]	; 0x1f8
 800cf3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf42:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800cf46:	9986      	ldr	r1, [sp, #536]	; 0x218
 800cf48:	e638      	b.n	800cbbc <st_sssa8_ch_convolve_dw+0x16b4>
 800cf4a:	f1ce 0e01 	rsb	lr, lr, #1
 800cf4e:	fa0c f40e 	lsl.w	r4, ip, lr
 800cf52:	f304 041f 	ssat	r4, #32, r4
 800cf56:	6848      	ldr	r0, [r1, #4]
 800cf58:	fb54 f410 	smmulr	r4, r4, r0
 800cf5c:	6850      	ldr	r0, [r2, #4]
 800cf5e:	4420      	add	r0, r4
 800cf60:	f300 0007 	ssat	r0, #8, r0
 800cf64:	f806 0b01 	strb.w	r0, [r6], #1
 800cf68:	e705      	b.n	800cd76 <st_sssa8_ch_convolve_dw+0x186e>
 800cf6a:	f1c4 0401 	rsb	r4, r4, #1
 800cf6e:	fa00 f304 	lsl.w	r3, r0, r4
 800cf72:	f303 031f 	ssat	r3, #32, r3
 800cf76:	6889      	ldr	r1, [r1, #8]
 800cf78:	fb53 f311 	smmulr	r3, r3, r1
 800cf7c:	6892      	ldr	r2, [r2, #8]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f303 0307 	ssat	r3, #8, r3
 800cf84:	7033      	strb	r3, [r6, #0]
 800cf86:	e760      	b.n	800ce4a <st_sssa8_ch_convolve_dw+0x1942>
 800cf88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cf8a:	2400      	movs	r4, #0
 800cf8c:	f8dd 81f8 	ldr.w	r8, [sp, #504]	; 0x1f8
 800cf90:	9304      	str	r3, [sp, #16]
 800cf92:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800cf96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cf98:	9f86      	ldr	r7, [sp, #536]	; 0x218
 800cf9a:	f7ff b940 	b.w	800c21e <st_sssa8_ch_convolve_dw+0xd16>
 800cf9e:	bf00      	nop

0800cfa0 <st_sssa8_ch_convolve_rank1upd>:
 800cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	b085      	sub	sp, #20
 800cfa6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800cfaa:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800cfae:	fb13 f304 	smulbb	r3, r3, r4
 800cfb2:	fb13 f500 	smulbb	r5, r3, r0
 800cfb6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800cfba:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800cfbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d074      	beq.n	800d0ae <st_sssa8_ch_convolve_rank1upd+0x10e>
 800cfc4:	b2ad      	uxth	r5, r5
 800cfc6:	f1aa 0a04 	sub.w	sl, sl, #4
 800cfca:	460c      	mov	r4, r1
 800cfcc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800cfd0:	ea4f 0995 	mov.w	r9, r5, lsr #2
 800cfd4:	f005 0503 	and.w	r5, r5, #3
 800cfd8:	449a      	add	sl, r3
 800cfda:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 800cfde:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 800cfe2:	1e69      	subs	r1, r5, #1
 800cfe4:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 800cfe8:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800cfec:	b289      	uxth	r1, r1
 800cfee:	9100      	str	r1, [sp, #0]
 800cff0:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800cff4:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800cff8:	b292      	uxth	r2, r2
 800cffa:	9202      	str	r2, [sp, #8]
 800cffc:	025a      	lsls	r2, r3, #9
 800cffe:	3301      	adds	r3, #1
 800d000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d004:	025b      	lsls	r3, r3, #9
 800d006:	9203      	str	r2, [sp, #12]
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800d00e:	d953      	bls.n	800d0b8 <st_sssa8_ch_convolve_rank1upd+0x118>
 800d010:	9b03      	ldr	r3, [sp, #12]
 800d012:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800d016:	2600      	movs	r6, #0
 800d018:	eb04 0c03 	add.w	ip, r4, r3
 800d01c:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800d020:	2200      	movs	r2, #0
 800d022:	f851 3b04 	ldr.w	r3, [r1], #4
 800d026:	fa2f fe83 	sxtb16	lr, r3
 800d02a:	4281      	cmp	r1, r0
 800d02c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d030:	fa92 f21e 	qadd16	r2, r2, lr
 800d034:	fa2f f383 	sxtb16	r3, r3
 800d038:	fa92 f213 	qadd16	r2, r2, r3
 800d03c:	d1f1      	bne.n	800d022 <st_sssa8_ch_convolve_rank1upd+0x82>
 800d03e:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800d042:	b213      	sxth	r3, r2
 800d044:	4560      	cmp	r0, ip
 800d046:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800d04a:	4416      	add	r6, r2
 800d04c:	d1e6      	bne.n	800d01c <st_sssa8_ch_convolve_rank1upd+0x7c>
 800d04e:	9b01      	ldr	r3, [sp, #4]
 800d050:	18e1      	adds	r1, r4, r3
 800d052:	9c02      	ldr	r4, [sp, #8]
 800d054:	b374      	cbz	r4, 800d0b4 <st_sssa8_ch_convolve_rank1upd+0x114>
 800d056:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d05a:	2200      	movs	r2, #0
 800d05c:	f851 3b04 	ldr.w	r3, [r1], #4
 800d060:	fa2f f083 	sxtb16	r0, r3
 800d064:	428c      	cmp	r4, r1
 800d066:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d06a:	fa92 f210 	qadd16	r2, r2, r0
 800d06e:	fa2f f383 	sxtb16	r3, r3
 800d072:	fa92 f213 	qadd16	r2, r2, r3
 800d076:	d1f1      	bne.n	800d05c <st_sssa8_ch_convolve_rank1upd+0xbc>
 800d078:	b213      	sxth	r3, r2
 800d07a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d07e:	441e      	add	r6, r3
 800d080:	b16d      	cbz	r5, 800d09e <st_sssa8_ch_convolve_rank1upd+0xfe>
 800d082:	f994 3000 	ldrsb.w	r3, [r4]
 800d086:	441e      	add	r6, r3
 800d088:	9b00      	ldr	r3, [sp, #0]
 800d08a:	b13b      	cbz	r3, 800d09c <st_sssa8_ch_convolve_rank1upd+0xfc>
 800d08c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d090:	2d02      	cmp	r5, #2
 800d092:	441e      	add	r6, r3
 800d094:	d002      	beq.n	800d09c <st_sssa8_ch_convolve_rank1upd+0xfc>
 800d096:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d09a:	441e      	add	r6, r3
 800d09c:	442c      	add	r4, r5
 800d09e:	f858 3b04 	ldr.w	r3, [r8], #4
 800d0a2:	fb0b 3616 	mls	r6, fp, r6, r3
 800d0a6:	45b8      	cmp	r8, r7
 800d0a8:	f84a 6f04 	str.w	r6, [sl, #4]!
 800d0ac:	d1ad      	bne.n	800d00a <st_sssa8_ch_convolve_rank1upd+0x6a>
 800d0ae:	b005      	add	sp, #20
 800d0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	460c      	mov	r4, r1
 800d0b6:	e7e3      	b.n	800d080 <st_sssa8_ch_convolve_rank1upd+0xe0>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	464c      	mov	r4, r9
 800d0be:	e7c9      	b.n	800d054 <st_sssa8_ch_convolve_rank1upd+0xb4>

0800d0c0 <st_sssa8_ch_convolve_WeightsPrefetch>:
 800d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	fb02 fc01 	mul.w	ip, r2, r1
 800d0ca:	f06f 0e09 	mvn.w	lr, #9
 800d0ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d0d0:	fb03 fc0c 	mul.w	ip, r3, ip
 800d0d4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d0d8:	686e      	ldr	r6, [r5, #4]
 800d0da:	fb04 fc0c 	mul.w	ip, r4, ip
 800d0de:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800d0e2:	fb0e 6e01 	mla	lr, lr, r1, r6
 800d0e6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 800d0ea:	ebbe 0f4c 	cmp.w	lr, ip, lsl #1
 800d0ee:	db15      	blt.n	800d11c <st_sssa8_ch_convolve_WeightsPrefetch+0x5c>
 800d0f0:	fb02 fc03 	mul.w	ip, r2, r3
 800d0f4:	2f01      	cmp	r7, #1
 800d0f6:	fb0c fe04 	mul.w	lr, ip, r4
 800d0fa:	d113      	bne.n	800d124 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800d0fc:	f1b8 0f01 	cmp.w	r8, #1
 800d100:	4626      	mov	r6, r4
 800d102:	d10f      	bne.n	800d124 <st_sssa8_ch_convolve_WeightsPrefetch+0x64>
 800d104:	f8cd e000 	str.w	lr, [sp]
 800d108:	4663      	mov	r3, ip
 800d10a:	682c      	ldr	r4, [r5, #0]
 800d10c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800d110:	4632      	mov	r2, r6
 800d112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800d116:	9401      	str	r4, [sp, #4]
 800d118:	f002 fb18 	bl	800f74c <st_sssa8_ch_fullW_prefetch>
 800d11c:	2000      	movs	r0, #0
 800d11e:	b002      	add	sp, #8
 800d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d124:	fb03 f604 	mul.w	r6, r3, r4
 800d128:	4694      	mov	ip, r2
 800d12a:	e7eb      	b.n	800d104 <st_sssa8_ch_convolve_WeightsPrefetch+0x44>

0800d12c <st_sssa8_ch_convolve>:
 800d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	b09f      	sub	sp, #124	; 0x7c
 800d132:	4699      	mov	r9, r3
 800d134:	4683      	mov	fp, r0
 800d136:	f8bd 60a4 	ldrh.w	r6, [sp, #164]	; 0xa4
 800d13a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800d13c:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 800d140:	921d      	str	r2, [sp, #116]	; 0x74
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	9117      	str	r1, [sp, #92]	; 0x5c
 800d146:	ebc6 7186 	rsb	r1, r6, r6, lsl #30
 800d14a:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 800d14e:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	9212      	str	r2, [sp, #72]	; 0x48
 800d156:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800d15a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 800d15e:	9316      	str	r3, [sp, #88]	; 0x58
 800d160:	9214      	str	r2, [sp, #80]	; 0x50
 800d162:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 800d166:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800d16a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d16c:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 800d170:	f8bd a0ac 	ldrh.w	sl, [sp, #172]	; 0xac
 800d174:	9215      	str	r2, [sp, #84]	; 0x54
 800d176:	f99d 20d4 	ldrsb.w	r2, [sp, #212]	; 0xd4
 800d17a:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 800d17c:	921a      	str	r2, [sp, #104]	; 0x68
 800d17e:	f8bd 20e0 	ldrh.w	r2, [sp, #224]	; 0xe0
 800d182:	f99d 50d8 	ldrsb.w	r5, [sp, #216]	; 0xd8
 800d186:	921b      	str	r2, [sp, #108]	; 0x6c
 800d188:	f8bd 20e4 	ldrh.w	r2, [sp, #228]	; 0xe4
 800d18c:	921c      	str	r2, [sp, #112]	; 0x70
 800d18e:	00b2      	lsls	r2, r6, #2
 800d190:	9218      	str	r2, [sp, #96]	; 0x60
 800d192:	2e00      	cmp	r6, #0
 800d194:	f000 80a7 	beq.w	800d2e6 <st_sssa8_ch_convolve+0x1ba>
 800d198:	46a4      	mov	ip, r4
 800d19a:	0072      	lsls	r2, r6, #1
 800d19c:	3104      	adds	r1, #4
 800d19e:	2701      	movs	r7, #1
 800d1a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800d1a4:	9219      	str	r2, [sp, #100]	; 0x64
 800d1a6:	f93c 2b02 	ldrsh.w	r2, [ip], #2
 800d1aa:	1e50      	subs	r0, r2, #1
 800d1ac:	fa07 fe02 	lsl.w	lr, r7, r2
 800d1b0:	fa05 f202 	lsl.w	r2, r5, r2
 800d1b4:	b280      	uxth	r0, r0
 800d1b6:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 800d1ba:	2814      	cmp	r0, #20
 800d1bc:	d84e      	bhi.n	800d25c <st_sssa8_ch_convolve+0x130>
 800d1be:	4564      	cmp	r4, ip
 800d1c0:	f841 2c04 	str.w	r2, [r1, #-4]
 800d1c4:	f101 0104 	add.w	r1, r1, #4
 800d1c8:	d1ed      	bne.n	800d1a6 <st_sssa8_ch_convolve+0x7a>
 800d1ca:	4641      	mov	r1, r8
 800d1cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d1ce:	f06f 0009 	mvn.w	r0, #9
 800d1d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800d1d4:	1aa4      	subs	r4, r4, r2
 800d1d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1d8:	fb00 5006 	mla	r0, r0, r6, r5
 800d1dc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d1de:	1a89      	subs	r1, r1, r2
 800d1e0:	fb06 f209 	mul.w	r2, r6, r9
 800d1e4:	fb03 f202 	mul.w	r2, r3, r2
 800d1e8:	fb0a f202 	mul.w	r2, sl, r2
 800d1ec:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 800d1f0:	fb15 f209 	smulbb	r2, r5, r9
 800d1f4:	bfac      	ite	ge
 800d1f6:	4640      	movge	r0, r8
 800d1f8:	2000      	movlt	r0, #0
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	b292      	uxth	r2, r2
 800d1fe:	d108      	bne.n	800d212 <st_sssa8_ch_convolve+0xe6>
 800d200:	f1ba 0f01 	cmp.w	sl, #1
 800d204:	d105      	bne.n	800d212 <st_sssa8_ch_convolve+0xe6>
 800d206:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d208:	2f01      	cmp	r7, #1
 800d20a:	d102      	bne.n	800d212 <st_sssa8_ch_convolve+0xe6>
 800d20c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d20e:	2f01      	cmp	r7, #1
 800d210:	d04f      	beq.n	800d2b2 <st_sssa8_ch_convolve+0x186>
 800d212:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d214:	2d01      	cmp	r5, #1
 800d216:	d128      	bne.n	800d26a <st_sssa8_ch_convolve+0x13e>
 800d218:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d21a:	2d01      	cmp	r5, #1
 800d21c:	d125      	bne.n	800d26a <st_sssa8_ch_convolve+0x13e>
 800d21e:	910c      	str	r1, [sp, #48]	; 0x30
 800d220:	9401      	str	r4, [sp, #4]
 800d222:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d224:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800d226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d22a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d22c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d22e:	9307      	str	r3, [sp, #28]
 800d230:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d232:	9400      	str	r4, [sp, #0]
 800d234:	9306      	str	r3, [sp, #24]
 800d236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d23c:	e9cd 800d 	strd	r8, r0, [sp, #52]	; 0x34
 800d240:	e9cd a10a 	strd	sl, r1, [sp, #40]	; 0x28
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	4658      	mov	r0, fp
 800d248:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d24a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d24c:	e9cd 6902 	strd	r6, r9, [sp, #8]
 800d250:	f003 f8c8 	bl	80103e4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 800d254:	2000      	movs	r0, #0
 800d256:	b01f      	add	sp, #124	; 0x7c
 800d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25c:	4564      	cmp	r4, ip
 800d25e:	f841 5c04 	str.w	r5, [r1, #-4]
 800d262:	f101 0104 	add.w	r1, r1, #4
 800d266:	d19e      	bne.n	800d1a6 <st_sssa8_ch_convolve+0x7a>
 800d268:	e7af      	b.n	800d1ca <st_sssa8_ch_convolve+0x9e>
 800d26a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d26e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d270:	910e      	str	r1, [sp, #56]	; 0x38
 800d272:	9309      	str	r3, [sp, #36]	; 0x24
 800d274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d276:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d278:	9308      	str	r3, [sp, #32]
 800d27a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d27c:	9010      	str	r0, [sp, #64]	; 0x40
 800d27e:	4658      	mov	r0, fp
 800d280:	9307      	str	r3, [sp, #28]
 800d282:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d284:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d286:	9306      	str	r3, [sp, #24]
 800d288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d28a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d292:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800d296:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800d298:	e9cd a10c 	strd	sl, r1, [sp, #48]	; 0x30
 800d29c:	e9cd 9303 	strd	r9, r3, [sp, #12]
 800d2a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d2a2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d2a4:	9400      	str	r4, [sp, #0]
 800d2a6:	f003 fe8d 	bl	8010fc4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	b01f      	add	sp, #124	; 0x7c
 800d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2b4:	462a      	mov	r2, r5
 800d2b6:	9401      	str	r4, [sp, #4]
 800d2b8:	fb03 f202 	mul.w	r2, r3, r2
 800d2bc:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800d2be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d2c0:	9106      	str	r1, [sp, #24]
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d2c6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800d2c8:	f8cd 9010 	str.w	r9, [sp, #16]
 800d2cc:	9400      	str	r4, [sp, #0]
 800d2ce:	e9cd 8007 	strd	r8, r0, [sp, #28]
 800d2d2:	e9cd 2602 	strd	r2, r6, [sp, #8]
 800d2d6:	4658      	mov	r0, fp
 800d2d8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d2da:	f002 fa77 	bl	800f7cc <st_sssa8_ch_nn_mat_mult_nt_t>
 800d2de:	2000      	movs	r0, #0
 800d2e0:	b01f      	add	sp, #124	; 0x7c
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	9619      	str	r6, [sp, #100]	; 0x64
 800d2e8:	e770      	b.n	800d1cc <st_sssa8_ch_convolve+0xa0>
 800d2ea:	bf00      	nop

0800d2ec <st_sssa8_ch_convolve_startNN>:
 800d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	ed2d 8b08 	vpush	{d8-d11}
 800d2f4:	b0cf      	sub	sp, #316	; 0x13c
 800d2f6:	469a      	mov	sl, r3
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	920a      	str	r2, [sp, #40]	; 0x28
 800d2fc:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
 800d300:	f8bd 418c 	ldrh.w	r4, [sp, #396]	; 0x18c
 800d304:	4611      	mov	r1, r2
 800d306:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 800d308:	ee09 2a10 	vmov	s18, r2
 800d30c:	9009      	str	r0, [sp, #36]	; 0x24
 800d30e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800d312:	f8bd 0188 	ldrh.w	r0, [sp, #392]	; 0x188
 800d316:	f99d 81ac 	ldrsb.w	r8, [sp, #428]	; 0x1ac
 800d31a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800d31e:	460a      	mov	r2, r1
 800d320:	fb10 f304 	smulbb	r3, r0, r4
 800d324:	9019      	str	r0, [sp, #100]	; 0x64
 800d326:	f8bd 01b8 	ldrh.w	r0, [sp, #440]	; 0x1b8
 800d32a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800d32e:	fb13 f30a 	smulbb	r3, r3, sl
 800d332:	f99d 61b0 	ldrsb.w	r6, [sp, #432]	; 0x1b0
 800d336:	900f      	str	r0, [sp, #60]	; 0x3c
 800d338:	b29b      	uxth	r3, r3
 800d33a:	f8bd 01bc 	ldrh.w	r0, [sp, #444]	; 0x1bc
 800d33e:	9420      	str	r4, [sp, #128]	; 0x80
 800d340:	9315      	str	r3, [sp, #84]	; 0x54
 800d342:	ebc1 7341 	rsb	r3, r1, r1, lsl #29
 800d346:	f8bd 1190 	ldrh.w	r1, [sp, #400]	; 0x190
 800d34a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800d34e:	9514      	str	r5, [sp, #80]	; 0x50
 800d350:	9116      	str	r1, [sp, #88]	; 0x58
 800d352:	f8bd 1194 	ldrh.w	r1, [sp, #404]	; 0x194
 800d356:	ee0a 3a10 	vmov	s20, r3
 800d35a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d35e:	901f      	str	r0, [sp, #124]	; 0x7c
 800d360:	9121      	str	r1, [sp, #132]	; 0x84
 800d362:	f8bd 1198 	ldrh.w	r1, [sp, #408]	; 0x198
 800d366:	931d      	str	r3, [sp, #116]	; 0x74
 800d368:	910e      	str	r1, [sp, #56]	; 0x38
 800d36a:	f8bd 119c 	ldrh.w	r1, [sp, #412]	; 0x19c
 800d36e:	911b      	str	r1, [sp, #108]	; 0x6c
 800d370:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800d372:	2a00      	cmp	r2, #0
 800d374:	f000 866d 	beq.w	800e052 <st_sssa8_ch_convolve_startNN+0xd66>
 800d378:	1d18      	adds	r0, r3, #4
 800d37a:	2501      	movs	r5, #1
 800d37c:	0053      	lsls	r3, r2, #1
 800d37e:	eb01 0742 	add.w	r7, r1, r2, lsl #1
 800d382:	9318      	str	r3, [sp, #96]	; 0x60
 800d384:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800d388:	1e5a      	subs	r2, r3, #1
 800d38a:	fa05 f403 	lsl.w	r4, r5, r3
 800d38e:	fa06 f303 	lsl.w	r3, r6, r3
 800d392:	b292      	uxth	r2, r2
 800d394:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800d398:	2a14      	cmp	r2, #20
 800d39a:	d85b      	bhi.n	800d454 <st_sssa8_ch_convolve_startNN+0x168>
 800d39c:	428f      	cmp	r7, r1
 800d39e:	f840 3c04 	str.w	r3, [r0, #-4]
 800d3a2:	f100 0004 	add.w	r0, r0, #4
 800d3a6:	d1ed      	bne.n	800d384 <st_sssa8_ch_convolve_startNN+0x98>
 800d3a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d3b0:	aa2e      	add	r2, sp, #184	; 0xb8
 800d3b2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d3b4:	a83a      	add	r0, sp, #232	; 0xe8
 800d3b6:	1acb      	subs	r3, r1, r3
 800d3b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d3ba:	a944      	add	r1, sp, #272	; 0x110
 800d3bc:	9438      	str	r4, [sp, #224]	; 0xe0
 800d3be:	931c      	str	r3, [sp, #112]	; 0x70
 800d3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c2:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 800d3c6:	932f      	str	r3, [sp, #188]	; 0xbc
 800d3c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ca:	9537      	str	r5, [sp, #220]	; 0xdc
 800d3cc:	9334      	str	r3, [sp, #208]	; 0xd0
 800d3ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3d0:	9333      	str	r3, [sp, #204]	; 0xcc
 800d3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d4:	9346      	str	r3, [sp, #280]	; 0x118
 800d3d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3d8:	9347      	str	r3, [sp, #284]	; 0x11c
 800d3da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d3dc:	9348      	str	r3, [sp, #288]	; 0x120
 800d3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3e0:	9349      	str	r3, [sp, #292]	; 0x124
 800d3e2:	ab36      	add	r3, sp, #216	; 0xd8
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	ab32      	add	r3, sp, #200	; 0xc8
 800d3e8:	f001 f936 	bl	800e658 <ai_padding_opt_init>
 800d3ec:	fb05 f304 	mul.w	r3, r5, r4
 800d3f0:	ee19 2a10 	vmov	r2, s18
 800d3f4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d3f6:	fb0a f303 	mul.w	r3, sl, r3
 800d3fa:	ee19 0a10 	vmov	r0, s18
 800d3fe:	fb02 f303 	mul.w	r3, r2, r3
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d408:	bfd4      	ite	le
 800d40a:	ebc9 0203 	rsble	r2, r9, r3
 800d40e:	f5c9 52a0 	rsbgt	r2, r9, #5120	; 0x1400
 800d412:	fb0a f904 	mul.w	r9, sl, r4
 800d416:	fb09 f305 	mul.w	r3, r9, r5
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d420:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d422:	bfb8      	it	lt
 800d424:	3201      	addlt	r2, #1
 800d426:	ee09 3a90 	vmov	s19, r3
 800d42a:	fb00 f301 	mul.w	r3, r0, r1
 800d42e:	1054      	asrs	r4, r2, #1
 800d430:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 800d434:	dc15      	bgt.n	800d462 <st_sssa8_ch_convolve_startNN+0x176>
 800d436:	f01a 0f03 	tst.w	sl, #3
 800d43a:	f040 8165 	bne.w	800d708 <st_sssa8_ch_convolve_startNN+0x41c>
 800d43e:	ee19 3a10 	vmov	r3, s18
 800d442:	460a      	mov	r2, r1
 800d444:	9860      	ldr	r0, [sp, #384]	; 0x180
 800d446:	ee19 1a90 	vmov	r1, s19
 800d44a:	f001 ff8f 	bl	800f36c <st_int8_to16_dual_interleaved>
 800d44e:	2301      	movs	r3, #1
 800d450:	932a      	str	r3, [sp, #168]	; 0xa8
 800d452:	e008      	b.n	800d466 <st_sssa8_ch_convolve_startNN+0x17a>
 800d454:	428f      	cmp	r7, r1
 800d456:	f840 6c04 	str.w	r6, [r0, #-4]
 800d45a:	f100 0004 	add.w	r0, r0, #4
 800d45e:	d191      	bne.n	800d384 <st_sssa8_ch_convolve_startNN+0x98>
 800d460:	e7a2      	b.n	800d3a8 <st_sssa8_ch_convolve_startNN+0xbc>
 800d462:	2300      	movs	r3, #0
 800d464:	932a      	str	r3, [sp, #168]	; 0xa8
 800d466:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d468:	ee19 1a10 	vmov	r1, s18
 800d46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d46e:	fb02 f303 	mul.w	r3, r2, r3
 800d472:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800d474:	fb01 2303 	mla	r3, r1, r3, r2
 800d478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d47a:	429a      	cmp	r2, r3
 800d47c:	f080 8131 	bcs.w	800d6e2 <st_sssa8_ch_convolve_startNN+0x3f6>
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	fb03 f30b 	mul.w	r3, r3, fp
 800d486:	fb0a 2303 	mla	r3, sl, r3, r2
 800d48a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800d48c:	429a      	cmp	r2, r3
 800d48e:	bf2c      	ite	cs
 800d490:	2300      	movcs	r3, #0
 800d492:	2301      	movcc	r3, #1
 800d494:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d496:	ee19 1a10 	vmov	r1, s18
 800d49a:	fb94 f2f2 	sdiv	r2, r4, r2
 800d49e:	b292      	uxth	r2, r2
 800d4a0:	428a      	cmp	r2, r1
 800d4a2:	bf28      	it	cs
 800d4a4:	460a      	movcs	r2, r1
 800d4a6:	2a01      	cmp	r2, #1
 800d4a8:	921a      	str	r2, [sp, #104]	; 0x68
 800d4aa:	f240 81fa 	bls.w	800d8a2 <st_sssa8_ch_convolve_startNN+0x5b6>
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	ee19 2a10 	vmov	r2, s18
 800d4b4:	fbb1 f1f0 	udiv	r1, r1, r0
 800d4b8:	fb00 2211 	mls	r2, r0, r1, r2
 800d4bc:	b289      	uxth	r1, r1
 800d4be:	b292      	uxth	r2, r2
 800d4c0:	9127      	str	r1, [sp, #156]	; 0x9c
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	f000 810f 	beq.w	800d6e6 <st_sssa8_ch_convolve_startNN+0x3fa>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f040 83b6 	bne.w	800dc3a <st_sssa8_ch_convolve_startNN+0x94e>
 800d4ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d4d0:	fa0f f688 	sxth.w	r6, r8
 800d4d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4d6:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800d4da:	fb03 f30a 	mul.w	r3, r3, sl
 800d4de:	ee08 6a90 	vmov	s17, r6
 800d4e2:	fb02 f303 	mul.w	r3, r2, r3
 800d4e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4ec:	9312      	str	r3, [sp, #72]	; 0x48
 800d4ee:	f00a 0303 	and.w	r3, sl, #3
 800d4f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d4f4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800d4f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4fa:	ee19 3a10 	vmov	r3, s18
 800d4fe:	e9cd 8322 	strd	r8, r3, [sp, #136]	; 0x88
 800d502:	465b      	mov	r3, fp
 800d504:	46d0      	mov	r8, sl
 800d506:	46cb      	mov	fp, r9
 800d508:	4699      	mov	r9, r3
 800d50a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d50c:	b953      	cbnz	r3, 800d524 <st_sssa8_ch_convolve_startNN+0x238>
 800d50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d510:	2b00      	cmp	r3, #0
 800d512:	f040 81be 	bne.w	800d892 <st_sssa8_ch_convolve_startNN+0x5a6>
 800d516:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d518:	ee19 1a90 	vmov	r1, s19
 800d51c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d51e:	9860      	ldr	r0, [sp, #384]	; 0x180
 800d520:	f001 ff24 	bl	800f36c <st_int8_to16_dual_interleaved>
 800d524:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d526:	2b00      	cmp	r3, #0
 800d528:	f000 80af 	beq.w	800d68a <st_sssa8_ch_convolve_startNN+0x39e>
 800d52c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d52e:	2400      	movs	r4, #0
 800d530:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d532:	425b      	negs	r3, r3
 800d534:	4626      	mov	r6, r4
 800d536:	b29b      	uxth	r3, r3
 800d538:	9318      	str	r3, [sp, #96]	; 0x60
 800d53a:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800d53c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d53e:	a83a      	add	r0, sp, #232	; 0xe8
 800d540:	f001 f8e4 	bl	800e70c <ai_padding_opt_phase1>
 800d544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 81a0 	beq.w	800d88c <st_sssa8_ch_convolve_startNN+0x5a0>
 800d54c:	b2a3      	uxth	r3, r4
 800d54e:	2100      	movs	r1, #0
 800d550:	931e      	str	r3, [sp, #120]	; 0x78
 800d552:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800d556:	1a9b      	subs	r3, r3, r2
 800d558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d55a:	fb06 3302 	mla	r3, r6, r2, r3
 800d55e:	460a      	mov	r2, r1
 800d560:	9308      	str	r3, [sp, #32]
 800d562:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d564:	425b      	negs	r3, r3
 800d566:	b29b      	uxth	r3, r3
 800d568:	9307      	str	r3, [sp, #28]
 800d56a:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800d56e:	9311      	str	r3, [sp, #68]	; 0x44
 800d570:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 80ec 	beq.w	800d750 <st_sssa8_ch_convolve_startNN+0x464>
 800d578:	3b01      	subs	r3, #1
 800d57a:	933a      	str	r3, [sp, #232]	; 0xe8
 800d57c:	2301      	movs	r3, #1
 800d57e:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800d582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d584:	9808      	ldr	r0, [sp, #32]
 800d586:	4283      	cmp	r3, r0
 800d588:	f280 80f0 	bge.w	800d76c <st_sssa8_ch_convolve_startNN+0x480>
 800d58c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d58e:	ee08 ba10 	vmov	s16, fp
 800d592:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d594:	46c3      	mov	fp, r8
 800d596:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800d59a:	ee18 7a90 	vmov	r7, s17
 800d59e:	fb02 3200 	mla	r2, r2, r0, r3
 800d5a2:	b28b      	uxth	r3, r1
 800d5a4:	930d      	str	r3, [sp, #52]	; 0x34
 800d5a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d5a8:	1ad4      	subs	r4, r2, r3
 800d5aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d5ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	9306      	str	r3, [sp, #24]
 800d5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b8:	429c      	cmp	r4, r3
 800d5ba:	dd27      	ble.n	800d60c <st_sssa8_ch_convolve_startNN+0x320>
 800d5bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d5be:	4291      	cmp	r1, r2
 800d5c0:	fb09 f202 	mul.w	r2, r9, r2
 800d5c4:	bfcc      	ite	gt
 800d5c6:	f04f 0800 	movgt.w	r8, #0
 800d5ca:	f04f 0801 	movle.w	r8, #1
 800d5ce:	9210      	str	r2, [sp, #64]	; 0x40
 800d5d0:	9a06      	ldr	r2, [sp, #24]
 800d5d2:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800d5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5d8:	2a00      	cmp	r2, #0
 800d5da:	f000 80a0 	beq.w	800d71e <st_sssa8_ch_convolve_startNN+0x432>
 800d5de:	461e      	mov	r6, r3
 800d5e0:	469e      	mov	lr, r3
 800d5e2:	0ff3      	lsrs	r3, r6, #31
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	465a      	mov	r2, fp
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	45f1      	cmp	r9, lr
 800d5ec:	bfd8      	it	le
 800d5ee:	f043 0301 	orrle.w	r3, r3, #1
 800d5f2:	b91b      	cbnz	r3, 800d5fc <st_sssa8_ch_convolve_startNN+0x310>
 800d5f4:	f1b8 0f00 	cmp.w	r8, #0
 800d5f8:	f000 813f 	beq.w	800d87a <st_sssa8_ch_convolve_startNN+0x58e>
 800d5fc:	f005 fb4e 	bl	8012c9c <st_dsp_arm_fill_q15>
 800d600:	3601      	adds	r6, #1
 800d602:	4455      	add	r5, sl
 800d604:	b236      	sxth	r6, r6
 800d606:	42b4      	cmp	r4, r6
 800d608:	46b6      	mov	lr, r6
 800d60a:	dcea      	bgt.n	800d5e2 <st_sssa8_ch_convolve_startNN+0x2f6>
 800d60c:	9a06      	ldr	r2, [sp, #24]
 800d60e:	9908      	ldr	r1, [sp, #32]
 800d610:	3201      	adds	r2, #1
 800d612:	b213      	sxth	r3, r2
 800d614:	428b      	cmp	r3, r1
 800d616:	461a      	mov	r2, r3
 800d618:	9306      	str	r3, [sp, #24]
 800d61a:	dbcc      	blt.n	800d5b6 <st_sssa8_ch_convolve_startNN+0x2ca>
 800d61c:	46d8      	mov	r8, fp
 800d61e:	ee18 ba10 	vmov	fp, s16
 800d622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d624:	42ab      	cmp	r3, r5
 800d626:	f000 80a7 	beq.w	800d778 <st_sssa8_ch_convolve_startNN+0x48c>
 800d62a:	9b07      	ldr	r3, [sp, #28]
 800d62c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d62e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d630:	4413      	add	r3, r2
 800d632:	3101      	adds	r1, #1
 800d634:	b29b      	uxth	r3, r3
 800d636:	b209      	sxth	r1, r1
 800d638:	9307      	str	r3, [sp, #28]
 800d63a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d63c:	460a      	mov	r2, r1
 800d63e:	428b      	cmp	r3, r1
 800d640:	dc96      	bgt.n	800d570 <st_sssa8_ch_convolve_startNN+0x284>
 800d642:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d644:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d646:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d648:	4413      	add	r3, r2
 800d64a:	3401      	adds	r4, #1
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	b224      	sxth	r4, r4
 800d650:	9318      	str	r3, [sp, #96]	; 0x60
 800d652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d654:	4626      	mov	r6, r4
 800d656:	42a3      	cmp	r3, r4
 800d658:	f73f af71 	bgt.w	800d53e <st_sssa8_ch_convolve_startNN+0x252>
 800d65c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d65e:	42a9      	cmp	r1, r5
 800d660:	d013      	beq.n	800d68a <st_sssa8_ch_convolve_startNN+0x39e>
 800d662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d664:	ee1a 2a10 	vmov	r2, s20
 800d668:	ee19 0a90 	vmov	r0, s19
 800d66c:	9305      	str	r3, [sp, #20]
 800d66e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800d674:	9303      	str	r3, [sp, #12]
 800d676:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d678:	9302      	str	r3, [sp, #8]
 800d67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	ee19 3a10 	vmov	r3, s18
 800d686:	f004 ff21 	bl	80124cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800d68a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d68c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d68e:	1a9b      	subs	r3, r3, r2
 800d690:	b299      	uxth	r1, r3
 800d692:	4613      	mov	r3, r2
 800d694:	428a      	cmp	r2, r1
 800d696:	9123      	str	r1, [sp, #140]	; 0x8c
 800d698:	bf28      	it	cs
 800d69a:	460b      	movcs	r3, r1
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	b1cb      	cbz	r3, 800d6d4 <st_sssa8_ch_convolve_startNN+0x3e8>
 800d6a0:	9960      	ldr	r1, [sp, #384]	; 0x180
 800d6a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d6a4:	fb00 1102 	mla	r1, r0, r2, r1
 800d6a8:	9160      	str	r1, [sp, #384]	; 0x180
 800d6aa:	ee1a 1a10 	vmov	r1, s20
 800d6ae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6b2:	ee0a 1a10 	vmov	s20, r1
 800d6b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6b8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d6bc:	911c      	str	r1, [sp, #112]	; 0x70
 800d6be:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800d6c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6c4:	9169      	str	r1, [sp, #420]	; 0x1a4
 800d6c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d6c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6cc:	911d      	str	r1, [sp, #116]	; 0x74
 800d6ce:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 800d6d0:	4411      	add	r1, r2
 800d6d2:	916d      	str	r1, [sp, #436]	; 0x1b4
 800d6d4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d6d6:	1e4a      	subs	r2, r1, #1
 800d6d8:	b292      	uxth	r2, r2
 800d6da:	b179      	cbz	r1, 800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800d6dc:	9227      	str	r2, [sp, #156]	; 0x9c
 800d6de:	931a      	str	r3, [sp, #104]	; 0x68
 800d6e0:	e713      	b.n	800d50a <st_sssa8_ch_convolve_startNN+0x21e>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e6d6      	b.n	800d494 <st_sssa8_ch_convolve_startNN+0x1a8>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f040 82ab 	bne.w	800dc42 <st_sssa8_ch_convolve_startNN+0x956>
 800d6ec:	1e4b      	subs	r3, r1, #1
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	9327      	str	r3, [sp, #156]	; 0x9c
 800d6f2:	ee19 3a10 	vmov	r3, s18
 800d6f6:	4283      	cmp	r3, r0
 800d6f8:	f4bf aee9 	bcs.w	800d4ce <st_sssa8_ch_convolve_startNN+0x1e2>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	b04f      	add	sp, #316	; 0x13c
 800d700:	ecbd 8b08 	vpop	{d8-d11}
 800d704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d708:	460a      	mov	r2, r1
 800d70a:	ee19 3a10 	vmov	r3, s18
 800d70e:	ee19 1a90 	vmov	r1, s19
 800d712:	9860      	ldr	r0, [sp, #384]	; 0x180
 800d714:	f001 fcca 	bl	800f0ac <st_int8_to16_dual>
 800d718:	2301      	movs	r3, #1
 800d71a:	932a      	str	r3, [sp, #168]	; 0xa8
 800d71c:	e6a3      	b.n	800d466 <st_sssa8_ch_convolve_startNN+0x17a>
 800d71e:	469c      	mov	ip, r3
 800d720:	461e      	mov	r6, r3
 800d722:	45e1      	cmp	r9, ip
 800d724:	465a      	mov	r2, fp
 800d726:	4629      	mov	r1, r5
 800d728:	4638      	mov	r0, r7
 800d72a:	bfcc      	ite	gt
 800d72c:	2300      	movgt	r3, #0
 800d72e:	2301      	movle	r3, #1
 800d730:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800d734:	d103      	bne.n	800d73e <st_sssa8_ch_convolve_startNN+0x452>
 800d736:	f1b8 0f00 	cmp.w	r8, #0
 800d73a:	f000 8095 	beq.w	800d868 <st_sssa8_ch_convolve_startNN+0x57c>
 800d73e:	f005 faad 	bl	8012c9c <st_dsp_arm_fill_q15>
 800d742:	3601      	adds	r6, #1
 800d744:	4455      	add	r5, sl
 800d746:	b236      	sxth	r6, r6
 800d748:	42a6      	cmp	r6, r4
 800d74a:	46b4      	mov	ip, r6
 800d74c:	dbe9      	blt.n	800d722 <st_sssa8_ch_convolve_startNN+0x436>
 800d74e:	e75d      	b.n	800d60c <st_sssa8_ch_convolve_startNN+0x320>
 800d750:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800d752:	2b00      	cmp	r3, #0
 800d754:	d135      	bne.n	800d7c2 <st_sssa8_ch_convolve_startNN+0x4d6>
 800d756:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800d758:	9808      	ldr	r0, [sp, #32]
 800d75a:	3b01      	subs	r3, #1
 800d75c:	933c      	str	r3, [sp, #240]	; 0xf0
 800d75e:	2301      	movs	r3, #1
 800d760:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800d764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d766:	4283      	cmp	r3, r0
 800d768:	f6ff af10 	blt.w	800d58c <st_sssa8_ch_convolve_startNN+0x2a0>
 800d76c:	b28b      	uxth	r3, r1
 800d76e:	930d      	str	r3, [sp, #52]	; 0x34
 800d770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d772:	42ab      	cmp	r3, r5
 800d774:	f47f af59 	bne.w	800d62a <st_sssa8_ch_convolve_startNN+0x33e>
 800d778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d77a:	ee1a 2a10 	vmov	r2, s20
 800d77e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d780:	ee19 0a90 	vmov	r0, s19
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800d78c:	9303      	str	r3, [sp, #12]
 800d78e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	ee19 3a10 	vmov	r3, s18
 800d79e:	f004 fb71 	bl	8011e84 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800d7a2:	9b07      	ldr	r3, [sp, #28]
 800d7a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7a8:	4413      	add	r3, r2
 800d7aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d7ac:	3101      	adds	r1, #1
 800d7ae:	9017      	str	r0, [sp, #92]	; 0x5c
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	b209      	sxth	r1, r1
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7b8:	460a      	mov	r2, r1
 800d7ba:	428b      	cmp	r3, r1
 800d7bc:	f73f aed8 	bgt.w	800d570 <st_sssa8_ch_convolve_startNN+0x284>
 800d7c0:	e73f      	b.n	800d642 <st_sssa8_ch_convolve_startNN+0x356>
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	933b      	str	r3, [sp, #236]	; 0xec
 800d7c6:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800d7d0:	f43f aed7 	beq.w	800d582 <st_sssa8_ch_convolve_startNN+0x296>
 800d7d4:	b28b      	uxth	r3, r1
 800d7d6:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800d7da:	930d      	str	r3, [sp, #52]	; 0x34
 800d7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7de:	bb0b      	cbnz	r3, 800d824 <st_sssa8_ch_convolve_startNN+0x538>
 800d7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7e2:	9908      	ldr	r1, [sp, #32]
 800d7e4:	428b      	cmp	r3, r1
 800d7e6:	f6bf af1c 	bge.w	800d622 <st_sssa8_ch_convolve_startNN+0x336>
 800d7ea:	465a      	mov	r2, fp
 800d7ec:	464f      	mov	r7, r9
 800d7ee:	46ab      	mov	fp, r5
 800d7f0:	461e      	mov	r6, r3
 800d7f2:	4625      	mov	r5, r4
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d7f8:	4689      	mov	r9, r1
 800d7fa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d7fe:	3601      	adds	r6, #1
 800d800:	fb00 5007 	mla	r0, r0, r7, r5
 800d804:	4659      	mov	r1, fp
 800d806:	9206      	str	r2, [sp, #24]
 800d808:	b236      	sxth	r6, r6
 800d80a:	fb08 a000 	mla	r0, r8, r0, sl
 800d80e:	f001 fbfd 	bl	800f00c <st_int8_to16_no_shift_interleaved>
 800d812:	44a3      	add	fp, r4
 800d814:	454e      	cmp	r6, r9
 800d816:	4630      	mov	r0, r6
 800d818:	9a06      	ldr	r2, [sp, #24]
 800d81a:	dbf0      	blt.n	800d7fe <st_sssa8_ch_convolve_startNN+0x512>
 800d81c:	465d      	mov	r5, fp
 800d81e:	46b9      	mov	r9, r7
 800d820:	4693      	mov	fp, r2
 800d822:	e6fe      	b.n	800d622 <st_sssa8_ch_convolve_startNN+0x336>
 800d824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d826:	9908      	ldr	r1, [sp, #32]
 800d828:	428b      	cmp	r3, r1
 800d82a:	f6bf aefa 	bge.w	800d622 <st_sssa8_ch_convolve_startNN+0x336>
 800d82e:	465a      	mov	r2, fp
 800d830:	464f      	mov	r7, r9
 800d832:	46ab      	mov	fp, r5
 800d834:	461e      	mov	r6, r3
 800d836:	4625      	mov	r5, r4
 800d838:	4618      	mov	r0, r3
 800d83a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d83c:	4689      	mov	r9, r1
 800d83e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d842:	3601      	adds	r6, #1
 800d844:	fb00 5007 	mla	r0, r0, r7, r5
 800d848:	4659      	mov	r1, fp
 800d84a:	9206      	str	r2, [sp, #24]
 800d84c:	b236      	sxth	r6, r6
 800d84e:	fb08 a000 	mla	r0, r8, r0, sl
 800d852:	f001 fb45 	bl	800eee0 <st_int8_to16_no_shift>
 800d856:	44a3      	add	fp, r4
 800d858:	454e      	cmp	r6, r9
 800d85a:	4630      	mov	r0, r6
 800d85c:	9a06      	ldr	r2, [sp, #24]
 800d85e:	dbf0      	blt.n	800d842 <st_sssa8_ch_convolve_startNN+0x556>
 800d860:	465d      	mov	r5, fp
 800d862:	46b9      	mov	r9, r7
 800d864:	4693      	mov	fp, r2
 800d866:	e6dc      	b.n	800d622 <st_sssa8_ch_convolve_startNN+0x336>
 800d868:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d86a:	eb03 000c 	add.w	r0, r3, ip
 800d86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d870:	fb0b 3000 	mla	r0, fp, r0, r3
 800d874:	f001 fbca 	bl	800f00c <st_int8_to16_no_shift_interleaved>
 800d878:	e763      	b.n	800d742 <st_sssa8_ch_convolve_startNN+0x456>
 800d87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d87c:	eb03 000e 	add.w	r0, r3, lr
 800d880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d882:	fb0b 3000 	mla	r0, fp, r0, r3
 800d886:	f001 fb2b 	bl	800eee0 <st_int8_to16_no_shift>
 800d88a:	e6b9      	b.n	800d600 <st_sssa8_ch_convolve_startNN+0x314>
 800d88c:	b2a3      	uxth	r3, r4
 800d88e:	931e      	str	r3, [sp, #120]	; 0x78
 800d890:	e6d7      	b.n	800d642 <st_sssa8_ch_convolve_startNN+0x356>
 800d892:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d894:	ee19 1a90 	vmov	r1, s19
 800d898:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d89a:	9860      	ldr	r0, [sp, #384]	; 0x180
 800d89c:	f001 fc06 	bl	800f0ac <st_int8_to16_dual>
 800d8a0:	e640      	b.n	800d524 <st_sssa8_ch_convolve_startNN+0x238>
 800d8a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f43f af29 	beq.w	800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800d8aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8ac:	fa0f f888 	sxth.w	r8, r8
 800d8b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d8b2:	2400      	movs	r4, #0
 800d8b4:	fb03 f30a 	mul.w	r3, r3, sl
 800d8b8:	ee08 9a90 	vmov	s17, r9
 800d8bc:	4647      	mov	r7, r8
 800d8be:	4625      	mov	r5, r4
 800d8c0:	fb02 f303 	mul.w	r3, r2, r3
 800d8c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d8c6:	46d8      	mov	r8, fp
 800d8c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8cc:	4693      	mov	fp, r2
 800d8ce:	9311      	str	r3, [sp, #68]	; 0x44
 800d8d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d2:	425b      	negs	r3, r3
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8d8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800d8dc:	9312      	str	r3, [sp, #72]	; 0x48
 800d8de:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800d8e2:	4699      	mov	r9, r3
 800d8e4:	a83a      	add	r0, sp, #232	; 0xe8
 800d8e6:	f000 ff11 	bl	800e70c <ai_padding_opt_phase1>
 800d8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 819a 	beq.w	800dc26 <st_sssa8_ch_convolve_startNN+0x93a>
 800d8f2:	b2a3      	uxth	r3, r4
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800d8fe:	1a9a      	subs	r2, r3, r2
 800d900:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d902:	fb05 2303 	mla	r3, r5, r3, r2
 800d906:	9308      	str	r3, [sp, #32]
 800d908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d90a:	425a      	negs	r2, r3
 800d90c:	b293      	uxth	r3, r2
 800d90e:	930c      	str	r3, [sp, #48]	; 0x30
 800d910:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800d914:	9310      	str	r3, [sp, #64]	; 0x40
 800d916:	465b      	mov	r3, fp
 800d918:	46cb      	mov	fp, r9
 800d91a:	4699      	mov	r9, r3
 800d91c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800d91e:	2a00      	cmp	r2, #0
 800d920:	f000 80f6 	beq.w	800db10 <st_sssa8_ch_convolve_startNN+0x824>
 800d924:	3a01      	subs	r2, #1
 800d926:	923a      	str	r2, [sp, #232]	; 0xe8
 800d928:	2201      	movs	r2, #1
 800d92a:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800d92e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d930:	9a08      	ldr	r2, [sp, #32]
 800d932:	4293      	cmp	r3, r2
 800d934:	f280 80fa 	bge.w	800db2c <st_sssa8_ch_convolve_startNN+0x840>
 800d938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d93c:	fb01 3102 	mla	r1, r1, r2, r3
 800d940:	b283      	uxth	r3, r0
 800d942:	930d      	str	r3, [sp, #52]	; 0x34
 800d944:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d946:	1acd      	subs	r5, r1, r3
 800d948:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d94e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d950:	461a      	mov	r2, r3
 800d952:	9306      	str	r3, [sp, #24]
 800d954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d956:	42ab      	cmp	r3, r5
 800d958:	da20      	bge.n	800d99c <st_sssa8_ch_convolve_startNN+0x6b0>
 800d95a:	9906      	ldr	r1, [sp, #24]
 800d95c:	461c      	mov	r4, r3
 800d95e:	469c      	mov	ip, r3
 800d960:	0fce      	lsrs	r6, r1, #31
 800d962:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d964:	4291      	cmp	r1, r2
 800d966:	bfd8      	it	le
 800d968:	f046 0601 	orrle.w	r6, r6, #1
 800d96c:	fb02 f208 	mul.w	r2, r2, r8
 800d970:	9207      	str	r2, [sp, #28]
 800d972:	45e0      	cmp	r8, ip
 800d974:	4652      	mov	r2, sl
 800d976:	4649      	mov	r1, r9
 800d978:	4638      	mov	r0, r7
 800d97a:	bfcc      	ite	gt
 800d97c:	2300      	movgt	r3, #0
 800d97e:	2301      	movle	r3, #1
 800d980:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800d984:	d102      	bne.n	800d98c <st_sssa8_ch_convolve_startNN+0x6a0>
 800d986:	2e00      	cmp	r6, #0
 800d988:	f000 80b9 	beq.w	800dafe <st_sssa8_ch_convolve_startNN+0x812>
 800d98c:	f005 f986 	bl	8012c9c <st_dsp_arm_fill_q15>
 800d990:	3401      	adds	r4, #1
 800d992:	44d9      	add	r9, fp
 800d994:	b224      	sxth	r4, r4
 800d996:	42ac      	cmp	r4, r5
 800d998:	46a4      	mov	ip, r4
 800d99a:	dbea      	blt.n	800d972 <st_sssa8_ch_convolve_startNN+0x686>
 800d99c:	9b06      	ldr	r3, [sp, #24]
 800d99e:	9908      	ldr	r1, [sp, #32]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	b21b      	sxth	r3, r3
 800d9a4:	428b      	cmp	r3, r1
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	9306      	str	r3, [sp, #24]
 800d9aa:	dbd3      	blt.n	800d954 <st_sssa8_ch_convolve_startNN+0x668>
 800d9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9ae:	454b      	cmp	r3, r9
 800d9b0:	f000 80c2 	beq.w	800db38 <st_sssa8_ch_convolve_startNN+0x84c>
 800d9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d9ba:	441a      	add	r2, r3
 800d9bc:	3001      	adds	r0, #1
 800d9be:	b293      	uxth	r3, r2
 800d9c0:	b200      	sxth	r0, r0
 800d9c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	4283      	cmp	r3, r0
 800d9ca:	dca7      	bgt.n	800d91c <st_sssa8_ch_convolve_startNN+0x630>
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	46d9      	mov	r9, fp
 800d9d0:	469b      	mov	fp, r3
 800d9d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9d6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d9d8:	441a      	add	r2, r3
 800d9da:	3401      	adds	r4, #1
 800d9dc:	b293      	uxth	r3, r2
 800d9de:	b224      	sxth	r4, r4
 800d9e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9e4:	4625      	mov	r5, r4
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	f73f af7c 	bgt.w	800d8e4 <st_sssa8_ch_convolve_startNN+0x5f8>
 800d9ec:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d9ee:	4559      	cmp	r1, fp
 800d9f0:	f43f ae84 	beq.w	800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800d9f4:	ee19 3a10 	vmov	r3, s18
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f43f ae7f 	beq.w	800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800d9fe:	ee1a 3a10 	vmov	r3, s20
 800da02:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800da04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da06:	f1a3 0b04 	sub.w	fp, r3, #4
 800da0a:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800da0c:	f002 0a03 	and.w	sl, r2, #3
 800da10:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 800da12:	1c5f      	adds	r7, r3, #1
 800da14:	f8df c648 	ldr.w	ip, [pc, #1608]	; 800e060 <st_sssa8_ch_convolve_startNN+0xd74>
 800da18:	f8dd e180 	ldr.w	lr, [sp, #384]	; 0x180
 800da1c:	f8cd b018 	str.w	fp, [sp, #24]
 800da20:	e9dd 4317 	ldrd	r4, r3, [sp, #92]	; 0x5c
 800da24:	4433      	add	r3, r6
 800da26:	930a      	str	r3, [sp, #40]	; 0x28
 800da28:	0893      	lsrs	r3, r2, #2
 800da2a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800da2e:	9309      	str	r3, [sp, #36]	; 0x24
 800da30:	3b01      	subs	r3, #1
 800da32:	b292      	uxth	r2, r2
 800da34:	b29b      	uxth	r3, r3
 800da36:	9207      	str	r2, [sp, #28]
 800da38:	3301      	adds	r3, #1
 800da3a:	009a      	lsls	r2, r3, #2
 800da3c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800da40:	920b      	str	r2, [sp, #44]	; 0x2c
 800da42:	9308      	str	r3, [sp, #32]
 800da44:	9a06      	ldr	r2, [sp, #24]
 800da46:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800da4a:	9206      	str	r2, [sp, #24]
 800da4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da4e:	2a00      	cmp	r2, #0
 800da50:	f000 80f0 	beq.w	800dc34 <st_sssa8_ch_convolve_startNN+0x948>
 800da54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da56:	9814      	ldr	r0, [sp, #80]	; 0x50
 800da58:	eb0e 0902 	add.w	r9, lr, r2
 800da5c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da60:	fa2f fb82 	sxtb16	fp, r2
 800da64:	fa1f f88b 	uxth.w	r8, fp
 800da68:	6801      	ldr	r1, [r0, #0]
 800da6a:	ea4f 2232 	mov.w	r2, r2, ror #8
 800da6e:	fa2f f282 	sxtb16	r2, r2
 800da72:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 800da76:	fb28 3101 	smlad	r1, r8, r1, r3
 800da7a:	ea02 030c 	and.w	r3, r2, ip
 800da7e:	3008      	adds	r0, #8
 800da80:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800da84:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800da88:	fb23 1302 	smlad	r3, r3, r2, r1
 800da8c:	45ce      	cmp	lr, r9
 800da8e:	d1e5      	bne.n	800da5c <st_sssa8_ch_convolve_startNN+0x770>
 800da90:	9a08      	ldr	r2, [sp, #32]
 800da92:	f1ba 0f00 	cmp.w	sl, #0
 800da96:	f000 80b4 	beq.w	800dc02 <st_sssa8_ch_convolve_startNN+0x916>
 800da9a:	f999 1000 	ldrsb.w	r1, [r9]
 800da9e:	8810      	ldrh	r0, [r2, #0]
 800daa0:	fb10 3301 	smlabb	r3, r0, r1, r3
 800daa4:	9907      	ldr	r1, [sp, #28]
 800daa6:	b161      	cbz	r1, 800dac2 <st_sssa8_ch_convolve_startNN+0x7d6>
 800daa8:	f999 1001 	ldrsb.w	r1, [r9, #1]
 800daac:	f1ba 0f02 	cmp.w	sl, #2
 800dab0:	8850      	ldrh	r0, [r2, #2]
 800dab2:	fb10 3301 	smlabb	r3, r0, r1, r3
 800dab6:	d004      	beq.n	800dac2 <st_sssa8_ch_convolve_startNN+0x7d6>
 800dab8:	8891      	ldrh	r1, [r2, #4]
 800daba:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800dabe:	fb11 3302 	smlabb	r3, r1, r2, r3
 800dac2:	eb09 0e0a 	add.w	lr, r9, sl
 800dac6:	f936 0b02 	ldrsh.w	r0, [r6], #2
 800daca:	2815      	cmp	r0, #21
 800dacc:	f340 808c 	ble.w	800dbe8 <st_sssa8_ch_convolve_startNN+0x8fc>
 800dad0:	1e81      	subs	r1, r0, #2
 800dad2:	2201      	movs	r2, #1
 800dad4:	3801      	subs	r0, #1
 800dad6:	fa02 f101 	lsl.w	r1, r2, r1
 800dada:	682a      	ldr	r2, [r5, #0]
 800dadc:	fb53 1302 	smmla	r3, r3, r2, r1
 800dae0:	fa43 f200 	asr.w	r2, r3, r0
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	4413      	add	r3, r2
 800dae8:	f303 0307 	ssat	r3, #8, r3
 800daec:	f807 3c01 	strb.w	r3, [r7, #-1]
 800daf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf2:	3701      	adds	r7, #1
 800daf4:	3504      	adds	r5, #4
 800daf6:	3404      	adds	r4, #4
 800daf8:	42b3      	cmp	r3, r6
 800dafa:	d1a3      	bne.n	800da44 <st_sssa8_ch_convolve_startNN+0x758>
 800dafc:	e5fe      	b.n	800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800dafe:	9b07      	ldr	r3, [sp, #28]
 800db00:	eb03 000c 	add.w	r0, r3, ip
 800db04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db06:	fb0a 3000 	mla	r0, sl, r0, r3
 800db0a:	f001 f9e9 	bl	800eee0 <st_int8_to16_no_shift>
 800db0e:	e73f      	b.n	800d990 <st_sssa8_ch_convolve_startNN+0x6a4>
 800db10:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800db12:	2a00      	cmp	r2, #0
 800db14:	d132      	bne.n	800db7c <st_sssa8_ch_convolve_startNN+0x890>
 800db16:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800db18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db1a:	3a01      	subs	r2, #1
 800db1c:	923c      	str	r2, [sp, #240]	; 0xf0
 800db1e:	2201      	movs	r2, #1
 800db20:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800db24:	9a08      	ldr	r2, [sp, #32]
 800db26:	4293      	cmp	r3, r2
 800db28:	f6ff af06 	blt.w	800d938 <st_sssa8_ch_convolve_startNN+0x64c>
 800db2c:	b283      	uxth	r3, r0
 800db2e:	930d      	str	r3, [sp, #52]	; 0x34
 800db30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db32:	454b      	cmp	r3, r9
 800db34:	f47f af3e 	bne.w	800d9b4 <st_sssa8_ch_convolve_startNN+0x6c8>
 800db38:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800db3a:	ee1a 2a10 	vmov	r2, s20
 800db3e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800db40:	9304      	str	r3, [sp, #16]
 800db42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db44:	9860      	ldr	r0, [sp, #384]	; 0x180
 800db46:	9303      	str	r3, [sp, #12]
 800db48:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800db4a:	9302      	str	r3, [sp, #8]
 800db4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	ee19 3a10 	vmov	r3, s18
 800db58:	f000 fdf2 	bl	800e740 <st_sssa8_ch_nn_mat_mult_kernel>
 800db5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db62:	440b      	add	r3, r1
 800db64:	906d      	str	r0, [sp, #436]	; 0x1b4
 800db66:	3201      	adds	r2, #1
 800db68:	b29b      	uxth	r3, r3
 800db6a:	b210      	sxth	r0, r2
 800db6c:	930c      	str	r3, [sp, #48]	; 0x30
 800db6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db70:	4601      	mov	r1, r0
 800db72:	4283      	cmp	r3, r0
 800db74:	dd5a      	ble.n	800dc2c <st_sssa8_ch_convolve_startNN+0x940>
 800db76:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800db7a:	e6cf      	b.n	800d91c <st_sssa8_ch_convolve_startNN+0x630>
 800db7c:	3a01      	subs	r2, #1
 800db7e:	923b      	str	r2, [sp, #236]	; 0xec
 800db80:	f8bd 210c 	ldrh.w	r2, [sp, #268]	; 0x10c
 800db84:	2a01      	cmp	r2, #1
 800db86:	f8ad 210e 	strh.w	r2, [sp, #270]	; 0x10e
 800db8a:	f43f aed0 	beq.w	800d92e <st_sssa8_ch_convolve_startNN+0x642>
 800db8e:	b283      	uxth	r3, r0
 800db90:	9908      	ldr	r1, [sp, #32]
 800db92:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
 800db96:	930d      	str	r3, [sp, #52]	; 0x34
 800db98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db9a:	428b      	cmp	r3, r1
 800db9c:	f6bf af06 	bge.w	800d9ac <st_sssa8_ch_convolve_startNN+0x6c0>
 800dba0:	ee08 7a10 	vmov	s16, r7
 800dba4:	f8cd b01c 	str.w	fp, [sp, #28]
 800dba8:	464f      	mov	r7, r9
 800dbaa:	46c3      	mov	fp, r8
 800dbac:	461d      	mov	r5, r3
 800dbae:	4618      	mov	r0, r3
 800dbb0:	ee18 2a90 	vmov	r2, s17
 800dbb4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800dbb6:	4688      	mov	r8, r1
 800dbb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dbbc:	3501      	adds	r5, #1
 800dbbe:	fb00 400b 	mla	r0, r0, fp, r4
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	9206      	str	r2, [sp, #24]
 800dbc6:	b22d      	sxth	r5, r5
 800dbc8:	fb0a 9000 	mla	r0, sl, r0, r9
 800dbcc:	f001 f988 	bl	800eee0 <st_int8_to16_no_shift>
 800dbd0:	4437      	add	r7, r6
 800dbd2:	4545      	cmp	r5, r8
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	9a06      	ldr	r2, [sp, #24]
 800dbd8:	dbf0      	blt.n	800dbbc <st_sssa8_ch_convolve_startNN+0x8d0>
 800dbda:	46b9      	mov	r9, r7
 800dbdc:	46d8      	mov	r8, fp
 800dbde:	ee18 7a10 	vmov	r7, s16
 800dbe2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800dbe6:	e6e1      	b.n	800d9ac <st_sssa8_ch_convolve_startNN+0x6c0>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	dd0c      	ble.n	800dc06 <st_sssa8_ch_convolve_startNN+0x91a>
 800dbec:	682a      	ldr	r2, [r5, #0]
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	6821      	ldr	r1, [r4, #0]
 800dbf2:	fb53 1302 	smmla	r3, r3, r2, r1
 800dbf6:	4103      	asrs	r3, r0
 800dbf8:	f303 0307 	ssat	r3, #8, r3
 800dbfc:	f807 3c01 	strb.w	r3, [r7, #-1]
 800dc00:	e776      	b.n	800daf0 <st_sssa8_ch_convolve_startNN+0x804>
 800dc02:	46ce      	mov	lr, r9
 800dc04:	e75f      	b.n	800dac6 <st_sssa8_ch_convolve_startNN+0x7da>
 800dc06:	f1c0 0201 	rsb	r2, r0, #1
 800dc0a:	fa03 f202 	lsl.w	r2, r3, r2
 800dc0e:	f302 021f 	ssat	r2, #32, r2
 800dc12:	682b      	ldr	r3, [r5, #0]
 800dc14:	fb52 f213 	smmulr	r2, r2, r3
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f303 0307 	ssat	r3, #8, r3
 800dc20:	f807 3c01 	strb.w	r3, [r7, #-1]
 800dc24:	e764      	b.n	800daf0 <st_sssa8_ch_convolve_startNN+0x804>
 800dc26:	b2a3      	uxth	r3, r4
 800dc28:	931a      	str	r3, [sp, #104]	; 0x68
 800dc2a:	e6d2      	b.n	800d9d2 <st_sssa8_ch_convolve_startNN+0x6e6>
 800dc2c:	46d9      	mov	r9, fp
 800dc2e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800dc32:	e6ce      	b.n	800d9d2 <st_sssa8_ch_convolve_startNN+0x6e6>
 800dc34:	46f1      	mov	r9, lr
 800dc36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc38:	e72b      	b.n	800da92 <st_sssa8_ch_convolve_startNN+0x7a6>
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	9327      	str	r3, [sp, #156]	; 0x9c
 800dc42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f43f ad59 	beq.w	800d6fc <st_sssa8_ch_convolve_startNN+0x410>
 800dc4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc4c:	fa0f f788 	sxth.w	r7, r8
 800dc50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dc52:	ea4f 084a 	mov.w	r8, sl, lsl #1
 800dc56:	fb03 f30a 	mul.w	r3, r3, sl
 800dc5a:	2400      	movs	r4, #0
 800dc5c:	ee08 9a90 	vmov	s17, r9
 800dc60:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
 800dc64:	fb02 f303 	mul.w	r3, r2, r3
 800dc68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc6a:	4625      	mov	r5, r4
 800dc6c:	46d0      	mov	r8, sl
 800dc6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc72:	9312      	str	r3, [sp, #72]	; 0x48
 800dc74:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dc76:	3b01      	subs	r3, #1
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc7e:	425b      	negs	r3, r3
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	932b      	str	r3, [sp, #172]	; 0xac
 800dc84:	f00a 0303 	and.w	r3, sl, #3
 800dc88:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc8a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800dc8e:	46d9      	mov	r9, fp
 800dc90:	9313      	str	r3, [sp, #76]	; 0x4c
 800dc92:	a83a      	add	r0, sp, #232	; 0xe8
 800dc94:	f000 fd3a 	bl	800e70c <ai_padding_opt_phase1>
 800dc98:	ee19 3a10 	vmov	r3, s18
 800dc9c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800dc9e:	fb05 f303 	mul.w	r3, r5, r3
 800dca2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dca4:	fb01 2303 	mla	r3, r1, r3, r2
 800dca8:	931e      	str	r3, [sp, #120]	; 0x78
 800dcaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dcac:	b953      	cbnz	r3, 800dcc4 <st_sssa8_ch_convolve_startNN+0x9d8>
 800dcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f040 81c0 	bne.w	800e036 <st_sssa8_ch_convolve_startNN+0xd4a>
 800dcb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcb8:	ee19 1a90 	vmov	r1, s19
 800dcbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcbe:	9860      	ldr	r0, [sp, #384]	; 0x180
 800dcc0:	f001 fb54 	bl	800f36c <st_int8_to16_dual_interleaved>
 800dcc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f000 81c0 	beq.w	800e04c <st_sssa8_ch_convolve_startNN+0xd60>
 800dccc:	b2a3      	uxth	r3, r4
 800dcce:	eef0 aa4a 	vmov.f32	s21, s20
 800dcd2:	ee0b 7a10 	vmov	s22, r7
 800dcd6:	ed8d 9a26 	vstr	s18, [sp, #152]	; 0x98
 800dcda:	932c      	str	r3, [sp, #176]	; 0xb0
 800dcdc:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800dce0:	1a9b      	subs	r3, r3, r2
 800dce2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dce4:	fb02 3305 	mla	r3, r2, r5, r3
 800dce8:	9308      	str	r3, [sp, #32]
 800dcea:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800dcee:	9311      	str	r3, [sp, #68]	; 0x44
 800dcf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcf2:	9325      	str	r3, [sp, #148]	; 0x94
 800dcf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcf6:	9318      	str	r3, [sp, #96]	; 0x60
 800dcf8:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800dcfa:	9329      	str	r3, [sp, #164]	; 0xa4
 800dcfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dcfe:	9324      	str	r3, [sp, #144]	; 0x90
 800dd00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd02:	9323      	str	r3, [sp, #140]	; 0x8c
 800dd04:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800dd06:	9322      	str	r3, [sp, #136]	; 0x88
 800dd08:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800dd0a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800dd0c:	923b      	str	r2, [sp, #236]	; 0xec
 800dd0e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800dd10:	933a      	str	r3, [sp, #232]	; 0xe8
 800dd12:	923c      	str	r2, [sp, #240]	; 0xf0
 800dd14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd16:	2a00      	cmp	r2, #0
 800dd18:	f000 8137 	beq.w	800df8a <st_sssa8_ch_convolve_startNN+0xc9e>
 800dd1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd1e:	2100      	movs	r1, #0
 800dd20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800dd22:	4252      	negs	r2, r2
 800dd24:	b292      	uxth	r2, r2
 800dd26:	9207      	str	r2, [sp, #28]
 800dd28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dd2a:	9217      	str	r2, [sp, #92]	; 0x5c
 800dd2c:	460a      	mov	r2, r1
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d062      	beq.n	800ddf8 <st_sssa8_ch_convolve_startNN+0xb0c>
 800dd32:	3b01      	subs	r3, #1
 800dd34:	933a      	str	r3, [sp, #232]	; 0xe8
 800dd36:	2301      	movs	r3, #1
 800dd38:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800dd3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd3e:	9808      	ldr	r0, [sp, #32]
 800dd40:	4283      	cmp	r3, r0
 800dd42:	da66      	bge.n	800de12 <st_sssa8_ch_convolve_startNN+0xb26>
 800dd44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd46:	46c3      	mov	fp, r8
 800dd48:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dd4a:	ee1b 7a10 	vmov	r7, s22
 800dd4e:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800dd52:	fb02 3200 	mla	r2, r2, r0, r3
 800dd56:	b28b      	uxth	r3, r1
 800dd58:	930d      	str	r3, [sp, #52]	; 0x34
 800dd5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd5c:	1ad5      	subs	r5, r2, r3
 800dd5e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800dd62:	930c      	str	r3, [sp, #48]	; 0x30
 800dd64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd66:	461a      	mov	r2, r3
 800dd68:	9306      	str	r3, [sp, #24]
 800dd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd6c:	42ab      	cmp	r3, r5
 800dd6e:	da27      	bge.n	800ddc0 <st_sssa8_ch_convolve_startNN+0xad4>
 800dd70:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dd72:	4291      	cmp	r1, r2
 800dd74:	fb09 f202 	mul.w	r2, r9, r2
 800dd78:	bfcc      	ite	gt
 800dd7a:	f04f 0800 	movgt.w	r8, #0
 800dd7e:	f04f 0801 	movle.w	r8, #1
 800dd82:	9210      	str	r2, [sp, #64]	; 0x40
 800dd84:	9a06      	ldr	r2, [sp, #24]
 800dd86:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 800dd8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd8c:	2a00      	cmp	r2, #0
 800dd8e:	d06a      	beq.n	800de66 <st_sssa8_ch_convolve_startNN+0xb7a>
 800dd90:	461e      	mov	r6, r3
 800dd92:	469c      	mov	ip, r3
 800dd94:	45e1      	cmp	r9, ip
 800dd96:	4621      	mov	r1, r4
 800dd98:	465a      	mov	r2, fp
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	bfcc      	ite	gt
 800dd9e:	2300      	movgt	r3, #0
 800dda0:	2301      	movle	r3, #1
 800dda2:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
 800dda6:	d103      	bne.n	800ddb0 <st_sssa8_ch_convolve_startNN+0xac4>
 800dda8:	f1b8 0f00 	cmp.w	r8, #0
 800ddac:	f000 80cd 	beq.w	800df4a <st_sssa8_ch_convolve_startNN+0xc5e>
 800ddb0:	f004 ff74 	bl	8012c9c <st_dsp_arm_fill_q15>
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	4454      	add	r4, sl
 800ddb8:	b236      	sxth	r6, r6
 800ddba:	42b5      	cmp	r5, r6
 800ddbc:	46b4      	mov	ip, r6
 800ddbe:	dce9      	bgt.n	800dd94 <st_sssa8_ch_convolve_startNN+0xaa8>
 800ddc0:	9a06      	ldr	r2, [sp, #24]
 800ddc2:	9908      	ldr	r1, [sp, #32]
 800ddc4:	3201      	adds	r2, #1
 800ddc6:	b213      	sxth	r3, r2
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	461a      	mov	r2, r3
 800ddcc:	9306      	str	r3, [sp, #24]
 800ddce:	dbcc      	blt.n	800dd6a <st_sssa8_ch_convolve_startNN+0xa7e>
 800ddd0:	46d8      	mov	r8, fp
 800ddd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddd4:	42a3      	cmp	r3, r4
 800ddd6:	d021      	beq.n	800de1c <st_sssa8_ch_convolve_startNN+0xb30>
 800ddd8:	9b07      	ldr	r3, [sp, #28]
 800ddda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dddc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ddde:	4413      	add	r3, r2
 800dde0:	3101      	adds	r1, #1
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	b209      	sxth	r1, r1
 800dde6:	9307      	str	r3, [sp, #28]
 800dde8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddea:	460a      	mov	r2, r1
 800ddec:	428b      	cmp	r3, r1
 800ddee:	f340 80b5 	ble.w	800df5c <st_sssa8_ch_convolve_startNN+0xc70>
 800ddf2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d19c      	bne.n	800dd32 <st_sssa8_ch_convolve_startNN+0xa46>
 800ddf8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d14a      	bne.n	800de94 <st_sssa8_ch_convolve_startNN+0xba8>
 800ddfe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800de00:	9808      	ldr	r0, [sp, #32]
 800de02:	3b01      	subs	r3, #1
 800de04:	933c      	str	r3, [sp, #240]	; 0xf0
 800de06:	2301      	movs	r3, #1
 800de08:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800de0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de0e:	4283      	cmp	r3, r0
 800de10:	db98      	blt.n	800dd44 <st_sssa8_ch_convolve_startNN+0xa58>
 800de12:	b28b      	uxth	r3, r1
 800de14:	930d      	str	r3, [sp, #52]	; 0x34
 800de16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d1dd      	bne.n	800ddd8 <st_sssa8_ch_convolve_startNN+0xaec>
 800de1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de1e:	ee1a 2a90 	vmov	r2, s21
 800de22:	9914      	ldr	r1, [sp, #80]	; 0x50
 800de24:	ee19 0a90 	vmov	r0, s19
 800de28:	9305      	str	r3, [sp, #20]
 800de2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de2c:	9304      	str	r3, [sp, #16]
 800de2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de30:	9303      	str	r3, [sp, #12]
 800de32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de34:	9302      	str	r3, [sp, #8]
 800de36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	ee19 3a10 	vmov	r3, s18
 800de42:	f004 f81f 	bl	8011e84 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800de46:	9b07      	ldr	r3, [sp, #28]
 800de48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800de4c:	4413      	add	r3, r2
 800de4e:	9017      	str	r0, [sp, #92]	; 0x5c
 800de50:	3101      	adds	r1, #1
 800de52:	b29b      	uxth	r3, r3
 800de54:	b209      	sxth	r1, r1
 800de56:	9307      	str	r3, [sp, #28]
 800de58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de5a:	460a      	mov	r2, r1
 800de5c:	428b      	cmp	r3, r1
 800de5e:	f340 8094 	ble.w	800df8a <st_sssa8_ch_convolve_startNN+0xc9e>
 800de62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800de64:	e7c5      	b.n	800ddf2 <st_sssa8_ch_convolve_startNN+0xb06>
 800de66:	469e      	mov	lr, r3
 800de68:	461e      	mov	r6, r3
 800de6a:	0ff3      	lsrs	r3, r6, #31
 800de6c:	465a      	mov	r2, fp
 800de6e:	4621      	mov	r1, r4
 800de70:	4638      	mov	r0, r7
 800de72:	45f1      	cmp	r9, lr
 800de74:	bfd8      	it	le
 800de76:	f043 0301 	orrle.w	r3, r3, #1
 800de7a:	b913      	cbnz	r3, 800de82 <st_sssa8_ch_convolve_startNN+0xb96>
 800de7c:	f1b8 0f00 	cmp.w	r8, #0
 800de80:	d05a      	beq.n	800df38 <st_sssa8_ch_convolve_startNN+0xc4c>
 800de82:	f004 ff0b 	bl	8012c9c <st_dsp_arm_fill_q15>
 800de86:	3601      	adds	r6, #1
 800de88:	4454      	add	r4, sl
 800de8a:	b236      	sxth	r6, r6
 800de8c:	42ae      	cmp	r6, r5
 800de8e:	46b6      	mov	lr, r6
 800de90:	dbeb      	blt.n	800de6a <st_sssa8_ch_convolve_startNN+0xb7e>
 800de92:	e795      	b.n	800ddc0 <st_sssa8_ch_convolve_startNN+0xad4>
 800de94:	3b01      	subs	r3, #1
 800de96:	933b      	str	r3, [sp, #236]	; 0xec
 800de98:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	f8ad 310e 	strh.w	r3, [sp, #270]	; 0x10e
 800dea2:	f43f af4b 	beq.w	800dd3c <st_sssa8_ch_convolve_startNN+0xa50>
 800dea6:	b28b      	uxth	r3, r1
 800dea8:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800deac:	930d      	str	r3, [sp, #52]	; 0x34
 800deae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deb0:	bb03      	cbnz	r3, 800def4 <st_sssa8_ch_convolve_startNN+0xc08>
 800deb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deb4:	9908      	ldr	r1, [sp, #32]
 800deb6:	428b      	cmp	r3, r1
 800deb8:	da8b      	bge.n	800ddd2 <st_sssa8_ch_convolve_startNN+0xae6>
 800deba:	46a3      	mov	fp, r4
 800debc:	464f      	mov	r7, r9
 800debe:	462c      	mov	r4, r5
 800dec0:	461e      	mov	r6, r3
 800dec2:	4618      	mov	r0, r3
 800dec4:	ee18 2a90 	vmov	r2, s17
 800dec8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800deca:	4689      	mov	r9, r1
 800decc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ded0:	3601      	adds	r6, #1
 800ded2:	fb00 4007 	mla	r0, r0, r7, r4
 800ded6:	4659      	mov	r1, fp
 800ded8:	9206      	str	r2, [sp, #24]
 800deda:	b236      	sxth	r6, r6
 800dedc:	fb08 a000 	mla	r0, r8, r0, sl
 800dee0:	f001 f894 	bl	800f00c <st_int8_to16_no_shift_interleaved>
 800dee4:	44ab      	add	fp, r5
 800dee6:	454e      	cmp	r6, r9
 800dee8:	4630      	mov	r0, r6
 800deea:	9a06      	ldr	r2, [sp, #24]
 800deec:	dbf0      	blt.n	800ded0 <st_sssa8_ch_convolve_startNN+0xbe4>
 800deee:	465c      	mov	r4, fp
 800def0:	46b9      	mov	r9, r7
 800def2:	e76e      	b.n	800ddd2 <st_sssa8_ch_convolve_startNN+0xae6>
 800def4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800def6:	9908      	ldr	r1, [sp, #32]
 800def8:	428b      	cmp	r3, r1
 800defa:	f6bf af6a 	bge.w	800ddd2 <st_sssa8_ch_convolve_startNN+0xae6>
 800defe:	46a3      	mov	fp, r4
 800df00:	464f      	mov	r7, r9
 800df02:	462c      	mov	r4, r5
 800df04:	461e      	mov	r6, r3
 800df06:	4618      	mov	r0, r3
 800df08:	ee18 2a90 	vmov	r2, s17
 800df0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800df0e:	4689      	mov	r9, r1
 800df10:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800df14:	3601      	adds	r6, #1
 800df16:	fb00 4007 	mla	r0, r0, r7, r4
 800df1a:	4659      	mov	r1, fp
 800df1c:	9206      	str	r2, [sp, #24]
 800df1e:	b236      	sxth	r6, r6
 800df20:	fb08 a000 	mla	r0, r8, r0, sl
 800df24:	f000 ffdc 	bl	800eee0 <st_int8_to16_no_shift>
 800df28:	44ab      	add	fp, r5
 800df2a:	454e      	cmp	r6, r9
 800df2c:	4630      	mov	r0, r6
 800df2e:	9a06      	ldr	r2, [sp, #24]
 800df30:	dbf0      	blt.n	800df14 <st_sssa8_ch_convolve_startNN+0xc28>
 800df32:	465c      	mov	r4, fp
 800df34:	46b9      	mov	r9, r7
 800df36:	e74c      	b.n	800ddd2 <st_sssa8_ch_convolve_startNN+0xae6>
 800df38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df3a:	eb03 000e 	add.w	r0, r3, lr
 800df3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df40:	fb0b 3000 	mla	r0, fp, r0, r3
 800df44:	f001 f862 	bl	800f00c <st_int8_to16_no_shift_interleaved>
 800df48:	e79d      	b.n	800de86 <st_sssa8_ch_convolve_startNN+0xb9a>
 800df4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df4c:	eb03 000c 	add.w	r0, r3, ip
 800df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df52:	fb0b 3000 	mla	r0, fp, r0, r3
 800df56:	f000 ffc3 	bl	800eee0 <st_int8_to16_no_shift>
 800df5a:	e72b      	b.n	800ddb4 <st_sssa8_ch_convolve_startNN+0xac8>
 800df5c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800df5e:	428c      	cmp	r4, r1
 800df60:	d013      	beq.n	800df8a <st_sssa8_ch_convolve_startNN+0xc9e>
 800df62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df64:	ee1a 2a90 	vmov	r2, s21
 800df68:	ee19 0a90 	vmov	r0, s19
 800df6c:	9305      	str	r3, [sp, #20]
 800df6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800df70:	9304      	str	r3, [sp, #16]
 800df72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df74:	9303      	str	r3, [sp, #12]
 800df76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800df78:	9302      	str	r3, [sp, #8]
 800df7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	ee19 3a10 	vmov	r3, s18
 800df86:	f004 faa1 	bl	80124cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800df8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df90:	1a9b      	subs	r3, r3, r2
 800df92:	4411      	add	r1, r2
 800df94:	911e      	str	r1, [sp, #120]	; 0x78
 800df96:	b299      	uxth	r1, r3
 800df98:	4613      	mov	r3, r2
 800df9a:	428a      	cmp	r2, r1
 800df9c:	9126      	str	r1, [sp, #152]	; 0x98
 800df9e:	bf28      	it	cs
 800dfa0:	460b      	movcs	r3, r1
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d03d      	beq.n	800e024 <st_sssa8_ch_convolve_startNN+0xd38>
 800dfa8:	ee1a 4a90 	vmov	r4, s21
 800dfac:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800dfae:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dfb0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800dfb4:	fb01 0002 	mla	r0, r1, r2, r0
 800dfb8:	ee0a 4a90 	vmov	s21, r4
 800dfbc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800dfbe:	9029      	str	r0, [sp, #164]	; 0xa4
 800dfc0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800dfc4:	9423      	str	r4, [sp, #140]	; 0x8c
 800dfc6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800dfc8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800dfcc:	9422      	str	r4, [sp, #136]	; 0x88
 800dfce:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800dfd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dfd4:	9224      	str	r2, [sp, #144]	; 0x90
 800dfd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfd8:	bb32      	cbnz	r2, 800e028 <st_sssa8_ch_convolve_startNN+0xd3c>
 800dfda:	460a      	mov	r2, r1
 800dfdc:	ee19 1a90 	vmov	r1, s19
 800dfe0:	9318      	str	r3, [sp, #96]	; 0x60
 800dfe2:	f001 f9c3 	bl	800f36c <st_int8_to16_dual_interleaved>
 800dfe6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	461a      	mov	r2, r3
 800dfee:	9325      	str	r3, [sp, #148]	; 0x94
 800dff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dff4:	429a      	cmp	r2, r3
 800dff6:	f47f ae87 	bne.w	800dd08 <st_sssa8_ch_convolve_startNN+0xa1c>
 800dffa:	ee1b 7a10 	vmov	r7, s22
 800dffe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e000:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e002:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800e004:	4413      	add	r3, r2
 800e006:	3401      	adds	r4, #1
 800e008:	b29b      	uxth	r3, r3
 800e00a:	b224      	sxth	r4, r4
 800e00c:	932b      	str	r3, [sp, #172]	; 0xac
 800e00e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e010:	4625      	mov	r5, r4
 800e012:	42a3      	cmp	r3, r4
 800e014:	f73f ae3d 	bgt.w	800dc92 <st_sssa8_ch_convolve_startNN+0x9a6>
 800e018:	2000      	movs	r0, #0
 800e01a:	b04f      	add	sp, #316	; 0x13c
 800e01c:	ecbd 8b08 	vpop	{d8-d11}
 800e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e024:	9318      	str	r3, [sp, #96]	; 0x60
 800e026:	e7de      	b.n	800dfe6 <st_sssa8_ch_convolve_startNN+0xcfa>
 800e028:	460a      	mov	r2, r1
 800e02a:	ee19 1a90 	vmov	r1, s19
 800e02e:	9318      	str	r3, [sp, #96]	; 0x60
 800e030:	f001 f83c 	bl	800f0ac <st_int8_to16_dual>
 800e034:	e7d7      	b.n	800dfe6 <st_sssa8_ch_convolve_startNN+0xcfa>
 800e036:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e038:	ee19 1a90 	vmov	r1, s19
 800e03c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e03e:	9860      	ldr	r0, [sp, #384]	; 0x180
 800e040:	f001 f834 	bl	800f0ac <st_int8_to16_dual>
 800e044:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e046:	2b00      	cmp	r3, #0
 800e048:	f47f ae40 	bne.w	800dccc <st_sssa8_ch_convolve_startNN+0x9e0>
 800e04c:	b2a3      	uxth	r3, r4
 800e04e:	932c      	str	r3, [sp, #176]	; 0xb0
 800e050:	e7d5      	b.n	800dffe <st_sssa8_ch_convolve_startNN+0xd12>
 800e052:	ed8d aa17 	vstr	s20, [sp, #92]	; 0x5c
 800e056:	ed8d 9a18 	vstr	s18, [sp, #96]	; 0x60
 800e05a:	f7ff b9a8 	b.w	800d3ae <st_sssa8_ch_convolve_startNN+0xc2>
 800e05e:	bf00      	nop
 800e060:	ffff0000 	.word	0xffff0000

0800e064 <st_sssa8_fully_connected>:
 800e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e068:	b097      	sub	sp, #92	; 0x5c
 800e06a:	460d      	mov	r5, r1
 800e06c:	4683      	mov	fp, r0
 800e06e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800e070:	9313      	str	r3, [sp, #76]	; 0x4c
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	9203      	str	r2, [sp, #12]
 800e076:	9307      	str	r3, [sp, #28]
 800e078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e07a:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800e07e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e082:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 800e086:	1e4a      	subs	r2, r1, #1
 800e088:	9104      	str	r1, [sp, #16]
 800e08a:	920d      	str	r2, [sp, #52]	; 0x34
 800e08c:	b292      	uxth	r2, r2
 800e08e:	2a14      	cmp	r2, #20
 800e090:	f200 81b3 	bhi.w	800e3fa <st_sssa8_fully_connected+0x396>
 800e094:	2201      	movs	r2, #1
 800e096:	408b      	lsls	r3, r1
 800e098:	408a      	lsls	r2, r1
 800e09a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e09e:	9308      	str	r3, [sp, #32]
 800e0a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f000 81ae 	beq.w	800e404 <st_sssa8_fully_connected+0x3a0>
 800e0a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e0aa:	b2b3      	uxth	r3, r6
 800e0ac:	9600      	str	r6, [sp, #0]
 800e0ae:	4658      	mov	r0, fp
 800e0b0:	0851      	lsrs	r1, r2, #1
 800e0b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e0b6:	9e03      	ldr	r6, [sp, #12]
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	9115      	str	r1, [sp, #84]	; 0x54
 800e0bc:	4632      	mov	r2, r6
 800e0be:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e0c0:	f003 fea8 	bl	8011e14 <st_int8_reordered_no_shift_zero>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	2c00      	cmp	r4, #0
 800e0c8:	f000 8145 	beq.w	800e356 <st_sssa8_fully_connected+0x2f2>
 800e0cc:	4634      	mov	r4, r6
 800e0ce:	f1a6 0310 	sub.w	r3, r6, #16
 800e0d2:	9e04      	ldr	r6, [sp, #16]
 800e0d4:	1e4a      	subs	r2, r1, #1
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	091b      	lsrs	r3, r3, #4
 800e0da:	1eb1      	subs	r1, r6, #2
 800e0dc:	b292      	uxth	r2, r2
 800e0de:	3301      	adds	r3, #1
 800e0e0:	fa00 f101 	lsl.w	r1, r0, r1
 800e0e4:	9112      	str	r1, [sp, #72]	; 0x48
 800e0e6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e0e8:	3110      	adds	r1, #16
 800e0ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e0ee:	920e      	str	r2, [sp, #56]	; 0x38
 800e0f0:	1ee2      	subs	r2, r4, #3
 800e0f2:	920f      	str	r2, [sp, #60]	; 0x3c
 800e0f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e0f6:	3208      	adds	r2, #8
 800e0f8:	9205      	str	r2, [sp, #20]
 800e0fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e0fc:	3202      	adds	r2, #2
 800e0fe:	9206      	str	r2, [sp, #24]
 800e100:	011a      	lsls	r2, r3, #4
 800e102:	9209      	str	r2, [sp, #36]	; 0x24
 800e104:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e106:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800e10a:	9310      	str	r3, [sp, #64]	; 0x40
 800e10c:	1f23      	subs	r3, r4, #4
 800e10e:	9311      	str	r3, [sp, #68]	; 0x44
 800e110:	1b83      	subs	r3, r0, r6
 800e112:	9314      	str	r3, [sp, #80]	; 0x50
 800e114:	9a03      	ldr	r2, [sp, #12]
 800e116:	9b05      	ldr	r3, [sp, #20]
 800e118:	2a0f      	cmp	r2, #15
 800e11a:	eb05 0b02 	add.w	fp, r5, r2
 800e11e:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800e122:	f340 8261 	ble.w	800e5e8 <st_sssa8_fully_connected+0x584>
 800e126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e128:	465c      	mov	r4, fp
 800e12a:	18ae      	adds	r6, r5, r2
 800e12c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e12e:	682f      	ldr	r7, [r5, #0]
 800e130:	f8d4 a000 	ldr.w	sl, [r4]
 800e134:	ea4f 2037 	mov.w	r0, r7, ror #8
 800e138:	f8d2 9000 	ldr.w	r9, [r2]
 800e13c:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 800e140:	fa2f f080 	sxtb16	r0, r0
 800e144:	fa2f fc8e 	sxtb16	ip, lr
 800e148:	fa2f f787 	sxtb16	r7, r7
 800e14c:	fa2f fe8a 	sxtb16	lr, sl
 800e150:	fb29 1107 	smlad	r1, r9, r7, r1
 800e154:	fb29 390e 	smlad	r9, r9, lr, r3
 800e158:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e15c:	fb28 1100 	smlad	r1, r8, r0, r1
 800e160:	fb28 9e0c 	smlad	lr, r8, ip, r9
 800e164:	6868      	ldr	r0, [r5, #4]
 800e166:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e16a:	ea4f 2330 	mov.w	r3, r0, ror #8
 800e16e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800e172:	ea4f 2a39 	mov.w	sl, r9, ror #8
 800e176:	fa2f f383 	sxtb16	r3, r3
 800e17a:	fa2f f78a 	sxtb16	r7, sl
 800e17e:	fa2f f080 	sxtb16	r0, r0
 800e182:	fa2f fa89 	sxtb16	sl, r9
 800e186:	fb28 1000 	smlad	r0, r8, r0, r1
 800e18a:	fb28 e80a 	smlad	r8, r8, sl, lr
 800e18e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800e192:	fb2c 0003 	smlad	r0, ip, r3, r0
 800e196:	fb2c 8a07 	smlad	sl, ip, r7, r8
 800e19a:	68ab      	ldr	r3, [r5, #8]
 800e19c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800e1a0:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e1a4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e1a8:	ea4f 2e38 	mov.w	lr, r8, ror #8
 800e1ac:	fa2f f181 	sxtb16	r1, r1
 800e1b0:	fa2f f98e 	sxtb16	r9, lr
 800e1b4:	fa2f f383 	sxtb16	r3, r3
 800e1b8:	fa2f fe88 	sxtb16	lr, r8
 800e1bc:	fb2c 0303 	smlad	r3, ip, r3, r0
 800e1c0:	fb2c ac0e 	smlad	ip, ip, lr, sl
 800e1c4:	6957      	ldr	r7, [r2, #20]
 800e1c6:	fb27 3301 	smlad	r3, r7, r1, r3
 800e1ca:	fb27 ce09 	smlad	lr, r7, r9, ip
 800e1ce:	68e8      	ldr	r0, [r5, #12]
 800e1d0:	3410      	adds	r4, #16
 800e1d2:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e1d6:	3510      	adds	r5, #16
 800e1d8:	ea4f 2130 	mov.w	r1, r0, ror #8
 800e1dc:	6997      	ldr	r7, [r2, #24]
 800e1de:	fa2f f881 	sxtb16	r8, r1
 800e1e2:	fa2f f180 	sxtb16	r1, r0
 800e1e6:	ea4f 203c 	mov.w	r0, ip, ror #8
 800e1ea:	fa2f fc8c 	sxtb16	ip, ip
 800e1ee:	fa2f f080 	sxtb16	r0, r0
 800e1f2:	fb27 3101 	smlad	r1, r7, r1, r3
 800e1f6:	fb27 e70c 	smlad	r7, r7, ip, lr
 800e1fa:	69d3      	ldr	r3, [r2, #28]
 800e1fc:	3220      	adds	r2, #32
 800e1fe:	fb23 1108 	smlad	r1, r3, r8, r1
 800e202:	fb23 7300 	smlad	r3, r3, r0, r7
 800e206:	42b5      	cmp	r5, r6
 800e208:	d191      	bne.n	800e12e <st_sssa8_fully_connected+0xca>
 800e20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e20c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e210:	4493      	add	fp, r2
 800e212:	4691      	mov	r9, r2
 800e214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e216:	4591      	cmp	r9, r2
 800e218:	f280 81e4 	bge.w	800e5e4 <st_sssa8_fully_connected+0x580>
 800e21c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e21e:	4657      	mov	r7, sl
 800e220:	46d8      	mov	r8, fp
 800e222:	eba2 0209 	sub.w	r2, r2, r9
 800e226:	0892      	lsrs	r2, r2, #2
 800e228:	920c      	str	r2, [sp, #48]	; 0x30
 800e22a:	3201      	adds	r2, #1
 800e22c:	0090      	lsls	r0, r2, #2
 800e22e:	920b      	str	r2, [sp, #44]	; 0x2c
 800e230:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 800e234:	900a      	str	r0, [sp, #40]	; 0x28
 800e236:	f856 eb04 	ldr.w	lr, [r6], #4
 800e23a:	f858 0b04 	ldr.w	r0, [r8], #4
 800e23e:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	ea4f 2530 	mov.w	r5, r0, ror #8
 800e248:	fa2f fc8c 	sxtb16	ip, ip
 800e24c:	fa2f fe8e 	sxtb16	lr, lr
 800e250:	fa2f f585 	sxtb16	r5, r5
 800e254:	fa2f f080 	sxtb16	r0, r0
 800e258:	fb22 110e 	smlad	r1, r2, lr, r1
 800e25c:	fb22 3300 	smlad	r3, r2, r0, r3
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	3708      	adds	r7, #8
 800e264:	fb22 110c 	smlad	r1, r2, ip, r1
 800e268:	fb22 3305 	smlad	r3, r2, r5, r3
 800e26c:	42a6      	cmp	r6, r4
 800e26e:	d1e2      	bne.n	800e236 <st_sssa8_fully_connected+0x1d2>
 800e270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e272:	f109 0904 	add.w	r9, r9, #4
 800e276:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800e27a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e27c:	4493      	add	fp, r2
 800e27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e280:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800e284:	9d03      	ldr	r5, [sp, #12]
 800e286:	454d      	cmp	r5, r9
 800e288:	dd37      	ble.n	800e2fa <st_sssa8_fully_connected+0x296>
 800e28a:	f9ba 2000 	ldrsh.w	r2, [sl]
 800e28e:	f994 0000 	ldrsb.w	r0, [r4]
 800e292:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e296:	f99b 0000 	ldrsb.w	r0, [fp]
 800e29a:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e29e:	f109 0201 	add.w	r2, r9, #1
 800e2a2:	42aa      	cmp	r2, r5
 800e2a4:	da25      	bge.n	800e2f2 <st_sssa8_fully_connected+0x28e>
 800e2a6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800e2aa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e2ae:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e2b2:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800e2b6:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e2ba:	f109 0202 	add.w	r2, r9, #2
 800e2be:	42aa      	cmp	r2, r5
 800e2c0:	da17      	bge.n	800e2f2 <st_sssa8_fully_connected+0x28e>
 800e2c2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800e2c6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e2ca:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e2ce:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800e2d2:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e2d6:	f109 0203 	add.w	r2, r9, #3
 800e2da:	4295      	cmp	r5, r2
 800e2dc:	dd09      	ble.n	800e2f2 <st_sssa8_fully_connected+0x28e>
 800e2de:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800e2e2:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800e2e6:	fb12 3300 	smlabb	r3, r2, r0, r3
 800e2ea:	f994 0003 	ldrsb.w	r0, [r4, #3]
 800e2ee:	fb12 1100 	smlabb	r1, r2, r0, r1
 800e2f2:	9a03      	ldr	r2, [sp, #12]
 800e2f4:	eba2 0909 	sub.w	r9, r2, r9
 800e2f8:	444c      	add	r4, r9
 800e2fa:	9a04      	ldr	r2, [sp, #16]
 800e2fc:	2a15      	cmp	r2, #21
 800e2fe:	f340 8141 	ble.w	800e584 <st_sssa8_fully_connected+0x520>
 800e302:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e304:	9a07      	ldr	r2, [sp, #28]
 800e306:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e308:	fb51 0102 	smmla	r1, r1, r2, r0
 800e30c:	fb53 0302 	smmla	r3, r3, r2, r0
 800e310:	4129      	asrs	r1, r5
 800e312:	9a08      	ldr	r2, [sp, #32]
 800e314:	4411      	add	r1, r2
 800e316:	f301 0107 	ssat	r1, #8, r1
 800e31a:	9806      	ldr	r0, [sp, #24]
 800e31c:	412b      	asrs	r3, r5
 800e31e:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e322:	4413      	add	r3, r2
 800e324:	f303 0307 	ssat	r3, #8, r3
 800e328:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e32c:	9a03      	ldr	r2, [sp, #12]
 800e32e:	9b05      	ldr	r3, [sp, #20]
 800e330:	18a5      	adds	r5, r4, r2
 800e332:	9a06      	ldr	r2, [sp, #24]
 800e334:	3308      	adds	r3, #8
 800e336:	3202      	adds	r2, #2
 800e338:	9305      	str	r3, [sp, #20]
 800e33a:	9206      	str	r2, [sp, #24]
 800e33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e33e:	4293      	cmp	r3, r2
 800e340:	f47f aee8 	bne.w	800e114 <st_sssa8_fully_connected+0xb0>
 800e344:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e348:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e34c:	9225      	str	r2, [sp, #148]	; 0x94
 800e34e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e354:	9324      	str	r3, [sp, #144]	; 0x90
 800e356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e358:	07db      	lsls	r3, r3, #31
 800e35a:	d54a      	bpl.n	800e3f2 <st_sssa8_fully_connected+0x38e>
 800e35c:	9a03      	ldr	r2, [sp, #12]
 800e35e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e360:	0897      	lsrs	r7, r2, #2
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f000 8176 	beq.w	800e654 <st_sssa8_fully_connected+0x5f0>
 800e368:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 800e36c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e36e:	f855 2b04 	ldr.w	r2, [r5], #4
 800e372:	6801      	ldr	r1, [r0, #0]
 800e374:	fa2f f482 	sxtb16	r4, r2
 800e378:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e37c:	fa2f f282 	sxtb16	r2, r2
 800e380:	fb21 3304 	smlad	r3, r1, r4, r3
 800e384:	6841      	ldr	r1, [r0, #4]
 800e386:	3008      	adds	r0, #8
 800e388:	fb21 3302 	smlad	r3, r1, r2, r3
 800e38c:	42b5      	cmp	r5, r6
 800e38e:	d1ee      	bne.n	800e36e <st_sssa8_fully_connected+0x30a>
 800e390:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e392:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800e396:	9226      	str	r2, [sp, #152]	; 0x98
 800e398:	9a03      	ldr	r2, [sp, #12]
 800e39a:	f012 0203 	ands.w	r2, r2, #3
 800e39e:	d016      	beq.n	800e3ce <st_sssa8_fully_connected+0x36a>
 800e3a0:	3a01      	subs	r2, #1
 800e3a2:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e3a4:	f996 1000 	ldrsb.w	r1, [r6]
 800e3a8:	8800      	ldrh	r0, [r0, #0]
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e3b0:	b16a      	cbz	r2, 800e3ce <st_sssa8_fully_connected+0x36a>
 800e3b2:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e3b4:	2a01      	cmp	r2, #1
 800e3b6:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800e3ba:	8840      	ldrh	r0, [r0, #2]
 800e3bc:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e3c0:	d005      	beq.n	800e3ce <st_sssa8_fully_connected+0x36a>
 800e3c2:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e3c4:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800e3c8:	8889      	ldrh	r1, [r1, #4]
 800e3ca:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e3ce:	9a04      	ldr	r2, [sp, #16]
 800e3d0:	2a15      	cmp	r2, #21
 800e3d2:	f340 811d 	ble.w	800e610 <st_sssa8_fully_connected+0x5ac>
 800e3d6:	1e91      	subs	r1, r2, #2
 800e3d8:	2201      	movs	r2, #1
 800e3da:	408a      	lsls	r2, r1
 800e3dc:	9907      	ldr	r1, [sp, #28]
 800e3de:	fb53 2301 	smmla	r3, r3, r1, r2
 800e3e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3e4:	4113      	asrs	r3, r2
 800e3e6:	9a08      	ldr	r2, [sp, #32]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f303 0307 	ssat	r3, #8, r3
 800e3ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3f0:	7013      	strb	r3, [r2, #0]
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	b017      	add	sp, #92	; 0x5c
 800e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f47f ae52 	bne.w	800e0a8 <st_sssa8_fully_connected+0x44>
 800e404:	4273      	negs	r3, r6
 800e406:	b298      	uxth	r0, r3
 800e408:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800e40c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0ef      	beq.n	800e3f2 <st_sssa8_fully_connected+0x38e>
 800e412:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e414:	3301      	adds	r3, #1
 800e416:	9903      	ldr	r1, [sp, #12]
 800e418:	b236      	sxth	r6, r6
 800e41a:	18d3      	adds	r3, r2, r3
 800e41c:	9c04      	ldr	r4, [sp, #16]
 800e41e:	f1a1 0810 	sub.w	r8, r1, #16
 800e422:	f102 0e01 	add.w	lr, r2, #1
 800e426:	9305      	str	r3, [sp, #20]
 800e428:	2201      	movs	r2, #1
 800e42a:	f028 080f 	bic.w	r8, r8, #15
 800e42e:	1ea3      	subs	r3, r4, #2
 800e430:	468c      	mov	ip, r1
 800e432:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800e436:	fa02 f303 	lsl.w	r3, r2, r3
 800e43a:	f108 0810 	add.w	r8, r8, #16
 800e43e:	f1bc 0f0f 	cmp.w	ip, #15
 800e442:	f8cd b00c 	str.w	fp, [sp, #12]
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	eb0b 0308 	add.w	r3, fp, r8
 800e44c:	9306      	str	r3, [sp, #24]
 800e44e:	eba2 0304 	sub.w	r3, r2, r4
 800e452:	930a      	str	r3, [sp, #40]	; 0x28
 800e454:	f859 3b04 	ldr.w	r3, [r9], #4
 800e458:	dd7e      	ble.n	800e558 <st_sssa8_fully_connected+0x4f4>
 800e45a:	eb05 0708 	add.w	r7, r5, r8
 800e45e:	462a      	mov	r2, r5
 800e460:	9d03      	ldr	r5, [sp, #12]
 800e462:	6811      	ldr	r1, [r2, #0]
 800e464:	682c      	ldr	r4, [r5, #0]
 800e466:	fa2f fb81 	sxtb16	fp, r1
 800e46a:	ea4f 2a34 	mov.w	sl, r4, ror #8
 800e46e:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e472:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e476:	fa2f f181 	sxtb16	r1, r1
 800e47a:	fa20 f484 	sxtab16	r4, r0, r4
 800e47e:	fb24 340b 	smlad	r4, r4, fp, r3
 800e482:	fb2a 4b01 	smlad	fp, sl, r1, r4
 800e486:	6851      	ldr	r1, [r2, #4]
 800e488:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800e48c:	fa2f f481 	sxtb16	r4, r1
 800e490:	ea4f 233a 	mov.w	r3, sl, ror #8
 800e494:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e498:	fa20 f383 	sxtab16	r3, r0, r3
 800e49c:	fa2f f181 	sxtb16	r1, r1
 800e4a0:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e4a4:	fb2a ba04 	smlad	sl, sl, r4, fp
 800e4a8:	fb23 a401 	smlad	r4, r3, r1, sl
 800e4ac:	6891      	ldr	r1, [r2, #8]
 800e4ae:	68ab      	ldr	r3, [r5, #8]
 800e4b0:	fa2f fb81 	sxtb16	fp, r1
 800e4b4:	ea4f 2a33 	mov.w	sl, r3, ror #8
 800e4b8:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e4bc:	fa20 fa8a 	sxtab16	sl, r0, sl
 800e4c0:	fa2f f181 	sxtb16	r1, r1
 800e4c4:	fa20 f383 	sxtab16	r3, r0, r3
 800e4c8:	fb23 430b 	smlad	r3, r3, fp, r4
 800e4cc:	fb2a 3301 	smlad	r3, sl, r1, r3
 800e4d0:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 800e4d4:	3510      	adds	r5, #16
 800e4d6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800e4da:	3210      	adds	r2, #16
 800e4dc:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 800e4e0:	ea4f 2431 	mov.w	r4, r1, ror #8
 800e4e4:	fa2f fa8a 	sxtb16	sl, sl
 800e4e8:	fa2f fb8b 	sxtb16	fp, fp
 800e4ec:	fa20 f181 	sxtab16	r1, r0, r1
 800e4f0:	fa20 f484 	sxtab16	r4, r0, r4
 800e4f4:	fb21 330a 	smlad	r3, r1, sl, r3
 800e4f8:	fb24 330b 	smlad	r3, r4, fp, r3
 800e4fc:	4297      	cmp	r7, r2
 800e4fe:	d1b0      	bne.n	800e462 <st_sssa8_fully_connected+0x3fe>
 800e500:	4645      	mov	r5, r8
 800e502:	9f06      	ldr	r7, [sp, #24]
 800e504:	45ac      	cmp	ip, r5
 800e506:	dd2c      	ble.n	800e562 <st_sssa8_fully_connected+0x4fe>
 800e508:	ebac 0505 	sub.w	r5, ip, r5
 800e50c:	4415      	add	r5, r2
 800e50e:	4611      	mov	r1, r2
 800e510:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800e514:	3201      	adds	r2, #1
 800e516:	7809      	ldrb	r1, [r1, #0]
 800e518:	1ba4      	subs	r4, r4, r6
 800e51a:	42aa      	cmp	r2, r5
 800e51c:	b249      	sxtb	r1, r1
 800e51e:	fb14 3301 	smlabb	r3, r4, r1, r3
 800e522:	d1f4      	bne.n	800e50e <st_sssa8_fully_connected+0x4aa>
 800e524:	9a04      	ldr	r2, [sp, #16]
 800e526:	2a15      	cmp	r2, #21
 800e528:	dd1f      	ble.n	800e56a <st_sssa8_fully_connected+0x506>
 800e52a:	9a07      	ldr	r2, [sp, #28]
 800e52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e52e:	fb53 1302 	smmla	r3, r3, r2, r1
 800e532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e534:	4113      	asrs	r3, r2
 800e536:	9a08      	ldr	r2, [sp, #32]
 800e538:	4413      	add	r3, r2
 800e53a:	f303 0307 	ssat	r3, #8, r3
 800e53e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e542:	f10e 0e01 	add.w	lr, lr, #1
 800e546:	9b05      	ldr	r3, [sp, #20]
 800e548:	459e      	cmp	lr, r3
 800e54a:	f43f af52 	beq.w	800e3f2 <st_sssa8_fully_connected+0x38e>
 800e54e:	f1bc 0f0f 	cmp.w	ip, #15
 800e552:	f859 3b04 	ldr.w	r3, [r9], #4
 800e556:	dc80      	bgt.n	800e45a <st_sssa8_fully_connected+0x3f6>
 800e558:	462a      	mov	r2, r5
 800e55a:	2500      	movs	r5, #0
 800e55c:	9f03      	ldr	r7, [sp, #12]
 800e55e:	45ac      	cmp	ip, r5
 800e560:	dcd2      	bgt.n	800e508 <st_sssa8_fully_connected+0x4a4>
 800e562:	4615      	mov	r5, r2
 800e564:	9a04      	ldr	r2, [sp, #16]
 800e566:	2a15      	cmp	r2, #21
 800e568:	dcdf      	bgt.n	800e52a <st_sssa8_fully_connected+0x4c6>
 800e56a:	2a00      	cmp	r2, #0
 800e56c:	dd42      	ble.n	800e5f4 <st_sssa8_fully_connected+0x590>
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 800e574:	fb53 4301 	smmla	r3, r3, r1, r4
 800e578:	4113      	asrs	r3, r2
 800e57a:	f303 0307 	ssat	r3, #8, r3
 800e57e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e582:	e7de      	b.n	800e542 <st_sssa8_fully_connected+0x4de>
 800e584:	2a00      	cmp	r2, #0
 800e586:	dd13      	ble.n	800e5b0 <st_sssa8_fully_connected+0x54c>
 800e588:	0049      	lsls	r1, r1, #1
 800e58a:	005b      	lsls	r3, r3, #1
 800e58c:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800e590:	fb51 5100 	smmla	r1, r1, r0, r5
 800e594:	fb53 5300 	smmla	r3, r3, r0, r5
 800e598:	4111      	asrs	r1, r2
 800e59a:	f301 0107 	ssat	r1, #8, r1
 800e59e:	9806      	ldr	r0, [sp, #24]
 800e5a0:	4113      	asrs	r3, r2
 800e5a2:	f800 1c02 	strb.w	r1, [r0, #-2]
 800e5a6:	f303 0307 	ssat	r3, #8, r3
 800e5aa:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e5ae:	e6bd      	b.n	800e32c <st_sssa8_fully_connected+0x2c8>
 800e5b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e5b2:	fa01 f200 	lsl.w	r2, r1, r0
 800e5b6:	f302 021f 	ssat	r2, #32, r2
 800e5ba:	9907      	ldr	r1, [sp, #28]
 800e5bc:	fb52 f211 	smmulr	r2, r2, r1
 800e5c0:	4083      	lsls	r3, r0
 800e5c2:	f303 031f 	ssat	r3, #32, r3
 800e5c6:	fb53 f311 	smmulr	r3, r3, r1
 800e5ca:	9908      	ldr	r1, [sp, #32]
 800e5cc:	440a      	add	r2, r1
 800e5ce:	f302 0207 	ssat	r2, #8, r2
 800e5d2:	9806      	ldr	r0, [sp, #24]
 800e5d4:	440b      	add	r3, r1
 800e5d6:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e5da:	f303 0307 	ssat	r3, #8, r3
 800e5de:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e5e2:	e6a3      	b.n	800e32c <st_sssa8_fully_connected+0x2c8>
 800e5e4:	4634      	mov	r4, r6
 800e5e6:	e64d      	b.n	800e284 <st_sssa8_fully_connected+0x220>
 800e5e8:	462e      	mov	r6, r5
 800e5ea:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e5ee:	f04f 0900 	mov.w	r9, #0
 800e5f2:	e60f      	b.n	800e214 <st_sssa8_fully_connected+0x1b0>
 800e5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5f6:	4093      	lsls	r3, r2
 800e5f8:	f303 031f 	ssat	r3, #32, r3
 800e5fc:	9a07      	ldr	r2, [sp, #28]
 800e5fe:	fb53 f312 	smmulr	r3, r3, r2
 800e602:	9a08      	ldr	r2, [sp, #32]
 800e604:	4413      	add	r3, r2
 800e606:	f303 0307 	ssat	r3, #8, r3
 800e60a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800e60e:	e798      	b.n	800e542 <st_sssa8_fully_connected+0x4de>
 800e610:	2a00      	cmp	r2, #0
 800e612:	dd0d      	ble.n	800e630 <st_sssa8_fully_connected+0x5cc>
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800e61a:	fb53 0301 	smmla	r3, r3, r1, r0
 800e61e:	4113      	asrs	r3, r2
 800e620:	f303 0307 	ssat	r3, #8, r3
 800e624:	2000      	movs	r0, #0
 800e626:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e628:	7013      	strb	r3, [r2, #0]
 800e62a:	b017      	add	sp, #92	; 0x5c
 800e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	f1c2 0201 	rsb	r2, r2, #1
 800e634:	4093      	lsls	r3, r2
 800e636:	f303 031f 	ssat	r3, #32, r3
 800e63a:	9a07      	ldr	r2, [sp, #28]
 800e63c:	fb53 f312 	smmulr	r3, r3, r2
 800e640:	9a08      	ldr	r2, [sp, #32]
 800e642:	441a      	add	r2, r3
 800e644:	f302 0307 	ssat	r3, #8, r2
 800e648:	2000      	movs	r0, #0
 800e64a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e64c:	7013      	strb	r3, [r2, #0]
 800e64e:	b017      	add	sp, #92	; 0x5c
 800e650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e654:	462e      	mov	r6, r5
 800e656:	e69f      	b.n	800e398 <st_sssa8_fully_connected+0x334>

0800e658 <ai_padding_opt_init>:
 800e658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e65c:	2700      	movs	r7, #0
 800e65e:	9c07      	ldr	r4, [sp, #28]
 800e660:	e9c0 7700 	strd	r7, r7, [r0]
 800e664:	6087      	str	r7, [r0, #8]
 800e666:	46b9      	mov	r9, r7
 800e668:	690d      	ldr	r5, [r1, #16]
 800e66a:	f1c5 0c00 	rsb	ip, r5, #0
 800e66e:	689d      	ldr	r5, [r3, #8]
 800e670:	42bd      	cmp	r5, r7
 800e672:	dd1c      	ble.n	800e6ae <ai_padding_opt_init+0x56>
 800e674:	463e      	mov	r6, r7
 800e676:	46be      	mov	lr, r7
 800e678:	e010      	b.n	800e69c <ai_padding_opt_init+0x44>
 800e67a:	6895      	ldr	r5, [r2, #8]
 800e67c:	eba5 080c 	sub.w	r8, r5, ip
 800e680:	68a5      	ldr	r5, [r4, #8]
 800e682:	45a8      	cmp	r8, r5
 800e684:	da10      	bge.n	800e6a8 <ai_padding_opt_init+0x50>
 800e686:	f109 0901 	add.w	r9, r9, #1
 800e68a:	f8c0 9008 	str.w	r9, [r0, #8]
 800e68e:	688d      	ldr	r5, [r1, #8]
 800e690:	f10e 0e01 	add.w	lr, lr, #1
 800e694:	44ac      	add	ip, r5
 800e696:	689d      	ldr	r5, [r3, #8]
 800e698:	4575      	cmp	r5, lr
 800e69a:	dd09      	ble.n	800e6b0 <ai_padding_opt_init+0x58>
 800e69c:	f1bc 0f00 	cmp.w	ip, #0
 800e6a0:	daeb      	bge.n	800e67a <ai_padding_opt_init+0x22>
 800e6a2:	3601      	adds	r6, #1
 800e6a4:	6006      	str	r6, [r0, #0]
 800e6a6:	e7f2      	b.n	800e68e <ai_padding_opt_init+0x36>
 800e6a8:	3701      	adds	r7, #1
 800e6aa:	6047      	str	r7, [r0, #4]
 800e6ac:	e7ef      	b.n	800e68e <ai_padding_opt_init+0x36>
 800e6ae:	463e      	mov	r6, r7
 800e6b0:	2500      	movs	r5, #0
 800e6b2:	f8c0 9014 	str.w	r9, [r0, #20]
 800e6b6:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800e6ba:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800e6be:	6205      	str	r5, [r0, #32]
 800e6c0:	694e      	ldr	r6, [r1, #20]
 800e6c2:	f1c6 0c00 	rsb	ip, r6, #0
 800e6c6:	685e      	ldr	r6, [r3, #4]
 800e6c8:	42ae      	cmp	r6, r5
 800e6ca:	dd1c      	ble.n	800e706 <ai_padding_opt_init+0xae>
 800e6cc:	46ae      	mov	lr, r5
 800e6ce:	e00f      	b.n	800e6f0 <ai_padding_opt_init+0x98>
 800e6d0:	6855      	ldr	r5, [r2, #4]
 800e6d2:	6866      	ldr	r6, [r4, #4]
 800e6d4:	eba5 050c 	sub.w	r5, r5, ip
 800e6d8:	42b5      	cmp	r5, r6
 800e6da:	da10      	bge.n	800e6fe <ai_padding_opt_init+0xa6>
 800e6dc:	6a05      	ldr	r5, [r0, #32]
 800e6de:	3501      	adds	r5, #1
 800e6e0:	6205      	str	r5, [r0, #32]
 800e6e2:	68cd      	ldr	r5, [r1, #12]
 800e6e4:	f10e 0e01 	add.w	lr, lr, #1
 800e6e8:	44ac      	add	ip, r5
 800e6ea:	685d      	ldr	r5, [r3, #4]
 800e6ec:	4575      	cmp	r5, lr
 800e6ee:	dd0a      	ble.n	800e706 <ai_padding_opt_init+0xae>
 800e6f0:	f1bc 0f00 	cmp.w	ip, #0
 800e6f4:	daec      	bge.n	800e6d0 <ai_padding_opt_init+0x78>
 800e6f6:	6985      	ldr	r5, [r0, #24]
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	6185      	str	r5, [r0, #24]
 800e6fc:	e7f1      	b.n	800e6e2 <ai_padding_opt_init+0x8a>
 800e6fe:	69c5      	ldr	r5, [r0, #28]
 800e700:	3501      	adds	r5, #1
 800e702:	61c5      	str	r5, [r0, #28]
 800e704:	e7ed      	b.n	800e6e2 <ai_padding_opt_init+0x8a>
 800e706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e70a:	bf00      	nop

0800e70c <ai_padding_opt_phase1>:
 800e70c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800e710:	b923      	cbnz	r3, 800e71c <ai_padding_opt_phase1+0x10>
 800e712:	b17a      	cbz	r2, 800e734 <ai_padding_opt_phase1+0x28>
 800e714:	3a01      	subs	r2, #1
 800e716:	8483      	strh	r3, [r0, #36]	; 0x24
 800e718:	61c2      	str	r2, [r0, #28]
 800e71a:	e004      	b.n	800e726 <ai_padding_opt_phase1+0x1a>
 800e71c:	b152      	cbz	r2, 800e734 <ai_padding_opt_phase1+0x28>
 800e71e:	2201      	movs	r2, #1
 800e720:	3b01      	subs	r3, #1
 800e722:	8482      	strh	r2, [r0, #36]	; 0x24
 800e724:	6183      	str	r3, [r0, #24]
 800e726:	68c3      	ldr	r3, [r0, #12]
 800e728:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800e72c:	6003      	str	r3, [r0, #0]
 800e72e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e732:	4770      	bx	lr
 800e734:	6a03      	ldr	r3, [r0, #32]
 800e736:	2201      	movs	r2, #1
 800e738:	3b01      	subs	r3, #1
 800e73a:	8482      	strh	r2, [r0, #36]	; 0x24
 800e73c:	6203      	str	r3, [r0, #32]
 800e73e:	e7f2      	b.n	800e726 <ai_padding_opt_phase1+0x1a>

0800e740 <st_sssa8_ch_nn_mat_mult_kernel>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	b09d      	sub	sp, #116	; 0x74
 800e746:	085e      	lsrs	r6, r3, #1
 800e748:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800e74a:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800e74e:	441d      	add	r5, r3
 800e750:	931a      	str	r3, [sp, #104]	; 0x68
 800e752:	9111      	str	r1, [sp, #68]	; 0x44
 800e754:	9219      	str	r2, [sp, #100]	; 0x64
 800e756:	940b      	str	r4, [sp, #44]	; 0x2c
 800e758:	9518      	str	r5, [sp, #96]	; 0x60
 800e75a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e75c:	f000 8276 	beq.w	800ec4c <st_sssa8_ch_nn_mat_mult_kernel+0x50c>
 800e760:	eb01 0744 	add.w	r7, r1, r4, lsl #1
 800e764:	4696      	mov	lr, r2
 800e766:	1e72      	subs	r2, r6, #1
 800e768:	460e      	mov	r6, r1
 800e76a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e76c:	f1a4 0310 	sub.w	r3, r4, #16
 800e770:	b292      	uxth	r2, r2
 800e772:	f8df 8768 	ldr.w	r8, [pc, #1896]	; 800eedc <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800e776:	3108      	adds	r1, #8
 800e778:	091b      	lsrs	r3, r3, #4
 800e77a:	4684      	mov	ip, r0
 800e77c:	9714      	str	r7, [sp, #80]	; 0x50
 800e77e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e782:	4672      	mov	r2, lr
 800e784:	3301      	adds	r3, #1
 800e786:	3208      	adds	r2, #8
 800e788:	9113      	str	r1, [sp, #76]	; 0x4c
 800e78a:	4621      	mov	r1, r4
 800e78c:	3c03      	subs	r4, #3
 800e78e:	920c      	str	r2, [sp, #48]	; 0x30
 800e790:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e792:	9412      	str	r4, [sp, #72]	; 0x48
 800e794:	3204      	adds	r2, #4
 800e796:	9206      	str	r2, [sp, #24]
 800e798:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e79a:	3204      	adds	r2, #4
 800e79c:	9207      	str	r2, [sp, #28]
 800e79e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e7a0:	3204      	adds	r2, #4
 800e7a2:	9208      	str	r2, [sp, #32]
 800e7a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e7a6:	3201      	adds	r2, #1
 800e7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800e7aa:	1c6a      	adds	r2, r5, #1
 800e7ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e7ae:	011a      	lsls	r2, r3, #4
 800e7b0:	920d      	str	r2, [sp, #52]	; 0x34
 800e7b2:	eb06 1243 	add.w	r2, r6, r3, lsl #5
 800e7b6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800e7ba:	9216      	str	r2, [sp, #88]	; 0x58
 800e7bc:	9315      	str	r3, [sp, #84]	; 0x54
 800e7be:	1f0b      	subs	r3, r1, #4
 800e7c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e7c6:	eb0c 0003 	add.w	r0, ip, r3
 800e7ca:	2b0f      	cmp	r3, #15
 800e7cc:	e951 2b02 	ldrd	r2, fp, [r1, #-8]
 800e7d0:	9002      	str	r0, [sp, #8]
 800e7d2:	f340 8337 	ble.w	800ee44 <st_sssa8_ch_nn_mat_mult_kernel+0x704>
 800e7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7d8:	4659      	mov	r1, fp
 800e7da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e7dc:	4463      	add	r3, ip
 800e7de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e7e0:	9000      	str	r0, [sp, #0]
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	f8dc 7000 	ldr.w	r7, [ip]
 800e7ea:	9800      	ldr	r0, [sp, #0]
 800e7ec:	fa2f fa87 	sxtb16	sl, r7
 800e7f0:	f8d0 e000 	ldr.w	lr, [r0]
 800e7f4:	ea4f 2737 	mov.w	r7, r7, ror #8
 800e7f8:	fa2f f787 	sxtb16	r7, r7
 800e7fc:	ea07 0008 	and.w	r0, r7, r8
 800e800:	fa1f f98a 	uxth.w	r9, sl
 800e804:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800e808:	ea4f 2a3e 	mov.w	sl, lr, ror #8
 800e80c:	fa2f fe8e 	sxtb16	lr, lr
 800e810:	fa1f f48e 	uxth.w	r4, lr
 800e814:	fa2f fa8a 	sxtb16	sl, sl
 800e818:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e81c:	ea0a 0a08 	and.w	sl, sl, r8
 800e820:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800e824:	6837      	ldr	r7, [r6, #0]
 800e826:	ea4a 4a1e 	orr.w	sl, sl, lr, lsr #16
 800e82a:	f8d5 e000 	ldr.w	lr, [r5]
 800e82e:	fb29 220e 	smlad	r2, r9, lr, r2
 800e832:	fb29 3307 	smlad	r3, r9, r7, r3
 800e836:	fb24 bb0e 	smlad	fp, r4, lr, fp
 800e83a:	fb24 1707 	smlad	r7, r4, r7, r1
 800e83e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800e842:	6874      	ldr	r4, [r6, #4]
 800e844:	fb20 220e 	smlad	r2, r0, lr, r2
 800e848:	fb20 3304 	smlad	r3, r0, r4, r3
 800e84c:	fb2a be0e 	smlad	lr, sl, lr, fp
 800e850:	fb2a 7704 	smlad	r7, sl, r4, r7
 800e854:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e858:	9800      	ldr	r0, [sp, #0]
 800e85a:	fa2f fa81 	sxtb16	sl, r1
 800e85e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e862:	fa1f f48a 	uxth.w	r4, sl
 800e866:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e86a:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800e86e:	fa2f f181 	sxtb16	r1, r1
 800e872:	ea01 0008 	and.w	r0, r1, r8
 800e876:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800e87a:	ea4f 2139 	mov.w	r1, r9, ror #8
 800e87e:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
 800e882:	fa2f f989 	sxtb16	r9, r9
 800e886:	fa1f fa89 	uxth.w	sl, r9
 800e88a:	fa2f f181 	sxtb16	r1, r1
 800e88e:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800e892:	ea01 0108 	and.w	r1, r1, r8
 800e896:	ea41 4119 	orr.w	r1, r1, r9, lsr #16
 800e89a:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800e89e:	fb24 220b 	smlad	r2, r4, fp, r2
 800e8a2:	fb24 3409 	smlad	r4, r4, r9, r3
 800e8a6:	fb2a eb0b 	smlad	fp, sl, fp, lr
 800e8aa:	fb2a 7a09 	smlad	sl, sl, r9, r7
 800e8ae:	68eb      	ldr	r3, [r5, #12]
 800e8b0:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800e8b4:	fb20 2203 	smlad	r2, r0, r3, r2
 800e8b8:	fb20 400e 	smlad	r0, r0, lr, r4
 800e8bc:	fb21 bb03 	smlad	fp, r1, r3, fp
 800e8c0:	fb21 aa0e 	smlad	sl, r1, lr, sl
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e8ca:	689f      	ldr	r7, [r3, #8]
 800e8cc:	fa2f f381 	sxtb16	r3, r1
 800e8d0:	b29c      	uxth	r4, r3
 800e8d2:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e8d6:	fa2f f181 	sxtb16	r1, r1
 800e8da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800e8de:	ea01 0108 	and.w	r1, r1, r8
 800e8e2:	fa2f fe87 	sxtb16	lr, r7
 800e8e6:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800e8ea:	fa1f f98e 	uxth.w	r9, lr
 800e8ee:	ea4f 2337 	mov.w	r3, r7, ror #8
 800e8f2:	fa2f f383 	sxtb16	r3, r3
 800e8f6:	ea03 0708 	and.w	r7, r3, r8
 800e8fa:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
 800e8fe:	692b      	ldr	r3, [r5, #16]
 800e900:	ea47 471e 	orr.w	r7, r7, lr, lsr #16
 800e904:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800e908:	fb24 2203 	smlad	r2, r4, r3, r2
 800e90c:	fb24 000e 	smlad	r0, r4, lr, r0
 800e910:	fb29 b303 	smlad	r3, r9, r3, fp
 800e914:	fb29 aa0e 	smlad	sl, r9, lr, sl
 800e918:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800e91c:	6974      	ldr	r4, [r6, #20]
 800e91e:	fb21 220e 	smlad	r2, r1, lr, r2
 800e922:	fb21 0004 	smlad	r0, r1, r4, r0
 800e926:	fb27 330e 	smlad	r3, r7, lr, r3
 800e92a:	fb27 a704 	smlad	r7, r7, r4, sl
 800e92e:	9900      	ldr	r1, [sp, #0]
 800e930:	f10c 0c10 	add.w	ip, ip, #16
 800e934:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800e938:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800e93c:	3110      	adds	r1, #16
 800e93e:	fa2f fe84 	sxtb16	lr, r4
 800e942:	9100      	str	r1, [sp, #0]
 800e944:	fa1f f18e 	uxth.w	r1, lr
 800e948:	ea4f 2434 	mov.w	r4, r4, ror #8
 800e94c:	f8d5 a018 	ldr.w	sl, [r5, #24]
 800e950:	fa2f f484 	sxtb16	r4, r4
 800e954:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e958:	ea04 0408 	and.w	r4, r4, r8
 800e95c:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800e960:	ea4f 2e39 	mov.w	lr, r9, ror #8
 800e964:	fa2f f989 	sxtb16	r9, r9
 800e968:	fa1f fb89 	uxth.w	fp, r9
 800e96c:	fa2f fe8e 	sxtb16	lr, lr
 800e970:	ea4b 4b0e 	orr.w	fp, fp, lr, lsl #16
 800e974:	ea0e 0e08 	and.w	lr, lr, r8
 800e978:	ea4e 4e19 	orr.w	lr, lr, r9, lsr #16
 800e97c:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800e980:	fb21 220a 	smlad	r2, r1, sl, r2
 800e984:	fb21 0009 	smlad	r0, r1, r9, r0
 800e988:	fb2b 3a0a 	smlad	sl, fp, sl, r3
 800e98c:	fb2b 7909 	smlad	r9, fp, r9, r7
 800e990:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800e994:	3620      	adds	r6, #32
 800e996:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800e99a:	3520      	adds	r5, #32
 800e99c:	fb24 220b 	smlad	r2, r4, fp, r2
 800e9a0:	fb24 0307 	smlad	r3, r4, r7, r0
 800e9a4:	fb2e ab0b 	smlad	fp, lr, fp, sl
 800e9a8:	fb2e 9107 	smlad	r1, lr, r7, r9
 800e9ac:	9801      	ldr	r0, [sp, #4]
 800e9ae:	4584      	cmp	ip, r0
 800e9b0:	f47f af19 	bne.w	800e7e6 <st_sssa8_ch_nn_mat_mult_kernel+0xa6>
 800e9b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e9b6:	9802      	ldr	r0, [sp, #8]
 800e9b8:	9405      	str	r4, [sp, #20]
 800e9ba:	4420      	add	r0, r4
 800e9bc:	9002      	str	r0, [sp, #8]
 800e9be:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e9c0:	9004      	str	r0, [sp, #16]
 800e9c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e9c4:	9003      	str	r0, [sp, #12]
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800e9ca:	42a0      	cmp	r0, r4
 800e9cc:	da63      	bge.n	800ea96 <st_sssa8_ch_nn_mat_mult_kernel+0x356>
 800e9ce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e9d0:	9f01      	ldr	r7, [sp, #4]
 800e9d2:	1a20      	subs	r0, r4, r0
 800e9d4:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e9d8:	0880      	lsrs	r0, r0, #2
 800e9da:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9dc:	3001      	adds	r0, #1
 800e9de:	e9dd ce03 	ldrd	ip, lr, [sp, #12]
 800e9e2:	0084      	lsls	r4, r0, #2
 800e9e4:	900e      	str	r0, [sp, #56]	; 0x38
 800e9e6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800e9ea:	9410      	str	r4, [sp, #64]	; 0x40
 800e9ec:	e9cd a000 	strd	sl, r0, [sp]
 800e9f0:	9c00      	ldr	r4, [sp, #0]
 800e9f2:	f857 0b04 	ldr.w	r0, [r7], #4
 800e9f6:	f854 9b04 	ldr.w	r9, [r4], #4
 800e9fa:	f8dc a000 	ldr.w	sl, [ip]
 800e9fe:	9400      	str	r4, [sp, #0]
 800ea00:	fa2f f480 	sxtb16	r4, r0
 800ea04:	b2a6      	uxth	r6, r4
 800ea06:	ea4f 2030 	mov.w	r0, r0, ror #8
 800ea0a:	fa2f f080 	sxtb16	r0, r0
 800ea0e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800ea12:	ea00 0008 	and.w	r0, r0, r8
 800ea16:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800ea1a:	ea4f 2439 	mov.w	r4, r9, ror #8
 800ea1e:	fa2f f989 	sxtb16	r9, r9
 800ea22:	fa1f f589 	uxth.w	r5, r9
 800ea26:	fa2f f484 	sxtb16	r4, r4
 800ea2a:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800ea2e:	ea04 0408 	and.w	r4, r4, r8
 800ea32:	ea44 4419 	orr.w	r4, r4, r9, lsr #16
 800ea36:	f8de 9000 	ldr.w	r9, [lr]
 800ea3a:	fb26 220a 	smlad	r2, r6, sl, r2
 800ea3e:	fb26 3309 	smlad	r3, r6, r9, r3
 800ea42:	fb25 bb0a 	smlad	fp, r5, sl, fp
 800ea46:	fb25 1109 	smlad	r1, r5, r9, r1
 800ea4a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800ea4e:	f10e 0e08 	add.w	lr, lr, #8
 800ea52:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 800ea56:	f10c 0c08 	add.w	ip, ip, #8
 800ea5a:	fb20 2205 	smlad	r2, r0, r5, r2
 800ea5e:	fb20 3306 	smlad	r3, r0, r6, r3
 800ea62:	fb24 bb05 	smlad	fp, r4, r5, fp
 800ea66:	fb24 1106 	smlad	r1, r4, r6, r1
 800ea6a:	9801      	ldr	r0, [sp, #4]
 800ea6c:	4287      	cmp	r7, r0
 800ea6e:	d1bf      	bne.n	800e9f0 <st_sssa8_ch_nn_mat_mult_kernel+0x2b0>
 800ea70:	9802      	ldr	r0, [sp, #8]
 800ea72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ea74:	4420      	add	r0, r4
 800ea76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ea78:	9002      	str	r0, [sp, #8]
 800ea7a:	9805      	ldr	r0, [sp, #20]
 800ea7c:	3004      	adds	r0, #4
 800ea7e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ea82:	9c04      	ldr	r4, [sp, #16]
 800ea84:	9005      	str	r0, [sp, #20]
 800ea86:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ea88:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800ea8c:	9404      	str	r4, [sp, #16]
 800ea8e:	9c03      	ldr	r4, [sp, #12]
 800ea90:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ea94:	9003      	str	r0, [sp, #12]
 800ea96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ea98:	9f05      	ldr	r7, [sp, #20]
 800ea9a:	42be      	cmp	r6, r7
 800ea9c:	dd5e      	ble.n	800eb5c <st_sssa8_ch_nn_mat_mult_kernel+0x41c>
 800ea9e:	9801      	ldr	r0, [sp, #4]
 800eaa0:	9c03      	ldr	r4, [sp, #12]
 800eaa2:	f990 5000 	ldrsb.w	r5, [r0]
 800eaa6:	9802      	ldr	r0, [sp, #8]
 800eaa8:	f9b4 4000 	ldrsh.w	r4, [r4]
 800eaac:	f990 0000 	ldrsb.w	r0, [r0]
 800eab0:	fb14 2205 	smlabb	r2, r4, r5, r2
 800eab4:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800eab8:	9c04      	ldr	r4, [sp, #16]
 800eaba:	f9b4 4000 	ldrsh.w	r4, [r4]
 800eabe:	fb14 1100 	smlabb	r1, r4, r0, r1
 800eac2:	1c78      	adds	r0, r7, #1
 800eac4:	fb14 3305 	smlabb	r3, r4, r5, r3
 800eac8:	4286      	cmp	r6, r0
 800eaca:	dd41      	ble.n	800eb50 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800eacc:	9801      	ldr	r0, [sp, #4]
 800eace:	9c03      	ldr	r4, [sp, #12]
 800ead0:	f990 5001 	ldrsb.w	r5, [r0, #1]
 800ead4:	9802      	ldr	r0, [sp, #8]
 800ead6:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800eada:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800eade:	fb14 2205 	smlabb	r2, r4, r5, r2
 800eae2:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800eae6:	9c04      	ldr	r4, [sp, #16]
 800eae8:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800eaec:	fb14 1100 	smlabb	r1, r4, r0, r1
 800eaf0:	1cb8      	adds	r0, r7, #2
 800eaf2:	fb14 3305 	smlabb	r3, r4, r5, r3
 800eaf6:	4286      	cmp	r6, r0
 800eaf8:	dd2a      	ble.n	800eb50 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800eafa:	9801      	ldr	r0, [sp, #4]
 800eafc:	9c03      	ldr	r4, [sp, #12]
 800eafe:	f990 5002 	ldrsb.w	r5, [r0, #2]
 800eb02:	9802      	ldr	r0, [sp, #8]
 800eb04:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800eb08:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800eb0c:	fb14 2205 	smlabb	r2, r4, r5, r2
 800eb10:	fb14 bb00 	smlabb	fp, r4, r0, fp
 800eb14:	9c04      	ldr	r4, [sp, #16]
 800eb16:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800eb1a:	fb14 1100 	smlabb	r1, r4, r0, r1
 800eb1e:	1cf8      	adds	r0, r7, #3
 800eb20:	fb14 3305 	smlabb	r3, r4, r5, r3
 800eb24:	4286      	cmp	r6, r0
 800eb26:	dd13      	ble.n	800eb50 <st_sssa8_ch_nn_mat_mult_kernel+0x410>
 800eb28:	9d03      	ldr	r5, [sp, #12]
 800eb2a:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 800eb2e:	9d02      	ldr	r5, [sp, #8]
 800eb30:	f995 4003 	ldrsb.w	r4, [r5, #3]
 800eb34:	9d04      	ldr	r5, [sp, #16]
 800eb36:	fb10 bb04 	smlabb	fp, r0, r4, fp
 800eb3a:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800eb3e:	fb15 1104 	smlabb	r1, r5, r4, r1
 800eb42:	9c01      	ldr	r4, [sp, #4]
 800eb44:	f994 4003 	ldrsb.w	r4, [r4, #3]
 800eb48:	fb10 2204 	smlabb	r2, r0, r4, r2
 800eb4c:	fb15 3304 	smlabb	r3, r5, r4, r3
 800eb50:	9c05      	ldr	r4, [sp, #20]
 800eb52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eb54:	1b00      	subs	r0, r0, r4
 800eb56:	9c01      	ldr	r4, [sp, #4]
 800eb58:	4404      	add	r4, r0
 800eb5a:	9401      	str	r4, [sp, #4]
 800eb5c:	9806      	ldr	r0, [sp, #24]
 800eb5e:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800eb62:	2c15      	cmp	r4, #21
 800eb64:	f340 8114 	ble.w	800ed90 <st_sssa8_ch_nn_mat_mult_kernel+0x650>
 800eb68:	1ea5      	subs	r5, r4, #2
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	3c01      	subs	r4, #1
 800eb6e:	fa00 f505 	lsl.w	r5, r0, r5
 800eb72:	9807      	ldr	r0, [sp, #28]
 800eb74:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800eb78:	fb52 5200 	smmla	r2, r2, r0, r5
 800eb7c:	fb53 5000 	smmla	r0, r3, r0, r5
 800eb80:	9b08      	ldr	r3, [sp, #32]
 800eb82:	4122      	asrs	r2, r4
 800eb84:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800eb88:	4432      	add	r2, r6
 800eb8a:	f302 0207 	ssat	r2, #8, r2
 800eb8e:	4120      	asrs	r0, r4
 800eb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb92:	4430      	add	r0, r6
 800eb94:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eb98:	f300 0007 	ssat	r0, #8, r0
 800eb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb9e:	f803 0c01 	strb.w	r0, [r3, #-1]
 800eba2:	9b06      	ldr	r3, [sp, #24]
 800eba4:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800eba8:	2b15      	cmp	r3, #21
 800ebaa:	f340 80d7 	ble.w	800ed5c <st_sssa8_ch_nn_mat_mult_kernel+0x61c>
 800ebae:	1e98      	subs	r0, r3, #2
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	fa02 f000 	lsl.w	r0, r2, r0
 800ebb8:	9a07      	ldr	r2, [sp, #28]
 800ebba:	6814      	ldr	r4, [r2, #0]
 800ebbc:	9a08      	ldr	r2, [sp, #32]
 800ebbe:	fb5b 0904 	smmla	r9, fp, r4, r0
 800ebc2:	6816      	ldr	r6, [r2, #0]
 800ebc4:	fa49 f503 	asr.w	r5, r9, r3
 800ebc8:	fb51 0404 	smmla	r4, r1, r4, r0
 800ebcc:	4435      	add	r5, r6
 800ebce:	f305 0507 	ssat	r5, #8, r5
 800ebd2:	fa44 f303 	asr.w	r3, r4, r3
 800ebd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd8:	4433      	add	r3, r6
 800ebda:	7015      	strb	r5, [r2, #0]
 800ebdc:	f303 0307 	ssat	r3, #8, r3
 800ebe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebe2:	7013      	strb	r3, [r2, #0]
 800ebe4:	9a01      	ldr	r2, [sp, #4]
 800ebe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebe8:	9b06      	ldr	r3, [sp, #24]
 800ebea:	440a      	add	r2, r1
 800ebec:	3304      	adds	r3, #4
 800ebee:	4694      	mov	ip, r2
 800ebf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebf2:	9306      	str	r3, [sp, #24]
 800ebf4:	3208      	adds	r2, #8
 800ebf6:	920c      	str	r2, [sp, #48]	; 0x30
 800ebf8:	9a07      	ldr	r2, [sp, #28]
 800ebfa:	3208      	adds	r2, #8
 800ebfc:	9207      	str	r2, [sp, #28]
 800ebfe:	9a08      	ldr	r2, [sp, #32]
 800ec00:	3208      	adds	r2, #8
 800ec02:	9208      	str	r2, [sp, #32]
 800ec04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec06:	3202      	adds	r2, #2
 800ec08:	9209      	str	r2, [sp, #36]	; 0x24
 800ec0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec0c:	3202      	adds	r2, #2
 800ec0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ec10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec12:	4293      	cmp	r3, r2
 800ec14:	f47f add5 	bne.w	800e7c2 <st_sssa8_ch_nn_mat_mult_kernel+0x82>
 800ec18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec1a:	4660      	mov	r0, ip
 800ec1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ec1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ec22:	9228      	str	r2, [sp, #160]	; 0xa0
 800ec24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ec26:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ec2a:	9229      	str	r2, [sp, #164]	; 0xa4
 800ec2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ec2e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ec32:	922a      	str	r2, [sp, #168]	; 0xa8
 800ec34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec36:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ec3a:	9218      	str	r2, [sp, #96]	; 0x60
 800ec3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec3e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ec42:	9219      	str	r2, [sp, #100]	; 0x64
 800ec44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ec46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec4a:	9327      	str	r3, [sp, #156]	; 0x9c
 800ec4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ec4e:	07db      	lsls	r3, r3, #31
 800ec50:	d57e      	bpl.n	800ed50 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800ec52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ec56:	6819      	ldr	r1, [r3, #0]
 800ec58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec5a:	ea5f 0993 	movs.w	r9, r3, lsr #2
 800ec5e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800ec62:	f000 8138 	beq.w	800eed6 <st_sssa8_ch_nn_mat_mult_kernel+0x796>
 800ec66:	4604      	mov	r4, r0
 800ec68:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 800ec6c:	4646      	mov	r6, r8
 800ec6e:	460a      	mov	r2, r1
 800ec70:	f8df e268 	ldr.w	lr, [pc, #616]	; 800eedc <st_sssa8_ch_nn_mat_mult_kernel+0x79c>
 800ec74:	f854 3b04 	ldr.w	r3, [r4], #4
 800ec78:	fa2f fa83 	sxtb16	sl, r3
 800ec7c:	fa1f f08a 	uxth.w	r0, sl
 800ec80:	682f      	ldr	r7, [r5, #0]
 800ec82:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ec86:	fa2f f383 	sxtb16	r3, r3
 800ec8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800ec8e:	ea03 030e 	and.w	r3, r3, lr
 800ec92:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 800ec96:	fb20 1107 	smlad	r1, r0, r7, r1
 800ec9a:	6837      	ldr	r7, [r6, #0]
 800ec9c:	fb20 2207 	smlad	r2, r0, r7, r2
 800eca0:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800eca4:	3608      	adds	r6, #8
 800eca6:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800ecaa:	3508      	adds	r5, #8
 800ecac:	fb23 110a 	smlad	r1, r3, sl, r1
 800ecb0:	fb23 2200 	smlad	r2, r3, r0, r2
 800ecb4:	4564      	cmp	r4, ip
 800ecb6:	d1dd      	bne.n	800ec74 <st_sssa8_ch_nn_mat_mult_kernel+0x534>
 800ecb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecba:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 800ecbe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ecc2:	9311      	str	r3, [sp, #68]	; 0x44
 800ecc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecc6:	f013 0303 	ands.w	r3, r3, #3
 800ecca:	d020      	beq.n	800ed0e <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800eccc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	f99c 0000 	ldrsb.w	r0, [ip]
 800ecd4:	882c      	ldrh	r4, [r5, #0]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	fb14 1100 	smlabb	r1, r4, r0, r1
 800ecdc:	f8b8 4000 	ldrh.w	r4, [r8]
 800ece0:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ece4:	b19b      	cbz	r3, 800ed0e <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800ece6:	f99c 0001 	ldrsb.w	r0, [ip, #1]
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	886c      	ldrh	r4, [r5, #2]
 800ecee:	fb14 1100 	smlabb	r1, r4, r0, r1
 800ecf2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ecf6:	fb14 2200 	smlabb	r2, r4, r0, r2
 800ecfa:	d008      	beq.n	800ed0e <st_sssa8_ch_nn_mat_mult_kernel+0x5ce>
 800ecfc:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 800ed00:	88a8      	ldrh	r0, [r5, #4]
 800ed02:	fb10 1103 	smlabb	r1, r0, r3, r1
 800ed06:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800ed0a:	fb10 2203 	smlabb	r2, r0, r3, r2
 800ed0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ed10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed14:	2b15      	cmp	r3, #21
 800ed16:	f340 80a0 	ble.w	800ee5a <st_sssa8_ch_nn_mat_mult_kernel+0x71a>
 800ed1a:	1e9e      	subs	r6, r3, #2
 800ed1c:	1e5d      	subs	r5, r3, #1
 800ed1e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800ed20:	2301      	movs	r3, #1
 800ed22:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800ed24:	6800      	ldr	r0, [r0, #0]
 800ed26:	40b3      	lsls	r3, r6
 800ed28:	6824      	ldr	r4, [r4, #0]
 800ed2a:	fb51 3100 	smmla	r1, r1, r0, r3
 800ed2e:	fb52 3300 	smmla	r3, r2, r0, r3
 800ed32:	fa41 f205 	asr.w	r2, r1, r5
 800ed36:	4422      	add	r2, r4
 800ed38:	f302 0207 	ssat	r2, #8, r2
 800ed3c:	412b      	asrs	r3, r5
 800ed3e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ed40:	4423      	add	r3, r4
 800ed42:	f800 2b01 	strb.w	r2, [r0], #1
 800ed46:	f303 0307 	ssat	r3, #8, r3
 800ed4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed4c:	902a      	str	r0, [sp, #168]	; 0xa8
 800ed4e:	7013      	strb	r3, [r2, #0]
 800ed50:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ed52:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ed54:	4418      	add	r0, r3
 800ed56:	b01d      	add	sp, #116	; 0x74
 800ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	dd32      	ble.n	800edc6 <st_sssa8_ch_nn_mat_mult_kernel+0x686>
 800ed60:	004c      	lsls	r4, r1, #1
 800ed62:	9a07      	ldr	r2, [sp, #28]
 800ed64:	9908      	ldr	r1, [sp, #32]
 800ed66:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800ed6a:	6812      	ldr	r2, [r2, #0]
 800ed6c:	6809      	ldr	r1, [r1, #0]
 800ed6e:	fb59 1902 	smmla	r9, r9, r2, r1
 800ed72:	fb54 1102 	smmla	r1, r4, r2, r1
 800ed76:	fa49 f903 	asr.w	r9, r9, r3
 800ed7a:	f309 0907 	ssat	r9, #8, r9
 800ed7e:	4119      	asrs	r1, r3
 800ed80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed82:	f883 9000 	strb.w	r9, [r3]
 800ed86:	f301 0107 	ssat	r1, #8, r1
 800ed8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8c:	7019      	strb	r1, [r3, #0]
 800ed8e:	e729      	b.n	800ebe4 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800ed90:	2c00      	cmp	r4, #0
 800ed92:	dd35      	ble.n	800ee00 <st_sssa8_ch_nn_mat_mult_kernel+0x6c0>
 800ed94:	0058      	lsls	r0, r3, #1
 800ed96:	9d08      	ldr	r5, [sp, #32]
 800ed98:	9b07      	ldr	r3, [sp, #28]
 800ed9a:	0052      	lsls	r2, r2, #1
 800ed9c:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800eda0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eda4:	fb52 5203 	smmla	r2, r2, r3, r5
 800eda8:	fb50 5303 	smmla	r3, r0, r3, r5
 800edac:	4122      	asrs	r2, r4
 800edae:	f302 0207 	ssat	r2, #8, r2
 800edb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edb4:	4123      	asrs	r3, r4
 800edb6:	f800 2c01 	strb.w	r2, [r0, #-1]
 800edba:	f303 0307 	ssat	r3, #8, r3
 800edbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800edc4:	e6ed      	b.n	800eba2 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800edc6:	f1c3 0301 	rsb	r3, r3, #1
 800edca:	fa0b f903 	lsl.w	r9, fp, r3
 800edce:	f309 021f 	ssat	r2, #32, r9
 800edd2:	9807      	ldr	r0, [sp, #28]
 800edd4:	6800      	ldr	r0, [r0, #0]
 800edd6:	fb52 f210 	smmulr	r2, r2, r0
 800edda:	4099      	lsls	r1, r3
 800eddc:	f301 011f 	ssat	r1, #32, r1
 800ede0:	fb51 f110 	smmulr	r1, r1, r0
 800ede4:	9808      	ldr	r0, [sp, #32]
 800ede6:	6803      	ldr	r3, [r0, #0]
 800ede8:	4413      	add	r3, r2
 800edea:	f303 0307 	ssat	r3, #8, r3
 800edee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf0:	7013      	strb	r3, [r2, #0]
 800edf2:	6803      	ldr	r3, [r0, #0]
 800edf4:	440b      	add	r3, r1
 800edf6:	f303 0307 	ssat	r3, #8, r3
 800edfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edfc:	7013      	strb	r3, [r2, #0]
 800edfe:	e6f1      	b.n	800ebe4 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800ee00:	f1c4 0401 	rsb	r4, r4, #1
 800ee04:	40a2      	lsls	r2, r4
 800ee06:	f302 021f 	ssat	r2, #32, r2
 800ee0a:	9807      	ldr	r0, [sp, #28]
 800ee0c:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800ee10:	fb52 f215 	smmulr	r2, r2, r5
 800ee14:	fa03 f004 	lsl.w	r0, r3, r4
 800ee18:	f300 001f 	ssat	r0, #32, r0
 800ee1c:	fb50 f015 	smmulr	r0, r0, r5
 800ee20:	9c08      	ldr	r4, [sp, #32]
 800ee22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ee26:	4413      	add	r3, r2
 800ee28:	f303 0307 	ssat	r3, #8, r3
 800ee2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ee32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ee36:	4403      	add	r3, r0
 800ee38:	f303 0307 	ssat	r3, #8, r3
 800ee3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ee42:	e6ae      	b.n	800eba2 <st_sssa8_ch_nn_mat_mult_kernel+0x462>
 800ee44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee46:	2000      	movs	r0, #0
 800ee48:	4659      	mov	r1, fp
 800ee4a:	f8cd c004 	str.w	ip, [sp, #4]
 800ee4e:	9304      	str	r3, [sp, #16]
 800ee50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee52:	9005      	str	r0, [sp, #20]
 800ee54:	9303      	str	r3, [sp, #12]
 800ee56:	4613      	mov	r3, r2
 800ee58:	e5b6      	b.n	800e9c8 <st_sssa8_ch_nn_mat_mult_kernel+0x288>
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	dd1b      	ble.n	800ee96 <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 800ee5e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800ee60:	0049      	lsls	r1, r1, #1
 800ee62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800ee64:	0052      	lsls	r2, r2, #1
 800ee66:	6800      	ldr	r0, [r0, #0]
 800ee68:	6824      	ldr	r4, [r4, #0]
 800ee6a:	fb51 4100 	smmla	r1, r1, r0, r4
 800ee6e:	fb52 4200 	smmla	r2, r2, r0, r4
 800ee72:	fa41 f303 	asr.w	r3, r1, r3
 800ee76:	f303 0307 	ssat	r3, #8, r3
 800ee7a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ee7c:	f800 3b01 	strb.w	r3, [r0], #1
 800ee80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ee82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee86:	fa42 f303 	asr.w	r3, r2, r3
 800ee8a:	f303 0307 	ssat	r3, #8, r3
 800ee8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee90:	902a      	str	r0, [sp, #168]	; 0xa8
 800ee92:	7013      	strb	r3, [r2, #0]
 800ee94:	e75c      	b.n	800ed50 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800ee96:	f1c3 0001 	rsb	r0, r3, #1
 800ee9a:	fa01 f300 	lsl.w	r3, r1, r0
 800ee9e:	f303 031f 	ssat	r3, #32, r3
 800eea2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800eea4:	6809      	ldr	r1, [r1, #0]
 800eea6:	fb53 f311 	smmulr	r3, r3, r1
 800eeaa:	4082      	lsls	r2, r0
 800eeac:	f302 021f 	ssat	r2, #32, r2
 800eeb0:	fb52 f211 	smmulr	r2, r2, r1
 800eeb4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800eeb6:	6809      	ldr	r1, [r1, #0]
 800eeb8:	440b      	add	r3, r1
 800eeba:	f303 0307 	ssat	r3, #8, r3
 800eebe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800eec0:	f801 3b01 	strb.w	r3, [r1], #1
 800eec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4413      	add	r3, r2
 800eeca:	f303 0307 	ssat	r3, #8, r3
 800eece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eed0:	912a      	str	r1, [sp, #168]	; 0xa8
 800eed2:	7013      	strb	r3, [r2, #0]
 800eed4:	e73c      	b.n	800ed50 <st_sssa8_ch_nn_mat_mult_kernel+0x610>
 800eed6:	4684      	mov	ip, r0
 800eed8:	460a      	mov	r2, r1
 800eeda:	e6f3      	b.n	800ecc4 <st_sssa8_ch_nn_mat_mult_kernel+0x584>
 800eedc:	ffff0000 	.word	0xffff0000

0800eee0 <st_int8_to16_no_shift>:
 800eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee4:	f1b2 0810 	subs.w	r8, r2, #16
 800eee8:	f100 808c 	bmi.w	800f004 <st_int8_to16_no_shift+0x124>
 800eeec:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800eef0:	4603      	mov	r3, r0
 800eef2:	4c45      	ldr	r4, [pc, #276]	; (800f008 <st_int8_to16_no_shift+0x128>)
 800eef4:	f108 0801 	add.w	r8, r8, #1
 800eef8:	eb01 1748 	add.w	r7, r1, r8, lsl #5
 800eefc:	f8d3 e000 	ldr.w	lr, [r3]
 800ef00:	3310      	adds	r3, #16
 800ef02:	fa2f f69e 	sxtb16	r6, lr, ror #8
 800ef06:	fa2f fe8e 	sxtb16	lr, lr
 800ef0a:	ea06 0504 	and.w	r5, r6, r4
 800ef0e:	fa1f f98e 	uxth.w	r9, lr
 800ef12:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800ef16:	3120      	adds	r1, #32
 800ef18:	fa2f fa9c 	sxtb16	sl, ip, ror #8
 800ef1c:	ea49 4906 	orr.w	r9, r9, r6, lsl #16
 800ef20:	ea45 4e1e 	orr.w	lr, r5, lr, lsr #16
 800ef24:	ea0a 0504 	and.w	r5, sl, r4
 800ef28:	fa2f fc8c 	sxtb16	ip, ip
 800ef2c:	fa1f f68c 	uxth.w	r6, ip
 800ef30:	f841 9c20 	str.w	r9, [r1, #-32]
 800ef34:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 800ef38:	f841 ec1c 	str.w	lr, [r1, #-28]
 800ef3c:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 800ef40:	f841 cc14 	str.w	ip, [r1, #-20]
 800ef44:	f841 6c18 	str.w	r6, [r1, #-24]
 800ef48:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800ef4c:	f853 cc04 	ldr.w	ip, [r3, #-4]
 800ef50:	fa2f f59e 	sxtb16	r5, lr, ror #8
 800ef54:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800ef58:	ea05 0b04 	and.w	fp, r5, r4
 800ef5c:	fa2f fe8e 	sxtb16	lr, lr
 800ef60:	fa2f fc8c 	sxtb16	ip, ip
 800ef64:	fa1f f98e 	uxth.w	r9, lr
 800ef68:	fa1f fa8c 	uxth.w	sl, ip
 800ef6c:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
 800ef70:	ea06 0504 	and.w	r5, r6, r4
 800ef74:	ea4b 4e1e 	orr.w	lr, fp, lr, lsr #16
 800ef78:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 800ef7c:	f841 9c10 	str.w	r9, [r1, #-16]
 800ef80:	f841 ec0c 	str.w	lr, [r1, #-12]
 800ef84:	ea45 4c1c 	orr.w	ip, r5, ip, lsr #16
 800ef88:	f841 6c08 	str.w	r6, [r1, #-8]
 800ef8c:	428f      	cmp	r7, r1
 800ef8e:	f841 cc04 	str.w	ip, [r1, #-4]
 800ef92:	d1b3      	bne.n	800eefc <st_int8_to16_no_shift+0x1c>
 800ef94:	ea4f 1708 	mov.w	r7, r8, lsl #4
 800ef98:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800ef9c:	f1a2 0804 	sub.w	r8, r2, #4
 800efa0:	45b8      	cmp	r8, r7
 800efa2:	db23      	blt.n	800efec <st_int8_to16_no_shift+0x10c>
 800efa4:	eba8 0807 	sub.w	r8, r8, r7
 800efa8:	4686      	mov	lr, r0
 800efaa:	4e17      	ldr	r6, [pc, #92]	; (800f008 <st_int8_to16_no_shift+0x128>)
 800efac:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800efb0:	f108 0901 	add.w	r9, r8, #1
 800efb4:	eb01 05c9 	add.w	r5, r1, r9, lsl #3
 800efb8:	f85e 3b04 	ldr.w	r3, [lr], #4
 800efbc:	3108      	adds	r1, #8
 800efbe:	fa2f fa93 	sxtb16	sl, r3, ror #8
 800efc2:	fa2f f383 	sxtb16	r3, r3
 800efc6:	ea0a 0406 	and.w	r4, sl, r6
 800efca:	fa1f fc83 	uxth.w	ip, r3
 800efce:	428d      	cmp	r5, r1
 800efd0:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 800efd4:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 800efd8:	f841 cc08 	str.w	ip, [r1, #-8]
 800efdc:	f841 3c04 	str.w	r3, [r1, #-4]
 800efe0:	d1ea      	bne.n	800efb8 <st_int8_to16_no_shift+0xd8>
 800efe2:	3704      	adds	r7, #4
 800efe4:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800efe8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800efec:	42ba      	cmp	r2, r7
 800efee:	dd07      	ble.n	800f000 <st_int8_to16_no_shift+0x120>
 800eff0:	1bd2      	subs	r2, r2, r7
 800eff2:	4402      	add	r2, r0
 800eff4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800eff8:	4290      	cmp	r0, r2
 800effa:	f821 3b02 	strh.w	r3, [r1], #2
 800effe:	d1f9      	bne.n	800eff4 <st_int8_to16_no_shift+0x114>
 800f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f004:	2700      	movs	r7, #0
 800f006:	e7c9      	b.n	800ef9c <st_int8_to16_no_shift+0xbc>
 800f008:	ffff0000 	.word	0xffff0000

0800f00c <st_int8_to16_no_shift_interleaved>:
 800f00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00e:	f1b2 0510 	subs.w	r5, r2, #16
 800f012:	d449      	bmi.n	800f0a8 <st_int8_to16_no_shift_interleaved+0x9c>
 800f014:	092d      	lsrs	r5, r5, #4
 800f016:	4603      	mov	r3, r0
 800f018:	3501      	adds	r5, #1
 800f01a:	eb01 1445 	add.w	r4, r1, r5, lsl #5
 800f01e:	f8d3 e000 	ldr.w	lr, [r3]
 800f022:	3120      	adds	r1, #32
 800f024:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800f028:	3310      	adds	r3, #16
 800f02a:	fa2f f69e 	sxtb16	r6, lr, ror #8
 800f02e:	fa2f fe8e 	sxtb16	lr, lr
 800f032:	f841 6c20 	str.w	r6, [r1, #-32]
 800f036:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800f03a:	fa2f fc8c 	sxtb16	ip, ip
 800f03e:	f841 6c18 	str.w	r6, [r1, #-24]
 800f042:	f841 ec1c 	str.w	lr, [r1, #-28]
 800f046:	f841 cc14 	str.w	ip, [r1, #-20]
 800f04a:	428c      	cmp	r4, r1
 800f04c:	f853 ec08 	ldr.w	lr, [r3, #-8]
 800f050:	f853 cc04 	ldr.w	ip, [r3, #-4]
 800f054:	fa2f f79e 	sxtb16	r7, lr, ror #8
 800f058:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800f05c:	fa2f fe8e 	sxtb16	lr, lr
 800f060:	fa2f fc8c 	sxtb16	ip, ip
 800f064:	f841 7c10 	str.w	r7, [r1, #-16]
 800f068:	f841 ec0c 	str.w	lr, [r1, #-12]
 800f06c:	f841 6c08 	str.w	r6, [r1, #-8]
 800f070:	f841 cc04 	str.w	ip, [r1, #-4]
 800f074:	d1d3      	bne.n	800f01e <st_int8_to16_no_shift_interleaved+0x12>
 800f076:	012b      	lsls	r3, r5, #4
 800f078:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800f07c:	3a04      	subs	r2, #4
 800f07e:	429a      	cmp	r2, r3
 800f080:	db11      	blt.n	800f0a6 <st_int8_to16_no_shift_interleaved+0x9a>
 800f082:	1ad2      	subs	r2, r2, r3
 800f084:	0892      	lsrs	r2, r2, #2
 800f086:	3201      	adds	r2, #1
 800f088:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f08c:	3108      	adds	r1, #8
 800f08e:	f850 3b04 	ldr.w	r3, [r0], #4
 800f092:	fa2f fc93 	sxtb16	ip, r3, ror #8
 800f096:	428a      	cmp	r2, r1
 800f098:	f841 cc08 	str.w	ip, [r1, #-8]
 800f09c:	fa2f f383 	sxtb16	r3, r3
 800f0a0:	f841 3c04 	str.w	r3, [r1, #-4]
 800f0a4:	d1f2      	bne.n	800f08c <st_int8_to16_no_shift_interleaved+0x80>
 800f0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e7e7      	b.n	800f07c <st_int8_to16_no_shift_interleaved+0x70>

0800f0ac <st_int8_to16_dual>:
 800f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	b08b      	sub	sp, #44	; 0x2c
 800f0b2:	4692      	mov	sl, r2
 800f0b4:	468b      	mov	fp, r1
 800f0b6:	eb00 0902 	add.w	r9, r0, r2
 800f0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f0bc:	085b      	lsrs	r3, r3, #1
 800f0be:	9302      	str	r3, [sp, #8]
 800f0c0:	f000 810d 	beq.w	800f2de <st_int8_to16_dual+0x232>
 800f0c4:	3a10      	subs	r2, #16
 800f0c6:	f1aa 0304 	sub.w	r3, sl, #4
 800f0ca:	f8cd a004 	str.w	sl, [sp, #4]
 800f0ce:	9207      	str	r2, [sp, #28]
 800f0d0:	0912      	lsrs	r2, r2, #4
 800f0d2:	9306      	str	r3, [sp, #24]
 800f0d4:	3201      	adds	r2, #1
 800f0d6:	4ba4      	ldr	r3, [pc, #656]	; (800f368 <st_int8_to16_dual+0x2bc>)
 800f0d8:	0111      	lsls	r1, r2, #4
 800f0da:	0192      	lsls	r2, r2, #6
 800f0dc:	9103      	str	r1, [sp, #12]
 800f0de:	9208      	str	r2, [sp, #32]
 800f0e0:	9a07      	ldr	r2, [sp, #28]
 800f0e2:	2a00      	cmp	r2, #0
 800f0e4:	f2c0 8131 	blt.w	800f34a <st_int8_to16_dual+0x29e>
 800f0e8:	9a03      	ldr	r2, [sp, #12]
 800f0ea:	464d      	mov	r5, r9
 800f0ec:	1886      	adds	r6, r0, r2
 800f0ee:	465a      	mov	r2, fp
 800f0f0:	f8d0 c000 	ldr.w	ip, [r0]
 800f0f4:	3010      	adds	r0, #16
 800f0f6:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800f0fa:	fa2f fc8c 	sxtb16	ip, ip
 800f0fe:	fa1f fe8c 	uxth.w	lr, ip
 800f102:	682f      	ldr	r7, [r5, #0]
 800f104:	fa2f f197 	sxtb16	r1, r7, ror #8
 800f108:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800f10c:	401c      	ands	r4, r3
 800f10e:	fa2f f787 	sxtb16	r7, r7
 800f112:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800f116:	f8c2 e000 	str.w	lr, [r2]
 800f11a:	3510      	adds	r5, #16
 800f11c:	3240      	adds	r2, #64	; 0x40
 800f11e:	f842 4c38 	str.w	r4, [r2, #-56]
 800f122:	b2bc      	uxth	r4, r7
 800f124:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f128:	4019      	ands	r1, r3
 800f12a:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800f12e:	f842 4c3c 	str.w	r4, [r2, #-60]
 800f132:	f842 1c34 	str.w	r1, [r2, #-52]
 800f136:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800f13a:	4286      	cmp	r6, r0
 800f13c:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800f140:	fa2f fc8c 	sxtb16	ip, ip
 800f144:	fa1f fe8c 	uxth.w	lr, ip
 800f148:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 800f14c:	fa2f f197 	sxtb16	r1, r7, ror #8
 800f150:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800f154:	ea04 0403 	and.w	r4, r4, r3
 800f158:	fa2f f787 	sxtb16	r7, r7
 800f15c:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800f160:	f842 ec30 	str.w	lr, [r2, #-48]
 800f164:	f842 4c28 	str.w	r4, [r2, #-40]
 800f168:	b2bc      	uxth	r4, r7
 800f16a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f16e:	ea01 0103 	and.w	r1, r1, r3
 800f172:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800f176:	f842 4c2c 	str.w	r4, [r2, #-44]
 800f17a:	f842 1c24 	str.w	r1, [r2, #-36]
 800f17e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800f182:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800f186:	fa2f fc8c 	sxtb16	ip, ip
 800f18a:	fa1f fe8c 	uxth.w	lr, ip
 800f18e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800f192:	fa2f f197 	sxtb16	r1, r7, ror #8
 800f196:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800f19a:	ea04 0403 	and.w	r4, r4, r3
 800f19e:	fa2f f787 	sxtb16	r7, r7
 800f1a2:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800f1a6:	f842 ec20 	str.w	lr, [r2, #-32]
 800f1aa:	f842 4c18 	str.w	r4, [r2, #-24]
 800f1ae:	b2bc      	uxth	r4, r7
 800f1b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f1b4:	ea01 0103 	and.w	r1, r1, r3
 800f1b8:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800f1bc:	f842 4c1c 	str.w	r4, [r2, #-28]
 800f1c0:	f842 1c14 	str.w	r1, [r2, #-20]
 800f1c4:	f850 cc04 	ldr.w	ip, [r0, #-4]
 800f1c8:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800f1cc:	fa2f fc8c 	sxtb16	ip, ip
 800f1d0:	fa1f fe8c 	uxth.w	lr, ip
 800f1d4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800f1d8:	fa2f f197 	sxtb16	r1, r7, ror #8
 800f1dc:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800f1e0:	ea04 0403 	and.w	r4, r4, r3
 800f1e4:	fa2f f787 	sxtb16	r7, r7
 800f1e8:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 800f1ec:	f842 ec10 	str.w	lr, [r2, #-16]
 800f1f0:	f842 4c08 	str.w	r4, [r2, #-8]
 800f1f4:	b2bc      	uxth	r4, r7
 800f1f6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800f1fa:	ea01 0103 	and.w	r1, r1, r3
 800f1fe:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 800f202:	f842 4c0c 	str.w	r4, [r2, #-12]
 800f206:	f842 1c04 	str.w	r1, [r2, #-4]
 800f20a:	f47f af71 	bne.w	800f0f0 <st_int8_to16_dual+0x44>
 800f20e:	9a08      	ldr	r2, [sp, #32]
 800f210:	4493      	add	fp, r2
 800f212:	9a03      	ldr	r2, [sp, #12]
 800f214:	4690      	mov	r8, r2
 800f216:	4491      	add	r9, r2
 800f218:	9a06      	ldr	r2, [sp, #24]
 800f21a:	4542      	cmp	r2, r8
 800f21c:	f2c0 809b 	blt.w	800f356 <st_int8_to16_dual+0x2aa>
 800f220:	eba2 0a08 	sub.w	sl, r2, r8
 800f224:	46ce      	mov	lr, r9
 800f226:	465c      	mov	r4, fp
 800f228:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800f22c:	f102 0a01 	add.w	sl, r2, #1
 800f230:	9204      	str	r2, [sp, #16]
 800f232:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 800f236:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800f23a:	9205      	str	r2, [sp, #20]
 800f23c:	f850 6b04 	ldr.w	r6, [r0], #4
 800f240:	3410      	adds	r4, #16
 800f242:	fa2f f196 	sxtb16	r1, r6, ror #8
 800f246:	fa2f f686 	sxtb16	r6, r6
 800f24a:	fa1f fc86 	uxth.w	ip, r6
 800f24e:	f85e 5b04 	ldr.w	r5, [lr], #4
 800f252:	fa2f f295 	sxtb16	r2, r5, ror #8
 800f256:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 800f25a:	4019      	ands	r1, r3
 800f25c:	fa2f f585 	sxtb16	r5, r5
 800f260:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 800f264:	42b8      	cmp	r0, r7
 800f266:	f844 cc10 	str.w	ip, [r4, #-16]
 800f26a:	f844 1c08 	str.w	r1, [r4, #-8]
 800f26e:	b2a9      	uxth	r1, r5
 800f270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f274:	ea02 0203 	and.w	r2, r2, r3
 800f278:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 800f27c:	f844 1c0c 	str.w	r1, [r4, #-12]
 800f280:	f844 2c04 	str.w	r2, [r4, #-4]
 800f284:	d1da      	bne.n	800f23c <st_int8_to16_dual+0x190>
 800f286:	9a05      	ldr	r2, [sp, #20]
 800f288:	f108 0804 	add.w	r8, r8, #4
 800f28c:	eb0b 1b0a 	add.w	fp, fp, sl, lsl #4
 800f290:	4491      	add	r9, r2
 800f292:	9a04      	ldr	r2, [sp, #16]
 800f294:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800f298:	9a01      	ldr	r2, [sp, #4]
 800f29a:	4542      	cmp	r2, r8
 800f29c:	dd5f      	ble.n	800f35e <st_int8_to16_dual+0x2b2>
 800f29e:	eba2 0808 	sub.w	r8, r2, r8
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	f10b 0204 	add.w	r2, fp, #4
 800f2a8:	eb07 0008 	add.w	r0, r7, r8
 800f2ac:	f917 4b01 	ldrsb.w	r4, [r7], #1
 800f2b0:	3204      	adds	r2, #4
 800f2b2:	f822 4c08 	strh.w	r4, [r2, #-8]
 800f2b6:	4287      	cmp	r7, r0
 800f2b8:	f911 4b01 	ldrsb.w	r4, [r1], #1
 800f2bc:	f822 4c06 	strh.w	r4, [r2, #-6]
 800f2c0:	d1f4      	bne.n	800f2ac <st_int8_to16_dual+0x200>
 800f2c2:	44c1      	add	r9, r8
 800f2c4:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 800f2c8:	9a02      	ldr	r2, [sp, #8]
 800f2ca:	9901      	ldr	r1, [sp, #4]
 800f2cc:	3a01      	subs	r2, #1
 800f2ce:	4408      	add	r0, r1
 800f2d0:	4489      	add	r9, r1
 800f2d2:	b292      	uxth	r2, r2
 800f2d4:	9202      	str	r2, [sp, #8]
 800f2d6:	2a00      	cmp	r2, #0
 800f2d8:	f47f af02 	bne.w	800f0e0 <st_int8_to16_dual+0x34>
 800f2dc:	468a      	mov	sl, r1
 800f2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e0:	07db      	lsls	r3, r3, #31
 800f2e2:	d52f      	bpl.n	800f344 <st_int8_to16_dual+0x298>
 800f2e4:	f1ba 0c04 	subs.w	ip, sl, #4
 800f2e8:	d43b      	bmi.n	800f362 <st_int8_to16_dual+0x2b6>
 800f2ea:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	4e1d      	ldr	r6, [pc, #116]	; (800f368 <st_int8_to16_dual+0x2bc>)
 800f2f2:	f10c 0c01 	add.w	ip, ip, #1
 800f2f6:	eb0b 07cc 	add.w	r7, fp, ip, lsl #3
 800f2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2fe:	f10b 0b08 	add.w	fp, fp, #8
 800f302:	fa2f f493 	sxtb16	r4, r3, ror #8
 800f306:	fa2f f383 	sxtb16	r3, r3
 800f30a:	ea04 0106 	and.w	r1, r4, r6
 800f30e:	b29a      	uxth	r2, r3
 800f310:	455f      	cmp	r7, fp
 800f312:	ea41 4313 	orr.w	r3, r1, r3, lsr #16
 800f316:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f31a:	f84b 3c04 	str.w	r3, [fp, #-4]
 800f31e:	f84b 2c08 	str.w	r2, [fp, #-8]
 800f322:	d1ea      	bne.n	800f2fa <st_int8_to16_dual+0x24e>
 800f324:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800f328:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800f32c:	459a      	cmp	sl, r3
 800f32e:	dd09      	ble.n	800f344 <st_int8_to16_dual+0x298>
 800f330:	ebaa 0303 	sub.w	r3, sl, r3
 800f334:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800f338:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800f33c:	f82b 2b02 	strh.w	r2, [fp], #2
 800f340:	459b      	cmp	fp, r3
 800f342:	d1f9      	bne.n	800f338 <st_int8_to16_dual+0x28c>
 800f344:	b00b      	add	sp, #44	; 0x2c
 800f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34a:	f04f 0800 	mov.w	r8, #0
 800f34e:	9a06      	ldr	r2, [sp, #24]
 800f350:	4542      	cmp	r2, r8
 800f352:	f6bf af65 	bge.w	800f220 <st_int8_to16_dual+0x174>
 800f356:	9a01      	ldr	r2, [sp, #4]
 800f358:	4607      	mov	r7, r0
 800f35a:	4542      	cmp	r2, r8
 800f35c:	dc9f      	bgt.n	800f29e <st_int8_to16_dual+0x1f2>
 800f35e:	4638      	mov	r0, r7
 800f360:	e7b2      	b.n	800f2c8 <st_int8_to16_dual+0x21c>
 800f362:	2300      	movs	r3, #0
 800f364:	e7e2      	b.n	800f32c <st_int8_to16_dual+0x280>
 800f366:	bf00      	nop
 800f368:	ffff0000 	.word	0xffff0000

0800f36c <st_int8_to16_dual_interleaved>:
 800f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f370:	ea5f 0b53 	movs.w	fp, r3, lsr #1
 800f374:	b087      	sub	sp, #28
 800f376:	eb00 0802 	add.w	r8, r0, r2
 800f37a:	9305      	str	r3, [sp, #20]
 800f37c:	f000 80ba 	beq.w	800f4f4 <st_int8_to16_dual_interleaved+0x188>
 800f380:	f1a2 0310 	sub.w	r3, r2, #16
 800f384:	1f14      	subs	r4, r2, #4
 800f386:	9303      	str	r3, [sp, #12]
 800f388:	091b      	lsrs	r3, r3, #4
 800f38a:	9402      	str	r4, [sp, #8]
 800f38c:	3301      	adds	r3, #1
 800f38e:	011c      	lsls	r4, r3, #4
 800f390:	019b      	lsls	r3, r3, #6
 800f392:	9400      	str	r4, [sp, #0]
 800f394:	9304      	str	r3, [sp, #16]
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f2c0 80d3 	blt.w	800f544 <st_int8_to16_dual_interleaved+0x1d8>
 800f39e:	9b00      	ldr	r3, [sp, #0]
 800f3a0:	4644      	mov	r4, r8
 800f3a2:	18c7      	adds	r7, r0, r3
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	6806      	ldr	r6, [r0, #0]
 800f3a8:	3010      	adds	r0, #16
 800f3aa:	6825      	ldr	r5, [r4, #0]
 800f3ac:	3340      	adds	r3, #64	; 0x40
 800f3ae:	3410      	adds	r4, #16
 800f3b0:	4287      	cmp	r7, r0
 800f3b2:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800f3b6:	fa2f f686 	sxtb16	r6, r6
 800f3ba:	f843 6c38 	str.w	r6, [r3, #-56]
 800f3be:	fa2f f695 	sxtb16	r6, r5, ror #8
 800f3c2:	f843 cc40 	str.w	ip, [r3, #-64]
 800f3c6:	f843 6c3c 	str.w	r6, [r3, #-60]
 800f3ca:	fa2f f585 	sxtb16	r5, r5
 800f3ce:	f843 5c34 	str.w	r5, [r3, #-52]
 800f3d2:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 800f3d6:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800f3da:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800f3de:	fa2f f686 	sxtb16	r6, r6
 800f3e2:	f843 cc30 	str.w	ip, [r3, #-48]
 800f3e6:	f843 6c28 	str.w	r6, [r3, #-40]
 800f3ea:	fa2f f695 	sxtb16	r6, r5, ror #8
 800f3ee:	fa2f f585 	sxtb16	r5, r5
 800f3f2:	f843 6c2c 	str.w	r6, [r3, #-44]
 800f3f6:	f843 5c24 	str.w	r5, [r3, #-36]
 800f3fa:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800f3fe:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800f402:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800f406:	fa2f f686 	sxtb16	r6, r6
 800f40a:	f843 cc20 	str.w	ip, [r3, #-32]
 800f40e:	f843 6c18 	str.w	r6, [r3, #-24]
 800f412:	fa2f f695 	sxtb16	r6, r5, ror #8
 800f416:	fa2f f585 	sxtb16	r5, r5
 800f41a:	f843 6c1c 	str.w	r6, [r3, #-28]
 800f41e:	f843 5c14 	str.w	r5, [r3, #-20]
 800f422:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800f426:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f42a:	fa2f fc96 	sxtb16	ip, r6, ror #8
 800f42e:	fa2f f686 	sxtb16	r6, r6
 800f432:	f843 cc10 	str.w	ip, [r3, #-16]
 800f436:	f843 6c08 	str.w	r6, [r3, #-8]
 800f43a:	fa2f f695 	sxtb16	r6, r5, ror #8
 800f43e:	fa2f f585 	sxtb16	r5, r5
 800f442:	f843 6c0c 	str.w	r6, [r3, #-12]
 800f446:	f843 5c04 	str.w	r5, [r3, #-4]
 800f44a:	d1ac      	bne.n	800f3a6 <st_int8_to16_dual_interleaved+0x3a>
 800f44c:	9b04      	ldr	r3, [sp, #16]
 800f44e:	4419      	add	r1, r3
 800f450:	9b00      	ldr	r3, [sp, #0]
 800f452:	469e      	mov	lr, r3
 800f454:	4498      	add	r8, r3
 800f456:	9b02      	ldr	r3, [sp, #8]
 800f458:	4573      	cmp	r3, lr
 800f45a:	db78      	blt.n	800f54e <st_int8_to16_dual_interleaved+0x1e2>
 800f45c:	eba3 090e 	sub.w	r9, r3, lr
 800f460:	4647      	mov	r7, r8
 800f462:	460b      	mov	r3, r1
 800f464:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800f468:	f109 0a01 	add.w	sl, r9, #1
 800f46c:	ea4f 048a 	mov.w	r4, sl, lsl #2
 800f470:	eb00 068a 	add.w	r6, r0, sl, lsl #2
 800f474:	9401      	str	r4, [sp, #4]
 800f476:	f850 5b04 	ldr.w	r5, [r0], #4
 800f47a:	3310      	adds	r3, #16
 800f47c:	f857 4b04 	ldr.w	r4, [r7], #4
 800f480:	fa2f fc95 	sxtb16	ip, r5, ror #8
 800f484:	42b0      	cmp	r0, r6
 800f486:	f843 cc10 	str.w	ip, [r3, #-16]
 800f48a:	fa2f f585 	sxtb16	r5, r5
 800f48e:	f843 5c08 	str.w	r5, [r3, #-8]
 800f492:	fa2f f594 	sxtb16	r5, r4, ror #8
 800f496:	fa2f f484 	sxtb16	r4, r4
 800f49a:	f843 5c0c 	str.w	r5, [r3, #-12]
 800f49e:	f843 4c04 	str.w	r4, [r3, #-4]
 800f4a2:	d1e8      	bne.n	800f476 <st_int8_to16_dual_interleaved+0x10a>
 800f4a4:	f10e 0e04 	add.w	lr, lr, #4
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	eb01 110a 	add.w	r1, r1, sl, lsl #4
 800f4ae:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800f4b2:	4498      	add	r8, r3
 800f4b4:	4572      	cmp	r2, lr
 800f4b6:	dd4d      	ble.n	800f554 <st_int8_to16_dual_interleaved+0x1e8>
 800f4b8:	eba2 0e0e 	sub.w	lr, r2, lr
 800f4bc:	1d0b      	adds	r3, r1, #4
 800f4be:	4644      	mov	r4, r8
 800f4c0:	eb06 000e 	add.w	r0, r6, lr
 800f4c4:	f916 5b01 	ldrsb.w	r5, [r6], #1
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	f823 5c08 	strh.w	r5, [r3, #-8]
 800f4ce:	4286      	cmp	r6, r0
 800f4d0:	f914 5b01 	ldrsb.w	r5, [r4], #1
 800f4d4:	f823 5c06 	strh.w	r5, [r3, #-6]
 800f4d8:	d1f4      	bne.n	800f4c4 <st_int8_to16_dual_interleaved+0x158>
 800f4da:	44f0      	add	r8, lr
 800f4dc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800f4e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f4e4:	4410      	add	r0, r2
 800f4e6:	4490      	add	r8, r2
 800f4e8:	fa1f fb83 	uxth.w	fp, r3
 800f4ec:	f1bb 0f00 	cmp.w	fp, #0
 800f4f0:	f47f af51 	bne.w	800f396 <st_int8_to16_dual_interleaved+0x2a>
 800f4f4:	9b05      	ldr	r3, [sp, #20]
 800f4f6:	07db      	lsls	r3, r3, #31
 800f4f8:	d521      	bpl.n	800f53e <st_int8_to16_dual_interleaved+0x1d2>
 800f4fa:	1f17      	subs	r7, r2, #4
 800f4fc:	d42c      	bmi.n	800f558 <st_int8_to16_dual_interleaved+0x1ec>
 800f4fe:	08bf      	lsrs	r7, r7, #2
 800f500:	4604      	mov	r4, r0
 800f502:	3701      	adds	r7, #1
 800f504:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 800f508:	3108      	adds	r1, #8
 800f50a:	f854 3b04 	ldr.w	r3, [r4], #4
 800f50e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800f512:	428e      	cmp	r6, r1
 800f514:	f841 5c08 	str.w	r5, [r1, #-8]
 800f518:	fa2f f383 	sxtb16	r3, r3
 800f51c:	f841 3c04 	str.w	r3, [r1, #-4]
 800f520:	d1f2      	bne.n	800f508 <st_int8_to16_dual_interleaved+0x19c>
 800f522:	00bb      	lsls	r3, r7, #2
 800f524:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800f528:	429a      	cmp	r2, r3
 800f52a:	dd08      	ble.n	800f53e <st_int8_to16_dual_interleaved+0x1d2>
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f532:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800f536:	f821 2b02 	strh.w	r2, [r1], #2
 800f53a:	4299      	cmp	r1, r3
 800f53c:	d1f9      	bne.n	800f532 <st_int8_to16_dual_interleaved+0x1c6>
 800f53e:	b007      	add	sp, #28
 800f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f544:	f04f 0e00 	mov.w	lr, #0
 800f548:	9b02      	ldr	r3, [sp, #8]
 800f54a:	4573      	cmp	r3, lr
 800f54c:	da86      	bge.n	800f45c <st_int8_to16_dual_interleaved+0xf0>
 800f54e:	4572      	cmp	r2, lr
 800f550:	4606      	mov	r6, r0
 800f552:	dcb1      	bgt.n	800f4b8 <st_int8_to16_dual_interleaved+0x14c>
 800f554:	4630      	mov	r0, r6
 800f556:	e7c3      	b.n	800f4e0 <st_int8_to16_dual_interleaved+0x174>
 800f558:	2300      	movs	r3, #0
 800f55a:	e7e5      	b.n	800f528 <st_int8_to16_dual_interleaved+0x1bc>

0800f55c <weights_2channels_prefetch>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	2b00      	cmp	r3, #0
 800f562:	b087      	sub	sp, #28
 800f564:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f568:	9302      	str	r3, [sp, #8]
 800f56a:	f340 80e6 	ble.w	800f73a <weights_2channels_prefetch+0x1de>
 800f56e:	f1a8 0310 	sub.w	r3, r8, #16
 800f572:	f1a8 0403 	sub.w	r4, r8, #3
 800f576:	f04f 0b00 	mov.w	fp, #0
 800f57a:	091b      	lsrs	r3, r3, #4
 800f57c:	9403      	str	r4, [sp, #12]
 800f57e:	f1a8 0404 	sub.w	r4, r8, #4
 800f582:	3301      	adds	r3, #1
 800f584:	9405      	str	r4, [sp, #20]
 800f586:	011c      	lsls	r4, r3, #4
 800f588:	019b      	lsls	r3, r3, #6
 800f58a:	9400      	str	r4, [sp, #0]
 800f58c:	9304      	str	r3, [sp, #16]
 800f58e:	f1b8 0f0f 	cmp.w	r8, #15
 800f592:	f340 80d7 	ble.w	800f744 <weights_2channels_prefetch+0x1e8>
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	460d      	mov	r5, r1
 800f59a:	18c6      	adds	r6, r0, r3
 800f59c:	4613      	mov	r3, r2
 800f59e:	6804      	ldr	r4, [r0, #0]
 800f5a0:	3010      	adds	r0, #16
 800f5a2:	682f      	ldr	r7, [r5, #0]
 800f5a4:	3340      	adds	r3, #64	; 0x40
 800f5a6:	fa2f fc84 	sxtb16	ip, r4
 800f5aa:	3510      	adds	r5, #16
 800f5ac:	f843 cc40 	str.w	ip, [r3, #-64]
 800f5b0:	ea4f 2434 	mov.w	r4, r4, ror #8
 800f5b4:	42b0      	cmp	r0, r6
 800f5b6:	fa2f f484 	sxtb16	r4, r4
 800f5ba:	f843 4c3c 	str.w	r4, [r3, #-60]
 800f5be:	ea4f 2437 	mov.w	r4, r7, ror #8
 800f5c2:	fa2f f787 	sxtb16	r7, r7
 800f5c6:	fa2f f484 	sxtb16	r4, r4
 800f5ca:	f843 7c38 	str.w	r7, [r3, #-56]
 800f5ce:	f843 4c34 	str.w	r4, [r3, #-52]
 800f5d2:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 800f5d6:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800f5da:	ea4f 2c34 	mov.w	ip, r4, ror #8
 800f5de:	fa2f f484 	sxtb16	r4, r4
 800f5e2:	fa2f fc8c 	sxtb16	ip, ip
 800f5e6:	f843 4c28 	str.w	r4, [r3, #-40]
 800f5ea:	f843 cc24 	str.w	ip, [r3, #-36]
 800f5ee:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800f5f2:	fa2f f787 	sxtb16	r7, r7
 800f5f6:	f843 7c30 	str.w	r7, [r3, #-48]
 800f5fa:	fa2f f78c 	sxtb16	r7, ip
 800f5fe:	f843 7c2c 	str.w	r7, [r3, #-44]
 800f602:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800f606:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800f60a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800f60e:	fa2f f787 	sxtb16	r7, r7
 800f612:	fa2f fc8c 	sxtb16	ip, ip
 800f616:	f843 7c20 	str.w	r7, [r3, #-32]
 800f61a:	ea4f 2734 	mov.w	r7, r4, ror #8
 800f61e:	f843 cc1c 	str.w	ip, [r3, #-28]
 800f622:	fa2f f787 	sxtb16	r7, r7
 800f626:	fa2f f484 	sxtb16	r4, r4
 800f62a:	f843 7c14 	str.w	r7, [r3, #-20]
 800f62e:	f843 4c18 	str.w	r4, [r3, #-24]
 800f632:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f636:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f63a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800f63e:	fa2f f787 	sxtb16	r7, r7
 800f642:	fa2f fc8c 	sxtb16	ip, ip
 800f646:	f843 7c10 	str.w	r7, [r3, #-16]
 800f64a:	ea4f 2734 	mov.w	r7, r4, ror #8
 800f64e:	f843 cc0c 	str.w	ip, [r3, #-12]
 800f652:	fa2f f787 	sxtb16	r7, r7
 800f656:	fa2f f484 	sxtb16	r4, r4
 800f65a:	f843 7c04 	str.w	r7, [r3, #-4]
 800f65e:	f843 4c08 	str.w	r4, [r3, #-8]
 800f662:	d19c      	bne.n	800f59e <weights_2channels_prefetch+0x42>
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	441a      	add	r2, r3
 800f668:	9b00      	ldr	r3, [sp, #0]
 800f66a:	4419      	add	r1, r3
 800f66c:	469e      	mov	lr, r3
 800f66e:	9b03      	ldr	r3, [sp, #12]
 800f670:	4573      	cmp	r3, lr
 800f672:	dd65      	ble.n	800f740 <weights_2channels_prefetch+0x1e4>
 800f674:	9b05      	ldr	r3, [sp, #20]
 800f676:	4614      	mov	r4, r2
 800f678:	460f      	mov	r7, r1
 800f67a:	eba3 090e 	sub.w	r9, r3, lr
 800f67e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800f682:	f109 0a01 	add.w	sl, r9, #1
 800f686:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800f68a:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 800f68e:	9301      	str	r3, [sp, #4]
 800f690:	f856 3b04 	ldr.w	r3, [r6], #4
 800f694:	3410      	adds	r4, #16
 800f696:	f857 5b04 	ldr.w	r5, [r7], #4
 800f69a:	fa2f fc83 	sxtb16	ip, r3
 800f69e:	4286      	cmp	r6, r0
 800f6a0:	ea4f 2333 	mov.w	r3, r3, ror #8
 800f6a4:	fa2f f383 	sxtb16	r3, r3
 800f6a8:	f844 3c0c 	str.w	r3, [r4, #-12]
 800f6ac:	ea4f 2335 	mov.w	r3, r5, ror #8
 800f6b0:	fa2f f585 	sxtb16	r5, r5
 800f6b4:	f844 cc10 	str.w	ip, [r4, #-16]
 800f6b8:	f844 5c08 	str.w	r5, [r4, #-8]
 800f6bc:	fa2f f383 	sxtb16	r3, r3
 800f6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6c4:	d1e4      	bne.n	800f690 <weights_2channels_prefetch+0x134>
 800f6c6:	9b01      	ldr	r3, [sp, #4]
 800f6c8:	f10e 0e04 	add.w	lr, lr, #4
 800f6cc:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800f6d0:	4419      	add	r1, r3
 800f6d2:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800f6d6:	45f0      	cmp	r8, lr
 800f6d8:	dd29      	ble.n	800f72e <weights_2channels_prefetch+0x1d2>
 800f6da:	f990 3000 	ldrsb.w	r3, [r0]
 800f6de:	8013      	strh	r3, [r2, #0]
 800f6e0:	f991 3000 	ldrsb.w	r3, [r1]
 800f6e4:	8053      	strh	r3, [r2, #2]
 800f6e6:	f10e 0301 	add.w	r3, lr, #1
 800f6ea:	4598      	cmp	r8, r3
 800f6ec:	dd19      	ble.n	800f722 <weights_2channels_prefetch+0x1c6>
 800f6ee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f6f2:	8093      	strh	r3, [r2, #4]
 800f6f4:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800f6f8:	80d3      	strh	r3, [r2, #6]
 800f6fa:	f10e 0302 	add.w	r3, lr, #2
 800f6fe:	4598      	cmp	r8, r3
 800f700:	dd0f      	ble.n	800f722 <weights_2channels_prefetch+0x1c6>
 800f702:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800f706:	8113      	strh	r3, [r2, #8]
 800f708:	f10e 0303 	add.w	r3, lr, #3
 800f70c:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800f710:	4598      	cmp	r8, r3
 800f712:	8154      	strh	r4, [r2, #10]
 800f714:	dd05      	ble.n	800f722 <weights_2channels_prefetch+0x1c6>
 800f716:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800f71a:	8193      	strh	r3, [r2, #12]
 800f71c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800f720:	81d3      	strh	r3, [r2, #14]
 800f722:	eba8 0e0e 	sub.w	lr, r8, lr
 800f726:	4470      	add	r0, lr
 800f728:	4471      	add	r1, lr
 800f72a:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800f72e:	f10b 0b01 	add.w	fp, fp, #1
 800f732:	9b02      	ldr	r3, [sp, #8]
 800f734:	455b      	cmp	r3, fp
 800f736:	f47f af2a 	bne.w	800f58e <weights_2channels_prefetch+0x32>
 800f73a:	b007      	add	sp, #28
 800f73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f740:	4630      	mov	r0, r6
 800f742:	e7c8      	b.n	800f6d6 <weights_2channels_prefetch+0x17a>
 800f744:	4606      	mov	r6, r0
 800f746:	f04f 0e00 	mov.w	lr, #0
 800f74a:	e790      	b.n	800f66e <weights_2channels_prefetch+0x112>

0800f74c <st_sssa8_ch_fullW_prefetch>:
 800f74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f750:	b087      	sub	sp, #28
 800f752:	461c      	mov	r4, r3
 800f754:	4680      	mov	r8, r0
 800f756:	4613      	mov	r3, r2
 800f758:	104f      	asrs	r7, r1, #1
 800f75a:	4620      	mov	r0, r4
 800f75c:	9103      	str	r1, [sp, #12]
 800f75e:	9704      	str	r7, [sp, #16]
 800f760:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 800f764:	eb08 0402 	add.w	r4, r8, r2
 800f768:	d020      	beq.n	800f7ac <st_sssa8_ch_fullW_prefetch+0x60>
 800f76a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f76c:	4646      	mov	r6, r8
 800f76e:	4655      	mov	r5, sl
 800f770:	f8cd 8014 	str.w	r8, [sp, #20]
 800f774:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800f778:	4680      	mov	r8, r0
 800f77a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800f77e:	469a      	mov	sl, r3
 800f780:	462a      	mov	r2, r5
 800f782:	4621      	mov	r1, r4
 800f784:	4630      	mov	r0, r6
 800f786:	4653      	mov	r3, sl
 800f788:	f8cd 8000 	str.w	r8, [sp]
 800f78c:	445d      	add	r5, fp
 800f78e:	f7ff fee5 	bl	800f55c <weights_2channels_prefetch>
 800f792:	3f01      	subs	r7, #1
 800f794:	444c      	add	r4, r9
 800f796:	444e      	add	r6, r9
 800f798:	d1f2      	bne.n	800f780 <st_sssa8_ch_fullW_prefetch+0x34>
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f7a0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800f7a4:	fb03 8809 	mla	r8, r3, r9, r8
 800f7a8:	fb03 aa0b 	mla	sl, r3, fp, sl
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	07db      	lsls	r3, r3, #31
 800f7b0:	d509      	bpl.n	800f7c6 <st_sssa8_ch_fullW_prefetch+0x7a>
 800f7b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd06      	ble.n	800f7c6 <st_sssa8_ch_fullW_prefetch+0x7a>
 800f7b8:	4443      	add	r3, r8
 800f7ba:	f918 2b01 	ldrsb.w	r2, [r8], #1
 800f7be:	4543      	cmp	r3, r8
 800f7c0:	f82a 2b02 	strh.w	r2, [sl], #2
 800f7c4:	d1f9      	bne.n	800f7ba <st_sssa8_ch_fullW_prefetch+0x6e>
 800f7c6:	b007      	add	sp, #28
 800f7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7cc <st_sssa8_ch_nn_mat_mult_nt_t>:
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	b0b5      	sub	sp, #212	; 0xd4
 800f7d2:	9027      	str	r0, [sp, #156]	; 0x9c
 800f7d4:	912d      	str	r1, [sp, #180]	; 0xb4
 800f7d6:	9233      	str	r2, [sp, #204]	; 0xcc
 800f7d8:	932e      	str	r3, [sp, #184]	; 0xb8
 800f7da:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 800f7de:	2c00      	cmp	r4, #0
 800f7e0:	bf18      	it	ne
 800f7e2:	4620      	movne	r0, r4
 800f7e4:	9c41      	ldr	r4, [sp, #260]	; 0x104
 800f7e6:	2c01      	cmp	r4, #1
 800f7e8:	9045      	str	r0, [sp, #276]	; 0x114
 800f7ea:	f340 826b 	ble.w	800fcc4 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 800f7ee:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800f7f0:	461e      	mov	r6, r3
 800f7f2:	4694      	mov	ip, r2
 800f7f4:	9f42      	ldr	r7, [sp, #264]	; 0x108
 800f7f6:	f1a4 0310 	sub.w	r3, r4, #16
 800f7fa:	9c41      	ldr	r4, [sp, #260]	; 0x104
 800f7fc:	468e      	mov	lr, r1
 800f7fe:	9d40      	ldr	r5, [sp, #256]	; 0x100
 800f800:	1ea0      	subs	r0, r4, #2
 800f802:	0919      	lsrs	r1, r3, #4
 800f804:	f023 030f 	bic.w	r3, r3, #15
 800f808:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800f80a:	f020 0201 	bic.w	r2, r0, #1
 800f80e:	9032      	str	r0, [sp, #200]	; 0xc8
 800f810:	4630      	mov	r0, r6
 800f812:	3101      	adds	r1, #1
 800f814:	4432      	add	r2, r6
 800f816:	10a4      	asrs	r4, r4, #2
 800f818:	106d      	asrs	r5, r5, #1
 800f81a:	1cd6      	adds	r6, r2, #3
 800f81c:	f107 0214 	add.w	r2, r7, #20
 800f820:	942f      	str	r4, [sp, #188]	; 0xbc
 800f822:	18d3      	adds	r3, r2, r3
 800f824:	9629      	str	r6, [sp, #164]	; 0xa4
 800f826:	9e41      	ldr	r6, [sp, #260]	; 0x104
 800f828:	9318      	str	r3, [sp, #96]	; 0x60
 800f82a:	f06f 0303 	mvn.w	r3, #3
 800f82e:	0076      	lsls	r6, r6, #1
 800f830:	952a      	str	r5, [sp, #168]	; 0xa8
 800f832:	1bdb      	subs	r3, r3, r7
 800f834:	9613      	str	r6, [sp, #76]	; 0x4c
 800f836:	9319      	str	r3, [sp, #100]	; 0x64
 800f838:	f1a7 030f 	sub.w	r3, r7, #15
 800f83c:	9312      	str	r3, [sp, #72]	; 0x48
 800f83e:	f007 0303 	and.w	r3, r7, #3
 800f842:	9330      	str	r3, [sp, #192]	; 0xc0
 800f844:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f846:	f003 0301 	and.w	r3, r3, #1
 800f84a:	9328      	str	r3, [sp, #160]	; 0xa0
 800f84c:	007b      	lsls	r3, r7, #1
 800f84e:	9326      	str	r3, [sp, #152]	; 0x98
 800f850:	00bb      	lsls	r3, r7, #2
 800f852:	932c      	str	r3, [sp, #176]	; 0xb0
 800f854:	1f3b      	subs	r3, r7, #4
 800f856:	9317      	str	r3, [sp, #92]	; 0x5c
 800f858:	1c43      	adds	r3, r0, #1
 800f85a:	931b      	str	r3, [sp, #108]	; 0x6c
 800f85c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f85e:	3302      	adds	r3, #2
 800f860:	9321      	str	r3, [sp, #132]	; 0x84
 800f862:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800f864:	3304      	adds	r3, #4
 800f866:	931f      	str	r3, [sp, #124]	; 0x7c
 800f868:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800f86a:	3304      	adds	r3, #4
 800f86c:	9320      	str	r3, [sp, #128]	; 0x80
 800f86e:	4663      	mov	r3, ip
 800f870:	3304      	adds	r3, #4
 800f872:	9322      	str	r3, [sp, #136]	; 0x88
 800f874:	010b      	lsls	r3, r1, #4
 800f876:	9316      	str	r3, [sp, #88]	; 0x58
 800f878:	018b      	lsls	r3, r1, #6
 800f87a:	9325      	str	r3, [sp, #148]	; 0x94
 800f87c:	0123      	lsls	r3, r4, #4
 800f87e:	9331      	str	r3, [sp, #196]	; 0xc4
 800f880:	fb06 f305 	mul.w	r3, r6, r5
 800f884:	932b      	str	r3, [sp, #172]	; 0xac
 800f886:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 800f88a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f88c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f88e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 800f892:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f896:	3901      	subs	r1, #1
 800f898:	2b15      	cmp	r3, #21
 800f89a:	931a      	str	r3, [sp, #104]	; 0x68
 800f89c:	920a      	str	r2, [sp, #40]	; 0x28
 800f89e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f8a0:	9101      	str	r1, [sp, #4]
 800f8a2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	910d      	str	r1, [sp, #52]	; 0x34
 800f8aa:	920e      	str	r2, [sp, #56]	; 0x38
 800f8ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f8ae:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800f8b2:	6812      	ldr	r2, [r2, #0]
 800f8b4:	910f      	str	r1, [sp, #60]	; 0x3c
 800f8b6:	9210      	str	r2, [sp, #64]	; 0x40
 800f8b8:	f300 8402 	bgt.w	80100c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	bfcc      	ite	gt
 800f8c0:	2300      	movgt	r3, #0
 800f8c2:	2301      	movle	r3, #1
 800f8c4:	425b      	negs	r3, r3
 800f8c6:	9308      	str	r3, [sp, #32]
 800f8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ca:	2b15      	cmp	r3, #21
 800f8cc:	f300 82c4 	bgt.w	800fe58 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	bfcc      	ite	gt
 800f8d4:	2300      	movgt	r3, #0
 800f8d6:	2301      	movle	r3, #1
 800f8d8:	425b      	negs	r3, r3
 800f8da:	9309      	str	r3, [sp, #36]	; 0x24
 800f8dc:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 82c0 	beq.w	800fe64 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 800f8e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f040 8397 	bne.w	801001a <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f8f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f8f6:	18cb      	adds	r3, r1, r3
 800f8f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f8fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f8fc:	6803      	ldr	r3, [r0, #0]
 800f8fe:	18d3      	adds	r3, r2, r3
 800f900:	930b      	str	r3, [sp, #44]	; 0x2c
 800f902:	2900      	cmp	r1, #0
 800f904:	f000 8511 	beq.w	801032a <st_sssa8_ch_nn_mat_mult_nt_t+0xb5e>
 800f908:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f90a:	2001      	movs	r0, #1
 800f90c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800f90e:	1e93      	subs	r3, r2, #2
 800f910:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800f914:	9104      	str	r1, [sp, #16]
 800f916:	fa00 f303 	lsl.w	r3, r0, r3
 800f91a:	931c      	str	r3, [sp, #112]	; 0x70
 800f91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f91e:	3b02      	subs	r3, #2
 800f920:	fa00 f303 	lsl.w	r3, r0, r3
 800f924:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f926:	931d      	str	r3, [sp, #116]	; 0x74
 800f928:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800f92a:	3b03      	subs	r3, #3
 800f92c:	9311      	str	r3, [sp, #68]	; 0x44
 800f92e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f930:	4418      	add	r0, r3
 800f932:	9303      	str	r3, [sp, #12]
 800f934:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800f936:	9002      	str	r0, [sp, #8]
 800f938:	3304      	adds	r3, #4
 800f93a:	9845      	ldr	r0, [sp, #276]	; 0x114
 800f93c:	9315      	str	r3, [sp, #84]	; 0x54
 800f93e:	1e53      	subs	r3, r2, #1
 800f940:	4420      	add	r0, r4
 800f942:	931e      	str	r3, [sp, #120]	; 0x78
 800f944:	f1c2 0301 	rsb	r3, r2, #1
 800f948:	9014      	str	r0, [sp, #80]	; 0x50
 800f94a:	9324      	str	r3, [sp, #144]	; 0x90
 800f94c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f340 8279 	ble.w	800fe46 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 800f954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f956:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f958:	eb0b 0703 	add.w	r7, fp, r3
 800f95c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f95e:	f8cd b014 	str.w	fp, [sp, #20]
 800f962:	4604      	mov	r4, r0
 800f964:	445b      	add	r3, fp
 800f966:	9e45      	ldr	r6, [sp, #276]	; 0x114
 800f968:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f970:	4619      	mov	r1, r3
 800f972:	f85b c007 	ldr.w	ip, [fp, r7]
 800f976:	eb0b 0e07 	add.w	lr, fp, r7
 800f97a:	fa2f f58c 	sxtb16	r5, ip
 800f97e:	6832      	ldr	r2, [r6, #0]
 800f980:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800f984:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800f988:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800f98c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800f990:	fb25 0002 	smlad	r0, r5, r2, r0
 800f994:	fb2c 0009 	smlad	r0, ip, r9, r0
 800f998:	fb25 350a 	smlad	r5, r5, sl, r3
 800f99c:	fb2c 5508 	smlad	r5, ip, r8, r5
 800f9a0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f9a4:	fa2f fc83 	sxtb16	ip, r3
 800f9a8:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f9ac:	fb2c 4202 	smlad	r2, ip, r2, r4
 800f9b0:	fb2c 110a 	smlad	r1, ip, sl, r1
 800f9b4:	fb23 2209 	smlad	r2, r3, r9, r2
 800f9b8:	f8d6 9010 	ldr.w	r9, [r6, #16]
 800f9bc:	6974      	ldr	r4, [r6, #20]
 800f9be:	fb23 1808 	smlad	r8, r3, r8, r1
 800f9c2:	f8de 1004 	ldr.w	r1, [lr, #4]
 800f9c6:	69b3      	ldr	r3, [r6, #24]
 800f9c8:	fa2f fc81 	sxtb16	ip, r1
 800f9cc:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 800f9d0:	fa2f f191 	sxtb16	r1, r1, ror #8
 800f9d4:	fb2c 0009 	smlad	r0, ip, r9, r0
 800f9d8:	fb21 0004 	smlad	r0, r1, r4, r0
 800f9dc:	fb2c 5c03 	smlad	ip, ip, r3, r5
 800f9e0:	fb21 cc0a 	smlad	ip, r1, sl, ip
 800f9e4:	683d      	ldr	r5, [r7, #0]
 800f9e6:	fa2f f185 	sxtb16	r1, r5
 800f9ea:	fa2f f595 	sxtb16	r5, r5, ror #8
 800f9ee:	fb21 2909 	smlad	r9, r1, r9, r2
 800f9f2:	fb21 8803 	smlad	r8, r1, r3, r8
 800f9f6:	fb25 9904 	smlad	r9, r5, r4, r9
 800f9fa:	6a34      	ldr	r4, [r6, #32]
 800f9fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f9fe:	fb25 8a0a 	smlad	sl, r5, sl, r8
 800fa02:	f8de 2008 	ldr.w	r2, [lr, #8]
 800fa06:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 800fa0a:	fa2f f182 	sxtb16	r1, r2
 800fa0e:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800fa10:	fa2f f292 	sxtb16	r2, r2, ror #8
 800fa14:	fb21 0004 	smlad	r0, r1, r4, r0
 800fa18:	fb22 0003 	smlad	r0, r2, r3, r0
 800fa1c:	fb21 c108 	smlad	r1, r1, r8, ip
 800fa20:	fb22 1205 	smlad	r2, r2, r5, r1
 800fa24:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800fa28:	fa2f f18c 	sxtb16	r1, ip
 800fa2c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800fa30:	fb21 9404 	smlad	r4, r1, r4, r9
 800fa34:	fb21 aa08 	smlad	sl, r1, r8, sl
 800fa38:	fb2c 4903 	smlad	r9, ip, r3, r4
 800fa3c:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 800fa40:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800fa42:	fb2c a505 	smlad	r5, ip, r5, sl
 800fa46:	f8de 300c 	ldr.w	r3, [lr, #12]
 800fa4a:	3640      	adds	r6, #64	; 0x40
 800fa4c:	fa2f f183 	sxtb16	r1, r3
 800fa50:	f856 ac08 	ldr.w	sl, [r6, #-8]
 800fa54:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800fa58:	fa2f f393 	sxtb16	r3, r3, ror #8
 800fa5c:	fb21 0008 	smlad	r0, r1, r8, r0
 800fa60:	fb23 0004 	smlad	r0, r3, r4, r0
 800fa64:	fb21 220a 	smlad	r2, r1, sl, r2
 800fa68:	fb23 230e 	smlad	r3, r3, lr, r2
 800fa6c:	68b9      	ldr	r1, [r7, #8]
 800fa6e:	fa2f f281 	sxtb16	r2, r1
 800fa72:	fa2f f191 	sxtb16	r1, r1, ror #8
 800fa76:	fb22 9908 	smlad	r9, r2, r8, r9
 800fa7a:	fb22 550a 	smlad	r5, r2, sl, r5
 800fa7e:	fb21 9404 	smlad	r4, r1, r4, r9
 800fa82:	fb21 510e 	smlad	r1, r1, lr, r5
 800fa86:	3710      	adds	r7, #16
 800fa88:	9a01      	ldr	r2, [sp, #4]
 800fa8a:	4297      	cmp	r7, r2
 800fa8c:	f47f af71 	bne.w	800f972 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 800fa90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fa92:	f8dd b014 	ldr.w	fp, [sp, #20]
 800fa96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fa98:	4692      	mov	sl, r2
 800fa9a:	4493      	add	fp, r2
 800fa9c:	9501      	str	r5, [sp, #4]
 800fa9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800faa0:	4592      	cmp	sl, r2
 800faa2:	f280 81ce 	bge.w	800fe42 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 800faa6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800faa8:	f8cd a01c 	str.w	sl, [sp, #28]
 800faac:	eba5 020a 	sub.w	r2, r5, sl
 800fab0:	46aa      	mov	sl, r5
 800fab2:	0892      	lsrs	r2, r2, #2
 800fab4:	4616      	mov	r6, r2
 800fab6:	9206      	str	r2, [sp, #24]
 800fab8:	9a01      	ldr	r2, [sp, #4]
 800faba:	3601      	adds	r6, #1
 800fabc:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 800fac0:	9605      	str	r6, [sp, #20]
 800fac2:	f85b 5b04 	ldr.w	r5, [fp], #4
 800fac6:	3210      	adds	r2, #16
 800fac8:	fa2f f685 	sxtb16	r6, r5
 800facc:	f852 8c10 	ldr.w	r8, [r2, #-16]
 800fad0:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 800fad4:	f852 ec08 	ldr.w	lr, [r2, #-8]
 800fad8:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800fadc:	fa2f f595 	sxtb16	r5, r5, ror #8
 800fae0:	fb26 0008 	smlad	r0, r6, r8, r0
 800fae4:	fb25 000c 	smlad	r0, r5, ip, r0
 800fae8:	fb26 330e 	smlad	r3, r6, lr, r3
 800faec:	fb25 3307 	smlad	r3, r5, r7, r3
 800faf0:	f85b 500a 	ldr.w	r5, [fp, sl]
 800faf4:	fa2f f685 	sxtb16	r6, r5
 800faf8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800fafc:	fb26 4408 	smlad	r4, r6, r8, r4
 800fb00:	fb26 110e 	smlad	r1, r6, lr, r1
 800fb04:	fb25 440c 	smlad	r4, r5, ip, r4
 800fb08:	fb25 1107 	smlad	r1, r5, r7, r1
 800fb0c:	45cb      	cmp	fp, r9
 800fb0e:	d1d8      	bne.n	800fac2 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 800fb10:	9a01      	ldr	r2, [sp, #4]
 800fb12:	9d05      	ldr	r5, [sp, #20]
 800fb14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb18:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800fb1c:	9d06      	ldr	r5, [sp, #24]
 800fb1e:	9201      	str	r2, [sp, #4]
 800fb20:	f10a 0204 	add.w	r2, sl, #4
 800fb24:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800fb28:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fb2a:	4552      	cmp	r2, sl
 800fb2c:	dd58      	ble.n	800fbe0 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 800fb2e:	9f01      	ldr	r7, [sp, #4]
 800fb30:	f999 2000 	ldrsb.w	r2, [r9]
 800fb34:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800fb38:	f9b7 6000 	ldrsh.w	r6, [r7]
 800fb3c:	fb15 3302 	smlabb	r3, r5, r2, r3
 800fb40:	fb16 0002 	smlabb	r0, r6, r2, r0
 800fb44:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fb46:	f919 2002 	ldrsb.w	r2, [r9, r2]
 800fb4a:	fb15 1102 	smlabb	r1, r5, r2, r1
 800fb4e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 800fb50:	fb16 4402 	smlabb	r4, r6, r2, r4
 800fb54:	f10a 0201 	add.w	r2, sl, #1
 800fb58:	4295      	cmp	r5, r2
 800fb5a:	dd3d      	ble.n	800fbd8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 800fb5c:	eb09 0205 	add.w	r2, r9, r5
 800fb60:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800fb64:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 800fb68:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800fb6c:	fb16 4402 	smlabb	r4, r6, r2, r4
 800fb70:	fb15 1102 	smlabb	r1, r5, r2, r1
 800fb74:	f999 2001 	ldrsb.w	r2, [r9, #1]
 800fb78:	fb16 0002 	smlabb	r0, r6, r2, r0
 800fb7c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 800fb7e:	fb15 3302 	smlabb	r3, r5, r2, r3
 800fb82:	f10a 0202 	add.w	r2, sl, #2
 800fb86:	f109 0502 	add.w	r5, r9, #2
 800fb8a:	4296      	cmp	r6, r2
 800fb8c:	dd24      	ble.n	800fbd8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 800fb8e:	57aa      	ldrsb	r2, [r5, r6]
 800fb90:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 800fb94:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800fb98:	fb16 4402 	smlabb	r4, r6, r2, r4
 800fb9c:	fb15 1102 	smlabb	r1, r5, r2, r1
 800fba0:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800fba4:	fb16 0002 	smlabb	r0, r6, r2, r0
 800fba8:	9e42      	ldr	r6, [sp, #264]	; 0x108
 800fbaa:	fb15 3302 	smlabb	r3, r5, r2, r3
 800fbae:	f10a 0203 	add.w	r2, sl, #3
 800fbb2:	f109 0503 	add.w	r5, r9, #3
 800fbb6:	4296      	cmp	r6, r2
 800fbb8:	dd0e      	ble.n	800fbd8 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 800fbba:	57ad      	ldrsb	r5, [r5, r6]
 800fbbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fbc0:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800fbc4:	fb12 4405 	smlabb	r4, r2, r5, r4
 800fbc8:	fb16 1105 	smlabb	r1, r6, r5, r1
 800fbcc:	f999 5003 	ldrsb.w	r5, [r9, #3]
 800fbd0:	fb12 0005 	smlabb	r0, r2, r5, r0
 800fbd4:	fb16 3305 	smlabb	r3, r6, r5, r3
 800fbd8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fbda:	eba2 020a 	sub.w	r2, r2, sl
 800fbde:	4491      	add	r9, r2
 800fbe0:	9a08      	ldr	r2, [sp, #32]
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	f040 80dd 	bne.w	800fda2 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 800fbe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbea:	0040      	lsls	r0, r0, #1
 800fbec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fbee:	0064      	lsls	r4, r4, #1
 800fbf0:	fb50 5002 	smmla	r0, r0, r2, r5
 800fbf4:	fb54 5402 	smmla	r4, r4, r2, r5
 800fbf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fbfa:	4110      	asrs	r0, r2
 800fbfc:	f300 0007 	ssat	r0, #8, r0
 800fc00:	9d03      	ldr	r5, [sp, #12]
 800fc02:	4114      	asrs	r4, r2
 800fc04:	f805 0c01 	strb.w	r0, [r5, #-1]
 800fc08:	f304 0407 	ssat	r4, #8, r4
 800fc0c:	9a02      	ldr	r2, [sp, #8]
 800fc0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc14:	2a00      	cmp	r2, #0
 800fc16:	f040 80ac 	bne.w	800fd72 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 800fc1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fc20:	0049      	lsls	r1, r1, #1
 800fc22:	fb53 0302 	smmla	r3, r3, r2, r0
 800fc26:	fb51 0102 	smmla	r1, r1, r2, r0
 800fc2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc2c:	4113      	asrs	r3, r2
 800fc2e:	f303 0307 	ssat	r3, #8, r3
 800fc32:	9803      	ldr	r0, [sp, #12]
 800fc34:	4111      	asrs	r1, r2
 800fc36:	7003      	strb	r3, [r0, #0]
 800fc38:	f301 0107 	ssat	r1, #8, r1
 800fc3c:	9b02      	ldr	r3, [sp, #8]
 800fc3e:	7019      	strb	r1, [r3, #0]
 800fc40:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fc42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc44:	eb09 0b03 	add.w	fp, r9, r3
 800fc48:	9b03      	ldr	r3, [sp, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	9303      	str	r3, [sp, #12]
 800fc4e:	9b02      	ldr	r3, [sp, #8]
 800fc50:	4413      	add	r3, r2
 800fc52:	9302      	str	r3, [sp, #8]
 800fc54:	9b04      	ldr	r3, [sp, #16]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	f47f ae77 	bne.w	800f94c <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 800fc5e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800fc60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fc62:	3b01      	subs	r3, #1
 800fc64:	4413      	add	r3, r2
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 822b 	bne.w	80100c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 800fc70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fc74:	4413      	add	r3, r2
 800fc76:	9323      	str	r3, [sp, #140]	; 0x8c
 800fc78:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800fc7a:	b11b      	cbz	r3, 800fc84 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 800fc7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fc7e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800fc80:	4413      	add	r3, r2
 800fc82:	9345      	str	r3, [sp, #276]	; 0x114
 800fc84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc88:	3204      	adds	r2, #4
 800fc8a:	3302      	adds	r3, #2
 800fc8c:	9221      	str	r2, [sp, #132]	; 0x84
 800fc8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fc90:	931b      	str	r3, [sp, #108]	; 0x6c
 800fc92:	3208      	adds	r2, #8
 800fc94:	921f      	str	r2, [sp, #124]	; 0x7c
 800fc96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fc98:	3208      	adds	r2, #8
 800fc9a:	9220      	str	r2, [sp, #128]	; 0x80
 800fc9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fc9e:	3208      	adds	r2, #8
 800fca0:	9222      	str	r2, [sp, #136]	; 0x88
 800fca2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fca4:	429a      	cmp	r2, r3
 800fca6:	f47f adf0 	bne.w	800f88a <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 800fcaa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800fcac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fcae:	085a      	lsrs	r2, r3, #1
 800fcb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fcb2:	fb02 3303 	mla	r3, r2, r3, r3
 800fcb6:	3201      	adds	r2, #1
 800fcb8:	4419      	add	r1, r3
 800fcba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fcbc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fcc0:	912d      	str	r1, [sp, #180]	; 0xb4
 800fcc2:	932e      	str	r3, [sp, #184]	; 0xb8
 800fcc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcc6:	07db      	lsls	r3, r3, #31
 800fcc8:	d54f      	bpl.n	800fd6a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 800fcca:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dd4c      	ble.n	800fd6a <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 800fcd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcd2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800fcd6:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800fcda:	2200      	movs	r2, #0
 800fcdc:	441c      	add	r4, r3
 800fcde:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800fce0:	f04f 0901 	mov.w	r9, #1
 800fce4:	4611      	mov	r1, r2
 800fce6:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 800fcea:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800fcec:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 800fcf0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800fcf2:	f8cd e004 	str.w	lr, [sp, #4]
 800fcf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcfc:	4498      	add	r8, r3
 800fcfe:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800fd00:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 800fd04:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 800fd08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fd0a:	9e01      	ldr	r6, [sp, #4]
 800fd0c:	f1be 0f00 	cmp.w	lr, #0
 800fd10:	6837      	ldr	r7, [r6, #0]
 800fd12:	dd0d      	ble.n	800fd30 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 800fd14:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800fd16:	eb03 0b0e 	add.w	fp, r3, lr
 800fd1a:	f106 3cff 	add.w	ip, r6, #4294967295
 800fd1e:	f913 6b01 	ldrsb.w	r6, [r3], #1
 800fd22:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 800fd26:	1a36      	subs	r6, r6, r0
 800fd28:	455b      	cmp	r3, fp
 800fd2a:	fb0a 7706 	mla	r7, sl, r6, r7
 800fd2e:	d1f6      	bne.n	800fd1e <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 800fd30:	f9b8 c000 	ldrsh.w	ip, [r8]
 800fd34:	f1bc 0f15 	cmp.w	ip, #21
 800fd38:	f340 82fa 	ble.w	8010330 <st_sssa8_ch_nn_mat_mult_nt_t+0xb64>
 800fd3c:	f1ac 0a02 	sub.w	sl, ip, #2
 800fd40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fd44:	682e      	ldr	r6, [r5, #0]
 800fd46:	fa09 fa0a 	lsl.w	sl, r9, sl
 800fd4a:	fb57 a606 	smmla	r6, r7, r6, sl
 800fd4e:	fa46 fc0c 	asr.w	ip, r6, ip
 800fd52:	6826      	ldr	r6, [r4, #0]
 800fd54:	4466      	add	r6, ip
 800fd56:	f306 0607 	ssat	r6, #8, r6
 800fd5a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800fd5c:	54be      	strb	r6, [r7, r2]
 800fd5e:	9e41      	ldr	r6, [sp, #260]	; 0x104
 800fd60:	3101      	adds	r1, #1
 800fd62:	4432      	add	r2, r6
 800fd64:	9e40      	ldr	r6, [sp, #256]	; 0x100
 800fd66:	428e      	cmp	r6, r1
 800fd68:	d1cf      	bne.n	800fd0a <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	b035      	add	sp, #212	; 0xd4
 800fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd72:	3201      	adds	r2, #1
 800fd74:	d02e      	beq.n	800fdd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 800fd76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd78:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fd7a:	fb53 0302 	smmla	r3, r3, r2, r0
 800fd7e:	fb51 0102 	smmla	r1, r1, r2, r0
 800fd82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd86:	3a01      	subs	r2, #1
 800fd88:	4113      	asrs	r3, r2
 800fd8a:	4403      	add	r3, r0
 800fd8c:	f303 0307 	ssat	r3, #8, r3
 800fd90:	4111      	asrs	r1, r2
 800fd92:	9a03      	ldr	r2, [sp, #12]
 800fd94:	4401      	add	r1, r0
 800fd96:	7013      	strb	r3, [r2, #0]
 800fd98:	f301 0207 	ssat	r2, #8, r1
 800fd9c:	9b02      	ldr	r3, [sp, #8]
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	e74e      	b.n	800fc40 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 800fda2:	3201      	adds	r2, #1
 800fda4:	d031      	beq.n	800fe0a <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 800fda6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800fda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdaa:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800fdac:	fb50 5002 	smmla	r0, r0, r2, r5
 800fdb0:	fb54 5402 	smmla	r4, r4, r2, r5
 800fdb4:	4130      	asrs	r0, r6
 800fdb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdb8:	4410      	add	r0, r2
 800fdba:	f300 0007 	ssat	r0, #8, r0
 800fdbe:	9d03      	ldr	r5, [sp, #12]
 800fdc0:	4134      	asrs	r4, r6
 800fdc2:	f805 0c01 	strb.w	r0, [r5, #-1]
 800fdc6:	18a2      	adds	r2, r4, r2
 800fdc8:	f302 0207 	ssat	r2, #8, r2
 800fdcc:	9802      	ldr	r0, [sp, #8]
 800fdce:	f800 2c01 	strb.w	r2, [r0, #-1]
 800fdd2:	e71e      	b.n	800fc12 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 800fdd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdd6:	f1c2 0201 	rsb	r2, r2, #1
 800fdda:	4093      	lsls	r3, r2
 800fddc:	f303 031f 	ssat	r3, #32, r3
 800fde0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fde2:	fb53 f310 	smmulr	r3, r3, r0
 800fde6:	fa01 f202 	lsl.w	r2, r1, r2
 800fdea:	f302 021f 	ssat	r2, #32, r2
 800fdee:	fb52 f210 	smmulr	r2, r2, r0
 800fdf2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fdf4:	440b      	add	r3, r1
 800fdf6:	f303 0307 	ssat	r3, #8, r3
 800fdfa:	9803      	ldr	r0, [sp, #12]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	7003      	strb	r3, [r0, #0]
 800fe00:	f302 0207 	ssat	r2, #8, r2
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	701a      	strb	r2, [r3, #0]
 800fe08:	e71a      	b.n	800fc40 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 800fe0a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800fe0c:	fa00 f205 	lsl.w	r2, r0, r5
 800fe10:	f302 021f 	ssat	r2, #32, r2
 800fe14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800fe16:	fb52 f216 	smmulr	r2, r2, r6
 800fe1a:	fa04 f005 	lsl.w	r0, r4, r5
 800fe1e:	f300 001f 	ssat	r0, #32, r0
 800fe22:	fb50 f016 	smmulr	r0, r0, r6
 800fe26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fe28:	4422      	add	r2, r4
 800fe2a:	f302 0207 	ssat	r2, #8, r2
 800fe2e:	9d03      	ldr	r5, [sp, #12]
 800fe30:	4420      	add	r0, r4
 800fe32:	f805 2c01 	strb.w	r2, [r5, #-1]
 800fe36:	f300 0007 	ssat	r0, #8, r0
 800fe3a:	9a02      	ldr	r2, [sp, #8]
 800fe3c:	f802 0c01 	strb.w	r0, [r2, #-1]
 800fe40:	e6e7      	b.n	800fc12 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 800fe42:	46d9      	mov	r9, fp
 800fe44:	e670      	b.n	800fb28 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 800fe46:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fe48:	f04f 0a00 	mov.w	sl, #0
 800fe4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fe4e:	9301      	str	r3, [sp, #4]
 800fe50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe52:	4604      	mov	r4, r0
 800fe54:	4619      	mov	r1, r3
 800fe56:	e622      	b.n	800fa9e <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe5c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f47f ad40 	bne.w	800f8e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800fe64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fe66:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800fe68:	eb03 0a02 	add.w	sl, r3, r2
 800fe6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f340 82b2 	ble.w	80103d8 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0c>
 800fe74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe76:	4650      	mov	r0, sl
 800fe78:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fe7a:	18d5      	adds	r5, r2, r3
 800fe7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fe7e:	6811      	ldr	r1, [r2, #0]
 800fe80:	3210      	adds	r2, #16
 800fe82:	6804      	ldr	r4, [r0, #0]
 800fe84:	3340      	adds	r3, #64	; 0x40
 800fe86:	fa2f f681 	sxtb16	r6, r1
 800fe8a:	3010      	adds	r0, #16
 800fe8c:	f843 6c40 	str.w	r6, [r3, #-64]
 800fe90:	ea4f 2131 	mov.w	r1, r1, ror #8
 800fe94:	42aa      	cmp	r2, r5
 800fe96:	fa2f f181 	sxtb16	r1, r1
 800fe9a:	f843 1c3c 	str.w	r1, [r3, #-60]
 800fe9e:	ea4f 2134 	mov.w	r1, r4, ror #8
 800fea2:	fa2f f484 	sxtb16	r4, r4
 800fea6:	fa2f f181 	sxtb16	r1, r1
 800feaa:	f843 4c38 	str.w	r4, [r3, #-56]
 800feae:	f843 1c34 	str.w	r1, [r3, #-52]
 800feb2:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800feb6:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 800feba:	ea4f 2631 	mov.w	r6, r1, ror #8
 800febe:	fa2f f181 	sxtb16	r1, r1
 800fec2:	fa2f f686 	sxtb16	r6, r6
 800fec6:	f843 1c28 	str.w	r1, [r3, #-40]
 800feca:	f843 6c24 	str.w	r6, [r3, #-36]
 800fece:	ea4f 2634 	mov.w	r6, r4, ror #8
 800fed2:	fa2f f484 	sxtb16	r4, r4
 800fed6:	f843 4c30 	str.w	r4, [r3, #-48]
 800feda:	fa2f f486 	sxtb16	r4, r6
 800fede:	f843 4c2c 	str.w	r4, [r3, #-44]
 800fee2:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800fee6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800feea:	ea4f 2634 	mov.w	r6, r4, ror #8
 800feee:	fa2f f484 	sxtb16	r4, r4
 800fef2:	fa2f f686 	sxtb16	r6, r6
 800fef6:	f843 4c20 	str.w	r4, [r3, #-32]
 800fefa:	ea4f 2431 	mov.w	r4, r1, ror #8
 800fefe:	f843 6c1c 	str.w	r6, [r3, #-28]
 800ff02:	fa2f f484 	sxtb16	r4, r4
 800ff06:	fa2f f181 	sxtb16	r1, r1
 800ff0a:	f843 4c14 	str.w	r4, [r3, #-20]
 800ff0e:	f843 1c18 	str.w	r1, [r3, #-24]
 800ff12:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ff16:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800ff1a:	ea4f 2634 	mov.w	r6, r4, ror #8
 800ff1e:	fa2f f484 	sxtb16	r4, r4
 800ff22:	fa2f f686 	sxtb16	r6, r6
 800ff26:	f843 4c10 	str.w	r4, [r3, #-16]
 800ff2a:	ea4f 2431 	mov.w	r4, r1, ror #8
 800ff2e:	f843 6c0c 	str.w	r6, [r3, #-12]
 800ff32:	fa2f f484 	sxtb16	r4, r4
 800ff36:	fa2f f181 	sxtb16	r1, r1
 800ff3a:	f843 4c04 	str.w	r4, [r3, #-4]
 800ff3e:	f843 1c08 	str.w	r1, [r3, #-8]
 800ff42:	d19c      	bne.n	800fe7e <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 800ff44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff48:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ff4a:	449a      	add	sl, r3
 800ff4c:	469c      	mov	ip, r3
 800ff4e:	1857      	adds	r7, r2, r1
 800ff50:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ff52:	3b03      	subs	r3, #3
 800ff54:	4563      	cmp	r3, ip
 800ff56:	f340 823d 	ble.w	80103d4 <st_sssa8_ch_nn_mat_mult_nt_t+0xc08>
 800ff5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff5c:	463a      	mov	r2, r7
 800ff5e:	4650      	mov	r0, sl
 800ff60:	eba3 030c 	sub.w	r3, r3, ip
 800ff64:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ff68:	f108 0e01 	add.w	lr, r8, #1
 800ff6c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800ff70:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 800ff74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff78:	3210      	adds	r2, #16
 800ff7a:	f850 1b04 	ldr.w	r1, [r0], #4
 800ff7e:	fa2f f483 	sxtb16	r4, r3
 800ff82:	42b5      	cmp	r5, r6
 800ff84:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ff88:	fa2f f383 	sxtb16	r3, r3
 800ff8c:	f842 3c0c 	str.w	r3, [r2, #-12]
 800ff90:	ea4f 2331 	mov.w	r3, r1, ror #8
 800ff94:	fa2f f181 	sxtb16	r1, r1
 800ff98:	f842 4c10 	str.w	r4, [r2, #-16]
 800ff9c:	f842 1c08 	str.w	r1, [r2, #-8]
 800ffa0:	fa2f f383 	sxtb16	r3, r3
 800ffa4:	f842 3c04 	str.w	r3, [r2, #-4]
 800ffa8:	d1e4      	bne.n	800ff74 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 800ffaa:	f10c 0304 	add.w	r3, ip, #4
 800ffae:	44ca      	add	sl, r9
 800ffb0:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800ffb4:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 800ffb8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800ffba:	4563      	cmp	r3, ip
 800ffbc:	f77f ac92 	ble.w	800f8e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800ffc0:	f996 3000 	ldrsb.w	r3, [r6]
 800ffc4:	803b      	strh	r3, [r7, #0]
 800ffc6:	f10c 0301 	add.w	r3, ip, #1
 800ffca:	f99a 2000 	ldrsb.w	r2, [sl]
 800ffce:	807a      	strh	r2, [r7, #2]
 800ffd0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	f77f ac86 	ble.w	800f8e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800ffd8:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800ffdc:	80bb      	strh	r3, [r7, #4]
 800ffde:	f10c 0302 	add.w	r3, ip, #2
 800ffe2:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 800ffe6:	80fa      	strh	r2, [r7, #6]
 800ffe8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800ffea:	429a      	cmp	r2, r3
 800ffec:	f77f ac7a 	ble.w	800f8e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 800fff0:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800fff4:	f10c 0c03 	add.w	ip, ip, #3
 800fff8:	813b      	strh	r3, [r7, #8]
 800fffa:	4594      	cmp	ip, r2
 800fffc:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8010000:	817b      	strh	r3, [r7, #10]
 8010002:	f6bf ac6f 	bge.w	800f8e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8010006:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801000a:	81bb      	strh	r3, [r7, #12]
 801000c:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8010010:	81fb      	strh	r3, [r7, #14]
 8010012:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010014:	2b00      	cmp	r3, #0
 8010016:	f43f ac69 	beq.w	800f8ec <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 801001a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801001c:	2800      	cmp	r0, #0
 801001e:	f000 81cd 	beq.w	80103bc <st_sssa8_ch_nn_mat_mult_nt_t+0xbf0>
 8010022:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010024:	2300      	movs	r3, #0
 8010026:	f102 0110 	add.w	r1, r2, #16
 801002a:	461a      	mov	r2, r3
 801002c:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 8010030:	3801      	subs	r0, #1
 8010032:	f101 0110 	add.w	r1, r1, #16
 8010036:	eba3 0304 	sub.w	r3, r3, r4
 801003a:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 801003e:	eba2 0204 	sub.w	r2, r2, r4
 8010042:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 8010046:	eba3 0304 	sub.w	r3, r3, r4
 801004a:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 801004e:	eba2 0204 	sub.w	r2, r2, r4
 8010052:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 8010056:	eba3 0304 	sub.w	r3, r3, r4
 801005a:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 801005e:	eba2 0204 	sub.w	r2, r2, r4
 8010062:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8010066:	eba3 0304 	sub.w	r3, r3, r4
 801006a:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 801006e:	eba2 0204 	sub.w	r2, r2, r4
 8010072:	d1db      	bne.n	801002c <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8010074:	9945      	ldr	r1, [sp, #276]	; 0x114
 8010076:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8010078:	4401      	add	r1, r0
 801007a:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 801007c:	b1cc      	cbz	r4, 80100b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801007e:	f9b1 0000 	ldrsh.w	r0, [r1]
 8010082:	2c01      	cmp	r4, #1
 8010084:	eba3 0300 	sub.w	r3, r3, r0
 8010088:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801008c:	eba2 0200 	sub.w	r2, r2, r0
 8010090:	d00f      	beq.n	80100b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8010092:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8010096:	2c02      	cmp	r4, #2
 8010098:	eba3 0300 	sub.w	r3, r3, r0
 801009c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 80100a0:	eba2 0200 	sub.w	r2, r2, r0
 80100a4:	d005      	beq.n	80100b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 80100a6:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 80100aa:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80100ae:	1a1b      	subs	r3, r3, r0
 80100b0:	1a52      	subs	r2, r2, r1
 80100b2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80100b4:	fb03 f101 	mul.w	r1, r3, r1
 80100b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80100ba:	fb03 f202 	mul.w	r2, r3, r2
 80100be:	e417      	b.n	800f8f0 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 80100c0:	2301      	movs	r3, #1
 80100c2:	9308      	str	r3, [sp, #32]
 80100c4:	e400      	b.n	800f8c8 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 80100c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f340 817d 	ble.w	80103c8 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfc>
 80100ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80100d0:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 80100d4:	eb0b 0003 	add.w	r0, fp, r3
 80100d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80100da:	f8db 1000 	ldr.w	r1, [fp]
 80100de:	681e      	ldr	r6, [r3, #0]
 80100e0:	fa2f f481 	sxtb16	r4, r1
 80100e4:	fa2f f191 	sxtb16	r1, r1, ror #8
 80100e8:	fb24 5506 	smlad	r5, r4, r6, r5
 80100ec:	685e      	ldr	r6, [r3, #4]
 80100ee:	fb21 5606 	smlad	r6, r1, r6, r5
 80100f2:	689d      	ldr	r5, [r3, #8]
 80100f4:	fb24 2205 	smlad	r2, r4, r5, r2
 80100f8:	68dc      	ldr	r4, [r3, #12]
 80100fa:	fb21 2104 	smlad	r1, r1, r4, r2
 80100fe:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010102:	691d      	ldr	r5, [r3, #16]
 8010104:	fa2f f482 	sxtb16	r4, r2
 8010108:	fa2f f292 	sxtb16	r2, r2, ror #8
 801010c:	fb24 6505 	smlad	r5, r4, r5, r6
 8010110:	695e      	ldr	r6, [r3, #20]
 8010112:	fb22 5606 	smlad	r6, r2, r6, r5
 8010116:	699d      	ldr	r5, [r3, #24]
 8010118:	fb24 1105 	smlad	r1, r4, r5, r1
 801011c:	69dc      	ldr	r4, [r3, #28]
 801011e:	fb22 1104 	smlad	r1, r2, r4, r1
 8010122:	f8db 2008 	ldr.w	r2, [fp, #8]
 8010126:	6a1d      	ldr	r5, [r3, #32]
 8010128:	fa2f f482 	sxtb16	r4, r2
 801012c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010130:	fb24 6505 	smlad	r5, r4, r5, r6
 8010134:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8010136:	fb22 5606 	smlad	r6, r2, r6, r5
 801013a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801013c:	fb24 1105 	smlad	r1, r4, r5, r1
 8010140:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010142:	fb22 1104 	smlad	r1, r2, r4, r1
 8010146:	f8db 200c 	ldr.w	r2, [fp, #12]
 801014a:	3340      	adds	r3, #64	; 0x40
 801014c:	fa2f f482 	sxtb16	r4, r2
 8010150:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8010154:	f10b 0b10 	add.w	fp, fp, #16
 8010158:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 801015c:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8010160:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8010164:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010168:	fb24 6505 	smlad	r5, r4, r5, r6
 801016c:	fb22 550e 	smlad	r5, r2, lr, r5
 8010170:	fb24 110c 	smlad	r1, r4, ip, r1
 8010174:	fb22 1207 	smlad	r2, r2, r7, r1
 8010178:	4583      	cmp	fp, r0
 801017a:	d1ae      	bne.n	80100da <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 801017c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801017e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010182:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 8010186:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010188:	eb03 0e02 	add.w	lr, r3, r2
 801018c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801018e:	3b03      	subs	r3, #3
 8010190:	4543      	cmp	r3, r8
 8010192:	f340 8117 	ble.w	80103c4 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf8>
 8010196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010198:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801019a:	eba3 0a08 	sub.w	sl, r3, r8
 801019e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80101a0:	4673      	mov	r3, lr
 80101a2:	f8cd e008 	str.w	lr, [sp, #8]
 80101a6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 80101aa:	f10a 0901 	add.w	r9, sl, #1
 80101ae:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 80101b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80101b6:	3310      	adds	r3, #16
 80101b8:	fa2f f182 	sxtb16	r1, r2
 80101bc:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80101c0:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 80101c4:	f853 ec08 	ldr.w	lr, [r3, #-8]
 80101c8:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80101cc:	fa2f f292 	sxtb16	r2, r2, ror #8
 80101d0:	fb21 6604 	smlad	r6, r1, r4, r6
 80101d4:	fb22 660b 	smlad	r6, r2, fp, r6
 80101d8:	fb21 550e 	smlad	r5, r1, lr, r5
 80101dc:	fb22 5507 	smlad	r5, r2, r7, r5
 80101e0:	4560      	cmp	r0, ip
 80101e2:	d1e6      	bne.n	80101b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 80101e4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80101e8:	f108 0804 	add.w	r8, r8, #4
 80101ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80101ee:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 80101f2:	960c      	str	r6, [sp, #48]	; 0x30
 80101f4:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 80101f8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80101fa:	4543      	cmp	r3, r8
 80101fc:	dd40      	ble.n	8010280 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80101fe:	f99c 3000 	ldrsb.w	r3, [ip]
 8010202:	f8be 2000 	ldrh.w	r2, [lr]
 8010206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010208:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801020a:	fb12 1103 	smlabb	r1, r2, r3, r1
 801020e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010212:	fb12 0003 	smlabb	r0, r2, r3, r0
 8010216:	f108 0301 	add.w	r3, r8, #1
 801021a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801021c:	910c      	str	r1, [sp, #48]	; 0x30
 801021e:	429a      	cmp	r2, r3
 8010220:	900b      	str	r0, [sp, #44]	; 0x2c
 8010222:	dd2d      	ble.n	8010280 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010224:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8010228:	f8be 2004 	ldrh.w	r2, [lr, #4]
 801022c:	fb12 1103 	smlabb	r1, r2, r3, r1
 8010230:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8010234:	fb12 0003 	smlabb	r0, r2, r3, r0
 8010238:	f108 0302 	add.w	r3, r8, #2
 801023c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801023e:	910c      	str	r1, [sp, #48]	; 0x30
 8010240:	429a      	cmp	r2, r3
 8010242:	900b      	str	r0, [sp, #44]	; 0x2c
 8010244:	dd1c      	ble.n	8010280 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010246:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 801024a:	f108 0803 	add.w	r8, r8, #3
 801024e:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8010252:	fb12 1103 	smlabb	r1, r2, r3, r1
 8010256:	f8be 200a 	ldrh.w	r2, [lr, #10]
 801025a:	fb12 0003 	smlabb	r0, r2, r3, r0
 801025e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010260:	910c      	str	r1, [sp, #48]	; 0x30
 8010262:	4543      	cmp	r3, r8
 8010264:	900b      	str	r0, [sp, #44]	; 0x2c
 8010266:	dd0b      	ble.n	8010280 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8010268:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801026c:	f8be 200c 	ldrh.w	r2, [lr, #12]
 8010270:	fb12 1203 	smlabb	r2, r2, r3, r1
 8010274:	920c      	str	r2, [sp, #48]	; 0x30
 8010276:	f8be 200e 	ldrh.w	r2, [lr, #14]
 801027a:	fb12 0303 	smlabb	r3, r2, r3, r0
 801027e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010282:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8010286:	2915      	cmp	r1, #21
 8010288:	dd3d      	ble.n	8010306 <st_sssa8_ch_nn_mat_mult_nt_t+0xb3a>
 801028a:	1e8a      	subs	r2, r1, #2
 801028c:	2301      	movs	r3, #1
 801028e:	3901      	subs	r1, #1
 8010290:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010292:	fa03 f202 	lsl.w	r2, r3, r2
 8010296:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010298:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801029c:	fb50 2303 	smmla	r3, r0, r3, r2
 80102a0:	fa43 f101 	asr.w	r1, r3, r1
 80102a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80102a6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80102aa:	440b      	add	r3, r1
 80102ac:	f303 0307 	ssat	r3, #8, r3
 80102b0:	9a01      	ldr	r2, [sp, #4]
 80102b2:	7013      	strb	r3, [r2, #0]
 80102b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80102ba:	2915      	cmp	r1, #21
 80102bc:	dd13      	ble.n	80102e6 <st_sssa8_ch_nn_mat_mult_nt_t+0xb1a>
 80102be:	1e8a      	subs	r2, r1, #2
 80102c0:	2301      	movs	r3, #1
 80102c2:	3901      	subs	r1, #1
 80102c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80102c6:	fa03 f202 	lsl.w	r2, r3, r2
 80102ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	fb50 2303 	smmla	r3, r0, r3, r2
 80102d2:	fa43 f101 	asr.w	r1, r3, r1
 80102d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	440b      	add	r3, r1
 80102dc:	f303 0307 	ssat	r3, #8, r3
 80102e0:	9a01      	ldr	r2, [sp, #4]
 80102e2:	7053      	strb	r3, [r2, #1]
 80102e4:	e4c4      	b.n	800fc70 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80102e6:	2900      	cmp	r1, #0
 80102e8:	dd56      	ble.n	8010398 <st_sssa8_ch_nn_mat_mult_nt_t+0xbcc>
 80102ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80102ee:	0058      	lsls	r0, r3, #1
 80102f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80102f2:	6812      	ldr	r2, [r2, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	fb50 2303 	smmla	r3, r0, r3, r2
 80102fa:	410b      	asrs	r3, r1
 80102fc:	f303 0307 	ssat	r3, #8, r3
 8010300:	9a01      	ldr	r2, [sp, #4]
 8010302:	7053      	strb	r3, [r2, #1]
 8010304:	e4b4      	b.n	800fc70 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8010306:	2900      	cmp	r1, #0
 8010308:	dd32      	ble.n	8010370 <st_sssa8_ch_nn_mat_mult_nt_t+0xba4>
 801030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801030c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801030e:	0058      	lsls	r0, r3, #1
 8010310:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010312:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010316:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801031a:	fb50 2303 	smmla	r3, r0, r3, r2
 801031e:	410b      	asrs	r3, r1
 8010320:	f303 0307 	ssat	r3, #8, r3
 8010324:	9a01      	ldr	r2, [sp, #4]
 8010326:	7013      	strb	r3, [r2, #0]
 8010328:	e7c4      	b.n	80102b4 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 801032a:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801032e:	e49b      	b.n	800fc68 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8010330:	f1bc 0f00 	cmp.w	ip, #0
 8010334:	dd0c      	ble.n	8010350 <st_sssa8_ch_nn_mat_mult_nt_t+0xb84>
 8010336:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 801033a:	682e      	ldr	r6, [r5, #0]
 801033c:	6827      	ldr	r7, [r4, #0]
 801033e:	fb5a 7706 	smmla	r7, sl, r6, r7
 8010342:	fa47 f60c 	asr.w	r6, r7, ip
 8010346:	f306 0607 	ssat	r6, #8, r6
 801034a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801034c:	54be      	strb	r6, [r7, r2]
 801034e:	e506      	b.n	800fd5e <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8010350:	f1cc 0c01 	rsb	ip, ip, #1
 8010354:	fa07 f70c 	lsl.w	r7, r7, ip
 8010358:	f307 071f 	ssat	r7, #32, r7
 801035c:	682e      	ldr	r6, [r5, #0]
 801035e:	fb57 f716 	smmulr	r7, r7, r6
 8010362:	6826      	ldr	r6, [r4, #0]
 8010364:	443e      	add	r6, r7
 8010366:	f306 0607 	ssat	r6, #8, r6
 801036a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801036c:	54be      	strb	r6, [r7, r2]
 801036e:	e4f6      	b.n	800fd5e <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8010370:	f1c1 0101 	rsb	r1, r1, #1
 8010374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010376:	408a      	lsls	r2, r1
 8010378:	f302 021f 	ssat	r2, #32, r2
 801037c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801037e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010382:	fb52 f213 	smmulr	r2, r2, r3
 8010386:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010388:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801038c:	4413      	add	r3, r2
 801038e:	f303 0307 	ssat	r3, #8, r3
 8010392:	9a01      	ldr	r2, [sp, #4]
 8010394:	7013      	strb	r3, [r2, #0]
 8010396:	e78d      	b.n	80102b4 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8010398:	f1c1 0101 	rsb	r1, r1, #1
 801039c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801039e:	408a      	lsls	r2, r1
 80103a0:	f302 021f 	ssat	r2, #32, r2
 80103a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	fb52 f213 	smmulr	r2, r2, r3
 80103ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4413      	add	r3, r2
 80103b2:	f303 0307 	ssat	r3, #8, r3
 80103b6:	9a01      	ldr	r2, [sp, #4]
 80103b8:	7053      	strb	r3, [r2, #1]
 80103ba:	e459      	b.n	800fc70 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 80103bc:	4602      	mov	r2, r0
 80103be:	9945      	ldr	r1, [sp, #276]	; 0x114
 80103c0:	4603      	mov	r3, r0
 80103c2:	e65a      	b.n	801007a <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 80103c4:	4684      	mov	ip, r0
 80103c6:	e717      	b.n	80101f8 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2c>
 80103c8:	4658      	mov	r0, fp
 80103ca:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 80103ce:	f04f 0800 	mov.w	r8, #0
 80103d2:	e6db      	b.n	801018c <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 80103d4:	462e      	mov	r6, r5
 80103d6:	e5ef      	b.n	800ffb8 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 80103d8:	9f45      	ldr	r7, [sp, #276]	; 0x114
 80103da:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80103dc:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 80103e0:	e5b6      	b.n	800ff50 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>
 80103e2:	bf00      	nop

080103e4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	b0c7      	sub	sp, #284	; 0x11c
 80103ea:	469c      	mov	ip, r3
 80103ec:	4688      	mov	r8, r1
 80103ee:	902d      	str	r0, [sp, #180]	; 0xb4
 80103f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80103f2:	9853      	ldr	r0, [sp, #332]	; 0x14c
 80103f4:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 80103f8:	f8bd 615c 	ldrh.w	r6, [sp, #348]	; 0x15c
 80103fc:	fb00 f003 	mul.w	r0, r0, r3
 8010400:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010402:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 8010406:	9131      	str	r1, [sp, #196]	; 0xc4
 8010408:	962e      	str	r6, [sp, #184]	; 0xb8
 801040a:	f8bd 1168 	ldrh.w	r1, [sp, #360]	; 0x168
 801040e:	f8bd 6160 	ldrh.w	r6, [sp, #352]	; 0x160
 8010412:	9243      	str	r2, [sp, #268]	; 0x10c
 8010414:	9006      	str	r0, [sp, #24]
 8010416:	9745      	str	r7, [sp, #276]	; 0x114
 8010418:	960c      	str	r6, [sp, #48]	; 0x30
 801041a:	910a      	str	r1, [sp, #40]	; 0x28
 801041c:	e9dd 455d 	ldrd	r4, r5, [sp, #372]	; 0x174
 8010420:	2d00      	cmp	r5, #0
 8010422:	bf18      	it	ne
 8010424:	462c      	movne	r4, r5
 8010426:	f8bd 5158 	ldrh.w	r5, [sp, #344]	; 0x158
 801042a:	2b01      	cmp	r3, #1
 801042c:	945d      	str	r4, [sp, #372]	; 0x174
 801042e:	f8bd 4150 	ldrh.w	r4, [sp, #336]	; 0x150
 8010432:	9532      	str	r5, [sp, #200]	; 0xc8
 8010434:	9444      	str	r4, [sp, #272]	; 0x110
 8010436:	f340 82aa 	ble.w	801098e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5aa>
 801043a:	3b02      	subs	r3, #2
 801043c:	fb00 f101 	mul.w	r1, r0, r1
 8010440:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 8010442:	4696      	mov	lr, r2
 8010444:	085b      	lsrs	r3, r3, #1
 8010446:	9139      	str	r1, [sp, #228]	; 0xe4
 8010448:	fb06 f404 	mul.w	r4, r6, r4
 801044c:	460e      	mov	r6, r1
 801044e:	3301      	adds	r3, #1
 8010450:	1081      	asrs	r1, r0, #2
 8010452:	1eaa      	subs	r2, r5, #2
 8010454:	9407      	str	r4, [sp, #28]
 8010456:	9337      	str	r3, [sp, #220]	; 0xdc
 8010458:	f1a0 0310 	sub.w	r3, r0, #16
 801045c:	9134      	str	r1, [sp, #208]	; 0xd0
 801045e:	f000 0103 	and.w	r1, r0, #3
 8010462:	9852      	ldr	r0, [sp, #328]	; 0x148
 8010464:	0852      	lsrs	r2, r2, #1
 8010466:	9135      	str	r1, [sp, #212]	; 0xd4
 8010468:	0041      	lsls	r1, r0, #1
 801046a:	9341      	str	r3, [sp, #260]	; 0x104
 801046c:	091b      	lsrs	r3, r3, #4
 801046e:	4608      	mov	r0, r1
 8010470:	9120      	str	r1, [sp, #128]	; 0x80
 8010472:	fb02 f104 	mul.w	r1, r2, r4
 8010476:	3301      	adds	r3, #1
 8010478:	fb02 0000 	mla	r0, r2, r0, r0
 801047c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801047e:	9040      	str	r0, [sp, #256]	; 0x100
 8010480:	0048      	lsls	r0, r1, #1
 8010482:	903f      	str	r0, [sp, #252]	; 0xfc
 8010484:	f06f 0003 	mvn.w	r0, #3
 8010488:	1b00      	subs	r0, r0, r4
 801048a:	9013      	str	r0, [sp, #76]	; 0x4c
 801048c:	1f20      	subs	r0, r4, #4
 801048e:	9011      	str	r0, [sp, #68]	; 0x44
 8010490:	1e68      	subs	r0, r5, #1
 8010492:	901d      	str	r0, [sp, #116]	; 0x74
 8010494:	9806      	ldr	r0, [sp, #24]
 8010496:	380f      	subs	r0, #15
 8010498:	900d      	str	r0, [sp, #52]	; 0x34
 801049a:	f005 0001 	and.w	r0, r5, #1
 801049e:	903a      	str	r0, [sp, #232]	; 0xe8
 80104a0:	0060      	lsls	r0, r4, #1
 80104a2:	901e      	str	r0, [sp, #120]	; 0x78
 80104a4:	0070      	lsls	r0, r6, #1
 80104a6:	9036      	str	r0, [sp, #216]	; 0xd8
 80104a8:	00b0      	lsls	r0, r6, #2
 80104aa:	903b      	str	r0, [sp, #236]	; 0xec
 80104ac:	9851      	ldr	r0, [sp, #324]	; 0x144
 80104ae:	3002      	adds	r0, #2
 80104b0:	9029      	str	r0, [sp, #164]	; 0xa4
 80104b2:	9850      	ldr	r0, [sp, #320]	; 0x140
 80104b4:	3004      	adds	r0, #4
 80104b6:	9026      	str	r0, [sp, #152]	; 0x98
 80104b8:	985c      	ldr	r0, [sp, #368]	; 0x170
 80104ba:	3004      	adds	r0, #4
 80104bc:	9027      	str	r0, [sp, #156]	; 0x9c
 80104be:	4670      	mov	r0, lr
 80104c0:	3004      	adds	r0, #4
 80104c2:	9030      	str	r0, [sp, #192]	; 0xc0
 80104c4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
 80104c8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80104ca:	9042      	str	r0, [sp, #264]	; 0x108
 80104cc:	0110      	lsls	r0, r2, #4
 80104ce:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80104d0:	0092      	lsls	r2, r2, #2
 80104d2:	903d      	str	r0, [sp, #244]	; 0xf4
 80104d4:	923e      	str	r2, [sp, #248]	; 0xf8
 80104d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80104d8:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 80104dc:	fb06 f207 	mul.w	r2, r6, r7
 80104e0:	923c      	str	r2, [sp, #240]	; 0xf0
 80104e2:	011a      	lsls	r2, r3, #4
 80104e4:	019b      	lsls	r3, r3, #6
 80104e6:	920e      	str	r2, [sp, #56]	; 0x38
 80104e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80104ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80104ec:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80104f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80104f4:	2b15      	cmp	r3, #21
 80104f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80104f8:	921c      	str	r2, [sp, #112]	; 0x70
 80104fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80104fc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8010500:	6812      	ldr	r2, [r2, #0]
 8010502:	9121      	str	r1, [sp, #132]	; 0x84
 8010504:	9222      	str	r2, [sp, #136]	; 0x88
 8010506:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010508:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	9123      	str	r1, [sp, #140]	; 0x8c
 8010510:	9224      	str	r2, [sp, #144]	; 0x90
 8010512:	f300 851b 	bgt.w	8010f4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb68>
 8010516:	2b00      	cmp	r3, #0
 8010518:	bfcc      	ite	gt
 801051a:	2300      	movgt	r3, #0
 801051c:	2301      	movle	r3, #1
 801051e:	425b      	negs	r3, r3
 8010520:	9318      	str	r3, [sp, #96]	; 0x60
 8010522:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010524:	2b15      	cmp	r3, #21
 8010526:	f300 84a3 	bgt.w	8010e70 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa8c>
 801052a:	2b00      	cmp	r3, #0
 801052c:	bfcc      	ite	gt
 801052e:	2300      	movgt	r3, #0
 8010530:	2301      	movle	r3, #1
 8010532:	425b      	negs	r3, r3
 8010534:	9319      	str	r3, [sp, #100]	; 0x64
 8010536:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8010538:	2b00      	cmp	r3, #0
 801053a:	f000 849f 	beq.w	8010e7c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa98>
 801053e:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8010540:	2b00      	cmp	r3, #0
 8010542:	f040 84a9 	bne.w	8010e98 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab4>
 8010546:	461c      	mov	r4, r3
 8010548:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801054a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801054e:	18a2      	adds	r2, r4, r2
 8010550:	921a      	str	r2, [sp, #104]	; 0x68
 8010552:	680a      	ldr	r2, [r1, #0]
 8010554:	4413      	add	r3, r2
 8010556:	931b      	str	r3, [sp, #108]	; 0x6c
 8010558:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 81f3 	beq.w	8010946 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x562>
 8010560:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010562:	2301      	movs	r3, #1
 8010564:	3a02      	subs	r2, #2
 8010566:	fa03 f202 	lsl.w	r2, r3, r2
 801056a:	922a      	str	r2, [sp, #168]	; 0xa8
 801056c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801056e:	3a02      	subs	r2, #2
 8010570:	4093      	lsls	r3, r2
 8010572:	932b      	str	r3, [sp, #172]	; 0xac
 8010574:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010576:	f023 030f 	bic.w	r3, r3, #15
 801057a:	3314      	adds	r3, #20
 801057c:	9312      	str	r3, [sp, #72]	; 0x48
 801057e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010580:	932c      	str	r3, [sp, #176]	; 0xb0
 8010582:	9304      	str	r3, [sp, #16]
 8010584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010586:	9325      	str	r3, [sp, #148]	; 0x94
 8010588:	2300      	movs	r3, #0
 801058a:	9333      	str	r3, [sp, #204]	; 0xcc
 801058c:	9b06      	ldr	r3, [sp, #24]
 801058e:	3b04      	subs	r3, #4
 8010590:	9310      	str	r3, [sp, #64]	; 0x40
 8010592:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	9338      	str	r3, [sp, #224]	; 0xe0
 801059a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801059c:	2b00      	cmp	r3, #0
 801059e:	f340 81c3 	ble.w	8010928 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x544>
 80105a2:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80105a4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80105a6:	3301      	adds	r3, #1
 80105a8:	18cb      	adds	r3, r1, r3
 80105aa:	9314      	str	r3, [sp, #80]	; 0x50
 80105ac:	1c4b      	adds	r3, r1, #1
 80105ae:	9315      	str	r3, [sp, #84]	; 0x54
 80105b0:	9b07      	ldr	r3, [sp, #28]
 80105b2:	4413      	add	r3, r2
 80105b4:	9316      	str	r3, [sp, #88]	; 0x58
 80105b6:	2300      	movs	r3, #0
 80105b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80105ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 82ee 	beq.w	8010b9e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ba>
 80105c2:	9b06      	ldr	r3, [sp, #24]
 80105c4:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80105c8:	3b03      	subs	r3, #3
 80105ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80105cc:	4665      	mov	r5, ip
 80105ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80105d0:	4693      	mov	fp, r2
 80105d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80105d4:	9304      	str	r3, [sp, #16]
 80105d6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80105d8:	9303      	str	r3, [sp, #12]
 80105da:	2300      	movs	r3, #0
 80105dc:	9305      	str	r3, [sp, #20]
 80105de:	9907      	ldr	r1, [sp, #28]
 80105e0:	9b04      	ldr	r3, [sp, #16]
 80105e2:	1a5f      	subs	r7, r3, r1
 80105e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80105e6:	2900      	cmp	r1, #0
 80105e8:	f340 826d 	ble.w	8010ac6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e2>
 80105ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80105ee:	1d1c      	adds	r4, r3, #4
 80105f0:	9803      	ldr	r0, [sp, #12]
 80105f2:	18cb      	adds	r3, r1, r3
 80105f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80105f8:	9708      	str	r7, [sp, #32]
 80105fa:	9302      	str	r3, [sp, #8]
 80105fc:	f85a 6004 	ldr.w	r6, [sl, r4]
 8010600:	eb0a 0704 	add.w	r7, sl, r4
 8010604:	fa2f f186 	sxtb16	r1, r6
 8010608:	6803      	ldr	r3, [r0, #0]
 801060a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801060e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8010612:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8010616:	fa2f f696 	sxtb16	r6, r6, ror #8
 801061a:	fb21 2203 	smlad	r2, r1, r3, r2
 801061e:	fb26 2208 	smlad	r2, r6, r8, r2
 8010622:	fb21 c109 	smlad	r1, r1, r9, ip
 8010626:	fb26 110e 	smlad	r1, r6, lr, r1
 801062a:	f854 6c04 	ldr.w	r6, [r4, #-4]
 801062e:	fa2f fc86 	sxtb16	ip, r6
 8010632:	fa2f f696 	sxtb16	r6, r6, ror #8
 8010636:	fb2c b303 	smlad	r3, ip, r3, fp
 801063a:	fb2c 5509 	smlad	r5, ip, r9, r5
 801063e:	fb26 3308 	smlad	r3, r6, r8, r3
 8010642:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8010646:	f8d0 b014 	ldr.w	fp, [r0, #20]
 801064a:	fb26 5e0e 	smlad	lr, r6, lr, r5
 801064e:	687d      	ldr	r5, [r7, #4]
 8010650:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8010654:	fa2f f685 	sxtb16	r6, r5
 8010658:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801065c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010660:	fb26 2208 	smlad	r2, r6, r8, r2
 8010664:	fb25 220b 	smlad	r2, r5, fp, r2
 8010668:	fb26 160c 	smlad	r6, r6, ip, r1
 801066c:	fb25 6609 	smlad	r6, r5, r9, r6
 8010670:	6821      	ldr	r1, [r4, #0]
 8010672:	fa2f f581 	sxtb16	r5, r1
 8010676:	fa2f f191 	sxtb16	r1, r1, ror #8
 801067a:	fb25 3808 	smlad	r8, r5, r8, r3
 801067e:	fb25 ee0c 	smlad	lr, r5, ip, lr
 8010682:	fb21 880b 	smlad	r8, r1, fp, r8
 8010686:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801068a:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 801068e:	fb21 e909 	smlad	r9, r1, r9, lr
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
 8010698:	fa2f f583 	sxtb16	r5, r3
 801069c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801069e:	fa2f f393 	sxtb16	r3, r3, ror #8
 80106a2:	fb25 220b 	smlad	r2, r5, fp, r2
 80106a6:	fb23 220c 	smlad	r2, r3, ip, r2
 80106aa:	fb25 650e 	smlad	r5, r5, lr, r6
 80106ae:	fb23 5301 	smlad	r3, r3, r1, r5
 80106b2:	6866      	ldr	r6, [r4, #4]
 80106b4:	fa2f f586 	sxtb16	r5, r6
 80106b8:	fa2f f696 	sxtb16	r6, r6, ror #8
 80106bc:	fb25 8b0b 	smlad	fp, r5, fp, r8
 80106c0:	fb25 990e 	smlad	r9, r5, lr, r9
 80106c4:	fb26 b80c 	smlad	r8, r6, ip, fp
 80106c8:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
 80106cc:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 80106d0:	fb26 9101 	smlad	r1, r6, r1, r9
 80106d4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80106d8:	3040      	adds	r0, #64	; 0x40
 80106da:	fa2f f58c 	sxtb16	r5, ip
 80106de:	f850 9c08 	ldr.w	r9, [r0, #-8]
 80106e2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80106e6:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80106ea:	fb25 220e 	smlad	r2, r5, lr, r2
 80106ee:	fb2c 220b 	smlad	r2, ip, fp, r2
 80106f2:	fb25 3309 	smlad	r3, r5, r9, r3
 80106f6:	fb2c 3c07 	smlad	ip, ip, r7, r3
 80106fa:	68a5      	ldr	r5, [r4, #8]
 80106fc:	fa2f f385 	sxtb16	r3, r5
 8010700:	fa2f f595 	sxtb16	r5, r5, ror #8
 8010704:	fb23 880e 	smlad	r8, r3, lr, r8
 8010708:	fb23 1109 	smlad	r1, r3, r9, r1
 801070c:	fb25 8b0b 	smlad	fp, r5, fp, r8
 8010710:	fb25 1507 	smlad	r5, r5, r7, r1
 8010714:	3410      	adds	r4, #16
 8010716:	9b02      	ldr	r3, [sp, #8]
 8010718:	429c      	cmp	r4, r3
 801071a:	f47f af6f 	bne.w	80105fc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x218>
 801071e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010720:	9903      	ldr	r1, [sp, #12]
 8010722:	9f08      	ldr	r7, [sp, #32]
 8010724:	469a      	mov	sl, r3
 8010726:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010728:	441f      	add	r7, r3
 801072a:	4401      	add	r1, r0
 801072c:	9103      	str	r1, [sp, #12]
 801072e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010730:	459a      	cmp	sl, r3
 8010732:	f280 81c6 	bge.w	8010ac2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6de>
 8010736:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010738:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801073c:	eba3 030a 	sub.w	r3, r3, sl
 8010740:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8010744:	089b      	lsrs	r3, r3, #2
 8010746:	4619      	mov	r1, r3
 8010748:	9308      	str	r3, [sp, #32]
 801074a:	9b03      	ldr	r3, [sp, #12]
 801074c:	3101      	adds	r1, #1
 801074e:	eb07 0981 	add.w	r9, r7, r1, lsl #2
 8010752:	9102      	str	r1, [sp, #8]
 8010754:	f857 1b04 	ldr.w	r1, [r7], #4
 8010758:	3310      	adds	r3, #16
 801075a:	fa2f f081 	sxtb16	r0, r1
 801075e:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8010762:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8010766:	f853 ec08 	ldr.w	lr, [r3, #-8]
 801076a:	f853 4c04 	ldr.w	r4, [r3, #-4]
 801076e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8010772:	fb20 2208 	smlad	r2, r0, r8, r2
 8010776:	fb21 2206 	smlad	r2, r1, r6, r2
 801077a:	fb20 cc0e 	smlad	ip, r0, lr, ip
 801077e:	fb21 cc04 	smlad	ip, r1, r4, ip
 8010782:	f857 100a 	ldr.w	r1, [r7, sl]
 8010786:	fa2f f081 	sxtb16	r0, r1
 801078a:	fa2f f191 	sxtb16	r1, r1, ror #8
 801078e:	fb20 bb08 	smlad	fp, r0, r8, fp
 8010792:	fb20 550e 	smlad	r5, r0, lr, r5
 8010796:	fb21 bb06 	smlad	fp, r1, r6, fp
 801079a:	fb21 5504 	smlad	r5, r1, r4, r5
 801079e:	454f      	cmp	r7, r9
 80107a0:	d1d8      	bne.n	8010754 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x370>
 80107a2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80107a6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80107aa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80107ae:	9908      	ldr	r1, [sp, #32]
 80107b0:	9303      	str	r3, [sp, #12]
 80107b2:	f10a 0304 	add.w	r3, sl, #4
 80107b6:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80107ba:	9e06      	ldr	r6, [sp, #24]
 80107bc:	4556      	cmp	r6, sl
 80107be:	dd58      	ble.n	8010872 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x48e>
 80107c0:	9c03      	ldr	r4, [sp, #12]
 80107c2:	f999 3000 	ldrsb.w	r3, [r9]
 80107c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80107ca:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80107ce:	9f07      	ldr	r7, [sp, #28]
 80107d0:	fb10 2203 	smlabb	r2, r0, r3, r2
 80107d4:	fb11 cc03 	smlabb	ip, r1, r3, ip
 80107d8:	f919 3007 	ldrsb.w	r3, [r9, r7]
 80107dc:	fb10 bb03 	smlabb	fp, r0, r3, fp
 80107e0:	fb11 5503 	smlabb	r5, r1, r3, r5
 80107e4:	f10a 0301 	add.w	r3, sl, #1
 80107e8:	42b3      	cmp	r3, r6
 80107ea:	da3b      	bge.n	8010864 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 80107ec:	eb09 0307 	add.w	r3, r9, r7
 80107f0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80107f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80107f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80107fc:	fb11 5503 	smlabb	r5, r1, r3, r5
 8010800:	fb10 bb03 	smlabb	fp, r0, r3, fp
 8010804:	f999 3001 	ldrsb.w	r3, [r9, #1]
 8010808:	fb11 cc03 	smlabb	ip, r1, r3, ip
 801080c:	f109 0102 	add.w	r1, r9, #2
 8010810:	fb10 2203 	smlabb	r2, r0, r3, r2
 8010814:	f10a 0302 	add.w	r3, sl, #2
 8010818:	42b3      	cmp	r3, r6
 801081a:	da23      	bge.n	8010864 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 801081c:	57cb      	ldrsb	r3, [r1, r7]
 801081e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8010822:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8010826:	fb10 bb03 	smlabb	fp, r0, r3, fp
 801082a:	fb11 5503 	smlabb	r5, r1, r3, r5
 801082e:	f999 3002 	ldrsb.w	r3, [r9, #2]
 8010832:	fb11 cc03 	smlabb	ip, r1, r3, ip
 8010836:	f109 0103 	add.w	r1, r9, #3
 801083a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801083e:	f10a 0303 	add.w	r3, sl, #3
 8010842:	42b3      	cmp	r3, r6
 8010844:	da0e      	bge.n	8010864 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x480>
 8010846:	57cb      	ldrsb	r3, [r1, r7]
 8010848:	f999 0003 	ldrsb.w	r0, [r9, #3]
 801084c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8010850:	fb11 2200 	smlabb	r2, r1, r0, r2
 8010854:	fb11 bb03 	smlabb	fp, r1, r3, fp
 8010858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801085c:	fb11 cc00 	smlabb	ip, r1, r0, ip
 8010860:	fb11 5503 	smlabb	r5, r1, r3, r5
 8010864:	9b06      	ldr	r3, [sp, #24]
 8010866:	9903      	ldr	r1, [sp, #12]
 8010868:	eba3 030a 	sub.w	r3, r3, sl
 801086c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010870:	9303      	str	r3, [sp, #12]
 8010872:	9904      	ldr	r1, [sp, #16]
 8010874:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010876:	9b05      	ldr	r3, [sp, #20]
 8010878:	4401      	add	r1, r0
 801087a:	3301      	adds	r3, #1
 801087c:	9104      	str	r1, [sp, #16]
 801087e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010880:	9305      	str	r3, [sp, #20]
 8010882:	4299      	cmp	r1, r3
 8010884:	f47f aeab 	bne.w	80105de <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1fa>
 8010888:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801088a:	2b00      	cmp	r3, #0
 801088c:	f040 8139 	bne.w	8010b02 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x71e>
 8010890:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010892:	0052      	lsls	r2, r2, #1
 8010894:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010896:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801089a:	fb52 1203 	smmla	r2, r2, r3, r1
 801089e:	fb5b 1b03 	smmla	fp, fp, r3, r1
 80108a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80108a4:	410a      	asrs	r2, r1
 80108a6:	f302 0307 	ssat	r3, #8, r2
 80108aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80108ac:	fa4b fb01 	asr.w	fp, fp, r1
 80108b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108b4:	f30b 0307 	ssat	r3, #8, fp
 80108b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f040 8103 	bne.w	8010acc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6e8>
 80108c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80108c8:	ea4f 084c 	mov.w	r8, ip, lsl #1
 80108cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108ce:	006c      	lsls	r4, r5, #1
 80108d0:	fb58 2803 	smmla	r8, r8, r3, r2
 80108d4:	fb54 2403 	smmla	r4, r4, r3, r2
 80108d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80108da:	fa48 f802 	asr.w	r8, r8, r2
 80108de:	f308 0307 	ssat	r3, #8, r8
 80108e2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80108e4:	4114      	asrs	r4, r2
 80108e6:	700b      	strb	r3, [r1, #0]
 80108e8:	f304 0307 	ssat	r3, #8, r4
 80108ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108ee:	7013      	strb	r3, [r2, #0]
 80108f0:	460a      	mov	r2, r1
 80108f2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80108f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108f6:	440a      	add	r2, r1
 80108f8:	3302      	adds	r3, #2
 80108fa:	9215      	str	r2, [sp, #84]	; 0x54
 80108fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8010900:	440a      	add	r2, r1
 8010902:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010904:	9214      	str	r2, [sp, #80]	; 0x50
 8010906:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010908:	440a      	add	r2, r1
 801090a:	9216      	str	r2, [sp, #88]	; 0x58
 801090c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801090e:	4293      	cmp	r3, r2
 8010910:	f6ff ae53 	blt.w	80105ba <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1d6>
 8010914:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8010916:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8010918:	9940      	ldr	r1, [sp, #256]	; 0x100
 801091a:	4413      	add	r3, r2
 801091c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801091e:	440a      	add	r2, r1
 8010920:	9225      	str	r2, [sp, #148]	; 0x94
 8010922:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010924:	18d3      	adds	r3, r2, r3
 8010926:	9304      	str	r3, [sp, #16]
 8010928:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801092a:	2b00      	cmp	r3, #0
 801092c:	f040 813d 	bne.w	8010baa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7c6>
 8010930:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010932:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8010934:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010936:	440a      	add	r2, r1
 8010938:	3301      	adds	r3, #1
 801093a:	922c      	str	r2, [sp, #176]	; 0xb0
 801093c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801093e:	9333      	str	r3, [sp, #204]	; 0xcc
 8010940:	4293      	cmp	r3, r2
 8010942:	f47f ae26 	bne.w	8010592 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1ae>
 8010946:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8010948:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801094a:	4413      	add	r3, r2
 801094c:	932f      	str	r3, [sp, #188]	; 0xbc
 801094e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010950:	3302      	adds	r3, #2
 8010952:	9328      	str	r3, [sp, #160]	; 0xa0
 8010954:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8010956:	b11b      	cbz	r3, 8010960 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x57c>
 8010958:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 801095a:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801095c:	4413      	add	r3, r2
 801095e:	935d      	str	r3, [sp, #372]	; 0x174
 8010960:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010962:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8010964:	3304      	adds	r3, #4
 8010966:	9329      	str	r3, [sp, #164]	; 0xa4
 8010968:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801096a:	3308      	adds	r3, #8
 801096c:	9326      	str	r3, [sp, #152]	; 0x98
 801096e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010970:	3308      	adds	r3, #8
 8010972:	9327      	str	r3, [sp, #156]	; 0x9c
 8010974:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010976:	3308      	adds	r3, #8
 8010978:	9330      	str	r3, [sp, #192]	; 0xc0
 801097a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801097c:	4293      	cmp	r3, r2
 801097e:	f47f adb4 	bne.w	80104ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x106>
 8010982:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010984:	e9dd 2136 	ldrd	r2, r1, [sp, #216]	; 0xd8
 8010988:	fb01 3302 	mla	r3, r1, r2, r3
 801098c:	9331      	str	r3, [sp, #196]	; 0xc4
 801098e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010990:	07db      	lsls	r3, r3, #31
 8010992:	f140 8092 	bpl.w	8010aba <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 8010996:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 808e 	beq.w	8010aba <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 801099e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80109a0:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 80109a4:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80109a6:	4499      	add	r9, r3
 80109a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80109aa:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80109b2:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 80109b6:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80109b8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80109bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80109c0:	4413      	add	r3, r2
 80109c2:	9a51      	ldr	r2, [sp, #324]	; 0x144
 80109c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80109c8:	9308      	str	r3, [sp, #32]
 80109ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d074      	beq.n	8010aba <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6d6>
 80109d0:	9953      	ldr	r1, [sp, #332]	; 0x14c
 80109d2:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80109d4:	9e5b      	ldr	r6, [sp, #364]	; 0x16c
 80109d6:	fb01 f202 	mul.w	r2, r1, r2
 80109da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80109de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80109e0:	fb01 f202 	mul.w	r2, r1, r2
 80109e4:	9906      	ldr	r1, [sp, #24]
 80109e6:	9209      	str	r2, [sp, #36]	; 0x24
 80109e8:	468e      	mov	lr, r1
 80109ea:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80109ec:	440a      	add	r2, r1
 80109ee:	4693      	mov	fp, r2
 80109f0:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80109f2:	fb02 f303 	mul.w	r3, r2, r3
 80109f6:	9305      	str	r3, [sp, #20]
 80109f8:	2300      	movs	r3, #0
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	2300      	movs	r3, #0
 80109fe:	f8cd b008 	str.w	fp, [sp, #8]
 8010a02:	f8cd b018 	str.w	fp, [sp, #24]
 8010a06:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8010a0a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010a0e:	9304      	str	r3, [sp, #16]
 8010a10:	9b07      	ldr	r3, [sp, #28]
 8010a12:	6819      	ldr	r1, [r3, #0]
 8010a14:	f1bb 0f00 	cmp.w	fp, #0
 8010a18:	d01e      	beq.n	8010a58 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x674>
 8010a1a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8010a1e:	2700      	movs	r7, #0
 8010a20:	9d02      	ldr	r5, [sp, #8]
 8010a22:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
 8010a26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010a2a:	f1be 0f00 	cmp.w	lr, #0
 8010a2e:	eba5 020e 	sub.w	r2, r5, lr
 8010a32:	dd0b      	ble.n	8010a4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 8010a34:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010a38:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8010a3c:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8010a40:	1b9b      	subs	r3, r3, r6
 8010a42:	42aa      	cmp	r2, r5
 8010a44:	fb04 1103 	mla	r1, r4, r3, r1
 8010a48:	d1f6      	bne.n	8010a38 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x654>
 8010a4a:	44f4      	add	ip, lr
 8010a4c:	3701      	adds	r7, #1
 8010a4e:	4445      	add	r5, r8
 8010a50:	45bb      	cmp	fp, r7
 8010a52:	d1ea      	bne.n	8010a2a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x646>
 8010a54:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8010a58:	9b08      	ldr	r3, [sp, #32]
 8010a5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8010a5e:	2815      	cmp	r0, #21
 8010a60:	f340 828f 	ble.w	8010f82 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb9e>
 8010a64:	1e83      	subs	r3, r0, #2
 8010a66:	1e42      	subs	r2, r0, #1
 8010a68:	2001      	movs	r0, #1
 8010a6a:	4098      	lsls	r0, r3
 8010a6c:	f8da 3000 	ldr.w	r3, [sl]
 8010a70:	fb51 0303 	smmla	r3, r1, r3, r0
 8010a74:	fa43 f202 	asr.w	r2, r3, r2
 8010a78:	f8d9 3000 	ldr.w	r3, [r9]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f303 0307 	ssat	r3, #8, r3
 8010a82:	f888 3000 	strb.w	r3, [r8]
 8010a86:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8010a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a8a:	4490      	add	r8, r2
 8010a8c:	9a02      	ldr	r2, [sp, #8]
 8010a8e:	9b04      	ldr	r3, [sp, #16]
 8010a90:	440a      	add	r2, r1
 8010a92:	3301      	adds	r3, #1
 8010a94:	9202      	str	r2, [sp, #8]
 8010a96:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d1b8      	bne.n	8010a10 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 8010a9e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010aa0:	9905      	ldr	r1, [sp, #20]
 8010aa2:	9b03      	ldr	r3, [sp, #12]
 8010aa4:	440a      	add	r2, r1
 8010aa6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	9228      	str	r2, [sp, #160]	; 0xa0
 8010aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ab0:	9303      	str	r3, [sp, #12]
 8010ab2:	4493      	add	fp, r2
 8010ab4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d1a0      	bne.n	80109fc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x618>
 8010aba:	2000      	movs	r0, #0
 8010abc:	b047      	add	sp, #284	; 0x11c
 8010abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac2:	46b9      	mov	r9, r7
 8010ac4:	e679      	b.n	80107ba <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3d6>
 8010ac6:	f04f 0a00 	mov.w	sl, #0
 8010aca:	e630      	b.n	801072e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x34a>
 8010acc:	3301      	adds	r3, #1
 8010ace:	d034      	beq.n	8010b3a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x756>
 8010ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ad2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010ad4:	fb5c 2803 	smmla	r8, ip, r3, r2
 8010ad8:	fb55 2403 	smmla	r4, r5, r3, r2
 8010adc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010ade:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	fa48 f203 	asr.w	r2, r8, r3
 8010ae6:	440a      	add	r2, r1
 8010ae8:	f302 0207 	ssat	r2, #8, r2
 8010aec:	fa44 f303 	asr.w	r3, r4, r3
 8010af0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010af2:	440b      	add	r3, r1
 8010af4:	7002      	strb	r2, [r0, #0]
 8010af6:	f303 0307 	ssat	r3, #8, r3
 8010afa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010afc:	7013      	strb	r3, [r2, #0]
 8010afe:	4602      	mov	r2, r0
 8010b00:	e6f7      	b.n	80108f2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x50e>
 8010b02:	3301      	adds	r3, #1
 8010b04:	d02e      	beq.n	8010b64 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x780>
 8010b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b08:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010b0a:	fb52 1203 	smmla	r2, r2, r3, r1
 8010b0e:	fb5b 1b03 	smmla	fp, fp, r3, r1
 8010b12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b14:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010b16:	3b01      	subs	r3, #1
 8010b18:	411a      	asrs	r2, r3
 8010b1a:	440a      	add	r2, r1
 8010b1c:	f302 0207 	ssat	r2, #8, r2
 8010b20:	fa4b fb03 	asr.w	fp, fp, r3
 8010b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b26:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010b2a:	eb0b 0301 	add.w	r3, fp, r1
 8010b2e:	f303 0307 	ssat	r3, #8, r3
 8010b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b34:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b38:	e6c1      	b.n	80108be <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8010b3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010b3c:	f1c3 0301 	rsb	r3, r3, #1
 8010b40:	fa0c f203 	lsl.w	r2, ip, r3
 8010b44:	f302 021f 	ssat	r2, #32, r2
 8010b48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010b4a:	fb52 f211 	smmulr	r2, r2, r1
 8010b4e:	fa05 f303 	lsl.w	r3, r5, r3
 8010b52:	f303 031f 	ssat	r3, #32, r3
 8010b56:	fb53 f311 	smmulr	r3, r3, r1
 8010b5a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010b5c:	440a      	add	r2, r1
 8010b5e:	f302 0207 	ssat	r2, #8, r2
 8010b62:	e7c5      	b.n	8010af0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x70c>
 8010b64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b66:	f1c3 0301 	rsb	r3, r3, #1
 8010b6a:	409a      	lsls	r2, r3
 8010b6c:	f302 021f 	ssat	r2, #32, r2
 8010b70:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010b72:	fb52 f211 	smmulr	r2, r2, r1
 8010b76:	fa0b f303 	lsl.w	r3, fp, r3
 8010b7a:	f303 031f 	ssat	r3, #32, r3
 8010b7e:	fb53 f311 	smmulr	r3, r3, r1
 8010b82:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010b84:	440a      	add	r2, r1
 8010b86:	f302 0207 	ssat	r2, #8, r2
 8010b8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010b8c:	440b      	add	r3, r1
 8010b8e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8010b92:	f303 0307 	ssat	r3, #8, r3
 8010b96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010b9c:	e68f      	b.n	80108be <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4da>
 8010b9e:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8010ba2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010ba4:	4665      	mov	r5, ip
 8010ba6:	4693      	mov	fp, r2
 8010ba8:	e66e      	b.n	8010888 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a4>
 8010baa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	f000 8143 	beq.w	8010e38 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa54>
 8010bb2:	9b04      	ldr	r3, [sp, #16]
 8010bb4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010bb6:	4413      	add	r3, r2
 8010bb8:	9304      	str	r3, [sp, #16]
 8010bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f000 8141 	beq.w	8010e44 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa60>
 8010bc2:	9b06      	ldr	r3, [sp, #24]
 8010bc4:	f8dd 9174 	ldr.w	r9, [sp, #372]	; 0x174
 8010bc8:	3b03      	subs	r3, #3
 8010bca:	9308      	str	r3, [sp, #32]
 8010bcc:	9b04      	ldr	r3, [sp, #16]
 8010bce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010bd2:	9302      	str	r3, [sp, #8]
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	9303      	str	r3, [sp, #12]
 8010bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bda:	9a02      	ldr	r2, [sp, #8]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	4611      	mov	r1, r2
 8010be0:	f340 8100 	ble.w	8010de4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa00>
 8010be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010be6:	464b      	mov	r3, r9
 8010be8:	188c      	adds	r4, r1, r2
 8010bea:	6808      	ldr	r0, [r1, #0]
 8010bec:	681d      	ldr	r5, [r3, #0]
 8010bee:	fa2f f280 	sxtb16	r2, r0
 8010bf2:	fa2f f090 	sxtb16	r0, r0, ror #8
 8010bf6:	fb22 a505 	smlad	r5, r2, r5, sl
 8010bfa:	685e      	ldr	r6, [r3, #4]
 8010bfc:	fb20 5706 	smlad	r7, r0, r6, r5
 8010c00:	689d      	ldr	r5, [r3, #8]
 8010c02:	fb22 b205 	smlad	r2, r2, r5, fp
 8010c06:	68dd      	ldr	r5, [r3, #12]
 8010c08:	fb20 2005 	smlad	r0, r0, r5, r2
 8010c0c:	684a      	ldr	r2, [r1, #4]
 8010c0e:	691e      	ldr	r6, [r3, #16]
 8010c10:	fa2f f582 	sxtb16	r5, r2
 8010c14:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010c18:	fb25 7606 	smlad	r6, r5, r6, r7
 8010c1c:	695f      	ldr	r7, [r3, #20]
 8010c1e:	fb22 6607 	smlad	r6, r2, r7, r6
 8010c22:	699f      	ldr	r7, [r3, #24]
 8010c24:	fb25 0007 	smlad	r0, r5, r7, r0
 8010c28:	69dd      	ldr	r5, [r3, #28]
 8010c2a:	fb22 0205 	smlad	r2, r2, r5, r0
 8010c2e:	688f      	ldr	r7, [r1, #8]
 8010c30:	6a1d      	ldr	r5, [r3, #32]
 8010c32:	fa2f f087 	sxtb16	r0, r7
 8010c36:	fa2f f797 	sxtb16	r7, r7, ror #8
 8010c3a:	fb20 6505 	smlad	r5, r0, r5, r6
 8010c3e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8010c40:	fb27 5606 	smlad	r6, r7, r6, r5
 8010c44:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8010c48:	fb20 200b 	smlad	r0, r0, fp, r2
 8010c4c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8010c50:	fb27 000b 	smlad	r0, r7, fp, r0
 8010c54:	68ca      	ldr	r2, [r1, #12]
 8010c56:	3340      	adds	r3, #64	; 0x40
 8010c58:	fa2f fb82 	sxtb16	fp, r2
 8010c5c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8010c60:	3110      	adds	r1, #16
 8010c62:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 8010c66:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8010c6a:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8010c6e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8010c72:	fb2b 6505 	smlad	r5, fp, r5, r6
 8010c76:	fb22 5a0a 	smlad	sl, r2, sl, r5
 8010c7a:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 8010c7e:	fb22 bb07 	smlad	fp, r2, r7, fp
 8010c82:	42a1      	cmp	r1, r4
 8010c84:	d1b1      	bne.n	8010bea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x806>
 8010c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c88:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8010c8c:	4499      	add	r9, r3
 8010c8e:	9b08      	ldr	r3, [sp, #32]
 8010c90:	459e      	cmp	lr, r3
 8010c92:	f280 80a5 	bge.w	8010de0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9fc>
 8010c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c98:	4649      	mov	r1, r9
 8010c9a:	eba3 080e 	sub.w	r8, r3, lr
 8010c9e:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8010ca2:	f108 0301 	add.w	r3, r8, #1
 8010ca6:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8010caa:	9305      	str	r3, [sp, #20]
 8010cac:	f854 3b04 	ldr.w	r3, [r4], #4
 8010cb0:	3110      	adds	r1, #16
 8010cb2:	fa2f f283 	sxtb16	r2, r3
 8010cb6:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8010cba:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8010cbe:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8010cc2:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8010cc6:	fa2f f393 	sxtb16	r3, r3, ror #8
 8010cca:	fb22 a000 	smlad	r0, r2, r0, sl
 8010cce:	fb23 0a07 	smlad	sl, r3, r7, r0
 8010cd2:	fb22 b206 	smlad	r2, r2, r6, fp
 8010cd6:	fb23 2b05 	smlad	fp, r3, r5, r2
 8010cda:	4564      	cmp	r4, ip
 8010cdc:	d1e6      	bne.n	8010cac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c8>
 8010cde:	9b05      	ldr	r3, [sp, #20]
 8010ce0:	f10e 0e04 	add.w	lr, lr, #4
 8010ce4:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8010ce8:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 8010cec:	9906      	ldr	r1, [sp, #24]
 8010cee:	4571      	cmp	r1, lr
 8010cf0:	dd38      	ble.n	8010d64 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x980>
 8010cf2:	f99c 3000 	ldrsb.w	r3, [ip]
 8010cf6:	f8b9 2000 	ldrh.w	r2, [r9]
 8010cfa:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8010cfe:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8010d02:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8010d06:	f10e 0301 	add.w	r3, lr, #1
 8010d0a:	4299      	cmp	r1, r3
 8010d0c:	dd25      	ble.n	8010d5a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8010d0e:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8010d12:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8010d16:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8010d1a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 8010d1e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8010d22:	f10e 0302 	add.w	r3, lr, #2
 8010d26:	4299      	cmp	r1, r3
 8010d28:	dd17      	ble.n	8010d5a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8010d2a:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8010d2e:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8010d32:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8010d36:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8010d3a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8010d3e:	f10e 0303 	add.w	r3, lr, #3
 8010d42:	4299      	cmp	r1, r3
 8010d44:	dd09      	ble.n	8010d5a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x976>
 8010d46:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8010d4a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8010d4e:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8010d52:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8010d56:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8010d5a:	9b06      	ldr	r3, [sp, #24]
 8010d5c:	eba3 0e0e 	sub.w	lr, r3, lr
 8010d60:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8010d64:	9a02      	ldr	r2, [sp, #8]
 8010d66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	440a      	add	r2, r1
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	9202      	str	r2, [sp, #8]
 8010d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	f47f af2f 	bne.w	8010bd8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f4>
 8010d7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010d7c:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8010d80:	2915      	cmp	r1, #21
 8010d82:	dd45      	ble.n	8010e10 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa2c>
 8010d84:	1e8b      	subs	r3, r1, #2
 8010d86:	2201      	movs	r2, #1
 8010d88:	3901      	subs	r1, #1
 8010d8a:	409a      	lsls	r2, r3
 8010d8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010d8e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010d92:	fb5a 2303 	smmla	r3, sl, r3, r2
 8010d96:	fa43 f101 	asr.w	r1, r3, r1
 8010d9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010d9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010da0:	440b      	add	r3, r1
 8010da2:	f303 0307 	ssat	r3, #8, r3
 8010da6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010da8:	7013      	strb	r3, [r2, #0]
 8010daa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010dac:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010db0:	2915      	cmp	r1, #21
 8010db2:	dd1b      	ble.n	8010dec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa08>
 8010db4:	1e8b      	subs	r3, r1, #2
 8010db6:	2201      	movs	r2, #1
 8010db8:	3901      	subs	r1, #1
 8010dba:	409a      	lsls	r2, r3
 8010dbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	fb5b 2303 	smmla	r3, fp, r3, r2
 8010dc4:	fa43 f101 	asr.w	r1, r3, r1
 8010dc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	440b      	add	r3, r1
 8010dce:	f303 0307 	ssat	r3, #8, r3
 8010dd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010dd4:	7053      	strb	r3, [r2, #1]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8010dda:	4413      	add	r3, r2
 8010ddc:	9325      	str	r3, [sp, #148]	; 0x94
 8010dde:	e5a7      	b.n	8010930 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x54c>
 8010de0:	46a4      	mov	ip, r4
 8010de2:	e783      	b.n	8010cec <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x908>
 8010de4:	4614      	mov	r4, r2
 8010de6:	f04f 0e00 	mov.w	lr, #0
 8010dea:	e750      	b.n	8010c8e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8aa>
 8010dec:	2900      	cmp	r1, #0
 8010dee:	dd2c      	ble.n	8010e4a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa66>
 8010df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010df2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8010df6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	6812      	ldr	r2, [r2, #0]
 8010dfc:	fb5b 2b03 	smmla	fp, fp, r3, r2
 8010e00:	fa4b f301 	asr.w	r3, fp, r1
 8010e04:	f303 0307 	ssat	r3, #8, r3
 8010e08:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010e0a:	7053      	strb	r3, [r2, #1]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	e7e3      	b.n	8010dd8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 8010e10:	2900      	cmp	r1, #0
 8010e12:	f340 809f 	ble.w	8010f54 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb70>
 8010e16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010e18:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8010e1c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010e1e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010e22:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010e26:	fb5a 2a03 	smmla	sl, sl, r3, r2
 8010e2a:	fa4a f301 	asr.w	r3, sl, r1
 8010e2e:	f303 0307 	ssat	r3, #8, r3
 8010e32:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010e34:	7013      	strb	r3, [r2, #0]
 8010e36:	e7b8      	b.n	8010daa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8010e38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8010e3a:	9304      	str	r3, [sp, #16]
 8010e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f47f aebf 	bne.w	8010bc2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7de>
 8010e44:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010e48:	e797      	b.n	8010d7a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 8010e4a:	f1c1 0101 	rsb	r1, r1, #1
 8010e4e:	fa0b f201 	lsl.w	r2, fp, r1
 8010e52:	f302 021f 	ssat	r2, #32, r2
 8010e56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	fb52 f213 	smmulr	r2, r2, r3
 8010e5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4413      	add	r3, r2
 8010e64:	f303 0307 	ssat	r3, #8, r3
 8010e68:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010e6a:	7053      	strb	r3, [r2, #1]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	e7b3      	b.n	8010dd8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9f4>
 8010e70:	2301      	movs	r3, #1
 8010e72:	9319      	str	r3, [sp, #100]	; 0x64
 8010e74:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f47f ab61 	bne.w	801053e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x15a>
 8010e7c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8010e7e:	9b06      	ldr	r3, [sp, #24]
 8010e80:	4601      	mov	r1, r0
 8010e82:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8010e88:	4421      	add	r1, r4
 8010e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e8c:	f7fe fb66 	bl	800f55c <weights_2channels_prefetch>
 8010e90:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f43f ab57 	beq.w	8010546 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x162>
 8010e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d06e      	beq.n	8010f7c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb98>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	985d      	ldr	r0, [sp, #372]	; 0x174
 8010ea2:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8010ea4:	461c      	mov	r4, r3
 8010ea6:	461e      	mov	r6, r3
 8010ea8:	9f34      	ldr	r7, [sp, #208]	; 0xd0
 8010eaa:	b33f      	cbz	r7, 8010efc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb18>
 8010eac:	f100 0510 	add.w	r5, r0, #16
 8010eb0:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 8010eb4:	3f01      	subs	r7, #1
 8010eb6:	f105 0510 	add.w	r5, r5, #16
 8010eba:	eba4 0402 	sub.w	r4, r4, r2
 8010ebe:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 8010ec2:	eba3 0302 	sub.w	r3, r3, r2
 8010ec6:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 8010eca:	eba4 0402 	sub.w	r4, r4, r2
 8010ece:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 8010ed2:	eba3 0302 	sub.w	r3, r3, r2
 8010ed6:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 8010eda:	eba4 0402 	sub.w	r4, r4, r2
 8010ede:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 8010ee2:	eba3 0302 	sub.w	r3, r3, r2
 8010ee6:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 8010eea:	eba4 0402 	sub.w	r4, r4, r2
 8010eee:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 8010ef2:	eba3 0302 	sub.w	r3, r3, r2
 8010ef6:	d1db      	bne.n	8010eb0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 8010ef8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8010efa:	4410      	add	r0, r2
 8010efc:	b1d9      	cbz	r1, 8010f36 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb52>
 8010efe:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010f02:	2901      	cmp	r1, #1
 8010f04:	eba4 0402 	sub.w	r4, r4, r2
 8010f08:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010f0c:	eba3 0302 	sub.w	r3, r3, r2
 8010f10:	d00f      	beq.n	8010f32 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8010f12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010f16:	2902      	cmp	r1, #2
 8010f18:	eba4 0402 	sub.w	r4, r4, r2
 8010f1c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010f20:	eba3 0302 	sub.w	r3, r3, r2
 8010f24:	d005      	beq.n	8010f32 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb4e>
 8010f26:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010f2a:	1aa4      	subs	r4, r4, r2
 8010f2c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010f30:	1a9b      	subs	r3, r3, r2
 8010f32:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8010f34:	4410      	add	r0, r2
 8010f36:	3601      	adds	r6, #1
 8010f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f3a:	42b2      	cmp	r2, r6
 8010f3c:	d1b4      	bne.n	8010ea8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xac4>
 8010f3e:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 8010f40:	fb02 f404 	mul.w	r4, r2, r4
 8010f44:	fb02 f303 	mul.w	r3, r2, r3
 8010f48:	f7ff bafe 	b.w	8010548 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	9318      	str	r3, [sp, #96]	; 0x60
 8010f50:	f7ff bae7 	b.w	8010522 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x13e>
 8010f54:	f1c1 0101 	rsb	r1, r1, #1
 8010f58:	fa0a f201 	lsl.w	r2, sl, r1
 8010f5c:	f302 021f 	ssat	r2, #32, r2
 8010f60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010f62:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f66:	fb52 f213 	smmulr	r2, r2, r3
 8010f6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010f6c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f70:	4413      	add	r3, r2
 8010f72:	f303 0307 	ssat	r3, #8, r3
 8010f76:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010f78:	7013      	strb	r3, [r2, #0]
 8010f7a:	e716      	b.n	8010daa <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9c6>
 8010f7c:	461c      	mov	r4, r3
 8010f7e:	f7ff bae3 	b.w	8010548 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 8010f82:	2800      	cmp	r0, #0
 8010f84:	dd0c      	ble.n	8010fa0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbbc>
 8010f86:	0049      	lsls	r1, r1, #1
 8010f88:	f8da 3000 	ldr.w	r3, [sl]
 8010f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8010f90:	fb51 2303 	smmla	r3, r1, r3, r2
 8010f94:	4103      	asrs	r3, r0
 8010f96:	f303 0307 	ssat	r3, #8, r3
 8010f9a:	f888 3000 	strb.w	r3, [r8]
 8010f9e:	e572      	b.n	8010a86 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>
 8010fa0:	f1c0 0201 	rsb	r2, r0, #1
 8010fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8010fa8:	f302 021f 	ssat	r2, #32, r2
 8010fac:	f8da 3000 	ldr.w	r3, [sl]
 8010fb0:	fb52 f213 	smmulr	r2, r2, r3
 8010fb4:	f8d9 3000 	ldr.w	r3, [r9]
 8010fb8:	4413      	add	r3, r2
 8010fba:	f303 0307 	ssat	r3, #8, r3
 8010fbe:	f888 3000 	strb.w	r3, [r8]
 8010fc2:	e560      	b.n	8010a86 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6a2>

08010fc4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t>:
 8010fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc8:	b0cd      	sub	sp, #308	; 0x134
 8010fca:	469c      	mov	ip, r3
 8010fcc:	4688      	mov	r8, r1
 8010fce:	4696      	mov	lr, r2
 8010fd0:	931d      	str	r3, [sp, #116]	; 0x74
 8010fd2:	f8bd 317c 	ldrh.w	r3, [sp, #380]	; 0x17c
 8010fd6:	f8bd 5188 	ldrh.w	r5, [sp, #392]	; 0x188
 8010fda:	9021      	str	r0, [sp, #132]	; 0x84
 8010fdc:	9325      	str	r3, [sp, #148]	; 0x94
 8010fde:	f8bd 0184 	ldrh.w	r0, [sp, #388]	; 0x184
 8010fe2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8010fe4:	912f      	str	r1, [sp, #188]	; 0xbc
 8010fe6:	900a      	str	r0, [sp, #40]	; 0x28
 8010fe8:	fb03 f100 	mul.w	r1, r3, r0
 8010fec:	f8bd 7168 	ldrh.w	r7, [sp, #360]	; 0x168
 8010ff0:	fb05 f000 	mul.w	r0, r5, r0
 8010ff4:	9249      	str	r2, [sp, #292]	; 0x124
 8010ff6:	ee07 0a90 	vmov	s15, r0
 8010ffa:	9858      	ldr	r0, [sp, #352]	; 0x160
 8010ffc:	f8bd 216c 	ldrh.w	r2, [sp, #364]	; 0x16c
 8011000:	9516      	str	r5, [sp, #88]	; 0x58
 8011002:	974a      	str	r7, [sp, #296]	; 0x128
 8011004:	9239      	str	r2, [sp, #228]	; 0xe4
 8011006:	e9dd 4665 	ldrd	r4, r6, [sp, #404]	; 0x194
 801100a:	2e00      	cmp	r6, #0
 801100c:	bf18      	it	ne
 801100e:	4634      	movne	r4, r6
 8011010:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 8011014:	2801      	cmp	r0, #1
 8011016:	9465      	str	r4, [sp, #404]	; 0x194
 8011018:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 801101c:	963b      	str	r6, [sp, #236]	; 0xec
 801101e:	943a      	str	r4, [sp, #232]	; 0xe8
 8011020:	f8bd 6180 	ldrh.w	r6, [sp, #384]	; 0x180
 8011024:	f8bd 4178 	ldrh.w	r4, [sp, #376]	; 0x178
 8011028:	964b      	str	r6, [sp, #300]	; 0x12c
 801102a:	9430      	str	r4, [sp, #192]	; 0xc0
 801102c:	f340 82c7 	ble.w	80115be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5fa>
 8011030:	1e83      	subs	r3, r0, #2
 8011032:	fb01 f505 	mul.w	r5, r1, r5
 8011036:	1ea2      	subs	r2, r4, #2
 8011038:	085b      	lsrs	r3, r3, #1
 801103a:	9531      	str	r5, [sp, #196]	; 0xc4
 801103c:	9d58      	ldr	r5, [sp, #352]	; 0x160
 801103e:	0852      	lsrs	r2, r2, #1
 8011040:	1c58      	adds	r0, r3, #1
 8011042:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011044:	9038      	str	r0, [sp, #224]	; 0xe0
 8011046:	3b10      	subs	r3, #16
 8011048:	9859      	ldr	r0, [sp, #356]	; 0x164
 801104a:	9347      	str	r3, [sp, #284]	; 0x11c
 801104c:	091b      	lsrs	r3, r3, #4
 801104e:	fb00 f007 	mul.w	r0, r0, r7
 8011052:	108f      	asrs	r7, r1, #2
 8011054:	f001 0103 	and.w	r1, r1, #3
 8011058:	3301      	adds	r3, #1
 801105a:	9008      	str	r0, [sp, #32]
 801105c:	9134      	str	r1, [sp, #208]	; 0xd0
 801105e:	0069      	lsls	r1, r5, #1
 8011060:	9741      	str	r7, [sp, #260]	; 0x104
 8011062:	460d      	mov	r5, r1
 8011064:	9146      	str	r1, [sp, #280]	; 0x118
 8011066:	fb02 f100 	mul.w	r1, r2, r0
 801106a:	fb02 5505 	mla	r5, r2, r5, r5
 801106e:	9545      	str	r5, [sp, #276]	; 0x114
 8011070:	004d      	lsls	r5, r1, #1
 8011072:	9544      	str	r5, [sp, #272]	; 0x110
 8011074:	f06f 0503 	mvn.w	r5, #3
 8011078:	1a2d      	subs	r5, r5, r0
 801107a:	9513      	str	r5, [sp, #76]	; 0x4c
 801107c:	1f05      	subs	r5, r0, #4
 801107e:	9510      	str	r5, [sp, #64]	; 0x40
 8011080:	1e65      	subs	r5, r4, #1
 8011082:	9535      	str	r5, [sp, #212]	; 0xd4
 8011084:	9d59      	ldr	r5, [sp, #356]	; 0x164
 8011086:	3d0f      	subs	r5, #15
 8011088:	950c      	str	r5, [sp, #48]	; 0x30
 801108a:	f004 0501 	and.w	r5, r4, #1
 801108e:	953e      	str	r5, [sp, #248]	; 0xf8
 8011090:	0045      	lsls	r5, r0, #1
 8011092:	9537      	str	r5, [sp, #220]	; 0xdc
 8011094:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8011096:	0068      	lsls	r0, r5, #1
 8011098:	00ad      	lsls	r5, r5, #2
 801109a:	9036      	str	r0, [sp, #216]	; 0xd8
 801109c:	953f      	str	r5, [sp, #252]	; 0xfc
 801109e:	9d57      	ldr	r5, [sp, #348]	; 0x15c
 80110a0:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80110a2:	3502      	adds	r5, #2
 80110a4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80110a8:	9520      	str	r5, [sp, #128]	; 0x80
 80110aa:	9d56      	ldr	r5, [sp, #344]	; 0x158
 80110ac:	9048      	str	r0, [sp, #288]	; 0x120
 80110ae:	0138      	lsls	r0, r7, #4
 80110b0:	3504      	adds	r5, #4
 80110b2:	9042      	str	r0, [sp, #264]	; 0x108
 80110b4:	9519      	str	r5, [sp, #100]	; 0x64
 80110b6:	9d64      	ldr	r5, [sp, #400]	; 0x190
 80110b8:	3504      	adds	r5, #4
 80110ba:	951a      	str	r5, [sp, #104]	; 0x68
 80110bc:	4675      	mov	r5, lr
 80110be:	3504      	adds	r5, #4
 80110c0:	952e      	str	r5, [sp, #184]	; 0xb8
 80110c2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80110c4:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80110c6:	0088      	lsls	r0, r1, #2
 80110c8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80110ca:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 80110ce:	9043      	str	r0, [sp, #268]	; 0x10c
 80110d0:	fb06 f002 	mul.w	r0, r6, r2
 80110d4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80110d6:	fb06 f202 	mul.w	r2, r6, r2
 80110da:	9040      	str	r0, [sp, #256]	; 0x100
 80110dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80110de:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80110e0:	fb02 f204 	mul.w	r2, r2, r4
 80110e4:	920d      	str	r2, [sp, #52]	; 0x34
 80110e6:	011a      	lsls	r2, r3, #4
 80110e8:	019b      	lsls	r3, r3, #6
 80110ea:	920e      	str	r2, [sp, #56]	; 0x38
 80110ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80110ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80110f0:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80110f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80110f8:	2b15      	cmp	r3, #21
 80110fa:	9324      	str	r3, [sp, #144]	; 0x90
 80110fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80110fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011100:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011104:	6812      	ldr	r2, [r2, #0]
 8011106:	9129      	str	r1, [sp, #164]	; 0xa4
 8011108:	922a      	str	r2, [sp, #168]	; 0xa8
 801110a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801110c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011110:	6812      	ldr	r2, [r2, #0]
 8011112:	912b      	str	r1, [sp, #172]	; 0xac
 8011114:	922c      	str	r2, [sp, #176]	; 0xb0
 8011116:	f300 8549 	bgt.w	8011bac <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe8>
 801111a:	2b00      	cmp	r3, #0
 801111c:	bfcc      	ite	gt
 801111e:	2300      	movgt	r3, #0
 8011120:	2301      	movle	r3, #1
 8011122:	425b      	negs	r3, r3
 8011124:	9327      	str	r3, [sp, #156]	; 0x9c
 8011126:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011128:	2b15      	cmp	r3, #21
 801112a:	f300 853b 	bgt.w	8011ba4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbe0>
 801112e:	2b00      	cmp	r3, #0
 8011130:	bfcc      	ite	gt
 8011132:	2300      	movgt	r3, #0
 8011134:	2301      	movle	r3, #1
 8011136:	425b      	negs	r3, r3
 8011138:	9328      	str	r3, [sp, #160]	; 0xa0
 801113a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801113c:	2b00      	cmp	r3, #0
 801113e:	f000 84c7 	beq.w	8011ad0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb0c>
 8011142:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8011144:	2b00      	cmp	r3, #0
 8011146:	f040 84d2 	bne.w	8011aee <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb2a>
 801114a:	461c      	mov	r4, r3
 801114c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801114e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011152:	18a2      	adds	r2, r4, r2
 8011154:	9222      	str	r2, [sp, #136]	; 0x88
 8011156:	680a      	ldr	r2, [r1, #0]
 8011158:	4413      	add	r3, r2
 801115a:	9323      	str	r3, [sp, #140]	; 0x8c
 801115c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 8209 	beq.w	8011576 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5b2>
 8011164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011166:	2301      	movs	r3, #1
 8011168:	3a02      	subs	r2, #2
 801116a:	fa03 f202 	lsl.w	r2, r3, r2
 801116e:	923c      	str	r2, [sp, #240]	; 0xf0
 8011170:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011172:	3a02      	subs	r2, #2
 8011174:	4093      	lsls	r3, r2
 8011176:	2200      	movs	r2, #0
 8011178:	933d      	str	r3, [sp, #244]	; 0xf4
 801117a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801117c:	921e      	str	r2, [sp, #120]	; 0x78
 801117e:	f023 030f 	bic.w	r3, r3, #15
 8011182:	9232      	str	r2, [sp, #200]	; 0xc8
 8011184:	3314      	adds	r3, #20
 8011186:	9312      	str	r3, [sp, #72]	; 0x48
 8011188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801118a:	9305      	str	r3, [sp, #20]
 801118c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801118e:	9318      	str	r3, [sp, #96]	; 0x60
 8011190:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8011192:	2b00      	cmp	r3, #0
 8011194:	f340 81e0 	ble.w	8011558 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x594>
 8011198:	9b58      	ldr	r3, [sp, #352]	; 0x160
 801119a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801119c:	3301      	adds	r3, #1
 801119e:	18d3      	adds	r3, r2, r3
 80111a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80111a2:	1c53      	adds	r3, r2, #1
 80111a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80111a6:	931c      	str	r3, [sp, #112]	; 0x70
 80111a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111aa:	4413      	add	r3, r2
 80111ac:	9326      	str	r3, [sp, #152]	; 0x98
 80111ae:	2300      	movs	r3, #0
 80111b0:	9333      	str	r3, [sp, #204]	; 0xcc
 80111b2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80111b4:	3b04      	subs	r3, #4
 80111b6:	9311      	str	r3, [sp, #68]	; 0x44
 80111b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 8312 	beq.w	80117e4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x820>
 80111c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80111c2:	9a08      	ldr	r2, [sp, #32]
 80111c4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80111c6:	4413      	add	r3, r2
 80111c8:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80111cc:	462c      	mov	r4, r5
 80111ce:	462f      	mov	r7, r5
 80111d0:	9314      	str	r3, [sp, #80]	; 0x50
 80111d2:	4675      	mov	r5, lr
 80111d4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80111d6:	46a1      	mov	r9, r4
 80111d8:	9304      	str	r3, [sp, #16]
 80111da:	2300      	movs	r3, #0
 80111dc:	9315      	str	r3, [sp, #84]	; 0x54
 80111de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 815c 	beq.w	801149e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4da>
 80111e6:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80111e8:	3b03      	subs	r3, #3
 80111ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80111ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80111ee:	9305      	str	r3, [sp, #20]
 80111f0:	2300      	movs	r3, #0
 80111f2:	9306      	str	r3, [sp, #24]
 80111f4:	9a08      	ldr	r2, [sp, #32]
 80111f6:	9b05      	ldr	r3, [sp, #20]
 80111f8:	1a9e      	subs	r6, r3, r2
 80111fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	f340 828e 	ble.w	801171e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x75a>
 8011202:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011204:	1d18      	adds	r0, r3, #4
 8011206:	9904      	ldr	r1, [sp, #16]
 8011208:	18d3      	adds	r3, r2, r3
 801120a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801120e:	9607      	str	r6, [sp, #28]
 8011210:	9303      	str	r3, [sp, #12]
 8011212:	f85b 4000 	ldr.w	r4, [fp, r0]
 8011216:	eb0b 0600 	add.w	r6, fp, r0
 801121a:	fa2f f284 	sxtb16	r2, r4
 801121e:	680b      	ldr	r3, [r1, #0]
 8011220:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8011224:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8011228:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801122c:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011230:	fb22 ee03 	smlad	lr, r2, r3, lr
 8011234:	fb24 ee08 	smlad	lr, r4, r8, lr
 8011238:	fb22 720a 	smlad	r2, r2, sl, r7
 801123c:	fb24 220c 	smlad	r2, r4, ip, r2
 8011240:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8011244:	fa2f f784 	sxtb16	r7, r4
 8011248:	fa2f f494 	sxtb16	r4, r4, ror #8
 801124c:	fb27 5303 	smlad	r3, r7, r3, r5
 8011250:	fb27 990a 	smlad	r9, r7, sl, r9
 8011254:	fb24 3308 	smlad	r3, r4, r8, r3
 8011258:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801125c:	694f      	ldr	r7, [r1, #20]
 801125e:	fb24 9c0c 	smlad	ip, r4, ip, r9
 8011262:	6875      	ldr	r5, [r6, #4]
 8011264:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8011268:	fa2f f485 	sxtb16	r4, r5
 801126c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8011270:	fa2f f595 	sxtb16	r5, r5, ror #8
 8011274:	fb24 ee08 	smlad	lr, r4, r8, lr
 8011278:	fb25 ee07 	smlad	lr, r5, r7, lr
 801127c:	fb24 240a 	smlad	r4, r4, sl, r2
 8011280:	fb25 4409 	smlad	r4, r5, r9, r4
 8011284:	6802      	ldr	r2, [r0, #0]
 8011286:	fa2f f582 	sxtb16	r5, r2
 801128a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801128e:	fb25 3808 	smlad	r8, r5, r8, r3
 8011292:	fb25 cc0a 	smlad	ip, r5, sl, ip
 8011296:	fb22 8707 	smlad	r7, r2, r7, r8
 801129a:	6a0b      	ldr	r3, [r1, #32]
 801129c:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
 80112a0:	fb22 c909 	smlad	r9, r2, r9, ip
 80112a4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80112a8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80112aa:	fa2f f58c 	sxtb16	r5, ip
 80112ae:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 80112b2:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80112b6:	fb25 ee03 	smlad	lr, r5, r3, lr
 80112ba:	fb2c ee08 	smlad	lr, ip, r8, lr
 80112be:	fb25 4502 	smlad	r5, r5, r2, r4
 80112c2:	fb2c 5c0a 	smlad	ip, ip, sl, r5
 80112c6:	6844      	ldr	r4, [r0, #4]
 80112c8:	fa2f f584 	sxtb16	r5, r4
 80112cc:	fa2f f494 	sxtb16	r4, r4, ror #8
 80112d0:	fb25 7703 	smlad	r7, r5, r3, r7
 80112d4:	fb25 9902 	smlad	r9, r5, r2, r9
 80112d8:	fb24 7808 	smlad	r8, r4, r8, r7
 80112dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80112de:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80112e0:	fb24 9a0a 	smlad	sl, r4, sl, r9
 80112e4:	68f7      	ldr	r7, [r6, #12]
 80112e6:	3140      	adds	r1, #64	; 0x40
 80112e8:	fa2f f487 	sxtb16	r4, r7
 80112ec:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80112f0:	f851 6c04 	ldr.w	r6, [r1, #-4]
 80112f4:	fa2f f797 	sxtb16	r7, r7, ror #8
 80112f8:	fb24 ee03 	smlad	lr, r4, r3, lr
 80112fc:	fb27 ee05 	smlad	lr, r7, r5, lr
 8011300:	fb24 cc02 	smlad	ip, r4, r2, ip
 8011304:	fb27 c706 	smlad	r7, r7, r6, ip
 8011308:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801130c:	fa2f f489 	sxtb16	r4, r9
 8011310:	fa2f f999 	sxtb16	r9, r9, ror #8
 8011314:	fb24 8803 	smlad	r8, r4, r3, r8
 8011318:	fb24 aa02 	smlad	sl, r4, r2, sl
 801131c:	fb29 8505 	smlad	r5, r9, r5, r8
 8011320:	fb29 a906 	smlad	r9, r9, r6, sl
 8011324:	3010      	adds	r0, #16
 8011326:	9b03      	ldr	r3, [sp, #12]
 8011328:	4283      	cmp	r3, r0
 801132a:	f47f af72 	bne.w	8011212 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x24e>
 801132e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	9e07      	ldr	r6, [sp, #28]
 8011334:	469b      	mov	fp, r3
 8011336:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011338:	441e      	add	r6, r3
 801133a:	440a      	add	r2, r1
 801133c:	9204      	str	r2, [sp, #16]
 801133e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011340:	459b      	cmp	fp, r3
 8011342:	f280 81ea 	bge.w	801171a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x756>
 8011346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011348:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801134c:	eba3 030b 	sub.w	r3, r3, fp
 8011350:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8011354:	089b      	lsrs	r3, r3, #2
 8011356:	461a      	mov	r2, r3
 8011358:	9307      	str	r3, [sp, #28]
 801135a:	9b04      	ldr	r3, [sp, #16]
 801135c:	3201      	adds	r2, #1
 801135e:	eb06 0a82 	add.w	sl, r6, r2, lsl #2
 8011362:	9203      	str	r2, [sp, #12]
 8011364:	f856 2b04 	ldr.w	r2, [r6], #4
 8011368:	3310      	adds	r3, #16
 801136a:	fa2f f182 	sxtb16	r1, r2
 801136e:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8011372:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8011376:	f853 cc08 	ldr.w	ip, [r3, #-8]
 801137a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801137e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011382:	fb21 ee08 	smlad	lr, r1, r8, lr
 8011386:	fb22 ee04 	smlad	lr, r2, r4, lr
 801138a:	fb21 770c 	smlad	r7, r1, ip, r7
 801138e:	fb22 7700 	smlad	r7, r2, r0, r7
 8011392:	f856 200b 	ldr.w	r2, [r6, fp]
 8011396:	fa2f f182 	sxtb16	r1, r2
 801139a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801139e:	fb21 5508 	smlad	r5, r1, r8, r5
 80113a2:	fb21 990c 	smlad	r9, r1, ip, r9
 80113a6:	fb22 5504 	smlad	r5, r2, r4, r5
 80113aa:	fb22 9900 	smlad	r9, r2, r0, r9
 80113ae:	45b2      	cmp	sl, r6
 80113b0:	d1d8      	bne.n	8011364 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x3a0>
 80113b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80113b6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80113ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80113be:	9a07      	ldr	r2, [sp, #28]
 80113c0:	9304      	str	r3, [sp, #16]
 80113c2:	f10b 0304 	add.w	r3, fp, #4
 80113c6:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 80113ca:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80113cc:	455b      	cmp	r3, fp
 80113ce:	dd5b      	ble.n	8011488 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4c4>
 80113d0:	9804      	ldr	r0, [sp, #16]
 80113d2:	f99a 3000 	ldrsb.w	r3, [sl]
 80113d6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80113da:	f9b0 1000 	ldrsh.w	r1, [r0]
 80113de:	9c08      	ldr	r4, [sp, #32]
 80113e0:	fb12 7703 	smlabb	r7, r2, r3, r7
 80113e4:	fb11 ee03 	smlabb	lr, r1, r3, lr
 80113e8:	f91a 3004 	ldrsb.w	r3, [sl, r4]
 80113ec:	fb12 9903 	smlabb	r9, r2, r3, r9
 80113f0:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80113f2:	fb11 5503 	smlabb	r5, r1, r3, r5
 80113f6:	f10b 0301 	add.w	r3, fp, #1
 80113fa:	4293      	cmp	r3, r2
 80113fc:	da3d      	bge.n	801147a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 80113fe:	eb0a 0304 	add.w	r3, sl, r4
 8011402:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011406:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801140a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801140e:	fb11 5503 	smlabb	r5, r1, r3, r5
 8011412:	fb12 9903 	smlabb	r9, r2, r3, r9
 8011416:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 801141a:	fb11 ee03 	smlabb	lr, r1, r3, lr
 801141e:	9959      	ldr	r1, [sp, #356]	; 0x164
 8011420:	fb12 7703 	smlabb	r7, r2, r3, r7
 8011424:	f10b 0302 	add.w	r3, fp, #2
 8011428:	f10a 0202 	add.w	r2, sl, #2
 801142c:	428b      	cmp	r3, r1
 801142e:	da24      	bge.n	801147a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 8011430:	5713      	ldrsb	r3, [r2, r4]
 8011432:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011436:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801143a:	fb11 5503 	smlabb	r5, r1, r3, r5
 801143e:	fb12 9903 	smlabb	r9, r2, r3, r9
 8011442:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8011446:	fb11 ee03 	smlabb	lr, r1, r3, lr
 801144a:	9959      	ldr	r1, [sp, #356]	; 0x164
 801144c:	fb12 7703 	smlabb	r7, r2, r3, r7
 8011450:	f10b 0303 	add.w	r3, fp, #3
 8011454:	f10a 0203 	add.w	r2, sl, #3
 8011458:	428b      	cmp	r3, r1
 801145a:	da0e      	bge.n	801147a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4b6>
 801145c:	5713      	ldrsb	r3, [r2, r4]
 801145e:	f99a 1003 	ldrsb.w	r1, [sl, #3]
 8011462:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8011466:	fb12 ee01 	smlabb	lr, r2, r1, lr
 801146a:	fb12 5503 	smlabb	r5, r2, r3, r5
 801146e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8011472:	fb12 7701 	smlabb	r7, r2, r1, r7
 8011476:	fb12 9903 	smlabb	r9, r2, r3, r9
 801147a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801147c:	9a04      	ldr	r2, [sp, #16]
 801147e:	eba3 030b 	sub.w	r3, r3, fp
 8011482:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011486:	9304      	str	r3, [sp, #16]
 8011488:	9a05      	ldr	r2, [sp, #20]
 801148a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801148c:	9b06      	ldr	r3, [sp, #24]
 801148e:	440a      	add	r2, r1
 8011490:	3301      	adds	r3, #1
 8011492:	9205      	str	r2, [sp, #20]
 8011494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011496:	9306      	str	r3, [sp, #24]
 8011498:	429a      	cmp	r2, r3
 801149a:	f47f aeab 	bne.w	80111f4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x230>
 801149e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80114a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80114a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114a4:	440a      	add	r2, r1
 80114a6:	3301      	adds	r3, #1
 80114a8:	9214      	str	r2, [sp, #80]	; 0x50
 80114aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80114ac:	9315      	str	r3, [sp, #84]	; 0x54
 80114ae:	429a      	cmp	r2, r3
 80114b0:	f47f ae95 	bne.w	80111de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x21a>
 80114b4:	46ab      	mov	fp, r5
 80114b6:	464c      	mov	r4, r9
 80114b8:	463d      	mov	r5, r7
 80114ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f040 814c 	bne.w	801175a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x796>
 80114c2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80114c4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80114c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80114ca:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 80114ce:	fb52 1203 	smmla	r2, r2, r3, r1
 80114d2:	fb5a 1a03 	smmla	sl, sl, r3, r1
 80114d6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80114d8:	410a      	asrs	r2, r1
 80114da:	f302 0307 	ssat	r3, #8, r2
 80114de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80114e0:	fa4a fa01 	asr.w	sl, sl, r1
 80114e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80114e8:	f30a 0307 	ssat	r3, #8, sl
 80114ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80114ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80114f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f040 8115 	bne.w	8011724 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x760>
 80114fa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80114fc:	006f      	lsls	r7, r5, #1
 80114fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011500:	0060      	lsls	r0, r4, #1
 8011502:	fb57 2703 	smmla	r7, r7, r3, r2
 8011506:	fb50 2003 	smmla	r0, r0, r3, r2
 801150a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801150c:	4117      	asrs	r7, r2
 801150e:	f307 0307 	ssat	r3, #8, r7
 8011512:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011514:	4110      	asrs	r0, r2
 8011516:	700b      	strb	r3, [r1, #0]
 8011518:	f300 0307 	ssat	r3, #8, r0
 801151c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801151e:	7013      	strb	r3, [r2, #0]
 8011520:	460a      	mov	r2, r1
 8011522:	9946      	ldr	r1, [sp, #280]	; 0x118
 8011524:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8011526:	440a      	add	r2, r1
 8011528:	3302      	adds	r3, #2
 801152a:	921c      	str	r2, [sp, #112]	; 0x70
 801152c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801152e:	9333      	str	r3, [sp, #204]	; 0xcc
 8011530:	440a      	add	r2, r1
 8011532:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8011534:	921b      	str	r2, [sp, #108]	; 0x6c
 8011536:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011538:	440a      	add	r2, r1
 801153a:	9226      	str	r2, [sp, #152]	; 0x98
 801153c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801153e:	4293      	cmp	r3, r2
 8011540:	f6ff ae3a 	blt.w	80111b8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1f4>
 8011544:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011546:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011548:	4413      	add	r3, r2
 801154a:	9a44      	ldr	r2, [sp, #272]	; 0x110
 801154c:	9318      	str	r3, [sp, #96]	; 0x60
 801154e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011550:	4413      	add	r3, r2
 8011552:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011554:	18d3      	adds	r3, r2, r3
 8011556:	9305      	str	r3, [sp, #20]
 8011558:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801155a:	2b00      	cmp	r3, #0
 801155c:	f040 8148 	bne.w	80117f0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x82c>
 8011560:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011562:	9940      	ldr	r1, [sp, #256]	; 0x100
 8011564:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011566:	440a      	add	r2, r1
 8011568:	3301      	adds	r3, #1
 801156a:	921e      	str	r2, [sp, #120]	; 0x78
 801156c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801156e:	9332      	str	r3, [sp, #200]	; 0xc8
 8011570:	429a      	cmp	r2, r3
 8011572:	f47f ae0d 	bne.w	8011190 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x1cc>
 8011576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011578:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801157a:	4413      	add	r3, r2
 801157c:	932d      	str	r3, [sp, #180]	; 0xb4
 801157e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011580:	3302      	adds	r3, #2
 8011582:	931d      	str	r3, [sp, #116]	; 0x74
 8011584:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8011586:	b11b      	cbz	r3, 8011590 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x5cc>
 8011588:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801158a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801158c:	4413      	add	r3, r2
 801158e:	9365      	str	r3, [sp, #404]	; 0x194
 8011590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011592:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8011594:	3304      	adds	r3, #4
 8011596:	9320      	str	r3, [sp, #128]	; 0x80
 8011598:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801159a:	3308      	adds	r3, #8
 801159c:	9319      	str	r3, [sp, #100]	; 0x64
 801159e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80115a0:	3308      	adds	r3, #8
 80115a2:	931a      	str	r3, [sp, #104]	; 0x68
 80115a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80115a6:	3308      	adds	r3, #8
 80115a8:	932e      	str	r3, [sp, #184]	; 0xb8
 80115aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80115ac:	4293      	cmp	r3, r2
 80115ae:	f47f ad9e 	bne.w	80110ee <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x12a>
 80115b2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80115b4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80115b6:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80115b8:	fb01 3302 	mla	r3, r1, r2, r3
 80115bc:	932f      	str	r3, [sp, #188]	; 0xbc
 80115be:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80115c0:	07db      	lsls	r3, r3, #31
 80115c2:	f140 80a6 	bpl.w	8011712 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 80115c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 80a2 	beq.w	8011712 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 80115ce:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80115d0:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
 80115d4:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80115d6:	449b      	add	fp, r3
 80115d8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80115da:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80115de:	930b      	str	r3, [sp, #44]	; 0x2c
 80115e0:	9b56      	ldr	r3, [sp, #344]	; 0x158
 80115e2:	eb03 088b 	add.w	r8, r3, fp, lsl #2
 80115e6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80115e8:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80115ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80115f0:	4413      	add	r3, r2
 80115f2:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 80115f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80115f8:	930c      	str	r3, [sp, #48]	; 0x30
 80115fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f000 8088 	beq.w	8011712 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x74e>
 8011602:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8011604:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8011606:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8011608:	fb01 f202 	mul.w	r2, r1, r2
 801160c:	920d      	str	r2, [sp, #52]	; 0x34
 801160e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8011610:	fb01 f202 	mul.w	r2, r1, r2
 8011614:	9959      	ldr	r1, [sp, #356]	; 0x164
 8011616:	9209      	str	r2, [sp, #36]	; 0x24
 8011618:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801161a:	440a      	add	r2, r1
 801161c:	9203      	str	r2, [sp, #12]
 801161e:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8011620:	fb01 f202 	mul.w	r2, r1, r2
 8011624:	920e      	str	r2, [sp, #56]	; 0x38
 8011626:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8011628:	fb01 fe02 	mul.w	lr, r1, r2
 801162c:	9a58      	ldr	r2, [sp, #352]	; 0x160
 801162e:	fb02 f303 	mul.w	r3, r2, r3
 8011632:	46f1      	mov	r9, lr
 8011634:	468e      	mov	lr, r1
 8011636:	930f      	str	r3, [sp, #60]	; 0x3c
 8011638:	2300      	movs	r3, #0
 801163a:	9306      	str	r3, [sp, #24]
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8011642:	9304      	str	r3, [sp, #16]
 8011644:	2300      	movs	r3, #0
 8011646:	9307      	str	r3, [sp, #28]
 8011648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801164a:	6819      	ldr	r1, [r3, #0]
 801164c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801164e:	b37b      	cbz	r3, 80116b0 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ec>
 8011650:	9b04      	ldr	r3, [sp, #16]
 8011652:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011656:	9305      	str	r3, [sp, #20]
 8011658:	2300      	movs	r3, #0
 801165a:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 801165c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8011660:	9308      	str	r3, [sp, #32]
 8011662:	f1b8 0f00 	cmp.w	r8, #0
 8011666:	d017      	beq.n	8011698 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6d4>
 8011668:	9d05      	ldr	r5, [sp, #20]
 801166a:	f04f 0c00 	mov.w	ip, #0
 801166e:	f1be 0f00 	cmp.w	lr, #0
 8011672:	eba5 020e 	sub.w	r2, r5, lr
 8011676:	dd0a      	ble.n	801168e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6ca>
 8011678:	1e78      	subs	r0, r7, #1
 801167a:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801167e:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8011682:	1b9b      	subs	r3, r3, r6
 8011684:	42aa      	cmp	r2, r5
 8011686:	fb04 1103 	mla	r1, r4, r3, r1
 801168a:	d1f6      	bne.n	801167a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6b6>
 801168c:	4477      	add	r7, lr
 801168e:	f10c 0c01 	add.w	ip, ip, #1
 8011692:	444d      	add	r5, r9
 8011694:	45e0      	cmp	r8, ip
 8011696:	d1ea      	bne.n	801166e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x6aa>
 8011698:	9a05      	ldr	r2, [sp, #20]
 801169a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801169c:	9b08      	ldr	r3, [sp, #32]
 801169e:	4402      	add	r2, r0
 80116a0:	3301      	adds	r3, #1
 80116a2:	9205      	str	r2, [sp, #20]
 80116a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80116a6:	9308      	str	r3, [sp, #32]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d1da      	bne.n	8011662 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x69e>
 80116ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80116b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80116b6:	2815      	cmp	r0, #21
 80116b8:	f340 82a3 	ble.w	8011c02 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc3e>
 80116bc:	1e83      	subs	r3, r0, #2
 80116be:	1e42      	subs	r2, r0, #1
 80116c0:	2001      	movs	r0, #1
 80116c2:	4098      	lsls	r0, r3
 80116c4:	f8d8 3000 	ldr.w	r3, [r8]
 80116c8:	fb51 0303 	smmla	r3, r1, r3, r0
 80116cc:	fa43 f202 	asr.w	r2, r3, r2
 80116d0:	f8db 3000 	ldr.w	r3, [fp]
 80116d4:	4413      	add	r3, r2
 80116d6:	f303 0307 	ssat	r3, #8, r3
 80116da:	f88a 3000 	strb.w	r3, [sl]
 80116de:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80116e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80116e2:	4492      	add	sl, r2
 80116e4:	9a04      	ldr	r2, [sp, #16]
 80116e6:	9b07      	ldr	r3, [sp, #28]
 80116e8:	440a      	add	r2, r1
 80116ea:	3301      	adds	r3, #1
 80116ec:	9204      	str	r2, [sp, #16]
 80116ee:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80116f0:	9307      	str	r3, [sp, #28]
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d1a8      	bne.n	8011648 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x684>
 80116f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80116f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80116fa:	9b06      	ldr	r3, [sp, #24]
 80116fc:	440a      	add	r2, r1
 80116fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011700:	3301      	adds	r3, #1
 8011702:	921d      	str	r2, [sp, #116]	; 0x74
 8011704:	9a03      	ldr	r2, [sp, #12]
 8011706:	9306      	str	r3, [sp, #24]
 8011708:	440a      	add	r2, r1
 801170a:	9203      	str	r2, [sp, #12]
 801170c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801170e:	4293      	cmp	r3, r2
 8011710:	d194      	bne.n	801163c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x678>
 8011712:	2000      	movs	r0, #0
 8011714:	b04d      	add	sp, #308	; 0x134
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	46b2      	mov	sl, r6
 801171c:	e655      	b.n	80113ca <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x406>
 801171e:	f04f 0b00 	mov.w	fp, #0
 8011722:	e60c      	b.n	801133e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x37a>
 8011724:	3301      	adds	r3, #1
 8011726:	d033      	beq.n	8011790 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7cc>
 8011728:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801172a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801172c:	fb55 2703 	smmla	r7, r5, r3, r2
 8011730:	fb54 2003 	smmla	r0, r4, r3, r2
 8011734:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011736:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011738:	3b01      	subs	r3, #1
 801173a:	fa47 f203 	asr.w	r2, r7, r3
 801173e:	440a      	add	r2, r1
 8011740:	f302 0207 	ssat	r2, #8, r2
 8011744:	fa40 f303 	asr.w	r3, r0, r3
 8011748:	981c      	ldr	r0, [sp, #112]	; 0x70
 801174a:	440b      	add	r3, r1
 801174c:	7002      	strb	r2, [r0, #0]
 801174e:	f303 0307 	ssat	r3, #8, r3
 8011752:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011754:	7013      	strb	r3, [r2, #0]
 8011756:	4602      	mov	r2, r0
 8011758:	e6e3      	b.n	8011522 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x55e>
 801175a:	3301      	adds	r3, #1
 801175c:	d02d      	beq.n	80117ba <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7f6>
 801175e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011760:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8011762:	fb5e 1203 	smmla	r2, lr, r3, r1
 8011766:	fb5b 1a03 	smmla	sl, fp, r3, r1
 801176a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801176c:	992b      	ldr	r1, [sp, #172]	; 0xac
 801176e:	3b01      	subs	r3, #1
 8011770:	411a      	asrs	r2, r3
 8011772:	440a      	add	r2, r1
 8011774:	f302 0207 	ssat	r2, #8, r2
 8011778:	fa4a f303 	asr.w	r3, sl, r3
 801177c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801177e:	440b      	add	r3, r1
 8011780:	f800 2c01 	strb.w	r2, [r0, #-1]
 8011784:	f303 0307 	ssat	r3, #8, r3
 8011788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801178a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801178e:	e6b0      	b.n	80114f2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x52e>
 8011790:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011792:	f1c3 0301 	rsb	r3, r3, #1
 8011796:	fa05 f203 	lsl.w	r2, r5, r3
 801179a:	f302 021f 	ssat	r2, #32, r2
 801179e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80117a0:	fb52 f211 	smmulr	r2, r2, r1
 80117a4:	fa04 f303 	lsl.w	r3, r4, r3
 80117a8:	f303 031f 	ssat	r3, #32, r3
 80117ac:	fb53 f311 	smmulr	r3, r3, r1
 80117b0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80117b2:	440a      	add	r2, r1
 80117b4:	f302 0207 	ssat	r2, #8, r2
 80117b8:	e7c6      	b.n	8011748 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x784>
 80117ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80117bc:	f1c3 0301 	rsb	r3, r3, #1
 80117c0:	fa0e f203 	lsl.w	r2, lr, r3
 80117c4:	f302 021f 	ssat	r2, #32, r2
 80117c8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80117ca:	fb52 f211 	smmulr	r2, r2, r1
 80117ce:	fa0b f303 	lsl.w	r3, fp, r3
 80117d2:	f303 031f 	ssat	r3, #32, r3
 80117d6:	fb53 f311 	smmulr	r3, r3, r1
 80117da:	992b      	ldr	r1, [sp, #172]	; 0xac
 80117dc:	440a      	add	r2, r1
 80117de:	f302 0207 	ssat	r2, #8, r2
 80117e2:	e7cb      	b.n	801177c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x7b8>
 80117e4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80117e6:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80117ea:	462c      	mov	r4, r5
 80117ec:	46f3      	mov	fp, lr
 80117ee:	e664      	b.n	80114ba <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x4f6>
 80117f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	f000 8167 	beq.w	8011ac6 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb02>
 80117f8:	9b05      	ldr	r3, [sp, #20]
 80117fa:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80117fc:	4413      	add	r3, r2
 80117fe:	9305      	str	r3, [sp, #20]
 8011800:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 812f 	beq.w	8011a66 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xaa2>
 8011808:	2300      	movs	r3, #0
 801180a:	f8dd 9194 	ldr.w	r9, [sp, #404]	; 0x194
 801180e:	9307      	str	r3, [sp, #28]
 8011810:	9311      	str	r3, [sp, #68]	; 0x44
 8011812:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011814:	3b03      	subs	r3, #3
 8011816:	9309      	str	r3, [sp, #36]	; 0x24
 8011818:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801181a:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 801181e:	3b04      	subs	r3, #4
 8011820:	930b      	str	r3, [sp, #44]	; 0x2c
 8011822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 80da 	beq.w	80119de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa1a>
 801182a:	9b05      	ldr	r3, [sp, #20]
 801182c:	9a07      	ldr	r2, [sp, #28]
 801182e:	4413      	add	r3, r2
 8011830:	9303      	str	r3, [sp, #12]
 8011832:	2300      	movs	r3, #0
 8011834:	9304      	str	r3, [sp, #16]
 8011836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011838:	9a03      	ldr	r2, [sp, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	4611      	mov	r1, r2
 801183e:	f340 810e 	ble.w	8011a5e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa9a>
 8011842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011844:	464b      	mov	r3, r9
 8011846:	188c      	adds	r4, r1, r2
 8011848:	6808      	ldr	r0, [r1, #0]
 801184a:	681d      	ldr	r5, [r3, #0]
 801184c:	fa2f f280 	sxtb16	r2, r0
 8011850:	fa2f f090 	sxtb16	r0, r0, ror #8
 8011854:	fb22 a505 	smlad	r5, r2, r5, sl
 8011858:	685e      	ldr	r6, [r3, #4]
 801185a:	fb20 5706 	smlad	r7, r0, r6, r5
 801185e:	689d      	ldr	r5, [r3, #8]
 8011860:	fb22 b205 	smlad	r2, r2, r5, fp
 8011864:	68dd      	ldr	r5, [r3, #12]
 8011866:	fb20 2005 	smlad	r0, r0, r5, r2
 801186a:	684a      	ldr	r2, [r1, #4]
 801186c:	691e      	ldr	r6, [r3, #16]
 801186e:	fa2f f582 	sxtb16	r5, r2
 8011872:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011876:	fb25 7606 	smlad	r6, r5, r6, r7
 801187a:	695f      	ldr	r7, [r3, #20]
 801187c:	fb22 6607 	smlad	r6, r2, r7, r6
 8011880:	699f      	ldr	r7, [r3, #24]
 8011882:	fb25 0007 	smlad	r0, r5, r7, r0
 8011886:	69dd      	ldr	r5, [r3, #28]
 8011888:	fb22 0205 	smlad	r2, r2, r5, r0
 801188c:	688f      	ldr	r7, [r1, #8]
 801188e:	6a1d      	ldr	r5, [r3, #32]
 8011890:	fa2f f087 	sxtb16	r0, r7
 8011894:	fa2f f797 	sxtb16	r7, r7, ror #8
 8011898:	fb20 6505 	smlad	r5, r0, r5, r6
 801189c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801189e:	fb27 5606 	smlad	r6, r7, r6, r5
 80118a2:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 80118a6:	fb20 200b 	smlad	r0, r0, fp, r2
 80118aa:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 80118ae:	fb27 000b 	smlad	r0, r7, fp, r0
 80118b2:	68ca      	ldr	r2, [r1, #12]
 80118b4:	3340      	adds	r3, #64	; 0x40
 80118b6:	fa2f fb82 	sxtb16	fp, r2
 80118ba:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80118be:	3110      	adds	r1, #16
 80118c0:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 80118c4:	f853 cc08 	ldr.w	ip, [r3, #-8]
 80118c8:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80118cc:	fa2f f292 	sxtb16	r2, r2, ror #8
 80118d0:	fb2b 6505 	smlad	r5, fp, r5, r6
 80118d4:	fb22 5a0a 	smlad	sl, r2, sl, r5
 80118d8:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 80118dc:	fb22 bb07 	smlad	fp, r2, r7, fp
 80118e0:	42a1      	cmp	r1, r4
 80118e2:	d1b1      	bne.n	8011848 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x884>
 80118e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118e6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80118ea:	4499      	add	r9, r3
 80118ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ee:	459e      	cmp	lr, r3
 80118f0:	f280 80b3 	bge.w	8011a5a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa96>
 80118f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118f6:	4649      	mov	r1, r9
 80118f8:	eba3 080e 	sub.w	r8, r3, lr
 80118fc:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8011900:	f108 0301 	add.w	r3, r8, #1
 8011904:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8011908:	9306      	str	r3, [sp, #24]
 801190a:	f854 3b04 	ldr.w	r3, [r4], #4
 801190e:	3110      	adds	r1, #16
 8011910:	fa2f f283 	sxtb16	r2, r3
 8011914:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8011918:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 801191c:	f851 6c08 	ldr.w	r6, [r1, #-8]
 8011920:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8011924:	fa2f f393 	sxtb16	r3, r3, ror #8
 8011928:	fb22 a000 	smlad	r0, r2, r0, sl
 801192c:	fb23 0a07 	smlad	sl, r3, r7, r0
 8011930:	fb22 b206 	smlad	r2, r2, r6, fp
 8011934:	fb23 2b05 	smlad	fp, r3, r5, r2
 8011938:	4564      	cmp	r4, ip
 801193a:	d1e6      	bne.n	801190a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x946>
 801193c:	9b06      	ldr	r3, [sp, #24]
 801193e:	f10e 0e04 	add.w	lr, lr, #4
 8011942:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8011946:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 801194a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801194c:	4573      	cmp	r3, lr
 801194e:	dd3b      	ble.n	80119c8 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa04>
 8011950:	f99c 3000 	ldrsb.w	r3, [ip]
 8011954:	f8b9 2000 	ldrh.w	r2, [r9]
 8011958:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801195c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8011960:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011964:	f10e 0301 	add.w	r3, lr, #1
 8011968:	9a59      	ldr	r2, [sp, #356]	; 0x164
 801196a:	429a      	cmp	r2, r3
 801196c:	dd27      	ble.n	80119be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 801196e:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 8011972:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8011976:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801197a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801197e:	fb12 bb03 	smlabb	fp, r2, r3, fp
 8011982:	f10e 0302 	add.w	r3, lr, #2
 8011986:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8011988:	429a      	cmp	r2, r3
 801198a:	dd18      	ble.n	80119be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 801198c:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8011990:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8011994:	fb12 aa03 	smlabb	sl, r2, r3, sl
 8011998:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 801199c:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80119a0:	f10e 0303 	add.w	r3, lr, #3
 80119a4:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80119a6:	429a      	cmp	r2, r3
 80119a8:	dd09      	ble.n	80119be <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x9fa>
 80119aa:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 80119ae:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80119b2:	fb12 aa03 	smlabb	sl, r2, r3, sl
 80119b6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80119ba:	fb12 bb03 	smlabb	fp, r2, r3, fp
 80119be:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80119c0:	eba3 0e0e 	sub.w	lr, r3, lr
 80119c4:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 80119c8:	9a03      	ldr	r2, [sp, #12]
 80119ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80119cc:	9b04      	ldr	r3, [sp, #16]
 80119ce:	440a      	add	r2, r1
 80119d0:	3301      	adds	r3, #1
 80119d2:	9203      	str	r2, [sp, #12]
 80119d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119d6:	9304      	str	r3, [sp, #16]
 80119d8:	429a      	cmp	r2, r3
 80119da:	f47f af2c 	bne.w	8011836 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x872>
 80119de:	9a07      	ldr	r2, [sp, #28]
 80119e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80119e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119e4:	440a      	add	r2, r1
 80119e6:	3301      	adds	r3, #1
 80119e8:	9207      	str	r2, [sp, #28]
 80119ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80119ec:	9311      	str	r3, [sp, #68]	; 0x44
 80119ee:	429a      	cmp	r2, r3
 80119f0:	f47f af17 	bne.w	8011822 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x85e>
 80119f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80119f6:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 80119fa:	2915      	cmp	r1, #21
 80119fc:	dd3a      	ble.n	8011a74 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xab0>
 80119fe:	1e8b      	subs	r3, r1, #2
 8011a00:	2201      	movs	r2, #1
 8011a02:	3901      	subs	r1, #1
 8011a04:	409a      	lsls	r2, r3
 8011a06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a08:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a0c:	fb5a 2303 	smmla	r3, sl, r3, r2
 8011a10:	fa43 f101 	asr.w	r1, r3, r1
 8011a14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a16:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a1a:	440b      	add	r3, r1
 8011a1c:	f303 0307 	ssat	r3, #8, r3
 8011a20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a22:	7013      	strb	r3, [r2, #0]
 8011a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a26:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011a2a:	2915      	cmp	r1, #21
 8011a2c:	dd39      	ble.n	8011aa2 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xade>
 8011a2e:	1e8b      	subs	r3, r1, #2
 8011a30:	2201      	movs	r2, #1
 8011a32:	3901      	subs	r1, #1
 8011a34:	409a      	lsls	r2, r3
 8011a36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	fb5b 2303 	smmla	r3, fp, r3, r2
 8011a3e:	fa43 f101 	asr.w	r1, r3, r1
 8011a42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	440b      	add	r3, r1
 8011a48:	f303 0307 	ssat	r3, #8, r3
 8011a4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a4e:	7053      	strb	r3, [r2, #1]
 8011a50:	4613      	mov	r3, r2
 8011a52:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8011a54:	4413      	add	r3, r2
 8011a56:	9318      	str	r3, [sp, #96]	; 0x60
 8011a58:	e582      	b.n	8011560 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x59c>
 8011a5a:	46a4      	mov	ip, r4
 8011a5c:	e775      	b.n	801194a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x986>
 8011a5e:	4614      	mov	r4, r2
 8011a60:	f04f 0e00 	mov.w	lr, #0
 8011a64:	e742      	b.n	80118ec <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x928>
 8011a66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a68:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8011a6c:	2915      	cmp	r1, #21
 8011a6e:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
 8011a72:	dcc4      	bgt.n	80119fe <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa3a>
 8011a74:	2900      	cmp	r1, #0
 8011a76:	f340 80b0 	ble.w	8011bda <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc16>
 8011a7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011a7c:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8011a80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011a82:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a86:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011a8a:	fb54 2303 	smmla	r3, r4, r3, r2
 8011a8e:	410b      	asrs	r3, r1
 8011a90:	f303 0307 	ssat	r3, #8, r3
 8011a94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a96:	7013      	strb	r3, [r2, #0]
 8011a98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011a9e:	2915      	cmp	r1, #21
 8011aa0:	dcc5      	bgt.n	8011a2e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa6a>
 8011aa2:	2900      	cmp	r1, #0
 8011aa4:	f340 8086 	ble.w	8011bb4 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbf0>
 8011aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011aaa:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8011aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6812      	ldr	r2, [r2, #0]
 8011ab4:	fb54 2303 	smmla	r3, r4, r3, r2
 8011ab8:	410b      	asrs	r3, r1
 8011aba:	f303 0307 	ssat	r3, #8, r3
 8011abe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011ac0:	7053      	strb	r3, [r2, #1]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	e7c5      	b.n	8011a52 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8011ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ac8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011aca:	4413      	add	r3, r2
 8011acc:	9305      	str	r3, [sp, #20]
 8011ace:	e697      	b.n	8011800 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x83c>
 8011ad0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8011ad2:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	ee17 3a90 	vmov	r3, s15
 8011ade:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011ae0:	4421      	add	r1, r4
 8011ae2:	f7fd fd3b 	bl	800f55c <weights_2channels_prefetch>
 8011ae6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f43f ab2e 	beq.w	801114a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x186>
 8011aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 8095 	beq.w	8011c20 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc5c>
 8011af6:	2300      	movs	r3, #0
 8011af8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011afa:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8011afc:	461c      	mov	r4, r3
 8011afe:	461e      	mov	r6, r3
 8011b00:	9f41      	ldr	r7, [sp, #260]	; 0x104
 8011b02:	b33f      	cbz	r7, 8011b54 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb90>
 8011b04:	f102 0510 	add.w	r5, r2, #16
 8011b08:	f935 1c10 	ldrsh.w	r1, [r5, #-16]
 8011b0c:	3f01      	subs	r7, #1
 8011b0e:	f105 0510 	add.w	r5, r5, #16
 8011b12:	eba4 0401 	sub.w	r4, r4, r1
 8011b16:	f935 1c18 	ldrsh.w	r1, [r5, #-24]
 8011b1a:	eba3 0301 	sub.w	r3, r3, r1
 8011b1e:	f935 1c1e 	ldrsh.w	r1, [r5, #-30]
 8011b22:	eba4 0401 	sub.w	r4, r4, r1
 8011b26:	f935 1c16 	ldrsh.w	r1, [r5, #-22]
 8011b2a:	eba3 0301 	sub.w	r3, r3, r1
 8011b2e:	f935 1c1c 	ldrsh.w	r1, [r5, #-28]
 8011b32:	eba4 0401 	sub.w	r4, r4, r1
 8011b36:	f935 1c14 	ldrsh.w	r1, [r5, #-20]
 8011b3a:	eba3 0301 	sub.w	r3, r3, r1
 8011b3e:	f935 1c1a 	ldrsh.w	r1, [r5, #-26]
 8011b42:	eba4 0401 	sub.w	r4, r4, r1
 8011b46:	f935 1c12 	ldrsh.w	r1, [r5, #-18]
 8011b4a:	eba3 0301 	sub.w	r3, r3, r1
 8011b4e:	d1db      	bne.n	8011b08 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb44>
 8011b50:	9942      	ldr	r1, [sp, #264]	; 0x108
 8011b52:	440a      	add	r2, r1
 8011b54:	b1d8      	cbz	r0, 8011b8e <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbca>
 8011b56:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011b5a:	2801      	cmp	r0, #1
 8011b5c:	eba4 0401 	sub.w	r4, r4, r1
 8011b60:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8011b64:	eba3 0301 	sub.w	r3, r3, r1
 8011b68:	d00f      	beq.n	8011b8a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8011b6a:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8011b6e:	2802      	cmp	r0, #2
 8011b70:	eba4 0401 	sub.w	r4, r4, r1
 8011b74:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8011b78:	eba3 0301 	sub.w	r3, r3, r1
 8011b7c:	d005      	beq.n	8011b8a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xbc6>
 8011b7e:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8011b82:	1a64      	subs	r4, r4, r1
 8011b84:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8011b88:	1a5b      	subs	r3, r3, r1
 8011b8a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8011b8c:	440a      	add	r2, r1
 8011b8e:	3601      	adds	r6, #1
 8011b90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011b92:	42b1      	cmp	r1, r6
 8011b94:	d1b4      	bne.n	8011b00 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xb3c>
 8011b96:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8011b98:	fb02 f404 	mul.w	r4, r2, r4
 8011b9c:	fb02 f303 	mul.w	r3, r2, r3
 8011ba0:	f7ff bad4 	b.w	801114c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	9328      	str	r3, [sp, #160]	; 0xa0
 8011ba8:	f7ff bac7 	b.w	801113a <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x176>
 8011bac:	2301      	movs	r3, #1
 8011bae:	9327      	str	r3, [sp, #156]	; 0x9c
 8011bb0:	f7ff bab9 	b.w	8011126 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x162>
 8011bb4:	f1c1 0101 	rsb	r1, r1, #1
 8011bb8:	fa0b f101 	lsl.w	r1, fp, r1
 8011bbc:	f301 021f 	ssat	r2, #32, r1
 8011bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	fb52 f213 	smmulr	r2, r2, r3
 8011bc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f303 0307 	ssat	r3, #8, r3
 8011bd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011bd4:	7053      	strb	r3, [r2, #1]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	e73b      	b.n	8011a52 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa8e>
 8011bda:	f1c1 0101 	rsb	r1, r1, #1
 8011bde:	fa0a f201 	lsl.w	r2, sl, r1
 8011be2:	f302 021f 	ssat	r2, #32, r2
 8011be6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011be8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011bec:	fb52 f213 	smmulr	r2, r2, r3
 8011bf0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011bf2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f303 0307 	ssat	r3, #8, r3
 8011bfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011bfe:	7013      	strb	r3, [r2, #0]
 8011c00:	e710      	b.n	8011a24 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xa60>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	dd0f      	ble.n	8011c26 <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0xc62>
 8011c06:	0049      	lsls	r1, r1, #1
 8011c08:	f8d8 3000 	ldr.w	r3, [r8]
 8011c0c:	f8db 2000 	ldr.w	r2, [fp]
 8011c10:	fb51 2303 	smmla	r3, r1, r3, r2
 8011c14:	4103      	asrs	r3, r0
 8011c16:	f303 0307 	ssat	r3, #8, r3
 8011c1a:	f88a 3000 	strb.w	r3, [sl]
 8011c1e:	e55e      	b.n	80116de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 8011c20:	461c      	mov	r4, r3
 8011c22:	f7ff ba93 	b.w	801114c <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x188>
 8011c26:	f1c0 0201 	rsb	r2, r0, #1
 8011c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8011c2e:	f302 021f 	ssat	r2, #32, r2
 8011c32:	f8d8 3000 	ldr.w	r3, [r8]
 8011c36:	fb52 f213 	smmulr	r2, r2, r3
 8011c3a:	f8db 3000 	ldr.w	r3, [fp]
 8011c3e:	4413      	add	r3, r2
 8011c40:	f303 0307 	ssat	r3, #8, r3
 8011c44:	f88a 3000 	strb.w	r3, [sl]
 8011c48:	e549      	b.n	80116de <st_sssa8_ch_nn_mat_mult_conv2d_dilated_nt_t+0x71a>
 8011c4a:	bf00      	nop

08011c4c <st_int8_fill>:
 8011c4c:	078b      	lsls	r3, r1, #30
 8011c4e:	468c      	mov	ip, r1
 8011c50:	d00a      	beq.n	8011c68 <st_int8_fill+0x1c>
 8011c52:	b912      	cbnz	r2, 8011c5a <st_int8_fill+0xe>
 8011c54:	e045      	b.n	8011ce2 <st_int8_fill+0x96>
 8011c56:	2a00      	cmp	r2, #0
 8011c58:	d044      	beq.n	8011ce4 <st_int8_fill+0x98>
 8011c5a:	f80c 0b01 	strb.w	r0, [ip], #1
 8011c5e:	f01c 0f03 	tst.w	ip, #3
 8011c62:	f102 32ff 	add.w	r2, r2, #4294967295
 8011c66:	d1f6      	bne.n	8011c56 <st_int8_fill+0xa>
 8011c68:	b2c3      	uxtb	r3, r0
 8011c6a:	0911      	lsrs	r1, r2, #4
 8011c6c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8011c70:	b510      	push	{r4, lr}
 8011c72:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8011c76:	b2a4      	uxth	r4, r4
 8011c78:	ea44 0403 	orr.w	r4, r4, r3
 8011c7c:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8011c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011c84:	ea44 0403 	orr.w	r4, r4, r3
 8011c88:	d043      	beq.n	8011d12 <st_int8_fill+0xc6>
 8011c8a:	1e4b      	subs	r3, r1, #1
 8011c8c:	2b04      	cmp	r3, #4
 8011c8e:	d92a      	bls.n	8011ce6 <st_int8_fill+0x9a>
 8011c90:	f01c 0f07 	tst.w	ip, #7
 8011c94:	d127      	bne.n	8011ce6 <st_int8_fill+0x9a>
 8011c96:	f10c 0310 	add.w	r3, ip, #16
 8011c9a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8011c9e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8011ca2:	e943 4404 	strd	r4, r4, [r3, #-16]
 8011ca6:	e943 4402 	strd	r4, r4, [r3, #-8]
 8011caa:	3310      	adds	r3, #16
 8011cac:	428b      	cmp	r3, r1
 8011cae:	d1f8      	bne.n	8011ca2 <st_int8_fill+0x56>
 8011cb0:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011cb4:	44f4      	add	ip, lr
 8011cb6:	f002 0203 	and.w	r2, r2, #3
 8011cba:	b15b      	cbz	r3, 8011cd4 <st_int8_fill+0x88>
 8011cbc:	1e59      	subs	r1, r3, #1
 8011cbe:	f8cc 4000 	str.w	r4, [ip]
 8011cc2:	d005      	beq.n	8011cd0 <st_int8_fill+0x84>
 8011cc4:	2901      	cmp	r1, #1
 8011cc6:	f8cc 4004 	str.w	r4, [ip, #4]
 8011cca:	bf18      	it	ne
 8011ccc:	f8cc 4008 	strne.w	r4, [ip, #8]
 8011cd0:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8011cd4:	b1e2      	cbz	r2, 8011d10 <st_int8_fill+0xc4>
 8011cd6:	4601      	mov	r1, r0
 8011cd8:	4660      	mov	r0, ip
 8011cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cde:	f001 bbb3 	b.w	8013448 <memset>
 8011ce2:	4770      	bx	lr
 8011ce4:	4770      	bx	lr
 8011ce6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8011cea:	4663      	mov	r3, ip
 8011cec:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8011cf0:	601c      	str	r4, [r3, #0]
 8011cf2:	3310      	adds	r3, #16
 8011cf4:	f843 4c0c 	str.w	r4, [r3, #-12]
 8011cf8:	f843 4c08 	str.w	r4, [r3, #-8]
 8011cfc:	f843 4c04 	str.w	r4, [r3, #-4]
 8011d00:	4299      	cmp	r1, r3
 8011d02:	d1f5      	bne.n	8011cf0 <st_int8_fill+0xa4>
 8011d04:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011d08:	44f4      	add	ip, lr
 8011d0a:	f002 0203 	and.w	r2, r2, #3
 8011d0e:	e7d4      	b.n	8011cba <st_int8_fill+0x6e>
 8011d10:	bd10      	pop	{r4, pc}
 8011d12:	0893      	lsrs	r3, r2, #2
 8011d14:	f002 0203 	and.w	r2, r2, #3
 8011d18:	e7cf      	b.n	8011cba <st_int8_fill+0x6e>
 8011d1a:	bf00      	nop

08011d1c <st_int8_copy>:
 8011d1c:	078b      	lsls	r3, r1, #30
 8011d1e:	d00a      	beq.n	8011d36 <st_int8_copy+0x1a>
 8011d20:	b912      	cbnz	r2, 8011d28 <st_int8_copy+0xc>
 8011d22:	e04f      	b.n	8011dc4 <st_int8_copy+0xa8>
 8011d24:	2a00      	cmp	r2, #0
 8011d26:	d04e      	beq.n	8011dc6 <st_int8_copy+0xaa>
 8011d28:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8011d2c:	3a01      	subs	r2, #1
 8011d2e:	f801 3b01 	strb.w	r3, [r1], #1
 8011d32:	078b      	lsls	r3, r1, #30
 8011d34:	d1f6      	bne.n	8011d24 <st_int8_copy+0x8>
 8011d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8011d3e:	d065      	beq.n	8011e0c <st_int8_copy+0xf0>
 8011d40:	ea41 0300 	orr.w	r3, r1, r0
 8011d44:	075b      	lsls	r3, r3, #29
 8011d46:	d13f      	bne.n	8011dc8 <st_int8_copy+0xac>
 8011d48:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d93b      	bls.n	8011dc8 <st_int8_copy+0xac>
 8011d50:	f100 0310 	add.w	r3, r0, #16
 8011d54:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011d58:	f101 0c10 	add.w	ip, r1, #16
 8011d5c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8011d60:	3310      	adds	r3, #16
 8011d62:	f10c 0c10 	add.w	ip, ip, #16
 8011d66:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8011d6a:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8011d6e:	4573      	cmp	r3, lr
 8011d70:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8011d74:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8011d78:	d1f2      	bne.n	8011d60 <st_int8_copy+0x44>
 8011d7a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011d7e:	4421      	add	r1, r4
 8011d80:	4420      	add	r0, r4
 8011d82:	f002 0203 	and.w	r2, r2, #3
 8011d86:	b16b      	cbz	r3, 8011da4 <st_int8_copy+0x88>
 8011d88:	6804      	ldr	r4, [r0, #0]
 8011d8a:	600c      	str	r4, [r1, #0]
 8011d8c:	1e5c      	subs	r4, r3, #1
 8011d8e:	d005      	beq.n	8011d9c <st_int8_copy+0x80>
 8011d90:	6845      	ldr	r5, [r0, #4]
 8011d92:	2c01      	cmp	r4, #1
 8011d94:	604d      	str	r5, [r1, #4]
 8011d96:	d001      	beq.n	8011d9c <st_int8_copy+0x80>
 8011d98:	6884      	ldr	r4, [r0, #8]
 8011d9a:	608c      	str	r4, [r1, #8]
 8011d9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011da0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011da4:	b162      	cbz	r2, 8011dc0 <st_int8_copy+0xa4>
 8011da6:	f990 3000 	ldrsb.w	r3, [r0]
 8011daa:	3a01      	subs	r2, #1
 8011dac:	700b      	strb	r3, [r1, #0]
 8011dae:	d007      	beq.n	8011dc0 <st_int8_copy+0xa4>
 8011db0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011db4:	2a01      	cmp	r2, #1
 8011db6:	704b      	strb	r3, [r1, #1]
 8011db8:	d002      	beq.n	8011dc0 <st_int8_copy+0xa4>
 8011dba:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8011dbe:	708b      	strb	r3, [r1, #2]
 8011dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc4:	4770      	bx	lr
 8011dc6:	4770      	bx	lr
 8011dc8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011dcc:	460b      	mov	r3, r1
 8011dce:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8011dd2:	4684      	mov	ip, r0
 8011dd4:	f8dc 8000 	ldr.w	r8, [ip]
 8011dd8:	3310      	adds	r3, #16
 8011dda:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8011dde:	f10c 0c10 	add.w	ip, ip, #16
 8011de2:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8011de6:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8011dea:	f843 8c10 	str.w	r8, [r3, #-16]
 8011dee:	f843 7c0c 	str.w	r7, [r3, #-12]
 8011df2:	f843 6c08 	str.w	r6, [r3, #-8]
 8011df6:	f843 5c04 	str.w	r5, [r3, #-4]
 8011dfa:	459e      	cmp	lr, r3
 8011dfc:	d1ea      	bne.n	8011dd4 <st_int8_copy+0xb8>
 8011dfe:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011e02:	4421      	add	r1, r4
 8011e04:	4420      	add	r0, r4
 8011e06:	f002 0203 	and.w	r2, r2, #3
 8011e0a:	e7bc      	b.n	8011d86 <st_int8_copy+0x6a>
 8011e0c:	0893      	lsrs	r3, r2, #2
 8011e0e:	f002 0203 	and.w	r2, r2, #3
 8011e12:	e7b8      	b.n	8011d86 <st_int8_copy+0x6a>

08011e14 <st_int8_reordered_no_shift_zero>:
 8011e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e16:	0897      	lsrs	r7, r2, #2
 8011e18:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8011e1c:	d02f      	beq.n	8011e7e <st_int8_reordered_no_shift_zero+0x6a>
 8011e1e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8011e22:	460c      	mov	r4, r1
 8011e24:	f850 cb04 	ldr.w	ip, [r0], #4
 8011e28:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8011e2c:	fa2f fe8e 	sxtb16	lr, lr
 8011e30:	fade fe03 	ssub16	lr, lr, r3
 8011e34:	fa2f fc8c 	sxtb16	ip, ip
 8011e38:	fadc fc03 	ssub16	ip, ip, r3
 8011e3c:	42a8      	cmp	r0, r5
 8011e3e:	f8c4 c000 	str.w	ip, [r4]
 8011e42:	f8c4 e004 	str.w	lr, [r4, #4]
 8011e46:	f104 0408 	add.w	r4, r4, #8
 8011e4a:	d1eb      	bne.n	8011e24 <st_int8_reordered_no_shift_zero+0x10>
 8011e4c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8011e50:	f012 0203 	ands.w	r2, r2, #3
 8011e54:	d012      	beq.n	8011e7c <st_int8_reordered_no_shift_zero+0x68>
 8011e56:	f995 0000 	ldrsb.w	r0, [r5]
 8011e5a:	b273      	sxtb	r3, r6
 8011e5c:	3a01      	subs	r2, #1
 8011e5e:	eba0 0003 	sub.w	r0, r0, r3
 8011e62:	8008      	strh	r0, [r1, #0]
 8011e64:	d00a      	beq.n	8011e7c <st_int8_reordered_no_shift_zero+0x68>
 8011e66:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8011e6a:	2a01      	cmp	r2, #1
 8011e6c:	eba0 0003 	sub.w	r0, r0, r3
 8011e70:	8048      	strh	r0, [r1, #2]
 8011e72:	d003      	beq.n	8011e7c <st_int8_reordered_no_shift_zero+0x68>
 8011e74:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	808b      	strh	r3, [r1, #4]
 8011e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e7e:	4605      	mov	r5, r0
 8011e80:	e7e6      	b.n	8011e50 <st_int8_reordered_no_shift_zero+0x3c>
 8011e82:	bf00      	nop

08011e84 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	b09d      	sub	sp, #116	; 0x74
 8011e8a:	4683      	mov	fp, r0
 8011e8c:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8011e90:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011e92:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8011e96:	441d      	add	r5, r3
 8011e98:	9417      	str	r4, [sp, #92]	; 0x5c
 8011e9a:	0864      	lsrs	r4, r4, #1
 8011e9c:	9318      	str	r3, [sp, #96]	; 0x60
 8011e9e:	910c      	str	r1, [sp, #48]	; 0x30
 8011ea0:	9216      	str	r2, [sp, #88]	; 0x58
 8011ea2:	9008      	str	r0, [sp, #32]
 8011ea4:	9515      	str	r5, [sp, #84]	; 0x54
 8011ea6:	9419      	str	r4, [sp, #100]	; 0x64
 8011ea8:	f000 81d2 	beq.w	8012250 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3cc>
 8011eac:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8011eb0:	4617      	mov	r7, r2
 8011eb2:	1e62      	subs	r2, r4, #1
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011eb8:	f1a0 0310 	sub.w	r3, r0, #16
 8011ebc:	b292      	uxth	r2, r2
 8011ebe:	46d9      	mov	r9, fp
 8011ec0:	3108      	adds	r1, #8
 8011ec2:	091b      	lsrs	r3, r3, #4
 8011ec4:	960f      	str	r6, [sp, #60]	; 0x3c
 8011ec6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011eca:	463a      	mov	r2, r7
 8011ecc:	3301      	adds	r3, #1
 8011ece:	3208      	adds	r2, #8
 8011ed0:	910e      	str	r1, [sp, #56]	; 0x38
 8011ed2:	4601      	mov	r1, r0
 8011ed4:	3803      	subs	r0, #3
 8011ed6:	9207      	str	r2, [sp, #28]
 8011ed8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011eda:	900d      	str	r0, [sp, #52]	; 0x34
 8011edc:	3204      	adds	r2, #4
 8011ede:	9202      	str	r2, [sp, #8]
 8011ee0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011ee2:	3204      	adds	r2, #4
 8011ee4:	9203      	str	r2, [sp, #12]
 8011ee6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011ee8:	3204      	adds	r2, #4
 8011eea:	9204      	str	r2, [sp, #16]
 8011eec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011eee:	3201      	adds	r2, #1
 8011ef0:	9205      	str	r2, [sp, #20]
 8011ef2:	1c6a      	adds	r2, r5, #1
 8011ef4:	9206      	str	r2, [sp, #24]
 8011ef6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8011efa:	9213      	str	r2, [sp, #76]	; 0x4c
 8011efc:	019a      	lsls	r2, r3, #6
 8011efe:	9210      	str	r2, [sp, #64]	; 0x40
 8011f00:	011a      	lsls	r2, r3, #4
 8011f02:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8011f06:	9212      	str	r2, [sp, #72]	; 0x48
 8011f08:	9311      	str	r3, [sp, #68]	; 0x44
 8011f0a:	1f0b      	subs	r3, r1, #4
 8011f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8011f0e:	9a07      	ldr	r2, [sp, #28]
 8011f10:	9c08      	ldr	r4, [sp, #32]
 8011f12:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8011f16:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011f1a:	2c0f      	cmp	r4, #15
 8011f1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8011f1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f20:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011f22:	921b      	str	r2, [sp, #108]	; 0x6c
 8011f24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011f26:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011f28:	f340 8285 	ble.w	8012436 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5b2>
 8011f2c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011f2e:	464d      	mov	r5, r9
 8011f30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011f32:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011f34:	f8d4 e000 	ldr.w	lr, [r4]
 8011f38:	f8d7 a000 	ldr.w	sl, [r7]
 8011f3c:	f8d5 c000 	ldr.w	ip, [r5]
 8011f40:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8011f44:	fb2c 330e 	smlad	r3, ip, lr, r3
 8011f48:	fb2c 000a 	smlad	r0, ip, sl, r0
 8011f4c:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8011f50:	fb28 110a 	smlad	r1, r8, sl, r1
 8011f54:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8011f58:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8011f5c:	68aa      	ldr	r2, [r5, #8]
 8011f5e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8011f62:	fb22 330c 	smlad	r3, r2, ip, r3
 8011f66:	fb22 0008 	smlad	r0, r2, r8, r0
 8011f6a:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8011f6e:	fb2b 1808 	smlad	r8, fp, r8, r1
 8011f72:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8011f76:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8011f7a:	692a      	ldr	r2, [r5, #16]
 8011f7c:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8011f80:	fb22 330c 	smlad	r3, r2, ip, r3
 8011f84:	fb22 000b 	smlad	r0, r2, fp, r0
 8011f88:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8011f8c:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8011f90:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8011f94:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8011f98:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8011f9c:	69e9      	ldr	r1, [r5, #28]
 8011f9e:	fb28 330c 	smlad	r3, r8, ip, r3
 8011fa2:	fb28 000a 	smlad	r0, r8, sl, r0
 8011fa6:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8011faa:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8011fae:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8011fb2:	6939      	ldr	r1, [r7, #16]
 8011fb4:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8011fb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011fba:	fb28 330e 	smlad	r3, r8, lr, r3
 8011fbe:	fb28 0001 	smlad	r0, r8, r1, r0
 8011fc2:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8011fc6:	fb22 a101 	smlad	r1, r2, r1, sl
 8011fca:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8011fce:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8011fd2:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 8011fd6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8011fd8:	fb28 330e 	smlad	r3, r8, lr, r3
 8011fdc:	fb28 000a 	smlad	r0, r8, sl, r0
 8011fe0:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8011fe4:	fb22 120a 	smlad	r2, r2, sl, r1
 8011fe8:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8011fec:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8011ff0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8011ff4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011ff6:	fb28 330e 	smlad	r3, r8, lr, r3
 8011ffa:	fb28 080b 	smlad	r8, r8, fp, r0
 8011ffe:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8012002:	fb21 210b 	smlad	r1, r1, fp, r2
 8012006:	69e2      	ldr	r2, [r4, #28]
 8012008:	3720      	adds	r7, #32
 801200a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801200c:	3420      	adds	r4, #32
 801200e:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8012012:	3540      	adds	r5, #64	; 0x40
 8012014:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8012018:	fb20 3302 	smlad	r3, r0, r2, r3
 801201c:	fb20 800b 	smlad	r0, r0, fp, r8
 8012020:	fb2c e202 	smlad	r2, ip, r2, lr
 8012024:	fb2c 110b 	smlad	r1, ip, fp, r1
 8012028:	42a6      	cmp	r6, r4
 801202a:	d183      	bne.n	8011f34 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xb0>
 801202c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801202e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8012032:	44a9      	add	r9, r5
 8012034:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012036:	9501      	str	r5, [sp, #4]
 8012038:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801203a:	45ab      	cmp	fp, r5
 801203c:	f280 8204 	bge.w	8012448 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8012040:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012042:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012046:	eba5 050b 	sub.w	r5, r5, fp
 801204a:	08ad      	lsrs	r5, r5, #2
 801204c:	462e      	mov	r6, r5
 801204e:	950b      	str	r5, [sp, #44]	; 0x2c
 8012050:	464d      	mov	r5, r9
 8012052:	3601      	adds	r6, #1
 8012054:	00f7      	lsls	r7, r6, #3
 8012056:	960a      	str	r6, [sp, #40]	; 0x28
 8012058:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 801205c:	9709      	str	r7, [sp, #36]	; 0x24
 801205e:	f8d4 e000 	ldr.w	lr, [r4]
 8012062:	f8dc 7000 	ldr.w	r7, [ip]
 8012066:	f8d5 a000 	ldr.w	sl, [r5]
 801206a:	686e      	ldr	r6, [r5, #4]
 801206c:	fb2a 330e 	smlad	r3, sl, lr, r3
 8012070:	fb2a 0007 	smlad	r0, sl, r7, r0
 8012074:	fb26 220e 	smlad	r2, r6, lr, r2
 8012078:	fb26 1107 	smlad	r1, r6, r7, r1
 801207c:	6867      	ldr	r7, [r4, #4]
 801207e:	f10c 0c08 	add.w	ip, ip, #8
 8012082:	68ae      	ldr	r6, [r5, #8]
 8012084:	3408      	adds	r4, #8
 8012086:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801208a:	3510      	adds	r5, #16
 801208c:	f85c ac04 	ldr.w	sl, [ip, #-4]
 8012090:	fb26 3307 	smlad	r3, r6, r7, r3
 8012094:	fb26 000a 	smlad	r0, r6, sl, r0
 8012098:	fb2e 2207 	smlad	r2, lr, r7, r2
 801209c:	fb2e 110a 	smlad	r1, lr, sl, r1
 80120a0:	4544      	cmp	r4, r8
 80120a2:	d1dc      	bne.n	801205e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 80120a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80120a6:	f10b 0b04 	add.w	fp, fp, #4
 80120aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80120ac:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 80120b0:	9c01      	ldr	r4, [sp, #4]
 80120b2:	442c      	add	r4, r5
 80120b4:	9401      	str	r4, [sp, #4]
 80120b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80120b8:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 80120bc:	9f08      	ldr	r7, [sp, #32]
 80120be:	455f      	cmp	r7, fp
 80120c0:	dd54      	ble.n	801216c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 80120c2:	f9b8 5000 	ldrsh.w	r5, [r8]
 80120c6:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 80120ca:	f9b9 6000 	ldrsh.w	r6, [r9]
 80120ce:	fb05 2204 	mla	r2, r5, r4, r2
 80120d2:	fb06 3305 	mla	r3, r6, r5, r3
 80120d6:	9d01      	ldr	r5, [sp, #4]
 80120d8:	f9b5 5000 	ldrsh.w	r5, [r5]
 80120dc:	fb05 1104 	mla	r1, r5, r4, r1
 80120e0:	f10b 0401 	add.w	r4, fp, #1
 80120e4:	fb06 0005 	mla	r0, r6, r5, r0
 80120e8:	42a7      	cmp	r7, r4
 80120ea:	dd3a      	ble.n	8012162 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 80120ec:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80120f0:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 80120f4:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 80120f8:	fb05 2204 	mla	r2, r5, r4, r2
 80120fc:	fb06 3305 	mla	r3, r6, r5, r3
 8012100:	9d01      	ldr	r5, [sp, #4]
 8012102:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8012106:	fb05 1104 	mla	r1, r5, r4, r1
 801210a:	f10b 0402 	add.w	r4, fp, #2
 801210e:	fb06 0005 	mla	r0, r6, r5, r0
 8012112:	42a7      	cmp	r7, r4
 8012114:	dd25      	ble.n	8012162 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8012116:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 801211a:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 801211e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8012122:	fb05 2204 	mla	r2, r5, r4, r2
 8012126:	fb06 3305 	mla	r3, r6, r5, r3
 801212a:	9d01      	ldr	r5, [sp, #4]
 801212c:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 8012130:	fb05 1104 	mla	r1, r5, r4, r1
 8012134:	f10b 0403 	add.w	r4, fp, #3
 8012138:	fb06 0005 	mla	r0, r6, r5, r0
 801213c:	42a7      	cmp	r7, r4
 801213e:	dd10      	ble.n	8012162 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8012140:	9c01      	ldr	r4, [sp, #4]
 8012142:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8012146:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 801214a:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 801214e:	fb04 3305 	mla	r3, r4, r5, r3
 8012152:	fb04 0006 	mla	r0, r4, r6, r0
 8012156:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 801215a:	fb05 2204 	mla	r2, r5, r4, r2
 801215e:	fb06 1104 	mla	r1, r6, r4, r1
 8012162:	9c08      	ldr	r4, [sp, #32]
 8012164:	eba4 0b0b 	sub.w	fp, r4, fp
 8012168:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 801216c:	9c02      	ldr	r4, [sp, #8]
 801216e:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8012172:	2c15      	cmp	r4, #21
 8012174:	f340 80e8 	ble.w	8012348 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4c4>
 8012178:	1ea6      	subs	r6, r4, #2
 801217a:	2501      	movs	r5, #1
 801217c:	3c01      	subs	r4, #1
 801217e:	fa05 f606 	lsl.w	r6, r5, r6
 8012182:	9d03      	ldr	r5, [sp, #12]
 8012184:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8012188:	fb53 6305 	smmla	r3, r3, r5, r6
 801218c:	fb50 6005 	smmla	r0, r0, r5, r6
 8012190:	9d04      	ldr	r5, [sp, #16]
 8012192:	4123      	asrs	r3, r4
 8012194:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8012198:	443b      	add	r3, r7
 801219a:	f303 0307 	ssat	r3, #8, r3
 801219e:	4120      	asrs	r0, r4
 80121a0:	9c05      	ldr	r4, [sp, #20]
 80121a2:	4438      	add	r0, r7
 80121a4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80121a8:	f300 0007 	ssat	r0, #8, r0
 80121ac:	9b06      	ldr	r3, [sp, #24]
 80121ae:	f803 0c01 	strb.w	r0, [r3, #-1]
 80121b2:	9b02      	ldr	r3, [sp, #8]
 80121b4:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80121b8:	2b15      	cmp	r3, #21
 80121ba:	f340 80e5 	ble.w	8012388 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x504>
 80121be:	1e9c      	subs	r4, r3, #2
 80121c0:	2001      	movs	r0, #1
 80121c2:	3b01      	subs	r3, #1
 80121c4:	fa00 f404 	lsl.w	r4, r0, r4
 80121c8:	9803      	ldr	r0, [sp, #12]
 80121ca:	6800      	ldr	r0, [r0, #0]
 80121cc:	fb52 4200 	smmla	r2, r2, r0, r4
 80121d0:	fb51 4100 	smmla	r1, r1, r0, r4
 80121d4:	9804      	ldr	r0, [sp, #16]
 80121d6:	411a      	asrs	r2, r3
 80121d8:	6805      	ldr	r5, [r0, #0]
 80121da:	442a      	add	r2, r5
 80121dc:	f302 0207 	ssat	r2, #8, r2
 80121e0:	4119      	asrs	r1, r3
 80121e2:	9b05      	ldr	r3, [sp, #20]
 80121e4:	4429      	add	r1, r5
 80121e6:	701a      	strb	r2, [r3, #0]
 80121e8:	f301 0107 	ssat	r1, #8, r1
 80121ec:	9b06      	ldr	r3, [sp, #24]
 80121ee:	7019      	strb	r1, [r3, #0]
 80121f0:	9a07      	ldr	r2, [sp, #28]
 80121f2:	9b02      	ldr	r3, [sp, #8]
 80121f4:	3208      	adds	r2, #8
 80121f6:	3304      	adds	r3, #4
 80121f8:	9207      	str	r2, [sp, #28]
 80121fa:	9a03      	ldr	r2, [sp, #12]
 80121fc:	9302      	str	r3, [sp, #8]
 80121fe:	3208      	adds	r2, #8
 8012200:	9203      	str	r2, [sp, #12]
 8012202:	9a04      	ldr	r2, [sp, #16]
 8012204:	3208      	adds	r2, #8
 8012206:	9204      	str	r2, [sp, #16]
 8012208:	9a05      	ldr	r2, [sp, #20]
 801220a:	3202      	adds	r2, #2
 801220c:	9205      	str	r2, [sp, #20]
 801220e:	9a06      	ldr	r2, [sp, #24]
 8012210:	3202      	adds	r2, #2
 8012212:	9206      	str	r2, [sp, #24]
 8012214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012216:	4293      	cmp	r3, r2
 8012218:	f47f ae79 	bne.w	8011f0e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x8a>
 801221c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801221e:	46cb      	mov	fp, r9
 8012220:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012222:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012226:	9229      	str	r2, [sp, #164]	; 0xa4
 8012228:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801222a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801222e:	922a      	str	r2, [sp, #168]	; 0xa8
 8012230:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8012232:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8012236:	922b      	str	r2, [sp, #172]	; 0xac
 8012238:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801223a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801223e:	9215      	str	r2, [sp, #84]	; 0x54
 8012240:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012242:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012246:	9216      	str	r2, [sp, #88]	; 0x58
 8012248:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801224a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801224e:	9328      	str	r3, [sp, #160]	; 0xa0
 8012250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012252:	07db      	lsls	r3, r3, #31
 8012254:	d56f      	bpl.n	8012336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8012256:	9a08      	ldr	r2, [sp, #32]
 8012258:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801225a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801225c:	0896      	lsrs	r6, r2, #2
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 8012264:	f000 812e 	beq.w	80124c4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 8012268:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 801226c:	463c      	mov	r4, r7
 801226e:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 8012272:	461a      	mov	r2, r3
 8012274:	f8db 5000 	ldr.w	r5, [fp]
 8012278:	f10b 0b08 	add.w	fp, fp, #8
 801227c:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8012280:	f8d0 e000 	ldr.w	lr, [r0]
 8012284:	fb25 330e 	smlad	r3, r5, lr, r3
 8012288:	f8d4 e000 	ldr.w	lr, [r4]
 801228c:	fb25 220e 	smlad	r2, r5, lr, r2
 8012290:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012294:	3408      	adds	r4, #8
 8012296:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801229a:	3008      	adds	r0, #8
 801229c:	fb21 330e 	smlad	r3, r1, lr, r3
 80122a0:	fb21 2205 	smlad	r2, r1, r5, r2
 80122a4:	45b3      	cmp	fp, r6
 80122a6:	d1e5      	bne.n	8012274 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3f0>
 80122a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80122aa:	4467      	add	r7, ip
 80122ac:	4461      	add	r1, ip
 80122ae:	910c      	str	r1, [sp, #48]	; 0x30
 80122b0:	9908      	ldr	r1, [sp, #32]
 80122b2:	f011 0103 	ands.w	r1, r1, #3
 80122b6:	d01d      	beq.n	80122f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80122b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122ba:	3901      	subs	r1, #1
 80122bc:	f9b6 0000 	ldrsh.w	r0, [r6]
 80122c0:	882c      	ldrh	r4, [r5, #0]
 80122c2:	b289      	uxth	r1, r1
 80122c4:	fb14 3300 	smlabb	r3, r4, r0, r3
 80122c8:	883c      	ldrh	r4, [r7, #0]
 80122ca:	fb14 2200 	smlabb	r2, r4, r0, r2
 80122ce:	b189      	cbz	r1, 80122f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80122d0:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80122d4:	2901      	cmp	r1, #1
 80122d6:	886c      	ldrh	r4, [r5, #2]
 80122d8:	fb14 3300 	smlabb	r3, r4, r0, r3
 80122dc:	887c      	ldrh	r4, [r7, #2]
 80122de:	fb14 2200 	smlabb	r2, r4, r0, r2
 80122e2:	d007      	beq.n	80122f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 80122e4:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80122e8:	88a8      	ldrh	r0, [r5, #4]
 80122ea:	fb11 3300 	smlabb	r3, r1, r0, r3
 80122ee:	88b8      	ldrh	r0, [r7, #4]
 80122f0:	fb11 2200 	smlabb	r2, r1, r0, r2
 80122f4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80122f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80122fa:	2915      	cmp	r1, #21
 80122fc:	f340 80a6 	ble.w	801244c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c8>
 8012300:	1e8d      	subs	r5, r1, #2
 8012302:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8012304:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8012306:	3901      	subs	r1, #1
 8012308:	2601      	movs	r6, #1
 801230a:	6800      	ldr	r0, [r0, #0]
 801230c:	6824      	ldr	r4, [r4, #0]
 801230e:	40ae      	lsls	r6, r5
 8012310:	fb53 6500 	smmla	r5, r3, r0, r6
 8012314:	fb52 6300 	smmla	r3, r2, r0, r6
 8012318:	fa45 f201 	asr.w	r2, r5, r1
 801231c:	4422      	add	r2, r4
 801231e:	f302 0207 	ssat	r2, #8, r2
 8012322:	410b      	asrs	r3, r1
 8012324:	982b      	ldr	r0, [sp, #172]	; 0xac
 8012326:	4423      	add	r3, r4
 8012328:	f800 2b01 	strb.w	r2, [r0], #1
 801232c:	f303 0307 	ssat	r3, #8, r3
 8012330:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012332:	902b      	str	r0, [sp, #172]	; 0xac
 8012334:	7013      	strb	r3, [r2, #0]
 8012336:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801233a:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 801233e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8012340:	4418      	add	r0, r3
 8012342:	b01d      	add	sp, #116	; 0x74
 8012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012348:	2c00      	cmp	r4, #0
 801234a:	dd34      	ble.n	80123b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x532>
 801234c:	9d03      	ldr	r5, [sp, #12]
 801234e:	005b      	lsls	r3, r3, #1
 8012350:	9e04      	ldr	r6, [sp, #16]
 8012352:	0040      	lsls	r0, r0, #1
 8012354:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8012358:	f856 6c04 	ldr.w	r6, [r6, #-4]
 801235c:	fb53 6305 	smmla	r3, r3, r5, r6
 8012360:	fb50 6005 	smmla	r0, r0, r5, r6
 8012364:	4123      	asrs	r3, r4
 8012366:	f303 0307 	ssat	r3, #8, r3
 801236a:	4120      	asrs	r0, r4
 801236c:	9c05      	ldr	r4, [sp, #20]
 801236e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012372:	f300 0007 	ssat	r0, #8, r0
 8012376:	9b06      	ldr	r3, [sp, #24]
 8012378:	f803 0c01 	strb.w	r0, [r3, #-1]
 801237c:	9b02      	ldr	r3, [sp, #8]
 801237e:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8012382:	2b15      	cmp	r3, #21
 8012384:	f73f af1b 	bgt.w	80121be <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 8012388:	2b00      	cmp	r3, #0
 801238a:	dd36      	ble.n	80123fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x576>
 801238c:	9803      	ldr	r0, [sp, #12]
 801238e:	0052      	lsls	r2, r2, #1
 8012390:	9c04      	ldr	r4, [sp, #16]
 8012392:	0049      	lsls	r1, r1, #1
 8012394:	6800      	ldr	r0, [r0, #0]
 8012396:	6824      	ldr	r4, [r4, #0]
 8012398:	fb52 4200 	smmla	r2, r2, r0, r4
 801239c:	fb51 4100 	smmla	r1, r1, r0, r4
 80123a0:	411a      	asrs	r2, r3
 80123a2:	f302 0207 	ssat	r2, #8, r2
 80123a6:	4119      	asrs	r1, r3
 80123a8:	9b05      	ldr	r3, [sp, #20]
 80123aa:	701a      	strb	r2, [r3, #0]
 80123ac:	f301 0107 	ssat	r1, #8, r1
 80123b0:	9b06      	ldr	r3, [sp, #24]
 80123b2:	7019      	strb	r1, [r3, #0]
 80123b4:	e71c      	b.n	80121f0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 80123b6:	f1c4 0401 	rsb	r4, r4, #1
 80123ba:	fa03 f504 	lsl.w	r5, r3, r4
 80123be:	f305 051f 	ssat	r5, #32, r5
 80123c2:	9b03      	ldr	r3, [sp, #12]
 80123c4:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80123c8:	fb55 f516 	smmulr	r5, r5, r6
 80123cc:	40a0      	lsls	r0, r4
 80123ce:	f300 001f 	ssat	r0, #32, r0
 80123d2:	fb50 f016 	smmulr	r0, r0, r6
 80123d6:	9c04      	ldr	r4, [sp, #16]
 80123d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80123dc:	442b      	add	r3, r5
 80123de:	f303 0307 	ssat	r3, #8, r3
 80123e2:	9d05      	ldr	r5, [sp, #20]
 80123e4:	f805 3c01 	strb.w	r3, [r5, #-1]
 80123e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80123ec:	4403      	add	r3, r0
 80123ee:	f303 0307 	ssat	r3, #8, r3
 80123f2:	9806      	ldr	r0, [sp, #24]
 80123f4:	f800 3c01 	strb.w	r3, [r0, #-1]
 80123f8:	e6db      	b.n	80121b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32e>
 80123fa:	f1c3 0301 	rsb	r3, r3, #1
 80123fe:	fa02 f003 	lsl.w	r0, r2, r3
 8012402:	f300 001f 	ssat	r0, #32, r0
 8012406:	9a03      	ldr	r2, [sp, #12]
 8012408:	6814      	ldr	r4, [r2, #0]
 801240a:	fb50 f014 	smmulr	r0, r0, r4
 801240e:	fa01 f303 	lsl.w	r3, r1, r3
 8012412:	f303 021f 	ssat	r2, #32, r3
 8012416:	fb52 f214 	smmulr	r2, r2, r4
 801241a:	9904      	ldr	r1, [sp, #16]
 801241c:	680b      	ldr	r3, [r1, #0]
 801241e:	4403      	add	r3, r0
 8012420:	f303 0307 	ssat	r3, #8, r3
 8012424:	9805      	ldr	r0, [sp, #20]
 8012426:	7003      	strb	r3, [r0, #0]
 8012428:	680b      	ldr	r3, [r1, #0]
 801242a:	4413      	add	r3, r2
 801242c:	f303 0307 	ssat	r3, #8, r3
 8012430:	9a06      	ldr	r2, [sp, #24]
 8012432:	7013      	strb	r3, [r2, #0]
 8012434:	e6dc      	b.n	80121f0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8012436:	f04f 0b00 	mov.w	fp, #0
 801243a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801243c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801243e:	45ab      	cmp	fp, r5
 8012440:	9401      	str	r4, [sp, #4]
 8012442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012444:	f6ff adfc 	blt.w	8012040 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8012448:	46a0      	mov	r8, r4
 801244a:	e637      	b.n	80120bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 801244c:	2900      	cmp	r1, #0
 801244e:	dd1a      	ble.n	8012486 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x602>
 8012450:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8012452:	005b      	lsls	r3, r3, #1
 8012454:	0052      	lsls	r2, r2, #1
 8012456:	6804      	ldr	r4, [r0, #0]
 8012458:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801245a:	6805      	ldr	r5, [r0, #0]
 801245c:	fb53 5004 	smmla	r0, r3, r4, r5
 8012460:	fb52 5304 	smmla	r3, r2, r4, r5
 8012464:	fa40 f201 	asr.w	r2, r0, r1
 8012468:	f302 0207 	ssat	r2, #8, r2
 801246c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801246e:	f800 2b01 	strb.w	r2, [r0], #1
 8012472:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8012474:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012478:	4113      	asrs	r3, r2
 801247a:	f303 0307 	ssat	r3, #8, r3
 801247e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012480:	902b      	str	r0, [sp, #172]	; 0xac
 8012482:	7013      	strb	r3, [r2, #0]
 8012484:	e757      	b.n	8012336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8012486:	f1c1 0101 	rsb	r1, r1, #1
 801248a:	408b      	lsls	r3, r1
 801248c:	f303 031f 	ssat	r3, #32, r3
 8012490:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8012492:	6800      	ldr	r0, [r0, #0]
 8012494:	fb53 f310 	smmulr	r3, r3, r0
 8012498:	408a      	lsls	r2, r1
 801249a:	f302 021f 	ssat	r2, #32, r2
 801249e:	fb52 f210 	smmulr	r2, r2, r0
 80124a2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80124a4:	6809      	ldr	r1, [r1, #0]
 80124a6:	440b      	add	r3, r1
 80124a8:	f303 0307 	ssat	r3, #8, r3
 80124ac:	992b      	ldr	r1, [sp, #172]	; 0xac
 80124ae:	f801 3b01 	strb.w	r3, [r1], #1
 80124b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4413      	add	r3, r2
 80124b8:	f303 0307 	ssat	r3, #8, r3
 80124bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80124be:	912b      	str	r1, [sp, #172]	; 0xac
 80124c0:	7013      	strb	r3, [r2, #0]
 80124c2:	e738      	b.n	8012336 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80124c4:	465e      	mov	r6, fp
 80124c6:	461a      	mov	r2, r3
 80124c8:	e6f2      	b.n	80122b0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x42c>
 80124ca:	bf00      	nop

080124cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 80124cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d0:	b093      	sub	sp, #76	; 0x4c
 80124d2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80124d6:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 80124da:	085d      	lsrs	r5, r3, #1
 80124dc:	930e      	str	r3, [sp, #56]	; 0x38
 80124de:	9107      	str	r1, [sp, #28]
 80124e0:	920d      	str	r2, [sp, #52]	; 0x34
 80124e2:	9405      	str	r4, [sp, #20]
 80124e4:	950f      	str	r5, [sp, #60]	; 0x3c
 80124e6:	f000 81fc 	beq.w	80128e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 80124ea:	4616      	mov	r6, r2
 80124ec:	1e6a      	subs	r2, r5, #1
 80124ee:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80124f0:	460f      	mov	r7, r1
 80124f2:	b292      	uxth	r2, r2
 80124f4:	f1a4 0310 	sub.w	r3, r4, #16
 80124f8:	1d29      	adds	r1, r5, #4
 80124fa:	f106 0a08 	add.w	sl, r6, #8
 80124fe:	091b      	lsrs	r3, r3, #4
 8012500:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8012504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012506:	3301      	adds	r3, #1
 8012508:	f102 0b02 	add.w	fp, r2, #2
 801250c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801250e:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8012512:	9509      	str	r5, [sp, #36]	; 0x24
 8012514:	3204      	adds	r2, #4
 8012516:	1ee5      	subs	r5, r4, #3
 8012518:	9202      	str	r2, [sp, #8]
 801251a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801251c:	9508      	str	r5, [sp, #32]
 801251e:	3208      	adds	r2, #8
 8012520:	9204      	str	r2, [sp, #16]
 8012522:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012524:	3208      	adds	r2, #8
 8012526:	9201      	str	r2, [sp, #4]
 8012528:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801252a:	3202      	adds	r2, #2
 801252c:	9203      	str	r2, [sp, #12]
 801252e:	019a      	lsls	r2, r3, #6
 8012530:	011b      	lsls	r3, r3, #4
 8012532:	920a      	str	r2, [sp, #40]	; 0x28
 8012534:	930b      	str	r3, [sp, #44]	; 0x2c
 8012536:	1f23      	subs	r3, r4, #4
 8012538:	930c      	str	r3, [sp, #48]	; 0x30
 801253a:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 801253e:	9905      	ldr	r1, [sp, #20]
 8012540:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8012544:	9311      	str	r3, [sp, #68]	; 0x44
 8012546:	290f      	cmp	r1, #15
 8012548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801254a:	9211      	str	r2, [sp, #68]	; 0x44
 801254c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801254e:	9c07      	ldr	r4, [sp, #28]
 8012550:	f340 819c 	ble.w	801288c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 8012554:	4601      	mov	r1, r0
 8012556:	f8d4 c000 	ldr.w	ip, [r4]
 801255a:	680e      	ldr	r6, [r1, #0]
 801255c:	fb26 330c 	smlad	r3, r6, ip, r3
 8012560:	684d      	ldr	r5, [r1, #4]
 8012562:	fb25 220c 	smlad	r2, r5, ip, r2
 8012566:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801256a:	688e      	ldr	r6, [r1, #8]
 801256c:	fb26 360c 	smlad	r6, r6, ip, r3
 8012570:	68cd      	ldr	r5, [r1, #12]
 8012572:	fb25 250c 	smlad	r5, r5, ip, r2
 8012576:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801257a:	690b      	ldr	r3, [r1, #16]
 801257c:	fb23 660c 	smlad	r6, r3, ip, r6
 8012580:	694a      	ldr	r2, [r1, #20]
 8012582:	fb22 550c 	smlad	r5, r2, ip, r5
 8012586:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801258a:	698b      	ldr	r3, [r1, #24]
 801258c:	fb23 630c 	smlad	r3, r3, ip, r6
 8012590:	69ca      	ldr	r2, [r1, #28]
 8012592:	fb22 520c 	smlad	r2, r2, ip, r5
 8012596:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801259a:	6a0e      	ldr	r6, [r1, #32]
 801259c:	fb26 330c 	smlad	r3, r6, ip, r3
 80125a0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80125a2:	fb25 220c 	smlad	r2, r5, ip, r2
 80125a6:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80125aa:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80125ac:	fb26 360c 	smlad	r6, r6, ip, r3
 80125b0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80125b2:	fb25 250c 	smlad	r5, r5, ip, r2
 80125b6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80125ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80125bc:	fb23 660c 	smlad	r6, r3, ip, r6
 80125c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80125c2:	fb22 550c 	smlad	r5, r2, ip, r5
 80125c6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 80125ca:	3140      	adds	r1, #64	; 0x40
 80125cc:	f851 3c08 	ldr.w	r3, [r1, #-8]
 80125d0:	3420      	adds	r4, #32
 80125d2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80125d6:	fb23 630c 	smlad	r3, r3, ip, r6
 80125da:	fb22 520c 	smlad	r2, r2, ip, r5
 80125de:	42bc      	cmp	r4, r7
 80125e0:	d1b9      	bne.n	8012556 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 80125e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80125e4:	463c      	mov	r4, r7
 80125e6:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80125ea:	4408      	add	r0, r1
 80125ec:	9908      	ldr	r1, [sp, #32]
 80125ee:	458e      	cmp	lr, r1
 80125f0:	da25      	bge.n	801263e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 80125f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80125f4:	eba1 090e 	sub.w	r9, r1, lr
 80125f8:	4601      	mov	r1, r0
 80125fa:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80125fe:	f109 0501 	add.w	r5, r9, #1
 8012602:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8012606:	9506      	str	r5, [sp, #24]
 8012608:	6825      	ldr	r5, [r4, #0]
 801260a:	680e      	ldr	r6, [r1, #0]
 801260c:	fb26 3305 	smlad	r3, r6, r5, r3
 8012610:	684e      	ldr	r6, [r1, #4]
 8012612:	fb26 2505 	smlad	r5, r6, r5, r2
 8012616:	6866      	ldr	r6, [r4, #4]
 8012618:	3110      	adds	r1, #16
 801261a:	f851 cc08 	ldr.w	ip, [r1, #-8]
 801261e:	3408      	adds	r4, #8
 8012620:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012624:	fb2c 3306 	smlad	r3, ip, r6, r3
 8012628:	fb22 5206 	smlad	r2, r2, r6, r5
 801262c:	45a0      	cmp	r8, r4
 801262e:	d1eb      	bne.n	8012608 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 8012630:	9906      	ldr	r1, [sp, #24]
 8012632:	f10e 0e04 	add.w	lr, lr, #4
 8012636:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801263a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801263e:	9e05      	ldr	r6, [sp, #20]
 8012640:	4576      	cmp	r6, lr
 8012642:	dd30      	ble.n	80126a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 8012644:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012648:	8805      	ldrh	r5, [r0, #0]
 801264a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801264e:	8845      	ldrh	r5, [r0, #2]
 8012650:	fb11 2205 	smlabb	r2, r1, r5, r2
 8012654:	f10e 0101 	add.w	r1, lr, #1
 8012658:	428e      	cmp	r6, r1
 801265a:	dd1f      	ble.n	801269c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801265c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012660:	8885      	ldrh	r5, [r0, #4]
 8012662:	fb15 3301 	smlabb	r3, r5, r1, r3
 8012666:	88c5      	ldrh	r5, [r0, #6]
 8012668:	fb11 2205 	smlabb	r2, r1, r5, r2
 801266c:	f10e 0102 	add.w	r1, lr, #2
 8012670:	428e      	cmp	r6, r1
 8012672:	dd13      	ble.n	801269c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 8012674:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012678:	8905      	ldrh	r5, [r0, #8]
 801267a:	fb15 3301 	smlabb	r3, r5, r1, r3
 801267e:	8945      	ldrh	r5, [r0, #10]
 8012680:	fb11 2205 	smlabb	r2, r1, r5, r2
 8012684:	f10e 0103 	add.w	r1, lr, #3
 8012688:	428e      	cmp	r6, r1
 801268a:	dd07      	ble.n	801269c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801268c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012690:	8984      	ldrh	r4, [r0, #12]
 8012692:	fb14 3301 	smlabb	r3, r4, r1, r3
 8012696:	89c4      	ldrh	r4, [r0, #14]
 8012698:	fb11 2204 	smlabb	r2, r1, r4, r2
 801269c:	9905      	ldr	r1, [sp, #20]
 801269e:	eba1 0e0e 	sub.w	lr, r1, lr
 80126a2:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 80126a6:	9902      	ldr	r1, [sp, #8]
 80126a8:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 80126ac:	2d15      	cmp	r5, #21
 80126ae:	f340 80b0 	ble.w	8012812 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 80126b2:	9e04      	ldr	r6, [sp, #16]
 80126b4:	1eac      	subs	r4, r5, #2
 80126b6:	2101      	movs	r1, #1
 80126b8:	3d01      	subs	r5, #1
 80126ba:	f1a6 0e04 	sub.w	lr, r6, #4
 80126be:	fa01 f404 	lsl.w	r4, r1, r4
 80126c2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80126c6:	fb53 4401 	smmla	r4, r3, r1, r4
 80126ca:	9b01      	ldr	r3, [sp, #4]
 80126cc:	fa44 f505 	asr.w	r5, r4, r5
 80126d0:	f853 4c08 	ldr.w	r4, [r3, #-8]
 80126d4:	1f1e      	subs	r6, r3, #4
 80126d6:	442c      	add	r4, r5
 80126d8:	f304 0407 	ssat	r4, #8, r4
 80126dc:	f80b 4c02 	strb.w	r4, [fp, #-2]
 80126e0:	9b03      	ldr	r3, [sp, #12]
 80126e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126e6:	2b15      	cmp	r3, #21
 80126e8:	f340 8085 	ble.w	80127f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 80126ec:	1e9c      	subs	r4, r3, #2
 80126ee:	2501      	movs	r5, #1
 80126f0:	3b01      	subs	r3, #1
 80126f2:	6836      	ldr	r6, [r6, #0]
 80126f4:	f8de 1000 	ldr.w	r1, [lr]
 80126f8:	fa05 f404 	lsl.w	r4, r5, r4
 80126fc:	fb52 4201 	smmla	r2, r2, r1, r4
 8012700:	411a      	asrs	r2, r3
 8012702:	4432      	add	r2, r6
 8012704:	f302 0207 	ssat	r2, #8, r2
 8012708:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801270c:	9b02      	ldr	r3, [sp, #8]
 801270e:	f10b 0b02 	add.w	fp, fp, #2
 8012712:	f10a 0a08 	add.w	sl, sl, #8
 8012716:	3304      	adds	r3, #4
 8012718:	9302      	str	r3, [sp, #8]
 801271a:	9b04      	ldr	r3, [sp, #16]
 801271c:	3308      	adds	r3, #8
 801271e:	9304      	str	r3, [sp, #16]
 8012720:	9b01      	ldr	r3, [sp, #4]
 8012722:	3308      	adds	r3, #8
 8012724:	9301      	str	r3, [sp, #4]
 8012726:	9b03      	ldr	r3, [sp, #12]
 8012728:	3304      	adds	r3, #4
 801272a:	9303      	str	r3, [sp, #12]
 801272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801272e:	459b      	cmp	fp, r3
 8012730:	f47f af03 	bne.w	801253a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 8012734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012736:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012738:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801273c:	921e      	str	r2, [sp, #120]	; 0x78
 801273e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012740:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012744:	921f      	str	r2, [sp, #124]	; 0x7c
 8012746:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012748:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801274c:	9220      	str	r2, [sp, #128]	; 0x80
 801274e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012750:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012754:	920d      	str	r2, [sp, #52]	; 0x34
 8012756:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012758:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801275c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801275e:	07db      	lsls	r3, r3, #31
 8012760:	d545      	bpl.n	80127ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 8012762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	9b05      	ldr	r3, [sp, #20]
 8012768:	089e      	lsrs	r6, r3, #2
 801276a:	d014      	beq.n	8012796 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 801276c:	00f7      	lsls	r7, r6, #3
 801276e:	9b07      	ldr	r3, [sp, #28]
 8012770:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012774:	6805      	ldr	r5, [r0, #0]
 8012776:	3008      	adds	r0, #8
 8012778:	f850 4c04 	ldr.w	r4, [r0, #-4]
 801277c:	f8d3 c000 	ldr.w	ip, [r3]
 8012780:	fb25 220c 	smlad	r2, r5, ip, r2
 8012784:	685d      	ldr	r5, [r3, #4]
 8012786:	3308      	adds	r3, #8
 8012788:	fb24 2205 	smlad	r2, r4, r5, r2
 801278c:	4286      	cmp	r6, r0
 801278e:	d1f1      	bne.n	8012774 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 8012790:	9b07      	ldr	r3, [sp, #28]
 8012792:	443b      	add	r3, r7
 8012794:	9307      	str	r3, [sp, #28]
 8012796:	9b05      	ldr	r3, [sp, #20]
 8012798:	f013 0303 	ands.w	r3, r3, #3
 801279c:	d011      	beq.n	80127c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801279e:	3b01      	subs	r3, #1
 80127a0:	9e07      	ldr	r6, [sp, #28]
 80127a2:	8804      	ldrh	r4, [r0, #0]
 80127a4:	8835      	ldrh	r5, [r6, #0]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	fb15 2204 	smlabb	r2, r5, r4, r2
 80127ac:	b14b      	cbz	r3, 80127c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 80127ae:	8845      	ldrh	r5, [r0, #2]
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	8874      	ldrh	r4, [r6, #2]
 80127b4:	fb15 2204 	smlabb	r2, r5, r4, r2
 80127b8:	d003      	beq.n	80127c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 80127ba:	8880      	ldrh	r0, [r0, #4]
 80127bc:	88b3      	ldrh	r3, [r6, #4]
 80127be:	fb10 2203 	smlabb	r2, r0, r3, r2
 80127c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80127c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127c8:	2b15      	cmp	r3, #21
 80127ca:	dd62      	ble.n	8012892 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 80127cc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80127ce:	1e9e      	subs	r6, r3, #2
 80127d0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80127d2:	3b01      	subs	r3, #1
 80127d4:	6825      	ldr	r5, [r4, #0]
 80127d6:	2401      	movs	r4, #1
 80127d8:	6800      	ldr	r0, [r0, #0]
 80127da:	40b4      	lsls	r4, r6
 80127dc:	fb52 4200 	smmla	r2, r2, r0, r4
 80127e0:	fa42 f303 	asr.w	r3, r2, r3
 80127e4:	442b      	add	r3, r5
 80127e6:	f303 0307 	ssat	r3, #8, r3
 80127ea:	f801 3b01 	strb.w	r3, [r1], #1
 80127ee:	4608      	mov	r0, r1
 80127f0:	b013      	add	sp, #76	; 0x4c
 80127f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	dd21      	ble.n	801283e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 80127fa:	f8de 1000 	ldr.w	r1, [lr]
 80127fe:	0052      	lsls	r2, r2, #1
 8012800:	6834      	ldr	r4, [r6, #0]
 8012802:	fb52 4201 	smmla	r2, r2, r1, r4
 8012806:	411a      	asrs	r2, r3
 8012808:	f302 0307 	ssat	r3, #8, r2
 801280c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8012810:	e77c      	b.n	801270c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8012812:	2d00      	cmp	r5, #0
 8012814:	dd24      	ble.n	8012860 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 8012816:	9e04      	ldr	r6, [sp, #16]
 8012818:	005b      	lsls	r3, r3, #1
 801281a:	9c01      	ldr	r4, [sp, #4]
 801281c:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8012820:	f1a6 0e04 	sub.w	lr, r6, #4
 8012824:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8012828:	fb53 4301 	smmla	r3, r3, r1, r4
 801282c:	9c01      	ldr	r4, [sp, #4]
 801282e:	fa43 f505 	asr.w	r5, r3, r5
 8012832:	1f26      	subs	r6, r4, #4
 8012834:	f305 0507 	ssat	r5, #8, r5
 8012838:	f80b 5c02 	strb.w	r5, [fp, #-2]
 801283c:	e750      	b.n	80126e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801283e:	f1c3 0301 	rsb	r3, r3, #1
 8012842:	fa02 f303 	lsl.w	r3, r2, r3
 8012846:	f303 031f 	ssat	r3, #32, r3
 801284a:	f8de 2000 	ldr.w	r2, [lr]
 801284e:	fb53 f312 	smmulr	r3, r3, r2
 8012852:	6832      	ldr	r2, [r6, #0]
 8012854:	441a      	add	r2, r3
 8012856:	f302 0207 	ssat	r2, #8, r2
 801285a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801285e:	e755      	b.n	801270c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 8012860:	f1c5 0501 	rsb	r5, r5, #1
 8012864:	40ab      	lsls	r3, r5
 8012866:	f303 031f 	ssat	r3, #32, r3
 801286a:	9904      	ldr	r1, [sp, #16]
 801286c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012870:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8012874:	fb53 f111 	smmulr	r1, r3, r1
 8012878:	9c01      	ldr	r4, [sp, #4]
 801287a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801287e:	1f26      	subs	r6, r4, #4
 8012880:	440b      	add	r3, r1
 8012882:	f303 0307 	ssat	r3, #8, r3
 8012886:	f80b 3c02 	strb.w	r3, [fp, #-2]
 801288a:	e729      	b.n	80126e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801288c:	f04f 0e00 	mov.w	lr, #0
 8012890:	e6ac      	b.n	80125ec <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 8012892:	2b00      	cmp	r3, #0
 8012894:	dd10      	ble.n	80128b8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 8012896:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012898:	0052      	lsls	r2, r2, #1
 801289a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801289c:	6800      	ldr	r0, [r0, #0]
 801289e:	6824      	ldr	r4, [r4, #0]
 80128a0:	fb52 4200 	smmla	r2, r2, r0, r4
 80128a4:	fa42 f303 	asr.w	r3, r2, r3
 80128a8:	f303 0307 	ssat	r3, #8, r3
 80128ac:	f801 3b01 	strb.w	r3, [r1], #1
 80128b0:	4608      	mov	r0, r1
 80128b2:	b013      	add	sp, #76	; 0x4c
 80128b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b8:	f1c3 0301 	rsb	r3, r3, #1
 80128bc:	fa02 f303 	lsl.w	r3, r2, r3
 80128c0:	f303 031f 	ssat	r3, #32, r3
 80128c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80128c6:	6812      	ldr	r2, [r2, #0]
 80128c8:	fb53 f312 	smmulr	r3, r3, r2
 80128cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80128ce:	6812      	ldr	r2, [r2, #0]
 80128d0:	4413      	add	r3, r2
 80128d2:	f303 0307 	ssat	r3, #8, r3
 80128d6:	f801 3b01 	strb.w	r3, [r1], #1
 80128da:	4608      	mov	r0, r1
 80128dc:	b013      	add	sp, #76	; 0x4c
 80128de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80128e4:	e73a      	b.n	801275c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 80128e6:	bf00      	nop

080128e8 <st_int8_avepool>:
 80128e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ec:	b095      	sub	sp, #84	; 0x54
 80128ee:	4699      	mov	r9, r3
 80128f0:	4692      	mov	sl, r2
 80128f2:	ee80 6a20 	vdiv.f32	s12, s0, s1
 80128f6:	9102      	str	r1, [sp, #8]
 80128f8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 80128fc:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8012900:	910f      	str	r1, [sp, #60]	; 0x3c
 8012902:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8012906:	930d      	str	r3, [sp, #52]	; 0x34
 8012908:	9110      	str	r1, [sp, #64]	; 0x40
 801290a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801290e:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 8012912:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8012916:	9309      	str	r3, [sp, #36]	; 0x24
 8012918:	9104      	str	r1, [sp, #16]
 801291a:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801291e:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 8012922:	930e      	str	r3, [sp, #56]	; 0x38
 8012924:	ee03 1a90 	vmov	s7, r1
 8012928:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 801292c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012930:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8012934:	9211      	str	r2, [sp, #68]	; 0x44
 8012936:	2a00      	cmp	r2, #0
 8012938:	f000 80b3 	beq.w	8012aa2 <st_int8_avepool+0x1ba>
 801293c:	eeb4 0a60 	vcmp.f32	s0, s1
 8012940:	ee03 1a10 	vmov	s6, r1
 8012944:	4683      	mov	fp, r0
 8012946:	ee13 1a90 	vmov	r1, s7
 801294a:	ee13 0a10 	vmov	r0, s6
 801294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012952:	bf0c      	ite	eq
 8012954:	2201      	moveq	r2, #1
 8012956:	2200      	movne	r2, #0
 8012958:	4281      	cmp	r1, r0
 801295a:	bf14      	ite	ne
 801295c:	2200      	movne	r2, #0
 801295e:	f002 0201 	andeq.w	r2, r2, #1
 8012962:	f1b8 0f01 	cmp.w	r8, #1
 8012966:	9201      	str	r2, [sp, #4]
 8012968:	f040 80c2 	bne.w	8012af0 <st_int8_avepool+0x208>
 801296c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801296e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8012ae8 <st_int8_avepool+0x200>
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8012aec <st_int8_avepool+0x204>
 8012978:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801297c:	b29b      	uxth	r3, r3
 801297e:	1a89      	subs	r1, r1, r2
 8012980:	4252      	negs	r2, r2
 8012982:	9306      	str	r3, [sp, #24]
 8012984:	b293      	uxth	r3, r2
 8012986:	2200      	movs	r2, #0
 8012988:	910d      	str	r1, [sp, #52]	; 0x34
 801298a:	930c      	str	r3, [sp, #48]	; 0x30
 801298c:	4613      	mov	r3, r2
 801298e:	9904      	ldr	r1, [sp, #16]
 8012990:	2900      	cmp	r1, #0
 8012992:	f000 80a6 	beq.w	8012ae2 <st_int8_avepool+0x1fa>
 8012996:	b292      	uxth	r2, r2
 8012998:	2100      	movs	r1, #0
 801299a:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 801299e:	9207      	str	r2, [sp, #28]
 80129a0:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 80129a4:	9a04      	ldr	r2, [sp, #16]
 80129a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80129aa:	4688      	mov	r8, r1
 80129ac:	fb02 f303 	mul.w	r3, r2, r3
 80129b0:	9a06      	ldr	r2, [sp, #24]
 80129b2:	9308      	str	r3, [sp, #32]
 80129b4:	fa0f fe82 	sxth.w	lr, r2
 80129b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	b21b      	sxth	r3, r3
 80129be:	930b      	str	r3, [sp, #44]	; 0x2c
 80129c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129c2:	9303      	str	r3, [sp, #12]
 80129c4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80129c8:	9305      	str	r3, [sp, #20]
 80129ca:	b28b      	uxth	r3, r1
 80129cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80129ce:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80129d2:	930a      	str	r3, [sp, #40]	; 0x28
 80129d4:	4570      	cmp	r0, lr
 80129d6:	9b08      	ldr	r3, [sp, #32]
 80129d8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80129dc:	4498      	add	r8, r3
 80129de:	da79      	bge.n	8012ad4 <st_int8_avepool+0x1ec>
 80129e0:	2700      	movs	r7, #0
 80129e2:	46bc      	mov	ip, r7
 80129e4:	42a6      	cmp	r6, r4
 80129e6:	da17      	bge.n	8012a18 <st_int8_avepool+0x130>
 80129e8:	43c5      	mvns	r5, r0
 80129ea:	4548      	cmp	r0, r9
 80129ec:	fb0a f200 	mul.w	r2, sl, r0
 80129f0:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 80129f4:	da10      	bge.n	8012a18 <st_int8_avepool+0x130>
 80129f6:	4432      	add	r2, r6
 80129f8:	4633      	mov	r3, r6
 80129fa:	445a      	add	r2, fp
 80129fc:	0419      	lsls	r1, r3, #16
 80129fe:	d406      	bmi.n	8012a0e <st_int8_avepool+0x126>
 8012a00:	b12d      	cbz	r5, 8012a0e <st_int8_avepool+0x126>
 8012a02:	4553      	cmp	r3, sl
 8012a04:	da03      	bge.n	8012a0e <st_int8_avepool+0x126>
 8012a06:	f992 1000 	ldrsb.w	r1, [r2]
 8012a0a:	3701      	adds	r7, #1
 8012a0c:	448c      	add	ip, r1
 8012a0e:	3301      	adds	r3, #1
 8012a10:	3201      	adds	r2, #1
 8012a12:	b219      	sxth	r1, r3
 8012a14:	42a1      	cmp	r1, r4
 8012a16:	dbf1      	blt.n	80129fc <st_int8_avepool+0x114>
 8012a18:	3001      	adds	r0, #1
 8012a1a:	b200      	sxth	r0, r0
 8012a1c:	4570      	cmp	r0, lr
 8012a1e:	dbe1      	blt.n	80129e4 <st_int8_avepool+0xfc>
 8012a20:	9b01      	ldr	r3, [sp, #4]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d140      	bne.n	8012aa8 <st_int8_avepool+0x1c0>
 8012a26:	ee07 ca90 	vmov	s15, ip
 8012a2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012a2e:	ee07 7a90 	vmov	s15, r7
 8012a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a3a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012a3e:	eeb0 7a64 	vmov.f32	s14, s9
 8012a42:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012a46:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	fe65 7a25 	vselge.f32	s15, s10, s11
 8012a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a5a:	ee17 3a90 	vmov	r3, s15
 8012a5e:	f303 0307 	ssat	r3, #8, r3
 8012a62:	9a02      	ldr	r2, [sp, #8]
 8012a64:	f802 3008 	strb.w	r3, [r2, r8]
 8012a68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012a6a:	9b05      	ldr	r3, [sp, #20]
 8012a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012a6e:	4403      	add	r3, r0
 8012a70:	9a03      	ldr	r2, [sp, #12]
 8012a72:	3101      	adds	r1, #1
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	4402      	add	r2, r0
 8012a78:	b209      	sxth	r1, r1
 8012a7a:	9305      	str	r3, [sp, #20]
 8012a7c:	b292      	uxth	r2, r2
 8012a7e:	9b04      	ldr	r3, [sp, #16]
 8012a80:	4688      	mov	r8, r1
 8012a82:	9203      	str	r2, [sp, #12]
 8012a84:	428b      	cmp	r3, r1
 8012a86:	dca0      	bgt.n	80129ca <st_int8_avepool+0xe2>
 8012a88:	9a07      	ldr	r2, [sp, #28]
 8012a8a:	9b06      	ldr	r3, [sp, #24]
 8012a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012a8e:	3201      	adds	r2, #1
 8012a90:	440b      	add	r3, r1
 8012a92:	b212      	sxth	r2, r2
 8012a94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4291      	cmp	r1, r2
 8012a9a:	9306      	str	r3, [sp, #24]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	f73f af76 	bgt.w	801298e <st_int8_avepool+0xa6>
 8012aa2:	b015      	add	sp, #84	; 0x54
 8012aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa8:	f1bc 0f00 	cmp.w	ip, #0
 8012aac:	db09      	blt.n	8012ac2 <st_int8_avepool+0x1da>
 8012aae:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 8012ab2:	fbb3 f7f7 	udiv	r7, r3, r7
 8012ab6:	f307 0307 	ssat	r3, #8, r7
 8012aba:	9a02      	ldr	r2, [sp, #8]
 8012abc:	f802 3008 	strb.w	r3, [r2, r8]
 8012ac0:	e7d2      	b.n	8012a68 <st_int8_avepool+0x180>
 8012ac2:	2f00      	cmp	r7, #0
 8012ac4:	463b      	mov	r3, r7
 8012ac6:	bfb8      	it	lt
 8012ac8:	1c7b      	addlt	r3, r7, #1
 8012aca:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8012ace:	fb93 f7f7 	sdiv	r7, r3, r7
 8012ad2:	e7f0      	b.n	8012ab6 <st_int8_avepool+0x1ce>
 8012ad4:	9b01      	ldr	r3, [sp, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f040 80df 	bne.w	8012c9a <st_int8_avepool+0x3b2>
 8012adc:	eef0 7a62 	vmov.f32	s15, s5
 8012ae0:	e7ab      	b.n	8012a3a <st_int8_avepool+0x152>
 8012ae2:	b293      	uxth	r3, r2
 8012ae4:	9307      	str	r3, [sp, #28]
 8012ae6:	e7cf      	b.n	8012a88 <st_int8_avepool+0x1a0>
 8012ae8:	befffffc 	.word	0xbefffffc
 8012aec:	7fc00000 	.word	0x7fc00000
 8012af0:	425b      	negs	r3, r3
 8012af2:	2200      	movs	r2, #0
 8012af4:	9904      	ldr	r1, [sp, #16]
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	f8cd b00c 	str.w	fp, [sp, #12]
 8012afc:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8012ae8 <st_int8_avepool+0x200>
 8012b00:	46d3      	mov	fp, sl
 8012b02:	9308      	str	r3, [sp, #32]
 8012b04:	46ca      	mov	sl, r9
 8012b06:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8012aec <st_int8_avepool+0x204>
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	f000 80a3 	beq.w	8012c58 <st_int8_avepool+0x370>
 8012b12:	b292      	uxth	r2, r2
 8012b14:	2100      	movs	r1, #0
 8012b16:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8012b1a:	920c      	str	r2, [sp, #48]	; 0x30
 8012b1c:	9a04      	ldr	r2, [sp, #16]
 8012b1e:	fb03 f302 	mul.w	r3, r3, r2
 8012b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b24:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b26:	4253      	negs	r3, r2
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	9306      	str	r3, [sp, #24]
 8012b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b2e:	1a9b      	subs	r3, r3, r2
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	9307      	str	r3, [sp, #28]
 8012b34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012b38:	4413      	add	r3, r2
 8012b3a:	fa0f fe83 	sxth.w	lr, r3
 8012b3e:	b213      	sxth	r3, r2
 8012b40:	930a      	str	r3, [sp, #40]	; 0x28
 8012b42:	460b      	mov	r3, r1
 8012b44:	f1b8 0f00 	cmp.w	r8, #0
 8012b48:	f000 80a4 	beq.w	8012c94 <st_int8_avepool+0x3ac>
 8012b4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b4e:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 8012b52:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8012b56:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	b28a      	uxth	r2, r1
 8012b5e:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8012b62:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b64:	9a02      	ldr	r2, [sp, #8]
 8012b66:	fb08 2303 	mla	r3, r8, r3, r2
 8012b6a:	9312      	str	r3, [sp, #72]	; 0x48
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4699      	mov	r9, r3
 8012b70:	9305      	str	r3, [sp, #20]
 8012b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012b74:	4570      	cmp	r0, lr
 8012b76:	f280 8088 	bge.w	8012c8a <st_int8_avepool+0x3a2>
 8012b7a:	2700      	movs	r7, #0
 8012b7c:	46bc      	mov	ip, r7
 8012b7e:	42ae      	cmp	r6, r5
 8012b80:	da1a      	bge.n	8012bb8 <st_int8_avepool+0x2d0>
 8012b82:	43c4      	mvns	r4, r0
 8012b84:	4550      	cmp	r0, sl
 8012b86:	fb0b f300 	mul.w	r3, fp, r0
 8012b8a:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8012b8e:	da13      	bge.n	8012bb8 <st_int8_avepool+0x2d0>
 8012b90:	199a      	adds	r2, r3, r6
 8012b92:	9b03      	ldr	r3, [sp, #12]
 8012b94:	fb08 9202 	mla	r2, r8, r2, r9
 8012b98:	441a      	add	r2, r3
 8012b9a:	4633      	mov	r3, r6
 8012b9c:	0419      	lsls	r1, r3, #16
 8012b9e:	d406      	bmi.n	8012bae <st_int8_avepool+0x2c6>
 8012ba0:	b12c      	cbz	r4, 8012bae <st_int8_avepool+0x2c6>
 8012ba2:	459b      	cmp	fp, r3
 8012ba4:	dd03      	ble.n	8012bae <st_int8_avepool+0x2c6>
 8012ba6:	f992 1000 	ldrsb.w	r1, [r2]
 8012baa:	3701      	adds	r7, #1
 8012bac:	448c      	add	ip, r1
 8012bae:	3301      	adds	r3, #1
 8012bb0:	4442      	add	r2, r8
 8012bb2:	b219      	sxth	r1, r3
 8012bb4:	42a9      	cmp	r1, r5
 8012bb6:	dbf1      	blt.n	8012b9c <st_int8_avepool+0x2b4>
 8012bb8:	3001      	adds	r0, #1
 8012bba:	b200      	sxth	r0, r0
 8012bbc:	4570      	cmp	r0, lr
 8012bbe:	dbde      	blt.n	8012b7e <st_int8_avepool+0x296>
 8012bc0:	9b01      	ldr	r3, [sp, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d14b      	bne.n	8012c5e <st_int8_avepool+0x376>
 8012bc6:	ee07 ca90 	vmov	s15, ip
 8012bca:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8012bce:	ee07 7a90 	vmov	s15, r7
 8012bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012bd6:	eec2 7a87 	vdiv.f32	s15, s5, s14
 8012bda:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012bde:	eeb0 7a44 	vmov.f32	s14, s8
 8012be2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8012be6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bee:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8012bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bfa:	ee17 3a90 	vmov	r3, s15
 8012bfe:	f303 0307 	ssat	r3, #8, r3
 8012c02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c04:	f802 3009 	strb.w	r3, [r2, r9]
 8012c08:	9b05      	ldr	r3, [sp, #20]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	b21b      	sxth	r3, r3
 8012c0e:	4543      	cmp	r3, r8
 8012c10:	4699      	mov	r9, r3
 8012c12:	9305      	str	r3, [sp, #20]
 8012c14:	dbad      	blt.n	8012b72 <st_int8_avepool+0x28a>
 8012c16:	9a06      	ldr	r2, [sp, #24]
 8012c18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c1c:	4402      	add	r2, r0
 8012c1e:	9b07      	ldr	r3, [sp, #28]
 8012c20:	3101      	adds	r1, #1
 8012c22:	b292      	uxth	r2, r2
 8012c24:	4403      	add	r3, r0
 8012c26:	b209      	sxth	r1, r1
 8012c28:	9206      	str	r2, [sp, #24]
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	9a04      	ldr	r2, [sp, #16]
 8012c2e:	9307      	str	r3, [sp, #28]
 8012c30:	460b      	mov	r3, r1
 8012c32:	4291      	cmp	r1, r2
 8012c34:	db86      	blt.n	8012b44 <st_int8_avepool+0x25c>
 8012c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c38:	9b08      	ldr	r3, [sp, #32]
 8012c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012c3c:	3201      	adds	r2, #1
 8012c3e:	440b      	add	r3, r1
 8012c40:	b212      	sxth	r2, r2
 8012c42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	4291      	cmp	r1, r2
 8012c48:	9308      	str	r3, [sp, #32]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	f77f af29 	ble.w	8012aa2 <st_int8_avepool+0x1ba>
 8012c50:	9904      	ldr	r1, [sp, #16]
 8012c52:	2900      	cmp	r1, #0
 8012c54:	f47f af5d 	bne.w	8012b12 <st_int8_avepool+0x22a>
 8012c58:	b293      	uxth	r3, r2
 8012c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8012c5c:	e7eb      	b.n	8012c36 <st_int8_avepool+0x34e>
 8012c5e:	f1bc 0f00 	cmp.w	ip, #0
 8012c62:	db09      	blt.n	8012c78 <st_int8_avepool+0x390>
 8012c64:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8012c68:	fbbc f7f7 	udiv	r7, ip, r7
 8012c6c:	f307 0707 	ssat	r7, #8, r7
 8012c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c72:	f803 7009 	strb.w	r7, [r3, r9]
 8012c76:	e7c7      	b.n	8012c08 <st_int8_avepool+0x320>
 8012c78:	2f00      	cmp	r7, #0
 8012c7a:	463b      	mov	r3, r7
 8012c7c:	bfb8      	it	lt
 8012c7e:	1c7b      	addlt	r3, r7, #1
 8012c80:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8012c84:	fb93 f7f7 	sdiv	r7, r3, r7
 8012c88:	e7f0      	b.n	8012c6c <st_int8_avepool+0x384>
 8012c8a:	9b01      	ldr	r3, [sp, #4]
 8012c8c:	b92b      	cbnz	r3, 8012c9a <st_int8_avepool+0x3b2>
 8012c8e:	eef0 7a66 	vmov.f32	s15, s13
 8012c92:	e7a2      	b.n	8012bda <st_int8_avepool+0x2f2>
 8012c94:	b28b      	uxth	r3, r1
 8012c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c98:	e7bd      	b.n	8012c16 <st_int8_avepool+0x32e>
 8012c9a:	deff      	udf	#255	; 0xff

08012c9c <st_dsp_arm_fill_q15>:
 8012c9c:	b510      	push	{r4, lr}
 8012c9e:	b284      	uxth	r4, r0
 8012ca0:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8012ca4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8012ca8:	d013      	beq.n	8012cd2 <st_dsp_arm_fill_q15+0x36>
 8012caa:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012cae:	2b09      	cmp	r3, #9
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	d919      	bls.n	8012ce8 <st_dsp_arm_fill_q15+0x4c>
 8012cb4:	f011 0f07 	tst.w	r1, #7
 8012cb8:	d116      	bne.n	8012ce8 <st_dsp_arm_fill_q15+0x4c>
 8012cba:	f04f 0c00 	mov.w	ip, #0
 8012cbe:	f10c 0c01 	add.w	ip, ip, #1
 8012cc2:	45e6      	cmp	lr, ip
 8012cc4:	e9c3 4400 	strd	r4, r4, [r3]
 8012cc8:	f103 0308 	add.w	r3, r3, #8
 8012ccc:	d1f7      	bne.n	8012cbe <st_dsp_arm_fill_q15+0x22>
 8012cce:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8012cd2:	f012 0203 	ands.w	r2, r2, #3
 8012cd6:	d006      	beq.n	8012ce6 <st_dsp_arm_fill_q15+0x4a>
 8012cd8:	3a01      	subs	r2, #1
 8012cda:	8008      	strh	r0, [r1, #0]
 8012cdc:	d003      	beq.n	8012ce6 <st_dsp_arm_fill_q15+0x4a>
 8012cde:	2a01      	cmp	r2, #1
 8012ce0:	8048      	strh	r0, [r1, #2]
 8012ce2:	bf18      	it	ne
 8012ce4:	8088      	strhne	r0, [r1, #4]
 8012ce6:	bd10      	pop	{r4, pc}
 8012ce8:	46f4      	mov	ip, lr
 8012cea:	f1bc 0c01 	subs.w	ip, ip, #1
 8012cee:	601c      	str	r4, [r3, #0]
 8012cf0:	605c      	str	r4, [r3, #4]
 8012cf2:	f103 0308 	add.w	r3, r3, #8
 8012cf6:	d1f8      	bne.n	8012cea <st_dsp_arm_fill_q15+0x4e>
 8012cf8:	e7e9      	b.n	8012cce <st_dsp_arm_fill_q15+0x32>
 8012cfa:	bf00      	nop

08012cfc <st_dsp_arm_float_to_q15>:
 8012cfc:	b530      	push	{r4, r5, lr}
 8012cfe:	0895      	lsrs	r5, r2, #2
 8012d00:	d069      	beq.n	8012dd6 <st_dsp_arm_float_to_q15+0xda>
 8012d02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012d06:	f100 0c10 	add.w	ip, r0, #16
 8012d0a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8012d0e:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8012e64 <st_dsp_arm_float_to_q15+0x168>
 8012d12:	f101 0e08 	add.w	lr, r1, #8
 8012d16:	462c      	mov	r4, r5
 8012d18:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8012d1c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8012d20:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d28:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8012d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d34:	ee17 3a90 	vmov	r3, s15
 8012d38:	f303 030f 	ssat	r3, #16, r3
 8012d3c:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8012d40:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8012d44:	ee67 6a86 	vmul.f32	s13, s15, s12
 8012d48:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d50:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8012d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d5c:	ee17 3a90 	vmov	r3, s15
 8012d60:	f303 030f 	ssat	r3, #16, r3
 8012d64:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8012d68:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8012d6c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8012d70:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d78:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8012d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d84:	ee17 3a90 	vmov	r3, s15
 8012d88:	f303 030f 	ssat	r3, #16, r3
 8012d8c:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8012d90:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8012d94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d9c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012db0:	bfcc      	ite	gt
 8012db2:	ee16 3a90 	vmovgt	r3, s13
 8012db6:	ee17 3a90 	vmovle	r3, s15
 8012dba:	f303 030f 	ssat	r3, #16, r3
 8012dbe:	3c01      	subs	r4, #1
 8012dc0:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8012dc4:	f10c 0c10 	add.w	ip, ip, #16
 8012dc8:	f10e 0e08 	add.w	lr, lr, #8
 8012dcc:	d1a4      	bne.n	8012d18 <st_dsp_arm_float_to_q15+0x1c>
 8012dce:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012dd2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8012dd6:	f012 0203 	ands.w	r2, r2, #3
 8012dda:	d042      	beq.n	8012e62 <st_dsp_arm_float_to_q15+0x166>
 8012ddc:	edd0 7a00 	vldr	s15, [r0]
 8012de0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012de4:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8012e64 <st_dsp_arm_float_to_q15+0x168>
 8012de8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8012dec:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8012df0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df8:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8012dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e04:	ee17 3a90 	vmov	r3, s15
 8012e08:	f303 030f 	ssat	r3, #16, r3
 8012e0c:	3a01      	subs	r2, #1
 8012e0e:	800b      	strh	r3, [r1, #0]
 8012e10:	d027      	beq.n	8012e62 <st_dsp_arm_float_to_q15+0x166>
 8012e12:	edd0 7a01 	vldr	s15, [r0, #4]
 8012e16:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e22:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8012e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e2e:	ee17 3a90 	vmov	r3, s15
 8012e32:	f303 030f 	ssat	r3, #16, r3
 8012e36:	2a01      	cmp	r2, #1
 8012e38:	804b      	strh	r3, [r1, #2]
 8012e3a:	d012      	beq.n	8012e62 <st_dsp_arm_float_to_q15+0x166>
 8012e3c:	edd0 7a02 	vldr	s15, [r0, #8]
 8012e40:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012e44:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4c:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8012e50:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012e54:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012e58:	ee17 3a10 	vmov	r3, s14
 8012e5c:	f303 030f 	ssat	r3, #16, r3
 8012e60:	808b      	strh	r3, [r1, #4]
 8012e62:	bd30      	pop	{r4, r5, pc}
 8012e64:	47000000 	.word	0x47000000

08012e68 <st_dsp_arm_float_to_q7>:
 8012e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e6a:	0895      	lsrs	r5, r2, #2
 8012e6c:	d06f      	beq.n	8012f4e <st_dsp_arm_float_to_q7+0xe6>
 8012e6e:	f101 0c04 	add.w	ip, r1, #4
 8012e72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012e76:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8012e7a:	f100 0e10 	add.w	lr, r0, #16
 8012e7e:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8012ffc <st_dsp_arm_float_to_q7+0x194>
 8012e82:	00ae      	lsls	r6, r5, #2
 8012e84:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8012e88:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8012e8c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8012e90:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e98:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8012e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ea4:	ee17 3a90 	vmov	r3, s15
 8012ea8:	b21b      	sxth	r3, r3
 8012eaa:	f303 0307 	ssat	r3, #8, r3
 8012eae:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8012eb2:	ed5e 7a03 	vldr	s15, [lr, #-12]
 8012eb6:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8012eba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec2:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8012ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ece:	ee17 3a90 	vmov	r3, s15
 8012ed2:	b21b      	sxth	r3, r3
 8012ed4:	f303 0307 	ssat	r3, #8, r3
 8012ed8:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8012edc:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8012ee0:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8012ee4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eec:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8012ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ef8:	ee17 3a90 	vmov	r3, s15
 8012efc:	b21b      	sxth	r3, r3
 8012efe:	f303 0307 	ssat	r3, #8, r3
 8012f02:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8012f06:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8012f0a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012f0e:	ee76 7a86 	vadd.f32	s15, s13, s12
 8012f12:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8012f16:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f1e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f26:	ee17 3a90 	vmov	r3, s15
 8012f2a:	ee17 7a10 	vmov	r7, s14
 8012f2e:	b21b      	sxth	r3, r3
 8012f30:	b23f      	sxth	r7, r7
 8012f32:	dd56      	ble.n	8012fe2 <st_dsp_arm_float_to_q7+0x17a>
 8012f34:	f303 0307 	ssat	r3, #8, r3
 8012f38:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8012f3c:	f10c 0c04 	add.w	ip, ip, #4
 8012f40:	f10e 0e10 	add.w	lr, lr, #16
 8012f44:	4564      	cmp	r4, ip
 8012f46:	d19f      	bne.n	8012e88 <st_dsp_arm_float_to_q7+0x20>
 8012f48:	4431      	add	r1, r6
 8012f4a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8012f4e:	f012 0203 	ands.w	r2, r2, #3
 8012f52:	d045      	beq.n	8012fe0 <st_dsp_arm_float_to_q7+0x178>
 8012f54:	edd0 7a00 	vldr	s15, [r0]
 8012f58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012f5c:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8012ffc <st_dsp_arm_float_to_q7+0x194>
 8012f60:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8012f64:	ee67 6a85 	vmul.f32	s13, s15, s10
 8012f68:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f70:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8012f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f7c:	ee17 3a90 	vmov	r3, s15
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	f303 0307 	ssat	r3, #8, r3
 8012f86:	3a01      	subs	r2, #1
 8012f88:	700b      	strb	r3, [r1, #0]
 8012f8a:	d029      	beq.n	8012fe0 <st_dsp_arm_float_to_q7+0x178>
 8012f8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8012f90:	ee26 6a85 	vmul.f32	s12, s13, s10
 8012f94:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8012f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9c:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8012fa0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012fa4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012fa8:	ee16 3a90 	vmov	r3, s13
 8012fac:	b21b      	sxth	r3, r3
 8012fae:	f303 0307 	ssat	r3, #8, r3
 8012fb2:	2a01      	cmp	r2, #1
 8012fb4:	704b      	strb	r3, [r1, #1]
 8012fb6:	d013      	beq.n	8012fe0 <st_dsp_arm_float_to_q7+0x178>
 8012fb8:	edd0 7a02 	vldr	s15, [r0, #8]
 8012fbc:	ee27 5a85 	vmul.f32	s10, s15, s10
 8012fc0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8012fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc8:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8012fcc:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fd4:	ee17 3a90 	vmov	r3, s15
 8012fd8:	b21b      	sxth	r3, r3
 8012fda:	f303 0307 	ssat	r3, #8, r3
 8012fde:	708b      	strb	r3, [r1, #2]
 8012fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe2:	f307 0707 	ssat	r7, #8, r7
 8012fe6:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8012fea:	f10c 0c04 	add.w	ip, ip, #4
 8012fee:	f10e 0e10 	add.w	lr, lr, #16
 8012ff2:	45a4      	cmp	ip, r4
 8012ff4:	f47f af48 	bne.w	8012e88 <st_dsp_arm_float_to_q7+0x20>
 8012ff8:	e7a6      	b.n	8012f48 <st_dsp_arm_float_to_q7+0xe0>
 8012ffa:	bf00      	nop
 8012ffc:	43000000 	.word	0x43000000

08013000 <st_dsp_arm_q15_to_float>:
 8013000:	b530      	push	{r4, r5, lr}
 8013002:	0894      	lsrs	r4, r2, #2
 8013004:	d038      	beq.n	8013078 <st_dsp_arm_q15_to_float+0x78>
 8013006:	f100 0c08 	add.w	ip, r0, #8
 801300a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80130c8 <st_dsp_arm_q15_to_float+0xc8>
 801300e:	f101 0310 	add.w	r3, r1, #16
 8013012:	46a6      	mov	lr, r4
 8013014:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8013018:	3310      	adds	r3, #16
 801301a:	f10c 0c08 	add.w	ip, ip, #8
 801301e:	f1be 0e01 	subs.w	lr, lr, #1
 8013022:	ee07 5a90 	vmov	s15, r5
 8013026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801302e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8013032:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8013036:	ee07 5a90 	vmov	s15, r5
 801303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013042:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8013046:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 801304a:	ee07 5a90 	vmov	s15, r5
 801304e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013056:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801305a:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 801305e:	ee07 5a90 	vmov	s15, r5
 8013062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013066:	ee67 7a87 	vmul.f32	s15, s15, s14
 801306a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801306e:	d1d1      	bne.n	8013014 <st_dsp_arm_q15_to_float+0x14>
 8013070:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8013074:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8013078:	f012 0203 	ands.w	r2, r2, #3
 801307c:	d023      	beq.n	80130c6 <st_dsp_arm_q15_to_float+0xc6>
 801307e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013082:	3a01      	subs	r2, #1
 8013084:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80130c8 <st_dsp_arm_q15_to_float+0xc8>
 8013088:	ee07 3a90 	vmov	s15, r3
 801308c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013094:	edc1 7a00 	vstr	s15, [r1]
 8013098:	d015      	beq.n	80130c6 <st_dsp_arm_q15_to_float+0xc6>
 801309a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801309e:	2a01      	cmp	r2, #1
 80130a0:	ee07 3a90 	vmov	s15, r3
 80130a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130ac:	edc1 7a01 	vstr	s15, [r1, #4]
 80130b0:	d009      	beq.n	80130c6 <st_dsp_arm_q15_to_float+0xc6>
 80130b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80130b6:	ee07 3a90 	vmov	s15, r3
 80130ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130c2:	edc1 7a02 	vstr	s15, [r1, #8]
 80130c6:	bd30      	pop	{r4, r5, pc}
 80130c8:	38000000 	.word	0x38000000

080130cc <st_dsp_arm_q7_to_float>:
 80130cc:	b530      	push	{r4, r5, lr}
 80130ce:	0894      	lsrs	r4, r2, #2
 80130d0:	d036      	beq.n	8013140 <st_dsp_arm_q7_to_float+0x74>
 80130d2:	1d03      	adds	r3, r0, #4
 80130d4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80130d8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013190 <st_dsp_arm_q7_to_float+0xc4>
 80130dc:	f101 0010 	add.w	r0, r1, #16
 80130e0:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 80130e4:	3010      	adds	r0, #16
 80130e6:	ee07 ea90 	vmov	s15, lr
 80130ea:	469e      	mov	lr, r3
 80130ec:	3304      	adds	r3, #4
 80130ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130f2:	45e6      	cmp	lr, ip
 80130f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130f8:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 80130fc:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 8013100:	ee07 5a90 	vmov	s15, r5
 8013104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013108:	ee67 7a87 	vmul.f32	s15, s15, s14
 801310c:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 8013110:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8013114:	ee07 5a90 	vmov	s15, r5
 8013118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801311c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013120:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8013124:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 8013128:	ee07 5a90 	vmov	s15, r5
 801312c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013134:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 8013138:	d1d2      	bne.n	80130e0 <st_dsp_arm_q7_to_float+0x14>
 801313a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801313e:	4660      	mov	r0, ip
 8013140:	f012 0203 	ands.w	r2, r2, #3
 8013144:	d023      	beq.n	801318e <st_dsp_arm_q7_to_float+0xc2>
 8013146:	f990 3000 	ldrsb.w	r3, [r0]
 801314a:	3a01      	subs	r2, #1
 801314c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013190 <st_dsp_arm_q7_to_float+0xc4>
 8013150:	ee07 3a90 	vmov	s15, r3
 8013154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013158:	ee67 7a87 	vmul.f32	s15, s15, s14
 801315c:	edc1 7a00 	vstr	s15, [r1]
 8013160:	d015      	beq.n	801318e <st_dsp_arm_q7_to_float+0xc2>
 8013162:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013166:	2a01      	cmp	r2, #1
 8013168:	ee07 3a90 	vmov	s15, r3
 801316c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013174:	edc1 7a01 	vstr	s15, [r1, #4]
 8013178:	d009      	beq.n	801318e <st_dsp_arm_q7_to_float+0xc2>
 801317a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801317e:	ee07 3a90 	vmov	s15, r3
 8013182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013186:	ee67 7a87 	vmul.f32	s15, s15, s14
 801318a:	edc1 7a02 	vstr	s15, [r1, #8]
 801318e:	bd30      	pop	{r4, r5, pc}
 8013190:	3c000000 	.word	0x3c000000

08013194 <ai_version_get>:
 8013194:	0212      	lsls	r2, r2, #8
 8013196:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801319a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801319e:	4770      	bx	lr

080131a0 <get_tensor_byte_size>:
 80131a0:	b430      	push	{r4, r5}
 80131a2:	6985      	ldr	r5, [r0, #24]
 80131a4:	68c4      	ldr	r4, [r0, #12]
 80131a6:	6941      	ldr	r1, [r0, #20]
 80131a8:	4b06      	ldr	r3, [pc, #24]	; (80131c4 <get_tensor_byte_size+0x24>)
 80131aa:	6828      	ldr	r0, [r5, #0]
 80131ac:	4a06      	ldr	r2, [pc, #24]	; (80131c8 <get_tensor_byte_size+0x28>)
 80131ae:	4003      	ands	r3, r0
 80131b0:	68c9      	ldr	r1, [r1, #12]
 80131b2:	68e0      	ldr	r0, [r4, #12]
 80131b4:	4293      	cmp	r3, r2
 80131b6:	fb01 f000 	mul.w	r0, r1, r0
 80131ba:	d101      	bne.n	80131c0 <get_tensor_byte_size+0x20>
 80131bc:	3007      	adds	r0, #7
 80131be:	08c0      	lsrs	r0, r0, #3
 80131c0:	bc30      	pop	{r4, r5}
 80131c2:	4770      	bx	lr
 80131c4:	017fffff 	.word	0x017fffff
 80131c8:	000400c0 	.word	0x000400c0

080131cc <ai_array_to_buffer_fmt>:
 80131cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d050      	beq.n	8013276 <ai_array_to_buffer_fmt+0xaa>
 80131d4:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80131d8:	4b29      	ldr	r3, [pc, #164]	; (8013280 <ai_array_to_buffer_fmt+0xb4>)
 80131da:	429a      	cmp	r2, r3
 80131dc:	d00b      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 80131de:	dc1c      	bgt.n	801321a <ai_array_to_buffer_fmt+0x4e>
 80131e0:	4b28      	ldr	r3, [pc, #160]	; (8013284 <ai_array_to_buffer_fmt+0xb8>)
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d007      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 80131e6:	dd0b      	ble.n	8013200 <ai_array_to_buffer_fmt+0x34>
 80131e8:	4b27      	ldr	r3, [pc, #156]	; (8013288 <ai_array_to_buffer_fmt+0xbc>)
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d003      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 80131ee:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d131      	bne.n	801325a <ai_array_to_buffer_fmt+0x8e>
 80131f6:	4613      	mov	r3, r2
 80131f8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80131fc:	4318      	orrs	r0, r3
 80131fe:	4770      	bx	lr
 8013200:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013204:	429a      	cmp	r2, r3
 8013206:	d0f6      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 8013208:	dd2c      	ble.n	8013264 <ai_array_to_buffer_fmt+0x98>
 801320a:	4b20      	ldr	r3, [pc, #128]	; (801328c <ai_array_to_buffer_fmt+0xc0>)
 801320c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013210:	429a      	cmp	r2, r3
 8013212:	bf18      	it	ne
 8013214:	2340      	movne	r3, #64	; 0x40
 8013216:	4318      	orrs	r0, r3
 8013218:	4770      	bx	lr
 801321a:	4b1d      	ldr	r3, [pc, #116]	; (8013290 <ai_array_to_buffer_fmt+0xc4>)
 801321c:	429a      	cmp	r2, r3
 801321e:	d0ea      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 8013220:	dd0e      	ble.n	8013240 <ai_array_to_buffer_fmt+0x74>
 8013222:	4b1c      	ldr	r3, [pc, #112]	; (8013294 <ai_array_to_buffer_fmt+0xc8>)
 8013224:	429a      	cmp	r2, r3
 8013226:	d0e6      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 8013228:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801322c:	429a      	cmp	r2, r3
 801322e:	d0e2      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 8013230:	4b19      	ldr	r3, [pc, #100]	; (8013298 <ai_array_to_buffer_fmt+0xcc>)
 8013232:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013236:	429a      	cmp	r2, r3
 8013238:	bf18      	it	ne
 801323a:	2340      	movne	r3, #64	; 0x40
 801323c:	4318      	orrs	r0, r3
 801323e:	4770      	bx	lr
 8013240:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013244:	429a      	cmp	r2, r3
 8013246:	d0d6      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 8013248:	3307      	adds	r3, #7
 801324a:	429a      	cmp	r2, r3
 801324c:	d0d3      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 801324e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8013252:	429a      	cmp	r2, r3
 8013254:	bf18      	it	ne
 8013256:	2340      	movne	r3, #64	; 0x40
 8013258:	e7ce      	b.n	80131f8 <ai_array_to_buffer_fmt+0x2c>
 801325a:	4b10      	ldr	r3, [pc, #64]	; (801329c <ai_array_to_buffer_fmt+0xd0>)
 801325c:	429a      	cmp	r2, r3
 801325e:	bf18      	it	ne
 8013260:	2340      	movne	r3, #64	; 0x40
 8013262:	e7c9      	b.n	80131f8 <ai_array_to_buffer_fmt+0x2c>
 8013264:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013268:	429a      	cmp	r2, r3
 801326a:	d0c4      	beq.n	80131f6 <ai_array_to_buffer_fmt+0x2a>
 801326c:	3380      	adds	r3, #128	; 0x80
 801326e:	429a      	cmp	r2, r3
 8013270:	bf18      	it	ne
 8013272:	2340      	movne	r3, #64	; 0x40
 8013274:	e7c0      	b.n	80131f8 <ai_array_to_buffer_fmt+0x2c>
 8013276:	4b0a      	ldr	r3, [pc, #40]	; (80132a0 <ai_array_to_buffer_fmt+0xd4>)
 8013278:	4003      	ands	r3, r0
 801327a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801327e:	e7bb      	b.n	80131f8 <ai_array_to_buffer_fmt+0x2c>
 8013280:	00840040 	.word	0x00840040
 8013284:	00040840 	.word	0x00040840
 8013288:	00041040 	.word	0x00041040
 801328c:	00040447 	.word	0x00040447
 8013290:	00840840 	.word	0x00840840
 8013294:	00841040 	.word	0x00841040
 8013298:	0084084f 	.word	0x0084084f
 801329c:	0004084f 	.word	0x0004084f
 80132a0:	00803fff 	.word	0x00803fff

080132a4 <ai_array_get_byte_size>:
 80132a4:	b319      	cbz	r1, 80132ee <ai_array_get_byte_size+0x4a>
 80132a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80132aa:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80132ae:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80132b2:	11c0      	asrs	r0, r0, #7
 80132b4:	fb03 f101 	mul.w	r1, r3, r1
 80132b8:	2a04      	cmp	r2, #4
 80132ba:	f101 0107 	add.w	r1, r1, #7
 80132be:	f021 0107 	bic.w	r1, r1, #7
 80132c2:	fa21 f10c 	lsr.w	r1, r1, ip
 80132c6:	d00b      	beq.n	80132e0 <ai_array_get_byte_size+0x3c>
 80132c8:	2a08      	cmp	r2, #8
 80132ca:	d002      	beq.n	80132d2 <ai_array_get_byte_size+0x2e>
 80132cc:	3107      	adds	r1, #7
 80132ce:	08c8      	lsrs	r0, r1, #3
 80132d0:	4770      	bx	lr
 80132d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80132d6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80132da:	3107      	adds	r1, #7
 80132dc:	08c8      	lsrs	r0, r1, #3
 80132de:	4770      	bx	lr
 80132e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80132e4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80132e8:	3107      	adds	r1, #7
 80132ea:	08c8      	lsrs	r0, r1, #3
 80132ec:	4770      	bx	lr
 80132ee:	4608      	mov	r0, r1
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop

080132f4 <ai_array_get_data_byte_size>:
 80132f4:	b161      	cbz	r1, 8013310 <ai_array_get_data_byte_size+0x1c>
 80132f6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80132fa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80132fe:	fb03 f101 	mul.w	r1, r3, r1
 8013302:	1dc8      	adds	r0, r1, #7
 8013304:	f020 0007 	bic.w	r0, r0, #7
 8013308:	40d0      	lsrs	r0, r2
 801330a:	3007      	adds	r0, #7
 801330c:	08c0      	lsrs	r0, r0, #3
 801330e:	4770      	bx	lr
 8013310:	4608      	mov	r0, r1
 8013312:	4770      	bx	lr

08013314 <core_tensor_clone>:
 8013314:	680b      	ldr	r3, [r1, #0]
 8013316:	6882      	ldr	r2, [r0, #8]
 8013318:	6003      	str	r3, [r0, #0]
 801331a:	684b      	ldr	r3, [r1, #4]
 801331c:	6043      	str	r3, [r0, #4]
 801331e:	698b      	ldr	r3, [r1, #24]
 8013320:	6183      	str	r3, [r0, #24]
 8013322:	688b      	ldr	r3, [r1, #8]
 8013324:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013328:	f363 221f 	bfi	r2, r3, #8, #24
 801332c:	b410      	push	{r4}
 801332e:	6082      	str	r2, [r0, #8]
 8013330:	b15b      	cbz	r3, 801334a <core_tensor_clone+0x36>
 8013332:	2300      	movs	r3, #0
 8013334:	68cc      	ldr	r4, [r1, #12]
 8013336:	68c2      	ldr	r2, [r0, #12]
 8013338:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801333c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8013340:	3301      	adds	r3, #1
 8013342:	6882      	ldr	r2, [r0, #8]
 8013344:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8013348:	d3f4      	bcc.n	8013334 <core_tensor_clone+0x20>
 801334a:	690b      	ldr	r3, [r1, #16]
 801334c:	6902      	ldr	r2, [r0, #16]
 801334e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8013352:	f363 221f 	bfi	r2, r3, #8, #24
 8013356:	6102      	str	r2, [r0, #16]
 8013358:	b15b      	cbz	r3, 8013372 <core_tensor_clone+0x5e>
 801335a:	2300      	movs	r3, #0
 801335c:	694c      	ldr	r4, [r1, #20]
 801335e:	6942      	ldr	r2, [r0, #20]
 8013360:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013364:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8013368:	3301      	adds	r3, #1
 801336a:	6902      	ldr	r2, [r0, #16]
 801336c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8013370:	d3f4      	bcc.n	801335c <core_tensor_clone+0x48>
 8013372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013376:	4770      	bx	lr

08013378 <core_array_clone>:
 8013378:	4684      	mov	ip, r0
 801337a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801337c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop

08013384 <__errno>:
 8013384:	4b01      	ldr	r3, [pc, #4]	; (801338c <__errno+0x8>)
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	20000dac 	.word	0x20000dac

08013390 <__libc_init_array>:
 8013390:	b570      	push	{r4, r5, r6, lr}
 8013392:	4d0d      	ldr	r5, [pc, #52]	; (80133c8 <__libc_init_array+0x38>)
 8013394:	4c0d      	ldr	r4, [pc, #52]	; (80133cc <__libc_init_array+0x3c>)
 8013396:	1b64      	subs	r4, r4, r5
 8013398:	10a4      	asrs	r4, r4, #2
 801339a:	2600      	movs	r6, #0
 801339c:	42a6      	cmp	r6, r4
 801339e:	d109      	bne.n	80133b4 <__libc_init_array+0x24>
 80133a0:	4d0b      	ldr	r5, [pc, #44]	; (80133d0 <__libc_init_array+0x40>)
 80133a2:	4c0c      	ldr	r4, [pc, #48]	; (80133d4 <__libc_init_array+0x44>)
 80133a4:	f003 f966 	bl	8016674 <_init>
 80133a8:	1b64      	subs	r4, r4, r5
 80133aa:	10a4      	asrs	r4, r4, #2
 80133ac:	2600      	movs	r6, #0
 80133ae:	42a6      	cmp	r6, r4
 80133b0:	d105      	bne.n	80133be <__libc_init_array+0x2e>
 80133b2:	bd70      	pop	{r4, r5, r6, pc}
 80133b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80133b8:	4798      	blx	r3
 80133ba:	3601      	adds	r6, #1
 80133bc:	e7ee      	b.n	801339c <__libc_init_array+0xc>
 80133be:	f855 3b04 	ldr.w	r3, [r5], #4
 80133c2:	4798      	blx	r3
 80133c4:	3601      	adds	r6, #1
 80133c6:	e7f2      	b.n	80133ae <__libc_init_array+0x1e>
 80133c8:	08018138 	.word	0x08018138
 80133cc:	08018138 	.word	0x08018138
 80133d0:	08018138 	.word	0x08018138
 80133d4:	0801813c 	.word	0x0801813c

080133d8 <malloc>:
 80133d8:	4b02      	ldr	r3, [pc, #8]	; (80133e4 <malloc+0xc>)
 80133da:	4601      	mov	r1, r0
 80133dc:	6818      	ldr	r0, [r3, #0]
 80133de:	f000 b8a7 	b.w	8013530 <_malloc_r>
 80133e2:	bf00      	nop
 80133e4:	20000dac 	.word	0x20000dac

080133e8 <free>:
 80133e8:	4b02      	ldr	r3, [pc, #8]	; (80133f4 <free+0xc>)
 80133ea:	4601      	mov	r1, r0
 80133ec:	6818      	ldr	r0, [r3, #0]
 80133ee:	f000 b833 	b.w	8013458 <_free_r>
 80133f2:	bf00      	nop
 80133f4:	20000dac 	.word	0x20000dac

080133f8 <memcpy>:
 80133f8:	440a      	add	r2, r1
 80133fa:	4291      	cmp	r1, r2
 80133fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013400:	d100      	bne.n	8013404 <memcpy+0xc>
 8013402:	4770      	bx	lr
 8013404:	b510      	push	{r4, lr}
 8013406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801340a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801340e:	4291      	cmp	r1, r2
 8013410:	d1f9      	bne.n	8013406 <memcpy+0xe>
 8013412:	bd10      	pop	{r4, pc}

08013414 <memmove>:
 8013414:	4288      	cmp	r0, r1
 8013416:	b510      	push	{r4, lr}
 8013418:	eb01 0402 	add.w	r4, r1, r2
 801341c:	d902      	bls.n	8013424 <memmove+0x10>
 801341e:	4284      	cmp	r4, r0
 8013420:	4623      	mov	r3, r4
 8013422:	d807      	bhi.n	8013434 <memmove+0x20>
 8013424:	1e43      	subs	r3, r0, #1
 8013426:	42a1      	cmp	r1, r4
 8013428:	d008      	beq.n	801343c <memmove+0x28>
 801342a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801342e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013432:	e7f8      	b.n	8013426 <memmove+0x12>
 8013434:	4402      	add	r2, r0
 8013436:	4601      	mov	r1, r0
 8013438:	428a      	cmp	r2, r1
 801343a:	d100      	bne.n	801343e <memmove+0x2a>
 801343c:	bd10      	pop	{r4, pc}
 801343e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013446:	e7f7      	b.n	8013438 <memmove+0x24>

08013448 <memset>:
 8013448:	4402      	add	r2, r0
 801344a:	4603      	mov	r3, r0
 801344c:	4293      	cmp	r3, r2
 801344e:	d100      	bne.n	8013452 <memset+0xa>
 8013450:	4770      	bx	lr
 8013452:	f803 1b01 	strb.w	r1, [r3], #1
 8013456:	e7f9      	b.n	801344c <memset+0x4>

08013458 <_free_r>:
 8013458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801345a:	2900      	cmp	r1, #0
 801345c:	d044      	beq.n	80134e8 <_free_r+0x90>
 801345e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013462:	9001      	str	r0, [sp, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	f1a1 0404 	sub.w	r4, r1, #4
 801346a:	bfb8      	it	lt
 801346c:	18e4      	addlt	r4, r4, r3
 801346e:	f001 feb1 	bl	80151d4 <__malloc_lock>
 8013472:	4a1e      	ldr	r2, [pc, #120]	; (80134ec <_free_r+0x94>)
 8013474:	9801      	ldr	r0, [sp, #4]
 8013476:	6813      	ldr	r3, [r2, #0]
 8013478:	b933      	cbnz	r3, 8013488 <_free_r+0x30>
 801347a:	6063      	str	r3, [r4, #4]
 801347c:	6014      	str	r4, [r2, #0]
 801347e:	b003      	add	sp, #12
 8013480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013484:	f001 beac 	b.w	80151e0 <__malloc_unlock>
 8013488:	42a3      	cmp	r3, r4
 801348a:	d908      	bls.n	801349e <_free_r+0x46>
 801348c:	6825      	ldr	r5, [r4, #0]
 801348e:	1961      	adds	r1, r4, r5
 8013490:	428b      	cmp	r3, r1
 8013492:	bf01      	itttt	eq
 8013494:	6819      	ldreq	r1, [r3, #0]
 8013496:	685b      	ldreq	r3, [r3, #4]
 8013498:	1949      	addeq	r1, r1, r5
 801349a:	6021      	streq	r1, [r4, #0]
 801349c:	e7ed      	b.n	801347a <_free_r+0x22>
 801349e:	461a      	mov	r2, r3
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	b10b      	cbz	r3, 80134a8 <_free_r+0x50>
 80134a4:	42a3      	cmp	r3, r4
 80134a6:	d9fa      	bls.n	801349e <_free_r+0x46>
 80134a8:	6811      	ldr	r1, [r2, #0]
 80134aa:	1855      	adds	r5, r2, r1
 80134ac:	42a5      	cmp	r5, r4
 80134ae:	d10b      	bne.n	80134c8 <_free_r+0x70>
 80134b0:	6824      	ldr	r4, [r4, #0]
 80134b2:	4421      	add	r1, r4
 80134b4:	1854      	adds	r4, r2, r1
 80134b6:	42a3      	cmp	r3, r4
 80134b8:	6011      	str	r1, [r2, #0]
 80134ba:	d1e0      	bne.n	801347e <_free_r+0x26>
 80134bc:	681c      	ldr	r4, [r3, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	6053      	str	r3, [r2, #4]
 80134c2:	4421      	add	r1, r4
 80134c4:	6011      	str	r1, [r2, #0]
 80134c6:	e7da      	b.n	801347e <_free_r+0x26>
 80134c8:	d902      	bls.n	80134d0 <_free_r+0x78>
 80134ca:	230c      	movs	r3, #12
 80134cc:	6003      	str	r3, [r0, #0]
 80134ce:	e7d6      	b.n	801347e <_free_r+0x26>
 80134d0:	6825      	ldr	r5, [r4, #0]
 80134d2:	1961      	adds	r1, r4, r5
 80134d4:	428b      	cmp	r3, r1
 80134d6:	bf04      	itt	eq
 80134d8:	6819      	ldreq	r1, [r3, #0]
 80134da:	685b      	ldreq	r3, [r3, #4]
 80134dc:	6063      	str	r3, [r4, #4]
 80134de:	bf04      	itt	eq
 80134e0:	1949      	addeq	r1, r1, r5
 80134e2:	6021      	streq	r1, [r4, #0]
 80134e4:	6054      	str	r4, [r2, #4]
 80134e6:	e7ca      	b.n	801347e <_free_r+0x26>
 80134e8:	b003      	add	sp, #12
 80134ea:	bd30      	pop	{r4, r5, pc}
 80134ec:	20001420 	.word	0x20001420

080134f0 <sbrk_aligned>:
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	4e0e      	ldr	r6, [pc, #56]	; (801352c <sbrk_aligned+0x3c>)
 80134f4:	460c      	mov	r4, r1
 80134f6:	6831      	ldr	r1, [r6, #0]
 80134f8:	4605      	mov	r5, r0
 80134fa:	b911      	cbnz	r1, 8013502 <sbrk_aligned+0x12>
 80134fc:	f000 fd5c 	bl	8013fb8 <_sbrk_r>
 8013500:	6030      	str	r0, [r6, #0]
 8013502:	4621      	mov	r1, r4
 8013504:	4628      	mov	r0, r5
 8013506:	f000 fd57 	bl	8013fb8 <_sbrk_r>
 801350a:	1c43      	adds	r3, r0, #1
 801350c:	d00a      	beq.n	8013524 <sbrk_aligned+0x34>
 801350e:	1cc4      	adds	r4, r0, #3
 8013510:	f024 0403 	bic.w	r4, r4, #3
 8013514:	42a0      	cmp	r0, r4
 8013516:	d007      	beq.n	8013528 <sbrk_aligned+0x38>
 8013518:	1a21      	subs	r1, r4, r0
 801351a:	4628      	mov	r0, r5
 801351c:	f000 fd4c 	bl	8013fb8 <_sbrk_r>
 8013520:	3001      	adds	r0, #1
 8013522:	d101      	bne.n	8013528 <sbrk_aligned+0x38>
 8013524:	f04f 34ff 	mov.w	r4, #4294967295
 8013528:	4620      	mov	r0, r4
 801352a:	bd70      	pop	{r4, r5, r6, pc}
 801352c:	20001424 	.word	0x20001424

08013530 <_malloc_r>:
 8013530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013534:	1ccd      	adds	r5, r1, #3
 8013536:	f025 0503 	bic.w	r5, r5, #3
 801353a:	3508      	adds	r5, #8
 801353c:	2d0c      	cmp	r5, #12
 801353e:	bf38      	it	cc
 8013540:	250c      	movcc	r5, #12
 8013542:	2d00      	cmp	r5, #0
 8013544:	4607      	mov	r7, r0
 8013546:	db01      	blt.n	801354c <_malloc_r+0x1c>
 8013548:	42a9      	cmp	r1, r5
 801354a:	d905      	bls.n	8013558 <_malloc_r+0x28>
 801354c:	230c      	movs	r3, #12
 801354e:	603b      	str	r3, [r7, #0]
 8013550:	2600      	movs	r6, #0
 8013552:	4630      	mov	r0, r6
 8013554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013558:	4e2e      	ldr	r6, [pc, #184]	; (8013614 <_malloc_r+0xe4>)
 801355a:	f001 fe3b 	bl	80151d4 <__malloc_lock>
 801355e:	6833      	ldr	r3, [r6, #0]
 8013560:	461c      	mov	r4, r3
 8013562:	bb34      	cbnz	r4, 80135b2 <_malloc_r+0x82>
 8013564:	4629      	mov	r1, r5
 8013566:	4638      	mov	r0, r7
 8013568:	f7ff ffc2 	bl	80134f0 <sbrk_aligned>
 801356c:	1c43      	adds	r3, r0, #1
 801356e:	4604      	mov	r4, r0
 8013570:	d14d      	bne.n	801360e <_malloc_r+0xde>
 8013572:	6834      	ldr	r4, [r6, #0]
 8013574:	4626      	mov	r6, r4
 8013576:	2e00      	cmp	r6, #0
 8013578:	d140      	bne.n	80135fc <_malloc_r+0xcc>
 801357a:	6823      	ldr	r3, [r4, #0]
 801357c:	4631      	mov	r1, r6
 801357e:	4638      	mov	r0, r7
 8013580:	eb04 0803 	add.w	r8, r4, r3
 8013584:	f000 fd18 	bl	8013fb8 <_sbrk_r>
 8013588:	4580      	cmp	r8, r0
 801358a:	d13a      	bne.n	8013602 <_malloc_r+0xd2>
 801358c:	6821      	ldr	r1, [r4, #0]
 801358e:	3503      	adds	r5, #3
 8013590:	1a6d      	subs	r5, r5, r1
 8013592:	f025 0503 	bic.w	r5, r5, #3
 8013596:	3508      	adds	r5, #8
 8013598:	2d0c      	cmp	r5, #12
 801359a:	bf38      	it	cc
 801359c:	250c      	movcc	r5, #12
 801359e:	4629      	mov	r1, r5
 80135a0:	4638      	mov	r0, r7
 80135a2:	f7ff ffa5 	bl	80134f0 <sbrk_aligned>
 80135a6:	3001      	adds	r0, #1
 80135a8:	d02b      	beq.n	8013602 <_malloc_r+0xd2>
 80135aa:	6823      	ldr	r3, [r4, #0]
 80135ac:	442b      	add	r3, r5
 80135ae:	6023      	str	r3, [r4, #0]
 80135b0:	e00e      	b.n	80135d0 <_malloc_r+0xa0>
 80135b2:	6822      	ldr	r2, [r4, #0]
 80135b4:	1b52      	subs	r2, r2, r5
 80135b6:	d41e      	bmi.n	80135f6 <_malloc_r+0xc6>
 80135b8:	2a0b      	cmp	r2, #11
 80135ba:	d916      	bls.n	80135ea <_malloc_r+0xba>
 80135bc:	1961      	adds	r1, r4, r5
 80135be:	42a3      	cmp	r3, r4
 80135c0:	6025      	str	r5, [r4, #0]
 80135c2:	bf18      	it	ne
 80135c4:	6059      	strne	r1, [r3, #4]
 80135c6:	6863      	ldr	r3, [r4, #4]
 80135c8:	bf08      	it	eq
 80135ca:	6031      	streq	r1, [r6, #0]
 80135cc:	5162      	str	r2, [r4, r5]
 80135ce:	604b      	str	r3, [r1, #4]
 80135d0:	4638      	mov	r0, r7
 80135d2:	f104 060b 	add.w	r6, r4, #11
 80135d6:	f001 fe03 	bl	80151e0 <__malloc_unlock>
 80135da:	f026 0607 	bic.w	r6, r6, #7
 80135de:	1d23      	adds	r3, r4, #4
 80135e0:	1af2      	subs	r2, r6, r3
 80135e2:	d0b6      	beq.n	8013552 <_malloc_r+0x22>
 80135e4:	1b9b      	subs	r3, r3, r6
 80135e6:	50a3      	str	r3, [r4, r2]
 80135e8:	e7b3      	b.n	8013552 <_malloc_r+0x22>
 80135ea:	6862      	ldr	r2, [r4, #4]
 80135ec:	42a3      	cmp	r3, r4
 80135ee:	bf0c      	ite	eq
 80135f0:	6032      	streq	r2, [r6, #0]
 80135f2:	605a      	strne	r2, [r3, #4]
 80135f4:	e7ec      	b.n	80135d0 <_malloc_r+0xa0>
 80135f6:	4623      	mov	r3, r4
 80135f8:	6864      	ldr	r4, [r4, #4]
 80135fa:	e7b2      	b.n	8013562 <_malloc_r+0x32>
 80135fc:	4634      	mov	r4, r6
 80135fe:	6876      	ldr	r6, [r6, #4]
 8013600:	e7b9      	b.n	8013576 <_malloc_r+0x46>
 8013602:	230c      	movs	r3, #12
 8013604:	603b      	str	r3, [r7, #0]
 8013606:	4638      	mov	r0, r7
 8013608:	f001 fdea 	bl	80151e0 <__malloc_unlock>
 801360c:	e7a1      	b.n	8013552 <_malloc_r+0x22>
 801360e:	6025      	str	r5, [r4, #0]
 8013610:	e7de      	b.n	80135d0 <_malloc_r+0xa0>
 8013612:	bf00      	nop
 8013614:	20001420 	.word	0x20001420

08013618 <__cvt>:
 8013618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801361a:	ed2d 8b02 	vpush	{d8}
 801361e:	eeb0 8b40 	vmov.f64	d8, d0
 8013622:	b085      	sub	sp, #20
 8013624:	4617      	mov	r7, r2
 8013626:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013628:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801362a:	ee18 2a90 	vmov	r2, s17
 801362e:	f025 0520 	bic.w	r5, r5, #32
 8013632:	2a00      	cmp	r2, #0
 8013634:	bfb6      	itet	lt
 8013636:	222d      	movlt	r2, #45	; 0x2d
 8013638:	2200      	movge	r2, #0
 801363a:	eeb1 8b40 	vneglt.f64	d8, d0
 801363e:	2d46      	cmp	r5, #70	; 0x46
 8013640:	460c      	mov	r4, r1
 8013642:	701a      	strb	r2, [r3, #0]
 8013644:	d004      	beq.n	8013650 <__cvt+0x38>
 8013646:	2d45      	cmp	r5, #69	; 0x45
 8013648:	d100      	bne.n	801364c <__cvt+0x34>
 801364a:	3401      	adds	r4, #1
 801364c:	2102      	movs	r1, #2
 801364e:	e000      	b.n	8013652 <__cvt+0x3a>
 8013650:	2103      	movs	r1, #3
 8013652:	ab03      	add	r3, sp, #12
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	ab02      	add	r3, sp, #8
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	4622      	mov	r2, r4
 801365c:	4633      	mov	r3, r6
 801365e:	eeb0 0b48 	vmov.f64	d0, d8
 8013662:	f000 fe25 	bl	80142b0 <_dtoa_r>
 8013666:	2d47      	cmp	r5, #71	; 0x47
 8013668:	d101      	bne.n	801366e <__cvt+0x56>
 801366a:	07fb      	lsls	r3, r7, #31
 801366c:	d51a      	bpl.n	80136a4 <__cvt+0x8c>
 801366e:	2d46      	cmp	r5, #70	; 0x46
 8013670:	eb00 0204 	add.w	r2, r0, r4
 8013674:	d10c      	bne.n	8013690 <__cvt+0x78>
 8013676:	7803      	ldrb	r3, [r0, #0]
 8013678:	2b30      	cmp	r3, #48	; 0x30
 801367a:	d107      	bne.n	801368c <__cvt+0x74>
 801367c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013684:	bf1c      	itt	ne
 8013686:	f1c4 0401 	rsbne	r4, r4, #1
 801368a:	6034      	strne	r4, [r6, #0]
 801368c:	6833      	ldr	r3, [r6, #0]
 801368e:	441a      	add	r2, r3
 8013690:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013698:	bf08      	it	eq
 801369a:	9203      	streq	r2, [sp, #12]
 801369c:	2130      	movs	r1, #48	; 0x30
 801369e:	9b03      	ldr	r3, [sp, #12]
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d307      	bcc.n	80136b4 <__cvt+0x9c>
 80136a4:	9b03      	ldr	r3, [sp, #12]
 80136a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136a8:	1a1b      	subs	r3, r3, r0
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	b005      	add	sp, #20
 80136ae:	ecbd 8b02 	vpop	{d8}
 80136b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b4:	1c5c      	adds	r4, r3, #1
 80136b6:	9403      	str	r4, [sp, #12]
 80136b8:	7019      	strb	r1, [r3, #0]
 80136ba:	e7f0      	b.n	801369e <__cvt+0x86>

080136bc <__exponent>:
 80136bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136be:	4603      	mov	r3, r0
 80136c0:	2900      	cmp	r1, #0
 80136c2:	bfb8      	it	lt
 80136c4:	4249      	neglt	r1, r1
 80136c6:	f803 2b02 	strb.w	r2, [r3], #2
 80136ca:	bfb4      	ite	lt
 80136cc:	222d      	movlt	r2, #45	; 0x2d
 80136ce:	222b      	movge	r2, #43	; 0x2b
 80136d0:	2909      	cmp	r1, #9
 80136d2:	7042      	strb	r2, [r0, #1]
 80136d4:	dd2a      	ble.n	801372c <__exponent+0x70>
 80136d6:	f10d 0407 	add.w	r4, sp, #7
 80136da:	46a4      	mov	ip, r4
 80136dc:	270a      	movs	r7, #10
 80136de:	46a6      	mov	lr, r4
 80136e0:	460a      	mov	r2, r1
 80136e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80136e6:	fb07 1516 	mls	r5, r7, r6, r1
 80136ea:	3530      	adds	r5, #48	; 0x30
 80136ec:	2a63      	cmp	r2, #99	; 0x63
 80136ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80136f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80136f6:	4631      	mov	r1, r6
 80136f8:	dcf1      	bgt.n	80136de <__exponent+0x22>
 80136fa:	3130      	adds	r1, #48	; 0x30
 80136fc:	f1ae 0502 	sub.w	r5, lr, #2
 8013700:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013704:	1c44      	adds	r4, r0, #1
 8013706:	4629      	mov	r1, r5
 8013708:	4561      	cmp	r1, ip
 801370a:	d30a      	bcc.n	8013722 <__exponent+0x66>
 801370c:	f10d 0209 	add.w	r2, sp, #9
 8013710:	eba2 020e 	sub.w	r2, r2, lr
 8013714:	4565      	cmp	r5, ip
 8013716:	bf88      	it	hi
 8013718:	2200      	movhi	r2, #0
 801371a:	4413      	add	r3, r2
 801371c:	1a18      	subs	r0, r3, r0
 801371e:	b003      	add	sp, #12
 8013720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013726:	f804 2f01 	strb.w	r2, [r4, #1]!
 801372a:	e7ed      	b.n	8013708 <__exponent+0x4c>
 801372c:	2330      	movs	r3, #48	; 0x30
 801372e:	3130      	adds	r1, #48	; 0x30
 8013730:	7083      	strb	r3, [r0, #2]
 8013732:	70c1      	strb	r1, [r0, #3]
 8013734:	1d03      	adds	r3, r0, #4
 8013736:	e7f1      	b.n	801371c <__exponent+0x60>

08013738 <_printf_float>:
 8013738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373c:	b08b      	sub	sp, #44	; 0x2c
 801373e:	460c      	mov	r4, r1
 8013740:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013744:	4616      	mov	r6, r2
 8013746:	461f      	mov	r7, r3
 8013748:	4605      	mov	r5, r0
 801374a:	f001 fcd7 	bl	80150fc <_localeconv_r>
 801374e:	f8d0 b000 	ldr.w	fp, [r0]
 8013752:	4658      	mov	r0, fp
 8013754:	f7ec fd74 	bl	8000240 <strlen>
 8013758:	2300      	movs	r3, #0
 801375a:	9308      	str	r3, [sp, #32]
 801375c:	f8d8 3000 	ldr.w	r3, [r8]
 8013760:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013764:	6822      	ldr	r2, [r4, #0]
 8013766:	3307      	adds	r3, #7
 8013768:	f023 0307 	bic.w	r3, r3, #7
 801376c:	f103 0108 	add.w	r1, r3, #8
 8013770:	f8c8 1000 	str.w	r1, [r8]
 8013774:	4682      	mov	sl, r0
 8013776:	e9d3 0100 	ldrd	r0, r1, [r3]
 801377a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801377e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80139e0 <_printf_float+0x2a8>
 8013782:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013786:	eeb0 6bc0 	vabs.f64	d6, d0
 801378a:	eeb4 6b47 	vcmp.f64	d6, d7
 801378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013792:	dd24      	ble.n	80137de <_printf_float+0xa6>
 8013794:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379c:	d502      	bpl.n	80137a4 <_printf_float+0x6c>
 801379e:	232d      	movs	r3, #45	; 0x2d
 80137a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137a4:	4b90      	ldr	r3, [pc, #576]	; (80139e8 <_printf_float+0x2b0>)
 80137a6:	4891      	ldr	r0, [pc, #580]	; (80139ec <_printf_float+0x2b4>)
 80137a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80137ac:	bf94      	ite	ls
 80137ae:	4698      	movls	r8, r3
 80137b0:	4680      	movhi	r8, r0
 80137b2:	2303      	movs	r3, #3
 80137b4:	6123      	str	r3, [r4, #16]
 80137b6:	f022 0204 	bic.w	r2, r2, #4
 80137ba:	2300      	movs	r3, #0
 80137bc:	6022      	str	r2, [r4, #0]
 80137be:	9304      	str	r3, [sp, #16]
 80137c0:	9700      	str	r7, [sp, #0]
 80137c2:	4633      	mov	r3, r6
 80137c4:	aa09      	add	r2, sp, #36	; 0x24
 80137c6:	4621      	mov	r1, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	f000 f9d3 	bl	8013b74 <_printf_common>
 80137ce:	3001      	adds	r0, #1
 80137d0:	f040 808a 	bne.w	80138e8 <_printf_float+0x1b0>
 80137d4:	f04f 30ff 	mov.w	r0, #4294967295
 80137d8:	b00b      	add	sp, #44	; 0x2c
 80137da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137de:	eeb4 0b40 	vcmp.f64	d0, d0
 80137e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137e6:	d709      	bvc.n	80137fc <_printf_float+0xc4>
 80137e8:	ee10 3a90 	vmov	r3, s1
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	bfbc      	itt	lt
 80137f0:	232d      	movlt	r3, #45	; 0x2d
 80137f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80137f6:	487e      	ldr	r0, [pc, #504]	; (80139f0 <_printf_float+0x2b8>)
 80137f8:	4b7e      	ldr	r3, [pc, #504]	; (80139f4 <_printf_float+0x2bc>)
 80137fa:	e7d5      	b.n	80137a8 <_printf_float+0x70>
 80137fc:	6863      	ldr	r3, [r4, #4]
 80137fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013802:	9104      	str	r1, [sp, #16]
 8013804:	1c59      	adds	r1, r3, #1
 8013806:	d13c      	bne.n	8013882 <_printf_float+0x14a>
 8013808:	2306      	movs	r3, #6
 801380a:	6063      	str	r3, [r4, #4]
 801380c:	2300      	movs	r3, #0
 801380e:	9303      	str	r3, [sp, #12]
 8013810:	ab08      	add	r3, sp, #32
 8013812:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801381a:	ab07      	add	r3, sp, #28
 801381c:	6861      	ldr	r1, [r4, #4]
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	6022      	str	r2, [r4, #0]
 8013822:	f10d 031b 	add.w	r3, sp, #27
 8013826:	4628      	mov	r0, r5
 8013828:	f7ff fef6 	bl	8013618 <__cvt>
 801382c:	9b04      	ldr	r3, [sp, #16]
 801382e:	9907      	ldr	r1, [sp, #28]
 8013830:	2b47      	cmp	r3, #71	; 0x47
 8013832:	4680      	mov	r8, r0
 8013834:	d108      	bne.n	8013848 <_printf_float+0x110>
 8013836:	1cc8      	adds	r0, r1, #3
 8013838:	db02      	blt.n	8013840 <_printf_float+0x108>
 801383a:	6863      	ldr	r3, [r4, #4]
 801383c:	4299      	cmp	r1, r3
 801383e:	dd41      	ble.n	80138c4 <_printf_float+0x18c>
 8013840:	f1a9 0902 	sub.w	r9, r9, #2
 8013844:	fa5f f989 	uxtb.w	r9, r9
 8013848:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801384c:	d820      	bhi.n	8013890 <_printf_float+0x158>
 801384e:	3901      	subs	r1, #1
 8013850:	464a      	mov	r2, r9
 8013852:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013856:	9107      	str	r1, [sp, #28]
 8013858:	f7ff ff30 	bl	80136bc <__exponent>
 801385c:	9a08      	ldr	r2, [sp, #32]
 801385e:	9004      	str	r0, [sp, #16]
 8013860:	1813      	adds	r3, r2, r0
 8013862:	2a01      	cmp	r2, #1
 8013864:	6123      	str	r3, [r4, #16]
 8013866:	dc02      	bgt.n	801386e <_printf_float+0x136>
 8013868:	6822      	ldr	r2, [r4, #0]
 801386a:	07d2      	lsls	r2, r2, #31
 801386c:	d501      	bpl.n	8013872 <_printf_float+0x13a>
 801386e:	3301      	adds	r3, #1
 8013870:	6123      	str	r3, [r4, #16]
 8013872:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d0a2      	beq.n	80137c0 <_printf_float+0x88>
 801387a:	232d      	movs	r3, #45	; 0x2d
 801387c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013880:	e79e      	b.n	80137c0 <_printf_float+0x88>
 8013882:	9904      	ldr	r1, [sp, #16]
 8013884:	2947      	cmp	r1, #71	; 0x47
 8013886:	d1c1      	bne.n	801380c <_printf_float+0xd4>
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1bf      	bne.n	801380c <_printf_float+0xd4>
 801388c:	2301      	movs	r3, #1
 801388e:	e7bc      	b.n	801380a <_printf_float+0xd2>
 8013890:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013894:	d118      	bne.n	80138c8 <_printf_float+0x190>
 8013896:	2900      	cmp	r1, #0
 8013898:	6863      	ldr	r3, [r4, #4]
 801389a:	dd0b      	ble.n	80138b4 <_printf_float+0x17c>
 801389c:	6121      	str	r1, [r4, #16]
 801389e:	b913      	cbnz	r3, 80138a6 <_printf_float+0x16e>
 80138a0:	6822      	ldr	r2, [r4, #0]
 80138a2:	07d0      	lsls	r0, r2, #31
 80138a4:	d502      	bpl.n	80138ac <_printf_float+0x174>
 80138a6:	3301      	adds	r3, #1
 80138a8:	440b      	add	r3, r1
 80138aa:	6123      	str	r3, [r4, #16]
 80138ac:	2300      	movs	r3, #0
 80138ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80138b0:	9304      	str	r3, [sp, #16]
 80138b2:	e7de      	b.n	8013872 <_printf_float+0x13a>
 80138b4:	b913      	cbnz	r3, 80138bc <_printf_float+0x184>
 80138b6:	6822      	ldr	r2, [r4, #0]
 80138b8:	07d2      	lsls	r2, r2, #31
 80138ba:	d501      	bpl.n	80138c0 <_printf_float+0x188>
 80138bc:	3302      	adds	r3, #2
 80138be:	e7f4      	b.n	80138aa <_printf_float+0x172>
 80138c0:	2301      	movs	r3, #1
 80138c2:	e7f2      	b.n	80138aa <_printf_float+0x172>
 80138c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80138c8:	9b08      	ldr	r3, [sp, #32]
 80138ca:	4299      	cmp	r1, r3
 80138cc:	db05      	blt.n	80138da <_printf_float+0x1a2>
 80138ce:	6823      	ldr	r3, [r4, #0]
 80138d0:	6121      	str	r1, [r4, #16]
 80138d2:	07d8      	lsls	r0, r3, #31
 80138d4:	d5ea      	bpl.n	80138ac <_printf_float+0x174>
 80138d6:	1c4b      	adds	r3, r1, #1
 80138d8:	e7e7      	b.n	80138aa <_printf_float+0x172>
 80138da:	2900      	cmp	r1, #0
 80138dc:	bfd4      	ite	le
 80138de:	f1c1 0202 	rsble	r2, r1, #2
 80138e2:	2201      	movgt	r2, #1
 80138e4:	4413      	add	r3, r2
 80138e6:	e7e0      	b.n	80138aa <_printf_float+0x172>
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	055a      	lsls	r2, r3, #21
 80138ec:	d407      	bmi.n	80138fe <_printf_float+0x1c6>
 80138ee:	6923      	ldr	r3, [r4, #16]
 80138f0:	4642      	mov	r2, r8
 80138f2:	4631      	mov	r1, r6
 80138f4:	4628      	mov	r0, r5
 80138f6:	47b8      	blx	r7
 80138f8:	3001      	adds	r0, #1
 80138fa:	d12a      	bne.n	8013952 <_printf_float+0x21a>
 80138fc:	e76a      	b.n	80137d4 <_printf_float+0x9c>
 80138fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013902:	f240 80e2 	bls.w	8013aca <_printf_float+0x392>
 8013906:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801390a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013912:	d133      	bne.n	801397c <_printf_float+0x244>
 8013914:	4a38      	ldr	r2, [pc, #224]	; (80139f8 <_printf_float+0x2c0>)
 8013916:	2301      	movs	r3, #1
 8013918:	4631      	mov	r1, r6
 801391a:	4628      	mov	r0, r5
 801391c:	47b8      	blx	r7
 801391e:	3001      	adds	r0, #1
 8013920:	f43f af58 	beq.w	80137d4 <_printf_float+0x9c>
 8013924:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013928:	429a      	cmp	r2, r3
 801392a:	db02      	blt.n	8013932 <_printf_float+0x1fa>
 801392c:	6823      	ldr	r3, [r4, #0]
 801392e:	07d8      	lsls	r0, r3, #31
 8013930:	d50f      	bpl.n	8013952 <_printf_float+0x21a>
 8013932:	4653      	mov	r3, sl
 8013934:	465a      	mov	r2, fp
 8013936:	4631      	mov	r1, r6
 8013938:	4628      	mov	r0, r5
 801393a:	47b8      	blx	r7
 801393c:	3001      	adds	r0, #1
 801393e:	f43f af49 	beq.w	80137d4 <_printf_float+0x9c>
 8013942:	f04f 0800 	mov.w	r8, #0
 8013946:	f104 091a 	add.w	r9, r4, #26
 801394a:	9b08      	ldr	r3, [sp, #32]
 801394c:	3b01      	subs	r3, #1
 801394e:	4543      	cmp	r3, r8
 8013950:	dc09      	bgt.n	8013966 <_printf_float+0x22e>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	079b      	lsls	r3, r3, #30
 8013956:	f100 8108 	bmi.w	8013b6a <_printf_float+0x432>
 801395a:	68e0      	ldr	r0, [r4, #12]
 801395c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801395e:	4298      	cmp	r0, r3
 8013960:	bfb8      	it	lt
 8013962:	4618      	movlt	r0, r3
 8013964:	e738      	b.n	80137d8 <_printf_float+0xa0>
 8013966:	2301      	movs	r3, #1
 8013968:	464a      	mov	r2, r9
 801396a:	4631      	mov	r1, r6
 801396c:	4628      	mov	r0, r5
 801396e:	47b8      	blx	r7
 8013970:	3001      	adds	r0, #1
 8013972:	f43f af2f 	beq.w	80137d4 <_printf_float+0x9c>
 8013976:	f108 0801 	add.w	r8, r8, #1
 801397a:	e7e6      	b.n	801394a <_printf_float+0x212>
 801397c:	9b07      	ldr	r3, [sp, #28]
 801397e:	2b00      	cmp	r3, #0
 8013980:	dc3c      	bgt.n	80139fc <_printf_float+0x2c4>
 8013982:	4a1d      	ldr	r2, [pc, #116]	; (80139f8 <_printf_float+0x2c0>)
 8013984:	2301      	movs	r3, #1
 8013986:	4631      	mov	r1, r6
 8013988:	4628      	mov	r0, r5
 801398a:	47b8      	blx	r7
 801398c:	3001      	adds	r0, #1
 801398e:	f43f af21 	beq.w	80137d4 <_printf_float+0x9c>
 8013992:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013996:	4313      	orrs	r3, r2
 8013998:	d102      	bne.n	80139a0 <_printf_float+0x268>
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	07d9      	lsls	r1, r3, #31
 801399e:	d5d8      	bpl.n	8013952 <_printf_float+0x21a>
 80139a0:	4653      	mov	r3, sl
 80139a2:	465a      	mov	r2, fp
 80139a4:	4631      	mov	r1, r6
 80139a6:	4628      	mov	r0, r5
 80139a8:	47b8      	blx	r7
 80139aa:	3001      	adds	r0, #1
 80139ac:	f43f af12 	beq.w	80137d4 <_printf_float+0x9c>
 80139b0:	f04f 0900 	mov.w	r9, #0
 80139b4:	f104 0a1a 	add.w	sl, r4, #26
 80139b8:	9b07      	ldr	r3, [sp, #28]
 80139ba:	425b      	negs	r3, r3
 80139bc:	454b      	cmp	r3, r9
 80139be:	dc01      	bgt.n	80139c4 <_printf_float+0x28c>
 80139c0:	9b08      	ldr	r3, [sp, #32]
 80139c2:	e795      	b.n	80138f0 <_printf_float+0x1b8>
 80139c4:	2301      	movs	r3, #1
 80139c6:	4652      	mov	r2, sl
 80139c8:	4631      	mov	r1, r6
 80139ca:	4628      	mov	r0, r5
 80139cc:	47b8      	blx	r7
 80139ce:	3001      	adds	r0, #1
 80139d0:	f43f af00 	beq.w	80137d4 <_printf_float+0x9c>
 80139d4:	f109 0901 	add.w	r9, r9, #1
 80139d8:	e7ee      	b.n	80139b8 <_printf_float+0x280>
 80139da:	bf00      	nop
 80139dc:	f3af 8000 	nop.w
 80139e0:	ffffffff 	.word	0xffffffff
 80139e4:	7fefffff 	.word	0x7fefffff
 80139e8:	08017ae4 	.word	0x08017ae4
 80139ec:	08017ae8 	.word	0x08017ae8
 80139f0:	08017af0 	.word	0x08017af0
 80139f4:	08017aec 	.word	0x08017aec
 80139f8:	08017af4 	.word	0x08017af4
 80139fc:	9a08      	ldr	r2, [sp, #32]
 80139fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a00:	429a      	cmp	r2, r3
 8013a02:	bfa8      	it	ge
 8013a04:	461a      	movge	r2, r3
 8013a06:	2a00      	cmp	r2, #0
 8013a08:	4691      	mov	r9, r2
 8013a0a:	dc38      	bgt.n	8013a7e <_printf_float+0x346>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	9305      	str	r3, [sp, #20]
 8013a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a14:	f104 021a 	add.w	r2, r4, #26
 8013a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a1a:	9905      	ldr	r1, [sp, #20]
 8013a1c:	9304      	str	r3, [sp, #16]
 8013a1e:	eba3 0309 	sub.w	r3, r3, r9
 8013a22:	428b      	cmp	r3, r1
 8013a24:	dc33      	bgt.n	8013a8e <_printf_float+0x356>
 8013a26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	db3c      	blt.n	8013aa8 <_printf_float+0x370>
 8013a2e:	6823      	ldr	r3, [r4, #0]
 8013a30:	07da      	lsls	r2, r3, #31
 8013a32:	d439      	bmi.n	8013aa8 <_printf_float+0x370>
 8013a34:	9b08      	ldr	r3, [sp, #32]
 8013a36:	9a04      	ldr	r2, [sp, #16]
 8013a38:	9907      	ldr	r1, [sp, #28]
 8013a3a:	1a9a      	subs	r2, r3, r2
 8013a3c:	eba3 0901 	sub.w	r9, r3, r1
 8013a40:	4591      	cmp	r9, r2
 8013a42:	bfa8      	it	ge
 8013a44:	4691      	movge	r9, r2
 8013a46:	f1b9 0f00 	cmp.w	r9, #0
 8013a4a:	dc35      	bgt.n	8013ab8 <_printf_float+0x380>
 8013a4c:	f04f 0800 	mov.w	r8, #0
 8013a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a54:	f104 0a1a 	add.w	sl, r4, #26
 8013a58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a5c:	1a9b      	subs	r3, r3, r2
 8013a5e:	eba3 0309 	sub.w	r3, r3, r9
 8013a62:	4543      	cmp	r3, r8
 8013a64:	f77f af75 	ble.w	8013952 <_printf_float+0x21a>
 8013a68:	2301      	movs	r3, #1
 8013a6a:	4652      	mov	r2, sl
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	4628      	mov	r0, r5
 8013a70:	47b8      	blx	r7
 8013a72:	3001      	adds	r0, #1
 8013a74:	f43f aeae 	beq.w	80137d4 <_printf_float+0x9c>
 8013a78:	f108 0801 	add.w	r8, r8, #1
 8013a7c:	e7ec      	b.n	8013a58 <_printf_float+0x320>
 8013a7e:	4613      	mov	r3, r2
 8013a80:	4631      	mov	r1, r6
 8013a82:	4642      	mov	r2, r8
 8013a84:	4628      	mov	r0, r5
 8013a86:	47b8      	blx	r7
 8013a88:	3001      	adds	r0, #1
 8013a8a:	d1bf      	bne.n	8013a0c <_printf_float+0x2d4>
 8013a8c:	e6a2      	b.n	80137d4 <_printf_float+0x9c>
 8013a8e:	2301      	movs	r3, #1
 8013a90:	4631      	mov	r1, r6
 8013a92:	4628      	mov	r0, r5
 8013a94:	9204      	str	r2, [sp, #16]
 8013a96:	47b8      	blx	r7
 8013a98:	3001      	adds	r0, #1
 8013a9a:	f43f ae9b 	beq.w	80137d4 <_printf_float+0x9c>
 8013a9e:	9b05      	ldr	r3, [sp, #20]
 8013aa0:	9a04      	ldr	r2, [sp, #16]
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	9305      	str	r3, [sp, #20]
 8013aa6:	e7b7      	b.n	8013a18 <_printf_float+0x2e0>
 8013aa8:	4653      	mov	r3, sl
 8013aaa:	465a      	mov	r2, fp
 8013aac:	4631      	mov	r1, r6
 8013aae:	4628      	mov	r0, r5
 8013ab0:	47b8      	blx	r7
 8013ab2:	3001      	adds	r0, #1
 8013ab4:	d1be      	bne.n	8013a34 <_printf_float+0x2fc>
 8013ab6:	e68d      	b.n	80137d4 <_printf_float+0x9c>
 8013ab8:	9a04      	ldr	r2, [sp, #16]
 8013aba:	464b      	mov	r3, r9
 8013abc:	4442      	add	r2, r8
 8013abe:	4631      	mov	r1, r6
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	47b8      	blx	r7
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d1c1      	bne.n	8013a4c <_printf_float+0x314>
 8013ac8:	e684      	b.n	80137d4 <_printf_float+0x9c>
 8013aca:	9a08      	ldr	r2, [sp, #32]
 8013acc:	2a01      	cmp	r2, #1
 8013ace:	dc01      	bgt.n	8013ad4 <_printf_float+0x39c>
 8013ad0:	07db      	lsls	r3, r3, #31
 8013ad2:	d537      	bpl.n	8013b44 <_printf_float+0x40c>
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	4642      	mov	r2, r8
 8013ad8:	4631      	mov	r1, r6
 8013ada:	4628      	mov	r0, r5
 8013adc:	47b8      	blx	r7
 8013ade:	3001      	adds	r0, #1
 8013ae0:	f43f ae78 	beq.w	80137d4 <_printf_float+0x9c>
 8013ae4:	4653      	mov	r3, sl
 8013ae6:	465a      	mov	r2, fp
 8013ae8:	4631      	mov	r1, r6
 8013aea:	4628      	mov	r0, r5
 8013aec:	47b8      	blx	r7
 8013aee:	3001      	adds	r0, #1
 8013af0:	f43f ae70 	beq.w	80137d4 <_printf_float+0x9c>
 8013af4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013af8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b00:	d01b      	beq.n	8013b3a <_printf_float+0x402>
 8013b02:	9b08      	ldr	r3, [sp, #32]
 8013b04:	f108 0201 	add.w	r2, r8, #1
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	4631      	mov	r1, r6
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	47b8      	blx	r7
 8013b10:	3001      	adds	r0, #1
 8013b12:	d10e      	bne.n	8013b32 <_printf_float+0x3fa>
 8013b14:	e65e      	b.n	80137d4 <_printf_float+0x9c>
 8013b16:	2301      	movs	r3, #1
 8013b18:	464a      	mov	r2, r9
 8013b1a:	4631      	mov	r1, r6
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	47b8      	blx	r7
 8013b20:	3001      	adds	r0, #1
 8013b22:	f43f ae57 	beq.w	80137d4 <_printf_float+0x9c>
 8013b26:	f108 0801 	add.w	r8, r8, #1
 8013b2a:	9b08      	ldr	r3, [sp, #32]
 8013b2c:	3b01      	subs	r3, #1
 8013b2e:	4543      	cmp	r3, r8
 8013b30:	dcf1      	bgt.n	8013b16 <_printf_float+0x3de>
 8013b32:	9b04      	ldr	r3, [sp, #16]
 8013b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013b38:	e6db      	b.n	80138f2 <_printf_float+0x1ba>
 8013b3a:	f04f 0800 	mov.w	r8, #0
 8013b3e:	f104 091a 	add.w	r9, r4, #26
 8013b42:	e7f2      	b.n	8013b2a <_printf_float+0x3f2>
 8013b44:	2301      	movs	r3, #1
 8013b46:	4642      	mov	r2, r8
 8013b48:	e7df      	b.n	8013b0a <_printf_float+0x3d2>
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	464a      	mov	r2, r9
 8013b4e:	4631      	mov	r1, r6
 8013b50:	4628      	mov	r0, r5
 8013b52:	47b8      	blx	r7
 8013b54:	3001      	adds	r0, #1
 8013b56:	f43f ae3d 	beq.w	80137d4 <_printf_float+0x9c>
 8013b5a:	f108 0801 	add.w	r8, r8, #1
 8013b5e:	68e3      	ldr	r3, [r4, #12]
 8013b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b62:	1a5b      	subs	r3, r3, r1
 8013b64:	4543      	cmp	r3, r8
 8013b66:	dcf0      	bgt.n	8013b4a <_printf_float+0x412>
 8013b68:	e6f7      	b.n	801395a <_printf_float+0x222>
 8013b6a:	f04f 0800 	mov.w	r8, #0
 8013b6e:	f104 0919 	add.w	r9, r4, #25
 8013b72:	e7f4      	b.n	8013b5e <_printf_float+0x426>

08013b74 <_printf_common>:
 8013b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b78:	4616      	mov	r6, r2
 8013b7a:	4699      	mov	r9, r3
 8013b7c:	688a      	ldr	r2, [r1, #8]
 8013b7e:	690b      	ldr	r3, [r1, #16]
 8013b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b84:	4293      	cmp	r3, r2
 8013b86:	bfb8      	it	lt
 8013b88:	4613      	movlt	r3, r2
 8013b8a:	6033      	str	r3, [r6, #0]
 8013b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b90:	4607      	mov	r7, r0
 8013b92:	460c      	mov	r4, r1
 8013b94:	b10a      	cbz	r2, 8013b9a <_printf_common+0x26>
 8013b96:	3301      	adds	r3, #1
 8013b98:	6033      	str	r3, [r6, #0]
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	0699      	lsls	r1, r3, #26
 8013b9e:	bf42      	ittt	mi
 8013ba0:	6833      	ldrmi	r3, [r6, #0]
 8013ba2:	3302      	addmi	r3, #2
 8013ba4:	6033      	strmi	r3, [r6, #0]
 8013ba6:	6825      	ldr	r5, [r4, #0]
 8013ba8:	f015 0506 	ands.w	r5, r5, #6
 8013bac:	d106      	bne.n	8013bbc <_printf_common+0x48>
 8013bae:	f104 0a19 	add.w	sl, r4, #25
 8013bb2:	68e3      	ldr	r3, [r4, #12]
 8013bb4:	6832      	ldr	r2, [r6, #0]
 8013bb6:	1a9b      	subs	r3, r3, r2
 8013bb8:	42ab      	cmp	r3, r5
 8013bba:	dc26      	bgt.n	8013c0a <_printf_common+0x96>
 8013bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013bc0:	1e13      	subs	r3, r2, #0
 8013bc2:	6822      	ldr	r2, [r4, #0]
 8013bc4:	bf18      	it	ne
 8013bc6:	2301      	movne	r3, #1
 8013bc8:	0692      	lsls	r2, r2, #26
 8013bca:	d42b      	bmi.n	8013c24 <_printf_common+0xb0>
 8013bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	47c0      	blx	r8
 8013bd6:	3001      	adds	r0, #1
 8013bd8:	d01e      	beq.n	8013c18 <_printf_common+0xa4>
 8013bda:	6823      	ldr	r3, [r4, #0]
 8013bdc:	68e5      	ldr	r5, [r4, #12]
 8013bde:	6832      	ldr	r2, [r6, #0]
 8013be0:	f003 0306 	and.w	r3, r3, #6
 8013be4:	2b04      	cmp	r3, #4
 8013be6:	bf08      	it	eq
 8013be8:	1aad      	subeq	r5, r5, r2
 8013bea:	68a3      	ldr	r3, [r4, #8]
 8013bec:	6922      	ldr	r2, [r4, #16]
 8013bee:	bf0c      	ite	eq
 8013bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bf4:	2500      	movne	r5, #0
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	bfc4      	itt	gt
 8013bfa:	1a9b      	subgt	r3, r3, r2
 8013bfc:	18ed      	addgt	r5, r5, r3
 8013bfe:	2600      	movs	r6, #0
 8013c00:	341a      	adds	r4, #26
 8013c02:	42b5      	cmp	r5, r6
 8013c04:	d11a      	bne.n	8013c3c <_printf_common+0xc8>
 8013c06:	2000      	movs	r0, #0
 8013c08:	e008      	b.n	8013c1c <_printf_common+0xa8>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	4652      	mov	r2, sl
 8013c0e:	4649      	mov	r1, r9
 8013c10:	4638      	mov	r0, r7
 8013c12:	47c0      	blx	r8
 8013c14:	3001      	adds	r0, #1
 8013c16:	d103      	bne.n	8013c20 <_printf_common+0xac>
 8013c18:	f04f 30ff 	mov.w	r0, #4294967295
 8013c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c20:	3501      	adds	r5, #1
 8013c22:	e7c6      	b.n	8013bb2 <_printf_common+0x3e>
 8013c24:	18e1      	adds	r1, r4, r3
 8013c26:	1c5a      	adds	r2, r3, #1
 8013c28:	2030      	movs	r0, #48	; 0x30
 8013c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c2e:	4422      	add	r2, r4
 8013c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c38:	3302      	adds	r3, #2
 8013c3a:	e7c7      	b.n	8013bcc <_printf_common+0x58>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	4622      	mov	r2, r4
 8013c40:	4649      	mov	r1, r9
 8013c42:	4638      	mov	r0, r7
 8013c44:	47c0      	blx	r8
 8013c46:	3001      	adds	r0, #1
 8013c48:	d0e6      	beq.n	8013c18 <_printf_common+0xa4>
 8013c4a:	3601      	adds	r6, #1
 8013c4c:	e7d9      	b.n	8013c02 <_printf_common+0x8e>
	...

08013c50 <_printf_i>:
 8013c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c54:	7e0f      	ldrb	r7, [r1, #24]
 8013c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c58:	2f78      	cmp	r7, #120	; 0x78
 8013c5a:	4691      	mov	r9, r2
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	460c      	mov	r4, r1
 8013c60:	469a      	mov	sl, r3
 8013c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c66:	d807      	bhi.n	8013c78 <_printf_i+0x28>
 8013c68:	2f62      	cmp	r7, #98	; 0x62
 8013c6a:	d80a      	bhi.n	8013c82 <_printf_i+0x32>
 8013c6c:	2f00      	cmp	r7, #0
 8013c6e:	f000 80d8 	beq.w	8013e22 <_printf_i+0x1d2>
 8013c72:	2f58      	cmp	r7, #88	; 0x58
 8013c74:	f000 80a3 	beq.w	8013dbe <_printf_i+0x16e>
 8013c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c80:	e03a      	b.n	8013cf8 <_printf_i+0xa8>
 8013c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c86:	2b15      	cmp	r3, #21
 8013c88:	d8f6      	bhi.n	8013c78 <_printf_i+0x28>
 8013c8a:	a101      	add	r1, pc, #4	; (adr r1, 8013c90 <_printf_i+0x40>)
 8013c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c90:	08013ce9 	.word	0x08013ce9
 8013c94:	08013cfd 	.word	0x08013cfd
 8013c98:	08013c79 	.word	0x08013c79
 8013c9c:	08013c79 	.word	0x08013c79
 8013ca0:	08013c79 	.word	0x08013c79
 8013ca4:	08013c79 	.word	0x08013c79
 8013ca8:	08013cfd 	.word	0x08013cfd
 8013cac:	08013c79 	.word	0x08013c79
 8013cb0:	08013c79 	.word	0x08013c79
 8013cb4:	08013c79 	.word	0x08013c79
 8013cb8:	08013c79 	.word	0x08013c79
 8013cbc:	08013e09 	.word	0x08013e09
 8013cc0:	08013d2d 	.word	0x08013d2d
 8013cc4:	08013deb 	.word	0x08013deb
 8013cc8:	08013c79 	.word	0x08013c79
 8013ccc:	08013c79 	.word	0x08013c79
 8013cd0:	08013e2b 	.word	0x08013e2b
 8013cd4:	08013c79 	.word	0x08013c79
 8013cd8:	08013d2d 	.word	0x08013d2d
 8013cdc:	08013c79 	.word	0x08013c79
 8013ce0:	08013c79 	.word	0x08013c79
 8013ce4:	08013df3 	.word	0x08013df3
 8013ce8:	682b      	ldr	r3, [r5, #0]
 8013cea:	1d1a      	adds	r2, r3, #4
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	602a      	str	r2, [r5, #0]
 8013cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e0a3      	b.n	8013e44 <_printf_i+0x1f4>
 8013cfc:	6820      	ldr	r0, [r4, #0]
 8013cfe:	6829      	ldr	r1, [r5, #0]
 8013d00:	0606      	lsls	r6, r0, #24
 8013d02:	f101 0304 	add.w	r3, r1, #4
 8013d06:	d50a      	bpl.n	8013d1e <_printf_i+0xce>
 8013d08:	680e      	ldr	r6, [r1, #0]
 8013d0a:	602b      	str	r3, [r5, #0]
 8013d0c:	2e00      	cmp	r6, #0
 8013d0e:	da03      	bge.n	8013d18 <_printf_i+0xc8>
 8013d10:	232d      	movs	r3, #45	; 0x2d
 8013d12:	4276      	negs	r6, r6
 8013d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d18:	485e      	ldr	r0, [pc, #376]	; (8013e94 <_printf_i+0x244>)
 8013d1a:	230a      	movs	r3, #10
 8013d1c:	e019      	b.n	8013d52 <_printf_i+0x102>
 8013d1e:	680e      	ldr	r6, [r1, #0]
 8013d20:	602b      	str	r3, [r5, #0]
 8013d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d26:	bf18      	it	ne
 8013d28:	b236      	sxthne	r6, r6
 8013d2a:	e7ef      	b.n	8013d0c <_printf_i+0xbc>
 8013d2c:	682b      	ldr	r3, [r5, #0]
 8013d2e:	6820      	ldr	r0, [r4, #0]
 8013d30:	1d19      	adds	r1, r3, #4
 8013d32:	6029      	str	r1, [r5, #0]
 8013d34:	0601      	lsls	r1, r0, #24
 8013d36:	d501      	bpl.n	8013d3c <_printf_i+0xec>
 8013d38:	681e      	ldr	r6, [r3, #0]
 8013d3a:	e002      	b.n	8013d42 <_printf_i+0xf2>
 8013d3c:	0646      	lsls	r6, r0, #25
 8013d3e:	d5fb      	bpl.n	8013d38 <_printf_i+0xe8>
 8013d40:	881e      	ldrh	r6, [r3, #0]
 8013d42:	4854      	ldr	r0, [pc, #336]	; (8013e94 <_printf_i+0x244>)
 8013d44:	2f6f      	cmp	r7, #111	; 0x6f
 8013d46:	bf0c      	ite	eq
 8013d48:	2308      	moveq	r3, #8
 8013d4a:	230a      	movne	r3, #10
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d52:	6865      	ldr	r5, [r4, #4]
 8013d54:	60a5      	str	r5, [r4, #8]
 8013d56:	2d00      	cmp	r5, #0
 8013d58:	bfa2      	ittt	ge
 8013d5a:	6821      	ldrge	r1, [r4, #0]
 8013d5c:	f021 0104 	bicge.w	r1, r1, #4
 8013d60:	6021      	strge	r1, [r4, #0]
 8013d62:	b90e      	cbnz	r6, 8013d68 <_printf_i+0x118>
 8013d64:	2d00      	cmp	r5, #0
 8013d66:	d04d      	beq.n	8013e04 <_printf_i+0x1b4>
 8013d68:	4615      	mov	r5, r2
 8013d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8013d72:	5dc7      	ldrb	r7, [r0, r7]
 8013d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d78:	4637      	mov	r7, r6
 8013d7a:	42bb      	cmp	r3, r7
 8013d7c:	460e      	mov	r6, r1
 8013d7e:	d9f4      	bls.n	8013d6a <_printf_i+0x11a>
 8013d80:	2b08      	cmp	r3, #8
 8013d82:	d10b      	bne.n	8013d9c <_printf_i+0x14c>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	07de      	lsls	r6, r3, #31
 8013d88:	d508      	bpl.n	8013d9c <_printf_i+0x14c>
 8013d8a:	6923      	ldr	r3, [r4, #16]
 8013d8c:	6861      	ldr	r1, [r4, #4]
 8013d8e:	4299      	cmp	r1, r3
 8013d90:	bfde      	ittt	le
 8013d92:	2330      	movle	r3, #48	; 0x30
 8013d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d9c:	1b52      	subs	r2, r2, r5
 8013d9e:	6122      	str	r2, [r4, #16]
 8013da0:	f8cd a000 	str.w	sl, [sp]
 8013da4:	464b      	mov	r3, r9
 8013da6:	aa03      	add	r2, sp, #12
 8013da8:	4621      	mov	r1, r4
 8013daa:	4640      	mov	r0, r8
 8013dac:	f7ff fee2 	bl	8013b74 <_printf_common>
 8013db0:	3001      	adds	r0, #1
 8013db2:	d14c      	bne.n	8013e4e <_printf_i+0x1fe>
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295
 8013db8:	b004      	add	sp, #16
 8013dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dbe:	4835      	ldr	r0, [pc, #212]	; (8013e94 <_printf_i+0x244>)
 8013dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013dc4:	6829      	ldr	r1, [r5, #0]
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8013dcc:	6029      	str	r1, [r5, #0]
 8013dce:	061d      	lsls	r5, r3, #24
 8013dd0:	d514      	bpl.n	8013dfc <_printf_i+0x1ac>
 8013dd2:	07df      	lsls	r7, r3, #31
 8013dd4:	bf44      	itt	mi
 8013dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8013dda:	6023      	strmi	r3, [r4, #0]
 8013ddc:	b91e      	cbnz	r6, 8013de6 <_printf_i+0x196>
 8013dde:	6823      	ldr	r3, [r4, #0]
 8013de0:	f023 0320 	bic.w	r3, r3, #32
 8013de4:	6023      	str	r3, [r4, #0]
 8013de6:	2310      	movs	r3, #16
 8013de8:	e7b0      	b.n	8013d4c <_printf_i+0xfc>
 8013dea:	6823      	ldr	r3, [r4, #0]
 8013dec:	f043 0320 	orr.w	r3, r3, #32
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	2378      	movs	r3, #120	; 0x78
 8013df4:	4828      	ldr	r0, [pc, #160]	; (8013e98 <_printf_i+0x248>)
 8013df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013dfa:	e7e3      	b.n	8013dc4 <_printf_i+0x174>
 8013dfc:	0659      	lsls	r1, r3, #25
 8013dfe:	bf48      	it	mi
 8013e00:	b2b6      	uxthmi	r6, r6
 8013e02:	e7e6      	b.n	8013dd2 <_printf_i+0x182>
 8013e04:	4615      	mov	r5, r2
 8013e06:	e7bb      	b.n	8013d80 <_printf_i+0x130>
 8013e08:	682b      	ldr	r3, [r5, #0]
 8013e0a:	6826      	ldr	r6, [r4, #0]
 8013e0c:	6961      	ldr	r1, [r4, #20]
 8013e0e:	1d18      	adds	r0, r3, #4
 8013e10:	6028      	str	r0, [r5, #0]
 8013e12:	0635      	lsls	r5, r6, #24
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	d501      	bpl.n	8013e1c <_printf_i+0x1cc>
 8013e18:	6019      	str	r1, [r3, #0]
 8013e1a:	e002      	b.n	8013e22 <_printf_i+0x1d2>
 8013e1c:	0670      	lsls	r0, r6, #25
 8013e1e:	d5fb      	bpl.n	8013e18 <_printf_i+0x1c8>
 8013e20:	8019      	strh	r1, [r3, #0]
 8013e22:	2300      	movs	r3, #0
 8013e24:	6123      	str	r3, [r4, #16]
 8013e26:	4615      	mov	r5, r2
 8013e28:	e7ba      	b.n	8013da0 <_printf_i+0x150>
 8013e2a:	682b      	ldr	r3, [r5, #0]
 8013e2c:	1d1a      	adds	r2, r3, #4
 8013e2e:	602a      	str	r2, [r5, #0]
 8013e30:	681d      	ldr	r5, [r3, #0]
 8013e32:	6862      	ldr	r2, [r4, #4]
 8013e34:	2100      	movs	r1, #0
 8013e36:	4628      	mov	r0, r5
 8013e38:	f7ec fa0a 	bl	8000250 <memchr>
 8013e3c:	b108      	cbz	r0, 8013e42 <_printf_i+0x1f2>
 8013e3e:	1b40      	subs	r0, r0, r5
 8013e40:	6060      	str	r0, [r4, #4]
 8013e42:	6863      	ldr	r3, [r4, #4]
 8013e44:	6123      	str	r3, [r4, #16]
 8013e46:	2300      	movs	r3, #0
 8013e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e4c:	e7a8      	b.n	8013da0 <_printf_i+0x150>
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	462a      	mov	r2, r5
 8013e52:	4649      	mov	r1, r9
 8013e54:	4640      	mov	r0, r8
 8013e56:	47d0      	blx	sl
 8013e58:	3001      	adds	r0, #1
 8013e5a:	d0ab      	beq.n	8013db4 <_printf_i+0x164>
 8013e5c:	6823      	ldr	r3, [r4, #0]
 8013e5e:	079b      	lsls	r3, r3, #30
 8013e60:	d413      	bmi.n	8013e8a <_printf_i+0x23a>
 8013e62:	68e0      	ldr	r0, [r4, #12]
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	4298      	cmp	r0, r3
 8013e68:	bfb8      	it	lt
 8013e6a:	4618      	movlt	r0, r3
 8013e6c:	e7a4      	b.n	8013db8 <_printf_i+0x168>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	4632      	mov	r2, r6
 8013e72:	4649      	mov	r1, r9
 8013e74:	4640      	mov	r0, r8
 8013e76:	47d0      	blx	sl
 8013e78:	3001      	adds	r0, #1
 8013e7a:	d09b      	beq.n	8013db4 <_printf_i+0x164>
 8013e7c:	3501      	adds	r5, #1
 8013e7e:	68e3      	ldr	r3, [r4, #12]
 8013e80:	9903      	ldr	r1, [sp, #12]
 8013e82:	1a5b      	subs	r3, r3, r1
 8013e84:	42ab      	cmp	r3, r5
 8013e86:	dcf2      	bgt.n	8013e6e <_printf_i+0x21e>
 8013e88:	e7eb      	b.n	8013e62 <_printf_i+0x212>
 8013e8a:	2500      	movs	r5, #0
 8013e8c:	f104 0619 	add.w	r6, r4, #25
 8013e90:	e7f5      	b.n	8013e7e <_printf_i+0x22e>
 8013e92:	bf00      	nop
 8013e94:	08017af6 	.word	0x08017af6
 8013e98:	08017b07 	.word	0x08017b07

08013e9c <iprintf>:
 8013e9c:	b40f      	push	{r0, r1, r2, r3}
 8013e9e:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <iprintf+0x2c>)
 8013ea0:	b513      	push	{r0, r1, r4, lr}
 8013ea2:	681c      	ldr	r4, [r3, #0]
 8013ea4:	b124      	cbz	r4, 8013eb0 <iprintf+0x14>
 8013ea6:	69a3      	ldr	r3, [r4, #24]
 8013ea8:	b913      	cbnz	r3, 8013eb0 <iprintf+0x14>
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f001 f888 	bl	8014fc0 <__sinit>
 8013eb0:	ab05      	add	r3, sp, #20
 8013eb2:	9a04      	ldr	r2, [sp, #16]
 8013eb4:	68a1      	ldr	r1, [r4, #8]
 8013eb6:	9301      	str	r3, [sp, #4]
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f001 fee5 	bl	8015c88 <_vfiprintf_r>
 8013ebe:	b002      	add	sp, #8
 8013ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ec4:	b004      	add	sp, #16
 8013ec6:	4770      	bx	lr
 8013ec8:	20000dac 	.word	0x20000dac

08013ecc <_puts_r>:
 8013ecc:	b570      	push	{r4, r5, r6, lr}
 8013ece:	460e      	mov	r6, r1
 8013ed0:	4605      	mov	r5, r0
 8013ed2:	b118      	cbz	r0, 8013edc <_puts_r+0x10>
 8013ed4:	6983      	ldr	r3, [r0, #24]
 8013ed6:	b90b      	cbnz	r3, 8013edc <_puts_r+0x10>
 8013ed8:	f001 f872 	bl	8014fc0 <__sinit>
 8013edc:	69ab      	ldr	r3, [r5, #24]
 8013ede:	68ac      	ldr	r4, [r5, #8]
 8013ee0:	b913      	cbnz	r3, 8013ee8 <_puts_r+0x1c>
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	f001 f86c 	bl	8014fc0 <__sinit>
 8013ee8:	4b2c      	ldr	r3, [pc, #176]	; (8013f9c <_puts_r+0xd0>)
 8013eea:	429c      	cmp	r4, r3
 8013eec:	d120      	bne.n	8013f30 <_puts_r+0x64>
 8013eee:	686c      	ldr	r4, [r5, #4]
 8013ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ef2:	07db      	lsls	r3, r3, #31
 8013ef4:	d405      	bmi.n	8013f02 <_puts_r+0x36>
 8013ef6:	89a3      	ldrh	r3, [r4, #12]
 8013ef8:	0598      	lsls	r0, r3, #22
 8013efa:	d402      	bmi.n	8013f02 <_puts_r+0x36>
 8013efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013efe:	f001 f902 	bl	8015106 <__retarget_lock_acquire_recursive>
 8013f02:	89a3      	ldrh	r3, [r4, #12]
 8013f04:	0719      	lsls	r1, r3, #28
 8013f06:	d51d      	bpl.n	8013f44 <_puts_r+0x78>
 8013f08:	6923      	ldr	r3, [r4, #16]
 8013f0a:	b1db      	cbz	r3, 8013f44 <_puts_r+0x78>
 8013f0c:	3e01      	subs	r6, #1
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013f14:	3b01      	subs	r3, #1
 8013f16:	60a3      	str	r3, [r4, #8]
 8013f18:	bb39      	cbnz	r1, 8013f6a <_puts_r+0x9e>
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	da38      	bge.n	8013f90 <_puts_r+0xc4>
 8013f1e:	4622      	mov	r2, r4
 8013f20:	210a      	movs	r1, #10
 8013f22:	4628      	mov	r0, r5
 8013f24:	f000 f878 	bl	8014018 <__swbuf_r>
 8013f28:	3001      	adds	r0, #1
 8013f2a:	d011      	beq.n	8013f50 <_puts_r+0x84>
 8013f2c:	250a      	movs	r5, #10
 8013f2e:	e011      	b.n	8013f54 <_puts_r+0x88>
 8013f30:	4b1b      	ldr	r3, [pc, #108]	; (8013fa0 <_puts_r+0xd4>)
 8013f32:	429c      	cmp	r4, r3
 8013f34:	d101      	bne.n	8013f3a <_puts_r+0x6e>
 8013f36:	68ac      	ldr	r4, [r5, #8]
 8013f38:	e7da      	b.n	8013ef0 <_puts_r+0x24>
 8013f3a:	4b1a      	ldr	r3, [pc, #104]	; (8013fa4 <_puts_r+0xd8>)
 8013f3c:	429c      	cmp	r4, r3
 8013f3e:	bf08      	it	eq
 8013f40:	68ec      	ldreq	r4, [r5, #12]
 8013f42:	e7d5      	b.n	8013ef0 <_puts_r+0x24>
 8013f44:	4621      	mov	r1, r4
 8013f46:	4628      	mov	r0, r5
 8013f48:	f000 f8b8 	bl	80140bc <__swsetup_r>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d0dd      	beq.n	8013f0c <_puts_r+0x40>
 8013f50:	f04f 35ff 	mov.w	r5, #4294967295
 8013f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f56:	07da      	lsls	r2, r3, #31
 8013f58:	d405      	bmi.n	8013f66 <_puts_r+0x9a>
 8013f5a:	89a3      	ldrh	r3, [r4, #12]
 8013f5c:	059b      	lsls	r3, r3, #22
 8013f5e:	d402      	bmi.n	8013f66 <_puts_r+0x9a>
 8013f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f62:	f001 f8d1 	bl	8015108 <__retarget_lock_release_recursive>
 8013f66:	4628      	mov	r0, r5
 8013f68:	bd70      	pop	{r4, r5, r6, pc}
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	da04      	bge.n	8013f78 <_puts_r+0xac>
 8013f6e:	69a2      	ldr	r2, [r4, #24]
 8013f70:	429a      	cmp	r2, r3
 8013f72:	dc06      	bgt.n	8013f82 <_puts_r+0xb6>
 8013f74:	290a      	cmp	r1, #10
 8013f76:	d004      	beq.n	8013f82 <_puts_r+0xb6>
 8013f78:	6823      	ldr	r3, [r4, #0]
 8013f7a:	1c5a      	adds	r2, r3, #1
 8013f7c:	6022      	str	r2, [r4, #0]
 8013f7e:	7019      	strb	r1, [r3, #0]
 8013f80:	e7c5      	b.n	8013f0e <_puts_r+0x42>
 8013f82:	4622      	mov	r2, r4
 8013f84:	4628      	mov	r0, r5
 8013f86:	f000 f847 	bl	8014018 <__swbuf_r>
 8013f8a:	3001      	adds	r0, #1
 8013f8c:	d1bf      	bne.n	8013f0e <_puts_r+0x42>
 8013f8e:	e7df      	b.n	8013f50 <_puts_r+0x84>
 8013f90:	6823      	ldr	r3, [r4, #0]
 8013f92:	250a      	movs	r5, #10
 8013f94:	1c5a      	adds	r2, r3, #1
 8013f96:	6022      	str	r2, [r4, #0]
 8013f98:	701d      	strb	r5, [r3, #0]
 8013f9a:	e7db      	b.n	8013f54 <_puts_r+0x88>
 8013f9c:	08017bc8 	.word	0x08017bc8
 8013fa0:	08017be8 	.word	0x08017be8
 8013fa4:	08017ba8 	.word	0x08017ba8

08013fa8 <puts>:
 8013fa8:	4b02      	ldr	r3, [pc, #8]	; (8013fb4 <puts+0xc>)
 8013faa:	4601      	mov	r1, r0
 8013fac:	6818      	ldr	r0, [r3, #0]
 8013fae:	f7ff bf8d 	b.w	8013ecc <_puts_r>
 8013fb2:	bf00      	nop
 8013fb4:	20000dac 	.word	0x20000dac

08013fb8 <_sbrk_r>:
 8013fb8:	b538      	push	{r3, r4, r5, lr}
 8013fba:	4d06      	ldr	r5, [pc, #24]	; (8013fd4 <_sbrk_r+0x1c>)
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4608      	mov	r0, r1
 8013fc2:	602b      	str	r3, [r5, #0]
 8013fc4:	f7ed fd24 	bl	8001a10 <_sbrk>
 8013fc8:	1c43      	adds	r3, r0, #1
 8013fca:	d102      	bne.n	8013fd2 <_sbrk_r+0x1a>
 8013fcc:	682b      	ldr	r3, [r5, #0]
 8013fce:	b103      	cbz	r3, 8013fd2 <_sbrk_r+0x1a>
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}
 8013fd4:	2000142c 	.word	0x2000142c

08013fd8 <siprintf>:
 8013fd8:	b40e      	push	{r1, r2, r3}
 8013fda:	b500      	push	{lr}
 8013fdc:	b09c      	sub	sp, #112	; 0x70
 8013fde:	ab1d      	add	r3, sp, #116	; 0x74
 8013fe0:	9002      	str	r0, [sp, #8]
 8013fe2:	9006      	str	r0, [sp, #24]
 8013fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013fe8:	4809      	ldr	r0, [pc, #36]	; (8014010 <siprintf+0x38>)
 8013fea:	9107      	str	r1, [sp, #28]
 8013fec:	9104      	str	r1, [sp, #16]
 8013fee:	4909      	ldr	r1, [pc, #36]	; (8014014 <siprintf+0x3c>)
 8013ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ff4:	9105      	str	r1, [sp, #20]
 8013ff6:	6800      	ldr	r0, [r0, #0]
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	a902      	add	r1, sp, #8
 8013ffc:	f001 fd1a 	bl	8015a34 <_svfiprintf_r>
 8014000:	9b02      	ldr	r3, [sp, #8]
 8014002:	2200      	movs	r2, #0
 8014004:	701a      	strb	r2, [r3, #0]
 8014006:	b01c      	add	sp, #112	; 0x70
 8014008:	f85d eb04 	ldr.w	lr, [sp], #4
 801400c:	b003      	add	sp, #12
 801400e:	4770      	bx	lr
 8014010:	20000dac 	.word	0x20000dac
 8014014:	ffff0208 	.word	0xffff0208

08014018 <__swbuf_r>:
 8014018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401a:	460e      	mov	r6, r1
 801401c:	4614      	mov	r4, r2
 801401e:	4605      	mov	r5, r0
 8014020:	b118      	cbz	r0, 801402a <__swbuf_r+0x12>
 8014022:	6983      	ldr	r3, [r0, #24]
 8014024:	b90b      	cbnz	r3, 801402a <__swbuf_r+0x12>
 8014026:	f000 ffcb 	bl	8014fc0 <__sinit>
 801402a:	4b21      	ldr	r3, [pc, #132]	; (80140b0 <__swbuf_r+0x98>)
 801402c:	429c      	cmp	r4, r3
 801402e:	d12b      	bne.n	8014088 <__swbuf_r+0x70>
 8014030:	686c      	ldr	r4, [r5, #4]
 8014032:	69a3      	ldr	r3, [r4, #24]
 8014034:	60a3      	str	r3, [r4, #8]
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	071a      	lsls	r2, r3, #28
 801403a:	d52f      	bpl.n	801409c <__swbuf_r+0x84>
 801403c:	6923      	ldr	r3, [r4, #16]
 801403e:	b36b      	cbz	r3, 801409c <__swbuf_r+0x84>
 8014040:	6923      	ldr	r3, [r4, #16]
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	1ac0      	subs	r0, r0, r3
 8014046:	6963      	ldr	r3, [r4, #20]
 8014048:	b2f6      	uxtb	r6, r6
 801404a:	4283      	cmp	r3, r0
 801404c:	4637      	mov	r7, r6
 801404e:	dc04      	bgt.n	801405a <__swbuf_r+0x42>
 8014050:	4621      	mov	r1, r4
 8014052:	4628      	mov	r0, r5
 8014054:	f000 ff20 	bl	8014e98 <_fflush_r>
 8014058:	bb30      	cbnz	r0, 80140a8 <__swbuf_r+0x90>
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	3b01      	subs	r3, #1
 801405e:	60a3      	str	r3, [r4, #8]
 8014060:	6823      	ldr	r3, [r4, #0]
 8014062:	1c5a      	adds	r2, r3, #1
 8014064:	6022      	str	r2, [r4, #0]
 8014066:	701e      	strb	r6, [r3, #0]
 8014068:	6963      	ldr	r3, [r4, #20]
 801406a:	3001      	adds	r0, #1
 801406c:	4283      	cmp	r3, r0
 801406e:	d004      	beq.n	801407a <__swbuf_r+0x62>
 8014070:	89a3      	ldrh	r3, [r4, #12]
 8014072:	07db      	lsls	r3, r3, #31
 8014074:	d506      	bpl.n	8014084 <__swbuf_r+0x6c>
 8014076:	2e0a      	cmp	r6, #10
 8014078:	d104      	bne.n	8014084 <__swbuf_r+0x6c>
 801407a:	4621      	mov	r1, r4
 801407c:	4628      	mov	r0, r5
 801407e:	f000 ff0b 	bl	8014e98 <_fflush_r>
 8014082:	b988      	cbnz	r0, 80140a8 <__swbuf_r+0x90>
 8014084:	4638      	mov	r0, r7
 8014086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014088:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <__swbuf_r+0x9c>)
 801408a:	429c      	cmp	r4, r3
 801408c:	d101      	bne.n	8014092 <__swbuf_r+0x7a>
 801408e:	68ac      	ldr	r4, [r5, #8]
 8014090:	e7cf      	b.n	8014032 <__swbuf_r+0x1a>
 8014092:	4b09      	ldr	r3, [pc, #36]	; (80140b8 <__swbuf_r+0xa0>)
 8014094:	429c      	cmp	r4, r3
 8014096:	bf08      	it	eq
 8014098:	68ec      	ldreq	r4, [r5, #12]
 801409a:	e7ca      	b.n	8014032 <__swbuf_r+0x1a>
 801409c:	4621      	mov	r1, r4
 801409e:	4628      	mov	r0, r5
 80140a0:	f000 f80c 	bl	80140bc <__swsetup_r>
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d0cb      	beq.n	8014040 <__swbuf_r+0x28>
 80140a8:	f04f 37ff 	mov.w	r7, #4294967295
 80140ac:	e7ea      	b.n	8014084 <__swbuf_r+0x6c>
 80140ae:	bf00      	nop
 80140b0:	08017bc8 	.word	0x08017bc8
 80140b4:	08017be8 	.word	0x08017be8
 80140b8:	08017ba8 	.word	0x08017ba8

080140bc <__swsetup_r>:
 80140bc:	4b32      	ldr	r3, [pc, #200]	; (8014188 <__swsetup_r+0xcc>)
 80140be:	b570      	push	{r4, r5, r6, lr}
 80140c0:	681d      	ldr	r5, [r3, #0]
 80140c2:	4606      	mov	r6, r0
 80140c4:	460c      	mov	r4, r1
 80140c6:	b125      	cbz	r5, 80140d2 <__swsetup_r+0x16>
 80140c8:	69ab      	ldr	r3, [r5, #24]
 80140ca:	b913      	cbnz	r3, 80140d2 <__swsetup_r+0x16>
 80140cc:	4628      	mov	r0, r5
 80140ce:	f000 ff77 	bl	8014fc0 <__sinit>
 80140d2:	4b2e      	ldr	r3, [pc, #184]	; (801418c <__swsetup_r+0xd0>)
 80140d4:	429c      	cmp	r4, r3
 80140d6:	d10f      	bne.n	80140f8 <__swsetup_r+0x3c>
 80140d8:	686c      	ldr	r4, [r5, #4]
 80140da:	89a3      	ldrh	r3, [r4, #12]
 80140dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140e0:	0719      	lsls	r1, r3, #28
 80140e2:	d42c      	bmi.n	801413e <__swsetup_r+0x82>
 80140e4:	06dd      	lsls	r5, r3, #27
 80140e6:	d411      	bmi.n	801410c <__swsetup_r+0x50>
 80140e8:	2309      	movs	r3, #9
 80140ea:	6033      	str	r3, [r6, #0]
 80140ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80140f0:	81a3      	strh	r3, [r4, #12]
 80140f2:	f04f 30ff 	mov.w	r0, #4294967295
 80140f6:	e03e      	b.n	8014176 <__swsetup_r+0xba>
 80140f8:	4b25      	ldr	r3, [pc, #148]	; (8014190 <__swsetup_r+0xd4>)
 80140fa:	429c      	cmp	r4, r3
 80140fc:	d101      	bne.n	8014102 <__swsetup_r+0x46>
 80140fe:	68ac      	ldr	r4, [r5, #8]
 8014100:	e7eb      	b.n	80140da <__swsetup_r+0x1e>
 8014102:	4b24      	ldr	r3, [pc, #144]	; (8014194 <__swsetup_r+0xd8>)
 8014104:	429c      	cmp	r4, r3
 8014106:	bf08      	it	eq
 8014108:	68ec      	ldreq	r4, [r5, #12]
 801410a:	e7e6      	b.n	80140da <__swsetup_r+0x1e>
 801410c:	0758      	lsls	r0, r3, #29
 801410e:	d512      	bpl.n	8014136 <__swsetup_r+0x7a>
 8014110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014112:	b141      	cbz	r1, 8014126 <__swsetup_r+0x6a>
 8014114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014118:	4299      	cmp	r1, r3
 801411a:	d002      	beq.n	8014122 <__swsetup_r+0x66>
 801411c:	4630      	mov	r0, r6
 801411e:	f7ff f99b 	bl	8013458 <_free_r>
 8014122:	2300      	movs	r3, #0
 8014124:	6363      	str	r3, [r4, #52]	; 0x34
 8014126:	89a3      	ldrh	r3, [r4, #12]
 8014128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801412c:	81a3      	strh	r3, [r4, #12]
 801412e:	2300      	movs	r3, #0
 8014130:	6063      	str	r3, [r4, #4]
 8014132:	6923      	ldr	r3, [r4, #16]
 8014134:	6023      	str	r3, [r4, #0]
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	f043 0308 	orr.w	r3, r3, #8
 801413c:	81a3      	strh	r3, [r4, #12]
 801413e:	6923      	ldr	r3, [r4, #16]
 8014140:	b94b      	cbnz	r3, 8014156 <__swsetup_r+0x9a>
 8014142:	89a3      	ldrh	r3, [r4, #12]
 8014144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801414c:	d003      	beq.n	8014156 <__swsetup_r+0x9a>
 801414e:	4621      	mov	r1, r4
 8014150:	4630      	mov	r0, r6
 8014152:	f000 ffff 	bl	8015154 <__smakebuf_r>
 8014156:	89a0      	ldrh	r0, [r4, #12]
 8014158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801415c:	f010 0301 	ands.w	r3, r0, #1
 8014160:	d00a      	beq.n	8014178 <__swsetup_r+0xbc>
 8014162:	2300      	movs	r3, #0
 8014164:	60a3      	str	r3, [r4, #8]
 8014166:	6963      	ldr	r3, [r4, #20]
 8014168:	425b      	negs	r3, r3
 801416a:	61a3      	str	r3, [r4, #24]
 801416c:	6923      	ldr	r3, [r4, #16]
 801416e:	b943      	cbnz	r3, 8014182 <__swsetup_r+0xc6>
 8014170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014174:	d1ba      	bne.n	80140ec <__swsetup_r+0x30>
 8014176:	bd70      	pop	{r4, r5, r6, pc}
 8014178:	0781      	lsls	r1, r0, #30
 801417a:	bf58      	it	pl
 801417c:	6963      	ldrpl	r3, [r4, #20]
 801417e:	60a3      	str	r3, [r4, #8]
 8014180:	e7f4      	b.n	801416c <__swsetup_r+0xb0>
 8014182:	2000      	movs	r0, #0
 8014184:	e7f7      	b.n	8014176 <__swsetup_r+0xba>
 8014186:	bf00      	nop
 8014188:	20000dac 	.word	0x20000dac
 801418c:	08017bc8 	.word	0x08017bc8
 8014190:	08017be8 	.word	0x08017be8
 8014194:	08017ba8 	.word	0x08017ba8

08014198 <quorem>:
 8014198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801419c:	6903      	ldr	r3, [r0, #16]
 801419e:	690c      	ldr	r4, [r1, #16]
 80141a0:	42a3      	cmp	r3, r4
 80141a2:	4607      	mov	r7, r0
 80141a4:	f2c0 8081 	blt.w	80142aa <quorem+0x112>
 80141a8:	3c01      	subs	r4, #1
 80141aa:	f101 0814 	add.w	r8, r1, #20
 80141ae:	f100 0514 	add.w	r5, r0, #20
 80141b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141b6:	9301      	str	r3, [sp, #4]
 80141b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80141bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141c0:	3301      	adds	r3, #1
 80141c2:	429a      	cmp	r2, r3
 80141c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80141c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80141cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80141d0:	d331      	bcc.n	8014236 <quorem+0x9e>
 80141d2:	f04f 0e00 	mov.w	lr, #0
 80141d6:	4640      	mov	r0, r8
 80141d8:	46ac      	mov	ip, r5
 80141da:	46f2      	mov	sl, lr
 80141dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80141e0:	b293      	uxth	r3, r2
 80141e2:	fb06 e303 	mla	r3, r6, r3, lr
 80141e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	ebaa 0303 	sub.w	r3, sl, r3
 80141f0:	f8dc a000 	ldr.w	sl, [ip]
 80141f4:	0c12      	lsrs	r2, r2, #16
 80141f6:	fa13 f38a 	uxtah	r3, r3, sl
 80141fa:	fb06 e202 	mla	r2, r6, r2, lr
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	9b00      	ldr	r3, [sp, #0]
 8014202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014206:	b292      	uxth	r2, r2
 8014208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801420c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014210:	f8bd 3000 	ldrh.w	r3, [sp]
 8014214:	4581      	cmp	r9, r0
 8014216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801421a:	f84c 3b04 	str.w	r3, [ip], #4
 801421e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014222:	d2db      	bcs.n	80141dc <quorem+0x44>
 8014224:	f855 300b 	ldr.w	r3, [r5, fp]
 8014228:	b92b      	cbnz	r3, 8014236 <quorem+0x9e>
 801422a:	9b01      	ldr	r3, [sp, #4]
 801422c:	3b04      	subs	r3, #4
 801422e:	429d      	cmp	r5, r3
 8014230:	461a      	mov	r2, r3
 8014232:	d32e      	bcc.n	8014292 <quorem+0xfa>
 8014234:	613c      	str	r4, [r7, #16]
 8014236:	4638      	mov	r0, r7
 8014238:	f001 fa5a 	bl	80156f0 <__mcmp>
 801423c:	2800      	cmp	r0, #0
 801423e:	db24      	blt.n	801428a <quorem+0xf2>
 8014240:	3601      	adds	r6, #1
 8014242:	4628      	mov	r0, r5
 8014244:	f04f 0c00 	mov.w	ip, #0
 8014248:	f858 2b04 	ldr.w	r2, [r8], #4
 801424c:	f8d0 e000 	ldr.w	lr, [r0]
 8014250:	b293      	uxth	r3, r2
 8014252:	ebac 0303 	sub.w	r3, ip, r3
 8014256:	0c12      	lsrs	r2, r2, #16
 8014258:	fa13 f38e 	uxtah	r3, r3, lr
 801425c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014264:	b29b      	uxth	r3, r3
 8014266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801426a:	45c1      	cmp	r9, r8
 801426c:	f840 3b04 	str.w	r3, [r0], #4
 8014270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014274:	d2e8      	bcs.n	8014248 <quorem+0xb0>
 8014276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801427a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801427e:	b922      	cbnz	r2, 801428a <quorem+0xf2>
 8014280:	3b04      	subs	r3, #4
 8014282:	429d      	cmp	r5, r3
 8014284:	461a      	mov	r2, r3
 8014286:	d30a      	bcc.n	801429e <quorem+0x106>
 8014288:	613c      	str	r4, [r7, #16]
 801428a:	4630      	mov	r0, r6
 801428c:	b003      	add	sp, #12
 801428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014292:	6812      	ldr	r2, [r2, #0]
 8014294:	3b04      	subs	r3, #4
 8014296:	2a00      	cmp	r2, #0
 8014298:	d1cc      	bne.n	8014234 <quorem+0x9c>
 801429a:	3c01      	subs	r4, #1
 801429c:	e7c7      	b.n	801422e <quorem+0x96>
 801429e:	6812      	ldr	r2, [r2, #0]
 80142a0:	3b04      	subs	r3, #4
 80142a2:	2a00      	cmp	r2, #0
 80142a4:	d1f0      	bne.n	8014288 <quorem+0xf0>
 80142a6:	3c01      	subs	r4, #1
 80142a8:	e7eb      	b.n	8014282 <quorem+0xea>
 80142aa:	2000      	movs	r0, #0
 80142ac:	e7ee      	b.n	801428c <quorem+0xf4>
	...

080142b0 <_dtoa_r>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	ed2d 8b02 	vpush	{d8}
 80142b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80142ba:	b091      	sub	sp, #68	; 0x44
 80142bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80142c0:	ec59 8b10 	vmov	r8, r9, d0
 80142c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80142c6:	9106      	str	r1, [sp, #24]
 80142c8:	4606      	mov	r6, r0
 80142ca:	9208      	str	r2, [sp, #32]
 80142cc:	930c      	str	r3, [sp, #48]	; 0x30
 80142ce:	b975      	cbnz	r5, 80142ee <_dtoa_r+0x3e>
 80142d0:	2010      	movs	r0, #16
 80142d2:	f7ff f881 	bl	80133d8 <malloc>
 80142d6:	4602      	mov	r2, r0
 80142d8:	6270      	str	r0, [r6, #36]	; 0x24
 80142da:	b920      	cbnz	r0, 80142e6 <_dtoa_r+0x36>
 80142dc:	4baa      	ldr	r3, [pc, #680]	; (8014588 <_dtoa_r+0x2d8>)
 80142de:	21ea      	movs	r1, #234	; 0xea
 80142e0:	48aa      	ldr	r0, [pc, #680]	; (801458c <_dtoa_r+0x2dc>)
 80142e2:	f001 fe57 	bl	8015f94 <__assert_func>
 80142e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142ea:	6005      	str	r5, [r0, #0]
 80142ec:	60c5      	str	r5, [r0, #12]
 80142ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80142f0:	6819      	ldr	r1, [r3, #0]
 80142f2:	b151      	cbz	r1, 801430a <_dtoa_r+0x5a>
 80142f4:	685a      	ldr	r2, [r3, #4]
 80142f6:	604a      	str	r2, [r1, #4]
 80142f8:	2301      	movs	r3, #1
 80142fa:	4093      	lsls	r3, r2
 80142fc:	608b      	str	r3, [r1, #8]
 80142fe:	4630      	mov	r0, r6
 8014300:	f000 ffb4 	bl	801526c <_Bfree>
 8014304:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014306:	2200      	movs	r2, #0
 8014308:	601a      	str	r2, [r3, #0]
 801430a:	f1b9 0300 	subs.w	r3, r9, #0
 801430e:	bfbb      	ittet	lt
 8014310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014314:	9303      	strlt	r3, [sp, #12]
 8014316:	2300      	movge	r3, #0
 8014318:	2201      	movlt	r2, #1
 801431a:	bfac      	ite	ge
 801431c:	6023      	strge	r3, [r4, #0]
 801431e:	6022      	strlt	r2, [r4, #0]
 8014320:	4b9b      	ldr	r3, [pc, #620]	; (8014590 <_dtoa_r+0x2e0>)
 8014322:	9c03      	ldr	r4, [sp, #12]
 8014324:	43a3      	bics	r3, r4
 8014326:	d11c      	bne.n	8014362 <_dtoa_r+0xb2>
 8014328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801432a:	f242 730f 	movw	r3, #9999	; 0x270f
 801432e:	6013      	str	r3, [r2, #0]
 8014330:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014334:	ea53 0308 	orrs.w	r3, r3, r8
 8014338:	f000 84fd 	beq.w	8014d36 <_dtoa_r+0xa86>
 801433c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801433e:	b963      	cbnz	r3, 801435a <_dtoa_r+0xaa>
 8014340:	4b94      	ldr	r3, [pc, #592]	; (8014594 <_dtoa_r+0x2e4>)
 8014342:	e01f      	b.n	8014384 <_dtoa_r+0xd4>
 8014344:	4b94      	ldr	r3, [pc, #592]	; (8014598 <_dtoa_r+0x2e8>)
 8014346:	9301      	str	r3, [sp, #4]
 8014348:	3308      	adds	r3, #8
 801434a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	9801      	ldr	r0, [sp, #4]
 8014350:	b011      	add	sp, #68	; 0x44
 8014352:	ecbd 8b02 	vpop	{d8}
 8014356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435a:	4b8e      	ldr	r3, [pc, #568]	; (8014594 <_dtoa_r+0x2e4>)
 801435c:	9301      	str	r3, [sp, #4]
 801435e:	3303      	adds	r3, #3
 8014360:	e7f3      	b.n	801434a <_dtoa_r+0x9a>
 8014362:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014366:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436e:	d10b      	bne.n	8014388 <_dtoa_r+0xd8>
 8014370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014372:	2301      	movs	r3, #1
 8014374:	6013      	str	r3, [r2, #0]
 8014376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014378:	2b00      	cmp	r3, #0
 801437a:	f000 84d9 	beq.w	8014d30 <_dtoa_r+0xa80>
 801437e:	4887      	ldr	r0, [pc, #540]	; (801459c <_dtoa_r+0x2ec>)
 8014380:	6018      	str	r0, [r3, #0]
 8014382:	1e43      	subs	r3, r0, #1
 8014384:	9301      	str	r3, [sp, #4]
 8014386:	e7e2      	b.n	801434e <_dtoa_r+0x9e>
 8014388:	a90f      	add	r1, sp, #60	; 0x3c
 801438a:	aa0e      	add	r2, sp, #56	; 0x38
 801438c:	4630      	mov	r0, r6
 801438e:	eeb0 0b48 	vmov.f64	d0, d8
 8014392:	f001 fa53 	bl	801583c <__d2b>
 8014396:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801439a:	4605      	mov	r5, r0
 801439c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801439e:	2900      	cmp	r1, #0
 80143a0:	d046      	beq.n	8014430 <_dtoa_r+0x180>
 80143a2:	ee18 4a90 	vmov	r4, s17
 80143a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80143aa:	ec53 2b18 	vmov	r2, r3, d8
 80143ae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80143b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80143b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80143ba:	2400      	movs	r4, #0
 80143bc:	ec43 2b16 	vmov	d6, r2, r3
 80143c0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80143c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8014570 <_dtoa_r+0x2c0>
 80143c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80143cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8014578 <_dtoa_r+0x2c8>
 80143d0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80143d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8014580 <_dtoa_r+0x2d0>
 80143d8:	ee07 1a90 	vmov	s15, r1
 80143dc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80143e0:	eeb0 7b46 	vmov.f64	d7, d6
 80143e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80143e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80143ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80143f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f4:	ee16 ba90 	vmov	fp, s13
 80143f8:	940a      	str	r4, [sp, #40]	; 0x28
 80143fa:	d508      	bpl.n	801440e <_dtoa_r+0x15e>
 80143fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014400:	eeb4 6b47 	vcmp.f64	d6, d7
 8014404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014408:	bf18      	it	ne
 801440a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801440e:	f1bb 0f16 	cmp.w	fp, #22
 8014412:	d82f      	bhi.n	8014474 <_dtoa_r+0x1c4>
 8014414:	4b62      	ldr	r3, [pc, #392]	; (80145a0 <_dtoa_r+0x2f0>)
 8014416:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801441a:	ed93 7b00 	vldr	d7, [r3]
 801441e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014426:	d501      	bpl.n	801442c <_dtoa_r+0x17c>
 8014428:	f10b 3bff 	add.w	fp, fp, #4294967295
 801442c:	2300      	movs	r3, #0
 801442e:	e022      	b.n	8014476 <_dtoa_r+0x1c6>
 8014430:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014432:	4401      	add	r1, r0
 8014434:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014438:	2b20      	cmp	r3, #32
 801443a:	bfc1      	itttt	gt
 801443c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014440:	fa04 f303 	lslgt.w	r3, r4, r3
 8014444:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014448:	fa28 f804 	lsrgt.w	r8, r8, r4
 801444c:	bfd6      	itet	le
 801444e:	f1c3 0320 	rsble	r3, r3, #32
 8014452:	ea43 0808 	orrgt.w	r8, r3, r8
 8014456:	fa08 f803 	lslle.w	r8, r8, r3
 801445a:	ee07 8a90 	vmov	s15, r8
 801445e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014462:	3901      	subs	r1, #1
 8014464:	ee17 4a90 	vmov	r4, s15
 8014468:	ec53 2b17 	vmov	r2, r3, d7
 801446c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014470:	2401      	movs	r4, #1
 8014472:	e7a3      	b.n	80143bc <_dtoa_r+0x10c>
 8014474:	2301      	movs	r3, #1
 8014476:	930b      	str	r3, [sp, #44]	; 0x2c
 8014478:	1a43      	subs	r3, r0, r1
 801447a:	1e5a      	subs	r2, r3, #1
 801447c:	bf45      	ittet	mi
 801447e:	f1c3 0301 	rsbmi	r3, r3, #1
 8014482:	9304      	strmi	r3, [sp, #16]
 8014484:	2300      	movpl	r3, #0
 8014486:	2300      	movmi	r3, #0
 8014488:	9205      	str	r2, [sp, #20]
 801448a:	bf54      	ite	pl
 801448c:	9304      	strpl	r3, [sp, #16]
 801448e:	9305      	strmi	r3, [sp, #20]
 8014490:	f1bb 0f00 	cmp.w	fp, #0
 8014494:	db18      	blt.n	80144c8 <_dtoa_r+0x218>
 8014496:	9b05      	ldr	r3, [sp, #20]
 8014498:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801449c:	445b      	add	r3, fp
 801449e:	9305      	str	r3, [sp, #20]
 80144a0:	2300      	movs	r3, #0
 80144a2:	9a06      	ldr	r2, [sp, #24]
 80144a4:	2a09      	cmp	r2, #9
 80144a6:	d849      	bhi.n	801453c <_dtoa_r+0x28c>
 80144a8:	2a05      	cmp	r2, #5
 80144aa:	bfc4      	itt	gt
 80144ac:	3a04      	subgt	r2, #4
 80144ae:	9206      	strgt	r2, [sp, #24]
 80144b0:	9a06      	ldr	r2, [sp, #24]
 80144b2:	f1a2 0202 	sub.w	r2, r2, #2
 80144b6:	bfcc      	ite	gt
 80144b8:	2400      	movgt	r4, #0
 80144ba:	2401      	movle	r4, #1
 80144bc:	2a03      	cmp	r2, #3
 80144be:	d848      	bhi.n	8014552 <_dtoa_r+0x2a2>
 80144c0:	e8df f002 	tbb	[pc, r2]
 80144c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80144c8:	9b04      	ldr	r3, [sp, #16]
 80144ca:	2200      	movs	r2, #0
 80144cc:	eba3 030b 	sub.w	r3, r3, fp
 80144d0:	9304      	str	r3, [sp, #16]
 80144d2:	9209      	str	r2, [sp, #36]	; 0x24
 80144d4:	f1cb 0300 	rsb	r3, fp, #0
 80144d8:	e7e3      	b.n	80144a2 <_dtoa_r+0x1f2>
 80144da:	2200      	movs	r2, #0
 80144dc:	9207      	str	r2, [sp, #28]
 80144de:	9a08      	ldr	r2, [sp, #32]
 80144e0:	2a00      	cmp	r2, #0
 80144e2:	dc39      	bgt.n	8014558 <_dtoa_r+0x2a8>
 80144e4:	f04f 0a01 	mov.w	sl, #1
 80144e8:	46d1      	mov	r9, sl
 80144ea:	4652      	mov	r2, sl
 80144ec:	f8cd a020 	str.w	sl, [sp, #32]
 80144f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80144f2:	2100      	movs	r1, #0
 80144f4:	6079      	str	r1, [r7, #4]
 80144f6:	2004      	movs	r0, #4
 80144f8:	f100 0c14 	add.w	ip, r0, #20
 80144fc:	4594      	cmp	ip, r2
 80144fe:	6879      	ldr	r1, [r7, #4]
 8014500:	d92f      	bls.n	8014562 <_dtoa_r+0x2b2>
 8014502:	4630      	mov	r0, r6
 8014504:	930d      	str	r3, [sp, #52]	; 0x34
 8014506:	f000 fe71 	bl	80151ec <_Balloc>
 801450a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801450c:	9001      	str	r0, [sp, #4]
 801450e:	4602      	mov	r2, r0
 8014510:	2800      	cmp	r0, #0
 8014512:	d149      	bne.n	80145a8 <_dtoa_r+0x2f8>
 8014514:	4b23      	ldr	r3, [pc, #140]	; (80145a4 <_dtoa_r+0x2f4>)
 8014516:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801451a:	e6e1      	b.n	80142e0 <_dtoa_r+0x30>
 801451c:	2201      	movs	r2, #1
 801451e:	e7dd      	b.n	80144dc <_dtoa_r+0x22c>
 8014520:	2200      	movs	r2, #0
 8014522:	9207      	str	r2, [sp, #28]
 8014524:	9a08      	ldr	r2, [sp, #32]
 8014526:	eb0b 0a02 	add.w	sl, fp, r2
 801452a:	f10a 0901 	add.w	r9, sl, #1
 801452e:	464a      	mov	r2, r9
 8014530:	2a01      	cmp	r2, #1
 8014532:	bfb8      	it	lt
 8014534:	2201      	movlt	r2, #1
 8014536:	e7db      	b.n	80144f0 <_dtoa_r+0x240>
 8014538:	2201      	movs	r2, #1
 801453a:	e7f2      	b.n	8014522 <_dtoa_r+0x272>
 801453c:	2401      	movs	r4, #1
 801453e:	2200      	movs	r2, #0
 8014540:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8014544:	f04f 3aff 	mov.w	sl, #4294967295
 8014548:	2100      	movs	r1, #0
 801454a:	46d1      	mov	r9, sl
 801454c:	2212      	movs	r2, #18
 801454e:	9108      	str	r1, [sp, #32]
 8014550:	e7ce      	b.n	80144f0 <_dtoa_r+0x240>
 8014552:	2201      	movs	r2, #1
 8014554:	9207      	str	r2, [sp, #28]
 8014556:	e7f5      	b.n	8014544 <_dtoa_r+0x294>
 8014558:	f8dd a020 	ldr.w	sl, [sp, #32]
 801455c:	46d1      	mov	r9, sl
 801455e:	4652      	mov	r2, sl
 8014560:	e7c6      	b.n	80144f0 <_dtoa_r+0x240>
 8014562:	3101      	adds	r1, #1
 8014564:	6079      	str	r1, [r7, #4]
 8014566:	0040      	lsls	r0, r0, #1
 8014568:	e7c6      	b.n	80144f8 <_dtoa_r+0x248>
 801456a:	bf00      	nop
 801456c:	f3af 8000 	nop.w
 8014570:	636f4361 	.word	0x636f4361
 8014574:	3fd287a7 	.word	0x3fd287a7
 8014578:	8b60c8b3 	.word	0x8b60c8b3
 801457c:	3fc68a28 	.word	0x3fc68a28
 8014580:	509f79fb 	.word	0x509f79fb
 8014584:	3fd34413 	.word	0x3fd34413
 8014588:	08017b25 	.word	0x08017b25
 801458c:	08017b3c 	.word	0x08017b3c
 8014590:	7ff00000 	.word	0x7ff00000
 8014594:	08017b21 	.word	0x08017b21
 8014598:	08017b18 	.word	0x08017b18
 801459c:	08017af5 	.word	0x08017af5
 80145a0:	08017c90 	.word	0x08017c90
 80145a4:	08017b97 	.word	0x08017b97
 80145a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80145aa:	9901      	ldr	r1, [sp, #4]
 80145ac:	6011      	str	r1, [r2, #0]
 80145ae:	f1b9 0f0e 	cmp.w	r9, #14
 80145b2:	d86c      	bhi.n	801468e <_dtoa_r+0x3de>
 80145b4:	2c00      	cmp	r4, #0
 80145b6:	d06a      	beq.n	801468e <_dtoa_r+0x3de>
 80145b8:	f1bb 0f00 	cmp.w	fp, #0
 80145bc:	f340 80a0 	ble.w	8014700 <_dtoa_r+0x450>
 80145c0:	49c1      	ldr	r1, [pc, #772]	; (80148c8 <_dtoa_r+0x618>)
 80145c2:	f00b 020f 	and.w	r2, fp, #15
 80145c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80145ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80145ce:	ed92 7b00 	vldr	d7, [r2]
 80145d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80145d6:	f000 8087 	beq.w	80146e8 <_dtoa_r+0x438>
 80145da:	4abc      	ldr	r2, [pc, #752]	; (80148cc <_dtoa_r+0x61c>)
 80145dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80145e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80145e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80145e8:	f001 010f 	and.w	r1, r1, #15
 80145ec:	2203      	movs	r2, #3
 80145ee:	48b7      	ldr	r0, [pc, #732]	; (80148cc <_dtoa_r+0x61c>)
 80145f0:	2900      	cmp	r1, #0
 80145f2:	d17b      	bne.n	80146ec <_dtoa_r+0x43c>
 80145f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80145f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80145fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014602:	2900      	cmp	r1, #0
 8014604:	f000 80a2 	beq.w	801474c <_dtoa_r+0x49c>
 8014608:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801460c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014610:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014618:	f140 8098 	bpl.w	801474c <_dtoa_r+0x49c>
 801461c:	f1b9 0f00 	cmp.w	r9, #0
 8014620:	f000 8094 	beq.w	801474c <_dtoa_r+0x49c>
 8014624:	f1ba 0f00 	cmp.w	sl, #0
 8014628:	dd2f      	ble.n	801468a <_dtoa_r+0x3da>
 801462a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801462e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014632:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014636:	f10b 37ff 	add.w	r7, fp, #4294967295
 801463a:	3201      	adds	r2, #1
 801463c:	4650      	mov	r0, sl
 801463e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014642:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014646:	ee07 2a90 	vmov	s15, r2
 801464a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801464e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014652:	ee15 4a90 	vmov	r4, s11
 8014656:	ec52 1b15 	vmov	r1, r2, d5
 801465a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801465e:	2800      	cmp	r0, #0
 8014660:	d177      	bne.n	8014752 <_dtoa_r+0x4a2>
 8014662:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014666:	ee36 6b47 	vsub.f64	d6, d6, d7
 801466a:	ec42 1b17 	vmov	d7, r1, r2
 801466e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014676:	f300 8263 	bgt.w	8014b40 <_dtoa_r+0x890>
 801467a:	eeb1 7b47 	vneg.f64	d7, d7
 801467e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014686:	f100 8258 	bmi.w	8014b3a <_dtoa_r+0x88a>
 801468a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801468e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014690:	2a00      	cmp	r2, #0
 8014692:	f2c0 811d 	blt.w	80148d0 <_dtoa_r+0x620>
 8014696:	f1bb 0f0e 	cmp.w	fp, #14
 801469a:	f300 8119 	bgt.w	80148d0 <_dtoa_r+0x620>
 801469e:	4b8a      	ldr	r3, [pc, #552]	; (80148c8 <_dtoa_r+0x618>)
 80146a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80146a4:	ed93 6b00 	vldr	d6, [r3]
 80146a8:	9b08      	ldr	r3, [sp, #32]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f280 80b7 	bge.w	801481e <_dtoa_r+0x56e>
 80146b0:	f1b9 0f00 	cmp.w	r9, #0
 80146b4:	f300 80b3 	bgt.w	801481e <_dtoa_r+0x56e>
 80146b8:	f040 823f 	bne.w	8014b3a <_dtoa_r+0x88a>
 80146bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80146c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80146c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80146c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80146cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d0:	464c      	mov	r4, r9
 80146d2:	464f      	mov	r7, r9
 80146d4:	f280 8215 	bge.w	8014b02 <_dtoa_r+0x852>
 80146d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80146dc:	2331      	movs	r3, #49	; 0x31
 80146de:	f808 3b01 	strb.w	r3, [r8], #1
 80146e2:	f10b 0b01 	add.w	fp, fp, #1
 80146e6:	e211      	b.n	8014b0c <_dtoa_r+0x85c>
 80146e8:	2202      	movs	r2, #2
 80146ea:	e780      	b.n	80145ee <_dtoa_r+0x33e>
 80146ec:	07cc      	lsls	r4, r1, #31
 80146ee:	d504      	bpl.n	80146fa <_dtoa_r+0x44a>
 80146f0:	ed90 6b00 	vldr	d6, [r0]
 80146f4:	3201      	adds	r2, #1
 80146f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80146fa:	1049      	asrs	r1, r1, #1
 80146fc:	3008      	adds	r0, #8
 80146fe:	e777      	b.n	80145f0 <_dtoa_r+0x340>
 8014700:	d022      	beq.n	8014748 <_dtoa_r+0x498>
 8014702:	f1cb 0100 	rsb	r1, fp, #0
 8014706:	4a70      	ldr	r2, [pc, #448]	; (80148c8 <_dtoa_r+0x618>)
 8014708:	f001 000f 	and.w	r0, r1, #15
 801470c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014710:	ed92 7b00 	vldr	d7, [r2]
 8014714:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014718:	ed8d 7b02 	vstr	d7, [sp, #8]
 801471c:	486b      	ldr	r0, [pc, #428]	; (80148cc <_dtoa_r+0x61c>)
 801471e:	1109      	asrs	r1, r1, #4
 8014720:	2400      	movs	r4, #0
 8014722:	2202      	movs	r2, #2
 8014724:	b929      	cbnz	r1, 8014732 <_dtoa_r+0x482>
 8014726:	2c00      	cmp	r4, #0
 8014728:	f43f af6a 	beq.w	8014600 <_dtoa_r+0x350>
 801472c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014730:	e766      	b.n	8014600 <_dtoa_r+0x350>
 8014732:	07cf      	lsls	r7, r1, #31
 8014734:	d505      	bpl.n	8014742 <_dtoa_r+0x492>
 8014736:	ed90 6b00 	vldr	d6, [r0]
 801473a:	3201      	adds	r2, #1
 801473c:	2401      	movs	r4, #1
 801473e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014742:	1049      	asrs	r1, r1, #1
 8014744:	3008      	adds	r0, #8
 8014746:	e7ed      	b.n	8014724 <_dtoa_r+0x474>
 8014748:	2202      	movs	r2, #2
 801474a:	e759      	b.n	8014600 <_dtoa_r+0x350>
 801474c:	465f      	mov	r7, fp
 801474e:	4648      	mov	r0, r9
 8014750:	e775      	b.n	801463e <_dtoa_r+0x38e>
 8014752:	ec42 1b17 	vmov	d7, r1, r2
 8014756:	4a5c      	ldr	r2, [pc, #368]	; (80148c8 <_dtoa_r+0x618>)
 8014758:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801475c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014760:	9a01      	ldr	r2, [sp, #4]
 8014762:	1814      	adds	r4, r2, r0
 8014764:	9a07      	ldr	r2, [sp, #28]
 8014766:	b352      	cbz	r2, 80147be <_dtoa_r+0x50e>
 8014768:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801476c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014770:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014774:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014778:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801477c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014780:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014784:	ee14 2a90 	vmov	r2, s9
 8014788:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801478c:	3230      	adds	r2, #48	; 0x30
 801478e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014792:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479a:	f808 2b01 	strb.w	r2, [r8], #1
 801479e:	d439      	bmi.n	8014814 <_dtoa_r+0x564>
 80147a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80147a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80147a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ac:	d472      	bmi.n	8014894 <_dtoa_r+0x5e4>
 80147ae:	45a0      	cmp	r8, r4
 80147b0:	f43f af6b 	beq.w	801468a <_dtoa_r+0x3da>
 80147b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80147b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80147bc:	e7e0      	b.n	8014780 <_dtoa_r+0x4d0>
 80147be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80147c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80147c6:	4621      	mov	r1, r4
 80147c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80147cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80147d0:	ee14 2a90 	vmov	r2, s9
 80147d4:	3230      	adds	r2, #48	; 0x30
 80147d6:	f808 2b01 	strb.w	r2, [r8], #1
 80147da:	45a0      	cmp	r8, r4
 80147dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80147e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80147e4:	d118      	bne.n	8014818 <_dtoa_r+0x568>
 80147e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80147ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80147ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80147f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f6:	dc4d      	bgt.n	8014894 <_dtoa_r+0x5e4>
 80147f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80147fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014804:	f57f af41 	bpl.w	801468a <_dtoa_r+0x3da>
 8014808:	4688      	mov	r8, r1
 801480a:	3901      	subs	r1, #1
 801480c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014810:	2b30      	cmp	r3, #48	; 0x30
 8014812:	d0f9      	beq.n	8014808 <_dtoa_r+0x558>
 8014814:	46bb      	mov	fp, r7
 8014816:	e02a      	b.n	801486e <_dtoa_r+0x5be>
 8014818:	ee26 6b03 	vmul.f64	d6, d6, d3
 801481c:	e7d6      	b.n	80147cc <_dtoa_r+0x51c>
 801481e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014822:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014826:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801482a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801482e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014832:	ee15 3a10 	vmov	r3, s10
 8014836:	3330      	adds	r3, #48	; 0x30
 8014838:	f808 3b01 	strb.w	r3, [r8], #1
 801483c:	9b01      	ldr	r3, [sp, #4]
 801483e:	eba8 0303 	sub.w	r3, r8, r3
 8014842:	4599      	cmp	r9, r3
 8014844:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014848:	eea3 7b46 	vfms.f64	d7, d3, d6
 801484c:	d133      	bne.n	80148b6 <_dtoa_r+0x606>
 801484e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014852:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485a:	dc1a      	bgt.n	8014892 <_dtoa_r+0x5e2>
 801485c:	eeb4 7b46 	vcmp.f64	d7, d6
 8014860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014864:	d103      	bne.n	801486e <_dtoa_r+0x5be>
 8014866:	ee15 3a10 	vmov	r3, s10
 801486a:	07d9      	lsls	r1, r3, #31
 801486c:	d411      	bmi.n	8014892 <_dtoa_r+0x5e2>
 801486e:	4629      	mov	r1, r5
 8014870:	4630      	mov	r0, r6
 8014872:	f000 fcfb 	bl	801526c <_Bfree>
 8014876:	2300      	movs	r3, #0
 8014878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801487a:	f888 3000 	strb.w	r3, [r8]
 801487e:	f10b 0301 	add.w	r3, fp, #1
 8014882:	6013      	str	r3, [r2, #0]
 8014884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014886:	2b00      	cmp	r3, #0
 8014888:	f43f ad61 	beq.w	801434e <_dtoa_r+0x9e>
 801488c:	f8c3 8000 	str.w	r8, [r3]
 8014890:	e55d      	b.n	801434e <_dtoa_r+0x9e>
 8014892:	465f      	mov	r7, fp
 8014894:	4643      	mov	r3, r8
 8014896:	4698      	mov	r8, r3
 8014898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801489c:	2a39      	cmp	r2, #57	; 0x39
 801489e:	d106      	bne.n	80148ae <_dtoa_r+0x5fe>
 80148a0:	9a01      	ldr	r2, [sp, #4]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d1f7      	bne.n	8014896 <_dtoa_r+0x5e6>
 80148a6:	9901      	ldr	r1, [sp, #4]
 80148a8:	2230      	movs	r2, #48	; 0x30
 80148aa:	3701      	adds	r7, #1
 80148ac:	700a      	strb	r2, [r1, #0]
 80148ae:	781a      	ldrb	r2, [r3, #0]
 80148b0:	3201      	adds	r2, #1
 80148b2:	701a      	strb	r2, [r3, #0]
 80148b4:	e7ae      	b.n	8014814 <_dtoa_r+0x564>
 80148b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80148ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80148be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c2:	d1b2      	bne.n	801482a <_dtoa_r+0x57a>
 80148c4:	e7d3      	b.n	801486e <_dtoa_r+0x5be>
 80148c6:	bf00      	nop
 80148c8:	08017c90 	.word	0x08017c90
 80148cc:	08017c68 	.word	0x08017c68
 80148d0:	9907      	ldr	r1, [sp, #28]
 80148d2:	2900      	cmp	r1, #0
 80148d4:	f000 80d0 	beq.w	8014a78 <_dtoa_r+0x7c8>
 80148d8:	9906      	ldr	r1, [sp, #24]
 80148da:	2901      	cmp	r1, #1
 80148dc:	f300 80b4 	bgt.w	8014a48 <_dtoa_r+0x798>
 80148e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80148e2:	2900      	cmp	r1, #0
 80148e4:	f000 80ac 	beq.w	8014a40 <_dtoa_r+0x790>
 80148e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80148ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80148f0:	461c      	mov	r4, r3
 80148f2:	930a      	str	r3, [sp, #40]	; 0x28
 80148f4:	9b04      	ldr	r3, [sp, #16]
 80148f6:	4413      	add	r3, r2
 80148f8:	9304      	str	r3, [sp, #16]
 80148fa:	9b05      	ldr	r3, [sp, #20]
 80148fc:	2101      	movs	r1, #1
 80148fe:	4413      	add	r3, r2
 8014900:	4630      	mov	r0, r6
 8014902:	9305      	str	r3, [sp, #20]
 8014904:	f000 fd6a 	bl	80153dc <__i2b>
 8014908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801490a:	4607      	mov	r7, r0
 801490c:	f1b8 0f00 	cmp.w	r8, #0
 8014910:	dd0d      	ble.n	801492e <_dtoa_r+0x67e>
 8014912:	9a05      	ldr	r2, [sp, #20]
 8014914:	2a00      	cmp	r2, #0
 8014916:	dd0a      	ble.n	801492e <_dtoa_r+0x67e>
 8014918:	4542      	cmp	r2, r8
 801491a:	9904      	ldr	r1, [sp, #16]
 801491c:	bfa8      	it	ge
 801491e:	4642      	movge	r2, r8
 8014920:	1a89      	subs	r1, r1, r2
 8014922:	9104      	str	r1, [sp, #16]
 8014924:	9905      	ldr	r1, [sp, #20]
 8014926:	eba8 0802 	sub.w	r8, r8, r2
 801492a:	1a8a      	subs	r2, r1, r2
 801492c:	9205      	str	r2, [sp, #20]
 801492e:	b303      	cbz	r3, 8014972 <_dtoa_r+0x6c2>
 8014930:	9a07      	ldr	r2, [sp, #28]
 8014932:	2a00      	cmp	r2, #0
 8014934:	f000 80a5 	beq.w	8014a82 <_dtoa_r+0x7d2>
 8014938:	2c00      	cmp	r4, #0
 801493a:	dd13      	ble.n	8014964 <_dtoa_r+0x6b4>
 801493c:	4639      	mov	r1, r7
 801493e:	4622      	mov	r2, r4
 8014940:	4630      	mov	r0, r6
 8014942:	930d      	str	r3, [sp, #52]	; 0x34
 8014944:	f000 fe0a 	bl	801555c <__pow5mult>
 8014948:	462a      	mov	r2, r5
 801494a:	4601      	mov	r1, r0
 801494c:	4607      	mov	r7, r0
 801494e:	4630      	mov	r0, r6
 8014950:	f000 fd5a 	bl	8015408 <__multiply>
 8014954:	4629      	mov	r1, r5
 8014956:	900a      	str	r0, [sp, #40]	; 0x28
 8014958:	4630      	mov	r0, r6
 801495a:	f000 fc87 	bl	801526c <_Bfree>
 801495e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014962:	4615      	mov	r5, r2
 8014964:	1b1a      	subs	r2, r3, r4
 8014966:	d004      	beq.n	8014972 <_dtoa_r+0x6c2>
 8014968:	4629      	mov	r1, r5
 801496a:	4630      	mov	r0, r6
 801496c:	f000 fdf6 	bl	801555c <__pow5mult>
 8014970:	4605      	mov	r5, r0
 8014972:	2101      	movs	r1, #1
 8014974:	4630      	mov	r0, r6
 8014976:	f000 fd31 	bl	80153dc <__i2b>
 801497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497c:	2b00      	cmp	r3, #0
 801497e:	4604      	mov	r4, r0
 8014980:	f340 8081 	ble.w	8014a86 <_dtoa_r+0x7d6>
 8014984:	461a      	mov	r2, r3
 8014986:	4601      	mov	r1, r0
 8014988:	4630      	mov	r0, r6
 801498a:	f000 fde7 	bl	801555c <__pow5mult>
 801498e:	9b06      	ldr	r3, [sp, #24]
 8014990:	2b01      	cmp	r3, #1
 8014992:	4604      	mov	r4, r0
 8014994:	dd7a      	ble.n	8014a8c <_dtoa_r+0x7dc>
 8014996:	2300      	movs	r3, #0
 8014998:	930a      	str	r3, [sp, #40]	; 0x28
 801499a:	6922      	ldr	r2, [r4, #16]
 801499c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80149a0:	6910      	ldr	r0, [r2, #16]
 80149a2:	f000 fccb 	bl	801533c <__hi0bits>
 80149a6:	f1c0 0020 	rsb	r0, r0, #32
 80149aa:	9b05      	ldr	r3, [sp, #20]
 80149ac:	4418      	add	r0, r3
 80149ae:	f010 001f 	ands.w	r0, r0, #31
 80149b2:	f000 808c 	beq.w	8014ace <_dtoa_r+0x81e>
 80149b6:	f1c0 0220 	rsb	r2, r0, #32
 80149ba:	2a04      	cmp	r2, #4
 80149bc:	f340 8085 	ble.w	8014aca <_dtoa_r+0x81a>
 80149c0:	f1c0 001c 	rsb	r0, r0, #28
 80149c4:	9b04      	ldr	r3, [sp, #16]
 80149c6:	4403      	add	r3, r0
 80149c8:	9304      	str	r3, [sp, #16]
 80149ca:	9b05      	ldr	r3, [sp, #20]
 80149cc:	4403      	add	r3, r0
 80149ce:	4480      	add	r8, r0
 80149d0:	9305      	str	r3, [sp, #20]
 80149d2:	9b04      	ldr	r3, [sp, #16]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	dd05      	ble.n	80149e4 <_dtoa_r+0x734>
 80149d8:	4629      	mov	r1, r5
 80149da:	461a      	mov	r2, r3
 80149dc:	4630      	mov	r0, r6
 80149de:	f000 fe17 	bl	8015610 <__lshift>
 80149e2:	4605      	mov	r5, r0
 80149e4:	9b05      	ldr	r3, [sp, #20]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	dd05      	ble.n	80149f6 <_dtoa_r+0x746>
 80149ea:	4621      	mov	r1, r4
 80149ec:	461a      	mov	r2, r3
 80149ee:	4630      	mov	r0, r6
 80149f0:	f000 fe0e 	bl	8015610 <__lshift>
 80149f4:	4604      	mov	r4, r0
 80149f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d06a      	beq.n	8014ad2 <_dtoa_r+0x822>
 80149fc:	4621      	mov	r1, r4
 80149fe:	4628      	mov	r0, r5
 8014a00:	f000 fe76 	bl	80156f0 <__mcmp>
 8014a04:	2800      	cmp	r0, #0
 8014a06:	da64      	bge.n	8014ad2 <_dtoa_r+0x822>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	4629      	mov	r1, r5
 8014a0c:	220a      	movs	r2, #10
 8014a0e:	4630      	mov	r0, r6
 8014a10:	f000 fc4e 	bl	80152b0 <__multadd>
 8014a14:	9b07      	ldr	r3, [sp, #28]
 8014a16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f000 8191 	beq.w	8014d44 <_dtoa_r+0xa94>
 8014a22:	4639      	mov	r1, r7
 8014a24:	2300      	movs	r3, #0
 8014a26:	220a      	movs	r2, #10
 8014a28:	4630      	mov	r0, r6
 8014a2a:	f000 fc41 	bl	80152b0 <__multadd>
 8014a2e:	f1ba 0f00 	cmp.w	sl, #0
 8014a32:	4607      	mov	r7, r0
 8014a34:	f300 808d 	bgt.w	8014b52 <_dtoa_r+0x8a2>
 8014a38:	9b06      	ldr	r3, [sp, #24]
 8014a3a:	2b02      	cmp	r3, #2
 8014a3c:	dc50      	bgt.n	8014ae0 <_dtoa_r+0x830>
 8014a3e:	e088      	b.n	8014b52 <_dtoa_r+0x8a2>
 8014a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a46:	e751      	b.n	80148ec <_dtoa_r+0x63c>
 8014a48:	f109 34ff 	add.w	r4, r9, #4294967295
 8014a4c:	42a3      	cmp	r3, r4
 8014a4e:	bfbf      	itttt	lt
 8014a50:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8014a52:	1ae3      	sublt	r3, r4, r3
 8014a54:	18d2      	addlt	r2, r2, r3
 8014a56:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014a58:	bfb6      	itet	lt
 8014a5a:	4623      	movlt	r3, r4
 8014a5c:	1b1c      	subge	r4, r3, r4
 8014a5e:	2400      	movlt	r4, #0
 8014a60:	f1b9 0f00 	cmp.w	r9, #0
 8014a64:	bfb5      	itete	lt
 8014a66:	9a04      	ldrlt	r2, [sp, #16]
 8014a68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014a6c:	eba2 0809 	sublt.w	r8, r2, r9
 8014a70:	464a      	movge	r2, r9
 8014a72:	bfb8      	it	lt
 8014a74:	2200      	movlt	r2, #0
 8014a76:	e73c      	b.n	80148f2 <_dtoa_r+0x642>
 8014a78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014a7c:	9f07      	ldr	r7, [sp, #28]
 8014a7e:	461c      	mov	r4, r3
 8014a80:	e744      	b.n	801490c <_dtoa_r+0x65c>
 8014a82:	461a      	mov	r2, r3
 8014a84:	e770      	b.n	8014968 <_dtoa_r+0x6b8>
 8014a86:	9b06      	ldr	r3, [sp, #24]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	dc18      	bgt.n	8014abe <_dtoa_r+0x80e>
 8014a8c:	9b02      	ldr	r3, [sp, #8]
 8014a8e:	b9b3      	cbnz	r3, 8014abe <_dtoa_r+0x80e>
 8014a90:	9b03      	ldr	r3, [sp, #12]
 8014a92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014a96:	b9a2      	cbnz	r2, 8014ac2 <_dtoa_r+0x812>
 8014a98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014a9c:	0d12      	lsrs	r2, r2, #20
 8014a9e:	0512      	lsls	r2, r2, #20
 8014aa0:	b18a      	cbz	r2, 8014ac6 <_dtoa_r+0x816>
 8014aa2:	9b04      	ldr	r3, [sp, #16]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	9304      	str	r3, [sp, #16]
 8014aa8:	9b05      	ldr	r3, [sp, #20]
 8014aaa:	3301      	adds	r3, #1
 8014aac:	9305      	str	r3, [sp, #20]
 8014aae:	2301      	movs	r3, #1
 8014ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8014ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	f47f af70 	bne.w	801499a <_dtoa_r+0x6ea>
 8014aba:	2001      	movs	r0, #1
 8014abc:	e775      	b.n	80149aa <_dtoa_r+0x6fa>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	e7f6      	b.n	8014ab0 <_dtoa_r+0x800>
 8014ac2:	9b02      	ldr	r3, [sp, #8]
 8014ac4:	e7f4      	b.n	8014ab0 <_dtoa_r+0x800>
 8014ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8014ac8:	e7f3      	b.n	8014ab2 <_dtoa_r+0x802>
 8014aca:	d082      	beq.n	80149d2 <_dtoa_r+0x722>
 8014acc:	4610      	mov	r0, r2
 8014ace:	301c      	adds	r0, #28
 8014ad0:	e778      	b.n	80149c4 <_dtoa_r+0x714>
 8014ad2:	f1b9 0f00 	cmp.w	r9, #0
 8014ad6:	dc37      	bgt.n	8014b48 <_dtoa_r+0x898>
 8014ad8:	9b06      	ldr	r3, [sp, #24]
 8014ada:	2b02      	cmp	r3, #2
 8014adc:	dd34      	ble.n	8014b48 <_dtoa_r+0x898>
 8014ade:	46ca      	mov	sl, r9
 8014ae0:	f1ba 0f00 	cmp.w	sl, #0
 8014ae4:	d10d      	bne.n	8014b02 <_dtoa_r+0x852>
 8014ae6:	4621      	mov	r1, r4
 8014ae8:	4653      	mov	r3, sl
 8014aea:	2205      	movs	r2, #5
 8014aec:	4630      	mov	r0, r6
 8014aee:	f000 fbdf 	bl	80152b0 <__multadd>
 8014af2:	4601      	mov	r1, r0
 8014af4:	4604      	mov	r4, r0
 8014af6:	4628      	mov	r0, r5
 8014af8:	f000 fdfa 	bl	80156f0 <__mcmp>
 8014afc:	2800      	cmp	r0, #0
 8014afe:	f73f adeb 	bgt.w	80146d8 <_dtoa_r+0x428>
 8014b02:	9b08      	ldr	r3, [sp, #32]
 8014b04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b08:	ea6f 0b03 	mvn.w	fp, r3
 8014b0c:	f04f 0900 	mov.w	r9, #0
 8014b10:	4621      	mov	r1, r4
 8014b12:	4630      	mov	r0, r6
 8014b14:	f000 fbaa 	bl	801526c <_Bfree>
 8014b18:	2f00      	cmp	r7, #0
 8014b1a:	f43f aea8 	beq.w	801486e <_dtoa_r+0x5be>
 8014b1e:	f1b9 0f00 	cmp.w	r9, #0
 8014b22:	d005      	beq.n	8014b30 <_dtoa_r+0x880>
 8014b24:	45b9      	cmp	r9, r7
 8014b26:	d003      	beq.n	8014b30 <_dtoa_r+0x880>
 8014b28:	4649      	mov	r1, r9
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	f000 fb9e 	bl	801526c <_Bfree>
 8014b30:	4639      	mov	r1, r7
 8014b32:	4630      	mov	r0, r6
 8014b34:	f000 fb9a 	bl	801526c <_Bfree>
 8014b38:	e699      	b.n	801486e <_dtoa_r+0x5be>
 8014b3a:	2400      	movs	r4, #0
 8014b3c:	4627      	mov	r7, r4
 8014b3e:	e7e0      	b.n	8014b02 <_dtoa_r+0x852>
 8014b40:	46bb      	mov	fp, r7
 8014b42:	4604      	mov	r4, r0
 8014b44:	4607      	mov	r7, r0
 8014b46:	e5c7      	b.n	80146d8 <_dtoa_r+0x428>
 8014b48:	9b07      	ldr	r3, [sp, #28]
 8014b4a:	46ca      	mov	sl, r9
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f000 8100 	beq.w	8014d52 <_dtoa_r+0xaa2>
 8014b52:	f1b8 0f00 	cmp.w	r8, #0
 8014b56:	dd05      	ble.n	8014b64 <_dtoa_r+0x8b4>
 8014b58:	4639      	mov	r1, r7
 8014b5a:	4642      	mov	r2, r8
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	f000 fd57 	bl	8015610 <__lshift>
 8014b62:	4607      	mov	r7, r0
 8014b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d05d      	beq.n	8014c26 <_dtoa_r+0x976>
 8014b6a:	6879      	ldr	r1, [r7, #4]
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f000 fb3d 	bl	80151ec <_Balloc>
 8014b72:	4680      	mov	r8, r0
 8014b74:	b928      	cbnz	r0, 8014b82 <_dtoa_r+0x8d2>
 8014b76:	4b82      	ldr	r3, [pc, #520]	; (8014d80 <_dtoa_r+0xad0>)
 8014b78:	4602      	mov	r2, r0
 8014b7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014b7e:	f7ff bbaf 	b.w	80142e0 <_dtoa_r+0x30>
 8014b82:	693a      	ldr	r2, [r7, #16]
 8014b84:	3202      	adds	r2, #2
 8014b86:	0092      	lsls	r2, r2, #2
 8014b88:	f107 010c 	add.w	r1, r7, #12
 8014b8c:	300c      	adds	r0, #12
 8014b8e:	f7fe fc33 	bl	80133f8 <memcpy>
 8014b92:	2201      	movs	r2, #1
 8014b94:	4641      	mov	r1, r8
 8014b96:	4630      	mov	r0, r6
 8014b98:	f000 fd3a 	bl	8015610 <__lshift>
 8014b9c:	9b01      	ldr	r3, [sp, #4]
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	9304      	str	r3, [sp, #16]
 8014ba2:	9b01      	ldr	r3, [sp, #4]
 8014ba4:	4453      	add	r3, sl
 8014ba6:	9308      	str	r3, [sp, #32]
 8014ba8:	9b02      	ldr	r3, [sp, #8]
 8014baa:	f003 0301 	and.w	r3, r3, #1
 8014bae:	46b9      	mov	r9, r7
 8014bb0:	9307      	str	r3, [sp, #28]
 8014bb2:	4607      	mov	r7, r0
 8014bb4:	9b04      	ldr	r3, [sp, #16]
 8014bb6:	4621      	mov	r1, r4
 8014bb8:	3b01      	subs	r3, #1
 8014bba:	4628      	mov	r0, r5
 8014bbc:	9302      	str	r3, [sp, #8]
 8014bbe:	f7ff faeb 	bl	8014198 <quorem>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	3330      	adds	r3, #48	; 0x30
 8014bc6:	9005      	str	r0, [sp, #20]
 8014bc8:	4649      	mov	r1, r9
 8014bca:	4628      	mov	r0, r5
 8014bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8014bce:	f000 fd8f 	bl	80156f0 <__mcmp>
 8014bd2:	463a      	mov	r2, r7
 8014bd4:	4682      	mov	sl, r0
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	4630      	mov	r0, r6
 8014bda:	f000 fda5 	bl	8015728 <__mdiff>
 8014bde:	68c2      	ldr	r2, [r0, #12]
 8014be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014be2:	4680      	mov	r8, r0
 8014be4:	bb0a      	cbnz	r2, 8014c2a <_dtoa_r+0x97a>
 8014be6:	4601      	mov	r1, r0
 8014be8:	4628      	mov	r0, r5
 8014bea:	f000 fd81 	bl	80156f0 <__mcmp>
 8014bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	4641      	mov	r1, r8
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8014bfa:	f000 fb37 	bl	801526c <_Bfree>
 8014bfe:	9b06      	ldr	r3, [sp, #24]
 8014c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c02:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014c06:	ea43 0102 	orr.w	r1, r3, r2
 8014c0a:	9b07      	ldr	r3, [sp, #28]
 8014c0c:	430b      	orrs	r3, r1
 8014c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c10:	d10d      	bne.n	8014c2e <_dtoa_r+0x97e>
 8014c12:	2b39      	cmp	r3, #57	; 0x39
 8014c14:	d029      	beq.n	8014c6a <_dtoa_r+0x9ba>
 8014c16:	f1ba 0f00 	cmp.w	sl, #0
 8014c1a:	dd01      	ble.n	8014c20 <_dtoa_r+0x970>
 8014c1c:	9b05      	ldr	r3, [sp, #20]
 8014c1e:	3331      	adds	r3, #49	; 0x31
 8014c20:	9a02      	ldr	r2, [sp, #8]
 8014c22:	7013      	strb	r3, [r2, #0]
 8014c24:	e774      	b.n	8014b10 <_dtoa_r+0x860>
 8014c26:	4638      	mov	r0, r7
 8014c28:	e7b8      	b.n	8014b9c <_dtoa_r+0x8ec>
 8014c2a:	2201      	movs	r2, #1
 8014c2c:	e7e1      	b.n	8014bf2 <_dtoa_r+0x942>
 8014c2e:	f1ba 0f00 	cmp.w	sl, #0
 8014c32:	db06      	blt.n	8014c42 <_dtoa_r+0x992>
 8014c34:	9906      	ldr	r1, [sp, #24]
 8014c36:	ea41 0a0a 	orr.w	sl, r1, sl
 8014c3a:	9907      	ldr	r1, [sp, #28]
 8014c3c:	ea5a 0101 	orrs.w	r1, sl, r1
 8014c40:	d120      	bne.n	8014c84 <_dtoa_r+0x9d4>
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	ddec      	ble.n	8014c20 <_dtoa_r+0x970>
 8014c46:	4629      	mov	r1, r5
 8014c48:	2201      	movs	r2, #1
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	9304      	str	r3, [sp, #16]
 8014c4e:	f000 fcdf 	bl	8015610 <__lshift>
 8014c52:	4621      	mov	r1, r4
 8014c54:	4605      	mov	r5, r0
 8014c56:	f000 fd4b 	bl	80156f0 <__mcmp>
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	9b04      	ldr	r3, [sp, #16]
 8014c5e:	dc02      	bgt.n	8014c66 <_dtoa_r+0x9b6>
 8014c60:	d1de      	bne.n	8014c20 <_dtoa_r+0x970>
 8014c62:	07da      	lsls	r2, r3, #31
 8014c64:	d5dc      	bpl.n	8014c20 <_dtoa_r+0x970>
 8014c66:	2b39      	cmp	r3, #57	; 0x39
 8014c68:	d1d8      	bne.n	8014c1c <_dtoa_r+0x96c>
 8014c6a:	9a02      	ldr	r2, [sp, #8]
 8014c6c:	2339      	movs	r3, #57	; 0x39
 8014c6e:	7013      	strb	r3, [r2, #0]
 8014c70:	4643      	mov	r3, r8
 8014c72:	4698      	mov	r8, r3
 8014c74:	3b01      	subs	r3, #1
 8014c76:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014c7a:	2a39      	cmp	r2, #57	; 0x39
 8014c7c:	d051      	beq.n	8014d22 <_dtoa_r+0xa72>
 8014c7e:	3201      	adds	r2, #1
 8014c80:	701a      	strb	r2, [r3, #0]
 8014c82:	e745      	b.n	8014b10 <_dtoa_r+0x860>
 8014c84:	2a00      	cmp	r2, #0
 8014c86:	dd03      	ble.n	8014c90 <_dtoa_r+0x9e0>
 8014c88:	2b39      	cmp	r3, #57	; 0x39
 8014c8a:	d0ee      	beq.n	8014c6a <_dtoa_r+0x9ba>
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	e7c7      	b.n	8014c20 <_dtoa_r+0x970>
 8014c90:	9a04      	ldr	r2, [sp, #16]
 8014c92:	9908      	ldr	r1, [sp, #32]
 8014c94:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014c98:	428a      	cmp	r2, r1
 8014c9a:	d02b      	beq.n	8014cf4 <_dtoa_r+0xa44>
 8014c9c:	4629      	mov	r1, r5
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	220a      	movs	r2, #10
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	f000 fb04 	bl	80152b0 <__multadd>
 8014ca8:	45b9      	cmp	r9, r7
 8014caa:	4605      	mov	r5, r0
 8014cac:	f04f 0300 	mov.w	r3, #0
 8014cb0:	f04f 020a 	mov.w	r2, #10
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	4630      	mov	r0, r6
 8014cb8:	d107      	bne.n	8014cca <_dtoa_r+0xa1a>
 8014cba:	f000 faf9 	bl	80152b0 <__multadd>
 8014cbe:	4681      	mov	r9, r0
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	9b04      	ldr	r3, [sp, #16]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	9304      	str	r3, [sp, #16]
 8014cc8:	e774      	b.n	8014bb4 <_dtoa_r+0x904>
 8014cca:	f000 faf1 	bl	80152b0 <__multadd>
 8014cce:	4639      	mov	r1, r7
 8014cd0:	4681      	mov	r9, r0
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	220a      	movs	r2, #10
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f000 faea 	bl	80152b0 <__multadd>
 8014cdc:	4607      	mov	r7, r0
 8014cde:	e7f0      	b.n	8014cc2 <_dtoa_r+0xa12>
 8014ce0:	f1ba 0f00 	cmp.w	sl, #0
 8014ce4:	9a01      	ldr	r2, [sp, #4]
 8014ce6:	bfcc      	ite	gt
 8014ce8:	46d0      	movgt	r8, sl
 8014cea:	f04f 0801 	movle.w	r8, #1
 8014cee:	4490      	add	r8, r2
 8014cf0:	f04f 0900 	mov.w	r9, #0
 8014cf4:	4629      	mov	r1, r5
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	9302      	str	r3, [sp, #8]
 8014cfc:	f000 fc88 	bl	8015610 <__lshift>
 8014d00:	4621      	mov	r1, r4
 8014d02:	4605      	mov	r5, r0
 8014d04:	f000 fcf4 	bl	80156f0 <__mcmp>
 8014d08:	2800      	cmp	r0, #0
 8014d0a:	dcb1      	bgt.n	8014c70 <_dtoa_r+0x9c0>
 8014d0c:	d102      	bne.n	8014d14 <_dtoa_r+0xa64>
 8014d0e:	9b02      	ldr	r3, [sp, #8]
 8014d10:	07db      	lsls	r3, r3, #31
 8014d12:	d4ad      	bmi.n	8014c70 <_dtoa_r+0x9c0>
 8014d14:	4643      	mov	r3, r8
 8014d16:	4698      	mov	r8, r3
 8014d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014d1c:	2a30      	cmp	r2, #48	; 0x30
 8014d1e:	d0fa      	beq.n	8014d16 <_dtoa_r+0xa66>
 8014d20:	e6f6      	b.n	8014b10 <_dtoa_r+0x860>
 8014d22:	9a01      	ldr	r2, [sp, #4]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d1a4      	bne.n	8014c72 <_dtoa_r+0x9c2>
 8014d28:	f10b 0b01 	add.w	fp, fp, #1
 8014d2c:	2331      	movs	r3, #49	; 0x31
 8014d2e:	e778      	b.n	8014c22 <_dtoa_r+0x972>
 8014d30:	4b14      	ldr	r3, [pc, #80]	; (8014d84 <_dtoa_r+0xad4>)
 8014d32:	f7ff bb27 	b.w	8014384 <_dtoa_r+0xd4>
 8014d36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f47f ab03 	bne.w	8014344 <_dtoa_r+0x94>
 8014d3e:	4b12      	ldr	r3, [pc, #72]	; (8014d88 <_dtoa_r+0xad8>)
 8014d40:	f7ff bb20 	b.w	8014384 <_dtoa_r+0xd4>
 8014d44:	f1ba 0f00 	cmp.w	sl, #0
 8014d48:	dc03      	bgt.n	8014d52 <_dtoa_r+0xaa2>
 8014d4a:	9b06      	ldr	r3, [sp, #24]
 8014d4c:	2b02      	cmp	r3, #2
 8014d4e:	f73f aec7 	bgt.w	8014ae0 <_dtoa_r+0x830>
 8014d52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d56:	4621      	mov	r1, r4
 8014d58:	4628      	mov	r0, r5
 8014d5a:	f7ff fa1d 	bl	8014198 <quorem>
 8014d5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014d62:	f808 3b01 	strb.w	r3, [r8], #1
 8014d66:	9a01      	ldr	r2, [sp, #4]
 8014d68:	eba8 0202 	sub.w	r2, r8, r2
 8014d6c:	4592      	cmp	sl, r2
 8014d6e:	ddb7      	ble.n	8014ce0 <_dtoa_r+0xa30>
 8014d70:	4629      	mov	r1, r5
 8014d72:	2300      	movs	r3, #0
 8014d74:	220a      	movs	r2, #10
 8014d76:	4630      	mov	r0, r6
 8014d78:	f000 fa9a 	bl	80152b0 <__multadd>
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	e7ea      	b.n	8014d56 <_dtoa_r+0xaa6>
 8014d80:	08017b97 	.word	0x08017b97
 8014d84:	08017af4 	.word	0x08017af4
 8014d88:	08017b18 	.word	0x08017b18

08014d8c <__sflush_r>:
 8014d8c:	898a      	ldrh	r2, [r1, #12]
 8014d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d92:	4605      	mov	r5, r0
 8014d94:	0710      	lsls	r0, r2, #28
 8014d96:	460c      	mov	r4, r1
 8014d98:	d458      	bmi.n	8014e4c <__sflush_r+0xc0>
 8014d9a:	684b      	ldr	r3, [r1, #4]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	dc05      	bgt.n	8014dac <__sflush_r+0x20>
 8014da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	dc02      	bgt.n	8014dac <__sflush_r+0x20>
 8014da6:	2000      	movs	r0, #0
 8014da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dae:	2e00      	cmp	r6, #0
 8014db0:	d0f9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014db2:	2300      	movs	r3, #0
 8014db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014db8:	682f      	ldr	r7, [r5, #0]
 8014dba:	602b      	str	r3, [r5, #0]
 8014dbc:	d032      	beq.n	8014e24 <__sflush_r+0x98>
 8014dbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014dc0:	89a3      	ldrh	r3, [r4, #12]
 8014dc2:	075a      	lsls	r2, r3, #29
 8014dc4:	d505      	bpl.n	8014dd2 <__sflush_r+0x46>
 8014dc6:	6863      	ldr	r3, [r4, #4]
 8014dc8:	1ac0      	subs	r0, r0, r3
 8014dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dcc:	b10b      	cbz	r3, 8014dd2 <__sflush_r+0x46>
 8014dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dd0:	1ac0      	subs	r0, r0, r3
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dd8:	6a21      	ldr	r1, [r4, #32]
 8014dda:	4628      	mov	r0, r5
 8014ddc:	47b0      	blx	r6
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	89a3      	ldrh	r3, [r4, #12]
 8014de2:	d106      	bne.n	8014df2 <__sflush_r+0x66>
 8014de4:	6829      	ldr	r1, [r5, #0]
 8014de6:	291d      	cmp	r1, #29
 8014de8:	d82c      	bhi.n	8014e44 <__sflush_r+0xb8>
 8014dea:	4a2a      	ldr	r2, [pc, #168]	; (8014e94 <__sflush_r+0x108>)
 8014dec:	40ca      	lsrs	r2, r1
 8014dee:	07d6      	lsls	r6, r2, #31
 8014df0:	d528      	bpl.n	8014e44 <__sflush_r+0xb8>
 8014df2:	2200      	movs	r2, #0
 8014df4:	6062      	str	r2, [r4, #4]
 8014df6:	04d9      	lsls	r1, r3, #19
 8014df8:	6922      	ldr	r2, [r4, #16]
 8014dfa:	6022      	str	r2, [r4, #0]
 8014dfc:	d504      	bpl.n	8014e08 <__sflush_r+0x7c>
 8014dfe:	1c42      	adds	r2, r0, #1
 8014e00:	d101      	bne.n	8014e06 <__sflush_r+0x7a>
 8014e02:	682b      	ldr	r3, [r5, #0]
 8014e04:	b903      	cbnz	r3, 8014e08 <__sflush_r+0x7c>
 8014e06:	6560      	str	r0, [r4, #84]	; 0x54
 8014e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e0a:	602f      	str	r7, [r5, #0]
 8014e0c:	2900      	cmp	r1, #0
 8014e0e:	d0ca      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e14:	4299      	cmp	r1, r3
 8014e16:	d002      	beq.n	8014e1e <__sflush_r+0x92>
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f7fe fb1d 	bl	8013458 <_free_r>
 8014e1e:	2000      	movs	r0, #0
 8014e20:	6360      	str	r0, [r4, #52]	; 0x34
 8014e22:	e7c1      	b.n	8014da8 <__sflush_r+0x1c>
 8014e24:	6a21      	ldr	r1, [r4, #32]
 8014e26:	2301      	movs	r3, #1
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b0      	blx	r6
 8014e2c:	1c41      	adds	r1, r0, #1
 8014e2e:	d1c7      	bne.n	8014dc0 <__sflush_r+0x34>
 8014e30:	682b      	ldr	r3, [r5, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d0c4      	beq.n	8014dc0 <__sflush_r+0x34>
 8014e36:	2b1d      	cmp	r3, #29
 8014e38:	d001      	beq.n	8014e3e <__sflush_r+0xb2>
 8014e3a:	2b16      	cmp	r3, #22
 8014e3c:	d101      	bne.n	8014e42 <__sflush_r+0xb6>
 8014e3e:	602f      	str	r7, [r5, #0]
 8014e40:	e7b1      	b.n	8014da6 <__sflush_r+0x1a>
 8014e42:	89a3      	ldrh	r3, [r4, #12]
 8014e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e48:	81a3      	strh	r3, [r4, #12]
 8014e4a:	e7ad      	b.n	8014da8 <__sflush_r+0x1c>
 8014e4c:	690f      	ldr	r7, [r1, #16]
 8014e4e:	2f00      	cmp	r7, #0
 8014e50:	d0a9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e52:	0793      	lsls	r3, r2, #30
 8014e54:	680e      	ldr	r6, [r1, #0]
 8014e56:	bf08      	it	eq
 8014e58:	694b      	ldreq	r3, [r1, #20]
 8014e5a:	600f      	str	r7, [r1, #0]
 8014e5c:	bf18      	it	ne
 8014e5e:	2300      	movne	r3, #0
 8014e60:	eba6 0807 	sub.w	r8, r6, r7
 8014e64:	608b      	str	r3, [r1, #8]
 8014e66:	f1b8 0f00 	cmp.w	r8, #0
 8014e6a:	dd9c      	ble.n	8014da6 <__sflush_r+0x1a>
 8014e6c:	6a21      	ldr	r1, [r4, #32]
 8014e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e70:	4643      	mov	r3, r8
 8014e72:	463a      	mov	r2, r7
 8014e74:	4628      	mov	r0, r5
 8014e76:	47b0      	blx	r6
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	dc06      	bgt.n	8014e8a <__sflush_r+0xfe>
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e82:	81a3      	strh	r3, [r4, #12]
 8014e84:	f04f 30ff 	mov.w	r0, #4294967295
 8014e88:	e78e      	b.n	8014da8 <__sflush_r+0x1c>
 8014e8a:	4407      	add	r7, r0
 8014e8c:	eba8 0800 	sub.w	r8, r8, r0
 8014e90:	e7e9      	b.n	8014e66 <__sflush_r+0xda>
 8014e92:	bf00      	nop
 8014e94:	20400001 	.word	0x20400001

08014e98 <_fflush_r>:
 8014e98:	b538      	push	{r3, r4, r5, lr}
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	4605      	mov	r5, r0
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	b913      	cbnz	r3, 8014ea8 <_fflush_r+0x10>
 8014ea2:	2500      	movs	r5, #0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	b118      	cbz	r0, 8014eb2 <_fflush_r+0x1a>
 8014eaa:	6983      	ldr	r3, [r0, #24]
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_fflush_r+0x1a>
 8014eae:	f000 f887 	bl	8014fc0 <__sinit>
 8014eb2:	4b14      	ldr	r3, [pc, #80]	; (8014f04 <_fflush_r+0x6c>)
 8014eb4:	429c      	cmp	r4, r3
 8014eb6:	d11b      	bne.n	8014ef0 <_fflush_r+0x58>
 8014eb8:	686c      	ldr	r4, [r5, #4]
 8014eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d0ef      	beq.n	8014ea2 <_fflush_r+0xa>
 8014ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ec4:	07d0      	lsls	r0, r2, #31
 8014ec6:	d404      	bmi.n	8014ed2 <_fflush_r+0x3a>
 8014ec8:	0599      	lsls	r1, r3, #22
 8014eca:	d402      	bmi.n	8014ed2 <_fflush_r+0x3a>
 8014ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ece:	f000 f91a 	bl	8015106 <__retarget_lock_acquire_recursive>
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	4621      	mov	r1, r4
 8014ed6:	f7ff ff59 	bl	8014d8c <__sflush_r>
 8014eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014edc:	07da      	lsls	r2, r3, #31
 8014ede:	4605      	mov	r5, r0
 8014ee0:	d4e0      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014ee2:	89a3      	ldrh	r3, [r4, #12]
 8014ee4:	059b      	lsls	r3, r3, #22
 8014ee6:	d4dd      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014eea:	f000 f90d 	bl	8015108 <__retarget_lock_release_recursive>
 8014eee:	e7d9      	b.n	8014ea4 <_fflush_r+0xc>
 8014ef0:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <_fflush_r+0x70>)
 8014ef2:	429c      	cmp	r4, r3
 8014ef4:	d101      	bne.n	8014efa <_fflush_r+0x62>
 8014ef6:	68ac      	ldr	r4, [r5, #8]
 8014ef8:	e7df      	b.n	8014eba <_fflush_r+0x22>
 8014efa:	4b04      	ldr	r3, [pc, #16]	; (8014f0c <_fflush_r+0x74>)
 8014efc:	429c      	cmp	r4, r3
 8014efe:	bf08      	it	eq
 8014f00:	68ec      	ldreq	r4, [r5, #12]
 8014f02:	e7da      	b.n	8014eba <_fflush_r+0x22>
 8014f04:	08017bc8 	.word	0x08017bc8
 8014f08:	08017be8 	.word	0x08017be8
 8014f0c:	08017ba8 	.word	0x08017ba8

08014f10 <std>:
 8014f10:	2300      	movs	r3, #0
 8014f12:	b510      	push	{r4, lr}
 8014f14:	4604      	mov	r4, r0
 8014f16:	e9c0 3300 	strd	r3, r3, [r0]
 8014f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f1e:	6083      	str	r3, [r0, #8]
 8014f20:	8181      	strh	r1, [r0, #12]
 8014f22:	6643      	str	r3, [r0, #100]	; 0x64
 8014f24:	81c2      	strh	r2, [r0, #14]
 8014f26:	6183      	str	r3, [r0, #24]
 8014f28:	4619      	mov	r1, r3
 8014f2a:	2208      	movs	r2, #8
 8014f2c:	305c      	adds	r0, #92	; 0x5c
 8014f2e:	f7fe fa8b 	bl	8013448 <memset>
 8014f32:	4b05      	ldr	r3, [pc, #20]	; (8014f48 <std+0x38>)
 8014f34:	6263      	str	r3, [r4, #36]	; 0x24
 8014f36:	4b05      	ldr	r3, [pc, #20]	; (8014f4c <std+0x3c>)
 8014f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f3a:	4b05      	ldr	r3, [pc, #20]	; (8014f50 <std+0x40>)
 8014f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f3e:	4b05      	ldr	r3, [pc, #20]	; (8014f54 <std+0x44>)
 8014f40:	6224      	str	r4, [r4, #32]
 8014f42:	6323      	str	r3, [r4, #48]	; 0x30
 8014f44:	bd10      	pop	{r4, pc}
 8014f46:	bf00      	nop
 8014f48:	08015ee9 	.word	0x08015ee9
 8014f4c:	08015f0b 	.word	0x08015f0b
 8014f50:	08015f43 	.word	0x08015f43
 8014f54:	08015f67 	.word	0x08015f67

08014f58 <_cleanup_r>:
 8014f58:	4901      	ldr	r1, [pc, #4]	; (8014f60 <_cleanup_r+0x8>)
 8014f5a:	f000 b8af 	b.w	80150bc <_fwalk_reent>
 8014f5e:	bf00      	nop
 8014f60:	08014e99 	.word	0x08014e99

08014f64 <__sfmoreglue>:
 8014f64:	b570      	push	{r4, r5, r6, lr}
 8014f66:	2268      	movs	r2, #104	; 0x68
 8014f68:	1e4d      	subs	r5, r1, #1
 8014f6a:	4355      	muls	r5, r2
 8014f6c:	460e      	mov	r6, r1
 8014f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f72:	f7fe fadd 	bl	8013530 <_malloc_r>
 8014f76:	4604      	mov	r4, r0
 8014f78:	b140      	cbz	r0, 8014f8c <__sfmoreglue+0x28>
 8014f7a:	2100      	movs	r1, #0
 8014f7c:	e9c0 1600 	strd	r1, r6, [r0]
 8014f80:	300c      	adds	r0, #12
 8014f82:	60a0      	str	r0, [r4, #8]
 8014f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f88:	f7fe fa5e 	bl	8013448 <memset>
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}

08014f90 <__sfp_lock_acquire>:
 8014f90:	4801      	ldr	r0, [pc, #4]	; (8014f98 <__sfp_lock_acquire+0x8>)
 8014f92:	f000 b8b8 	b.w	8015106 <__retarget_lock_acquire_recursive>
 8014f96:	bf00      	nop
 8014f98:	20001429 	.word	0x20001429

08014f9c <__sfp_lock_release>:
 8014f9c:	4801      	ldr	r0, [pc, #4]	; (8014fa4 <__sfp_lock_release+0x8>)
 8014f9e:	f000 b8b3 	b.w	8015108 <__retarget_lock_release_recursive>
 8014fa2:	bf00      	nop
 8014fa4:	20001429 	.word	0x20001429

08014fa8 <__sinit_lock_acquire>:
 8014fa8:	4801      	ldr	r0, [pc, #4]	; (8014fb0 <__sinit_lock_acquire+0x8>)
 8014faa:	f000 b8ac 	b.w	8015106 <__retarget_lock_acquire_recursive>
 8014fae:	bf00      	nop
 8014fb0:	2000142a 	.word	0x2000142a

08014fb4 <__sinit_lock_release>:
 8014fb4:	4801      	ldr	r0, [pc, #4]	; (8014fbc <__sinit_lock_release+0x8>)
 8014fb6:	f000 b8a7 	b.w	8015108 <__retarget_lock_release_recursive>
 8014fba:	bf00      	nop
 8014fbc:	2000142a 	.word	0x2000142a

08014fc0 <__sinit>:
 8014fc0:	b510      	push	{r4, lr}
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	f7ff fff0 	bl	8014fa8 <__sinit_lock_acquire>
 8014fc8:	69a3      	ldr	r3, [r4, #24]
 8014fca:	b11b      	cbz	r3, 8014fd4 <__sinit+0x14>
 8014fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fd0:	f7ff bff0 	b.w	8014fb4 <__sinit_lock_release>
 8014fd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014fd8:	6523      	str	r3, [r4, #80]	; 0x50
 8014fda:	4b13      	ldr	r3, [pc, #76]	; (8015028 <__sinit+0x68>)
 8014fdc:	4a13      	ldr	r2, [pc, #76]	; (801502c <__sinit+0x6c>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014fe2:	42a3      	cmp	r3, r4
 8014fe4:	bf04      	itt	eq
 8014fe6:	2301      	moveq	r3, #1
 8014fe8:	61a3      	streq	r3, [r4, #24]
 8014fea:	4620      	mov	r0, r4
 8014fec:	f000 f820 	bl	8015030 <__sfp>
 8014ff0:	6060      	str	r0, [r4, #4]
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f000 f81c 	bl	8015030 <__sfp>
 8014ff8:	60a0      	str	r0, [r4, #8]
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f000 f818 	bl	8015030 <__sfp>
 8015000:	2200      	movs	r2, #0
 8015002:	60e0      	str	r0, [r4, #12]
 8015004:	2104      	movs	r1, #4
 8015006:	6860      	ldr	r0, [r4, #4]
 8015008:	f7ff ff82 	bl	8014f10 <std>
 801500c:	68a0      	ldr	r0, [r4, #8]
 801500e:	2201      	movs	r2, #1
 8015010:	2109      	movs	r1, #9
 8015012:	f7ff ff7d 	bl	8014f10 <std>
 8015016:	68e0      	ldr	r0, [r4, #12]
 8015018:	2202      	movs	r2, #2
 801501a:	2112      	movs	r1, #18
 801501c:	f7ff ff78 	bl	8014f10 <std>
 8015020:	2301      	movs	r3, #1
 8015022:	61a3      	str	r3, [r4, #24]
 8015024:	e7d2      	b.n	8014fcc <__sinit+0xc>
 8015026:	bf00      	nop
 8015028:	08017ae0 	.word	0x08017ae0
 801502c:	08014f59 	.word	0x08014f59

08015030 <__sfp>:
 8015030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015032:	4607      	mov	r7, r0
 8015034:	f7ff ffac 	bl	8014f90 <__sfp_lock_acquire>
 8015038:	4b1e      	ldr	r3, [pc, #120]	; (80150b4 <__sfp+0x84>)
 801503a:	681e      	ldr	r6, [r3, #0]
 801503c:	69b3      	ldr	r3, [r6, #24]
 801503e:	b913      	cbnz	r3, 8015046 <__sfp+0x16>
 8015040:	4630      	mov	r0, r6
 8015042:	f7ff ffbd 	bl	8014fc0 <__sinit>
 8015046:	3648      	adds	r6, #72	; 0x48
 8015048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801504c:	3b01      	subs	r3, #1
 801504e:	d503      	bpl.n	8015058 <__sfp+0x28>
 8015050:	6833      	ldr	r3, [r6, #0]
 8015052:	b30b      	cbz	r3, 8015098 <__sfp+0x68>
 8015054:	6836      	ldr	r6, [r6, #0]
 8015056:	e7f7      	b.n	8015048 <__sfp+0x18>
 8015058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801505c:	b9d5      	cbnz	r5, 8015094 <__sfp+0x64>
 801505e:	4b16      	ldr	r3, [pc, #88]	; (80150b8 <__sfp+0x88>)
 8015060:	60e3      	str	r3, [r4, #12]
 8015062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015066:	6665      	str	r5, [r4, #100]	; 0x64
 8015068:	f000 f84c 	bl	8015104 <__retarget_lock_init_recursive>
 801506c:	f7ff ff96 	bl	8014f9c <__sfp_lock_release>
 8015070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015078:	6025      	str	r5, [r4, #0]
 801507a:	61a5      	str	r5, [r4, #24]
 801507c:	2208      	movs	r2, #8
 801507e:	4629      	mov	r1, r5
 8015080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015084:	f7fe f9e0 	bl	8013448 <memset>
 8015088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801508c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015090:	4620      	mov	r0, r4
 8015092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015094:	3468      	adds	r4, #104	; 0x68
 8015096:	e7d9      	b.n	801504c <__sfp+0x1c>
 8015098:	2104      	movs	r1, #4
 801509a:	4638      	mov	r0, r7
 801509c:	f7ff ff62 	bl	8014f64 <__sfmoreglue>
 80150a0:	4604      	mov	r4, r0
 80150a2:	6030      	str	r0, [r6, #0]
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d1d5      	bne.n	8015054 <__sfp+0x24>
 80150a8:	f7ff ff78 	bl	8014f9c <__sfp_lock_release>
 80150ac:	230c      	movs	r3, #12
 80150ae:	603b      	str	r3, [r7, #0]
 80150b0:	e7ee      	b.n	8015090 <__sfp+0x60>
 80150b2:	bf00      	nop
 80150b4:	08017ae0 	.word	0x08017ae0
 80150b8:	ffff0001 	.word	0xffff0001

080150bc <_fwalk_reent>:
 80150bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150c0:	4606      	mov	r6, r0
 80150c2:	4688      	mov	r8, r1
 80150c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150c8:	2700      	movs	r7, #0
 80150ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150ce:	f1b9 0901 	subs.w	r9, r9, #1
 80150d2:	d505      	bpl.n	80150e0 <_fwalk_reent+0x24>
 80150d4:	6824      	ldr	r4, [r4, #0]
 80150d6:	2c00      	cmp	r4, #0
 80150d8:	d1f7      	bne.n	80150ca <_fwalk_reent+0xe>
 80150da:	4638      	mov	r0, r7
 80150dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150e0:	89ab      	ldrh	r3, [r5, #12]
 80150e2:	2b01      	cmp	r3, #1
 80150e4:	d907      	bls.n	80150f6 <_fwalk_reent+0x3a>
 80150e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150ea:	3301      	adds	r3, #1
 80150ec:	d003      	beq.n	80150f6 <_fwalk_reent+0x3a>
 80150ee:	4629      	mov	r1, r5
 80150f0:	4630      	mov	r0, r6
 80150f2:	47c0      	blx	r8
 80150f4:	4307      	orrs	r7, r0
 80150f6:	3568      	adds	r5, #104	; 0x68
 80150f8:	e7e9      	b.n	80150ce <_fwalk_reent+0x12>
	...

080150fc <_localeconv_r>:
 80150fc:	4800      	ldr	r0, [pc, #0]	; (8015100 <_localeconv_r+0x4>)
 80150fe:	4770      	bx	lr
 8015100:	20000f00 	.word	0x20000f00

08015104 <__retarget_lock_init_recursive>:
 8015104:	4770      	bx	lr

08015106 <__retarget_lock_acquire_recursive>:
 8015106:	4770      	bx	lr

08015108 <__retarget_lock_release_recursive>:
 8015108:	4770      	bx	lr

0801510a <__swhatbuf_r>:
 801510a:	b570      	push	{r4, r5, r6, lr}
 801510c:	460e      	mov	r6, r1
 801510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015112:	2900      	cmp	r1, #0
 8015114:	b096      	sub	sp, #88	; 0x58
 8015116:	4614      	mov	r4, r2
 8015118:	461d      	mov	r5, r3
 801511a:	da08      	bge.n	801512e <__swhatbuf_r+0x24>
 801511c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015120:	2200      	movs	r2, #0
 8015122:	602a      	str	r2, [r5, #0]
 8015124:	061a      	lsls	r2, r3, #24
 8015126:	d410      	bmi.n	801514a <__swhatbuf_r+0x40>
 8015128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801512c:	e00e      	b.n	801514c <__swhatbuf_r+0x42>
 801512e:	466a      	mov	r2, sp
 8015130:	f000 ff70 	bl	8016014 <_fstat_r>
 8015134:	2800      	cmp	r0, #0
 8015136:	dbf1      	blt.n	801511c <__swhatbuf_r+0x12>
 8015138:	9a01      	ldr	r2, [sp, #4]
 801513a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801513e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015142:	425a      	negs	r2, r3
 8015144:	415a      	adcs	r2, r3
 8015146:	602a      	str	r2, [r5, #0]
 8015148:	e7ee      	b.n	8015128 <__swhatbuf_r+0x1e>
 801514a:	2340      	movs	r3, #64	; 0x40
 801514c:	2000      	movs	r0, #0
 801514e:	6023      	str	r3, [r4, #0]
 8015150:	b016      	add	sp, #88	; 0x58
 8015152:	bd70      	pop	{r4, r5, r6, pc}

08015154 <__smakebuf_r>:
 8015154:	898b      	ldrh	r3, [r1, #12]
 8015156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015158:	079d      	lsls	r5, r3, #30
 801515a:	4606      	mov	r6, r0
 801515c:	460c      	mov	r4, r1
 801515e:	d507      	bpl.n	8015170 <__smakebuf_r+0x1c>
 8015160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	6123      	str	r3, [r4, #16]
 8015168:	2301      	movs	r3, #1
 801516a:	6163      	str	r3, [r4, #20]
 801516c:	b002      	add	sp, #8
 801516e:	bd70      	pop	{r4, r5, r6, pc}
 8015170:	ab01      	add	r3, sp, #4
 8015172:	466a      	mov	r2, sp
 8015174:	f7ff ffc9 	bl	801510a <__swhatbuf_r>
 8015178:	9900      	ldr	r1, [sp, #0]
 801517a:	4605      	mov	r5, r0
 801517c:	4630      	mov	r0, r6
 801517e:	f7fe f9d7 	bl	8013530 <_malloc_r>
 8015182:	b948      	cbnz	r0, 8015198 <__smakebuf_r+0x44>
 8015184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015188:	059a      	lsls	r2, r3, #22
 801518a:	d4ef      	bmi.n	801516c <__smakebuf_r+0x18>
 801518c:	f023 0303 	bic.w	r3, r3, #3
 8015190:	f043 0302 	orr.w	r3, r3, #2
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	e7e3      	b.n	8015160 <__smakebuf_r+0xc>
 8015198:	4b0d      	ldr	r3, [pc, #52]	; (80151d0 <__smakebuf_r+0x7c>)
 801519a:	62b3      	str	r3, [r6, #40]	; 0x28
 801519c:	89a3      	ldrh	r3, [r4, #12]
 801519e:	6020      	str	r0, [r4, #0]
 80151a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151a4:	81a3      	strh	r3, [r4, #12]
 80151a6:	9b00      	ldr	r3, [sp, #0]
 80151a8:	6163      	str	r3, [r4, #20]
 80151aa:	9b01      	ldr	r3, [sp, #4]
 80151ac:	6120      	str	r0, [r4, #16]
 80151ae:	b15b      	cbz	r3, 80151c8 <__smakebuf_r+0x74>
 80151b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151b4:	4630      	mov	r0, r6
 80151b6:	f000 ff3f 	bl	8016038 <_isatty_r>
 80151ba:	b128      	cbz	r0, 80151c8 <__smakebuf_r+0x74>
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	f023 0303 	bic.w	r3, r3, #3
 80151c2:	f043 0301 	orr.w	r3, r3, #1
 80151c6:	81a3      	strh	r3, [r4, #12]
 80151c8:	89a0      	ldrh	r0, [r4, #12]
 80151ca:	4305      	orrs	r5, r0
 80151cc:	81a5      	strh	r5, [r4, #12]
 80151ce:	e7cd      	b.n	801516c <__smakebuf_r+0x18>
 80151d0:	08014f59 	.word	0x08014f59

080151d4 <__malloc_lock>:
 80151d4:	4801      	ldr	r0, [pc, #4]	; (80151dc <__malloc_lock+0x8>)
 80151d6:	f7ff bf96 	b.w	8015106 <__retarget_lock_acquire_recursive>
 80151da:	bf00      	nop
 80151dc:	20001428 	.word	0x20001428

080151e0 <__malloc_unlock>:
 80151e0:	4801      	ldr	r0, [pc, #4]	; (80151e8 <__malloc_unlock+0x8>)
 80151e2:	f7ff bf91 	b.w	8015108 <__retarget_lock_release_recursive>
 80151e6:	bf00      	nop
 80151e8:	20001428 	.word	0x20001428

080151ec <_Balloc>:
 80151ec:	b570      	push	{r4, r5, r6, lr}
 80151ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80151f0:	4604      	mov	r4, r0
 80151f2:	460d      	mov	r5, r1
 80151f4:	b976      	cbnz	r6, 8015214 <_Balloc+0x28>
 80151f6:	2010      	movs	r0, #16
 80151f8:	f7fe f8ee 	bl	80133d8 <malloc>
 80151fc:	4602      	mov	r2, r0
 80151fe:	6260      	str	r0, [r4, #36]	; 0x24
 8015200:	b920      	cbnz	r0, 801520c <_Balloc+0x20>
 8015202:	4b18      	ldr	r3, [pc, #96]	; (8015264 <_Balloc+0x78>)
 8015204:	4818      	ldr	r0, [pc, #96]	; (8015268 <_Balloc+0x7c>)
 8015206:	2166      	movs	r1, #102	; 0x66
 8015208:	f000 fec4 	bl	8015f94 <__assert_func>
 801520c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015210:	6006      	str	r6, [r0, #0]
 8015212:	60c6      	str	r6, [r0, #12]
 8015214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015216:	68f3      	ldr	r3, [r6, #12]
 8015218:	b183      	cbz	r3, 801523c <_Balloc+0x50>
 801521a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015222:	b9b8      	cbnz	r0, 8015254 <_Balloc+0x68>
 8015224:	2101      	movs	r1, #1
 8015226:	fa01 f605 	lsl.w	r6, r1, r5
 801522a:	1d72      	adds	r2, r6, #5
 801522c:	0092      	lsls	r2, r2, #2
 801522e:	4620      	mov	r0, r4
 8015230:	f000 fb60 	bl	80158f4 <_calloc_r>
 8015234:	b160      	cbz	r0, 8015250 <_Balloc+0x64>
 8015236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801523a:	e00e      	b.n	801525a <_Balloc+0x6e>
 801523c:	2221      	movs	r2, #33	; 0x21
 801523e:	2104      	movs	r1, #4
 8015240:	4620      	mov	r0, r4
 8015242:	f000 fb57 	bl	80158f4 <_calloc_r>
 8015246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015248:	60f0      	str	r0, [r6, #12]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d1e4      	bne.n	801521a <_Balloc+0x2e>
 8015250:	2000      	movs	r0, #0
 8015252:	bd70      	pop	{r4, r5, r6, pc}
 8015254:	6802      	ldr	r2, [r0, #0]
 8015256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801525a:	2300      	movs	r3, #0
 801525c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015260:	e7f7      	b.n	8015252 <_Balloc+0x66>
 8015262:	bf00      	nop
 8015264:	08017b25 	.word	0x08017b25
 8015268:	08017c08 	.word	0x08017c08

0801526c <_Bfree>:
 801526c:	b570      	push	{r4, r5, r6, lr}
 801526e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015270:	4605      	mov	r5, r0
 8015272:	460c      	mov	r4, r1
 8015274:	b976      	cbnz	r6, 8015294 <_Bfree+0x28>
 8015276:	2010      	movs	r0, #16
 8015278:	f7fe f8ae 	bl	80133d8 <malloc>
 801527c:	4602      	mov	r2, r0
 801527e:	6268      	str	r0, [r5, #36]	; 0x24
 8015280:	b920      	cbnz	r0, 801528c <_Bfree+0x20>
 8015282:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <_Bfree+0x3c>)
 8015284:	4809      	ldr	r0, [pc, #36]	; (80152ac <_Bfree+0x40>)
 8015286:	218a      	movs	r1, #138	; 0x8a
 8015288:	f000 fe84 	bl	8015f94 <__assert_func>
 801528c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015290:	6006      	str	r6, [r0, #0]
 8015292:	60c6      	str	r6, [r0, #12]
 8015294:	b13c      	cbz	r4, 80152a6 <_Bfree+0x3a>
 8015296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015298:	6862      	ldr	r2, [r4, #4]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80152a0:	6021      	str	r1, [r4, #0]
 80152a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80152a6:	bd70      	pop	{r4, r5, r6, pc}
 80152a8:	08017b25 	.word	0x08017b25
 80152ac:	08017c08 	.word	0x08017c08

080152b0 <__multadd>:
 80152b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b4:	690d      	ldr	r5, [r1, #16]
 80152b6:	4607      	mov	r7, r0
 80152b8:	460c      	mov	r4, r1
 80152ba:	461e      	mov	r6, r3
 80152bc:	f101 0c14 	add.w	ip, r1, #20
 80152c0:	2000      	movs	r0, #0
 80152c2:	f8dc 3000 	ldr.w	r3, [ip]
 80152c6:	b299      	uxth	r1, r3
 80152c8:	fb02 6101 	mla	r1, r2, r1, r6
 80152cc:	0c1e      	lsrs	r6, r3, #16
 80152ce:	0c0b      	lsrs	r3, r1, #16
 80152d0:	fb02 3306 	mla	r3, r2, r6, r3
 80152d4:	b289      	uxth	r1, r1
 80152d6:	3001      	adds	r0, #1
 80152d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80152dc:	4285      	cmp	r5, r0
 80152de:	f84c 1b04 	str.w	r1, [ip], #4
 80152e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80152e6:	dcec      	bgt.n	80152c2 <__multadd+0x12>
 80152e8:	b30e      	cbz	r6, 801532e <__multadd+0x7e>
 80152ea:	68a3      	ldr	r3, [r4, #8]
 80152ec:	42ab      	cmp	r3, r5
 80152ee:	dc19      	bgt.n	8015324 <__multadd+0x74>
 80152f0:	6861      	ldr	r1, [r4, #4]
 80152f2:	4638      	mov	r0, r7
 80152f4:	3101      	adds	r1, #1
 80152f6:	f7ff ff79 	bl	80151ec <_Balloc>
 80152fa:	4680      	mov	r8, r0
 80152fc:	b928      	cbnz	r0, 801530a <__multadd+0x5a>
 80152fe:	4602      	mov	r2, r0
 8015300:	4b0c      	ldr	r3, [pc, #48]	; (8015334 <__multadd+0x84>)
 8015302:	480d      	ldr	r0, [pc, #52]	; (8015338 <__multadd+0x88>)
 8015304:	21b5      	movs	r1, #181	; 0xb5
 8015306:	f000 fe45 	bl	8015f94 <__assert_func>
 801530a:	6922      	ldr	r2, [r4, #16]
 801530c:	3202      	adds	r2, #2
 801530e:	f104 010c 	add.w	r1, r4, #12
 8015312:	0092      	lsls	r2, r2, #2
 8015314:	300c      	adds	r0, #12
 8015316:	f7fe f86f 	bl	80133f8 <memcpy>
 801531a:	4621      	mov	r1, r4
 801531c:	4638      	mov	r0, r7
 801531e:	f7ff ffa5 	bl	801526c <_Bfree>
 8015322:	4644      	mov	r4, r8
 8015324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015328:	3501      	adds	r5, #1
 801532a:	615e      	str	r6, [r3, #20]
 801532c:	6125      	str	r5, [r4, #16]
 801532e:	4620      	mov	r0, r4
 8015330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015334:	08017b97 	.word	0x08017b97
 8015338:	08017c08 	.word	0x08017c08

0801533c <__hi0bits>:
 801533c:	0c03      	lsrs	r3, r0, #16
 801533e:	041b      	lsls	r3, r3, #16
 8015340:	b9d3      	cbnz	r3, 8015378 <__hi0bits+0x3c>
 8015342:	0400      	lsls	r0, r0, #16
 8015344:	2310      	movs	r3, #16
 8015346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801534a:	bf04      	itt	eq
 801534c:	0200      	lsleq	r0, r0, #8
 801534e:	3308      	addeq	r3, #8
 8015350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015354:	bf04      	itt	eq
 8015356:	0100      	lsleq	r0, r0, #4
 8015358:	3304      	addeq	r3, #4
 801535a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801535e:	bf04      	itt	eq
 8015360:	0080      	lsleq	r0, r0, #2
 8015362:	3302      	addeq	r3, #2
 8015364:	2800      	cmp	r0, #0
 8015366:	db05      	blt.n	8015374 <__hi0bits+0x38>
 8015368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801536c:	f103 0301 	add.w	r3, r3, #1
 8015370:	bf08      	it	eq
 8015372:	2320      	moveq	r3, #32
 8015374:	4618      	mov	r0, r3
 8015376:	4770      	bx	lr
 8015378:	2300      	movs	r3, #0
 801537a:	e7e4      	b.n	8015346 <__hi0bits+0xa>

0801537c <__lo0bits>:
 801537c:	6803      	ldr	r3, [r0, #0]
 801537e:	f013 0207 	ands.w	r2, r3, #7
 8015382:	4601      	mov	r1, r0
 8015384:	d00b      	beq.n	801539e <__lo0bits+0x22>
 8015386:	07da      	lsls	r2, r3, #31
 8015388:	d423      	bmi.n	80153d2 <__lo0bits+0x56>
 801538a:	0798      	lsls	r0, r3, #30
 801538c:	bf49      	itett	mi
 801538e:	085b      	lsrmi	r3, r3, #1
 8015390:	089b      	lsrpl	r3, r3, #2
 8015392:	2001      	movmi	r0, #1
 8015394:	600b      	strmi	r3, [r1, #0]
 8015396:	bf5c      	itt	pl
 8015398:	600b      	strpl	r3, [r1, #0]
 801539a:	2002      	movpl	r0, #2
 801539c:	4770      	bx	lr
 801539e:	b298      	uxth	r0, r3
 80153a0:	b9a8      	cbnz	r0, 80153ce <__lo0bits+0x52>
 80153a2:	0c1b      	lsrs	r3, r3, #16
 80153a4:	2010      	movs	r0, #16
 80153a6:	b2da      	uxtb	r2, r3
 80153a8:	b90a      	cbnz	r2, 80153ae <__lo0bits+0x32>
 80153aa:	3008      	adds	r0, #8
 80153ac:	0a1b      	lsrs	r3, r3, #8
 80153ae:	071a      	lsls	r2, r3, #28
 80153b0:	bf04      	itt	eq
 80153b2:	091b      	lsreq	r3, r3, #4
 80153b4:	3004      	addeq	r0, #4
 80153b6:	079a      	lsls	r2, r3, #30
 80153b8:	bf04      	itt	eq
 80153ba:	089b      	lsreq	r3, r3, #2
 80153bc:	3002      	addeq	r0, #2
 80153be:	07da      	lsls	r2, r3, #31
 80153c0:	d403      	bmi.n	80153ca <__lo0bits+0x4e>
 80153c2:	085b      	lsrs	r3, r3, #1
 80153c4:	f100 0001 	add.w	r0, r0, #1
 80153c8:	d005      	beq.n	80153d6 <__lo0bits+0x5a>
 80153ca:	600b      	str	r3, [r1, #0]
 80153cc:	4770      	bx	lr
 80153ce:	4610      	mov	r0, r2
 80153d0:	e7e9      	b.n	80153a6 <__lo0bits+0x2a>
 80153d2:	2000      	movs	r0, #0
 80153d4:	4770      	bx	lr
 80153d6:	2020      	movs	r0, #32
 80153d8:	4770      	bx	lr
	...

080153dc <__i2b>:
 80153dc:	b510      	push	{r4, lr}
 80153de:	460c      	mov	r4, r1
 80153e0:	2101      	movs	r1, #1
 80153e2:	f7ff ff03 	bl	80151ec <_Balloc>
 80153e6:	4602      	mov	r2, r0
 80153e8:	b928      	cbnz	r0, 80153f6 <__i2b+0x1a>
 80153ea:	4b05      	ldr	r3, [pc, #20]	; (8015400 <__i2b+0x24>)
 80153ec:	4805      	ldr	r0, [pc, #20]	; (8015404 <__i2b+0x28>)
 80153ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80153f2:	f000 fdcf 	bl	8015f94 <__assert_func>
 80153f6:	2301      	movs	r3, #1
 80153f8:	6144      	str	r4, [r0, #20]
 80153fa:	6103      	str	r3, [r0, #16]
 80153fc:	bd10      	pop	{r4, pc}
 80153fe:	bf00      	nop
 8015400:	08017b97 	.word	0x08017b97
 8015404:	08017c08 	.word	0x08017c08

08015408 <__multiply>:
 8015408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540c:	4691      	mov	r9, r2
 801540e:	690a      	ldr	r2, [r1, #16]
 8015410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015414:	429a      	cmp	r2, r3
 8015416:	bfb8      	it	lt
 8015418:	460b      	movlt	r3, r1
 801541a:	460c      	mov	r4, r1
 801541c:	bfbc      	itt	lt
 801541e:	464c      	movlt	r4, r9
 8015420:	4699      	movlt	r9, r3
 8015422:	6927      	ldr	r7, [r4, #16]
 8015424:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015428:	68a3      	ldr	r3, [r4, #8]
 801542a:	6861      	ldr	r1, [r4, #4]
 801542c:	eb07 060a 	add.w	r6, r7, sl
 8015430:	42b3      	cmp	r3, r6
 8015432:	b085      	sub	sp, #20
 8015434:	bfb8      	it	lt
 8015436:	3101      	addlt	r1, #1
 8015438:	f7ff fed8 	bl	80151ec <_Balloc>
 801543c:	b930      	cbnz	r0, 801544c <__multiply+0x44>
 801543e:	4602      	mov	r2, r0
 8015440:	4b44      	ldr	r3, [pc, #272]	; (8015554 <__multiply+0x14c>)
 8015442:	4845      	ldr	r0, [pc, #276]	; (8015558 <__multiply+0x150>)
 8015444:	f240 115d 	movw	r1, #349	; 0x15d
 8015448:	f000 fda4 	bl	8015f94 <__assert_func>
 801544c:	f100 0514 	add.w	r5, r0, #20
 8015450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015454:	462b      	mov	r3, r5
 8015456:	2200      	movs	r2, #0
 8015458:	4543      	cmp	r3, r8
 801545a:	d321      	bcc.n	80154a0 <__multiply+0x98>
 801545c:	f104 0314 	add.w	r3, r4, #20
 8015460:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015464:	f109 0314 	add.w	r3, r9, #20
 8015468:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801546c:	9202      	str	r2, [sp, #8]
 801546e:	1b3a      	subs	r2, r7, r4
 8015470:	3a15      	subs	r2, #21
 8015472:	f022 0203 	bic.w	r2, r2, #3
 8015476:	3204      	adds	r2, #4
 8015478:	f104 0115 	add.w	r1, r4, #21
 801547c:	428f      	cmp	r7, r1
 801547e:	bf38      	it	cc
 8015480:	2204      	movcc	r2, #4
 8015482:	9201      	str	r2, [sp, #4]
 8015484:	9a02      	ldr	r2, [sp, #8]
 8015486:	9303      	str	r3, [sp, #12]
 8015488:	429a      	cmp	r2, r3
 801548a:	d80c      	bhi.n	80154a6 <__multiply+0x9e>
 801548c:	2e00      	cmp	r6, #0
 801548e:	dd03      	ble.n	8015498 <__multiply+0x90>
 8015490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015494:	2b00      	cmp	r3, #0
 8015496:	d05a      	beq.n	801554e <__multiply+0x146>
 8015498:	6106      	str	r6, [r0, #16]
 801549a:	b005      	add	sp, #20
 801549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a0:	f843 2b04 	str.w	r2, [r3], #4
 80154a4:	e7d8      	b.n	8015458 <__multiply+0x50>
 80154a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80154aa:	f1ba 0f00 	cmp.w	sl, #0
 80154ae:	d024      	beq.n	80154fa <__multiply+0xf2>
 80154b0:	f104 0e14 	add.w	lr, r4, #20
 80154b4:	46a9      	mov	r9, r5
 80154b6:	f04f 0c00 	mov.w	ip, #0
 80154ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80154be:	f8d9 1000 	ldr.w	r1, [r9]
 80154c2:	fa1f fb82 	uxth.w	fp, r2
 80154c6:	b289      	uxth	r1, r1
 80154c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80154cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80154d0:	f8d9 2000 	ldr.w	r2, [r9]
 80154d4:	4461      	add	r1, ip
 80154d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80154da:	fb0a c20b 	mla	r2, sl, fp, ip
 80154de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80154e2:	b289      	uxth	r1, r1
 80154e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80154e8:	4577      	cmp	r7, lr
 80154ea:	f849 1b04 	str.w	r1, [r9], #4
 80154ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80154f2:	d8e2      	bhi.n	80154ba <__multiply+0xb2>
 80154f4:	9a01      	ldr	r2, [sp, #4]
 80154f6:	f845 c002 	str.w	ip, [r5, r2]
 80154fa:	9a03      	ldr	r2, [sp, #12]
 80154fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015500:	3304      	adds	r3, #4
 8015502:	f1b9 0f00 	cmp.w	r9, #0
 8015506:	d020      	beq.n	801554a <__multiply+0x142>
 8015508:	6829      	ldr	r1, [r5, #0]
 801550a:	f104 0c14 	add.w	ip, r4, #20
 801550e:	46ae      	mov	lr, r5
 8015510:	f04f 0a00 	mov.w	sl, #0
 8015514:	f8bc b000 	ldrh.w	fp, [ip]
 8015518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801551c:	fb09 220b 	mla	r2, r9, fp, r2
 8015520:	4492      	add	sl, r2
 8015522:	b289      	uxth	r1, r1
 8015524:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015528:	f84e 1b04 	str.w	r1, [lr], #4
 801552c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015530:	f8be 1000 	ldrh.w	r1, [lr]
 8015534:	0c12      	lsrs	r2, r2, #16
 8015536:	fb09 1102 	mla	r1, r9, r2, r1
 801553a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801553e:	4567      	cmp	r7, ip
 8015540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015544:	d8e6      	bhi.n	8015514 <__multiply+0x10c>
 8015546:	9a01      	ldr	r2, [sp, #4]
 8015548:	50a9      	str	r1, [r5, r2]
 801554a:	3504      	adds	r5, #4
 801554c:	e79a      	b.n	8015484 <__multiply+0x7c>
 801554e:	3e01      	subs	r6, #1
 8015550:	e79c      	b.n	801548c <__multiply+0x84>
 8015552:	bf00      	nop
 8015554:	08017b97 	.word	0x08017b97
 8015558:	08017c08 	.word	0x08017c08

0801555c <__pow5mult>:
 801555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015560:	4615      	mov	r5, r2
 8015562:	f012 0203 	ands.w	r2, r2, #3
 8015566:	4606      	mov	r6, r0
 8015568:	460f      	mov	r7, r1
 801556a:	d007      	beq.n	801557c <__pow5mult+0x20>
 801556c:	4c25      	ldr	r4, [pc, #148]	; (8015604 <__pow5mult+0xa8>)
 801556e:	3a01      	subs	r2, #1
 8015570:	2300      	movs	r3, #0
 8015572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015576:	f7ff fe9b 	bl	80152b0 <__multadd>
 801557a:	4607      	mov	r7, r0
 801557c:	10ad      	asrs	r5, r5, #2
 801557e:	d03d      	beq.n	80155fc <__pow5mult+0xa0>
 8015580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015582:	b97c      	cbnz	r4, 80155a4 <__pow5mult+0x48>
 8015584:	2010      	movs	r0, #16
 8015586:	f7fd ff27 	bl	80133d8 <malloc>
 801558a:	4602      	mov	r2, r0
 801558c:	6270      	str	r0, [r6, #36]	; 0x24
 801558e:	b928      	cbnz	r0, 801559c <__pow5mult+0x40>
 8015590:	4b1d      	ldr	r3, [pc, #116]	; (8015608 <__pow5mult+0xac>)
 8015592:	481e      	ldr	r0, [pc, #120]	; (801560c <__pow5mult+0xb0>)
 8015594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015598:	f000 fcfc 	bl	8015f94 <__assert_func>
 801559c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80155a0:	6004      	str	r4, [r0, #0]
 80155a2:	60c4      	str	r4, [r0, #12]
 80155a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80155a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80155ac:	b94c      	cbnz	r4, 80155c2 <__pow5mult+0x66>
 80155ae:	f240 2171 	movw	r1, #625	; 0x271
 80155b2:	4630      	mov	r0, r6
 80155b4:	f7ff ff12 	bl	80153dc <__i2b>
 80155b8:	2300      	movs	r3, #0
 80155ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80155be:	4604      	mov	r4, r0
 80155c0:	6003      	str	r3, [r0, #0]
 80155c2:	f04f 0900 	mov.w	r9, #0
 80155c6:	07eb      	lsls	r3, r5, #31
 80155c8:	d50a      	bpl.n	80155e0 <__pow5mult+0x84>
 80155ca:	4639      	mov	r1, r7
 80155cc:	4622      	mov	r2, r4
 80155ce:	4630      	mov	r0, r6
 80155d0:	f7ff ff1a 	bl	8015408 <__multiply>
 80155d4:	4639      	mov	r1, r7
 80155d6:	4680      	mov	r8, r0
 80155d8:	4630      	mov	r0, r6
 80155da:	f7ff fe47 	bl	801526c <_Bfree>
 80155de:	4647      	mov	r7, r8
 80155e0:	106d      	asrs	r5, r5, #1
 80155e2:	d00b      	beq.n	80155fc <__pow5mult+0xa0>
 80155e4:	6820      	ldr	r0, [r4, #0]
 80155e6:	b938      	cbnz	r0, 80155f8 <__pow5mult+0x9c>
 80155e8:	4622      	mov	r2, r4
 80155ea:	4621      	mov	r1, r4
 80155ec:	4630      	mov	r0, r6
 80155ee:	f7ff ff0b 	bl	8015408 <__multiply>
 80155f2:	6020      	str	r0, [r4, #0]
 80155f4:	f8c0 9000 	str.w	r9, [r0]
 80155f8:	4604      	mov	r4, r0
 80155fa:	e7e4      	b.n	80155c6 <__pow5mult+0x6a>
 80155fc:	4638      	mov	r0, r7
 80155fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015602:	bf00      	nop
 8015604:	08017d58 	.word	0x08017d58
 8015608:	08017b25 	.word	0x08017b25
 801560c:	08017c08 	.word	0x08017c08

08015610 <__lshift>:
 8015610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015614:	460c      	mov	r4, r1
 8015616:	6849      	ldr	r1, [r1, #4]
 8015618:	6923      	ldr	r3, [r4, #16]
 801561a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801561e:	68a3      	ldr	r3, [r4, #8]
 8015620:	4607      	mov	r7, r0
 8015622:	4691      	mov	r9, r2
 8015624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015628:	f108 0601 	add.w	r6, r8, #1
 801562c:	42b3      	cmp	r3, r6
 801562e:	db0b      	blt.n	8015648 <__lshift+0x38>
 8015630:	4638      	mov	r0, r7
 8015632:	f7ff fddb 	bl	80151ec <_Balloc>
 8015636:	4605      	mov	r5, r0
 8015638:	b948      	cbnz	r0, 801564e <__lshift+0x3e>
 801563a:	4602      	mov	r2, r0
 801563c:	4b2a      	ldr	r3, [pc, #168]	; (80156e8 <__lshift+0xd8>)
 801563e:	482b      	ldr	r0, [pc, #172]	; (80156ec <__lshift+0xdc>)
 8015640:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015644:	f000 fca6 	bl	8015f94 <__assert_func>
 8015648:	3101      	adds	r1, #1
 801564a:	005b      	lsls	r3, r3, #1
 801564c:	e7ee      	b.n	801562c <__lshift+0x1c>
 801564e:	2300      	movs	r3, #0
 8015650:	f100 0114 	add.w	r1, r0, #20
 8015654:	f100 0210 	add.w	r2, r0, #16
 8015658:	4618      	mov	r0, r3
 801565a:	4553      	cmp	r3, sl
 801565c:	db37      	blt.n	80156ce <__lshift+0xbe>
 801565e:	6920      	ldr	r0, [r4, #16]
 8015660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015664:	f104 0314 	add.w	r3, r4, #20
 8015668:	f019 091f 	ands.w	r9, r9, #31
 801566c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015674:	d02f      	beq.n	80156d6 <__lshift+0xc6>
 8015676:	f1c9 0e20 	rsb	lr, r9, #32
 801567a:	468a      	mov	sl, r1
 801567c:	f04f 0c00 	mov.w	ip, #0
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	fa02 f209 	lsl.w	r2, r2, r9
 8015686:	ea42 020c 	orr.w	r2, r2, ip
 801568a:	f84a 2b04 	str.w	r2, [sl], #4
 801568e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015692:	4298      	cmp	r0, r3
 8015694:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015698:	d8f2      	bhi.n	8015680 <__lshift+0x70>
 801569a:	1b03      	subs	r3, r0, r4
 801569c:	3b15      	subs	r3, #21
 801569e:	f023 0303 	bic.w	r3, r3, #3
 80156a2:	3304      	adds	r3, #4
 80156a4:	f104 0215 	add.w	r2, r4, #21
 80156a8:	4290      	cmp	r0, r2
 80156aa:	bf38      	it	cc
 80156ac:	2304      	movcc	r3, #4
 80156ae:	f841 c003 	str.w	ip, [r1, r3]
 80156b2:	f1bc 0f00 	cmp.w	ip, #0
 80156b6:	d001      	beq.n	80156bc <__lshift+0xac>
 80156b8:	f108 0602 	add.w	r6, r8, #2
 80156bc:	3e01      	subs	r6, #1
 80156be:	4638      	mov	r0, r7
 80156c0:	612e      	str	r6, [r5, #16]
 80156c2:	4621      	mov	r1, r4
 80156c4:	f7ff fdd2 	bl	801526c <_Bfree>
 80156c8:	4628      	mov	r0, r5
 80156ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80156d2:	3301      	adds	r3, #1
 80156d4:	e7c1      	b.n	801565a <__lshift+0x4a>
 80156d6:	3904      	subs	r1, #4
 80156d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80156dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80156e0:	4298      	cmp	r0, r3
 80156e2:	d8f9      	bhi.n	80156d8 <__lshift+0xc8>
 80156e4:	e7ea      	b.n	80156bc <__lshift+0xac>
 80156e6:	bf00      	nop
 80156e8:	08017b97 	.word	0x08017b97
 80156ec:	08017c08 	.word	0x08017c08

080156f0 <__mcmp>:
 80156f0:	b530      	push	{r4, r5, lr}
 80156f2:	6902      	ldr	r2, [r0, #16]
 80156f4:	690c      	ldr	r4, [r1, #16]
 80156f6:	1b12      	subs	r2, r2, r4
 80156f8:	d10e      	bne.n	8015718 <__mcmp+0x28>
 80156fa:	f100 0314 	add.w	r3, r0, #20
 80156fe:	3114      	adds	r1, #20
 8015700:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015708:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801570c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015710:	42a5      	cmp	r5, r4
 8015712:	d003      	beq.n	801571c <__mcmp+0x2c>
 8015714:	d305      	bcc.n	8015722 <__mcmp+0x32>
 8015716:	2201      	movs	r2, #1
 8015718:	4610      	mov	r0, r2
 801571a:	bd30      	pop	{r4, r5, pc}
 801571c:	4283      	cmp	r3, r0
 801571e:	d3f3      	bcc.n	8015708 <__mcmp+0x18>
 8015720:	e7fa      	b.n	8015718 <__mcmp+0x28>
 8015722:	f04f 32ff 	mov.w	r2, #4294967295
 8015726:	e7f7      	b.n	8015718 <__mcmp+0x28>

08015728 <__mdiff>:
 8015728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	460c      	mov	r4, r1
 801572e:	4606      	mov	r6, r0
 8015730:	4611      	mov	r1, r2
 8015732:	4620      	mov	r0, r4
 8015734:	4690      	mov	r8, r2
 8015736:	f7ff ffdb 	bl	80156f0 <__mcmp>
 801573a:	1e05      	subs	r5, r0, #0
 801573c:	d110      	bne.n	8015760 <__mdiff+0x38>
 801573e:	4629      	mov	r1, r5
 8015740:	4630      	mov	r0, r6
 8015742:	f7ff fd53 	bl	80151ec <_Balloc>
 8015746:	b930      	cbnz	r0, 8015756 <__mdiff+0x2e>
 8015748:	4b3a      	ldr	r3, [pc, #232]	; (8015834 <__mdiff+0x10c>)
 801574a:	4602      	mov	r2, r0
 801574c:	f240 2132 	movw	r1, #562	; 0x232
 8015750:	4839      	ldr	r0, [pc, #228]	; (8015838 <__mdiff+0x110>)
 8015752:	f000 fc1f 	bl	8015f94 <__assert_func>
 8015756:	2301      	movs	r3, #1
 8015758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801575c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015760:	bfa4      	itt	ge
 8015762:	4643      	movge	r3, r8
 8015764:	46a0      	movge	r8, r4
 8015766:	4630      	mov	r0, r6
 8015768:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801576c:	bfa6      	itte	ge
 801576e:	461c      	movge	r4, r3
 8015770:	2500      	movge	r5, #0
 8015772:	2501      	movlt	r5, #1
 8015774:	f7ff fd3a 	bl	80151ec <_Balloc>
 8015778:	b920      	cbnz	r0, 8015784 <__mdiff+0x5c>
 801577a:	4b2e      	ldr	r3, [pc, #184]	; (8015834 <__mdiff+0x10c>)
 801577c:	4602      	mov	r2, r0
 801577e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015782:	e7e5      	b.n	8015750 <__mdiff+0x28>
 8015784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015788:	6926      	ldr	r6, [r4, #16]
 801578a:	60c5      	str	r5, [r0, #12]
 801578c:	f104 0914 	add.w	r9, r4, #20
 8015790:	f108 0514 	add.w	r5, r8, #20
 8015794:	f100 0e14 	add.w	lr, r0, #20
 8015798:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801579c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80157a0:	f108 0210 	add.w	r2, r8, #16
 80157a4:	46f2      	mov	sl, lr
 80157a6:	2100      	movs	r1, #0
 80157a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80157ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80157b0:	fa1f f883 	uxth.w	r8, r3
 80157b4:	fa11 f18b 	uxtah	r1, r1, fp
 80157b8:	0c1b      	lsrs	r3, r3, #16
 80157ba:	eba1 0808 	sub.w	r8, r1, r8
 80157be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80157c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80157c6:	fa1f f888 	uxth.w	r8, r8
 80157ca:	1419      	asrs	r1, r3, #16
 80157cc:	454e      	cmp	r6, r9
 80157ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80157d2:	f84a 3b04 	str.w	r3, [sl], #4
 80157d6:	d8e7      	bhi.n	80157a8 <__mdiff+0x80>
 80157d8:	1b33      	subs	r3, r6, r4
 80157da:	3b15      	subs	r3, #21
 80157dc:	f023 0303 	bic.w	r3, r3, #3
 80157e0:	3304      	adds	r3, #4
 80157e2:	3415      	adds	r4, #21
 80157e4:	42a6      	cmp	r6, r4
 80157e6:	bf38      	it	cc
 80157e8:	2304      	movcc	r3, #4
 80157ea:	441d      	add	r5, r3
 80157ec:	4473      	add	r3, lr
 80157ee:	469e      	mov	lr, r3
 80157f0:	462e      	mov	r6, r5
 80157f2:	4566      	cmp	r6, ip
 80157f4:	d30e      	bcc.n	8015814 <__mdiff+0xec>
 80157f6:	f10c 0203 	add.w	r2, ip, #3
 80157fa:	1b52      	subs	r2, r2, r5
 80157fc:	f022 0203 	bic.w	r2, r2, #3
 8015800:	3d03      	subs	r5, #3
 8015802:	45ac      	cmp	ip, r5
 8015804:	bf38      	it	cc
 8015806:	2200      	movcc	r2, #0
 8015808:	441a      	add	r2, r3
 801580a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801580e:	b17b      	cbz	r3, 8015830 <__mdiff+0x108>
 8015810:	6107      	str	r7, [r0, #16]
 8015812:	e7a3      	b.n	801575c <__mdiff+0x34>
 8015814:	f856 8b04 	ldr.w	r8, [r6], #4
 8015818:	fa11 f288 	uxtah	r2, r1, r8
 801581c:	1414      	asrs	r4, r2, #16
 801581e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015822:	b292      	uxth	r2, r2
 8015824:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015828:	f84e 2b04 	str.w	r2, [lr], #4
 801582c:	1421      	asrs	r1, r4, #16
 801582e:	e7e0      	b.n	80157f2 <__mdiff+0xca>
 8015830:	3f01      	subs	r7, #1
 8015832:	e7ea      	b.n	801580a <__mdiff+0xe2>
 8015834:	08017b97 	.word	0x08017b97
 8015838:	08017c08 	.word	0x08017c08

0801583c <__d2b>:
 801583c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015840:	4689      	mov	r9, r1
 8015842:	2101      	movs	r1, #1
 8015844:	ec57 6b10 	vmov	r6, r7, d0
 8015848:	4690      	mov	r8, r2
 801584a:	f7ff fccf 	bl	80151ec <_Balloc>
 801584e:	4604      	mov	r4, r0
 8015850:	b930      	cbnz	r0, 8015860 <__d2b+0x24>
 8015852:	4602      	mov	r2, r0
 8015854:	4b25      	ldr	r3, [pc, #148]	; (80158ec <__d2b+0xb0>)
 8015856:	4826      	ldr	r0, [pc, #152]	; (80158f0 <__d2b+0xb4>)
 8015858:	f240 310a 	movw	r1, #778	; 0x30a
 801585c:	f000 fb9a 	bl	8015f94 <__assert_func>
 8015860:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015868:	bb35      	cbnz	r5, 80158b8 <__d2b+0x7c>
 801586a:	2e00      	cmp	r6, #0
 801586c:	9301      	str	r3, [sp, #4]
 801586e:	d028      	beq.n	80158c2 <__d2b+0x86>
 8015870:	4668      	mov	r0, sp
 8015872:	9600      	str	r6, [sp, #0]
 8015874:	f7ff fd82 	bl	801537c <__lo0bits>
 8015878:	9900      	ldr	r1, [sp, #0]
 801587a:	b300      	cbz	r0, 80158be <__d2b+0x82>
 801587c:	9a01      	ldr	r2, [sp, #4]
 801587e:	f1c0 0320 	rsb	r3, r0, #32
 8015882:	fa02 f303 	lsl.w	r3, r2, r3
 8015886:	430b      	orrs	r3, r1
 8015888:	40c2      	lsrs	r2, r0
 801588a:	6163      	str	r3, [r4, #20]
 801588c:	9201      	str	r2, [sp, #4]
 801588e:	9b01      	ldr	r3, [sp, #4]
 8015890:	61a3      	str	r3, [r4, #24]
 8015892:	2b00      	cmp	r3, #0
 8015894:	bf14      	ite	ne
 8015896:	2202      	movne	r2, #2
 8015898:	2201      	moveq	r2, #1
 801589a:	6122      	str	r2, [r4, #16]
 801589c:	b1d5      	cbz	r5, 80158d4 <__d2b+0x98>
 801589e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80158a2:	4405      	add	r5, r0
 80158a4:	f8c9 5000 	str.w	r5, [r9]
 80158a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80158ac:	f8c8 0000 	str.w	r0, [r8]
 80158b0:	4620      	mov	r0, r4
 80158b2:	b003      	add	sp, #12
 80158b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80158bc:	e7d5      	b.n	801586a <__d2b+0x2e>
 80158be:	6161      	str	r1, [r4, #20]
 80158c0:	e7e5      	b.n	801588e <__d2b+0x52>
 80158c2:	a801      	add	r0, sp, #4
 80158c4:	f7ff fd5a 	bl	801537c <__lo0bits>
 80158c8:	9b01      	ldr	r3, [sp, #4]
 80158ca:	6163      	str	r3, [r4, #20]
 80158cc:	2201      	movs	r2, #1
 80158ce:	6122      	str	r2, [r4, #16]
 80158d0:	3020      	adds	r0, #32
 80158d2:	e7e3      	b.n	801589c <__d2b+0x60>
 80158d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80158d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80158dc:	f8c9 0000 	str.w	r0, [r9]
 80158e0:	6918      	ldr	r0, [r3, #16]
 80158e2:	f7ff fd2b 	bl	801533c <__hi0bits>
 80158e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80158ea:	e7df      	b.n	80158ac <__d2b+0x70>
 80158ec:	08017b97 	.word	0x08017b97
 80158f0:	08017c08 	.word	0x08017c08

080158f4 <_calloc_r>:
 80158f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158f6:	fba1 2402 	umull	r2, r4, r1, r2
 80158fa:	b94c      	cbnz	r4, 8015910 <_calloc_r+0x1c>
 80158fc:	4611      	mov	r1, r2
 80158fe:	9201      	str	r2, [sp, #4]
 8015900:	f7fd fe16 	bl	8013530 <_malloc_r>
 8015904:	9a01      	ldr	r2, [sp, #4]
 8015906:	4605      	mov	r5, r0
 8015908:	b930      	cbnz	r0, 8015918 <_calloc_r+0x24>
 801590a:	4628      	mov	r0, r5
 801590c:	b003      	add	sp, #12
 801590e:	bd30      	pop	{r4, r5, pc}
 8015910:	220c      	movs	r2, #12
 8015912:	6002      	str	r2, [r0, #0]
 8015914:	2500      	movs	r5, #0
 8015916:	e7f8      	b.n	801590a <_calloc_r+0x16>
 8015918:	4621      	mov	r1, r4
 801591a:	f7fd fd95 	bl	8013448 <memset>
 801591e:	e7f4      	b.n	801590a <_calloc_r+0x16>

08015920 <_realloc_r>:
 8015920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015924:	4680      	mov	r8, r0
 8015926:	4614      	mov	r4, r2
 8015928:	460e      	mov	r6, r1
 801592a:	b921      	cbnz	r1, 8015936 <_realloc_r+0x16>
 801592c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015930:	4611      	mov	r1, r2
 8015932:	f7fd bdfd 	b.w	8013530 <_malloc_r>
 8015936:	b92a      	cbnz	r2, 8015944 <_realloc_r+0x24>
 8015938:	f7fd fd8e 	bl	8013458 <_free_r>
 801593c:	4625      	mov	r5, r4
 801593e:	4628      	mov	r0, r5
 8015940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015944:	f000 fbac 	bl	80160a0 <_malloc_usable_size_r>
 8015948:	4284      	cmp	r4, r0
 801594a:	4607      	mov	r7, r0
 801594c:	d802      	bhi.n	8015954 <_realloc_r+0x34>
 801594e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015952:	d812      	bhi.n	801597a <_realloc_r+0x5a>
 8015954:	4621      	mov	r1, r4
 8015956:	4640      	mov	r0, r8
 8015958:	f7fd fdea 	bl	8013530 <_malloc_r>
 801595c:	4605      	mov	r5, r0
 801595e:	2800      	cmp	r0, #0
 8015960:	d0ed      	beq.n	801593e <_realloc_r+0x1e>
 8015962:	42bc      	cmp	r4, r7
 8015964:	4622      	mov	r2, r4
 8015966:	4631      	mov	r1, r6
 8015968:	bf28      	it	cs
 801596a:	463a      	movcs	r2, r7
 801596c:	f7fd fd44 	bl	80133f8 <memcpy>
 8015970:	4631      	mov	r1, r6
 8015972:	4640      	mov	r0, r8
 8015974:	f7fd fd70 	bl	8013458 <_free_r>
 8015978:	e7e1      	b.n	801593e <_realloc_r+0x1e>
 801597a:	4635      	mov	r5, r6
 801597c:	e7df      	b.n	801593e <_realloc_r+0x1e>

0801597e <__ssputs_r>:
 801597e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015982:	688e      	ldr	r6, [r1, #8]
 8015984:	429e      	cmp	r6, r3
 8015986:	4682      	mov	sl, r0
 8015988:	460c      	mov	r4, r1
 801598a:	4690      	mov	r8, r2
 801598c:	461f      	mov	r7, r3
 801598e:	d838      	bhi.n	8015a02 <__ssputs_r+0x84>
 8015990:	898a      	ldrh	r2, [r1, #12]
 8015992:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015996:	d032      	beq.n	80159fe <__ssputs_r+0x80>
 8015998:	6825      	ldr	r5, [r4, #0]
 801599a:	6909      	ldr	r1, [r1, #16]
 801599c:	eba5 0901 	sub.w	r9, r5, r1
 80159a0:	6965      	ldr	r5, [r4, #20]
 80159a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159aa:	3301      	adds	r3, #1
 80159ac:	444b      	add	r3, r9
 80159ae:	106d      	asrs	r5, r5, #1
 80159b0:	429d      	cmp	r5, r3
 80159b2:	bf38      	it	cc
 80159b4:	461d      	movcc	r5, r3
 80159b6:	0553      	lsls	r3, r2, #21
 80159b8:	d531      	bpl.n	8015a1e <__ssputs_r+0xa0>
 80159ba:	4629      	mov	r1, r5
 80159bc:	f7fd fdb8 	bl	8013530 <_malloc_r>
 80159c0:	4606      	mov	r6, r0
 80159c2:	b950      	cbnz	r0, 80159da <__ssputs_r+0x5c>
 80159c4:	230c      	movs	r3, #12
 80159c6:	f8ca 3000 	str.w	r3, [sl]
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159d0:	81a3      	strh	r3, [r4, #12]
 80159d2:	f04f 30ff 	mov.w	r0, #4294967295
 80159d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159da:	6921      	ldr	r1, [r4, #16]
 80159dc:	464a      	mov	r2, r9
 80159de:	f7fd fd0b 	bl	80133f8 <memcpy>
 80159e2:	89a3      	ldrh	r3, [r4, #12]
 80159e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80159e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159ec:	81a3      	strh	r3, [r4, #12]
 80159ee:	6126      	str	r6, [r4, #16]
 80159f0:	6165      	str	r5, [r4, #20]
 80159f2:	444e      	add	r6, r9
 80159f4:	eba5 0509 	sub.w	r5, r5, r9
 80159f8:	6026      	str	r6, [r4, #0]
 80159fa:	60a5      	str	r5, [r4, #8]
 80159fc:	463e      	mov	r6, r7
 80159fe:	42be      	cmp	r6, r7
 8015a00:	d900      	bls.n	8015a04 <__ssputs_r+0x86>
 8015a02:	463e      	mov	r6, r7
 8015a04:	6820      	ldr	r0, [r4, #0]
 8015a06:	4632      	mov	r2, r6
 8015a08:	4641      	mov	r1, r8
 8015a0a:	f7fd fd03 	bl	8013414 <memmove>
 8015a0e:	68a3      	ldr	r3, [r4, #8]
 8015a10:	1b9b      	subs	r3, r3, r6
 8015a12:	60a3      	str	r3, [r4, #8]
 8015a14:	6823      	ldr	r3, [r4, #0]
 8015a16:	4433      	add	r3, r6
 8015a18:	6023      	str	r3, [r4, #0]
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	e7db      	b.n	80159d6 <__ssputs_r+0x58>
 8015a1e:	462a      	mov	r2, r5
 8015a20:	f7ff ff7e 	bl	8015920 <_realloc_r>
 8015a24:	4606      	mov	r6, r0
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d1e1      	bne.n	80159ee <__ssputs_r+0x70>
 8015a2a:	6921      	ldr	r1, [r4, #16]
 8015a2c:	4650      	mov	r0, sl
 8015a2e:	f7fd fd13 	bl	8013458 <_free_r>
 8015a32:	e7c7      	b.n	80159c4 <__ssputs_r+0x46>

08015a34 <_svfiprintf_r>:
 8015a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a38:	4698      	mov	r8, r3
 8015a3a:	898b      	ldrh	r3, [r1, #12]
 8015a3c:	061b      	lsls	r3, r3, #24
 8015a3e:	b09d      	sub	sp, #116	; 0x74
 8015a40:	4607      	mov	r7, r0
 8015a42:	460d      	mov	r5, r1
 8015a44:	4614      	mov	r4, r2
 8015a46:	d50e      	bpl.n	8015a66 <_svfiprintf_r+0x32>
 8015a48:	690b      	ldr	r3, [r1, #16]
 8015a4a:	b963      	cbnz	r3, 8015a66 <_svfiprintf_r+0x32>
 8015a4c:	2140      	movs	r1, #64	; 0x40
 8015a4e:	f7fd fd6f 	bl	8013530 <_malloc_r>
 8015a52:	6028      	str	r0, [r5, #0]
 8015a54:	6128      	str	r0, [r5, #16]
 8015a56:	b920      	cbnz	r0, 8015a62 <_svfiprintf_r+0x2e>
 8015a58:	230c      	movs	r3, #12
 8015a5a:	603b      	str	r3, [r7, #0]
 8015a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a60:	e0d1      	b.n	8015c06 <_svfiprintf_r+0x1d2>
 8015a62:	2340      	movs	r3, #64	; 0x40
 8015a64:	616b      	str	r3, [r5, #20]
 8015a66:	2300      	movs	r3, #0
 8015a68:	9309      	str	r3, [sp, #36]	; 0x24
 8015a6a:	2320      	movs	r3, #32
 8015a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a74:	2330      	movs	r3, #48	; 0x30
 8015a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015c20 <_svfiprintf_r+0x1ec>
 8015a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a7e:	f04f 0901 	mov.w	r9, #1
 8015a82:	4623      	mov	r3, r4
 8015a84:	469a      	mov	sl, r3
 8015a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a8a:	b10a      	cbz	r2, 8015a90 <_svfiprintf_r+0x5c>
 8015a8c:	2a25      	cmp	r2, #37	; 0x25
 8015a8e:	d1f9      	bne.n	8015a84 <_svfiprintf_r+0x50>
 8015a90:	ebba 0b04 	subs.w	fp, sl, r4
 8015a94:	d00b      	beq.n	8015aae <_svfiprintf_r+0x7a>
 8015a96:	465b      	mov	r3, fp
 8015a98:	4622      	mov	r2, r4
 8015a9a:	4629      	mov	r1, r5
 8015a9c:	4638      	mov	r0, r7
 8015a9e:	f7ff ff6e 	bl	801597e <__ssputs_r>
 8015aa2:	3001      	adds	r0, #1
 8015aa4:	f000 80aa 	beq.w	8015bfc <_svfiprintf_r+0x1c8>
 8015aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015aaa:	445a      	add	r2, fp
 8015aac:	9209      	str	r2, [sp, #36]	; 0x24
 8015aae:	f89a 3000 	ldrb.w	r3, [sl]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	f000 80a2 	beq.w	8015bfc <_svfiprintf_r+0x1c8>
 8015ab8:	2300      	movs	r3, #0
 8015aba:	f04f 32ff 	mov.w	r2, #4294967295
 8015abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ac2:	f10a 0a01 	add.w	sl, sl, #1
 8015ac6:	9304      	str	r3, [sp, #16]
 8015ac8:	9307      	str	r3, [sp, #28]
 8015aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ace:	931a      	str	r3, [sp, #104]	; 0x68
 8015ad0:	4654      	mov	r4, sl
 8015ad2:	2205      	movs	r2, #5
 8015ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ad8:	4851      	ldr	r0, [pc, #324]	; (8015c20 <_svfiprintf_r+0x1ec>)
 8015ada:	f7ea fbb9 	bl	8000250 <memchr>
 8015ade:	9a04      	ldr	r2, [sp, #16]
 8015ae0:	b9d8      	cbnz	r0, 8015b1a <_svfiprintf_r+0xe6>
 8015ae2:	06d0      	lsls	r0, r2, #27
 8015ae4:	bf44      	itt	mi
 8015ae6:	2320      	movmi	r3, #32
 8015ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015aec:	0711      	lsls	r1, r2, #28
 8015aee:	bf44      	itt	mi
 8015af0:	232b      	movmi	r3, #43	; 0x2b
 8015af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015af6:	f89a 3000 	ldrb.w	r3, [sl]
 8015afa:	2b2a      	cmp	r3, #42	; 0x2a
 8015afc:	d015      	beq.n	8015b2a <_svfiprintf_r+0xf6>
 8015afe:	9a07      	ldr	r2, [sp, #28]
 8015b00:	4654      	mov	r4, sl
 8015b02:	2000      	movs	r0, #0
 8015b04:	f04f 0c0a 	mov.w	ip, #10
 8015b08:	4621      	mov	r1, r4
 8015b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b0e:	3b30      	subs	r3, #48	; 0x30
 8015b10:	2b09      	cmp	r3, #9
 8015b12:	d94e      	bls.n	8015bb2 <_svfiprintf_r+0x17e>
 8015b14:	b1b0      	cbz	r0, 8015b44 <_svfiprintf_r+0x110>
 8015b16:	9207      	str	r2, [sp, #28]
 8015b18:	e014      	b.n	8015b44 <_svfiprintf_r+0x110>
 8015b1a:	eba0 0308 	sub.w	r3, r0, r8
 8015b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8015b22:	4313      	orrs	r3, r2
 8015b24:	9304      	str	r3, [sp, #16]
 8015b26:	46a2      	mov	sl, r4
 8015b28:	e7d2      	b.n	8015ad0 <_svfiprintf_r+0x9c>
 8015b2a:	9b03      	ldr	r3, [sp, #12]
 8015b2c:	1d19      	adds	r1, r3, #4
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	9103      	str	r1, [sp, #12]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	bfbb      	ittet	lt
 8015b36:	425b      	neglt	r3, r3
 8015b38:	f042 0202 	orrlt.w	r2, r2, #2
 8015b3c:	9307      	strge	r3, [sp, #28]
 8015b3e:	9307      	strlt	r3, [sp, #28]
 8015b40:	bfb8      	it	lt
 8015b42:	9204      	strlt	r2, [sp, #16]
 8015b44:	7823      	ldrb	r3, [r4, #0]
 8015b46:	2b2e      	cmp	r3, #46	; 0x2e
 8015b48:	d10c      	bne.n	8015b64 <_svfiprintf_r+0x130>
 8015b4a:	7863      	ldrb	r3, [r4, #1]
 8015b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8015b4e:	d135      	bne.n	8015bbc <_svfiprintf_r+0x188>
 8015b50:	9b03      	ldr	r3, [sp, #12]
 8015b52:	1d1a      	adds	r2, r3, #4
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	9203      	str	r2, [sp, #12]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	bfb8      	it	lt
 8015b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b60:	3402      	adds	r4, #2
 8015b62:	9305      	str	r3, [sp, #20]
 8015b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015c30 <_svfiprintf_r+0x1fc>
 8015b68:	7821      	ldrb	r1, [r4, #0]
 8015b6a:	2203      	movs	r2, #3
 8015b6c:	4650      	mov	r0, sl
 8015b6e:	f7ea fb6f 	bl	8000250 <memchr>
 8015b72:	b140      	cbz	r0, 8015b86 <_svfiprintf_r+0x152>
 8015b74:	2340      	movs	r3, #64	; 0x40
 8015b76:	eba0 000a 	sub.w	r0, r0, sl
 8015b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8015b7e:	9b04      	ldr	r3, [sp, #16]
 8015b80:	4303      	orrs	r3, r0
 8015b82:	3401      	adds	r4, #1
 8015b84:	9304      	str	r3, [sp, #16]
 8015b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b8a:	4826      	ldr	r0, [pc, #152]	; (8015c24 <_svfiprintf_r+0x1f0>)
 8015b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b90:	2206      	movs	r2, #6
 8015b92:	f7ea fb5d 	bl	8000250 <memchr>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	d038      	beq.n	8015c0c <_svfiprintf_r+0x1d8>
 8015b9a:	4b23      	ldr	r3, [pc, #140]	; (8015c28 <_svfiprintf_r+0x1f4>)
 8015b9c:	bb1b      	cbnz	r3, 8015be6 <_svfiprintf_r+0x1b2>
 8015b9e:	9b03      	ldr	r3, [sp, #12]
 8015ba0:	3307      	adds	r3, #7
 8015ba2:	f023 0307 	bic.w	r3, r3, #7
 8015ba6:	3308      	adds	r3, #8
 8015ba8:	9303      	str	r3, [sp, #12]
 8015baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bac:	4433      	add	r3, r6
 8015bae:	9309      	str	r3, [sp, #36]	; 0x24
 8015bb0:	e767      	b.n	8015a82 <_svfiprintf_r+0x4e>
 8015bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	2001      	movs	r0, #1
 8015bba:	e7a5      	b.n	8015b08 <_svfiprintf_r+0xd4>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	3401      	adds	r4, #1
 8015bc0:	9305      	str	r3, [sp, #20]
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	f04f 0c0a 	mov.w	ip, #10
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bce:	3a30      	subs	r2, #48	; 0x30
 8015bd0:	2a09      	cmp	r2, #9
 8015bd2:	d903      	bls.n	8015bdc <_svfiprintf_r+0x1a8>
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d0c5      	beq.n	8015b64 <_svfiprintf_r+0x130>
 8015bd8:	9105      	str	r1, [sp, #20]
 8015bda:	e7c3      	b.n	8015b64 <_svfiprintf_r+0x130>
 8015bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015be0:	4604      	mov	r4, r0
 8015be2:	2301      	movs	r3, #1
 8015be4:	e7f0      	b.n	8015bc8 <_svfiprintf_r+0x194>
 8015be6:	ab03      	add	r3, sp, #12
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	462a      	mov	r2, r5
 8015bec:	4b0f      	ldr	r3, [pc, #60]	; (8015c2c <_svfiprintf_r+0x1f8>)
 8015bee:	a904      	add	r1, sp, #16
 8015bf0:	4638      	mov	r0, r7
 8015bf2:	f7fd fda1 	bl	8013738 <_printf_float>
 8015bf6:	1c42      	adds	r2, r0, #1
 8015bf8:	4606      	mov	r6, r0
 8015bfa:	d1d6      	bne.n	8015baa <_svfiprintf_r+0x176>
 8015bfc:	89ab      	ldrh	r3, [r5, #12]
 8015bfe:	065b      	lsls	r3, r3, #25
 8015c00:	f53f af2c 	bmi.w	8015a5c <_svfiprintf_r+0x28>
 8015c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c06:	b01d      	add	sp, #116	; 0x74
 8015c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c0c:	ab03      	add	r3, sp, #12
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	462a      	mov	r2, r5
 8015c12:	4b06      	ldr	r3, [pc, #24]	; (8015c2c <_svfiprintf_r+0x1f8>)
 8015c14:	a904      	add	r1, sp, #16
 8015c16:	4638      	mov	r0, r7
 8015c18:	f7fe f81a 	bl	8013c50 <_printf_i>
 8015c1c:	e7eb      	b.n	8015bf6 <_svfiprintf_r+0x1c2>
 8015c1e:	bf00      	nop
 8015c20:	08017d64 	.word	0x08017d64
 8015c24:	08017d6e 	.word	0x08017d6e
 8015c28:	08013739 	.word	0x08013739
 8015c2c:	0801597f 	.word	0x0801597f
 8015c30:	08017d6a 	.word	0x08017d6a

08015c34 <__sfputc_r>:
 8015c34:	6893      	ldr	r3, [r2, #8]
 8015c36:	3b01      	subs	r3, #1
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	b410      	push	{r4}
 8015c3c:	6093      	str	r3, [r2, #8]
 8015c3e:	da08      	bge.n	8015c52 <__sfputc_r+0x1e>
 8015c40:	6994      	ldr	r4, [r2, #24]
 8015c42:	42a3      	cmp	r3, r4
 8015c44:	db01      	blt.n	8015c4a <__sfputc_r+0x16>
 8015c46:	290a      	cmp	r1, #10
 8015c48:	d103      	bne.n	8015c52 <__sfputc_r+0x1e>
 8015c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c4e:	f7fe b9e3 	b.w	8014018 <__swbuf_r>
 8015c52:	6813      	ldr	r3, [r2, #0]
 8015c54:	1c58      	adds	r0, r3, #1
 8015c56:	6010      	str	r0, [r2, #0]
 8015c58:	7019      	strb	r1, [r3, #0]
 8015c5a:	4608      	mov	r0, r1
 8015c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c60:	4770      	bx	lr

08015c62 <__sfputs_r>:
 8015c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c64:	4606      	mov	r6, r0
 8015c66:	460f      	mov	r7, r1
 8015c68:	4614      	mov	r4, r2
 8015c6a:	18d5      	adds	r5, r2, r3
 8015c6c:	42ac      	cmp	r4, r5
 8015c6e:	d101      	bne.n	8015c74 <__sfputs_r+0x12>
 8015c70:	2000      	movs	r0, #0
 8015c72:	e007      	b.n	8015c84 <__sfputs_r+0x22>
 8015c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c78:	463a      	mov	r2, r7
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f7ff ffda 	bl	8015c34 <__sfputc_r>
 8015c80:	1c43      	adds	r3, r0, #1
 8015c82:	d1f3      	bne.n	8015c6c <__sfputs_r+0xa>
 8015c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c88 <_vfiprintf_r>:
 8015c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8c:	460d      	mov	r5, r1
 8015c8e:	b09d      	sub	sp, #116	; 0x74
 8015c90:	4614      	mov	r4, r2
 8015c92:	4698      	mov	r8, r3
 8015c94:	4606      	mov	r6, r0
 8015c96:	b118      	cbz	r0, 8015ca0 <_vfiprintf_r+0x18>
 8015c98:	6983      	ldr	r3, [r0, #24]
 8015c9a:	b90b      	cbnz	r3, 8015ca0 <_vfiprintf_r+0x18>
 8015c9c:	f7ff f990 	bl	8014fc0 <__sinit>
 8015ca0:	4b89      	ldr	r3, [pc, #548]	; (8015ec8 <_vfiprintf_r+0x240>)
 8015ca2:	429d      	cmp	r5, r3
 8015ca4:	d11b      	bne.n	8015cde <_vfiprintf_r+0x56>
 8015ca6:	6875      	ldr	r5, [r6, #4]
 8015ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015caa:	07d9      	lsls	r1, r3, #31
 8015cac:	d405      	bmi.n	8015cba <_vfiprintf_r+0x32>
 8015cae:	89ab      	ldrh	r3, [r5, #12]
 8015cb0:	059a      	lsls	r2, r3, #22
 8015cb2:	d402      	bmi.n	8015cba <_vfiprintf_r+0x32>
 8015cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cb6:	f7ff fa26 	bl	8015106 <__retarget_lock_acquire_recursive>
 8015cba:	89ab      	ldrh	r3, [r5, #12]
 8015cbc:	071b      	lsls	r3, r3, #28
 8015cbe:	d501      	bpl.n	8015cc4 <_vfiprintf_r+0x3c>
 8015cc0:	692b      	ldr	r3, [r5, #16]
 8015cc2:	b9eb      	cbnz	r3, 8015d00 <_vfiprintf_r+0x78>
 8015cc4:	4629      	mov	r1, r5
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	f7fe f9f8 	bl	80140bc <__swsetup_r>
 8015ccc:	b1c0      	cbz	r0, 8015d00 <_vfiprintf_r+0x78>
 8015cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015cd0:	07dc      	lsls	r4, r3, #31
 8015cd2:	d50e      	bpl.n	8015cf2 <_vfiprintf_r+0x6a>
 8015cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd8:	b01d      	add	sp, #116	; 0x74
 8015cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cde:	4b7b      	ldr	r3, [pc, #492]	; (8015ecc <_vfiprintf_r+0x244>)
 8015ce0:	429d      	cmp	r5, r3
 8015ce2:	d101      	bne.n	8015ce8 <_vfiprintf_r+0x60>
 8015ce4:	68b5      	ldr	r5, [r6, #8]
 8015ce6:	e7df      	b.n	8015ca8 <_vfiprintf_r+0x20>
 8015ce8:	4b79      	ldr	r3, [pc, #484]	; (8015ed0 <_vfiprintf_r+0x248>)
 8015cea:	429d      	cmp	r5, r3
 8015cec:	bf08      	it	eq
 8015cee:	68f5      	ldreq	r5, [r6, #12]
 8015cf0:	e7da      	b.n	8015ca8 <_vfiprintf_r+0x20>
 8015cf2:	89ab      	ldrh	r3, [r5, #12]
 8015cf4:	0598      	lsls	r0, r3, #22
 8015cf6:	d4ed      	bmi.n	8015cd4 <_vfiprintf_r+0x4c>
 8015cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cfa:	f7ff fa05 	bl	8015108 <__retarget_lock_release_recursive>
 8015cfe:	e7e9      	b.n	8015cd4 <_vfiprintf_r+0x4c>
 8015d00:	2300      	movs	r3, #0
 8015d02:	9309      	str	r3, [sp, #36]	; 0x24
 8015d04:	2320      	movs	r3, #32
 8015d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d0e:	2330      	movs	r3, #48	; 0x30
 8015d10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ed4 <_vfiprintf_r+0x24c>
 8015d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d18:	f04f 0901 	mov.w	r9, #1
 8015d1c:	4623      	mov	r3, r4
 8015d1e:	469a      	mov	sl, r3
 8015d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d24:	b10a      	cbz	r2, 8015d2a <_vfiprintf_r+0xa2>
 8015d26:	2a25      	cmp	r2, #37	; 0x25
 8015d28:	d1f9      	bne.n	8015d1e <_vfiprintf_r+0x96>
 8015d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8015d2e:	d00b      	beq.n	8015d48 <_vfiprintf_r+0xc0>
 8015d30:	465b      	mov	r3, fp
 8015d32:	4622      	mov	r2, r4
 8015d34:	4629      	mov	r1, r5
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7ff ff93 	bl	8015c62 <__sfputs_r>
 8015d3c:	3001      	adds	r0, #1
 8015d3e:	f000 80aa 	beq.w	8015e96 <_vfiprintf_r+0x20e>
 8015d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d44:	445a      	add	r2, fp
 8015d46:	9209      	str	r2, [sp, #36]	; 0x24
 8015d48:	f89a 3000 	ldrb.w	r3, [sl]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f000 80a2 	beq.w	8015e96 <_vfiprintf_r+0x20e>
 8015d52:	2300      	movs	r3, #0
 8015d54:	f04f 32ff 	mov.w	r2, #4294967295
 8015d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d5c:	f10a 0a01 	add.w	sl, sl, #1
 8015d60:	9304      	str	r3, [sp, #16]
 8015d62:	9307      	str	r3, [sp, #28]
 8015d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d68:	931a      	str	r3, [sp, #104]	; 0x68
 8015d6a:	4654      	mov	r4, sl
 8015d6c:	2205      	movs	r2, #5
 8015d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d72:	4858      	ldr	r0, [pc, #352]	; (8015ed4 <_vfiprintf_r+0x24c>)
 8015d74:	f7ea fa6c 	bl	8000250 <memchr>
 8015d78:	9a04      	ldr	r2, [sp, #16]
 8015d7a:	b9d8      	cbnz	r0, 8015db4 <_vfiprintf_r+0x12c>
 8015d7c:	06d1      	lsls	r1, r2, #27
 8015d7e:	bf44      	itt	mi
 8015d80:	2320      	movmi	r3, #32
 8015d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d86:	0713      	lsls	r3, r2, #28
 8015d88:	bf44      	itt	mi
 8015d8a:	232b      	movmi	r3, #43	; 0x2b
 8015d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d90:	f89a 3000 	ldrb.w	r3, [sl]
 8015d94:	2b2a      	cmp	r3, #42	; 0x2a
 8015d96:	d015      	beq.n	8015dc4 <_vfiprintf_r+0x13c>
 8015d98:	9a07      	ldr	r2, [sp, #28]
 8015d9a:	4654      	mov	r4, sl
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	f04f 0c0a 	mov.w	ip, #10
 8015da2:	4621      	mov	r1, r4
 8015da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015da8:	3b30      	subs	r3, #48	; 0x30
 8015daa:	2b09      	cmp	r3, #9
 8015dac:	d94e      	bls.n	8015e4c <_vfiprintf_r+0x1c4>
 8015dae:	b1b0      	cbz	r0, 8015dde <_vfiprintf_r+0x156>
 8015db0:	9207      	str	r2, [sp, #28]
 8015db2:	e014      	b.n	8015dde <_vfiprintf_r+0x156>
 8015db4:	eba0 0308 	sub.w	r3, r0, r8
 8015db8:	fa09 f303 	lsl.w	r3, r9, r3
 8015dbc:	4313      	orrs	r3, r2
 8015dbe:	9304      	str	r3, [sp, #16]
 8015dc0:	46a2      	mov	sl, r4
 8015dc2:	e7d2      	b.n	8015d6a <_vfiprintf_r+0xe2>
 8015dc4:	9b03      	ldr	r3, [sp, #12]
 8015dc6:	1d19      	adds	r1, r3, #4
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	9103      	str	r1, [sp, #12]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	bfbb      	ittet	lt
 8015dd0:	425b      	neglt	r3, r3
 8015dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8015dd6:	9307      	strge	r3, [sp, #28]
 8015dd8:	9307      	strlt	r3, [sp, #28]
 8015dda:	bfb8      	it	lt
 8015ddc:	9204      	strlt	r2, [sp, #16]
 8015dde:	7823      	ldrb	r3, [r4, #0]
 8015de0:	2b2e      	cmp	r3, #46	; 0x2e
 8015de2:	d10c      	bne.n	8015dfe <_vfiprintf_r+0x176>
 8015de4:	7863      	ldrb	r3, [r4, #1]
 8015de6:	2b2a      	cmp	r3, #42	; 0x2a
 8015de8:	d135      	bne.n	8015e56 <_vfiprintf_r+0x1ce>
 8015dea:	9b03      	ldr	r3, [sp, #12]
 8015dec:	1d1a      	adds	r2, r3, #4
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	9203      	str	r2, [sp, #12]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	bfb8      	it	lt
 8015df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8015dfa:	3402      	adds	r4, #2
 8015dfc:	9305      	str	r3, [sp, #20]
 8015dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015ee4 <_vfiprintf_r+0x25c>
 8015e02:	7821      	ldrb	r1, [r4, #0]
 8015e04:	2203      	movs	r2, #3
 8015e06:	4650      	mov	r0, sl
 8015e08:	f7ea fa22 	bl	8000250 <memchr>
 8015e0c:	b140      	cbz	r0, 8015e20 <_vfiprintf_r+0x198>
 8015e0e:	2340      	movs	r3, #64	; 0x40
 8015e10:	eba0 000a 	sub.w	r0, r0, sl
 8015e14:	fa03 f000 	lsl.w	r0, r3, r0
 8015e18:	9b04      	ldr	r3, [sp, #16]
 8015e1a:	4303      	orrs	r3, r0
 8015e1c:	3401      	adds	r4, #1
 8015e1e:	9304      	str	r3, [sp, #16]
 8015e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e24:	482c      	ldr	r0, [pc, #176]	; (8015ed8 <_vfiprintf_r+0x250>)
 8015e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e2a:	2206      	movs	r2, #6
 8015e2c:	f7ea fa10 	bl	8000250 <memchr>
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d03f      	beq.n	8015eb4 <_vfiprintf_r+0x22c>
 8015e34:	4b29      	ldr	r3, [pc, #164]	; (8015edc <_vfiprintf_r+0x254>)
 8015e36:	bb1b      	cbnz	r3, 8015e80 <_vfiprintf_r+0x1f8>
 8015e38:	9b03      	ldr	r3, [sp, #12]
 8015e3a:	3307      	adds	r3, #7
 8015e3c:	f023 0307 	bic.w	r3, r3, #7
 8015e40:	3308      	adds	r3, #8
 8015e42:	9303      	str	r3, [sp, #12]
 8015e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e46:	443b      	add	r3, r7
 8015e48:	9309      	str	r3, [sp, #36]	; 0x24
 8015e4a:	e767      	b.n	8015d1c <_vfiprintf_r+0x94>
 8015e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e50:	460c      	mov	r4, r1
 8015e52:	2001      	movs	r0, #1
 8015e54:	e7a5      	b.n	8015da2 <_vfiprintf_r+0x11a>
 8015e56:	2300      	movs	r3, #0
 8015e58:	3401      	adds	r4, #1
 8015e5a:	9305      	str	r3, [sp, #20]
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	f04f 0c0a 	mov.w	ip, #10
 8015e62:	4620      	mov	r0, r4
 8015e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e68:	3a30      	subs	r2, #48	; 0x30
 8015e6a:	2a09      	cmp	r2, #9
 8015e6c:	d903      	bls.n	8015e76 <_vfiprintf_r+0x1ee>
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d0c5      	beq.n	8015dfe <_vfiprintf_r+0x176>
 8015e72:	9105      	str	r1, [sp, #20]
 8015e74:	e7c3      	b.n	8015dfe <_vfiprintf_r+0x176>
 8015e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e7f0      	b.n	8015e62 <_vfiprintf_r+0x1da>
 8015e80:	ab03      	add	r3, sp, #12
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	462a      	mov	r2, r5
 8015e86:	4b16      	ldr	r3, [pc, #88]	; (8015ee0 <_vfiprintf_r+0x258>)
 8015e88:	a904      	add	r1, sp, #16
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	f7fd fc54 	bl	8013738 <_printf_float>
 8015e90:	4607      	mov	r7, r0
 8015e92:	1c78      	adds	r0, r7, #1
 8015e94:	d1d6      	bne.n	8015e44 <_vfiprintf_r+0x1bc>
 8015e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e98:	07d9      	lsls	r1, r3, #31
 8015e9a:	d405      	bmi.n	8015ea8 <_vfiprintf_r+0x220>
 8015e9c:	89ab      	ldrh	r3, [r5, #12]
 8015e9e:	059a      	lsls	r2, r3, #22
 8015ea0:	d402      	bmi.n	8015ea8 <_vfiprintf_r+0x220>
 8015ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ea4:	f7ff f930 	bl	8015108 <__retarget_lock_release_recursive>
 8015ea8:	89ab      	ldrh	r3, [r5, #12]
 8015eaa:	065b      	lsls	r3, r3, #25
 8015eac:	f53f af12 	bmi.w	8015cd4 <_vfiprintf_r+0x4c>
 8015eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015eb2:	e711      	b.n	8015cd8 <_vfiprintf_r+0x50>
 8015eb4:	ab03      	add	r3, sp, #12
 8015eb6:	9300      	str	r3, [sp, #0]
 8015eb8:	462a      	mov	r2, r5
 8015eba:	4b09      	ldr	r3, [pc, #36]	; (8015ee0 <_vfiprintf_r+0x258>)
 8015ebc:	a904      	add	r1, sp, #16
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	f7fd fec6 	bl	8013c50 <_printf_i>
 8015ec4:	e7e4      	b.n	8015e90 <_vfiprintf_r+0x208>
 8015ec6:	bf00      	nop
 8015ec8:	08017bc8 	.word	0x08017bc8
 8015ecc:	08017be8 	.word	0x08017be8
 8015ed0:	08017ba8 	.word	0x08017ba8
 8015ed4:	08017d64 	.word	0x08017d64
 8015ed8:	08017d6e 	.word	0x08017d6e
 8015edc:	08013739 	.word	0x08013739
 8015ee0:	08015c63 	.word	0x08015c63
 8015ee4:	08017d6a 	.word	0x08017d6a

08015ee8 <__sread>:
 8015ee8:	b510      	push	{r4, lr}
 8015eea:	460c      	mov	r4, r1
 8015eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ef0:	f000 f8de 	bl	80160b0 <_read_r>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	bfab      	itete	ge
 8015ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015efa:	89a3      	ldrhlt	r3, [r4, #12]
 8015efc:	181b      	addge	r3, r3, r0
 8015efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015f02:	bfac      	ite	ge
 8015f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8015f06:	81a3      	strhlt	r3, [r4, #12]
 8015f08:	bd10      	pop	{r4, pc}

08015f0a <__swrite>:
 8015f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f0e:	461f      	mov	r7, r3
 8015f10:	898b      	ldrh	r3, [r1, #12]
 8015f12:	05db      	lsls	r3, r3, #23
 8015f14:	4605      	mov	r5, r0
 8015f16:	460c      	mov	r4, r1
 8015f18:	4616      	mov	r6, r2
 8015f1a:	d505      	bpl.n	8015f28 <__swrite+0x1e>
 8015f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f20:	2302      	movs	r3, #2
 8015f22:	2200      	movs	r2, #0
 8015f24:	f000 f898 	bl	8016058 <_lseek_r>
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f32:	81a3      	strh	r3, [r4, #12]
 8015f34:	4632      	mov	r2, r6
 8015f36:	463b      	mov	r3, r7
 8015f38:	4628      	mov	r0, r5
 8015f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f3e:	f000 b817 	b.w	8015f70 <_write_r>

08015f42 <__sseek>:
 8015f42:	b510      	push	{r4, lr}
 8015f44:	460c      	mov	r4, r1
 8015f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f4a:	f000 f885 	bl	8016058 <_lseek_r>
 8015f4e:	1c43      	adds	r3, r0, #1
 8015f50:	89a3      	ldrh	r3, [r4, #12]
 8015f52:	bf15      	itete	ne
 8015f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8015f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015f5e:	81a3      	strheq	r3, [r4, #12]
 8015f60:	bf18      	it	ne
 8015f62:	81a3      	strhne	r3, [r4, #12]
 8015f64:	bd10      	pop	{r4, pc}

08015f66 <__sclose>:
 8015f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f6a:	f000 b831 	b.w	8015fd0 <_close_r>
	...

08015f70 <_write_r>:
 8015f70:	b538      	push	{r3, r4, r5, lr}
 8015f72:	4d07      	ldr	r5, [pc, #28]	; (8015f90 <_write_r+0x20>)
 8015f74:	4604      	mov	r4, r0
 8015f76:	4608      	mov	r0, r1
 8015f78:	4611      	mov	r1, r2
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	602a      	str	r2, [r5, #0]
 8015f7e:	461a      	mov	r2, r3
 8015f80:	f000 fb6e 	bl	8016660 <_write>
 8015f84:	1c43      	adds	r3, r0, #1
 8015f86:	d102      	bne.n	8015f8e <_write_r+0x1e>
 8015f88:	682b      	ldr	r3, [r5, #0]
 8015f8a:	b103      	cbz	r3, 8015f8e <_write_r+0x1e>
 8015f8c:	6023      	str	r3, [r4, #0]
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
 8015f90:	2000142c 	.word	0x2000142c

08015f94 <__assert_func>:
 8015f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f96:	4614      	mov	r4, r2
 8015f98:	461a      	mov	r2, r3
 8015f9a:	4b09      	ldr	r3, [pc, #36]	; (8015fc0 <__assert_func+0x2c>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	4605      	mov	r5, r0
 8015fa0:	68d8      	ldr	r0, [r3, #12]
 8015fa2:	b14c      	cbz	r4, 8015fb8 <__assert_func+0x24>
 8015fa4:	4b07      	ldr	r3, [pc, #28]	; (8015fc4 <__assert_func+0x30>)
 8015fa6:	9100      	str	r1, [sp, #0]
 8015fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015fac:	4906      	ldr	r1, [pc, #24]	; (8015fc8 <__assert_func+0x34>)
 8015fae:	462b      	mov	r3, r5
 8015fb0:	f000 f81e 	bl	8015ff0 <fiprintf>
 8015fb4:	f000 f89b 	bl	80160ee <abort>
 8015fb8:	4b04      	ldr	r3, [pc, #16]	; (8015fcc <__assert_func+0x38>)
 8015fba:	461c      	mov	r4, r3
 8015fbc:	e7f3      	b.n	8015fa6 <__assert_func+0x12>
 8015fbe:	bf00      	nop
 8015fc0:	20000dac 	.word	0x20000dac
 8015fc4:	08017d75 	.word	0x08017d75
 8015fc8:	08017d82 	.word	0x08017d82
 8015fcc:	08017db0 	.word	0x08017db0

08015fd0 <_close_r>:
 8015fd0:	b538      	push	{r3, r4, r5, lr}
 8015fd2:	4d06      	ldr	r5, [pc, #24]	; (8015fec <_close_r+0x1c>)
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	4604      	mov	r4, r0
 8015fd8:	4608      	mov	r0, r1
 8015fda:	602b      	str	r3, [r5, #0]
 8015fdc:	f000 fb08 	bl	80165f0 <_close>
 8015fe0:	1c43      	adds	r3, r0, #1
 8015fe2:	d102      	bne.n	8015fea <_close_r+0x1a>
 8015fe4:	682b      	ldr	r3, [r5, #0]
 8015fe6:	b103      	cbz	r3, 8015fea <_close_r+0x1a>
 8015fe8:	6023      	str	r3, [r4, #0]
 8015fea:	bd38      	pop	{r3, r4, r5, pc}
 8015fec:	2000142c 	.word	0x2000142c

08015ff0 <fiprintf>:
 8015ff0:	b40e      	push	{r1, r2, r3}
 8015ff2:	b503      	push	{r0, r1, lr}
 8015ff4:	4601      	mov	r1, r0
 8015ff6:	ab03      	add	r3, sp, #12
 8015ff8:	4805      	ldr	r0, [pc, #20]	; (8016010 <fiprintf+0x20>)
 8015ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ffe:	6800      	ldr	r0, [r0, #0]
 8016000:	9301      	str	r3, [sp, #4]
 8016002:	f7ff fe41 	bl	8015c88 <_vfiprintf_r>
 8016006:	b002      	add	sp, #8
 8016008:	f85d eb04 	ldr.w	lr, [sp], #4
 801600c:	b003      	add	sp, #12
 801600e:	4770      	bx	lr
 8016010:	20000dac 	.word	0x20000dac

08016014 <_fstat_r>:
 8016014:	b538      	push	{r3, r4, r5, lr}
 8016016:	4d07      	ldr	r5, [pc, #28]	; (8016034 <_fstat_r+0x20>)
 8016018:	2300      	movs	r3, #0
 801601a:	4604      	mov	r4, r0
 801601c:	4608      	mov	r0, r1
 801601e:	4611      	mov	r1, r2
 8016020:	602b      	str	r3, [r5, #0]
 8016022:	f000 faed 	bl	8016600 <_fstat>
 8016026:	1c43      	adds	r3, r0, #1
 8016028:	d102      	bne.n	8016030 <_fstat_r+0x1c>
 801602a:	682b      	ldr	r3, [r5, #0]
 801602c:	b103      	cbz	r3, 8016030 <_fstat_r+0x1c>
 801602e:	6023      	str	r3, [r4, #0]
 8016030:	bd38      	pop	{r3, r4, r5, pc}
 8016032:	bf00      	nop
 8016034:	2000142c 	.word	0x2000142c

08016038 <_isatty_r>:
 8016038:	b538      	push	{r3, r4, r5, lr}
 801603a:	4d06      	ldr	r5, [pc, #24]	; (8016054 <_isatty_r+0x1c>)
 801603c:	2300      	movs	r3, #0
 801603e:	4604      	mov	r4, r0
 8016040:	4608      	mov	r0, r1
 8016042:	602b      	str	r3, [r5, #0]
 8016044:	f000 faec 	bl	8016620 <_isatty>
 8016048:	1c43      	adds	r3, r0, #1
 801604a:	d102      	bne.n	8016052 <_isatty_r+0x1a>
 801604c:	682b      	ldr	r3, [r5, #0]
 801604e:	b103      	cbz	r3, 8016052 <_isatty_r+0x1a>
 8016050:	6023      	str	r3, [r4, #0]
 8016052:	bd38      	pop	{r3, r4, r5, pc}
 8016054:	2000142c 	.word	0x2000142c

08016058 <_lseek_r>:
 8016058:	b538      	push	{r3, r4, r5, lr}
 801605a:	4d07      	ldr	r5, [pc, #28]	; (8016078 <_lseek_r+0x20>)
 801605c:	4604      	mov	r4, r0
 801605e:	4608      	mov	r0, r1
 8016060:	4611      	mov	r1, r2
 8016062:	2200      	movs	r2, #0
 8016064:	602a      	str	r2, [r5, #0]
 8016066:	461a      	mov	r2, r3
 8016068:	f000 faea 	bl	8016640 <_lseek>
 801606c:	1c43      	adds	r3, r0, #1
 801606e:	d102      	bne.n	8016076 <_lseek_r+0x1e>
 8016070:	682b      	ldr	r3, [r5, #0]
 8016072:	b103      	cbz	r3, 8016076 <_lseek_r+0x1e>
 8016074:	6023      	str	r3, [r4, #0]
 8016076:	bd38      	pop	{r3, r4, r5, pc}
 8016078:	2000142c 	.word	0x2000142c

0801607c <__ascii_mbtowc>:
 801607c:	b082      	sub	sp, #8
 801607e:	b901      	cbnz	r1, 8016082 <__ascii_mbtowc+0x6>
 8016080:	a901      	add	r1, sp, #4
 8016082:	b142      	cbz	r2, 8016096 <__ascii_mbtowc+0x1a>
 8016084:	b14b      	cbz	r3, 801609a <__ascii_mbtowc+0x1e>
 8016086:	7813      	ldrb	r3, [r2, #0]
 8016088:	600b      	str	r3, [r1, #0]
 801608a:	7812      	ldrb	r2, [r2, #0]
 801608c:	1e10      	subs	r0, r2, #0
 801608e:	bf18      	it	ne
 8016090:	2001      	movne	r0, #1
 8016092:	b002      	add	sp, #8
 8016094:	4770      	bx	lr
 8016096:	4610      	mov	r0, r2
 8016098:	e7fb      	b.n	8016092 <__ascii_mbtowc+0x16>
 801609a:	f06f 0001 	mvn.w	r0, #1
 801609e:	e7f8      	b.n	8016092 <__ascii_mbtowc+0x16>

080160a0 <_malloc_usable_size_r>:
 80160a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160a4:	1f18      	subs	r0, r3, #4
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	bfbc      	itt	lt
 80160aa:	580b      	ldrlt	r3, [r1, r0]
 80160ac:	18c0      	addlt	r0, r0, r3
 80160ae:	4770      	bx	lr

080160b0 <_read_r>:
 80160b0:	b538      	push	{r3, r4, r5, lr}
 80160b2:	4d07      	ldr	r5, [pc, #28]	; (80160d0 <_read_r+0x20>)
 80160b4:	4604      	mov	r4, r0
 80160b6:	4608      	mov	r0, r1
 80160b8:	4611      	mov	r1, r2
 80160ba:	2200      	movs	r2, #0
 80160bc:	602a      	str	r2, [r5, #0]
 80160be:	461a      	mov	r2, r3
 80160c0:	f000 fac6 	bl	8016650 <_read>
 80160c4:	1c43      	adds	r3, r0, #1
 80160c6:	d102      	bne.n	80160ce <_read_r+0x1e>
 80160c8:	682b      	ldr	r3, [r5, #0]
 80160ca:	b103      	cbz	r3, 80160ce <_read_r+0x1e>
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	bd38      	pop	{r3, r4, r5, pc}
 80160d0:	2000142c 	.word	0x2000142c

080160d4 <__ascii_wctomb>:
 80160d4:	b149      	cbz	r1, 80160ea <__ascii_wctomb+0x16>
 80160d6:	2aff      	cmp	r2, #255	; 0xff
 80160d8:	bf85      	ittet	hi
 80160da:	238a      	movhi	r3, #138	; 0x8a
 80160dc:	6003      	strhi	r3, [r0, #0]
 80160de:	700a      	strbls	r2, [r1, #0]
 80160e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80160e4:	bf98      	it	ls
 80160e6:	2001      	movls	r0, #1
 80160e8:	4770      	bx	lr
 80160ea:	4608      	mov	r0, r1
 80160ec:	4770      	bx	lr

080160ee <abort>:
 80160ee:	b508      	push	{r3, lr}
 80160f0:	2006      	movs	r0, #6
 80160f2:	f000 f82b 	bl	801614c <raise>
 80160f6:	2001      	movs	r0, #1
 80160f8:	f000 faba 	bl	8016670 <_exit>

080160fc <_raise_r>:
 80160fc:	291f      	cmp	r1, #31
 80160fe:	b538      	push	{r3, r4, r5, lr}
 8016100:	4604      	mov	r4, r0
 8016102:	460d      	mov	r5, r1
 8016104:	d904      	bls.n	8016110 <_raise_r+0x14>
 8016106:	2316      	movs	r3, #22
 8016108:	6003      	str	r3, [r0, #0]
 801610a:	f04f 30ff 	mov.w	r0, #4294967295
 801610e:	bd38      	pop	{r3, r4, r5, pc}
 8016110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016112:	b112      	cbz	r2, 801611a <_raise_r+0x1e>
 8016114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016118:	b94b      	cbnz	r3, 801612e <_raise_r+0x32>
 801611a:	4620      	mov	r0, r4
 801611c:	f000 f830 	bl	8016180 <_getpid_r>
 8016120:	462a      	mov	r2, r5
 8016122:	4601      	mov	r1, r0
 8016124:	4620      	mov	r0, r4
 8016126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801612a:	f000 b817 	b.w	801615c <_kill_r>
 801612e:	2b01      	cmp	r3, #1
 8016130:	d00a      	beq.n	8016148 <_raise_r+0x4c>
 8016132:	1c59      	adds	r1, r3, #1
 8016134:	d103      	bne.n	801613e <_raise_r+0x42>
 8016136:	2316      	movs	r3, #22
 8016138:	6003      	str	r3, [r0, #0]
 801613a:	2001      	movs	r0, #1
 801613c:	e7e7      	b.n	801610e <_raise_r+0x12>
 801613e:	2400      	movs	r4, #0
 8016140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016144:	4628      	mov	r0, r5
 8016146:	4798      	blx	r3
 8016148:	2000      	movs	r0, #0
 801614a:	e7e0      	b.n	801610e <_raise_r+0x12>

0801614c <raise>:
 801614c:	4b02      	ldr	r3, [pc, #8]	; (8016158 <raise+0xc>)
 801614e:	4601      	mov	r1, r0
 8016150:	6818      	ldr	r0, [r3, #0]
 8016152:	f7ff bfd3 	b.w	80160fc <_raise_r>
 8016156:	bf00      	nop
 8016158:	20000dac 	.word	0x20000dac

0801615c <_kill_r>:
 801615c:	b538      	push	{r3, r4, r5, lr}
 801615e:	4d07      	ldr	r5, [pc, #28]	; (801617c <_kill_r+0x20>)
 8016160:	2300      	movs	r3, #0
 8016162:	4604      	mov	r4, r0
 8016164:	4608      	mov	r0, r1
 8016166:	4611      	mov	r1, r2
 8016168:	602b      	str	r3, [r5, #0]
 801616a:	f000 fa61 	bl	8016630 <_kill>
 801616e:	1c43      	adds	r3, r0, #1
 8016170:	d102      	bne.n	8016178 <_kill_r+0x1c>
 8016172:	682b      	ldr	r3, [r5, #0]
 8016174:	b103      	cbz	r3, 8016178 <_kill_r+0x1c>
 8016176:	6023      	str	r3, [r4, #0]
 8016178:	bd38      	pop	{r3, r4, r5, pc}
 801617a:	bf00      	nop
 801617c:	2000142c 	.word	0x2000142c

08016180 <_getpid_r>:
 8016180:	f000 ba46 	b.w	8016610 <_getpid>

08016184 <with_errnof>:
 8016184:	b513      	push	{r0, r1, r4, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	ed8d 0a01 	vstr	s0, [sp, #4]
 801618c:	f7fd f8fa 	bl	8013384 <__errno>
 8016190:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016194:	6004      	str	r4, [r0, #0]
 8016196:	b002      	add	sp, #8
 8016198:	bd10      	pop	{r4, pc}

0801619a <xflowf>:
 801619a:	b130      	cbz	r0, 80161aa <xflowf+0x10>
 801619c:	eef1 7a40 	vneg.f32	s15, s0
 80161a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80161a4:	2022      	movs	r0, #34	; 0x22
 80161a6:	f7ff bfed 	b.w	8016184 <with_errnof>
 80161aa:	eef0 7a40 	vmov.f32	s15, s0
 80161ae:	e7f7      	b.n	80161a0 <xflowf+0x6>

080161b0 <__math_uflowf>:
 80161b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161b8 <__math_uflowf+0x8>
 80161b4:	f7ff bff1 	b.w	801619a <xflowf>
 80161b8:	10000000 	.word	0x10000000

080161bc <__math_may_uflowf>:
 80161bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161c4 <__math_may_uflowf+0x8>
 80161c0:	f7ff bfeb 	b.w	801619a <xflowf>
 80161c4:	1a200000 	.word	0x1a200000

080161c8 <__math_oflowf>:
 80161c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161d0 <__math_oflowf+0x8>
 80161cc:	f7ff bfe5 	b.w	801619a <xflowf>
 80161d0:	70000000 	.word	0x70000000

080161d4 <__math_divzerof>:
 80161d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80161d8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80161dc:	2800      	cmp	r0, #0
 80161de:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80161e2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80161f0 <__math_divzerof+0x1c>
 80161e6:	2022      	movs	r0, #34	; 0x22
 80161e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80161ec:	f7ff bfca 	b.w	8016184 <with_errnof>
 80161f0:	00000000 	.word	0x00000000

080161f4 <__math_invalidf>:
 80161f4:	eef0 7a40 	vmov.f32	s15, s0
 80161f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80161fc:	eef4 7a67 	vcmp.f32	s15, s15
 8016200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016204:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016208:	d602      	bvs.n	8016210 <__math_invalidf+0x1c>
 801620a:	2021      	movs	r0, #33	; 0x21
 801620c:	f7ff bfba 	b.w	8016184 <with_errnof>
 8016210:	4770      	bx	lr
	...

08016214 <expf>:
 8016214:	ee10 2a10 	vmov	r2, s0
 8016218:	f240 412a 	movw	r1, #1066	; 0x42a
 801621c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8016220:	428b      	cmp	r3, r1
 8016222:	b430      	push	{r4, r5}
 8016224:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016228:	d92a      	bls.n	8016280 <expf+0x6c>
 801622a:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801622e:	d058      	beq.n	80162e2 <expf+0xce>
 8016230:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8016234:	d303      	bcc.n	801623e <expf+0x2a>
 8016236:	ee30 0a00 	vadd.f32	s0, s0, s0
 801623a:	bc30      	pop	{r4, r5}
 801623c:	4770      	bx	lr
 801623e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80162e8 <expf+0xd4>
 8016242:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801624a:	dd03      	ble.n	8016254 <expf+0x40>
 801624c:	bc30      	pop	{r4, r5}
 801624e:	2000      	movs	r0, #0
 8016250:	f7ff bfba 	b.w	80161c8 <__math_oflowf>
 8016254:	eddf 7a25 	vldr	s15, [pc, #148]	; 80162ec <expf+0xd8>
 8016258:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016260:	d503      	bpl.n	801626a <expf+0x56>
 8016262:	bc30      	pop	{r4, r5}
 8016264:	2000      	movs	r0, #0
 8016266:	f7ff bfa3 	b.w	80161b0 <__math_uflowf>
 801626a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80162f0 <expf+0xdc>
 801626e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	d503      	bpl.n	8016280 <expf+0x6c>
 8016278:	bc30      	pop	{r4, r5}
 801627a:	2000      	movs	r0, #0
 801627c:	f7ff bf9e 	b.w	80161bc <__math_may_uflowf>
 8016280:	4b1c      	ldr	r3, [pc, #112]	; (80162f4 <expf+0xe0>)
 8016282:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016286:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801628a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801628e:	eeb0 7b44 	vmov.f64	d7, d4
 8016292:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016296:	ee17 0a10 	vmov	r0, s14
 801629a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801629e:	f000 021f 	and.w	r2, r0, #31
 80162a2:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80162a6:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 80162aa:	ee27 4b07 	vmul.f64	d4, d7, d7
 80162ae:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 80162b2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80162b6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80162ba:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80162be:	684d      	ldr	r5, [r1, #4]
 80162c0:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80162c4:	2100      	movs	r1, #0
 80162c6:	190a      	adds	r2, r1, r4
 80162c8:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80162cc:	eea5 0b07 	vfma.f64	d0, d5, d7
 80162d0:	ec43 2b17 	vmov	d7, r2, r3
 80162d4:	eea6 0b04 	vfma.f64	d0, d6, d4
 80162d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80162dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80162e0:	e7ab      	b.n	801623a <expf+0x26>
 80162e2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80162f8 <expf+0xe4>
 80162e6:	e7a8      	b.n	801623a <expf+0x26>
 80162e8:	42b17217 	.word	0x42b17217
 80162ec:	c2cff1b4 	.word	0xc2cff1b4
 80162f0:	c2ce8ecf 	.word	0xc2ce8ecf
 80162f4:	08017ec0 	.word	0x08017ec0
 80162f8:	00000000 	.word	0x00000000

080162fc <checkint>:
 80162fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016300:	2b7e      	cmp	r3, #126	; 0x7e
 8016302:	dd10      	ble.n	8016326 <checkint+0x2a>
 8016304:	2b96      	cmp	r3, #150	; 0x96
 8016306:	dc0c      	bgt.n	8016322 <checkint+0x26>
 8016308:	2201      	movs	r2, #1
 801630a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801630e:	fa02 f303 	lsl.w	r3, r2, r3
 8016312:	1e5a      	subs	r2, r3, #1
 8016314:	4202      	tst	r2, r0
 8016316:	d106      	bne.n	8016326 <checkint+0x2a>
 8016318:	4203      	tst	r3, r0
 801631a:	bf0c      	ite	eq
 801631c:	2002      	moveq	r0, #2
 801631e:	2001      	movne	r0, #1
 8016320:	4770      	bx	lr
 8016322:	2002      	movs	r0, #2
 8016324:	4770      	bx	lr
 8016326:	2000      	movs	r0, #0
 8016328:	4770      	bx	lr
 801632a:	0000      	movs	r0, r0
 801632c:	0000      	movs	r0, r0
	...

08016330 <powf>:
 8016330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016332:	ee10 1a10 	vmov	r1, s0
 8016336:	ee10 4a90 	vmov	r4, s1
 801633a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801633e:	0062      	lsls	r2, r4, #1
 8016340:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016344:	eef0 7a40 	vmov.f32	s15, s0
 8016348:	f102 30ff 	add.w	r0, r2, #4294967295
 801634c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8016350:	d252      	bcs.n	80163f8 <powf+0xc8>
 8016352:	4298      	cmp	r0, r3
 8016354:	d252      	bcs.n	80163fc <powf+0xcc>
 8016356:	2000      	movs	r0, #0
 8016358:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801635c:	4ca0      	ldr	r4, [pc, #640]	; (80165e0 <powf+0x2b0>)
 801635e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8016362:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8016366:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801636a:	0dd2      	lsrs	r2, r2, #23
 801636c:	05d2      	lsls	r2, r2, #23
 801636e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8016372:	1a8b      	subs	r3, r1, r2
 8016374:	ed95 6b00 	vldr	d6, [r5]
 8016378:	ee07 3a90 	vmov	s15, r3
 801637c:	15d2      	asrs	r2, r2, #23
 801637e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016382:	eea6 5b07 	vfma.f64	d5, d6, d7
 8016386:	ed95 6b02 	vldr	d6, [r5, #8]
 801638a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801638e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8016392:	ee07 2a90 	vmov	s15, r2
 8016396:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801639a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801639e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80163a2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80163a6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80163aa:	eea5 3b06 	vfma.f64	d3, d5, d6
 80163ae:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80163b2:	eea5 6b04 	vfma.f64	d6, d5, d4
 80163b6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80163ba:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80163be:	eea5 7b04 	vfma.f64	d7, d5, d4
 80163c2:	eea2 7b06 	vfma.f64	d7, d2, d6
 80163c6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80163ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 80163ce:	ee10 3a90 	vmov	r3, s1
 80163d2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80163d6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80163da:	429a      	cmp	r2, r3
 80163dc:	f0c0 80b1 	bcc.w	8016542 <powf+0x212>
 80163e0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80165c0 <powf+0x290>
 80163e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80163e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ec:	dd79      	ble.n	80164e2 <powf+0x1b2>
 80163ee:	b003      	add	sp, #12
 80163f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163f4:	f7ff bee8 	b.w	80161c8 <__math_oflowf>
 80163f8:	4298      	cmp	r0, r3
 80163fa:	d32d      	bcc.n	8016458 <powf+0x128>
 80163fc:	b952      	cbnz	r2, 8016414 <powf+0xe4>
 80163fe:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8016408:	f240 80c9 	bls.w	801659e <powf+0x26e>
 801640c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8016410:	b003      	add	sp, #12
 8016412:	bd30      	pop	{r4, r5, pc}
 8016414:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8016418:	d105      	bne.n	8016426 <powf+0xf6>
 801641a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801641e:	0064      	lsls	r4, r4, #1
 8016420:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8016424:	e7f0      	b.n	8016408 <powf+0xd8>
 8016426:	004b      	lsls	r3, r1, #1
 8016428:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801642c:	d8ee      	bhi.n	801640c <powf+0xdc>
 801642e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016432:	d1eb      	bne.n	801640c <powf+0xdc>
 8016434:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016438:	f000 80b1 	beq.w	801659e <powf+0x26e>
 801643c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016440:	ea6f 0404 	mvn.w	r4, r4
 8016444:	bf34      	ite	cc
 8016446:	2300      	movcc	r3, #0
 8016448:	2301      	movcs	r3, #1
 801644a:	0fe4      	lsrs	r4, r4, #31
 801644c:	42a3      	cmp	r3, r4
 801644e:	f040 80a9 	bne.w	80165a4 <powf+0x274>
 8016452:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8016456:	e7db      	b.n	8016410 <powf+0xe0>
 8016458:	004d      	lsls	r5, r1, #1
 801645a:	1e6a      	subs	r2, r5, #1
 801645c:	429a      	cmp	r2, r3
 801645e:	d31c      	bcc.n	801649a <powf+0x16a>
 8016460:	2900      	cmp	r1, #0
 8016462:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016466:	da0f      	bge.n	8016488 <powf+0x158>
 8016468:	ee10 0a90 	vmov	r0, s1
 801646c:	f7ff ff46 	bl	80162fc <checkint>
 8016470:	2801      	cmp	r0, #1
 8016472:	d109      	bne.n	8016488 <powf+0x158>
 8016474:	eeb1 0a40 	vneg.f32	s0, s0
 8016478:	b945      	cbnz	r5, 801648c <powf+0x15c>
 801647a:	2c00      	cmp	r4, #0
 801647c:	dac8      	bge.n	8016410 <powf+0xe0>
 801647e:	b003      	add	sp, #12
 8016480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016484:	f7ff bea6 	b.w	80161d4 <__math_divzerof>
 8016488:	2000      	movs	r0, #0
 801648a:	e7f5      	b.n	8016478 <powf+0x148>
 801648c:	2c00      	cmp	r4, #0
 801648e:	dabf      	bge.n	8016410 <powf+0xe0>
 8016490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016494:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016498:	e7ba      	b.n	8016410 <powf+0xe0>
 801649a:	2900      	cmp	r1, #0
 801649c:	da1f      	bge.n	80164de <powf+0x1ae>
 801649e:	ee10 0a90 	vmov	r0, s1
 80164a2:	f7ff ff2b 	bl	80162fc <checkint>
 80164a6:	b920      	cbnz	r0, 80164b2 <powf+0x182>
 80164a8:	b003      	add	sp, #12
 80164aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164ae:	f7ff bea1 	b.w	80161f4 <__math_invalidf>
 80164b2:	2801      	cmp	r0, #1
 80164b4:	bf14      	ite	ne
 80164b6:	2000      	movne	r0, #0
 80164b8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80164bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80164c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80164c4:	f4bf af48 	bcs.w	8016358 <powf+0x28>
 80164c8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80165e4 <powf+0x2b4>
 80164cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80164d0:	ee10 3a10 	vmov	r3, s0
 80164d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164d8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80164dc:	e73c      	b.n	8016358 <powf+0x28>
 80164de:	2000      	movs	r0, #0
 80164e0:	e7ee      	b.n	80164c0 <powf+0x190>
 80164e2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80165c8 <powf+0x298>
 80164e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80164ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ee:	dd10      	ble.n	8016512 <powf+0x1e2>
 80164f0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d158      	bne.n	80165aa <powf+0x27a>
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	eddd 7a00 	vldr	s15, [sp]
 80164fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016506:	eef4 7a47 	vcmp.f32	s15, s14
 801650a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650e:	f47f af6e 	bne.w	80163ee <powf+0xbe>
 8016512:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80165d0 <powf+0x2a0>
 8016516:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801651e:	d804      	bhi.n	801652a <powf+0x1fa>
 8016520:	b003      	add	sp, #12
 8016522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016526:	f7ff be43 	b.w	80161b0 <__math_uflowf>
 801652a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80165d8 <powf+0x2a8>
 801652e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016536:	d504      	bpl.n	8016542 <powf+0x212>
 8016538:	b003      	add	sp, #12
 801653a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801653e:	f7ff be3d 	b.w	80161bc <__math_may_uflowf>
 8016542:	4b29      	ldr	r3, [pc, #164]	; (80165e8 <powf+0x2b8>)
 8016544:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8016548:	ee30 6b07 	vadd.f64	d6, d0, d7
 801654c:	ee16 2a10 	vmov	r2, s12
 8016550:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016554:	f002 011f 	and.w	r1, r2, #31
 8016558:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801655c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8016560:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016564:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8016568:	ee27 4b07 	vmul.f64	d4, d7, d7
 801656c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8016570:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8016574:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016578:	686d      	ldr	r5, [r5, #4]
 801657a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801657e:	1882      	adds	r2, r0, r2
 8016580:	2300      	movs	r3, #0
 8016582:	1918      	adds	r0, r3, r4
 8016584:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8016588:	eea7 0b05 	vfma.f64	d0, d7, d5
 801658c:	ec41 0b17 	vmov	d7, r0, r1
 8016590:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016594:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016598:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801659c:	e738      	b.n	8016410 <powf+0xe0>
 801659e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80165a2:	e735      	b.n	8016410 <powf+0xe0>
 80165a4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80165ec <powf+0x2bc>
 80165a8:	e732      	b.n	8016410 <powf+0xe0>
 80165aa:	9301      	str	r3, [sp, #4]
 80165ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80165b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80165b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165b8:	e7a5      	b.n	8016506 <powf+0x1d6>
 80165ba:	bf00      	nop
 80165bc:	f3af 8000 	nop.w
 80165c0:	ffd1d571 	.word	0xffd1d571
 80165c4:	405fffff 	.word	0x405fffff
 80165c8:	ffa3aae2 	.word	0xffa3aae2
 80165cc:	405fffff 	.word	0x405fffff
 80165d0:	00000000 	.word	0x00000000
 80165d4:	c062c000 	.word	0xc062c000
 80165d8:	00000000 	.word	0x00000000
 80165dc:	c062a000 	.word	0xc062a000
 80165e0:	08018008 	.word	0x08018008
 80165e4:	4b000000 	.word	0x4b000000
 80165e8:	08017ec0 	.word	0x08017ec0
 80165ec:	00000000 	.word	0x00000000

080165f0 <_close>:
 80165f0:	4b02      	ldr	r3, [pc, #8]	; (80165fc <_close+0xc>)
 80165f2:	2258      	movs	r2, #88	; 0x58
 80165f4:	601a      	str	r2, [r3, #0]
 80165f6:	f04f 30ff 	mov.w	r0, #4294967295
 80165fa:	4770      	bx	lr
 80165fc:	2000142c 	.word	0x2000142c

08016600 <_fstat>:
 8016600:	4b02      	ldr	r3, [pc, #8]	; (801660c <_fstat+0xc>)
 8016602:	2258      	movs	r2, #88	; 0x58
 8016604:	601a      	str	r2, [r3, #0]
 8016606:	f04f 30ff 	mov.w	r0, #4294967295
 801660a:	4770      	bx	lr
 801660c:	2000142c 	.word	0x2000142c

08016610 <_getpid>:
 8016610:	4b02      	ldr	r3, [pc, #8]	; (801661c <_getpid+0xc>)
 8016612:	2258      	movs	r2, #88	; 0x58
 8016614:	601a      	str	r2, [r3, #0]
 8016616:	f04f 30ff 	mov.w	r0, #4294967295
 801661a:	4770      	bx	lr
 801661c:	2000142c 	.word	0x2000142c

08016620 <_isatty>:
 8016620:	4b02      	ldr	r3, [pc, #8]	; (801662c <_isatty+0xc>)
 8016622:	2258      	movs	r2, #88	; 0x58
 8016624:	601a      	str	r2, [r3, #0]
 8016626:	2000      	movs	r0, #0
 8016628:	4770      	bx	lr
 801662a:	bf00      	nop
 801662c:	2000142c 	.word	0x2000142c

08016630 <_kill>:
 8016630:	4b02      	ldr	r3, [pc, #8]	; (801663c <_kill+0xc>)
 8016632:	2258      	movs	r2, #88	; 0x58
 8016634:	601a      	str	r2, [r3, #0]
 8016636:	f04f 30ff 	mov.w	r0, #4294967295
 801663a:	4770      	bx	lr
 801663c:	2000142c 	.word	0x2000142c

08016640 <_lseek>:
 8016640:	4b02      	ldr	r3, [pc, #8]	; (801664c <_lseek+0xc>)
 8016642:	2258      	movs	r2, #88	; 0x58
 8016644:	601a      	str	r2, [r3, #0]
 8016646:	f04f 30ff 	mov.w	r0, #4294967295
 801664a:	4770      	bx	lr
 801664c:	2000142c 	.word	0x2000142c

08016650 <_read>:
 8016650:	4b02      	ldr	r3, [pc, #8]	; (801665c <_read+0xc>)
 8016652:	2258      	movs	r2, #88	; 0x58
 8016654:	601a      	str	r2, [r3, #0]
 8016656:	f04f 30ff 	mov.w	r0, #4294967295
 801665a:	4770      	bx	lr
 801665c:	2000142c 	.word	0x2000142c

08016660 <_write>:
 8016660:	4b02      	ldr	r3, [pc, #8]	; (801666c <_write+0xc>)
 8016662:	2258      	movs	r2, #88	; 0x58
 8016664:	601a      	str	r2, [r3, #0]
 8016666:	f04f 30ff 	mov.w	r0, #4294967295
 801666a:	4770      	bx	lr
 801666c:	2000142c 	.word	0x2000142c

08016670 <_exit>:
 8016670:	e7fe      	b.n	8016670 <_exit>
	...

08016674 <_init>:
 8016674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016676:	bf00      	nop
 8016678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801667a:	bc08      	pop	{r3}
 801667c:	469e      	mov	lr, r3
 801667e:	4770      	bx	lr

08016680 <_fini>:
 8016680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016682:	bf00      	nop
 8016684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016686:	bc08      	pop	{r3}
 8016688:	469e      	mov	lr, r3
 801668a:	4770      	bx	lr
